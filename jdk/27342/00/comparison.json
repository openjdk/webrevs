{"files":[{"filename":"test\/jdk\/javax\/management\/security\/keystoreAgent","binary":true,"status":"modified"},{"filename":"test\/jdk\/javax\/management\/security\/keystoreClient","binary":true,"status":"modified"},{"filename":"test\/jdk\/javax\/management\/security\/truststoreAgent","binary":true,"status":"modified"},{"filename":"test\/jdk\/javax\/management\/security\/truststoreClient","binary":true,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @test\n+ * @test id=tls12\n@@ -34,1 +34,3 @@\n- * @run main\/othervm CriticalSubjectAltName\n+ * @library \/test\/lib\n+ * @modules java.base\/sun.security.x509 java.base\/sun.security.util\n+ * @run main\/othervm CriticalSubjectAltName TLSv1.2 MD5withRSA\n@@ -38,0 +40,1 @@\n+\n@@ -39,10 +42,8 @@\n- * This test depends on binary keystore, crisubn.jks and trusted.jks. Because\n- * JAVA keytool cannot generate X509 certificate with SubjectAltName extension,\n- * the certificates are generated with openssl toolkits and then imported into\n- * JAVA keystore.\n- *\n- * The crisubn.jks holds a private key entry and the corresponding X509\n- * certificate issued with an empty Subject field, and a critical\n- * SubjectAltName extension.\n- *\n- * The trusted.jks holds the trusted certificate.\n+ * @test id=tls13\n+ * @bug 6668231\n+ * @summary Presence of a critical subjectAltName causes JSSE's SunX509 to\n+ *          fail trusted checks\n+ * @library \/test\/lib\n+ * @modules java.base\/sun.security.x509 java.base\/sun.security.util\n+ * @run main\/othervm CriticalSubjectAltName TLSv1.3 SHA256withRSA\n+ * @author Xuelei Fan\n@@ -50,3 +51,26 @@\n-import java.io.*;\n-import java.net.*;\n-import javax.net.ssl.*;\n+\n+\n+import jdk.test.lib.security.CertificateBuilder;\n+import sun.security.x509.GeneralName;\n+import sun.security.x509.GeneralNames;\n+import sun.security.x509.OIDName;\n+import sun.security.x509.RFC822Name;\n+import sun.security.x509.SubjectAlternativeNameExtension;\n+\n+\n+import javax.net.ssl.HostnameVerifier;\n+import javax.net.ssl.HttpsURLConnection;\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLServerSocket;\n+import javax.net.ssl.SSLServerSocketFactory;\n+import javax.net.ssl.SSLSession;\n+import javax.net.ssl.SSLSocket;\n+import javax.net.ssl.TrustManagerFactory;\n+import java.io.BufferedWriter;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.net.URL;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.KeyStore;\n@@ -55,0 +79,3 @@\n+import java.security.cert.X509Certificate;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n@@ -73,4 +100,1 @@\n-    static String pathToStores = \".\/\";\n-    static String keyStoreFile = \"crisubn.jks\";\n-    static String trustStoreFile = \"trusted.jks\";\n-    static String passwd = \"passphrase\";\n+    public static final char[] PASSPHRASE = \"passphrase\".toCharArray();\n@@ -81,1 +105,2 @@\n-    volatile static boolean serverReady = false;\n+    private final CountDownLatch serverReady = new CountDownLatch(1);\n+    private final int SERVER_WAIT_SECS = 10;\n@@ -86,1 +111,1 @@\n-    static boolean debug = false;\n+    static boolean debug = Boolean.getBoolean(\"test.debug\");\n@@ -104,2 +129,2 @@\n-        SSLServerSocketFactory sslssf =\n-            (SSLServerSocketFactory) SSLServerSocketFactory.getDefault();\n+        SSLContext ctx = createServerContext();\n+        SSLServerSocketFactory sslssf = ctx.getServerSocketFactory();\n@@ -108,1 +133,1 @@\n-        sslServerSocket.setEnabledProtocols(new String[]{\"TLSv1.2\"});\n+        sslServerSocket.setEnabledProtocols(new String[]{protocol});\n@@ -114,1 +139,1 @@\n-        serverReady = true;\n+        serverReady.countDown();\n@@ -125,0 +150,30 @@\n+    private SSLContext createServerContext() throws Exception {\n+        KeyStore ks = KeyStore.getInstance(\"PKCS12\");\n+        ks.load(null, null);\n+        ks.setCertificateEntry(\"Trusted Cert\", trustedCert);\n+\n+        Certificate[] chain = new Certificate[] {serverCert, trustedCert};\n+        ks.setKeyEntry(\"Server key\", serverKeys.getPrivate(),\n+                PASSPHRASE, chain);\n+\n+        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"PKIX\");\n+        tmf.init(ks);\n+\n+        SSLContext ctx = SSLContext.getInstance(protocol);\n+        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n+        kmf.init(ks, PASSPHRASE);\n+        ctx.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\n+        return ctx;\n+    }\n+\n+    private SSLContext createClientContext() throws Exception {\n+        KeyStore ks = KeyStore.getInstance(\"PKCS12\");\n+        ks.load(null, null);\n+        ks.setCertificateEntry(\"Trusted Cert\", trustedCert);\n+        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"PKIX\");\n+        tmf.init(ks);\n+        SSLContext ctx = SSLContext.getInstance(protocol);\n+        ctx.init(null, tmf.getTrustManagers(), null);\n+        return ctx;\n+    }\n+\n@@ -133,5 +188,3 @@\n-        \/*\n-         * Wait for server to get started.\n-         *\/\n-        while (!serverReady) {\n-            Thread.sleep(50);\n+        if (!serverReady.await(SERVER_WAIT_SECS, TimeUnit.SECONDS)) {\n+            throw new RuntimeException(\"Server did not start within \" +\n+                    SERVER_WAIT_SECS + \" seconds.\");\n@@ -140,0 +193,1 @@\n+        SSLContext ctx = createClientContext();\n@@ -142,0 +196,1 @@\n+        urlc.setSSLSocketFactory(ctx.getSocketFactory());\n@@ -162,19 +217,9 @@\n-        \/\/ MD5 is used in this test case, don't disable MD5 algorithm.\n-        Security.setProperty(\"jdk.certpath.disabledAlgorithms\",\n-                \"MD2, RSA keySize < 1024\");\n-        Security.setProperty(\"jdk.tls.disabledAlgorithms\",\n-                \"SSLv3, RC4, DH keySize < 768\");\n-\n-        String keyFilename =\n-            System.getProperty(\"test.src\", \".\/\") + \"\/\" + pathToStores +\n-                \"\/\" + keyStoreFile;\n-        String trustFilename =\n-            System.getProperty(\"test.src\", \".\/\") + \"\/\" + pathToStores +\n-                \"\/\" + trustStoreFile;\n-\n-        System.setProperty(\"javax.net.ssl.keyStore\", keyFilename);\n-        System.setProperty(\"javax.net.ssl.keyStorePassword\", passwd);\n-        System.setProperty(\"javax.net.ssl.trustStore\", trustFilename);\n-        System.setProperty(\"javax.net.ssl.trustStorePassword\", passwd);\n-\n-        if (debug)\n+        if (args[1].contains(\"MD5\")) {\n+            \/\/ MD5 is used in this test case, don't disable MD5 algorithm.\n+            Security.setProperty(\"jdk.certpath.disabledAlgorithms\",\n+                    \"MD2, RSA keySize < 1024\");\n+            Security.setProperty(\"jdk.tls.disabledAlgorithms\",\n+                    \"SSLv3, RC4, DH keySize < 768\");\n+        }\n+\n+        if (debug) {\n@@ -182,0 +227,1 @@\n+        }\n@@ -186,1 +232,1 @@\n-        new CriticalSubjectAltName();\n+        new CriticalSubjectAltName(args[0], args[1]);\n@@ -191,0 +237,38 @@\n+    private final String protocol;\n+    private KeyPair serverKeys;\n+    private X509Certificate trustedCert;\n+    private X509Certificate serverCert;\n+\n+    private void setupCertificates(String signatureAlg) throws Exception {\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\");\n+        KeyPair caKeys = kpg.generateKeyPair();\n+        serverKeys = kpg.generateKeyPair();\n+\n+        trustedCert = CertificateBuilder.newCertificateBuilder(\n+            \"CN=Someone, O=Some Org, ST=Some-State, C=US\",\n+                caKeys.getPublic(), caKeys.getPublic())\n+                .addBasicConstraintsExt(true, true, -1)\n+                .setOneHourValidity()\n+                .build(null, caKeys.getPrivate(), signatureAlg);\n+        if (debug) {\n+            System.out.println(\"Trusted Certificate\");\n+            CertificateBuilder.printCertificate(trustedCert, System.out);\n+        }\n+\n+        GeneralNames gns = new GeneralNames();\n+        gns.add(new GeneralName(new RFC822Name(\"example@openjdk.net\")));\n+        gns.add(new GeneralName(new OIDName(\"1.2.3.4\")));\n+\n+        serverCert = CertificateBuilder.newCertificateBuilder(\"\",\n+                serverKeys.getPublic(), caKeys.getPublic())\n+                .setOneHourValidity()\n+                .addBasicConstraintsExt(false, false, -1)\n+                .addExtension(new SubjectAlternativeNameExtension(true, gns))\n+                .setOneHourValidity()\n+                .build(trustedCert, caKeys.getPrivate(), signatureAlg);\n+        if (debug) {\n+            System.out.println(\"Server Certificate\");\n+            CertificateBuilder.printCertificate(serverCert, System.out);\n+        }\n+    }\n+\n@@ -197,1 +281,5 @@\n-    CriticalSubjectAltName() throws Exception {\n+    CriticalSubjectAltName(String protocol, String signatureAlg) throws Exception {\n+        this.protocol = protocol;\n+\n+        setupCertificates(signatureAlg);\n+\n@@ -241,1 +329,1 @@\n-                        serverReady = true;\n+                        serverReady.countDown();\n","filename":"test\/jdk\/javax\/net\/ssl\/HttpsURLConnection\/CriticalSubjectAltName.java","additions":140,"deletions":52,"binary":false,"changes":192,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-\/* @test\n+\/* @test id=tls12\n@@ -32,1 +32,2 @@\n- * @run main\/othervm DNSIdentities\n+ * @library \/test\/lib\n+ * @run main\/othervm DNSIdentities TLSv1.2 MD5withRSA\n@@ -36,366 +37,6 @@\n-import java.net.*;\n-import java.util.*;\n-import java.io.*;\n-import javax.net.ssl.*;\n-import java.security.Security;\n-import java.security.KeyStore;\n-import java.security.KeyFactory;\n-import java.security.cert.Certificate;\n-import java.security.cert.CertificateFactory;\n-import java.security.spec.*;\n-import java.security.interfaces.*;\n-import java.math.BigInteger;\n-\n-\/*\n- * Certificates and key used in the test.\n- *\n- * TLS server certificate:\n- * server private key:\n- * -----BEGIN RSA PRIVATE KEY-----\n- * Proc-Type: 4,ENCRYPTED\n- * DEK-Info: DES-EDE3-CBC,D9AE407F6D0E389A\n- *\n- * WPrA7TFol\/cQCcp9oHnXWNpYlvRbbIcQj0m+RKT2Iuzfus+DHt3Zadf8nJpKfX2e\n- * h2rnhlzCN9M7djRDooZKDOPCsdBn51Au7HlZF3S3Opgo7D8XFM1a8t1Je4ke14oI\n- * nw6QKYsBblRziPnP2PZ0zvX24nOv7bbY8beynlJHGs00VWSFdoH2DS0aE1p6D+3n\n- * ptJuJ75dVfZFK4X7162APlNXevX8D6PEQpSiRw1rjjGGcnvQ4HdWk3BxDVDcCNJb\n- * Y1aGNRxsjTDvPi3R9Qx2M+W03QzEPx4SR3ZHVskeSJHaetM0TM\/w\/45Paq4GokXP\n- * ZeTnbEx1xmjkA7h+t4doLL4watx5F6yLsJzu8xB3lt\/1EtmkYtLz1t7X4BetPAXz\n- * zS69X\/VwhKfsOI3qXBWuL2oHPyhDmT1gcaUQwEPSV6ogHEEQEDXdiUS8heNK13KF\n- * TCQYFkETvV2BLxUhV1hypPzRQ6tUpJiAbD5KmoK2lD9slshG2QtvKQq0\/bgkDY5J\n- * LhDHV2dtcZ3kDPkkZXpbcJQvoeH3d09C5sIsuTFo2zgNR6oETHUc5TzP6FY2YYRa\n- * QcK5HcmtsRRiXFm01ac+aMejJUIujjFt84SiKWT\/73vC8AmY4tYcJBLjCg4XIxSH\n- * fdDFLL1YZENNO5ivlp8mdiHqcawx+36L7DrEZQ8RZt6cqST5t\/+XTdM74s6k81GT\n- * pNsa82P2K2zmIUZ\/DL2mKjW1vfRByw1NQFEBkN3vdyZxYfM\/JyUzX4hbjXBEkh9Q\n- * QYrcwLKLjis2QzSvK04B3bvRzRb+4ocWiso8ZPAXAIxZFBWDpTMM2A==\n- * -----END RSA PRIVATE KEY-----\n- *\n- * -----BEGIN RSA PRIVATE KEY-----\n- * MIICXAIBAAKBgQClrFscN6LdmYktsnm4j9VIpecchBeNaZzGrG358h0fORna03Ie\n- * buxEzHCk3LoAMPagTz1UemFqzFfQCn+VKBg\/mtmU8hvIJIh+\/p0PPftXUwizIDPU\n- * PxdHFNHN6gjYDnVOr77M0uyvqXpJ38LZrLgkQJCmA1Yq0DAFQCxPq9l0iQIDAQAB\n- * AoGAbqcbg1E1mkR99uOJoNeQYKFOJyGiiXTMnXV1TseC4+PDfQBU7Dax35GcesBi\n- * CtapIpFKKS5D+ozY6b7ZT8ojxuQ\/uHLPAvz0WDR3ds4iRF8tyu71Q1ZHcQsJa17y\n- * yO7UbkSSKn\/Mp9Rb+\/dKqftUGNXVFLqgHBOzN2s3We3bbbECQQDYBPKOg3hkaGHo\n- * OhpHKqtQ6EVkldihG\/3i4WejRonelXN+HRh1KrB2HBx0M8D\/qAzP1i3rNSlSHer4\n- * 59YRTJnHAkEAxFX\/sVYSn07BHv9Zhn6XXct\/Cj43z\/tKNbzlNbcxqQwQerw3IH51\n- * 8UH2YOA+GD3lXbKp+MytoFLWv8zg4YT\/LwJAfqan75Z1R6lLffRS49bIiq8jwE16\n- * rTrUJ+kv8jKxMqc9B3vXkxpsS1M\/+4E8bqgAmvpgAb8xcsvHsBd9ErdukQJBAKs2\n- * j67W75BrPjBI34pQ1LEfp56IGWXOrq1kF8IbCjxv3+MYRT6Z6UJFkpRymNPNDjsC\n- * dgUYgITiGJHUGXuw3lMCQHEHqo9ZtXz92yFT+VhsNc29B8m\/sqUJdtCcMd\/jGpAF\n- * u6GHufjqIZBpQsk63wbwESAPZZ+kk1O1kS5GIRLX608=\n- * -----END RSA PRIVATE KEY-----\n- *\n- * Private-Key: (1024 bit)\n- * modulus:\n- *     00:a5:ac:5b:1c:37:a2:dd:99:89:2d:b2:79:b8:8f:\n- *     d5:48:a5:e7:1c:84:17:8d:69:9c:c6:ac:6d:f9:f2:\n- *     1d:1f:39:19:da:d3:72:1e:6e:ec:44:cc:70:a4:dc:\n- *     ba:00:30:f6:a0:4f:3d:54:7a:61:6a:cc:57:d0:0a:\n- *     7f:95:28:18:3f:9a:d9:94:f2:1b:c8:24:88:7e:fe:\n- *     9d:0f:3d:fb:57:53:08:b3:20:33:d4:3f:17:47:14:\n- *     d1:cd:ea:08:d8:0e:75:4e:af:be:cc:d2:ec:af:a9:\n- *     7a:49:df:c2:d9:ac:b8:24:40:90:a6:03:56:2a:d0:\n- *     30:05:40:2c:4f:ab:d9:74:89\n- * publicExponent: 65537 (0x10001)\n- * privateExponent:\n- *     6e:a7:1b:83:51:35:9a:44:7d:f6:e3:89:a0:d7:90:\n- *     60:a1:4e:27:21:a2:89:74:cc:9d:75:75:4e:c7:82:\n- *     e3:e3:c3:7d:00:54:ec:36:b1:df:91:9c:7a:c0:62:\n- *     0a:d6:a9:22:91:4a:29:2e:43:fa:8c:d8:e9:be:d9:\n- *     4f:ca:23:c6:e4:3f:b8:72:cf:02:fc:f4:58:34:77:\n- *     76:ce:22:44:5f:2d:ca:ee:f5:43:56:47:71:0b:09:\n- *     6b:5e:f2:c8:ee:d4:6e:44:92:2a:7f:cc:a7:d4:5b:\n- *     fb:f7:4a:a9:fb:54:18:d5:d5:14:ba:a0:1c:13:b3:\n- *     37:6b:37:59:ed:db:6d:b1\n- * prime1:\n- *     00:d8:04:f2:8e:83:78:64:68:61:e8:3a:1a:47:2a:\n- *     ab:50:e8:45:64:95:d8:a1:1b:fd:e2:e1:67:a3:46:\n- *     89:de:95:73:7e:1d:18:75:2a:b0:76:1c:1c:74:33:\n- *     c0:ff:a8:0c:cf:d6:2d:eb:35:29:52:1d:ea:f8:e7:\n- *     d6:11:4c:99:c7\n- * prime2:\n- *     00:c4:55:ff:b1:56:12:9f:4e:c1:1e:ff:59:86:7e:\n- *     97:5d:cb:7f:0a:3e:37:cf:fb:4a:35:bc:e5:35:b7:\n- *     31:a9:0c:10:7a:bc:37:20:7e:75:f1:41:f6:60:e0:\n- *     3e:18:3d:e5:5d:b2:a9:f8:cc:ad:a0:52:d6:bf:cc:\n- *     e0:e1:84:ff:2f\n- * exponent1:\n- *     7e:a6:a7:ef:96:75:47:a9:4b:7d:f4:52:e3:d6:c8:\n- *     8a:af:23:c0:4d:7a:ad:3a:d4:27:e9:2f:f2:32:b1:\n- *     32:a7:3d:07:7b:d7:93:1a:6c:4b:53:3f:fb:81:3c:\n- *     6e:a8:00:9a:fa:60:01:bf:31:72:cb:c7:b0:17:7d:\n- *     12:b7:6e:91\n- * exponent2:\n- *     00:ab:36:8f:ae:d6:ef:90:6b:3e:30:48:df:8a:50:\n- *     d4:b1:1f:a7:9e:88:19:65:ce:ae:ad:64:17:c2:1b:\n- *     0a:3c:6f:df:e3:18:45:3e:99:e9:42:45:92:94:72:\n- *     98:d3:cd:0e:3b:02:76:05:18:80:84:e2:18:91:d4:\n- *     19:7b:b0:de:53\n- * coefficient:\n- *     71:07:aa:8f:59:b5:7c:fd:db:21:53:f9:58:6c:35:\n- *     cd:bd:07:c9:bf:b2:a5:09:76:d0:9c:31:df:e3:1a:\n- *     90:05:bb:a1:87:b9:f8:ea:21:90:69:42:c9:3a:df:\n- *     06:f0:11:20:0f:65:9f:a4:93:53:b5:91:2e:46:21:\n- *     12:d7:eb:4f\n- *\n- *\n- * server certificate:\n- * Data:\n- *     Version: 3 (0x2)\n- *     Serial Number: 8 (0x8)\n- *     Signature Algorithm: md5WithRSAEncryption\n- *     Issuer: C=US, ST=Some-State, L=Some-City, O=Some-Org\n- *     Validity\n- *         Not Before: Dec  8 03:43:04 2008 GMT\n- *         Not After : Aug 25 03:43:04 2028 GMT\n- *     Subject: C=US, ST=Some-State, L=Some-City, O=Some-Org, OU=SSL-Server, CN=localhost\n- *     Subject Public Key Info:\n- *         Public Key Algorithm: rsaEncryption\n- *         RSA Public Key: (1024 bit)\n- *             Modulus (1024 bit):\n- *                 00:a5:ac:5b:1c:37:a2:dd:99:89:2d:b2:79:b8:8f:\n- *                 d5:48:a5:e7:1c:84:17:8d:69:9c:c6:ac:6d:f9:f2:\n- *                 1d:1f:39:19:da:d3:72:1e:6e:ec:44:cc:70:a4:dc:\n- *                 ba:00:30:f6:a0:4f:3d:54:7a:61:6a:cc:57:d0:0a:\n- *                 7f:95:28:18:3f:9a:d9:94:f2:1b:c8:24:88:7e:fe:\n- *                 9d:0f:3d:fb:57:53:08:b3:20:33:d4:3f:17:47:14:\n- *                 d1:cd:ea:08:d8:0e:75:4e:af:be:cc:d2:ec:af:a9:\n- *                 7a:49:df:c2:d9:ac:b8:24:40:90:a6:03:56:2a:d0:\n- *                 30:05:40:2c:4f:ab:d9:74:89\n- *             Exponent: 65537 (0x10001)\n- *     X509v3 extensions:\n- *         X509v3 Basic Constraints:\n- *             CA:FALSE\n- *         X509v3 Key Usage:\n- *             Digital Signature, Non Repudiation, Key Encipherment\n- *         X509v3 Subject Key Identifier:\n- *             ED:6E:DB:F4:B5:56:C8:FB:1A:06:61:3F:0F:08:BB:A6:04:D8:16:54\n- *         X509v3 Authority Key Identifier:\n- *             keyid:FA:B9:51:BF:4C:E7:D9:86:98:33:F9:E7:CB:1E:F1:33:49:F7:A8:14\n- *\n- *         X509v3 Subject Alternative Name: critical\n- *             DNS:localhost\n- * Signature Algorithm: md5WithRSAEncryption0\n- *\n- * -----BEGIN CERTIFICATE-----\n- * MIICpDCCAg2gAwIBAgIBCDANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\n- * MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\n- * EwhTb21lLU9yZzAeFw0wODEyMDgwMzQzMDRaFw0yODA4MjUwMzQzMDRaMHIxCzAJ\n- * BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\n- * dHkxETAPBgNVBAoTCFNvbWUtT3JnMRMwEQYDVQQLEwpTU0wtU2VydmVyMRIwEAYD\n- * VQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAKWsWxw3\n- * ot2ZiS2yebiP1Uil5xyEF41pnMasbfnyHR85GdrTch5u7ETMcKTcugAw9qBPPVR6\n- * YWrMV9AKf5UoGD+a2ZTyG8gkiH7+nQ89+1dTCLMgM9Q\/F0cU0c3qCNgOdU6vvszS\n- * 7K+peknfwtmsuCRAkKYDVirQMAVALE+r2XSJAgMBAAGjczBxMAkGA1UdEwQCMAAw\n- * CwYDVR0PBAQDAgXgMB0GA1UdDgQWBBTtbtv0tVbI+xoGYT8PCLumBNgWVDAfBgNV\n- * HSMEGDAWgBT6uVG\/TOfZhpgz+efLHvEzSfeoFDAXBgNVHREBAf8EDTALgglsb2Nh\n- * bGhvc3QwDQYJKoZIhvcNAQEEBQADgYEAoqVTciHtcvsUj+YaTct8tUh3aTCsKsac\n- * PHhfQ+ObjiXSgxsKYTX7ym\/wk\/wvlbUcbqLKxsu7qrcJitH+H9heV1hEHEu65Uoi\n- * nRugFruyOrwvAylV8Cm2af7ddilmYJ+sdJA6N2M3xJRxR0G2LFHEXDNEjYReyexn\n- * JqCpf5uZGOo=\n- * -----END CERTIFICATE-----\n- *\n- *\n- * TLS client certificate:\n- * client private key:\n- * ----BEGIN RSA PRIVATE KEY-----\n- * Proc-Type: 4,ENCRYPTED\n- * DEK-Info: DES-EDE3-CBC,FA2A435CD35A9390\n- *\n- * Z+Y2uaETbsUWIyJUyVu1UV2G4rgFYJyACZT6Tp1KjRtxflSh2kXkJ9MpuXMXA0V4\n- * Yy3fDzPqCL9NJmQAYRlAx\/W\/+j4F5EyMWDIx8fUxzONRZyoiwF7jLm+KscAfv6Pf\n- * q7ItWOdj3z7IYrwlB8YIGd3F2cDKT3S+lYRk7rKb\/qT7itbuHnY4Ardh3yl+MZak\n- * jBp+ELUlRsUqSr1V0LoM+0rCCykarpyfhpxEcqsrl0v9Cyi5uhU50\/oKv5zql3SH\n- * l2ImgDjp3batAs8+Bd4NF2aqi0a7Hy44JUHxRm4caZryU\/i\/D9N1MbuM6882HLat\n- * 5N0G+NaIUfywa8mjwq2D5aiit18HqKA6XeRRYeJ5Dvu9DCO4GeFSwcUFIBMI0L46\n- * 7s114+oDodg57pMgITi+04vmUxvqlN9aiyd7f5Fgd7PeHGeOdbMz1NaJLJaPI9++\n- * NakK8eK9iwT\/Gdq0Uap5\/CHW7vCT5PO+h3HY0STH0lWStXhdWnFO04zTdywsbSp+\n- * DLpHeFT66shfeUlxR0PsCbG9vPRt\/QmGLeYQZITppWo\/ylSq4j+pRIuXvuWHdBRN\n- * rTZ8QF4Y7AxQUXVz1j1++s6ZMHTzaK2i9HrhmDs1MbJl+QwWre3Xpv3LvTVz3k5U\n- * wX8kuY1m3STt71QCaRWENq5sRaMImLxZbxc\/ivFl9RAzUqo4NCxLod\/QgA4iLqtO\n- * ztnlpzwlC\/F8HbQ1oqYWwnZAPhzU\/cULtstl+Yrws2c2atO323LbPXZqbASySgig\n- * sNpFXQMObdfP6LN23bY+1SvtK7V4NUTNhpdIc6INQAQ=\n- * -----END RSA PRIVATE KEY-----\n- *\n- * -----BEGIN RSA PRIVATE KEY-----\n- * MIICWwIBAAKBgQC78EA2rCZUTvSjWgAvaSFvuXo6k+yi9uGOx2PYLxIwmS6w8o\/4\n- * Jy0keCiE9wG\/jUR53TvSVfPOPLJbIX3v\/TNKsaP\/xsibuQ98QTWX+ds6BWAFFa9Z\n- * F5KjEK0WHOQHU6+odqJWKpLT+SjgeM9eH0irXBnd4WdDunWN9YKsQ5JEGwIDAQAB\n- * AoGAEbdqNj0wN85hnWyEi\/ObJU8UyKTdL9eaF72QGfcF\/fLSxfd3vurihIeXOkGW\n- * tpn4lIxYcVGM9CognhqgJpl11jFTQzn1KqZ+NEJRKkCHA4hDabKJbSC9fXHvRwrf\n- * BsFpZqgiNxp3HseUTiwnaUVeyPgMt\/jAj5nB5Sib+UyUxrECQQDnNQBiF2aifEg6\n- * zbJOOC7he5CHAdkFxSxWVFVHL6EfXfqdLVkUohMbgZv+XxyIeU2biOExSg49Kds3\n- * FOKgTau1AkEA0Bd1haj6QuCo8I0AXm2WO+MMTZMTvtHD\/bGjKNM+fT4I8rKYnQRX\n- * 1acHdqS9Xx2rNJqZgkMmpESIdPR2fc4yjwJALFeM6EMmqvj8\/VIf5UJ\/Mz14fXwM\n- * PEARfckUxd9LnnFutCBTWlKvKXJVEZb6KO5ixPaegc57Jp3Vbh3yTN44lQJADD\/1\n- * SSMDaIB1MYP7a5Oj7m6VQNPRq8AJe5vDcRnOae0G9dKRrVyeFxO4GsHj6\/+BHp2j\n- * P8nYMn9eURQ7DXjf\/QJAAQzMlWnKGSO8pyTDtnQx3hRMoUkOEhmNq4bQhLkYqtnY\n- * FcqpUQ2qMjW+NiNWk5HnTrMS3L9EdJobMUzaNZLy4w==\n- * -----END RSA PRIVATE KEY-----\n- *\n- * Private-Key: (1024 bit)\n- * modulus:\n- *     00:bb:f0:40:36:ac:26:54:4e:f4:a3:5a:00:2f:69:\n- *     21:6f:b9:7a:3a:93:ec:a2:f6:e1:8e:c7:63:d8:2f:\n- *     12:30:99:2e:b0:f2:8f:f8:27:2d:24:78:28:84:f7:\n- *     01:bf:8d:44:79:dd:3b:d2:55:f3:ce:3c:b2:5b:21:\n- *     7d:ef:fd:33:4a:b1:a3:ff:c6:c8:9b:b9:0f:7c:41:\n- *     35:97:f9:db:3a:05:60:05:15:af:59:17:92:a3:10:\n- *     ad:16:1c:e4:07:53:af:a8:76:a2:56:2a:92:d3:f9:\n- *     28:e0:78:cf:5e:1f:48:ab:5c:19:dd:e1:67:43:ba:\n- *     75:8d:f5:82:ac:43:92:44:1b\n- * publicExponent: 65537 (0x10001)\n- * privateExponent:\n- *     11:b7:6a:36:3d:30:37:ce:61:9d:6c:84:8b:f3:9b:\n- *     25:4f:14:c8:a4:dd:2f:d7:9a:17:bd:90:19:f7:05:\n- *     fd:f2:d2:c5:f7:77:be:ea:e2:84:87:97:3a:41:96:\n- *     b6:99:f8:94:8c:58:71:51:8c:f4:2a:20:9e:1a:a0:\n- *     26:99:75:d6:31:53:43:39:f5:2a:a6:7e:34:42:51:\n- *     2a:40:87:03:88:43:69:b2:89:6d:20:bd:7d:71:ef:\n- *     47:0a:df:06:c1:69:66:a8:22:37:1a:77:1e:c7:94:\n- *     4e:2c:27:69:45:5e:c8:f8:0c:b7:f8:c0:8f:99:c1:\n- *     e5:28:9b:f9:4c:94:c6:b1\n- * prime1:\n- *     00:e7:35:00:62:17:66:a2:7c:48:3a:cd:b2:4e:38:\n- *     2e:e1:7b:90:87:01:d9:05:c5:2c:56:54:55:47:2f:\n- *     a1:1f:5d:fa:9d:2d:59:14:a2:13:1b:81:9b:fe:5f:\n- *     1c:88:79:4d:9b:88:e1:31:4a:0e:3d:29:db:37:14:\n- *     e2:a0:4d:ab:b5\n- * prime2:\n- *     00:d0:17:75:85:a8:fa:42:e0:a8:f0:8d:00:5e:6d:\n- *     96:3b:e3:0c:4d:93:13:be:d1:c3:fd:b1:a3:28:d3:\n- *     3e:7d:3e:08:f2:b2:98:9d:04:57:d5:a7:07:76:a4:\n- *     bd:5f:1d:ab:34:9a:99:82:43:26:a4:44:88:74:f4:\n- *     76:7d:ce:32:8f\n- * exponent1:\n- *     2c:57:8c:e8:43:26:aa:f8:fc:fd:52:1f:e5:42:7f:\n- *     33:3d:78:7d:7c:0c:3c:40:11:7d:c9:14:c5:df:4b:\n- *     9e:71:6e:b4:20:53:5a:52:af:29:72:55:11:96:fa:\n- *     28:ee:62:c4:f6:9e:81:ce:7b:26:9d:d5:6e:1d:f2:\n- *     4c:de:38:95\n- * exponent2:\n- *     0c:3f:f5:49:23:03:68:80:75:31:83:fb:6b:93:a3:\n- *     ee:6e:95:40:d3:d1:ab:c0:09:7b:9b:c3:71:19:ce:\n- *     69:ed:06:f5:d2:91:ad:5c:9e:17:13:b8:1a:c1:e3:\n- *     eb:ff:81:1e:9d:a3:3f:c9:d8:32:7f:5e:51:14:3b:\n- *     0d:78:df:fd\n- * coefficient:\n- *     01:0c:cc:95:69:ca:19:23:bc:a7:24:c3:b6:74:31:\n- *     de:14:4c:a1:49:0e:12:19:8d:ab:86:d0:84:b9:18:\n- *     aa:d9:d8:15:ca:a9:51:0d:aa:32:35:be:36:23:56:\n- *     93:91:e7:4e:b3:12:dc:bf:44:74:9a:1b:31:4c:da:\n- *     35:92:f2:e3\n- *\n- * client certificate:\n- * Data:\n- *     Version: 3 (0x2)\n- *     Serial Number: 9 (0x9)\n- *     Signature Algorithm: md5WithRSAEncryption\n- *     Issuer: C=US, ST=Some-State, L=Some-City, O=Some-Org\n- *     Validity\n- *         Not Before: Dec  8 03:43:24 2008 GMT\n- *         Not After : Aug 25 03:43:24 2028 GMT\n- *     Subject: C=US, ST=Some-State, L=Some-City, O=Some-Org, OU=SSL-Client, CN=localhost\n- *     Subject Public Key Info:\n- *         Public Key Algorithm: rsaEncryption\n- *         RSA Public Key: (1024 bit)\n- *             Modulus (1024 bit):\n- *                 00:bb:f0:40:36:ac:26:54:4e:f4:a3:5a:00:2f:69:\n- *                 21:6f:b9:7a:3a:93:ec:a2:f6:e1:8e:c7:63:d8:2f:\n- *                 12:30:99:2e:b0:f2:8f:f8:27:2d:24:78:28:84:f7:\n- *                 01:bf:8d:44:79:dd:3b:d2:55:f3:ce:3c:b2:5b:21:\n- *                 7d:ef:fd:33:4a:b1:a3:ff:c6:c8:9b:b9:0f:7c:41:\n- *                 35:97:f9:db:3a:05:60:05:15:af:59:17:92:a3:10:\n- *                 ad:16:1c:e4:07:53:af:a8:76:a2:56:2a:92:d3:f9:\n- *                 28:e0:78:cf:5e:1f:48:ab:5c:19:dd:e1:67:43:ba:\n- *                 75:8d:f5:82:ac:43:92:44:1b\n- *             Exponent: 65537 (0x10001)\n- *     X509v3 extensions:\n- *         X509v3 Basic Constraints:\n- *             CA:FALSE\n- *         X509v3 Key Usage:\n- *             Digital Signature, Non Repudiation, Key Encipherment\n- *         X509v3 Subject Key Identifier:\n- *             CD:BB:C8:85:AA:91:BD:FD:1D:BE:CD:67:7C:FF:B3:E9:4C:A8:22:E6\n- *         X509v3 Authority Key Identifier:\n- *             keyid:FA:B9:51:BF:4C:E7:D9:86:98:33:F9:E7:CB:1E:F1:33:49:F7:A8:14\n- *\n- *         X509v3 Subject Alternative Name: critical\n- *             DNS:localhost\n- * Signature Algorithm: md5WithRSAEncryption\n- *\n- * -----BEGIN CERTIFICATE-----\n- * MIICpDCCAg2gAwIBAgIBCTANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\n- * MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\n- * EwhTb21lLU9yZzAeFw0wODEyMDgwMzQzMjRaFw0yODA4MjUwMzQzMjRaMHIxCzAJ\n- * BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\n- * dHkxETAPBgNVBAoTCFNvbWUtT3JnMRMwEQYDVQQLEwpTU0wtQ2xpZW50MRIwEAYD\n- * VQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALvwQDas\n- * JlRO9KNaAC9pIW+5ejqT7KL24Y7HY9gvEjCZLrDyj\/gnLSR4KIT3Ab+NRHndO9JV\n- * 8848slshfe\/9M0qxo\/\/GyJu5D3xBNZf52zoFYAUVr1kXkqMQrRYc5AdTr6h2olYq\n- * ktP5KOB4z14fSKtcGd3hZ0O6dY31gqxDkkQbAgMBAAGjczBxMAkGA1UdEwQCMAAw\n- * CwYDVR0PBAQDAgXgMB0GA1UdDgQWBBTNu8iFqpG9\/R2+zWd8\/7PpTKgi5jAfBgNV\n- * HSMEGDAWgBT6uVG\/TOfZhpgz+efLHvEzSfeoFDAXBgNVHREBAf8EDTALgglsb2Nh\n- * bGhvc3QwDQYJKoZIhvcNAQEEBQADgYEAm25gJyqW1JznQ1EyOtTGswBVwfgBOf+F\n- * HJuBTcflYQLbTD\/AETPQJGvZU9tdhuLtbG3OPhR7vSY8zeAbfM3dbH7QFr3r47Gj\n- * XEH7qM\/MX+Z3ifVaC4MeJmrYQkYFSuKeyyKpdRVX4w4nnFHF6OsNASsYrMW6LpxN\n- * cl\/epUcHL7E=\n- * -----END CERTIFICATE-----\n- *\n- *\n- *\n- * Trusted CA certificate:\n- * Certificate:\n- *   Data:\n- *     Version: 3 (0x2)\n- *     Serial Number: 0 (0x0)\n- *     Signature Algorithm: md5WithRSAEncryption\n- *     Issuer: C=US, ST=Some-State, L=Some-City, O=Some-Org\n- *     Validity\n- *         Not Before: Dec  8 02:43:36 2008 GMT\n- *         Not After : Aug 25 02:43:36 2028 GMT\n- *     Subject: C=US, ST=Some-State, L=Some-City, O=Some-Org\n- *     Subject Public Key Info:\n- *         Public Key Algorithm: rsaEncryption\n- *         RSA Public Key: (1024 bit)\n- *             Modulus (1024 bit):\n- *                 00:cb:c4:38:20:07:be:88:a7:93:b0:a1:43:51:2d:\n- *                 d7:8e:85:af:54:dd:ad:a2:7b:23:5b:cf:99:13:53:\n- *                 99:45:7d:ee:6d:ba:2d:bf:e3:ad:6e:3d:9f:1a:f9:\n- *                 03:97:e0:17:55:ae:11:26:57:de:01:29:8e:05:3f:\n- *                 21:f7:e7:36:e8:2e:37:d7:48:ac:53:d6:60:0e:c7:\n- *                 50:6d:f6:c5:85:f7:8b:a6:c5:91:35:72:3c:94:ee:\n- *                 f1:17:f0:71:e3:ec:1b:ce:ca:4e:40:42:b0:6d:ee:\n- *                 6a:0e:d6:e5:ad:3c:0f:c9:ba:82:4f:78:f8:89:97:\n- *                 89:2a:95:12:4c:d8:09:2a:e9\n- *             Exponent: 65537 (0x10001)\n- *     X509v3 extensions:\n- *         X509v3 Subject Key Identifier:\n- *             FA:B9:51:BF:4C:E7:D9:86:98:33:F9:E7:CB:1E:F1:33:49:F7:A8:14\n- *         X509v3 Authority Key Identifier:\n- *             keyid:FA:B9:51:BF:4C:E7:D9:86:98:33:F9:E7:CB:1E:F1:33:49:F7:A8:14\n- *             DirName:\/C=US\/ST=Some-State\/L=Some-City\/O=Some-Org\n- *             serial:00\n- *\n- *         X509v3 Basic Constraints:\n- *             CA:TRUE\n- *  Signature Algorithm: md5WithRSAEncryption\n- *\n- * -----BEGIN CERTIFICATE-----\n- * MIICrDCCAhWgAwIBAgIBADANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\n- * MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\n- * EwhTb21lLU9yZzAeFw0wODEyMDgwMjQzMzZaFw0yODA4MjUwMjQzMzZaMEkxCzAJ\n- * BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\n- * dHkxETAPBgNVBAoTCFNvbWUtT3JnMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKB\n- * gQDLxDggB76Ip5OwoUNRLdeOha9U3a2ieyNbz5kTU5lFfe5tui2\/461uPZ8a+QOX\n- * 4BdVrhEmV94BKY4FPyH35zboLjfXSKxT1mAOx1Bt9sWF94umxZE1cjyU7vEX8HHj\n- * 7BvOyk5AQrBt7moO1uWtPA\/JuoJPePiJl4kqlRJM2Akq6QIDAQABo4GjMIGgMB0G\n- * A1UdDgQWBBT6uVG\/TOfZhpgz+efLHvEzSfeoFDBxBgNVHSMEajBogBT6uVG\/TOfZ\n- * hpgz+efLHvEzSfeoFKFNpEswSTELMAkGA1UEBhMCVVMxEzARBgNVBAgTClNvbWUt\n- * U3RhdGUxEjAQBgNVBAcTCVNvbWUtQ2l0eTERMA8GA1UEChMIU29tZS1PcmeCAQAw\n- * DAYDVR0TBAUwAwEB\/zANBgkqhkiG9w0BAQQFAAOBgQBcIm534U123Hz+rtyYO5uA\n- * ofd81G6FnTfEAV8Kw9fGyyEbQZclBv34A9JsFKeMvU4OFIaixD7nLZ\/NZ+IWbhmZ\n- * LovmJXyCkOufea73pNiZ+f\/4\/ScZaIlM\/PRycQSqbFNd4j9Wott+08qxHPLpsf3P\n- * 6Mvf0r1PNTY2hwTJLJmKtg==\n- * -----END CERTIFICATE---\n+\/* @test id=tls13\n+ * @bug 6766775\n+ * @summary X509 certificate hostname checking is broken in JDK1.6.0_10\n+ * @library \/test\/lib\n+ * @run main\/othervm DNSIdentities TLSv1.3 SHA256withRSA\n+ * @author Xuelei Fan\n@@ -404,0 +45,18 @@\n+import jdk.test.lib.security.CertificateBuilder;\n+import sun.security.x509.DNSName;\n+import sun.security.x509.GeneralName;\n+import sun.security.x509.GeneralNames;\n+import sun.security.x509.SubjectAlternativeNameExtension;\n+\n+\n+import javax.net.ssl.HttpsURLConnection;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLServerSocket;\n+import javax.net.ssl.SSLServerSocketFactory;\n+import javax.net.ssl.SSLSocket;\n+import java.io.PrintStream;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.Proxy;\n+import java.net.URL;\n+import java.security.Security;\n@@ -405,9 +64,0 @@\n-public class DNSIdentities {\n-    static Map cookies;\n-    ServerSocket ss;\n-\n-    \/*\n-     * =============================================================\n-     * Set the various variables needed for the tests, then\n-     * specify what tests to run on each side.\n-     *\/\n@@ -415,0 +65,1 @@\n+public class DNSIdentities extends IdentitiesBase {\n@@ -422,203 +73,0 @@\n-    \/*\n-     * Where do we find the keystores?\n-     *\/\n-    static String trusedCertStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICrDCCAhWgAwIBAgIBADANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\\n\" +\n-        \"MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\\n\" +\n-        \"EwhTb21lLU9yZzAeFw0wODEyMDgwMjQzMzZaFw0yODA4MjUwMjQzMzZaMEkxCzAJ\\n\" +\n-        \"BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\\n\" +\n-        \"dHkxETAPBgNVBAoTCFNvbWUtT3JnMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKB\\n\" +\n-        \"gQDLxDggB76Ip5OwoUNRLdeOha9U3a2ieyNbz5kTU5lFfe5tui2\/461uPZ8a+QOX\\n\" +\n-        \"4BdVrhEmV94BKY4FPyH35zboLjfXSKxT1mAOx1Bt9sWF94umxZE1cjyU7vEX8HHj\\n\" +\n-        \"7BvOyk5AQrBt7moO1uWtPA\/JuoJPePiJl4kqlRJM2Akq6QIDAQABo4GjMIGgMB0G\\n\" +\n-        \"A1UdDgQWBBT6uVG\/TOfZhpgz+efLHvEzSfeoFDBxBgNVHSMEajBogBT6uVG\/TOfZ\\n\" +\n-        \"hpgz+efLHvEzSfeoFKFNpEswSTELMAkGA1UEBhMCVVMxEzARBgNVBAgTClNvbWUt\\n\" +\n-        \"U3RhdGUxEjAQBgNVBAcTCVNvbWUtQ2l0eTERMA8GA1UEChMIU29tZS1PcmeCAQAw\\n\" +\n-        \"DAYDVR0TBAUwAwEB\/zANBgkqhkiG9w0BAQQFAAOBgQBcIm534U123Hz+rtyYO5uA\\n\" +\n-        \"ofd81G6FnTfEAV8Kw9fGyyEbQZclBv34A9JsFKeMvU4OFIaixD7nLZ\/NZ+IWbhmZ\\n\" +\n-        \"LovmJXyCkOufea73pNiZ+f\/4\/ScZaIlM\/PRycQSqbFNd4j9Wott+08qxHPLpsf3P\\n\" +\n-        \"6Mvf0r1PNTY2hwTJLJmKtg==\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-    static String serverCertStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICpDCCAg2gAwIBAgIBCDANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\\n\" +\n-        \"MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\\n\" +\n-        \"EwhTb21lLU9yZzAeFw0wODEyMDgwMzQzMDRaFw0yODA4MjUwMzQzMDRaMHIxCzAJ\\n\" +\n-        \"BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\\n\" +\n-        \"dHkxETAPBgNVBAoTCFNvbWUtT3JnMRMwEQYDVQQLEwpTU0wtU2VydmVyMRIwEAYD\\n\" +\n-        \"VQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAKWsWxw3\\n\" +\n-        \"ot2ZiS2yebiP1Uil5xyEF41pnMasbfnyHR85GdrTch5u7ETMcKTcugAw9qBPPVR6\\n\" +\n-        \"YWrMV9AKf5UoGD+a2ZTyG8gkiH7+nQ89+1dTCLMgM9Q\/F0cU0c3qCNgOdU6vvszS\\n\" +\n-        \"7K+peknfwtmsuCRAkKYDVirQMAVALE+r2XSJAgMBAAGjczBxMAkGA1UdEwQCMAAw\\n\" +\n-        \"CwYDVR0PBAQDAgXgMB0GA1UdDgQWBBTtbtv0tVbI+xoGYT8PCLumBNgWVDAfBgNV\\n\" +\n-        \"HSMEGDAWgBT6uVG\/TOfZhpgz+efLHvEzSfeoFDAXBgNVHREBAf8EDTALgglsb2Nh\\n\" +\n-        \"bGhvc3QwDQYJKoZIhvcNAQEEBQADgYEAoqVTciHtcvsUj+YaTct8tUh3aTCsKsac\\n\" +\n-        \"PHhfQ+ObjiXSgxsKYTX7ym\/wk\/wvlbUcbqLKxsu7qrcJitH+H9heV1hEHEu65Uoi\\n\" +\n-        \"nRugFruyOrwvAylV8Cm2af7ddilmYJ+sdJA6N2M3xJRxR0G2LFHEXDNEjYReyexn\\n\" +\n-        \"JqCpf5uZGOo=\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-    static String clientCertStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICpDCCAg2gAwIBAgIBCTANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\\n\" +\n-        \"MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\\n\" +\n-        \"EwhTb21lLU9yZzAeFw0wODEyMDgwMzQzMjRaFw0yODA4MjUwMzQzMjRaMHIxCzAJ\\n\" +\n-        \"BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\\n\" +\n-        \"dHkxETAPBgNVBAoTCFNvbWUtT3JnMRMwEQYDVQQLEwpTU0wtQ2xpZW50MRIwEAYD\\n\" +\n-        \"VQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALvwQDas\\n\" +\n-        \"JlRO9KNaAC9pIW+5ejqT7KL24Y7HY9gvEjCZLrDyj\/gnLSR4KIT3Ab+NRHndO9JV\\n\" +\n-        \"8848slshfe\/9M0qxo\/\/GyJu5D3xBNZf52zoFYAUVr1kXkqMQrRYc5AdTr6h2olYq\\n\" +\n-        \"ktP5KOB4z14fSKtcGd3hZ0O6dY31gqxDkkQbAgMBAAGjczBxMAkGA1UdEwQCMAAw\\n\" +\n-        \"CwYDVR0PBAQDAgXgMB0GA1UdDgQWBBTNu8iFqpG9\/R2+zWd8\/7PpTKgi5jAfBgNV\\n\" +\n-        \"HSMEGDAWgBT6uVG\/TOfZhpgz+efLHvEzSfeoFDAXBgNVHREBAf8EDTALgglsb2Nh\\n\" +\n-        \"bGhvc3QwDQYJKoZIhvcNAQEEBQADgYEAm25gJyqW1JznQ1EyOtTGswBVwfgBOf+F\\n\" +\n-        \"HJuBTcflYQLbTD\/AETPQJGvZU9tdhuLtbG3OPhR7vSY8zeAbfM3dbH7QFr3r47Gj\\n\" +\n-        \"XEH7qM\/MX+Z3ifVaC4MeJmrYQkYFSuKeyyKpdRVX4w4nnFHF6OsNASsYrMW6LpxN\\n\" +\n-        \"cl\/epUcHL7E=\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-    static byte serverPrivateExponent[] = {\n-        (byte)0x6e, (byte)0xa7, (byte)0x1b, (byte)0x83,\n-        (byte)0x51, (byte)0x35, (byte)0x9a, (byte)0x44,\n-        (byte)0x7d, (byte)0xf6, (byte)0xe3, (byte)0x89,\n-        (byte)0xa0, (byte)0xd7, (byte)0x90, (byte)0x60,\n-        (byte)0xa1, (byte)0x4e, (byte)0x27, (byte)0x21,\n-        (byte)0xa2, (byte)0x89, (byte)0x74, (byte)0xcc,\n-        (byte)0x9d, (byte)0x75, (byte)0x75, (byte)0x4e,\n-        (byte)0xc7, (byte)0x82, (byte)0xe3, (byte)0xe3,\n-        (byte)0xc3, (byte)0x7d, (byte)0x00, (byte)0x54,\n-        (byte)0xec, (byte)0x36, (byte)0xb1, (byte)0xdf,\n-        (byte)0x91, (byte)0x9c, (byte)0x7a, (byte)0xc0,\n-        (byte)0x62, (byte)0x0a, (byte)0xd6, (byte)0xa9,\n-        (byte)0x22, (byte)0x91, (byte)0x4a, (byte)0x29,\n-        (byte)0x2e, (byte)0x43, (byte)0xfa, (byte)0x8c,\n-        (byte)0xd8, (byte)0xe9, (byte)0xbe, (byte)0xd9,\n-        (byte)0x4f, (byte)0xca, (byte)0x23, (byte)0xc6,\n-        (byte)0xe4, (byte)0x3f, (byte)0xb8, (byte)0x72,\n-        (byte)0xcf, (byte)0x02, (byte)0xfc, (byte)0xf4,\n-        (byte)0x58, (byte)0x34, (byte)0x77, (byte)0x76,\n-        (byte)0xce, (byte)0x22, (byte)0x44, (byte)0x5f,\n-        (byte)0x2d, (byte)0xca, (byte)0xee, (byte)0xf5,\n-        (byte)0x43, (byte)0x56, (byte)0x47, (byte)0x71,\n-        (byte)0x0b, (byte)0x09, (byte)0x6b, (byte)0x5e,\n-        (byte)0xf2, (byte)0xc8, (byte)0xee, (byte)0xd4,\n-        (byte)0x6e, (byte)0x44, (byte)0x92, (byte)0x2a,\n-        (byte)0x7f, (byte)0xcc, (byte)0xa7, (byte)0xd4,\n-        (byte)0x5b, (byte)0xfb, (byte)0xf7, (byte)0x4a,\n-        (byte)0xa9, (byte)0xfb, (byte)0x54, (byte)0x18,\n-        (byte)0xd5, (byte)0xd5, (byte)0x14, (byte)0xba,\n-        (byte)0xa0, (byte)0x1c, (byte)0x13, (byte)0xb3,\n-        (byte)0x37, (byte)0x6b, (byte)0x37, (byte)0x59,\n-        (byte)0xed, (byte)0xdb, (byte)0x6d, (byte)0xb1\n-    };\n-\n-    static byte serverModulus[] = {\n-        (byte)0x00,\n-        (byte)0xa5, (byte)0xac, (byte)0x5b, (byte)0x1c,\n-        (byte)0x37, (byte)0xa2, (byte)0xdd, (byte)0x99,\n-        (byte)0x89, (byte)0x2d, (byte)0xb2, (byte)0x79,\n-        (byte)0xb8, (byte)0x8f, (byte)0xd5, (byte)0x48,\n-        (byte)0xa5, (byte)0xe7, (byte)0x1c, (byte)0x84,\n-        (byte)0x17, (byte)0x8d, (byte)0x69, (byte)0x9c,\n-        (byte)0xc6, (byte)0xac, (byte)0x6d, (byte)0xf9,\n-        (byte)0xf2, (byte)0x1d, (byte)0x1f, (byte)0x39,\n-        (byte)0x19, (byte)0xda, (byte)0xd3, (byte)0x72,\n-        (byte)0x1e, (byte)0x6e, (byte)0xec, (byte)0x44,\n-        (byte)0xcc, (byte)0x70, (byte)0xa4, (byte)0xdc,\n-        (byte)0xba, (byte)0x00, (byte)0x30, (byte)0xf6,\n-        (byte)0xa0, (byte)0x4f, (byte)0x3d, (byte)0x54,\n-        (byte)0x7a, (byte)0x61, (byte)0x6a, (byte)0xcc,\n-        (byte)0x57, (byte)0xd0, (byte)0x0a, (byte)0x7f,\n-        (byte)0x95, (byte)0x28, (byte)0x18, (byte)0x3f,\n-        (byte)0x9a, (byte)0xd9, (byte)0x94, (byte)0xf2,\n-        (byte)0x1b, (byte)0xc8, (byte)0x24, (byte)0x88,\n-        (byte)0x7e, (byte)0xfe, (byte)0x9d, (byte)0x0f,\n-        (byte)0x3d, (byte)0xfb, (byte)0x57, (byte)0x53,\n-        (byte)0x08, (byte)0xb3, (byte)0x20, (byte)0x33,\n-        (byte)0xd4, (byte)0x3f, (byte)0x17, (byte)0x47,\n-        (byte)0x14, (byte)0xd1, (byte)0xcd, (byte)0xea,\n-        (byte)0x08, (byte)0xd8, (byte)0x0e, (byte)0x75,\n-        (byte)0x4e, (byte)0xaf, (byte)0xbe, (byte)0xcc,\n-        (byte)0xd2, (byte)0xec, (byte)0xaf, (byte)0xa9,\n-        (byte)0x7a, (byte)0x49, (byte)0xdf, (byte)0xc2,\n-        (byte)0xd9, (byte)0xac, (byte)0xb8, (byte)0x24,\n-        (byte)0x40, (byte)0x90, (byte)0xa6, (byte)0x03,\n-        (byte)0x56, (byte)0x2a, (byte)0xd0, (byte)0x30,\n-        (byte)0x05, (byte)0x40, (byte)0x2c, (byte)0x4f,\n-        (byte)0xab, (byte)0xd9, (byte)0x74, (byte)0x89\n-    };\n-\n-    static byte clientPrivateExponent[] = {\n-        (byte)0x11, (byte)0xb7, (byte)0x6a, (byte)0x36,\n-        (byte)0x3d, (byte)0x30, (byte)0x37, (byte)0xce,\n-        (byte)0x61, (byte)0x9d, (byte)0x6c, (byte)0x84,\n-        (byte)0x8b, (byte)0xf3, (byte)0x9b, (byte)0x25,\n-        (byte)0x4f, (byte)0x14, (byte)0xc8, (byte)0xa4,\n-        (byte)0xdd, (byte)0x2f, (byte)0xd7, (byte)0x9a,\n-        (byte)0x17, (byte)0xbd, (byte)0x90, (byte)0x19,\n-        (byte)0xf7, (byte)0x05, (byte)0xfd, (byte)0xf2,\n-        (byte)0xd2, (byte)0xc5, (byte)0xf7, (byte)0x77,\n-        (byte)0xbe, (byte)0xea, (byte)0xe2, (byte)0x84,\n-        (byte)0x87, (byte)0x97, (byte)0x3a, (byte)0x41,\n-        (byte)0x96, (byte)0xb6, (byte)0x99, (byte)0xf8,\n-        (byte)0x94, (byte)0x8c, (byte)0x58, (byte)0x71,\n-        (byte)0x51, (byte)0x8c, (byte)0xf4, (byte)0x2a,\n-        (byte)0x20, (byte)0x9e, (byte)0x1a, (byte)0xa0,\n-        (byte)0x26, (byte)0x99, (byte)0x75, (byte)0xd6,\n-        (byte)0x31, (byte)0x53, (byte)0x43, (byte)0x39,\n-        (byte)0xf5, (byte)0x2a, (byte)0xa6, (byte)0x7e,\n-        (byte)0x34, (byte)0x42, (byte)0x51, (byte)0x2a,\n-        (byte)0x40, (byte)0x87, (byte)0x03, (byte)0x88,\n-        (byte)0x43, (byte)0x69, (byte)0xb2, (byte)0x89,\n-        (byte)0x6d, (byte)0x20, (byte)0xbd, (byte)0x7d,\n-        (byte)0x71, (byte)0xef, (byte)0x47, (byte)0x0a,\n-        (byte)0xdf, (byte)0x06, (byte)0xc1, (byte)0x69,\n-        (byte)0x66, (byte)0xa8, (byte)0x22, (byte)0x37,\n-        (byte)0x1a, (byte)0x77, (byte)0x1e, (byte)0xc7,\n-        (byte)0x94, (byte)0x4e, (byte)0x2c, (byte)0x27,\n-        (byte)0x69, (byte)0x45, (byte)0x5e, (byte)0xc8,\n-        (byte)0xf8, (byte)0x0c, (byte)0xb7, (byte)0xf8,\n-        (byte)0xc0, (byte)0x8f, (byte)0x99, (byte)0xc1,\n-        (byte)0xe5, (byte)0x28, (byte)0x9b, (byte)0xf9,\n-        (byte)0x4c, (byte)0x94, (byte)0xc6, (byte)0xb1\n-    };\n-\n-    static byte clientModulus[] = {\n-        (byte)0x00,\n-        (byte)0xbb, (byte)0xf0, (byte)0x40, (byte)0x36,\n-        (byte)0xac, (byte)0x26, (byte)0x54, (byte)0x4e,\n-        (byte)0xf4, (byte)0xa3, (byte)0x5a, (byte)0x00,\n-        (byte)0x2f, (byte)0x69, (byte)0x21, (byte)0x6f,\n-        (byte)0xb9, (byte)0x7a, (byte)0x3a, (byte)0x93,\n-        (byte)0xec, (byte)0xa2, (byte)0xf6, (byte)0xe1,\n-        (byte)0x8e, (byte)0xc7, (byte)0x63, (byte)0xd8,\n-        (byte)0x2f, (byte)0x12, (byte)0x30, (byte)0x99,\n-        (byte)0x2e, (byte)0xb0, (byte)0xf2, (byte)0x8f,\n-        (byte)0xf8, (byte)0x27, (byte)0x2d, (byte)0x24,\n-        (byte)0x78, (byte)0x28, (byte)0x84, (byte)0xf7,\n-        (byte)0x01, (byte)0xbf, (byte)0x8d, (byte)0x44,\n-        (byte)0x79, (byte)0xdd, (byte)0x3b, (byte)0xd2,\n-        (byte)0x55, (byte)0xf3, (byte)0xce, (byte)0x3c,\n-        (byte)0xb2, (byte)0x5b, (byte)0x21, (byte)0x7d,\n-        (byte)0xef, (byte)0xfd, (byte)0x33, (byte)0x4a,\n-        (byte)0xb1, (byte)0xa3, (byte)0xff, (byte)0xc6,\n-        (byte)0xc8, (byte)0x9b, (byte)0xb9, (byte)0x0f,\n-        (byte)0x7c, (byte)0x41, (byte)0x35, (byte)0x97,\n-        (byte)0xf9, (byte)0xdb, (byte)0x3a, (byte)0x05,\n-        (byte)0x60, (byte)0x05, (byte)0x15, (byte)0xaf,\n-        (byte)0x59, (byte)0x17, (byte)0x92, (byte)0xa3,\n-        (byte)0x10, (byte)0xad, (byte)0x16, (byte)0x1c,\n-        (byte)0xe4, (byte)0x07, (byte)0x53, (byte)0xaf,\n-        (byte)0xa8, (byte)0x76, (byte)0xa2, (byte)0x56,\n-        (byte)0x2a, (byte)0x92, (byte)0xd3, (byte)0xf9,\n-        (byte)0x28, (byte)0xe0, (byte)0x78, (byte)0xcf,\n-        (byte)0x5e, (byte)0x1f, (byte)0x48, (byte)0xab,\n-        (byte)0x5c, (byte)0x19, (byte)0xdd, (byte)0xe1,\n-        (byte)0x67, (byte)0x43, (byte)0xba, (byte)0x75,\n-        (byte)0x8d, (byte)0xf5, (byte)0x82, (byte)0xac,\n-        (byte)0x43, (byte)0x92, (byte)0x44, (byte)0x1b\n-    };\n-\n-    static char passphrase[] = \"passphrase\".toCharArray();\n@@ -643,0 +91,14 @@\n+    @Override\n+    protected CertificateBuilder customizeServerCert(CertificateBuilder builder) throws Exception {\n+        GeneralNames gns = new GeneralNames();\n+        gns.add(new GeneralName(new DNSName(\"localhost\")));\n+        return builder.addExtension(new SubjectAlternativeNameExtension(true, gns));\n+    }\n+\n+    @Override\n+    protected CertificateBuilder customizeClientCert(CertificateBuilder builder) throws Exception {\n+        GeneralNames gns = new GeneralNames();\n+        gns.add(new GeneralName(new DNSName(\"localhost\")));\n+        return builder.addExtension(new SubjectAlternativeNameExtension(true, gns));\n+    }\n+\n@@ -650,2 +112,1 @@\n-        SSLContext context = getSSLContext(trusedCertStr, serverCertStr,\n-            serverModulus, serverPrivateExponent, passphrase);\n+        SSLContext context = getServerSSLContext();\n@@ -706,2 +167,1 @@\n-            SSLContext context = getSSLContext(trusedCertStr, clientCertStr,\n-                clientModulus, clientPrivateExponent, passphrase);\n+            SSLContext context = getClientSSLContext();\n@@ -751,6 +211,8 @@\n-    public static void main(String args[]) throws Exception {\n-        \/\/ MD5 is used in this test case, don't disable MD5 algorithm.\n-        Security.setProperty(\"jdk.certpath.disabledAlgorithms\",\n-                \"MD2, RSA keySize < 1024\");\n-        Security.setProperty(\"jdk.tls.disabledAlgorithms\",\n-                \"SSLv3, RC4, DH keySize < 768\");\n+    public static void main(String [] args) throws Exception {\n+        if (args[1].contains(\"MD5\")) {\n+            \/\/ MD5 is used in this test case, don't disable MD5 algorithm.\n+            Security.setProperty(\"jdk.certpath.disabledAlgorithms\",\n+                    \"MD2, RSA keySize < 1024\");\n+            Security.setProperty(\"jdk.tls.disabledAlgorithms\",\n+                    \"SSLv3, RC4, DH keySize < 768\");\n+        }\n@@ -764,1 +226,1 @@\n-        new DNSIdentities();\n+        new DNSIdentities(args[0], args[1]);\n@@ -774,1 +236,2 @@\n-    DNSIdentities() throws Exception {\n+    DNSIdentities(String protocol, String signatureAlg) throws Exception {\n+        super(protocol, signatureAlg);\n@@ -849,61 +312,0 @@\n-\n-    \/\/ get the ssl context\n-    private static SSLContext getSSLContext(String trusedCertStr,\n-            String keyCertStr, byte[] modulus,\n-            byte[] privateExponent, char[] passphrase) throws Exception {\n-\n-        \/\/ generate certificate from cert string\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-\n-        ByteArrayInputStream is =\n-                    new ByteArrayInputStream(trusedCertStr.getBytes());\n-        Certificate trusedCert = cf.generateCertificate(is);\n-        is.close();\n-\n-        \/\/ create a key store\n-        KeyStore ks = KeyStore.getInstance(\"JKS\");\n-        ks.load(null, null);\n-\n-        \/\/ import the trused cert\n-        ks.setCertificateEntry(\"RSA Export Signer\", trusedCert);\n-\n-        if (keyCertStr != null) {\n-            \/\/ generate the private key.\n-            RSAPrivateKeySpec priKeySpec = new RSAPrivateKeySpec(\n-                                            new BigInteger(modulus),\n-                                            new BigInteger(privateExponent));\n-            KeyFactory kf = KeyFactory.getInstance(\"RSA\");\n-            RSAPrivateKey priKey =\n-                    (RSAPrivateKey)kf.generatePrivate(priKeySpec);\n-\n-            \/\/ generate certificate chain\n-            is = new ByteArrayInputStream(keyCertStr.getBytes());\n-            Certificate keyCert = cf.generateCertificate(is);\n-            is.close();\n-\n-            Certificate[] chain = new Certificate[2];\n-            chain[0] = keyCert;\n-            chain[1] = trusedCert;\n-\n-            \/\/ import the key entry.\n-            ks.setKeyEntry(\"Whatever\", priKey, passphrase, chain);\n-        }\n-\n-        \/\/ create SSL context\n-        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"PKIX\");\n-        tmf.init(ks);\n-\n-        SSLContext ctx = SSLContext.getInstance(\"TLSv1.2\");\n-\n-        if (keyCertStr != null) {\n-            KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n-            kmf.init(ks, passphrase);\n-\n-            ctx.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\n-        } else {\n-            ctx.init(null, tmf.getTrustManagers(), null);\n-        }\n-\n-        return ctx;\n-    }\n-\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/https\/HttpsURLConnection\/DNSIdentities.java","additions":55,"deletions":653,"binary":false,"changes":708,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-\/* @test\n+\/* @test id=tls12\n@@ -33,1 +33,1 @@\n- * @run main\/othervm IPAddressIPIdentities\n+ * @run main\/othervm IPAddressIPIdentities TLSv1.2 MD5withRSA\n@@ -37,4 +37,15 @@\n-import java.net.*;\n-import java.util.*;\n-import java.io.*;\n-import javax.net.ssl.*;\n+\/* @test id=tls13\n+ * @summary X509 certificate hostname checking is broken in JDK1.6.0_10\n+ * @library \/test\/lib\n+ * @bug 6766775\n+ * @run main\/othervm IPAddressIPIdentities TLSv1.3 SHA256withRSA\n+ * @author Xuelei Fan\n+ *\/\n+\n+\n+\n+import java.io.PrintStream;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.Proxy;\n+import java.net.URL;\n@@ -42,7 +53,0 @@\n-import java.security.KeyStore;\n-import java.security.KeyFactory;\n-import java.security.cert.Certificate;\n-import java.security.cert.CertificateFactory;\n-import java.security.spec.*;\n-import java.security.interfaces.*;\n-import java.math.BigInteger;\n@@ -51,354 +55,5 @@\n-\/*\n- * Certificates and key used in the test.\n- *\n- * TLS server certificate:\n- * server private key:\n- * -----BEGIN RSA PRIVATE KEY-----\n- * Proc-Type: 4,ENCRYPTED\n- * DEK-Info: DES-EDE3-CBC,D9AE407F6D0E389A\n- *\n- * WPrA7TFol\/cQCcp9oHnXWNpYlvRbbIcQj0m+RKT2Iuzfus+DHt3Zadf8nJpKfX2e\n- * h2rnhlzCN9M7djRDooZKDOPCsdBn51Au7HlZF3S3Opgo7D8XFM1a8t1Je4ke14oI\n- * nw6QKYsBblRziPnP2PZ0zvX24nOv7bbY8beynlJHGs00VWSFdoH2DS0aE1p6D+3n\n- * ptJuJ75dVfZFK4X7162APlNXevX8D6PEQpSiRw1rjjGGcnvQ4HdWk3BxDVDcCNJb\n- * Y1aGNRxsjTDvPi3R9Qx2M+W03QzEPx4SR3ZHVskeSJHaetM0TM\/w\/45Paq4GokXP\n- * ZeTnbEx1xmjkA7h+t4doLL4watx5F6yLsJzu8xB3lt\/1EtmkYtLz1t7X4BetPAXz\n- * zS69X\/VwhKfsOI3qXBWuL2oHPyhDmT1gcaUQwEPSV6ogHEEQEDXdiUS8heNK13KF\n- * TCQYFkETvV2BLxUhV1hypPzRQ6tUpJiAbD5KmoK2lD9slshG2QtvKQq0\/bgkDY5J\n- * LhDHV2dtcZ3kDPkkZXpbcJQvoeH3d09C5sIsuTFo2zgNR6oETHUc5TzP6FY2YYRa\n- * QcK5HcmtsRRiXFm01ac+aMejJUIujjFt84SiKWT\/73vC8AmY4tYcJBLjCg4XIxSH\n- * fdDFLL1YZENNO5ivlp8mdiHqcawx+36L7DrEZQ8RZt6cqST5t\/+XTdM74s6k81GT\n- * pNsa82P2K2zmIUZ\/DL2mKjW1vfRByw1NQFEBkN3vdyZxYfM\/JyUzX4hbjXBEkh9Q\n- * QYrcwLKLjis2QzSvK04B3bvRzRb+4ocWiso8ZPAXAIxZFBWDpTMM2A==\n- * -----END RSA PRIVATE KEY-----\n- *\n- * -----BEGIN RSA PRIVATE KEY-----\n- * MIICXAIBAAKBgQClrFscN6LdmYktsnm4j9VIpecchBeNaZzGrG358h0fORna03Ie\n- * buxEzHCk3LoAMPagTz1UemFqzFfQCn+VKBg\/mtmU8hvIJIh+\/p0PPftXUwizIDPU\n- * PxdHFNHN6gjYDnVOr77M0uyvqXpJ38LZrLgkQJCmA1Yq0DAFQCxPq9l0iQIDAQAB\n- * AoGAbqcbg1E1mkR99uOJoNeQYKFOJyGiiXTMnXV1TseC4+PDfQBU7Dax35GcesBi\n- * CtapIpFKKS5D+ozY6b7ZT8ojxuQ\/uHLPAvz0WDR3ds4iRF8tyu71Q1ZHcQsJa17y\n- * yO7UbkSSKn\/Mp9Rb+\/dKqftUGNXVFLqgHBOzN2s3We3bbbECQQDYBPKOg3hkaGHo\n- * OhpHKqtQ6EVkldihG\/3i4WejRonelXN+HRh1KrB2HBx0M8D\/qAzP1i3rNSlSHer4\n- * 59YRTJnHAkEAxFX\/sVYSn07BHv9Zhn6XXct\/Cj43z\/tKNbzlNbcxqQwQerw3IH51\n- * 8UH2YOA+GD3lXbKp+MytoFLWv8zg4YT\/LwJAfqan75Z1R6lLffRS49bIiq8jwE16\n- * rTrUJ+kv8jKxMqc9B3vXkxpsS1M\/+4E8bqgAmvpgAb8xcsvHsBd9ErdukQJBAKs2\n- * j67W75BrPjBI34pQ1LEfp56IGWXOrq1kF8IbCjxv3+MYRT6Z6UJFkpRymNPNDjsC\n- * dgUYgITiGJHUGXuw3lMCQHEHqo9ZtXz92yFT+VhsNc29B8m\/sqUJdtCcMd\/jGpAF\n- * u6GHufjqIZBpQsk63wbwESAPZZ+kk1O1kS5GIRLX608=\n- * -----END RSA PRIVATE KEY-----\n- *\n- * Private-Key: (1024 bit)\n- * modulus:\n- *     00:a5:ac:5b:1c:37:a2:dd:99:89:2d:b2:79:b8:8f:\n- *     d5:48:a5:e7:1c:84:17:8d:69:9c:c6:ac:6d:f9:f2:\n- *     1d:1f:39:19:da:d3:72:1e:6e:ec:44:cc:70:a4:dc:\n- *     ba:00:30:f6:a0:4f:3d:54:7a:61:6a:cc:57:d0:0a:\n- *     7f:95:28:18:3f:9a:d9:94:f2:1b:c8:24:88:7e:fe:\n- *     9d:0f:3d:fb:57:53:08:b3:20:33:d4:3f:17:47:14:\n- *     d1:cd:ea:08:d8:0e:75:4e:af:be:cc:d2:ec:af:a9:\n- *     7a:49:df:c2:d9:ac:b8:24:40:90:a6:03:56:2a:d0:\n- *     30:05:40:2c:4f:ab:d9:74:89\n- * publicExponent: 65537 (0x10001)\n- * privateExponent:\n- *     6e:a7:1b:83:51:35:9a:44:7d:f6:e3:89:a0:d7:90:\n- *     60:a1:4e:27:21:a2:89:74:cc:9d:75:75:4e:c7:82:\n- *     e3:e3:c3:7d:00:54:ec:36:b1:df:91:9c:7a:c0:62:\n- *     0a:d6:a9:22:91:4a:29:2e:43:fa:8c:d8:e9:be:d9:\n- *     4f:ca:23:c6:e4:3f:b8:72:cf:02:fc:f4:58:34:77:\n- *     76:ce:22:44:5f:2d:ca:ee:f5:43:56:47:71:0b:09:\n- *     6b:5e:f2:c8:ee:d4:6e:44:92:2a:7f:cc:a7:d4:5b:\n- *     fb:f7:4a:a9:fb:54:18:d5:d5:14:ba:a0:1c:13:b3:\n- *     37:6b:37:59:ed:db:6d:b1\n- * prime1:\n- *     00:d8:04:f2:8e:83:78:64:68:61:e8:3a:1a:47:2a:\n- *     ab:50:e8:45:64:95:d8:a1:1b:fd:e2:e1:67:a3:46:\n- *     89:de:95:73:7e:1d:18:75:2a:b0:76:1c:1c:74:33:\n- *     c0:ff:a8:0c:cf:d6:2d:eb:35:29:52:1d:ea:f8:e7:\n- *     d6:11:4c:99:c7\n- * prime2:\n- *     00:c4:55:ff:b1:56:12:9f:4e:c1:1e:ff:59:86:7e:\n- *     97:5d:cb:7f:0a:3e:37:cf:fb:4a:35:bc:e5:35:b7:\n- *     31:a9:0c:10:7a:bc:37:20:7e:75:f1:41:f6:60:e0:\n- *     3e:18:3d:e5:5d:b2:a9:f8:cc:ad:a0:52:d6:bf:cc:\n- *     e0:e1:84:ff:2f\n- * exponent1:\n- *     7e:a6:a7:ef:96:75:47:a9:4b:7d:f4:52:e3:d6:c8:\n- *     8a:af:23:c0:4d:7a:ad:3a:d4:27:e9:2f:f2:32:b1:\n- *     32:a7:3d:07:7b:d7:93:1a:6c:4b:53:3f:fb:81:3c:\n- *     6e:a8:00:9a:fa:60:01:bf:31:72:cb:c7:b0:17:7d:\n- *     12:b7:6e:91\n- * exponent2:\n- *     00:ab:36:8f:ae:d6:ef:90:6b:3e:30:48:df:8a:50:\n- *     d4:b1:1f:a7:9e:88:19:65:ce:ae:ad:64:17:c2:1b:\n- *     0a:3c:6f:df:e3:18:45:3e:99:e9:42:45:92:94:72:\n- *     98:d3:cd:0e:3b:02:76:05:18:80:84:e2:18:91:d4:\n- *     19:7b:b0:de:53\n- * coefficient:\n- *     71:07:aa:8f:59:b5:7c:fd:db:21:53:f9:58:6c:35:\n- *     cd:bd:07:c9:bf:b2:a5:09:76:d0:9c:31:df:e3:1a:\n- *     90:05:bb:a1:87:b9:f8:ea:21:90:69:42:c9:3a:df:\n- *     06:f0:11:20:0f:65:9f:a4:93:53:b5:91:2e:46:21:\n- *     12:d7:eb:4f\n- *\n- *\n- * server certificate:\n- * Data:\n- *     Version: 3 (0x2)\n- *     Serial Number: 7 (0x7)\n- *     Signature Algorithm: md5WithRSAEncryption\n- *     Issuer: C=US, ST=Some-State, L=Some-City, O=Some-Org\n- *     Validity\n- *         Not Before: Dec  8 03:27:57 2008 GMT\n- *         Not After : Aug 25 03:27:57 2028 GMT\n- *     Subject: C=US, ST=Some-State, L=Some-City, O=Some-Org, OU=SSL-Server, CN=localhost\n- *     Subject Public Key Info:\n- *         Public Key Algorithm: rsaEncryption\n- *         RSA Public Key: (1024 bit)\n- *             Modulus (1024 bit):\n- *                 00:a5:ac:5b:1c:37:a2:dd:99:89:2d:b2:79:b8:8f:\n- *                 d5:48:a5:e7:1c:84:17:8d:69:9c:c6:ac:6d:f9:f2:\n- *                 1d:1f:39:19:da:d3:72:1e:6e:ec:44:cc:70:a4:dc:\n- *                 ba:00:30:f6:a0:4f:3d:54:7a:61:6a:cc:57:d0:0a:\n- *                 7f:95:28:18:3f:9a:d9:94:f2:1b:c8:24:88:7e:fe:\n- *                 9d:0f:3d:fb:57:53:08:b3:20:33:d4:3f:17:47:14:\n- *                 d1:cd:ea:08:d8:0e:75:4e:af:be:cc:d2:ec:af:a9:\n- *                 7a:49:df:c2:d9:ac:b8:24:40:90:a6:03:56:2a:d0:\n- *                 30:05:40:2c:4f:ab:d9:74:89\n- *             Exponent: 65537 (0x10001)\n- *     X509v3 extensions:\n- *         X509v3 Basic Constraints:\n- *             CA:FALSE\n- *         X509v3 Key Usage:\n- *             Digital Signature, Non Repudiation, Key Encipherment\n- *         X509v3 Subject Key Identifier:\n- *             ED:6E:DB:F4:B5:56:C8:FB:1A:06:61:3F:0F:08:BB:A6:04:D8:16:54\n- *         X509v3 Authority Key Identifier:\n- *             keyid:FA:B9:51:BF:4C:E7:D9:86:98:33:F9:E7:CB:1E:F1:33:49:F7:A8:14\n- *\n- *         X509v3 Subject Alternative Name: critical\n- *             IP Address:127.0.0.1\n- * Signature Algorithm: md5WithRSAEncryption\n- *\n- * -----BEGIN CERTIFICATE-----\n- * MIICnzCCAgigAwIBAgIBBzANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\n- * MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\n- * EwhTb21lLU9yZzAeFw0wODEyMDgwMzI3NTdaFw0yODA4MjUwMzI3NTdaMHIxCzAJ\n- * BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\n- * dHkxETAPBgNVBAoTCFNvbWUtT3JnMRMwEQYDVQQLEwpTU0wtU2VydmVyMRIwEAYD\n- * VQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAKWsWxw3\n- * ot2ZiS2yebiP1Uil5xyEF41pnMasbfnyHR85GdrTch5u7ETMcKTcugAw9qBPPVR6\n- * YWrMV9AKf5UoGD+a2ZTyG8gkiH7+nQ89+1dTCLMgM9Q\/F0cU0c3qCNgOdU6vvszS\n- * 7K+peknfwtmsuCRAkKYDVirQMAVALE+r2XSJAgMBAAGjbjBsMAkGA1UdEwQCMAAw\n- * CwYDVR0PBAQDAgXgMB0GA1UdDgQWBBTtbtv0tVbI+xoGYT8PCLumBNgWVDAfBgNV\n- * HSMEGDAWgBT6uVG\/TOfZhpgz+efLHvEzSfeoFDASBgNVHREBAf8ECDAGhwR\/AAAB\n- * MA0GCSqGSIb3DQEBBAUAA4GBAFJjItCtCBZcjD69wdqfIbKmRFa6eJAjR6LcoDva\n- * cKC\/sDOLelpspiZ66Zb0Xdv5qQ7QrfOXt3K8QqJKRMdZLF9WfUfy0gJDM32ub91h\n- * pu+TmcGPs+6RdrAQcuvU1ZDV9X8SMj7BtKaim4d5sqFw1npncKiA5xFn8vOYwdun\n- * nZif\n- * -----END CERTIFICATE-----\n- *\n- *\n- * TLS client certificate:\n- * client private key:\n- * ----BEGIN RSA PRIVATE KEY-----\n- * Proc-Type: 4,ENCRYPTED\n- * DEK-Info: DES-EDE3-CBC,FA2A435CD35A9390\n- *\n- * Z+Y2uaETbsUWIyJUyVu1UV2G4rgFYJyACZT6Tp1KjRtxflSh2kXkJ9MpuXMXA0V4\n- * Yy3fDzPqCL9NJmQAYRlAx\/W\/+j4F5EyMWDIx8fUxzONRZyoiwF7jLm+KscAfv6Pf\n- * q7ItWOdj3z7IYrwlB8YIGd3F2cDKT3S+lYRk7rKb\/qT7itbuHnY4Ardh3yl+MZak\n- * jBp+ELUlRsUqSr1V0LoM+0rCCykarpyfhpxEcqsrl0v9Cyi5uhU50\/oKv5zql3SH\n- * l2ImgDjp3batAs8+Bd4NF2aqi0a7Hy44JUHxRm4caZryU\/i\/D9N1MbuM6882HLat\n- * 5N0G+NaIUfywa8mjwq2D5aiit18HqKA6XeRRYeJ5Dvu9DCO4GeFSwcUFIBMI0L46\n- * 7s114+oDodg57pMgITi+04vmUxvqlN9aiyd7f5Fgd7PeHGeOdbMz1NaJLJaPI9++\n- * NakK8eK9iwT\/Gdq0Uap5\/CHW7vCT5PO+h3HY0STH0lWStXhdWnFO04zTdywsbSp+\n- * DLpHeFT66shfeUlxR0PsCbG9vPRt\/QmGLeYQZITppWo\/ylSq4j+pRIuXvuWHdBRN\n- * rTZ8QF4Y7AxQUXVz1j1++s6ZMHTzaK2i9HrhmDs1MbJl+QwWre3Xpv3LvTVz3k5U\n- * wX8kuY1m3STt71QCaRWENq5sRaMImLxZbxc\/ivFl9RAzUqo4NCxLod\/QgA4iLqtO\n- * ztnlpzwlC\/F8HbQ1oqYWwnZAPhzU\/cULtstl+Yrws2c2atO323LbPXZqbASySgig\n- * sNpFXQMObdfP6LN23bY+1SvtK7V4NUTNhpdIc6INQAQ=\n- * -----END RSA PRIVATE KEY-----\n- *\n- * -----BEGIN RSA PRIVATE KEY-----\n- * MIICWwIBAAKBgQC78EA2rCZUTvSjWgAvaSFvuXo6k+yi9uGOx2PYLxIwmS6w8o\/4\n- * Jy0keCiE9wG\/jUR53TvSVfPOPLJbIX3v\/TNKsaP\/xsibuQ98QTWX+ds6BWAFFa9Z\n- * F5KjEK0WHOQHU6+odqJWKpLT+SjgeM9eH0irXBnd4WdDunWN9YKsQ5JEGwIDAQAB\n- * AoGAEbdqNj0wN85hnWyEi\/ObJU8UyKTdL9eaF72QGfcF\/fLSxfd3vurihIeXOkGW\n- * tpn4lIxYcVGM9CognhqgJpl11jFTQzn1KqZ+NEJRKkCHA4hDabKJbSC9fXHvRwrf\n- * BsFpZqgiNxp3HseUTiwnaUVeyPgMt\/jAj5nB5Sib+UyUxrECQQDnNQBiF2aifEg6\n- * zbJOOC7he5CHAdkFxSxWVFVHL6EfXfqdLVkUohMbgZv+XxyIeU2biOExSg49Kds3\n- * FOKgTau1AkEA0Bd1haj6QuCo8I0AXm2WO+MMTZMTvtHD\/bGjKNM+fT4I8rKYnQRX\n- * 1acHdqS9Xx2rNJqZgkMmpESIdPR2fc4yjwJALFeM6EMmqvj8\/VIf5UJ\/Mz14fXwM\n- * PEARfckUxd9LnnFutCBTWlKvKXJVEZb6KO5ixPaegc57Jp3Vbh3yTN44lQJADD\/1\n- * SSMDaIB1MYP7a5Oj7m6VQNPRq8AJe5vDcRnOae0G9dKRrVyeFxO4GsHj6\/+BHp2j\n- * P8nYMn9eURQ7DXjf\/QJAAQzMlWnKGSO8pyTDtnQx3hRMoUkOEhmNq4bQhLkYqtnY\n- * FcqpUQ2qMjW+NiNWk5HnTrMS3L9EdJobMUzaNZLy4w==\n- * -----END RSA PRIVATE KEY-----\n- *\n- * Private-Key: (1024 bit)\n- * modulus:\n- *     00:bb:f0:40:36:ac:26:54:4e:f4:a3:5a:00:2f:69:\n- *     21:6f:b9:7a:3a:93:ec:a2:f6:e1:8e:c7:63:d8:2f:\n- *     12:30:99:2e:b0:f2:8f:f8:27:2d:24:78:28:84:f7:\n- *     01:bf:8d:44:79:dd:3b:d2:55:f3:ce:3c:b2:5b:21:\n- *     7d:ef:fd:33:4a:b1:a3:ff:c6:c8:9b:b9:0f:7c:41:\n- *     35:97:f9:db:3a:05:60:05:15:af:59:17:92:a3:10:\n- *     ad:16:1c:e4:07:53:af:a8:76:a2:56:2a:92:d3:f9:\n- *     28:e0:78:cf:5e:1f:48:ab:5c:19:dd:e1:67:43:ba:\n- *     75:8d:f5:82:ac:43:92:44:1b\n- * publicExponent: 65537 (0x10001)\n- * privateExponent:\n- *     11:b7:6a:36:3d:30:37:ce:61:9d:6c:84:8b:f3:9b:\n- *     25:4f:14:c8:a4:dd:2f:d7:9a:17:bd:90:19:f7:05:\n- *     fd:f2:d2:c5:f7:77:be:ea:e2:84:87:97:3a:41:96:\n- *     b6:99:f8:94:8c:58:71:51:8c:f4:2a:20:9e:1a:a0:\n- *     26:99:75:d6:31:53:43:39:f5:2a:a6:7e:34:42:51:\n- *     2a:40:87:03:88:43:69:b2:89:6d:20:bd:7d:71:ef:\n- *     47:0a:df:06:c1:69:66:a8:22:37:1a:77:1e:c7:94:\n- *     4e:2c:27:69:45:5e:c8:f8:0c:b7:f8:c0:8f:99:c1:\n- *     e5:28:9b:f9:4c:94:c6:b1\n- * prime1:\n- *     00:e7:35:00:62:17:66:a2:7c:48:3a:cd:b2:4e:38:\n- *     2e:e1:7b:90:87:01:d9:05:c5:2c:56:54:55:47:2f:\n- *     a1:1f:5d:fa:9d:2d:59:14:a2:13:1b:81:9b:fe:5f:\n- *     1c:88:79:4d:9b:88:e1:31:4a:0e:3d:29:db:37:14:\n- *     e2:a0:4d:ab:b5\n- * prime2:\n- *     00:d0:17:75:85:a8:fa:42:e0:a8:f0:8d:00:5e:6d:\n- *     96:3b:e3:0c:4d:93:13:be:d1:c3:fd:b1:a3:28:d3:\n- *     3e:7d:3e:08:f2:b2:98:9d:04:57:d5:a7:07:76:a4:\n- *     bd:5f:1d:ab:34:9a:99:82:43:26:a4:44:88:74:f4:\n- *     76:7d:ce:32:8f\n- * exponent1:\n- *     2c:57:8c:e8:43:26:aa:f8:fc:fd:52:1f:e5:42:7f:\n- *     33:3d:78:7d:7c:0c:3c:40:11:7d:c9:14:c5:df:4b:\n- *     9e:71:6e:b4:20:53:5a:52:af:29:72:55:11:96:fa:\n- *     28:ee:62:c4:f6:9e:81:ce:7b:26:9d:d5:6e:1d:f2:\n- *     4c:de:38:95\n- * exponent2:\n- *     0c:3f:f5:49:23:03:68:80:75:31:83:fb:6b:93:a3:\n- *     ee:6e:95:40:d3:d1:ab:c0:09:7b:9b:c3:71:19:ce:\n- *     69:ed:06:f5:d2:91:ad:5c:9e:17:13:b8:1a:c1:e3:\n- *     eb:ff:81:1e:9d:a3:3f:c9:d8:32:7f:5e:51:14:3b:\n- *     0d:78:df:fd\n- * coefficient:\n- *     01:0c:cc:95:69:ca:19:23:bc:a7:24:c3:b6:74:31:\n- *     de:14:4c:a1:49:0e:12:19:8d:ab:86:d0:84:b9:18:\n- *     aa:d9:d8:15:ca:a9:51:0d:aa:32:35:be:36:23:56:\n- *     93:91:e7:4e:b3:12:dc:bf:44:74:9a:1b:31:4c:da:\n- *     35:92:f2:e3\n- *\n- * client certificate:\n- * Data:\n- *     Version: 3 (0x2)\n- *     Serial Number: 6 (0x6)\n- *     Signature Algorithm: md5WithRSAEncryption\n- *     Issuer: C=US, ST=Some-State, L=Some-City, O=Some-Org\n- *     Validity\n- *         Not Before: Dec  8 03:27:34 2008 GMT\n- *         Not After : Aug 25 03:27:34 2028 GMT\n- *     Subject: C=US, ST=Some-State, L=Some-City, O=Some-Org, OU=SSL-Client, CN=localhost\n- *     Subject Public Key Info:\n- *         Public Key Algorithm: rsaEncryption\n- *         RSA Public Key: (1024 bit)\n- *             Modulus (1024 bit):\n- *                 00:bb:f0:40:36:ac:26:54:4e:f4:a3:5a:00:2f:69:\n- *                 21:6f:b9:7a:3a:93:ec:a2:f6:e1:8e:c7:63:d8:2f:\n- *                 12:30:99:2e:b0:f2:8f:f8:27:2d:24:78:28:84:f7:\n- *                 01:bf:8d:44:79:dd:3b:d2:55:f3:ce:3c:b2:5b:21:\n- *                 7d:ef:fd:33:4a:b1:a3:ff:c6:c8:9b:b9:0f:7c:41:\n- *                 35:97:f9:db:3a:05:60:05:15:af:59:17:92:a3:10:\n- *                 ad:16:1c:e4:07:53:af:a8:76:a2:56:2a:92:d3:f9:\n- *                 28:e0:78:cf:5e:1f:48:ab:5c:19:dd:e1:67:43:ba:\n- *                 75:8d:f5:82:ac:43:92:44:1b\n- *             Exponent: 65537 (0x10001)\n- *     X509v3 extensions:\n- *         X509v3 Basic Constraints:\n- *             CA:FALSE\n- *         X509v3 Key Usage:\n- *             Digital Signature, Non Repudiation, Key Encipherment\n- *         X509v3 Subject Key Identifier:\n- *             CD:BB:C8:85:AA:91:BD:FD:1D:BE:CD:67:7C:FF:B3:E9:4C:A8:22:E6\n- *         X509v3 Authority Key Identifier:\n- *             keyid:FA:B9:51:BF:4C:E7:D9:86:98:33:F9:E7:CB:1E:F1:33:49:F7:A8:14\n- *\n- *         X509v3 Subject Alternative Name: critical\n- *             IP Address:127.0.0.1\n- * Signature Algorithm: md5WithRSAEncryption\n- *\n- * -----BEGIN CERTIFICATE-----\n- * MIICnzCCAgigAwIBAgIBBjANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\n- * MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\n- * EwhTb21lLU9yZzAeFw0wODEyMDgwMzI3MzRaFw0yODA4MjUwMzI3MzRaMHIxCzAJ\n- * BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\n- * dHkxETAPBgNVBAoTCFNvbWUtT3JnMRMwEQYDVQQLEwpTU0wtQ2xpZW50MRIwEAYD\n- * VQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALvwQDas\n- * JlRO9KNaAC9pIW+5ejqT7KL24Y7HY9gvEjCZLrDyj\/gnLSR4KIT3Ab+NRHndO9JV\n- * 8848slshfe\/9M0qxo\/\/GyJu5D3xBNZf52zoFYAUVr1kXkqMQrRYc5AdTr6h2olYq\n- * ktP5KOB4z14fSKtcGd3hZ0O6dY31gqxDkkQbAgMBAAGjbjBsMAkGA1UdEwQCMAAw\n- * CwYDVR0PBAQDAgXgMB0GA1UdDgQWBBTNu8iFqpG9\/R2+zWd8\/7PpTKgi5jAfBgNV\n- * HSMEGDAWgBT6uVG\/TOfZhpgz+efLHvEzSfeoFDASBgNVHREBAf8ECDAGhwR\/AAAB\n- * MA0GCSqGSIb3DQEBBAUAA4GBACjj9PS+W6XOF7toFMwMOv\/AemZeBOpcEF1Ei1Hx\n- * HjvB6EOHkMY8tFm5OPzkiWiK3+s3awpSW0jWdzMYwrQJ3\/klMsPDpI7PEuirqwHP\n- * i5Wyl\/vk7jmfWVcBO9MVhPUo4BYl4vS9aj6JA5QbkbkB95LOgT\/BowY0WmHeVsXC\n- * I9aw\n- * -----END CERTIFICATE-----\n- *\n- *\n- *\n- * Trusted CA certificate:\n- * Certificate:\n- *   Data:\n- *     Version: 3 (0x2)\n- *     Serial Number: 0 (0x0)\n- *     Signature Algorithm: md5WithRSAEncryption\n- *     Issuer: C=US, ST=Some-State, L=Some-City, O=Some-Org\n- *     Validity\n- *         Not Before: Dec  8 02:43:36 2008 GMT\n- *         Not After : Aug 25 02:43:36 2028 GMT\n- *     Subject: C=US, ST=Some-State, L=Some-City, O=Some-Org\n- *     Subject Public Key Info:\n- *         Public Key Algorithm: rsaEncryption\n- *         RSA Public Key: (1024 bit)\n- *             Modulus (1024 bit):\n- *                 00:cb:c4:38:20:07:be:88:a7:93:b0:a1:43:51:2d:\n- *                 d7:8e:85:af:54:dd:ad:a2:7b:23:5b:cf:99:13:53:\n- *                 99:45:7d:ee:6d:ba:2d:bf:e3:ad:6e:3d:9f:1a:f9:\n- *                 03:97:e0:17:55:ae:11:26:57:de:01:29:8e:05:3f:\n- *                 21:f7:e7:36:e8:2e:37:d7:48:ac:53:d6:60:0e:c7:\n- *                 50:6d:f6:c5:85:f7:8b:a6:c5:91:35:72:3c:94:ee:\n- *                 f1:17:f0:71:e3:ec:1b:ce:ca:4e:40:42:b0:6d:ee:\n- *                 6a:0e:d6:e5:ad:3c:0f:c9:ba:82:4f:78:f8:89:97:\n- *                 89:2a:95:12:4c:d8:09:2a:e9\n- *             Exponent: 65537 (0x10001)\n- *     X509v3 extensions:\n- *         X509v3 Subject Key Identifier:\n- *             FA:B9:51:BF:4C:E7:D9:86:98:33:F9:E7:CB:1E:F1:33:49:F7:A8:14\n- *         X509v3 Authority Key Identifier:\n- *             keyid:FA:B9:51:BF:4C:E7:D9:86:98:33:F9:E7:CB:1E:F1:33:49:F7:A8:14\n- *             DirName:\/C=US\/ST=Some-State\/L=Some-City\/O=Some-Org\n- *             serial:00\n- *\n- *         X509v3 Basic Constraints:\n- *             CA:TRUE\n- *  Signature Algorithm: md5WithRSAEncryption\n- *\n- * -----BEGIN CERTIFICATE-----\n- * MIICrDCCAhWgAwIBAgIBADANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\n- * MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\n- * EwhTb21lLU9yZzAeFw0wODEyMDgwMjQzMzZaFw0yODA4MjUwMjQzMzZaMEkxCzAJ\n- * BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\n- * dHkxETAPBgNVBAoTCFNvbWUtT3JnMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKB\n- * gQDLxDggB76Ip5OwoUNRLdeOha9U3a2ieyNbz5kTU5lFfe5tui2\/461uPZ8a+QOX\n- * 4BdVrhEmV94BKY4FPyH35zboLjfXSKxT1mAOx1Bt9sWF94umxZE1cjyU7vEX8HHj\n- * 7BvOyk5AQrBt7moO1uWtPA\/JuoJPePiJl4kqlRJM2Akq6QIDAQABo4GjMIGgMB0G\n- * A1UdDgQWBBT6uVG\/TOfZhpgz+efLHvEzSfeoFDBxBgNVHSMEajBogBT6uVG\/TOfZ\n- * hpgz+efLHvEzSfeoFKFNpEswSTELMAkGA1UEBhMCVVMxEzARBgNVBAgTClNvbWUt\n- * U3RhdGUxEjAQBgNVBAcTCVNvbWUtQ2l0eTERMA8GA1UEChMIU29tZS1PcmeCAQAw\n- * DAYDVR0TBAUwAwEB\/zANBgkqhkiG9w0BAQQFAAOBgQBcIm534U123Hz+rtyYO5uA\n- * ofd81G6FnTfEAV8Kw9fGyyEbQZclBv34A9JsFKeMvU4OFIaixD7nLZ\/NZ+IWbhmZ\n- * LovmJXyCkOufea73pNiZ+f\/4\/ScZaIlM\/PRycQSqbFNd4j9Wott+08qxHPLpsf3P\n- * 6Mvf0r1PNTY2hwTJLJmKtg==\n- * -----END CERTIFICATE---\n- *\/\n+import javax.net.ssl.HttpsURLConnection;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLServerSocket;\n+import javax.net.ssl.SSLServerSocketFactory;\n+import javax.net.ssl.SSLSocket;\n@@ -407,3 +62,1 @@\n-public class IPAddressIPIdentities {\n-    static Map cookies;\n-    ServerSocket ss;\n+public class IPAddressIPIdentities extends IdentitiesBase {\n@@ -424,205 +77,0 @@\n-    \/*\n-     * Where do we find the keystores?\n-     *\/\n-    static String trusedCertStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICrDCCAhWgAwIBAgIBADANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\\n\" +\n-        \"MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\\n\" +\n-        \"EwhTb21lLU9yZzAeFw0wODEyMDgwMjQzMzZaFw0yODA4MjUwMjQzMzZaMEkxCzAJ\\n\" +\n-        \"BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\\n\" +\n-        \"dHkxETAPBgNVBAoTCFNvbWUtT3JnMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKB\\n\" +\n-        \"gQDLxDggB76Ip5OwoUNRLdeOha9U3a2ieyNbz5kTU5lFfe5tui2\/461uPZ8a+QOX\\n\" +\n-        \"4BdVrhEmV94BKY4FPyH35zboLjfXSKxT1mAOx1Bt9sWF94umxZE1cjyU7vEX8HHj\\n\" +\n-        \"7BvOyk5AQrBt7moO1uWtPA\/JuoJPePiJl4kqlRJM2Akq6QIDAQABo4GjMIGgMB0G\\n\" +\n-        \"A1UdDgQWBBT6uVG\/TOfZhpgz+efLHvEzSfeoFDBxBgNVHSMEajBogBT6uVG\/TOfZ\\n\" +\n-        \"hpgz+efLHvEzSfeoFKFNpEswSTELMAkGA1UEBhMCVVMxEzARBgNVBAgTClNvbWUt\\n\" +\n-        \"U3RhdGUxEjAQBgNVBAcTCVNvbWUtQ2l0eTERMA8GA1UEChMIU29tZS1PcmeCAQAw\\n\" +\n-        \"DAYDVR0TBAUwAwEB\/zANBgkqhkiG9w0BAQQFAAOBgQBcIm534U123Hz+rtyYO5uA\\n\" +\n-        \"ofd81G6FnTfEAV8Kw9fGyyEbQZclBv34A9JsFKeMvU4OFIaixD7nLZ\/NZ+IWbhmZ\\n\" +\n-        \"LovmJXyCkOufea73pNiZ+f\/4\/ScZaIlM\/PRycQSqbFNd4j9Wott+08qxHPLpsf3P\\n\" +\n-        \"6Mvf0r1PNTY2hwTJLJmKtg==\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-    static String serverCertStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICnzCCAgigAwIBAgIBBzANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\\n\" +\n-        \"MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\\n\" +\n-        \"EwhTb21lLU9yZzAeFw0wODEyMDgwMzI3NTdaFw0yODA4MjUwMzI3NTdaMHIxCzAJ\\n\" +\n-        \"BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\\n\" +\n-        \"dHkxETAPBgNVBAoTCFNvbWUtT3JnMRMwEQYDVQQLEwpTU0wtU2VydmVyMRIwEAYD\\n\" +\n-        \"VQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAKWsWxw3\\n\" +\n-        \"ot2ZiS2yebiP1Uil5xyEF41pnMasbfnyHR85GdrTch5u7ETMcKTcugAw9qBPPVR6\\n\" +\n-        \"YWrMV9AKf5UoGD+a2ZTyG8gkiH7+nQ89+1dTCLMgM9Q\/F0cU0c3qCNgOdU6vvszS\\n\" +\n-        \"7K+peknfwtmsuCRAkKYDVirQMAVALE+r2XSJAgMBAAGjbjBsMAkGA1UdEwQCMAAw\\n\" +\n-        \"CwYDVR0PBAQDAgXgMB0GA1UdDgQWBBTtbtv0tVbI+xoGYT8PCLumBNgWVDAfBgNV\\n\" +\n-        \"HSMEGDAWgBT6uVG\/TOfZhpgz+efLHvEzSfeoFDASBgNVHREBAf8ECDAGhwR\/AAAB\\n\" +\n-        \"MA0GCSqGSIb3DQEBBAUAA4GBAFJjItCtCBZcjD69wdqfIbKmRFa6eJAjR6LcoDva\\n\" +\n-        \"cKC\/sDOLelpspiZ66Zb0Xdv5qQ7QrfOXt3K8QqJKRMdZLF9WfUfy0gJDM32ub91h\\n\" +\n-        \"pu+TmcGPs+6RdrAQcuvU1ZDV9X8SMj7BtKaim4d5sqFw1npncKiA5xFn8vOYwdun\\n\" +\n-        \"nZif\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-    static String clientCertStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICnzCCAgigAwIBAgIBBjANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\\n\" +\n-        \"MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\\n\" +\n-        \"EwhTb21lLU9yZzAeFw0wODEyMDgwMzI3MzRaFw0yODA4MjUwMzI3MzRaMHIxCzAJ\\n\" +\n-        \"BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\\n\" +\n-        \"dHkxETAPBgNVBAoTCFNvbWUtT3JnMRMwEQYDVQQLEwpTU0wtQ2xpZW50MRIwEAYD\\n\" +\n-        \"VQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALvwQDas\\n\" +\n-        \"JlRO9KNaAC9pIW+5ejqT7KL24Y7HY9gvEjCZLrDyj\/gnLSR4KIT3Ab+NRHndO9JV\\n\" +\n-        \"8848slshfe\/9M0qxo\/\/GyJu5D3xBNZf52zoFYAUVr1kXkqMQrRYc5AdTr6h2olYq\\n\" +\n-        \"ktP5KOB4z14fSKtcGd3hZ0O6dY31gqxDkkQbAgMBAAGjbjBsMAkGA1UdEwQCMAAw\\n\" +\n-        \"CwYDVR0PBAQDAgXgMB0GA1UdDgQWBBTNu8iFqpG9\/R2+zWd8\/7PpTKgi5jAfBgNV\\n\" +\n-        \"HSMEGDAWgBT6uVG\/TOfZhpgz+efLHvEzSfeoFDASBgNVHREBAf8ECDAGhwR\/AAAB\\n\" +\n-        \"MA0GCSqGSIb3DQEBBAUAA4GBACjj9PS+W6XOF7toFMwMOv\/AemZeBOpcEF1Ei1Hx\\n\" +\n-        \"HjvB6EOHkMY8tFm5OPzkiWiK3+s3awpSW0jWdzMYwrQJ3\/klMsPDpI7PEuirqwHP\\n\" +\n-        \"i5Wyl\/vk7jmfWVcBO9MVhPUo4BYl4vS9aj6JA5QbkbkB95LOgT\/BowY0WmHeVsXC\\n\" +\n-        \"I9aw\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-\n-    static byte serverPrivateExponent[] = {\n-        (byte)0x6e, (byte)0xa7, (byte)0x1b, (byte)0x83,\n-        (byte)0x51, (byte)0x35, (byte)0x9a, (byte)0x44,\n-        (byte)0x7d, (byte)0xf6, (byte)0xe3, (byte)0x89,\n-        (byte)0xa0, (byte)0xd7, (byte)0x90, (byte)0x60,\n-        (byte)0xa1, (byte)0x4e, (byte)0x27, (byte)0x21,\n-        (byte)0xa2, (byte)0x89, (byte)0x74, (byte)0xcc,\n-        (byte)0x9d, (byte)0x75, (byte)0x75, (byte)0x4e,\n-        (byte)0xc7, (byte)0x82, (byte)0xe3, (byte)0xe3,\n-        (byte)0xc3, (byte)0x7d, (byte)0x00, (byte)0x54,\n-        (byte)0xec, (byte)0x36, (byte)0xb1, (byte)0xdf,\n-        (byte)0x91, (byte)0x9c, (byte)0x7a, (byte)0xc0,\n-        (byte)0x62, (byte)0x0a, (byte)0xd6, (byte)0xa9,\n-        (byte)0x22, (byte)0x91, (byte)0x4a, (byte)0x29,\n-        (byte)0x2e, (byte)0x43, (byte)0xfa, (byte)0x8c,\n-        (byte)0xd8, (byte)0xe9, (byte)0xbe, (byte)0xd9,\n-        (byte)0x4f, (byte)0xca, (byte)0x23, (byte)0xc6,\n-        (byte)0xe4, (byte)0x3f, (byte)0xb8, (byte)0x72,\n-        (byte)0xcf, (byte)0x02, (byte)0xfc, (byte)0xf4,\n-        (byte)0x58, (byte)0x34, (byte)0x77, (byte)0x76,\n-        (byte)0xce, (byte)0x22, (byte)0x44, (byte)0x5f,\n-        (byte)0x2d, (byte)0xca, (byte)0xee, (byte)0xf5,\n-        (byte)0x43, (byte)0x56, (byte)0x47, (byte)0x71,\n-        (byte)0x0b, (byte)0x09, (byte)0x6b, (byte)0x5e,\n-        (byte)0xf2, (byte)0xc8, (byte)0xee, (byte)0xd4,\n-        (byte)0x6e, (byte)0x44, (byte)0x92, (byte)0x2a,\n-        (byte)0x7f, (byte)0xcc, (byte)0xa7, (byte)0xd4,\n-        (byte)0x5b, (byte)0xfb, (byte)0xf7, (byte)0x4a,\n-        (byte)0xa9, (byte)0xfb, (byte)0x54, (byte)0x18,\n-        (byte)0xd5, (byte)0xd5, (byte)0x14, (byte)0xba,\n-        (byte)0xa0, (byte)0x1c, (byte)0x13, (byte)0xb3,\n-        (byte)0x37, (byte)0x6b, (byte)0x37, (byte)0x59,\n-        (byte)0xed, (byte)0xdb, (byte)0x6d, (byte)0xb1\n-    };\n-\n-    static byte serverModulus[] = {\n-        (byte)0x00,\n-        (byte)0xa5, (byte)0xac, (byte)0x5b, (byte)0x1c,\n-        (byte)0x37, (byte)0xa2, (byte)0xdd, (byte)0x99,\n-        (byte)0x89, (byte)0x2d, (byte)0xb2, (byte)0x79,\n-        (byte)0xb8, (byte)0x8f, (byte)0xd5, (byte)0x48,\n-        (byte)0xa5, (byte)0xe7, (byte)0x1c, (byte)0x84,\n-        (byte)0x17, (byte)0x8d, (byte)0x69, (byte)0x9c,\n-        (byte)0xc6, (byte)0xac, (byte)0x6d, (byte)0xf9,\n-        (byte)0xf2, (byte)0x1d, (byte)0x1f, (byte)0x39,\n-        (byte)0x19, (byte)0xda, (byte)0xd3, (byte)0x72,\n-        (byte)0x1e, (byte)0x6e, (byte)0xec, (byte)0x44,\n-        (byte)0xcc, (byte)0x70, (byte)0xa4, (byte)0xdc,\n-        (byte)0xba, (byte)0x00, (byte)0x30, (byte)0xf6,\n-        (byte)0xa0, (byte)0x4f, (byte)0x3d, (byte)0x54,\n-        (byte)0x7a, (byte)0x61, (byte)0x6a, (byte)0xcc,\n-        (byte)0x57, (byte)0xd0, (byte)0x0a, (byte)0x7f,\n-        (byte)0x95, (byte)0x28, (byte)0x18, (byte)0x3f,\n-        (byte)0x9a, (byte)0xd9, (byte)0x94, (byte)0xf2,\n-        (byte)0x1b, (byte)0xc8, (byte)0x24, (byte)0x88,\n-        (byte)0x7e, (byte)0xfe, (byte)0x9d, (byte)0x0f,\n-        (byte)0x3d, (byte)0xfb, (byte)0x57, (byte)0x53,\n-        (byte)0x08, (byte)0xb3, (byte)0x20, (byte)0x33,\n-        (byte)0xd4, (byte)0x3f, (byte)0x17, (byte)0x47,\n-        (byte)0x14, (byte)0xd1, (byte)0xcd, (byte)0xea,\n-        (byte)0x08, (byte)0xd8, (byte)0x0e, (byte)0x75,\n-        (byte)0x4e, (byte)0xaf, (byte)0xbe, (byte)0xcc,\n-        (byte)0xd2, (byte)0xec, (byte)0xaf, (byte)0xa9,\n-        (byte)0x7a, (byte)0x49, (byte)0xdf, (byte)0xc2,\n-        (byte)0xd9, (byte)0xac, (byte)0xb8, (byte)0x24,\n-        (byte)0x40, (byte)0x90, (byte)0xa6, (byte)0x03,\n-        (byte)0x56, (byte)0x2a, (byte)0xd0, (byte)0x30,\n-        (byte)0x05, (byte)0x40, (byte)0x2c, (byte)0x4f,\n-        (byte)0xab, (byte)0xd9, (byte)0x74, (byte)0x89\n-    };\n-\n-    static byte clientPrivateExponent[] = {\n-        (byte)0x11, (byte)0xb7, (byte)0x6a, (byte)0x36,\n-        (byte)0x3d, (byte)0x30, (byte)0x37, (byte)0xce,\n-        (byte)0x61, (byte)0x9d, (byte)0x6c, (byte)0x84,\n-        (byte)0x8b, (byte)0xf3, (byte)0x9b, (byte)0x25,\n-        (byte)0x4f, (byte)0x14, (byte)0xc8, (byte)0xa4,\n-        (byte)0xdd, (byte)0x2f, (byte)0xd7, (byte)0x9a,\n-        (byte)0x17, (byte)0xbd, (byte)0x90, (byte)0x19,\n-        (byte)0xf7, (byte)0x05, (byte)0xfd, (byte)0xf2,\n-        (byte)0xd2, (byte)0xc5, (byte)0xf7, (byte)0x77,\n-        (byte)0xbe, (byte)0xea, (byte)0xe2, (byte)0x84,\n-        (byte)0x87, (byte)0x97, (byte)0x3a, (byte)0x41,\n-        (byte)0x96, (byte)0xb6, (byte)0x99, (byte)0xf8,\n-        (byte)0x94, (byte)0x8c, (byte)0x58, (byte)0x71,\n-        (byte)0x51, (byte)0x8c, (byte)0xf4, (byte)0x2a,\n-        (byte)0x20, (byte)0x9e, (byte)0x1a, (byte)0xa0,\n-        (byte)0x26, (byte)0x99, (byte)0x75, (byte)0xd6,\n-        (byte)0x31, (byte)0x53, (byte)0x43, (byte)0x39,\n-        (byte)0xf5, (byte)0x2a, (byte)0xa6, (byte)0x7e,\n-        (byte)0x34, (byte)0x42, (byte)0x51, (byte)0x2a,\n-        (byte)0x40, (byte)0x87, (byte)0x03, (byte)0x88,\n-        (byte)0x43, (byte)0x69, (byte)0xb2, (byte)0x89,\n-        (byte)0x6d, (byte)0x20, (byte)0xbd, (byte)0x7d,\n-        (byte)0x71, (byte)0xef, (byte)0x47, (byte)0x0a,\n-        (byte)0xdf, (byte)0x06, (byte)0xc1, (byte)0x69,\n-        (byte)0x66, (byte)0xa8, (byte)0x22, (byte)0x37,\n-        (byte)0x1a, (byte)0x77, (byte)0x1e, (byte)0xc7,\n-        (byte)0x94, (byte)0x4e, (byte)0x2c, (byte)0x27,\n-        (byte)0x69, (byte)0x45, (byte)0x5e, (byte)0xc8,\n-        (byte)0xf8, (byte)0x0c, (byte)0xb7, (byte)0xf8,\n-        (byte)0xc0, (byte)0x8f, (byte)0x99, (byte)0xc1,\n-        (byte)0xe5, (byte)0x28, (byte)0x9b, (byte)0xf9,\n-        (byte)0x4c, (byte)0x94, (byte)0xc6, (byte)0xb1\n-    };\n-\n-    static byte clientModulus[] = {\n-        (byte)0x00,\n-        (byte)0xbb, (byte)0xf0, (byte)0x40, (byte)0x36,\n-        (byte)0xac, (byte)0x26, (byte)0x54, (byte)0x4e,\n-        (byte)0xf4, (byte)0xa3, (byte)0x5a, (byte)0x00,\n-        (byte)0x2f, (byte)0x69, (byte)0x21, (byte)0x6f,\n-        (byte)0xb9, (byte)0x7a, (byte)0x3a, (byte)0x93,\n-        (byte)0xec, (byte)0xa2, (byte)0xf6, (byte)0xe1,\n-        (byte)0x8e, (byte)0xc7, (byte)0x63, (byte)0xd8,\n-        (byte)0x2f, (byte)0x12, (byte)0x30, (byte)0x99,\n-        (byte)0x2e, (byte)0xb0, (byte)0xf2, (byte)0x8f,\n-        (byte)0xf8, (byte)0x27, (byte)0x2d, (byte)0x24,\n-        (byte)0x78, (byte)0x28, (byte)0x84, (byte)0xf7,\n-        (byte)0x01, (byte)0xbf, (byte)0x8d, (byte)0x44,\n-        (byte)0x79, (byte)0xdd, (byte)0x3b, (byte)0xd2,\n-        (byte)0x55, (byte)0xf3, (byte)0xce, (byte)0x3c,\n-        (byte)0xb2, (byte)0x5b, (byte)0x21, (byte)0x7d,\n-        (byte)0xef, (byte)0xfd, (byte)0x33, (byte)0x4a,\n-        (byte)0xb1, (byte)0xa3, (byte)0xff, (byte)0xc6,\n-        (byte)0xc8, (byte)0x9b, (byte)0xb9, (byte)0x0f,\n-        (byte)0x7c, (byte)0x41, (byte)0x35, (byte)0x97,\n-        (byte)0xf9, (byte)0xdb, (byte)0x3a, (byte)0x05,\n-        (byte)0x60, (byte)0x05, (byte)0x15, (byte)0xaf,\n-        (byte)0x59, (byte)0x17, (byte)0x92, (byte)0xa3,\n-        (byte)0x10, (byte)0xad, (byte)0x16, (byte)0x1c,\n-        (byte)0xe4, (byte)0x07, (byte)0x53, (byte)0xaf,\n-        (byte)0xa8, (byte)0x76, (byte)0xa2, (byte)0x56,\n-        (byte)0x2a, (byte)0x92, (byte)0xd3, (byte)0xf9,\n-        (byte)0x28, (byte)0xe0, (byte)0x78, (byte)0xcf,\n-        (byte)0x5e, (byte)0x1f, (byte)0x48, (byte)0xab,\n-        (byte)0x5c, (byte)0x19, (byte)0xdd, (byte)0xe1,\n-        (byte)0x67, (byte)0x43, (byte)0xba, (byte)0x75,\n-        (byte)0x8d, (byte)0xf5, (byte)0x82, (byte)0xac,\n-        (byte)0x43, (byte)0x92, (byte)0x44, (byte)0x1b\n-    };\n-\n-    static char passphrase[] = \"passphrase\".toCharArray();\n-\n@@ -639,4 +87,0 @@\n-    \/*\n-     * Turn on SSL debugging?\n-     *\/\n-    static boolean debug = false;\n@@ -653,2 +97,1 @@\n-        SSLContext context = getSSLContext(trusedCertStr, serverCertStr,\n-            serverModulus, serverPrivateExponent, passphrase);\n+        SSLContext context = getServerSSLContext();\n@@ -709,2 +152,1 @@\n-            SSLContext context = getSSLContext(trusedCertStr, clientCertStr,\n-                clientModulus, clientPrivateExponent, passphrase);\n+            SSLContext context = getClientSSLContext();\n@@ -760,5 +202,7 @@\n-        \/\/ MD5 is used in this test case, don't disable MD5 algorithm.\n-        Security.setProperty(\"jdk.certpath.disabledAlgorithms\",\n-                \"MD2, RSA keySize < 1024\");\n-        Security.setProperty(\"jdk.tls.disabledAlgorithms\",\n-                \"SSLv3, RC4, DH keySize < 768\");\n+        if (args[1].contains(\"MD5\")) {\n+            \/\/ MD5 is used in this test case, don't disable MD5 algorithm.\n+            Security.setProperty(\"jdk.certpath.disabledAlgorithms\",\n+                    \"MD2, RSA keySize < 1024\");\n+            Security.setProperty(\"jdk.tls.disabledAlgorithms\",\n+                    \"SSLv3, RC4, DH keySize < 768\");\n+        }\n@@ -772,1 +216,1 @@\n-        new IPAddressIPIdentities();\n+        new IPAddressIPIdentities(args[0], args[1]);\n@@ -782,1 +226,3 @@\n-    IPAddressIPIdentities() throws Exception {\n+    IPAddressIPIdentities(String protocol, String signatureAlg) throws Exception {\n+        super(protocol, signatureAlg);\n+\n@@ -857,61 +303,0 @@\n-\n-    \/\/ get the ssl context\n-    private static SSLContext getSSLContext(String trusedCertStr,\n-            String keyCertStr, byte[] modulus,\n-            byte[] privateExponent, char[] passphrase) throws Exception {\n-\n-        \/\/ generate certificate from cert string\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-\n-        ByteArrayInputStream is =\n-                    new ByteArrayInputStream(trusedCertStr.getBytes());\n-        Certificate trusedCert = cf.generateCertificate(is);\n-        is.close();\n-\n-        \/\/ create a key store\n-        KeyStore ks = KeyStore.getInstance(\"JKS\");\n-        ks.load(null, null);\n-\n-        \/\/ import the trused cert\n-        ks.setCertificateEntry(\"RSA Export Signer\", trusedCert);\n-\n-        if (keyCertStr != null) {\n-            \/\/ generate the private key.\n-            RSAPrivateKeySpec priKeySpec = new RSAPrivateKeySpec(\n-                                            new BigInteger(modulus),\n-                                            new BigInteger(privateExponent));\n-            KeyFactory kf = KeyFactory.getInstance(\"RSA\");\n-            RSAPrivateKey priKey =\n-                    (RSAPrivateKey)kf.generatePrivate(priKeySpec);\n-\n-            \/\/ generate certificate chain\n-            is = new ByteArrayInputStream(keyCertStr.getBytes());\n-            Certificate keyCert = cf.generateCertificate(is);\n-            is.close();\n-\n-            Certificate[] chain = new Certificate[2];\n-            chain[0] = keyCert;\n-            chain[1] = trusedCert;\n-\n-            \/\/ import the key entry.\n-            ks.setKeyEntry(\"Whatever\", priKey, passphrase, chain);\n-        }\n-\n-        \/\/ create SSL context\n-        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"PKIX\");\n-        tmf.init(ks);\n-\n-        SSLContext ctx = SSLContext.getInstance(\"TLSv1.2\");\n-\n-        if (keyCertStr != null) {\n-            KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n-            kmf.init(ks, passphrase);\n-\n-            ctx.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\n-        } else {\n-            ctx.init(null, tmf.getTrustManagers(), null);\n-        }\n-\n-        return ctx;\n-    }\n-\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/https\/HttpsURLConnection\/IPAddressIPIdentities.java","additions":36,"deletions":651,"binary":false,"changes":687,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-\/* @test\n+\/* @test id=tls12\n@@ -33,1 +33,9 @@\n- * @run main\/othervm IPIdentities\n+ * @run main\/othervm IPIdentities TLSv1.2 MD5withRSA\n+ * @author Xuelei Fan\n+ *\/\n+\n+\/* @test id=tls13\n+ * @summary X509 certificate hostname checking is broken in JDK1.6.0_10\n+ * @bug 6766775\n+ * @library \/test\/lib\n+ * @run main\/othervm IPIdentities TLSv1.3 SHA256withRSA\n@@ -43,4 +51,0 @@\n-import java.security.KeyPair;\n-import java.security.KeyPairGenerator;\n-import java.security.KeyStore;\n-import java.security.SecureRandom;\n@@ -48,4 +52,0 @@\n-import java.security.cert.X509Certificate;\n-\n-import java.security.cert.Certificate;\n-import java.math.BigInteger;\n@@ -53,8 +53,0 @@\n-import jdk.test.lib.security.CertificateBuilder;\n-import jdk.test.lib.security.CertificateBuilder.KeyUsage;\n-import sun.security.x509.AuthorityKeyIdentifierExtension;\n-import sun.security.x509.GeneralName;\n-import sun.security.x509.GeneralNames;\n-import sun.security.x509.KeyIdentifier;\n-import sun.security.x509.SerialNumber;\n-import sun.security.x509.X500Name;\n@@ -63,1 +55,0 @@\n-import javax.net.ssl.KeyManagerFactory;\n@@ -68,1 +59,0 @@\n-import javax.net.ssl.TrustManagerFactory;\n@@ -71,1 +61,1 @@\n-public class IPIdentities {\n+public class IPIdentities extends IdentitiesBase {\n@@ -86,11 +76,0 @@\n-    static X509Certificate trustedCert;\n-\n-    static X509Certificate serverCert;\n-\n-    static X509Certificate clientCert;\n-\n-    static KeyPair serverKeys;\n-    static KeyPair clientKeys;\n-\n-    static char passphrase[] = \"passphrase\".toCharArray();\n-\n@@ -107,4 +86,1 @@\n-    \/*\n-     * Turn on SSL debugging?\n-     *\/\n-    static boolean debug = Boolean.getBoolean(\"test.debug\");\n+\n@@ -121,2 +97,1 @@\n-        SSLContext context = getSSLContext(trustedCert, serverCert,\n-            serverKeys, passphrase);\n+        SSLContext context = getServerSSLContext();\n@@ -177,2 +152,1 @@\n-            SSLContext context = getSSLContext(trustedCert, clientCert,\n-                    clientKeys, passphrase);\n+            SSLContext context = getClientSSLContext();\n@@ -226,25 +200,0 @@\n-    private static X509Certificate createTrustedCert(KeyPair caKeys) throws Exception {\n-        SecureRandom random = new SecureRandom();\n-\n-        KeyIdentifier kid = new KeyIdentifier(caKeys.getPublic());\n-        GeneralNames gns = new GeneralNames();\n-        GeneralName name = new GeneralName(new X500Name(\n-                \"O=Some-Org, L=Some-City, ST=Some-State, C=US\"));\n-        gns.add(name);\n-        BigInteger serialNumber = BigInteger.valueOf(random.nextLong(1000000)+1);\n-        return CertificateBuilder.newCertificateBuilder(\n-                \"O=Some-Org, L=Some-City, ST=Some-State, C=US\",\n-                caKeys.getPublic(), caKeys.getPublic())\n-                .setSerialNumber(serialNumber)\n-                .addExtension(new AuthorityKeyIdentifierExtension(kid, gns,\n-                        new SerialNumber(serialNumber)))\n-                .addBasicConstraintsExt(true, true, -1)\n-                .setOneHourValidity()\n-                .build(null, caKeys.getPrivate(), \"MD5WithRSA\");\n-    }\n-\n-    private static void setupCertificates() throws Exception {\n-        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\");\n-        KeyPair caKeys = kpg.generateKeyPair();\n-        serverKeys = kpg.generateKeyPair();\n-        clientKeys = kpg.generateKeyPair();\n@@ -252,32 +201,0 @@\n-        trustedCert = createTrustedCert(caKeys);\n-        if (debug) {\n-            System.out.println(\"----------- Trusted Cert -----------\");\n-            CertificateBuilder.printCertificate(trustedCert, System.out);\n-        }\n-\n-        serverCert = CertificateBuilder.newCertificateBuilder(\n-                \"O=Some-Org, L=Some-City, ST=Some-State, C=US\",\n-                serverKeys.getPublic(), caKeys.getPublic(),\n-                KeyUsage.DIGITAL_SIGNATURE, KeyUsage.NONREPUDIATION, KeyUsage.KEY_ENCIPHERMENT)\n-                .addBasicConstraintsExt(false, false, -1)\n-                .addExtension(CertificateBuilder.createIPSubjectAltNameExt(true, \"127.0.0.1\"))\n-                .setOneHourValidity()\n-                .build(trustedCert, caKeys.getPrivate(), \"MD5WithRSA\");\n-        if (debug) {\n-            System.out.println(\"----------- Server Cert -----------\");\n-            CertificateBuilder.printCertificate(serverCert, System.out);\n-        }\n-\n-        clientCert = CertificateBuilder.newCertificateBuilder(\n-                \"CN=localhost, OU=SSL-Client, O=Some-Org, L=Some-City, ST=Some-State, C=US\",\n-                clientKeys.getPublic(), caKeys.getPublic(),\n-                KeyUsage.DIGITAL_SIGNATURE, KeyUsage.NONREPUDIATION, KeyUsage.KEY_ENCIPHERMENT)\n-                .addExtension(CertificateBuilder.createIPSubjectAltNameExt(true, \"127.0.0.1\"))\n-                .addBasicConstraintsExt(false, false, -1)\n-                .setOneHourValidity()\n-                .build(trustedCert, caKeys.getPrivate(), \"MD5WithRSA\");\n-        if (debug) {\n-            System.out.println(\"----------- Client Cert -----------\");\n-            CertificateBuilder.printCertificate(clientCert, System.out);\n-        }\n-    }\n@@ -286,5 +203,7 @@\n-        \/\/ MD5 is used in this test case, don't disable MD5 algorithm.\n-        Security.setProperty(\"jdk.certpath.disabledAlgorithms\",\n-                \"MD2, RSA keySize < 1024\");\n-        Security.setProperty(\"jdk.tls.disabledAlgorithms\",\n-                \"SSLv3, RC4, DH keySize < 768\");\n+        if (args[1].contains(\"MD5\")) {\n+            \/\/ MD5 is used in this test case, don't disable MD5 algorithm.\n+            Security.setProperty(\"jdk.certpath.disabledAlgorithms\",\n+                    \"MD2, RSA keySize < 1024\");\n+            Security.setProperty(\"jdk.tls.disabledAlgorithms\",\n+                    \"SSLv3, RC4, DH keySize < 768\");\n+        }\n@@ -296,2 +215,0 @@\n-        setupCertificates();\n-\n@@ -301,1 +218,1 @@\n-        new IPIdentities();\n+        new IPIdentities(args[0], args[1]);\n@@ -311,1 +228,3 @@\n-    IPIdentities() throws Exception {\n+    IPIdentities(String protocol, String signatureAlg) throws Exception {\n+        super(protocol, signatureAlg);\n+\n@@ -387,38 +306,0 @@\n-    \/\/ get the ssl context\n-    private static SSLContext getSSLContext(X509Certificate trustedCert,\n-            X509Certificate keyCert, KeyPair key, char[] passphrase) throws Exception {\n-\n-        \/\/ create a key store\n-        KeyStore ks = KeyStore.getInstance(\"PKCS12\");\n-        ks.load(null, null);\n-\n-        \/\/ import the trused cert\n-        ks.setCertificateEntry(\"RSA Export Signer\", trustedCert);\n-\n-        if (keyCert != null) {\n-            Certificate[] chain = new Certificate[2];\n-            chain[0] = keyCert;\n-            chain[1] = trustedCert;\n-\n-            \/\/ import the key entry.\n-            ks.setKeyEntry(\"Whatever\", key.getPrivate(), passphrase, chain);\n-        }\n-\n-        \/\/ create SSL context\n-        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"PKIX\");\n-        tmf.init(ks);\n-\n-        SSLContext ctx = SSLContext.getInstance(\"TLSv1.2\");\n-\n-        if (keyCert != null) {\n-            KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n-            kmf.init(ks, passphrase);\n-\n-            ctx.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\n-        } else {\n-            ctx.init(null, tmf.getTrustManagers(), null);\n-        }\n-\n-        return ctx;\n-    }\n-\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/https\/HttpsURLConnection\/IPIdentities.java","additions":25,"deletions":144,"binary":false,"changes":169,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-\/* @test\n+\/* @test id=tls12\n@@ -32,1 +32,2 @@\n- * @run main\/othervm Identities\n+ * @library \/test\/lib\n+ * @run main\/othervm Identities TLSv1.2 MD5withRSA\n@@ -36,12 +37,0 @@\n-import java.net.*;\n-import java.util.*;\n-import java.io.*;\n-import javax.net.ssl.*;\n-import java.security.Security;\n-import java.security.KeyStore;\n-import java.security.KeyFactory;\n-import java.security.cert.Certificate;\n-import java.security.cert.CertificateFactory;\n-import java.security.spec.*;\n-import java.security.interfaces.*;\n-import java.math.BigInteger;\n@@ -49,353 +38,6 @@\n-\/*\n- * Certificates and key used in the test.\n- *\n- * TLS server certificate:\n- * server private key:\n- * -----BEGIN RSA PRIVATE KEY-----\n- * Proc-Type: 4,ENCRYPTED\n- * DEK-Info: DES-EDE3-CBC,D9AE407F6D0E389A\n- *\n- * WPrA7TFol\/cQCcp9oHnXWNpYlvRbbIcQj0m+RKT2Iuzfus+DHt3Zadf8nJpKfX2e\n- * h2rnhlzCN9M7djRDooZKDOPCsdBn51Au7HlZF3S3Opgo7D8XFM1a8t1Je4ke14oI\n- * nw6QKYsBblRziPnP2PZ0zvX24nOv7bbY8beynlJHGs00VWSFdoH2DS0aE1p6D+3n\n- * ptJuJ75dVfZFK4X7162APlNXevX8D6PEQpSiRw1rjjGGcnvQ4HdWk3BxDVDcCNJb\n- * Y1aGNRxsjTDvPi3R9Qx2M+W03QzEPx4SR3ZHVskeSJHaetM0TM\/w\/45Paq4GokXP\n- * ZeTnbEx1xmjkA7h+t4doLL4watx5F6yLsJzu8xB3lt\/1EtmkYtLz1t7X4BetPAXz\n- * zS69X\/VwhKfsOI3qXBWuL2oHPyhDmT1gcaUQwEPSV6ogHEEQEDXdiUS8heNK13KF\n- * TCQYFkETvV2BLxUhV1hypPzRQ6tUpJiAbD5KmoK2lD9slshG2QtvKQq0\/bgkDY5J\n- * LhDHV2dtcZ3kDPkkZXpbcJQvoeH3d09C5sIsuTFo2zgNR6oETHUc5TzP6FY2YYRa\n- * QcK5HcmtsRRiXFm01ac+aMejJUIujjFt84SiKWT\/73vC8AmY4tYcJBLjCg4XIxSH\n- * fdDFLL1YZENNO5ivlp8mdiHqcawx+36L7DrEZQ8RZt6cqST5t\/+XTdM74s6k81GT\n- * pNsa82P2K2zmIUZ\/DL2mKjW1vfRByw1NQFEBkN3vdyZxYfM\/JyUzX4hbjXBEkh9Q\n- * QYrcwLKLjis2QzSvK04B3bvRzRb+4ocWiso8ZPAXAIxZFBWDpTMM2A==\n- * -----END RSA PRIVATE KEY-----\n- *\n- * -----BEGIN RSA PRIVATE KEY-----\n- * MIICXAIBAAKBgQClrFscN6LdmYktsnm4j9VIpecchBeNaZzGrG358h0fORna03Ie\n- * buxEzHCk3LoAMPagTz1UemFqzFfQCn+VKBg\/mtmU8hvIJIh+\/p0PPftXUwizIDPU\n- * PxdHFNHN6gjYDnVOr77M0uyvqXpJ38LZrLgkQJCmA1Yq0DAFQCxPq9l0iQIDAQAB\n- * AoGAbqcbg1E1mkR99uOJoNeQYKFOJyGiiXTMnXV1TseC4+PDfQBU7Dax35GcesBi\n- * CtapIpFKKS5D+ozY6b7ZT8ojxuQ\/uHLPAvz0WDR3ds4iRF8tyu71Q1ZHcQsJa17y\n- * yO7UbkSSKn\/Mp9Rb+\/dKqftUGNXVFLqgHBOzN2s3We3bbbECQQDYBPKOg3hkaGHo\n- * OhpHKqtQ6EVkldihG\/3i4WejRonelXN+HRh1KrB2HBx0M8D\/qAzP1i3rNSlSHer4\n- * 59YRTJnHAkEAxFX\/sVYSn07BHv9Zhn6XXct\/Cj43z\/tKNbzlNbcxqQwQerw3IH51\n- * 8UH2YOA+GD3lXbKp+MytoFLWv8zg4YT\/LwJAfqan75Z1R6lLffRS49bIiq8jwE16\n- * rTrUJ+kv8jKxMqc9B3vXkxpsS1M\/+4E8bqgAmvpgAb8xcsvHsBd9ErdukQJBAKs2\n- * j67W75BrPjBI34pQ1LEfp56IGWXOrq1kF8IbCjxv3+MYRT6Z6UJFkpRymNPNDjsC\n- * dgUYgITiGJHUGXuw3lMCQHEHqo9ZtXz92yFT+VhsNc29B8m\/sqUJdtCcMd\/jGpAF\n- * u6GHufjqIZBpQsk63wbwESAPZZ+kk1O1kS5GIRLX608=\n- * -----END RSA PRIVATE KEY-----\n- *\n- * Private-Key: (1024 bit)\n- * modulus:\n- *     00:a5:ac:5b:1c:37:a2:dd:99:89:2d:b2:79:b8:8f:\n- *     d5:48:a5:e7:1c:84:17:8d:69:9c:c6:ac:6d:f9:f2:\n- *     1d:1f:39:19:da:d3:72:1e:6e:ec:44:cc:70:a4:dc:\n- *     ba:00:30:f6:a0:4f:3d:54:7a:61:6a:cc:57:d0:0a:\n- *     7f:95:28:18:3f:9a:d9:94:f2:1b:c8:24:88:7e:fe:\n- *     9d:0f:3d:fb:57:53:08:b3:20:33:d4:3f:17:47:14:\n- *     d1:cd:ea:08:d8:0e:75:4e:af:be:cc:d2:ec:af:a9:\n- *     7a:49:df:c2:d9:ac:b8:24:40:90:a6:03:56:2a:d0:\n- *     30:05:40:2c:4f:ab:d9:74:89\n- * publicExponent: 65537 (0x10001)\n- * privateExponent:\n- *     6e:a7:1b:83:51:35:9a:44:7d:f6:e3:89:a0:d7:90:\n- *     60:a1:4e:27:21:a2:89:74:cc:9d:75:75:4e:c7:82:\n- *     e3:e3:c3:7d:00:54:ec:36:b1:df:91:9c:7a:c0:62:\n- *     0a:d6:a9:22:91:4a:29:2e:43:fa:8c:d8:e9:be:d9:\n- *     4f:ca:23:c6:e4:3f:b8:72:cf:02:fc:f4:58:34:77:\n- *     76:ce:22:44:5f:2d:ca:ee:f5:43:56:47:71:0b:09:\n- *     6b:5e:f2:c8:ee:d4:6e:44:92:2a:7f:cc:a7:d4:5b:\n- *     fb:f7:4a:a9:fb:54:18:d5:d5:14:ba:a0:1c:13:b3:\n- *     37:6b:37:59:ed:db:6d:b1\n- * prime1:\n- *     00:d8:04:f2:8e:83:78:64:68:61:e8:3a:1a:47:2a:\n- *     ab:50:e8:45:64:95:d8:a1:1b:fd:e2:e1:67:a3:46:\n- *     89:de:95:73:7e:1d:18:75:2a:b0:76:1c:1c:74:33:\n- *     c0:ff:a8:0c:cf:d6:2d:eb:35:29:52:1d:ea:f8:e7:\n- *     d6:11:4c:99:c7\n- * prime2:\n- *     00:c4:55:ff:b1:56:12:9f:4e:c1:1e:ff:59:86:7e:\n- *     97:5d:cb:7f:0a:3e:37:cf:fb:4a:35:bc:e5:35:b7:\n- *     31:a9:0c:10:7a:bc:37:20:7e:75:f1:41:f6:60:e0:\n- *     3e:18:3d:e5:5d:b2:a9:f8:cc:ad:a0:52:d6:bf:cc:\n- *     e0:e1:84:ff:2f\n- * exponent1:\n- *     7e:a6:a7:ef:96:75:47:a9:4b:7d:f4:52:e3:d6:c8:\n- *     8a:af:23:c0:4d:7a:ad:3a:d4:27:e9:2f:f2:32:b1:\n- *     32:a7:3d:07:7b:d7:93:1a:6c:4b:53:3f:fb:81:3c:\n- *     6e:a8:00:9a:fa:60:01:bf:31:72:cb:c7:b0:17:7d:\n- *     12:b7:6e:91\n- * exponent2:\n- *     00:ab:36:8f:ae:d6:ef:90:6b:3e:30:48:df:8a:50:\n- *     d4:b1:1f:a7:9e:88:19:65:ce:ae:ad:64:17:c2:1b:\n- *     0a:3c:6f:df:e3:18:45:3e:99:e9:42:45:92:94:72:\n- *     98:d3:cd:0e:3b:02:76:05:18:80:84:e2:18:91:d4:\n- *     19:7b:b0:de:53\n- * coefficient:\n- *     71:07:aa:8f:59:b5:7c:fd:db:21:53:f9:58:6c:35:\n- *     cd:bd:07:c9:bf:b2:a5:09:76:d0:9c:31:df:e3:1a:\n- *     90:05:bb:a1:87:b9:f8:ea:21:90:69:42:c9:3a:df:\n- *     06:f0:11:20:0f:65:9f:a4:93:53:b5:91:2e:46:21:\n- *     12:d7:eb:4f\n- *\n- *\n- * server certificate:\n- * Data:\n- *     Version: 3 (0x2)\n- *     Serial Number: 4 (0x4)\n- *     Signature Algorithm: md5WithRSAEncryption\n- *     Issuer: C=US, ST=Some-State, L=Some-City, O=Some-Org\n- *     Validity\n- *         Not Before: Dec  8 03:21:16 2008 GMT\n- *         Not After : Aug 25 03:21:16 2028 GMT\n- *     Subject: C=US, ST=Some-State, L=Some-City, O=Some-Org, OU=SSL-Server, CN=localhost\n- *     Subject Public Key Info:\n- *         Public Key Algorithm: rsaEncryption\n- *         RSA Public Key: (1024 bit)\n- *             Modulus (1024 bit):\n- *                 00:a5:ac:5b:1c:37:a2:dd:99:89:2d:b2:79:b8:8f:\n- *                 d5:48:a5:e7:1c:84:17:8d:69:9c:c6:ac:6d:f9:f2:\n- *                 1d:1f:39:19:da:d3:72:1e:6e:ec:44:cc:70:a4:dc:\n- *                 ba:00:30:f6:a0:4f:3d:54:7a:61:6a:cc:57:d0:0a:\n- *                 7f:95:28:18:3f:9a:d9:94:f2:1b:c8:24:88:7e:fe:\n- *                 9d:0f:3d:fb:57:53:08:b3:20:33:d4:3f:17:47:14:\n- *                 d1:cd:ea:08:d8:0e:75:4e:af:be:cc:d2:ec:af:a9:\n- *                 7a:49:df:c2:d9:ac:b8:24:40:90:a6:03:56:2a:d0:\n- *                 30:05:40:2c:4f:ab:d9:74:89\n- *             Exponent: 65537 (0x10001)\n- *     X509v3 extensions:\n- *         X509v3 Basic Constraints:\n- *             CA:FALSE\n- *         X509v3 Key Usage:\n- *             Digital Signature, Non Repudiation, Key Encipherment\n- *         X509v3 Subject Key Identifier:\n- *             ED:6E:DB:F4:B5:56:C8:FB:1A:06:61:3F:0F:08:BB:A6:04:D8:16:54\n- *         X509v3 Authority Key Identifier:\n- *             keyid:FA:B9:51:BF:4C:E7:D9:86:98:33:F9:E7:CB:1E:F1:33:49:F7:A8:14\n- *\n- *         X509v3 Subject Alternative Name: critical\n- *             IP Address:127.0.0.1, DNS:localhost\n- * Signature Algorithm: md5WithRSAEncryption\n- *\n- * -----BEGIN CERTIFICATE-----\n- * MIICqjCCAhOgAwIBAgIBBDANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\n- * MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\n- * EwhTb21lLU9yZzAeFw0wODEyMDgwMzIxMTZaFw0yODA4MjUwMzIxMTZaMHIxCzAJ\n- * BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\n- * dHkxETAPBgNVBAoTCFNvbWUtT3JnMRMwEQYDVQQLEwpTU0wtU2VydmVyMRIwEAYD\n- * VQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAKWsWxw3\n- * ot2ZiS2yebiP1Uil5xyEF41pnMasbfnyHR85GdrTch5u7ETMcKTcugAw9qBPPVR6\n- * YWrMV9AKf5UoGD+a2ZTyG8gkiH7+nQ89+1dTCLMgM9Q\/F0cU0c3qCNgOdU6vvszS\n- * 7K+peknfwtmsuCRAkKYDVirQMAVALE+r2XSJAgMBAAGjeTB3MAkGA1UdEwQCMAAw\n- * CwYDVR0PBAQDAgXgMB0GA1UdDgQWBBTtbtv0tVbI+xoGYT8PCLumBNgWVDAfBgNV\n- * HSMEGDAWgBT6uVG\/TOfZhpgz+efLHvEzSfeoFDAdBgNVHREBAf8EEzARhwR\/AAAB\n- * gglsb2NhbGhvc3QwDQYJKoZIhvcNAQEEBQADgYEAWTrftGaL73lKLgRTrChGR+F6\n- * \/\/qvs0OM94IOKVeHz36NO49cMJmhJSbKdiGIkppBgpLIBoWxZlN9NOO9oSXFYZsZ\n- * rHaAe9\/lWMtQM7XpjqjhWVhB5VPvWFbkorQFMtRYLf7pkonGPFq8GOO1s0TKhogC\n- * jtYCdzlrU4v+om\/J3H8=\n- * -----END CERTIFICATE-----\n- *\n- *\n- * TLS client certificate:\n- * client private key:\n- * ----BEGIN RSA PRIVATE KEY-----\n- * Proc-Type: 4,ENCRYPTED\n- * DEK-Info: DES-EDE3-CBC,FA2A435CD35A9390\n- *\n- * Z+Y2uaETbsUWIyJUyVu1UV2G4rgFYJyACZT6Tp1KjRtxflSh2kXkJ9MpuXMXA0V4\n- * Yy3fDzPqCL9NJmQAYRlAx\/W\/+j4F5EyMWDIx8fUxzONRZyoiwF7jLm+KscAfv6Pf\n- * q7ItWOdj3z7IYrwlB8YIGd3F2cDKT3S+lYRk7rKb\/qT7itbuHnY4Ardh3yl+MZak\n- * jBp+ELUlRsUqSr1V0LoM+0rCCykarpyfhpxEcqsrl0v9Cyi5uhU50\/oKv5zql3SH\n- * l2ImgDjp3batAs8+Bd4NF2aqi0a7Hy44JUHxRm4caZryU\/i\/D9N1MbuM6882HLat\n- * 5N0G+NaIUfywa8mjwq2D5aiit18HqKA6XeRRYeJ5Dvu9DCO4GeFSwcUFIBMI0L46\n- * 7s114+oDodg57pMgITi+04vmUxvqlN9aiyd7f5Fgd7PeHGeOdbMz1NaJLJaPI9++\n- * NakK8eK9iwT\/Gdq0Uap5\/CHW7vCT5PO+h3HY0STH0lWStXhdWnFO04zTdywsbSp+\n- * DLpHeFT66shfeUlxR0PsCbG9vPRt\/QmGLeYQZITppWo\/ylSq4j+pRIuXvuWHdBRN\n- * rTZ8QF4Y7AxQUXVz1j1++s6ZMHTzaK2i9HrhmDs1MbJl+QwWre3Xpv3LvTVz3k5U\n- * wX8kuY1m3STt71QCaRWENq5sRaMImLxZbxc\/ivFl9RAzUqo4NCxLod\/QgA4iLqtO\n- * ztnlpzwlC\/F8HbQ1oqYWwnZAPhzU\/cULtstl+Yrws2c2atO323LbPXZqbASySgig\n- * sNpFXQMObdfP6LN23bY+1SvtK7V4NUTNhpdIc6INQAQ=\n- * -----END RSA PRIVATE KEY-----\n- *\n- * -----BEGIN RSA PRIVATE KEY-----\n- * MIICWwIBAAKBgQC78EA2rCZUTvSjWgAvaSFvuXo6k+yi9uGOx2PYLxIwmS6w8o\/4\n- * Jy0keCiE9wG\/jUR53TvSVfPOPLJbIX3v\/TNKsaP\/xsibuQ98QTWX+ds6BWAFFa9Z\n- * F5KjEK0WHOQHU6+odqJWKpLT+SjgeM9eH0irXBnd4WdDunWN9YKsQ5JEGwIDAQAB\n- * AoGAEbdqNj0wN85hnWyEi\/ObJU8UyKTdL9eaF72QGfcF\/fLSxfd3vurihIeXOkGW\n- * tpn4lIxYcVGM9CognhqgJpl11jFTQzn1KqZ+NEJRKkCHA4hDabKJbSC9fXHvRwrf\n- * BsFpZqgiNxp3HseUTiwnaUVeyPgMt\/jAj5nB5Sib+UyUxrECQQDnNQBiF2aifEg6\n- * zbJOOC7he5CHAdkFxSxWVFVHL6EfXfqdLVkUohMbgZv+XxyIeU2biOExSg49Kds3\n- * FOKgTau1AkEA0Bd1haj6QuCo8I0AXm2WO+MMTZMTvtHD\/bGjKNM+fT4I8rKYnQRX\n- * 1acHdqS9Xx2rNJqZgkMmpESIdPR2fc4yjwJALFeM6EMmqvj8\/VIf5UJ\/Mz14fXwM\n- * PEARfckUxd9LnnFutCBTWlKvKXJVEZb6KO5ixPaegc57Jp3Vbh3yTN44lQJADD\/1\n- * SSMDaIB1MYP7a5Oj7m6VQNPRq8AJe5vDcRnOae0G9dKRrVyeFxO4GsHj6\/+BHp2j\n- * P8nYMn9eURQ7DXjf\/QJAAQzMlWnKGSO8pyTDtnQx3hRMoUkOEhmNq4bQhLkYqtnY\n- * FcqpUQ2qMjW+NiNWk5HnTrMS3L9EdJobMUzaNZLy4w==\n- * -----END RSA PRIVATE KEY-----\n- *\n- * Private-Key: (1024 bit)\n- * modulus:\n- *     00:bb:f0:40:36:ac:26:54:4e:f4:a3:5a:00:2f:69:\n- *     21:6f:b9:7a:3a:93:ec:a2:f6:e1:8e:c7:63:d8:2f:\n- *     12:30:99:2e:b0:f2:8f:f8:27:2d:24:78:28:84:f7:\n- *     01:bf:8d:44:79:dd:3b:d2:55:f3:ce:3c:b2:5b:21:\n- *     7d:ef:fd:33:4a:b1:a3:ff:c6:c8:9b:b9:0f:7c:41:\n- *     35:97:f9:db:3a:05:60:05:15:af:59:17:92:a3:10:\n- *     ad:16:1c:e4:07:53:af:a8:76:a2:56:2a:92:d3:f9:\n- *     28:e0:78:cf:5e:1f:48:ab:5c:19:dd:e1:67:43:ba:\n- *     75:8d:f5:82:ac:43:92:44:1b\n- * publicExponent: 65537 (0x10001)\n- * privateExponent:\n- *     11:b7:6a:36:3d:30:37:ce:61:9d:6c:84:8b:f3:9b:\n- *     25:4f:14:c8:a4:dd:2f:d7:9a:17:bd:90:19:f7:05:\n- *     fd:f2:d2:c5:f7:77:be:ea:e2:84:87:97:3a:41:96:\n- *     b6:99:f8:94:8c:58:71:51:8c:f4:2a:20:9e:1a:a0:\n- *     26:99:75:d6:31:53:43:39:f5:2a:a6:7e:34:42:51:\n- *     2a:40:87:03:88:43:69:b2:89:6d:20:bd:7d:71:ef:\n- *     47:0a:df:06:c1:69:66:a8:22:37:1a:77:1e:c7:94:\n- *     4e:2c:27:69:45:5e:c8:f8:0c:b7:f8:c0:8f:99:c1:\n- *     e5:28:9b:f9:4c:94:c6:b1\n- * prime1:\n- *     00:e7:35:00:62:17:66:a2:7c:48:3a:cd:b2:4e:38:\n- *     2e:e1:7b:90:87:01:d9:05:c5:2c:56:54:55:47:2f:\n- *     a1:1f:5d:fa:9d:2d:59:14:a2:13:1b:81:9b:fe:5f:\n- *     1c:88:79:4d:9b:88:e1:31:4a:0e:3d:29:db:37:14:\n- *     e2:a0:4d:ab:b5\n- * prime2:\n- *     00:d0:17:75:85:a8:fa:42:e0:a8:f0:8d:00:5e:6d:\n- *     96:3b:e3:0c:4d:93:13:be:d1:c3:fd:b1:a3:28:d3:\n- *     3e:7d:3e:08:f2:b2:98:9d:04:57:d5:a7:07:76:a4:\n- *     bd:5f:1d:ab:34:9a:99:82:43:26:a4:44:88:74:f4:\n- *     76:7d:ce:32:8f\n- * exponent1:\n- *     2c:57:8c:e8:43:26:aa:f8:fc:fd:52:1f:e5:42:7f:\n- *     33:3d:78:7d:7c:0c:3c:40:11:7d:c9:14:c5:df:4b:\n- *     9e:71:6e:b4:20:53:5a:52:af:29:72:55:11:96:fa:\n- *     28:ee:62:c4:f6:9e:81:ce:7b:26:9d:d5:6e:1d:f2:\n- *     4c:de:38:95\n- * exponent2:\n- *     0c:3f:f5:49:23:03:68:80:75:31:83:fb:6b:93:a3:\n- *     ee:6e:95:40:d3:d1:ab:c0:09:7b:9b:c3:71:19:ce:\n- *     69:ed:06:f5:d2:91:ad:5c:9e:17:13:b8:1a:c1:e3:\n- *     eb:ff:81:1e:9d:a3:3f:c9:d8:32:7f:5e:51:14:3b:\n- *     0d:78:df:fd\n- * coefficient:\n- *     01:0c:cc:95:69:ca:19:23:bc:a7:24:c3:b6:74:31:\n- *     de:14:4c:a1:49:0e:12:19:8d:ab:86:d0:84:b9:18:\n- *     aa:d9:d8:15:ca:a9:51:0d:aa:32:35:be:36:23:56:\n- *     93:91:e7:4e:b3:12:dc:bf:44:74:9a:1b:31:4c:da:\n- *     35:92:f2:e3\n- *\n- * client certificate:\n- * Data:\n- *     Version: 3 (0x2)\n- *     Serial Number: 5 (0x5)\n- *     Signature Algorithm: md5WithRSAEncryption\n- *     Issuer: C=US, ST=Some-State, L=Some-City, O=Some-Org\n- *     Validity\n- *         Not Before: Dec  8 03:22:10 2008 GMT\n- *         Not After : Aug 25 03:22:10 2028 GMT\n- *     Subject: C=US, ST=Some-State, L=Some-City, O=Some-Org, OU=SSL-Client, CN=localhost\n- *     Subject Public Key Info:\n- *         Public Key Algorithm: rsaEncryption\n- *         RSA Public Key: (1024 bit)\n- *             Modulus (1024 bit):\n- *                 00:bb:f0:40:36:ac:26:54:4e:f4:a3:5a:00:2f:69:\n- *                 21:6f:b9:7a:3a:93:ec:a2:f6:e1:8e:c7:63:d8:2f:\n- *                 12:30:99:2e:b0:f2:8f:f8:27:2d:24:78:28:84:f7:\n- *                 01:bf:8d:44:79:dd:3b:d2:55:f3:ce:3c:b2:5b:21:\n- *                 7d:ef:fd:33:4a:b1:a3:ff:c6:c8:9b:b9:0f:7c:41:\n- *                 35:97:f9:db:3a:05:60:05:15:af:59:17:92:a3:10:\n- *                 ad:16:1c:e4:07:53:af:a8:76:a2:56:2a:92:d3:f9:\n- *                 28:e0:78:cf:5e:1f:48:ab:5c:19:dd:e1:67:43:ba:\n- *                 75:8d:f5:82:ac:43:92:44:1b\n- *             Exponent: 65537 (0x10001)\n- *     X509v3 extensions:\n- *         X509v3 Basic Constraints:\n- *             CA:FALSE\n- *         X509v3 Key Usage:\n- *             Digital Signature, Non Repudiation, Key Encipherment\n- *         X509v3 Subject Key Identifier:\n- *             CD:BB:C8:85:AA:91:BD:FD:1D:BE:CD:67:7C:FF:B3:E9:4C:A8:22:E6\n- *         X509v3 Authority Key Identifier:\n- *             keyid:FA:B9:51:BF:4C:E7:D9:86:98:33:F9:E7:CB:1E:F1:33:49:F7:A8:14\n- *\n- *         X509v3 Subject Alternative Name: critical\n- *             IP Address:127.0.0.1, DNS:localhost\n- * Signature Algorithm: md5WithRSAEncryption\n- *\n- * -----BEGIN CERTIFICATE-----\n- * MIICqjCCAhOgAwIBAgIBBTANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\n- * MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\n- * EwhTb21lLU9yZzAeFw0wODEyMDgwMzIyMTBaFw0yODA4MjUwMzIyMTBaMHIxCzAJ\n- * BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\n- * dHkxETAPBgNVBAoTCFNvbWUtT3JnMRMwEQYDVQQLEwpTU0wtQ2xpZW50MRIwEAYD\n- * VQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALvwQDas\n- * JlRO9KNaAC9pIW+5ejqT7KL24Y7HY9gvEjCZLrDyj\/gnLSR4KIT3Ab+NRHndO9JV\n- * 8848slshfe\/9M0qxo\/\/GyJu5D3xBNZf52zoFYAUVr1kXkqMQrRYc5AdTr6h2olYq\n- * ktP5KOB4z14fSKtcGd3hZ0O6dY31gqxDkkQbAgMBAAGjeTB3MAkGA1UdEwQCMAAw\n- * CwYDVR0PBAQDAgXgMB0GA1UdDgQWBBTNu8iFqpG9\/R2+zWd8\/7PpTKgi5jAfBgNV\n- * HSMEGDAWgBT6uVG\/TOfZhpgz+efLHvEzSfeoFDAdBgNVHREBAf8EEzARhwR\/AAAB\n- * gglsb2NhbGhvc3QwDQYJKoZIhvcNAQEEBQADgYEAwDc4f13abs9ZeEkrl5WV2Z74\n- * BlmBhXu8ExtAvoF9q6Ug6xV1MDpxbD124KfUHHL0kNMhMB1WIpC0kOnQBxziNpfS\n- * 7u6GOc3tWLSxw\/sHoJGCefnRBllLZOoQuSBrWB8qgilL6HRmZ4UqDcXu4UCaLBZ0\n- * KGDT5ASEN6Lq2GtiP4Y=\n- * -----END CERTIFICATE-----\n- *\n- *\n- *\n- * Trusted CA certificate:\n- * Certificate:\n- *   Data:\n- *     Version: 3 (0x2)\n- *     Serial Number: 0 (0x0)\n- *     Signature Algorithm: md5WithRSAEncryption\n- *     Issuer: C=US, ST=Some-State, L=Some-City, O=Some-Org\n- *     Validity\n- *         Not Before: Dec  8 02:43:36 2008 GMT\n- *         Not After : Aug 25 02:43:36 2028 GMT\n- *     Subject: C=US, ST=Some-State, L=Some-City, O=Some-Org\n- *     Subject Public Key Info:\n- *         Public Key Algorithm: rsaEncryption\n- *         RSA Public Key: (1024 bit)\n- *             Modulus (1024 bit):\n- *                 00:cb:c4:38:20:07:be:88:a7:93:b0:a1:43:51:2d:\n- *                 d7:8e:85:af:54:dd:ad:a2:7b:23:5b:cf:99:13:53:\n- *                 99:45:7d:ee:6d:ba:2d:bf:e3:ad:6e:3d:9f:1a:f9:\n- *                 03:97:e0:17:55:ae:11:26:57:de:01:29:8e:05:3f:\n- *                 21:f7:e7:36:e8:2e:37:d7:48:ac:53:d6:60:0e:c7:\n- *                 50:6d:f6:c5:85:f7:8b:a6:c5:91:35:72:3c:94:ee:\n- *                 f1:17:f0:71:e3:ec:1b:ce:ca:4e:40:42:b0:6d:ee:\n- *                 6a:0e:d6:e5:ad:3c:0f:c9:ba:82:4f:78:f8:89:97:\n- *                 89:2a:95:12:4c:d8:09:2a:e9\n- *             Exponent: 65537 (0x10001)\n- *     X509v3 extensions:\n- *         X509v3 Subject Key Identifier:\n- *             FA:B9:51:BF:4C:E7:D9:86:98:33:F9:E7:CB:1E:F1:33:49:F7:A8:14\n- *         X509v3 Authority Key Identifier:\n- *             keyid:FA:B9:51:BF:4C:E7:D9:86:98:33:F9:E7:CB:1E:F1:33:49:F7:A8:14\n- *             DirName:\/C=US\/ST=Some-State\/L=Some-City\/O=Some-Org\n- *             serial:00\n- *\n- *         X509v3 Basic Constraints:\n- *             CA:TRUE\n- *  Signature Algorithm: md5WithRSAEncryption\n- *\n- * -----BEGIN CERTIFICATE-----\n- * MIICrDCCAhWgAwIBAgIBADANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\n- * MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\n- * EwhTb21lLU9yZzAeFw0wODEyMDgwMjQzMzZaFw0yODA4MjUwMjQzMzZaMEkxCzAJ\n- * BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\n- * dHkxETAPBgNVBAoTCFNvbWUtT3JnMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKB\n- * gQDLxDggB76Ip5OwoUNRLdeOha9U3a2ieyNbz5kTU5lFfe5tui2\/461uPZ8a+QOX\n- * 4BdVrhEmV94BKY4FPyH35zboLjfXSKxT1mAOx1Bt9sWF94umxZE1cjyU7vEX8HHj\n- * 7BvOyk5AQrBt7moO1uWtPA\/JuoJPePiJl4kqlRJM2Akq6QIDAQABo4GjMIGgMB0G\n- * A1UdDgQWBBT6uVG\/TOfZhpgz+efLHvEzSfeoFDBxBgNVHSMEajBogBT6uVG\/TOfZ\n- * hpgz+efLHvEzSfeoFKFNpEswSTELMAkGA1UEBhMCVVMxEzARBgNVBAgTClNvbWUt\n- * U3RhdGUxEjAQBgNVBAcTCVNvbWUtQ2l0eTERMA8GA1UEChMIU29tZS1PcmeCAQAw\n- * DAYDVR0TBAUwAwEB\/zANBgkqhkiG9w0BAQQFAAOBgQBcIm534U123Hz+rtyYO5uA\n- * ofd81G6FnTfEAV8Kw9fGyyEbQZclBv34A9JsFKeMvU4OFIaixD7nLZ\/NZ+IWbhmZ\n- * LovmJXyCkOufea73pNiZ+f\/4\/ScZaIlM\/PRycQSqbFNd4j9Wott+08qxHPLpsf3P\n- * 6Mvf0r1PNTY2hwTJLJmKtg==\n- * -----END CERTIFICATE---\n+\/* @test id=tls13\n+ * @bug 6766775\n+ * @summary X509 certificate hostname checking is broken in JDK1.6.0_10\n+ * @library \/test\/lib\n+ * @run main\/othervm Identities TLSv1.3 SHA256withRSA\n+ * @author Xuelei Fan\n@@ -404,0 +46,19 @@\n+import jdk.test.lib.security.CertificateBuilder;\n+import sun.security.x509.DNSName;\n+import sun.security.x509.GeneralName;\n+import sun.security.x509.GeneralNames;\n+import sun.security.x509.IPAddressName;\n+import sun.security.x509.SubjectAlternativeNameExtension;\n+\n+\n+import javax.net.ssl.HttpsURLConnection;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLServerSocket;\n+import javax.net.ssl.SSLServerSocketFactory;\n+import javax.net.ssl.SSLSocket;\n+import java.io.PrintStream;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.Proxy;\n+import java.net.URL;\n+import java.security.Security;\n@@ -405,3 +66,0 @@\n-public class Identities {\n-    static Map cookies;\n-    ServerSocket ss;\n@@ -409,0 +67,1 @@\n+public class Identities extends IdentitiesBase {\n@@ -422,204 +81,0 @@\n-    \/*\n-     * Where do we find the keystores?\n-     *\/\n-    static String trusedCertStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICrDCCAhWgAwIBAgIBADANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\\n\" +\n-        \"MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\\n\" +\n-        \"EwhTb21lLU9yZzAeFw0wODEyMDgwMjQzMzZaFw0yODA4MjUwMjQzMzZaMEkxCzAJ\\n\" +\n-        \"BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\\n\" +\n-        \"dHkxETAPBgNVBAoTCFNvbWUtT3JnMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKB\\n\" +\n-        \"gQDLxDggB76Ip5OwoUNRLdeOha9U3a2ieyNbz5kTU5lFfe5tui2\/461uPZ8a+QOX\\n\" +\n-        \"4BdVrhEmV94BKY4FPyH35zboLjfXSKxT1mAOx1Bt9sWF94umxZE1cjyU7vEX8HHj\\n\" +\n-        \"7BvOyk5AQrBt7moO1uWtPA\/JuoJPePiJl4kqlRJM2Akq6QIDAQABo4GjMIGgMB0G\\n\" +\n-        \"A1UdDgQWBBT6uVG\/TOfZhpgz+efLHvEzSfeoFDBxBgNVHSMEajBogBT6uVG\/TOfZ\\n\" +\n-        \"hpgz+efLHvEzSfeoFKFNpEswSTELMAkGA1UEBhMCVVMxEzARBgNVBAgTClNvbWUt\\n\" +\n-        \"U3RhdGUxEjAQBgNVBAcTCVNvbWUtQ2l0eTERMA8GA1UEChMIU29tZS1PcmeCAQAw\\n\" +\n-        \"DAYDVR0TBAUwAwEB\/zANBgkqhkiG9w0BAQQFAAOBgQBcIm534U123Hz+rtyYO5uA\\n\" +\n-        \"ofd81G6FnTfEAV8Kw9fGyyEbQZclBv34A9JsFKeMvU4OFIaixD7nLZ\/NZ+IWbhmZ\\n\" +\n-        \"LovmJXyCkOufea73pNiZ+f\/4\/ScZaIlM\/PRycQSqbFNd4j9Wott+08qxHPLpsf3P\\n\" +\n-        \"6Mvf0r1PNTY2hwTJLJmKtg==\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-    static String serverCertStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICqjCCAhOgAwIBAgIBBDANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\\n\" +\n-        \"MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\\n\" +\n-        \"EwhTb21lLU9yZzAeFw0wODEyMDgwMzIxMTZaFw0yODA4MjUwMzIxMTZaMHIxCzAJ\\n\" +\n-        \"BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\\n\" +\n-        \"dHkxETAPBgNVBAoTCFNvbWUtT3JnMRMwEQYDVQQLEwpTU0wtU2VydmVyMRIwEAYD\\n\" +\n-        \"VQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAKWsWxw3\\n\" +\n-        \"ot2ZiS2yebiP1Uil5xyEF41pnMasbfnyHR85GdrTch5u7ETMcKTcugAw9qBPPVR6\\n\" +\n-        \"YWrMV9AKf5UoGD+a2ZTyG8gkiH7+nQ89+1dTCLMgM9Q\/F0cU0c3qCNgOdU6vvszS\\n\" +\n-        \"7K+peknfwtmsuCRAkKYDVirQMAVALE+r2XSJAgMBAAGjeTB3MAkGA1UdEwQCMAAw\\n\" +\n-        \"CwYDVR0PBAQDAgXgMB0GA1UdDgQWBBTtbtv0tVbI+xoGYT8PCLumBNgWVDAfBgNV\\n\" +\n-        \"HSMEGDAWgBT6uVG\/TOfZhpgz+efLHvEzSfeoFDAdBgNVHREBAf8EEzARhwR\/AAAB\\n\" +\n-        \"gglsb2NhbGhvc3QwDQYJKoZIhvcNAQEEBQADgYEAWTrftGaL73lKLgRTrChGR+F6\\n\" +\n-        \"\/\/qvs0OM94IOKVeHz36NO49cMJmhJSbKdiGIkppBgpLIBoWxZlN9NOO9oSXFYZsZ\\n\" +\n-        \"rHaAe9\/lWMtQM7XpjqjhWVhB5VPvWFbkorQFMtRYLf7pkonGPFq8GOO1s0TKhogC\\n\" +\n-        \"jtYCdzlrU4v+om\/J3H8=\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-    static String clientCertStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICqjCCAhOgAwIBAgIBBTANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\\n\" +\n-        \"MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\\n\" +\n-        \"EwhTb21lLU9yZzAeFw0wODEyMDgwMzIyMTBaFw0yODA4MjUwMzIyMTBaMHIxCzAJ\\n\" +\n-        \"BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\\n\" +\n-        \"dHkxETAPBgNVBAoTCFNvbWUtT3JnMRMwEQYDVQQLEwpTU0wtQ2xpZW50MRIwEAYD\\n\" +\n-        \"VQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALvwQDas\\n\" +\n-        \"JlRO9KNaAC9pIW+5ejqT7KL24Y7HY9gvEjCZLrDyj\/gnLSR4KIT3Ab+NRHndO9JV\\n\" +\n-        \"8848slshfe\/9M0qxo\/\/GyJu5D3xBNZf52zoFYAUVr1kXkqMQrRYc5AdTr6h2olYq\\n\" +\n-        \"ktP5KOB4z14fSKtcGd3hZ0O6dY31gqxDkkQbAgMBAAGjeTB3MAkGA1UdEwQCMAAw\\n\" +\n-        \"CwYDVR0PBAQDAgXgMB0GA1UdDgQWBBTNu8iFqpG9\/R2+zWd8\/7PpTKgi5jAfBgNV\\n\" +\n-        \"HSMEGDAWgBT6uVG\/TOfZhpgz+efLHvEzSfeoFDAdBgNVHREBAf8EEzARhwR\/AAAB\\n\" +\n-        \"gglsb2NhbGhvc3QwDQYJKoZIhvcNAQEEBQADgYEAwDc4f13abs9ZeEkrl5WV2Z74\\n\" +\n-        \"BlmBhXu8ExtAvoF9q6Ug6xV1MDpxbD124KfUHHL0kNMhMB1WIpC0kOnQBxziNpfS\\n\" +\n-        \"7u6GOc3tWLSxw\/sHoJGCefnRBllLZOoQuSBrWB8qgilL6HRmZ4UqDcXu4UCaLBZ0\\n\" +\n-        \"KGDT5ASEN6Lq2GtiP4Y=\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-    static byte serverPrivateExponent[] = {\n-        (byte)0x6e, (byte)0xa7, (byte)0x1b, (byte)0x83,\n-        (byte)0x51, (byte)0x35, (byte)0x9a, (byte)0x44,\n-        (byte)0x7d, (byte)0xf6, (byte)0xe3, (byte)0x89,\n-        (byte)0xa0, (byte)0xd7, (byte)0x90, (byte)0x60,\n-        (byte)0xa1, (byte)0x4e, (byte)0x27, (byte)0x21,\n-        (byte)0xa2, (byte)0x89, (byte)0x74, (byte)0xcc,\n-        (byte)0x9d, (byte)0x75, (byte)0x75, (byte)0x4e,\n-        (byte)0xc7, (byte)0x82, (byte)0xe3, (byte)0xe3,\n-        (byte)0xc3, (byte)0x7d, (byte)0x00, (byte)0x54,\n-        (byte)0xec, (byte)0x36, (byte)0xb1, (byte)0xdf,\n-        (byte)0x91, (byte)0x9c, (byte)0x7a, (byte)0xc0,\n-        (byte)0x62, (byte)0x0a, (byte)0xd6, (byte)0xa9,\n-        (byte)0x22, (byte)0x91, (byte)0x4a, (byte)0x29,\n-        (byte)0x2e, (byte)0x43, (byte)0xfa, (byte)0x8c,\n-        (byte)0xd8, (byte)0xe9, (byte)0xbe, (byte)0xd9,\n-        (byte)0x4f, (byte)0xca, (byte)0x23, (byte)0xc6,\n-        (byte)0xe4, (byte)0x3f, (byte)0xb8, (byte)0x72,\n-        (byte)0xcf, (byte)0x02, (byte)0xfc, (byte)0xf4,\n-        (byte)0x58, (byte)0x34, (byte)0x77, (byte)0x76,\n-        (byte)0xce, (byte)0x22, (byte)0x44, (byte)0x5f,\n-        (byte)0x2d, (byte)0xca, (byte)0xee, (byte)0xf5,\n-        (byte)0x43, (byte)0x56, (byte)0x47, (byte)0x71,\n-        (byte)0x0b, (byte)0x09, (byte)0x6b, (byte)0x5e,\n-        (byte)0xf2, (byte)0xc8, (byte)0xee, (byte)0xd4,\n-        (byte)0x6e, (byte)0x44, (byte)0x92, (byte)0x2a,\n-        (byte)0x7f, (byte)0xcc, (byte)0xa7, (byte)0xd4,\n-        (byte)0x5b, (byte)0xfb, (byte)0xf7, (byte)0x4a,\n-        (byte)0xa9, (byte)0xfb, (byte)0x54, (byte)0x18,\n-        (byte)0xd5, (byte)0xd5, (byte)0x14, (byte)0xba,\n-        (byte)0xa0, (byte)0x1c, (byte)0x13, (byte)0xb3,\n-        (byte)0x37, (byte)0x6b, (byte)0x37, (byte)0x59,\n-        (byte)0xed, (byte)0xdb, (byte)0x6d, (byte)0xb1\n-    };\n-\n-    static byte serverModulus[] = {\n-        (byte)0x00,\n-        (byte)0xa5, (byte)0xac, (byte)0x5b, (byte)0x1c,\n-        (byte)0x37, (byte)0xa2, (byte)0xdd, (byte)0x99,\n-        (byte)0x89, (byte)0x2d, (byte)0xb2, (byte)0x79,\n-        (byte)0xb8, (byte)0x8f, (byte)0xd5, (byte)0x48,\n-        (byte)0xa5, (byte)0xe7, (byte)0x1c, (byte)0x84,\n-        (byte)0x17, (byte)0x8d, (byte)0x69, (byte)0x9c,\n-        (byte)0xc6, (byte)0xac, (byte)0x6d, (byte)0xf9,\n-        (byte)0xf2, (byte)0x1d, (byte)0x1f, (byte)0x39,\n-        (byte)0x19, (byte)0xda, (byte)0xd3, (byte)0x72,\n-        (byte)0x1e, (byte)0x6e, (byte)0xec, (byte)0x44,\n-        (byte)0xcc, (byte)0x70, (byte)0xa4, (byte)0xdc,\n-        (byte)0xba, (byte)0x00, (byte)0x30, (byte)0xf6,\n-        (byte)0xa0, (byte)0x4f, (byte)0x3d, (byte)0x54,\n-        (byte)0x7a, (byte)0x61, (byte)0x6a, (byte)0xcc,\n-        (byte)0x57, (byte)0xd0, (byte)0x0a, (byte)0x7f,\n-        (byte)0x95, (byte)0x28, (byte)0x18, (byte)0x3f,\n-        (byte)0x9a, (byte)0xd9, (byte)0x94, (byte)0xf2,\n-        (byte)0x1b, (byte)0xc8, (byte)0x24, (byte)0x88,\n-        (byte)0x7e, (byte)0xfe, (byte)0x9d, (byte)0x0f,\n-        (byte)0x3d, (byte)0xfb, (byte)0x57, (byte)0x53,\n-        (byte)0x08, (byte)0xb3, (byte)0x20, (byte)0x33,\n-        (byte)0xd4, (byte)0x3f, (byte)0x17, (byte)0x47,\n-        (byte)0x14, (byte)0xd1, (byte)0xcd, (byte)0xea,\n-        (byte)0x08, (byte)0xd8, (byte)0x0e, (byte)0x75,\n-        (byte)0x4e, (byte)0xaf, (byte)0xbe, (byte)0xcc,\n-        (byte)0xd2, (byte)0xec, (byte)0xaf, (byte)0xa9,\n-        (byte)0x7a, (byte)0x49, (byte)0xdf, (byte)0xc2,\n-        (byte)0xd9, (byte)0xac, (byte)0xb8, (byte)0x24,\n-        (byte)0x40, (byte)0x90, (byte)0xa6, (byte)0x03,\n-        (byte)0x56, (byte)0x2a, (byte)0xd0, (byte)0x30,\n-        (byte)0x05, (byte)0x40, (byte)0x2c, (byte)0x4f,\n-        (byte)0xab, (byte)0xd9, (byte)0x74, (byte)0x89\n-    };\n-\n-    static byte clientPrivateExponent[] = {\n-        (byte)0x11, (byte)0xb7, (byte)0x6a, (byte)0x36,\n-        (byte)0x3d, (byte)0x30, (byte)0x37, (byte)0xce,\n-        (byte)0x61, (byte)0x9d, (byte)0x6c, (byte)0x84,\n-        (byte)0x8b, (byte)0xf3, (byte)0x9b, (byte)0x25,\n-        (byte)0x4f, (byte)0x14, (byte)0xc8, (byte)0xa4,\n-        (byte)0xdd, (byte)0x2f, (byte)0xd7, (byte)0x9a,\n-        (byte)0x17, (byte)0xbd, (byte)0x90, (byte)0x19,\n-        (byte)0xf7, (byte)0x05, (byte)0xfd, (byte)0xf2,\n-        (byte)0xd2, (byte)0xc5, (byte)0xf7, (byte)0x77,\n-        (byte)0xbe, (byte)0xea, (byte)0xe2, (byte)0x84,\n-        (byte)0x87, (byte)0x97, (byte)0x3a, (byte)0x41,\n-        (byte)0x96, (byte)0xb6, (byte)0x99, (byte)0xf8,\n-        (byte)0x94, (byte)0x8c, (byte)0x58, (byte)0x71,\n-        (byte)0x51, (byte)0x8c, (byte)0xf4, (byte)0x2a,\n-        (byte)0x20, (byte)0x9e, (byte)0x1a, (byte)0xa0,\n-        (byte)0x26, (byte)0x99, (byte)0x75, (byte)0xd6,\n-        (byte)0x31, (byte)0x53, (byte)0x43, (byte)0x39,\n-        (byte)0xf5, (byte)0x2a, (byte)0xa6, (byte)0x7e,\n-        (byte)0x34, (byte)0x42, (byte)0x51, (byte)0x2a,\n-        (byte)0x40, (byte)0x87, (byte)0x03, (byte)0x88,\n-        (byte)0x43, (byte)0x69, (byte)0xb2, (byte)0x89,\n-        (byte)0x6d, (byte)0x20, (byte)0xbd, (byte)0x7d,\n-        (byte)0x71, (byte)0xef, (byte)0x47, (byte)0x0a,\n-        (byte)0xdf, (byte)0x06, (byte)0xc1, (byte)0x69,\n-        (byte)0x66, (byte)0xa8, (byte)0x22, (byte)0x37,\n-        (byte)0x1a, (byte)0x77, (byte)0x1e, (byte)0xc7,\n-        (byte)0x94, (byte)0x4e, (byte)0x2c, (byte)0x27,\n-        (byte)0x69, (byte)0x45, (byte)0x5e, (byte)0xc8,\n-        (byte)0xf8, (byte)0x0c, (byte)0xb7, (byte)0xf8,\n-        (byte)0xc0, (byte)0x8f, (byte)0x99, (byte)0xc1,\n-        (byte)0xe5, (byte)0x28, (byte)0x9b, (byte)0xf9,\n-        (byte)0x4c, (byte)0x94, (byte)0xc6, (byte)0xb1\n-    };\n-\n-    static byte clientModulus[] = {\n-        (byte)0x00,\n-        (byte)0xbb, (byte)0xf0, (byte)0x40, (byte)0x36,\n-        (byte)0xac, (byte)0x26, (byte)0x54, (byte)0x4e,\n-        (byte)0xf4, (byte)0xa3, (byte)0x5a, (byte)0x00,\n-        (byte)0x2f, (byte)0x69, (byte)0x21, (byte)0x6f,\n-        (byte)0xb9, (byte)0x7a, (byte)0x3a, (byte)0x93,\n-        (byte)0xec, (byte)0xa2, (byte)0xf6, (byte)0xe1,\n-        (byte)0x8e, (byte)0xc7, (byte)0x63, (byte)0xd8,\n-        (byte)0x2f, (byte)0x12, (byte)0x30, (byte)0x99,\n-        (byte)0x2e, (byte)0xb0, (byte)0xf2, (byte)0x8f,\n-        (byte)0xf8, (byte)0x27, (byte)0x2d, (byte)0x24,\n-        (byte)0x78, (byte)0x28, (byte)0x84, (byte)0xf7,\n-        (byte)0x01, (byte)0xbf, (byte)0x8d, (byte)0x44,\n-        (byte)0x79, (byte)0xdd, (byte)0x3b, (byte)0xd2,\n-        (byte)0x55, (byte)0xf3, (byte)0xce, (byte)0x3c,\n-        (byte)0xb2, (byte)0x5b, (byte)0x21, (byte)0x7d,\n-        (byte)0xef, (byte)0xfd, (byte)0x33, (byte)0x4a,\n-        (byte)0xb1, (byte)0xa3, (byte)0xff, (byte)0xc6,\n-        (byte)0xc8, (byte)0x9b, (byte)0xb9, (byte)0x0f,\n-        (byte)0x7c, (byte)0x41, (byte)0x35, (byte)0x97,\n-        (byte)0xf9, (byte)0xdb, (byte)0x3a, (byte)0x05,\n-        (byte)0x60, (byte)0x05, (byte)0x15, (byte)0xaf,\n-        (byte)0x59, (byte)0x17, (byte)0x92, (byte)0xa3,\n-        (byte)0x10, (byte)0xad, (byte)0x16, (byte)0x1c,\n-        (byte)0xe4, (byte)0x07, (byte)0x53, (byte)0xaf,\n-        (byte)0xa8, (byte)0x76, (byte)0xa2, (byte)0x56,\n-        (byte)0x2a, (byte)0x92, (byte)0xd3, (byte)0xf9,\n-        (byte)0x28, (byte)0xe0, (byte)0x78, (byte)0xcf,\n-        (byte)0x5e, (byte)0x1f, (byte)0x48, (byte)0xab,\n-        (byte)0x5c, (byte)0x19, (byte)0xdd, (byte)0xe1,\n-        (byte)0x67, (byte)0x43, (byte)0xba, (byte)0x75,\n-        (byte)0x8d, (byte)0xf5, (byte)0x82, (byte)0xac,\n-        (byte)0x43, (byte)0x92, (byte)0x44, (byte)0x1b\n-    };\n-\n-    static char passphrase[] = \"passphrase\".toCharArray();\n-\n@@ -636,4 +91,0 @@\n-    \/*\n-     * Turn on SSL debugging?\n-     *\/\n-    static boolean debug = false;\n@@ -643,0 +94,17 @@\n+\n+    @Override\n+    protected CertificateBuilder customizeServerCert(CertificateBuilder builder) throws Exception {\n+        GeneralNames gns = new GeneralNames();\n+        gns.add(new GeneralName(new IPAddressName(\"127.0.0.1\")));\n+        gns.add(new GeneralName(new DNSName(\"localhost\")));\n+        return builder.addExtension(new SubjectAlternativeNameExtension(true, gns));\n+    }\n+\n+    @Override\n+    protected CertificateBuilder customizeClientCert(CertificateBuilder builder) throws Exception {\n+        GeneralNames gns = new GeneralNames();\n+        gns.add(new GeneralName(new IPAddressName(\"127.0.0.1\")));\n+        gns.add(new GeneralName(new DNSName(\"localhost\")));\n+        return builder.addExtension(new SubjectAlternativeNameExtension(true, gns));\n+    }\n+\n@@ -650,2 +118,1 @@\n-        SSLContext context = getSSLContext(trusedCertStr, serverCertStr,\n-            serverModulus, serverPrivateExponent, passphrase);\n+        SSLContext context = getServerSSLContext();\n@@ -706,2 +173,1 @@\n-            SSLContext context = getSSLContext(trusedCertStr, clientCertStr,\n-                clientModulus, clientPrivateExponent, passphrase);\n+            SSLContext context = getClientSSLContext();\n@@ -752,6 +218,7 @@\n-        \/\/ MD5 is used in this test case, don't disable MD5 algorithm.\n-        Security.setProperty(\"jdk.certpath.disabledAlgorithms\",\n-                \"MD2, RSA keySize < 1024\");\n-        Security.setProperty(\"jdk.tls.disabledAlgorithms\",\n-                \"SSLv3, RC4, DH keySize < 768\");\n-\n+        if (args[1].contains(\"MD5\")) {\n+            \/\/ MD5 is used in this test case, don't disable MD5 algorithm.\n+            Security.setProperty(\"jdk.certpath.disabledAlgorithms\",\n+                    \"MD2, RSA keySize < 1024\");\n+            Security.setProperty(\"jdk.tls.disabledAlgorithms\",\n+                    \"SSLv3, RC4, DH keySize < 768\");\n+        }\n@@ -764,1 +231,1 @@\n-        new Identities();\n+        new Identities(args[0], args[1]);\n@@ -774,1 +241,3 @@\n-    Identities() throws Exception {\n+    Identities(String protocol, String signatureAlg) throws Exception {\n+        super(protocol, signatureAlg);\n+\n@@ -849,61 +318,0 @@\n-\n-    \/\/ get the ssl context\n-    private static SSLContext getSSLContext(String trusedCertStr,\n-            String keyCertStr, byte[] modulus,\n-            byte[] privateExponent, char[] passphrase) throws Exception {\n-\n-        \/\/ generate certificate from cert string\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-\n-        ByteArrayInputStream is =\n-                    new ByteArrayInputStream(trusedCertStr.getBytes());\n-        Certificate trusedCert = cf.generateCertificate(is);\n-        is.close();\n-\n-        \/\/ create a key store\n-        KeyStore ks = KeyStore.getInstance(\"JKS\");\n-        ks.load(null, null);\n-\n-        \/\/ import the trused cert\n-        ks.setCertificateEntry(\"RSA Export Signer\", trusedCert);\n-\n-        if (keyCertStr != null) {\n-            \/\/ generate the private key.\n-            RSAPrivateKeySpec priKeySpec = new RSAPrivateKeySpec(\n-                                            new BigInteger(modulus),\n-                                            new BigInteger(privateExponent));\n-            KeyFactory kf = KeyFactory.getInstance(\"RSA\");\n-            RSAPrivateKey priKey =\n-                    (RSAPrivateKey)kf.generatePrivate(priKeySpec);\n-\n-            \/\/ generate certificate chain\n-            is = new ByteArrayInputStream(keyCertStr.getBytes());\n-            Certificate keyCert = cf.generateCertificate(is);\n-            is.close();\n-\n-            Certificate[] chain = new Certificate[2];\n-            chain[0] = keyCert;\n-            chain[1] = trusedCert;\n-\n-            \/\/ import the key entry.\n-            ks.setKeyEntry(\"Whatever\", priKey, passphrase, chain);\n-        }\n-\n-        \/\/ create SSL context\n-        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"PKIX\");\n-        tmf.init(ks);\n-\n-        SSLContext ctx = SSLContext.getInstance(\"TLSv1.2\");\n-\n-        if (keyCertStr != null) {\n-            KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n-            kmf.init(ks, passphrase);\n-\n-            ctx.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\n-        } else {\n-            ctx.init(null, tmf.getTrustManagers(), null);\n-        }\n-\n-        return ctx;\n-    }\n-\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/https\/HttpsURLConnection\/Identities.java","additions":59,"deletions":651,"binary":false,"changes":710,"status":"modified"},{"patch":"@@ -0,0 +1,190 @@\n+\/*\n+ * Copyright (c) 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+import jdk.test.lib.security.CertificateBuilder;\n+import sun.security.x509.AuthorityKeyIdentifierExtension;\n+import sun.security.x509.GeneralName;\n+import sun.security.x509.GeneralNames;\n+import sun.security.x509.KeyIdentifier;\n+import sun.security.x509.SerialNumber;\n+import sun.security.x509.X500Name;\n+\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManagerFactory;\n+import java.math.BigInteger;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.KeyStore;\n+import java.security.SecureRandom;\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+\n+public abstract class IdentitiesBase {\n+    static X509Certificate trustedCert;\n+    static X509Certificate serverCert;\n+    static X509Certificate clientCert;\n+    static KeyPair serverKeys;\n+    static KeyPair clientKeys;\n+    static char[] passphrase = \"passphrase\".toCharArray();\n+\n+    protected final String protocol;\n+    protected final String signatureAlg;\n+\n+    \/*\n+     * Turn on SSL debugging?\n+     *\/\n+    static boolean debug = Boolean.getBoolean(\"test.debug\");\n+\n+    public IdentitiesBase(String protocol, String signatureAlg) throws Exception {\n+        this.protocol = protocol;\n+        this.signatureAlg = signatureAlg;\n+\n+        setupCertificates();\n+    }\n+\n+    protected String getTrustedDname() {\n+        return \"O=Some-Org, L=Some-City, ST=Some-State, C=US\";\n+    }\n+\n+    protected String getServerDname() {\n+        return \"CN=localhost, OU=SSL-Server, O=Some-Org, L=Some-City, ST=Some-State, C=US\";\n+    }\n+\n+    protected String getClientDname() {\n+        return \"CN=localhost, OU=SSL-Client, O=Some-Org, L=Some-City, ST=Some-State, C=US\";\n+    }\n+\n+    protected CertificateBuilder customizeServerCert(CertificateBuilder builder) throws Exception {\n+        return builder;\n+    }\n+\n+    protected CertificateBuilder customizeClientCert(CertificateBuilder builder) throws Exception {\n+        return builder;\n+    }\n+\n+    private void setupCertificates() throws Exception {\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\");\n+        KeyPair caKeys = kpg.generateKeyPair();\n+        serverKeys = kpg.generateKeyPair();\n+        clientKeys = kpg.generateKeyPair();\n+\n+        trustedCert = createTrustedCert(getTrustedDname(), caKeys, signatureAlg);\n+        if (debug) {\n+            System.out.println(\"----------- Trusted Cert -----------\");\n+            CertificateBuilder.printCertificate(trustedCert, System.out);\n+        }\n+\n+         CertificateBuilder builder = CertificateBuilder.newCertificateBuilder(\n+                        getServerDname(),\n+                        serverKeys.getPublic(), caKeys.getPublic(),\n+                        CertificateBuilder.KeyUsage.DIGITAL_SIGNATURE, CertificateBuilder.KeyUsage.NONREPUDIATION, CertificateBuilder.KeyUsage.KEY_ENCIPHERMENT)\n+                .addBasicConstraintsExt(false, false, -1)\n+                .addExtension(CertificateBuilder.createIPSubjectAltNameExt(true, \"127.0.0.1\"))\n+                .setOneHourValidity();\n+        serverCert = customizeServerCert(builder)\n+                .build(trustedCert, caKeys.getPrivate(), signatureAlg);\n+        if (debug) {\n+            System.out.println(\"----------- Server Cert -----------\");\n+            CertificateBuilder.printCertificate(serverCert, System.out);\n+        }\n+\n+         builder = CertificateBuilder.newCertificateBuilder(\n+                        getClientDname(),\n+                        clientKeys.getPublic(), caKeys.getPublic(),\n+                        CertificateBuilder.KeyUsage.DIGITAL_SIGNATURE, CertificateBuilder.KeyUsage.NONREPUDIATION, CertificateBuilder.KeyUsage.KEY_ENCIPHERMENT)\n+                .addExtension(CertificateBuilder.createIPSubjectAltNameExt(true, \"127.0.0.1\"))\n+                .addBasicConstraintsExt(false, false, -1)\n+                .setOneHourValidity();\n+        builder = customizeClientCert(builder);\n+        clientCert = builder.build(trustedCert, caKeys.getPrivate(), signatureAlg);\n+        if (debug) {\n+            System.out.println(\"----------- Client Cert -----------\");\n+            CertificateBuilder.printCertificate(clientCert, System.out);\n+        }\n+    }\n+\n+    protected static X509Certificate createTrustedCert(String dname, KeyPair caKeys,\n+                                                       String signatureAlgo) throws Exception {\n+        SecureRandom random = new SecureRandom();\n+\n+        KeyIdentifier kid = new KeyIdentifier(caKeys.getPublic());\n+        GeneralNames gns = new GeneralNames();\n+        GeneralName name = new GeneralName(new X500Name(dname));\n+        gns.add(name);\n+        BigInteger serialNumber = BigInteger.valueOf(random.nextLong(1000000) + 1);\n+        return CertificateBuilder.newCertificateBuilder(dname,\n+                        caKeys.getPublic(), caKeys.getPublic())\n+                .setSerialNumber(serialNumber)\n+                .addExtension(new AuthorityKeyIdentifierExtension(kid, gns,\n+                        new SerialNumber(serialNumber)))\n+                .addBasicConstraintsExt(true, true, -1)\n+                .setOneHourValidity()\n+                .build(null, caKeys.getPrivate(), signatureAlgo);\n+    }\n+\n+    protected SSLContext getClientSSLContext() throws Exception {\n+        return getSSLContext(trustedCert, clientCert, clientKeys, passphrase);\n+    }\n+\n+    protected SSLContext getServerSSLContext() throws Exception {\n+        return getSSLContext(trustedCert, serverCert, serverKeys, passphrase);\n+    }\n+\n+    \/\/ get the ssl context\n+    protected SSLContext getSSLContext(X509Certificate trustedCert,\n+                                       X509Certificate keyCert, KeyPair key, char[] passphrase) throws Exception {\n+\n+        \/\/ create a key store\n+        KeyStore ks = KeyStore.getInstance(\"PKCS12\");\n+        ks.load(null, null);\n+\n+        \/\/ import the trused cert\n+        ks.setCertificateEntry(\"RSA Export Signer\", trustedCert);\n+\n+        if (keyCert != null) {\n+            Certificate[] chain = new Certificate[2];\n+            chain[0] = keyCert;\n+            chain[1] = trustedCert;\n+\n+            \/\/ import the key entry.\n+            ks.setKeyEntry(\"Whatever\", key.getPrivate(), passphrase, chain);\n+        }\n+\n+        \/\/ create SSL context\n+        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"PKIX\");\n+        tmf.init(ks);\n+\n+        SSLContext ctx = SSLContext.getInstance(protocol);\n+\n+        if (keyCert != null) {\n+            KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n+            kmf.init(ks, passphrase);\n+\n+            ctx.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\n+        } else {\n+            ctx.init(null, tmf.getTrustManagers(), null);\n+        }\n+\n+        return ctx;\n+    }\n+}\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/https\/HttpsURLConnection\/IdentitiesBase.java","additions":190,"deletions":0,"binary":false,"changes":190,"status":"added"}]}