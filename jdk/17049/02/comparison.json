{"files":[{"patch":"@@ -51,1 +51,1 @@\n-        OutputAnalyzer out = ProcessTools.executeTestJvm(\"-XX:CompileThresholdScaling=\" + value, \"--version\");\n+        OutputAnalyzer out = ProcessTools.executeTestJava(\"-XX:CompileThresholdScaling=\" + value, \"--version\");\n","filename":"test\/hotspot\/jtreg\/compiler\/arguments\/TestCompileThresholdScaling.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-        OutputAnalyzer oa = ProcessTools.executeTestJvm(options);\n+        OutputAnalyzer oa = ProcessTools.executeTestJava(options);\n","filename":"test\/hotspot\/jtreg\/compiler\/c1\/TestPrintC1Statistics.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-        OutputAnalyzer outputAnalyzer = ProcessTools.executeTestJvm(\n+        OutputAnalyzer outputAnalyzer = ProcessTools.executeTestJava(\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/cr7200264\/TestDriver.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -108,1 +108,1 @@\n-            CLIENT_VM_AVAILABLE = ProcessTools.executeTestJvm(CLIENT_VM_OPTION, VERSION_OPTION)\n+            CLIENT_VM_AVAILABLE = ProcessTools.executeTestJava(CLIENT_VM_OPTION, VERSION_OPTION)\n@@ -110,1 +110,1 @@\n-            SERVER_VM_AVAILABLE = ProcessTools.executeTestJvm(SERVER_VM_OPTION, VERSION_OPTION)\n+            SERVER_VM_AVAILABLE = ProcessTools.executeTestJava(SERVER_VM_OPTION, VERSION_OPTION)\n","filename":"test\/hotspot\/jtreg\/compiler\/ciReplay\/CiReplayBase.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-        OutputAnalyzer output = ProcessTools.executeTestJvm(\"-Xmx64m\", \"-XX:CompileCommand=\" + option, \"-version\");\n+        OutputAnalyzer output = ProcessTools.executeTestJava(\"-Xmx64m\", \"-XX:CompileCommand=\" + option, \"-version\");\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/commands\/MemLimitTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-        ProcessTools.executeTestJvm(\"-XX:CompileCommand=MemStat,*.*\", \"-version\")\n+        ProcessTools.executeTestJava(\"-XX:CompileCommand=MemStat,*.*\", \"-version\")\n@@ -46,1 +46,1 @@\n-        ProcessTools.executeTestJvm(\"-XX:CompileCommand=MemStat,*.*,collect\", \"-version\")\n+        ProcessTools.executeTestJava(\"-XX:CompileCommand=MemStat,*.*,collect\", \"-version\")\n@@ -51,1 +51,1 @@\n-        ProcessTools.executeTestJvm(\"-XX:CompileCommand=MemStat,*.*,print\", \"-version\")\n+        ProcessTools.executeTestJava(\"-XX:CompileCommand=MemStat,*.*,print\", \"-version\")\n@@ -56,1 +56,1 @@\n-        ProcessTools.executeTestJvm(\"-XX:CompileCommand=MemStat,*.*,invalid\", \"-version\")\n+        ProcessTools.executeTestJava(\"-XX:CompileCommand=MemStat,*.*,invalid\", \"-version\")\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/commands\/MemStatTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-        ProcessTools.executeTestJvm(\"-XX:CompileCommand=option,package\/class,ccstrlist,ControlIntrinsic,+_getClass\", \"-version\")\n+        ProcessTools.executeTestJava(\"-XX:CompileCommand=option,package\/class,ccstrlist,ControlIntrinsic,+_getClass\", \"-version\")\n@@ -46,1 +46,1 @@\n-        ProcessTools.executeTestJvm(\"-XX:CompileCommand=option,*,ccstrlist,ControlIntrinsic,+_getClass\", \"-version\")\n+        ProcessTools.executeTestJava(\"-XX:CompileCommand=option,*,ccstrlist,ControlIntrinsic,+_getClass\", \"-version\")\n@@ -54,1 +54,1 @@\n-        ProcessTools.executeTestJvm(\"-XX:CompileCommand=option,*.ccstrlist,ccstrlist,ControlIntrinsic,+_getClass\", \"-version\")\n+        ProcessTools.executeTestJava(\"-XX:CompileCommand=option,*.ccstrlist,ccstrlist,ControlIntrinsic,+_getClass\", \"-version\")\n@@ -60,1 +60,1 @@\n-        ProcessTools.executeTestJvm(\"-XX:CompileCommand=option,*.*,ccstrlist,ControlIntrinsic,+_getClass\", \"-version\")\n+        ProcessTools.executeTestJava(\"-XX:CompileCommand=option,*.*,ccstrlist,ControlIntrinsic,+_getClass\", \"-version\")\n@@ -65,1 +65,1 @@\n-        ProcessTools.executeTestJvm(\"-XX:CompileCommand=option,class,PrintIntrinsics\", \"-version\")\n+        ProcessTools.executeTestJava(\"-XX:CompileCommand=option,class,PrintIntrinsics\", \"-version\")\n@@ -71,1 +71,1 @@\n-        ProcessTools.executeTestJvm(\"-XX:CompileCommand=option,class.PrintIntrinsics,PrintIntrinsics\", \"-version\")\n+        ProcessTools.executeTestJava(\"-XX:CompileCommand=option,class.PrintIntrinsics,PrintIntrinsics\", \"-version\")\n@@ -78,1 +78,1 @@\n-        ProcessTools.executeTestJvm(\"-XX:CompileCommand=dontinline,*::dontinline_*\", \"-version\")\n+        ProcessTools.executeTestJava(\"-XX:CompileCommand=dontinline,*::dontinline_*\", \"-version\")\n@@ -83,1 +83,1 @@\n-        ProcessTools.executeTestJvm(\"-XX:CompileCommand=dontinline,*.dontinline\", \"-version\")\n+        ProcessTools.executeTestJava(\"-XX:CompileCommand=dontinline,*.dontinline\", \"-version\")\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/commands\/OptionTest.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -124,1 +124,1 @@\n-            output = ProcessTools.executeTestJvm(\n+            output = ProcessTools.executeTestJava(\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/parser\/HugeDirectiveUtil.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-            output = ProcessTools.executeTestJvm(cmds);\n+            output = ProcessTools.executeTestJava(cmds);\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/share\/scenario\/Executor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-        OutputAnalyzer outputAnalyzer = ProcessTools.executeTestJvm(\n+        OutputAnalyzer outputAnalyzer = ProcessTools.executeTestJava(\n@@ -106,1 +106,1 @@\n-            OutputAnalyzer outputAnalyzer = ProcessTools.executeTestJvm(\n+            OutputAnalyzer outputAnalyzer = ProcessTools.executeTestJava(\n@@ -135,1 +135,1 @@\n-            OutputAnalyzer outputAnalyzer = ProcessTools.executeTestJvm(\n+            OutputAnalyzer outputAnalyzer = ProcessTools.executeTestJava(\n@@ -161,1 +161,1 @@\n-        OutputAnalyzer outputAnalyzer = ProcessTools.executeTestJvm(\n+        OutputAnalyzer outputAnalyzer = ProcessTools.executeTestJava(\n@@ -183,1 +183,1 @@\n-        OutputAnalyzer outputAnalyzer = ProcessTools.executeTestJvm(\n+        OutputAnalyzer outputAnalyzer = ProcessTools.executeTestJava(\n","filename":"test\/hotspot\/jtreg\/compiler\/cpuflags\/TestAESIntrinsicsOnSupportedConfig.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-        OutputAnalyzer outputAnalyzer = ProcessTools.executeTestJvm(\n+        OutputAnalyzer outputAnalyzer = ProcessTools.executeTestJava(\n@@ -92,1 +92,1 @@\n-        OutputAnalyzer outputAnalyzer = ProcessTools.executeTestJvm(\n+        OutputAnalyzer outputAnalyzer = ProcessTools.executeTestJava(\n","filename":"test\/hotspot\/jtreg\/compiler\/cpuflags\/TestAESIntrinsicsOnUnsupportedConfig.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-            OutputAnalyzer oa = ProcessTools.executeTestJvm(\"-XX:+IgnoreUnrecognizedVMOptions\",\n+            OutputAnalyzer oa = ProcessTools.executeTestJava(\"-XX:+IgnoreUnrecognizedVMOptions\",\n","filename":"test\/hotspot\/jtreg\/compiler\/gcbarriers\/TestMembarDependencies.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -149,1 +149,1 @@\n-        OutputAnalyzer outputAnalyzer = ProcessTools.executeTestJvm(vmOpts);\n+        OutputAnalyzer outputAnalyzer = ProcessTools.executeTestJava(vmOpts);\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/bmi\/BMITestRunner.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -115,1 +115,1 @@\n-            oa = ProcessTools.executeTestJvm(cmds);\n+            oa = ProcessTools.executeTestJava(cmds);\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/FlagVMProcess.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -152,1 +152,1 @@\n-            \/\/ Use executeProcess instead of executeTestJvm as we have already added the JTreg VM and\n+            \/\/ Use executeProcess instead of executeTestJava as we have already added the JTreg VM and\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/TestVMProcess.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -62,3 +62,4 @@\n-            oa = ProcessTools.executeTestJvm(\"-XX:+UnlockDiagnosticVMOptions\", \"-Xbootclasspath\/a:.\",\n-                                             \"-XX:\" + (enabled ? \"+\" : \"-\") + \"UseCountedLoopSafepoints\",\n-                                             \"-XX:+WhiteBoxAPI\",\n+            oa = ProcessTools.executeTestJava(\n+                    \"-XX:+UnlockDiagnosticVMOptions\", \"-Xbootclasspath\/a:.\",\n+                    \"-XX:\" + (enabled ? \"+\" : \"-\") + \"UseCountedLoopSafepoints\",\n+                    \"-XX:+WhiteBoxAPI\",\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/UseCountedLoopSafepointsTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-        ProcessTools.executeTestJvm(\"-XX:+UnlockDiagnosticVMOptions\",\n+        ProcessTools.executeTestJava(\"-XX:+UnlockDiagnosticVMOptions\",\n@@ -57,1 +57,1 @@\n-        ProcessTools.executeTestJvm(\"-XX:+UnlockDiagnosticVMOptions\",\n+        ProcessTools.executeTestJava(\"-XX:+UnlockDiagnosticVMOptions\",\n","filename":"test\/hotspot\/jtreg\/compiler\/loopstripmining\/CheckLoopStripMining.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-        OutputAnalyzer oa = ProcessTools.executeTestJvm(options);\n+        OutputAnalyzer oa = ProcessTools.executeTestJava(options);\n","filename":"test\/hotspot\/jtreg\/compiler\/oracle\/PrintIdealPhaseTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -108,1 +108,1 @@\n-        OutputAnalyzer oa = ProcessTools.executeTestJvm(options);\n+        OutputAnalyzer oa = ProcessTools.executeTestJava(options);\n","filename":"test\/hotspot\/jtreg\/compiler\/print\/CompileCommandMemLimit.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-        OutputAnalyzer oa = ProcessTools.executeTestJvm(options);\n+        OutputAnalyzer oa = ProcessTools.executeTestJava(options);\n","filename":"test\/hotspot\/jtreg\/compiler\/print\/CompileCommandPrintCompilation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-        OutputAnalyzer oa = ProcessTools.executeTestJvm(options);\n+        OutputAnalyzer oa = ProcessTools.executeTestJava(options);\n","filename":"test\/hotspot\/jtreg\/compiler\/print\/CompileCommandPrintMemStat.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-        OutputAnalyzer oa = ProcessTools.executeTestJvm(options);\n+        OutputAnalyzer oa = ProcessTools.executeTestJava(options);\n","filename":"test\/hotspot\/jtreg\/compiler\/print\/PrintCompilation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -264,1 +264,1 @@\n-        OutputAnalyzer outputC1 = ProcessTools.executeTestJvm(c1Args)\n+        OutputAnalyzer outputC1 = ProcessTools.executeTestJava(c1Args)\n@@ -273,1 +273,1 @@\n-        OutputAnalyzer outputC2 = ProcessTools.executeTestJvm(c2Args)\n+        OutputAnalyzer outputC2 = ProcessTools.executeTestJava(c2Args)\n","filename":"test\/hotspot\/jtreg\/compiler\/runtime\/TestConstantsInError.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -40,2 +40,2 @@\n-        ProcessTools.executeTestJvm(\"--add-modules=jdk.incubator.vector\", \"-XX:+UnlockExperimentalVMOptions\",\n-                                    \"-XX:+EnableVectorReboxing\", \"-Xlog:compilation\", \"-version\")\n+        ProcessTools.executeTestJava(\"--add-modules=jdk.incubator.vector\", \"-XX:+UnlockExperimentalVMOptions\",\n+                                     \"-XX:+EnableVectorReboxing\", \"-Xlog:compilation\", \"-version\")\n@@ -45,2 +45,2 @@\n-        ProcessTools.executeTestJvm(\"--add-modules=jdk.incubator.vector\", \"-XX:+UnlockExperimentalVMOptions\",\n-                                    \"-XX:+EnableVectorAggressiveReboxing\", \"-Xlog:compilation\", \"-version\")\n+        ProcessTools.executeTestJava(\"--add-modules=jdk.incubator.vector\", \"-XX:+UnlockExperimentalVMOptions\",\n+                                     \"-XX:+EnableVectorAggressiveReboxing\", \"-Xlog:compilation\", \"-version\")\n@@ -50,2 +50,2 @@\n-        ProcessTools.executeTestJvm(\"--add-modules=jdk.incubator.vector\", \"-XX:+UnlockExperimentalVMOptions\",\n-                                    \"-XX:-EnableVectorReboxing\", \"-Xlog:compilation\", \"-version\")\n+        ProcessTools.executeTestJava(\"--add-modules=jdk.incubator.vector\", \"-XX:+UnlockExperimentalVMOptions\",\n+                                     \"-XX:-EnableVectorReboxing\", \"-Xlog:compilation\", \"-version\")\n@@ -56,2 +56,2 @@\n-        ProcessTools.executeTestJvm(\"--add-modules=jdk.incubator.vector\", \"-XX:+UnlockExperimentalVMOptions\",\n-                                    \"-XX:-EnableVectorAggressiveReboxing\", \"-Xlog:compilation\", \"-version\")\n+        ProcessTools.executeTestJava(\"--add-modules=jdk.incubator.vector\", \"-XX:+UnlockExperimentalVMOptions\",\n+                                     \"-XX:-EnableVectorAggressiveReboxing\", \"-Xlog:compilation\", \"-version\")\n@@ -61,2 +61,2 @@\n-        ProcessTools.executeTestJvm(\"--add-modules=jdk.incubator.vector\", \"-XX:+UnlockExperimentalVMOptions\",\n-                                    \"-XX:-EnableVectorSupport\", \"-Xlog:compilation\", \"-version\")\n+        ProcessTools.executeTestJava(\"--add-modules=jdk.incubator.vector\", \"-XX:+UnlockExperimentalVMOptions\",\n+                                     \"-XX:-EnableVectorSupport\", \"-Xlog:compilation\", \"-version\")\n@@ -68,2 +68,2 @@\n-        ProcessTools.executeTestJvm(\"--add-modules=jdk.incubator.vector\", \"-XX:+UnlockExperimentalVMOptions\",\n-                                    \"-XX:-EnableVectorSupport\", \"-XX:+EnableVectorReboxing\", \"-Xlog:compilation\", \"-version\")\n+        ProcessTools.executeTestJava(\"--add-modules=jdk.incubator.vector\", \"-XX:+UnlockExperimentalVMOptions\",\n+                                     \"-XX:-EnableVectorSupport\", \"-XX:+EnableVectorReboxing\", \"-Xlog:compilation\", \"-version\")\n@@ -75,2 +75,2 @@\n-        ProcessTools.executeTestJvm(\"--add-modules=jdk.incubator.vector\", \"-XX:+UnlockExperimentalVMOptions\",\n-                                    \"-XX:-EnableVectorSupport\", \"-XX:+EnableVectorAggressiveReboxing\", \"-Xlog:compilation\", \"-version\")\n+        ProcessTools.executeTestJava(\"--add-modules=jdk.incubator.vector\", \"-XX:+UnlockExperimentalVMOptions\",\n+                                     \"-XX:-EnableVectorSupport\", \"-XX:+EnableVectorAggressiveReboxing\", \"-Xlog:compilation\", \"-version\")\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/TestVectorErgonomics.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -45,2 +45,2 @@\n-        ProcessTools.executeTestJvm(\"-Xms\" + Xms, \"-Xmx\" + Xmx,\n-                                    \"-XX:+PrintFlagsFinal\", \"-version\")\n+        ProcessTools.executeTestJava(\"-Xms\" + Xms, \"-Xmx\" + Xmx,\n+                                     \"-XX:+PrintFlagsFinal\", \"-version\")\n@@ -51,3 +51,3 @@\n-        ProcessTools.executeTestJvm(\"-Xms\" + Xms, \"-Xmx\" + Xmx,\n-                                    \"-XX:SoftMaxHeapSize=\" + Xms,\n-                                    \"-XX:+PrintFlagsFinal\", \"-version\")\n+        ProcessTools.executeTestJava(\"-Xms\" + Xms, \"-Xmx\" + Xmx,\n+                                     \"-XX:SoftMaxHeapSize=\" + Xms,\n+                                     \"-XX:+PrintFlagsFinal\", \"-version\")\n@@ -58,3 +58,3 @@\n-        ProcessTools.executeTestJvm(\"-Xms\" + Xms, \"-Xmx\" + Xmx,\n-                                    \"-XX:SoftMaxHeapSize=\" + betweenXmsAndXmx,\n-                                    \"-XX:+PrintFlagsFinal\", \"-version\")\n+        ProcessTools.executeTestJava(\"-Xms\" + Xms, \"-Xmx\" + Xmx,\n+                                     \"-XX:SoftMaxHeapSize=\" + betweenXmsAndXmx,\n+                                     \"-XX:+PrintFlagsFinal\", \"-version\")\n@@ -65,3 +65,3 @@\n-        ProcessTools.executeTestJvm(\"-Xms\" + Xms, \"-Xmx\" + Xmx,\n-                                    \"-XX:SoftMaxHeapSize=\" + Xmx,\n-                                    \"-XX:+PrintFlagsFinal\", \"-version\")\n+        ProcessTools.executeTestJava(\"-Xms\" + Xms, \"-Xmx\" + Xmx,\n+                                     \"-XX:SoftMaxHeapSize=\" + Xmx,\n+                                     \"-XX:+PrintFlagsFinal\", \"-version\")\n@@ -72,3 +72,3 @@\n-        ProcessTools.executeTestJvm(\"-Xms\" + Xms, \"-Xmx\" + Xmx,\n-                                    \"-XX:SoftMaxHeapSize=\" + greaterThanXmx,\n-                                    \"-XX:+PrintFlagsFinal\", \"-version\")\n+        ProcessTools.executeTestJava(\"-Xms\" + Xms, \"-Xmx\" + Xmx,\n+                                     \"-XX:SoftMaxHeapSize=\" + greaterThanXmx,\n+                                     \"-XX:+PrintFlagsFinal\", \"-version\")\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestSoftMaxHeapSizeFlag.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -132,1 +132,1 @@\n-        OutputAnalyzer out = ProcessTools.executeTestJvm(options);\n+        OutputAnalyzer out = ProcessTools.executeTestJava(options);\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/ihop\/TestIHOPErgo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -132,1 +132,1 @@\n-        OutputAnalyzer out = ProcessTools.executeTestJvm(options);\n+        OutputAnalyzer out = ProcessTools.executeTestJava(options);\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/ihop\/TestIHOPStatic.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-        OutputAnalyzer out = ProcessTools.executeTestJvm(options);\n+        OutputAnalyzer out = ProcessTools.executeTestJava(options);\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/logging\/TestG1LoggingFailure.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-        OutputAnalyzer out = ProcessTools.executeTestJvm(testOptions);\n+        OutputAnalyzer out = ProcessTools.executeTestJava(testOptions);\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/plab\/TestPLABEvacuationFailure.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -120,1 +120,1 @@\n-            OutputAnalyzer out = ProcessTools.executeTestJvm(options);\n+            OutputAnalyzer out = ProcessTools.executeTestJava(options);\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/plab\/TestPLABPromotion.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-            OutputAnalyzer out = ProcessTools.executeTestJvm(options);\n+            OutputAnalyzer out = ProcessTools.executeTestJava(options);\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/plab\/TestPLABResize.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -172,1 +172,1 @@\n-        OutputAnalyzer output = ProcessTools.executeTestJvm(finalArgs);\n+        OutputAnalyzer output = ProcessTools.executeTestJava(finalArgs);\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/gclocker\/TestExcessGCLockerCollections.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -88,9 +88,9 @@\n-        ProcessTools.executeTestJvm(\"-XX:+UseZGC\",\n-                                    \"-XX:-ZGenerational\",\n-                                    \"-XX:-ZProactive\",\n-                                    \"-Xms128M\",\n-                                    \"-Xmx128M\",\n-                                    \"-XX:ParallelGCThreads=1\",\n-                                    \"-XX:ConcGCThreads=1\",\n-                                    \"-Xlog:gc,gc+start\",\n-                                    Test.class.getName())\n+        ProcessTools.executeTestJava(\"-XX:+UseZGC\",\n+                                     \"-XX:-ZGenerational\",\n+                                     \"-XX:-ZProactive\",\n+                                     \"-Xms128M\",\n+                                     \"-Xmx128M\",\n+                                     \"-XX:ParallelGCThreads=1\",\n+                                     \"-XX:ConcGCThreads=1\",\n+                                     \"-Xlog:gc,gc+start\",\n+                                     Test.class.getName())\n","filename":"test\/hotspot\/jtreg\/gc\/x\/TestHighUsage.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -57,2 +57,2 @@\n-        OutputAnalyzer output = ProcessTools.executeTestJvm(\n-                \/\/ executeTestJvm doesn't seem to forward 'java.library.path'\n+        OutputAnalyzer output = ProcessTools.executeTestJava(\n+                \/\/ executeTestJava doesn't seem to forward 'java.library.path'\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/UncaughtNativeExceptionTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -49,5 +49,5 @@\n-            ProcessTools.executeTestJvm(\"-Dsun.boot.library.path=\" + tooLongPath,\n-                                        \"TestSunBootLibraryPath\",\n-                                        \"'Do-Nothing'\")\n-                                        .shouldNotHaveExitValue(0)\n-                                        .stdoutShouldContain(expectedErrorMessage);\n+            ProcessTools.executeTestJava(\"-Dsun.boot.library.path=\" + tooLongPath,\n+                                         \"TestSunBootLibraryPath\",\n+                                         \"'Do-Nothing'\")\n+                                         .shouldNotHaveExitValue(0)\n+                                         .stdoutShouldContain(expectedErrorMessage);\n","filename":"test\/hotspot\/jtreg\/runtime\/LoadLibrary\/TestSunBootLibraryPath.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-        OutputAnalyzer output = ProcessTools.executeTestJvm(options);\n+        OutputAnalyzer output = ProcessTools.executeTestJava(options);\n","filename":"test\/hotspot\/jtreg\/runtime\/Shutdown\/ShutdownTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-        ProcessTools.executeTestJvm(\"-Dsun.boot.library.path=\" + syspaths,\n+        ProcessTools.executeTestJava(\"-Dsun.boot.library.path=\" + syspaths,\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/FindClass\/FindClassFromBoot.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,4 +46,4 @@\n-            ProcessTools.executeTestJvm(\"-Djava.library.path=\" + Utils.TEST_NATIVE_PATH,\n-                                        \"-Xcheck:jni\",\n-                                        \"-XX:-CreateCoredumpOnCrash\",\n-                                        \"FindClassUtf8\")\n+            ProcessTools.executeTestJava(\"-Djava.library.path=\" + Utils.TEST_NATIVE_PATH,\n+                                         \"-Xcheck:jni\",\n+                                         \"-XX:-CreateCoredumpOnCrash\",\n+                                         \"FindClassUtf8\")\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/FindClassUtf8\/FindClassUtf8.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-        OutputAnalyzer output = ProcessTools.executeTestJvm(jlp, main);\n+        OutputAnalyzer output = ProcessTools.executeTestJava(jlp, main);\n@@ -70,1 +70,1 @@\n-        output = ProcessTools.executeTestJvm(jlp, main, \"doExit\");\n+        output = ProcessTools.executeTestJava(jlp, main, \"doExit\");\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/atExit\/TestAtExit.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -208,3 +208,3 @@\n-        checkOuputForCorrectWarnings(ProcessTools.executeTestJvm(\"-Xcheck:jni\",\n-                                                                 \"-Djava.library.path=\" + Utils.TEST_NATIVE_PATH,\n-                                                                 \"TestCheckedJniExceptionCheck\"));\n+        checkOuputForCorrectWarnings(ProcessTools.executeTestJava(\"-Xcheck:jni\",\n+                                                                  \"-Djava.library.path=\" + Utils.TEST_NATIVE_PATH,\n+                                                                  \"TestCheckedJniExceptionCheck\"));\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/checked\/TestCheckedJniExceptionCheck.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-            \/\/ Uses executeProcess() instead of executeTestJvm() to avoid passing options\n+            \/\/ Uses executeProcess() instead of executeTestJava() to avoid passing options\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/checked\/TestCheckedReleaseArrayElements.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,3 +54,3 @@\n-            ProcessTools.executeTestJvm(\"-Xcheck:jni\",\n-                                        \"-Djava.library.path=\" + Utils.TEST_NATIVE_PATH,\n-                                        \"TestNativeStack$Main\");\n+            ProcessTools.executeTestJava(\"-Xcheck:jni\",\n+                                         \"-Djava.library.path=\" + Utils.TEST_NATIVE_PATH,\n+                                         \"TestNativeStack$Main\");\n@@ -63,4 +63,4 @@\n-        oa = ProcessTools.executeTestJvm(\"-XX:-CreateCoredumpOnCrash\",\n-                                         \"-Djava.library.path=\" + Utils.TEST_NATIVE_PATH,\n-                                         \"TestNativeStack$Main\",\n-                                         \"error\");\n+        oa = ProcessTools.executeTestJava(\"-XX:-CreateCoredumpOnCrash\",\n+                                          \"-Djava.library.path=\" + Utils.TEST_NATIVE_PATH,\n+                                          \"TestNativeStack$Main\",\n+                                          \"error\");\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/nativeStack\/TestNativeStack.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -68,2 +68,2 @@\n-        OutputAnalyzer output = ProcessTools.executeTestJvm(\"-Djava.library.path=\" + libp,\n-                                                            Tester.class.getName());\n+        OutputAnalyzer output = ProcessTools.executeTestJava(\"-Djava.library.path=\" + libp,\n+                                                             Tester.class.getName());\n@@ -75,4 +75,4 @@\n-        output = ProcessTools.executeTestJvm(\"-Djava.library.path=\" + libp,\n-                                             \"-Xbootclasspath\/a:\" + cp,\n-                                             \"-Dsun.boot.library.path=\" + libp,\n-                                             Tester.class.getName());\n+        output = ProcessTools.executeTestJava(\"-Djava.library.path=\" + libp,\n+                                              \"-Xbootclasspath\/a:\" + cp,\n+                                              \"-Dsun.boot.library.path=\" + libp,\n+                                              Tester.class.getName());\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/registerNativesWarning\/TestRegisterNativesWarning.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-        OutputAnalyzer output = ProcessTools.executeTestJvm(subargs);\n+        OutputAnalyzer output = ProcessTools.executeTestJava(subargs);\n","filename":"test\/hotspot\/jtreg\/runtime\/stringtable\/StringTableCleaningTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-            ProcessTools.executeTestJvm(flag)\n+            ProcessTools.executeTestJava(flag)\n","filename":"test\/hotspot\/jtreg\/sanity\/BasicVMTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-        OutputAnalyzer oa = ProcessTools.executeTestJvm(\"-javaagent:\" +\n+        OutputAnalyzer oa = ProcessTools.executeTestJava(\"-javaagent:\" +\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/TestLambdaFormRetransformation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-        OutputAnalyzer output = ProcessTools.executeTestJvm(\n+        OutputAnalyzer output = ProcessTools.executeTestJava(\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/TestRedefineWithUnresolvedClass.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-        OutputAnalyzer oa = ProcessTools.executeTestJvm(\n+        OutputAnalyzer oa = ProcessTools.executeTestJava(\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/Agent_OnUnload\/agentonunload001\/TestDriver.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-        OutputAnalyzer oa = ProcessTools.executeTestJvm(\n+        OutputAnalyzer oa = ProcessTools.executeTestJava(\n@@ -47,1 +47,1 @@\n-        oa = ProcessTools.executeTestJvm(\n+        oa = ProcessTools.executeTestJava(\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/scenarios\/general_functions\/GF08\/gf08t.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-        OutputAnalyzer oa = ProcessTools.executeTestJvm(\n+        OutputAnalyzer oa = ProcessTools.executeTestJava(\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/scenarios\/multienv\/MA02\/ma02t001\/TestDriver.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-        OutputAnalyzer output = ProcessTools.executeTestJvm(\"-agentpath:\/badAgent\/agent\", \"-version\");\n+        OutputAnalyzer output = ProcessTools.executeTestJava(\"-agentpath:\/badAgent\/agent\", \"-version\");\n","filename":"test\/jdk\/com\/sun\/jdi\/BadAgentPath.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-        OutputAnalyzer output = ProcessTools.executeTestJvm(\"-classpath\",\n+        OutputAnalyzer output = ProcessTools.executeTestJava(\"-classpath\",\n","filename":"test\/jdk\/com\/sun\/jdi\/DoubleAgentTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-        OutputAnalyzer output = ProcessTools.executeTestJvm(\n+        OutputAnalyzer output = ProcessTools.executeTestJava(\n@@ -59,1 +59,1 @@\n-        output = ProcessTools.executeTestJvm(\n+        output = ProcessTools.executeTestJava(\n","filename":"test\/jdk\/com\/sun\/jdi\/OnJcmdTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-        OutputAnalyzer output = ProcessTools.executeTestJvm(\"-classpath\",\n+        OutputAnalyzer output = ProcessTools.executeTestJava(\"-classpath\",\n","filename":"test\/jdk\/com\/sun\/jdi\/SuspendNoFlagTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-        OutputAnalyzer output = ProcessTools.executeTestJvm(args);\n+        OutputAnalyzer output = ProcessTools.executeTestJava(args);\n","filename":"test\/jdk\/com\/sun\/tools\/attach\/BasicTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-        OutputAnalyzer output = ProcessTools.executeTestJvm(args);\n+        OutputAnalyzer output = ProcessTools.executeTestJava(args);\n@@ -101,1 +101,1 @@\n-        output = ProcessTools.executeTestJvm(args);\n+        output = ProcessTools.executeTestJava(args);\n","filename":"test\/jdk\/com\/sun\/tools\/attach\/PermissionTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-        OutputAnalyzer output = ProcessTools.executeTestJvm(args);\n+        OutputAnalyzer output = ProcessTools.executeTestJava(args);\n","filename":"test\/jdk\/com\/sun\/tools\/attach\/ProviderTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -143,1 +143,1 @@\n-        OutputAnalyzer output = ProcessTools.executeTestJvm(args);\n+        OutputAnalyzer output = ProcessTools.executeTestJava(args);\n","filename":"test\/jdk\/com\/sun\/tools\/attach\/TempDirTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -127,1 +127,1 @@\n-       ProcessTools.executeTestJvm(options).shouldContain(WARNING)\n+       ProcessTools.executeTestJava(options).shouldContain(WARNING)\n@@ -134,1 +134,1 @@\n-        ProcessTools.executeTestJvm(options).shouldNotContain(WARNING)\n+        ProcessTools.executeTestJava(options).shouldNotContain(WARNING)\n@@ -141,1 +141,1 @@\n-        OutputAnalyzer originalOutput = ProcessTools.executeTestJvm(options);\n+        OutputAnalyzer originalOutput = ProcessTools.executeTestJava(options);\n","filename":"test\/jdk\/java\/io\/File\/TempDirDoesNotExist.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-        ProcessTools.executeTestJvm(\"-Djava.security.manager\",\n+        ProcessTools.executeTestJava(\"-Djava.security.manager\",\n","filename":"test\/jdk\/java\/io\/FilePermission\/MergeName.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-        ProcessTools.executeTestJvm(cmds.toArray(new String[cmds.size()]))\n+        ProcessTools.executeTestJava(cmds.toArray(new String[cmds.size()]))\n","filename":"test\/jdk\/java\/io\/FilePermission\/ReadFileOnPath.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -242,1 +242,1 @@\n-        String out = ProcessTools.executeTestJvm(safeArgs).getOutput();\n+        String out = ProcessTools.executeTestJava(safeArgs).getOutput();\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/securityManager\/ClassLoaderTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-        ProcessTools.executeTestJvm(testCommand).shouldHaveExitValue(0);\n+        ProcessTools.executeTestJava(testCommand).shouldHaveExitValue(0);\n","filename":"test\/jdk\/java\/lang\/RuntimeTests\/shutdown\/ShutdownHooks.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-            ProcessTools.executeTestJvm(cmd).shouldHaveExitValue(0);\n+            ProcessTools.executeTestJava(cmd).shouldHaveExitValue(0);\n","filename":"test\/jdk\/java\/security\/Policy\/ExtensiblePolicy\/ExtensiblePolicyWithJarTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -124,1 +124,1 @@\n-        ProcessTools.executeTestJvm(cmd).shouldHaveExitValue(0);\n+        ProcessTools.executeTestJava(cmd).shouldHaveExitValue(0);\n@@ -134,1 +134,1 @@\n-        ProcessTools.executeTestJvm(cmd).shouldHaveExitValue(0);\n+        ProcessTools.executeTestJava(cmd).shouldHaveExitValue(0);\n@@ -144,1 +144,1 @@\n-        ProcessTools.executeTestJvm(cmd).shouldHaveExitValue(0);\n+        ProcessTools.executeTestJava(cmd).shouldHaveExitValue(0);\n","filename":"test\/jdk\/java\/security\/Policy\/SignedJar\/SignedJarTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -258,1 +258,1 @@\n-        String out = ProcessTools.executeTestJvm(safeArgs).getOutput();\n+        String out = ProcessTools.executeTestJava(safeArgs).getOutput();\n","filename":"test\/jdk\/java\/security\/Provider\/SecurityProviderModularTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-        ProcessTools.executeTestJvm(\"-classpath\",\n+        ProcessTools.executeTestJava(\"-classpath\",\n@@ -90,1 +90,1 @@\n-        ProcessTools.executeTestJvm(\"-classpath\",\n+        ProcessTools.executeTestJava(\"-classpath\",\n","filename":"test\/jdk\/java\/security\/Security\/signedfirst\/DynStatic.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -103,1 +103,1 @@\n-            OutputAnalyzer out = ProcessTools.executeTestJvm(testRun);\n+            OutputAnalyzer out = ProcessTools.executeTestJava(testRun);\n","filename":"test\/jdk\/java\/security\/SignedJar\/spi-calendar-provider\/TestSPISigned.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -119,1 +119,1 @@\n-        int exitStatus = ProcessTools.executeTestJvm(params).getExitValue();\n+        int exitStatus = ProcessTools.executeTestJava(params).getExitValue();\n@@ -129,1 +129,1 @@\n-        \/\/ We don't use executeTestJvm() because we want to point to separate JDK java path\n+        \/\/ We don't use executeTestJava() because we want to point to separate JDK java path\n","filename":"test\/jdk\/java\/util\/Currency\/PropertiesTestRun.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-        ProcessTools.executeTestJvm(\"-Djava.locale.useOldISOCodes=true\", \"UseOldISOCodesTest$Runner\")\n+        ProcessTools.executeTestJava(\"-Djava.locale.useOldISOCodes=true\", \"UseOldISOCodesTest$Runner\")\n","filename":"test\/jdk\/java\/util\/Locale\/UseOldISOCodesTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-        ProcessTools.executeTestJvm(\"-Djava.util.prefs.userRoot=.\", testName)\n+        ProcessTools.executeTestJava(\"-Djava.util.prefs.userRoot=.\", testName)\n","filename":"test\/jdk\/java\/util\/prefs\/CheckUserPrefsStorage.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -163,1 +163,1 @@\n-        OutputAnalyzer a = ProcessTools.executeTestJvm(\"-jar\", zipFile.getName());\n+        OutputAnalyzer a = ProcessTools.executeTestJava(\"-jar\", zipFile.getName());\n","filename":"test\/jdk\/java\/util\/zip\/EntryCount64k.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-        String tmpFile = ProcessTools.executeTestJvm(DeleteTempJar.class.getName())\n+        String tmpFile = ProcessTools.executeTestJava(DeleteTempJar.class.getName())\n","filename":"test\/jdk\/java\/util\/zip\/ZipFile\/DeleteTempJarTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -187,1 +187,1 @@\n-        OutputAnalyzer out = ProcessTools.executeTestJvm(safeArgs);\n+        OutputAnalyzer out = ProcessTools.executeTestJava(safeArgs);\n","filename":"test\/jdk\/javax\/security\/auth\/login\/modules\/JaasModularClientTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -171,1 +171,1 @@\n-        OutputAnalyzer out = ProcessTools.executeTestJvm(safeArgs);\n+        OutputAnalyzer out = ProcessTools.executeTestJava(safeArgs);\n","filename":"test\/jdk\/javax\/security\/auth\/login\/modules\/JaasModularDefaultHandlerTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,3 +47,3 @@\n-            ProcessTools.executeTestJvm(\"--add-exports\", \"java.base\/jdk.internal.ref=ALL-UNNAMED\",\n-                                        \"ExitOnThrow\",\n-                                        \"-executeCleaner\")\n+            ProcessTools.executeTestJava(\"--add-exports\", \"java.base\/jdk.internal.ref=ALL-UNNAMED\",\n+                                         \"ExitOnThrow\",\n+                                         \"-executeCleaner\")\n","filename":"test\/jdk\/jdk\/internal\/ref\/Cleaner\/ExitOnThrow.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-            OutputAnalyzer oa = ProcessTools.executeTestJvm(c);\n+            OutputAnalyzer oa = ProcessTools.executeTestJava(c);\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/security\/TestStreamingRemote.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -286,1 +286,1 @@\n-        OutputAnalyzer output = ProcessTools.executeTestJvm(args);\n+        OutputAnalyzer output = ProcessTools.executeTestJava(args);\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/TestInstrumentation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-        OutputAnalyzer output = ProcessTools.executeTestJvm(arguments);\n+        OutputAnalyzer output = ProcessTools.executeTestJava(arguments);\n","filename":"test\/jdk\/jdk\/jfr\/jcmd\/TestJcmdPreserveRepository.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-        ProcessTools.executeTestJvm(testCommand).shouldHaveExitValue(0);\n+        ProcessTools.executeTestJava(testCommand).shouldHaveExitValue(0);\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Config\/ReadConfInUTF16Env.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -234,1 +234,1 @@\n-            OutputAnalyzer outputAnalyzer = ProcessTools.executeTestJvm(\n+            OutputAnalyzer outputAnalyzer = ProcessTools.executeTestJava(\n","filename":"test\/jdk\/sun\/security\/ssl\/CertPathRestrictions\/TLSRestrictions.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-            OutputAnalyzer output = ProcessTools.executeTestJvm(\n+            OutputAnalyzer output = ProcessTools.executeTestJava(\n","filename":"test\/jdk\/sun\/security\/ssl\/EngineArgs\/DebugReportsOneExtraByte.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-            \/\/ is passed to the test via ProcessTools::executeTestJvm.\n+            \/\/ is passed to the test via ProcessTools::executeTestJava.\n@@ -74,1 +74,1 @@\n-                var output = ProcessTools.executeTestJvm(\n+                var output = ProcessTools.executeTestJava(\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLLogger\/LoggingFormatConsistency.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-            \/\/ is passed to the test via ProcessTools::executeTestJvm.\n+            \/\/ is passed to the test via ProcessTools::executeTestJava.\n@@ -70,1 +70,1 @@\n-            OutputAnalyzer output = ProcessTools.executeTestJvm(jvmArgs);\n+            OutputAnalyzer output = ProcessTools.executeTestJava(jvmArgs);\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLSocketImpl\/IgnorableExceptionMessages.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -123,1 +123,1 @@\n-        ProcessTools.executeTestJvm(cmd)\n+        ProcessTools.executeTestJava(cmd)\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/multiRelease\/MVJarSigningTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-        OutputAnalyzer out = ProcessTools.executeTestJvm(\n+        OutputAnalyzer out = ProcessTools.executeTestJava(\n","filename":"test\/jdk\/sun\/security\/util\/Resources\/early\/EarlyResources.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-        ProcessTools.executeTestJvm(cmdLineArgs).shouldHaveExitValue(0);\n+        ProcessTools.executeTestJava(cmdLineArgs).shouldHaveExitValue(0);\n@@ -146,1 +146,1 @@\n-                oa = ProcessTools.executeTestJvm(cmdLine);\n+                oa = ProcessTools.executeTestJava(cmdLine);\n","filename":"test\/lib-test\/jdk\/test\/lib\/RandomGeneratorTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,45 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Unit test for ProcessTools.executeLimitedTestJava()\n+ * @library \/test\/lib\n+ * @run main\/othervm -Dtest.java.opts=-XX:MaxMetaspaceSize=123456789 ProcessToolsExecuteLimitedTestJavaTest\n+ *\/\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class ProcessToolsExecuteLimitedTestJavaTest {\n+    public static void main(String[] args) throws Exception {\n+        if (args.length > 0) {\n+            \/\/ Do nothing. Just let the JVM log its output.\n+        } else {\n+            \/\/ In comparison to executeTestJava, executeLimitedTestJava should not add the\n+            \/\/ -Dtest.java.opts flags. Check that it doesn't.\n+            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\"-XX:+PrintFlagsFinal\", \"-version\");\n+            output.stdoutShouldNotMatch(\".*MaxMetaspaceSize.* = 123456789.*\");\n+        }\n+    }\n+}\n","filename":"test\/lib-test\/jdk\/test\/lib\/process\/ProcessToolsExecuteLimitedTestJavaTest.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"},{"patch":"@@ -611,1 +611,2 @@\n-     * Executes a test jvm process, waits for it to finish and returns\n+     * Executes a process using the java launcher from the jdk to\n+     * be tested, waits for it to finish and returns\n@@ -618,1 +619,1 @@\n-     * @param cmds User specified arguments.\n+     * @param command User specified arguments.\n@@ -621,2 +622,2 @@\n-    public static OutputAnalyzer executeTestJvm(List<String> cmds) throws Exception {\n-        return executeTestJvm(cmds.toArray(String[]::new));\n+    public static OutputAnalyzer executeTestJava(List<String> command) throws Exception {\n+        return executeTestJava(command.toArray(String[]::new));\n@@ -626,1 +627,2 @@\n-     * Executes a test jvm process, waits for it to finish and returns\n+     * Executes a process using the java launcher from the jdk to\n+     * be tested, waits for it to finish and returns\n@@ -633,1 +635,1 @@\n-     * @param cmds User specified arguments.\n+     * @param command User specified arguments.\n@@ -636,2 +638,2 @@\n-    public static OutputAnalyzer executeTestJvm(String... cmds) throws Exception {\n-        ProcessBuilder pb = createTestJavaProcessBuilder(cmds);\n+    public static OutputAnalyzer executeTestJava(String... command) throws Exception {\n+        ProcessBuilder pb = createTestJavaProcessBuilder(command);\n@@ -642,1 +644,25 @@\n-     * @param cmds User specified arguments.\n+     * Executes a process using the java launcher from the jdk to\n+     * be tested, waits for it to finish and returns\n+     * the process output.\n+     *\n+     * <p>The process is created using runtime flags set up by:\n+     * {@link #createLimitedTestJavaProcessBuilder(String...)}. The\n+     * jvm process will have exited before this method returns.\n+     *\n+     * @param command User specified arguments.\n+     * @return The output from the process.\n+     *\/\n+    public static OutputAnalyzer executeLimitedTestJava(List<String> command) throws Exception {\n+        return executeLimitedTestJava(command.toArray(String[]::new));\n+    }\n+\n+    \/**\n+     * Executes a process using the java launcher from the jdk to\n+     * be tested, waits for it to finish and returns\n+     * the process output.\n+     *\n+     * <p>The process is created using runtime flags set up by:\n+     * {@link #createLimitedTestJavaProcessBuilder(String...)}. The\n+     * jvm process will have exited before this method returns.\n+     *\n+     * @param command User specified arguments.\n@@ -644,1 +670,0 @@\n-     * @see #executeTestJvm(String...)\n@@ -646,2 +671,3 @@\n-    public static OutputAnalyzer executeTestJava(String... cmds) throws Exception {\n-        return executeTestJvm(cmds);\n+    public static OutputAnalyzer executeLimitedTestJava(String... command) throws Exception {\n+        ProcessBuilder pb = createLimitedTestJavaProcessBuilder(command);\n+        return executeProcess(pb);\n","filename":"test\/lib\/jdk\/test\/lib\/process\/ProcessTools.java","additions":38,"deletions":12,"binary":false,"changes":50,"status":"modified"}]}