{"files":[{"patch":"@@ -1745,1 +1745,1 @@\n-  if (C->stub_function() == nullptr && BarrierSet::barrier_set()->barrier_set_nmethod() != nullptr) {\n+  if (C->stub_function() == nullptr) {\n@@ -1795,18 +1795,14 @@\n-    if (BarrierSet::barrier_set()->barrier_set_nmethod() != nullptr) {\n-      \/\/ Dummy labels for just measuring the code size\n-      Label dummy_slow_path;\n-      Label dummy_continuation;\n-      Label dummy_guard;\n-      Label* slow_path = &dummy_slow_path;\n-      Label* continuation = &dummy_continuation;\n-      Label* guard = &dummy_guard;\n-      if (!Compile::current()->output()->in_scratch_emit_size()) {\n-        \/\/ Use real labels from actual stub when not emitting code for the purpose of measuring its size\n-        C2EntryBarrierStub* stub = new (Compile::current()->comp_arena()) C2EntryBarrierStub();\n-        Compile::current()->output()->add_stub(stub);\n-        slow_path = &stub->entry();\n-        continuation = &stub->continuation();\n-        guard = &stub->guard();\n-      }\n-      \/\/ In the C2 code, we move the non-hot part of nmethod entry barriers out-of-line to a stub.\n-      bs->nmethod_entry_barrier(masm, slow_path, continuation, guard);\n+    \/\/ Dummy labels for just measuring the code size\n+    Label dummy_slow_path;\n+    Label dummy_continuation;\n+    Label dummy_guard;\n+    Label* slow_path = &dummy_slow_path;\n+    Label* continuation = &dummy_continuation;\n+    Label* guard = &dummy_guard;\n+    if (!Compile::current()->output()->in_scratch_emit_size()) {\n+      \/\/ Use real labels from actual stub when not emitting code for the purpose of measuring its size\n+      C2EntryBarrierStub* stub = new (Compile::current()->comp_arena()) C2EntryBarrierStub();\n+      Compile::current()->output()->add_stub(stub);\n+      slow_path = &stub->entry();\n+      continuation = &stub->continuation();\n+      guard = &stub->guard();\n@@ -1814,0 +1810,2 @@\n+    \/\/ In the C2 code, we move the non-hot part of nmethod entry barriers out-of-line to a stub.\n+    bs->nmethod_entry_barrier(masm, slow_path, continuation, guard);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":17,"deletions":19,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -288,4 +288,0 @@\n-  if (bs_nm == nullptr) {\n-    return;\n-  }\n-\n@@ -364,5 +360,0 @@\n-  BarrierSetNMethod* bs = BarrierSet::barrier_set()->barrier_set_nmethod();\n-  if (bs == nullptr) {\n-    return;\n-  }\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shared\/barrierSetAssembler_aarch64.cpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -9904,3 +9904,1 @@\n-    if (bs_nm != nullptr) {\n-      StubRoutines::_method_entry_barrier = generate_method_entry_barrier();\n-    }\n+    StubRoutines::_method_entry_barrier = generate_method_entry_barrier();\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -289,1 +289,1 @@\n-  if (C->stub_function() == nullptr && BarrierSet::barrier_set()->barrier_set_nmethod() != nullptr) {\n+  if (C->stub_function() == nullptr) {\n","filename":"src\/hotspot\/cpu\/arm\/arm.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -172,4 +172,0 @@\n-  if (bs_nm == nullptr) {\n-    return;\n-  }\n-\n","filename":"src\/hotspot\/cpu\/arm\/gc\/shared\/barrierSetAssembler_arm.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3179,5 +3179,1 @@\n-    BarrierSetNMethod* bs_nm = BarrierSet::barrier_set()->barrier_set_nmethod();\n-    if (bs_nm != nullptr) {\n-      StubRoutines::_method_entry_barrier = generate_method_entry_barrier();\n-    }\n-\n+    StubRoutines::_method_entry_barrier = generate_method_entry_barrier();\n","filename":"src\/hotspot\/cpu\/arm\/stubGenerator_arm.cpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -184,4 +184,0 @@\n-  if (bs_nm == nullptr) {\n-    return;\n-  }\n-\n@@ -218,5 +214,0 @@\n-  BarrierSetNMethod* bs_nm = BarrierSet::barrier_set()->barrier_set_nmethod();\n-  if (bs_nm == nullptr) {\n-    return;\n-  }\n-\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shared\/barrierSetAssembler_ppc.cpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -4884,4 +4884,1 @@\n-    BarrierSetNMethod* bs_nm = BarrierSet::barrier_set()->barrier_set_nmethod();\n-    if (bs_nm != nullptr) {\n-      StubRoutines::_method_entry_barrier            = generate_method_entry_barrier();\n-    }\n+    StubRoutines::_method_entry_barrier = generate_method_entry_barrier();\n","filename":"src\/hotspot\/cpu\/ppc\/stubGenerator_ppc.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -229,5 +229,0 @@\n-\n-  if (bs_nm == nullptr) {\n-    return;\n-  }\n-\n@@ -323,5 +318,0 @@\n-  BarrierSetNMethod* bs = BarrierSet::barrier_set()->barrier_set_nmethod();\n-  if (bs == nullptr) {\n-    return;\n-  }\n-\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shared\/barrierSetAssembler_riscv.cpp","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1351,1 +1351,1 @@\n-  if (C->stub_function() == nullptr && BarrierSet::barrier_set()->barrier_set_nmethod() != nullptr) {\n+  if (C->stub_function() == nullptr) {\n@@ -1401,18 +1401,14 @@\n-    if (BarrierSet::barrier_set()->barrier_set_nmethod() != nullptr) {\n-      \/\/ Dummy labels for just measuring the code size\n-      Label dummy_slow_path;\n-      Label dummy_continuation;\n-      Label dummy_guard;\n-      Label* slow_path = &dummy_slow_path;\n-      Label* continuation = &dummy_continuation;\n-      Label* guard = &dummy_guard;\n-      if (!Compile::current()->output()->in_scratch_emit_size()) {\n-        \/\/ Use real labels from actual stub when not emitting code for purpose of measuring its size\n-        C2EntryBarrierStub* stub = new (Compile::current()->comp_arena()) C2EntryBarrierStub();\n-        Compile::current()->output()->add_stub(stub);\n-        slow_path = &stub->entry();\n-        continuation = &stub->continuation();\n-        guard = &stub->guard();\n-      }\n-      \/\/ In the C2 code, we move the non-hot part of nmethod entry barriers out-of-line to a stub.\n-      bs->nmethod_entry_barrier(masm, slow_path, continuation, guard);\n+    \/\/ Dummy labels for just measuring the code size\n+    Label dummy_slow_path;\n+    Label dummy_continuation;\n+    Label dummy_guard;\n+    Label* slow_path = &dummy_slow_path;\n+    Label* continuation = &dummy_continuation;\n+    Label* guard = &dummy_guard;\n+    if (!Compile::current()->output()->in_scratch_emit_size()) {\n+      \/\/ Use real labels from actual stub when not emitting code for purpose of measuring its size\n+      C2EntryBarrierStub* stub = new (Compile::current()->comp_arena()) C2EntryBarrierStub();\n+      Compile::current()->output()->add_stub(stub);\n+      slow_path = &stub->entry();\n+      continuation = &stub->continuation();\n+      guard = &stub->guard();\n@@ -1420,0 +1416,2 @@\n+    \/\/ In the C2 code, we move the non-hot part of nmethod entry barriers out-of-line to a stub.\n+    bs->nmethod_entry_barrier(masm, slow_path, continuation, guard);\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":17,"deletions":19,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -6547,4 +6547,1 @@\n-    BarrierSetNMethod* bs_nm = BarrierSet::barrier_set()->barrier_set_nmethod();\n-    if (bs_nm != nullptr) {\n-      StubRoutines::_method_entry_barrier = generate_method_entry_barrier();\n-    }\n+    StubRoutines::_method_entry_barrier = generate_method_entry_barrier();\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -174,4 +174,0 @@\n-  if (bs_nm == nullptr) {\n-    return;\n-  }\n-\n","filename":"src\/hotspot\/cpu\/s390\/gc\/shared\/barrierSetAssembler_s390.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3220,4 +3220,1 @@\n-    BarrierSetNMethod* bs_nm = BarrierSet::barrier_set()->barrier_set_nmethod();\n-    if (bs_nm != nullptr) {\n-      StubRoutines::_method_entry_barrier = generate_method_entry_barrier();\n-    }\n+    StubRoutines::_method_entry_barrier = generate_method_entry_barrier();\n","filename":"src\/hotspot\/cpu\/s390\/stubGenerator_s390.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -137,14 +137,11 @@\n-    if (BarrierSet::barrier_set()->barrier_set_nmethod() != nullptr) {\n-      \/\/ We put the non-hot code of the nmethod entry barrier out-of-line in a stub.\n-      Label dummy_slow_path;\n-      Label dummy_continuation;\n-      Label* slow_path = &dummy_slow_path;\n-      Label* continuation = &dummy_continuation;\n-      if (!Compile::current()->output()->in_scratch_emit_size()) {\n-        \/\/ Use real labels from actual stub when not emitting code for the purpose of measuring its size\n-        C2EntryBarrierStub* stub = new (Compile::current()->comp_arena()) C2EntryBarrierStub();\n-        Compile::current()->output()->add_stub(stub);\n-        slow_path = &stub->entry();\n-        continuation = &stub->continuation();\n-      }\n-      bs->nmethod_entry_barrier(this, slow_path, continuation);\n+    \/\/ We put the non-hot code of the nmethod entry barrier out-of-line in a stub.\n+    Label dummy_slow_path;\n+    Label dummy_continuation;\n+    Label* slow_path = &dummy_slow_path;\n+    Label* continuation = &dummy_continuation;\n+    if (!Compile::current()->output()->in_scratch_emit_size()) {\n+      \/\/ Use real labels from actual stub when not emitting code for the purpose of measuring its size\n+      C2EntryBarrierStub* stub = new (Compile::current()->comp_arena()) C2EntryBarrierStub();\n+      Compile::current()->output()->add_stub(stub);\n+      slow_path = &stub->entry();\n+      continuation = &stub->continuation();\n@@ -152,0 +149,1 @@\n+    bs->nmethod_entry_barrier(this, slow_path, continuation);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":12,"deletions":14,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -357,3 +357,0 @@\n-  if (bs_nm == nullptr) {\n-    return;\n-  }\n@@ -384,4 +381,0 @@\n-  if (bs_nm == nullptr) {\n-    return;\n-  }\n-\n@@ -404,5 +397,0 @@\n-  BarrierSetNMethod* bs = BarrierSet::barrier_set()->barrier_set_nmethod();\n-  if (bs == nullptr) {\n-    return;\n-  }\n-\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shared\/barrierSetAssembler_x86.cpp","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -4214,4 +4214,1 @@\n-    BarrierSetNMethod* bs_nm = BarrierSet::barrier_set()->barrier_set_nmethod();\n-    if (bs_nm != nullptr) {\n-      StubRoutines::_method_entry_barrier = generate_method_entry_barrier();\n-    }\n+    StubRoutines::_method_entry_barrier = generate_method_entry_barrier();\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_32.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -4139,4 +4139,1 @@\n-  BarrierSetNMethod* bs_nm = BarrierSet::barrier_set()->barrier_set_nmethod();\n-  if (bs_nm != nullptr) {\n-    StubRoutines::_method_entry_barrier = generate_method_entry_barrier();\n-  }\n+  StubRoutines::_method_entry_barrier = generate_method_entry_barrier();\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -821,1 +821,1 @@\n-  if (C->stub_function() != nullptr && BarrierSet::barrier_set()->barrier_set_nmethod() != nullptr) {\n+  if (C->stub_function() != nullptr) {\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -871,4 +871,1 @@\n-  BarrierSetNMethod* bs_nm = BarrierSet::barrier_set()->barrier_set_nmethod();\n-  if (bs_nm != nullptr) {\n-    bs_nm->arm_all_nmethods();\n-  }\n+  BarrierSet::barrier_set()->barrier_set_nmethod()->arm_all_nmethods();\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -691,4 +691,0 @@\n-  \/\/ It is not safe to read oops concurrently using entry barriers, if their\n-  \/\/ location depend on whether the nmethod is entrant or not.\n-  \/\/ assert(BarrierSet::barrier_set()->barrier_set_nmethod() == nullptr, \"Not safe oop scan\");\n-\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -87,3 +87,1 @@\n-    if (bs_nm != nullptr) {\n-      bs_nm->disarm(nm);\n-    }\n+    bs_nm->disarm(nm);\n@@ -103,3 +101,1 @@\n-  if (bs_nm != nullptr) {\n-    bs_nm->disarm(nm);\n-  }\n+  bs_nm->disarm(nm);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1NMethodClosure.cpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -89,3 +89,1 @@\n-  if (bs_nm != nullptr) {\n-    thread->set_nmethod_disarmed_guard_value(bs_nm->disarmed_guard_value());\n-  }\n+  thread->set_nmethod_disarmed_guard_value(bs_nm->disarmed_guard_value());\n","filename":"src\/hotspot\/share\/gc\/shared\/barrierSet.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -128,3 +128,1 @@\n-    if (bs_nm != nullptr) {\n-      thread->set_nmethod_disarmed_guard_value(bs_nm->disarmed_guard_value());\n-    }\n+    thread->set_nmethod_disarmed_guard_value(bs_nm->disarmed_guard_value());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1036,1 +1036,1 @@\n-    if (nm != nullptr && bs_nm != nullptr) {\n+    if (nm != nullptr) {\n@@ -1077,1 +1077,1 @@\n-  if (osr_nm != nullptr && bs_nm != nullptr) {\n+  if (osr_nm != nullptr) {\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -168,7 +168,5 @@\n-  if (bs_nm != nullptr) {\n-    thread_disarmed_guard_value_offset = in_bytes(bs_nm->thread_disarmed_guard_value_offset());\n-    nmethod_entry_barrier = StubRoutines::method_entry_barrier();\n-    BarrierSetAssembler* bs_asm = BarrierSet::barrier_set()->barrier_set_assembler();\n-    AARCH64_ONLY(BarrierSetAssembler_nmethod_patching_type = (int) bs_asm->nmethod_patching_type());\n-    AARCH64_ONLY(BarrierSetAssembler_patching_epoch_addr = bs_asm->patching_epoch_addr());\n-  }\n+  thread_disarmed_guard_value_offset = in_bytes(bs_nm->thread_disarmed_guard_value_offset());\n+  nmethod_entry_barrier = StubRoutines::method_entry_barrier();\n+  BarrierSetAssembler* bs_asm = BarrierSet::barrier_set()->barrier_set_assembler();\n+  AARCH64_ONLY(BarrierSetAssembler_nmethod_patching_type = (int) bs_asm->nmethod_patching_type());\n+  AARCH64_ONLY(BarrierSetAssembler_patching_epoch_addr = bs_asm->patching_epoch_addr());\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVMInit.cpp","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1867,3 +1867,1 @@\n-  if (bs_nm != nullptr) {\n-    bs_nm->nmethod_entry_barrier(nm);\n-  }\n+  bs_nm->nmethod_entry_barrier(nm);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -61,3 +61,1 @@\n-      if (bs_nm != nullptr) {\n-        bs_nm->disarm(nm);\n-      }\n+      bs_nm->disarm(nm);\n","filename":"src\/hotspot\/share\/memory\/iterator.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"}]}