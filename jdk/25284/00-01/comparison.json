{"files":[{"patch":"@@ -31,2 +31,0 @@\n-#include \"runtime\/sharedRuntime.hpp\"\n-#include \"utilities\/macros.hpp\"\n","filename":"src\/hotspot\/share\/opto\/arraycopynode.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -210,0 +210,1 @@\n+  int inline_limit = ArrayOperationPartialInlineSize \/ type2aelembytes(type);\n@@ -213,1 +214,0 @@\n-  uint shift  = exact_log2(type2aelembytes(type));\n@@ -220,1 +220,1 @@\n-    const_len = lty->get_con() << shift;\n+    const_len = lty->get_con();\n@@ -226,1 +226,1 @@\n-  if ( const_len > ArrayOperationPartialInlineSize ||\n+  if (const_len > inline_limit ||\n@@ -233,4 +233,1 @@\n-  Node* copy_bytes = new LShiftXNode(length, intcon(shift));\n-  transform_later(copy_bytes);\n-\n-  Node* cmp_le = new CmpULNode(copy_bytes, longcon(ArrayOperationPartialInlineSize));\n+  Node* cmp_le = new CmpULNode(length, longcon(inline_limit));\n@@ -243,2 +240,1 @@\n-  int inline_limit = ArrayOperationPartialInlineSize \/ type2aelembytes(type);\n-  Node* casted_length = new CastLLNode(inline_block, length, TypeLong::make(0, inline_limit, Type::WidenMin), ConstraintCastNode::StrongDependency);\n+  Node* casted_length = new CastLLNode(inline_block, length, TypeLong::make(0, inline_limit, Type::WidenMin), ConstraintCastNode::RegularDependency);\n","filename":"src\/hotspot\/share\/opto\/macroArrayCopy.cpp","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"}]}