{"files":[{"patch":"@@ -30,1 +30,0 @@\n-#include \"sanitizers\/address.hpp\"\n@@ -34,0 +33,1 @@\n+#include \"sanitizers\/address.hpp\"\n@@ -91,0 +91,41 @@\n+template<typename T>\n+class AsanPoisoner {\n+  char* _memory;\n+ public:\n+  AsanPoisoner() = delete;\n+  AsanPoisoner(char* addr) : _memory(addr) {\n+    ASAN_UNPOISON_MEMORY_REGION(_memory, sizeof(T));\n+  }\n+  ~AsanPoisoner() {\n+    ASAN_POISON_MEMORY_REGION(_memory, sizeof(T));\n+  }\n+  static void register_memory(char* addr) {\n+    ASAN_POISON_MEMORY_REGION(addr, sizeof(T));\n+  }\n+  static void unregister_memory(char* addr) {\n+    ASAN_UNPOISON_MEMORY_REGION(addr, sizeof(T));\n+  }\n+};\n+\n+\/\/ In non-ASAN builds we use 'void' as template parameter, to let\n+\/\/ the AsanPoisoner instances be compiled to nothing\n+template<>\n+class AsanPoisoner<void> {\n+ public:\n+  AsanPoisoner() = delete;\n+  AsanPoisoner(char* addr) { }\n+  static void register_memory(char* addr) { }\n+  static void unregister_memory(char* addr) { }\n+  ~AsanPoisoner() { }\n+};\n+\n+#ifdef INCLUDE_ASAN\n+  using CanaryType = uint16_t;\n+  using SizeType = size_t;\n+  NOT_LP64(using AltCanaryType = uint32_t;)\n+#else\n+  using CanaryType = void;\n+  using SizeType = void;\n+  NOT_LP64(using AltCanaryType = void;)\n+#endif\n+\n@@ -97,3 +138,0 @@\n-  #if INCLUDE_ASAN\n-  bool _poisoned;\n-  #else\n@@ -101,1 +139,0 @@\n-  #endif\n@@ -118,19 +155,9 @@\n-  #if INCLUDE_ASAN\n-    uint16_t get_footer() const {\n-      ASAN_UNPOISON_MEMORY_REGION(footer_address(), sizeof(uint16_t));\n-      uint16_t footer = build_footer(footer_address()[0], footer_address()[1]);\n-      if (_poisoned) {\n-        ASAN_POISON_MEMORY_REGION(footer_address(), sizeof(uint16_t));\n-      }\n-      return footer;\n-    }\n-    void set_footer(uint16_t v) {\n-      bool poisoned_before = _poisoned;\n-      set_poisoned(false);\n-      footer_address()[0] = (uint8_t)(v >> 8); footer_address()[1] = (uint8_t)v;\n-      set_poisoned(poisoned_before);\n-    }\n-  #else\n-    uint16_t get_footer() const { return build_footer(footer_address()[0], footer_address()[1]); }\n-    void set_footer(uint16_t v) { footer_address()[0] = (uint8_t)(v >> 8); footer_address()[1] = (uint8_t)v; }\n-  #endif\n+  uint16_t get_footer() const {\n+    AsanPoisoner<CanaryType> _temp((char*)footer_address());\n+    return build_footer(footer_address()[0], footer_address()[1]);\n+  }\n+\n+  void set_footer(uint16_t v) {\n+    AsanPoisoner<CanaryType> _temp((char*)footer_address());\n+    footer_address()[0] = (uint8_t)(v >> 8); footer_address()[1] = (uint8_t)v;\n+  }\n@@ -142,1 +169,0 @@\n-  using CanaryType = uint16_t;\n@@ -144,51 +170,20 @@\n-    using AltCanaryType = uint32_t;\n-    #if INCLUDE_ASAN\n-      inline AltCanaryType alt_canary() const {\n-        ASAN_UNPOISON_MEMORY_REGION(&_alt_canary, sizeof(AltCanaryType));\n-        AltCanaryType ac = _alt_canary;\n-        if (_poisoned) {\n-          ASAN_POISON_MEMORY_REGION(&_alt_canary, sizeof(AltCanaryType));\n-        }\n-        return ac;\n-      }\n-      inline void set_alt_canary(AltCanaryType value) {\n-        bool poisoned_before = _poisoned;\n-        set_poisoned(false);\n-        _alt_canary = value;\n-        set_poisoned(poisoned_before);\n-      }\n-    #else\n-      inline AltCanaryType alt_canary() const { return _alt_canary; }\n-      inline void set_alt_canary(AltCanaryType value) { _alt_canary = value; }\n-    #endif \/\/ INCLUDE_ASAN\n-  #endif \/\/ _LP64\n-  #if INCLUDE_ASAN\n-    inline void set_poisoned(bool poison) {\n-      if (poison) {\n-        ASAN_POISON_MEMORY_REGION(&_canary, sizeof(CanaryType));\n-        ASAN_POISON_MEMORY_REGION(footer_address(), sizeof(CanaryType));\n-        ASAN_POISON_MEMORY_REGION(&_size, sizeof(_size));\n-      } else {\n-        ASAN_UNPOISON_MEMORY_REGION(&_size, sizeof(_size));\n-        ASAN_UNPOISON_MEMORY_REGION(&_canary, sizeof(CanaryType));\n-        ASAN_UNPOISON_MEMORY_REGION(footer_address(), sizeof(CanaryType));\n-      }\n-      _poisoned = poison;\n-    }\n-\n-    inline bool is_poisoned() const { return _poisoned; }\n-\n-    inline size_t size() const {\n-      ASAN_UNPOISON_MEMORY_REGION(&_size, sizeof(_size));\n-      size_t size = _size;\n-      if (_poisoned) {\n-        ASAN_POISON_MEMORY_REGION(&_size, sizeof(_size));\n-      }\n-      return size;\n-    }\n-\n-    inline void set_header_canary(uint16_t value) {\n-      bool poisoned_before = _poisoned;\n-      set_poisoned(false);\n-      _canary = value;\n-      set_poisoned(poisoned_before);\n+  inline uint32_t alt_canary() const {\n+    AsanPoisoner<AltCanaryType> _temp((char*)&alt_canary());\n+    return _alt_canary;\n+  }\n+  inline void set_alt_canary(uint32_t value) {\n+    AsanPoisoner<AltCanaryType> _temp((char*)&alt_canary());\n+      _alt_canary = value;\n+  }\n+  #endif\n+  inline void set_poisoned(bool poison) {\n+    if (poison) {\n+      AsanPoisoner<CanaryType>::register_memory((char*)&_canary);\n+      AsanPoisoner<CanaryType>::register_memory((char*)footer_address());\n+      AsanPoisoner<SizeType>::register_memory((char*)&_size);\n+      NOT_LP64(AsanPoisoner<AltCanaryType>::register_memory((char*)&_alt_canary));\n+    } else {\n+      AsanPoisoner<CanaryType>::unregister_memory((char*)&_canary);\n+      AsanPoisoner<CanaryType>::unregister_memory((char*)footer_address());\n+      AsanPoisoner<SizeType>::unregister_memory((char*)&_size);\n+      NOT_LP64(AsanPoisoner<AltCanaryType>::unregister_memory((char*)&_alt_canary));\n@@ -196,0 +191,1 @@\n+  }\n@@ -197,15 +193,0 @@\n-    inline CanaryType canary() const {\n-      ASAN_UNPOISON_MEMORY_REGION(&_canary, sizeof(CanaryType));\n-      CanaryType canary = _canary;\n-      if (_poisoned) {\n-        ASAN_POISON_MEMORY_REGION(&_canary, sizeof(CanaryType));\n-      }\n-      return canary ;\n-    }\n-  #else\n-    inline bool is_poisoned() const { return false; }\n-    inline void set_poisoned(bool poison) { }\n-    inline size_t size() const { return _size; }\n-    inline void set_header_canary(uint16_t value) {_canary = value;}\n-    inline CanaryType canary() const { return _canary; }\n-  #endif\n@@ -223,0 +204,4 @@\n+  inline size_t size() const {\n+    AsanPoisoner<SizeType> _temp((char*)&_size);\n+    return _size;\n+  }\n@@ -233,0 +218,10 @@\n+\n+  inline void set_header_canary(uint16_t value) {\n+    AsanPoisoner<CanaryType> _temp((char*)&_canary);\n+    _canary = value;\n+  }\n+\n+  inline CanaryType canary() const {\n+    AsanPoisoner<CanaryType> _temp((char*)&_canary);\n+    return _canary;\n+  }\n","filename":"src\/hotspot\/share\/nmt\/mallocHeader.hpp","additions":86,"deletions":91,"binary":false,"changes":177,"status":"modified"},{"patch":"@@ -38,6 +38,1 @@\n-  : _size(size), _mst_marker(mst_marker), _mem_tag(mem_tag),\n-  #if INCLUDE_ASAN\n-    _poisoned(false),\n-  #else\n-    _unused(0),\n-  #endif\n+  : _size(size), _mst_marker(mst_marker), _mem_tag(mem_tag), _unused(0),\n@@ -51,0 +46,1 @@\n+  set_poisoned(true);\n@@ -60,0 +56,1 @@\n+  set_poisoned(true);\n@@ -64,0 +61,1 @@\n+  set_poisoned(false);\n","filename":"src\/hotspot\/share\/nmt\/mallocHeader.inline.hpp","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -200,1 +200,0 @@\n-  header->set_poisoned(true);\n@@ -210,1 +209,0 @@\n-  header->set_poisoned(false);\n","filename":"src\/hotspot\/share\/nmt\/mallocTracker.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -725,1 +725,0 @@\n-    header->set_poisoned(false);\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#define __SANITIZE_ADDRESS__\n","filename":"src\/hotspot\/share\/sanitizers\/address.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -167,4 +167,30 @@\n-TEST_VM(NMT_ASAN, poisoned_memory_access) {\n-  if (MemTracker::enabled()) {\n-    tty->print_cr(\"skipped.\");\n-    return;\n+#if __has_feature(address_sanitizer) || defined(__SANITIZE_ADDRESS__)\n+#else\n+#error \"No ASAN\"\n+#endif\n+#define TEST_VM_FATAL_ASAN_MSG(category, name, msg)                \\\n+  static void test_  ## category ## _ ## name ## _();               \\\n+                                                                    \\\n+  static void child_ ## category ## _ ## name ## _() {              \\\n+    ::testing::GTEST_FLAG(throw_on_failure) = true;                 \\\n+    test_ ## category ## _ ## name ## _();                          \\\n+    gtest_exit_from_child_vm(0);                                    \\\n+  }                                                                 \\\n+                                                                    \\\n+  TEST(category, CONCAT(name, _vm_assert)) {                        \\\n+    ASSERT_EXIT(child_ ## category ## _ ## name ## _(),             \\\n+                ::testing::KilledBySignal(SIGABRT),                 \\\n+                msg);                                               \\\n+  }                                                                 \\\n+                                                                    \\\n+  void test_ ## category ## _ ## name ## _()\n+\n+#define DEFINE_ASAN_TEST(test_function)                            \\\n+  TEST_VM_FATAL_ASAN_MSG(NMT_ASAN, test_function, \".*AddressSanitizer.*\") {     \\\n+    if (MemTracker::tracking_level() > NMT_off) {                                         \\\n+      test_function ();                                                                   \\\n+    } else {                                                                              \\\n+      \/* overflow detection requires NMT to be on. If off, fake assert. *\/                \\\n+      guarantee(false,                                                                    \\\n+                \"fake message ignore this - .*AddresssSanitizer.*\");                      \\\n+    }                                                                                     \\\n@@ -172,0 +198,2 @@\n+\n+static void test_write_canary() {\n@@ -174,0 +202,3 @@\n+  CanaryType* canary_ptr = (CanaryType*)((char*)p - sizeof(CanaryType));\n+  *canary_ptr = 1;\n+}\n@@ -175,33 +206,134 @@\n-  MallocHeader* mah = (MallocHeader*)(p - sizeof(MallocHeader));\n-  EXPECT_TRUE(mah->is_poisoned());\n-  size_t s = mah->size();\n-  EXPECT_EQ(s, SIZE);\n-  \/\/reading size won't change the poisoned state\n-  EXPECT_TRUE(mah->is_poisoned());\n-  const char* msg= \".*AddressSanitizer.*\";\n-\n-  \/\/ reading\/writing '_canary' of MallocHeader and will cause 'use-after-poison' ASAN error\n-  MallocHeader::CanaryType* canary_ptr = (MallocHeader::CanaryType*)((char*)p - sizeof(MallocHeader::CanaryType));\n-  MallocHeader::CanaryType read_canary = 0;\n-  EXPECT_EXIT(*canary_ptr = 1, testing::KilledBySignal(SIGABRT), msg);\n-  EXPECT_EXIT(read_canary = *canary_ptr, testing::KilledBySignal(SIGABRT), msg);\n-\n-  \/\/ same for footer canary\n-  MallocHeader::CanaryType* footer_ptr = (MallocHeader::CanaryType*)(mah->footer_address());\n-  EXPECT_EXIT(*footer_ptr = 1, testing::KilledBySignal(SIGABRT), msg);\n-  EXPECT_EXIT(read_canary = *footer_ptr, testing::KilledBySignal(SIGABRT), msg);\n-\n-  \/\/ same for '_size'\n-  EXPECT_EXIT(*((char*)mah    ) = 0, testing::KilledBySignal(SIGABRT), msg);\n-  EXPECT_EXIT(*((char*)mah + 1) = 0, testing::KilledBySignal(SIGABRT), msg);\n-  EXPECT_EXIT(*((char*)mah + 2) = 0, testing::KilledBySignal(SIGABRT), msg);\n-  EXPECT_EXIT(*((char*)mah + 3) = 0, testing::KilledBySignal(SIGABRT), msg);\n-  EXPECT_EXIT(*((char*)mah + sizeof(size_t) - 1) = 0, testing::KilledBySignal(SIGABRT), msg);\n-  char c = 'c';\n-  EXPECT_EXIT(c = *((char*)mah    ), testing::KilledBySignal(SIGABRT), msg);\n-  EXPECT_EXIT(c = *((char*)mah + 1), testing::KilledBySignal(SIGABRT), msg);\n-  EXPECT_EXIT(c = *((char*)mah + 2), testing::KilledBySignal(SIGABRT), msg);\n-  EXPECT_EXIT(c = *((char*)mah + 3), testing::KilledBySignal(SIGABRT), msg);\n-  EXPECT_EXIT(c = *((char*)mah + sizeof(size_t) - 1), testing::KilledBySignal(SIGABRT), msg);\n-  os::free(p);\n-  EXPECT_EXIT(*footer_ptr = 1, testing::KilledBySignal(SIGABRT), msg);\n+static void test_read_canary() {\n+  const size_t SIZE = 10;\n+  char* p = (char*)os::malloc(SIZE, mtTest);\n+  CanaryType* canary_ptr = (CanaryType*)((char*)p - sizeof(CanaryType));\n+  CanaryType read_canary = 0;\n+  read_canary = *canary_ptr;\n+}\n+\n+static void test_write_footer() {\n+  const size_t SIZE = 10;\n+  char* p = (char*)os::malloc(SIZE, mtTest);\n+  MallocHeader* mh = (MallocHeader*)(p - sizeof(MallocHeader));\n+  CanaryType* footer_ptr = (CanaryType*)(mh->footer_address());\n+  *footer_ptr = 1;\n+}\n+\n+static void test_read_footer() {\n+  const size_t SIZE = 10;\n+  char* p = (char*)os::malloc(SIZE, mtTest);\n+  MallocHeader* mh = (MallocHeader*)(p - sizeof(MallocHeader));\n+  CanaryType* footer_ptr = (CanaryType*)(mh->footer_address());\n+  CanaryType read_footer = *footer_ptr;\n+}\n+\n+static void test_write_size() {\n+  const size_t SIZE = 10;\n+  char* p = (char*)os::malloc(SIZE, mtTest);\n+  MallocHeader* mh = (MallocHeader*)(p - sizeof(MallocHeader));\n+  size_t* size_ptr = (size_t*)(mh);\n+  *size_ptr = 1;\n+}\n+\n+static void test_read_size() {\n+  const size_t SIZE = 10;\n+  char* p = (char*)os::malloc(SIZE, mtTest);\n+  MallocHeader* mh = (MallocHeader*)(p - sizeof(MallocHeader));\n+  size_t* size_ptr = (size_t*)(mh);\n+  size_t read_size = *size_ptr;\n+}\n+\n+static void test_write_canary_after_realloc() {\n+  const size_t SIZE = 10;\n+  char* p = (char*)os::malloc(SIZE, mtTest);\n+  p = (char*)os::realloc(p, 2 * SIZE, mtTest);\n+  CanaryType* canary_ptr = (CanaryType*)((char*)p - sizeof(CanaryType));\n+  *canary_ptr = 1;\n+}\n+\n+static void test_read_canary_after_realloc() {\n+  const size_t SIZE = 10;\n+  char* p = (char*)os::malloc(SIZE, mtTest);\n+  p = (char*)os::realloc(p, 2 * SIZE, mtTest);\n+  CanaryType* canary_ptr = (CanaryType*)((char*)p - sizeof(CanaryType));\n+  CanaryType read_canary = 0;\n+  read_canary = *canary_ptr;\n+}\n+\n+static void test_write_footer_after_realloc() {\n+  const size_t SIZE = 10;\n+  char* p = (char*)os::malloc(SIZE, mtTest);\n+  p = (char*)os::realloc(p, 2 * SIZE, mtTest);\n+  MallocHeader* mh = (MallocHeader*)(p - sizeof(MallocHeader));\n+  CanaryType* footer_ptr = (CanaryType*)(mh->footer_address());\n+  *footer_ptr = 1;\n+}\n+\n+static void test_read_footer_after_realloc() {\n+  const size_t SIZE = 10;\n+  char* p = (char*)os::malloc(SIZE, mtTest);\n+  p = (char*)os::realloc(p, 2 * SIZE, mtTest);\n+  MallocHeader* mh = (MallocHeader*)(p - sizeof(MallocHeader));\n+  CanaryType* footer_ptr = (CanaryType*)(mh->footer_address());\n+  CanaryType read_footer = *footer_ptr;\n+}\n+\n+static void test_write_size_after_realloc() {\n+  const size_t SIZE = 10;\n+  char* p = (char*)os::malloc(SIZE, mtTest);\n+  p = (char*)os::realloc(p, 2 * SIZE, mtTest);\n+  MallocHeader* mh = (MallocHeader*)(p - sizeof(MallocHeader));\n+  size_t* size_ptr = (size_t*)(mh);\n+  *size_ptr = 1;\n+}\n+\n+static void test_read_size_after_realloc() {\n+  const size_t SIZE = 10;\n+  char* p = (char*)os::malloc(SIZE, mtTest);\n+  p = (char*)os::realloc(p, 2 * SIZE, mtTest);\n+  MallocHeader* mh = (MallocHeader*)(p - sizeof(MallocHeader));\n+  size_t* size_ptr = (size_t*)(mh);\n+  size_t read_size = *size_ptr;\n+}\n+\n+\n+DEFINE_ASAN_TEST(test_write_canary);\n+DEFINE_ASAN_TEST(test_read_canary);\n+DEFINE_ASAN_TEST(test_write_footer);\n+DEFINE_ASAN_TEST(test_read_footer);\n+DEFINE_ASAN_TEST(test_write_size);\n+DEFINE_ASAN_TEST(test_read_size);\n+DEFINE_ASAN_TEST(test_write_canary_after_realloc);\n+DEFINE_ASAN_TEST(test_read_canary_after_realloc);\n+DEFINE_ASAN_TEST(test_write_footer_after_realloc);\n+DEFINE_ASAN_TEST(test_read_footer_after_realloc);\n+DEFINE_ASAN_TEST(test_write_size_after_realloc);\n+DEFINE_ASAN_TEST(test_read_size_after_realloc);\n+\n+static void test_poison_local() {\n+  uint16_t a;\n+  ASAN_POISON_MEMORY_REGION(&a, sizeof(a));\n+  a = 2;\n+}\n+\n+DEFINE_ASAN_TEST(test_poison_local);\n+\n+TEST_VM(NMT_ASAN, test_poison_when_no_asan) {\n+  uint16_t a;\n+  {\n+    AsanPoisoner<void> pm((char*)&a);\n+    a = 2;\n+    EXPECT_EQ(a, 2);\n+  }\n+  a = 3;\n+  EXPECT_EQ(a, 3);\n+}\n+\n+TEST_VM(NMT_ASAN, poison_no_death) {\n+  uint16_t a;\n+  ASAN_POISON_MEMORY_REGION(&a, sizeof(a));\n+  {\n+    AsanPoisoner<uint16_t> pm((char*)&a);\n+    a = 2;\n+    EXPECT_EQ(a, 2);\n+  }\n","filename":"test\/hotspot\/gtest\/nmt\/test_nmt_buffer_overflow_detection.cpp","additions":169,"deletions":37,"binary":false,"changes":206,"status":"modified"}]}