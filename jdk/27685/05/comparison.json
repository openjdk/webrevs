{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+#include \"sanitizers\/address.hpp\"\n@@ -96,0 +97,3 @@\n+  #if INCLUDE_ASAN\n+  bool _poisoned;\n+  #else\n@@ -97,0 +101,1 @@\n+  #endif\n@@ -113,3 +118,19 @@\n-  uint8_t* footer_address() const   { return ((address)this) + sizeof(MallocHeader) + _size; }\n-  uint16_t get_footer() const       { return build_footer(footer_address()[0], footer_address()[1]); }\n-  void set_footer(uint16_t v)       { footer_address()[0] = (uint8_t)(v >> 8); footer_address()[1] = (uint8_t)v; }\n+  #if INCLUDE_ASAN\n+    uint16_t get_footer() const {\n+      ASAN_UNPOISON_MEMORY_REGION(footer_address(), sizeof(uint16_t));\n+      uint16_t footer = build_footer(footer_address()[0], footer_address()[1]);\n+      if (_poisoned) {\n+        ASAN_POISON_MEMORY_REGION(footer_address(), sizeof(uint16_t));\n+      }\n+      return footer;\n+    }\n+    void set_footer(uint16_t v) {\n+      bool poisoned_before = _poisoned;\n+      set_poisoned(false);\n+      footer_address()[0] = (uint8_t)(v >> 8); footer_address()[1] = (uint8_t)v;\n+      set_poisoned(poisoned_before);\n+    }\n+  #else\n+    uint16_t get_footer() const { return build_footer(footer_address()[0], footer_address()[1]); }\n+    void set_footer(uint16_t v) { footer_address()[0] = (uint8_t)(v >> 8); footer_address()[1] = (uint8_t)v; }\n+  #endif\n@@ -121,0 +142,71 @@\n+  using CanaryType = uint16_t;\n+  #ifndef _LP64\n+    using AltCanaryType = uint32_t;\n+    #if INCLUDE_ASAN\n+      inline AltCanaryType alt_canary() const {\n+        ASAN_UNPOISON_MEMORY_REGION(&_alt_canary, sizeof(AltCanaryType));\n+        AltCanaryType ac = _alt_canary;\n+        if (_poisoned) {\n+          ASAN_POISON_MEMORY_REGION(&_alt_canary, sizeof(AltCanaryType));\n+        }\n+        return ac;\n+      }\n+      inline void set_alt_canary(AltCanaryType value) {\n+        bool poisoned_before = _poisoned;\n+        set_poisoned(false);\n+        _alt_canary = value;\n+        set_poisoned(poisoned_before);\n+      }\n+    #else\n+      inline AltCanaryType alt_canary() const { return _alt_canary; }\n+      inline void set_alt_canary(AltCanaryType value) { _alt_canary = value; }\n+    #endif \/\/ INCLUDE_ASAN\n+  #endif \/\/ _LP64\n+  #if INCLUDE_ASAN\n+    inline void set_poisoned(bool poison) {\n+      if (poison) {\n+        ASAN_POISON_MEMORY_REGION(&_canary, sizeof(CanaryType));\n+        ASAN_POISON_MEMORY_REGION(footer_address(), sizeof(CanaryType));\n+        ASAN_POISON_MEMORY_REGION(&_size, sizeof(_size));\n+      } else {\n+        ASAN_UNPOISON_MEMORY_REGION(&_size, sizeof(_size));\n+        ASAN_UNPOISON_MEMORY_REGION(&_canary, sizeof(CanaryType));\n+        ASAN_UNPOISON_MEMORY_REGION(footer_address(), sizeof(CanaryType));\n+      }\n+      _poisoned = poison;\n+    }\n+\n+    inline bool is_poisoned() const { return _poisoned; }\n+\n+    inline size_t size() const {\n+      ASAN_UNPOISON_MEMORY_REGION(&_size, sizeof(_size));\n+      size_t size = _size;\n+      if (_poisoned) {\n+        ASAN_POISON_MEMORY_REGION(&_size, sizeof(_size));\n+      }\n+      return size;\n+    }\n+\n+    inline void set_header_canary(uint16_t value) {\n+      bool poisoned_before = _poisoned;\n+      set_poisoned(false);\n+      _canary = value;\n+      set_poisoned(poisoned_before);\n+    }\n+\n+    inline CanaryType canary() const {\n+      ASAN_UNPOISON_MEMORY_REGION(&_canary, sizeof(CanaryType));\n+      CanaryType canary = _canary;\n+      if (_poisoned) {\n+        ASAN_POISON_MEMORY_REGION(&_canary, sizeof(CanaryType));\n+      }\n+      return canary ;\n+    }\n+  #else\n+    inline bool is_poisoned() const { return false; }\n+    inline void set_poisoned(bool poison) { }\n+    inline size_t size() const { return _size; }\n+    inline void set_header_canary(uint16_t value) {_canary = value;}\n+    inline CanaryType canary() const { return _canary; }\n+  #endif\n+  uint8_t* footer_address() const { return ((address)this) + sizeof(MallocHeader) + size(); }\n@@ -131,1 +223,0 @@\n-  inline size_t size()  const { return _size; }\n@@ -142,3 +233,2 @@\n-\n-  bool is_dead() const { return _canary == _header_canary_dead_mark; }\n-  bool is_live() const { return _canary == _header_canary_live_mark; }\n+  bool is_dead() const { return canary() == _header_canary_dead_mark; }\n+  bool is_live() const { return canary() == _header_canary_live_mark; }\n","filename":"src\/hotspot\/share\/nmt\/mallocHeader.hpp","additions":98,"deletions":8,"binary":false,"changes":106,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,6 @@\n-    _unused(0), _canary(_header_canary_live_mark)\n+  #if INCLUDE_ASAN\n+    _poisoned(false),\n+  #else\n+    _unused(0),\n+  #endif\n+   _canary(_header_canary_live_mark)\n@@ -44,1 +49,1 @@\n-  NOT_LP64(_alt_canary = _header_alt_canary_live_mark;)\n+  NOT_LP64(set_alt_canary(_header_alt_canary_live_mark);)\n@@ -49,1 +54,1 @@\n-  assert(_canary == _header_canary_dead_mark, \"must be dead\");\n+  assert(canary() == _header_canary_dead_mark, \"must be dead\");\n@@ -51,3 +56,3 @@\n-  NOT_LP64(assert(_alt_canary == _header_alt_canary_dead_mark, \"must be dead\"));\n-  _canary = _header_canary_live_mark;\n-  NOT_LP64(_alt_canary = _header_alt_canary_live_mark);\n+  NOT_LP64(assert(alt_canary() == _header_alt_canary_dead_mark, \"must be dead\"));\n+  set_header_canary(_header_canary_live_mark);\n+  NOT_LP64(set_alt_canary(_header_alt_canary_live_mark);)\n@@ -59,2 +64,2 @@\n-  _canary = _header_canary_dead_mark;\n-  NOT_LP64(_alt_canary = _header_alt_canary_dead_mark);\n+  set_header_canary(_header_canary_dead_mark);\n+  NOT_LP64(set_alt_canary(_header_alt_canary_dead_mark);)\n@@ -124,3 +129,3 @@\n-  return ( (_canary == _header_canary_live_mark NOT_LP64(&& _alt_canary == _header_alt_canary_live_mark)) ||\n-           (_canary == _header_canary_dead_mark NOT_LP64(&& _alt_canary == _header_alt_canary_dead_mark)) ) &&\n-           _size > 0 && _size < max_reasonable_malloc_size;\n+  return ( (canary() == _header_canary_live_mark NOT_LP64(&& alt_canary() == _header_alt_canary_live_mark)) ||\n+           (canary() == _header_canary_dead_mark NOT_LP64(&& alt_canary() == _header_alt_canary_dead_mark)) ) &&\n+           size() > 0 && size() < max_reasonable_malloc_size;\n@@ -134,1 +139,1 @@\n-  if (_canary != _header_canary_live_mark) {\n+  if (canary() != _header_canary_live_mark) {\n@@ -142,1 +147,1 @@\n-  if (_alt_canary != _header_alt_canary_live_mark) {\n+  if (alt_canary() != _header_alt_canary_live_mark) {\n@@ -150,1 +155,1 @@\n-  if (_size >= max_reasonable_malloc_size) {\n+  if (size() >= max_reasonable_malloc_size) {\n","filename":"src\/hotspot\/share\/nmt\/mallocHeader.inline.hpp","additions":20,"deletions":15,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+#include \"sanitizers\/address.hpp\"\n@@ -190,0 +191,1 @@\n+\n@@ -198,0 +200,1 @@\n+  header->set_poisoned(true);\n@@ -207,0 +210,1 @@\n+  header->set_poisoned(false);\n","filename":"src\/hotspot\/share\/nmt\/mallocTracker.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -725,0 +725,1 @@\n+    header->set_poisoned(false);\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -166,1 +166,43 @@\n-\n+#else\n+TEST_VM(NMT_ASAN, poisoned_memory_access) {\n+  if (MemTracker::enabled()) {\n+    tty->print_cr(\"skipped.\");\n+    return;\n+  }\n+  const size_t SIZE = 10;\n+  char* p = (char*)os::malloc(SIZE, mtTest);\n+\n+  MallocHeader* mah = (MallocHeader*)(p - sizeof(MallocHeader));\n+  EXPECT_TRUE(mah->is_poisoned());\n+  size_t s = mah->size();\n+  EXPECT_EQ(s, SIZE);\n+  \/\/reading size won't change the poisoned state\n+  EXPECT_TRUE(mah->is_poisoned());\n+  const char* msg= \".*AddressSanitizer.*\";\n+\n+  \/\/ reading\/writing '_canary' of MallocHeader and will cause 'use-after-poison' ASAN error\n+  MallocHeader::CanaryType* canary_ptr = (MallocHeader::CanaryType*)((char*)p - sizeof(MallocHeader::CanaryType));\n+  MallocHeader::CanaryType read_canary = 0;\n+  EXPECT_EXIT(*canary_ptr = 1, testing::KilledBySignal(SIGABRT), msg);\n+  EXPECT_EXIT(read_canary = *canary_ptr, testing::KilledBySignal(SIGABRT), msg);\n+\n+  \/\/ same for footer canary\n+  MallocHeader::CanaryType* footer_ptr = (MallocHeader::CanaryType*)(mah->footer_address());\n+  EXPECT_EXIT(*footer_ptr = 1, testing::KilledBySignal(SIGABRT), msg);\n+  EXPECT_EXIT(read_canary = *footer_ptr, testing::KilledBySignal(SIGABRT), msg);\n+\n+  \/\/ same for '_size'\n+  EXPECT_EXIT(*((char*)mah    ) = 0, testing::KilledBySignal(SIGABRT), msg);\n+  EXPECT_EXIT(*((char*)mah + 1) = 0, testing::KilledBySignal(SIGABRT), msg);\n+  EXPECT_EXIT(*((char*)mah + 2) = 0, testing::KilledBySignal(SIGABRT), msg);\n+  EXPECT_EXIT(*((char*)mah + 3) = 0, testing::KilledBySignal(SIGABRT), msg);\n+  EXPECT_EXIT(*((char*)mah + sizeof(size_t) - 1) = 0, testing::KilledBySignal(SIGABRT), msg);\n+  char c = 'c';\n+  EXPECT_EXIT(c = *((char*)mah    ), testing::KilledBySignal(SIGABRT), msg);\n+  EXPECT_EXIT(c = *((char*)mah + 1), testing::KilledBySignal(SIGABRT), msg);\n+  EXPECT_EXIT(c = *((char*)mah + 2), testing::KilledBySignal(SIGABRT), msg);\n+  EXPECT_EXIT(c = *((char*)mah + 3), testing::KilledBySignal(SIGABRT), msg);\n+  EXPECT_EXIT(c = *((char*)mah + sizeof(size_t) - 1), testing::KilledBySignal(SIGABRT), msg);\n+  os::free(p);\n+  EXPECT_EXIT(*footer_ptr = 1, testing::KilledBySignal(SIGABRT), msg);\n+}\n","filename":"test\/hotspot\/gtest\/nmt\/test_nmt_buffer_overflow_detection.cpp","additions":43,"deletions":1,"binary":false,"changes":44,"status":"modified"}]}