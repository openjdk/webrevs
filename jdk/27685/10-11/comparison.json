{"files":[{"patch":"@@ -118,21 +118,0 @@\n-\/\/ In non-ASAN builds we use 'void' as template parameter, to let\n-\/\/ the AsanPoisoningHelper instances be compiled to nothing\n-template<>\n-class AsanPoisoningHelper<void> {\n- public:\n-  AsanPoisoningHelper() = delete;\n-  AsanPoisoningHelper(void* addr) { }\n-  static void poison_memory(void* addr) { }\n-  static void unpoison_memory(void* addr) { }\n-  ~AsanPoisoningHelper() { }\n-};\n-\n-#ifdef INCLUDE_ASAN\n-  using CanaryType = uint16_t;\n-  using SizeType = size_t;\n-  NOT_LP64(using AltCanaryType = uint32_t;)\n-#else\n-  using CanaryType = void;\n-  using SizeType = void;\n-  NOT_LP64(using AltCanaryType = void;)\n-#endif\n@@ -164,1 +143,1 @@\n-    AsanPoisoningHelper<CanaryType> _temp(reinterpret_cast<CanaryType*>(footer_address()));\n+    AsanPoisoningHelper<CanaryType, uint8_t> _temp(footer_address());\n@@ -169,1 +148,1 @@\n-    AsanPoisoningHelper<CanaryType> _temp(reinterpret_cast<CanaryType*>(footer_address()));\n+    AsanPoisoningHelper<CanaryType, uint8_t> _temp(footer_address());\n@@ -177,0 +156,3 @@\n+  using CanaryType = uint16_t;\n+  using SizeType = size_t;\n+  NOT_LP64(using AltCanaryType = uint32_t;)\n@@ -190,1 +172,1 @@\n-      AsanPoisoningHelper<CanaryType>::poison_memory(reinterpret_cast<CanaryType*>(footer_address()));\n+      AsanPoisoningHelper<CanaryType, uint8_t>::poison_memory(footer_address());\n@@ -195,1 +177,1 @@\n-      AsanPoisoningHelper<CanaryType>::unpoison_memory(reinterpret_cast<CanaryType*>(footer_address()));\n+      AsanPoisoningHelper<CanaryType, uint8_t>::unpoison_memory(footer_address());\n","filename":"src\/hotspot\/share\/nmt\/mallocHeader.hpp","additions":7,"deletions":25,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+#include \"testutils.hpp\"\n+#include \"unittest.hpp\"\n@@ -31,2 +33,0 @@\n-#include \"unittest.hpp\"\n-#include \"testutils.hpp\"\n@@ -166,5 +166,3 @@\n-#else\n-#if __has_feature(address_sanitizer) || defined(__SANITIZE_ADDRESS__)\n-#else\n-#error \"No ASAN\"\n-#endif\n+\n+#else \/\/ ASAN is enabled\n+\n@@ -202,1 +200,1 @@\n-  CanaryType* canary_ptr = (CanaryType*)((char*)p - sizeof(CanaryType));\n+  MallocHeader::CanaryType* canary_ptr = (MallocHeader::CanaryType*)((char*)p - sizeof(MallocHeader::CanaryType));\n@@ -209,2 +207,2 @@\n-  CanaryType* canary_ptr = (CanaryType*)((char*)p - sizeof(CanaryType));\n-  CanaryType read_canary = 0;\n+  MallocHeader::CanaryType* canary_ptr = (MallocHeader::CanaryType*)((char*)p - sizeof(MallocHeader::CanaryType));\n+  MallocHeader::CanaryType read_canary = 0;\n@@ -218,1 +216,1 @@\n-  CanaryType* footer_ptr = (CanaryType*)(mh->footer_address());\n+  MallocHeader::CanaryType* footer_ptr = (MallocHeader::CanaryType*)(mh->footer_address());\n@@ -226,2 +224,2 @@\n-  CanaryType* footer_ptr = (CanaryType*)(mh->footer_address());\n-  CanaryType read_footer = *footer_ptr;\n+  MallocHeader::CanaryType* footer_ptr = (MallocHeader::CanaryType*)(mh->footer_address());\n+  MallocHeader::CanaryType read_footer = *footer_ptr;\n@@ -234,1 +232,1 @@\n-  size_t* size_ptr = (size_t*)(mh);\n+  size_t* size_ptr = (size_t*)(mh NOT_LP64(+ sizeof(uint32_t)));\n@@ -242,1 +240,1 @@\n-  size_t* size_ptr = (size_t*)(mh);\n+  size_t* size_ptr = (size_t*)(mh NOT_LP64(+ sizeof(uint32_t)));\n@@ -250,1 +248,1 @@\n-  CanaryType* canary_ptr = (CanaryType*)((char*)p - sizeof(CanaryType));\n+  MallocHeader::CanaryType* canary_ptr = (MallocHeader::CanaryType*)((char*)p - sizeof(MallocHeader::CanaryType));\n@@ -258,2 +256,2 @@\n-  CanaryType* canary_ptr = (CanaryType*)((char*)p - sizeof(CanaryType));\n-  CanaryType read_canary = 0;\n+  MallocHeader::CanaryType* canary_ptr = (MallocHeader::CanaryType*)((char*)p - sizeof(MallocHeader::CanaryType));\n+  MallocHeader::CanaryType read_canary = 0;\n@@ -268,1 +266,1 @@\n-  CanaryType* footer_ptr = (CanaryType*)(mh->footer_address());\n+  MallocHeader::CanaryType* footer_ptr = (MallocHeader::CanaryType*)(mh->footer_address());\n@@ -277,2 +275,2 @@\n-  CanaryType* footer_ptr = (CanaryType*)(mh->footer_address());\n-  CanaryType read_footer = *footer_ptr;\n+  MallocHeader::CanaryType* footer_ptr = (MallocHeader::CanaryType*)(mh->footer_address());\n+  MallocHeader::CanaryType read_footer = *footer_ptr;\n@@ -286,1 +284,1 @@\n-  size_t* size_ptr = (size_t*)(mh);\n+  size_t* size_ptr = (size_t*)(mh NOT_LP64(+ sizeof(uint32_t)));\n@@ -295,1 +293,1 @@\n-  size_t* size_ptr = (size_t*)(mh);\n+  size_t* size_ptr = (size_t*)(mh NOT_LP64(+ sizeof(uint32_t)));\n@@ -321,11 +319,0 @@\n-TEST_VM(NMT_ASAN, test_poison_when_no_asan) {\n-  uint16_t a;\n-  {\n-    AsanPoisoningHelper<void> pm((char*)&a);\n-    a = 2;\n-    EXPECT_EQ(a, 2);\n-  }\n-  a = 3;\n-  EXPECT_EQ(a, 3);\n-}\n-\n@@ -336,1 +323,1 @@\n-    AsanPoisoningHelper<uint16_t> pm(&a);\n+    AsanPoisoningHelper<uint16_t> aph(&a);\n@@ -341,0 +328,1 @@\n+\n","filename":"test\/hotspot\/gtest\/nmt\/test_nmt_buffer_overflow_detection.cpp","additions":23,"deletions":35,"binary":false,"changes":58,"status":"modified"}]}