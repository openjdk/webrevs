{"files":[{"patch":"@@ -1905,1 +1905,1 @@\n-                printerParser.format(context, (StringBuilder) appendable);\n+                printerParser.format(context, (StringBuilder) appendable, false);\n@@ -1909,1 +1909,1 @@\n-                printerParser.format(context, buf);\n+                printerParser.format(context, buf, false);\n","filename":"src\/java.base\/share\/classes\/java\/time\/format\/DateTimeFormatter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -907,1 +907,1 @@\n-        appendInternal(new InstantPrinterParser(-2, false));\n+        appendInternal(new InstantPrinterParser(-2));\n@@ -951,1 +951,1 @@\n-        appendInternal(new InstantPrinterParser(fractionalDigits, false));\n+        appendInternal(new InstantPrinterParser(fractionalDigits));\n@@ -1079,1 +1079,1 @@\n-        appendInternal(new LocalizedOffsetIdPrinterParser(style, false));\n+        appendInternal(new LocalizedOffsetIdPrinterParser(style));\n@@ -1131,1 +1131,1 @@\n-        appendInternal(new ZoneIdPrinterParser(TemporalQueries.zoneId(), \"ZoneId()\", false));\n+        appendInternal(new ZoneIdPrinterParser(TemporalQueries.zoneId(), \"ZoneId()\"));\n@@ -1186,1 +1186,1 @@\n-        appendInternal(new ZoneIdPrinterParser(QUERY_REGION_ONLY, \"ZoneRegionId()\", false));\n+        appendInternal(new ZoneIdPrinterParser(QUERY_REGION_ONLY, \"ZoneRegionId()\"));\n@@ -1242,1 +1242,1 @@\n-        appendInternal(new ZoneIdPrinterParser(TemporalQueries.zone(), \"ZoneOrOffsetId()\", false));\n+        appendInternal(new ZoneIdPrinterParser(TemporalQueries.zone(), \"ZoneOrOffsetId()\"));\n@@ -1279,1 +1279,1 @@\n-        appendInternal(new ZoneTextPrinterParser(textStyle, null, false, false));\n+        appendInternal(new ZoneTextPrinterParser(textStyle, null, false));\n@@ -1323,1 +1323,1 @@\n-        appendInternal(new ZoneTextPrinterParser(textStyle, preferredZones, false, false));\n+        appendInternal(new ZoneTextPrinterParser(textStyle, preferredZones, false));\n@@ -1361,1 +1361,1 @@\n-        appendInternal(new ZoneTextPrinterParser(textStyle, null, true, false));\n+        appendInternal(new ZoneTextPrinterParser(textStyle, null, true));\n@@ -1388,1 +1388,1 @@\n-        appendInternal(new ZoneTextPrinterParser(textStyle, preferredZones, true, false));\n+        appendInternal(new ZoneTextPrinterParser(textStyle, preferredZones, true));\n@@ -1413,1 +1413,1 @@\n-        appendInternal(new ChronoPrinterParser(null, false));\n+        appendInternal(new ChronoPrinterParser(null));\n@@ -1428,1 +1428,1 @@\n-        appendInternal(new ChronoPrinterParser(textStyle, false));\n+        appendInternal(new ChronoPrinterParser(textStyle));\n@@ -1635,1 +1635,1 @@\n-        appendInternal(new DayPeriodPrinterParser(style, false));\n+        appendInternal(new DayPeriodPrinterParser(style));\n@@ -2479,0 +2479,1 @@\n+         * @param optional  whether this printer is optional, true if formatting is optional\n@@ -2482,1 +2483,1 @@\n-        boolean format(DateTimePrintContext context, StringBuilder buf);\n+        boolean format(DateTimePrintContext context, StringBuilder buf, boolean optional);\n@@ -2499,9 +2500,0 @@\n-\n-        \/**\n-         * Returns a copy of this printer-parser with the optional flag changed.\n-         * @param optional  the optional flag to set in the copy\n-         * @return the new printer-parser, not null\n-         *\/\n-        default DateTimePrinterParser withOptional(boolean optional) {\n-            return this;\n-        }\n@@ -2533,1 +2525,0 @@\n-        @Override\n@@ -2538,4 +2529,0 @@\n-            DateTimePrinterParser[] printerParsers = this.printerParsers.clone();\n-            for (int i = 0; i < printerParsers.length; i++) {\n-                printerParsers[i] = printerParsers[i].withOptional(optional);\n-            }\n@@ -2546,1 +2533,1 @@\n-        public boolean format(DateTimePrintContext context, StringBuilder buf) {\n+        public boolean format(DateTimePrintContext context, StringBuilder buf, boolean optional) {\n@@ -2548,0 +2535,1 @@\n+            boolean effectiveOptional = optional | this.optional;\n@@ -2549,1 +2537,1 @@\n-                if (!pp.format(context, buf)) {\n+                if (!pp.format(context, buf, effectiveOptional)) {\n@@ -2620,1 +2608,1 @@\n-        public boolean format(DateTimePrintContext context, StringBuilder buf) {\n+        public boolean format(DateTimePrintContext context, StringBuilder buf, boolean optional) {\n@@ -2622,1 +2610,1 @@\n-            if (printerParser.format(context, buf) == false) {\n+            if (printerParser.format(context, buf, optional) == false) {\n@@ -2689,1 +2677,1 @@\n-        public boolean format(DateTimePrintContext context, StringBuilder buf) {\n+        public boolean format(DateTimePrintContext context, StringBuilder buf, boolean optional) {\n@@ -2731,1 +2719,1 @@\n-        public boolean format(DateTimePrintContext context, StringBuilder buf) {\n+        public boolean format(DateTimePrintContext context, StringBuilder buf, boolean optional) {\n@@ -2757,1 +2745,1 @@\n-        public boolean format(DateTimePrintContext context, StringBuilder buf) {\n+        public boolean format(DateTimePrintContext context, StringBuilder buf, boolean optional) {\n@@ -2807,1 +2795,1 @@\n-        public boolean format(DateTimePrintContext context, StringBuilder buf) {\n+        public boolean format(DateTimePrintContext context, StringBuilder buf, boolean optional) {\n@@ -2859,1 +2847,0 @@\n-        final boolean optional;\n@@ -2876,1 +2863,0 @@\n-            this.optional = false;\n@@ -2890,15 +2876,0 @@\n-            this(field, minWidth, maxWidth, signStyle, subsequentWidth, false);\n-        }\n-\n-        \/**\n-         * Constructor.\n-         *\n-         * @param field  the field to format, not null\n-         * @param minWidth  the minimum field width, from 1 to 19\n-         * @param maxWidth  the maximum field width, from minWidth to 19\n-         * @param signStyle  the positive\/negative sign style, not null\n-         * @param subsequentWidth  the width of subsequent non-negative numbers, 0 or greater,\n-         *  -1 if fixed width due to active adjacent parsing\n-         * @param optional  true if the field is optional\n-         *\/\n-        protected NumberPrinterParser(TemporalField field, int minWidth, int maxWidth, SignStyle signStyle, int subsequentWidth, boolean optional) {\n@@ -2911,1 +2882,0 @@\n-            this.optional = optional;\n@@ -2923,8 +2893,1 @@\n-            return new NumberPrinterParser(field, minWidth, maxWidth, signStyle, -1, optional);\n-        }\n-\n-        public NumberPrinterParser withOptional(boolean optional) {\n-            if (optional == this.optional) {\n-                return this;\n-            }\n-            return new NumberPrinterParser(field, minWidth, maxWidth, signStyle, subsequentWidth, optional);\n+            return new NumberPrinterParser(field, minWidth, maxWidth, signStyle, -1);\n@@ -2940,1 +2903,1 @@\n-            return new NumberPrinterParser(field, minWidth, maxWidth, signStyle, this.subsequentWidth + subsequentWidth, optional);\n+            return new NumberPrinterParser(field, minWidth, maxWidth, signStyle, this.subsequentWidth + subsequentWidth);\n@@ -2944,1 +2907,1 @@\n-        public boolean format(DateTimePrintContext context, StringBuilder buf) {\n+        public boolean format(DateTimePrintContext context, StringBuilder buf, boolean optional) {\n@@ -3169,1 +3132,1 @@\n-            this(field, minWidth, maxWidth, baseValue, baseDate, 0, false);\n+            this(field, minWidth, maxWidth, baseValue, baseDate, 0);\n@@ -3202,2 +3165,2 @@\n-                int baseValue, ChronoLocalDate baseDate, int subsequentWidth, boolean optional) {\n-            super(field, minWidth, maxWidth, SignStyle.NOT_NEGATIVE, subsequentWidth, optional);\n+                int baseValue, ChronoLocalDate baseDate, int subsequentWidth) {\n+            super(field, minWidth, maxWidth, SignStyle.NOT_NEGATIVE, subsequentWidth);\n@@ -3208,15 +3171,0 @@\n-\n-        \/**\n-         * Returns a copy of this printer-parser with the optional flag changed.\n-         *\n-         * @param optional  the optional flag to set in the copy\n-         * @return the new printer-parser, not null\n-         *\/\n-        @Override\n-        public ReducedPrinterParser withOptional(boolean optional) {\n-            if (optional == this.optional) {\n-                return this;\n-            }\n-            return new ReducedPrinterParser(field, minWidth, maxWidth, baseValue, baseDate, subsequentWidth, optional);\n-        }\n-\n@@ -3284,1 +3232,1 @@\n-            return new ReducedPrinterParser(field, minWidth, maxWidth, baseValue, baseDate, -1, optional);\n+            return new ReducedPrinterParser(field, minWidth, maxWidth, baseValue, baseDate, -1);\n@@ -3296,1 +3244,1 @@\n-                    this.subsequentWidth + subsequentWidth, optional);\n+                    this.subsequentWidth + subsequentWidth);\n@@ -3336,1 +3284,1 @@\n-            this(minWidth, maxWidth, decimalPoint, 0, false);\n+            this(minWidth, maxWidth, decimalPoint, 0);\n@@ -3356,1 +3304,0 @@\n-         * @param optional whether to output nanos as optional\n@@ -3358,2 +3305,2 @@\n-        private NanosPrinterParser(int minWidth, int maxWidth, boolean decimalPoint, int subsequentWidth, boolean optional) {\n-            super(NANO_OF_SECOND, minWidth, maxWidth, SignStyle.NOT_NEGATIVE, subsequentWidth, optional);\n+        private NanosPrinterParser(int minWidth, int maxWidth, boolean decimalPoint, int subsequentWidth) {\n+            super(NANO_OF_SECOND, minWidth, maxWidth, SignStyle.NOT_NEGATIVE, subsequentWidth);\n@@ -3373,1 +3320,1 @@\n-            return new NanosPrinterParser(minWidth, maxWidth, decimalPoint, -1, optional);\n+            return new NanosPrinterParser(minWidth, maxWidth, decimalPoint, -1);\n@@ -3384,15 +3331,1 @@\n-            return new NanosPrinterParser(minWidth, maxWidth, decimalPoint, this.subsequentWidth + subsequentWidth, optional);\n-        }\n-\n-        \/**\n-         * Returns a copy of this printer-parser with the optional flag changed.\n-         *\n-         * @param optional  the optional flag to set in the copy\n-         * @return the new printer-parser, not null\n-         *\/\n-        @Override\n-        public NanosPrinterParser withOptional(boolean optional) {\n-            if (optional == this.optional) {\n-                return this;\n-            }\n-            return new NanosPrinterParser(minWidth, maxWidth, decimalPoint, subsequentWidth, optional);\n+            return new NanosPrinterParser(minWidth, maxWidth, decimalPoint, this.subsequentWidth + subsequentWidth);\n@@ -3429,1 +3362,1 @@\n-        public boolean format(DateTimePrintContext context, StringBuilder buf) {\n+        public boolean format(DateTimePrintContext context, StringBuilder buf, boolean optional) {\n@@ -3544,1 +3477,1 @@\n-            this(field, minWidth, maxWidth, decimalPoint, 0, false);\n+            this(field, minWidth, maxWidth, decimalPoint, 0);\n@@ -3569,1 +3502,0 @@\n-         * @param optional  whether the field is optional\n@@ -3571,2 +3503,2 @@\n-        private FractionPrinterParser(TemporalField field, int minWidth, int maxWidth, boolean decimalPoint, int subsequentWidth, boolean optional) {\n-            super(field, minWidth, maxWidth, SignStyle.NOT_NEGATIVE, subsequentWidth, optional);\n+        private FractionPrinterParser(TemporalField field, int minWidth, int maxWidth, boolean decimalPoint, int subsequentWidth) {\n+            super(field, minWidth, maxWidth, SignStyle.NOT_NEGATIVE, subsequentWidth);\n@@ -3589,16 +3521,1 @@\n-            return new FractionPrinterParser(field, minWidth, maxWidth, decimalPoint, -1, optional);\n-        }\n-\n-\n-        \/**\n-         * Returns a copy of this printer-parser with the optional flag changed.\n-         *\n-         * @param optional  the optional flag to set in the copy\n-         * @return the new printer-parser, not null\n-         *\/\n-        @Override\n-        public FractionPrinterParser withOptional(boolean optional) {\n-            if (optional == this.optional) {\n-                return this;\n-            }\n-            return new FractionPrinterParser(field, minWidth, maxWidth, decimalPoint, subsequentWidth, optional);\n+            return new FractionPrinterParser(field, minWidth, maxWidth, decimalPoint, -1);\n@@ -3615,1 +3532,1 @@\n-            return new FractionPrinterParser(field, minWidth, maxWidth, decimalPoint, this.subsequentWidth + subsequentWidth, optional);\n+            return new FractionPrinterParser(field, minWidth, maxWidth, decimalPoint, this.subsequentWidth + subsequentWidth);\n@@ -3634,1 +3551,1 @@\n-        public boolean format(DateTimePrintContext context, StringBuilder buf) {\n+        public boolean format(DateTimePrintContext context, StringBuilder buf, boolean optional) {\n@@ -3761,1 +3678,0 @@\n-        private final boolean optional;\n@@ -3776,12 +3692,0 @@\n-            this(field, textStyle, provider, false);\n-        }\n-\n-        \/**\n-         * Constructor.\n-         *\n-         * @param field  the field to output, not null\n-         * @param textStyle  the text style, not null\n-         * @param provider  the text provider, not null\n-         * @param optional  true if optional\n-         *\/\n-        private TextPrinterParser(TemporalField field, TextStyle textStyle, DateTimeTextProvider provider, boolean optional) {\n@@ -3792,1 +3696,0 @@\n-            this.optional = optional;\n@@ -3796,1 +3699,1 @@\n-        public boolean format(DateTimePrintContext context, StringBuilder buf) {\n+        public boolean format(DateTimePrintContext context, StringBuilder buf, boolean optional) {\n@@ -3809,1 +3712,1 @@\n-                return numberPrinterParser().format(context, buf);\n+                return numberPrinterParser().format(context, buf, optional);\n@@ -3885,1 +3788,0 @@\n-        private final boolean optional;\n@@ -3887,1 +3789,1 @@\n-        private InstantPrinterParser(int fractionalDigits, boolean optional) {\n+        private InstantPrinterParser(int fractionalDigits) {\n@@ -3889,15 +3791,0 @@\n-            this.optional = optional;\n-        }\n-\n-        \/**\n-         * Returns a copy of this printer-parser with the optional flag changed.\n-         *\n-         * @param optional  the optional flag to set in the copy\n-         * @return the new printer-parser, not null\n-         *\/\n-        @Override\n-        public InstantPrinterParser withOptional(boolean optional) {\n-            if (optional == this.optional) {\n-                return this;\n-            }\n-            return new InstantPrinterParser(fractionalDigits, optional);\n@@ -3907,1 +3794,1 @@\n-        public boolean format(DateTimePrintContext context, StringBuilder buf) {\n+        public boolean format(DateTimePrintContext context, StringBuilder buf, boolean optional) {\n@@ -4059,1 +3946,0 @@\n-        private final boolean optional;\n@@ -4073,22 +3959,0 @@\n-            this.optional = false;\n-        }\n-\n-        private OffsetIdPrinterParser(int type, String noOffsetText, boolean optional) {\n-            this.type = type;\n-            this.style = type % 11;\n-            this.noOffsetText = noOffsetText;\n-            this.optional = optional;\n-        }\n-\n-        \/**\n-         * Returns a copy of this printer-parser with the optional flag changed.\n-         *\n-         * @param optional  the optional flag to set in the copy\n-         * @return the new printer-parser, not null\n-         *\/\n-        @Override\n-        public OffsetIdPrinterParser withOptional(boolean optional) {\n-            if (optional == this.optional) {\n-                return this;\n-            }\n-            return new OffsetIdPrinterParser(type, noOffsetText, optional);\n@@ -4115,1 +3979,1 @@\n-        public boolean format(DateTimePrintContext context, StringBuilder buf) {\n+        public boolean format(DateTimePrintContext context, StringBuilder buf, boolean optional) {\n@@ -4398,1 +4262,0 @@\n-        private final boolean optional;\n@@ -4404,1 +4267,0 @@\n-         * @param optional  whether the offset is optional\n@@ -4406,1 +4268,1 @@\n-        LocalizedOffsetIdPrinterParser(TextStyle style, boolean optional) {\n+        LocalizedOffsetIdPrinterParser(TextStyle style) {\n@@ -4408,15 +4270,0 @@\n-            this.optional = optional;\n-        }\n-\n-        \/**\n-         * Returns a copy of this printer-parser with the optional flag changed.\n-         *\n-         * @param optional  the optional flag to set in the copy\n-         * @return the new printer-parser, not null\n-         *\/\n-        @Override\n-        public LocalizedOffsetIdPrinterParser withOptional(boolean optional) {\n-            if (optional == this.optional) {\n-                return this;\n-            }\n-            return new LocalizedOffsetIdPrinterParser(style, optional);\n@@ -4431,1 +4278,1 @@\n-        public boolean format(DateTimePrintContext context, StringBuilder buf) {\n+        public boolean format(DateTimePrintContext context, StringBuilder buf, boolean optional) {\n@@ -4584,1 +4431,1 @@\n-        private final Set<String> preferredZones;\n+        private Set<String> preferredZones;\n@@ -4588,22 +4435,3 @@\n-        private final boolean optional;\n-\n-        private ZoneTextPrinterParser(TextStyle textStyle, Set<ZoneId> preferredZones, boolean isGeneric, boolean optional) {\n-           this(zoneIdMap(preferredZones), textStyle, isGeneric, optional);\n-        }\n-\n-        private static Set<String> zoneIdMap(Set<ZoneId> preferredZones) {\n-            if (preferredZones == null || preferredZones.isEmpty()) {\n-                return null;\n-            }\n-            Set<String> set = new HashSet<>();\n-            for (ZoneId id : preferredZones) {\n-                set.add(id.getId());\n-            }\n-\n-            return set;\n-        }\n-\n-        public ZoneTextPrinterParser(Set<String> preferredZones, TextStyle textStyle, boolean isGeneric, boolean optional) {\n-            super(TemporalQueries.zone(), \"ZoneText(\" + textStyle + \")\", optional);\n-            this.textStyle = textStyle;\n-            this.preferredZones = preferredZones;\n+        private ZoneTextPrinterParser(TextStyle textStyle, Set<ZoneId> preferredZones, boolean isGeneric) {\n+            super(TemporalQueries.zone(), \"ZoneText(\" + textStyle + \")\");\n+            this.textStyle = Objects.requireNonNull(textStyle, \"textStyle\");\n@@ -4611,13 +4439,5 @@\n-            this.optional = optional;\n-        }\n-\n-        \/**\n-         * Returns a copy of this printer-parser with the optional flag changed.\n-         *\n-         * @param optional  the optional flag to set in the copy\n-         * @return the new printer-parser, not null\n-         *\/\n-        @Override\n-        public ZoneTextPrinterParser withOptional(boolean optional) {\n-            if (optional == this.optional) {\n-                return this;\n+            if (preferredZones != null && preferredZones.size() != 0) {\n+                this.preferredZones = new HashSet<>();\n+                for (ZoneId id : preferredZones) {\n+                    this.preferredZones.add(id.getId());\n+                }\n@@ -4625,1 +4445,0 @@\n-            return new ZoneTextPrinterParser(preferredZones, textStyle, isGeneric, optional);\n@@ -4673,1 +4492,1 @@\n-        public boolean format(DateTimePrintContext context, StringBuilder buf) {\n+        public boolean format(DateTimePrintContext context, StringBuilder buf, boolean optional) {\n@@ -4788,1 +4607,0 @@\n-        private final boolean optional;\n@@ -4790,1 +4608,1 @@\n-        private ZoneIdPrinterParser(TemporalQuery<ZoneId> query, String description, boolean optional) {\n+        private ZoneIdPrinterParser(TemporalQuery<ZoneId> query, String description) {\n@@ -4793,1 +4611,0 @@\n-            this.optional = optional;\n@@ -4796,6 +4613,0 @@\n-        \/**\n-         * Returns a copy of this printer-parser with the optional flag changed.\n-         *\n-         * @param optional  the optional flag to set in the copy\n-         * @return the new printer-parser, not null\n-         *\/\n@@ -4803,9 +4614,1 @@\n-        public ZoneIdPrinterParser withOptional(boolean optional) {\n-            if (optional == this.optional) {\n-                return this;\n-            }\n-            return new ZoneIdPrinterParser(query, description, optional);\n-        }\n-\n-        @Override\n-        public boolean format(DateTimePrintContext context, StringBuilder buf) {\n+        public boolean format(DateTimePrintContext context, StringBuilder buf, boolean optional) {\n@@ -5229,1 +5032,0 @@\n-        private final boolean optional;\n@@ -5231,1 +5033,1 @@\n-        private ChronoPrinterParser(TextStyle textStyle, boolean optional) {\n+        private ChronoPrinterParser(TextStyle textStyle) {\n@@ -5234,1 +5036,0 @@\n-            this.optional = optional;\n@@ -5237,7 +5038,0 @@\n-\n-        \/**\n-         * Returns a copy of this printer-parser with the optional flag changed.\n-         *\n-         * @param optional  the optional flag to set in the copy\n-         * @return the new printer-parser, not null\n-         *\/\n@@ -5245,9 +5039,1 @@\n-        public ChronoPrinterParser withOptional(boolean optional) {\n-            if (optional == this.optional) {\n-                return this;\n-            }\n-            return new ChronoPrinterParser(textStyle, optional);\n-        }\n-\n-        @Override\n-        public boolean format(DateTimePrintContext context, StringBuilder buf) {\n+        public boolean format(DateTimePrintContext context, StringBuilder buf, boolean optional) {\n@@ -5350,1 +5136,1 @@\n-        public boolean format(DateTimePrintContext context, StringBuilder buf) {\n+        public boolean format(DateTimePrintContext context, StringBuilder buf, boolean optional) {\n@@ -5352,1 +5138,1 @@\n-            return formatter(context.getLocale(), chrono).toPrinterParser(false).format(context, buf);\n+            return formatter(context.getLocale(), chrono).toPrinterParser(false).format(context, buf, optional);\n@@ -5415,1 +5201,1 @@\n-            this(chr, count, minWidth, maxWidth, 0, false);\n+            this(chr, count, minWidth, maxWidth, 0);\n@@ -5427,1 +5213,0 @@\n-         * @param optional  true if optional\n@@ -5430,2 +5215,2 @@\n-                int subsequentWidth, boolean optional) {\n-            super(null, minWidth, maxWidth, SignStyle.NOT_NEGATIVE, subsequentWidth, optional);\n+                int subsequentWidth) {\n+            super(null, minWidth, maxWidth, SignStyle.NOT_NEGATIVE, subsequentWidth);\n@@ -5446,1 +5231,1 @@\n-            return new WeekBasedFieldPrinterParser(chr, count, minWidth, maxWidth, -1, optional);\n+            return new WeekBasedFieldPrinterParser(chr, count, minWidth, maxWidth, -1);\n@@ -5458,16 +5243,1 @@\n-                    this.subsequentWidth + subsequentWidth, optional);\n-        }\n-\n-\n-        \/**\n-         * Returns a copy of this printer-parser with the optional flag changed.\n-         *\n-         * @param optional  the optional flag to set in the copy\n-         * @return the new printer-parser, not null\n-         *\/\n-        @Override\n-        public WeekBasedFieldPrinterParser withOptional(boolean optional) {\n-            if (optional == this.optional) {\n-                return this;\n-            }\n-            return new WeekBasedFieldPrinterParser(chr, count, minWidth, maxWidth, subsequentWidth, optional);\n+                    this.subsequentWidth + subsequentWidth);\n@@ -5477,2 +5247,2 @@\n-        public boolean format(DateTimePrintContext context, StringBuilder buf) {\n-            return printerParser(context.getLocale()).format(context, buf);\n+        public boolean format(DateTimePrintContext context, StringBuilder buf, boolean optional) {\n+            return printerParser(context.getLocale()).format(context, buf, optional);\n@@ -5501,1 +5271,1 @@\n-                                this.subsequentWidth, optional);\n+                                this.subsequentWidth);\n@@ -5505,1 +5275,1 @@\n-                                this.subsequentWidth, optional);\n+                                this.subsequentWidth);\n@@ -5568,1 +5338,0 @@\n-        private final boolean optional;\n@@ -5575,1 +5344,0 @@\n-         * @param optional  true if optional\n@@ -5577,1 +5345,1 @@\n-        private DayPeriodPrinterParser(TextStyle textStyle, boolean optional) {\n+        private DayPeriodPrinterParser(TextStyle textStyle) {\n@@ -5580,8 +5348,0 @@\n-            this.optional = optional;\n-        }\n-\n-        public DayPeriodPrinterParser withOptional(boolean optional) {\n-            if (optional == this.optional) {\n-                return this;\n-            }\n-            return new DayPeriodPrinterParser(textStyle, optional);\n@@ -5591,1 +5351,1 @@\n-        public boolean format(DateTimePrintContext context, StringBuilder buf) {\n+        public boolean format(DateTimePrintContext context, StringBuilder buf, boolean optional) {\n","filename":"src\/java.base\/share\/classes\/java\/time\/format\/DateTimeFormatterBuilder.java","additions":78,"deletions":318,"binary":false,"changes":396,"status":"modified"}]}