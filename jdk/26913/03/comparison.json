{"files":[{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2025, Alibaba Group Holding Limited. All Rights Reserved.\n@@ -906,1 +907,1 @@\n-        appendInternal(new InstantPrinterParser(-2));\n+        appendInternal(new InstantPrinterParser(-2, false));\n@@ -950,1 +951,1 @@\n-        appendInternal(new InstantPrinterParser(fractionalDigits));\n+        appendInternal(new InstantPrinterParser(fractionalDigits, false));\n@@ -1078,1 +1079,1 @@\n-        appendInternal(new LocalizedOffsetIdPrinterParser(style));\n+        appendInternal(new LocalizedOffsetIdPrinterParser(style, false));\n@@ -1130,1 +1131,1 @@\n-        appendInternal(new ZoneIdPrinterParser(TemporalQueries.zoneId(), \"ZoneId()\"));\n+        appendInternal(new ZoneIdPrinterParser(TemporalQueries.zoneId(), \"ZoneId()\", false));\n@@ -1185,1 +1186,1 @@\n-        appendInternal(new ZoneIdPrinterParser(QUERY_REGION_ONLY, \"ZoneRegionId()\"));\n+        appendInternal(new ZoneIdPrinterParser(QUERY_REGION_ONLY, \"ZoneRegionId()\", false));\n@@ -1241,1 +1242,1 @@\n-        appendInternal(new ZoneIdPrinterParser(TemporalQueries.zone(), \"ZoneOrOffsetId()\"));\n+        appendInternal(new ZoneIdPrinterParser(TemporalQueries.zone(), \"ZoneOrOffsetId()\", false));\n@@ -1278,1 +1279,1 @@\n-        appendInternal(new ZoneTextPrinterParser(textStyle, null, false));\n+        appendInternal(new ZoneTextPrinterParser(textStyle, null, false, false));\n@@ -1322,1 +1323,1 @@\n-        appendInternal(new ZoneTextPrinterParser(textStyle, preferredZones, false));\n+        appendInternal(new ZoneTextPrinterParser(textStyle, preferredZones, false, false));\n@@ -1360,1 +1361,1 @@\n-        appendInternal(new ZoneTextPrinterParser(textStyle, null, true));\n+        appendInternal(new ZoneTextPrinterParser(textStyle, null, true, false));\n@@ -1387,1 +1388,1 @@\n-        appendInternal(new ZoneTextPrinterParser(textStyle, preferredZones, true));\n+        appendInternal(new ZoneTextPrinterParser(textStyle, preferredZones, true, false));\n@@ -1412,1 +1413,1 @@\n-        appendInternal(new ChronoPrinterParser(null));\n+        appendInternal(new ChronoPrinterParser(null, false));\n@@ -1427,1 +1428,1 @@\n-        appendInternal(new ChronoPrinterParser(textStyle));\n+        appendInternal(new ChronoPrinterParser(textStyle, false));\n@@ -1634,1 +1635,1 @@\n-        appendInternal(new DayPeriodPrinterParser(style));\n+        appendInternal(new DayPeriodPrinterParser(style, false));\n@@ -2498,0 +2499,9 @@\n+\n+        \/**\n+         * Returns a copy of this printer-parser with the optional flag changed.\n+         * @param optional  the optional flag to set in the copy\n+         * @return the new printer-parser, not null\n+         *\/\n+        default DateTimePrinterParser withOptional(boolean optional) {\n+            return this;\n+        }\n@@ -2523,0 +2533,1 @@\n+        @Override\n@@ -2527,0 +2538,4 @@\n+            DateTimePrinterParser[] printerParsers = this.printerParsers.clone();\n+            for (int i = 0; i < printerParsers.length; i++) {\n+                printerParsers[i] = printerParsers[i].withOptional(optional);\n+            }\n@@ -2533,13 +2548,4 @@\n-            if (optional) {\n-                context.startOptional();\n-            }\n-            try {\n-                for (DateTimePrinterParser pp : printerParsers) {\n-                    if (pp.format(context, buf) == false) {\n-                        buf.setLength(length);  \/\/ reset buffer\n-                        return true;\n-                    }\n-                }\n-            } finally {\n-                if (optional) {\n-                    context.endOptional();\n+            for (DateTimePrinterParser pp : printerParsers) {\n+                if (!pp.format(context, buf)) {\n+                    buf.setLength(length);  \/\/ reset buffer\n+                    return true;\n@@ -2853,0 +2859,1 @@\n+        final boolean optional;\n@@ -2869,0 +2876,1 @@\n+            this.optional = false;\n@@ -2882,0 +2890,15 @@\n+            this(field, minWidth, maxWidth, signStyle, subsequentWidth, false);\n+        }\n+\n+        \/**\n+         * Constructor.\n+         *\n+         * @param field  the field to format, not null\n+         * @param minWidth  the minimum field width, from 1 to 19\n+         * @param maxWidth  the maximum field width, from minWidth to 19\n+         * @param signStyle  the positive\/negative sign style, not null\n+         * @param subsequentWidth  the width of subsequent non-negative numbers, 0 or greater,\n+         *  -1 if fixed width due to active adjacent parsing\n+         * @param optional  true if the field is optional\n+         *\/\n+        protected NumberPrinterParser(TemporalField field, int minWidth, int maxWidth, SignStyle signStyle, int subsequentWidth, boolean optional) {\n@@ -2888,0 +2911,1 @@\n+            this.optional = optional;\n@@ -2899,1 +2923,8 @@\n-            return new NumberPrinterParser(field, minWidth, maxWidth, signStyle, -1);\n+            return new NumberPrinterParser(field, minWidth, maxWidth, signStyle, -1, optional);\n+        }\n+\n+        public NumberPrinterParser withOptional(boolean optional) {\n+            if (optional == this.optional) {\n+                return this;\n+            }\n+            return new NumberPrinterParser(field, minWidth, maxWidth, signStyle, subsequentWidth, optional);\n@@ -2909,1 +2940,1 @@\n-            return new NumberPrinterParser(field, minWidth, maxWidth, signStyle, this.subsequentWidth + subsequentWidth);\n+            return new NumberPrinterParser(field, minWidth, maxWidth, signStyle, this.subsequentWidth + subsequentWidth, optional);\n@@ -2914,1 +2945,1 @@\n-            Long valueLong = context.getValue(field);\n+            Long valueLong = context.getValue(field, optional);\n@@ -3138,1 +3169,1 @@\n-            this(field, minWidth, maxWidth, baseValue, baseDate, 0);\n+            this(field, minWidth, maxWidth, baseValue, baseDate, 0, false);\n@@ -3171,2 +3202,2 @@\n-                int baseValue, ChronoLocalDate baseDate, int subsequentWidth) {\n-            super(field, minWidth, maxWidth, SignStyle.NOT_NEGATIVE, subsequentWidth);\n+                int baseValue, ChronoLocalDate baseDate, int subsequentWidth, boolean optional) {\n+            super(field, minWidth, maxWidth, SignStyle.NOT_NEGATIVE, subsequentWidth, optional);\n@@ -3177,0 +3208,15 @@\n+\n+        \/**\n+         * Returns a copy of this printer-parser with the optional flag changed.\n+         *\n+         * @param optional  the optional flag to set in the copy\n+         * @return the new printer-parser, not null\n+         *\/\n+        @Override\n+        public ReducedPrinterParser withOptional(boolean optional) {\n+            if (optional == this.optional) {\n+                return this;\n+            }\n+            return new ReducedPrinterParser(field, minWidth, maxWidth, baseValue, baseDate, subsequentWidth, optional);\n+        }\n+\n@@ -3238,1 +3284,1 @@\n-            return new ReducedPrinterParser(field, minWidth, maxWidth, baseValue, baseDate, -1);\n+            return new ReducedPrinterParser(field, minWidth, maxWidth, baseValue, baseDate, -1, optional);\n@@ -3250,1 +3296,1 @@\n-                    this.subsequentWidth + subsequentWidth);\n+                    this.subsequentWidth + subsequentWidth, optional);\n@@ -3290,1 +3336,1 @@\n-            this(minWidth, maxWidth, decimalPoint, 0);\n+            this(minWidth, maxWidth, decimalPoint, 0, false);\n@@ -3310,0 +3356,1 @@\n+         * @param optional whether to output nanos as optional\n@@ -3311,2 +3358,2 @@\n-        private NanosPrinterParser(int minWidth, int maxWidth, boolean decimalPoint, int subsequentWidth) {\n-            super(NANO_OF_SECOND, minWidth, maxWidth, SignStyle.NOT_NEGATIVE, subsequentWidth);\n+        private NanosPrinterParser(int minWidth, int maxWidth, boolean decimalPoint, int subsequentWidth, boolean optional) {\n+            super(NANO_OF_SECOND, minWidth, maxWidth, SignStyle.NOT_NEGATIVE, subsequentWidth, optional);\n@@ -3326,1 +3373,1 @@\n-            return new NanosPrinterParser(minWidth, maxWidth, decimalPoint, -1);\n+            return new NanosPrinterParser(minWidth, maxWidth, decimalPoint, -1, optional);\n@@ -3337,1 +3384,15 @@\n-            return new NanosPrinterParser(minWidth, maxWidth, decimalPoint, this.subsequentWidth + subsequentWidth);\n+            return new NanosPrinterParser(minWidth, maxWidth, decimalPoint, this.subsequentWidth + subsequentWidth, optional);\n+        }\n+\n+        \/**\n+         * Returns a copy of this printer-parser with the optional flag changed.\n+         *\n+         * @param optional  the optional flag to set in the copy\n+         * @return the new printer-parser, not null\n+         *\/\n+        @Override\n+        public NanosPrinterParser withOptional(boolean optional) {\n+            if (optional == this.optional) {\n+                return this;\n+            }\n+            return new NanosPrinterParser(minWidth, maxWidth, decimalPoint, subsequentWidth, optional);\n@@ -3369,1 +3430,1 @@\n-            Long value = context.getValue(field);\n+            Long value = context.getValue(field, optional);\n@@ -3483,1 +3544,1 @@\n-            this(field, minWidth, maxWidth, decimalPoint, 0);\n+            this(field, minWidth, maxWidth, decimalPoint, 0, false);\n@@ -3508,0 +3569,1 @@\n+         * @param optional  whether the field is optional\n@@ -3509,2 +3571,2 @@\n-        private FractionPrinterParser(TemporalField field, int minWidth, int maxWidth, boolean decimalPoint, int subsequentWidth) {\n-            super(field, minWidth, maxWidth, SignStyle.NOT_NEGATIVE, subsequentWidth);\n+        private FractionPrinterParser(TemporalField field, int minWidth, int maxWidth, boolean decimalPoint, int subsequentWidth, boolean optional) {\n+            super(field, minWidth, maxWidth, SignStyle.NOT_NEGATIVE, subsequentWidth, optional);\n@@ -3527,1 +3589,16 @@\n-            return new FractionPrinterParser(field, minWidth, maxWidth, decimalPoint, -1);\n+            return new FractionPrinterParser(field, minWidth, maxWidth, decimalPoint, -1, optional);\n+        }\n+\n+\n+        \/**\n+         * Returns a copy of this printer-parser with the optional flag changed.\n+         *\n+         * @param optional  the optional flag to set in the copy\n+         * @return the new printer-parser, not null\n+         *\/\n+        @Override\n+        public FractionPrinterParser withOptional(boolean optional) {\n+            if (optional == this.optional) {\n+                return this;\n+            }\n+            return new FractionPrinterParser(field, minWidth, maxWidth, decimalPoint, subsequentWidth, optional);\n@@ -3538,1 +3615,1 @@\n-            return new FractionPrinterParser(field, minWidth, maxWidth, decimalPoint, this.subsequentWidth + subsequentWidth);\n+            return new FractionPrinterParser(field, minWidth, maxWidth, decimalPoint, this.subsequentWidth + subsequentWidth, optional);\n@@ -3558,1 +3635,1 @@\n-            Long value = context.getValue(field);\n+            Long value = context.getValue(field, optional);\n@@ -3684,0 +3761,1 @@\n+        private final boolean optional;\n@@ -3698,0 +3776,12 @@\n+            this(field, textStyle, provider, false);\n+        }\n+\n+        \/**\n+         * Constructor.\n+         *\n+         * @param field  the field to output, not null\n+         * @param textStyle  the text style, not null\n+         * @param provider  the text provider, not null\n+         * @param optional  true if optional\n+         *\/\n+        private TextPrinterParser(TemporalField field, TextStyle textStyle, DateTimeTextProvider provider, boolean optional) {\n@@ -3702,0 +3792,1 @@\n+            this.optional = optional;\n@@ -3706,1 +3797,1 @@\n-            Long value = context.getValue(field);\n+            Long value = context.getValue(field, optional);\n@@ -3794,0 +3885,1 @@\n+        private final boolean optional;\n@@ -3795,1 +3887,1 @@\n-        private InstantPrinterParser(int fractionalDigits) {\n+        private InstantPrinterParser(int fractionalDigits, boolean optional) {\n@@ -3797,0 +3889,15 @@\n+            this.optional = optional;\n+        }\n+\n+        \/**\n+         * Returns a copy of this printer-parser with the optional flag changed.\n+         *\n+         * @param optional  the optional flag to set in the copy\n+         * @return the new printer-parser, not null\n+         *\/\n+        @Override\n+        public InstantPrinterParser withOptional(boolean optional) {\n+            if (optional == this.optional) {\n+                return this;\n+            }\n+            return new InstantPrinterParser(fractionalDigits, optional);\n@@ -3802,1 +3909,1 @@\n-            Long inSecs = context.getValue(INSTANT_SECONDS);\n+            Long inSecs = context.getValue(INSTANT_SECONDS, optional);\n@@ -3952,0 +4059,1 @@\n+        private final boolean optional;\n@@ -3965,0 +4073,22 @@\n+            this.optional = false;\n+        }\n+\n+        private OffsetIdPrinterParser(int type, String noOffsetText, boolean optional) {\n+            this.type = type;\n+            this.style = type % 11;\n+            this.noOffsetText = noOffsetText;\n+            this.optional = optional;\n+        }\n+\n+        \/**\n+         * Returns a copy of this printer-parser with the optional flag changed.\n+         *\n+         * @param optional  the optional flag to set in the copy\n+         * @return the new printer-parser, not null\n+         *\/\n+        @Override\n+        public OffsetIdPrinterParser withOptional(boolean optional) {\n+            if (optional == this.optional) {\n+                return this;\n+            }\n+            return new OffsetIdPrinterParser(type, noOffsetText, optional);\n@@ -3986,1 +4116,1 @@\n-            Long offsetSecs = context.getValue(OFFSET_SECONDS);\n+            Long offsetSecs = context.getValue(OFFSET_SECONDS, optional);\n@@ -4268,0 +4398,1 @@\n+        private final boolean optional;\n@@ -4273,0 +4404,1 @@\n+         * @param optional  whether the offset is optional\n@@ -4274,1 +4406,1 @@\n-        LocalizedOffsetIdPrinterParser(TextStyle style) {\n+        LocalizedOffsetIdPrinterParser(TextStyle style, boolean optional) {\n@@ -4276,0 +4408,15 @@\n+            this.optional = optional;\n+        }\n+\n+        \/**\n+         * Returns a copy of this printer-parser with the optional flag changed.\n+         *\n+         * @param optional  the optional flag to set in the copy\n+         * @return the new printer-parser, not null\n+         *\/\n+        @Override\n+        public LocalizedOffsetIdPrinterParser withOptional(boolean optional) {\n+            if (optional == this.optional) {\n+                return this;\n+            }\n+            return new LocalizedOffsetIdPrinterParser(style, optional);\n@@ -4285,1 +4432,1 @@\n-            Long offsetSecs = context.getValue(OFFSET_SECONDS);\n+            Long offsetSecs = context.getValue(OFFSET_SECONDS, optional);\n@@ -4437,1 +4584,1 @@\n-        private Set<String> preferredZones;\n+        private final Set<String> preferredZones;\n@@ -4441,3 +4588,22 @@\n-        private ZoneTextPrinterParser(TextStyle textStyle, Set<ZoneId> preferredZones, boolean isGeneric) {\n-            super(TemporalQueries.zone(), \"ZoneText(\" + textStyle + \")\");\n-            this.textStyle = Objects.requireNonNull(textStyle, \"textStyle\");\n+        private final boolean optional;\n+\n+        private ZoneTextPrinterParser(TextStyle textStyle, Set<ZoneId> preferredZones, boolean isGeneric, boolean optional) {\n+           this(zoneIdMap(preferredZones), textStyle, isGeneric, optional);\n+        }\n+\n+        private static Set<String> zoneIdMap(Set<ZoneId> preferredZones) {\n+            if (preferredZones == null || preferredZones.isEmpty()) {\n+                return null;\n+            }\n+            Set<String> set = new HashSet<>();\n+            for (ZoneId id : preferredZones) {\n+                set.add(id.getId());\n+            }\n+\n+            return set;\n+        }\n+\n+        public ZoneTextPrinterParser(Set<String> preferredZones, TextStyle textStyle, boolean isGeneric, boolean optional) {\n+            super(TemporalQueries.zone(), \"ZoneText(\" + textStyle + \")\", optional);\n+            this.textStyle = textStyle;\n+            this.preferredZones = preferredZones;\n@@ -4445,5 +4611,13 @@\n-            if (preferredZones != null && preferredZones.size() != 0) {\n-                this.preferredZones = new HashSet<>();\n-                for (ZoneId id : preferredZones) {\n-                    this.preferredZones.add(id.getId());\n-                }\n+            this.optional = optional;\n+        }\n+\n+        \/**\n+         * Returns a copy of this printer-parser with the optional flag changed.\n+         *\n+         * @param optional  the optional flag to set in the copy\n+         * @return the new printer-parser, not null\n+         *\/\n+        @Override\n+        public ZoneTextPrinterParser withOptional(boolean optional) {\n+            if (optional == this.optional) {\n+                return this;\n@@ -4451,0 +4625,1 @@\n+            return new ZoneTextPrinterParser(preferredZones, textStyle, isGeneric, optional);\n@@ -4499,1 +4674,1 @@\n-            ZoneId zone = context.getValue(TemporalQueries.zoneId());\n+            ZoneId zone = context.getValue(TemporalQueries.zoneId(), optional);\n@@ -4613,0 +4788,1 @@\n+        private final boolean optional;\n@@ -4614,1 +4790,1 @@\n-        private ZoneIdPrinterParser(TemporalQuery<ZoneId> query, String description) {\n+        private ZoneIdPrinterParser(TemporalQuery<ZoneId> query, String description, boolean optional) {\n@@ -4617,0 +4793,15 @@\n+            this.optional = optional;\n+        }\n+\n+        \/**\n+         * Returns a copy of this printer-parser with the optional flag changed.\n+         *\n+         * @param optional  the optional flag to set in the copy\n+         * @return the new printer-parser, not null\n+         *\/\n+        @Override\n+        public ZoneIdPrinterParser withOptional(boolean optional) {\n+            if (optional == this.optional) {\n+                return this;\n+            }\n+            return new ZoneIdPrinterParser(query, description, optional);\n@@ -4621,1 +4812,1 @@\n-            ZoneId zone = context.getValue(query);\n+            ZoneId zone = context.getValue(query, optional);\n@@ -5038,0 +5229,1 @@\n+        private final boolean optional;\n@@ -5039,1 +5231,1 @@\n-        private ChronoPrinterParser(TextStyle textStyle) {\n+        private ChronoPrinterParser(TextStyle textStyle, boolean optional) {\n@@ -5042,0 +5234,16 @@\n+            this.optional = optional;\n+        }\n+\n+\n+        \/**\n+         * Returns a copy of this printer-parser with the optional flag changed.\n+         *\n+         * @param optional  the optional flag to set in the copy\n+         * @return the new printer-parser, not null\n+         *\/\n+        @Override\n+        public ChronoPrinterParser withOptional(boolean optional) {\n+            if (optional == this.optional) {\n+                return this;\n+            }\n+            return new ChronoPrinterParser(textStyle, optional);\n@@ -5046,1 +5254,1 @@\n-            Chronology chrono = context.getValue(TemporalQueries.chronology());\n+            Chronology chrono = context.getValue(TemporalQueries.chronology(), optional);\n@@ -5207,1 +5415,1 @@\n-            this(chr, count, minWidth, maxWidth, 0);\n+            this(chr, count, minWidth, maxWidth, 0, false);\n@@ -5219,0 +5427,1 @@\n+         * @param optional  true if optional\n@@ -5221,2 +5430,2 @@\n-                int subsequentWidth) {\n-            super(null, minWidth, maxWidth, SignStyle.NOT_NEGATIVE, subsequentWidth);\n+                int subsequentWidth, boolean optional) {\n+            super(null, minWidth, maxWidth, SignStyle.NOT_NEGATIVE, subsequentWidth, optional);\n@@ -5237,1 +5446,1 @@\n-            return new WeekBasedFieldPrinterParser(chr, count, minWidth, maxWidth, -1);\n+            return new WeekBasedFieldPrinterParser(chr, count, minWidth, maxWidth, -1, optional);\n@@ -5249,1 +5458,16 @@\n-                    this.subsequentWidth + subsequentWidth);\n+                    this.subsequentWidth + subsequentWidth, optional);\n+        }\n+\n+\n+        \/**\n+         * Returns a copy of this printer-parser with the optional flag changed.\n+         *\n+         * @param optional  the optional flag to set in the copy\n+         * @return the new printer-parser, not null\n+         *\/\n+        @Override\n+        public WeekBasedFieldPrinterParser withOptional(boolean optional) {\n+            if (optional == this.optional) {\n+                return this;\n+            }\n+            return new WeekBasedFieldPrinterParser(chr, count, minWidth, maxWidth, subsequentWidth, optional);\n@@ -5277,1 +5501,1 @@\n-                                this.subsequentWidth);\n+                                this.subsequentWidth, optional);\n@@ -5281,1 +5505,1 @@\n-                                this.subsequentWidth);\n+                                this.subsequentWidth, optional);\n@@ -5344,0 +5568,1 @@\n+        private final boolean optional;\n@@ -5350,0 +5575,1 @@\n+         * @param optional  true if optional\n@@ -5351,1 +5577,1 @@\n-        private DayPeriodPrinterParser(TextStyle textStyle) {\n+        private DayPeriodPrinterParser(TextStyle textStyle, boolean optional) {\n@@ -5354,0 +5580,8 @@\n+            this.optional = optional;\n+        }\n+\n+        public DayPeriodPrinterParser withOptional(boolean optional) {\n+            if (optional == this.optional) {\n+                return this;\n+            }\n+            return new DayPeriodPrinterParser(textStyle, optional);\n@@ -5358,1 +5592,1 @@\n-            Long hod = context.getValue(HOUR_OF_DAY);\n+            Long hod = context.getValue(HOUR_OF_DAY, optional);\n@@ -5362,1 +5596,1 @@\n-            Long moh = context.getValue(MINUTE_OF_HOUR);\n+            Long moh = context.getValue(MINUTE_OF_HOUR, optional);\n","filename":"src\/java.base\/share\/classes\/java\/time\/format\/DateTimeFormatterBuilder.java","additions":310,"deletions":76,"binary":false,"changes":386,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2025, Alibaba Group Holding Limited. All Rights Reserved.\n@@ -89,5 +90,0 @@\n- * @implSpec\n- * This class is a mutable context intended for use from a single thread.\n- * Usage of the class is thread-safe within standard printing as the framework creates\n- * a new instance of the class for each format and printing is single-threaded.\n- *\n@@ -106,4 +102,0 @@\n-    \/**\n-     * Whether the current formatter is optional.\n-     *\/\n-    private int optional;\n@@ -118,1 +110,0 @@\n-        super();\n@@ -351,14 +342,0 @@\n-    \/**\n-     * Starts the printing of an optional segment of the input.\n-     *\/\n-    void startOptional() {\n-        this.optional++;\n-    }\n-\n-    \/**\n-     * Ends the printing of an optional segment of the input.\n-     *\/\n-    void endOptional() {\n-        this.optional--;\n-    }\n-\n@@ -369,0 +346,1 @@\n+     * @param optional  whether the query is optional, true if the query may be missing\n@@ -372,1 +350,1 @@\n-    <R> R getValue(TemporalQuery<R> query) {\n+    <R> R getValue(TemporalQuery<R> query, boolean optional) {\n@@ -374,1 +352,1 @@\n-        if (result == null && optional == 0) {\n+        if (result == null && !optional) {\n@@ -387,0 +365,1 @@\n+     * @param optional  whether the field is optional, true if the field may be missing\n@@ -390,2 +369,2 @@\n-    Long getValue(TemporalField field) {\n-        if (optional > 0 && !temporal.isSupported(field)) {\n+    Long getValue(TemporalField field, boolean optional) {\n+        if (optional && !temporal.isSupported(field)) {\n","filename":"src\/java.base\/share\/classes\/java\/time\/format\/DateTimePrintContext.java","additions":7,"deletions":28,"binary":false,"changes":35,"status":"modified"}]}