{"files":[{"patch":"@@ -1905,1 +1905,1 @@\n-                printerParser.format(context, (StringBuilder) appendable, false);\n+                printerParser.format(context, (StringBuilder) appendable);\n@@ -1909,1 +1909,1 @@\n-                printerParser.format(context, buf, false);\n+                printerParser.format(context, buf);\n","filename":"src\/java.base\/share\/classes\/java\/time\/format\/DateTimeFormatter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -907,1 +907,1 @@\n-        appendInternal(new InstantPrinterParser(-2));\n+        appendInternal(new InstantPrinterParser(-2, false));\n@@ -951,1 +951,1 @@\n-        appendInternal(new InstantPrinterParser(fractionalDigits));\n+        appendInternal(new InstantPrinterParser(fractionalDigits, false));\n@@ -1079,1 +1079,1 @@\n-        appendInternal(new LocalizedOffsetIdPrinterParser(style));\n+        appendInternal(new LocalizedOffsetIdPrinterParser(style, false));\n@@ -1131,1 +1131,1 @@\n-        appendInternal(new ZoneIdPrinterParser(TemporalQueries.zoneId(), \"ZoneId()\"));\n+        appendInternal(new ZoneIdPrinterParser(TemporalQueries.zoneId(), \"ZoneId()\", false));\n@@ -1186,1 +1186,1 @@\n-        appendInternal(new ZoneIdPrinterParser(QUERY_REGION_ONLY, \"ZoneRegionId()\"));\n+        appendInternal(new ZoneIdPrinterParser(QUERY_REGION_ONLY, \"ZoneRegionId()\", false));\n@@ -1242,1 +1242,1 @@\n-        appendInternal(new ZoneIdPrinterParser(TemporalQueries.zone(), \"ZoneOrOffsetId()\"));\n+        appendInternal(new ZoneIdPrinterParser(TemporalQueries.zone(), \"ZoneOrOffsetId()\", false));\n@@ -1279,1 +1279,1 @@\n-        appendInternal(new ZoneTextPrinterParser(textStyle, null, false));\n+        appendInternal(new ZoneTextPrinterParser(textStyle, null, false, false));\n@@ -1323,1 +1323,1 @@\n-        appendInternal(new ZoneTextPrinterParser(textStyle, preferredZones, false));\n+        appendInternal(new ZoneTextPrinterParser(textStyle, preferredZones, false, false));\n@@ -1361,1 +1361,1 @@\n-        appendInternal(new ZoneTextPrinterParser(textStyle, null, true));\n+        appendInternal(new ZoneTextPrinterParser(textStyle, null, true, false));\n@@ -1388,1 +1388,1 @@\n-        appendInternal(new ZoneTextPrinterParser(textStyle, preferredZones, true));\n+        appendInternal(new ZoneTextPrinterParser(textStyle, preferredZones, true, false));\n@@ -1413,1 +1413,1 @@\n-        appendInternal(new ChronoPrinterParser(null));\n+        appendInternal(new ChronoPrinterParser(null, false));\n@@ -1428,1 +1428,1 @@\n-        appendInternal(new ChronoPrinterParser(textStyle));\n+        appendInternal(new ChronoPrinterParser(textStyle, false));\n@@ -1635,1 +1635,1 @@\n-        appendInternal(new DayPeriodPrinterParser(style));\n+        appendInternal(new DayPeriodPrinterParser(style, false));\n@@ -2479,1 +2479,0 @@\n-         * @param optional  whether this printer is optional, true if formatting is optional\n@@ -2483,1 +2482,1 @@\n-        boolean format(DateTimePrintContext context, StringBuilder buf, boolean optional);\n+        boolean format(DateTimePrintContext context, StringBuilder buf);\n@@ -2500,0 +2499,9 @@\n+\n+        \/**\n+         * Returns a copy of this printer-parser with the optional flag changed.\n+         * @param optional  the optional flag to set in the copy\n+         * @return the new printer-parser, not null\n+         *\/\n+        default DateTimePrinterParser withOptional(boolean optional) {\n+            return this;\n+        }\n@@ -2525,0 +2533,1 @@\n+        @Override\n@@ -2529,0 +2538,4 @@\n+            DateTimePrinterParser[] printerParsers = this.printerParsers.clone();\n+            for (int i = 0; i < printerParsers.length; i++) {\n+                printerParsers[i] = printerParsers[i].withOptional(optional);\n+            }\n@@ -2533,1 +2546,1 @@\n-        public boolean format(DateTimePrintContext context, StringBuilder buf, boolean optional) {\n+        public boolean format(DateTimePrintContext context, StringBuilder buf) {\n@@ -2535,1 +2548,0 @@\n-            boolean effectiveOptional = optional | this.optional;\n@@ -2537,1 +2549,1 @@\n-                if (!pp.format(context, buf, effectiveOptional)) {\n+                if (!pp.format(context, buf)) {\n@@ -2608,1 +2620,1 @@\n-        public boolean format(DateTimePrintContext context, StringBuilder buf, boolean optional) {\n+        public boolean format(DateTimePrintContext context, StringBuilder buf) {\n@@ -2610,1 +2622,1 @@\n-            if (printerParser.format(context, buf, optional) == false) {\n+            if (printerParser.format(context, buf) == false) {\n@@ -2677,1 +2689,1 @@\n-        public boolean format(DateTimePrintContext context, StringBuilder buf, boolean optional) {\n+        public boolean format(DateTimePrintContext context, StringBuilder buf) {\n@@ -2719,1 +2731,1 @@\n-        public boolean format(DateTimePrintContext context, StringBuilder buf, boolean optional) {\n+        public boolean format(DateTimePrintContext context, StringBuilder buf) {\n@@ -2745,1 +2757,1 @@\n-        public boolean format(DateTimePrintContext context, StringBuilder buf, boolean optional) {\n+        public boolean format(DateTimePrintContext context, StringBuilder buf) {\n@@ -2795,1 +2807,1 @@\n-        public boolean format(DateTimePrintContext context, StringBuilder buf, boolean optional) {\n+        public boolean format(DateTimePrintContext context, StringBuilder buf) {\n@@ -2847,0 +2859,1 @@\n+        final boolean optional;\n@@ -2863,0 +2876,1 @@\n+            this.optional = false;\n@@ -2876,0 +2890,15 @@\n+            this(field, minWidth, maxWidth, signStyle, subsequentWidth, false);\n+        }\n+\n+        \/**\n+         * Constructor.\n+         *\n+         * @param field  the field to format, not null\n+         * @param minWidth  the minimum field width, from 1 to 19\n+         * @param maxWidth  the maximum field width, from minWidth to 19\n+         * @param signStyle  the positive\/negative sign style, not null\n+         * @param subsequentWidth  the width of subsequent non-negative numbers, 0 or greater,\n+         *  -1 if fixed width due to active adjacent parsing\n+         * @param optional  true if the field is optional\n+         *\/\n+        protected NumberPrinterParser(TemporalField field, int minWidth, int maxWidth, SignStyle signStyle, int subsequentWidth, boolean optional) {\n@@ -2882,0 +2911,1 @@\n+            this.optional = optional;\n@@ -2893,1 +2923,8 @@\n-            return new NumberPrinterParser(field, minWidth, maxWidth, signStyle, -1);\n+            return new NumberPrinterParser(field, minWidth, maxWidth, signStyle, -1, optional);\n+        }\n+\n+        public NumberPrinterParser withOptional(boolean optional) {\n+            if (optional == this.optional) {\n+                return this;\n+            }\n+            return new NumberPrinterParser(field, minWidth, maxWidth, signStyle, subsequentWidth, optional);\n@@ -2903,1 +2940,1 @@\n-            return new NumberPrinterParser(field, minWidth, maxWidth, signStyle, this.subsequentWidth + subsequentWidth);\n+            return new NumberPrinterParser(field, minWidth, maxWidth, signStyle, this.subsequentWidth + subsequentWidth, optional);\n@@ -2907,1 +2944,1 @@\n-        public boolean format(DateTimePrintContext context, StringBuilder buf, boolean optional) {\n+        public boolean format(DateTimePrintContext context, StringBuilder buf) {\n@@ -3132,1 +3169,1 @@\n-            this(field, minWidth, maxWidth, baseValue, baseDate, 0);\n+            this(field, minWidth, maxWidth, baseValue, baseDate, 0, false);\n@@ -3165,2 +3202,2 @@\n-                int baseValue, ChronoLocalDate baseDate, int subsequentWidth) {\n-            super(field, minWidth, maxWidth, SignStyle.NOT_NEGATIVE, subsequentWidth);\n+                int baseValue, ChronoLocalDate baseDate, int subsequentWidth, boolean optional) {\n+            super(field, minWidth, maxWidth, SignStyle.NOT_NEGATIVE, subsequentWidth, optional);\n@@ -3171,0 +3208,15 @@\n+\n+        \/**\n+         * Returns a copy of this printer-parser with the optional flag changed.\n+         *\n+         * @param optional  the optional flag to set in the copy\n+         * @return the new printer-parser, not null\n+         *\/\n+        @Override\n+        public ReducedPrinterParser withOptional(boolean optional) {\n+            if (optional == this.optional) {\n+                return this;\n+            }\n+            return new ReducedPrinterParser(field, minWidth, maxWidth, baseValue, baseDate, subsequentWidth, optional);\n+        }\n+\n@@ -3232,1 +3284,1 @@\n-            return new ReducedPrinterParser(field, minWidth, maxWidth, baseValue, baseDate, -1);\n+            return new ReducedPrinterParser(field, minWidth, maxWidth, baseValue, baseDate, -1, optional);\n@@ -3244,1 +3296,1 @@\n-                    this.subsequentWidth + subsequentWidth);\n+                    this.subsequentWidth + subsequentWidth, optional);\n@@ -3284,1 +3336,1 @@\n-            this(minWidth, maxWidth, decimalPoint, 0);\n+            this(minWidth, maxWidth, decimalPoint, 0, false);\n@@ -3304,0 +3356,1 @@\n+         * @param optional whether to output nanos as optional\n@@ -3305,2 +3358,2 @@\n-        private NanosPrinterParser(int minWidth, int maxWidth, boolean decimalPoint, int subsequentWidth) {\n-            super(NANO_OF_SECOND, minWidth, maxWidth, SignStyle.NOT_NEGATIVE, subsequentWidth);\n+        private NanosPrinterParser(int minWidth, int maxWidth, boolean decimalPoint, int subsequentWidth, boolean optional) {\n+            super(NANO_OF_SECOND, minWidth, maxWidth, SignStyle.NOT_NEGATIVE, subsequentWidth, optional);\n@@ -3320,1 +3373,1 @@\n-            return new NanosPrinterParser(minWidth, maxWidth, decimalPoint, -1);\n+            return new NanosPrinterParser(minWidth, maxWidth, decimalPoint, -1, optional);\n@@ -3331,1 +3384,15 @@\n-            return new NanosPrinterParser(minWidth, maxWidth, decimalPoint, this.subsequentWidth + subsequentWidth);\n+            return new NanosPrinterParser(minWidth, maxWidth, decimalPoint, this.subsequentWidth + subsequentWidth, optional);\n+        }\n+\n+        \/**\n+         * Returns a copy of this printer-parser with the optional flag changed.\n+         *\n+         * @param optional  the optional flag to set in the copy\n+         * @return the new printer-parser, not null\n+         *\/\n+        @Override\n+        public NanosPrinterParser withOptional(boolean optional) {\n+            if (optional == this.optional) {\n+                return this;\n+            }\n+            return new NanosPrinterParser(minWidth, maxWidth, decimalPoint, subsequentWidth, optional);\n@@ -3362,1 +3429,1 @@\n-        public boolean format(DateTimePrintContext context, StringBuilder buf, boolean optional) {\n+        public boolean format(DateTimePrintContext context, StringBuilder buf) {\n@@ -3477,1 +3544,1 @@\n-            this(field, minWidth, maxWidth, decimalPoint, 0);\n+            this(field, minWidth, maxWidth, decimalPoint, 0, false);\n@@ -3502,0 +3569,1 @@\n+         * @param optional  whether the field is optional\n@@ -3503,2 +3571,2 @@\n-        private FractionPrinterParser(TemporalField field, int minWidth, int maxWidth, boolean decimalPoint, int subsequentWidth) {\n-            super(field, minWidth, maxWidth, SignStyle.NOT_NEGATIVE, subsequentWidth);\n+        private FractionPrinterParser(TemporalField field, int minWidth, int maxWidth, boolean decimalPoint, int subsequentWidth, boolean optional) {\n+            super(field, minWidth, maxWidth, SignStyle.NOT_NEGATIVE, subsequentWidth, optional);\n@@ -3521,1 +3589,16 @@\n-            return new FractionPrinterParser(field, minWidth, maxWidth, decimalPoint, -1);\n+            return new FractionPrinterParser(field, minWidth, maxWidth, decimalPoint, -1, optional);\n+        }\n+\n+\n+        \/**\n+         * Returns a copy of this printer-parser with the optional flag changed.\n+         *\n+         * @param optional  the optional flag to set in the copy\n+         * @return the new printer-parser, not null\n+         *\/\n+        @Override\n+        public FractionPrinterParser withOptional(boolean optional) {\n+            if (optional == this.optional) {\n+                return this;\n+            }\n+            return new FractionPrinterParser(field, minWidth, maxWidth, decimalPoint, subsequentWidth, optional);\n@@ -3532,1 +3615,1 @@\n-            return new FractionPrinterParser(field, minWidth, maxWidth, decimalPoint, this.subsequentWidth + subsequentWidth);\n+            return new FractionPrinterParser(field, minWidth, maxWidth, decimalPoint, this.subsequentWidth + subsequentWidth, optional);\n@@ -3551,1 +3634,1 @@\n-        public boolean format(DateTimePrintContext context, StringBuilder buf, boolean optional) {\n+        public boolean format(DateTimePrintContext context, StringBuilder buf) {\n@@ -3678,0 +3761,1 @@\n+        private final boolean optional;\n@@ -3692,0 +3776,12 @@\n+            this(field, textStyle, provider, false);\n+        }\n+\n+        \/**\n+         * Constructor.\n+         *\n+         * @param field  the field to output, not null\n+         * @param textStyle  the text style, not null\n+         * @param provider  the text provider, not null\n+         * @param optional  true if optional\n+         *\/\n+        private TextPrinterParser(TemporalField field, TextStyle textStyle, DateTimeTextProvider provider, boolean optional) {\n@@ -3696,0 +3792,1 @@\n+            this.optional = optional;\n@@ -3699,1 +3796,1 @@\n-        public boolean format(DateTimePrintContext context, StringBuilder buf, boolean optional) {\n+        public boolean format(DateTimePrintContext context, StringBuilder buf) {\n@@ -3712,1 +3809,1 @@\n-                return numberPrinterParser().format(context, buf, optional);\n+                return numberPrinterParser().format(context, buf);\n@@ -3788,0 +3885,1 @@\n+        private final boolean optional;\n@@ -3789,1 +3887,1 @@\n-        private InstantPrinterParser(int fractionalDigits) {\n+        private InstantPrinterParser(int fractionalDigits, boolean optional) {\n@@ -3791,0 +3889,15 @@\n+            this.optional = optional;\n+        }\n+\n+        \/**\n+         * Returns a copy of this printer-parser with the optional flag changed.\n+         *\n+         * @param optional  the optional flag to set in the copy\n+         * @return the new printer-parser, not null\n+         *\/\n+        @Override\n+        public InstantPrinterParser withOptional(boolean optional) {\n+            if (optional == this.optional) {\n+                return this;\n+            }\n+            return new InstantPrinterParser(fractionalDigits, optional);\n@@ -3794,1 +3907,1 @@\n-        public boolean format(DateTimePrintContext context, StringBuilder buf, boolean optional) {\n+        public boolean format(DateTimePrintContext context, StringBuilder buf) {\n@@ -3946,0 +4059,1 @@\n+        private final boolean optional;\n@@ -3959,0 +4073,22 @@\n+            this.optional = false;\n+        }\n+\n+        private OffsetIdPrinterParser(int type, String noOffsetText, boolean optional) {\n+            this.type = type;\n+            this.style = type % 11;\n+            this.noOffsetText = noOffsetText;\n+            this.optional = optional;\n+        }\n+\n+        \/**\n+         * Returns a copy of this printer-parser with the optional flag changed.\n+         *\n+         * @param optional  the optional flag to set in the copy\n+         * @return the new printer-parser, not null\n+         *\/\n+        @Override\n+        public OffsetIdPrinterParser withOptional(boolean optional) {\n+            if (optional == this.optional) {\n+                return this;\n+            }\n+            return new OffsetIdPrinterParser(type, noOffsetText, optional);\n@@ -3979,1 +4115,1 @@\n-        public boolean format(DateTimePrintContext context, StringBuilder buf, boolean optional) {\n+        public boolean format(DateTimePrintContext context, StringBuilder buf) {\n@@ -4262,0 +4398,1 @@\n+        private final boolean optional;\n@@ -4267,0 +4404,1 @@\n+         * @param optional  whether the offset is optional\n@@ -4268,1 +4406,1 @@\n-        LocalizedOffsetIdPrinterParser(TextStyle style) {\n+        LocalizedOffsetIdPrinterParser(TextStyle style, boolean optional) {\n@@ -4270,0 +4408,15 @@\n+            this.optional = optional;\n+        }\n+\n+        \/**\n+         * Returns a copy of this printer-parser with the optional flag changed.\n+         *\n+         * @param optional  the optional flag to set in the copy\n+         * @return the new printer-parser, not null\n+         *\/\n+        @Override\n+        public LocalizedOffsetIdPrinterParser withOptional(boolean optional) {\n+            if (optional == this.optional) {\n+                return this;\n+            }\n+            return new LocalizedOffsetIdPrinterParser(style, optional);\n@@ -4278,1 +4431,1 @@\n-        public boolean format(DateTimePrintContext context, StringBuilder buf, boolean optional) {\n+        public boolean format(DateTimePrintContext context, StringBuilder buf) {\n@@ -4431,1 +4584,1 @@\n-        private Set<String> preferredZones;\n+        private final Set<String> preferredZones;\n@@ -4435,3 +4588,22 @@\n-        private ZoneTextPrinterParser(TextStyle textStyle, Set<ZoneId> preferredZones, boolean isGeneric) {\n-            super(TemporalQueries.zone(), \"ZoneText(\" + textStyle + \")\");\n-            this.textStyle = Objects.requireNonNull(textStyle, \"textStyle\");\n+        private final boolean optional;\n+\n+        private ZoneTextPrinterParser(TextStyle textStyle, Set<ZoneId> preferredZones, boolean isGeneric, boolean optional) {\n+           this(zoneIdMap(preferredZones), textStyle, isGeneric, optional);\n+        }\n+\n+        private static Set<String> zoneIdMap(Set<ZoneId> preferredZones) {\n+            if (preferredZones == null || preferredZones.isEmpty()) {\n+                return null;\n+            }\n+            Set<String> set = new HashSet<>();\n+            for (ZoneId id : preferredZones) {\n+                set.add(id.getId());\n+            }\n+\n+            return set;\n+        }\n+\n+        public ZoneTextPrinterParser(Set<String> preferredZones, TextStyle textStyle, boolean isGeneric, boolean optional) {\n+            super(TemporalQueries.zone(), \"ZoneText(\" + textStyle + \")\", optional);\n+            this.textStyle = textStyle;\n+            this.preferredZones = preferredZones;\n@@ -4439,5 +4611,13 @@\n-            if (preferredZones != null && preferredZones.size() != 0) {\n-                this.preferredZones = new HashSet<>();\n-                for (ZoneId id : preferredZones) {\n-                    this.preferredZones.add(id.getId());\n-                }\n+            this.optional = optional;\n+        }\n+\n+        \/**\n+         * Returns a copy of this printer-parser with the optional flag changed.\n+         *\n+         * @param optional  the optional flag to set in the copy\n+         * @return the new printer-parser, not null\n+         *\/\n+        @Override\n+        public ZoneTextPrinterParser withOptional(boolean optional) {\n+            if (optional == this.optional) {\n+                return this;\n@@ -4445,0 +4625,1 @@\n+            return new ZoneTextPrinterParser(preferredZones, textStyle, isGeneric, optional);\n@@ -4492,1 +4673,1 @@\n-        public boolean format(DateTimePrintContext context, StringBuilder buf, boolean optional) {\n+        public boolean format(DateTimePrintContext context, StringBuilder buf) {\n@@ -4607,0 +4788,1 @@\n+        private final boolean optional;\n@@ -4608,1 +4790,1 @@\n-        private ZoneIdPrinterParser(TemporalQuery<ZoneId> query, String description) {\n+        private ZoneIdPrinterParser(TemporalQuery<ZoneId> query, String description, boolean optional) {\n@@ -4611,0 +4793,1 @@\n+            this.optional = optional;\n@@ -4613,0 +4796,6 @@\n+        \/**\n+         * Returns a copy of this printer-parser with the optional flag changed.\n+         *\n+         * @param optional  the optional flag to set in the copy\n+         * @return the new printer-parser, not null\n+         *\/\n@@ -4614,1 +4803,9 @@\n-        public boolean format(DateTimePrintContext context, StringBuilder buf, boolean optional) {\n+        public ZoneIdPrinterParser withOptional(boolean optional) {\n+            if (optional == this.optional) {\n+                return this;\n+            }\n+            return new ZoneIdPrinterParser(query, description, optional);\n+        }\n+\n+        @Override\n+        public boolean format(DateTimePrintContext context, StringBuilder buf) {\n@@ -5032,0 +5229,1 @@\n+        private final boolean optional;\n@@ -5033,1 +5231,1 @@\n-        private ChronoPrinterParser(TextStyle textStyle) {\n+        private ChronoPrinterParser(TextStyle textStyle, boolean optional) {\n@@ -5036,0 +5234,1 @@\n+            this.optional = optional;\n@@ -5038,0 +5237,7 @@\n+\n+        \/**\n+         * Returns a copy of this printer-parser with the optional flag changed.\n+         *\n+         * @param optional  the optional flag to set in the copy\n+         * @return the new printer-parser, not null\n+         *\/\n@@ -5039,1 +5245,9 @@\n-        public boolean format(DateTimePrintContext context, StringBuilder buf, boolean optional) {\n+        public ChronoPrinterParser withOptional(boolean optional) {\n+            if (optional == this.optional) {\n+                return this;\n+            }\n+            return new ChronoPrinterParser(textStyle, optional);\n+        }\n+\n+        @Override\n+        public boolean format(DateTimePrintContext context, StringBuilder buf) {\n@@ -5136,1 +5350,1 @@\n-        public boolean format(DateTimePrintContext context, StringBuilder buf, boolean optional) {\n+        public boolean format(DateTimePrintContext context, StringBuilder buf) {\n@@ -5138,1 +5352,1 @@\n-            return formatter(context.getLocale(), chrono).toPrinterParser(false).format(context, buf, optional);\n+            return formatter(context.getLocale(), chrono).toPrinterParser(false).format(context, buf);\n@@ -5201,1 +5415,1 @@\n-            this(chr, count, minWidth, maxWidth, 0);\n+            this(chr, count, minWidth, maxWidth, 0, false);\n@@ -5213,0 +5427,1 @@\n+         * @param optional  true if optional\n@@ -5215,2 +5430,2 @@\n-                int subsequentWidth) {\n-            super(null, minWidth, maxWidth, SignStyle.NOT_NEGATIVE, subsequentWidth);\n+                int subsequentWidth, boolean optional) {\n+            super(null, minWidth, maxWidth, SignStyle.NOT_NEGATIVE, subsequentWidth, optional);\n@@ -5231,1 +5446,1 @@\n-            return new WeekBasedFieldPrinterParser(chr, count, minWidth, maxWidth, -1);\n+            return new WeekBasedFieldPrinterParser(chr, count, minWidth, maxWidth, -1, optional);\n@@ -5243,1 +5458,16 @@\n-                    this.subsequentWidth + subsequentWidth);\n+                    this.subsequentWidth + subsequentWidth, optional);\n+        }\n+\n+\n+        \/**\n+         * Returns a copy of this printer-parser with the optional flag changed.\n+         *\n+         * @param optional  the optional flag to set in the copy\n+         * @return the new printer-parser, not null\n+         *\/\n+        @Override\n+        public WeekBasedFieldPrinterParser withOptional(boolean optional) {\n+            if (optional == this.optional) {\n+                return this;\n+            }\n+            return new WeekBasedFieldPrinterParser(chr, count, minWidth, maxWidth, subsequentWidth, optional);\n@@ -5247,2 +5477,2 @@\n-        public boolean format(DateTimePrintContext context, StringBuilder buf, boolean optional) {\n-            return printerParser(context.getLocale()).format(context, buf, optional);\n+        public boolean format(DateTimePrintContext context, StringBuilder buf) {\n+            return printerParser(context.getLocale()).format(context, buf);\n@@ -5271,1 +5501,1 @@\n-                                this.subsequentWidth);\n+                                this.subsequentWidth, optional);\n@@ -5275,1 +5505,1 @@\n-                                this.subsequentWidth);\n+                                this.subsequentWidth, optional);\n@@ -5338,0 +5568,1 @@\n+        private final boolean optional;\n@@ -5344,0 +5575,1 @@\n+         * @param optional  true if optional\n@@ -5345,1 +5577,1 @@\n-        private DayPeriodPrinterParser(TextStyle textStyle) {\n+        private DayPeriodPrinterParser(TextStyle textStyle, boolean optional) {\n@@ -5348,0 +5580,8 @@\n+            this.optional = optional;\n+        }\n+\n+        public DayPeriodPrinterParser withOptional(boolean optional) {\n+            if (optional == this.optional) {\n+                return this;\n+            }\n+            return new DayPeriodPrinterParser(textStyle, optional);\n@@ -5351,1 +5591,1 @@\n-        public boolean format(DateTimePrintContext context, StringBuilder buf, boolean optional) {\n+        public boolean format(DateTimePrintContext context, StringBuilder buf) {\n","filename":"src\/java.base\/share\/classes\/java\/time\/format\/DateTimeFormatterBuilder.java","additions":318,"deletions":78,"binary":false,"changes":396,"status":"modified"}]}