{"files":[{"patch":"@@ -210,6 +210,10 @@\n-<li><p>Keep the include lines within a section alphabetically sorted.<\/p><\/li>\n-<li><p>Put conditional inclusions (`#if ...`) at the end of the section of HotSpot\n-include lines. This also applies to macro-expanded includes of platform\n-dependent files.<\/p><\/li>\n-<li><p>Put system includes in a section after the HotSpot include lines with a blank\n-line separating the two sections.<\/p><\/li>\n+<li><p>Keep the include lines within a section alphabetically sorted by\n+their lowercase value. If an include must be out of order for\n+correctness, suffix with it a comment such as\n+<code>\/\/ do not reorder<\/code>. Source code processing tools can also\n+use this hint.<\/p><\/li>\n+<li><p>Put conditional inclusions (<code>#if ...<\/code>) at the end of\n+the section of HotSpot include lines. This also applies to\n+macro-expanded includes of platform dependent files.<\/p><\/li>\n+<li><p>Put system includes in a section after the HotSpot include lines\n+with a blank line separating the two sections.<\/p><\/li>\n@@ -217,2 +221,2 @@\n-the implementation depends on other .hpp files, put it in a .cpp or\n-a .inline.hpp file.<\/p><\/li>\n+the implementation depends on other .hpp files, put it in a .cpp or a\n+.inline.hpp file.<\/p><\/li>\n@@ -221,10 +225,13 @@\n-<li><p>All .inline.hpp files should include their corresponding .hpp file as\n-the first include line with a blank line separating it from the rest of the\n-include lines. Declarations needed by other files should be put in the .hpp\n-file, and not in the .inline.hpp file. This rule exists to resolve problems\n-with circular dependencies between .inline.hpp files.<\/p><\/li>\n-<li><p>Do not include a .hpp file if the corresponding .inline.hpp file is included.<\/p><\/li>\n-<li><p>Use include guards for .hpp and .inline.hpp files. The name of the defined\n-guard should be derived from the full search path of the file relative to the\n-hotspot source directory. The guard should be all upper case with all paths\n-separators and periods replaced by underscores.<\/p><\/li>\n+<li><p>All .inline.hpp files should include their corresponding .hpp\n+file as the first include line with a blank line separating it from the\n+rest of the include lines. Declarations needed by other files should be\n+put in the .hpp file, and not in the .inline.hpp file. This rule exists\n+to resolve problems with circular dependencies between .inline.hpp\n+files.<\/p><\/li>\n+<li><p>Do not include a .hpp file if the corresponding .inline.hpp file\n+is included.<\/p><\/li>\n+<li><p>Use include guards for .hpp and .inline.hpp files. The name of\n+the defined guard should be derived from the full search path of the\n+file relative to the hotspot source directory. The guard should be all\n+upper case with all paths separators and periods replaced by\n+underscores.<\/p><\/li>\n","filename":"doc\/hotspot-style.html","additions":25,"deletions":18,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -141,1 +141,4 @@\n-* Keep the include lines within a section alphabetically sorted.\n+* Keep the include lines within a section alphabetically sorted by their\n+lowercase value. If an include must be out of order for correctness,\n+suffix with it a comment such as `\/\/ do not reorder`. Source code\n+processing tools can also use this hint.\n","filename":"doc\/hotspot-style.md","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,2 +26,2 @@\n-#include <stdlib.h>\n-#include <stdint.h>\n+#include <stdlib.h> \/\/ do not reorder\n+#include <stdint.h> \/\/ do not reorder\n","filename":"src\/hotspot\/cpu\/aarch64\/immediate_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-#include <windows.h>\n+#include <windows.h>  \/\/ do not reorder\n","filename":"src\/hotspot\/os\/windows\/systemMemoryBarrier_windows.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-#include <unordered_set>\n+#include <unordered_set>  \/\/ do not reorder\n","filename":"src\/hotspot\/share\/adlc\/archDesc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"c1\/c1_IR.hpp\"\n@@ -28,1 +27,1 @@\n-#include \"c1\/c1_LIR.hpp\"\n+#include \"c1\/c1_IR.hpp\"\n@@ -30,0 +29,1 @@\n+#include \"c1\/c1_LIR.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_CFGPrinter.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"c1\/c1_IR.hpp\"\n@@ -31,0 +30,1 @@\n+#include \"c1\/c1_IR.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_CodeStubs.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"c1\/c1_LIRAssembler.hpp\"\n@@ -30,0 +29,1 @@\n+#include \"c1\/c1_LIRAssembler.hpp\"\n@@ -37,1 +37,0 @@\n-#include \"compiler\/compilerDirectives.hpp\"\n@@ -39,1 +38,0 @@\n-#include \"compiler\/compileTask.hpp\"\n@@ -42,0 +40,1 @@\n+#include \"compiler\/compileTask.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_Compilation.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"oops\/compressedOops.hpp\"\n@@ -35,1 +36,0 @@\n-#include \"oops\/compressedOops.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_FrameMap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"c1\/c1_CFGPrinter.hpp\"\n@@ -27,0 +26,1 @@\n+#include \"c1\/c1_CFGPrinter.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"c1\/c1_IR.hpp\"\n@@ -30,0 +29,1 @@\n+#include \"c1\/c1_IR.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"c1\/c1_IR.hpp\"\n@@ -30,0 +29,1 @@\n+#include \"c1\/c1_IR.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_IR.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"c1\/c1_IR.hpp\"\n@@ -28,0 +27,1 @@\n+#include \"c1\/c1_IR.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_Instruction.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"classfile\/vmSymbols.hpp\"\n@@ -31,0 +30,1 @@\n+#include \"classfile\/vmSymbols.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_InstructionPrinter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"c1\/c1_IR.hpp\"\n@@ -30,0 +29,1 @@\n+#include \"c1\/c1_IR.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_InstructionPrinter.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"c1\/c1_LIRGenerator.hpp\"\n@@ -32,0 +31,1 @@\n+#include \"c1\/c1_LIRGenerator.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_LinearScan.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"c1\/c1_IR.hpp\"\n@@ -32,0 +31,1 @@\n+#include \"c1\/c1_IR.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_LinearScan.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"compiler\/compileLog.hpp\"\n@@ -30,1 +31,0 @@\n-#include \"compiler\/compileLog.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_Optimizer.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"c1\/c1_IR.hpp\"\n@@ -30,0 +29,1 @@\n+#include \"c1\/c1_IR.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_Optimizer.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,2 +25,0 @@\n-#include \"c1\/c1_ValueStack.hpp\"\n-#include \"c1\/c1_RangeCheckElimination.hpp\"\n@@ -28,0 +26,2 @@\n+#include \"c1\/c1_RangeCheckElimination.hpp\"\n+#include \"c1\/c1_ValueStack.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_RangeCheckElimination.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -52,1 +52,0 @@\n-#include \"oops\/objArrayOop.inline.hpp\"\n@@ -54,0 +53,1 @@\n+#include \"oops\/objArrayOop.inline.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"c1\/c1_IR.hpp\"\n@@ -27,0 +26,1 @@\n+#include \"c1\/c1_IR.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_ValueStack.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"classfile\/vmIntrinsics.hpp\"\n@@ -31,0 +30,1 @@\n+#include \"classfile\/vmIntrinsics.hpp\"\n","filename":"src\/hotspot\/share\/ci\/bcEscapeAnalyzer.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"ci\/ciObject.hpp\"\n@@ -32,0 +31,1 @@\n+#include \"ci\/ciObject.hpp\"\n","filename":"src\/hotspot\/share\/ci\/bcEscapeAnalyzer.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"classfile\/javaClasses.inline.hpp\"\n@@ -28,0 +27,1 @@\n+#include \"classfile\/javaClasses.inline.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciCallSite.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,0 @@\n-#include \"compiler\/compilerEvent.hpp\"\n@@ -47,0 +46,1 @@\n+#include \"compiler\/compilerEvent.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciEnv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"compiler\/cHeapStringHolder.hpp\"\n@@ -36,1 +37,0 @@\n-#include \"compiler\/cHeapStringHolder.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciEnv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"classfile\/javaClasses.inline.hpp\"\n@@ -32,0 +31,1 @@\n+#include \"classfile\/javaClasses.inline.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciInstance.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"oops\/fieldStreams.inline.hpp\"\n@@ -37,1 +38,0 @@\n-#include \"oops\/fieldStreams.inline.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciInstanceKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"ci\/ciReplay.hpp\"\n@@ -33,1 +34,0 @@\n-#include \"ci\/ciReplay.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciMethod.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+#include \"ci\/ciKlass.hpp\"\n@@ -28,1 +29,0 @@\n-#include \"ci\/ciKlass.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciReplay.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"gc\/shared\/cardTableBarrierSet.hpp\"\n@@ -28,0 +27,1 @@\n+#include \"gc\/shared\/cardTableBarrierSet.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciUtilities.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-#include \"opto\/node.hpp\"\n@@ -38,0 +37,1 @@\n+#include \"opto\/node.hpp\"\n@@ -40,1 +40,0 @@\n-#include \"utilities\/ostream.hpp\"\n@@ -42,0 +41,1 @@\n+#include \"utilities\/ostream.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/compilationFailureInfo.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-#include \"oops\/methodData.hpp\"\n@@ -33,0 +32,1 @@\n+#include \"oops\/methodData.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/compilationPolicy.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-#include \"jvm.h\"\n@@ -44,0 +43,1 @@\n+#include \"jvm.h\"\n@@ -49,1 +49,0 @@\n-#include \"oops\/methodData.hpp\"\n@@ -51,0 +50,1 @@\n+#include \"oops\/methodData.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"compiler\/compileTask.hpp\"\n@@ -33,0 +32,1 @@\n+#include \"compiler\/compileTask.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,2 +26,0 @@\n-#include \"compiler\/compileTask.hpp\"\n-#include \"compiler\/compileLog.hpp\"\n@@ -29,0 +27,1 @@\n+#include \"compiler\/compileLog.hpp\"\n@@ -30,0 +29,1 @@\n+#include \"compiler\/compileTask.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/compileTask.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+\n","filename":"src\/hotspot\/share\/compiler\/compilerDefinitions.inline.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"classfile\/vmIntrinsics.hpp\"\n@@ -30,0 +29,1 @@\n+#include \"classfile\/vmIntrinsics.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/compilerDirectives.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"compiler\/compileTask.hpp\"\n@@ -28,0 +27,1 @@\n+#include \"compiler\/compileTask.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/compilerThread.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+\n","filename":"src\/hotspot\/share\/compiler\/directivesParser.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"utilities\/json.hpp\"\n@@ -30,0 +29,1 @@\n+#include \"utilities\/json.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/directivesParser.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-#include \"utilities\/globalDefinitions.hpp\"\n-\n@@ -35,0 +33,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/disassembler.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"runtime\/handles.hpp\"\n@@ -31,0 +30,1 @@\n+#include \"runtime\/handles.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/methodMatcher.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+\n","filename":"src\/hotspot\/share\/compiler\/oopMap.inline.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"compiler\/compileTask.hpp\"\n@@ -28,0 +27,1 @@\n+#include \"compiler\/compileTask.hpp\"\n@@ -30,1 +30,0 @@\n-#include \"jvmci\/jvmciJavaClasses.hpp\"\n@@ -32,0 +31,1 @@\n+#include \"jvmci\/jvmciJavaClasses.hpp\"\n","filename":"src\/hotspot\/share\/jvmci\/jvmci.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+#include \"classfile\/moduleEntry.hpp\"\n@@ -25,0 +26,1 @@\n+#include \"classfile\/vmSymbols.hpp\"\n@@ -27,2 +29,0 @@\n-#include \"classfile\/moduleEntry.hpp\"\n-#include \"classfile\/vmSymbols.hpp\"\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompiler.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,1 +46,0 @@\n-#include \"runtime\/jniHandles.inline.hpp\"\n@@ -48,0 +47,1 @@\n+#include \"runtime\/jniHandles.inline.hpp\"\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-#include \"runtime\/jniHandles.inline.hpp\"\n@@ -36,0 +35,1 @@\n+#include \"runtime\/jniHandles.inline.hpp\"\n","filename":"src\/hotspot\/share\/jvmci\/jvmciJavaClasses.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-#include \"jvmci\/jvmciCompilerToVM.hpp\"\n@@ -35,0 +34,1 @@\n+#include \"jvmci\/jvmciCompilerToVM.hpp\"\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -142,0 +142,1 @@\n+  sources \\\n@@ -622,3 +623,0 @@\n-tier1_sources = \\\n-   sources\n-\n@@ -631,1 +629,0 @@\n-  :tier1_sources\n","filename":"test\/hotspot\/jtreg\/TEST.groups","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,235 @@\n+\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+\/\/\/ See [#main].\n+public class SortIncludes {\n+    private static final String INCLUDE_LINE = \"^ *# *include *(<[^>]+>|\\\"[^\\\"]+\\\") *$\\\\n\";\n+    private static final String BLANK_LINE = \"^$\\\\n\";\n+    private static final Pattern INCLUDES_RE = Pattern.compile(\n+                    String.format(\"%s(?:(?:%s)*%s)*\", INCLUDE_LINE, BLANK_LINE, INCLUDE_LINE),\n+                    Pattern.MULTILINE);\n+\n+    \/\/\/ Gets a sorting key for an include which is its substring as of `delim`, lowercased.\n+    \/\/\/ Note that using lowercase will sort `_` before letters.\n+    private static Comparator<String> sortKeyForInclude(char delim) {\n+        return Comparator.comparing(s -> s.toLowerCase().substring(s.indexOf(delim)));\n+    }\n+\n+    \/\/\/ Gets the first substring in `s` enclosed by `start` and `end`.\n+    private static String extract(String s, char start, char end) {\n+        int startIndex = s.indexOf(start);\n+        int endIndex = s.indexOf(end, startIndex + 1);\n+        if (startIndex == -1 || endIndex == -1) {\n+            throw new IllegalArgumentException(s);\n+        }\n+        return s.substring(startIndex + 1, endIndex);\n+    }\n+\n+    \/\/\/ Sorts the include statements in `block`.\n+    \/\/\/\n+    \/\/\/ @param path path of the file containing `block`\n+    \/\/\/ @param block source code chunk containing 1 or more include statements\n+    \/\/\/ @return `block` with the include statements sorted and a blank line between user and\n+    \/\/\/ sys includes\n+    private static String sortedIncludes(Path path, String block) {\n+        String[] lines = block.split(\"\\\\n\");\n+        SortedSet<String> userIncludes = new TreeSet<>(sortKeyForInclude('\"'));\n+        SortedSet<String> sysIncludes = new TreeSet<>(sortKeyForInclude('<'));\n+\n+        \/\/ From the style guide:\n+        \/\/\n+        \/\/ All .inline.hpp files should include their corresponding .hpp file\n+        \/\/ as the first include line with a blank line separating it from the\n+        \/\/ rest of the include lines. Declarations needed by other files should\n+        \/\/ be put in the .hpp file, and not in the .inline.hpp file. This rule\n+        \/\/ exists to resolve problems with circular dependencies between\n+        \/\/ .inline.hpp files.\n+        String pathString = path.toString();\n+        boolean isInlineHpp = pathString.endsWith(\".inline.hpp\");\n+        String nonInlineHpp = pathString.replace(\".inline.hpp\", \".hpp\");\n+        if (File.separatorChar != '\/') {\n+            nonInlineHpp = nonInlineHpp.replace(File.separatorChar, '\/');\n+        }\n+\n+        List<String> result = new ArrayList<>(lines.length);\n+\n+        \/\/ Partition lines into user include and sys includes and discard blank lines\n+        for (String line : lines) {\n+            if (line.contains(\"\\\"\")) {\n+                if (isInlineHpp && nonInlineHpp.endsWith(extract(line, '\"', '\"'))) {\n+                    result.add(line);\n+                } else {\n+                    userIncludes.add(line);\n+                }\n+            } else if (line.contains(\"<\")) {\n+                sysIncludes.add(line);\n+            }\n+        }\n+\n+        if (!result.isEmpty() && (!userIncludes.isEmpty() || !sysIncludes.isEmpty())) {\n+            \/\/ Insert blank line between include of .hpp from .inline.hpp\n+            \/\/ and the rest of the includes\n+            result.add(\"\");\n+        }\n+        result.addAll(userIncludes);\n+        if (!userIncludes.isEmpty() && !sysIncludes.isEmpty()) {\n+            \/\/ Insert blank line between user and sys includes\n+            result.add(\"\");\n+        }\n+        result.addAll(sysIncludes);\n+\n+        return String.join(\"\\n\", result) + \"\\n\";\n+    }\n+\n+    \/\/\/ Processes the C++ source file in `path` to sort its include statements.\n+    \/\/\/\n+    \/\/\/ @param path a path of a C++ source file\n+    \/\/\/ @param update updates the source file if sorting changed its content\n+    \/\/\/ @return `true` if sorting changes were made,`false` otherwise\n+    public static boolean sortIncludes(Path path, boolean update) throws IOException {\n+        String source = Files.readString(path);\n+        Matcher matcher = INCLUDES_RE.matcher(source);\n+        StringBuilder buf = new StringBuilder();\n+        int end = 0;\n+\n+        while (matcher.find()) {\n+            if (matcher.start() != end) {\n+                buf.append(source, end, matcher.start());\n+            }\n+            buf.append(sortedIncludes(path, matcher.group()));\n+            end = matcher.end();\n+        }\n+\n+        if (end == 0) {\n+            return false;\n+        }\n+        buf.append(source.substring(end));\n+\n+        String newSource = buf.toString();\n+        if (!newSource.equals(source)) {\n+            if (update) {\n+                Files.writeString(path, newSource);\n+            }\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    \/\/\/ Record of the files processed by [#process(List, boolean)] and those\n+    \/\/\/ that had unsorted includes.\n+    public record Result(List<Path> files, List<Path> unsorted) {\n+    }\n+\n+    \/\/\/ Processes the C++ source files in `paths` to check if their include statements are sorted.\n+    \/\/\/ Include statements with any non-space characters after the closing `\"` or `>` will not\n+    \/\/\/ be re-ordered.\n+    \/\/\/\n+    \/\/\/ @param paths list of directory and file paths\n+    \/\/\/ @param update if `true`, files with unsorted includes are updated to sort the includes\n+    \/\/\/ @return the files that had unsorted include statements.\n+    public static Result process(List<Path> paths, boolean update) throws IOException {\n+        List<Path> files = new ArrayList<>();\n+        for (Path path : paths) {\n+            if (Files.isRegularFile(path)) {\n+                files.add(path);\n+            } else {\n+                Files.walk(path).forEach(p -> {\n+                    if (Files.isRegularFile(p)) {\n+                        String name = p.getFileName().toString();\n+                        if (name.endsWith(\".cpp\") || name.endsWith(\".hpp\")) {\n+                            files.add(p);\n+                        }\n+                    }\n+                });\n+            }\n+        }\n+\n+        List<Path> unsorted = new ArrayList<>();\n+        for (Path file : files) {\n+            if (sortIncludes(file, update)) {\n+                unsorted.add(file);\n+            }\n+        }\n+        return new Result(files, unsorted);\n+    }\n+\n+    \/\/\/ Exception thrown by [#main] if `\"--update\"` is in `args` and\n+    \/\/\/ files with unsorted includes were seen.\n+    public static class UnsortedIncludesException extends Exception {\n+        \/\/\/ Files with unsorted includes.\n+        public final List<Path> files;\n+\n+        public UnsortedIncludesException(List<Path> files) {\n+            this.files = files;\n+        }\n+\n+        @Override\n+        public String getMessage() {\n+            String unsorted = files.stream().map(Path::toString).collect(Collectors.joining(System.lineSeparator()));\n+            return String.format(\"%d files with unsorted headers found:%n%s\", files.size(), unsorted);\n+        }\n+    }\n+\n+    \/\/\/ Processes C++ files to check if their include statements are sorted.\n+    \/\/\/\n+    \/\/\/ @param args `[--update] dir|file...` where `update` means the processed\n+    \/\/\/        files are updated to sort any unsorted includes and `dir|file` are the\n+    \/\/\/        roots to scan for the C++ files to be processed\n+    \/\/\/ @throws UnsortedIncludesException if `args` includes `\"--update\"` and\n+    \/\/\/         files with unsorted includes were found\n+    public static void main(String[] args) throws IOException, UnsortedIncludesException {\n+        boolean update = false;\n+        List<Path> paths = new ArrayList<>();\n+        for (String arg : args) {\n+            if (arg.equals(\"--update\")) {\n+                update = true;\n+            } else {\n+                paths.add(Paths.get(arg));\n+            }\n+        }\n+\n+        Result result = process(paths, update);\n+        if (update) {\n+            System.out.printf(\"Processed %d files, updated %d to sort include statements%n\",\n+                            result.files.size(),\n+                            result.unsorted().size());\n+        } else if (!result.unsorted().isEmpty()) {\n+            throw new UnsortedIncludesException(result.unsorted);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/sources\/SortIncludes.java","additions":235,"deletions":0,"binary":false,"changes":235,"status":"added"},{"patch":"@@ -0,0 +1,109 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8343802\n+ * @summary Tests that HotSpot C++ files have sorted includes\n+ * @build SortIncludes\n+ * @run main TestIncludesAreSorted\n+ *\/\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.stream.Stream;\n+\n+public class TestIncludesAreSorted {\n+\n+    \/**\n+     * The directories under {@code <jdk>\/src\/hotspot} to process. This list can be expanded over\n+     * time until the point where it's simply \".\" (i.e. all HotSpot source files are compliant and\n+     * can be checked).\n+     *\/\n+    private static final String[] HOTSPOT_SOURCES_TO_CHECK = {\n+                    \"share\/c1\",\n+                    \"share\/ci\",\n+                    \"share\/compiler\",\n+                    \"share\/jvmci\",\n+    };\n+\n+    \/**\n+     * Gets the absolute path to {@code <jdk>\/src\/hotspot} by searching up the file system starting\n+     * at {@code dir}.\n+     *\/\n+    private static Path getHotSpotSrcDir(Path dir) {\n+        while (dir != null) {\n+            Path path = dir.resolve(\"src\").resolve(\"hotspot\");\n+            if (Files.exists(path)) {\n+                return path;\n+            }\n+            dir = dir.getParent();\n+        }\n+        throw new RuntimeException(\"Could not locate the src\/hotspot directory by searching up from \" + dir);\n+    }\n+\n+    public static void main(String[] ignore) throws IOException {\n+        Path testSrcDir = Paths.get(System.getProperty(\"test.src\"));\n+        Path root = getHotSpotSrcDir(testSrcDir);\n+        String[] args = Stream.of(HOTSPOT_SOURCES_TO_CHECK)\/\/\n+                        .map(root::resolve)\n+                        .map(Path::toString)\n+                        .toArray(String[]::new);\n+        try {\n+            SortIncludes.main(args);\n+        } catch (SortIncludes.UnsortedIncludesException e) {\n+            String msg = String.format(\"\"\"\n+                            %s\n+\n+                            This should be fixable by running:\n+\n+                                java %s.java --update %s\n+\n+\n+                            Note that non-space characters after the closing \" or > of an include statement\n+                            can be used to prevent re-ordering of the include. For example:\n+\n+                            #include \"e.hpp\"\n+                            #include \"d.hpp\"\n+                            #include \"c.hpp\" \/\/ do not reorder\n+                            #include \"b.hpp\"\n+                            #include \"a.hpp\"\n+\n+                            will be reformatted as:\n+\n+                            #include \"d.hpp\"\n+                            #include \"e.hpp\"\n+                            #include \"c.hpp\" \/\/ do not reorder\n+                            #include \"a.hpp\"\n+                            #include \"b.hpp\"\n+\n+                            \"\"\",\n+                    e.getMessage(),\n+                    testSrcDir.resolve(SortIncludes.class.getSimpleName()),\n+                    String.join(\" \", args));\n+            throw new RuntimeException(msg);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/sources\/TestIncludesAreSorted.java","additions":109,"deletions":0,"binary":false,"changes":109,"status":"added"}]}