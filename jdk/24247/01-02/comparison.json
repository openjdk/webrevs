{"files":[{"patch":"@@ -210,6 +210,10 @@\n-<li><p>Keep the include lines within a section alphabetically sorted by their lowercase value.<\/p><\/li>\n-<li><p>Put conditional inclusions (`#if ...`) at the end of the section of HotSpot\n-include lines. This also applies to macro-expanded includes of platform\n-dependent files.<\/p><\/li>\n-<li><p>Put system includes in a section after the HotSpot include lines with a blank\n-line separating the two sections.<\/p><\/li>\n+<li><p>Keep the include lines within a section alphabetically sorted by\n+their lowercase value. If an include must be out of order for\n+correctness, suffix with it a comment such as\n+<code>\/\/ do not reorder<\/code>. Source code processing tools can also\n+use this hint.<\/p><\/li>\n+<li><p>Put conditional inclusions (<code>#if ...<\/code>) at the end of\n+the section of HotSpot include lines. This also applies to\n+macro-expanded includes of platform dependent files.<\/p><\/li>\n+<li><p>Put system includes in a section after the HotSpot include lines\n+with a blank line separating the two sections.<\/p><\/li>\n@@ -217,2 +221,2 @@\n-the implementation depends on other .hpp files, put it in a .cpp or\n-a .inline.hpp file.<\/p><\/li>\n+the implementation depends on other .hpp files, put it in a .cpp or a\n+.inline.hpp file.<\/p><\/li>\n@@ -221,10 +225,13 @@\n-<li><p>All .inline.hpp files should include their corresponding .hpp file as\n-the first include line with a blank line separating it from the rest of the\n-include lines. Declarations needed by other files should be put in the .hpp\n-file, and not in the .inline.hpp file. This rule exists to resolve problems\n-with circular dependencies between .inline.hpp files.<\/p><\/li>\n-<li><p>Do not include a .hpp file if the corresponding .inline.hpp file is included.<\/p><\/li>\n-<li><p>Use include guards for .hpp and .inline.hpp files. The name of the defined\n-guard should be derived from the full search path of the file relative to the\n-hotspot source directory. The guard should be all upper case with all paths\n-separators and periods replaced by underscores.<\/p><\/li>\n+<li><p>All .inline.hpp files should include their corresponding .hpp\n+file as the first include line with a blank line separating it from the\n+rest of the include lines. Declarations needed by other files should be\n+put in the .hpp file, and not in the .inline.hpp file. This rule exists\n+to resolve problems with circular dependencies between .inline.hpp\n+files.<\/p><\/li>\n+<li><p>Do not include a .hpp file if the corresponding .inline.hpp file\n+is included.<\/p><\/li>\n+<li><p>Use include guards for .hpp and .inline.hpp files. The name of\n+the defined guard should be derived from the full search path of the\n+file relative to the hotspot source directory. The guard should be all\n+upper case with all paths separators and periods replaced by\n+underscores.<\/p><\/li>\n","filename":"doc\/hotspot-style.html","additions":25,"deletions":18,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -141,1 +141,4 @@\n-* Keep the include lines within a section alphabetically sorted by their lowercase value.\n+* Keep the include lines within a section alphabetically sorted by their\n+lowercase value. If an include must be out of order for correctness,\n+suffix with it a comment such as `\/\/ do not reorder`. Source code\n+processing tools can also use this hint.\n","filename":"doc\/hotspot-style.md","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-\n","filename":"src\/hotspot\/share\/ci\/ciUtilities.inline.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-\n","filename":"src\/hotspot\/share\/compiler\/disassembler.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import java.util.stream.Collectors;\n@@ -39,1 +38,1 @@\n-    private static final String INCLUDE_LINE = \"^ *#include *(<[^>]+>|\\\"[^\\\"]+\\\") *$\\\\n\";\n+    private static final String INCLUDE_LINE = \"^ *# *include *(<[^>]+>|\\\"[^\\\"]+\\\") *$\\\\n\";\n@@ -63,1 +62,1 @@\n-    \/\/\/ @param path path of source file containing `block`\n+    \/\/\/ @param path path of the file containing `block`\n@@ -88,1 +87,0 @@\n-            int doubleQuote = line.indexOf('\"');\n@@ -149,0 +147,2 @@\n+    \/\/\/ Record of the files processed by [#process(List, boolean)] and those\n+    \/\/\/ that had unsorted includes.\n@@ -185,1 +185,19 @@\n-    public static void main(String[] args) throws IOException {\n+    \/\/\/ Exception thrown by [#main] if `\"--update\"` is in `args` and\n+    \/\/\/ files with unsorted includes were seen.\n+    public static class UnsortedIncludesException extends Exception {\n+        \/\/\/ Files with unsorted includes.\n+        public final List<Path> files;\n+\n+        public UnsortedIncludesException(List<Path> files) {\n+            this.files = files;\n+        }\n+    }\n+\n+    \/\/\/ Processes C++ files to check if their include statements are sorted.\n+    \/\/\/\n+    \/\/\/ @param args `[--update] dir|file...` where `update` means the processed\n+    \/\/\/        files are updated to sort any unsorted includes and `dir|file` are the\n+    \/\/\/        roots to scan for the C++ files to be processed\n+    \/\/\/ @throws UnsortedIncludesException if `args` includes `\"--update\"` and\n+    \/\/\/         files with unsorted includes were found\n+    public static void main(String[] args) throws IOException, UnsortedIncludesException {\n@@ -202,26 +220,1 @@\n-            String unsorted = result.unsorted.stream().map(Path::toString).collect(Collectors.joining(System.lineSeparator()));\n-            String msg = String.format(\"\"\"\n-                            %d files with unsorted headers found:\n-\n-                            %s\n-\n-                            Note that non-space characters after the closing \" or > of an include statement\n-                            can be used to prevent re-ordering of the include. For example:\n-\n-                            #include \"e.hpp\"\n-                            #include \"d.hpp\"\n-                            #include \"c.hpp\" \/\/ do not reorder\n-                            #include \"b.hpp\"\n-                            #include \"a.hpp\"\n-\n-                            will be reformatted as:\n-\n-                            #include \"d.hpp\"\n-                            #include \"e.hpp\"\n-                            #include \"c.hpp\" \/\/ do not reorder\n-                            #include \"a.hpp\"\n-                            #include \"b.hpp\"\n-\n-                            \"\"\",\n-                            result.unsorted().size(), unsorted);\n-            throw new RuntimeException(msg);\n+            throw new UnsortedIncludesException(result.unsorted);\n","filename":"test\/hotspot\/jtreg\/sources\/SortIncludes.java","additions":24,"deletions":31,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import java.util.stream.Collectors;\n@@ -76,5 +77,34 @@\n-        } catch (RuntimeException e) {\n-            String msg = String.format(\"The unsorted includes listed below should be fixable by running:%n%n    java %s.java --update %s%n\",\n-                            testSrcDir.resolve(SortIncludes.class.getSimpleName()),\n-                            String.join(\" \", args));\n-            throw new RuntimeException(msg, e);\n+        } catch (SortIncludes.UnsortedIncludesException e) {\n+            String unsorted = e.files.stream().map(Path::toString).collect(Collectors.joining(System.lineSeparator()));\n+            String msg = String.format(\"\"\"\n+                            %d files with unsorted headers found:\n+\n+                            %s\n+                            \n+                            This should be fixable by running:\n+                            \n+                                java %s.java --update %s\n+\n+\n+                            Note that non-space characters after the closing \" or > of an include statement\n+                            can be used to prevent re-ordering of the include. For example:\n+\n+                            #include \"e.hpp\"\n+                            #include \"d.hpp\"\n+                            #include \"c.hpp\" \/\/ do not reorder\n+                            #include \"b.hpp\"\n+                            #include \"a.hpp\"\n+\n+                            will be reformatted as:\n+\n+                            #include \"d.hpp\"\n+                            #include \"e.hpp\"\n+                            #include \"c.hpp\" \/\/ do not reorder\n+                            #include \"a.hpp\"\n+                            #include \"b.hpp\"\n+\n+                            \"\"\",\n+                    e.files.size(), unsorted,\n+                    testSrcDir.resolve(SortIncludes.class.getSimpleName()),\n+                    String.join(\" \", args));\n+            throw new RuntimeException(msg);\n","filename":"test\/hotspot\/jtreg\/sources\/TestIncludesAreSorted.java","additions":35,"deletions":5,"binary":false,"changes":40,"status":"modified"}]}