{"files":[{"patch":"@@ -398,0 +398,2 @@\n+        final Color contentAreaColor = windowBackgroundColor;\n+        final Color selectedTabColor = windowBackgroundColor;\n@@ -863,1 +865,1 @@\n-            \"TabbedPane.opaque\", useOpaqueComponents,\n+            \"TabbedPane.opaque\", false,\n@@ -883,0 +885,4 @@\n+            \"TabbedPane.contentAreaColor\", contentAreaColor,\n+            \"TabbedPane.contentOpaque\", Boolean.TRUE,\n+            \"TabbedPane.tabsOpaque\", Boolean.TRUE,\n+            \"TabbedPane.selected\", selectedTabColor,\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaLookAndFeel.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -58,0 +58,3 @@\n+    private   Color selectedColor;\n+    private boolean contentOpaque = true;\n+    private boolean tabsOpaque = true;\n@@ -90,1 +93,3 @@\n-        tabPane.setOpaque(false);\n+        contentOpaque = UIManager.getBoolean(\"TabbedPane.contentOpaque\");\n+        tabsOpaque = UIManager.getBoolean(\"TabbedPane.tabsOpaque\");\n+        selectedColor = UIManager.getColor(\"TabbedPane.selected\");\n@@ -485,1 +490,4 @@\n-        painter.paint(g, tabPane, tabRect.x, tabRect.y, tabRect.width, tabRect.height);\n+\n+        if (tabsOpaque || tabPane.isOpaque()) {\n+            painter.paint(g, tabPane, tabRect.x, tabRect.y, tabRect.width, tabRect.height);\n+        }\n@@ -489,1 +497,3 @@\n-        final Color color = tabPane.getBackgroundAt(nonRectIndex);\n+        final Color color = (!isSelected || selectedColor == null) ?\n+                tabPane.getBackgroundAt(nonRectIndex) : selectedColor;\n+\n@@ -498,1 +508,3 @@\n-        fillTabWithBackground(g, tabRect, tabPlacement, first, last, color);\n+        if (tabsOpaque || tabPane.isOpaque()) {\n+            fillTabWithBackground(g, tabRect, tabPlacement, first, last, color);\n+        }\n@@ -682,2 +694,10 @@\n-        if (tabPane.isOpaque()) {\n-            g.setColor(tabPane.getBackground());\n+        if ((tabPane.isOpaque() || contentOpaque) && tabPane.getTabCount() > 0) {\n+            \/\/ Fill region behind content area\n+            Color color = UIManager.getColor(\"TabbedPane.contentAreaColor\");\n+            if (color != null) {\n+                g.setColor(color);\n+            } else if (selectedColor == null || selectedIndex == -1) {\n+                g.setColor(tabPane.getBackground());\n+            } else {\n+                g.setColor(selectedColor);\n+            }\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaTabbedPaneUI.java","additions":26,"deletions":6,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n- * @bug 8172269 8244557\n+ * @bug 8172269 8244557 8331619\n@@ -51,4 +51,11 @@\n-            SwingUtilities.invokeAndWait(() -> setLookAndFeel(laf));\n-            try {\n-                SwingUtilities.invokeAndWait(() -> createGUI());\n-                ROBOT.waitForIdle();\n+            if (!laf.getClassName().contains(\"Aqua\")) {\n+                SwingUtilities.invokeAndWait(() -> setLookAndFeel(laf));\n+                try {\n+                    SwingUtilities.invokeAndWait(() -> createGUI());\n+                    ROBOT.waitForIdle();\n+                    ROBOT.delay(1000);\n+                    SwingUtilities.invokeAndWait(() -> test(laf));\n+                    ROBOT.delay(2000);\n+                } finally {\n+                    if (frame != null) SwingUtilities.invokeAndWait(() -> frame.dispose());\n+                }\n@@ -56,4 +63,0 @@\n-                SwingUtilities.invokeAndWait(() -> test(laf));\n-                ROBOT.delay(2000);\n-            } finally {\n-                if (frame != null) SwingUtilities.invokeAndWait(() -> frame.dispose());\n@@ -61,1 +64,0 @@\n-            ROBOT.delay(1000);\n","filename":"test\/jdk\/javax\/swing\/JTabbedPane\/TestBackgroundScrollPolicy.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -0,0 +1,172 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.event.ActionEvent;\n+import javax.swing.AbstractAction;\n+import javax.swing.AbstractButton;\n+import javax.swing.JCheckBox;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import javax.swing.JTabbedPane;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+\n+\/*\n+ * @test\n+ * @bug 8331619\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @requires (os.family == \"mac\")\n+ * @summary Test JTabbedPane's contentarea and tab color\n+ *          for Aqua LAFs when opacity is enabled or disabled.\n+ * @run main\/manual TestTabbedPaneOpacityInAqua\n+ *\/\n+\n+public class TestTabbedPaneOpacityInAqua {\n+    private static JFrame frame;\n+    private static JTabbedPane tabPane;\n+    private static final String INSTRUCTIONS = \"\"\"\n+            The background color of panel which contains the tabbed pane is green.\n+            The background color of the tabbed pane is red.\n+            The TabbedPane is not opaque initially.\n+            For 'Content Opaque' and 'Tabs Opaque' to have effect, tab pane opacity should\n+            be set to false i.e. Opaque checkbox should be unchecked.\n+\n+            Check the default behaviour of the tabbed pane:\n+              - selected tab is gray and unselected tabs are red(filled with alpha binding).\n+              - the content area is opaque (it must be gray).\n+\n+            Test Case 1 - Test Content pane opacity:\n+            To test Content pane opacity, make sure \"Opaque checkbox\" is UNCHECKED.\n+\n+            Verify the following with 'content opaque' option:\n+            when checked:\n+              - the content area should be opaque (it must be gray).\n+            when unchecked:\n+              - the content area should be transparent (it must be green).\n+\n+            Test Case 2 - Test Tabs opacity:\n+            To test Tabs opacity, make sure \"Opaque checkbox\" is UNCHECKED.\n+\n+            Verify the following with 'tabs opaque' option:\n+            when checked:\n+              - the tabs are opaque (it must be red, except the selected tab which must be gray).\n+            when unchecked:\n+              - the tabs are transparent (it must be either gray or green).\n+              - if Content Opaque checkbox is checked then tabs are gray.\n+              - if Content Opaque checkbox is unchecked then tabs are green.\n+\n+            Test Case 3 - Test Tab Pane opacity:\n+            To test Content pane opacity, make sure \"Content Opaque checkbox\" is UNCHECKED.\n+\n+            Verify the following with 'opaque' option:\n+            when checked:\n+              - the content area should be opaque (it must be gray).\n+            when unchecked:\n+              - the content area should be transparent (it must be green).\"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"JTabbedPane Tab and Content Area Color Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .testTimeOut(10)\n+                .rows(25)\n+                .columns(60)\n+                .testUI(TestTabbedPaneOpacityInAqua::createAndShowUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static JFrame createAndShowUI() {\n+        int NUM_TABS = 5;\n+        frame = new JFrame(\"Test JTabbedPane Opaque Color\");\n+        JTabbedPane tabPane = new JTabbedPane();\n+        tabPane.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);\n+        tabPane.setTabPlacement(JTabbedPane.TOP);\n+        PassFailJFrame.positionTestWindow(\n+                frame, PassFailJFrame.Position.HORIZONTAL);\n+        for (int i = 0; i < NUM_TABS; ++i) {\n+            tabPane.addTab(\"Tab \" + i , new JLabel(\"Content Area\"));\n+        }\n+        JPanel panel = new JPanel(new BorderLayout());\n+        panel.add(tabPane, BorderLayout.CENTER);\n+        panel.setBackground(Color.green);\n+        tabPane.setBackground(Color.red);\n+\n+        JCheckBox contentOpaqueChkBox = new JCheckBox(new AbstractAction() {\n+            public void actionPerformed(ActionEvent e) {\n+                if (((AbstractButton)e.getSource()).isSelected()) {\n+                    UIManager.put(\"TabbedPane.contentOpaque\", Boolean.TRUE);\n+                } else {\n+                    UIManager.put(\"TabbedPane.contentOpaque\", Boolean.FALSE);\n+                }\n+                tabPane.repaint();\n+                SwingUtilities.updateComponentTreeUI(frame);\n+            }\n+        });\n+        contentOpaqueChkBox.setText(\"Content Opaque\");\n+        contentOpaqueChkBox.setSelected(true);\n+        contentOpaqueChkBox.setEnabled(true);\n+\n+        JCheckBox tabOpaqueChkBox = new JCheckBox(new AbstractAction() {\n+            public void actionPerformed(ActionEvent e) {\n+                if (((AbstractButton)e.getSource()).isSelected()) {\n+                    UIManager.put(\"TabbedPane.tabsOpaque\", Boolean.TRUE);\n+                } else {\n+                    UIManager.put(\"TabbedPane.tabsOpaque\", Boolean.FALSE);\n+                }\n+                tabPane.repaint();\n+                SwingUtilities.updateComponentTreeUI(frame);\n+            }\n+        });\n+        tabOpaqueChkBox.setText(\"Tabs Opaque\");\n+        tabOpaqueChkBox.setSelected(true);\n+        tabOpaqueChkBox.setEnabled(true);\n+\n+        JCheckBox tabPaneOpaqueChkBox = new JCheckBox(new AbstractAction() {\n+            public void actionPerformed(ActionEvent e) {\n+                tabPane.setOpaque(((AbstractButton)e.getSource()).isSelected());\n+                contentOpaqueChkBox.setEnabled(!((AbstractButton)e.getSource()).isSelected());\n+                tabOpaqueChkBox.setEnabled(!((AbstractButton)e.getSource()).isSelected());\n+                tabPane.repaint();\n+                SwingUtilities.updateComponentTreeUI(frame);\n+            }\n+        });\n+        tabPaneOpaqueChkBox.setText(\"Opaque\");\n+\n+        JPanel checkBoxPanel = new JPanel();\n+        checkBoxPanel.add(tabPaneOpaqueChkBox);\n+        checkBoxPanel.add(contentOpaqueChkBox);\n+        checkBoxPanel.add(tabOpaqueChkBox);\n+\n+        panel.add(checkBoxPanel, BorderLayout.NORTH);\n+        frame.add(panel);\n+        frame.setSize(500, 500);\n+        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+        frame.setVisible(true);\n+        return frame;\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/javax\/swing\/JTabbedPane\/TestTabbedPaneOpacityInAqua.java","additions":172,"deletions":0,"binary":false,"changes":172,"status":"added"}]}