{"files":[{"patch":"@@ -30,1 +30,0 @@\n-#include \"utilities\/checkedCast.hpp\"\n@@ -35,1 +34,0 @@\n-#include <type_traits>\n@@ -106,4 +104,1 @@\n-template <typename E, bool is_const = true> class GrowableArrayIterator;\n-\n-template <typename E>\n-using GrowableArrayNonConstIterator = GrowableArrayIterator<E, false>;\n+template <typename E> class GrowableArrayIterator;\n@@ -197,8 +192,0 @@\n-  GrowableArrayIterator<E, false> ncbegin() {\n-    return GrowableArrayNonConstIterator<E>(this, 0);\n-  }\n-\n-  GrowableArrayIterator<E, false> ncend() {\n-    return GrowableArrayNonConstIterator<E>(this, length());\n-  }\n-\n@@ -881,1 +868,1 @@\n-template <typename E, bool is_const>\n+template <typename E>\n@@ -885,5 +872,3 @@\n-private:\n-  using C = std::conditional_t<is_const, const GrowableArrayView<E>, GrowableArrayView<E>>;\n-\n-  C* _array;     \/\/ GrowableArray we iterate over\n-  int _position; \/\/ The current position in the GrowableArray\n+ private:\n+  const GrowableArrayView<E>* _array; \/\/ GrowableArray we iterate over\n+  int _position;                      \/\/ The current position in the GrowableArray\n@@ -892,1 +877,1 @@\n-  GrowableArrayIterator(C* array, int position) : _array(array), _position(position) {\n+  GrowableArrayIterator(const GrowableArrayView<E>* array, int position) : _array(array), _position(position) {\n@@ -896,44 +881,4 @@\n-public:\n-  using value_type = std::conditional_t<is_const, const E, E>;\n-  using difference_type = int;\n-  using reference = std::add_lvalue_reference_t<value_type>;\n-\n-  GrowableArrayIterator() : _array(nullptr), _position(0) {}\n-\n-  GrowableArrayIterator operator+(difference_type i) const {\n-    int new_pos = checked_cast<int>(jlong(_position) + jlong(i));\n-    return GrowableArrayIterator(_array, new_pos);\n-  }\n-\n-  GrowableArrayIterator operator-(difference_type i) const {\n-    assert(i != min_jint, \"invalid operand\");\n-    return *this + (-i);\n-  }\n-\n-  GrowableArrayIterator& operator++() {\n-    assert(_position < _array->length(), \"illegal position\");\n-    ++_position;\n-    return *this;\n-  }\n-\n-  GrowableArrayIterator operator++(int) {\n-    GrowableArrayIterator old = *this;\n-    ++(*this);\n-    return old;\n-  }\n-\n-  GrowableArrayIterator& operator--() {\n-    assert(_position > 0, \"illegal position\");\n-    --_position;\n-    return *this;\n-  }\n-\n-  GrowableArrayIterator operator--(int) {\n-    GrowableArrayIterator old = *this;\n-    --(*this);\n-    return old;\n-  }\n-\n-  reference operator*() const {\n-    return _array->at(_position);\n-  }\n+ public:\n+  GrowableArrayIterator() : _array(nullptr), _position(0) { }\n+  GrowableArrayIterator& operator++() { ++_position; return *this; }\n+  E operator*()                       { return _array->at(_position); }\n@@ -941,1 +886,1 @@\n-  bool operator==(const GrowableArrayIterator& rhs) const {\n+  bool operator==(const GrowableArrayIterator& rhs)  {\n@@ -946,1 +891,1 @@\n-  bool operator!=(const GrowableArrayIterator& rhs) const {\n+  bool operator!=(const GrowableArrayIterator& rhs)  {\n@@ -950,10 +895,0 @@\n-\n-  bool operator<(const GrowableArrayIterator& rhs) const {\n-    assert(_array == rhs._array, \"iterator belongs to different array\");\n-    return _position < rhs._position;\n-  }\n-\n-  bool operator>(const GrowableArrayIterator& rhs) const {\n-    assert(_array == rhs._array, \"iterator belongs to different array\");\n-    return _position > rhs._position;\n-  }\n","filename":"src\/hotspot\/share\/utilities\/growableArray.hpp","additions":12,"deletions":77,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -32,1 +32,2 @@\n-\/\/ For the requirements for the parameters, see those of std::sort.\n+\/\/ comp should return a value > 0 iff the first argument is larger than the second argument. A full\n+\/\/ comparison function satisfies this requirement but a simple a > b ? 1 : 0 also satisfies it.\n@@ -35,3 +36,3 @@\n-  template <class RandomIt, class Compare>\n-  static void sort(RandomIt begin, RandomIt end, Compare comp) {\n-    if (begin == end) {\n+  template <class T, class Compare>\n+  static void sort(T* data, int size, Compare comp) {\n+    if (size == 0) {\n@@ -42,2 +43,4 @@\n-    for (RandomIt current = begin + 1; current < end; current++) {\n-      typename RandomIt::value_type current_elem = *current;\n+    T* begin = data;\n+    T* end = data + size;\n+    for (T* current = begin + 1; current < end; current++) {\n+      T current_elem = *current;\n@@ -46,2 +49,3 @@\n-      \/\/ location to insert the element at current\n-      RandomIt pos = current;\n+      \/\/ location to insert the element at current. In the meantime, shift all elements on the way\n+      \/\/ up by 1.\n+      T* pos = current;\n@@ -52,2 +56,2 @@\n-        RandomIt prev = pos - 1;\n-        if (!comp(current_elem, *prev)) {\n+        T* prev = pos - 1;\n+        if (comp(*prev, current_elem) <= 0) {\n@@ -57,0 +61,1 @@\n+        *pos = *prev;\n@@ -62,3 +67,0 @@\n-        for (RandomIt i = current; i > pos; i--) {\n-          *i = *(i - 1);\n-        }\n","filename":"src\/hotspot\/share\/utilities\/sort.hpp","additions":15,"deletions":13,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"utilities\/growableArray.hpp\"\n@@ -28,0 +27,1 @@\n+#include \"utilities\/powerOfTwo.hpp\"\n@@ -46,2 +46,3 @@\n-void test_insertion_sort() {\n-  for (int i = 0; i < TEST_ARRAY_SIZE; i++) {\n+void test_insertion_sort(int size) {\n+  assert(size <= TEST_ARRAY_SIZE, \"invalid parameter\");\n+  for (int i = 0; i < size; i++) {\n@@ -50,3 +51,2 @@\n-  GrowableArrayFromArray<int> view(ARRAY0, TEST_ARRAY_SIZE);\n-  InsertionSort::sort(view.ncbegin(), view.ncend(), [](int a, int b) {\n-    return a < b;\n+  InsertionSort::sort(ARRAY0, size, [](int a, int b) {\n+    return a > b ? 1 : 0;\n@@ -54,1 +54,1 @@\n-  for (int i = 0; i < TEST_ARRAY_SIZE - 1; i++) {\n+  for (int i = 0; i < size - 1; i++) {\n@@ -63,3 +63,5 @@\n-void test_insertion_sort_stable() {\n-  for (int i = 0; i < TEST_ARRAY_SIZE; i++) {\n-    ARRAY1[i] = TwoInt(os::random() & 15, i);\n+void test_insertion_sort_stable(int size, int key_bound) {\n+  assert(size <= TEST_ARRAY_SIZE, \"invalid parameter\");\n+  assert(is_power_of_2(key_bound), \"invalid parameter\");\n+  for (int i = 0; i < size; i++) {\n+    ARRAY1[i] = TwoInt(os::random() & (key_bound - 1), i);\n@@ -67,3 +69,2 @@\n-  GrowableArrayFromArray<TwoInt> view(ARRAY1, TEST_ARRAY_SIZE);\n-  InsertionSort::sort(view.ncbegin(), view.ncend(), [](TwoInt a, TwoInt b) {\n-    return a.val < b.val;\n+  InsertionSort::sort(ARRAY1, size, [](TwoInt a, TwoInt b) {\n+    return a.val > b.val ? 1 : 0;\n@@ -71,1 +72,1 @@\n-  for (int i = 0; i < TEST_ARRAY_SIZE - 1; i++) {\n+  for (int i = 0; i < size - 1; i++) {\n@@ -83,2 +84,10 @@\n-    test_insertion_sort();\n-    test_insertion_sort_stable();\n+    test_insertion_sort(0);\n+    test_insertion_sort(1);\n+    test_insertion_sort(2);\n+    test_insertion_sort(10);\n+    test_insertion_sort(TEST_ARRAY_SIZE);\n+    test_insertion_sort_stable(1, 1);\n+    test_insertion_sort_stable(2, 1);\n+    test_insertion_sort_stable(3, 2);\n+    test_insertion_sort_stable(10, 4);\n+    test_insertion_sort_stable(TEST_ARRAY_SIZE, 16);\n","filename":"test\/hotspot\/gtest\/utilities\/test_sort.cpp","additions":25,"deletions":16,"binary":false,"changes":41,"status":"modified"}]}