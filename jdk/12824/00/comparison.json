{"files":[{"patch":"@@ -530,1 +530,1 @@\n-          register_new_node(add1, n_loop->_head->in(LoopNode::EntryControl));\n+          register_new_node(add1, n_loop->_head->as_Loop()->skip_strip_mined(1)->in(LoopNode::EntryControl));\n@@ -551,1 +551,1 @@\n-          register_new_node(add1, n_loop->_head->in(LoopNode::EntryControl));\n+          register_new_node(add1, n_loop->_head->as_Loop()->skip_strip_mined(1)->in(LoopNode::EntryControl));\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2023, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8303511\n+ * @summary C2: assert(get_ctrl(n) == cle_out) during unrolling\n+ * @requires vm.gc.Parallel\n+ * @run main\/othervm -XX:-BackgroundCompilation -XX:+UseParallelGC TestAddPAtOuterLoopHead\n+ *\/\n+\n+\n+import java.util.Arrays;\n+\n+public class TestAddPAtOuterLoopHead {\n+    public static void main(String[] args) {\n+        boolean[] flags1 = new boolean[1000];\n+        boolean[] flags2 = new boolean[1000];\n+        Arrays.fill(flags2, true);\n+        for (int i = 0; i < 20_000; i++) {\n+            testHelper(42, 42, 43);\n+            test(flags1);\n+            test(flags2);\n+        }\n+    }\n+\n+    private static int test(boolean[] flags) {\n+        int[] array = new int[1000];\n+\n+        int k;\n+        for (k = 0; k < 10; k++) {\n+            for (int i = 0; i < 2; i++) {\n+            }\n+        }\n+        k = k \/ 10;\n+        int m;\n+        for (m = 0; m < 2; m++) {\n+            for (int i = 0; i < 2; i++) {\n+                for (int j = 0; j < 2; j++) {\n+                }\n+            }\n+        }\n+\n+\n+        int v  = 0;\n+        for (int j = 0; j < 2; j++) {\n+            for (int i = 0; i < 998; i += k) {\n+                int l = testHelper(m, j, i);\n+                v = array[i + l];\n+                if (flags[i]) {\n+                    return v;\n+                }\n+            }\n+        }\n+\n+        return v;\n+    }\n+\n+    private static int testHelper(int m, int j, int i) {\n+        return m == 2 ? j : i;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopstripmining\/TestAddPAtOuterLoopHead.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"}]}