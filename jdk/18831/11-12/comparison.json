{"files":[{"patch":"@@ -31,1 +31,1 @@\n-# Copy property files from share\/conf to CONF_DST_DIR\n+# Copy property file and template from share\/conf to CONF_DST_DIR\n@@ -35,1 +35,2 @@\n-    FILES := $(wildcard $(TOPDIR)\/src\/java.xml\/share\/conf\/jaxp*.properties*), \\\n+    SRC := $(TOPDIR)\/src\/java.xml\/share\/conf, \\\n+    FILES := jaxp.properties jaxp-strict.template, \\\n","filename":"make\/modules\/java.xml\/Copy.gmk","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -405,7 +405,0 @@\n- * <li><a href=\"#IN_CF\">JAXP Configuration Files<\/a>\n- *      <ul>\n- *      <li><a href=\"#IN_CF_DEFAULT\">{@code jaxp.properties}<\/a><\/li>\n- *      <li><a href=\"#IN_CF_STRICT\">{@code jaxp-strict.properties}<\/a><\/li>\n- *      <\/ul>\n- * <\/li>\n-\n@@ -426,26 +419,0 @@\n- * <h2 id=\"IN_CF\">JAXP Configuration Files<\/h2>\n- * The JDK provides two <a href=\"#Conf_CF\">JAXP Configuration Files<\/a>:\n- *\n- * <ul>\n- * <li id=\"IN_CF_DEFAULT\"><a href=\"#Conf_CF_Default\">{@code jaxp.properties}<\/a>:\n- * the default configuration that the JDK uses to set property values when XML\n- * factories are initiated.<\/li>\n- *\n- * <li id=\"IN_CF_STRICT\">{@code jaxp-strict.properties}: a configuration that\n- * contains more restrictive settings than the default {@code jaxp.properties}.\n- * In particular:\n- *     <ul>\n- *     <li><a href=\"#JDKCATALOG_RESOLVE\">JDKCatalog Resolve<\/a> is on \"strict\" setting <\/li>\n- *     <li><a href=\"#ExtFunc\">Extension Functions<\/a> are disabled <\/li>\n- *     <li><a href=\"#EELimit\">JAXP Limits<\/a> are set to smaller numbers <\/li>\n- *     <\/ul>\n- *\n- * Deploying with this configuration prevents processors from unknowingly making\n- * outbound network connections to fetch DTDs, or processing XML that makes use of\n- * extension functions.\n- * <\/li>\n- * <\/ul>\n- *\n- * The configuration settings in these properties files are subject to change\n- * from release to release.\n- *\n","filename":"src\/java.xml\/share\/classes\/module-info.java","additions":1,"deletions":34,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -1,118 +0,0 @@\n-################################################################################\n-#           JAXP Strict Configuration File\n-#\n-# This property file, jaxp-strict.properties, represents a more secure configuration\n-# for XML processing. It provides settings that are more restrictive than the\n-# current default jaxp.properties. In particular:\n-#   - JDKCatalog Resolve is on \"strict\" setting\n-#   - Extension Functions are disabled\n-#   - JAXP Limits are set to smaller numbers\n-#\n-# This configuration file can be set up using the system property\n-# java.xml.config.file to override the default configuration jaxp.properties\n-# and used to assess the impact of a stricter configuration, for example:\n-#\n-#     java -Djava.xml.config.file=$JAVA_HOME\/conf\/jaxp-strict.properties\n-#\n-# The system property java.xml.config.file is defined in the java.xml module\n-# description.\n-#\n-################################################################################\n-\n-#\n-# ---- Implementation Specific Properties ----\n-# For a complete list of properties, refer to the Implementation Specific Properties\n-# table in the java.xml\/module-summary.\n-#\n-# Extension Functions:\n-#\n-# This property determines whether XSLT and XPath extension functions are allowed.\n-# The value type is boolean and the default value is true (allowing\n-# extension functions). The following entry would override the default value and\n-# disallow extension functions:\n-#\n-jdk.xml.enableExtensionFunctions=false\n-#\n-#\n-# Overriding the default parser:\n-#\n-# This property allows using a third party implementation to override the default\n-# parser provided by the JDK. The value type is boolean and the default value is\n-# false, disallowing overriding the default parser. The setting below reflects\n-# the default property setting:\n-#\n-jdk.xml.overrideDefaultParser=false\n-#\n-# Implementation Specific Properties - jdkcatalog.resolve\n-#\n-# This property instructs the JDK default CatalogResolver to act in accordance with\n-# the setting when unable to resolve an external reference with the built-in Catalog.\n-# The options are:\n-#     continue -- indicates that the processing should continue\n-#     ignore -- indicates that the reference is skipped\n-#     strict -- indicates that the resolver should throw a CatalogException\n-#\n-# The following setting would cause the resolve to throw a CatalogException when\n-# external references are not resolved by a user-defined resolver or catalog,\n-# or the JDKCatalog:\n-jdk.xml.jdkcatalog.resolve=strict\n-#\n-# Implementation Specific Properties - DTD\n-#\n-# This property instructs the parsers to: deny, ignore or allow DTD processing.\n-# The following setting would cause the parser to reject DTD by throwing an exception.\n-# jdk.xml.dtd.support=deny\n-#\n-# The following setting permits the processor to continue processing DTDs. Note\n-# that while DTDs are allowed in this configuration, external references are\n-# restricted, and limits on DTD entities are tightened:\n-jdk.xml.dtd.support=allow\n-#\n-# Implementation Specific Properties - Limits\n-#\n-# Limits have a value type Integer. The values must be positive integers. Zero\n-# means no limit.\n-#\n-# Limits the number of entity expansions\n-jdk.xml.entityExpansionLimit=2500\n-#\n-# Limits the total size of all entities that include general and parameter entities.\n-# The size is calculated as an aggregation of all entities.\n-jdk.xml.totalEntitySizeLimit=100000\n-#\n-# Limits the maximum size of any general entities.\n-jdk.xml.maxGeneralEntitySizeLimit=100000\n-#\n-# Limits the maximum size of any parameter entities, including the result of\n-# nesting multiple parameter entities.\n-jdk.xml.maxParameterEntitySizeLimit=15000\n-#\n-# Limits the total number of nodes in all entity references.\n-jdk.xml.entityReplacementLimit=100000\n-#\n-# Limits the number of attributes an element can have. The default value is 10000.\n-jdk.xml.elementAttributeLimit=10000\n-#\n-# Limits the number of content model nodes that may be created when building a\n-# grammar for a W3C XML Schema that contains maxOccurs attributes with values\n-# other than \"unbounded\". The default value is 5000.\n-jdk.xml.maxOccurLimit=5000\n-#\n-# Limits the maximum element depth. The default value is 0.\n-jdk.xml.maxElementDepth=0\n-#\n-# Limits the maximum size of XML names, including element name, attribute name\n-# and namespace prefix and URI. The default value is 1000.\n-jdk.xml.maxXMLNameLimit=1000\n-#\n-#\n-# XPath Limits\n-#\n-# Limits the number of groups an XPath expression can contain. The default value is 10.\n-jdk.xml.xpathExprGrpLimit=10\n-#\n-# Limits the number of operators an XPath expression can contain. The default value is 100.\n-jdk.xml.xpathExprOpLimit=100\n-#\n-# Limits the total number of XPath operators in an XSL Stylesheet. The default value is 10000.\n-jdk.xml.xpathTotalOpLimit=10000\n","filename":"src\/java.xml\/share\/conf\/jaxp-strict.properties","additions":0,"deletions":118,"binary":false,"changes":118,"status":"deleted"},{"patch":"@@ -0,0 +1,123 @@\n+################################################################################\n+#           JAXP Strict Configuration Template\n+#\n+# This file, jaxp-strict.template, provides a template for creating custom\n+# configuration files. The settings in this file are more restrictive than those\n+# in the default configuration, jaxp.properties. In particular:\n+#   - JDKCatalog Resolve is on \"strict\" setting\n+#   - Extension Functions are disabled\n+#   - JAXP Limits are set to smaller numbers\n+#\n+# To create a configuration file, copy the template to a new file with\n+# the .properties extension, that is:\n+#\n+#     cp $JAVA_HOME\/conf\/jaxp-strict.template \/path\/to\/jaxp-strict.properties\n+#\n+# The configuration file can then be set up using the system property\n+# java.xml.config.file to override the default configuration jaxp.properties\n+# and used to assess the impact of a stricter configuration, for example:\n+#\n+#     java -Djava.xml.config.file=\/path\/to\/jaxp-strict.properties\n+#\n+# The system property java.xml.config.file is defined in the java.xml module\n+# description.\n+#\n+################################################################################\n+\n+#\n+# ---- Implementation Specific Properties ----\n+# For a complete list of properties, refer to the Implementation Specific Properties\n+# table in the java.xml\/module-summary.\n+#\n+# Extension Functions:\n+#\n+# This property determines whether XSLT and XPath extension functions are allowed.\n+# The value type is boolean and the default value is true (allowing\n+# extension functions). The following entry would override the default value and\n+# disallow extension functions:\n+#\n+jdk.xml.enableExtensionFunctions=false\n+#\n+#\n+# Overriding the default parser:\n+#\n+# This property allows using a third party implementation to override the default\n+# parser provided by the JDK. The value type is boolean and the default value is\n+# false, disallowing overriding the default parser. The setting below reflects\n+# the default property setting:\n+#\n+jdk.xml.overrideDefaultParser=false\n+#\n+# Implementation Specific Properties - jdkcatalog.resolve\n+#\n+# This property instructs the JDK default CatalogResolver to act in accordance with\n+# the setting when unable to resolve an external reference with the built-in Catalog.\n+# The options are:\n+#     continue -- indicates that the processing should continue\n+#     ignore -- indicates that the reference is skipped\n+#     strict -- indicates that the resolver should throw a CatalogException\n+#\n+# The following setting would cause the resolve to throw a CatalogException when\n+# external references are not resolved by a user-defined resolver or catalog,\n+# or the JDKCatalog:\n+jdk.xml.jdkcatalog.resolve=strict\n+#\n+# Implementation Specific Properties - DTD\n+#\n+# This property instructs the parsers to: deny, ignore or allow DTD processing.\n+# The following setting would cause the parser to reject DTD by throwing an exception.\n+# jdk.xml.dtd.support=deny\n+#\n+# The following setting permits the processor to continue processing DTDs. Note\n+# that while DTDs are allowed in this configuration, external references are\n+# restricted, and limits on DTD entities are tightened:\n+jdk.xml.dtd.support=allow\n+#\n+# Implementation Specific Properties - Limits\n+#\n+# Limits have a value type Integer. The values must be positive integers. Zero\n+# means no limit.\n+#\n+# Limits the number of entity expansions\n+jdk.xml.entityExpansionLimit=2500\n+#\n+# Limits the total size of all entities that include general and parameter entities.\n+# The size is calculated as an aggregation of all entities.\n+jdk.xml.totalEntitySizeLimit=100000\n+#\n+# Limits the maximum size of any general entities.\n+jdk.xml.maxGeneralEntitySizeLimit=100000\n+#\n+# Limits the maximum size of any parameter entities, including the result of\n+# nesting multiple parameter entities.\n+jdk.xml.maxParameterEntitySizeLimit=15000\n+#\n+# Limits the total number of nodes in all entity references.\n+jdk.xml.entityReplacementLimit=100000\n+#\n+# Limits the number of attributes an element can have. The default value is 10000.\n+jdk.xml.elementAttributeLimit=10000\n+#\n+# Limits the number of content model nodes that may be created when building a\n+# grammar for a W3C XML Schema that contains maxOccurs attributes with values\n+# other than \"unbounded\". The default value is 5000.\n+jdk.xml.maxOccurLimit=5000\n+#\n+# Limits the maximum element depth. The default value is 0.\n+jdk.xml.maxElementDepth=0\n+#\n+# Limits the maximum size of XML names, including element name, attribute name\n+# and namespace prefix and URI. The default value is 1000.\n+jdk.xml.maxXMLNameLimit=1000\n+#\n+#\n+# XPath Limits\n+#\n+# Limits the number of groups an XPath expression can contain. The default value is 10.\n+jdk.xml.xpathExprGrpLimit=10\n+#\n+# Limits the number of operators an XPath expression can contain. The default value is 100.\n+jdk.xml.xpathExprOpLimit=100\n+#\n+# Limits the total number of XPath operators in an XSL Stylesheet. The default value is 10000.\n+jdk.xml.xpathTotalOpLimit=10000\n","filename":"src\/java.xml\/share\/conf\/jaxp-strict.template","additions":123,"deletions":0,"binary":false,"changes":123,"status":"added"},{"patch":"@@ -28,0 +28,4 @@\n+import static common.util.TestBase.CONFIG_TEMPLATE_STRICT;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n@@ -36,3 +40,3 @@\n- * @run driver common.config.ConfigFileTest 1 \/\/ verifies jaxp-strict.properties\n- * @summary verifies the JAXP configuration files jaxp.properties and\n- * jaxp-strict.properties.\n+ * @run driver common.config.ConfigFileTest 1 \/\/ verifies jaxp-strict.template\n+ * @summary verifies the default JAXP configuration file jaxp.properties and\n+ * strict template jaxp-strict.template.\n@@ -43,0 +47,2 @@\n+    \/\/ target directory\n+    static String TEST_DIR = System.getProperty(\"test.classes\");\n@@ -67,1 +73,1 @@\n-    \/\/ values from jaxp-strict.properties\n+    \/\/ values from jaxp-strict.template\n@@ -80,0 +86,1 @@\n+        String conf = System.getProperty(\"java.home\") + \"\/conf\/\";\n@@ -81,1 +88,1 @@\n-            verifyConfig(CONFIG_DEFAULT, defaultValues);\n+            verifyConfig(conf + CONFIG_DEFAULT, defaultValues);\n@@ -83,1 +90,3 @@\n-            verifyConfig(CONFIG_STRICT, strictValues);\n+            Path config = Paths.get(TEST_DIR, CONFIG_STRICT);\n+            Files.copy(Paths.get(conf, CONFIG_TEMPLATE_STRICT), config);\n+            verifyConfig(config.toString(), strictValues);\n@@ -93,2 +102,1 @@\n-        String javaHome = System.getProperty(\"java.home\");\n-        System.setProperty(SP_CONFIG, javaHome + \"\/conf\/\" + filename);\n+        System.setProperty(SP_CONFIG, filename);\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/ConfigFileTest.java","additions":16,"deletions":8,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -128,1 +128,1 @@\n-    public static final String CONFIG_COMPAT = \"jaxp-compat.properties\";\n+    public static final String CONFIG_TEMPLATE_STRICT = \"jaxp-strict.template\";\n@@ -142,3 +142,0 @@\n-        \/\/ JAXP Configuration Files to be added to $JAVA_HOME\/conf\/\n-        CONFIG_FILE_STRICT(null, CONFIG_FILE, Type.FEATURE, getPath(CONFIG_FILE_PATH, CONFIG_STRICT)),\n-        CONFIG_FILE_COMPAT(null, CONFIG_FILE, Type.FEATURE, getPath(CONFIG_FILE_PATH, CONFIG_COMPAT)),\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/util\/TestBase.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"}]}