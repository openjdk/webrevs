{"files":[{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+include Modules.gmk\n@@ -29,0 +30,6 @@\n+#\n+# Copy property files from share\/conf to CONF_DST_DIR LIB_DST_DIR\n+#\n+JAXPPROPFILE_SRC_DIR := $(TOPDIR)\/src\/java.xml\/share\/conf\n+JAXPPROPFILE_SRCS := $(wildcard $(JAXPPROPFILE_SRC_DIR)\/jaxp*.properties*)\n+JAXPPROPFILE_TARGET_FILES := $(subst $(JAXPPROPFILE_SRC_DIR),$(CONF_DST_DIR),$(JAXPPROPFILE_SRCS))\n@@ -30,3 +37,1 @@\n-XML_LIB_SRC := $(TOPDIR)\/src\/java.xml\/share\/conf\n-\n-$(CONF_DST_DIR)\/jaxp.properties: $(XML_LIB_SRC)\/jaxp.properties\n+$(CONF_DST_DIR)\/%: $(JAXPPROPFILE_SRC_DIR)\/%\n@@ -35,2 +40,1 @@\n-TARGETS := $(CONF_DST_DIR)\/jaxp.properties\n-\n+TARGETS += $(JAXPPROPFILE_TARGET_FILES)\n","filename":"make\/modules\/java.xml\/Copy.gmk","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -405,0 +405,8 @@\n+ * <li><a href=\"#IN_CF\">JAXP Configuration Files<\/a>\n+ *      <ul>\n+ *      <li><a href=\"#IN_CF_DEFAULT\">{@code jaxp.properties}<\/a><\/li>\n+ *      <li><a href=\"#IN_CF_STRICT\">{@code jaxp-strict.properties}<\/a><\/li>\n+ *      <li><a href=\"#IN_CF_COMPAT\">{@code jaxp-compat.properties}<\/a><\/li>\n+ *      <\/ul>\n+ * <\/li>\n+\n@@ -419,0 +427,31 @@\n+ * <h2 id=\"IN_CF\">JAXP Configuration Files<\/h2>\n+ * The JDK provides three <a href=\"#Conf_CF\">JAXP Configuration Files<\/a>:\n+ *\n+ * <ul>\n+ * <li id=\"IN_CF_DEFAULT\"><a href=\"#Conf_CF_Default\">{@code jaxp.properties}<\/a>:\n+ * the default configuration that the JDK uses to set property values when XML\n+ * factories are initiated.<\/li>\n+ *\n+ * <li id=\"IN_CF_STRICT\">{@code jaxp-strict.properties}: a configuration that\n+ * contains more restrictive settings than the default {@code jaxp.properties}.\n+ * In particular:\n+ *     <ul>\n+ *     <li><a href=\"#JDKCATALOG_RESOLVE\">JDKCatalog Resolve<\/a> is on \"strict\" setting <\/li>\n+ *     <li><a href=\"#ExtFunc\">Extension Functions<\/a> are disabled <\/li>\n+ *     <li><a href=\"#EELimit\">JAXP Limits<\/a> are set to smaller numbers <\/li>\n+ *     <\/ul>\n+ *\n+ * This file allows deployments to test the more secure\/strict behavior,\n+ * identify issues such as a processor unknowingly makes outbound network\n+ * connections to fetch DTD, or processes XML that relies on extension functions.\n+ * <\/li>\n+ *\n+ * <li id=\"IN_CF_COMPAT\">{@code jaxp-compat.properties}: a configuration specifying\n+ * the property values that are the same as the properties' default values. It can\n+ * be used to regain compatibility from a more strict configuration in a future release.\n+ * The difference from the default {@code jaxp.properties} is that it contains\n+ * additional properties that were not included in {@code jaxp.properties},\n+ * setting them to their default values.<\/li>\n+ * <\/ul>\n+ *\n+ *\n","filename":"src\/java.xml\/share\/classes\/module-info.java","additions":40,"deletions":1,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -4,4 +4,0 @@\n-# ** Warning: unsafe configuration, use with security assessment\n-# ** Note: this file can change over time as the security configuration evolves\n-# ** along with new development. They may also be phased out and removed.\n-#\n@@ -39,0 +35,6 @@\n+#\n+# The pathname to the configuration file must be valid. If it is not absolute,\n+# it will be considered relative to the working directory of the JVM. If there\n+# is an error reading the configuration file, the configuration process proceeds\n+# as if the java.xml.config.file property was not set.\n+#\n","filename":"src\/java.xml\/share\/conf\/jaxp-compat.properties","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -4,3 +4,0 @@\n-# ** Note: this file can change over time as the security configuration evolves\n-# ** along with new development. They may also be phased out and removed.\n-#\n@@ -37,0 +34,6 @@\n+#\n+# The pathname to the configuration file must be valid. If it is not absolute,\n+# it will be considered relative to the working directory of the JVM. If there\n+# is an error reading the configuration file, the configuration process proceeds\n+# as if the java.xml.config.file property was not set.\n+#\n","filename":"src\/java.xml\/share\/conf\/jaxp-strict.properties","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import common.util.TestBase;\n+import static common.util.TestBase.CONFIG_COMPAT;\n+import static common.util.TestBase.CONFIG_STRICT;\n+import java.util.stream.IntStream;\n+import javax.xml.transform.TransformerFactory;\n+\n+\/**\n+ * @test @bug 8330542\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run driver common.config.ConfigFileTest 0 \/\/ verifies jaxp-strict.properties\n+ * @run driver common.config.ConfigFileTest 1 \/\/ verifies jaxp-compat.properties\n+ * @summary verifies the JAXP configuration files jaxp-strict.properties and\n+ * jaxp-compat.properties.\n+ *\/\n+public class ConfigFileTest {\n+    \/\/ system property for custom configuration file\n+    static final String SP_CONFIG = \"java.xml.config.file\";\n+\n+    \/\/ properties in the configuration file\n+    String[] keys = {\n+        \"jdk.xml.enableExtensionFunctions\",\n+        \"jdk.xml.overrideDefaultParser\",\n+        \"jdk.xml.jdkcatalog.resolve\",\n+        \"jdk.xml.dtd.support\",\n+        \"jdk.xml.entityExpansionLimit\",\n+        \"jdk.xml.totalEntitySizeLimit\",\n+        \"jdk.xml.maxGeneralEntitySizeLimit\",\n+        \"jdk.xml.maxParameterEntitySizeLimit\",\n+        \"jdk.xml.entityReplacementLimit\",\n+        \"jdk.xml.elementAttributeLimit\",\n+        \"jdk.xml.maxOccurLimit\",\n+        \"jdk.xml.maxElementDepth\",\n+        \"jdk.xml.maxXMLNameLimit\",\n+        \"jdk.xml.xpathExprGrpLimit\",\n+        \"jdk.xml.xpathExprOpLimit\",\n+        \"jdk.xml.xpathTotalOpLimit\"};\n+\n+    \/\/ type of properties\n+    boolean[] propertyIsFeature ={true, true, false, false, false, false,\n+        false, false, false, false, false, false, false, false, false, false};\n+\n+    \/\/ values from jaxp-strict.properties\n+    String[] strictValues ={\"false\", \"false\", \"strict\", \"allow\", \"2500\", \"100000\",\n+        \"100000\", \"15000\", \"100000\", \"10000\", \"5000\", \"0\", \"1000\", \"10\", \"100\", \"10000\"};\n+\n+    \/\/ values from jaxp-compat.properties\n+    String[] compatValues ={\"true\", \"false\", \"continue\", \"allow\", \"64000\", \"10000000\",\n+        \"0\", \"1000000\", \"3000000\", \"10000\", \"5000\", \"0\", \"1000\", \"10\", \"100\", \"10000\"};\n+\n+    public static void main(String args[]) throws Exception {\n+        new ConfigFileTest().run(args[0]);\n+    }\n+\n+    public void run(String index) throws Exception {\n+        if (index.equals(\"0\")) {\n+            verifyConfig(CONFIG_STRICT, strictValues);\n+        } else {\n+            verifyConfig(CONFIG_COMPAT, compatValues);\n+        }\n+    }\n+\n+    \/**\n+     * Verifies a configuration file by iterating through its property settings.\n+     * @param filename the configuration file\n+     * @param values expected values in the configuration file\n+     *\/\n+    private void verifyConfig(String filename, String[] values) {\n+        String javaHome = System.getProperty(\"java.home\");\n+        System.setProperty(SP_CONFIG, javaHome + \"\/conf\/\" + filename);\n+\n+        TransformerFactory tf = TransformerFactory.newInstance();\n+        IntStream.range(0, keys.length).forEach(i -> {\n+            if (propertyIsFeature[i]) {\n+                TestBase.Assert.assertEquals(tf.getFeature(keys[i]), Boolean.parseBoolean(values[i]));\n+            } else {\n+                TestBase.Assert.assertEquals(tf.getAttribute(keys[i]), values[i]);\n+            }\n+        });\n+        System.clearProperty(SP_CONFIG);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/ConfigFileTest.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+import java.util.Objects;\n@@ -124,0 +125,4 @@\n+    \/\/ JAXP Configuration Files to be added to $JAVA_HOME\/conf\/\n+    public static final String CONFIG_STRICT = \"jaxp-strict.properties\";\n+    public static final String CONFIG_COMPAT = \"jaxp-compat.properties\";\n+\n@@ -136,0 +141,4 @@\n+        \/\/ JAXP Configuration Files to be added to $JAVA_HOME\/conf\/\n+        CONFIG_FILE_STRICT(null, CONFIG_FILE, Type.FEATURE, getPath(CONFIG_FILE_PATH, CONFIG_STRICT)),\n+        CONFIG_FILE_COMPAT(null, CONFIG_FILE, Type.FEATURE, getPath(CONFIG_FILE_PATH, CONFIG_COMPAT)),\n+\n@@ -718,1 +727,1 @@\n-    static class Assert {\n+    public static class Assert {\n@@ -736,0 +745,6 @@\n+\n+        public static void assertEquals(Object actual, Object expected) {\n+            if (!Objects.equals(actual, expected)) {\n+                throw new RuntimeException(\"Expected: \" + expected + \" but actual result was \" + actual);\n+            }\n+        }\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/util\/TestBase.java","additions":17,"deletions":2,"binary":false,"changes":19,"status":"modified"}]}