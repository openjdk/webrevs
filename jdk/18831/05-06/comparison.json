{"files":[{"patch":"@@ -428,1 +428,1 @@\n- * The JDK provides three <a href=\"#Conf_CF\">JAXP Configuration Files<\/a>:\n+ * The JDK provides two <a href=\"#Conf_CF\">JAXP Configuration Files<\/a>:\n@@ -448,7 +448,0 @@\n- *\n- * <li id=\"IN_CF_COMPAT\">{@code jaxp-compat.properties}: a configuration specifying\n- * the property values that are the same as the properties' default values. It can\n- * be used to regain compatibility from a more strict configuration in a future release.\n- * The difference from the default {@code jaxp.properties} is that it contains\n- * additional properties that were not included in {@code jaxp.properties},\n- * setting them to their default values.<\/li>\n","filename":"src\/java.xml\/share\/classes\/module-info.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1,137 +0,0 @@\n-################################################################################\n-#           JAXP Compatibility Configuration File\n-#\n-# This is one of the three configuration files provided in the JDK:\n-#\n-# jaxp.properties: this is the default configuration that the JDK uses to set\n-# property values when XML factories are initiated.\n-#\n-# jaxp-strict.properties: this property file provides settings that will be\n-# equivalent to what will be the default JAXP settings in a future release to\n-# make the use of JAXP more secure by default. This file allows deployments to\n-# test the more secure\/strict behavior, identify issues such as a processor\n-# unknowingly makes outbound network connections to fetch DTD, or processes XML\n-# that relies on extension functions.\n-#\n-# jaxp-compat.properties: this configuration specifies the property values that\n-# are the same as the properties' default values. It can be used to regain\n-# compatibility from a more strict configuration in a future release.\n-# The difference from the default `jaxp.properties` is that it contains additional\n-# properties that were not included in jaxp.properties, setting them to their\n-# default values.\n-#\n-# In this configuration, properties that have more restrictive settings as in the\n-# strict configuration (jaxp-strict.properties) are reversed back to their\n-# defaults. In particular:\n-#   - JDKCatalog Resolve is set to \"continue\"\n-#   - Extension Functions are enabled\n-#   - JAXP Limits are set to their default values\n-#\n-# This configuration file can be used to reverse back to a working environment\n-# prior to any more restrictive configuration that may have been applied.\n-# Use the system property java.xml.config.file to override the default configuration:\n-#\n-#     java -Djava.xml.config.file=$JAVA_HOME\/conf\/jaxp-compat.properties\n-#\n-# The pathname to the configuration file must be valid. If it is not absolute,\n-# it will be considered relative to the working directory of the JVM. If there\n-# is an error reading the configuration file, the configuration process proceeds\n-# as if the java.xml.config.file property was not set.\n-#\n-################################################################################\n-\n-#\n-# ---- Implementation Specific Properties ----\n-# For a complete list of properties, refer to the Implementation Specific Properties\n-# table in the java.xml\/module-summary.\n-#\n-# Extension Functions:\n-#\n-# This property determines whether XSLT and XPath extension functions are allowed.\n-# The value type is boolean and the default value is true (allowing\n-# extension functions). The following entry would override any change that may\n-# have been made by the default configuration:\n-#\n-jdk.xml.enableExtensionFunctions=true\n-#\n-#\n-# Overriding the default parser:\n-#\n-# This property allows using a third party implementation to override the default\n-# parser provided by the JDK. The value type is boolean and the default value is\n-# false, disallowing overriding the default parser. The setting below reflects\n-# the default property setting:\n-#\n-jdk.xml.overrideDefaultParser=false\n-#\n-# Implementation Specific Properties - jdkcatalog.resolve\n-#\n-# This property instructs the JDK default CatalogResolver to act in accordance with\n-# the setting when unable to resolve an external reference with the built-in Catalog.\n-# The options are:\n-#     continue -- indicates that the processing should continue\n-#     ignore -- indicates that the reference is skipped\n-#     strict -- indicates that the resolver should throw a CatalogException\n-#\n-# The following setting would allow the resolution to continue in cases where\n-# external references are not resolved by a user-defined resolver or catalog if\n-# any, and the JDKCatalog:\n-jdk.xml.jdkcatalog.resolve=continue\n-#\n-# Implementation Specific Properties - DTD\n-#\n-# This property instructs the parsers to: deny, ignore or allow DTD processing.\n-# The following setting would cause the parser to reject DTD by throwing an exception.\n-# jdk.xml.dtd.support=deny\n-#\n-# The following setting permits the processor to continue processing DTDs\n-jdk.xml.dtd.support=allow\n-#\n-# Implementation Specific Properties - Limits\n-#\n-# Limits have a value type Integer. The values must be positive integers. Zero\n-# means no limit.\n-#\n-# Limits the number of entity expansions\n-jdk.xml.entityExpansionLimit=64000\n-#\n-# Limits the total size of all entities that include general and parameter entities.\n-# The size is calculated as an aggregation of all entities.\n-jdk.xml.totalEntitySizeLimit=10000000\n-#\n-# Limits the maximum size of any general entities.\n-jdk.xml.maxGeneralEntitySizeLimit=0\n-#\n-# Limits the maximum size of any parameter entities, including the result of\n-# nesting multiple parameter entities.\n-jdk.xml.maxParameterEntitySizeLimit=1000000\n-#\n-# Limits the total number of nodes in all entity references.\n-jdk.xml.entityReplacementLimit=3000000\n-#\n-# Limits the number of attributes an element can have. The default value is 10000.\n-jdk.xml.elementAttributeLimit=10000\n-#\n-# Limits the number of content model nodes that may be created when building a\n-# grammar for a W3C XML Schema that contains maxOccurs attributes with values\n-# other than \"unbounded\". The default value is 5000.\n-jdk.xml.maxOccurLimit=5000\n-#\n-# Limits the maximum element depth. The default value is 0.\n-jdk.xml.maxElementDepth=0\n-#\n-# Limits the maximum size of XML names, including element name, attribute name\n-# and namespace prefix and URI. The default value is 1000.\n-jdk.xml.maxXMLNameLimit=1000\n-#\n-#\n-# XPath Limits\n-#\n-# Limits the number of groups an XPath expression can contain. The default value is 10.\n-jdk.xml.xpathExprGrpLimit=10\n-#\n-# Limits the number of operators an XPath expression can contain. The default value is 100.\n-jdk.xml.xpathExprOpLimit=100\n-#\n-# Limits the total number of XPath operators in an XSL Stylesheet. The default value is 10000.\n-jdk.xml.xpathTotalOpLimit=10000\n","filename":"src\/java.xml\/share\/conf\/jaxp-compat.properties","additions":0,"deletions":137,"binary":false,"changes":137,"status":"deleted"},{"patch":"@@ -4,6 +4,1 @@\n-# This is one of the three configuration files provided in the JDK:\n-#\n-# jaxp.properties: this is the default configuration that the JDK uses to set\n-# property values when XML factories are initiated.\n-#\n-# jaxp-strict.properties: this property file provides settings that will be\n+# This property file, jaxp-strict.properties, provides settings that will be\n@@ -16,9 +11,2 @@\n-# jaxp-compat.properties: this configuration specifies the property values that\n-# are the same as the properties' default values. It can be used to regain\n-# compatibility from a more strict configuration in a future release.\n-# The difference from the default `jaxp.properties` is that it contains additional\n-# properties that were not included in jaxp.properties, setting them to their\n-# default values.\n-#\n-# This file, jaxp-strict.properties represents more restrictive settings than the\n-# default jaxp.properties. In particular:\n+# It represents more restrictive settings than the current default jaxp.properties.\n+# In particular:\n@@ -31,1 +19,1 @@\n-# and used to assess the impact of a stricter configuration:\n+# and used to assess the impact of a stricter configuration, for example:\n@@ -35,0 +23,3 @@\n+# It is recommended that you make a copy of this file and create your own\n+# configuration file for the experiment.\n+#\n","filename":"src\/java.xml\/share\/conf\/jaxp-strict.properties","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-# jdk.xml.enableExtensionFunctions=false\n+jdk.xml.enableExtensionFunctions=true\n@@ -140,3 +140,4 @@\n-# The following setting would cause the resolve to throw a CatalogException when\n-# unable to resolve an external reference:\n-# jdk.xml.jdkcatalog.resolve=strict\n+# The following setting would allow the resolution to continue in cases where\n+# external references are not resolved by a user-defined resolver or catalog if\n+# any, and the JDKCatalog:\n+jdk.xml.jdkcatalog.resolve=continue\n@@ -150,0 +151,3 @@\n+# The following setting permits the processor to continue processing DTDs\n+jdk.xml.dtd.support=allow\n+#\n@@ -156,1 +160,1 @@\n-# jdk.xml.entityExpansionLimit=64000\n+jdk.xml.entityExpansionLimit=64000\n@@ -160,1 +164,1 @@\n-# jdk.xml.totalEntitySizeLimit=5E7\n+jdk.xml.totalEntitySizeLimit=10000000\n@@ -163,1 +167,1 @@\n-# jdk.xml.maxGeneralEntitySizeLimit=0\n+jdk.xml.maxGeneralEntitySizeLimit=0\n@@ -167,1 +171,1 @@\n-# jdk.xml.maxParameterEntitySizeLimit=1E6\n+jdk.xml.maxParameterEntitySizeLimit=1000000\n@@ -170,1 +174,1 @@\n-# jdk.xml.entityReplacementLimit=3E6\n+jdk.xml.entityReplacementLimit=3000000\n@@ -173,1 +177,1 @@\n-# jdk.xml.elementAttributeLimit=10000\n+jdk.xml.elementAttributeLimit=10000\n@@ -178,1 +182,1 @@\n-# jdk.xml.maxOccurLimit=5000\n+jdk.xml.maxOccurLimit=5000\n@@ -181,1 +185,1 @@\n-# jdk.xml.maxElementDepth=0\n+jdk.xml.maxElementDepth=0\n@@ -198,1 +202,0 @@\n-\n","filename":"src\/java.xml\/share\/conf\/jaxp.properties","additions":16,"deletions":13,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-import static common.util.TestBase.CONFIG_COMPAT;\n+import static common.util.TestBase.CONFIG_DEFAULT;\n@@ -35,4 +35,4 @@\n- * @run driver common.config.ConfigFileTest 0 \/\/ verifies jaxp-strict.properties\n- * @run driver common.config.ConfigFileTest 1 \/\/ verifies jaxp-compat.properties\n- * @summary verifies the JAXP configuration files jaxp-strict.properties and\n- * jaxp-compat.properties.\n+ * @run driver common.config.ConfigFileTest 0 \/\/ verifies jaxp.properties\n+ * @run driver common.config.ConfigFileTest 1 \/\/ verifies jaxp-strict.properties\n+ * @summary verifies the JAXP configuration files jaxp.properties and\n+ * jaxp-strict.properties.\n@@ -71,2 +71,2 @@\n-    \/\/ values from jaxp-compat.properties\n-    String[] compatValues ={\"true\", \"false\", \"continue\", \"allow\", \"64000\", \"10000000\",\n+    \/\/ values from jaxp.properties, as of JDK 23\n+    String[] defaultValues ={\"true\", \"false\", \"continue\", \"allow\", \"64000\", \"10000000\",\n@@ -81,1 +81,1 @@\n-            verifyConfig(CONFIG_STRICT, strictValues);\n+            verifyConfig(CONFIG_DEFAULT, defaultValues);\n@@ -83,1 +83,1 @@\n-            verifyConfig(CONFIG_COMPAT, compatValues);\n+            verifyConfig(CONFIG_STRICT, strictValues);\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/ConfigFileTest.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -126,0 +126,1 @@\n+    public static final String CONFIG_DEFAULT = \"jaxp.properties\";\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/util\/TestBase.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}