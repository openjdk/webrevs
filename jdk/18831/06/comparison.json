{"files":[{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+include Modules.gmk\n@@ -29,0 +30,6 @@\n+#\n+# Copy property files from share\/conf to CONF_DST_DIR LIB_DST_DIR\n+#\n+JAXPPROPFILE_SRC_DIR := $(TOPDIR)\/src\/java.xml\/share\/conf\n+JAXPPROPFILE_SRCS := $(wildcard $(JAXPPROPFILE_SRC_DIR)\/jaxp*.properties*)\n+JAXPPROPFILE_TARGET_FILES := $(subst $(JAXPPROPFILE_SRC_DIR),$(CONF_DST_DIR),$(JAXPPROPFILE_SRCS))\n@@ -30,3 +37,1 @@\n-XML_LIB_SRC := $(TOPDIR)\/src\/java.xml\/share\/conf\n-\n-$(CONF_DST_DIR)\/jaxp.properties: $(XML_LIB_SRC)\/jaxp.properties\n+$(CONF_DST_DIR)\/%: $(JAXPPROPFILE_SRC_DIR)\/%\n@@ -35,2 +40,1 @@\n-TARGETS := $(CONF_DST_DIR)\/jaxp.properties\n-\n+TARGETS += $(JAXPPROPFILE_TARGET_FILES)\n","filename":"make\/modules\/java.xml\/Copy.gmk","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -405,0 +405,8 @@\n+ * <li><a href=\"#IN_CF\">JAXP Configuration Files<\/a>\n+ *      <ul>\n+ *      <li><a href=\"#IN_CF_DEFAULT\">{@code jaxp.properties}<\/a><\/li>\n+ *      <li><a href=\"#IN_CF_STRICT\">{@code jaxp-strict.properties}<\/a><\/li>\n+ *      <li><a href=\"#IN_CF_COMPAT\">{@code jaxp-compat.properties}<\/a><\/li>\n+ *      <\/ul>\n+ * <\/li>\n+\n@@ -419,0 +427,24 @@\n+ * <h2 id=\"IN_CF\">JAXP Configuration Files<\/h2>\n+ * The JDK provides two <a href=\"#Conf_CF\">JAXP Configuration Files<\/a>:\n+ *\n+ * <ul>\n+ * <li id=\"IN_CF_DEFAULT\"><a href=\"#Conf_CF_Default\">{@code jaxp.properties}<\/a>:\n+ * the default configuration that the JDK uses to set property values when XML\n+ * factories are initiated.<\/li>\n+ *\n+ * <li id=\"IN_CF_STRICT\">{@code jaxp-strict.properties}: a configuration that\n+ * contains more restrictive settings than the default {@code jaxp.properties}.\n+ * In particular:\n+ *     <ul>\n+ *     <li><a href=\"#JDKCATALOG_RESOLVE\">JDKCatalog Resolve<\/a> is on \"strict\" setting <\/li>\n+ *     <li><a href=\"#ExtFunc\">Extension Functions<\/a> are disabled <\/li>\n+ *     <li><a href=\"#EELimit\">JAXP Limits<\/a> are set to smaller numbers <\/li>\n+ *     <\/ul>\n+ *\n+ * This file allows deployments to test the more secure\/strict behavior,\n+ * identify issues such as a processor unknowingly makes outbound network\n+ * connections to fetch DTD, or processes XML that relies on extension functions.\n+ * <\/li>\n+ * <\/ul>\n+ *\n+ *\n","filename":"src\/java.xml\/share\/classes\/module-info.java","additions":33,"deletions":1,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -0,0 +1,129 @@\n+################################################################################\n+#           JAXP Strict Configuration File\n+#\n+# This property file, jaxp-strict.properties, provides settings that will be\n+# equivalent to what will be the default JAXP settings in a future release to\n+# make the use of JAXP more secure by default. This file allows deployments to\n+# test the more secure\/strict behavior, identify issues such as a processor\n+# unknowingly makes outbound network connections to fetch DTD, or processes XML\n+# that relies on extension functions.\n+#\n+# It represents more restrictive settings than the current default jaxp.properties.\n+# In particular:\n+#   - JDKCatalog Resolve is on \"strict\" setting\n+#   - Extension Functions are disabled\n+#   - JAXP Limits are set to smaller numbers\n+#\n+# This configuration file can be set up using the system property\n+# java.xml.config.file to override the default configuration jaxp.properties\n+# and used to assess the impact of a stricter configuration, for example:\n+#\n+#     java -Djava.xml.config.file=$JAVA_HOME\/conf\/jaxp-strict.properties\n+#\n+# It is recommended that you make a copy of this file and create your own\n+# configuration file for the experiment.\n+#\n+# The pathname to the configuration file must be valid. If it is not absolute,\n+# it will be considered relative to the working directory of the JVM. If there\n+# is an error reading the configuration file, the configuration process proceeds\n+# as if the java.xml.config.file property was not set.\n+#\n+################################################################################\n+\n+#\n+# ---- Implementation Specific Properties ----\n+# For a complete list of properties, refer to the Implementation Specific Properties\n+# table in the java.xml\/module-summary.\n+#\n+# Extension Functions:\n+#\n+# This property determines whether XSLT and XPath extension functions are allowed.\n+# The value type is boolean and the default value is true (allowing\n+# extension functions). The following entry would override the default value and\n+# disallow extension functions:\n+#\n+jdk.xml.enableExtensionFunctions=false\n+#\n+#\n+# Overriding the default parser:\n+#\n+# This property allows using a third party implementation to override the default\n+# parser provided by the JDK. The value type is boolean and the default value is\n+# false, disallowing overriding the default parser. The setting below reflects\n+# the default property setting:\n+#\n+jdk.xml.overrideDefaultParser=false\n+#\n+# Implementation Specific Properties - jdkcatalog.resolve\n+#\n+# This property instructs the JDK default CatalogResolver to act in accordance with\n+# the setting when unable to resolve an external reference with the built-in Catalog.\n+# The options are:\n+#     continue -- indicates that the processing should continue\n+#     ignore -- indicates that the reference is skipped\n+#     strict -- indicates that the resolver should throw a CatalogException\n+#\n+# The following setting would cause the resolve to throw a CatalogException when\n+# external references are not resolved by a user-defined resolver or catalog,\n+# or the JDKCatalog:\n+jdk.xml.jdkcatalog.resolve=strict\n+#\n+# Implementation Specific Properties - DTD\n+#\n+# This property instructs the parsers to: deny, ignore or allow DTD processing.\n+# The following setting would cause the parser to reject DTD by throwing an exception.\n+# jdk.xml.dtd.support=deny\n+#\n+# The following setting permits the processor to continue processing DTDs. Note\n+# that while DTDs are allowed in this configuration, external references are\n+# restricted, and limits on DTD entities are tightened:\n+jdk.xml.dtd.support=allow\n+#\n+# Implementation Specific Properties - Limits\n+#\n+# Limits have a value type Integer. The values must be positive integers. Zero\n+# means no limit.\n+#\n+# Limits the number of entity expansions\n+jdk.xml.entityExpansionLimit=2500\n+#\n+# Limits the total size of all entities that include general and parameter entities.\n+# The size is calculated as an aggregation of all entities.\n+jdk.xml.totalEntitySizeLimit=100000\n+#\n+# Limits the maximum size of any general entities.\n+jdk.xml.maxGeneralEntitySizeLimit=100000\n+#\n+# Limits the maximum size of any parameter entities, including the result of\n+# nesting multiple parameter entities.\n+jdk.xml.maxParameterEntitySizeLimit=15000\n+#\n+# Limits the total number of nodes in all entity references.\n+jdk.xml.entityReplacementLimit=100000\n+#\n+# Limits the number of attributes an element can have. The default value is 10000.\n+jdk.xml.elementAttributeLimit=10000\n+#\n+# Limits the number of content model nodes that may be created when building a\n+# grammar for a W3C XML Schema that contains maxOccurs attributes with values\n+# other than \"unbounded\". The default value is 5000.\n+jdk.xml.maxOccurLimit=5000\n+#\n+# Limits the maximum element depth. The default value is 0.\n+jdk.xml.maxElementDepth=0\n+#\n+# Limits the maximum size of XML names, including element name, attribute name\n+# and namespace prefix and URI. The default value is 1000.\n+jdk.xml.maxXMLNameLimit=1000\n+#\n+#\n+# XPath Limits\n+#\n+# Limits the number of groups an XPath expression can contain. The default value is 10.\n+jdk.xml.xpathExprGrpLimit=10\n+#\n+# Limits the number of operators an XPath expression can contain. The default value is 100.\n+jdk.xml.xpathExprOpLimit=100\n+#\n+# Limits the total number of XPath operators in an XSL Stylesheet. The default value is 10000.\n+jdk.xml.xpathTotalOpLimit=10000\n","filename":"src\/java.xml\/share\/conf\/jaxp-strict.properties","additions":129,"deletions":0,"binary":false,"changes":129,"status":"added"},{"patch":"@@ -64,1 +64,1 @@\n-# jdk.xml.enableExtensionFunctions=false\n+jdk.xml.enableExtensionFunctions=true\n@@ -140,3 +140,4 @@\n-# The following setting would cause the resolve to throw a CatalogException when\n-# unable to resolve an external reference:\n-# jdk.xml.jdkcatalog.resolve=strict\n+# The following setting would allow the resolution to continue in cases where\n+# external references are not resolved by a user-defined resolver or catalog if\n+# any, and the JDKCatalog:\n+jdk.xml.jdkcatalog.resolve=continue\n@@ -150,0 +151,3 @@\n+# The following setting permits the processor to continue processing DTDs\n+jdk.xml.dtd.support=allow\n+#\n@@ -156,1 +160,1 @@\n-# jdk.xml.entityExpansionLimit=64000\n+jdk.xml.entityExpansionLimit=64000\n@@ -160,1 +164,1 @@\n-# jdk.xml.totalEntitySizeLimit=5E7\n+jdk.xml.totalEntitySizeLimit=10000000\n@@ -163,1 +167,1 @@\n-# jdk.xml.maxGeneralEntitySizeLimit=0\n+jdk.xml.maxGeneralEntitySizeLimit=0\n@@ -167,1 +171,1 @@\n-# jdk.xml.maxParameterEntitySizeLimit=1E6\n+jdk.xml.maxParameterEntitySizeLimit=1000000\n@@ -170,1 +174,1 @@\n-# jdk.xml.entityReplacementLimit=3E6\n+jdk.xml.entityReplacementLimit=3000000\n@@ -173,1 +177,1 @@\n-# jdk.xml.elementAttributeLimit=10000\n+jdk.xml.elementAttributeLimit=10000\n@@ -178,1 +182,1 @@\n-# jdk.xml.maxOccurLimit=5000\n+jdk.xml.maxOccurLimit=5000\n@@ -181,1 +185,1 @@\n-# jdk.xml.maxElementDepth=0\n+jdk.xml.maxElementDepth=0\n@@ -198,1 +202,0 @@\n-\n","filename":"src\/java.xml\/share\/conf\/jaxp.properties","additions":16,"deletions":13,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import common.util.TestBase;\n+import static common.util.TestBase.CONFIG_DEFAULT;\n+import static common.util.TestBase.CONFIG_STRICT;\n+import java.util.stream.IntStream;\n+import javax.xml.transform.TransformerFactory;\n+\n+\/**\n+ * @test @bug 8330542\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run driver common.config.ConfigFileTest 0 \/\/ verifies jaxp.properties\n+ * @run driver common.config.ConfigFileTest 1 \/\/ verifies jaxp-strict.properties\n+ * @summary verifies the JAXP configuration files jaxp.properties and\n+ * jaxp-strict.properties.\n+ *\/\n+public class ConfigFileTest {\n+    \/\/ system property for custom configuration file\n+    static final String SP_CONFIG = \"java.xml.config.file\";\n+\n+    \/\/ properties in the configuration file\n+    String[] keys = {\n+        \"jdk.xml.enableExtensionFunctions\",\n+        \"jdk.xml.overrideDefaultParser\",\n+        \"jdk.xml.jdkcatalog.resolve\",\n+        \"jdk.xml.dtd.support\",\n+        \"jdk.xml.entityExpansionLimit\",\n+        \"jdk.xml.totalEntitySizeLimit\",\n+        \"jdk.xml.maxGeneralEntitySizeLimit\",\n+        \"jdk.xml.maxParameterEntitySizeLimit\",\n+        \"jdk.xml.entityReplacementLimit\",\n+        \"jdk.xml.elementAttributeLimit\",\n+        \"jdk.xml.maxOccurLimit\",\n+        \"jdk.xml.maxElementDepth\",\n+        \"jdk.xml.maxXMLNameLimit\",\n+        \"jdk.xml.xpathExprGrpLimit\",\n+        \"jdk.xml.xpathExprOpLimit\",\n+        \"jdk.xml.xpathTotalOpLimit\"};\n+\n+    \/\/ type of properties\n+    boolean[] propertyIsFeature ={true, true, false, false, false, false,\n+        false, false, false, false, false, false, false, false, false, false};\n+\n+    \/\/ values from jaxp-strict.properties\n+    String[] strictValues ={\"false\", \"false\", \"strict\", \"allow\", \"2500\", \"100000\",\n+        \"100000\", \"15000\", \"100000\", \"10000\", \"5000\", \"0\", \"1000\", \"10\", \"100\", \"10000\"};\n+\n+    \/\/ values from jaxp.properties, as of JDK 23\n+    String[] defaultValues ={\"true\", \"false\", \"continue\", \"allow\", \"64000\", \"10000000\",\n+        \"0\", \"1000000\", \"3000000\", \"10000\", \"5000\", \"0\", \"1000\", \"10\", \"100\", \"10000\"};\n+\n+    public static void main(String args[]) throws Exception {\n+        new ConfigFileTest().run(args[0]);\n+    }\n+\n+    public void run(String index) throws Exception {\n+        if (index.equals(\"0\")) {\n+            verifyConfig(CONFIG_DEFAULT, defaultValues);\n+        } else {\n+            verifyConfig(CONFIG_STRICT, strictValues);\n+        }\n+    }\n+\n+    \/**\n+     * Verifies a configuration file by iterating through its property settings.\n+     * @param filename the configuration file\n+     * @param values expected values in the configuration file\n+     *\/\n+    private void verifyConfig(String filename, String[] values) {\n+        String javaHome = System.getProperty(\"java.home\");\n+        System.setProperty(SP_CONFIG, javaHome + \"\/conf\/\" + filename);\n+\n+        TransformerFactory tf = TransformerFactory.newInstance();\n+        IntStream.range(0, keys.length).forEach(i -> {\n+            if (propertyIsFeature[i]) {\n+                TestBase.Assert.assertEquals(tf.getFeature(keys[i]), Boolean.parseBoolean(values[i]));\n+            } else {\n+                TestBase.Assert.assertEquals(tf.getAttribute(keys[i]), values[i]);\n+            }\n+        });\n+        System.clearProperty(SP_CONFIG);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/ConfigFileTest.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+import java.util.Objects;\n@@ -124,0 +125,5 @@\n+    \/\/ JAXP Configuration Files to be added to $JAVA_HOME\/conf\/\n+    public static final String CONFIG_DEFAULT = \"jaxp.properties\";\n+    public static final String CONFIG_STRICT = \"jaxp-strict.properties\";\n+    public static final String CONFIG_COMPAT = \"jaxp-compat.properties\";\n+\n@@ -136,0 +142,4 @@\n+        \/\/ JAXP Configuration Files to be added to $JAVA_HOME\/conf\/\n+        CONFIG_FILE_STRICT(null, CONFIG_FILE, Type.FEATURE, getPath(CONFIG_FILE_PATH, CONFIG_STRICT)),\n+        CONFIG_FILE_COMPAT(null, CONFIG_FILE, Type.FEATURE, getPath(CONFIG_FILE_PATH, CONFIG_COMPAT)),\n+\n@@ -718,1 +728,1 @@\n-    static class Assert {\n+    public static class Assert {\n@@ -736,0 +746,6 @@\n+\n+        public static void assertEquals(Object actual, Object expected) {\n+            if (!Objects.equals(actual, expected)) {\n+                throw new RuntimeException(\"Expected: \" + expected + \" but actual result was \" + actual);\n+            }\n+        }\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/util\/TestBase.java","additions":18,"deletions":2,"binary":false,"changes":20,"status":"modified"}]}