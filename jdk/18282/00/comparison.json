{"files":[{"patch":"@@ -9668,15 +9668,0 @@\n-instruct vlshift_mem_masked(vec dst, memory src2, kReg mask) %{\n-  match(Set dst (LShiftVS (Binary dst (LoadVector src2)) mask));\n-  match(Set dst (LShiftVI (Binary dst (LoadVector src2)) mask));\n-  match(Set dst (LShiftVL (Binary dst (LoadVector src2)) mask));\n-  format %{ \"vplshift_masked $dst, $dst, $src2, $mask\\t! lshift masked operation\" %}\n-  ins_encode %{\n-    int vlen_enc = vector_length_encoding(this);\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    int opc = this->ideal_Opcode();\n-    __ evmasked_op(opc, bt, $mask$$KRegister, $dst$$XMMRegister,\n-                   $dst$$XMMRegister, $src2$$Address, true, vlen_enc);\n-  %}\n-  ins_pipe( pipe_slow );\n-%}\n-\n@@ -9730,14 +9715,0 @@\n-instruct vrshift_mem_masked(vec dst, memory src2, kReg mask) %{\n-  match(Set dst (RShiftVS (Binary dst (LoadVector src2)) mask));\n-  match(Set dst (RShiftVI (Binary dst (LoadVector src2)) mask));\n-  match(Set dst (RShiftVL (Binary dst (LoadVector src2)) mask));\n-  format %{ \"vprshift_masked $dst, $dst, $src2, $mask\\t! rshift masked operation\" %}\n-  ins_encode %{\n-    int vlen_enc = vector_length_encoding(this);\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    int opc = this->ideal_Opcode();\n-    __ evmasked_op(opc, bt, $mask$$KRegister, $dst$$XMMRegister,\n-                   $dst$$XMMRegister, $src2$$Address, true, vlen_enc);\n-  %}\n-  ins_pipe( pipe_slow );\n-%}\n@@ -9792,14 +9763,0 @@\n-instruct vurshift_mem_masked(vec dst, memory src2, kReg mask) %{\n-  match(Set dst (URShiftVS (Binary dst (LoadVector src2)) mask));\n-  match(Set dst (URShiftVI (Binary dst (LoadVector src2)) mask));\n-  match(Set dst (URShiftVL (Binary dst (LoadVector src2)) mask));\n-  format %{ \"vpurshift_masked $dst, $dst, $src2, $mask\\t! urshift masked operation\" %}\n-  ins_encode %{\n-    int vlen_enc = vector_length_encoding(this);\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    int opc = this->ideal_Opcode();\n-    __ evmasked_op(opc, bt, $mask$$KRegister, $dst$$XMMRegister,\n-                   $dst$$XMMRegister, $src2$$Address, true, vlen_enc);\n-  %}\n-  ins_pipe( pipe_slow );\n-%}\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":0,"deletions":43,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -164,5 +164,2 @@\n-  const TypeInstPtr* vbox_type_v = gvn().type(v)->is_instptr();\n-  if (vbox_type->instance_klass() != vbox_type_v->instance_klass()) {\n-    return nullptr; \/\/ arguments don't agree on vector shapes\n-  }\n-  if (vbox_type_v->maybe_null()) {\n+  const TypePtr* vbox_type_v = gvn().type(v)->isa_ptr();\n+  if (!vbox_type_v->isa_instptr() || vbox_type_v->maybe_null()) {\n@@ -171,0 +168,3 @@\n+  if (vbox_type->instance_klass() != vbox_type_v->is_instptr()->instance_klass()) {\n+    return nullptr; \/\/ arguments don't agree on vector shapes\n+  }\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}