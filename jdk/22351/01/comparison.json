{"files":[{"patch":"@@ -906,1 +906,5 @@\n-            path = ParseUtil.decode(path);\n+            try {\n+                path = ParseUtil.decode(path);\n+            } catch (IllegalArgumentException iae) {\n+                throw new IOException(iae);\n+            }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/loader\/URLClassPath.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -174,0 +174,1 @@\n+     * @throws IllegalArgumentException if {@code s} could not be decoded\n@@ -175,1 +176,1 @@\n-    public static String decode(String s) {\n+    public static String decode(String s) throws IllegalArgumentException {\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/ParseUtil.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2003, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.io.IOException;\n@@ -30,0 +31,1 @@\n+\n@@ -43,1 +45,1 @@\n-public class FileURLMapper {\n+final class FileURLMapper {\n@@ -45,2 +47,2 @@\n-    URL url;\n-    String path;\n+    private final URL url;\n+    private String path;\n@@ -48,1 +50,1 @@\n-    public FileURLMapper (URL url) {\n+    FileURLMapper(URL url) {\n@@ -56,2 +58,1 @@\n-\n-    public String getPath () {\n+    String getPath() throws IOException {\n@@ -64,1 +65,5 @@\n-            path = ParseUtil.decode(path);\n+            try {\n+                path = ParseUtil.decode(path);\n+            } catch (IllegalArgumentException iae) {\n+                throw new IOException(iae);\n+            }\n@@ -72,2 +77,2 @@\n-    public boolean exists () {\n-        String s = getPath ();\n+    boolean exists() throws IOException {\n+        String s = getPath();\n@@ -77,1 +82,1 @@\n-            File f = new File (s);\n+            File f = new File(s);\n","filename":"src\/java.base\/unix\/classes\/jdk\/internal\/loader\/FileURLMapper.java","additions":16,"deletions":11,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2003, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.io.IOException;\n@@ -30,0 +31,1 @@\n+\n@@ -39,1 +41,1 @@\n-public class FileURLMapper {\n+final class FileURLMapper {\n@@ -41,2 +43,2 @@\n-    URL url;\n-    String file;\n+    private final URL url;\n+    private String file;\n@@ -44,1 +46,1 @@\n-    public FileURLMapper (URL url) {\n+    FileURLMapper (URL url) {\n@@ -52,2 +54,1 @@\n-\n-    public String getPath () {\n+    String getPath() throws IOException {\n@@ -66,1 +67,5 @@\n-        file = ParseUtil.decode(path);\n+        try {\n+            file = ParseUtil.decode(path);\n+        } catch (IllegalArgumentException iae) {\n+            throw new IOException(iae);\n+        }\n@@ -70,1 +75,1 @@\n-    public boolean exists() {\n+    boolean exists() throws IOException {\n@@ -72,1 +77,1 @@\n-        File f = new File (path);\n+        File f = new File(path);\n","filename":"src\/java.base\/windows\/classes\/jdk\/internal\/loader\/FileURLMapper.java","additions":15,"deletions":10,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -0,0 +1,188 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.OutputStream;\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Enumeration;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarOutputStream;\n+import java.util.jar.Manifest;\n+\n+import jdk.internal.loader.Resource;\n+import jdk.internal.loader.URLClassPath;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import static java.nio.charset.StandardCharsets.US_ASCII;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n+\n+\/*\n+ * @test\n+ * @bug 8344908\n+ * @summary verify that when locating resources, the URLClassPath can function properly\n+ *          without throwing unexpected exceptions when any URL in the classpath is unusable\n+ * @modules java.base\/jdk.internal.loader\n+ * @run junit ClassPathUnusableURLs\n+ *\/\n+public class ClassPathUnusableURLs {\n+\n+    private static final Path SCRATCH_DIR = Path.of(\".\").normalize();\n+    private static final String RESOURCE_NAME = \"foo.txt\";\n+    private static final String SMILEY_EMOJI = \"\\uD83D\\uDE00\";\n+\n+    private static Path ASCII_DIR;\n+    private static Path EMOJI_DIR;\n+    private static Path JAR_FILE_IN_EMOJI_DIR;\n+    private static int NUM_EXPECTED_LOCATED_RESOURCES;\n+\n+\n+    @BeforeAll\n+    static void beforeAll() throws Exception {\n+        try {\n+            EMOJI_DIR = Files.createTempDirectory(SCRATCH_DIR, SMILEY_EMOJI);\n+        } catch (IllegalArgumentException iae) {\n+            iae.printStackTrace(); \/\/ for debug purpose\n+            \/\/ if we can't create a directory with an emoji in its path name,\n+            \/\/ then skip the entire test\n+            assumeTrue(false, \"Skipping test since emoji directory couldn't be created: \"\n+                    + iae);\n+        }\n+        \/\/ successful creation of the dir, continue with the test\n+        Files.writeString(EMOJI_DIR.resolve(RESOURCE_NAME), \"hello\");\n+\n+        ASCII_DIR = Files.createTempDirectory(SCRATCH_DIR, \"test-urlclasspath\");\n+        Files.writeString(ASCII_DIR.resolve(RESOURCE_NAME), \"hello\");\n+\n+        \/\/ create a jar file containing the resource\n+        JAR_FILE_IN_EMOJI_DIR = Files.createTempDirectory(SCRATCH_DIR, SMILEY_EMOJI)\n+                .resolve(\"foo.jar\");\n+        final Manifest manifest = new Manifest();\n+        manifest.getMainAttributes().putValue(\"Manifest-Version\", \"1.0\");\n+        try (final OutputStream fos = Files.newOutputStream(JAR_FILE_IN_EMOJI_DIR);\n+             final JarOutputStream jaros = new JarOutputStream(fos, manifest)) {\n+            final JarEntry jarEntry = new JarEntry(RESOURCE_NAME);\n+            jaros.putNextEntry(jarEntry);\n+            jaros.write(\"hello\".getBytes(US_ASCII));\n+            jaros.closeEntry();\n+        }\n+        \/\/ Even if the resource is present in more than one classpath element,\n+        \/\/ we expect it to be found by the URLClassPath only in the path which has just ascii\n+        \/\/ characters. URLClassPath currently doesn't have the ability to serve resources\n+        \/\/ from paths containing emoji character(s).\n+        NUM_EXPECTED_LOCATED_RESOURCES = 1;\n+    }\n+\n+    \/**\n+     * Constructs a URLClassPath and then exercises the URLClassPath.findResource()\n+     * and URLClassPath.findResources() methods and expects them to return the expected\n+     * resources.\n+     *\/\n+    @Test\n+    void testFindResource() {\n+        \/\/ start an empty URL classpath\n+        final URLClassPath urlc = new URLClassPath(new URL[0]);\n+        final String[] classpathElements = getClassPathElements();\n+        try {\n+            \/\/ use addFile() to construct classpath\n+            for (final String path : classpathElements) {\n+                urlc.addFile(path);\n+            }\n+            \/\/ findResource()\n+            assertNotNull(urlc.findResource(RESOURCE_NAME), \"findResource() failed to locate\"\n+                    + \" resource: \" + RESOURCE_NAME + \" in classpath: \"\n+                    + Arrays.toString(classpathElements));\n+            \/\/ findResources()\n+            final Enumeration<URL> locatedResources = urlc.findResources(RESOURCE_NAME);\n+            assertNotNull(locatedResources, \"findResources() failed to\"\n+                    + \" locate resource: \" + RESOURCE_NAME + \" in classpath: \"\n+                    + Arrays.toString(classpathElements));\n+            int numFound = 0;\n+            while (locatedResources.hasMoreElements()) {\n+                System.out.println(\"located \" + locatedResources.nextElement()\n+                        + \" for resource \" + RESOURCE_NAME);\n+                numFound++;\n+            }\n+            assertEquals(NUM_EXPECTED_LOCATED_RESOURCES, numFound,\n+                    \"unexpected number of resources located for \" + RESOURCE_NAME);\n+        } finally {\n+            urlc.closeLoaders();\n+        }\n+    }\n+\n+    \/**\n+     * Constructs a URLClassPath and then exercises the URLClassPath.getResource()\n+     * and URLClassPath.getResources() methods and expects them to return the expected\n+     * resources.\n+     *\/\n+    @Test\n+    void testGetResource() {\n+        \/\/ start an empty URL classpath\n+        final URLClassPath urlc = new URLClassPath(new URL[0]);\n+        final String[] classpathElements = getClassPathElements();\n+        try {\n+            \/\/ use addFile() to construct classpath\n+            for (final String path : classpathElements) {\n+                urlc.addFile(path);\n+            }\n+            \/\/ getResource()\n+            assertNotNull(urlc.getResource(RESOURCE_NAME), \"getResource() failed to locate\"\n+                    + \" resource: \" + RESOURCE_NAME + \" in classpath: \"\n+                    + Arrays.toString(classpathElements));\n+            \/\/ getResources()\n+            final Enumeration<Resource> locatedResources = urlc.getResources(RESOURCE_NAME);\n+            assertNotNull(locatedResources, \"getResources() failed to\"\n+                    + \" locate resource: \" + RESOURCE_NAME + \" in classpath: \"\n+                    + Arrays.toString(classpathElements));\n+            int numFound = 0;\n+            while (locatedResources.hasMoreElements()) {\n+                System.out.println(\"located \" + locatedResources.nextElement().getURL()\n+                        + \" for resource \" + RESOURCE_NAME);\n+                numFound++;\n+            }\n+            assertEquals(NUM_EXPECTED_LOCATED_RESOURCES, numFound,\n+                    \"unexpected number of resources located for \" + RESOURCE_NAME);\n+        } finally {\n+            urlc.closeLoaders();\n+        }\n+    }\n+\n+    private static String[] getClassPathElements() {\n+        \/\/ Maintain the order - in context of this test, paths with emojis\n+        \/\/ or those which can't serve the resource should come before the\n+        \/\/ path that can serve the resource.\n+        return new String[]{\n+                \/\/ non-existent dir\n+                ASCII_DIR.resolve(\"non-existent\").toString(),\n+                \/\/ existing emoji dir\n+                EMOJI_DIR.toString(),\n+                \/\/ existing jar file in a emoji dir\n+                JAR_FILE_IN_EMOJI_DIR.toString(),\n+                \/\/ existing ascii dir\n+                ASCII_DIR.toString()\n+        };\n+    }\n+}\n","filename":"test\/jdk\/jdk\/internal\/loader\/URLClassPath\/ClassPathUnusableURLs.java","additions":188,"deletions":0,"binary":false,"changes":188,"status":"added"}]}