{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,7 +40,3 @@\n- * <p id=\"type-safe\">For compatibility reasons, it is possible, though\n- * highly discouraged, to add objects to an {@code AttributeList} that are\n- * not instances of {@code Attribute}.  However, an {@code AttributeList}\n- * can be made <em>type-safe<\/em>, which means that an attempt to add\n- * an object that is not an {@code Attribute} will produce an {@code\n- * IllegalArgumentException}.  An {@code AttributeList} becomes type-safe\n- * when the method {@link #asList()} is called on it.<\/p>\n+ * <p>It is not permitted to add objects to an {@code AttributeList} that are\n+ * not instances of {@code Attribute}.  This will produce an {@code\n+ * IllegalArgumentException}.<\/p>\n@@ -67,3 +63,0 @@\n-    private transient volatile boolean typeSafe;\n-    private transient volatile boolean tainted;\n-\n@@ -148,8 +141,0 @@\n-     * <p>If this method has ever been called on a given\n-     * {@code AttributeList} instance, a subsequent attempt to add\n-     * an object to that instance which is not an {@code Attribute}\n-     * will fail with an {@code IllegalArgumentException}. For compatibility\n-     * reasons, an {@code AttributeList} on which this method has never\n-     * been called does allow objects other than {@code Attribute}s to\n-     * be added.<\/p>\n-     *\n@@ -163,3 +148,1 @@\n-        typeSafe = true;\n-        if (tainted)\n-            adding((Collection<?>) this);  \/\/ will throw IllegalArgumentException\n+        adding((Collection<?>) this);\n@@ -260,2 +243,1 @@\n-     * a non-Attribute to the List, and disallow that if asList has ever\n-     * been called on this instance.\n+     * a non-Attribute to the List, and disallow.\n@@ -266,3 +248,1 @@\n-     * @throws IllegalArgumentException if this {@code AttributeList} is\n-     * <a href=\"#type-safe\">type-safe<\/a> and {@code element} is not an\n-     * {@code Attribute}.\n+     * @throws IllegalArgumentException if {@code element} is not an {@code Attribute}.\n@@ -278,3 +258,1 @@\n-     * @throws IllegalArgumentException if this {@code AttributeList} is\n-     * <a href=\"#type-safe\">type-safe<\/a> and {@code element} is not an\n-     * {@code Attribute}.\n+     * @throws IllegalArgumentException if {@code element} is not an {@code Attribute}.\n@@ -290,3 +268,1 @@\n-     * @throws IllegalArgumentException if this {@code AttributeList} is\n-     * <a href=\"#type-safe\">type-safe<\/a> and {@code c} contains an\n-     * element that is not an {@code Attribute}.\n+     * @throws IllegalArgumentException if {@code c} contains an element that is not an {@code Attribute}.\n@@ -302,3 +278,1 @@\n-     * @throws IllegalArgumentException if this {@code AttributeList} is\n-     * <a href=\"#type-safe\">type-safe<\/a> and {@code c} contains an\n-     * element that is not an {@code Attribute}.\n+     * @throws IllegalArgumentException if {@code c} contains an element that is not an {@code Attribute}.\n@@ -314,3 +288,1 @@\n-     * @throws IllegalArgumentException if this {@code AttributeList} is\n-     * <a href=\"#type-safe\">type-safe<\/a> and {@code element} is not an\n-     * {@code Attribute}.\n+     * @throws IllegalArgumentException if {@code element} is not an {@code Attribute}.\n@@ -327,4 +299,1 @@\n-        if (typeSafe)\n-            throw new IllegalArgumentException(\"Not an Attribute: \" + x);\n-        else\n-            tainted = true;\n+        throw new IllegalArgumentException(\"Not an Attribute: \" + x);\n","filename":"src\/java.management\/share\/classes\/javax\/management\/AttributeList.java","additions":12,"deletions":43,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,3 +58,0 @@\n-    private transient boolean typeSafe;\n-    private transient boolean tainted;\n-\n@@ -124,8 +121,0 @@\n-     * <p>If this method has ever been called on a given\n-     * {@code RoleList} instance, a subsequent attempt to add\n-     * an object to that instance which is not a {@code Role}\n-     * will fail with an {@code IllegalArgumentException}. For compatibility\n-     * reasons, a {@code RoleList} on which this method has never\n-     * been called does allow objects other than {@code Role}s to\n-     * be added.<\/p>\n-     *\n@@ -138,5 +127,1 @@\n-        if (!typeSafe) {\n-            if (tainted)\n-                checkTypeSafe(this);\n-            typeSafe = true;\n-        }\n+        checkTypeSafe(this);\n@@ -161,2 +146,1 @@\n-            String excMsg = \"Invalid parameter\";\n-            throw new IllegalArgumentException(excMsg);\n+            throw new IllegalArgumentException(\"Invalid parameter\");\n@@ -186,2 +170,1 @@\n-            String excMsg = \"Invalid parameter\";\n-            throw new IllegalArgumentException(excMsg);\n+            throw new IllegalArgumentException(\"Invalid parameter\");\n@@ -189,1 +172,0 @@\n-\n@@ -211,3 +193,1 @@\n-            \/\/ Revisit [cebro] Localize message\n-            String excMsg = \"Invalid parameter.\";\n-            throw new IllegalArgumentException(excMsg);\n+            throw new IllegalArgumentException(\"Invalid parameter\");\n@@ -215,1 +195,0 @@\n-\n@@ -239,1 +218,0 @@\n-\n@@ -266,3 +244,1 @@\n-            \/\/ Revisit [cebro] Localize message\n-            String excMsg = \"Invalid parameter.\";\n-            throw new IllegalArgumentException(excMsg);\n+            throw new IllegalArgumentException(\"Invalid parameter\");\n@@ -280,0 +256,4 @@\n+    \/**\n+     * {@inheritDoc}\n+     * @throws IllegalArgumentException if {@code o} is not a {@code Role}.\n+     *\/\n@@ -282,4 +262,1 @@\n-        if (!tainted)\n-            tainted = isTainted(o);\n-        if (typeSafe)\n-            checkTypeSafe(o);\n+        checkTypeSafe(o);\n@@ -289,0 +266,4 @@\n+    \/**\n+     * {@inheritDoc}\n+     * @throws IllegalArgumentException if {@code element} is not a {@code Role}.\n+     *\/\n@@ -291,4 +272,1 @@\n-        if (!tainted)\n-            tainted = isTainted(element);\n-        if (typeSafe)\n-            checkTypeSafe(element);\n+        checkTypeSafe(element);\n@@ -298,0 +276,4 @@\n+    \/**\n+     * {@inheritDoc}\n+     * @throws IllegalArgumentException if {@code c} contains a member that is not a {@code Role}.\n+     *\/\n@@ -300,4 +282,1 @@\n-        if (!tainted)\n-            tainted = isTainted(c);\n-        if (typeSafe)\n-            checkTypeSafe(c);\n+        checkTypeSafe(c);\n@@ -307,0 +286,4 @@\n+    \/**\n+     * {@inheritDoc}\n+     * @throws IllegalArgumentException if {@code c} contains a member that is not a {@code Role}.\n+     *\/\n@@ -309,4 +292,1 @@\n-        if (!tainted)\n-            tainted = isTainted(c);\n-        if (typeSafe)\n-            checkTypeSafe(c);\n+        checkTypeSafe(c);\n@@ -316,0 +296,4 @@\n+    \/**\n+     * {@inheritDoc}\n+     * @throws IllegalArgumentException if {@code element} is not a {@code Role}.\n+     *\/\n@@ -318,4 +302,1 @@\n-        if (!tainted)\n-            tainted = isTainted(element);\n-        if (typeSafe)\n-            checkTypeSafe(element);\n+        checkTypeSafe(element);\n@@ -348,24 +329,0 @@\n-\n-    \/**\n-     * Returns true if o is a non-Role object.\n-     *\/\n-    private static boolean isTainted(Object o) {\n-        try {\n-            checkTypeSafe(o);\n-        } catch (IllegalArgumentException e) {\n-            return true;\n-        }\n-        return false;\n-    }\n-\n-    \/**\n-     * Returns true if c contains any non-Role objects.\n-     *\/\n-    private static boolean isTainted(Collection<?> c) {\n-        try {\n-            checkTypeSafe(c);\n-        } catch (IllegalArgumentException e) {\n-            return true;\n-        }\n-        return false;\n-    }\n","filename":"src\/java.management\/share\/classes\/javax\/management\/relation\/RoleList.java","additions":31,"deletions":74,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,3 +57,0 @@\n-    private transient boolean typeSafe;\n-    private transient boolean tainted;\n-\n@@ -124,8 +121,0 @@\n-     * <p>If this method has ever been called on a given\n-     * {@code RoleUnresolvedList} instance, a subsequent attempt to add\n-     * an object to that instance which is not a {@code RoleUnresolved}\n-     * will fail with an {@code IllegalArgumentException}. For compatibility\n-     * reasons, a {@code RoleUnresolvedList} on which this method has never\n-     * been called does allow objects other than {@code RoleUnresolved}s to\n-     * be added.<\/p>\n-     *\n@@ -138,5 +127,1 @@\n-        if (!typeSafe) {\n-            if (tainted)\n-                checkTypeSafe(this);\n-            typeSafe = true;\n-        }\n+        checkTypeSafe(this);\n@@ -161,2 +146,1 @@\n-            String excMsg = \"Invalid parameter\";\n-            throw new IllegalArgumentException(excMsg);\n+            throw new IllegalArgumentException(\"Invalid parameter\");\n@@ -187,2 +171,1 @@\n-            String excMsg = \"Invalid parameter\";\n-            throw new IllegalArgumentException(excMsg);\n+            throw new IllegalArgumentException(\"Invalid parameter\");\n@@ -190,1 +173,0 @@\n-\n@@ -213,2 +195,1 @@\n-            String excMsg = \"Invalid parameter\";\n-            throw new IllegalArgumentException(excMsg);\n+            throw new IllegalArgumentException(\"Invalid parameter\");\n@@ -216,1 +197,0 @@\n-\n@@ -239,1 +219,0 @@\n-\n@@ -264,2 +243,1 @@\n-            String excMsg = \"Invalid parameter\";\n-            throw new IllegalArgumentException(excMsg);\n+            throw new IllegalArgumentException(\"Invalid parameter\");\n@@ -267,1 +245,0 @@\n-\n@@ -277,0 +254,4 @@\n+    \/**\n+     * {@inheritDoc}\n+     * @throws IllegalArgumentException if {@code o} is not a {@code RoleUnresolved}.\n+     *\/\n@@ -279,4 +260,1 @@\n-        if (!tainted)\n-            tainted = isTainted(o);\n-        if (typeSafe)\n-            checkTypeSafe(o);\n+        checkTypeSafe(o);\n@@ -286,0 +264,4 @@\n+    \/**\n+     * {@inheritDoc}\n+     * @throws IllegalArgumentException if {@code element} is not a {@code RoleUnresolved}.\n+     *\/\n@@ -288,4 +270,1 @@\n-        if (!tainted)\n-            tainted = isTainted(element);\n-        if (typeSafe)\n-            checkTypeSafe(element);\n+        checkTypeSafe(element);\n@@ -295,0 +274,4 @@\n+    \/**\n+     * {@inheritDoc}\n+     * @throws IllegalArgumentException if {@code c} contains a member that is not a {@code RoleUnresolved}.\n+     *\/\n@@ -297,4 +280,1 @@\n-        if (!tainted)\n-            tainted = isTainted(c);\n-        if (typeSafe)\n-            checkTypeSafe(c);\n+        checkTypeSafe(c);\n@@ -304,0 +284,4 @@\n+    \/**\n+     * {@inheritDoc}\n+     * @throws IllegalArgumentException if {@code c} contains a member that is not a {@code RoleUnresolved}.\n+     *\/\n@@ -306,4 +290,1 @@\n-        if (!tainted)\n-            tainted = isTainted(c);\n-        if (typeSafe)\n-            checkTypeSafe(c);\n+        checkTypeSafe(c);\n@@ -313,0 +294,4 @@\n+    \/**\n+     * {@inheritDoc}\n+     * @throws IllegalArgumentException if {@code element} is not a {@code RoleUnresolved}.\n+     *\/\n@@ -315,4 +300,1 @@\n-        if (!tainted)\n-            tainted = isTainted(element);\n-        if (typeSafe)\n-            checkTypeSafe(element);\n+        checkTypeSafe(element);\n@@ -345,24 +327,0 @@\n-\n-    \/**\n-     * Returns true if o is a non-RoleUnresolved object.\n-     *\/\n-    private static boolean isTainted(Object o) {\n-        try {\n-            checkTypeSafe(o);\n-        } catch (IllegalArgumentException e) {\n-            return true;\n-        }\n-        return false;\n-    }\n-\n-    \/**\n-     * Returns true if c contains any non-RoleUnresolved objects.\n-     *\/\n-    private static boolean isTainted(Collection<?> c) {\n-        try {\n-            checkTypeSafe(c);\n-        } catch (IllegalArgumentException e) {\n-            return true;\n-        }\n-        return false;\n-    }\n","filename":"src\/java.management\/share\/classes\/javax\/management\/relation\/RoleUnresolvedList.java","additions":31,"deletions":73,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 6336968\n+ * @bug 6336968 8359809\n@@ -41,1 +41,1 @@\n-        \/\/ Test calling asList after adding non-Attribute by various means\n+        \/\/ Test adding non-Attribute by various means\n@@ -44,3 +44,3 @@\n-            alist.add(new Attribute(\"foo\", \"bar\"));\n-            doOp(alist, op);\n-            String what = \"asList() after calling \" + op + \" with non-Attribute\";\n+            alist.add(new Attribute(\"foo\", \"bar\")); \/\/ Add actual Attribute\n+            alist.add(null);\n+            String what = \"Using \" + op + \" with non-Attribute\";\n@@ -48,15 +48,1 @@\n-                List<Attribute> lista = alist.asList();\n-                fail(what + \": succeeded but should not have\");\n-            } catch (IllegalArgumentException e) {\n-                System.out.println(\"OK: \" + what + \": got IllegalArgumentException\");\n-            }\n-        }\n-\n-        \/\/ Test adding non-Attribute by various means after calling asList\n-        for (Op op : Op.values()) {\n-            AttributeList alist = new AttributeList();\n-            List<Attribute> lista = alist.asList();\n-            lista.add(new Attribute(\"foo\", \"bar\"));\n-            String what = op + \" with non-Attribute after calling asList()\";\n-            try {\n-                doOp(alist, op);\n+                doOp(alist, op); \/\/ Add some other non-Attribute, should fail\n","filename":"test\/jdk\/javax\/management\/MBeanServer\/AttributeListTypeSafeTest.java","additions":7,"deletions":21,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,2 @@\n- * @bug 6250772\n- * @summary Test that *List objects are checked after asList is called.\n+ * @bug 6250772 8359809\n+ * @summary Test that *List objects are checked\n@@ -42,4 +42,4 @@\n- * logically they should extend ArrayList<Attribute> etc.  They are\n- * all specified to have a method asList() with return type\n- * List<Attribute> etc, and to refuse to add any object other than\n- * an Attribute etc once this method has been called, but not before.\n+ * logically they should extend ArrayList<Attribute> etc.\n+ *\n+ * Before JDK-8359809, their method asList() had to be called, to make\n+ * the class refuse to add any object other than the intended type.\n@@ -52,2 +52,7 @@\n-        for (Class c : classes)\n-            test((Class<? extends ArrayList>) c);\n+        Object[] objects =  {\n+            new Attribute(\"myAttr\", \"myVal\"), new Role(\"myRole\", new ArrayList<ObjectName>()),\n+            new RoleUnresolved(\"myRoleUnresolved\", new ArrayList<ObjectName>(), RoleStatus.NO_ROLE_WITH_NAME)\n+        };\n+        for (int i = 0; i < classes.length; i++) {\n+            test((Class<? extends ArrayList>) classes[i], objects[i]);\n+        }\n@@ -56,1 +61,1 @@\n-    private static void test(Class<? extends ArrayList> c) throws Exception {\n+    private static void test(Class<? extends ArrayList> c, Object o) throws Exception {\n@@ -59,1 +64,1 @@\n-        test(al);\n+        test(al, o);\n@@ -62,2 +67,2 @@\n-    private static void test(ArrayList al) throws Exception {\n-        test(al, true);\n+    private static void test(ArrayList al, Object o) throws Exception {\n+        test0(al, o);\n@@ -66,2 +71,2 @@\n-        m.invoke(al);\n-        test(al, false);\n+        m.invoke(al); \/\/ Calling asList() does not change behaviour\n+        test0(al, o);\n@@ -70,2 +75,2 @@\n-    private static void test(ArrayList al, boolean allowsBogus) throws Exception {\n-        for (int i = 0; i < 5; i++) {\n+    private static void test0(ArrayList al, Object o) throws Exception {\n+        for (int i = 0; i < 6; i++) {\n@@ -89,0 +94,7 @@\n+                    case 5:\n+                        \/\/ Add the correct kind of element, so we can iterate.\n+                        al.add(o);\n+                        ListIterator iter = al.listIterator();\n+                        Object x = iter.next();\n+                        iter.set(\"blah\"); \/\/ Should fail like the others\n+                        break;\n@@ -92,2 +104,1 @@\n-                if (!allowsBogus)\n-                    throw new Exception(\"op allowed but should fail\");\n+                throw new Exception(\"op \" + i + \" allowed but should fail on \" + al.getClass());\n@@ -95,2 +106,1 @@\n-                if (allowsBogus)\n-                    throw new Exception(\"got exception but should not\", e);\n+                System.out.println(\"op \" + i + \" got expected \" + e + \" on \" + al.getClass());\n","filename":"test\/jdk\/javax\/management\/generified\/ListTypeCheckTest.java","additions":31,"deletions":21,"binary":false,"changes":52,"status":"modified"}]}