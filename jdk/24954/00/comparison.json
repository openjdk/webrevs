{"files":[{"patch":"@@ -35,0 +35,1 @@\n+#include \"utilities\/lockFreeStack.hpp\"\n@@ -37,1 +38,0 @@\n-EventLog* Events::_logs = nullptr;\n@@ -50,7 +50,12 @@\n-EventLog::EventLog() {\n-  \/\/ This normally done during bootstrap when we're only single\n-  \/\/ threaded but use a ThreadCritical to ensure inclusion in case\n-  \/\/ some are created slightly late.\n-  ThreadCritical tc;\n-  _next = Events::_logs;\n-  Events::_logs = this;\n+\/\/ Contain lockFreeStack in mtInternal allocation\n+class EventLogStack : public CHeapObj<mtInternal> {\n+ public:\n+    LockFreeStack<EventLog, &EventLog::next_ptr> _list;\n+};\n+\n+static EventLogStack* _event_logs = nullptr;\n+\n+EventLog::EventLog() : _next(nullptr) {\n+  \/\/ This normally done during bootstrap when we're only single threaded,\n+  \/\/ but use a lockFreeStack because there are some events that are created later.\n+  _event_logs->_list.push(*this);\n@@ -62,1 +67,1 @@\n-  EventLog* log = _logs;\n+  EventLog* log = _event_logs->_list.top();\n@@ -71,1 +76,1 @@\n-  EventLog* log = _logs;\n+  EventLog* log = _event_logs->_list.top();\n@@ -84,1 +89,1 @@\n-    EventLog* log = _logs;\n+    EventLog* log = _event_logs->_list.top();\n@@ -100,0 +105,1 @@\n+    _event_logs = new EventLogStack();\n","filename":"src\/hotspot\/share\/utilities\/events.cpp","additions":17,"deletions":11,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,0 +73,1 @@\n+  static EventLog* volatile* next_ptr(EventLog& el) { return &el._next; }\n@@ -220,2 +221,0 @@\n-  static EventLog* _logs;\n-\n","filename":"src\/hotspot\/share\/utilities\/events.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/*\n+ * @test\n+ * @bug 8355627\n+ * @summary Test that events are listed in the hs_err_pid file\n+ * @library \/test\/lib\n+ * @requires vm.flagless\n+ * @requires vm.debug == true & (os.family == \"linux\" | os.family == \"windows\")\n+ * @modules java.base\/jdk.internal.misc\n+ * @run driver ShowEventsOnCrashTest\n+ *\/\n+\n+\/\/ Note: this test can only run on debug since it relies on VMError::controlled_crash() which\n+\/\/ only exists in debug builds.\n+import java.io.File;\n+import java.util.regex.Pattern;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class ShowEventsOnCrashTest {\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:+UnlockDiagnosticVMOptions\", \"-Xmx100M\", \"-XX:-CreateCoredumpOnCrash\",\n+            \"-XX:ErrorHandlerTest=2\",\n+            \"-version\");\n+\n+        OutputAnalyzer output_detail = new OutputAnalyzer(pb.start());\n+\n+        \/\/ we should have crashed with an internal error. We should definitely NOT have crashed with a segfault\n+        \/\/ (which would be a sign that the assert poison page mechanism does not work).\n+        output_detail.shouldMatch(\"# A fatal error has been detected by the Java Runtime Environment:.*\");\n+        output_detail.shouldMatch(\"# +Internal Error.*\");\n+        File hs_err_file = HsErrFileUtils.openHsErrFileFromOutput(output_detail);\n+        \/\/ Pattern match the hs_err_pid file.\n+        Pattern[] patterns = new Pattern[] {\n+            Pattern.compile(\"Compilation events \\\\([0-9]* events\\\\):\"),\n+            Pattern.compile(\"GC Heap History \\\\([0-9]* events\\\\):\"),\n+            Pattern.compile(\"Dll operation events \\\\([0-9]* events\\\\):\"),\n+            Pattern.compile(\"Deoptimization events \\\\([0-9]* events\\\\):\"),\n+            Pattern.compile(\"Classes loaded \\\\([0-9]* events\\\\):\"),\n+            Pattern.compile(\"Classes unloaded \\\\([0-9]* events\\\\):\"),\n+            Pattern.compile(\"Classes redefined \\\\([0-9]* events\\\\):\"),\n+            Pattern.compile(\"Internal exceptions \\\\([0-9]* events\\\\):\"),\n+            Pattern.compile(\"VM Operations \\\\([0-9]* events\\\\):\"),\n+            Pattern.compile(\"Memory protections \\\\([0-9]* events\\\\):\")\n+        };\n+\n+        HsErrFileUtils.checkHsErrFileContent(hs_err_file, patterns, false);\n+\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/ShowEventsOnCrashTest.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"}]}