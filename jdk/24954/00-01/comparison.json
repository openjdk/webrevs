{"files":[{"patch":"@@ -29,0 +29,1 @@\n+#include \"runtime\/atomic.hpp\"\n@@ -32,1 +33,0 @@\n-#include \"runtime\/threadCritical.hpp\"\n@@ -35,2 +35,0 @@\n-#include \"utilities\/lockFreeStack.hpp\"\n-\n@@ -38,0 +36,1 @@\n+EventLog* Events::_logs = nullptr;\n@@ -50,7 +49,1 @@\n-\/\/ Contain lockFreeStack in mtInternal allocation\n-class EventLogStack : public CHeapObj<mtInternal> {\n- public:\n-    LockFreeStack<EventLog, &EventLog::next_ptr> _list;\n-};\n-\n-static EventLogStack* _event_logs = nullptr;\n+static EventLog* _event_logs = nullptr;\n@@ -58,1 +51,1 @@\n-EventLog::EventLog() : _next(nullptr) {\n+EventLog::EventLog() {\n@@ -60,2 +53,6 @@\n-  \/\/ but use a lockFreeStack because there are some events that are created later.\n-  _event_logs->_list.push(*this);\n+  \/\/ but use lock free add because there are some events that are created later.\n+  EventLog* old_head;\n+  do {\n+    old_head = Atomic::load(&Events::_logs);\n+    _next = old_head;\n+  } while (Atomic::cmpxchg(&Events::_logs, old_head, this, memory_order_relaxed) != old_head);\n@@ -67,1 +64,1 @@\n-  EventLog* log = _event_logs->_list.top();\n+  EventLog* log = Atomic::load(&Events::_logs);\n@@ -76,1 +73,1 @@\n-  EventLog* log = _event_logs->_list.top();\n+  EventLog* log = Atomic::load(&Events::_logs);\n@@ -89,1 +86,1 @@\n-    EventLog* log = _event_logs->_list.top();\n+    EventLog* log = Atomic::load(&Events::_logs);\n@@ -105,1 +102,0 @@\n-    _event_logs = new EventLogStack();\n","filename":"src\/hotspot\/share\/utilities\/events.cpp","additions":13,"deletions":17,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -73,1 +73,0 @@\n-  static EventLog* volatile* next_ptr(EventLog& el) { return &el._next; }\n@@ -221,0 +220,2 @@\n+  static EventLog* _logs;\n+\n","filename":"src\/hotspot\/share\/utilities\/events.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}