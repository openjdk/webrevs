{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+#include \"utilities\/stringUtils.hpp\"\n@@ -142,41 +143,0 @@\n-class PhaseNameIter {\n- private:\n-  char* _token;\n-  char* _saved_ptr;\n-  char* _list;\n-\n- public:\n-  PhaseNameIter(ccstrlist option) {\n-    _list = (char*) canonicalize(option);\n-    _saved_ptr = _list;\n-    _token = strtok_r(_saved_ptr, \",\", &_saved_ptr);\n-  }\n-\n-  ~PhaseNameIter() {\n-    FREE_C_HEAP_ARRAY(char, _list);\n-  }\n-\n-  const char* operator*() const { return _token; }\n-\n-  PhaseNameIter& operator++() {\n-    _token = strtok_r(nullptr, \",\", &_saved_ptr);\n-    return *this;\n-  }\n-\n-  ccstrlist canonicalize(ccstrlist option_value) {\n-    char* canonicalized_list = NEW_C_HEAP_ARRAY(char, strlen(option_value) + 1, mtCompiler);\n-    int i = 0;\n-    char current;\n-    while ((current = option_value[i]) != '\\0') {\n-      if (current == '\\n' || current == ' ') {\n-        canonicalized_list[i] = ',';\n-      } else {\n-        canonicalized_list[i] = current;\n-      }\n-      i++;\n-    }\n-    canonicalized_list[i] = '\\0';\n-    return canonicalized_list;\n-  }\n-};\n-\n@@ -195,1 +155,1 @@\n-    for (PhaseNameIter iter(option); *iter != nullptr && _valid; ++iter) {\n+    for (StringUtils::CommaSeparatedStringIterator iter(option); *iter != nullptr && _valid; ++iter) {\n","filename":"src\/hotspot\/share\/opto\/phasetype.hpp","additions":3,"deletions":43,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"utilities\/stringUtils.hpp\"\n@@ -74,41 +75,0 @@\n-class TraceAutoVectorizationTagNameIter {\n- private:\n-  char* _token;\n-  char* _saved_ptr;\n-  char* _list;\n-\n- public:\n-  TraceAutoVectorizationTagNameIter(ccstrlist option) {\n-    _list = (char*) canonicalize(option);\n-    _saved_ptr = _list;\n-    _token = strtok_r(_saved_ptr, \",\", &_saved_ptr);\n-  }\n-\n-  ~TraceAutoVectorizationTagNameIter() {\n-    FREE_C_HEAP_ARRAY(char, _list);\n-  }\n-\n-  const char* operator*() const { return _token; }\n-\n-  TraceAutoVectorizationTagNameIter& operator++() {\n-    _token = strtok_r(nullptr, \",\", &_saved_ptr);\n-    return *this;\n-  }\n-\n-  ccstrlist canonicalize(ccstrlist option_value) {\n-    char* canonicalized_list = NEW_C_HEAP_ARRAY(char, strlen(option_value) + 1, mtCompiler);\n-    int i = 0;\n-    char current;\n-    while ((current = option_value[i]) != '\\0') {\n-      if (current == '\\n' || current == ' ') {\n-        canonicalized_list[i] = ',';\n-      } else {\n-        canonicalized_list[i] = current;\n-      }\n-      i++;\n-    }\n-    canonicalized_list[i] = '\\0';\n-    return canonicalized_list;\n-  }\n-};\n-\n@@ -129,1 +89,1 @@\n-    for (TraceAutoVectorizationTagNameIter iter(option); *iter != nullptr && _valid; ++iter) {\n+    for (StringUtils::CommaSeparatedStringIterator iter(option); *iter != nullptr && _valid; ++iter) {\n","filename":"src\/hotspot\/share\/opto\/traceAutoVectorizationTag.hpp","additions":2,"deletions":42,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,0 +52,43 @@\n+\n+  class CommaSeparatedStringIterator {\n+  private:\n+    char* _token;\n+    char* _saved_ptr;\n+    char* _list;\n+\n+  public:\n+    CommaSeparatedStringIterator(ccstrlist option) {\n+      \/\/ Immediately make a private copy of option, and\n+      \/\/ replace spaces and newlines with comma.\n+      _list = (char*) canonicalize(option);\n+      _saved_ptr = _list;\n+      _token = strtok_r(_saved_ptr, \",\", &_saved_ptr);\n+    }\n+\n+    ~CommaSeparatedStringIterator() {\n+      FREE_C_HEAP_ARRAY(char, _list);\n+    }\n+\n+    const char* operator*() const { return _token; }\n+\n+    CommaSeparatedStringIterator& operator++() {\n+      _token = strtok_r(nullptr, \",\", &_saved_ptr);\n+      return *this;\n+    }\n+\n+    ccstrlist canonicalize(ccstrlist option_value) {\n+      char* canonicalized_list = NEW_C_HEAP_ARRAY(char, strlen(option_value) + 1, mtCompiler);\n+      int i = 0;\n+      char current;\n+      while ((current = option_value[i]) != '\\0') {\n+        if (current == '\\n' || current == ' ') {\n+          canonicalized_list[i] = ',';\n+        } else {\n+          canonicalized_list[i] = current;\n+        }\n+        i++;\n+      }\n+      canonicalized_list[i] = '\\0';\n+      return canonicalized_list;\n+    }\n+  };\n","filename":"src\/hotspot\/share\/utilities\/stringUtils.hpp","additions":44,"deletions":1,"binary":false,"changes":45,"status":"modified"}]}