{"files":[{"patch":"@@ -444,1 +444,1 @@\n-          set.cloned()->set_traceautovectorization_tags(validator.tags());\n+          set.cloned()->set_trace_auto_vectorization_tags(validator.tags());\n","filename":"src\/hotspot\/share\/compiler\/compilerDirectives.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -134,1 +134,1 @@\n-  CHeapBitMap _traceautovectorization_tags;\n+  CHeapBitMap _trace_auto_vectorization_tags;\n@@ -209,2 +209,2 @@\n-  void set_traceautovectorization_tags(const CHeapBitMap& tags) {\n-    _traceautovectorization_tags.set_from(tags);\n+  void set_trace_auto_vectorization_tags(const CHeapBitMap& tags) {\n+    _trace_auto_vectorization_tags.set_from(tags);\n@@ -212,2 +212,2 @@\n-  const CHeapBitMap& traceautovectorization_tags() {\n-    return _traceautovectorization_tags;\n+  const CHeapBitMap& trace_auto_vectorization_tags() {\n+    return _trace_auto_vectorization_tags;\n","filename":"src\/hotspot\/share\/compiler\/compilerDirectives.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -344,1 +344,1 @@\n-            set->set_traceautovectorization_tags(validator.tags());\n+            set->set_trace_auto_vectorization_tags(validator.tags());\n","filename":"src\/hotspot\/share\/compiler\/directivesParser.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -283,0 +283,1 @@\n+\n@@ -287,0 +288,1 @@\n+\n@@ -291,0 +293,1 @@\n+\n@@ -295,0 +298,1 @@\n+\n@@ -299,0 +303,1 @@\n+\n@@ -303,0 +308,1 @@\n+\n@@ -307,0 +313,1 @@\n+\n@@ -311,0 +318,1 @@\n+\n@@ -315,0 +323,1 @@\n+\n@@ -319,0 +328,1 @@\n+\n@@ -333,0 +343,1 @@\n+\n","filename":"src\/hotspot\/share\/opto\/superword.hpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -25,2 +25,2 @@\n-#ifndef SHARE_OPTO_TRACEAUTOVECTORIZATIONTAG_HPP\n-#define SHARE_OPTO_TRACEAUTOVECTORIZATIONTAG_HPP\n+#ifndef SHARE_OPTO_TRACE_AUTO_VECTORIZATION_TAG_HPP\n+#define SHARE_OPTO_TRACE_AUTO_VECTORIZATION_TAG_HPP\n@@ -30,1 +30,0 @@\n-\/\/ TODO: adjust tags to what we need\n@@ -41,2 +40,2 @@\n-  flags(SW_INFO,              \"Trace SuperWord info\") \\\n-  flags(SW_VERBOSE,           \"Trace SuperWord verbose (all)\") \\\n+  flags(SW_INFO,              \"Trace SuperWord info (equivalent to TraceSuperWord)\") \\\n+  flags(SW_VERBOSE,           \"Trace SuperWord verbose (all SW tags enabled)\") \\\n@@ -48,3 +47,3 @@\n-  COMPILER_TRACEAUTOVECTORIZATION_TAG(table_entry)\n-  TRACEAUTOVECTORIZATION_TAG_NUM,\n-  TRACEAUTOVECTORIZATION_TAG_NONE\n+  COMPILER_TRACE_AUTO_VECTORIZATION_TAG(table_entry)\n+  TRACE_AUTO_VECTORIZATION_TAG_NUM,\n+  TRACE_AUTO_VECTORIZATION_TAG_NONE\n@@ -56,1 +55,1 @@\n-       COMPILER_TRACEAUTOVECTORIZATION_TAG(array_of_labels)\n+       COMPILER_TRACE_AUTO_VECTORIZATION_TAG(array_of_labels)\n@@ -62,1 +61,1 @@\n-       COMPILER_TRACEAUTOVECTORIZATION_TAG(array_of_labels)\n+       COMPILER_TRACE_AUTO_VECTORIZATION_TAG(array_of_labels)\n@@ -67,1 +66,1 @@\n-  for (int i = 0; i < TRACEAUTOVECTORIZATION_TAG_NUM; i++) {\n+  for (int i = 0; i < TRACE_AUTO_VECTORIZATION_TAG_NUM; i++) {\n@@ -72,1 +71,1 @@\n-  return TRACEAUTOVECTORIZATION_TAG_NONE;\n+  return TRACE_AUTO_VECTORIZATION_TAG_NONE;\n@@ -125,1 +124,1 @@\n-    _tags(TRACEAUTOVECTORIZATION_TAG_NUM, mtCompiler),\n+    _tags(TRACE_AUTO_VECTORIZATION_TAG_NUM, mtCompiler),\n@@ -145,1 +144,1 @@\n-      if (TRACEAUTOVECTORIZATION_TAG_NONE == tat) {\n+      if (TRACE_AUTO_VECTORIZATION_TAG_NONE == tag) {\n@@ -153,3 +152,3 @@\n-      } else if (ALL == tat) {\n-        _tags.set_range(0, TRACEAUTOVECTORIZATION_TAG_NUM);\n-      } else if (SW_VERBOSE == tat) {\n+      } else if (ALL == tag) {\n+        _tags.set_range(0, TRACE_AUTO_VECTORIZATION_TAG_NUM);\n+      } else if (SW_VERBOSE == tag) {\n@@ -166,1 +165,1 @@\n-      } else if (SW_INFO == tat) {\n+      } else if (SW_INFO == tag) {\n@@ -175,2 +174,2 @@\n-        assert(tat < TRACEAUTOVECTORIZATION_TAG_NUM, \"out of bounds\");\n-        _tags.at_put(tat, set_bit);\n+        assert(tag < TRACE_AUTO_VECTORIZATION_TAG_NUM, \"out of bounds\");\n+        _tags.at_put(tag, set_bit);\n@@ -199,1 +198,1 @@\n-    for (int i = 0; i < TRACEAUTOVECTORIZATION_TAG_NUM; i++) {\n+    for (int i = 0; i < TRACE_AUTO_VECTORIZATION_TAG_NUM; i++) {\n@@ -206,1 +205,1 @@\n-#endif \/\/ SHARE_OPTO_TRACEAUTOVECTORIZATIONTAG_HPP\n+#endif \/\/ SHARE_OPTO_TRACE_AUTO_VECTORIZATION_TAG_HPP\n","filename":"src\/hotspot\/share\/opto\/traceAutoVectorizationTag.hpp","additions":21,"deletions":22,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-  , _tracer(phase->C->directive()->traceautovectorization_tags().at(TraceAutoVectorizationTag::POINTER_ANALYSIS))\n+  , _tracer(phase->C->directive()->trace_auto_vectorization_tags().at(TraceAutoVectorizationTag::POINTER_ANALYSIS))\n","filename":"src\/hotspot\/share\/opto\/vectorization.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-  VTrace() : _trace_tags(Compile::current()->directive()->traceautovectorization_tags()) {}\n+  VTrace() : _trace_tags(Compile::current()->directive()->trace_auto_vectorization_tags()) {}\n","filename":"src\/hotspot\/share\/opto\/vectorization.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}