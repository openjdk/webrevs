{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,1 @@\n+import jdk.internal.util.ArraysSupport;\n@@ -794,0 +795,4 @@\n+     *\n+     * @throws  OutOfMemoryError\n+     *          If the output $otype$ buffer for the requested size of the input\n+     *          $itype$ buffer cannot be allocated\n@@ -798,1 +803,2 @@\n-        int n = (int)(in.remaining() * average$ItypesPerOtype$());\n+        int n = Math.min((int)(in.remaining() * average$ItypesPerOtype$()),\n+                    ArraysSupport.SOFT_MAX_ARRAY_LENGTH);\n@@ -813,1 +819,2 @@\n-                n = 2*n + 1;    \/\/ Ensure progress; n might be 0!\n+                \/\/ Ensure progress; n might be 0!\n+                n = ArraysSupport.newLength(n, Math.min(n + 1, 1_024), n + 1);\n","filename":"src\/java.base\/share\/classes\/java\/nio\/charset\/Charset-X-Coder.java.template","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8272613\n+ * @summary Make sure IAE is not thrown on `int` overflow, turning negative\n+ *          size. The test should either not throw any Throwable, or an OOME\n+ *          with real Java heap space error (not \"exceeds VM limit\").\n+ * @requires sun.arch.data.model == \"64\"\n+ * @run junit\/othervm XcodeOverflow\n+ *\/\n+\n+import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.jupiter.params.provider.Arguments;\n+\n+public class XcodeOverflow {\n+    private static Stream<Arguments> sizes() {\n+        return Stream.of(\n+            \/\/ SOFT_MAX_ARRAY_LENGTH: copied from ArraysSupport. No overflow; no OOME.\n+            Arguments.of(Integer.MAX_VALUE - 8),\n+\n+            \/\/ overflow case: OOME w\/ \"Java heap space\" is thrown on decoding\n+            Arguments.of(Integer.MAX_VALUE - 1000000)\n+        );\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"sizes\")\n+    public void testEncodeOverflow(int size) throws CharacterCodingException {\n+        try {\n+            StandardCharsets.UTF_8\n+                    .newEncoder()\n+                    .encode(CharBuffer.wrap(new char[size], 0, size));\n+            System.out.println(\"Encoded without error\");\n+        } catch (OutOfMemoryError oome) {\n+            if (oome.getMessage().equals(\"Java heap space\")) {\n+                System.out.println(\"OOME for \\\"Java heap space\\\" is thrown correctly during encoding\");\n+            } else {\n+                throw new RuntimeException(\"Unexpected OOME\", oome);\n+            }\n+        }\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"sizes\")\n+    public void testDecodeOverflow(int size) throws CharacterCodingException {\n+        try {\n+            StandardCharsets.UTF_8\n+                .newDecoder()\n+                .decode(ByteBuffer.wrap(new byte[size], 0, size));\n+            System.out.println(\"Decoded without error\");\n+        } catch (OutOfMemoryError oome) {\n+            if (oome.getMessage().equals(\"Java heap space\")) {\n+                System.out.println(\"OOME for \\\"Java heap space\\\" is thrown correctly during decoding\");\n+            } else {\n+                throw new RuntimeException(\"Unexpected OOME\", oome);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/nio\/charset\/CharsetDecoder\/XcodeOverflow.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"}]}