{"files":[{"patch":"@@ -2222,0 +2222,4 @@\n+size_t G1CollectedHeap::soft_max_capacity() const {\n+  return clamp(align_up(AtomicAccess::load(&SoftMaxHeapSize), G1HeapRegion::GrainBytes), min_capacity(), max_capacity());\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1223,1 +1223,1 @@\n-  \/\/ Print the maximum heap capacity.\n+  \/\/ Returns the maximum heap capacity.\n@@ -1227,0 +1227,3 @@\n+  \/\/ Current marking goal\/maximum capacity.\n+  size_t soft_max_capacity() const;\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -33,0 +33,2 @@\n+  _current_heap_size(0),\n+  _current_soft_max_heap_size(0),\n@@ -34,1 +36,0 @@\n-  _target_occupancy(0),\n@@ -41,1 +42,18 @@\n-void G1IHOPControl::update_target_occupancy(size_t new_target_occupancy) {\n+size_t G1IHOPControl::target_occupancy() const {\n+  return MIN2(_current_heap_size, _current_soft_max_heap_size);\n+}\n+\n+size_t G1IHOPControl::current_heap_size() const {\n+  return _current_heap_size;\n+}\n+\n+size_t G1IHOPControl::current_soft_max_heap_size() const {\n+  return _current_soft_max_heap_size;\n+}\n+\n+size_t G1IHOPControl::get_conc_mark_start_threshold() {\n+  _current_soft_max_heap_size = G1CollectedHeap::heap()->soft_max_capacity();\n+  return get_conc_mark_start_threshold_internal();\n+}\n+\n+void G1IHOPControl::update_heap_size(size_t new_heap_size) {\n@@ -43,2 +61,3 @@\n-                      _target_occupancy, new_target_occupancy);\n-  _target_occupancy = new_target_occupancy;\n+                      _current_heap_size, new_heap_size);\n+  _current_heap_size = new_heap_size;\n+  _current_soft_max_heap_size = G1CollectedHeap::heap()->soft_max_capacity();\n@@ -54,3 +73,3 @@\n-  assert(_target_occupancy > 0, \"Target occupancy still not updated yet.\");\n-  size_t cur_conc_mark_start_threshold = get_conc_mark_start_threshold();\n-  log_debug(gc, ihop)(\"Basic information (value update), threshold: %zuB (%1.2f), target occupancy: %zuB, current occupancy: %zuB, \"\n+  assert(_current_heap_size > 0, \"Heap size occupancy still not updated yet.\");\n+  size_t cur_conc_mark_start_threshold = get_conc_mark_start_threshold_internal();\n+  log_debug(gc, ihop)(\"Basic information (value update), threshold: %zuB (%1.2f), target occupancy: %zuB, heap used: %zuB, heap size: %zuB, soft max size: %zuB, \"\n@@ -59,2 +78,2 @@\n-                      percent_of(cur_conc_mark_start_threshold, _target_occupancy),\n-                      _target_occupancy,\n+                      percent_of(cur_conc_mark_start_threshold, target_occupancy()),\n+                      target_occupancy(),\n@@ -62,0 +81,2 @@\n+                      current_heap_size(),\n+                      current_soft_max_heap_size(),\n@@ -69,3 +90,3 @@\n-  assert(_target_occupancy > 0, \"Target occupancy still not updated yet.\");\n-  tracer->report_basic_ihop_statistics(get_conc_mark_start_threshold(),\n-                                       _target_occupancy,\n+  assert(_current_heap_size > 0, \"Heap size still not updated yet.\");\n+  tracer->report_basic_ihop_statistics(get_conc_mark_start_threshold_internal(),\n+                                       target_occupancy(),\n@@ -73,0 +94,2 @@\n+                                       current_heap_size(),\n+                                       current_soft_max_heap_size(),\n@@ -100,1 +123,1 @@\n-  guarantee(_target_occupancy > 0, \"Target occupancy still not updated yet.\");\n+  guarantee(current_heap_size() > 0, \"Target occupancy still not updated yet.\");\n@@ -113,1 +136,1 @@\n-    _target_occupancy * (100.0 - _heap_waste_percent) \/ 100.0\n+    target_occupancy() * (100.0 - _heap_waste_percent) \/ 100.0\n@@ -126,1 +149,1 @@\n-size_t G1AdaptiveIHOPControl::get_conc_mark_start_threshold() {\n+size_t G1AdaptiveIHOPControl::get_conc_mark_start_threshold_internal() {\n@@ -145,1 +168,1 @@\n-    return (size_t)(_initial_ihop_percent * _target_occupancy \/ 100.0);\n+    return (size_t)(_initial_ihop_percent * target_occupancy() \/ 100.0);\n@@ -172,1 +195,1 @@\n-                      \"occupancy: %zuB, additional buffer size: %zuB, predicted old gen allocation rate: %1.2fB\/s, \"\n+                      \"occupancy: %zuB, heap size: %zuB, soft max size: %zuB, additional buffer size: %zuB, predicted old gen allocation rate: %1.2fB\/s, \"\n@@ -174,2 +197,2 @@\n-                      get_conc_mark_start_threshold(),\n-                      percent_of(get_conc_mark_start_threshold(), actual_target),\n+                      get_conc_mark_start_threshold_internal(),\n+                      percent_of(get_conc_mark_start_threshold_internal(), actual_target),\n@@ -178,0 +201,2 @@\n+                      current_heap_size(),\n+                      current_soft_max_heap_size(),\n@@ -186,1 +211,1 @@\n-  tracer->report_adaptive_ihop_statistics(get_conc_mark_start_threshold(),\n+  tracer->report_adaptive_ihop_statistics(get_conc_mark_start_threshold_internal(),\n@@ -189,0 +214,2 @@\n+                                          current_heap_size(),\n+                                          current_soft_max_heap_size(),\n","filename":"src\/hotspot\/share\/gc\/g1\/g1IHOPControl.cpp","additions":47,"deletions":20,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,5 @@\n- protected:\n+  \/\/ Current values of heap\/SoftMaxHeapSize variables used for calculations.\n+  size_t _current_heap_size;\n+  size_t _current_soft_max_heap_size;\n+\n+protected:\n@@ -42,3 +46,0 @@\n-  \/\/ The target maximum occupancy of the heap. The target occupancy is the number\n-  \/\/ of bytes when marking should be finished and reclaim started.\n-  size_t _target_occupancy;\n@@ -55,0 +56,14 @@\n+  \/\/ The target maximum occupancy of the heap. The target occupancy is the number\n+  \/\/ of bytes when marking should be finished and reclaim started.\n+  \/\/ It is only considered for starting the marking.\n+  \/\/ This is a function of current heap size and external SoftMaxHeapSize goal.\n+  size_t target_occupancy() const;\n+\n+  size_t current_heap_size() const;\n+  size_t current_soft_max_heap_size() const;\n+\n+  \/\/ Same as get_conc_mark_start_threshold(), but using the internally stored variables\n+  \/\/ to calculate to achieve some consistency when called multiple times for various\n+  \/\/ reasons.\n+  virtual size_t get_conc_mark_start_threshold_internal() = 0;\n+\n@@ -62,1 +77,1 @@\n-  virtual size_t get_conc_mark_start_threshold() = 0;\n+  virtual size_t get_conc_mark_start_threshold();\n@@ -64,2 +79,2 @@\n-  \/\/ Adjust target occupancy.\n-  virtual void update_target_occupancy(size_t new_target_occupancy);\n+  \/\/ Adjust current heap size.\n+  virtual void update_heap_size(size_t new_heap_size);\n@@ -94,3 +109,3 @@\n-  size_t get_conc_mark_start_threshold() {\n-    guarantee(_target_occupancy > 0, \"Target occupancy must have been initialized.\");\n-    return (size_t) (_initial_ihop_percent * _target_occupancy \/ 100.0);\n+  size_t get_conc_mark_start_threshold_internal() {\n+    guarantee(current_heap_size() > 0, \"Target occupancy must have been initialized.\");\n+    return (size_t) (_initial_ihop_percent * target_occupancy() \/ 100.0);\n@@ -149,1 +164,1 @@\n-  virtual size_t get_conc_mark_start_threshold();\n+  virtual size_t get_conc_mark_start_threshold_internal();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1IHOPControl.hpp","additions":27,"deletions":12,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -167,1 +167,1 @@\n-  _ihop_control->update_target_occupancy(new_number_of_regions * G1HeapRegion::GrainBytes);\n+  _ihop_control->update_heap_size(new_number_of_regions * G1HeapRegion::GrainBytes);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -102,0 +102,2 @@\n+                                               size_t current_max_occupancy,\n+                                               size_t soft_max_heap_size,\n@@ -108,0 +110,2 @@\n+                             current_max_occupancy,\n+                             soft_max_heap_size,\n@@ -116,0 +120,2 @@\n+                                                  size_t current_max_occupancy,\n+                                                  size_t soft_max_heap_size,\n@@ -123,0 +129,2 @@\n+                                current_max_occupancy,\n+                                soft_max_heap_size,\n@@ -210,0 +218,2 @@\n+                                             size_t current_max_occupancy,\n+                                             size_t soft_max_heap_size,\n@@ -220,0 +230,2 @@\n+    evt.set_currentMaxOccupancy(current_max_occupancy);\n+    evt.set_currentSoftMaxHeapSize(soft_max_heap_size);\n@@ -231,0 +243,2 @@\n+                                                size_t current_max_occupancy,\n+                                                size_t soft_max_heap_size,\n@@ -242,0 +256,2 @@\n+    evt.set_currentMaxOccupancy(current_max_occupancy);\n+    evt.set_currentSoftMaxHeapSize(soft_max_heap_size);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Trace.cpp","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -56,0 +56,2 @@\n+                                    size_t current_max_occupancy,\n+                                    size_t soft_max_heap_size,\n@@ -62,0 +64,2 @@\n+                                       size_t current_max_occupancy,\n+                                       size_t soft_max_heap_size,\n@@ -77,0 +81,2 @@\n+                                  size_t current_max_occupancy,\n+                                  size_t soft_max_heap_size,\n@@ -83,0 +89,2 @@\n+                                     size_t current_max_occupancy,\n+                                     size_t soft_max_heap_size,\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Trace.hpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -502,0 +502,2 @@\n+    <Field type=\"ulong\" contentType=\"bytes\" name=\"currentMaxOccupancy\" label=\"Current Maximum Occupancy\" description=\"Current old generation maximum occupancy\" \/>\n+    <Field type=\"ulong\" contentType=\"bytes\" name=\"currentSoftMaxHeapSize\" label=\"Current Soft Maximum Heap Size\" description=\"Current value of SoftMaxHeapSize\" \/>\n@@ -516,0 +518,2 @@\n+    <Field type=\"ulong\" contentType=\"bytes\" name=\"currentMaxOccupancy\" label=\"Current Maximum Occupancy\" description=\"Current old generation maximum occupancy\" \/>\n+    <Field type=\"ulong\" contentType=\"bytes\" name=\"currentSoftMaxHeapSize\" label=\"Current Soft Maximum Heap Size\" description=\"Current value of SoftMaxHeapSize\" \/>\n","filename":"src\/hotspot\/share\/jfr\/metadata\/metadata.xml","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-  ctrl.update_target_occupancy(100);\n+  ctrl.update_heap_size(100);\n@@ -118,1 +118,1 @@\n-  ctrl.update_target_occupancy(target_size);\n+  ctrl.update_heap_size(target_size);\n@@ -195,1 +195,1 @@\n-  ctrl.update_target_occupancy(target_size);\n+  ctrl.update_heap_size(target_size);\n@@ -217,1 +217,1 @@\n-  ctrl2.update_target_occupancy(target_size);\n+  ctrl2.update_heap_size(target_size);\n@@ -233,1 +233,1 @@\n-  ctrl3.update_target_occupancy(target_size);\n+  ctrl3.update_heap_size(target_size);\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_g1IHOPControl.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,135 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+package gc.g1;\n+\n+\/**\n+ * @test TestSoftMaxHeapSize\n+ * @summary Verify that G1 observes the SoftMaxHeapSize flag as it is changed externally.\n+ * @requires vm.gc.G1\n+ * @library \/test\/lib\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @run driver gc.g1.TestSoftMaxHeapSize\n+ *\n+ *\/\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.dcmd.PidJcmdExecutor;\n+import jdk.test.whitebox.WhiteBox;\n+\n+import java.util.Arrays;\n+import java.util.ArrayList;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class TestSoftMaxHeapSize {\n+    static final int M = 1024 * 1024;\n+    static final int MinHeapSize = 100 * M;\n+    static final int MaxHeapSize = 512 * M;\n+\n+    \/\/ Sets SoftMaxHeapSize using jcmd to the values passed in as arguments, executing\n+    \/\/ a GC after each time having set the value.\n+    static class RunTests {\n+        static final WhiteBox wb = jdk.test.whitebox.WhiteBox.getWhiteBox();\n+\n+        public static void setSoftMaxHeapSize(long value) {\n+            PidJcmdExecutor jcmd = new PidJcmdExecutor();\n+            jcmd.execute(\"VM.set_flag SoftMaxHeapSize \" + value, true);\n+        }\n+\n+        public static void main(String[] args) {\n+            wb.fullGC(); \/\/ Clean up heap.\n+\n+            for (String value : args) {\n+              setSoftMaxHeapSize(Long.parseLong(value));\n+              wb.youngGC();\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ SoftMaxHeapSize values to set in order.\n+        long[] tests = new long[] {\n+                          MinHeapSize,\n+                          MinHeapSize \/ 2,  \/\/ Lower than MinHeapSize\n+                          MaxHeapSize \/ 2,\n+                          MaxHeapSize,\n+                          MaxHeapSize * 2   \/\/ Higher than MaxHeapSize\n+                        };\n+        \/\/ Expected values of the SoftMaxHeapSize as reported by the collector corresponding\n+        \/\/ to above requested values.\n+        long[] expected = new long[] {\n+                            MinHeapSize,\n+                            MinHeapSize,\n+                            MaxHeapSize \/ 2,\n+                            MaxHeapSize,\n+                            MaxHeapSize\n+                          };\n+\n+        OutputAnalyzer output;\n+        String[] arguments = new String[]\n+                             { \"-XX:+UseG1GC\",\n+                               \"-Xmx\" + MaxHeapSize,\n+                               \"-Xms\" + MinHeapSize,\n+                               \"-Xlog:gc+ihop=trace\",\n+                               \"-Xbootclasspath\/a:.\",\n+                               \"-XX:+UnlockDiagnosticVMOptions\",\n+                               \"-XX:+WhiteBoxAPI\",\n+                               \"-Dtest.jdk=\" + System.getProperty(\"test.jdk\"), \/\/ Needed for the jcmd tool.\n+                               RunTests.class.getName()\n+                             };\n+\n+        \/\/ Generate command line, adding the test values to above arguments.\n+        ArrayList<String> allArgs = new ArrayList<>();\n+        allArgs.addAll(Arrays.asList(arguments));\n+        for (long l: tests) {\n+            allArgs.add(String.valueOf(l));\n+        }\n+\n+        output = ProcessTools.executeLimitedTestJava(allArgs);\n+\n+        System.out.println(output.getStdout());\n+\n+        \/\/ Verify target values. Every GC prints soft max heap size used in the\n+        \/\/ calculation in the gc+ihop \"Basic information\" message.\n+        Pattern p = Pattern.compile(\"Basic.* soft max size: (\\\\d+)B\");\n+        Matcher m = p.matcher(output.getStdout());\n+\n+        int i = 1;\n+        while (m.find()) {\n+          System.out.println(\"Found new soft max \" + m.group(1));\n+          Asserts.assertEQ(expected[i - 1], Long.parseLong(m.group(1)), \"Expected SoftMaxHeapSize of \" + expected[i - 1] + \"B but got \" + m.group(1) + \"B for test #\" + i);\n+          i++;\n+        }\n+        Asserts.assertEQ(i - 1, expected.length, \"Expected \" + (i - 1) + \" log lines, got \" + expected.length);\n+\n+        output.shouldHaveExitValue(0);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestSoftMaxHeapSize.java","additions":135,"deletions":0,"binary":false,"changes":135,"status":"added"}]}