{"files":[{"patch":"@@ -0,0 +1,135 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+package gc.g1;\n+\n+\/**\n+ * @test TestSoftMaxHeapSize\n+ * @summary Verify that G1 observes the SoftMaxHeapSize flag as it is changed externally.\n+ * @requires vm.gc.G1\n+ * @library \/test\/lib\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @run driver gc.g1.TestSoftMaxHeapSize\n+ *\n+ *\/\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.dcmd.PidJcmdExecutor;\n+import jdk.test.whitebox.WhiteBox;\n+\n+import java.util.Arrays;\n+import java.util.ArrayList;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class TestSoftMaxHeapSize {\n+    static final int M = 1024 * 1024;\n+    static final int MinHeapSize = 100 * M;\n+    static final int MaxHeapSize = 512 * M;\n+\n+    \/\/ Sets SoftMaxHeapSize using jcmd to the values passed in as arguments, executing\n+    \/\/ a GC after each time having set the value.\n+    static class RunTests {\n+        static final WhiteBox wb = jdk.test.whitebox.WhiteBox.getWhiteBox();\n+\n+        public static void setSoftMaxHeapSize(long value) {\n+            PidJcmdExecutor jcmd = new PidJcmdExecutor();\n+            jcmd.execute(\"VM.set_flag SoftMaxHeapSize \" + value, true);\n+        }\n+\n+        public static void main(String[] args) {\n+            wb.fullGC(); \/\/ Clean up heap.\n+        \n+            for (String value : args) {\n+              setSoftMaxHeapSize(Long.parseLong(value));\n+              wb.youngGC();\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ SoftMaxHeapSize values to set in order.\n+        long[] tests = new long[] {\n+                          MinHeapSize,\n+                          MinHeapSize \/ 2,  \/\/ Lower than MinHeapSize\n+                          MaxHeapSize \/ 2,\n+                          MaxHeapSize,\n+                          MaxHeapSize * 2   \/\/ Higher than MaxHeapSize\n+                        };\n+        \/\/ Expected values of the SoftMaxHeapSize as reported by the collector corresponding\n+        \/\/ to above requested values.\n+        long[] expected = new long[] {\n+                            MinHeapSize,\n+                            MinHeapSize,\n+                            MaxHeapSize \/ 2,\n+                            MaxHeapSize,\n+                            MaxHeapSize\n+                          };\n+\n+        OutputAnalyzer output;\n+        String[] arguments = new String[]\n+                             { \"-XX:+UseG1GC\",\n+                               \"-Xmx\" + MaxHeapSize,\n+                               \"-Xms\" + MinHeapSize,\n+                               \"-Xlog:gc+ihop=trace\",\n+                               \"-Xbootclasspath\/a:.\",\n+                               \"-XX:+UnlockDiagnosticVMOptions\",\n+                               \"-XX:+WhiteBoxAPI\",\n+                               \"-Dtest.jdk=\" + System.getProperty(\"test.jdk\"), \/\/ Needed for the jcmd tool.\n+                               RunTests.class.getName()\n+                             };\n+\n+        \/\/ Generate command line, adding the test values to above arguments.\n+        ArrayList<String> allArgs = new ArrayList<>();\n+        allArgs.addAll(Arrays.asList(arguments));\n+        for (long l: tests) {\n+            allArgs.add(String.valueOf(l));\n+        }\n+        \n+        output = ProcessTools.executeLimitedTestJava(allArgs);\n+\n+        System.out.println(output.getStdout());\n+\n+        \/\/ Verify target values. Every GC prints soft max heap size used in the\n+        \/\/ calculation in the gc+ihop \"Basic information\" message.\n+        Pattern p = Pattern.compile(\"Basic.* soft max size: (\\\\d+)B\");\n+        Matcher m = p.matcher(output.getStdout());\n+\n+        int i = 1;\n+        while (m.find()) {\n+          System.out.println(\"Found new soft max \" + m.group(1));\n+          Asserts.assertEQ(expected[i - 1], Long.parseLong(m.group(1)), \"Expected SoftMaxHeapSize of \" + expected[i - 1] + \"B but got \" + m.group(1) + \"B for test #\" + i);\n+          i++;\n+        }\n+        Asserts.assertEQ(i - 1, expected.length, \"Expected \" + (i - 1) + \" log lines, got \" + expected.length); \n+\n+        output.shouldHaveExitValue(0);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestSoftMaxHeapSize.java","additions":135,"deletions":0,"binary":false,"changes":135,"status":"added"},{"patch":"@@ -3,1 +3,0 @@\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +27,2 @@\n- * @summary Test that G1 checks SoftMaxHeapSize\n- * @requires vm.gc.g1\n+ * @summary Test that Shenandoah checks SoftMaxHeapSize\n+ * @requires vm.gc.Shenandoah\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/options\/TestSoftMaxHeapSize.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"}]}