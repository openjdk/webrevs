{"files":[{"patch":"@@ -213,1 +213,1 @@\n-  if ((cmp_op != Op_CmpI || cmove_op != Op_CMoveI) && (cmp_op != Op_CmpL || cmove_op != Op_CMoveL)) {\n+  if (!((cmp_op == Op_CmpI && cmove_op == Op_CMoveI) || (cmp_op == Op_CmpL && cmove_op == Op_CMoveL))) {\n","filename":"src\/hotspot\/share\/opto\/movenode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * @run driver compiler.c2.irTests.TestIfMinMax\n+ * @run main compiler.c2.irTests.TestIfMinMax\n@@ -140,0 +140,301 @@\n+\n+    @Setup\n+    static Object[] setupIntArrays() {\n+        int[] a = new int[512];\n+        int[] b = new int[512];\n+\n+        for (int i = 0; i < 512; i++) {\n+            a[i] = RANDOM.nextInt();\n+            b[i] = RANDOM.nextInt();\n+        }\n+\n+        return new Object[] { a, b };\n+    }\n+\n+    @Setup\n+    static Object[] setupLongArrays() {\n+        long[] a = new long[512];\n+        long[] b = new long[512];\n+\n+        for (int i = 0; i < 512; i++) {\n+            a[i] = RANDOM.nextLong();\n+            b[i] = RANDOM.nextLong();\n+        }\n+\n+        return new Object[] { a, b };\n+    }\n+\n+    @Test\n+    @IR(applyIf = { \"SuperWordReductions\", \"true\" },\n+        applyIfCPUFeatureOr = { \"sse4.1\", \"true\" , \"asimd\" , \"true\"},\n+        counts = { IRNode.MAX_REDUCTION_V, \"> 0\" })\n+    @Arguments(setup = \"setupIntArrays\")\n+    public Object[] testMaxIntReduction(int[] a, int[] b) {\n+        int r = 0;\n+        for (int i = 0; i < a.length; i++) {\n+            int aI = a[i] * 2;\n+\n+            r = aI > r ? aI : r;\n+        }\n+\n+        return new Object[] { a, r };\n+    }\n+\n+    @Check(test = \"testMaxIntReduction\")\n+    public void checkTestMaxIntReduction(Object[] vals) {\n+        int[] a = (int[]) vals[0];\n+        int testRet = (int) vals[1];\n+\n+        int r = 0;\n+        for (int i = 0; i < a.length; i++) {\n+            int aI = a[i] * 2;\n+\n+            r = aI > r ? aI : r;\n+        }\n+\n+        if (r != testRet) {\n+            throw new IllegalStateException(\"Int max reduction test failed: expected \" + testRet + \" but got \" + r);\n+        }\n+    }\n+\n+    @Test\n+    @IR(applyIf = { \"SuperWordReductions\", \"true\" },\n+        applyIfCPUFeatureOr = { \"sse4.1\", \"true\" , \"asimd\" , \"true\"},\n+        counts = { IRNode.MIN_REDUCTION_V, \"> 0\" })\n+    @Arguments(setup = \"setupIntArrays\")\n+    public Object[] testMinIntReduction(int[] a, int[] b) {\n+        int r = 0;\n+\n+        for (int i = 0; i < a.length; i++) {\n+            int aI = a[i] * 2;\n+\n+            r = aI < r ? aI : r;\n+        }\n+\n+        return new Object[] { a, r };\n+    }\n+\n+    @Check(test = \"testMinIntReduction\")\n+    public void checkTestMinIntReduction(Object[] vals) {\n+        int[] a = (int[]) vals[0];\n+        int testRet = (int) vals[1];\n+\n+        int r = 0;\n+        for (int i = 0; i < a.length; i++) {\n+            int aI = a[i] * 2;\n+\n+            r = aI < r ? aI : r;\n+        }\n+\n+        if (r != testRet) {\n+            throw new IllegalStateException(\"Int min reduction test failed: expected \" + testRet + \" but got \" + r);\n+        }\n+    }\n+\n+    @Test\n+    @IR(applyIf = { \"SuperWordReductions\", \"true\" },\n+        applyIfCPUFeatureOr = { \"avx512\", \"true\" },\n+        counts = { IRNode.MAX_REDUCTION_V, \"> 0\" })\n+    @Arguments(setup = \"setupLongArrays\")\n+    public Object[] testMaxLongReduction(long[] a, long[] b) {\n+        long r = 0;\n+\n+        for (int i = 0; i < a.length; i++) {\n+            long aI = a[i] * 2;\n+\n+            r = aI > r ? aI : r;\n+        }\n+\n+        return new Object[] { a, r };\n+    }\n+\n+    @Check(test = \"testMaxLongReduction\")\n+    public void checkTestMaxLongReduction(Object[] vals) {\n+        long[] a = (long[]) vals[0];\n+        long testRet = (long) vals[1];\n+\n+        long r = 0;\n+        for (int i = 0; i < a.length; i++) {\n+            long aI = a[i] * 2;\n+\n+            r = aI > r ? aI : r;\n+        }\n+\n+        if (r != testRet) {\n+            throw new IllegalStateException(\"Long max reduction test failed: expected \" + testRet + \" but got \" + r);\n+        }\n+    }\n+\n+    @Test\n+    @IR(applyIf = { \"SuperWordReductions\", \"true\" },\n+        applyIfCPUFeatureOr = { \"avx512\", \"true\" },\n+        counts = { IRNode.MIN_REDUCTION_V, \"> 0\" })\n+    @Arguments(setup = \"setupLongArrays\")\n+    public Object[] testMinLongReduction(long[] a, long[] b) {\n+        long r = 0;\n+\n+        for (int i = 0; i < a.length; i++) {\n+            long aI = a[i] * 2;\n+\n+            r = aI < r ? aI : r;\n+        }\n+\n+        return new Object[] { a, r };\n+    }\n+\n+    @Check(test = \"testMinLongReduction\")\n+    public void checkTestMinLongReduction(Object[] vals) {\n+        long[] a = (long[]) vals[0];\n+        long testRet = (long) vals[1];\n+\n+        long r = 0;\n+        for (int i = 0; i < a.length; i++) {\n+            long aI = a[i] * 2;\n+\n+            r = aI < r ? aI : r;\n+        }\n+\n+        if (r != testRet) {\n+            throw new IllegalStateException(\"Long min reduction test failed: expected \" + testRet + \" but got \" + r);\n+        }\n+    }\n+\n+    @Test\n+    @IR(applyIfCPUFeatureOr = { \"sse4.1\", \"true\" , \"asimd\" , \"true\"},\n+        counts = { IRNode.MAX_VI, \"> 0\" })\n+    @Arguments(setup = \"setupIntArrays\")\n+    public Object[] testMaxIntVector(int[] a, int[] b) {\n+        int[] r = new int[a.length];\n+\n+        for (int i = 0; i < a.length; i++) {\n+            int aI = a[i];\n+            int bI = b[i];\n+\n+            r[i] = aI > bI ? aI : bI;\n+        }\n+\n+        return new Object[] { a, b, r };\n+    }\n+\n+    @Check(test = \"testMaxIntVector\")\n+    public void checkTestMaxIntVector(Object[] vals) {\n+        int[] a = (int[]) vals[0];\n+        int[] b = (int[]) vals[1];\n+        int[] testRet = (int[]) vals[2];\n+\n+        for (int i = 0; i < a.length; i++) {\n+            int aI = a[i];\n+            int bI = b[i];\n+\n+            int r = aI > bI ? aI : bI;\n+\n+            if (r != testRet[i]) {\n+                throw new IllegalStateException(\"Int max vectorization test failed: expected \" + testRet + \" but got \" + r);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @IR(applyIfCPUFeatureOr = { \"sse4.1\", \"true\" , \"asimd\" , \"true\"},\n+        counts = { IRNode.MIN_VI, \"> 0\" })\n+    @Arguments(setup = \"setupIntArrays\")\n+    public Object[] testMinIntVector(int[] a, int[] b) {\n+        int[] r = new int[a.length];\n+\n+        for (int i = 0; i < a.length; i++) {\n+            int aI = a[i];\n+            int bI = b[i];\n+\n+            r[i] = aI < bI ? aI : bI;\n+        }\n+\n+        return new Object[] { a, b, r };\n+    }\n+\n+    @Check(test = \"testMinIntVector\")\n+    public void checkTestMinIntVector(Object[] vals) {\n+        int[] a = (int[]) vals[0];\n+        int[] b = (int[]) vals[1];\n+        int[] testRet = (int[]) vals[2];\n+\n+        for (int i = 0; i < a.length; i++) {\n+            int aI = a[i];\n+            int bI = b[i];\n+\n+            int r = aI < bI ? aI : bI;\n+\n+            if (r != testRet[i]) {\n+                throw new IllegalStateException(\"Int min vectorization test failed: expected \" + testRet + \" but got \" + r);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @IR(applyIfCPUFeatureOr = { \"sse4.1\", \"true\" , \"asimd\" , \"true\"},\n+        counts = { IRNode.MAX_VL, \"> 0\" })\n+    @Arguments(setup = \"setupLongArrays\")\n+    public Object[] testMaxLongVector(long[] a, long[] b) {\n+        long[] r = new long[a.length];\n+\n+        for (int i = 0; i < a.length; i++) {\n+            long aI = a[i];\n+            long bI = b[i];\n+\n+            r[i] = aI > bI ? aI : bI;\n+        }\n+\n+        return new Object[] { a, b, r };\n+    }\n+\n+    @Check(test = \"testMaxLongVector\")\n+    public void checkTestMaxLongVector(Object[] vals) {\n+        long[] a = (long[]) vals[0];\n+        long[] b = (long[]) vals[1];\n+        long[] testRet = (long[]) vals[2];\n+\n+        for (int i = 0; i < a.length; i++) {\n+            long aI = a[i];\n+            long bI = b[i];\n+\n+            long r = aI > bI ? aI : bI;\n+\n+            if (r != testRet[i]) {\n+                throw new IllegalStateException(\"Long max vectorization test failed: expected \" + testRet + \" but got \" + r);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @IR(applyIfCPUFeatureOr = { \"sse4.1\", \"true\" , \"asimd\" , \"true\"},\n+        counts = { IRNode.MIN_VL, \"> 0\" })\n+    @Arguments(setup = \"setupLongArrays\")\n+    public Object[] testMinLongVector(long[] a, long[] b) {\n+        long[] r = new long[a.length];\n+\n+        for (int i = 0; i < a.length; i++) {\n+            long aI = a[i];\n+            long bI = b[i];\n+\n+            r[i] = aI < bI ? aI : bI;\n+        }\n+\n+        return new Object[] { a, b, r };\n+    }\n+\n+    @Check(test = \"testMinLongVector\")\n+    public void checkTestMinLongVector(Object[] vals) {\n+        long[] a = (long[]) vals[0];\n+        long[] b = (long[]) vals[1];\n+        long[] testRet = (long[]) vals[2];\n+\n+        for (int i = 0; i < a.length; i++) {\n+            long aI = a[i];\n+            long bI = b[i];\n+\n+            long r = aI < bI ? aI : bI;\n+\n+            if (r != testRet[i]) {\n+                throw new IllegalStateException(\"Long min vectorization test failed: expected \" + testRet + \" but got \" + r);\n+            }\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestIfMinMax.java","additions":302,"deletions":1,"binary":false,"changes":303,"status":"modified"},{"patch":"@@ -870,0 +870,5 @@\n+    public static final String MAX_VL = VECTOR_PREFIX + \"MAX_VL\" + POSTFIX;\n+    static {\n+        vectorNode(MAX_VL, \"MaxV\", TYPE_LONG);\n+    }\n+\n@@ -930,0 +935,5 @@\n+    public static final String MIN_VL = VECTOR_PREFIX + \"MIN_VL\" + POSTFIX;\n+    static {\n+        vectorNode(MIN_VL, \"MinV\", TYPE_LONG);\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"}]}