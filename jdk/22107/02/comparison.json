{"files":[{"patch":"@@ -28,0 +28,1 @@\n+import java.lang.classfile.constantpool.Utf8Entry;\n@@ -68,1 +69,1 @@\n-    String attributeName();\n+    Utf8Entry attributeName();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/Attribute.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import java.lang.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n@@ -58,2 +60,2 @@\n-    public final String attributeName() {\n-        return mapper.name();\n+    public Utf8Entry attributeName() {\n+        return TemporaryConstantPool.INSTANCE.utf8Entry(mapper.name());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/CustomAttribute.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-        buf.writeIndex(buf.constantPool().utf8Entry(name));\n+        buf.writeIndex(attr.attributeName());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractAttributeMapper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+    Utf8Entry name;\n@@ -62,2 +63,5 @@\n-    public String attributeName() {\n-        return mapper.name();\n+    public Utf8Entry attributeName() {\n+        if (name == null) {\n+            name = classReader.readEntry(payloadStart - 6, Utf8Entry.class);\n+        }\n+        return name;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BoundAttribute.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -577,1 +577,1 @@\n-                      list(\"attributes\", \"attribute\", clm.attributes().stream().map(Attribute::attributeName)))\n+                      list(\"attributes\", \"attribute\", clm.attributes().stream().map(Attribute::attributeName).map(Utf8Entry::stringValue)))\n@@ -675,1 +675,1 @@\n-                                          \"attribute\", f.attributes().stream().map(Attribute::attributeName)))\n+                                          \"attribute\", f.attributes().stream().map(Attribute::attributeName).map(Utf8Entry::stringValue)))\n@@ -686,1 +686,1 @@\n-                              \"attribute\", m.attributes().stream().map(Attribute::attributeName)))\n+                              \"attribute\", m.attributes().stream().map(Attribute::attributeName).map(Utf8Entry::stringValue)))\n@@ -697,1 +697,1 @@\n-                    \"attribute\", com.attributes().stream().map(Attribute::attributeName)));\n+                    \"attribute\", com.attributes().stream().map(Attribute::attributeName).map(Utf8Entry::stringValue)));\n@@ -999,1 +999,1 @@\n-                                            .map(Attribute::attributeName)))\n+                                            .map(Attribute::attributeName).map(Utf8Entry::stringValue)))\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassPrinterImpl.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -244,0 +244,5 @@\n+\n+                    @Override\n+                    public Utf8Entry attributeName() {\n+                        return constantPool.utf8Entry(Attributes.NAME_CHARACTER_RANGE_TABLE);\n+                    }\n@@ -268,0 +273,5 @@\n+\n+                    @Override\n+                    public Utf8Entry attributeName() {\n+                        return constantPool.utf8Entry(Attributes.NAME_LOCAL_VARIABLE_TABLE);\n+                    }\n@@ -292,0 +302,5 @@\n+\n+                    @Override\n+                    public Utf8Entry attributeName() {\n+                        return constantPool.utf8Entry(Attributes.NAME_LOCAL_VARIABLE_TYPE_TABLE);\n+                    }\n@@ -374,0 +389,5 @@\n+\n+            @Override\n+            public Utf8Entry attributeName() {\n+                return constantPool.utf8Entry(Attributes.NAME_CODE);\n+            }\n@@ -419,0 +439,5 @@\n+\n+        @Override\n+        public Utf8Entry attributeName() {\n+            return buf.constantPool().utf8Entry(Attributes.NAME_LINE_NUMBER_TABLE);\n+        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectCodeBuilder.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -149,0 +149,5 @@\n+\n+                @Override\n+                public Utf8Entry attributeName() {\n+                    return utf8Entry(Attributes.NAME_BOOTSTRAP_METHODS);\n+                }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/SplitConstantPool.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import java.lang.classfile.constantpool.Utf8Entry;\n@@ -404,0 +405,5 @@\n+\n+            @Override\n+            public Utf8Entry attributeName() {\n+                return cp.utf8Entry(Attributes.NAME_STACK_MAP_TABLE);\n+            }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/StackMapGenerator.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -57,5 +57,0 @@\n-    @Override\n-    public String attributeName() {\n-        return mapper.name();\n-    }\n-\n@@ -96,0 +91,2 @@\n+        private static final Utf8Entry NAME = TemporaryConstantPool.INSTANCE.utf8Entry(Attributes.NAME_CONSTANT_VALUE);\n+\n@@ -108,0 +105,4 @@\n+        @Override\n+        public Utf8Entry attributeName() {\n+            return NAME;\n+        }\n@@ -113,0 +114,3 @@\n+\n+        private static final Utf8Entry NAME = TemporaryConstantPool.INSTANCE.utf8Entry(Attributes.NAME_DEPRECATED);\n+\n@@ -116,0 +120,5 @@\n+\n+        @Override\n+        public Utf8Entry attributeName() {\n+            return NAME;\n+        }\n@@ -121,0 +130,3 @@\n+\n+        private static final Utf8Entry NAME = TemporaryConstantPool.INSTANCE.utf8Entry(Attributes.NAME_SYNTHETIC);\n+\n@@ -124,0 +136,5 @@\n+\n+        @Override\n+        public Utf8Entry attributeName() {\n+            return NAME;\n+        }\n@@ -129,0 +146,3 @@\n+\n+        private static final Utf8Entry NAME = TemporaryConstantPool.INSTANCE.utf8Entry(Attributes.NAME_SIGNATURE);\n+\n@@ -140,0 +160,5 @@\n+\n+        @Override\n+        public Utf8Entry attributeName() {\n+            return NAME;\n+        }\n@@ -145,0 +170,3 @@\n+\n+        private static final Utf8Entry NAME = TemporaryConstantPool.INSTANCE.utf8Entry(Attributes.NAME_EXCEPTIONS);\n+\n@@ -156,0 +184,5 @@\n+\n+        @Override\n+        public Utf8Entry attributeName() {\n+            return NAME;\n+        }\n@@ -161,0 +194,3 @@\n+\n+        private static final Utf8Entry NAME = TemporaryConstantPool.INSTANCE.utf8Entry(Attributes.NAME_ANNOTATION_DEFAULT);\n+\n@@ -172,0 +208,5 @@\n+\n+        @Override\n+        public Utf8Entry attributeName() {\n+            return NAME;\n+        }\n@@ -176,0 +217,3 @@\n+\n+        private static final Utf8Entry NAME = TemporaryConstantPool.INSTANCE.utf8Entry(Attributes.NAME_SOURCE_FILE);\n+\n@@ -188,0 +232,4 @@\n+        @Override\n+        public Utf8Entry attributeName() {\n+            return NAME;\n+        }\n@@ -192,0 +240,3 @@\n+\n+        private static final Utf8Entry NAME = TemporaryConstantPool.INSTANCE.utf8Entry(Attributes.NAME_STACK_MAP_TABLE);\n+\n@@ -203,0 +254,5 @@\n+\n+        @Override\n+        public Utf8Entry attributeName() {\n+            return NAME;\n+        }\n@@ -208,0 +264,3 @@\n+\n+        private static final Utf8Entry NAME = TemporaryConstantPool.INSTANCE.utf8Entry(Attributes.NAME_INNER_CLASSES);\n+\n@@ -219,0 +278,5 @@\n+\n+        @Override\n+        public Utf8Entry attributeName() {\n+            return NAME;\n+        }\n@@ -224,0 +288,3 @@\n+\n+        private static final Utf8Entry NAME = TemporaryConstantPool.INSTANCE.utf8Entry(Attributes.NAME_RECORD);\n+\n@@ -235,0 +302,5 @@\n+\n+        @Override\n+        public Utf8Entry attributeName() {\n+            return NAME;\n+        }\n@@ -240,0 +312,3 @@\n+\n+        private static final Utf8Entry NAME = TemporaryConstantPool.INSTANCE.utf8Entry(Attributes.NAME_ENCLOSING_METHOD);\n+\n@@ -258,0 +333,5 @@\n+\n+        @Override\n+        public Utf8Entry attributeName() {\n+            return NAME;\n+        }\n@@ -263,0 +343,3 @@\n+\n+        private static final Utf8Entry NAME = TemporaryConstantPool.INSTANCE.utf8Entry(Attributes.NAME_METHOD_PARAMETERS);\n+\n@@ -274,0 +357,5 @@\n+\n+        @Override\n+        public Utf8Entry attributeName() {\n+            return NAME;\n+        }\n@@ -279,0 +367,3 @@\n+\n+        private static final Utf8Entry NAME = TemporaryConstantPool.INSTANCE.utf8Entry(Attributes.NAME_MODULE_TARGET);\n+\n@@ -290,0 +381,5 @@\n+\n+        @Override\n+        public Utf8Entry attributeName() {\n+            return NAME;\n+        }\n@@ -295,0 +391,3 @@\n+\n+        private static final Utf8Entry NAME = TemporaryConstantPool.INSTANCE.utf8Entry(Attributes.NAME_MODULE_MAIN_CLASS);\n+\n@@ -306,0 +405,5 @@\n+\n+        @Override\n+        public Utf8Entry attributeName() {\n+            return NAME;\n+        }\n@@ -311,0 +415,3 @@\n+\n+        private static final Utf8Entry NAME = TemporaryConstantPool.INSTANCE.utf8Entry(Attributes.NAME_MODULE_HASHES);\n+\n@@ -329,0 +436,5 @@\n+\n+        @Override\n+        public Utf8Entry attributeName() {\n+            return NAME;\n+        }\n@@ -334,0 +446,3 @@\n+\n+        private static final Utf8Entry NAME = TemporaryConstantPool.INSTANCE.utf8Entry(Attributes.NAME_MODULE_PACKAGES);\n+\n@@ -345,0 +460,5 @@\n+\n+        @Override\n+        public Utf8Entry attributeName() {\n+            return NAME;\n+        }\n@@ -350,0 +470,3 @@\n+\n+        private static final Utf8Entry NAME = TemporaryConstantPool.INSTANCE.utf8Entry(Attributes.NAME_MODULE_RESOLUTION);\n+\n@@ -361,0 +484,5 @@\n+\n+        @Override\n+        public Utf8Entry attributeName() {\n+            return NAME;\n+        }\n@@ -366,0 +494,3 @@\n+\n+        private static final Utf8Entry NAME = TemporaryConstantPool.INSTANCE.utf8Entry(Attributes.NAME_PERMITTED_SUBCLASSES);\n+\n@@ -377,0 +508,5 @@\n+\n+        @Override\n+        public Utf8Entry attributeName() {\n+            return NAME;\n+        }\n@@ -382,0 +518,3 @@\n+\n+        private static final Utf8Entry NAME = TemporaryConstantPool.INSTANCE.utf8Entry(Attributes.NAME_NEST_MEMBERS);\n+\n@@ -393,0 +532,5 @@\n+\n+        @Override\n+        public Utf8Entry attributeName() {\n+            return NAME;\n+        }\n@@ -398,0 +542,3 @@\n+\n+        private static final Utf8Entry NAME = TemporaryConstantPool.INSTANCE.utf8Entry(Attributes.NAME_NEST_HOST);\n+\n@@ -409,0 +556,5 @@\n+\n+        @Override\n+        public Utf8Entry attributeName() {\n+            return NAME;\n+        }\n@@ -414,0 +566,3 @@\n+\n+        private static final Utf8Entry NAME = TemporaryConstantPool.INSTANCE.utf8Entry(Attributes.NAME_COMPILATION_ID);\n+\n@@ -425,0 +580,5 @@\n+\n+        @Override\n+        public Utf8Entry attributeName() {\n+            return NAME;\n+        }\n@@ -430,0 +590,3 @@\n+\n+        private static final Utf8Entry NAME = TemporaryConstantPool.INSTANCE.utf8Entry(Attributes.NAME_SOURCE_ID);\n+\n@@ -441,0 +604,5 @@\n+\n+        @Override\n+        public Utf8Entry attributeName() {\n+            return NAME;\n+        }\n@@ -446,0 +614,3 @@\n+\n+        private static final Utf8Entry NAME = TemporaryConstantPool.INSTANCE.utf8Entry(Attributes.NAME_SOURCE_DEBUG_EXTENSION);\n+\n@@ -457,0 +628,5 @@\n+\n+        @Override\n+        public Utf8Entry attributeName() {\n+            return NAME;\n+        }\n@@ -462,0 +638,3 @@\n+\n+        private static final Utf8Entry NAME = TemporaryConstantPool.INSTANCE.utf8Entry(Attributes.NAME_CHARACTER_RANGE_TABLE);\n+\n@@ -473,0 +652,5 @@\n+\n+        @Override\n+        public Utf8Entry attributeName() {\n+            return NAME;\n+        }\n@@ -478,0 +662,3 @@\n+\n+        private static final Utf8Entry NAME = TemporaryConstantPool.INSTANCE.utf8Entry(Attributes.NAME_LINE_NUMBER_TABLE);\n+\n@@ -489,0 +676,5 @@\n+\n+        @Override\n+        public Utf8Entry attributeName() {\n+            return NAME;\n+        }\n@@ -494,0 +686,3 @@\n+\n+        private static final Utf8Entry NAME = TemporaryConstantPool.INSTANCE.utf8Entry(Attributes.NAME_LOCAL_VARIABLE_TABLE);\n+\n@@ -505,0 +700,5 @@\n+\n+        @Override\n+        public Utf8Entry attributeName() {\n+            return NAME;\n+        }\n@@ -510,0 +710,3 @@\n+\n+        private static final Utf8Entry NAME = TemporaryConstantPool.INSTANCE.utf8Entry(Attributes.NAME_LOCAL_VARIABLE_TYPE_TABLE);\n+\n@@ -521,0 +724,5 @@\n+\n+        @Override\n+        public Utf8Entry attributeName() {\n+            return NAME;\n+        }\n@@ -526,0 +734,3 @@\n+\n+        private static final Utf8Entry NAME = TemporaryConstantPool.INSTANCE.utf8Entry(Attributes.NAME_RUNTIME_VISIBLE_ANNOTATIONS);\n+\n@@ -537,0 +748,5 @@\n+\n+        @Override\n+        public Utf8Entry attributeName() {\n+            return NAME;\n+        }\n@@ -542,0 +758,3 @@\n+\n+        private static final Utf8Entry NAME = TemporaryConstantPool.INSTANCE.utf8Entry(Attributes.NAME_RUNTIME_INVISIBLE_ANNOTATIONS);\n+\n@@ -553,0 +772,5 @@\n+\n+        @Override\n+        public Utf8Entry attributeName() {\n+            return NAME;\n+        }\n@@ -558,0 +782,3 @@\n+\n+        private static final Utf8Entry NAME = TemporaryConstantPool.INSTANCE.utf8Entry(Attributes.NAME_RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS);\n+\n@@ -575,0 +802,5 @@\n+\n+        @Override\n+        public Utf8Entry attributeName() {\n+            return NAME;\n+        }\n@@ -580,0 +812,3 @@\n+\n+        private static final Utf8Entry NAME = TemporaryConstantPool.INSTANCE.utf8Entry(Attributes.NAME_RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS);\n+\n@@ -597,0 +832,5 @@\n+\n+        @Override\n+        public Utf8Entry attributeName() {\n+            return NAME;\n+        }\n@@ -602,0 +842,3 @@\n+\n+        private static final Utf8Entry NAME = TemporaryConstantPool.INSTANCE.utf8Entry(Attributes.NAME_RUNTIME_VISIBLE_TYPE_ANNOTATIONS);\n+\n@@ -613,0 +856,5 @@\n+\n+        @Override\n+        public Utf8Entry attributeName() {\n+            return NAME;\n+        }\n@@ -618,0 +866,3 @@\n+\n+        private static final Utf8Entry NAME = TemporaryConstantPool.INSTANCE.utf8Entry(Attributes.NAME_RUNTIME_INVISIBLE_TYPE_ANNOTATIONS);\n+\n@@ -629,0 +880,5 @@\n+\n+        @Override\n+        public Utf8Entry attributeName() {\n+            return NAME;\n+        }\n@@ -752,0 +1008,3 @@\n+\n+        private static final Utf8Entry NAME = TemporaryConstantPool.INSTANCE.utf8Entry(Attributes.NAME_MODULE);\n+\n@@ -820,0 +1079,5 @@\n+\n+        @Override\n+        public Utf8Entry attributeName() {\n+            return NAME;\n+        }\n@@ -844,0 +1108,3 @@\n+\n+        private static final Utf8Entry NAME = TemporaryConstantPool.INSTANCE.utf8Entry(Attributes.NAME_BOOTSTRAP_METHODS);\n+\n@@ -857,0 +1124,5 @@\n+\n+        @Override\n+        public Utf8Entry attributeName() {\n+            return NAME;\n+        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/UnboundAttribute.java","additions":277,"deletions":5,"binary":false,"changes":282,"status":"modified"},{"patch":"@@ -284,0 +284,5 @@\n+\n+                                @Override\n+                                public Utf8Entry attributeName() {\n+                                    return cp.utf8Entry(Attributes.NAME_CODE);\n+                                }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/Util.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -179,2 +179,2 @@\n-                if (!a.attributeMapper().allowMultiple() && !attrNames.add(a.attributeName())) {\n-                    errors.add(new VerifyError(\"Multiple %s attributes in %s\".formatted(a.attributeName(), toString(ae))));\n+                if (!a.attributeMapper().allowMultiple() && !attrNames.add(a.attributeName().stringValue())) {\n+                    errors.add(new VerifyError(\"Multiple %s attributes in %s\".formatted(a.attributeName().stringValue(), toString(ae))));\n@@ -334,1 +334,1 @@\n-            errors.add(new VerifyError(\"Wrong %s attribute length in %s\".formatted(a.attributeName(), toString(ae))));\n+            errors.add(new VerifyError(\"Wrong %s attribute length in %s\".formatted(a.attributeName().stringValue(), toString(ae))));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/verifier\/ParserVerifier.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-                print(attr.attributeName());\n+                print(attr.attributeName().stringValue());\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/AttributeWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import java.lang.classfile.constantpool.Utf8Entry;\n@@ -92,0 +93,5 @@\n+\n+                @Override\n+                public Utf8Entry attributeName() {\n+                    return cp.utf8Entry(Attributes.NAME_NEST_MEMBERS);\n+                }\n","filename":"test\/jdk\/jdk\/classfile\/BoundAttributeTest.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -96,0 +96,5 @@\n+\n+                    @Override\n+                    public Utf8Entry attributeName() {\n+                        return cob.constantPool().utf8Entry(Attributes.NAME_LINE_NUMBER_TABLE);\n+                    }\n@@ -103,0 +108,5 @@\n+\n+                    @Override\n+                    public Utf8Entry attributeName() {\n+                        return cob.constantPool().utf8Entry(Attributes.NAME_LOCAL_VARIABLE_TABLE);\n+                    }\n@@ -109,0 +119,5 @@\n+                    }\n+\n+                    @Override\n+                    public Utf8Entry attributeName() {\n+                        return cob.constantPool().utf8Entry(Attributes.NAME_LOCAL_VARIABLE_TYPE_TABLE);\n","filename":"test\/jdk\/jdk\/classfile\/CorpusTest.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import java.lang.classfile.constantpool.Utf8Entry;\n@@ -52,0 +53,1 @@\n+\n@@ -148,1 +150,7 @@\n-                                }})))).methods().get(0).code().get().elementList());\n+                                }\n+\n+                                @Override\n+                                public Utf8Entry attributeName() {\n+                                    return mb.constantPool().utf8Entry(Attributes.NAME_CODE);\n+                                }\n+                        })))).methods().get(0).code().get().elementList());\n@@ -170,1 +178,7 @@\n-                                }})))).methods().get(0).code().get().elementList());\n+                                }\n+\n+                                @Override\n+                                public Utf8Entry attributeName() {\n+                                    return mb.constantPool().utf8Entry(Attributes.NAME_CODE);\n+                                }\n+                        })))).methods().get(0).code().get().elementList());\n@@ -192,1 +206,7 @@\n-                                }})))).methods().get(0).code().get().elementList());\n+                                }\n+\n+                                @Override\n+                                public Utf8Entry attributeName() {\n+                                    return mb.constantPool().utf8Entry(Attributes.NAME_CODE);\n+                                }\n+                        })))).methods().get(0).code().get().elementList());\n","filename":"test\/jdk\/jdk\/classfile\/LimitsTest.java","additions":23,"deletions":3,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-            switch (attr.attributeName()) {\n+            switch (attr.attributeName().stringValue()) {\n","filename":"test\/jdk\/jdk\/classfile\/LowJCovAttributeTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-            switch (attr.attributeName()) {\n+            switch (attr.attributeName().stringValue()) {\n","filename":"test\/jdk\/jdk\/classfile\/LowModuleTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+\n@@ -35,0 +36,1 @@\n+\n@@ -50,0 +52,1 @@\n+import java.lang.classfile.constantpool.Utf8Entry;\n@@ -56,0 +59,1 @@\n+\n@@ -112,0 +116,5 @@\n+\n+                @Override\n+                public Utf8Entry attributeName() {\n+                    return cb.constantPool().utf8Entry(Attributes.NAME_LOCAL_VARIABLE_TABLE);\n+                }\n@@ -369,1 +378,1 @@\n-                    return a.attributeName();\n+                    return a.attributeName().stringValue();\n","filename":"test\/jdk\/jdk\/classfile\/VerifierSelfTest.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -237,1 +237,1 @@\n-                    .collect(toMap(Attribute::attributeName, e -> e));\n+                    .collect(toMap(a -> a.attributeName().stringValue(), e -> e));\n","filename":"test\/jdk\/jdk\/classfile\/helpers\/ClassRecord.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -62,2 +62,2 @@\n-                                    case CustomAttribute a -> throw new AssertionError(\"Unexpected custom attribute: \" + a.attributeName());\n-                                    case UnknownAttribute a -> throw new AssertionError(\"Unexpected unknown attribute: \" + a.attributeName());\n+                                    case CustomAttribute a -> throw new AssertionError(\"Unexpected custom attribute: \" + a.attributeName().stringValue());\n+                                    case UnknownAttribute a -> throw new AssertionError(\"Unexpected unknown attribute: \" + a.attributeName().stringValue());\n@@ -94,2 +94,2 @@\n-                                    case CustomAttribute a -> throw new AssertionError(\"Unexpected custom attribute: \" + a.attributeName());\n-                                    case UnknownAttribute a -> throw new AssertionError(\"Unexpected unknown attribute: \" + a.attributeName());\n+                                    case CustomAttribute a -> throw new AssertionError(\"Unexpected custom attribute: \" + a.attributeName().stringValue());\n+                                    case UnknownAttribute a -> throw new AssertionError(\"Unexpected unknown attribute: \" + a.attributeName().stringValue());\n@@ -134,1 +134,1 @@\n-                                        default -> throw new AssertionError(\"Unexpected record component attribute: \" + rca.attributeName());\n+                                        default -> throw new AssertionError(\"Unexpected record component attribute: \" + rca.attributeName().stringValue());\n@@ -145,2 +145,2 @@\n-                    case CustomAttribute a -> throw new AssertionError(\"Unexpected custom attribute: \" + a.attributeName());\n-                    case UnknownAttribute a -> throw new AssertionError(\"Unexpected unknown attribute: \" + a.attributeName());\n+                    case CustomAttribute a -> throw new AssertionError(\"Unexpected custom attribute: \" + a.attributeName().stringValue());\n+                    case UnknownAttribute a -> throw new AssertionError(\"Unexpected unknown attribute: \" + a.attributeName().stringValue());\n@@ -598,1 +598,1 @@\n-                    throw new AssertionError(\"Unexpected custom attribute: \" + a.attributeName());\n+                    throw new AssertionError(\"Unexpected custom attribute: \" + a.attributeName().stringValue());\n","filename":"test\/jdk\/jdk\/classfile\/helpers\/RebuildingTransformation.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -91,1 +91,1 @@\n-                checkEquals(attr.attributeName(),\n+                checkEquals(attr.attributeName().stringValue(),\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/AnnotationDefault\/AnnotationDefaultTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -172,1 +172,1 @@\n-                checkEquals(attr.attributeName(),\n+                checkEquals(attr.attributeName().stringValue(),\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/EnclosingMethod\/EnclosingMethodTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -141,1 +141,1 @@\n-            if (attribute.attributeName().equals(attr.name())) {\n+            if (attribute.attributeName().equalsString(attr.name())) {\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/LineNumberTable\/LineNumberTestBase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -222,1 +222,1 @@\n-            checkEquals(attribute.attributeName(),\n+            checkEquals(attribute.attributeName().stringValue(),\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Signature\/Driver.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-        assertEquals(attribute.attributeName(), Attributes.sourceFile().name(), \"Incorrect attribute name\");\n+        assertEquals(attribute.attributeName().stringValue(), Attributes.sourceFile().name(), \"Incorrect attribute name\");\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/SourceFile\/SourceFileTestBase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -305,1 +305,1 @@\n-            checkEquals(\"Deprecated\", attr.attributeName(),\n+            checkEquals(\"Deprecated\", attr.attributeName().stringValue(),\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/deprecated\/DeprecatedTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -209,1 +209,1 @@\n-            checkEquals(innerClasses.attributeName(), \"InnerClasses\",\n+            checkEquals(innerClasses.attributeName().stringValue(), \"InnerClasses\",\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesTestBase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-                    if (attr.attributeName().equals(\"PermittedSubclasses\")) {\n+                    if (attr.attributeName().equalsString(\"PermittedSubclasses\")) {\n@@ -102,1 +102,1 @@\n-                    if (attr.attributeName().equals(\"PermittedSubclasses\")) {\n+                    if (attr.attributeName().equalsString(\"PermittedSubclasses\")) {\n","filename":"test\/langtools\/tools\/javac\/sealed\/CheckSubtypesOfSealedTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-                            + \" found \" + mm.attributes().get(index).attributeName());\n+                            + \" found \" + mm.attributes().get(index).attributeName().stringValue());\n","filename":"test\/langtools\/tools\/javap\/T6716452.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}