{"files":[{"patch":"@@ -1330,2 +1330,1 @@\n-    int reloc_size = align_up(code_buffer->total_relocation_size(), oopSize);\n-    int oop_size = align_up(code_buffer->total_oop_size(), oopSize);\n+    CHECKED_CAST(_oops_size, uint16_t, align_up(code_buffer->total_oop_size(), oopSize));\n@@ -1333,8 +1332,4 @@\n-    CHECKED_CAST(_metadata_offset, uint16_t, reloc_size + oop_size);\n-    int data_end_offset = _metadata_offset + metadata_size;\n-#if INCLUDE_JVMCI\n-    \/\/ jvmci_data_size is 0 in native wrapper but we need to set offset\n-    \/\/ to correctly calculate metadata_end address\n-    CHECKED_CAST(_jvmci_data_offset, uint16_t, data_end_offset);\n-#endif\n-    assert(data_end_offset <= mutable_data_size, \"wrong nmutable_data_size: %d < %d\", data_end_offset, mutable_data_size);\n+    JVMCI_ONLY( _jvmci_data_size = 0; )\n+    assert(_mutable_data_size == _relocation_size + _oops_size + metadata_size,\n+           \"wrong mutable data size: %d != %d + %d + %d\",\n+           _mutable_data_size, _relocation_size, _oops_size, metadata_size);\n@@ -1509,10 +1504,5 @@\n-    int reloc_size = align_up(code_buffer->total_relocation_size(), oopSize);\n-    int oop_size = align_up(code_buffer->total_oop_size(), oopSize);\n-    int metadata_size = align_up(code_buffer->total_metadata_size(), wordSize);\n-    CHECKED_CAST(_metadata_offset, uint16_t, reloc_size + oop_size);\n-    int jvmci_data_size = 0;\n-#if INCLUDE_JVMCI\n-    CHECKED_CAST(_jvmci_data_offset, uint16_t, _metadata_offset + metadata_size);\n-    jvmci_data_size = align_up(compiler->is_jvmci() ? jvmci_data->size() : 0, oopSize);\n-#endif\n-    assert(_mutable_data_size == reloc_size + oop_size + metadata_size + jvmci_data_size,\n+    CHECKED_CAST(_oops_size, uint16_t, align_up(code_buffer->total_oop_size(), oopSize));\n+    uint16_t metadata_size = (uint16_t)align_up(code_buffer->total_metadata_size(), wordSize);\n+    JVMCI_ONLY(CHECKED_CAST(_jvmci_data_size, uint16_t, align_up(compiler->is_jvmci() ? jvmci_data->size() : 0, oopSize)));\n+    int jvmci_data_size = 0 + JVMCI_ONLY(_jvmci_data_size);\n+    assert(_mutable_data_size == _relocation_size + _oops_size + metadata_size + jvmci_data_size,\n@@ -1520,1 +1510,1 @@\n-           _mutable_data_size, reloc_size, oop_size, metadata_size, jvmci_data_size);\n+           _mutable_data_size, _relocation_size, _oops_size, metadata_size, jvmci_data_size);\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":11,"deletions":21,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -236,2 +236,2 @@\n-  \/\/ Offsets in mutable data section\n-  uint16_t _metadata_offset; \/\/ embedded meta data table\n+  \/\/ mutable data section\n+  uint16_t _oops_size;\n@@ -239,1 +239,1 @@\n-  uint16_t _jvmci_data_offset;\n+  uint16_t _jvmci_data_size;\n@@ -536,2 +536,2 @@\n-  oop*    oops_end              () const { return (oop*)       (mutable_data_begin() + _metadata_offset); }\n-  Metadata** metadata_begin     () const { return (Metadata**) (mutable_data_begin() + _metadata_offset); }\n+  oop*    oops_end              () const { return (oop*)       (mutable_data_begin() + _relocation_size + _oops_size); }\n+  Metadata** metadata_begin     () const { return (Metadata**) (mutable_data_begin() + _relocation_size + _oops_size); }\n@@ -539,2 +539,2 @@\n-  Metadata** metadata_end       () const { return (Metadata**) (mutable_data_begin() + _jvmci_data_offset); }\n-  address jvmci_data_begin      () const { return               mutable_data_begin() + _jvmci_data_offset; }\n+  Metadata** metadata_end       () const { return (Metadata**) (mutable_data_end() - _jvmci_data_size); }\n+  address jvmci_data_begin      () const { return               mutable_data_end() - _jvmci_data_size; }\n","filename":"src\/hotspot\/share\/code\/nmethod.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -586,2 +586,2 @@\n-  nonstatic_field(nmethod,                     _metadata_offset,                              u2)                                    \\\n-  nonstatic_field(nmethod,                     _scopes_pcs_offset,                            int)                                    \\\n+  nonstatic_field(nmethod,                     _oops_size,                                    u2)                                    \\\n+  nonstatic_field(nmethod,                     _scopes_pcs_offset,                            int)                                   \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-  private static CIntField     metadataOffsetField;\n+  private static CIntField     oopsSizeField;\n@@ -100,1 +100,1 @@\n-    metadataOffsetField         = new CIntField(type.getCIntegerField(\"_metadata_offset\"), 0);\n+    oopsSizeField               = new CIntField(type.getCIntegerField(\"_oops_size\"), 0);\n@@ -159,2 +159,2 @@\n-  public Address oopsEnd()              { return mutableDataBegin().addOffsetTo(getMetadataOffset());   }\n-  public Address metadataBegin()        { return mutableDataBegin().addOffsetTo(getMetadataOffset());   }\n+  public Address oopsEnd()              { return mutableDataBegin().addOffsetTo(getRelocationSize() + getOopsSize());   }\n+  public Address metadataBegin()        { return mutableDataBegin().addOffsetTo(getRelocationSize() + getOopsSize());   }\n@@ -550,1 +550,1 @@\n-  private int getMetadataOffset()     { return (int) metadataOffsetField    .getValue(addr); }\n+  private int getOopsSize()           { return (int) oopsSizeField          .getValue(addr); }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/NMethod.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}