{"files":[{"patch":"@@ -326,0 +326,11 @@\n+\n+    \/\/ Maybe we have a third instruction: adrp + movk + ldr with offset (e.g. ldr_patchable)\n+    uint32_t insn3 = insn_at(insn_addr, 2);\n+    bool adrpMemInsn3 = Instruction_aarch64::extract(insn3, 29, 24) == 0b111001 &&\n+      Instruction_aarch64::extract(_insn, 4, 0) == Instruction_aarch64::extract(insn3, 9, 5);\n+    bool insn2_is_movk = nativeInstruction_at(insn_addr+4)->is_movk();\n+    if (adrpMemInsn3 && insn2_is_movk) {\n+      adrpMem_impl(insn_addr + 4, target);\n+      instructions = 3;\n+    }\n+\n@@ -467,2 +478,1 @@\n-    \/\/ We know the destination 4k page. Maybe we have a third\n-    \/\/ instruction.\n+    \/\/ We know the destination 4k page. Maybe we have a third instruction.\n@@ -5523,1 +5533,1 @@\n-    ldr_constant(dst, Address(dummy, rspec));\n+    ldr(dst, Address(dummy, rspec)); \/\/ relocate_code_to replaces dummy with a real address\n@@ -5525,1 +5535,0 @@\n-\n@@ -5673,1 +5682,5 @@\n-  relocInfo::relocType rtype = dest.rspec().reloc()->type();\n+  assert(is_valid_AArch64_address(dest.target()), \"bad address\");\n+  assert(dest.getMode() == Address::literal, \"ADRP must be applied to a literal address\");\n+\n+  \/\/ 8143067: Ensure that the adrp can reach the dest from anywhere within\n+  \/\/ the code cache so that if it is relocated we know it will still reach\n@@ -5679,0 +5692,5 @@\n+  bool is_adrp_reachable = offset_high >= -(1<<20) && offset_low < (1<<20);\n+  if (!is_adrp_reachable) {\n+    adrp_movk(reg1, dest, byte_offset);\n+    return;\n+  }\n@@ -5680,0 +5698,10 @@\n+  InstructionMark im(this);\n+  relocInfo::relocType rtype = dest.rspec().reloc()->type();\n+  code_section()->relocate(inst_mark(), dest.rspec());\n+  _adrp(reg1, dest.target());\n+\n+  byte_offset = (uint64_t)dest.target() & 0xfff;\n+}\n+\n+\/\/ Variant using an additional MOVK instruction to support targets located more than 4GB away.\n+void MacroAssembler::adrp_movk(Register reg1, const Address &dest, uint64_t &byte_offset) {\n@@ -5684,0 +5712,1 @@\n+  relocInfo::relocType rtype = dest.rspec().reloc()->type();\n@@ -5685,8 +5714,4 @@\n-  \/\/ 8143067: Ensure that the adrp can reach the dest from anywhere within\n-  \/\/ the code cache so that if it is relocated we know it will still reach\n-  if (offset_high >= -(1<<20) && offset_low < (1<<20)) {\n-    _adrp(reg1, dest.target());\n-  } else {\n-    uint64_t target = (uint64_t)dest.target();\n-    uint64_t adrp_target\n-      = (target & 0xffffffffULL) | ((uint64_t)pc() & 0xffff00000000ULL);\n+  uint64_t target = (uint64_t)dest.target();\n+  uint64_t adrp_target = (target & 0xffffffffULL) | ((uint64_t)pc() & 0xffff00000000ULL);\n+  _adrp(reg1, (address)adrp_target);\n+  movk(reg1, target >> 32, 32);\n@@ -5694,3 +5719,0 @@\n-    _adrp(reg1, (address)adrp_target);\n-    movk(reg1, target >> 32, 32);\n-  }\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":38,"deletions":16,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -1438,0 +1438,1 @@\n+  void adrp_movk(Register reg1, const Address &dest, uint64_t &byte_offset);\n@@ -1475,10 +1476,0 @@\n-  void ldr_constant(Register dest, const Address &const_addr) {\n-    if (NearCpool) {\n-      ldr(dest, const_addr);\n-    } else {\n-      uint64_t offset;\n-      adrp(dest, InternalAddress(const_addr.target()), offset);\n-      ldr(dest, Address(dest, offset));\n-    }\n-  }\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-      if (NativeInstruction::is_ldr_literal_at(addr())) {\n+      if (NativeInstruction::is_ldr_literal_at(addr()) || NativeInstruction::is_adrp_at(addr())) {\n","filename":"src\/hotspot\/cpu\/aarch64\/relocInfo_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -65,2 +65,0 @@\n-  unsigned int size = header_size;\n-  size += align_up(cb->total_relocation_size(), oopSize);\n@@ -68,1 +66,1 @@\n-  size = align_code_offset(size);\n+  unsigned int size = align_code_offset(header_size);\n@@ -71,1 +69,0 @@\n-  size += align_up(cb->total_metadata_size(), oopSize);\n@@ -76,1 +73,2 @@\n-                   int16_t frame_complete_offset, int frame_size, OopMapSet* oop_maps, bool caller_must_gc_arguments) :\n+                   int16_t frame_complete_offset, int frame_size, OopMapSet* oop_maps, bool caller_must_gc_arguments,\n+                   int mutable_data_size) :\n@@ -79,0 +77,1 @@\n+  _mutable_data(nullptr),\n@@ -81,1 +80,1 @@\n-  _content_offset(CodeBlob::align_code_offset(header_size + _relocation_size)),\n+  _content_offset(CodeBlob::align_code_offset(header_size)),\n@@ -85,0 +84,1 @@\n+  _mutable_data_size(mutable_data_size),\n@@ -95,0 +95,1 @@\n+  assert(is_nmethod() || (cb->total_oop_size() + cb->total_metadata_size() == 0), \"must be nmethod\");\n@@ -101,0 +102,7 @@\n+  if (_mutable_data_size > 0) {\n+    _mutable_data = (address)os::malloc(_mutable_data_size, mtCode);\n+    if (_mutable_data == nullptr) {\n+      vm_exit_out_of_memory(_mutable_data_size, OOM_MALLOC_ERROR, \"codebuffer: no space for mutable data\");\n+    }\n+  }\n+\n@@ -108,0 +116,1 @@\n+  _mutable_data(nullptr),\n@@ -125,0 +134,4 @@\n+  if (_mutable_data != nullptr) {\n+    os::free(_mutable_data);\n+    _mutable_data = nullptr;\n+  }\n@@ -166,1 +179,2 @@\n-  : CodeBlob(name, kind, cb, size, header_size, frame_complete, frame_size, oop_maps, caller_must_gc_arguments)\n+  : CodeBlob(name, kind, cb, size, header_size, frame_complete, frame_size, oop_maps, caller_must_gc_arguments,\n+             align_up(cb->total_relocation_size(), oopSize))\n","filename":"src\/hotspot\/share\/code\/codeBlob.cpp","additions":21,"deletions":7,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-\/\/ Layout : continuous in the CodeCache\n+\/\/ Layout in the CodeCache:\n@@ -72,1 +72,0 @@\n-\/\/   - relocation\n@@ -75,1 +74,4 @@\n-\/\/   - data space\n+\/\/ Outside of the CodeCache:\n+\/\/   - mutable_data\n+\/\/     - relocation info\n+\/\/     - additional data for subclasses\n@@ -105,0 +107,1 @@\n+  address             _mutable_data;\n@@ -110,1 +113,0 @@\n-\n@@ -113,0 +115,1 @@\n+  int      _mutable_data_size;\n@@ -132,1 +135,2 @@\n-           int16_t frame_complete_offset, int frame_size, OopMapSet* oop_maps, bool caller_must_gc_arguments);\n+           int16_t frame_complete_offset, int frame_size, OopMapSet* oop_maps, bool caller_must_gc_arguments,\n+           int mutable_data_size);\n@@ -175,2 +179,0 @@\n-  relocInfo* relocation_begin() const         { return (relocInfo*) header_end(); }\n-  relocInfo* relocation_end() const           { return (relocInfo*)(header_end()   + _relocation_size); }\n@@ -180,1 +182,0 @@\n-  \/\/ code_end == content_end is true for all types of blobs for now, it is also checked in the constructor\n@@ -184,0 +185,9 @@\n+  address    blob_end() const                 { return (address)    header_begin() + _size; }\n+  \/\/ code_end == content_end is true for all types of blobs for now, it is also checked in the constructor\n+\n+  int mutable_data_size() const               { return _mutable_data_size; }\n+  address mutable_data_begin() const          { return _mutable_data; }\n+  address mutable_data_end() const            { return _mutable_data + _mutable_data_size; }\n+\n+  relocInfo* relocation_begin() const         { return (relocInfo*)_mutable_data; }\n+  relocInfo* relocation_end() const           { return (relocInfo*)((address)relocation_begin() + _relocation_size); }\n@@ -188,1 +198,0 @@\n-  int data_offset() const                     { return _data_offset; }\n@@ -206,1 +215,1 @@\n-    _data_offset = (int)used;\n+    _data_offset = _size;\n@@ -210,1 +219,1 @@\n-  bool blob_contains(address addr) const         { return header_begin()       <= addr && addr < data_end();       }\n+  bool blob_contains(address addr) const         { return header_begin()       <= addr && addr < blob_end();       }\n","filename":"src\/hotspot\/share\/code\/codeBlob.hpp","additions":20,"deletions":11,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -130,0 +130,1 @@\n+  uint total_mut_size;\n@@ -150,0 +151,1 @@\n+    total_mut_size      += nm->mutable_data_size();\n@@ -169,1 +171,1 @@\n-    uint total_size = total_nm_size + total_immut_size;\n+    uint total_size = total_nm_size + total_immut_size + total_mut_size;\n@@ -178,3 +180,0 @@\n-    if (relocation_size != 0) {\n-      tty->print_cr(\"   relocation    = %u (%f%%)\", relocation_size, (relocation_size * 100.0f)\/total_nm_size);\n-    }\n@@ -191,1 +190,7 @@\n-      tty->print_cr(\"   oops          = %u (%f%%)\", oops_size, (oops_size * 100.0f)\/total_nm_size);\n+      tty->print_cr(\"   oops          = %u (%f%%)\", oops_size, (oops_size * 100.0f)\/total_mut_size);\n+    }\n+    if (total_mut_size != 0) {\n+      tty->print_cr(\" mutable data    = %u (%f%%)\", total_mut_size, (total_mut_size * 100.0f)\/total_size);\n+    }\n+    if (relocation_size != 0) {\n+      tty->print_cr(\"   relocation    = %u (%f%%)\", relocation_size, (relocation_size * 100.0f)\/total_mut_size);\n@@ -194,1 +199,1 @@\n-      tty->print_cr(\"   metadata      = %u (%f%%)\", metadata_size, (metadata_size * 100.0f)\/total_nm_size);\n+      tty->print_cr(\"   metadata      = %u (%f%%)\", metadata_size, (metadata_size * 100.0f)\/total_mut_size);\n@@ -1075,0 +1080,7 @@\n+static int required_mutable_data_size(CodeBuffer* code_buffer,\n+                                      int jvmci_data_size = 0) {\n+  return align_up(code_buffer->total_relocation_size(), oopSize) +\n+         align_up(jvmci_data_size, oopSize) +\n+         align_up(code_buffer->total_metadata_size(), oopSize);\n+}\n+\n@@ -1099,0 +1111,2 @@\n+    int mutable_data_size = required_mutable_data_size(code_buffer);\n+\n@@ -1108,1 +1122,1 @@\n-            oop_maps);\n+            oop_maps, mutable_data_size);\n@@ -1147,5 +1161,0 @@\n-#if INCLUDE_JVMCI\n-    if (compiler->is_jvmci()) {\n-      nmethod_size += align_up(jvmci_data->size(), oopSize);\n-    }\n-#endif\n@@ -1172,0 +1181,4 @@\n+\n+  int mutable_data_size = required_mutable_data_size(code_buffer\n+    JVMCI_ONLY(COMMA (compiler->is_jvmci() ? jvmci_data->size() : 0)));\n+\n@@ -1176,1 +1189,1 @@\n-    nmethod(method(), compiler->type(), nmethod_size, immutable_data_size,\n+    nmethod(method(), compiler->type(), nmethod_size, immutable_data_size, mutable_data_size,\n@@ -1279,1 +1292,2 @@\n-  OopMapSet* oop_maps )\n+  OopMapSet* oop_maps,\n+  int mutable_data_size)\n@@ -1281,1 +1295,1 @@\n-             offsets->value(CodeOffsets::Frame_Complete), frame_size, oop_maps, false),\n+             offsets->value(CodeOffsets::Frame_Complete), frame_size, oop_maps, false, mutable_data_size),\n@@ -1315,8 +1329,6 @@\n-    CHECKED_CAST(_metadata_offset, uint16_t, (align_up(code_buffer->total_oop_size(), oopSize)));\n-    int data_end_offset = _metadata_offset + align_up(code_buffer->total_metadata_size(), wordSize);\n-#if INCLUDE_JVMCI\n-    \/\/ jvmci_data_size is 0 in native wrapper but we need to set offset\n-    \/\/ to correctly calculate metadata_end address\n-    CHECKED_CAST(_jvmci_data_offset, uint16_t, data_end_offset);\n-#endif\n-    assert((data_offset() + data_end_offset) <= nmethod_size, \"wrong nmethod's size: %d < %d\", nmethod_size, (data_offset() + data_end_offset));\n+    CHECKED_CAST(_oops_size, uint16_t, align_up(code_buffer->total_oop_size(), oopSize));\n+    int metadata_size = align_up(code_buffer->total_metadata_size(), wordSize);\n+    JVMCI_ONLY( _jvmci_data_size = 0; )\n+    assert(_mutable_data_size == _relocation_size + metadata_size,\n+           \"wrong mutable data size: %d != %d + %d\",\n+           _mutable_data_size, _relocation_size, metadata_size);\n@@ -1325,1 +1337,1 @@\n-    _immutable_data          = data_end();\n+    _immutable_data          = blob_end();\n@@ -1402,0 +1414,1 @@\n+  int mutable_data_size,\n@@ -1423,1 +1436,1 @@\n-             offsets->value(CodeOffsets::Frame_Complete), frame_size, oop_maps, false),\n+             offsets->value(CodeOffsets::Frame_Complete), frame_size, oop_maps, false, mutable_data_size),\n@@ -1489,2 +1502,0 @@\n-    CHECKED_CAST(_metadata_offset, uint16_t, (align_up(code_buffer->total_oop_size(), oopSize)));\n-    int metadata_end_offset = _metadata_offset + align_up(code_buffer->total_metadata_size(), wordSize);\n@@ -1492,9 +1503,9 @@\n-#if INCLUDE_JVMCI\n-    CHECKED_CAST(_jvmci_data_offset, uint16_t, metadata_end_offset);\n-    int jvmci_data_size   = compiler->is_jvmci() ? jvmci_data->size() : 0;\n-    DEBUG_ONLY( int data_end_offset = _jvmci_data_offset  + align_up(jvmci_data_size, oopSize); )\n-#else\n-    DEBUG_ONLY( int data_end_offset = metadata_end_offset; )\n-#endif\n-    assert((data_offset() + data_end_offset) <= nmethod_size, \"wrong nmethod's size: %d > %d\",\n-           (data_offset() + data_end_offset), nmethod_size);\n+    CHECKED_CAST(_oops_size, uint16_t, align_up(code_buffer->total_oop_size(), oopSize));\n+    uint16_t metadata_size = (uint16_t)align_up(code_buffer->total_metadata_size(), wordSize);\n+    JVMCI_ONLY(CHECKED_CAST(_jvmci_data_size, uint16_t, align_up(compiler->is_jvmci() ? jvmci_data->size() : 0, oopSize)));\n+    int jvmci_data_size = 0 JVMCI_ONLY(+ _jvmci_data_size);\n+    assert(_mutable_data_size == _relocation_size + metadata_size + jvmci_data_size,\n+           \"wrong mutable data size: %d != %d + %d + %d\",\n+           _mutable_data_size, _relocation_size, metadata_size, jvmci_data_size);\n+    assert(nmethod_size == data_end() - header_begin(), \"wrong nmethod size: %d != %d\",\n+           nmethod_size, (int)(code_end() - header_begin()));\n@@ -1508,1 +1519,1 @@\n-      _immutable_data     = data_end();\n+      _immutable_data     = blob_end();\n@@ -2130,1 +2141,1 @@\n-  if (_immutable_data != data_end()) {\n+  if (_immutable_data != blob_end()) {\n@@ -2132,1 +2143,1 @@\n-    _immutable_data = data_end(); \/\/ Valid not null address\n+    _immutable_data = blob_end(); \/\/ Valid not null address\n@@ -3069,4 +3080,0 @@\n-  if (relocation_size   () > 0) st->print_cr(\" relocation     [\" INTPTR_FORMAT \",\" INTPTR_FORMAT \"] = %d\",\n-                                             p2i(relocation_begin()),\n-                                             p2i(relocation_end()),\n-                                             relocation_size());\n@@ -3085,0 +3092,8 @@\n+  if (mutable_data_size() > 0) st->print_cr(\" mutable data [\" INTPTR_FORMAT \",\" INTPTR_FORMAT \"] = %d\",\n+                                             p2i(mutable_data_begin()),\n+                                             p2i(mutable_data_end()),\n+                                             mutable_data_size());\n+  if (relocation_size() > 0)   st->print_cr(\" relocation     [\" INTPTR_FORMAT \",\" INTPTR_FORMAT \"] = %d\",\n+                                             p2i(relocation_begin()),\n+                                             p2i(relocation_end()),\n+                                             relocation_size());\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":58,"deletions":43,"binary":false,"changes":101,"status":"modified"},{"patch":"@@ -137,21 +137,21 @@\n-\/\/  - header                 (the nmethod structure)\n-\/\/  [Relocation]\n-\/\/  - relocation information\n-\/\/  - constant part          (doubles, longs and floats used in nmethod)\n-\/\/  - oop table\n-\/\/  [Code]\n-\/\/  - code body\n-\/\/  - exception handler\n-\/\/  - stub code\n-\/\/  [Debugging information]\n-\/\/  - oop array\n-\/\/  - data array\n-\/\/  - pcs\n-\/\/  [Exception handler table]\n-\/\/  - handler entry point array\n-\/\/  [Implicit Null Pointer exception table]\n-\/\/  - implicit null table array\n-\/\/  [Speculations]\n-\/\/  - encoded speculations array\n-\/\/  [JVMCINMethodData]\n-\/\/  - meta data for JVMCI compiled nmethod\n+\/\/  - Header                 (the nmethod structure)\n+\/\/  - Constant part          (doubles, longs and floats used in nmethod)\n+\/\/  - Code part:\n+\/\/    - Code body\n+\/\/    - Exception handler\n+\/\/    - Stub code\n+\/\/    - OOP table\n+\/\/\n+\/\/ As a CodeBlob, an nmethod references [mutable data] allocated on the C heap:\n+\/\/  - CodeBlob relocation data\n+\/\/  - Metainfo\n+\/\/  - JVMCI data\n+\/\/\n+\/\/ An nmethod references [immutable data] allocated on C heap:\n+\/\/  - Dependency assertions data\n+\/\/  - Implicit null table array\n+\/\/  - Handler entry point array\n+\/\/  - Debugging information:\n+\/\/    - Scopes data array\n+\/\/    - Scopes pcs array\n+\/\/  - JVMCI speculations array\n@@ -238,3 +238,2 @@\n-  \/\/ Offsets in mutable data section\n-  \/\/ _oops_offset == _data_offset,  offset where embedded oop table begins (inside data)\n-  uint16_t _metadata_offset; \/\/ embedded meta data table\n+  \/\/ mutable data section\n+  uint16_t _oops_size;\n@@ -242,1 +241,1 @@\n-  uint16_t _jvmci_data_offset;\n+  uint16_t _jvmci_data_size;\n@@ -308,1 +307,2 @@\n-          OopMapSet* oop_maps);\n+          OopMapSet* oop_maps,\n+          int mutable_data_size);\n@@ -315,0 +315,1 @@\n+          int mutable_data_size,\n@@ -529,1 +530,1 @@\n-  address stub_end              () const { return           data_begin()   ; }\n+  address stub_end              () const { return           code_end()     ; }\n@@ -534,0 +535,2 @@\n+  oop*    oops_begin            () const { return (oop*)    data_begin(); }\n+  oop*    oops_end              () const { return (oop*)    data_end(); }\n@@ -536,3 +539,1 @@\n-  oop*    oops_begin            () const { return (oop*)        data_begin(); }\n-  oop*    oops_end              () const { return (oop*)       (data_begin() + _metadata_offset)      ; }\n-  Metadata** metadata_begin     () const { return (Metadata**) (data_begin() + _metadata_offset)      ; }\n+  Metadata** metadata_begin     () const { return (Metadata**) (mutable_data_begin() + _relocation_size); }\n@@ -540,3 +541,3 @@\n-  Metadata** metadata_end       () const { return (Metadata**) (data_begin() + _jvmci_data_offset)    ; }\n-  address jvmci_data_begin      () const { return               data_begin() + _jvmci_data_offset     ; }\n-  address jvmci_data_end        () const { return               data_end(); }\n+  Metadata** metadata_end       () const { return (Metadata**) (mutable_data_end() - _jvmci_data_size); }\n+  address jvmci_data_begin      () const { return               mutable_data_end() - _jvmci_data_size; }\n+  address jvmci_data_end        () const { return               mutable_data_end(); }\n@@ -544,1 +545,1 @@\n-  Metadata** metadata_end       () const { return (Metadata**)  data_end(); }\n+  Metadata** metadata_end       () const { return (Metadata**)  mutable_data_end(); }\n","filename":"src\/hotspot\/share\/code\/nmethod.hpp","additions":35,"deletions":34,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -557,1 +557,0 @@\n-  nonstatic_field(CodeBlob,                    _data_offset,                                  int)                                   \\\n@@ -559,0 +558,1 @@\n+  nonstatic_field(CodeBlob,                    _data_offset,                                  int)                                   \\\n@@ -561,0 +561,2 @@\n+  nonstatic_field(CodeBlob,                    _mutable_data,                                 address)                               \\\n+  nonstatic_field(CodeBlob,                    _mutable_data_size,                            int)                                   \\\n@@ -583,2 +585,1 @@\n-  nonstatic_field(nmethod,                     _metadata_offset,                              u2)                                    \\\n-  nonstatic_field(nmethod,                     _scopes_pcs_offset,                            int)                                    \\\n+  nonstatic_field(nmethod,                     _scopes_pcs_offset,                            int)                                   \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -54,0 +54,2 @@\n+  private static AddressField  mutableDataField;\n+  private static CIntegerField mutableDataSizeField;\n@@ -74,0 +76,2 @@\n+    mutableDataField         = type.getAddressField(\"_mutable_data\");\n+    mutableDataSizeField     = type.getCIntegerField(\"_mutable_data_size\");\n@@ -119,0 +123,9 @@\n+\n+  \/\/ Mutable data\n+  public int getMutableDataSize()   { return (int) mutableDataSizeField.getValue(addr); }\n+\n+  public Address mutableDataBegin() { return mutableDataField.getValue(addr); }\n+\n+  public Address mutableDataEnd()   { return mutableDataBegin().addOffsetTo(getMutableDataSize());  }\n+\n+\n@@ -171,1 +184,0 @@\n-  \/\/ FIXME: add getRelocationSize()\n@@ -178,0 +190,2 @@\n+  public int getRelocationSize()   { return (int) relocationSizeField.getValue(addr); }\n+\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/CodeBlob.java","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-  private static CIntField     metadataOffsetField;\n+\n@@ -88,1 +88,0 @@\n-\n@@ -94,1 +93,0 @@\n-    metadataOffsetField         = new CIntField(type.getCIntegerField(\"_metadata_offset\"), 0);\n@@ -136,3 +134,1 @@\n-  public Address oopsEnd()              { return dataBegin().addOffsetTo(getMetadataOffset());       }\n-  public Address metadataBegin()        { return dataBegin().addOffsetTo(getMetadataOffset());       }\n-  public Address metadataEnd()          { return dataEnd();                                          }\n+  public Address oopsEnd()              { return dataEnd();                                          }\n@@ -153,0 +149,3 @@\n+  public Address metadataBegin()        { return mutableDataBegin().addOffsetTo(getRelocationSize());   }\n+  public Address metadataEnd()          { return mutableDataEnd();                                      }\n+\n@@ -538,1 +537,0 @@\n-  private int getMetadataOffset()     { return (int) metadataOffsetField    .getValue(addr); }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/NMethod.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"}]}