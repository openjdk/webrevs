{"files":[{"patch":"@@ -5273,1 +5273,1 @@\n-    ldr_constant(dst, Address(dummy, rspec));\n+    ldr_patchable(dst, Address(dummy, rspec));\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1418,1 +1418,1 @@\n-  void ldr_constant(Register dest, const Address &const_addr) {\n+  void ldr_patchable(Register dest, const Address &const_addr) {\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-  _mutable_data_size(0)\n+  _mutable_data_size(mutable_data_size)\n@@ -101,3 +101,0 @@\n-  \/\/ The mutable_data_size is either calculated by the nmethod constructor to account\n-  \/\/ for reloc_info and additional data, or it is set here to accommodate only the relocation data.\n-  _mutable_data_size = (mutable_data_size == 0) ? cb->total_relocation_size() : mutable_data_size;\n@@ -175,1 +172,2 @@\n-  : CodeBlob(name, kind, cb, size, header_size, frame_complete, frame_size, oop_maps, caller_must_gc_arguments)\n+  : CodeBlob(name, kind, cb, size, header_size, frame_complete, frame_size, oop_maps, caller_must_gc_arguments,\n+             align_up(cb->total_relocation_size(), oopSize))\n","filename":"src\/hotspot\/share\/code\/codeBlob.cpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -135,1 +135,1 @@\n-           int mutable_data_size = 0);\n+           int mutable_data_size);\n@@ -190,3 +190,0 @@\n-  \/\/ [relocations, oops, metatada, jvmci_data] stays in _mutable_data\n-  address    mdata_begin() const              { return mutable_data_begin(); }\n-  address    mdata_end() const                { return mutable_data_end(); }\n","filename":"src\/hotspot\/share\/code\/codeBlob.hpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -237,1 +237,0 @@\n-  uint16_t oops_offset () const { return (_mutable_data != nullptr) ? _relocation_size : 0; }\n@@ -536,3 +535,3 @@\n-  oop*    oops_begin            () const { return (oop*)       (mdata_begin() + oops_offset())         ; }\n-  oop*    oops_end              () const { return (oop*)       (mdata_begin() + _metadata_offset)      ; }\n-  Metadata** metadata_begin     () const { return (Metadata**) (mdata_begin() + _metadata_offset)      ; }\n+  oop*    oops_begin            () const { return (oop*)       (mutable_data_begin() + _relocation_size); }\n+  oop*    oops_end              () const { return (oop*)       (mutable_data_begin() + _metadata_offset); }\n+  Metadata** metadata_begin     () const { return (Metadata**) (mutable_data_begin() + _metadata_offset); }\n@@ -540,3 +539,3 @@\n-  Metadata** metadata_end       () const { return (Metadata**) (mdata_begin() + _jvmci_data_offset)    ; }\n-  address jvmci_data_begin      () const { return               mdata_begin() + _jvmci_data_offset     ; }\n-  address jvmci_data_end        () const { return               mdata_end(); }\n+  Metadata** metadata_end       () const { return (Metadata**) (mutable_data_begin() + _jvmci_data_offset); }\n+  address jvmci_data_begin      () const { return               mutable_data_begin() + _jvmci_data_offset; }\n+  address jvmci_data_end        () const { return               mutable_data_end(); }\n@@ -544,1 +543,1 @@\n-  Metadata** metadata_end       () const { return (Metadata**)  mdata_end(); }\n+  Metadata** metadata_end       () const { return (Metadata**)  mutable_data_end(); }\n","filename":"src\/hotspot\/share\/code\/nmethod.hpp","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"}]}