{"files":[{"patch":"@@ -326,0 +326,11 @@\n+\n+    \/\/ Maybe we have a third instruction: adrp + movk + ldr with offset (e.g. ldr_patchable)\n+    uint32_t insn3 = insn_at(insn_addr, 2);\n+    bool adrpMemInsn3 = Instruction_aarch64::extract(insn3, 29, 24) == 0b111001 &&\n+      Instruction_aarch64::extract(_insn, 4, 0) == Instruction_aarch64::extract(insn3, 9, 5);\n+    bool insn2_is_movk = nativeInstruction_at(insn_addr+4)->is_movk();\n+    if (adrpMemInsn3 && insn2_is_movk) {\n+      adrpMem_impl(insn_addr + 4, target);\n+      instructions = 3;\n+    }\n+\n@@ -467,2 +478,1 @@\n-    \/\/ We know the destination 4k page. Maybe we have a third\n-    \/\/ instruction.\n+    \/\/ We know the destination 4k page. Maybe we have a third instruction.\n@@ -5272,2 +5282,1 @@\n-    address dummy = address(uintptr_t(pc()) & -wordSize); \/\/ A nearby aligned address\n-    ldr_patchable(dst, Address(dummy, rspec));\n+    ldr_patchable(dst, Address((address)obj, rspec));\n@@ -5389,1 +5398,1 @@\n-void MacroAssembler::adrp(Register reg1, const Address &dest, uint64_t &byte_offset) {\n+void MacroAssembler::adrp(Register reg1, const Address &dest, uint64_t &byte_offset, bool force_movk) {\n@@ -5404,1 +5413,1 @@\n-  if (offset_high >= -(1<<20) && offset_low < (1<<20)) {\n+  if (!force_movk && offset_high >= -(1<<20) && offset_low < (1<<20)) {\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":15,"deletions":6,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -1380,1 +1380,1 @@\n-  void adrp(Register reg1, const Address &dest, uint64_t &byte_offset);\n+  void adrp(Register reg1, const Address &dest, uint64_t &byte_offset, bool force_movk = false);\n@@ -1419,1 +1419,0 @@\n-    \/\/ Using adrp+ldr for distant addresses (a single PC-relative ldr has a Â±1MB limit)\n@@ -1421,1 +1420,2 @@\n-    adrp(dest, const_addr, offset);\n+    bool force_movk = true; \/\/ movk is important if the target can be more than 4GB away\n+    adrp(dest, const_addr, offset, force_movk);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}