{"files":[{"patch":"@@ -632,1 +632,1 @@\n-           \/\/ Traditional lightweight locking.\n+           \/\/ Traditional fast locking.\n@@ -736,1 +736,1 @@\n-        \/\/ traditional lightweight locking\n+        \/\/ Traditional fast locking.\n@@ -1671,1 +1671,1 @@\n-            \/\/ traditional lightweight locking\n+            \/\/ Traditional fast locking.\n","filename":"src\/hotspot\/share\/interpreter\/zero\/bytecodeInterpreter.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1503,1 +1503,0 @@\n-    assert(mon != nullptr, \"must have monitor\");\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvBase.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-  \/\/ Other platforms does not make use of the cache yet,\n+  \/\/ Other platforms do not make use of the cache yet,\n","filename":"src\/hotspot\/share\/runtime\/basicLock.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1663,2 +1663,2 @@\n-            LightweightSynchronizer::inflate_fast_locked_object(obj(), deoptee_thread, thread,\n-                                                                ObjectSynchronizer::InflateCause::inflate_cause_vm_internal);\n+            LightweightSynchronizer::inflate_fast_locked_object(obj(), ObjectSynchronizer::InflateCause::inflate_cause_vm_internal,\n+                                                                deoptee_thread, thread);\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1964,1 +1964,1 @@\n-          \"Specifies the number of time lightweight fast locking will \"     \\\n+          \"Specifies the number of times lightweight fast locking will \"    \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"memory\/allStatic.hpp\"\n@@ -34,1 +35,0 @@\n-#include \"memory\/allStatic.hpp\"\n@@ -42,1 +42,0 @@\n-#include \"runtime\/objectMonitor.hpp\"\n@@ -81,1 +80,1 @@\n-  public:\n+   public:\n@@ -104,1 +103,1 @@\n-  public:\n+   public:\n@@ -130,1 +129,1 @@\n-    return (double)_items_count\/(double)_table_size;\n+    return (double)_items_count \/ (double)_table_size;\n@@ -169,1 +168,1 @@\n-public:\n+ public:\n@@ -171,3 +170,1 @@\n-    _table = new ConcurrentTable(initial_log_size(),\n-                                 max_log_size(),\n-                                 grow_hint());\n+    _table = new ConcurrentTable(initial_log_size(), max_log_size(), grow_hint());\n@@ -184,1 +181,1 @@\n-          \"Inconsistency between markWord and OMW table has_monitor: %s monitor: \" PTR_FORMAT,\n+          \"Inconsistency between markWord and ObjectMonitorTable has_monitor: %s monitor: \" PTR_FORMAT,\n@@ -213,1 +210,1 @@\n-    \/\/ No implemented;\n+    \/\/ Not implemented;\n@@ -321,2 +318,2 @@\n-       st->print(\"monitor \" PTR_FORMAT \" \", p2i(om));\n-       st->print(\"object \" PTR_FORMAT, p2i(obj));\n+       st->print(\"monitor=\" PTR_FORMAT \", \", p2i(om));\n+       st->print(\"object=\" PTR_FORMAT, p2i(obj));\n@@ -367,1 +364,1 @@\n-                                INTPTR_FORMAT \", type='%s' cause %s\", p2i(object),\n+                                INTPTR_FORMAT \", type='%s' cause=%s\", p2i(object),\n@@ -419,1 +416,1 @@\n-bool LightweightSynchronizer::remove_monitor(Thread* current, oop obj, ObjectMonitor* monitor) {\n+bool LightweightSynchronizer::remove_monitor(Thread* current, ObjectMonitor* monitor, oop obj) {\n@@ -467,1 +464,1 @@\n-      if (_length > 0 && _contended_oops[_length-1] == obj) {\n+      if (_length > 0 && _contended_oops[_length - 1] == obj) {\n@@ -489,1 +486,1 @@\n-        inflate_fast_locked_object(_contended_oops[i], current, current, ObjectSynchronizer::inflate_cause_vm_internal);\n+        inflate_fast_locked_object(_contended_oops[i], ObjectSynchronizer::inflate_cause_vm_internal, current, current);\n@@ -500,1 +497,1 @@\n-    \/\/ Inflate contented objects\n+    \/\/ Inflate contended objects\n@@ -504,1 +501,1 @@\n-      inflate_fast_locked_object(lock_stack.bottom(), current, current, ObjectSynchronizer::inflate_cause_vm_internal);\n+      inflate_fast_locked_object(lock_stack.bottom(), ObjectSynchronizer::inflate_cause_vm_internal, current, current);\n@@ -516,1 +513,1 @@\n-public:\n+ public:\n@@ -544,1 +541,1 @@\n-public:\n+ public:\n@@ -637,1 +634,1 @@\n-    monitor = inflate_fast_locked_object(obj(), locking_thread, current, ObjectSynchronizer::inflate_cause_monitor_enter);\n+    monitor = inflate_fast_locked_object(obj(), ObjectSynchronizer::inflate_cause_monitor_enter, locking_thread, current);\n@@ -642,1 +639,1 @@\n-    monitor = inflate_and_enter(obj(), locking_thread, current, ObjectSynchronizer::inflate_cause_monitor_enter);\n+    monitor = inflate_and_enter(obj(), ObjectSynchronizer::inflate_cause_monitor_enter, locking_thread, current);\n@@ -662,1 +659,1 @@\n-  \/\/ from the deflator. After observing the that the deflator is not\n+  \/\/ from the deflator. After observing that the deflator is not\n@@ -675,1 +672,1 @@\n-    ObjectMonitor* monitor = inflate_fast_locked_object(obj(), current, current, ObjectSynchronizer::inflate_cause_monitor_enter);\n+    ObjectMonitor* monitor = inflate_fast_locked_object(obj(), ObjectSynchronizer::inflate_cause_monitor_enter, current, current);\n@@ -698,1 +695,1 @@\n-    ObjectMonitor* monitor = inflate_and_enter(obj(), current, current, ObjectSynchronizer::inflate_cause_monitor_enter);\n+    ObjectMonitor* monitor = inflate_and_enter(obj(), ObjectSynchronizer::inflate_cause_monitor_enter, current, current);\n@@ -729,1 +726,1 @@\n-      inflate_fast_locked_object(object, current, current, ObjectSynchronizer::inflate_cause_vm_internal);\n+      inflate_fast_locked_object(object, ObjectSynchronizer::inflate_cause_vm_internal, current, current);\n@@ -758,1 +755,1 @@\n-\/\/ ObjectMonitor* with LM_LIGHTWEIGHT. It is used from contexts which requires\n+\/\/ ObjectMonitor* with LM_LIGHTWEIGHT. It is used from contexts which require\n@@ -771,1 +768,1 @@\n-  for(;;) {\n+  for (;;) {\n@@ -776,1 +773,1 @@\n-                \"current thread is not owner\", nullptr);\n+                 \"current thread is not owner\", nullptr);\n@@ -783,1 +780,1 @@\n-                  \"current thread is not owner\", nullptr);\n+                   \"current thread is not owner\", nullptr);\n@@ -786,1 +783,1 @@\n-        return inflate_fast_locked_object(obj, current, current, cause);\n+        return inflate_fast_locked_object(obj, cause, current, current);\n@@ -796,2 +793,2 @@\n-          \/\/ Current thread owns the lock but someone else inflated\n-          \/\/ fix owner and pop lock stack\n+          \/\/ Current thread owns the lock but someone else inflated it.\n+          \/\/ Fix owner and pop lock stack.\n@@ -803,1 +800,1 @@\n-                    \"current thread is not owner\", nullptr);\n+                     \"current thread is not owner\", nullptr);\n@@ -811,1 +808,1 @@\n-ObjectMonitor* LightweightSynchronizer::inflate_into_object_header(Thread* current, JavaThread* inflating_thread, oop object, ObjectSynchronizer::InflateCause cause) {\n+ObjectMonitor* LightweightSynchronizer::inflate_into_object_header(oop object, ObjectSynchronizer::InflateCause cause, JavaThread* inflating_thread, Thread* current) {\n@@ -935,1 +932,1 @@\n-ObjectMonitor* LightweightSynchronizer::inflate_fast_locked_object(oop object, JavaThread* locking_thread, JavaThread* current, ObjectSynchronizer::InflateCause cause) {\n+ObjectMonitor* LightweightSynchronizer::inflate_fast_locked_object(oop object, ObjectSynchronizer::InflateCause cause, JavaThread* locking_thread, JavaThread* current) {\n@@ -943,1 +940,1 @@\n-    return inflate_into_object_header(current, locking_thread, object, cause);\n+    return inflate_into_object_header(object, cause, locking_thread, current);\n@@ -992,1 +989,1 @@\n-ObjectMonitor* LightweightSynchronizer::inflate_and_enter(oop object, JavaThread* locking_thread, JavaThread* current, ObjectSynchronizer::InflateCause cause) {\n+ObjectMonitor* LightweightSynchronizer::inflate_and_enter(oop object, ObjectSynchronizer::InflateCause cause, JavaThread* locking_thread, JavaThread* current) {\n@@ -1003,1 +1000,1 @@\n-    monitor = inflate_into_object_header(current, locking_thread, object, cause);\n+    monitor = inflate_into_object_header(object, cause, locking_thread, current);\n@@ -1043,1 +1040,1 @@\n-    \/\/ must spin until further progress have been made.\n+    \/\/ must spin until further progress has been made.\n@@ -1070,2 +1067,2 @@\n-    \/\/                   and the locking_thread thread owns the object\n-    \/\/                   lock, then we make the locking_thread thread\n+    \/\/                   and the locking_thread owns the object\n+    \/\/                   lock, then we make the locking_thread\n@@ -1073,1 +1070,1 @@\n-    \/\/                   lock from the locking_thread thread's lock stack.\n+    \/\/                   lock from the locking_thread's lock stack.\n@@ -1156,1 +1153,1 @@\n-  bool removed = remove_monitor(current, obj, monitor);\n+  bool removed = remove_monitor(current, monitor, obj);\n@@ -1172,1 +1169,1 @@\n-bool LightweightSynchronizer::quick_enter(oop obj, JavaThread* current, BasicLock* lock) {\n+bool LightweightSynchronizer::quick_enter(oop obj, BasicLock* lock, JavaThread* current) {\n@@ -1177,0 +1174,1 @@\n+  \/\/ If quick_enter succeeds with entering, the cache should be in a valid initialized state.\n@@ -1188,1 +1186,1 @@\n-  \/\/ Only for 32bit which have limited support for fast locking outside the runtime.\n+  \/\/ Only for 32bit which has limited support for fast locking outside the runtime.\n@@ -1192,1 +1190,0 @@\n-    \/\/ Clears object monitor cache, because ?\n","filename":"src\/hotspot\/share\/runtime\/lightweightSynchronizer.cpp","additions":45,"deletions":48,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-private:\n+ private:\n@@ -41,1 +41,1 @@\n-  static bool remove_monitor(Thread* current, oop obj, ObjectMonitor* monitor);\n+  static bool remove_monitor(Thread* current, ObjectMonitor* monitor, oop obj);\n@@ -57,1 +57,1 @@\n-private:\n+ private:\n@@ -61,1 +61,1 @@\n-public:\n+ public:\n@@ -66,1 +66,1 @@\n-  static ObjectMonitor* inflate_into_object_header(Thread* current, JavaThread* inflating_thread, oop object, ObjectSynchronizer::InflateCause cause);\n+  static ObjectMonitor* inflate_into_object_header(oop object, ObjectSynchronizer::InflateCause cause, JavaThread* inflating_thread, Thread* current);\n@@ -68,2 +68,2 @@\n-  static ObjectMonitor* inflate_fast_locked_object(oop object, JavaThread* locking_thread, JavaThread* current, ObjectSynchronizer::InflateCause cause);\n-  static ObjectMonitor* inflate_and_enter(oop object, JavaThread* locking_thread, JavaThread* current, ObjectSynchronizer::InflateCause cause);\n+  static ObjectMonitor* inflate_fast_locked_object(oop object, ObjectSynchronizer::InflateCause cause, JavaThread* locking_thread, JavaThread* current);\n+  static ObjectMonitor* inflate_and_enter(oop object, ObjectSynchronizer::InflateCause cause, JavaThread* locking_thread, JavaThread* current);\n@@ -77,1 +77,1 @@\n-  static bool quick_enter(oop obj, JavaThread* current, BasicLock* Lock);\n+  static bool quick_enter(oop obj, BasicLock* Lock, JavaThread* current);\n","filename":"src\/hotspot\/share\/runtime\/lightweightSynchronizer.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-public:\n+ public:\n@@ -48,1 +48,1 @@\n-private:\n+ private:\n@@ -78,1 +78,1 @@\n-public:\n+ public:\n@@ -130,1 +130,1 @@\n-public:\n+ public:\n@@ -133,1 +133,1 @@\n-private:\n+ private:\n@@ -140,1 +140,1 @@\n-public:\n+ public:\n","filename":"src\/hotspot\/share\/runtime\/lockStack.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -664,5 +664,3 @@\n-  } else {\n-    if (obj != nullptr) {\n-      \/\/ Install the old mark word if nobody else has already done it.\n-      install_displaced_markword_in_object(obj);\n-    }\n+  } else if (obj != nullptr) {\n+    \/\/ Install the old mark word if nobody else has already done it.\n+    install_displaced_markword_in_object(obj);\n@@ -682,1 +680,1 @@\n-  assert(!UseObjectMonitorTable, \"Lightweight has no dmw\");\n+  assert(!UseObjectMonitorTable, \"ObjectMonitorTable has no dmw\");\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.cpp","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -159,1 +159,1 @@\n-public:\n+ public:\n@@ -163,1 +163,1 @@\n-private:\n+ private:\n@@ -388,1 +388,1 @@\n-private:\n+ private:\n@@ -401,1 +401,1 @@\n-public:\n+ public:\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-#include \"memory\/universe.hpp\"\n@@ -37,0 +36,1 @@\n+#include \"memory\/universe.hpp\"\n@@ -38,0 +38,3 @@\n+#include \"prims\/jvmtiImpl.hpp\"\n+#include \"prims\/jvmtiTagMap.hpp\"\n+#include \"prims\/resolvedMethodTable.hpp\"\n@@ -43,1 +46,0 @@\n-#include \"runtime\/serviceThread.hpp\"\n@@ -47,3 +49,1 @@\n-#include \"prims\/jvmtiImpl.hpp\"\n-#include \"prims\/jvmtiTagMap.hpp\"\n-#include \"prims\/resolvedMethodTable.hpp\"\n+#include \"runtime\/serviceThread.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/serviceThread.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1888,1 +1888,1 @@\n-    if (ObjectSynchronizer::quick_enter(obj, current, lock)) {\n+    if (ObjectSynchronizer::quick_enter(obj, lock, current)) {\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -403,2 +403,1 @@\n-bool ObjectSynchronizer::quick_enter_legacy(oop obj, JavaThread* current,\n-                                     BasicLock * lock) {\n+bool ObjectSynchronizer::quick_enter_legacy(oop obj, BasicLock* lock, JavaThread* current) {\n@@ -412,1 +411,1 @@\n-    return LightweightSynchronizer::quick_enter(obj, current, lock);\n+    return LightweightSynchronizer::quick_enter(obj, lock, current);\n@@ -683,1 +682,1 @@\n-      entered = LightweightSynchronizer::inflate_and_enter(obj(), current, current, inflate_cause_jni_enter) != nullptr;\n+      entered = LightweightSynchronizer::inflate_and_enter(obj(), inflate_cause_jni_enter, current, current) != nullptr;\n@@ -977,1 +976,1 @@\n-  for(;;) {\n+  for (;;) {\n@@ -995,1 +994,0 @@\n-  \/\/ Since the monitor isn't in the object header, it can simply be installed.\n@@ -997,0 +995,2 @@\n+    \/\/ Since the monitor isn't in the object header, the hash can simply be\n+    \/\/ installed in the object header.\n@@ -1271,1 +1271,1 @@\n-    size_t new_ceiling = ceiling \/ remainder + 1;\n+    size_t new_ceiling = ceiling + (size_t)((double)ceiling * remainder) + 1;\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-  static bool quick_enter_legacy(oop obj, JavaThread* current, BasicLock* Lock);\n+  static bool quick_enter_legacy(oop obj, BasicLock* Lock, JavaThread* current);\n@@ -126,1 +126,2 @@\n-  static inline bool quick_enter(oop obj, JavaThread* current, BasicLock* Lock);\n+\n+  static inline bool quick_enter(oop obj, BasicLock* Lock, JavaThread* current);\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -55,2 +55,1 @@\n-inline bool ObjectSynchronizer::quick_enter(oop obj, JavaThread* current,\n-                                     BasicLock * lock) {\n+inline bool ObjectSynchronizer::quick_enter(oop obj, BasicLock* lock, JavaThread* current) {\n@@ -66,1 +65,1 @@\n-    return LightweightSynchronizer::quick_enter(obj, current, lock);\n+    return LightweightSynchronizer::quick_enter(obj, lock, current);\n@@ -68,1 +67,1 @@\n-    return quick_enter_legacy(obj, current, lock);\n+    return quick_enter_legacy(obj, lock, current);\n@@ -82,1 +81,0 @@\n-\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.inline.hpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -35,2 +35,2 @@\n-         << \"_metadata at a non 0 offset. metadata_offset = \"\n-         << in_bytes(ObjectMonitor::metadata_offset());\n+        << \"_metadata at a non 0 offset. metadata_offset = \"\n+        << in_bytes(ObjectMonitor::metadata_offset());\n@@ -39,2 +39,2 @@\n-         << \"the _metadata and _owner fields are closer \"\n-         << \"than a cache line which permits false sharing.\";\n+        << \"the _metadata and _owner fields are closer \"\n+        << \"than a cache line which permits false sharing.\";\n@@ -43,2 +43,2 @@\n-         << \"the _owner and _recursions fields are closer \"\n-         << \"than a cache line which permits false sharing.\";\n+        << \"the _owner and _recursions fields are closer \"\n+        << \"than a cache line which permits false sharing.\";\n","filename":"test\/hotspot\/gtest\/runtime\/test_objectMonitor.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -202,1 +202,3 @@\n-            System.out.println(\"RandomDepthTest started.\");\n+            final long seed = random.nextLong();\n+            random.setSeed(seed);\n+            System.out.println(\"RandomDepthTest started. Random seed: \" + seed);\n","filename":"test\/hotspot\/jtreg\/runtime\/Monitor\/UseObjectMonitorTableTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -200,1 +200,1 @@\n-  \/** Perform two synchronized after each other on the same object. *\/\n+    \/** Perform two synchronized after each other on the same object. *\/\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/lang\/LockUnlock.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}