{"files":[{"patch":"@@ -34,0 +34,1 @@\n+#include \"memory\/allStatic.hpp\"\n@@ -55,1 +56,1 @@\n-class ObjectMonitorTable : public CHeapObj<MEMFLAGS::mtObjectMonitor> {\n+class ObjectMonitorTable : AllStatic {\n@@ -62,1 +63,1 @@\n-      reinterpret_cast<ObjectMonitorTable*>(context)->inc_items_count();\n+      ObjectMonitorTable::inc_items_count();\n@@ -66,1 +67,1 @@\n-      reinterpret_cast<ObjectMonitorTable*>(context)->dec_items_count();\n+      ObjectMonitorTable::dec_items_count();\n@@ -72,4 +73,4 @@\n-  ConcurrentTable _table;\n-  volatile size_t _items_count;\n-  size_t _table_size;\n-  volatile bool _resize;\n+  static ConcurrentTable* _table;\n+  static volatile size_t _items_count;\n+  static size_t _table_size;\n+  static volatile bool _resize;\n@@ -120,1 +121,1 @@\n-  void inc_items_count() {\n+  static void inc_items_count() {\n@@ -124,1 +125,1 @@\n-  void dec_items_count() {\n+  static void dec_items_count() {\n@@ -128,1 +129,1 @@\n-  double get_load_factor() {\n+  static double get_load_factor() {\n@@ -132,2 +133,2 @@\n-  size_t table_size(Thread* current = Thread::current()) {\n-    return ((size_t)1) << _table.get_size_log2(current);\n+  static size_t table_size(Thread* current = Thread::current()) {\n+    return ((size_t)1) << _table->get_size_log2(current);\n@@ -169,12 +170,10 @@\n-  ObjectMonitorTable()\n-  : _table(ConcurrentTable(initial_log_size(),\n-                           max_log_size(),\n-                           grow_hint(),\n-                           ConcurrentTable::DEFAULT_ENABLE_STATISTICS,\n-                           ConcurrentTable::DEFAULT_MUTEX_RANK,\n-                           this)),\n-    _items_count(0),\n-    _table_size(table_size()),\n-    _resize(false) {}\n-\n-  void verify_monitor_get_result(oop obj, ObjectMonitor* monitor) {\n+  static void create() {\n+    _table = new ConcurrentTable(initial_log_size(),\n+                                max_log_size(),\n+                                grow_hint());\n+    _items_count = 0;\n+    _table_size = table_size();\n+    _resize = false;\n+  }\n+\n+  static void verify_monitor_get_result(oop obj, ObjectMonitor* monitor) {\n@@ -191,1 +190,1 @@\n-  ObjectMonitor* monitor_get(Thread* current, oop obj) {\n+  static ObjectMonitor* monitor_get(Thread* current, oop obj) {\n@@ -198,1 +197,1 @@\n-    _table.get(current, lookup_f, found_f);\n+    _table->get(current, lookup_f, found_f);\n@@ -203,2 +202,2 @@\n-  void try_notify_grow() {\n-    if (!_table.is_max_size_reached() && !Atomic::load(&_resize)) {\n+  static void try_notify_grow() {\n+    if (!_table->is_max_size_reached() && !Atomic::load(&_resize)) {\n@@ -213,1 +212,1 @@\n-  bool should_shrink() {\n+  static bool should_shrink() {\n@@ -220,2 +219,2 @@\n-  bool should_grow() {\n-    return get_load_factor() > GROW_LOAD_FACTOR && !_table.is_max_size_reached();\n+  static bool should_grow() {\n+    return get_load_factor() > GROW_LOAD_FACTOR && !_table->is_max_size_reached();\n@@ -224,1 +223,1 @@\n-  bool should_resize() {\n+  static bool should_resize() {\n@@ -229,1 +228,1 @@\n-  bool run_task(JavaThread* current, Task& task, const char* task_name, Args&... args) {\n+  static bool run_task(JavaThread* current, Task& task, const char* task_name, Args&... args) {\n@@ -246,2 +245,2 @@\n-  bool grow(JavaThread* current) {\n-    ConcurrentTable::GrowTask grow_task(&_table);\n+  static bool grow(JavaThread* current) {\n+    ConcurrentTable::GrowTask grow_task(_table);\n@@ -256,2 +255,2 @@\n-  bool clean(JavaThread* current) {\n-    ConcurrentTable::BulkDeleteTask clean_task(&_table);\n+  static bool clean(JavaThread* current) {\n+    ConcurrentTable::BulkDeleteTask clean_task(_table);\n@@ -266,1 +265,1 @@\n-  bool resize(JavaThread* current) {\n+  static bool resize(JavaThread* current) {\n@@ -274,1 +273,1 @@\n-      if (!_table.is_max_size_reached() && Atomic::load(&_resize)) {\n+      if (!_table->is_max_size_reached() && Atomic::load(&_resize)) {\n@@ -286,1 +285,1 @@\n-  ObjectMonitor* monitor_put_get(Thread* current, ObjectMonitor* monitor, oop obj) {\n+  static ObjectMonitor* monitor_put_get(Thread* current, ObjectMonitor* monitor, oop obj) {\n@@ -295,1 +294,1 @@\n-    _table.insert_get(current, lookup_f, monitor, found_f, &grow);\n+    _table->insert_get(current, lookup_f, monitor, found_f, &grow);\n@@ -303,1 +302,1 @@\n-  bool remove_monitor_entry(Thread* current, ObjectMonitor* monitor) {\n+  static bool remove_monitor_entry(Thread* current, ObjectMonitor* monitor) {\n@@ -305,1 +304,1 @@\n-    return _table.remove(current, lookup_f);\n+    return _table->remove(current, lookup_f);\n@@ -308,1 +307,1 @@\n-  bool contains_monitor(Thread* current, ObjectMonitor* monitor) {\n+  static bool contains_monitor(Thread* current, ObjectMonitor* monitor) {\n@@ -314,1 +313,1 @@\n-    _table.get(current, lookup_f, found_f);\n+    _table->get(current, lookup_f, found_f);\n@@ -318,1 +317,1 @@\n-  void print_on(outputStream* st) {\n+  static void print_on(outputStream* st) {\n@@ -329,1 +328,1 @@\n-      _table.do_safepoint_scan(printer);\n+      _table->do_safepoint_scan(printer);\n@@ -331,1 +330,1 @@\n-      _table.do_scan(Thread::current(), printer);\n+      _table->do_scan(Thread::current(), printer);\n@@ -336,1 +335,4 @@\n-ObjectMonitorTable* LightweightSynchronizer::_omworld = nullptr;\n+ObjectMonitorTable::ConcurrentTable* ObjectMonitorTable::_table = nullptr;\n+volatile size_t ObjectMonitorTable::_items_count = 0;\n+size_t ObjectMonitorTable::_table_size = 0;\n+volatile bool ObjectMonitorTable::_resize = false;\n@@ -415,1 +417,1 @@\n-  return _omworld->monitor_put_get(current, monitor, obj);\n+  return ObjectMonitorTable::monitor_put_get(current, monitor, obj);\n@@ -422,1 +424,1 @@\n-  return _omworld->remove_monitor_entry(current, monitor);\n+  return ObjectMonitorTable::remove_monitor_entry(current, monitor);\n@@ -441,1 +443,1 @@\n-  _omworld = new ObjectMonitorTable();\n+  ObjectMonitorTable::create();\n@@ -448,1 +450,1 @@\n-  return _omworld->should_resize();\n+  return ObjectMonitorTable::should_resize();\n@@ -455,1 +457,1 @@\n-  return _omworld->resize(current);\n+  return ObjectMonitorTable::resize(current);\n@@ -1164,1 +1166,1 @@\n-  return _omworld->monitor_get(current, obj);\n+  return ObjectMonitorTable::monitor_get(current, obj);\n@@ -1169,1 +1171,1 @@\n-  return _omworld->contains_monitor(current, monitor);\n+  return ObjectMonitorTable::contains_monitor(current, monitor);\n","filename":"src\/hotspot\/share\/runtime\/lightweightSynchronizer.cpp","additions":58,"deletions":56,"binary":false,"changes":114,"status":"modified"},{"patch":"@@ -37,2 +37,0 @@\n-  static ObjectMonitorTable* _omworld;\n-\n","filename":"src\/hotspot\/share\/runtime\/lightweightSynchronizer.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -418,1 +418,0 @@\n-  static const Mutex::Rank DEFAULT_MUTEX_RANK = static_cast<Mutex::Rank>(static_cast<int>(Mutex::nosafepoint) - 2);\n@@ -423,1 +422,1 @@\n-                      Mutex::Rank rank = DEFAULT_MUTEX_RANK,\n+                      Mutex::Rank rank = Mutex::nosafepoint-2,\n","filename":"src\/hotspot\/share\/utilities\/concurrentHashTable.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}