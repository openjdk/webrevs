{"files":[{"patch":"@@ -36,1 +36,0 @@\n-import java.util.concurrent.atomic.AtomicLong;\n@@ -422,3 +421,10 @@\n-    \/\/ contains file attributes and its handle\n-    \/\/ the attributes' key is valid as long as the handle remains open\n-    private record LinkAttributes(WindowsFileAttributes attrs, long handle) {\n+    \/**\n+     * Contains the attributes of a given file system entry and the open\n+     * handle from which they were obtained. The handle must remain open\n+     * until the volume serial number and file index of the attributes\n+     * are no longer needed for comparison with other attributes.\n+     *\n+     * @param attrs  the file system entry attributes\n+     * @param handle the open Windows file handle\n+     *\/\n+    private record EntryAttributes(WindowsFileAttributes attrs, long handle) {\n@@ -428,1 +434,1 @@\n-            if (obj instanceof LinkAttributes other) {\n+            if (obj instanceof EntryAttributes other) {\n@@ -430,1 +436,1 @@\n-                return oattrs.volSerialNumber() == attrs.volSerialNumber() && \n+                return oattrs.volSerialNumber() == attrs.volSerialNumber() &&\n@@ -443,2 +449,12 @@\n-    \/\/ find the attributes of the last accessible link in the chain\n-    private LinkAttributes lastFileAttrs(WindowsPath path)\n+    \/**\n+     * Returns the attributes of the last symbolic link encountered in the\n+     * specified path. Links are not resolved in the path taken as a whole,\n+     * but rather then first link is followed, then its target, and so on,\n+     * until no more links are encountered.  The handle contained in the\n+     * returned value must be closed once the attributes are no longer needed.\n+     *\n+     * @param path the file system path to examine\n+     * @return the attributes and handle or null if no links are found\n+     * @throws FileSystemLoopException if a symbolic link cycle is encountered\n+     *\/\n+    private EntryAttributes lastLinkAttributes(WindowsPath path)\n@@ -447,2 +463,2 @@\n-        var fileAttrs = new HashSet<LinkAttributes>();\n-        LinkAttributes lastFileAttrs = null;\n+        var linkAttrs = new HashSet<EntryAttributes>();\n+        EntryAttributes lastLinkAttributes = null;\n@@ -461,2 +477,1 @@\n-                WindowsFileAttributes attrs =\n-                    WindowsFileAttributes.readAttributes(h);\n+                WindowsFileAttributes attrs = WindowsFileAttributes.readAttributes(h);\n@@ -466,2 +481,2 @@\n-                LinkAttributes linkAttr = new LinkAttributes(attrs, h);\n-                if (!fileAttrs.add(linkAttr))\n+                EntryAttributes linkAttr = new EntryAttributes(attrs, h);\n+                if (!linkAttrs.add(linkAttr))\n@@ -470,1 +485,1 @@\n-                lastFileAttrs = linkAttr;\n+                lastLinkAttributes = linkAttr;\n@@ -476,2 +491,2 @@\n-            if (lastFileAttrs != null) {\n-                CloseHandle(lastFileAttrs.handle());\n+            if (lastLinkAttributes != null) {\n+                CloseHandle(lastLinkAttributes.handle());\n@@ -481,2 +496,2 @@\n-            fileAttrs.remove(lastFileAttrs);\n-            for (LinkAttributes la : fileAttrs)\n+            linkAttrs.remove(lastLinkAttributes);\n+            for (EntryAttributes la : linkAttrs)\n@@ -486,1 +501,1 @@\n-        return lastFileAttrs;\n+        return lastLinkAttributes;\n@@ -489,2 +504,13 @@\n-    \/\/ find the key by following links\n-    private LinkAttributes fileAttrs(WindowsPath file) throws WindowsException {\n+    \/**\n+     * Returns the attributes of the file located by the supplied parameter\n+     * with all symbolic links in its path resolved. If the file located by\n+     * the resolved path does not exist, then null is returned. The handle\n+     * contained in the returned value must be closed once the attributes\n+     * are no longer needed.\n+     *\n+     * @param path the file system path to examine\n+     * @return the attributes and handle or null if the real path does not exist\n+     *\/\n+    private EntryAttributes realPathAttributes(WindowsPath path)\n+        throws WindowsException\n+    {\n@@ -493,1 +519,1 @@\n-            h = file.openForReadAttributeAccess(true);\n+            h = path.openForReadAttributeAccess(true);\n@@ -510,1 +536,1 @@\n-            return new LinkAttributes(attrs, h);\n+            return new EntryAttributes(attrs, h);\n@@ -524,1 +550,1 @@\n-        if (!(obj2 instanceof WindowsPath))\n+        if (!(obj2 instanceof WindowsPath file2))\n@@ -526,1 +552,0 @@\n-        WindowsPath file2 = (WindowsPath)obj2;\n@@ -528,1 +553,1 @@\n-        LinkAttributes attrs1 = null;\n+        EntryAttributes attrs1 = null;\n@@ -530,1 +555,1 @@\n-            attrs1 = fileAttrs(file1);\n+            attrs1 = realPathAttributes(file1);\n@@ -532,1 +557,1 @@\n-                attrs1 = lastFileAttrs(file1);\n+                attrs1 = lastLinkAttributes(file1);\n@@ -535,1 +560,1 @@\n-                LinkAttributes attrs2 = null;\n+                EntryAttributes attrs2 = null;\n@@ -537,1 +562,1 @@\n-                     attrs2 = fileAttrs(file2);\n+                     attrs2 = realPathAttributes(file2);\n@@ -539,1 +564,1 @@\n-                         attrs2 = lastFileAttrs(file2);\n+                         attrs2 = lastLinkAttributes(file2);\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsFileSystemProvider.java","additions":57,"deletions":32,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -292,2 +292,1 @@\n-    static String readLink(WindowsPath path, long handle) throws IOException\n-    {\n+    static String readLink(WindowsPath path, long handle) throws IOException {\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsLinkSupport.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}