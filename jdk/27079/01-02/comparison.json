{"files":[{"patch":"@@ -428,2 +428,6 @@\n-            if (obj instanceof LinkAttributes other)\n-                return WindowsFileAttributes.isSameFile(attrs, other.attrs());\n+            if (obj instanceof LinkAttributes other) {\n+                WindowsFileAttributes oattrs = other.attrs();\n+                return oattrs.volSerialNumber() == attrs.volSerialNumber() && \n+                       oattrs.fileIndexHigh()   == attrs.fileIndexHigh() &&\n+                       oattrs.fileIndexLow()    == attrs.fileIndexLow();\n+            }\n@@ -464,1 +468,1 @@\n-                    throw new FileSystemLoopException(\"Looping symbolic link\");\n+                    throw new FileSystemLoopException(path.toString());\n@@ -471,1 +475,1 @@\n-        } catch (Exception e) {\n+        } catch (IOException|WindowsException e) {\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsFileSystemProvider.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-            return readLinkImpl(path, handle);\n+            return readLink(path, handle);\n@@ -93,7 +93,0 @@\n-    \/**\n-     * Returns the target of a symbolic link\n-     *\/\n-    static String readLink(WindowsPath path, long handle) throws IOException {\n-        return readLinkImpl(path, handle);\n-    }\n-\n@@ -299,2 +292,1 @@\n-    private static String readLinkImpl(WindowsPath path, long handle)\n-        throws IOException\n+    static String readLink(WindowsPath path, long handle) throws IOException\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsLinkSupport.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"}]}