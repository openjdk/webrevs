{"files":[{"patch":"@@ -466,13 +466,0 @@\n-\n-    @Override\n-    public boolean equals(Object obj) {\n-        if (obj == this)\n-            return true;\n-        return obj instanceof WindowsFileAttributes other\n-            && isSameFile(this, other);\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return volSerialNumber + fileIndexHigh + fileIndexLow;\n-    }\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsFileAttributes.java","additions":0,"deletions":13,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -424,1 +424,14 @@\n-    private record AttrsAndHandle(WindowsFileAttributes attrs, long handle) {}\n+    private record LinkAttributes(WindowsFileAttributes attrs, long handle) {\n+        public boolean equals(Object obj) {\n+            if (obj == this)\n+                return true;\n+            if (obj instanceof LinkAttributes other)\n+                return WindowsFileAttributes.isSameFile(attrs, other.attrs());\n+            return false;\n+        }\n+\n+        public int hashCode() {\n+            return attrs.volSerialNumber() +\n+                   attrs.fileIndexHigh() + attrs.fileIndexLow();\n+        }\n+    }\n@@ -427,1 +440,1 @@\n-    private AttrsAndHandle lastFileAttrs(WindowsPath path)\n+    private LinkAttributes lastFileAttrs(WindowsPath path)\n@@ -430,13 +443,13 @@\n-        var fileAttrs = new HashSet<WindowsFileAttributes>();\n-        WindowsFileAttributes lastFileAttrs = null;\n-        long handle = 0L;\n-        while (path != null) {\n-            long h = 0L;\n-            try {\n-                h = path.openForReadAttributeAccess(false);\n-            } catch (WindowsException x) {\n-                if (x.lastError() != ERROR_FILE_NOT_FOUND &&\n-                    x.lastError() != ERROR_PATH_NOT_FOUND)\n-                    throw x;\n-                break;\n-            }\n+        var fileAttrs = new HashSet<LinkAttributes>();\n+        LinkAttributes lastFileAttrs = null;\n+        try {\n+            while (path != null) {\n+                long h;\n+                try {\n+                    h = path.openForReadAttributeAccess(false);\n+                } catch (WindowsException x) {\n+                    if (x.lastError() != ERROR_FILE_NOT_FOUND &&\n+                        x.lastError() != ERROR_PATH_NOT_FOUND)\n+                        throw x;\n+                    break;\n+                }\n@@ -444,5 +457,4 @@\n-            WindowsFileAttributes attrs = WindowsFileAttributes.readAttributes(h);\n-            if (attrs == null || !attrs.isSymbolicLink()) {\n-                CloseHandle(h);\n-                break;\n-            }\n+                WindowsFileAttributes attrs =\n+                    WindowsFileAttributes.readAttributes(h);\n+                if (!attrs.isSymbolicLink())\n+                    break;\n@@ -450,6 +462,3 @@\n-            if (!fileAttrs.add(attrs)) {\n-                CloseHandle(h);\n-                if (handle != 0L)\n-                    CloseHandle(handle);\n-                throw new FileSystemLoopException(\"Looping symbolic link\");\n-            }\n+                LinkAttributes linkAttr = new LinkAttributes(attrs, h);\n+                if (!fileAttrs.add(linkAttr))\n+                    throw new FileSystemLoopException(\"Looping symbolic link\");\n@@ -457,4 +466,1 @@\n-            lastFileAttrs = attrs;\n-            if (handle != 0L)\n-                CloseHandle(handle);\n-            handle = h;\n+                lastFileAttrs = linkAttr;\n@@ -462,2 +468,12 @@\n-            String target = WindowsLinkSupport.readLink(path);\n-            path = WindowsPath.parse(path.getFileSystem(), target);\n+                String target = WindowsLinkSupport.readLink(path, h);\n+                path = WindowsPath.parse(path.getFileSystem(), target);\n+            }\n+        } catch (Exception e) {\n+            if (lastFileAttrs != null) {\n+                CloseHandle(lastFileAttrs.handle());\n+                throw e;\n+            }\n+        } finally {\n+            fileAttrs.remove(lastFileAttrs);\n+            for (LinkAttributes la : fileAttrs)\n+                CloseHandle(la.handle());\n@@ -466,2 +482,1 @@\n-        return lastFileAttrs == null\n-            ? null : new AttrsAndHandle(lastFileAttrs, handle);\n+        return lastFileAttrs;\n@@ -471,4 +486,2 @@\n-    private AttrsAndHandle fileAttrs(WindowsPath file)\n-        throws WindowsException\n-    {\n-        long h = 0L;\n+    private LinkAttributes fileAttrs(WindowsPath file) throws WindowsException {\n+        long h = INVALID_HANDLE_VALUE;\n@@ -484,1 +497,1 @@\n-        if (h != 0L) {\n+        if (h != INVALID_HANDLE_VALUE) {\n@@ -493,4 +506,1 @@\n-            if (attrs != null)\n-                return new AttrsAndHandle(attrs, h);\n-\n-            CloseHandle(h);\n+            return new LinkAttributes(attrs, h);\n@@ -514,1 +524,1 @@\n-        AttrsAndHandle ah1 = null;\n+        LinkAttributes attrs1 = null;\n@@ -516,6 +526,6 @@\n-            ah1 = fileAttrs(file1);\n-            if (ah1 == null)\n-                ah1 = lastFileAttrs(file1);\n-            if (ah1 != null) {\n-                WindowsFileAttributes attrs = ah1.attrs();\n-                AttrsAndHandle ah2 = null;\n+            attrs1 = fileAttrs(file1);\n+            if (attrs1 == null)\n+                attrs1 = lastFileAttrs(file1);\n+            if (attrs1 != null) {\n+                WindowsFileAttributes attrs = attrs1.attrs();\n+                LinkAttributes attrs2 = null;\n@@ -523,5 +533,5 @@\n-                     ah2 = fileAttrs(file2);\n-                     if (ah2 == null)\n-                         ah2 = lastFileAttrs(file2);\n-                     if (ah2 != null)\n-                         return ah1.attrs().equals(ah2.attrs());\n+                     attrs2 = fileAttrs(file2);\n+                     if (attrs2 == null)\n+                         attrs2 = lastFileAttrs(file2);\n+                     if (attrs2 != null)\n+                         return attrs1.equals(attrs2);\n@@ -531,2 +541,2 @@\n-                    if (ah2 != null)\n-                        CloseHandle(ah2.handle());\n+                    if (attrs2 != null)\n+                        CloseHandle(attrs2.handle());\n@@ -538,2 +548,2 @@\n-            if (ah1 != null)\n-                CloseHandle(ah1.handle());\n+            if (attrs1 != null)\n+                CloseHandle(attrs1.handle());\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsFileSystemProvider.java","additions":69,"deletions":59,"binary":false,"changes":128,"status":"modified"},{"patch":"@@ -93,0 +93,7 @@\n+    \/**\n+     * Returns the target of a symbolic link\n+     *\/\n+    static String readLink(WindowsPath path, long handle) throws IOException {\n+        return readLinkImpl(path, handle);\n+    }\n+\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsLinkSupport.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}