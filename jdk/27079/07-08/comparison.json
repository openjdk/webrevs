{"files":[{"patch":"@@ -449,0 +449,34 @@\n+    \/**\n+     * Returns the attributes of the next symbolic link encountered in the\n+     * specified path. The handle contained in the returned value must be closed\n+     * once the attributes are no longer needed.\n+     *\n+     * @param path the file system path to examine\n+     * @return the attributes and handle or null if no link is found\n+     *\/\n+    private EntryAttributes linkAttributes(WindowsPath path)\n+        throws WindowsException\n+    {\n+        long h = INVALID_HANDLE_VALUE;\n+        try {\n+            h = path.openForReadAttributeAccess(false);\n+        } catch (WindowsException x) {\n+            if (x.lastError() != ERROR_FILE_NOT_FOUND &&\n+                x.lastError() != ERROR_PATH_NOT_FOUND)\n+                throw x;\n+            return null;\n+        }\n+\n+        WindowsFileAttributes attrs = null;\n+        try {\n+            attrs = WindowsFileAttributes.readAttributes(h);\n+        } finally {\n+            if (attrs == null || !attrs.isSymbolicLink()) {\n+                CloseHandle(h);\n+                return null;\n+            }\n+        }\n+\n+        return new EntryAttributes(attrs, h);\n+    }\n+\n@@ -452,1 +486,1 @@\n-     * but rather then first link is followed, then its target, and so on,\n+     * but rather the first link is followed, then its target, and so on,\n@@ -463,4 +497,1 @@\n-        var linkAttrs = new HashSet<EntryAttributes>();\n-        EntryAttributes lastLinkAttributes = null;\n-        long h = INVALID_HANDLE_VALUE;\n-\n+        var linkAttrs = new LinkedHashSet<EntryAttributes>();\n@@ -469,11 +500,2 @@\n-                try {\n-                    h = path.openForReadAttributeAccess(false);\n-                } catch (WindowsException x) {\n-                    if (x.lastError() != ERROR_FILE_NOT_FOUND &&\n-                        x.lastError() != ERROR_PATH_NOT_FOUND)\n-                        throw x;\n-                    break;\n-                }\n-\n-                WindowsFileAttributes attrs = WindowsFileAttributes.readAttributes(h);\n-                if (!attrs.isSymbolicLink())\n+                EntryAttributes linkAttr = linkAttributes(path);\n+                if (linkAttr == null)\n@@ -482,2 +504,4 @@\n-                EntryAttributes linkAttr = new EntryAttributes(attrs, h);\n-                if (!linkAttrs.add(linkAttr))\n+                if (!linkAttrs.add(linkAttr)) {\n+                    \/\/ the element was not added to the set so close its handle\n+                    \/\/ here as it would not be closed in the finally block\n+                    CloseHandle(linkAttr.handle());\n@@ -485,4 +509,1 @@\n-\n-                h = INVALID_HANDLE_VALUE;\n-\n-                lastLinkAttributes = linkAttr;\n+                }\n@@ -493,10 +514,0 @@\n-        } catch (IOException|WindowsException e) {\n-            \/\/ only close the last link's handle in case of error\n-            if (lastLinkAttributes != null) {\n-                CloseHandle(lastLinkAttributes.handle());\n-                throw e;\n-            }\n-        } finally {\n-            \/\/ close vestigial handle\n-            if (h != INVALID_HANDLE_VALUE)\n-                CloseHandle(h);\n@@ -504,4 +515,4 @@\n-            \/\/ close all but the last link's handle\n-            linkAttrs.remove(lastLinkAttributes);\n-            for (EntryAttributes la : linkAttrs)\n-                CloseHandle(la.handle());\n+            if (!linkAttrs.isEmpty())\n+                return linkAttrs.removeLast();\n+        } finally {\n+            linkAttrs.stream().forEach(la -> CloseHandle(la.handle()));\n@@ -510,1 +521,1 @@\n-        return lastLinkAttributes;\n+        return null;\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsFileSystemProvider.java","additions":48,"deletions":37,"binary":false,"changes":85,"status":"modified"}]}