{"files":[{"patch":"@@ -44,0 +44,3 @@\n+#ifdef ASSERT\n+#include \"ci\/ciUtilities.inline.hpp\"\n+#endif\n@@ -473,1 +476,12 @@\n-    assert(_callee == nullptr || _callee == m, \"repeated inline attempt with different callee\");\n+#ifdef ASSERT\n+    \/\/ Check that the callee hasn't changed between inline attempts (except with dynamic loading: then check dependencies)\n+    if (_callee != nullptr && _callee != m) {\n+      VM_ENTRY_MARK;\n+      Compile* C = Compile::current();\n+      Dependencies* deps = C->dependencies();\n+      MutexLocker ml(Compile_lock);\n+      deps->encode_content_bytes();\n+      assert(deps->validate_dependencies(C->env()->task()) != Dependencies::end_marker,\n+        \"repeated inline attempt with different callee\");\n+    }\n+#endif\n","filename":"src\/hotspot\/share\/opto\/callGenerator.cpp","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2106,0 +2106,1 @@\n+  bool should_stress = false;\n@@ -2113,0 +2114,6 @@\n+      if (should_stress_inlining()) {\n+        cg->call_node()->set_generator(cg);\n+        C->igvn_worklist()->push(cg->call_node());\n+        should_stress = true;\n+        break;\n+      }\n@@ -2141,1 +2148,1 @@\n-  assert(inlining_progress() || _late_inlines.length() == 0, \"no progress\");\n+  assert(should_stress || inlining_progress() || _late_inlines.length() == 0, \"no progress\");\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1097,1 +1097,2 @@\n-  bool should_delay_inlining() { return AlwaysIncrementalInline || (StressIncrementalInlining && (random() % 2) == 0); }\n+  bool should_stress_inlining() { return StressIncrementalInlining && (random() % 2) == 0; }\n+  bool should_delay_inlining() { return AlwaysIncrementalInline || should_stress_inlining(); }\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}