{"files":[{"patch":"@@ -472,0 +472,4 @@\n+  virtual ciMethod* callee_method() {\n+    return _callee;\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/callGenerator.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -91,0 +91,1 @@\n+  virtual ciMethod* callee_method() { ShouldNotReachHere(); }\n","filename":"src\/hotspot\/share\/opto\/callGenerator.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1239,2 +1239,14 @@\n-        \/\/ Register for late inlining.\n-        cg->set_callee_method(callee);\n+        ciMethod* old_callee = cg->callee_method();\n+        if (old_callee == nullptr || old_callee == callee) {\n+          \/\/ Register for late inlining.\n+          cg->set_callee_method(callee);\n+#ifdef ASSERT\n+        } else {\n+          \/\/ If callee has changed between inline attempts, check that it happens because of dynamic loading\n+          Dependencies* deps = phase->C->dependencies();\n+          MutexLocker ml(Compile_lock);\n+          deps->encode_content_bytes();\n+          assert(deps->validate_dependencies(phase->C->env()->task()) != Dependencies::end_marker,\n+          \"repeated inline attempt with different callee\");\n+#endif\n+        }\n","filename":"src\/hotspot\/share\/opto\/callnode.cpp","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2106,0 +2106,1 @@\n+  bool should_stress = false;\n@@ -2113,0 +2114,6 @@\n+      if (should_stress_inlining()) {\n+        cg->call_node()->set_generator(cg);\n+        C->igvn_worklist()->push(cg->call_node());\n+        should_stress = true;\n+        break;\n+      }\n@@ -2141,1 +2148,1 @@\n-  assert(inlining_progress() || _late_inlines.length() == 0, \"no progress\");\n+  assert(should_stress || inlining_progress() || _late_inlines.length() == 0, \"no progress\");\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1097,1 +1097,2 @@\n-  bool should_delay_inlining() { return AlwaysIncrementalInline || (StressIncrementalInlining && (random() % 2) == 0); }\n+  bool should_stress_inlining() { return StressIncrementalInlining && (random() % 2) == 0; }\n+  bool should_delay_inlining() { return AlwaysIncrementalInline || should_stress_inlining(); }\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}