{"files":[{"patch":"@@ -104,2 +104,2 @@\n- * <p> The following (non-decimal) forms are supported\n- * in this mode:\n+ * <p> <a id=\"format-posix\"><\/a> The following (non-decimal) forms are\n+ * supported by {@link Inet4Address#ofPosixLiteral(String)} method:\n@@ -216,5 +216,2 @@\n-     * Inet4Address##format textual representation} of an IPv4 address in POSIX form.\n-     * This form allows extended syntax, accepting hexadecimal and octal address\n-     * segments as specified in {@code inet_addr} POSIX API (loose syntax). Please\n-     * refer to <a href=\"https:\/\/www.ietf.org\/rfc\/rfc6943.html#section-3.1.1\">\n-     * <i>RFC&nbsp;6943: Issues in Identifier Comparison for Security Purposes<\/i><\/a>.\n+     * Inet4Address##format textual representation} of an IPv4 address in\n+     * {@linkplain Inet4Address##format-posix POSIX form.}\n@@ -227,6 +224,9 @@\n-     * when {@code posixIPAddressLiteral} parameter contains octal address segments below\n-     * {@code 0256} (decimal {@code 174}). Unlike {@linkplain Inet4Address#ofLiteral}\n-     * that ignores leading zeros, parses all numbers as decimal and produces\n-     * {@code 255} for {@code \"0255\"}, {@linkplain Inet4Address#ofPosixLiteral this}\n-     * method interprets the numbers based on their prefix (hexadecimal {@code \"0x\"},\n-     * octal {@code \"0\"}) and returns {@code 173} for {@code \"0255\"}.\n+     * when {@code posixIPAddressLiteral} parameter contains address segments with\n+     * leading zeroes. An address segment with a leading zero is always parsed as an octal\n+     * number by this method, therefore {@code 0255} (octal) will be parsed as\n+     * {@code 173} (decimal). On the other hand, {@link Inet4Address#ofLiteral\n+     * Inet4Address.ofLiteral} ignores leading zeros, parses all numbers as decimal and produces\n+     * {@code 255}. Where this method would parse {@code 0256.0256.0256.0256} (octal) and\n+     * produce {@code 174.174.174.174} (decimal) in four dotted quad notation,\n+     * {@link Inet4Address#ofLiteral Inet4Address.ofLiteral} will throw\n+     * {@code IllegalArgumentException}.\n@@ -280,5 +280,2 @@\n-     * Parses the given string as an IPv4 address literal in POSIX form.\n-     * This form allows extended syntax, accepting hexadecimal and octal address\n-     * segments as specified in {@code inet_addr} POSIX API (loose syntax). Please\n-     * refer to <a href=\"https:\/\/www.ietf.org\/rfc\/rfc6943.html#section-3.1.1\">\n-     * <i>RFC&nbsp;6943: Issues in Identifier Comparison for Security Purposes<\/i><\/a>.\n+     * Parses the given string as an IPv4 address literal in\n+     * {@linkplain Inet4Address##format-posix POSIX form.}\n@@ -294,6 +291,9 @@\n-     * when {@code addressLiteral} string contains octal address segments below\n-     * {@code 0256} (decimal {@code 174}). Unlike {@linkplain Inet4Address#parseAddressString}\n-     * that ignores leading zeros, parses all numbers as decimal and produces\n-     * {@code 255} for {@code \"0255\"}, {@linkplain Inet4Address#parseAddressStringPosix this}\n-     * method interprets the numbers based on their prefix (hexadecimal {@code \"0x\"},\n-     * octal {@code \"0\"}) and returns {@code 173} for {@code \"0255\"}.\n+     * when {@code addressLiteral} parameter contains address segments with leading\n+     * zeroes. An address segment with a leading zero is always parsed as an octal\n+     * number by this method, therefore {@code 0255} (octal) will be parsed as\n+     * {@code 173} (decimal). On the other hand, {@link Inet4Address#parseAddressString}\n+     * ignores leading zeros, parses all numbers as decimal and produces {@code 255}.\n+     * Where this method would parse {@code 0256.0256.0256.0256} (octal) and produce\n+     * {@code 174.174.174.174} (decimal) in four dotted quad notation, {@linkplain\n+     * Inet4Address#parseAddressString} will either throw {@code IllegalArgumentException}\n+     * or return {@code null}, depending on the value of {@code throwIAE}.\n","filename":"src\/java.base\/share\/classes\/java\/net\/Inet4Address.java","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"}]}