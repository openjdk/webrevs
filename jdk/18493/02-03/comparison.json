{"files":[{"patch":"@@ -97,28 +97,6 @@\n- * Additionally, the\n- * {@link Inet4Address#ofPosixLiteral(String)} method implements a\n- * <a href=\"https:\/\/pubs.opengroup.org\/onlinepubs\/9699919799\/functions\/inet_addr.html\">\n- * POSIX {@code inet_addr}<\/a> compatible \"loose\" parsing algorithm, allowing\n- * octal and hexadecimal address segments. Please refer to\n- * <a href=\"https:\/\/www.ietf.org\/rfc\/rfc6943.html#section-3.1.1\"> <i>RFC&nbsp;\n- * 6943: Issues in Identifier Comparison for Security Purposes<\/i><\/a>.\n- * <p> <a id=\"format-posix\"><\/a> The following (non-decimal) forms are\n- * supported by {@link Inet4Address#ofPosixLiteral(String)} method:\n- * {@snippet :\n- *  \/\/ Dotted-quad 'x.x.x.x' form with four part address literal\n- *  Inet4Address.ofPosixLiteral(\"0177.0000.0000.0001\"); \/\/ ==> \/127.0.0.1\n- *  Inet4Address.ofPosixLiteral(\"0127.0.0.1\"); \/\/ ==> \/87.0.0.1\n- *\n- *  \/\/ Dotted-triple 'x.x.x' form with three part address literal,\n- *  \/\/ the last part is placed in the rightmost two bytes\n- *  \/\/ of the constructed address\n- *  Inet4Address.ofPosixLiteral(\"0x7F.0.0x101\"); \/\/ ==> \/127.0.1.1\n- *\n- *  \/\/ Dotted-double 'x.x' form with two part address literal,\n- *  \/\/ the last part is placed in the rightmost three bytes\n- *  \/\/ of the constructed address\n- *  Inet4Address.ofPosixLiteral(\"0177.0200401\"); \/\/ ==> \/127.1.1.1\n- *\n- *  \/\/ Dotless 'x' form with one value that is stored directly in\n- *  \/\/ the constructed address bytes without any rearrangement\n- *  Inet4Address.ofPosixLiteral(\"017700000001\"); \/\/ ==> \/127.0.0.1\n- * }\n+ * Additionally, the {@link Inet4Address#ofPosixLiteral(String)}\n+ * method implements a POSIX {@code inet_addr} compatible \"loose\"\n+ * parsing algorithm, allowing octal and hexadecimal address segments.\n+ * Please refer to <a href=\"https:\/\/www.ietf.org\/rfc\/rfc6943.html#section-3.1.1\">\n+ * <i>RFC&nbsp;6943: Issues in Identifier Comparison for Security\n+ * Purposes<\/i><\/a>.\n@@ -217,3 +195,36 @@\n-     * {@linkplain Inet4Address##format-posix POSIX form.}\n-     * <p> If the provided IPv4 address literal cannot represent a {@linkplain\n-     * Inet4Address##format valid IPv4 address} an {@code IllegalArgumentException} is thrown.\n+     * POSIX {@code inet_addr} compatible form.\n+     * <p> <a id=\"format-posix\"><\/a> The method {@code ofPosixLiteral}\n+     * implements <a href=\"https:\/\/pubs.opengroup.org\/onlinepubs\/9699919799\/functions\/inet_addr.html\">\n+     * POSIX {@code inet_addr}<\/a> compatible parsing algorithm, allowing\n+     * octal and hexadecimal address segments. {@code \"0\"} is the prefix\n+     * for octal numbers, {@code \"0x\"} and {@code \"0X\"} are the prefixes\n+     * for hexadecimal numbers. Non-zero address segments that start from\n+     * non-zero digits are parsed as decimal numbers. The following\n+     * (non-decimal) forms are supported by this method:\n+     * {@snippet :\n+     *  \/\/ Dotted-quad 'x.x.x.x' form with four part address literal\n+     *  Inet4Address.ofPosixLiteral(\"0177.0.0.1\"); \/\/ ==> \/127.0.0.1\n+     *  Inet4Address.ofPosixLiteral(\"0x7F.0.0.1\"); \/\/ ==> \/127.0.0.1\n+     *\n+     *  \/\/ Dotted-triple 'x.x.x' form with three part address literal,\n+     *  \/\/ the last part is placed in the rightmost two bytes\n+     *  \/\/ of the constructed address\n+     *  Inet4Address.ofPosixLiteral(\"0177.0.0402\"); \/\/ ==> \/127.0.1.2\n+     *  Inet4Address.ofPosixLiteral(\"0x7F.0.0x102\"); \/\/ ==> \/127.0.1.2\n+     *\n+     *  \/\/ Dotted-double 'x.x' form with two part address literal,\n+     *  \/\/ the last part is placed in the rightmost three bytes\n+     *  \/\/ of the constructed address\n+     *  Inet4Address.ofPosixLiteral(\"0177.0201003\"); \/\/ ==> \/127.1.2.3\n+     *  Inet4Address.ofPosixLiteral(\"0x7F.0x10203\"); \/\/ ==> \/127.1.2.3\n+     *  Inet4Address.ofPosixLiteral(\"127.66051\"); \/\/ ==> \/127.1.2.3\n+     *\n+     *  \/\/ Dotless 'x' form with one value that is stored directly in\n+     *  \/\/ the constructed address bytes without any rearrangement\n+     *  Inet4Address.ofPosixLiteral(\"0100401404\"); \/\/ ==> \/1.2.3.4\n+     *  Inet4Address.ofPosixLiteral(\"0x1020304\"); \/\/ ==> \/1.2.3.4\n+     *  Inet4Address.ofPosixLiteral(\"16909060\"); \/\/ ==> \/1.2.3.4\n+     * }\n+     * <p> If the provided IPv4 address literal cannot represent a\n+     * valid IPv4 address in {@linkplain Inet4Address##format-posix\n+     * POSIX form} an {@code IllegalArgumentException} is thrown.\n","filename":"src\/java.base\/share\/classes\/java\/net\/Inet4Address.java","additions":42,"deletions":31,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -127,1 +127,1 @@\n-        byte[] ipv4_127_0_1_1 = new byte[]{127, 0, 1, 1};\n+        byte[] ipv4_127_0_1_2 = new byte[]{127, 0, 1, 2};\n@@ -130,1 +130,1 @@\n-        byte[] ipv4_127_1_1_1 = new byte[]{127, 1, 1, 1};\n+        byte[] ipv4_127_1_2_3 = new byte[]{127, 1, 2, 3};\n@@ -226,0 +226,4 @@\n+                \/\/      with leading 0s treated as octal segment prefixes\n+                Arguments.of(InetAddressClass.INET4_ADDRESS_POSIX,\n+                        \"0177.0.0402\", ipv4_127_0_1_2),\n+                \/\/      form:'x.x.x' method:InetAddress.ofPosixLiteral -\n@@ -228,1 +232,1 @@\n-                        \"0x7F.0.0x101\", ipv4_127_0_1_1),\n+                        \"0x7F.0.0x102\", ipv4_127_0_1_2),\n@@ -232,1 +236,9 @@\n-                        \"0177.0200401\", ipv4_127_1_1_1),\n+                        \"0177.0201003\", ipv4_127_1_2_3),\n+                \/\/      form:'x.x' method:InetAddress.ofPosixLiteral -\n+                \/\/      with leading 0x treated as hexadecimal prefixes\n+                Arguments.of(InetAddressClass.INET4_ADDRESS_POSIX,\n+                        \"0x7F.0x10203\", ipv4_127_1_2_3),\n+                \/\/      form:'x.x' method:InetAddress.ofPosixLiteral -\n+                \/\/      without prefixes treated as decimal\n+                Arguments.of(InetAddressClass.INET4_ADDRESS_POSIX,\n+                        \"127.66051\", ipv4_127_1_2_3),\n@@ -247,0 +259,4 @@\n+                Arguments.of(InetAddressClass.INET4_ADDRESS_POSIX,\n+                        \"0x1020304\", oneToFourAddressExpBytes),\n+                \/\/      form:'x' method:InetAddress.ofPosixLiteral -\n+                \/\/      with leading 0x treated as hex prefix\n@@ -259,0 +275,8 @@\n+                Arguments.of(InetAddressClass.INET4_ADDRESS_POSIX,\n+                        \"0100401404\", oneToFourAddressExpBytes),\n+                \/\/      form:'x' method:InetAddress.ofPosixLiteral -\n+                \/\/      without prefixes treated as decimal\n+                Arguments.of(InetAddressClass.INET4_ADDRESS_POSIX,\n+                        \"16909060\", oneToFourAddressExpBytes),\n+                \/\/      form:'x' method:InetAddress.ofPosixLiteral -\n+                \/\/      with leading 0 treated as octal segment prefix\n","filename":"test\/jdk\/java\/net\/InetAddress\/OfLiteralTest.java","additions":28,"deletions":4,"binary":false,"changes":32,"status":"modified"}]}