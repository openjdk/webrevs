{"files":[{"patch":"@@ -985,1 +985,6 @@\n-  \/\/ needed in the constructors, and only in three cases:\n+  \/\/ needed in constructors where the object does not have an Initialization\n+  \/\/ node. Macro expansion will emit a trailing barrier for Initialize nodes,\n+  \/\/ so we do not need to emit here.\n+  \/\/\n+  \/\/ Given a constructor without an object Initialize nodes, the trailing\n+  \/\/ barrier is needed in three cases:\n@@ -1012,6 +1017,6 @@\n-  if (method()->is_initializer() &&\n-       (wrote_final() ||\n-         (AlwaysSafeConstructors && wrote_fields()) ||\n-         (support_IRIW_for_not_multiple_copy_atomic_cpu && wrote_volatile()))) {\n-    _exits.insert_mem_bar(UseStoreStoreForCtor ? Op_MemBarStoreStore : Op_MemBarRelease,\n-                          alloc_with_final());\n+  if (method()->is_initializer() && (!alloc_with_final() ||\n+        !AllocateNode::Ideal_allocation(alloc_with_final())->initialization())\n+      && (wrote_final() || (AlwaysSafeConstructors && wrote_fields()) ||\n+        (support_IRIW_for_not_multiple_copy_atomic_cpu && wrote_volatile()))) {\n+    _exits.insert_mem_bar(UseStoreStoreForCtor ? Op_MemBarStoreStore :\n+        Op_MemBarRelease, alloc_with_final());\n","filename":"src\/hotspot\/share\/opto\/parse1.cpp","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -53,0 +53,24 @@\n+    private static class PlainExtendsPlain extends PlainPlain {\n+        long f3;\n+        public PlainExtendsPlain(long i) {\n+            super(i);\n+            f3 = i;\n+        }\n+    }\n+\n+    private static class PlainExtendsFinal extends FinalFinal {\n+        long f3;\n+        public PlainExtendsFinal(long i) {\n+            super(i);\n+            f3 = i;\n+        }\n+    }\n+\n+    private static class PlainExtendsVolatile extends VolatileVolatile {\n+        long f3;\n+        public PlainExtendsVolatile(long i) {\n+            super(i);\n+            f3 = i;\n+        }\n+    }\n+\n@@ -80,0 +104,24 @@\n+    private static class FinalExtendsPlain extends PlainPlain {\n+        final long f3;\n+        public FinalExtendsPlain(long i) {\n+            super(i);\n+            f3 = i;\n+        }\n+    }\n+\n+    private static class FinalExtendsFinal extends FinalFinal {\n+        final long f3;\n+        public FinalExtendsFinal(long i) {\n+            super(i);\n+            f3 = i;\n+        }\n+    }\n+\n+    private static class FinalExtendsVolatile extends VolatileVolatile {\n+        final long f3;\n+        public FinalExtendsVolatile(long i) {\n+            super(i);\n+            f3 = i;\n+        }\n+    }\n+\n@@ -125,0 +173,24 @@\n+    private static class VolatileExtendsPlain extends PlainPlain {\n+        volatile long f3;\n+        public VolatileExtendsPlain(long i) {\n+            super(i);\n+            f3 = i;\n+        }\n+    }\n+\n+    private static class VolatileExtendsFinal extends FinalFinal {\n+        volatile long f3;\n+        public VolatileExtendsFinal(long i) {\n+            super(i);\n+            f3 = i;\n+        }\n+    }\n+\n+    private static class VolatileExtendsVolatile extends VolatileVolatile {\n+        volatile long f3;\n+        public VolatileExtendsVolatile(long i) {\n+            super(i);\n+            f3 = i;\n+        }\n+    }\n+\n@@ -140,0 +212,30 @@\n+    @Test\n+    @IR(counts = {IRNode.MEMBAR_STORESTORE, \"1\"})\n+    @IR(failOn = IRNode.MEMBAR_RELEASE)\n+    @IR(failOn = IRNode.MEMBAR_VOLATILE)\n+    public long escaping_plainExtendsPlain() {\n+        PlainExtendsPlain c = new PlainExtendsPlain(l);\n+        consume(c);\n+        return c.f1 + c.f2 + c.f3;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.MEMBAR_STORESTORE, \"1\"})\n+    @IR(failOn = IRNode.MEMBAR_RELEASE)\n+    @IR(failOn = IRNode.MEMBAR_VOLATILE)\n+    public long escaping_plainExtendsFinal() {\n+        PlainExtendsFinal c = new PlainExtendsFinal(l);\n+        consume(c);\n+        return c.f1 + c.f2 + c.f3;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.MEMBAR_STORESTORE, \"1\"})\n+    @IR(counts = {IRNode.MEMBAR_RELEASE, \"2\"})\n+    @IR(counts = {IRNode.MEMBAR_VOLATILE, \"2\"})\n+    public long escaping_plainExtendsVolatile() {\n+        PlainExtendsVolatile c = new PlainExtendsVolatile(l);\n+        consume(c);\n+        return c.f1 + c.f2 + c.f3;\n+    }\n+\n@@ -170,0 +272,30 @@\n+    @Test\n+    @IR(counts = {IRNode.MEMBAR_STORESTORE, \"1\"})\n+    @IR(failOn = IRNode.MEMBAR_RELEASE)\n+    @IR(failOn = IRNode.MEMBAR_VOLATILE)\n+    public long escaping_finalExtendsPlain() {\n+        FinalExtendsPlain c = new FinalExtendsPlain(l);\n+        consume(c);\n+        return c.f1 + c.f2 + c.f3;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.MEMBAR_STORESTORE, \"1\"})\n+    @IR(failOn = IRNode.MEMBAR_RELEASE)\n+    @IR(failOn = IRNode.MEMBAR_VOLATILE)\n+    public long escaping_finalExtendsFinal() {\n+        FinalExtendsFinal c = new FinalExtendsFinal(l);\n+        consume(c);\n+        return c.f1 + c.f2 + c.f3;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.MEMBAR_STORESTORE, \"1\"})\n+    @IR(counts = {IRNode.MEMBAR_RELEASE, \"2\"})\n+    @IR(counts = {IRNode.MEMBAR_VOLATILE, \"2\"})\n+    public long escaping_finalExtendsVolatile() {\n+        FinalExtendsVolatile c = new FinalExtendsVolatile(l);\n+        consume(c);\n+        return c.f1 + c.f2 + c.f3;\n+    }\n+\n@@ -200,0 +332,30 @@\n+    @Test\n+    @IR(counts = {IRNode.MEMBAR_RELEASE, \"1\"})\n+    @IR(counts = {IRNode.MEMBAR_STORESTORE, \"1\"})\n+    @IR(counts = {IRNode.MEMBAR_VOLATILE, \"1\"})\n+    public long escaping_volatileExtendsPlain() {\n+        VolatileExtendsPlain c = new VolatileExtendsPlain(l);\n+        consume(c);\n+        return c.f1 + c.f2 + c.f3;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.MEMBAR_RELEASE, \"1\"})\n+    @IR(counts = {IRNode.MEMBAR_STORESTORE, \"1\"})\n+    @IR(counts = {IRNode.MEMBAR_VOLATILE, \"1\"})\n+    public long escaping_volatileExtendsFinal() {\n+        VolatileExtendsFinal c = new VolatileExtendsFinal(l);\n+        consume(c);\n+        return c.f1 + c.f2 + c.f3;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.MEMBAR_RELEASE, \"3\"})\n+    @IR(counts = {IRNode.MEMBAR_STORESTORE, \"1\"})\n+    @IR(counts = {IRNode.MEMBAR_VOLATILE, \"3\"})\n+    public long escaping_volatileExtendsVolatile() {\n+        VolatileExtendsVolatile c = new VolatileExtendsVolatile(l);\n+        consume(c);\n+        return c.f1 + c.f2 + c.f3;\n+    }\n+\n@@ -227,0 +389,24 @@\n+    @Test\n+    @IR(failOn = IRNode.MEMBAR)\n+    public long non_escaping_plainExtendsPlain() {\n+        PlainExtendsPlain c = new PlainExtendsPlain(l);\n+        return c.f1 + c.f2 + c.f3;\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.MEMBAR)\n+    public long non_escaping_plainExtendsFinal() {\n+        PlainExtendsFinal c = new PlainExtendsFinal(l);\n+        return c.f1 + c.f2 + c.f3;\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.MEMBAR_RELEASE)\n+    @IR(failOn = IRNode.MEMBAR_STORESTORE)\n+    @IR(failOn = IRNode.MEMBAR_VOLATILE)\n+    @IR(counts = {IRNode.MEMBAR_ACQUIRE, \"2\"})\n+    public long non_escaping_plainExtendsVolatile() {\n+        PlainExtendsVolatile c = new PlainExtendsVolatile(l);\n+        return c.f1 + c.f2 + c.f3;\n+    }\n+\n@@ -248,0 +434,24 @@\n+    @Test\n+    @IR(failOn = IRNode.MEMBAR)\n+    public long non_escaping_finalExtendsPlain() {\n+        FinalExtendsPlain c = new FinalExtendsPlain(l);\n+        return c.f1 + c.f2 + c.f3;\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.MEMBAR)\n+    public long non_escaping_finalExtendsFinal() {\n+        FinalExtendsFinal c = new FinalExtendsFinal(l);\n+        return c.f1 + c.f2 + c.f3;\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.MEMBAR_RELEASE)\n+    @IR(failOn = IRNode.MEMBAR_STORESTORE)\n+    @IR(failOn = IRNode.MEMBAR_VOLATILE)\n+    @IR(counts = {IRNode.MEMBAR_ACQUIRE, \"2\"})\n+    public long non_escaping_finalExtendsVolatile() {\n+        FinalExtendsVolatile c = new FinalExtendsVolatile(l);\n+        return c.f1 + c.f2 + c.f3;\n+    }\n+\n@@ -280,0 +490,30 @@\n+    @IR(failOn = IRNode.MEMBAR_STORESTORE)\n+    @IR(failOn = IRNode.MEMBAR_VOLATILE)\n+    @IR(counts = {IRNode.MEMBAR_ACQUIRE, \"1\"})\n+    public long non_escaping_volatileExtendsPlain() {\n+        VolatileExtendsPlain c = new VolatileExtendsPlain(l);\n+        return c.f1 + c.f2 + c.f3;\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.MEMBAR_RELEASE)\n+    @IR(failOn = IRNode.MEMBAR_STORESTORE)\n+    @IR(failOn = IRNode.MEMBAR_VOLATILE)\n+    @IR(counts = {IRNode.MEMBAR_ACQUIRE, \"1\"})\n+    public long non_escaping_volatileExtendsFinal() {\n+        VolatileExtendsFinal c = new VolatileExtendsFinal(l);\n+        return c.f1 + c.f2 + c.f3;\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.MEMBAR_RELEASE)\n+    @IR(failOn = IRNode.MEMBAR_STORESTORE)\n+    @IR(failOn = IRNode.MEMBAR_VOLATILE)\n+    @IR(counts = {IRNode.MEMBAR_ACQUIRE, \"3\"})\n+    public long non_escaping_volatileExtendsVolatile() {\n+        VolatileExtendsVolatile c = new VolatileExtendsVolatile(l);\n+        return c.f1 + c.f2 + c.f3;\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.MEMBAR_RELEASE)\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/ConstructorBarriers.java","additions":240,"deletions":0,"binary":false,"changes":240,"status":"modified"}]}