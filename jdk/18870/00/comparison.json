{"files":[{"patch":"@@ -1586,1 +1586,0 @@\n-  _is_allocation_MemBar_redundant = false;\n@@ -1602,16 +1601,0 @@\n-void AllocateNode::compute_MemBar_redundancy(ciMethod* initializer)\n-{\n-  assert(initializer != nullptr &&\n-         initializer->is_initializer() &&\n-         !initializer->is_static(),\n-             \"unexpected initializer method\");\n-  BCEscapeAnalyzer* analyzer = initializer->get_bcea();\n-  if (analyzer == nullptr) {\n-    return;\n-  }\n-\n-  \/\/ Allocation node is first parameter in its initializer\n-  if (analyzer->is_arg_stack(0) || analyzer->is_arg_local(0)) {\n-    _is_allocation_MemBar_redundant = true;\n-  }\n-}\n","filename":"src\/hotspot\/share\/opto\/callnode.cpp","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -987,2 +987,0 @@\n-  \/\/ True when MemBar for new is redundant with MemBar at initialzer exit\n-  bool _is_allocation_MemBar_redundant;\n@@ -1050,7 +1048,0 @@\n-  \/\/ If object doesn't escape in <.init> method and there is memory barrier\n-  \/\/ inserted at exit of its <.init>, memory barrier for new is not necessary.\n-  \/\/ Inovke this method when MemBar at exit of initializer and post-dominate\n-  \/\/ allocation node.\n-  void compute_MemBar_redundancy(ciMethod* initializer);\n-  bool is_allocation_MemBar_redundant() { return _is_allocation_MemBar_redundant; }\n-\n","filename":"src\/hotspot\/share\/opto\/callnode.hpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1607,1 +1607,0 @@\n-    !alloc->is_allocation_MemBar_redundant() &&\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -357,2 +357,0 @@\n-  bool          _wrote_final;   \/\/ Did we write a final field?\n-  bool          _wrote_volatile;     \/\/ Did we write a volatile field?\n@@ -360,2 +358,0 @@\n-  bool          _wrote_fields;       \/\/ Did we write any field?\n-  Node*         _alloc_with_final;   \/\/ An allocation node with final field\n@@ -398,4 +394,0 @@\n-  bool          wrote_final() const   { return _wrote_final; }\n-  void      set_wrote_final(bool z)   { _wrote_final = z; }\n-  bool          wrote_volatile() const { return _wrote_volatile; }\n-  void      set_wrote_volatile(bool z) { _wrote_volatile = z; }\n@@ -404,7 +396,0 @@\n-  bool         wrote_fields() const   { return _wrote_fields; }\n-  void     set_wrote_fields(bool z)   { _wrote_fields = z; }\n-  Node*    alloc_with_final() const   { return _alloc_with_final; }\n-  void set_alloc_with_final(Node* n)  {\n-    assert((_alloc_with_final == nullptr) || (_alloc_with_final == n), \"different init objects?\");\n-    _alloc_with_final = n;\n-  }\n","filename":"src\/hotspot\/share\/opto\/parse.hpp","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -411,2 +411,0 @@\n-  _wrote_final = false;\n-  _wrote_volatile = false;\n@@ -414,2 +412,0 @@\n-  _wrote_fields = false;\n-  _alloc_with_final = nullptr;\n@@ -987,48 +983,0 @@\n-  \/\/ Figure out if we need to emit the trailing barrier. The barrier is only\n-  \/\/ needed in the constructors, and only in three cases:\n-  \/\/\n-  \/\/ 1. The constructor wrote a final. The effects of all initializations\n-  \/\/    must be committed to memory before any code after the constructor\n-  \/\/    publishes the reference to the newly constructed object. Rather\n-  \/\/    than wait for the publication, we simply block the writes here.\n-  \/\/    Rather than put a barrier on only those writes which are required\n-  \/\/    to complete, we force all writes to complete.\n-  \/\/\n-  \/\/ 2. Experimental VM option is used to force the barrier if any field\n-  \/\/    was written out in the constructor.\n-  \/\/\n-  \/\/ 3. On processors which are not CPU_MULTI_COPY_ATOMIC (e.g. PPC64),\n-  \/\/    support_IRIW_for_not_multiple_copy_atomic_cpu selects that\n-  \/\/    MemBarVolatile is used before volatile load instead of after volatile\n-  \/\/    store, so there's no barrier after the store.\n-  \/\/    We want to guarantee the same behavior as on platforms with total store\n-  \/\/    order, although this is not required by the Java memory model.\n-  \/\/    In this case, we want to enforce visibility of volatile field\n-  \/\/    initializations which are performed in constructors.\n-  \/\/    So as with finals, we add a barrier here.\n-  \/\/\n-  \/\/ \"All bets are off\" unless the first publication occurs after a\n-  \/\/ normal return from the constructor.  We do not attempt to detect\n-  \/\/ such unusual early publications.  But no barrier is needed on\n-  \/\/ exceptional returns, since they cannot publish normally.\n-  \/\/\n-  if (method()->is_initializer() &&\n-       (wrote_final() ||\n-         (AlwaysSafeConstructors && wrote_fields()) ||\n-         (support_IRIW_for_not_multiple_copy_atomic_cpu && wrote_volatile()))) {\n-    _exits.insert_mem_bar(UseStoreStoreForCtor ? Op_MemBarStoreStore : Op_MemBarRelease,\n-                          alloc_with_final());\n-\n-    \/\/ If Memory barrier is created for final fields write\n-    \/\/ and allocation node does not escape the initialize method,\n-    \/\/ then barrier introduced by allocation node can be removed.\n-    if (DoEscapeAnalysis && alloc_with_final()) {\n-      AllocateNode* alloc = AllocateNode::Ideal_allocation(alloc_with_final());\n-      alloc->compute_MemBar_redundancy(method());\n-    }\n-    if (PrintOpto && (Verbose || WizardMode)) {\n-      method()->print_name();\n-      tty->print_cr(\" writes finals and needs a memory barrier\");\n-    }\n-  }\n-\n","filename":"src\/hotspot\/share\/opto\/parse1.cpp","additions":0,"deletions":52,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -229,26 +229,3 @@\n-  if (is_field) {\n-    \/\/ Remember we wrote a volatile field.\n-    \/\/ For not multiple copy atomic cpu (ppc64) a barrier should be issued\n-    \/\/ in constructors which have such stores. See do_exits() in parse1.cpp.\n-    if (is_vol) {\n-      set_wrote_volatile(true);\n-    }\n-    set_wrote_fields(true);\n-\n-    \/\/ If the field is final, the rules of Java say we are in <init> or <clinit>.\n-    \/\/ Note the presence of writes to final non-static fields, so that we\n-    \/\/ can insert a memory barrier later on to keep the writes from floating\n-    \/\/ out of the constructor.\n-    \/\/ Any method can write a @Stable field; insert memory barriers after those also.\n-    if (field->is_final()) {\n-      set_wrote_final(true);\n-      if (AllocateNode::Ideal_allocation(obj) != nullptr) {\n-        \/\/ Preserve allocation ptr to create precedent edge to it in membar\n-        \/\/ generated on exit from constructor.\n-        \/\/ Can't bind stable with its allocation, only record allocation for final field.\n-        set_alloc_with_final(obj);\n-      }\n-    }\n-    if (field->is_stable()) {\n-      set_wrote_stable(true);\n-    }\n+  if (is_field && field->is_stable()) {\n+    \/\/ Insert a release barrier after methods that can write a @Stable field.\n+    set_wrote_stable(true);\n","filename":"src\/hotspot\/share\/opto\/parse3.cpp","additions":3,"deletions":26,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -53,0 +53,24 @@\n+    private static class PlainExtendsPlain extends PlainPlain {\n+        long f3;\n+        public PlainExtendsPlain(long i) {\n+            super(i);\n+            f3 = i;\n+        }\n+    }\n+\n+    private static class PlainExtendsFinal extends FinalFinal {\n+        long f3;\n+        public PlainExtendsFinal(long i) {\n+            super(i);\n+            f3 = i;\n+        }\n+    }\n+\n+    private static class PlainExtendsVolatile extends VolatileVolatile {\n+        long f3;\n+        public PlainExtendsVolatile(long i) {\n+            super(i);\n+            f3 = i;\n+        }\n+    }\n+\n@@ -80,0 +104,24 @@\n+    private static class FinalExtendsPlain extends PlainPlain {\n+        final long f3;\n+        public FinalExtendsPlain(long i) {\n+            super(i);\n+            f3 = i;\n+        }\n+    }\n+\n+    private static class FinalExtendsFinal extends FinalFinal {\n+        final long f3;\n+        public FinalExtendsFinal(long i) {\n+            super(i);\n+            f3 = i;\n+        }\n+    }\n+\n+    private static class FinalExtendsVolatile extends VolatileVolatile {\n+        final long f3;\n+        public FinalExtendsVolatile(long i) {\n+            super(i);\n+            f3 = i;\n+        }\n+    }\n+\n@@ -125,0 +173,24 @@\n+    private static class VolatileExtendsPlain extends PlainPlain {\n+        volatile long f3;\n+        public VolatileExtendsPlain(long i) {\n+            super(i);\n+            f3 = i;\n+        }\n+    }\n+\n+    private static class VolatileExtendsFinal extends FinalFinal {\n+        volatile long f3;\n+        public VolatileExtendsFinal(long i) {\n+            super(i);\n+            f3 = i;\n+        }\n+    }\n+\n+    private static class VolatileExtendsVolatile extends VolatileVolatile {\n+        volatile long f3;\n+        public VolatileExtendsVolatile(long i) {\n+            super(i);\n+            f3 = i;\n+        }\n+    }\n+\n@@ -140,0 +212,30 @@\n+    @Test\n+    @IR(counts = {IRNode.MEMBAR_STORESTORE, \"1\"})\n+    @IR(failOn = IRNode.MEMBAR_RELEASE)\n+    @IR(failOn = IRNode.MEMBAR_VOLATILE)\n+    public long escaping_plainExtendsPlain() {\n+        PlainExtendsPlain c = new PlainExtendsPlain(l);\n+        consume(c);\n+        return c.f1 + c.f2 + c.f3;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.MEMBAR_STORESTORE, \"1\"})\n+    @IR(failOn = IRNode.MEMBAR_RELEASE)\n+    @IR(failOn = IRNode.MEMBAR_VOLATILE)\n+    public long escaping_plainExtendsFinal() {\n+        PlainExtendsFinal c = new PlainExtendsFinal(l);\n+        consume(c);\n+        return c.f1 + c.f2 + c.f3;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.MEMBAR_STORESTORE, \"1\"})\n+    @IR(counts = {IRNode.MEMBAR_RELEASE, \"2\"})\n+    @IR(counts = {IRNode.MEMBAR_VOLATILE, \"2\"})\n+    public long escaping_plainExtendsVolatile() {\n+        PlainExtendsVolatile c = new PlainExtendsVolatile(l);\n+        consume(c);\n+        return c.f1 + c.f2 + c.f3;\n+    }\n+\n@@ -170,0 +272,30 @@\n+    @Test\n+    @IR(counts = {IRNode.MEMBAR_STORESTORE, \"1\"})\n+    @IR(failOn = IRNode.MEMBAR_RELEASE)\n+    @IR(failOn = IRNode.MEMBAR_VOLATILE)\n+    public long escaping_finalExtendsPlain() {\n+        FinalExtendsPlain c = new FinalExtendsPlain(l);\n+        consume(c);\n+        return c.f1 + c.f2 + c.f3;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.MEMBAR_STORESTORE, \"1\"})\n+    @IR(failOn = IRNode.MEMBAR_RELEASE)\n+    @IR(failOn = IRNode.MEMBAR_VOLATILE)\n+    public long escaping_finalExtendsFinal() {\n+        FinalExtendsFinal c = new FinalExtendsFinal(l);\n+        consume(c);\n+        return c.f1 + c.f2 + c.f3;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.MEMBAR_STORESTORE, \"1\"})\n+    @IR(counts = {IRNode.MEMBAR_RELEASE, \"2\"})\n+    @IR(counts = {IRNode.MEMBAR_VOLATILE, \"2\"})\n+    public long escaping_finalExtendsVolatile() {\n+        FinalExtendsVolatile c = new FinalExtendsVolatile(l);\n+        consume(c);\n+        return c.f1 + c.f2 + c.f3;\n+    }\n+\n@@ -200,0 +332,30 @@\n+    @Test\n+    @IR(counts = {IRNode.MEMBAR_RELEASE, \"1\"})\n+    @IR(counts = {IRNode.MEMBAR_STORESTORE, \"1\"})\n+    @IR(counts = {IRNode.MEMBAR_VOLATILE, \"1\"})\n+    public long escaping_volatileExtendsPlain() {\n+        VolatileExtendsPlain c = new VolatileExtendsPlain(l);\n+        consume(c);\n+        return c.f1 + c.f2 + c.f3;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.MEMBAR_RELEASE, \"1\"})\n+    @IR(counts = {IRNode.MEMBAR_STORESTORE, \"1\"})\n+    @IR(counts = {IRNode.MEMBAR_VOLATILE, \"1\"})\n+    public long escaping_volatileExtendsFinal() {\n+        VolatileExtendsFinal c = new VolatileExtendsFinal(l);\n+        consume(c);\n+        return c.f1 + c.f2 + c.f3;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.MEMBAR_RELEASE, \"3\"})\n+    @IR(counts = {IRNode.MEMBAR_STORESTORE, \"1\"})\n+    @IR(counts = {IRNode.MEMBAR_VOLATILE, \"3\"})\n+    public long escaping_volatileExtendsVolatile() {\n+        VolatileExtendsVolatile c = new VolatileExtendsVolatile(l);\n+        consume(c);\n+        return c.f1 + c.f2 + c.f3;\n+    }\n+\n@@ -227,0 +389,24 @@\n+    @Test\n+    @IR(failOn = IRNode.MEMBAR)\n+    public long non_escaping_plainExtendsPlain() {\n+        PlainExtendsPlain c = new PlainExtendsPlain(l);\n+        return c.f1 + c.f2 + c.f3;\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.MEMBAR)\n+    public long non_escaping_plainExtendsFinal() {\n+        PlainExtendsFinal c = new PlainExtendsFinal(l);\n+        return c.f1 + c.f2 + c.f3;\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.MEMBAR_RELEASE)\n+    @IR(failOn = IRNode.MEMBAR_STORESTORE)\n+    @IR(failOn = IRNode.MEMBAR_VOLATILE)\n+    @IR(counts = {IRNode.MEMBAR_ACQUIRE, \"2\"})\n+    public long non_escaping_plainExtendsVolatile() {\n+        PlainExtendsVolatile c = new PlainExtendsVolatile(l);\n+        return c.f1 + c.f2 + c.f3;\n+    }\n+\n@@ -248,0 +434,24 @@\n+    @Test\n+    @IR(failOn = IRNode.MEMBAR)\n+    public long non_escaping_finalExtendsPlain() {\n+        FinalExtendsPlain c = new FinalExtendsPlain(l);\n+        return c.f1 + c.f2 + c.f3;\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.MEMBAR)\n+    public long non_escaping_finalExtendsFinal() {\n+        FinalExtendsFinal c = new FinalExtendsFinal(l);\n+        return c.f1 + c.f2 + c.f3;\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.MEMBAR_RELEASE)\n+    @IR(failOn = IRNode.MEMBAR_STORESTORE)\n+    @IR(failOn = IRNode.MEMBAR_VOLATILE)\n+    @IR(counts = {IRNode.MEMBAR_ACQUIRE, \"2\"})\n+    public long non_escaping_finalExtendsVolatile() {\n+        FinalExtendsVolatile c = new FinalExtendsVolatile(l);\n+        return c.f1 + c.f2 + c.f3;\n+    }\n+\n@@ -280,0 +490,30 @@\n+    @IR(failOn = IRNode.MEMBAR_STORESTORE)\n+    @IR(failOn = IRNode.MEMBAR_VOLATILE)\n+    @IR(counts = {IRNode.MEMBAR_ACQUIRE, \"1\"})\n+    public long non_escaping_volatileExtendsPlain() {\n+        VolatileExtendsPlain c = new VolatileExtendsPlain(l);\n+        return c.f1 + c.f2 + c.f3;\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.MEMBAR_RELEASE)\n+    @IR(failOn = IRNode.MEMBAR_STORESTORE)\n+    @IR(failOn = IRNode.MEMBAR_VOLATILE)\n+    @IR(counts = {IRNode.MEMBAR_ACQUIRE, \"1\"})\n+    public long non_escaping_volatileExtendsFinal() {\n+        VolatileExtendsFinal c = new VolatileExtendsFinal(l);\n+        return c.f1 + c.f2 + c.f3;\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.MEMBAR_RELEASE)\n+    @IR(failOn = IRNode.MEMBAR_STORESTORE)\n+    @IR(failOn = IRNode.MEMBAR_VOLATILE)\n+    @IR(counts = {IRNode.MEMBAR_ACQUIRE, \"3\"})\n+    public long non_escaping_volatileExtendsVolatile() {\n+        VolatileExtendsVolatile c = new VolatileExtendsVolatile(l);\n+        return c.f1 + c.f2 + c.f3;\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.MEMBAR_RELEASE)\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/ConstructorBarriers.java","additions":240,"deletions":0,"binary":false,"changes":240,"status":"modified"}]}