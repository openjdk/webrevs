{"files":[{"patch":"@@ -429,0 +429,6 @@\n+        \/**\n+         * Note: this visitor only needs to handle cases where 'contained'\n+         * types can be annotated. These cases are described ing JVMS\n+         * 4.7.20.2 and are : classes (for type parameters and enclosing\n+         * types), wildcards, and arrays.\n+         *\/\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Type.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-                checkEmptyAnnotations(typeUtils.stripAnnotations(returnType));\n+                checkDeepEmptyAnnotations(typeUtils.stripAnnotations(returnType));\n@@ -74,2 +74,4 @@\n-                System.err.print(\"\\tasElement()\");\n-                checkEmptyAnnotations(typeUtils.asElement(returnType));\n+                \/\/ System.err.print(\"\\tasElement()\");\n+                \/\/ When mapping from a type to its element, the\n+                \/\/ element may have declaration annotations on it.\n+                \/\/ checkEmptyAnnotations(typeUtils.asElement(returnType));\n@@ -78,1 +80,1 @@\n-                checkEmptyAnnotations(typeUtils.capture(returnType));\n+                checkDeepEmptyAnnotations(typeUtils.capture(returnType));\n@@ -81,1 +83,1 @@\n-                checkEmptyAnnotations(typeUtils.erasure(returnType));\n+                checkDeepEmptyAnnotations(typeUtils.erasure(returnType));\n@@ -145,0 +147,3 @@\n+            \/\/ Previously, was likely getting by-catch of annotations\n+            \/\/ on element declartions, can likely just print the size\n+            \/\/ of the list.\n@@ -148,3 +153,3 @@\n-              if (((TypeElement) annotation.getAnnotationType().asElement()).getQualifiedName().contentEquals(\"jdk.internal.ValueBased\")) {\n-                continue;\n-              }\n+\/\/               if (((TypeElement) annotation.getAnnotationType().asElement()).getQualifiedName().contentEquals(\"jdk.internal.ValueBased\")) {\n+\/\/                 continue;\n+\/\/               }\n@@ -161,0 +166,49 @@\n+\n+    void checkDeepEmptyAnnotations(TypeMirror ac) {\n+        System.err.println(\"\\t\" + ac);\n+        if (ac == null) {\n+            return;\n+        }\n+        new SimpleTypeVisitor14<Void, Void>() {\n+            @Override\n+            protected Void defaultAction(TypeMirror t, Void o) {\n+                checkEmptyAnnotations(t);\n+                return null;\n+            }\n+\n+            @Override\n+            public Void visitArray(ArrayType t, Void o) {\n+                scan(t.getComponentType());\n+                return super.visitArray(t, o);\n+            }\n+\n+            @Override\n+            public Void visitDeclared(DeclaredType t, Void o) {\n+                scan(t.getEnclosingType());\n+                t.getTypeArguments().stream().forEach(this::scan);\n+                return super.visitDeclared(t, o);\n+            }\n+\n+            @Override\n+            public Void visitTypeVariable(TypeVariable t, Void o) {\n+                \/\/ the bounds correspond to the type variable declaration, not its use\n+                \/\/ scan(t.getUpperBound());\n+                \/\/ scan(t.getLowerBound());\n+                return super.visitTypeVariable(t, o);\n+            }\n+\n+            @Override\n+            public Void visitWildcard(WildcardType t, Void o) {\n+                scan(t.getExtendsBound());\n+                scan(t.getSuperBound());\n+                return super.visitWildcard(t, o);\n+            }\n+\n+            private void scan(TypeMirror t) {\n+                if (t != null) {\n+                    visit(t);\n+                }\n+            }\n+        }.visit(ac);\n+    }\n+\n@@ -190,0 +244,2 @@\n+\n+    public static <@TestTypeAnnotation(\"foo8\") T extends @TestTypeAnnotation(\"foo9\") String> @TestTypeAnnotation(\"foo10\") T foo8() {return null;}\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/util\/types\/TestAnnotationStripping.java","additions":64,"deletions":8,"binary":false,"changes":72,"status":"modified"}]}