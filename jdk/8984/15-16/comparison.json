{"files":[{"patch":"@@ -61,1 +61,4 @@\n-            TypeElement hostClassElt = eltUtils.getTypeElement(\"HostClass\");\n+            TypeElement juSetElt = eltUtils.getTypeElement(\"java.util.Set\");\n+            TypeElement testElt  = elements.getTypeElement(\"TestAnnotationStripping\");\n+            TypeElement boxElt   = elements.getTypeElement(\"TestAnnotationStripping.Box\");\n+\n@@ -64,1 +67,2 @@\n-            for (ExecutableElement m : methodsIn(hostClassElt.getEnclosedElements())) {\n+            for (ExecutableElement m :\n+                     methodsIn(eltUtils.getTypeElement(\"HostClass\").getEnclosedElements())) {\n@@ -131,3 +135,7 @@\n-                    DeclaredType declaredType =\n-                        typeUtils.getDeclaredType(elements.getTypeElement(\"java.util.Set\"),\n-                                                  returnType);\n+                    DeclaredType declaredType = typeUtils.getDeclaredType(juSetElt, returnType);\n+                    checkEqualTypeAndAnnotations(returnType, declaredType.getTypeArguments().get(0));\n+\n+                    \/\/ Check both overloads\n+                    declaredType = typeUtils.getDeclaredType(typeUtils.getDeclaredType(testElt), \/\/ outer type\n+                                                             boxElt,\n+                                                             returnType);\n@@ -248,0 +256,11 @@\n+\n+    \/\/ Nested class to test getDeclaredType overload.\n+    class Box<T> {\n+        private T contents;\n+\n+        public Box(T t){\n+            contents = t;\n+        }\n+\n+        T value() { return contents;};\n+    }\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/util\/types\/TestAnnotationStripping.java","additions":24,"deletions":5,"binary":false,"changes":29,"status":"modified"}]}