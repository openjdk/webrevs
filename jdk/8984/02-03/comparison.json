{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -344,1 +344,1 @@\n-     * @since 20\n+     * @since 23\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/Types.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -343,1 +343,1 @@\n-        return metadata.isEmpty() ? this : baseType();\n+        return metadata.isEmpty() ? this : stripMetadata();\n@@ -432,1 +432,1 @@\n-                return super.visitClassType((ClassType)t.typeNoMetadata(), aVoid);\n+                return super.visitClassType((ClassType) dropMetadata(t), aVoid);\n@@ -437,6 +437,1 @@\n-                return super.visitArrayType((ArrayType)t.typeNoMetadata(), aVoid);\n-            }\n-\n-            @Override\n-            public Type visitTypeVar(TypeVar t, Void aVoid) {\n-                return super.visitTypeVar((TypeVar)t.typeNoMetadata(), aVoid);\n+                return super.visitArrayType((ArrayType) dropMetadata(t), aVoid);\n@@ -447,21 +442,1 @@\n-                return super.visitWildcardType((WildcardType)wt.typeNoMetadata(), aVoid);\n-            }\n-\n-            @Override\n-            public Type visitMethodType(MethodType t, Void aVoid) {\n-                return super.visitMethodType((MethodType)t.typeNoMetadata(), aVoid);\n-            }\n-\n-            @Override\n-            public Type visitPackageType(PackageType t, Void aVoid) {\n-                return super.visitPackageType((PackageType)t.typeNoMetadata(), aVoid);\n-            }\n-\n-            @Override\n-            public Type visitModuleType(ModuleType t, Void aVoid) {\n-                return super.visitModuleType((ModuleType)t.typeNoMetadata(), aVoid);\n-            }\n-\n-            @Override\n-            public Type visitCapturedType(CapturedType t, Void aVoid) {\n-                return super.visitCapturedType((CapturedType)t.typeNoMetadata(), aVoid);\n+                return super.visitWildcardType((WildcardType) dropMetadata(wt), aVoid);\n@@ -471,12 +446,2 @@\n-            public Type visitForAll(ForAll t, Void aVoid) {\n-                return super.visitForAll((ForAll)t.typeNoMetadata(), aVoid);\n-            }\n-\n-            @Override\n-            public Type visitUndetVar(UndetVar t, Void aVoid) {\n-                return super.visitUndetVar((UndetVar)t.typeNoMetadata(), aVoid);\n-            }\n-\n-            @Override\n-            public Type visitErrorType(ErrorType t, Void aVoid) {\n-                return super.visitErrorType((ErrorType)t.typeNoMetadata(), aVoid);\n+            public Type visitType(Type t, Void aVoid) {\n+                return dropMetadata(t);\n@@ -485,3 +450,9 @@\n-            @Override\n-            public Type visitType(Type t, Void aVoid) {\n-                return super.visitType(t.typeNoMetadata(), aVoid);\n+            private static Type dropMetadata(Type t) {\n+                if (t.getMetadata().isEmpty()) {\n+                    return t;\n+                }\n+                Type baseType = t.baseType();\n+                if (baseType.getMetadata().isEmpty()) {\n+                    return baseType;\n+                }\n+                return baseType.cloneWithMetadata(List.nil());\n@@ -2489,1 +2460,1 @@\n-    public interface Visitor<R,S> {  \/\/ Primitive types omitted?\n+    public interface Visitor<R,S> {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Type.java","additions":16,"deletions":45,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -128,2 +128,2 @@\n-            .map(Type::stripMetadataIfNeeded)\n-            .toList();\n+                .map(Type::stripMetadataIfNeeded)\n+                .toList();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/model\/JavacTypes.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -70,2 +70,2 @@\n-\/\/                 System.err.print(\"\\tasElement()\");\n-\/\/                 checkEmptyAnnotations(typeUtils.asElement(returnType));\n+                System.err.print(\"\\tasElement()\");\n+                checkEmptyAnnotations(typeUtils.asElement(returnType));\n@@ -79,2 +79,2 @@\n-\/\/                 System.err.print(\"\\tgetArrayType()\");\n-\/\/                 checkEmptyAnnotations(typeUtils.getArrayType(returnType));\n+                System.err.print(\"\\tgetArrayType()\");\n+                checkEmptyAnnotations(typeUtils.getArrayType(returnType));\n@@ -102,3 +102,2 @@\n-            System.err.println(\"\\t\\t\\tUnexpected annotations size: \" + annotations);\n-        }\n-        if (!typeUtils.isSameType(annotations.get(0).getAnnotationType(), expectedAnnotation)) {\n+            System.err.println(\"\\t\\t\\tUnexpected annotations size: \" + annotations.size());\n+        } else if (!typeUtils.isSameType(annotations.get(0).getAnnotationType(), expectedAnnotation)) {\n@@ -116,1 +115,8 @@\n-            if (annotations.size() != 0) {\n+            int count = 0;\n+            for (AnnotationMirror annotation : annotations) {\n+              if (((TypeElement) annotation.getAnnotationType().asElement()).getQualifiedName().contentEquals(\"jdk.internal.ValueBased\")) {\n+                continue;\n+              }\n+              count++;\n+            }\n+            if (count != 0) {\n@@ -137,2 +143,1 @@\n-    \/\/ Erasure on an annotated array not acting properly\n-    \/\/    public static  String@TypeAnnotation(\"foo5\")[] foo5() {return null;}\n+    public static  String @TypeAnnotation(\"foo5\")[]  foo5() {return null;}\n@@ -140,1 +145,1 @@\n-    \/\/ public static java.util.Set < @TypeAnnotation(\"foo5\") String> foo6() {return null;}\n+    public static  java.util. @TypeAnnotation(\"foo6\") Set < @TypeAnnotation(\"foo7\") String> foo6() {return null;}\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/util\/types\/TestAnnotationStripping.java","additions":16,"deletions":11,"binary":false,"changes":27,"status":"modified"}]}