{"files":[{"patch":"@@ -763,12 +763,1 @@\n-        Accessible a = null;\n-\n-        try {\n-            Class<?> accessibleJTreeNodeClass = Class.forName(\"javax.swing.JTree$AccessibleJTree$AccessibleJTreeNode\");\n-            Constructor<?> constructor = accessibleJTreeNodeClass.getConstructor(t.getAccessibleContext().getClass(), JTree.class, TreePath.class, Accessible.class);\n-            constructor.setAccessible(true);\n-            a = ((Accessible) constructor.newInstance(t.getAccessibleContext(), t, p, null));\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-\n-        return a;\n+        return SwingAccessor.getAccessibleJTreeNodeCreateAccessor().createAccessibleJTreeNode(t, p, null);\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/CAccessibility.java","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -4275,0 +4275,4 @@\n+        static {\n+            SwingAccessor.setAccessibleJTreeNodeCreateAccessor(new AccessibleTreNodeACreateccessor());\n+        }\n+\n@@ -4735,0 +4739,25 @@\n+        \/**\n+         * This method creates an accessible tree node\n+         *\n+         * @param tree Tree? for whose nodes an accessible\n+         * @param path path to node\n+         * @param ap accessible parent\n+         * @return AccessibleJTreeNode\n+         *\/\n+        protected Accessible createAccessibleTreeNode(JTree tree, TreePath path, Accessible ap) {\n+            return new AccessibleJTreeNode(tree, path, ap);\n+        }\n+\n+        private static class AccessibleTreNodeACreateccessor implements SwingAccessor.AccessibleJTreeNodeCreateAccessor {\n+            private AccessibleTreNodeACreateccessor() {}\n+\n+            @Override\n+            public Accessible createAccessibleJTreeNode(JTree tree, TreePath path, Accessible ap) {\n+                AccessibleContext ac = tree.getAccessibleContext();\n+                if (ac instanceof AccessibleJTree) {\n+                    return ((AccessibleJTree) ac).createAccessibleTreeNode(tree, path, ap);\n+                }\n+                return null;\n+            }\n+        }\n+\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JTree.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import javax.swing.tree.TreePath;\n@@ -61,0 +62,7 @@\n+    \/**\n+     * This interface allows to create an accessible tree node\n+     *\/\n+    public interface AccessibleJTreeNodeCreateAccessor {\n+        Accessible createAccessibleJTreeNode(JTree tree, TreePath path, Accessible ap);\n+    }\n+\n@@ -305,0 +313,1 @@\n+    private static AccessibleJTreeNodeCreateAccessor accessibleJTreeNodeCreateAccessor = null;\n@@ -319,0 +328,13 @@\n+    public static AccessibleJTreeNodeCreateAccessor getAccessibleJTreeNodeCreateAccessor() {\n+        var access = accessibleJTreeNodeCreateAccessor;\n+        if (access == null) {\n+            ensureClassInitialized(JTree.class);\n+            access = accessibleJTreeNodeCreateAccessor;\n+        }\n+        return access;\n+    }\n+\n+    public static void setAccessibleJTreeNodeCreateAccessor(final AccessibleJTreeNodeCreateAccessor accessibleAccessor) {\n+        accessibleJTreeNodeCreateAccessor = accessibleAccessor;\n+    }\n+\n","filename":"src\/java.desktop\/share\/classes\/sun\/swing\/SwingAccessor.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"}]}