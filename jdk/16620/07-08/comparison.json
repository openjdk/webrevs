{"files":[{"patch":"@@ -4673,1 +4673,1 @@\n-        if (!vloop_analyzer.analyze(lpt, false) ||\n+        if (!vloop_analyzer.analyze(lpt) ||\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -367,1 +367,1 @@\n-    VPointer align_to_ref_p(mem_ref, vla());\n+    VPointer align_to_ref_p(mem_ref, vloop());\n@@ -373,1 +373,1 @@\n-        VPointer p2(s, vla());\n+        VPointer p2(s, vloop());\n@@ -438,1 +438,1 @@\n-    VPointer p1(s1, vla());\n+    VPointer p1(s1, vloop());\n@@ -442,1 +442,1 @@\n-        VPointer p2(s2, vla());\n+        VPointer p2(s2, vloop());\n@@ -463,1 +463,1 @@\n-      VPointer p(s, vla());\n+      VPointer p(s, vloop());\n@@ -486,1 +486,1 @@\n-        VPointer p(s, vla());\n+        VPointer p(s, vloop());\n@@ -559,1 +559,1 @@\n-  VPointer align_to_ref_p(mem_ref, vla());\n+  VPointer align_to_ref_p(mem_ref, vloop());\n@@ -657,2 +657,2 @@\n-  VPointer p1(s1->as_Mem(), vla());\n-  VPointer p2(s2->as_Mem(), vla());\n+  VPointer p1(s1->as_Mem(), vloop());\n+  VPointer p2(s2->as_Mem(), vloop());\n@@ -1160,2 +1160,2 @@\n-  VPointer mem_ref_p(mem_ref, vla());\n-  const CountedLoopEndNode* pre_end = vla().pre_loop_end();\n+  VPointer mem_ref_p(mem_ref, vloop());\n+  const CountedLoopEndNode* pre_end = vloop().pre_loop_end();\n@@ -1997,1 +1997,1 @@\n-          VPointer p_store(mem->as_Mem(), vla());\n+          VPointer p_store(mem->as_Mem(), vloop());\n@@ -2607,1 +2607,1 @@\n-  VPointer p(s, vla());\n+  VPointer p(s, vloop());\n@@ -2711,1 +2711,1 @@\n-  Opaque1Node* pre_opaq = vla().pre_loop_end()->limit()->as_Opaque1();\n+  Opaque1Node* pre_opaq = vloop().pre_loop_end()->limit()->as_Opaque1();\n@@ -2717,1 +2717,1 @@\n-  Node* pre_ctrl = vla().pre_loop_head()->in(LoopNode::EntryControl);\n+  Node* pre_ctrl = vloop().pre_loop_head()->in(LoopNode::EntryControl);\n@@ -2723,1 +2723,1 @@\n-  VPointer align_to_ref_p(align_to_ref, vla());\n+  VPointer align_to_ref_p(align_to_ref, vloop());\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -225,7 +225,8 @@\n-  IdealLoopTree* lpt()        const { return vla().lpt(); }\n-  PhaseIdealLoop* phase()     const { return vla().phase(); }\n-  PhaseIterGVN& igvn()        const { return vla().phase()->igvn(); }\n-  CountedLoopNode* cl()       const { return vla().cl(); }\n-  PhiNode* iv()               const { return vla().iv(); }\n-  int iv_stride()             const { return vla().iv_stride(); }\n-  bool in_body(const Node* n) const { return vla().in_body(n); }\n+  const VLoop& vloop()        const { return vla().vloop(); }\n+  IdealLoopTree* lpt()        const { return vloop().lpt(); }\n+  PhaseIdealLoop* phase()     const { return vloop().phase(); }\n+  PhaseIterGVN& igvn()        const { return vloop().phase()->igvn(); }\n+  CountedLoopNode* cl()       const { return vloop().cl(); }\n+  PhiNode* iv()               const { return vloop().iv(); }\n+  int iv_stride()             const { return vloop().iv_stride(); }\n+  bool in_body(const Node* n) const { return vloop().in_body(n); }\n@@ -283,1 +284,1 @@\n-           vla().is_trace(TraceAutovectorizationTag::SW_ADJACENT_MEMOPS);\n+           vloop().is_trace(TraceAutovectorizationTag::SW_ADJACENT_MEMOPS);\n@@ -287,1 +288,1 @@\n-    return vla().is_trace(TraceAutovectorizationTag::SW_ALIGNMENT);\n+    return vloop().is_trace(TraceAutovectorizationTag::SW_ALIGNMENT);\n@@ -291,1 +292,1 @@\n-           vla().is_trace(TraceAutovectorizationTag::SW_REJECTIONS);\n+           vloop().is_trace(TraceAutovectorizationTag::SW_REJECTIONS);\n@@ -295,1 +296,1 @@\n-           vla().is_trace(TraceAutovectorizationTag::SW_PACKSET);\n+           vloop().is_trace(TraceAutovectorizationTag::SW_PACKSET);\n@@ -299,1 +300,1 @@\n-    return vla().is_trace(TraceAutovectorizationTag::SW_VERBOSE);\n+    return vloop().is_trace(TraceAutovectorizationTag::SW_VERBOSE);\n@@ -303,1 +304,1 @@\n-           vla().is_trace(TraceAutovectorizationTag::SW_INFO);\n+           vloop().is_trace(TraceAutovectorizationTag::SW_INFO);\n@@ -308,6 +309,6 @@\n-           vla().is_trace(TraceAutovectorizationTag::SW_ADJACENT_MEMOPS) ||\n-           vla().is_trace(TraceAutovectorizationTag::SW_ALIGNMENT) ||\n-           vla().is_trace(TraceAutovectorizationTag::SW_REJECTIONS) ||\n-           vla().is_trace(TraceAutovectorizationTag::SW_PACKSET) ||\n-           vla().is_trace(TraceAutovectorizationTag::SW_INFO) ||\n-           vla().is_trace(TraceAutovectorizationTag::SW_VERBOSE);\n+           vloop().is_trace(TraceAutovectorizationTag::SW_ADJACENT_MEMOPS) ||\n+           vloop().is_trace(TraceAutovectorizationTag::SW_ALIGNMENT) ||\n+           vloop().is_trace(TraceAutovectorizationTag::SW_REJECTIONS) ||\n+           vloop().is_trace(TraceAutovectorizationTag::SW_PACKSET) ||\n+           vloop().is_trace(TraceAutovectorizationTag::SW_INFO) ||\n+           vloop().is_trace(TraceAutovectorizationTag::SW_VERBOSE);\n@@ -316,1 +317,1 @@\n-    return vla().is_trace_align_vector() ||\n+    return vloop().is_trace_align_vector() ||\n@@ -347,1 +348,1 @@\n-    return !vla().in_body(n) ? nullptr : _node_info.adr_at(body_idx(n))->_my_pack;\n+    return !in_body(n) ? nullptr : _node_info.adr_at(body_idx(n))->_my_pack;\n","filename":"src\/hotspot\/share\/opto\/superword.hpp","additions":22,"deletions":21,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -1439,2 +1439,3 @@\n-bool VLoopAnalyzer::analyze(IdealLoopTree* lpt, bool allow_cfg) {\n-  bool success = check_preconditions(lpt, allow_cfg);\n+bool VLoopAnalyzer::analyze(IdealLoopTree* lpt) {\n+  reset(lpt);\n+  bool success = _vloop.check_preconditions(lpt, false);\n@@ -1444,1 +1445,1 @@\n-  if (is_trace_loop_analyzer()) {\n+  if (vloop().is_trace_loop_analyzer()) {\n@@ -1447,1 +1448,1 @@\n-    cl()->dump();\n+    vloop().cl()->dump();\n@@ -1458,1 +1459,1 @@\n-  if (is_trace_loop_analyzer()) {\n+  if (vloop().is_trace_loop_analyzer()) {\n@@ -1467,1 +1468,1 @@\n-  if (SuperWordLoopUnrollAnalysis && _cl->slp_max_unroll() == 0) {\n+  if (SuperWordLoopUnrollAnalysis && vloop().cl()->slp_max_unroll() == 0) {\n","filename":"src\/hotspot\/share\/opto\/vectorization.cpp","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -36,3 +36,2 @@\n-\/\/ Base class, used to check basic structure in preparation for auto-vectorization.\n-\/\/ The subclass VLoopAnalyzer is used to analyze the loop and feed that information\n-\/\/ to the auto-vectorization.\n+\/\/ VLoop: check preconditions for auto-vectorination, and provide basic\n+\/\/        loop structure accessors.\n@@ -40,1 +39,1 @@\n-protected:\n+private:\n@@ -68,2 +67,1 @@\n-protected:\n-  virtual void reset(IdealLoopTree* lpt, bool allow_cfg) {\n+  void reset(IdealLoopTree* lpt, bool allow_cfg) {\n@@ -143,1 +141,1 @@\n-protected:\n+private:\n@@ -575,2 +573,3 @@\n-class VLoopAnalyzer : public VLoop {\n-protected:\n+class VLoopAnalyzer : public StackObj {\n+private:\n+  static constexpr char const* SUCCESS               = \"success\";\n@@ -580,0 +579,3 @@\n+  \/\/ Check basic structure of the loop\n+  VLoop                _vloop;\n+\n@@ -589,6 +591,6 @@\n-    VLoop(phase),\n-    _reductions(*this),\n-    _memory_slices(*this),\n-    _body(*this),\n-    _types(*this, _body), \/\/ types requires: body\n-    _dependence_graph(*this, _memory_slices, _body) \/\/ dependence_graph requires: memory_slices and body\n+    _vloop(phase),\n+    _reductions(vloop()),\n+    _memory_slices(vloop()),\n+    _body(vloop()),\n+    _types(vloop(), body()), \/\/ types requires: body\n+    _dependence_graph(vloop(), memory_slices(), body()) \/\/ dependence_graph requires: memory_slices and body\n@@ -601,2 +603,1 @@\n-  bool analyze(IdealLoopTree* lpt,\n-               bool allow_cfg);\n+  bool analyze(IdealLoopTree* lpt);\n@@ -605,4 +606,5 @@\n-  const VLoopReductions& reductions() const            { return _reductions; }\n-  const VLoopMemorySlices& memory_slices() const       { return _memory_slices; }\n-  const VLoopBody& body() const                        { return _body; }\n-  const VLoopTypes& types() const                      { return _types; }\n+  const VLoop& vloop()                           const { return _vloop; }\n+  const VLoopReductions& reductions()            const { return _reductions; }\n+  const VLoopMemorySlices& memory_slices()       const { return _memory_slices; }\n+  const VLoopBody& body()                        const { return _body; }\n+  const VLoopTypes& types()                      const { return _types; }\n@@ -612,2 +614,1 @@\n-  virtual void reset(IdealLoopTree* lpt, bool allow_cfg) override {\n-    VLoop::reset(lpt, allow_cfg);\n+  void reset(IdealLoopTree* lpt) {\n","filename":"src\/hotspot\/share\/opto\/vectorization.hpp","additions":24,"deletions":23,"binary":false,"changes":47,"status":"modified"}]}