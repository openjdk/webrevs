{"files":[{"patch":"@@ -1099,3 +1099,3 @@\n-      VLoop vl(this, true);\n-      if (vl.check_preconditions()) {\n-        SuperWord::unrolling_analysis(vl, _local_loop_unroll_factor);\n+      VLoop vloop(this, true);\n+      if (vloop.check_preconditions()) {\n+        SuperWord::unrolling_analysis(vloop, _local_loop_unroll_factor);\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -48,1 +48,0 @@\n-#include \"opto\/superword.hpp\"\n@@ -4670,17 +4669,1 @@\n-      CountedLoopNode* cl = lpt->_head->isa_CountedLoop();\n-      if (lpt->is_counted() && cl->is_main_loop()) {\n-        ResourceMark rm(&autovectorization_arena);\n-        \/\/ TODO only start analyzer once VLoop passes preconditions?\n-        VLoopAnalyzer vloop_analyzer(&autovectorization_arena, lpt);\n-        \/\/ TODO can we have it only after analyzer succeeds?\n-        SuperWord sw(&autovectorization_arena, vloop_analyzer);\n-        if (!vloop_analyzer.analyze() ||\n-            !sw.transform_loop()) {\n-          \/\/ Analyzer or Vectorization failed. From now on only unroll the loop.\n-          if (cl->has_passed_slp()) {\n-            C->set_major_progress();\n-            cl->set_notpassed_slp();\n-            cl->mark_do_unroll_only();\n-          }\n-        }\n-      }\n+      autovectorize(lpt, &autovectorization_arena);\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":1,"deletions":18,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -1434,0 +1434,3 @@\n+  \/\/ Apply autovectorization if possible\n+  bool autovectorize(IdealLoopTree* lpt, ResourceArea* arena);\n+\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+#include \"opto\/superword.hpp\"\n@@ -4209,0 +4210,31 @@\n+bool PhaseIdealLoop::autovectorize(IdealLoopTree* lpt, ResourceArea* arena) {\n+  \/\/ Counted loop only\n+  if (!lpt->is_counted()) { return false; }\n+  CountedLoopNode* cl = lpt->_head->as_CountedLoop();\n+\n+  \/\/ Main-loop only\n+  if (!cl->is_main_loop()) { return false; }\n+\n+  VLoop vloop(lpt, false);\n+  if (vloop.check_preconditions()) {\n+    \/\/ Ensure that all data structures from autovectorization are deallocated.\n+    ResourceMark rm(arena);\n+    VLoopAnalyzer vloop_analyzer(arena, vloop);\n+    if (vloop_analyzer.analyze()) {\n+      SuperWord sw(arena, vloop_analyzer);\n+      if (sw.transform_loop()) {\n+        return true;\n+      }\n+    }\n+  }\n+\n+  \/\/ This counted main-loop either failed preconditions, the analyzer\n+  \/\/ or in SuperWord. From now on only unroll the loop.\n+  if (cl->has_passed_slp()) {\n+    C->set_major_progress();\n+    cl->set_notpassed_slp();\n+    cl->mark_do_unroll_only();\n+  }\n+  return false;\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -1438,3 +1438,0 @@\n-  bool success = _vloop.check_preconditions();\n-  if (!success) { return false; }\n-\n","filename":"src\/hotspot\/share\/opto\/vectorization.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -559,1 +559,1 @@\n-  VLoop                _vloop;\n+  const VLoop&         _vloop;\n@@ -569,7 +569,7 @@\n-  VLoopAnalyzer(Arena* arena, IdealLoopTree* lpt) :\n-    _vloop           (lpt, false),\n-    _reductions      (arena, vloop()),\n-    _memory_slices   (arena, vloop()),\n-    _body            (arena, vloop()),\n-    _types           (arena, vloop(), body()),\n-    _dependence_graph(arena, vloop(), memory_slices(), body())\n+  VLoopAnalyzer(Arena* arena, const VLoop& vloop) :\n+    _vloop           (vloop),\n+    _reductions      (arena, vloop),\n+    _memory_slices   (arena, vloop),\n+    _body            (arena, vloop),\n+    _types           (arena, vloop, body()),\n+    _dependence_graph(arena, vloop, memory_slices(), body())\n","filename":"src\/hotspot\/share\/opto\/vectorization.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"}]}