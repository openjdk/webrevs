{"files":[{"patch":"@@ -49,10 +49,12 @@\n-  \/\/ TODO reserve?\n-  _packset(arena, 8,  0, nullptr),                          \/\/ packs for the current block\n-  _node_info(arena, 8,  0, SWNodeInfo::initial),            \/\/ info needed per node\n-  _clone_map(phase()->C->clone_map()),                      \/\/ map of nodes created in cloning\n-  _align_to_ref(nullptr),                                   \/\/ memory reference to align vectors to\n-  _n_idx_list(arena, 8),                                    \/\/ scratch list of (node,index) pairs\n-  _race_possible(false),                                    \/\/ cases where SDMU is true\n-  _do_vector_loop(phase()->C->do_vector_loop()),            \/\/ whether to do vectorization\/simd style\n-  _num_work_vecs(0),                                        \/\/ amount of vector work we have\n-  _num_reductions(0)                                        \/\/ amount of reduction work we have\n+  _packset(arena, 8,  0, nullptr),                 \/\/ packs for the current block\n+  _node_info(arena,                                \/\/ info needed per node\n+             body().length(),\n+             body().length(),\n+             SWNodeInfo::initial),\n+  _clone_map(phase()->C->clone_map()),             \/\/ map of nodes created in cloning\n+  _align_to_ref(nullptr),                          \/\/ memory reference to align vectors to\n+  _n_idx_list(arena, 8),                           \/\/ scratch list of (node,index) pairs\n+  _race_possible(false),                           \/\/ cases where SDMU is true\n+  _do_vector_loop(phase()->C->do_vector_loop()),   \/\/ whether to do vectorization\/simd style\n+  _num_work_vecs(0),                               \/\/ amount of vector work we have\n+  _num_reductions(0)                               \/\/ amount of reduction work we have\n@@ -293,3 +295,0 @@\n-  \/\/ Initialize data structures.\n-  init();\n-\n@@ -3027,12 +3026,0 @@\n-\/\/------------------------------init---------------------------\n-void SuperWord::init() {\n-  _packset.clear();\n-  _node_info.clear();\n-  _align_to_ref = nullptr;\n-  _race_possible = 0;\n-  _num_work_vecs = 0;\n-  _num_reductions = 0;\n-  Node* last = body().at(body().length() - 1);\n-  grow_node_info(body_idx(last));\n-}\n-\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":12,"deletions":25,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -441,1 +441,0 @@\n-  void init();\n","filename":"src\/hotspot\/share\/opto\/superword.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -61,6 +61,6 @@\n-    _phase(lpt->_phase),\n-    _lpt(lpt),\n-    _allow_cfg(allow_cfg),\n-    _cl(nullptr),\n-    _cl_exit(nullptr),\n-    _iv(nullptr),\n+    _phase     (lpt->_phase),\n+    _lpt       (lpt),\n+    _allow_cfg (allow_cfg),\n+    _cl        (nullptr),\n+    _cl_exit   (nullptr),\n+    _iv        (nullptr),\n@@ -68,0 +68,1 @@\n+\n@@ -71,7 +72,7 @@\n-  IdealLoopTree* lpt()    const { return _lpt; };\n-  PhaseIdealLoop* phase() const { return _phase; }\n-  CountedLoopNode* cl()   const { return _cl; };\n-  Node* cl_exit()         const { return _cl_exit; };\n-  PhiNode* iv()           const { return _iv; };\n-  int iv_stride()         const { return cl()->stride_con(); };\n-  bool is_allow_cfg()     const { return _allow_cfg; }\n+  IdealLoopTree* lpt()        const { return _lpt; };\n+  PhaseIdealLoop* phase()     const { return _phase; }\n+  CountedLoopNode* cl()       const { return _cl; };\n+  Node* cl_exit()             const { return _cl_exit; };\n+  PhiNode* iv()               const { return _iv; };\n+  int iv_stride()             const { return cl()->stride_con(); };\n+  bool is_allow_cfg()         const { return _allow_cfg; }\n@@ -91,0 +92,3 @@\n+  int estimated_body_length() const { return lpt()->_body.size(); };\n+  int estimated_node_count()  const { return (int)(1.10 * phase()->C->unique()); };\n+\n@@ -152,1 +156,1 @@\n-    _loop_reductions(arena){}; \/\/ TODO reserve?\n+    _loop_reductions(arena){};\n@@ -227,2 +231,2 @@\n-    _heads(arena, 8,  0, nullptr),\n-    _tails(arena, 8,  0, nullptr) {};\n+    _heads(arena, 8, 0, nullptr),\n+    _tails(arena, 8, 0, nullptr) {};\n@@ -262,3 +266,3 @@\n-    _vloop(vloop),\n-    _body(arena, 8, 0, nullptr),\n-    _body_idx(arena, (int)(1.10 * _vloop.phase()->C->unique()), 0, 0) {}\n+    _vloop   (vloop),\n+    _body    (arena, vloop.estimated_body_length(), 0, nullptr),\n+    _body_idx(arena, vloop.estimated_node_count(),  0, 0) {}\n@@ -321,0 +325,1 @@\n+  GrowableArray<int> _depth; \/\/ body_idx -> depth in graph (DAG)\n@@ -323,1 +328,0 @@\n-  GrowableArray<int> _depth; \/\/ body_idx -> depth in graph (DAG)\n@@ -330,8 +334,8 @@\n-    _vloop(vloop),\n-    _memory_slices(memory_slices),\n-    _body(body),\n-    _arena(arena),\n-    _map(arena, 8,  0, nullptr),\n-    _root(new (arena) DependenceNode(nullptr)),\n-    _sink(new (arena) DependenceNode(nullptr)),\n-    _depth(arena, 8,  0, 0) {}\n+    _vloop          (vloop),\n+    _memory_slices  (memory_slices),\n+    _body           (body),\n+    _arena          (arena),\n+    _map            (arena, vloop.estimated_node_count(),  0, nullptr),\n+    _depth          (arena, vloop.estimated_body_length(), 0, 0),\n+    _root           (new (arena) DependenceNode(nullptr)),\n+    _sink           (new (arena) DependenceNode(nullptr)) {}\n@@ -492,1 +496,1 @@\n-    _velt_type(arena, 8,  0, nullptr) {}\n+    _velt_type(arena, vloop.estimated_body_length(), 0, nullptr) {}\n@@ -558,1 +562,0 @@\n-  \/\/ Check basic structure of the loop\n","filename":"src\/hotspot\/share\/opto\/vectorization.hpp","additions":33,"deletions":30,"binary":false,"changes":63,"status":"modified"}]}