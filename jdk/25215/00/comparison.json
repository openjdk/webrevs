{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -267,0 +267,10 @@\n+\n+        \/**\n+         * Used for instances of {@link InfoTree}\n+         * representing an {@code @info} tag.\n+         *\n+         * @since 25\n+         *\/\n+        INFO(\"info\"),\n+\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/doctree\/DocTree.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -376,0 +376,15 @@\n+    \/**\n+     * Visits a {@code InfoTree} node.\n+     *\n+     * @implSpec Visits the provided {@code InfoTree} node\n+     * by calling {@code visitOther(node, p)}.\n+     *\n+     * @param node the node being visited\n+     * @param p a parameter value\n+     * @return a result value\n+     * @since 25\n+     *\/\n+    default R visitInfo(InfoTree node, P p) {\n+        return visitOther(node, p);\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/doctree\/DocTreeVisitor.java","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,7 @@\n+package com.sun.source.doctree;\n+\n+import java.util.List;\n+\n+public interface InfoTree extends BlockTagTree{\n+    List<? extends DocTree> getReference();\n+}\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/doctree\/InfoTree.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,0 +77,1 @@\n+import com.sun.source.doctree.InfoTree;\n@@ -390,0 +391,8 @@\n+\n+    \/**\n+     * Creates a new {@code InfoTree} object, to represent a {@code {@info}} tag.\n+     * @param attributes the attributes of the tag\n+     * @since 25\n+     *\/\n+    InfoTree newInfoTree(List<? extends DocTree> attributes);\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/util\/DocTreeFactory.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -552,0 +552,17 @@\n+    \/**\n+     * {@inheritDoc}\n+     *\n+     * @implSpec This implementation scans the children in left to right order.\n+     *\n+     * @param node {@inheritDoc}\n+     * @param p    {@inheritDoc}\n+     * @return the result of scanning\n+     * @since 25\n+     *\/\n+    @Override\n+    public R visitInfo(InfoTree node, P p) {\n+        R r = scan(node.getReference(), p);\n+        r = scanAndReduce(node.getReference(), p, r);\n+        return r;\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/util\/DocTreeScanner.java","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -543,0 +543,14 @@\n+    \/**\n+     * {@inheritDoc}\n+     *\n+     * @implSpec This implementation calls {@code defaultAction}.\n+     *\n+     * @param node {@inheritDoc}\n+     * @param p {@inheritDoc}\n+     * @return  the result of {@code defaultAction}\n+     * @since 25\n+     *\/\n+    @Override\n+    public R visitInfo(InfoTree node, P p) {\n+        return defaultAction(node, p);\n+    }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/util\/SimpleDocTreeVisitor.java","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2417,0 +2417,10 @@\n+            \/\/ @info info-text\n+            new TagParser(TagParser.Kind.BLOCK, DCTree.Kind.INFO) {\n+                @Override\n+                public DCTree parse(int pos) throws ParseException {\n+                    skipWhitespace();\n+                    List<DCTree> description = blockContent();\n+                    return m.at(pos).newInfoTree( description);\n+                }\n+            },\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/DocCommentParser.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -1026,0 +1026,24 @@\n+            return reference;\n+        }\n+    }\n+\n+    public static class DCInfo extends DCBlockTag implements InfoTree {\n+        public final List<DCTree> reference;\n+\n+        public DCInfo(List<DCTree> reference) {\n+            this.reference = reference;\n+        }\n+\n+\n+        @Override @DefinedBy(Api.COMPILER_TREE)\n+        public Kind getKind() {\n+            return Kind.INFO;\n+        }\n+\n+        @Override @DefinedBy(Api.COMPILER_TREE)\n+        public <R, D> R accept(DocTreeVisitor<R, D> v, D d) {\n+            return v.visitInfo(this, d);\n+        }\n+\n+        @Override @DefinedBy(Api.COMPILER_TREE)\n+        public List<? extends DocTree> getReference() {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/DCTree.java","additions":25,"deletions":1,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -541,0 +541,12 @@\n+\n+    @Override @DefinedBy(Api.COMPILER_TREE)\n+    public Void visitInfo(InfoTree node, Void p) {\n+        try {\n+            printTagName(node);\n+            print(' ');\n+            print(node.getReference());\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+        return null;\n+    }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/DocPretty.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -92,0 +92,1 @@\n+import com.sun.tools.javac.tree.DCTree.DCInfo;\n@@ -447,0 +448,7 @@\n+    @Override @DefinedBy(Api.COMPILER_TREE)\n+    public DCInfo newInfoTree(List<? extends DocTree> attributes) {\n+        DCInfo tree =  new DCInfo(cast(attributes));\n+        tree.pos = pos;\n+        return tree;\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/DocTreeMaker.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -173,0 +173,1 @@\n+        buildInfoTagInfo(div);\n@@ -260,0 +261,9 @@\n+    \/**\n+     * If this class is annotated with an {@code @info} tag, build the appropriate information.\n+     *\n+     * @param target the content to which the documentation will be added\n+     *\/\n+    protected void buildInfoTagInfo(Content target) {\n+        addInfoTagInfo(target);\n+    }\n+\n@@ -721,0 +731,10 @@\n+    private void addInfoTagInfo(Content target) {\n+        if (utils.hasBlockTag(typeElement, DocTree.Kind.INFO)) {\n+            var t = configuration.tagletManager.getTaglet(DocTree.Kind.INFO);\n+            Content paramInfo = t.getAllBlockTagOutput(typeElement, getTagletWriterInstance(false));\n+            if (!paramInfo.isEmpty()) {\n+                target.add(HtmlTree.DL(HtmlStyles.notes, paramInfo));\n+            }\n+        }\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ClassWriter.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -396,0 +396,21 @@\n+    \/**\n+     * The class for the \"Info\" label in a block describing the \"Info\" status\n+     * of a declaration.\n+     *\/\n+    infoLabel,\n+\n+    \/**\n+     * The class for a block describing the \"info\" status of a declaration.\n+     *\/\n+    infoBlock,\n+\n+    \/**\n+     * The class for the icon describing the \"info\" status of a declaration.\n+     *\/\n+    infoIcon,\n+\n+    \/**\n+     * The class for the details in a block describing the \"info\" status of a declaration.\n+     *\/\n+    infoText,\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/HtmlStyles.java","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -883,1 +883,1 @@\n-.restricted-label {\n+.restricted-label, .info-label {\n@@ -921,0 +921,42 @@\n+\n+.info-block {\n+    width: fit-content;\n+    height: fit-content;\n+    display: flex;\n+    align-items: flex-start;\n+    gap: 10px;\n+    background-color: #fff;\n+    border: 1px solid #ddd;\n+    border-radius: 6px;\n+    padding: 16px;\n+    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n+    font-size: 14px;\n+    color: #333;\n+}\n+\n+.info-icon {\n+    width: 24px;\n+    height: 24px;\n+    font-size: 18px;\n+    font-weight: bold;\n+    color: #4d7a97;\n+}\n+\n+.info-label {\n+    font-weight: bold;\n+    margin-bottom: 6px;\n+}\n+\n+.info-text {\n+    flex-grow: 1;\n+    margin: 0;\n+    line-height: 1.4;\n+}\n+\n+.info-text code {\n+    background: #f4f4f4;\n+    padding: 2px 4px;\n+    border-radius: 4px;\n+}\n+\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/resources\/stylesheet.css","additions":43,"deletions":1,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,0 +45,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.HtmlStyles;\n@@ -50,0 +51,1 @@\n+import jdk.javadoc.internal.html.Entity;\n@@ -159,0 +161,33 @@\n+\n+    \/**\n+     * Constructs a {@code SimpleTaglet} for processing {@code  {@info ...}} tags\n+     *\n+     * @param header    the header to output\n+     * @param locations the possible locations that this tag can appear in\n+     *\/\n+    static SimpleTaglet createInfoTaglet(HtmlConfiguration config, String header, Set<Taglet.Location> locations) {\n+        return new SimpleTaglet(config, DocTree.Kind.INFO, header, locations) {\n+            @Override\n+            protected Content simpleBlockTagOutput(Element element,\n+                                                   List<? extends DocTree> simpleTags,\n+                                                   String header) {\n+                var ch = utils.getCommentHelper(element);\n+                var context = tagletWriter.context;\n+                var htmlWriter = tagletWriter.htmlWriter;\n+                ContentBuilder body = new ContentBuilder();\n+\n+                body.add(HtmlTree.DIV(HtmlStyles.infoIcon, Entity.INFO_ICON));\n+                HtmlTree text = HtmlTree.SPAN(\n+                            htmlWriter.commentTagsToContent(\n+                                    element,\n+                                    ch.getBody(simpleTags.getFirst()),\n+                                    context.within(simpleTags.getFirst())\n+                            ));\n+\n+                body.add(HtmlTree.DIV(HtmlStyles.infoText, text));\n+                return HtmlTree.DIV(HtmlStyles.infoBlock, body);\n+            }\n+\n+        };\n+    }\n+\n@@ -246,1 +281,1 @@\n-    private Content simpleBlockTagOutput(Element element,\n+    protected Content simpleBlockTagOutput(Element element,\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/taglets\/SimpleTaglet.java","additions":37,"deletions":2,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -82,1 +82,0 @@\n-\n@@ -603,1 +602,1 @@\n-                    EnumSet.noneOf(Location.class)));\n+                        EnumSet.noneOf(Location.class)));\n@@ -606,1 +605,3 @@\n-                    EnumSet.of(Location.TYPE, Location.METHOD, Location.FIELD)));\n+                        EnumSet.of(Location.TYPE, Location.METHOD, Location.FIELD)));\n+        addStandardTaglet(SimpleTaglet.createInfoTaglet(config, resources.getText(\"doclet.info\"),\n+                EnumSet.allOf(Location.class)));\n@@ -709,1 +710,1 @@\n-            case DEPRECATED, LINK, LINK_PLAIN, PARAM, RETURN, THROWS -> getTaglet(kind.tagName);\n+            case DEPRECATED, LINK, LINK_PLAIN, PARAM, RETURN, THROWS, INFO -> getTaglet(kind.tagName);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/taglets\/TagletManager.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -241,0 +241,7 @@\n+            if (utils.isTypeElement(element) && taglet instanceof SimpleTaglet\n+                    && ((SimpleTaglet) taglet).getTagKind() == DocTree.Kind.INFO) {\n+                \/\/`Info` block tag information is documented \"inline\", not in tag info\n+                \/\/section.\n+                continue;\n+            }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/taglets\/TagletWriter.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -111,0 +111,1 @@\n+doclet.info=Info:\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/resources\/doclets.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,0 +57,1 @@\n+import com.sun.source.doctree.InfoTree;\n@@ -489,0 +490,5 @@\n+            @Override\n+            public List<? extends DocTree> visitInfo(InfoTree node, Void p) {\n+                return node.getReference();\n+            }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/CommentHelper.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -110,0 +110,1 @@\n+import com.sun.source.doctree.InfoTree;\n@@ -2404,0 +2405,4 @@\n+    public List<? extends InfoTree> getInfoTrees(Element element) {\n+        return getBlockTags(element, INFO, InfoTree.class);\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/Utils.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+    public static final Entity INFO_ICON = new Entity(\"&#9432;\");\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/html\/Entity.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -10,0 +10,1 @@\n+               @info: block overview module package type constructor method field ...... ........\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testTaglets\/TestTaglets.out","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}