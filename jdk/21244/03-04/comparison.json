{"files":[{"patch":"@@ -2092,14 +2092,1 @@\n-         n->in(1)->bottom_type()->is_long()->get_con() <= 4294967295L;\n-}\n-\n-static bool is_lower_doubleword_mask_pattern(const Node* n) {\n-  return n->Opcode() == Op_AndV &&\n-         (is_replicate_uint_constant(n->in(1)) ||\n-          is_replicate_uint_constant(n->in(2)));\n-}\n-\n-static bool is_clear_upper_doubleword_uright_shift_pattern(const Node* n) {\n-  return n->Opcode() == Op_URShiftVL &&\n-         n->in(2)->Opcode() == Op_RShiftCntV && n->in(2)->in(1)->is_Con() &&\n-         n->in(2)->in(1)->bottom_type()->isa_int() &&\n-         n->in(2)->in(1)->bottom_type()->is_int()->get_con() >= 32;\n+         n->in(1)->bottom_type()->is_long()->get_con() <= 0xFFFFFFFFL;\n@@ -2109,0 +2096,12 @@\n+  auto is_lower_doubleword_mask_pattern = [](const Node* n) {\n+    return n->Opcode() == Op_AndV &&\n+           (is_replicate_uint_constant(n->in(1)) ||\n+            is_replicate_uint_constant(n->in(2)));\n+  };\n+\n+  auto is_clear_upper_doubleword_uright_shift_pattern = [](const Node* n) {\n+    return n->Opcode() == Op_URShiftVL &&\n+           n->in(2)->Opcode() == Op_RShiftCntV && n->in(2)->in(1)->is_Con() &&\n+           n->in(2)->in(1)->bottom_type()->isa_int() &&\n+           n->in(2)->in(1)->bottom_type()->is_int()->get_con() >= 32;\n+  };\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":13,"deletions":14,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n- * @key randomness\n@@ -51,1 +50,1 @@\n-    public static final Random r = new Random(1024);\n+    public static final Random r = jdk.test.lib.Utils.getRandomInstance();\n@@ -104,2 +103,2 @@\n-            vsrc1.lanewise(VectorOperators.AND, 0xFFFFFFFFL)\n-                 .lanewise(VectorOperators.MUL, vsrc2.lanewise(VectorOperators.AND, 0xFFFFFFFFL))\n+            vsrc1.lanewise(VectorOperators.AND, 0xFFFFFL)\n+                 .lanewise(VectorOperators.MUL, vsrc2.lanewise(VectorOperators.AND, 0xFFFFFL))\n@@ -109,1 +108,1 @@\n-            res[i] = (lsrc1[i] & 0xFFFFFFFFL) * (lsrc2[i] & 0xFFFFFFFFL);\n+            res[i] = (lsrc1[i] & 0xFFFFFL) * (lsrc2[i] & 0xFFFFFL);\n@@ -115,1 +114,1 @@\n-        validate(\"pattern1 \", res, lsrc1, lsrc2, (l1, l2) -> (l1 & 0xFFFFFFFFL) * (l2 & 0xFFFFFFFFL));\n+        validate(\"pattern1 \", res, lsrc1, lsrc2, (l1, l2) -> (l1 & 0xFFFFFL) * (l2 & 0xFFFFFL));\n@@ -126,2 +125,2 @@\n-            vsrc1.lanewise(VectorOperators.AND, 0xFFFFFFFFL)\n-                .lanewise(VectorOperators.MUL, vsrc2.lanewise(VectorOperators.LSHR, 32))\n+            vsrc1.lanewise(VectorOperators.AND, 0xFFFFFFL)\n+                .lanewise(VectorOperators.MUL, vsrc2.lanewise(VectorOperators.LSHR, 31))\n@@ -131,1 +130,1 @@\n-            res[i] = (lsrc1[i] & 0xFFFFFFFFL) * (lsrc2[i] >>> 32);\n+            res[i] = (lsrc1[i] & 0xFFFFFFL) * (lsrc2[i] >>> 31);\n@@ -137,1 +136,1 @@\n-        validate(\"pattern2 \", res, lsrc1, lsrc2, (l1, l2) -> (l1 & 0xFFFFFFFFL) * (l2 >>> 32));\n+        validate(\"pattern2 \", res, lsrc1, lsrc2, (l1, l2) -> (l1 & 0xFFFFFFL) * (l2 >>> 31));\n@@ -170,2 +169,2 @@\n-            vsrc1.lanewise(VectorOperators.LSHR, 32)\n-                .lanewise(VectorOperators.MUL, vsrc2.lanewise(VectorOperators.AND, 0xFFFFFFFFL))\n+            vsrc1.lanewise(VectorOperators.LSHR, 30)\n+                .lanewise(VectorOperators.MUL, vsrc2.lanewise(VectorOperators.AND, 0xFFFFFFFL))\n@@ -175,1 +174,1 @@\n-            res[i] = (lsrc1[i] >>> 32) * (lsrc2[i] & 0xFFFFFFFFL);\n+            res[i] = (lsrc1[i] >>> 30) * (lsrc2[i] & 0xFFFFFFFL);\n@@ -181,1 +180,1 @@\n-        validate(\"pattern4 \", res, lsrc1, lsrc2, (l1, l2) -> (l1 >>> 32) * (l2 & 0xFFFFFFFFL));\n+        validate(\"pattern4 \", res, lsrc1, lsrc2, (l1, l2) -> (l1 >>> 30) * (l2 & 0xFFFFFFFL));\n@@ -217,2 +216,2 @@\n-            vsrc1.lanewise(VectorOperators.ASHR, 32)\n-                .lanewise(VectorOperators.MUL, vsrc2.lanewise(VectorOperators.ASHR, 32))\n+            vsrc1.lanewise(VectorOperators.ASHR, 22)\n+                .lanewise(VectorOperators.MUL, vsrc2.lanewise(VectorOperators.ASHR, 22))\n@@ -222,1 +221,1 @@\n-            res[i] = (lsrc1[i] >> 32) * (lsrc2[i] >> 32);\n+            res[i] = (lsrc1[i] >> 22) * (lsrc2[i] >> 22);\n@@ -228,1 +227,1 @@\n-        validate(\"pattern6 \", res, lsrc1, lsrc2, (l1, l2) -> (l1 >> 32) * (l2 >> 32));\n+        validate(\"pattern6 \", res, lsrc1, lsrc2, (l1, l2) -> (l1 >> 22) * (l2 >> 22));\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorMultiplyOpt.java","additions":17,"deletions":18,"binary":false,"changes":35,"status":"modified"}]}