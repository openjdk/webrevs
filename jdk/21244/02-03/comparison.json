{"files":[{"patch":"@@ -1967,6 +1967,0 @@\n-    case Op_MulIVL:\n-    case Op_MulUIVL:\n-       if (UseAVX < 1) {\n-         return false;\n-       }\n-       break;\n@@ -2095,0 +2089,1 @@\n+\n@@ -6262,1 +6257,2 @@\n-  match(Set dst (MulUIVL src1 src2));\n+  predicate(UseAVX > 0 && n->as_MulVL()->has_uint_inputs());\n+  match(Set dst (MulVL src1 src2));\n@@ -6273,1 +6269,2 @@\n-  match(Set dst (MulIVL src1 src2));\n+  predicate(UseAVX > 0 && n->as_MulVL()->has_int_inputs());\n+  match(Set dst (MulVL src1 src2));\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -4336,1 +4336,1 @@\n-    \"MulVB\",\"MulVS\",\"MulVI\",\"MulVL\",\"MulIVL\",\"MulUIVL\",\"MulVF\",\"MulVD\",\n+    \"MulVB\",\"MulVS\",\"MulVI\",\"MulVL\",\"MulVF\",\"MulVD\",\n","filename":"src\/hotspot\/share\/adlc\/formssel.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -397,2 +397,0 @@\n-macro(MulIVL)\n-macro(MulUIVL)\n","filename":"src\/hotspot\/share\/opto\/classes.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2129,1 +2129,0 @@\n-\n@@ -2140,22 +2139,0 @@\n-Node* MulVLNode::Ideal(PhaseGVN* phase, bool can_reshape) {\n-  const TypeVect* vt = vect_type();\n-  int vlen = vt->length();\n-  if (Matcher::match_rule_supported_vector(Op_MulIVL, vlen, T_LONG) && has_int_inputs()) {\n-    return new MulIVLNode(in(1), in(2), vect_type());\n-  }\n-  if (Matcher::match_rule_supported_vector(Op_MulUIVL, vlen, T_LONG) && has_uint_inputs()) {\n-    \/\/ Directly forward SRC from following pattern to multiplier input\n-    \/\/    AndV SRC (<=4294967295L)\n-    auto forward_masked_input = [](Node* n) {\n-      if (n->Opcode() == Op_AndV) {\n-        return n->in(1)->Opcode() == Op_Replicate ? n->in(2) : n->in(1);\n-      }\n-      return n;\n-    };\n-    Node* in1 = forward_masked_input(in(1));\n-    Node* in2 = forward_masked_input(in(2));\n-    return new MulUIVLNode(in1, in2, vt);\n-  }\n-  return nullptr;\n-}\n-\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":0,"deletions":23,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -447,1 +447,0 @@\n-  virtual Node* Ideal(PhaseGVN* phase, bool can_reshape);\n@@ -453,16 +452,0 @@\n-\/\/------------------------------MulIVLNode--------------------------------------\n-\/\/ Vector signed multiply lower doublewords of long vector lanes with quadword saturation\n-class MulIVLNode : public VectorNode {\n-public:\n-  MulIVLNode(Node* in1, Node* in2, const TypeVect* vt) : VectorNode(in1, in2, vt) {}\n-  virtual int Opcode() const;\n-};\n-\n-\/\/------------------------------MulUIVLNode--------------------------------------\n-\/\/ Vector unsigned multiply lower doublewords of long vector lanes with quadword saturation\n-class MulUIVLNode : public VectorNode {\n-public:\n-  MulUIVLNode(Node* in1, Node* in2, const TypeVect* vt) : VectorNode(in1, in2, vt) {}\n-  virtual int Opcode() const;\n-};\n-\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -1167,10 +1167,0 @@\n-    public static final String MULI_VL = VECTOR_PREFIX + \"MULI_VL\" + POSTFIX;\n-    static {\n-        vectorNode(MULI_VL, \"MulIVL\", TYPE_LONG);\n-    }\n-\n-    public static final String MULUI_VL = VECTOR_PREFIX + \"MULUI_VL\" + POSTFIX;\n-    static {\n-        vectorNode(MULUI_VL, \"MulUIVL\", TYPE_LONG);\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-    @IR(counts = {IRNode.MULUI_VL, \" >0 \", IRNode.AND_VL, \" 0 \"}, applyIfCPUFeature = {\"avx\", \"true\"})\n+    @IR(counts = {IRNode.MUL_VL, \" >0 \", IRNode.AND_VL, \" >0 \"}, applyIfCPUFeature = {\"avx\", \"true\"})\n@@ -119,1 +119,1 @@\n-    @IR(counts = {IRNode.MULUI_VL, \" >0 \", IRNode.AND_VL, \" 0 \", IRNode.URSHIFT_VL, \" >0 \"}, applyIfCPUFeature = {\"avx\", \"true\"})\n+    @IR(counts = {IRNode.MUL_VL, \" >0 \", IRNode.AND_VL, \" >0 \", IRNode.URSHIFT_VL, \" >0 \"}, applyIfCPUFeature = {\"avx\", \"true\"})\n@@ -141,1 +141,1 @@\n-    @IR(counts = {IRNode.MULUI_VL, \" >0 \", IRNode.URSHIFT_VL, \" >0 \"}, applyIfCPUFeature = {\"avx\", \"true\"})\n+    @IR(counts = {IRNode.MUL_VL, \" >0 \", IRNode.URSHIFT_VL, \" >0 \"}, applyIfCPUFeature = {\"avx\", \"true\"})\n@@ -163,1 +163,1 @@\n-    @IR(counts = {IRNode.MULUI_VL, \" >0 \", IRNode.URSHIFT_VL, \" >0 \"}, applyIfCPUFeature = {\"avx\", \"true\"})\n+    @IR(counts = {IRNode.MUL_VL, \" >0 \", IRNode.URSHIFT_VL, \" >0 \"}, applyIfCPUFeature = {\"avx\", \"true\"})\n@@ -185,1 +185,1 @@\n-    @IR(counts = {IRNode.MULI_VL, \" >0 \", IRNode.VECTOR_CAST_I2L, \" >0 \"}, applyIfCPUFeature = {\"avx\", \"true\"})\n+    @IR(counts = {IRNode.MUL_VL, \" >0 \", IRNode.VECTOR_CAST_I2L, \" >0 \"}, applyIfCPUFeature = {\"avx\", \"true\"})\n@@ -210,1 +210,1 @@\n-    @IR(counts = {IRNode.MULI_VL, \" >0 \", IRNode.RSHIFT_VL, \" >0 \"}, applyIfCPUFeature = {\"avx\", \"true\"})\n+    @IR(counts = {IRNode.MUL_VL, \" >0 \", IRNode.RSHIFT_VL, \" >0 \"}, applyIfCPUFeature = {\"avx\", \"true\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorMultiplyOpt.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}