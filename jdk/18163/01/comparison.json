{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1035,8 +1035,1 @@\n-                at.getElements().getAllMembers(element).forEach(m -> result.add(\n-                    element.equals(m.getEnclosingElement())\n-                        ? m\n-                        : (m instanceof Symbol.MethodSymbol ms)\n-                            ? ms.clone((Symbol)element)\n-                            : (m instanceof Symbol.VarSymbol vs)\n-                                ? vs.clone((Symbol)element)\n-                                : m));\n+                result.addAll(membersOf(at, element));\n@@ -1079,0 +1072,4 @@\n+                TypeElement jlObject = at.getElements().getTypeElement(\"java.lang.Object\");\n+                if (jlObject != null) {\n+                    result.addAll(membersOf(at, jlObject));\n+                }\n@@ -1089,0 +1086,11 @@\n+    private List<? extends Element> membersOf(AnalyzeTask at, TypeElement element) {\n+        return at.getElements().getAllMembers(element).stream().map(m ->\n+            element.equals(m.getEnclosingElement())\n+                ? m\n+                : (m instanceof Symbol.MethodSymbol ms)\n+                    ? ms.clone((Symbol)element)\n+                    : (m instanceof Symbol.VarSymbol vs)\n+                        ? vs.clone((Symbol)element)\n+                        : m).toList();\n+    }\n+\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/SourceCodeAnalysisImpl.java","additions":17,"deletions":9,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8131025 8141092 8153761 8145263 8131019 8175886 8176184 8176241 8176110 8177466 8197439 8221759 8234896 8240658 8278039 8286206 8296789 8314662\n+ * @bug 8131025 8141092 8153761 8145263 8131019 8175886 8176184 8176241 8176110 8177466 8197439 8221759 8234896 8240658 8278039 8286206 8296789 8314662 8326333\n@@ -89,1 +89,1 @@\n-        assertCompletion(\"int i = ao.|\", \"length\");\n+        assertCompletion(\"int i = ao.le|\", \"length\");\n@@ -91,1 +91,1 @@\n-        assertCompletion(\"int i = ai.|\", \"length\");\n+        assertCompletion(\"int i = ai.le|\", \"length\");\n@@ -813,0 +813,11 @@\n+\n+    \/\/JDK-8326333: verify completion returns sensible output for arrays:\n+    public void testArray() {\n+        assertEval(\"String[] strs = null;\");\n+        assertCompletion(\"strs.to|\", \"toString()\");\n+        assertCompletion(\"strs.le|\", \"length\");\n+        assertEval(\"int[] ints = null;\");\n+        assertCompletion(\"ints.no|\", \"notify()\", \"notifyAll()\");\n+        assertCompletion(\"ints.le|\", \"length\");\n+        assertCompletion(\"String[].|\", \"class\");\n+    }\n","filename":"test\/langtools\/jdk\/jshell\/CompletionSuggestionTest.java","additions":15,"deletions":4,"binary":false,"changes":19,"status":"modified"}]}