{"files":[{"patch":"@@ -288,0 +288,1 @@\n+  heap->increment_total_collections(false);\n@@ -334,0 +335,2 @@\n+  heap->increment_total_collections(true);\n+\n@@ -343,0 +346,2 @@\n+  heap->increment_total_collections(false);\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -485,0 +485,2 @@\n+  ShenandoahHeap* heap = ShenandoahHeap::heap();\n+  heap->increment_total_collections(true);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -382,0 +382,2 @@\n+  _heap->increment_total_collections(false);\n+\n@@ -531,0 +533,1 @@\n+  _heap->increment_total_collections(false);\n@@ -598,0 +601,1 @@\n+  _heap->increment_total_collections(true);\n@@ -607,0 +611,1 @@\n+  _heap->increment_total_collections(false);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalControlThread.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -582,10 +582,26 @@\n-  st->print_cr(\"Shenandoah Heap\");\n-  st->print_cr(\" %zu%s max, %zu%s soft max, %zu%s committed, %zu%s used\",\n-               byte_size_in_proper_unit(max_capacity()), proper_unit_for_byte_size(max_capacity()),\n-               byte_size_in_proper_unit(soft_max_capacity()), proper_unit_for_byte_size(soft_max_capacity()),\n-               byte_size_in_proper_unit(committed()),    proper_unit_for_byte_size(committed()),\n-               byte_size_in_proper_unit(used()),         proper_unit_for_byte_size(used()));\n-  st->print_cr(\" %zu x %zu %s regions\",\n-               num_regions(),\n-               byte_size_in_proper_unit(ShenandoahHeapRegion::region_size_bytes()),\n-               proper_unit_for_byte_size(ShenandoahHeapRegion::region_size_bytes()));\n+  bool is_generational = mode()->is_generational();\n+  if (is_generational) {\n+    st->print_cr(\"Generational Shenandoah Heap\");\n+  } else {\n+    st->print_cr(\"Shenandoah Heap\");\n+  }\n+\n+  if (is_generational) {\n+    st->print_cr(\" Young:\");\n+    st->print_cr(\"  \" PROPERFMT \" max, \" PROPERFMT \" used\", PROPERFMTARGS(young_generation()->max_capacity()), PROPERFMTARGS(young_generation()->used()));\n+    st->print_cr(\" Old:\");\n+    st->print_cr(\"  \" PROPERFMT \" max, \" PROPERFMT \" used\", PROPERFMTARGS(old_generation()->max_capacity()), PROPERFMTARGS(old_generation()->used()));\n+    st->print_cr(\" Entire heap:\");\n+    st->print_cr(\"  \" PROPERFMT \" soft max, \" PROPERFMT \" committed\",\n+                PROPERFMTARGS(soft_max_capacity()), PROPERFMTARGS(committed()));\n+  } else {\n+    st->print_cr(\"  \" PROPERFMT \" max, \" PROPERFMT \" soft max, \" PROPERFMT \" committed, \" PROPERFMT \" used\",\n+      PROPERFMTARGS(max_capacity()),\n+      PROPERFMTARGS(soft_max_capacity()),\n+      PROPERFMTARGS(committed()),\n+      PROPERFMTARGS(used())\n+    );\n+    st->print_cr(\" %zu x \" PROPERFMT \" regions\",\n+                num_regions(),\n+                PROPERFMTARGS(ShenandoahHeapRegion::region_size_bytes()));\n+  }\n@@ -595,1 +611,1 @@\n-  if (!mode()->is_generational()) {\n+  if (!is_generational) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":27,"deletions":11,"binary":false,"changes":38,"status":"modified"}]}