{"files":[{"patch":"@@ -108,0 +108,1 @@\n+  ArrayKlass* ak;\n@@ -109,1 +110,1 @@\n-    return ArrayKlass::cast(klass)->allocate_arrayArray(1, length, THREAD);\n+    ak = ArrayKlass::cast(klass)->array_klass(CHECK_NULL);\n@@ -111,2 +112,1 @@\n-    ArrayKlass* ak = InstanceKlass::cast(klass)->array_klass(CHECK_NULL);\n-    return ObjArrayKlass::cast(ak)->allocate_instance(length, THREAD);\n+    ak = InstanceKlass::cast(klass)->array_klass(CHECK_NULL);\n@@ -114,0 +114,1 @@\n+  return ObjArrayKlass::cast(ak)->allocate_instance(length, THREAD);\n","filename":"src\/hotspot\/share\/memory\/oopFactory.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -190,10 +190,0 @@\n-objArrayOop ArrayKlass::allocate_arrayArray(int n, int length, TRAPS) {\n-  check_array_allocation_length(length, arrayOopDesc::max_array_length(T_ARRAY), CHECK_NULL);\n-  size_t size = objArrayOopDesc::object_size(length);\n-  ArrayKlass* ak = array_klass(n + dimension(), CHECK_NULL);\n-  objArrayOop o = (objArrayOop)Universe::heap()->array_allocate(ak, size, length,\n-                                                                \/* do_zero *\/ true, CHECK_NULL);\n-  \/\/ initialization to null not necessary, area already cleared\n-  return o;\n-}\n-\n","filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -90,1 +90,0 @@\n-  objArrayOop allocate_arrayArray(int n, int length, TRAPS);\n","filename":"src\/hotspot\/share\/oops\/arrayKlass.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}