{"files":[{"patch":"@@ -1073,1 +1073,1 @@\n-  static-libs-image: hotspot-static-libs $(STATIC_LIBS_TARGETS)\n+  static-libs-image: hotspot-static-libs static-libs\n@@ -1075,1 +1075,1 @@\n-  static-libs-graal-image: $(STATIC_LIBS_TARGETS)\n+  static-libs-graal-image: static-libs\n@@ -1138,1 +1138,6 @@\n-static-libs: $(STATIC_LIBS_TARGETS)\n+ifeq ($(call isTargetOsType, unix), true)\n+  static-libs: $(STATIC_LIBS_TARGETS)\n+else\n+  static-libs:\n+\t$(error Static libraries are only supported on Unix)\n+endif\n","filename":"make\/Main.gmk","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -130,1 +130,0 @@\n-#   STATIC_LIB_EXCLUDE_OBJS exclude objects that matches from static library\n","filename":"make\/common\/NativeCompilation.gmk","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -72,4 +72,2 @@\n-  ifeq ($(call isTargetOs, linux), true)\n-    ifneq ($(findstring $(TOOLCHAIN_TYPE), clang), )\n-      $1_ENABLE_PARTIAL_LINKING := true\n-    endif\n+  ifeq ($(call isTargetOs, linux macosx), true)\n+    $1_ENABLE_PARTIAL_LINKING := true\n@@ -92,1 +90,1 @@\n-    $1_TARGET_RELOCATABLE := $$($1_OBJECT_DIR)\/$$($1_PREFIX)$$($1_NAME)_relocatable$(OBJ_SUFFIX)\n+    $1_TARGET_RELOCATABLE := $$($1_OBJECT_DIR)\/$$($1_PREFIX)$$($1_NAME)$(OBJ_SUFFIX)\n@@ -112,0 +110,4 @@\n+          ifeq ($(call isTargetOs, linux), true)\n+\t    $$(call ExecuteWithLog, $$($1_OBJECT_DIR)\/$$($1_SAFE_NAME)_localize, \\\n+\t        $$($1_OBJCOPY) --localize-hidden $$($1_TARGET_RELOCATABLE))\n+          endif\n","filename":"make\/common\/native\/Link.gmk","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -186,6 +186,0 @@\n-  ifeq ($(STATIC_LIBS), true)\n-    # Exclude the object files that match with $1_STATIC_LIB_EXCLUDE_OBJS.\n-    ifneq ($$($1_STATIC_LIB_EXCLUDE_OBJS), )\n-      $1_ALL_OBJS := $$(call not-containing, $$($1_STATIC_LIB_EXCLUDE_OBJS), $$($1_ALL_OBJS))\n-    endif\n-  endif\n","filename":"make\/common\/native\/Paths.gmk","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -147,8 +147,0 @@\n-\n-  # Do not include these libz objects in the static libjli library.\n-  # When statically linking the java launcher with all JDK and VM\n-  # static libraries, we use the --whole-archive linker option.\n-  # The duplicate objects in different static libraries cause linking\n-  # errors due to duplicate symbols.\n-  LIBJLI_STATIC_EXCLUDE_OBJS := \\\n-      $(subst .c,$(OBJ_SUFFIX),$(LIBJLI_EXTRA_FILE_LIST))\n@@ -179,1 +171,0 @@\n-    STATIC_LIB_EXCLUDE_OBJS := $(LIBJLI_STATIC_EXCLUDE_OBJS), \\\n","filename":"make\/modules\/java.base\/lib\/CoreLibraries.gmk","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -165,8 +165,0 @@\n-  # These are the object files provided by the awt native\n-  # library. Do not include these external (non-awt_headless library)\n-  # objects in the static library. When statically linking the java\n-  # launcher with all JDK and VM static libraries, we use the\n-  # --whole-archive linker option. The duplicate objects in different\n-  # static libraries cause linking errors due to duplicate symbols.\n-  LIBAWT_HEADLESS_STATIC_EXCLUDE_OBJS := systemScale.o\n-\n@@ -185,1 +177,0 @@\n-      STATIC_LIB_EXCLUDE_OBJS := $(LIBAWT_HEADLESS_STATIC_EXCLUDE_OBJS), \\\n@@ -221,8 +212,0 @@\n-  # These are the object files provided by the awt native\n-  # library. Do not include these external (non-awt_xawt library)\n-  # objects in the static library. When statically linking the java\n-  # launcher with all JDK and VM static libraries, we use the\n-  # --whole-archive linker option. The duplicate objects in different\n-  # static libraries cause linking errors due to duplicate symbols.\n-  LIBAWT_XAWT_STATIC_EXCLUDE_OBJS := systemScale.o\n-\n@@ -276,1 +259,0 @@\n-      STATIC_LIB_EXCLUDE_OBJS := $(LIBAWT_XAWT_STATIC_EXCLUDE_OBJS), \\\n","filename":"make\/modules\/java.desktop\/lib\/AwtLibraries.gmk","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -63,2 +63,2 @@\n-        java.base:libjava \\\n-        java.base:libjvm, \\\n+        java.base:libjava, \\\n+    JDK_LIBS := java.base:libjvm, \\\n","filename":"make\/modules\/jdk.jdwp.agent\/Lib.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -460,3 +460,3 @@\n-#ifdef STATIC_BUILD\n-    strcat(buf, \"\/lib\");\n-#endif\n+    if (vm_is_statically_linked()) {\n+      strcat(buf, \"\/lib\");\n+    }\n@@ -1080,3 +1080,4 @@\n-#ifdef STATIC_BUILD\n-  return os::get_default_process_handle();\n-#else\n+  if (vm_is_statically_linked()) {\n+    return os::get_default_process_handle();\n+  }\n+\n@@ -1086,1 +1087,0 @@\n-#endif \/\/ STATIC_BUILD\n@@ -1090,3 +1090,4 @@\n-#ifdef STATIC_BUILD\n-  return os::get_default_process_handle();\n-#else\n+  if (vm_is_statically_linked()) {\n+    return os::get_default_process_handle();\n+  }\n+\n@@ -1256,1 +1257,0 @@\n-#endif \/\/ STATIC_BUILD\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -579,2 +579,9 @@\n-    \/\/ Found the full path to libjvm.so.\n-    \/\/ Now cut the path to <java_home>\/jre if we can.\n+    \/\/ Found the full path to the binary. Note the code\n+    \/\/ is based on the known JDK directory structure:\n+    \/\/\n+    \/\/   <jdk_path>\/lib\/{client|server|hotspot}\/libjvm.so\n+    \/\/\n+    \/\/ or\n+    \/\/\n+    \/\/   <jdk_path>\/bin\/<static_binary>\n+#define JVM_LIB_NAME \"libjvm.so\"\n@@ -583,5 +590,11 @@\n-      *pslash = '\\0';            \/\/ Get rid of \/libjvm.so.\n-    }\n-    pslash = strrchr(buf, '\/');\n-    if (pslash != nullptr) {\n-      *pslash = '\\0';            \/\/ Get rid of \/{client|server|hotspot}.\n+      if (strncmp(pslash + 1, JVM_LIB_NAME, strlen(JVM_LIB_NAME)) == 0) {\n+        \/\/ Binary name is libjvm.so. Get rid of \/libjvm.so.\n+        *pslash = '\\0';\n+      }\n+\n+      \/\/ Get rid of \/{client|server|hotspot}, if binary is libjvm.so.\n+      \/\/ Or, cut off \/<binary_name>.\n+      pslash = strrchr(buf, '\/');\n+      if (pslash != nullptr) {\n+        *pslash = '\\0';\n+      }\n@@ -591,0 +604,2 @@\n+    \/\/ Get rid of \/lib, if binary is libjvm.so.\n+    \/\/ Or, cut off \/bin.\n@@ -594,1 +609,1 @@\n-        *pslash = '\\0';        \/\/ Get rid of \/lib.\n+        *pslash = '\\0';\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":23,"deletions":8,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -769,0 +769,6 @@\n+void* os::lookup_function(const char* name) {\n+  \/\/ This returns the global symbol in the main executable and its dependencies,\n+  \/\/ as well as shared objects dynamically loaded with RTLD_GLOBAL flag.\n+  return dlsym(RTLD_DEFAULT, name);\n+}\n+\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -952,0 +952,5 @@\n+  if (vm_is_statically_linked()) {\n+    CanonicalizeEntry = CAST_TO_FN_PTR(canonicalize_fn_t, os::lookup_function(\"JDK_Canonicalize\"));\n+    return;\n+  }\n+\n@@ -962,0 +967,9 @@\n+\n+  if (vm_is_statically_linked()) {\n+      JImageOpen = CAST_TO_FN_PTR(JImageOpen_t, os::lookup_function(\"JIMAGE_Open\"));\n+      JImageClose = CAST_TO_FN_PTR(JImageClose_t, os::lookup_function(\"JIMAGE_Close\"));\n+      JImageFindResource = CAST_TO_FN_PTR(JImageFindResource_t, os::lookup_function(\"JIMAGE_FindResource\"));\n+      JImageGetResource = CAST_TO_FN_PTR(JImageGetResource_t, os::lookup_function(\"JIMAGE_GetResource\"));\n+      return;\n+    }\n+\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -87,0 +87,1 @@\n+  void *lib_handle = nullptr;\n@@ -88,8 +89,12 @@\n-  char buffer[JVM_MAXPATHLEN];\n-  char ebuf[1024];\n-  if (!os::dll_locate_lib(buffer, sizeof(buffer), Arguments::get_dll_dir(), \"verify\"))\n-    return nullptr; \/\/ Caller will throw VerifyError\n-\n-  void *lib_handle = os::dll_load(buffer, ebuf, sizeof(ebuf));\n-  if (lib_handle == nullptr)\n-    return nullptr; \/\/ Caller will throw VerifyError\n+  if (vm_is_statically_linked()) {\n+    lib_handle = os::get_default_process_handle();\n+  } else {\n+    char buffer[JVM_MAXPATHLEN];\n+    char ebuf[1024];\n+    if (!os::dll_locate_lib(buffer, sizeof(buffer), Arguments::get_dll_dir(), \"verify\"))\n+      return nullptr; \/\/ Caller will throw VerifyError\n+\n+    lib_handle = os::dll_load(buffer, ebuf, sizeof(ebuf));\n+    if (lib_handle == nullptr)\n+      return nullptr; \/\/ Caller will throw VerifyError\n+  }\n","filename":"src\/hotspot\/share\/classfile\/verifier.cpp","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,1 @@\n+#include \"runtime\/java.hpp\"\n@@ -788,7 +789,7 @@\n-#ifdef STATIC_BUILD\n-  char* p = strrchr(buf, '\/');\n-  *p = '\\0';\n-  strcat(p, \"\/lib\/\");\n-  lib_offset = jvm_offset = (int)strlen(buf);\n-#else\n-  {\n+\n+  if (vm_is_statically_linked()) {\n+    char* p = strrchr(buf, '\/');\n+    *p = '\\0';\n+    strcat(p, \"\/lib\/\");\n+    lib_offset = jvm_offset = (int)strlen(buf);\n+  } else {\n@@ -808,1 +809,0 @@\n-#endif\n","filename":"src\/hotspot\/share\/compiler\/disassembler.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -180,0 +180,3 @@\n+JNIEXPORT jboolean JNICALL\n+JVM_IsStaticallyLinked(void);\n+\n","filename":"src\/hotspot\/share\/include\/jvm.h","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3486,0 +3486,4 @@\n+JVM_ENTRY_NO_ENV(jboolean, JVM_IsStaticallyLinked(void))\n+  return vm_is_statically_linked();\n+JVM_END\n+\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -62,0 +62,3 @@\n+\/\/ This is defined in linkType.cpp due to linking restraints\n+extern bool vm_is_statically_linked();\n+\n","filename":"src\/hotspot\/share\/runtime\/java.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"runtime\/java.hpp\"\n+\n+\/\/ This is in a separate file since it will need to be compiled to two different\n+\/\/ object files, depending on if we are going to build a static or a dynamic\n+\/\/ library.\n+\n+bool vm_is_statically_linked(void) {\n+#ifdef STATIC_BUILD\n+  return JNI_TRUE;\n+#else\n+  return JNI_FALSE;\n+#endif\n+}\n","filename":"src\/hotspot\/share\/runtime\/linkType.cpp","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"},{"patch":"@@ -521,0 +521,5 @@\n+    if (vm_is_statically_linked()) {\n+      _native_java_library = get_default_process_handle();\n+      return _native_java_library;\n+    }\n+\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -753,0 +753,3 @@\n+  \/\/ Lookup the named function. This is used by the static JDK.\n+  static void* lookup_function(const char* name);\n+\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,0 +63,4 @@\n+  if (vm_is_statically_linked()) {\n+    return os::lookup_function(name);\n+  }\n+\n@@ -90,7 +94,14 @@\n-  if (os::dll_locate_lib(&path[0], sizeof path, Arguments::get_dll_dir(), \"zip\")) {\n-    char ebuf[1024];\n-    _zip_handle = os::dll_load(&path[0], &ebuf[0], sizeof ebuf);\n-  }\n-  if (_zip_handle == nullptr) {\n-    if (vm_exit_on_failure) {\n-      vm_exit_during_initialization(\"Unable to load zip library\", &path[0]);\n+\n+  if (vm_is_statically_linked()) {\n+    _zip_handle = os::get_default_process_handle();\n+  } else {\n+    \/\/ Load the libzip shared library and lookup the needed functions.\n+    if (os::dll_locate_lib(&path[0], sizeof path, Arguments::get_dll_dir(), \"zip\")) {\n+      char ebuf[1024];\n+      _zip_handle = os::dll_load(&path[0], &ebuf[0], sizeof ebuf);\n+    }\n+    if (_zip_handle == nullptr) {\n+      if (vm_exit_on_failure) {\n+        vm_exit_during_initialization(\"Unable to load zip library\", &path[0]);\n+      }\n+      return;\n@@ -98,1 +109,0 @@\n-    return;\n@@ -100,0 +110,1 @@\n+\n","filename":"src\/hotspot\/share\/utilities\/zipLibrary.cpp","additions":20,"deletions":9,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -372,12 +372,13 @@\n-    \/* Find out where the JRE is that we will be using. *\/\n-    if (!GetJREPath(jrepath, so_jrepath, JNI_FALSE) ) {\n-        JLI_ReportErrorMessage(JRE_ERROR1);\n-        exit(2);\n-    }\n-    JLI_Snprintf(jvmcfg, so_jvmcfg, \"%s%slib%sjvm.cfg\",\n-                 jrepath, FILESEP, FILESEP);\n-    \/* Find the specified JVM type *\/\n-    if (ReadKnownVMs(jvmcfg, JNI_FALSE) < 1) {\n-        JLI_ReportErrorMessage(CFG_ERROR7);\n-        exit(1);\n-    }\n+    if (!JLI_IsStaticallyLinked()) {\n+        \/* Find out where the JRE is that we will be using. *\/\n+        if (!GetJREPath(jrepath, so_jrepath, JNI_FALSE) ) {\n+            JLI_ReportErrorMessage(JRE_ERROR1);\n+            exit(2);\n+        }\n+        JLI_Snprintf(jvmcfg, so_jvmcfg, \"%s%slib%sjvm.cfg\",\n+                    jrepath, FILESEP, FILESEP);\n+        \/* Find the specified JVM type *\/\n+        if (ReadKnownVMs(jvmcfg, JNI_FALSE) < 1) {\n+            JLI_ReportErrorMessage(CFG_ERROR7);\n+            exit(1);\n+        }\n@@ -385,6 +386,6 @@\n-    jvmpath[0] = '\\0';\n-    jvmtype = CheckJvmType(pargc, pargv, JNI_FALSE);\n-    if (JLI_StrCmp(jvmtype, \"ERROR\") == 0) {\n-        JLI_ReportErrorMessage(CFG_ERROR9);\n-        exit(4);\n-    }\n+        jvmpath[0] = '\\0';\n+        jvmtype = CheckJvmType(pargc, pargv, JNI_FALSE);\n+        if (JLI_StrCmp(jvmtype, \"ERROR\") == 0) {\n+            JLI_ReportErrorMessage(CFG_ERROR9);\n+            exit(4);\n+        }\n@@ -392,3 +393,4 @@\n-    if (!GetJVMPath(jrepath, jvmtype, jvmpath, so_jvmpath)) {\n-        JLI_ReportErrorMessage(CFG_ERROR8, jvmtype, jvmpath);\n-        exit(4);\n+        if (!GetJVMPath(jrepath, jvmtype, jvmpath, so_jvmpath)) {\n+            JLI_ReportErrorMessage(CFG_ERROR8, jvmtype, jvmpath);\n+            exit(4);\n+        }\n@@ -431,3 +433,3 @@\n-#ifdef STATIC_BUILD\n-    return JNI_TRUE;\n-#else\n+    if (JLI_IsStaticallyLinked()) {\n+        return JNI_TRUE;\n+    }\n@@ -441,1 +443,0 @@\n-#endif\n@@ -454,5 +455,11 @@\n-#ifdef STATIC_BUILD\n-        char jvm_cfg[MAXPATHLEN];\n-        JLI_Snprintf(jvm_cfg, sizeof(jvm_cfg), \"%s\/lib\/jvm.cfg\", path);\n-        if (access(jvm_cfg, F_OK) == 0) {\n-            return JNI_TRUE;\n+        if (JLI_IsStaticallyLinked()) {\n+            char jvm_cfg[MAXPATHLEN];\n+            JLI_Snprintf(jvm_cfg, sizeof(jvm_cfg), \"%s\/lib\/jvm.cfg\", path);\n+            if (access(jvm_cfg, F_OK) == 0) {\n+                return JNI_TRUE;\n+            }\n+        } else {\n+            JLI_Snprintf(libjava, sizeof(libjava), \"%s\/lib\/\" JAVA_DLL, path);\n+            if (access(libjava, F_OK) == 0) {\n+                return JNI_TRUE;\n+            }\n@@ -460,6 +467,0 @@\n-#else\n-        JLI_Snprintf(libjava, sizeof(libjava), \"%s\/lib\/\" JAVA_DLL, path);\n-        if (access(libjava, F_OK) == 0) {\n-            return JNI_TRUE;\n-        }\n-#endif\n@@ -484,15 +485,17 @@\n-#ifdef STATIC_BUILD\n-    char jvm_cfg[MAXPATHLEN];\n-    char *p = NULL;\n-    strncpy(jvm_cfg, selfInfo.dli_fname, MAXPATHLEN);\n-    p = strrchr(jvm_cfg, '\/'); *p = '\\0';\n-    p = strrchr(jvm_cfg, '\/');\n-    if (strcmp(p, \"\/.\") == 0) {\n-      *p = '\\0';\n-      p = strrchr(jvm_cfg, '\/'); *p = '\\0';\n-    }\n-    else *p = '\\0';\n-    strncpy(path, jvm_cfg, pathsize);\n-    strncat(jvm_cfg, \"\/lib\/jvm.cfg\", MAXPATHLEN);\n-    if (access(jvm_cfg, F_OK) == 0) {\n-      return JNI_TRUE;\n+    if (JLI_IsStaticallyLinked()) {\n+        char jvm_cfg[MAXPATHLEN];\n+        char *p = NULL;\n+        strncpy(jvm_cfg, selfInfo.dli_fname, MAXPATHLEN);\n+        p = strrchr(jvm_cfg, '\/'); *p = '\\0';\n+        p = strrchr(jvm_cfg, '\/');\n+        if (strcmp(p, \"\/.\") == 0) {\n+            *p = '\\0';\n+            p = strrchr(jvm_cfg, '\/'); *p = '\\0';\n+        } else {\n+          *p = '\\0';\n+        }\n+        strncpy(path, jvm_cfg, pathsize);\n+        strncat(jvm_cfg, \"\/lib\/jvm.cfg\", MAXPATHLEN);\n+        if (access(jvm_cfg, F_OK) == 0) {\n+           return JNI_TRUE;\n+        }\n@@ -500,1 +503,0 @@\n-#endif\n@@ -552,5 +554,6 @@\n-#ifndef STATIC_BUILD\n-    libjvm = dlopen(jvmpath, RTLD_NOW + RTLD_GLOBAL);\n-#else\n-    libjvm = dlopen(NULL, RTLD_FIRST);\n-#endif\n+    if (JLI_IsStaticallyLinked()) {\n+        libjvm = dlopen(NULL, RTLD_FIRST);\n+    } else {\n+        libjvm = dlopen(jvmpath, RTLD_NOW + RTLD_GLOBAL);\n+    }\n+\n@@ -606,2 +609,0 @@\n-\n-#ifdef STATIC_BUILD\n@@ -609,5 +610,6 @@\n-        fptr = (void *)&SetExecname;\n-#else\n-        int (*fptr)();\n-        fptr = (int (*)())dlsym(RTLD_DEFAULT, \"main\");\n-#endif\n+\n+        if (JLI_IsStaticallyLinked()) {\n+            fptr = (void *)&SetExecname;\n+        } else {\n+            fptr = dlsym(RTLD_DEFAULT, \"main\");\n+        }\n","filename":"src\/java.base\/macosx\/native\/libjli\/java_md_macosx.m","additions":67,"deletions":65,"binary":false,"changes":132,"status":"modified"},{"patch":"@@ -116,0 +116,3 @@\n+\/\/ This is defined in link_type.c due to linking restraints\n+jboolean JLI_IsStaticallyLinked();\n+\n","filename":"src\/java.base\/share\/native\/libjli\/jli_util.h","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"jni.h\"\n+\n+\/\/ This is in a separate file since it will need to be compiled to two different\n+\/\/ object files, depending on if we are going to build a static or a dynamic\n+\/\/ library.\n+\n+jboolean JLI_IsStaticallyLinked(void) {\n+#ifdef STATIC_BUILD\n+  return JNI_TRUE;\n+#else\n+  return JNI_FALSE;\n+#endif\n+}\n","filename":"src\/java.base\/share\/native\/libjli\/link_type.c","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"},{"patch":"@@ -316,13 +316,14 @@\n-    \/* Check to see if the jvmpath exists *\/\n-    \/* Find out where the JRE is that we will be using. *\/\n-    if (!GetJREPath(jrepath, so_jrepath, JNI_FALSE)) {\n-        JLI_ReportErrorMessage(JRE_ERROR1);\n-        exit(2);\n-    }\n-    JLI_Snprintf(jvmcfg, so_jvmcfg, \"%s%slib%sjvm.cfg\",\n-            jrepath, FILESEP, FILESEP);\n-    \/* Find the specified JVM type *\/\n-    if (ReadKnownVMs(jvmcfg, JNI_FALSE) < 1) {\n-        JLI_ReportErrorMessage(CFG_ERROR7);\n-        exit(1);\n-    }\n+    if (!JLI_IsStaticallyLinked()) {\n+        \/* Check to see if the jvmpath exists *\/\n+        \/* Find out where the JRE is that we will be using. *\/\n+        if (!GetJREPath(jrepath, so_jrepath, JNI_FALSE)) {\n+            JLI_ReportErrorMessage(JRE_ERROR1);\n+            exit(2);\n+        }\n+        JLI_Snprintf(jvmcfg, so_jvmcfg, \"%s%slib%sjvm.cfg\",\n+                jrepath, FILESEP, FILESEP);\n+        \/* Find the specified JVM type *\/\n+        if (ReadKnownVMs(jvmcfg, JNI_FALSE) < 1) {\n+            JLI_ReportErrorMessage(CFG_ERROR7);\n+            exit(1);\n+        }\n@@ -330,6 +331,6 @@\n-    jvmpath[0] = '\\0';\n-    jvmtype = CheckJvmType(pargc, pargv, JNI_FALSE);\n-    if (JLI_StrCmp(jvmtype, \"ERROR\") == 0) {\n-        JLI_ReportErrorMessage(CFG_ERROR9);\n-        exit(4);\n-    }\n+        jvmpath[0] = '\\0';\n+        jvmtype = CheckJvmType(pargc, pargv, JNI_FALSE);\n+        if (JLI_StrCmp(jvmtype, \"ERROR\") == 0) {\n+            JLI_ReportErrorMessage(CFG_ERROR9);\n+            exit(4);\n+        }\n@@ -337,3 +338,4 @@\n-    if (!GetJVMPath(jrepath, jvmtype, jvmpath, so_jvmpath)) {\n-        JLI_ReportErrorMessage(CFG_ERROR8, jvmtype, jvmpath);\n-        exit(4);\n+        if (!GetJVMPath(jrepath, jvmtype, jvmpath, so_jvmpath)) {\n+            JLI_ReportErrorMessage(CFG_ERROR8, jvmtype, jvmpath);\n+            exit(4);\n+        }\n@@ -341,0 +343,1 @@\n+\n@@ -501,0 +504,4 @@\n+        if (JLI_IsStaticallyLinked()) {\n+            return JNI_TRUE;\n+        }\n+\n@@ -542,5 +549,9 @@\n-    libjvm = dlopen(jvmpath, RTLD_NOW + RTLD_GLOBAL);\n-    if (libjvm == NULL) {\n-        JLI_ReportErrorMessage(DLL_ERROR1, __LINE__);\n-        JLI_ReportErrorMessage(DLL_ERROR2, jvmpath, dlerror());\n-        return JNI_FALSE;\n+    if (JLI_IsStaticallyLinked()) {\n+        libjvm = dlopen(NULL, RTLD_NOW + RTLD_GLOBAL);\n+    } else {\n+        libjvm = dlopen(jvmpath, RTLD_NOW + RTLD_GLOBAL);\n+        if (libjvm == NULL) {\n+            JLI_ReportErrorMessage(DLL_ERROR1, __LINE__);\n+            JLI_ReportErrorMessage(DLL_ERROR2, jvmpath, dlerror());\n+            return JNI_FALSE;\n+        }\n@@ -623,6 +634,9 @@\n-        if (!GetJREPath(jrePath, sizeof(jrePath), JNI_FALSE)) {\n-            JLI_ReportErrorMessage(JRE_ERROR1);\n-            return NULL;\n-        }\n-        ret = JLI_Snprintf(splashPath, sizeof(splashPath), \"%s\/lib\/%s\",\n-                     jrePath, SPLASHSCREEN_SO);\n+        if (JLI_IsStaticallyLinked()) {\n+            hSplashLib = dlopen(NULL, RTLD_LAZY);\n+        } else {\n+            if (!GetJREPath(jrePath, sizeof(jrePath), JNI_FALSE)) {\n+                JLI_ReportErrorMessage(JRE_ERROR1);\n+                return NULL;\n+            }\n+            ret = JLI_Snprintf(splashPath, sizeof(splashPath), \"%s\/lib\/%s\",\n+                        jrePath, SPLASHSCREEN_SO);\n@@ -630,7 +644,9 @@\n-        if (ret >= (int) sizeof(splashPath)) {\n-            JLI_ReportErrorMessage(JRE_ERROR11);\n-            return NULL;\n-        }\n-        if (ret < 0) {\n-            JLI_ReportErrorMessage(JRE_ERROR13);\n-            return NULL;\n+            if (ret >= (int) sizeof(splashPath)) {\n+                JLI_ReportErrorMessage(JRE_ERROR11);\n+                return NULL;\n+            }\n+            if (ret < 0) {\n+                JLI_ReportErrorMessage(JRE_ERROR13);\n+                return NULL;\n+            }\n+            hSplashLib = dlopen(splashPath, RTLD_LAZY | RTLD_GLOBAL);\n@@ -638,1 +654,0 @@\n-        hSplashLib = dlopen(splashPath, RTLD_LAZY | RTLD_GLOBAL);\n","filename":"src\/java.base\/unix\/native\/libjli\/java_md.c","additions":56,"deletions":41,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -119,7 +119,1 @@\n-#ifndef STATIC_BUILD\n-    \/* Get address of this library and the directory containing it. *\/\n-    dladdr((void *)AWT_OnLoad, &dlinfo);\n-    realpath((char *)dlinfo.dli_fname, buf);\n-    len = strlen(buf);\n-    p = strrchr(buf, '\/');\n-#endif\n+\n@@ -132,1 +126,1 @@\n-        tk = LWAWT_PATH;\n+    tk = LWAWT_PATH;\n@@ -134,2 +128,1 @@\n-        tk = XAWT_PATH;\n-#endif\n+    tk = XAWT_PATH;\n@@ -137,1 +130,0 @@\n-#ifndef MACOSX\n@@ -143,11 +135,20 @@\n-#ifndef STATIC_BUILD\n-    \/* Calculate library name to load *\/\n-    strncpy(p, tk, MAXPATHLEN-len-1);\n-#endif\n-\n-#ifndef STATIC_BUILD\n-    jstring jbuf = JNU_NewStringPlatform(env, buf);\n-    CHECK_EXCEPTION_FATAL(env, \"Could not allocate library name\");\n-    JNU_CallStaticMethodByName(env, NULL, \"java\/lang\/System\", \"load\",\n-                               \"(Ljava\/lang\/String;)V\",\n-                               jbuf);\n+    if (JVM_IsStaticallyLinked()) {\n+        awtHandle = dlopen(NULL, RTLD_LAZY);\n+    } else {\n+        \/* Get address of this library and the directory containing it. *\/\n+        dladdr((void *)AWT_OnLoad, &dlinfo);\n+        realpath((char *)dlinfo.dli_fname, buf);\n+        len = strlen(buf);\n+        p = strrchr(buf, '\/');\n+\n+        \/* Calculate library name to load *\/\n+        strncpy(p, tk, MAXPATHLEN-len-1);\n+\n+        jstring jbuf = JNU_NewStringPlatform(env, buf);\n+        CHECK_EXCEPTION_FATAL(env, \"Could not allocate library name\");\n+        JNU_CallStaticMethodByName(env, NULL, \"java\/lang\/System\", \"load\",\n+                                   \"(Ljava\/lang\/String;)V\",\n+                                   jbuf);\n+\n+        awtHandle = dlopen(buf, RTLD_LAZY | RTLD_GLOBAL);\n+    }\n@@ -155,2 +156,0 @@\n-    awtHandle = dlopen(buf, RTLD_LAZY | RTLD_GLOBAL);\n-#endif\n","filename":"src\/java.desktop\/unix\/native\/libawt\/awt\/awt_LoadLibrary.c","additions":24,"deletions":25,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,4 +26,0 @@\n-#ifdef STATIC_BUILD\n-#define getAttribute JarGetAttribute\n-#endif\n-\n","filename":"src\/java.instrument\/share\/native\/libinstrument\/JarFacade.h","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,6 +37,0 @@\n-#ifdef STATIC_BUILD\n-#define allocate instAllocate\n-#define deallocate instDeallocate\n-#endif\n-\n-\n","filename":"src\/java.instrument\/share\/native\/libinstrument\/Utilities.h","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+#include \"jvm.h\"\n@@ -124,1 +125,5 @@\n-#ifndef STATIC_BUILD\n+\n+    if (JVM_IsStaticallyLinked()) {\n+        return (dbgsysLoadLibrary(NULL, buf, sizeof(buf)));\n+    }\n+\n@@ -148,3 +153,0 @@\n-#else\n-    return (dbgsysLoadLibrary(NULL, buf, sizeof(buf)));\n-#endif\n","filename":"src\/jdk.jdwp.agent\/share\/native\/libjdwp\/transport.c","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"}]}