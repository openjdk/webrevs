{"files":[{"patch":"@@ -30,0 +30,1 @@\n+ * @library \/test\/lib\n@@ -40,2 +41,0 @@\n-import java.io.BufferedReader;\n-import java.io.File;\n@@ -45,0 +44,4 @@\n+import java.util.concurrent.TimeoutException;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n@@ -96,7 +99,4 @@\n-        String javaPath = System.getProperty(\"java.home\", \"\");\n-\n-        Process proc = new ProcessBuilder(\n-                javaPath + File.separator + \"bin\" + File.separator + \"java\",\n-                \"-cp\", System.getProperty(\"test.classes\", \".\"),\n-                \"ClipboardSecurity\", \"client\"\n-        ).start();\n+        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(\n+                ClipboardSecurity.class.getName(),\n+                \"child\"\n+        );\n@@ -104,3 +104,2 @@\n-        ProcessResults pres = ProcessResults.doWaitFor(proc, 15);\n-\n-        System.out.println(\"WAIT COMPLETE\");\n+        Process process = ProcessTools.startProcess(\"Child\", pb);\n+        OutputAnalyzer outputAnalyzer = new OutputAnalyzer(process);\n@@ -108,10 +107,2 @@\n-        if (!pres.stderr.isEmpty()) {\n-            System.err.println(\"========= Child VM System.err ========\");\n-            System.err.print(pres.stderr);\n-            System.err.println(\"======================================\");\n-        }\n-\n-        if (!pres.stdout.isEmpty()) {\n-            System.err.println(\"========= Child VM System.out ========\");\n-            System.err.print(pres.stdout);\n-            System.err.println(\"======================================\");\n+        if (!process.waitFor(15, TimeUnit.SECONDS)) {\n+            throw new TimeoutException(\"Timed out waiting for Child\");\n@@ -119,0 +110,1 @@\n+        System.out.println(\"WAIT COMPLETE\");\n@@ -120,4 +112,1 @@\n-        if (pres.exitValue != 0) {\n-            throw new RuntimeException(\"child VM failed with exit code \"\n-                    + pres.exitValue);\n-        }\n+        outputAnalyzer.shouldHaveExitValue(0);\n@@ -167,60 +156,0 @@\n-\n-class ProcessResults {\n-    public int exitValue = -1;\n-    public String stdout;\n-    public String stderr;\n-\n-    public static ProcessResults doWaitFor(Process p, int timeoutSeconds)\n-            throws Exception {\n-        ProcessResults pres = new ProcessResults();\n-\n-        InReader in = new InReader(\"I\", p.inputReader());\n-        InReader err = new InReader(\"E\", p.errorReader());\n-\n-        in.start();\n-        err.start();\n-\n-        try {\n-            if (p.waitFor(timeoutSeconds, TimeUnit.SECONDS)) {\n-                pres.exitValue = p.exitValue();\n-            } else {\n-                System.err.println(\"Process timed out\");\n-                p.destroyForcibly();\n-            }\n-        } finally {\n-            in.join(500);\n-            err.join(500);\n-        }\n-\n-        pres.stdout = in.output.toString();\n-        pres.stderr = err.output.toString();\n-\n-        return pres;\n-    }\n-\n-    static class InReader extends Thread {\n-        private final String prefix;\n-        private final BufferedReader reader;\n-        private final StringBuffer output = new StringBuffer();\n-\n-        public InReader(String prefix, BufferedReader reader) {\n-            this.prefix = prefix;\n-            this.reader = reader;\n-        }\n-\n-        @Override\n-        public void run() {\n-            String line;\n-            try {\n-                while ((line = reader.readLine()) != null) {\n-                    System.out.printf(\"> %s: %s\\n\", prefix, line);\n-                    output.append(line).append(System.lineSeparator());\n-                }\n-            } catch (IOException e) {\n-                System.out.printf(\"> %s: %s\\n\", prefix, e);\n-                output.append(\"Error reading: \")\n-                      .append(e).append(System.lineSeparator());\n-            }\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/awt\/Clipboard\/ClipboardSecurity.java","additions":15,"deletions":86,"binary":false,"changes":101,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @library \/test\/lib\n@@ -40,2 +41,0 @@\n-import java.io.BufferedReader;\n-import java.io.File;\n@@ -48,0 +47,5 @@\n+import java.util.concurrent.TimeoutException;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n@@ -65,1 +69,4 @@\n-        String javaPath = System.getProperty(\"java.home\", \"\");\n+        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(\n+                SystemClipboardTest.class.getName(),\n+                \"child\"\n+        );\n@@ -67,5 +74,2 @@\n-        Process process = new ProcessBuilder(\n-                javaPath + File.separator + \"bin\" + File.separator + \"java\",\n-                \"-cp\", System.getProperty(\"test.classes\", \".\"),\n-                \"SystemClipboardTest\", \"child\"\n-                ).start();\n+        Process process = ProcessTools.startProcess(\"Child\", pb);\n+        OutputAnalyzer outputAnalyzer = new OutputAnalyzer(process);\n@@ -73,6 +77,2 @@\n-        ProcessResults pres = ProcessResults.doWaitFor(process, 15);\n-\n-        if (!pres.stderr.isEmpty()) {\n-            System.err.println(\"========= Child VM System.err ========\");\n-            System.err.print(pres.stderr);\n-            System.err.println(\"======================================\");\n+        if (!process.waitFor(15, TimeUnit.SECONDS)) {\n+            throw new TimeoutException(\"Timed out waiting for Child\");\n@@ -81,9 +81,1 @@\n-        if (!pres.stdout.isEmpty()) {\n-            System.err.println(\"========= Child VM System.out ========\");\n-            System.err.print(pres.stdout);\n-            System.err.println(\"======================================\");\n-        }\n-\n-        if (pres.exitValue != 0) {\n-            throw new RuntimeException(\"child VM failed with exit code \" + pres.exitValue);\n-        }\n+        outputAnalyzer.shouldHaveExitValue(0);\n@@ -234,61 +226,0 @@\n-\n-}\n-\n-class ProcessResults {\n-    public int exitValue = -1;\n-    public String stdout;\n-    public String stderr;\n-\n-    public static ProcessResults doWaitFor(Process p, int timeoutSeconds)\n-            throws Exception {\n-        ProcessResults pres = new ProcessResults();\n-\n-        InReader in = new InReader(\"I\", p.inputReader());\n-        InReader err = new InReader(\"E\", p.errorReader());\n-\n-        in.start();\n-        err.start();\n-\n-        try {\n-            if (p.waitFor(timeoutSeconds, TimeUnit.SECONDS)) {\n-                pres.exitValue = p.exitValue();\n-            } else {\n-                System.err.println(\"Process timed out\");\n-                p.destroyForcibly();\n-            }\n-        } finally {\n-            in.join(500);\n-            err.join(500);\n-        }\n-\n-        pres.stdout = in.output.toString();\n-        pres.stderr = err.output.toString();\n-\n-        return pres;\n-    }\n-\n-    static class InReader extends Thread {\n-        private final String prefix;\n-        private final BufferedReader reader;\n-        private final StringBuffer output = new StringBuffer();\n-\n-        public InReader(String prefix, BufferedReader reader) {\n-            this.prefix = prefix;\n-            this.reader = reader;\n-        }\n-\n-        @Override\n-        public void run() {\n-            String line;\n-            try {\n-                while ((line = reader.readLine()) != null) {\n-                    System.out.printf(\"> %s: %s\\n\", prefix, line);\n-                    output.append(line).append(System.lineSeparator());\n-                }\n-            } catch (IOException e) {\n-                System.out.printf(\"> %s: %s\\n\", prefix, e);\n-                output.append(\"Error reading: \")\n-                      .append(e).append(System.lineSeparator());\n-            }\n-        }\n-    }\n","filename":"test\/jdk\/java\/awt\/Clipboard\/GetAltContentsTest\/SystemClipboardTest.java","additions":15,"deletions":84,"binary":false,"changes":99,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @library \/test\/lib\n@@ -45,2 +46,0 @@\n-import java.io.BufferedReader;\n-import java.io.File;\n@@ -50,0 +49,3 @@\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n@@ -58,1 +60,1 @@\n-    public static void main(String[] args) {\n+    public static void main(String[] args) throws Exception {\n@@ -69,11 +71,2 @@\n-    public void start() {\n-        try {\n-            String formats = \"\";\n-\n-            String iniMsg = \"Testing all native image formats from \\n\" +\n-                \"SystemFlavorMap.getNativesForFlavor(DataFlavor.imageFlavor) \\n\";\n-\n-            for (int i = 0; i < imPr.formats.length; i++) {\n-                formats += (imPr.formats[i] + \" \");\n-            }\n-            System.out.println(iniMsg + formats);\n+    public void start() throws Exception {\n+        String formats = \"\";\n@@ -81,0 +74,2 @@\n+        String iniMsg = \"Testing all native image formats from \\n\" +\n+            \"SystemFlavorMap.getNativesForFlavor(DataFlavor.imageFlavor) \\n\";\n@@ -82,7 +77,4 @@\n-            String javaPath = System.getProperty(\"java.home\", \"\");\n-\n-            Process process = new ProcessBuilder(\n-                    javaPath + File.separator + \"bin\" + File.separator + \"java\",\n-                    \"-cp\", System.getProperty(\"test.classes\", \".\"),\n-                    \"TImageConsumer\", formats\n-            ).start();\n+        for (int i = 0; i < imPr.formats.length; i++) {\n+            formats += (imPr.formats[i] + \" \");\n+        }\n+        System.out.println(iniMsg + formats);\n@@ -90,2 +82,3 @@\n-            ProcessResults pres = ProcessResults.doWaitFor(process, 15);\n-            returnCode = pres.exitValue;\n+        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(\n+                TImageConsumer.class.getName(), formats\n+        );\n@@ -93,5 +86,2 @@\n-            if (!pres.stderr.isEmpty()) {\n-                System.err.println(\"========= Child VM System.err ========\");\n-                System.err.print(pres.stderr);\n-                System.err.println(\"======================================\");\n-            }\n+        Process process = ProcessTools.startProcess(\"Child\", pb);\n+        OutputAnalyzer outputAnalyzer = new OutputAnalyzer(process);\n@@ -99,7 +89,4 @@\n-            if (!pres.stdout.isEmpty()) {\n-                System.err.println(\"========!= Child VM System.out ========\");\n-                System.err.print(pres.stdout);\n-                System.err.println(\"======================================\");\n-            }\n-        } catch (Throwable e) {\n-            e.printStackTrace();\n+        if (!process.waitFor(15, TimeUnit.SECONDS)) {\n+            returnCode = CODE_NOT_RETURNED;\n+        } else {\n+            returnCode = outputAnalyzer.getExitValue();\n@@ -109,24 +96,6 @@\n-        case CODE_NOT_RETURNED:\n-            System.err.println(\"Child VM: failed to start\");\n-            break;\n-        case CODE_FAILURE:\n-            System.err.println(\"Child VM: abnormal termination\");\n-            break;\n-        case CODE_CONSUMER_TEST_FAILED:\n-            throw new RuntimeException(\"test failed: images in some \" +\n-                \"native formats are not transferred properly: \" +\n-                \"see output of child VM\");\n-        default:\n-            boolean failed = false;\n-            String passedFormats = \"\";\n-            String failedFormats = \"\";\n-\n-            for (int i = 0; i < imPr.passedArray.length; i++) {\n-               if (imPr.passedArray[i]) passedFormats += imPr.formats[i] + \" \";\n-               else {\n-                   failed = true;\n-                   failedFormats += imPr.formats[i] + \" \";\n-               }\n-            }\n-            if (failed) {\n-                throw new RuntimeException(\"test failed: images in following \" +\n+            case CODE_NOT_RETURNED:\n+                throw new RuntimeException(\"Child VM: failed to start\");\n+            case CODE_FAILURE:\n+                throw new RuntimeException(\"Child VM: abnormal termination\");\n+            case CODE_CONSUMER_TEST_FAILED:\n+                throw new RuntimeException(\"test failed: images in some \" +\n@@ -134,59 +103,20 @@\n-                    failedFormats);\n-            } else {\n-                System.err.println(\"images in following native formats are \" +\n-                    \"transferred properly: \" + passedFormats);\n-            }\n-        }\n-    }\n-}\n-\n-class ProcessResults {\n-    public int exitValue = -1;\n-    public String stdout;\n-    public String stderr;\n-\n-    public static ProcessResults doWaitFor(Process p, int timeoutSeconds)\n-            throws Exception {\n-        ProcessResults pres = new ProcessResults();\n-\n-        InReader in = new InReader(\"I\", p.inputReader());\n-        InReader err = new InReader(\"E\", p.errorReader());\n-\n-        in.start();\n-        err.start();\n-\n-        try {\n-            if (p.waitFor(timeoutSeconds, TimeUnit.SECONDS)) {\n-                pres.exitValue = p.exitValue();\n-            } else {\n-                System.err.println(\"Process timed out\");\n-                p.destroyForcibly();\n-            }\n-        } finally {\n-            in.join(500);\n-            err.join(500);\n-        }\n-\n-        pres.stdout = in.output.toString();\n-        pres.stderr = err.output.toString();\n-\n-        return pres;\n-    }\n-\n-    static class InReader extends Thread {\n-        private final String prefix;\n-        private final BufferedReader reader;\n-        private final StringBuffer output = new StringBuffer();\n-\n-        public InReader(String prefix, BufferedReader reader) {\n-            this.prefix = prefix;\n-            this.reader = reader;\n-        }\n-\n-        @Override\n-        public void run() {\n-            String line;\n-            try {\n-                while ((line = reader.readLine()) != null) {\n-                    System.out.printf(\"> %s: %s\\n\", prefix, line);\n-                    output.append(line).append(System.lineSeparator());\n+                    \"see output of child VM\");\n+            default:\n+                boolean failed = false;\n+                String passedFormats = \"\";\n+                String failedFormats = \"\";\n+\n+                for (int i = 0; i < imPr.passedArray.length; i++) {\n+                   if (imPr.passedArray[i]) passedFormats += imPr.formats[i] + \" \";\n+                   else {\n+                       failed = true;\n+                       failedFormats += imPr.formats[i] + \" \";\n+                   }\n+                }\n+                if (failed) {\n+                    throw new RuntimeException(\"test failed: images in following \" +\n+                        \"native formats are not transferred properly: \" +\n+                        failedFormats);\n+                } else {\n+                    System.err.println(\"images in following native formats are \" +\n+                        \"transferred properly: \" + passedFormats);\n@@ -194,5 +124,0 @@\n-            } catch (IOException e) {\n-                System.out.printf(\"> %s: %s\\n\", prefix, e);\n-                output.append(\"Error reading: \")\n-                      .append(e).append(System.lineSeparator());\n-            }\n","filename":"test\/jdk\/java\/awt\/Clipboard\/ImageTransferTest.java","additions":48,"deletions":123,"binary":false,"changes":171,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @library \/test\/lib\n@@ -39,2 +40,0 @@\n-import java.io.BufferedReader;\n-import java.io.File;\n@@ -43,0 +42,4 @@\n+import java.util.concurrent.TimeoutException;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n@@ -109,0 +112,2 @@\n+        ProcessBuilder pb = ProcessTools\n+                .createTestJavaProcessBuilder(SystemClipboardOwner.class.getName());\n@@ -110,7 +115,2 @@\n-        String javaPath = System.getProperty(\"java.home\", \"\");\n-\n-        Process process = new ProcessBuilder(\n-                javaPath + File.separator + \"bin\" + File.separator + \"java\",\n-                \"-cp\", System.getProperty(\"test.classes\", \".\"),\n-                \"SystemClipboardOwner\"\n-        ).start();\n+        Process process = ProcessTools.startProcess(\"Child\", pb);\n+        OutputAnalyzer outputAnalyzer = new OutputAnalyzer(process);\n@@ -118,12 +118,2 @@\n-        ProcessResults pres = ProcessResults.doWaitFor(process, 15);\n-\n-        if (!pres.stderr.isEmpty()) {\n-            System.err.println(\"========= Child VM System.err ========\");\n-            System.err.print(pres.stderr);\n-            System.err.println(\"======================================\");\n-        }\n-\n-        if (!pres.stdout.isEmpty()) {\n-            System.err.println(\"========= Child VM System.out ========\");\n-            System.err.print(pres.stdout);\n-            System.err.println(\"======================================\");\n+        if (!process.waitFor(15, TimeUnit.SECONDS)) {\n+            throw new TimeoutException(\"Timed out waiting for Child\");\n@@ -136,3 +126,1 @@\n-        if (pres.exitValue != 0) {\n-            throw new Error(\"Unexpected exit value: \" + pres.exitValue);\n-        }\n+        outputAnalyzer.shouldHaveExitValue(0);\n@@ -185,60 +173,0 @@\n-\n-class ProcessResults {\n-    public int exitValue = -1;\n-    public String stdout;\n-    public String stderr;\n-\n-    public static ProcessResults doWaitFor(Process p, int timeoutSeconds)\n-            throws Exception {\n-        ProcessResults pres = new ProcessResults();\n-\n-        InReader in = new InReader(\"I\", p.inputReader());\n-        InReader err = new InReader(\"E\", p.errorReader());\n-\n-        in.start();\n-        err.start();\n-\n-        try {\n-            if (p.waitFor(timeoutSeconds, TimeUnit.SECONDS)) {\n-                pres.exitValue = p.exitValue();\n-            } else {\n-                System.err.println(\"Process timed out\");\n-                p.destroyForcibly();\n-            }\n-        } finally {\n-            in.join(500);\n-            err.join(500);\n-        }\n-\n-        pres.stdout = in.output.toString();\n-        pres.stderr = err.output.toString();\n-\n-        return pres;\n-    }\n-\n-    static class InReader extends Thread {\n-        private final String prefix;\n-        private final BufferedReader reader;\n-        private final StringBuffer output = new StringBuffer();\n-\n-        public InReader(String prefix, BufferedReader reader) {\n-            this.prefix = prefix;\n-            this.reader = reader;\n-        }\n-\n-        @Override\n-        public void run() {\n-            String line;\n-            try {\n-                while ((line = reader.readLine()) != null) {\n-                    System.out.printf(\"> %s: %s\\n\", prefix, line);\n-                    output.append(line).append(System.lineSeparator());\n-                }\n-            } catch (IOException e) {\n-                System.out.printf(\"> %s: %s\\n\", prefix, e);\n-                output.append(\"Error reading: \")\n-                      .append(e).append(System.lineSeparator());\n-            }\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/awt\/Clipboard\/NoDataConversionFailureTest.java","additions":12,"deletions":84,"binary":false,"changes":96,"status":"modified"}]}