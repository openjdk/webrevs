{"files":[{"patch":"@@ -2579,5 +2579,5 @@\n-    const Register in = c_rarg0;\n-    const Register out = c_rarg1;\n-    const Register key = c_rarg2;\n-    const Register counter = c_rarg3;\n-    const Register input_len = c_rarg4;\n+    const Register in                  = c_rarg0;\n+    const Register out                 = c_rarg1;\n+    const Register key                 = c_rarg2;\n+    const Register counter             = c_rarg3;\n+    const Register input_len           = c_rarg4;\n@@ -2585,1 +2585,1 @@\n-    const Register used_ptr = c_rarg6;\n+    const Register used_ptr            = c_rarg6;\n@@ -2587,6 +2587,6 @@\n-    const Register keylen = x31;\n-    const Register used = x30;\n-    const Register len = x29;\n-    const Register len32 = x28;\n-    const Register vl = t1;\n-    const Register ctr = t2;\n+    const Register keylen              = x31;\n+    const Register used                = x30;\n+    const Register len                 = x29;\n+    const Register len32               = x28;\n+    const Register vl                  = t1;\n+    const Register ctr                 = t2;\n@@ -2612,1 +2612,1 @@\n-    __ li(t0, maskIndex);\n+    __ mv(t0, maskIndex);\n@@ -2618,1 +2618,1 @@\n-    __ lwu(keylen, Address(key, arrayOopDesc::length_offset_in_bytes() - arrayOopDesc::base_offset_in_bytes(T_INT)));\n+    __ lw(keylen, Address(key, arrayOopDesc::length_offset_in_bytes() - arrayOopDesc::base_offset_in_bytes(T_INT)));\n@@ -2620,3 +2620,3 @@\n-    __ mv(t2, 52);\n-    __ blt(keylen, t2, L_aes128_loadkeys);\n-    __ beq(keylen, t2, L_aes192_loadkeys);\n+    __ mv(t0, 52);\n+    __ blt(keylen, t0, L_aes128_loadkeys);\n+    __ beq(keylen, t0, L_aes192_loadkeys);\n@@ -2636,1 +2636,1 @@\n-    Label L_slow_loop, L_encrypt_slow, L_main_loop;\n+    Label L_next, L_encrypt_next, L_main;\n@@ -2639,3 +2639,3 @@\n-    __ bind(L_slow_loop);\n-    __ mv(t2, block_size);\n-    __ bge(used, t2, L_main_loop);\n+    __ bind(L_next);\n+    __ mv(t0, block_size);\n+    __ bge(used, t0, L_main);\n@@ -2643,1 +2643,1 @@\n-    __ bind(L_encrypt_slow);\n+    __ bind(L_encrypt_next);\n@@ -2654,1 +2654,1 @@\n-    __ j(L_slow_loop);\n+    __ j(L_next);\n@@ -2658,5 +2658,5 @@\n-    \/\/ Calculate the number of 16 Bytes for CTR large block\n-    \/\/ and save the num of e32 into len32 for zvkn.\n-    \/\/ We have fewer than 16 Bytes data left saved in len.\n-    \/\/ We will Encrypt them one by one in slow path later.\n-    __ bind(L_main_loop);\n+    \/\/ Calculate the number of 16 Bytes for CTR large block as t0.\n+    \/\/ Because of zvkned need sew as e32, so we save t0 * 4 into len32.\n+    \/\/ After that we save the data length < 16 back into len,\n+    \/\/ and calculate them one by one in L_next later.\n+    __ bind(L_main);\n@@ -2668,1 +2668,2 @@\n-    \/\/ We may have fewer than 16 Bytes data at begining\n+    \/\/ We may still have fewer than 16 Bytes data at beginning.\n+    \/\/ So we need to calculate next counter and encryptedCounter\n@@ -2699,3 +2700,3 @@\n-    __ mv(t2, 52);\n-    __ blt(keylen, t2, L_aes128_loop);\n-    __ beq(keylen, t2, L_aes192_loop);\n+    __ mv(t0, 52);\n+    __ blt(keylen, t0, L_aes128_loop);\n+    __ beq(keylen, t0, L_aes192_loop);\n@@ -2726,1 +2727,1 @@\n-    \/\/ XOR the encrypted counters with the inputs\n+    \/\/ XOR the encryptedCounter with the inputs\n@@ -2738,1 +2739,1 @@\n-    \/\/ Save the encrypted_counter and next counter according to ctr\n+    \/\/ Save the encryptedCounter and next counter according to ctr\n@@ -2750,3 +2751,3 @@\n-    __ mv(t2, 52);\n-    __ blt(keylen, t2, L_aes128_loop_next);\n-    __ beq(keylen, t2, L_aes192_loop_next);\n+    __ mv(t0, 52);\n+    __ blt(keylen, t0, L_aes128_loop_next);\n+    __ beq(keylen, t0, L_aes192_loop_next);\n@@ -2775,1 +2776,1 @@\n-    __ j(L_encrypt_slow);\n+    __ j(L_encrypt_next);\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":39,"deletions":38,"binary":false,"changes":77,"status":"modified"}]}