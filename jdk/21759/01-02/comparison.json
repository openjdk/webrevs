{"files":[{"patch":"@@ -60,1 +60,0 @@\n-import jdk.javadoc.internal.html.HtmlTag;\n@@ -462,0 +461,3 @@\n+            boolean boundTypeParams = typeParams.stream()\n+                    .map(t -> getLink(linkInfo.forType(t.asType())))\n+                    .anyMatch(t -> t.charCount() > 8);\n@@ -464,1 +466,5 @@\n-                    content.add(\",\").add(HtmlTree.WBR());\n+                    if (boundTypeParams) {\n+                        content.add(\", \");\n+                    } else {\n+                        content.add(\",\").add(HtmlTree.WBR());\n+                    }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ClassWriter.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -44,1 +44,0 @@\n-import javax.lang.model.type.TypeKind;\n@@ -57,1 +56,0 @@\n-import jdk.javadoc.internal.html.HtmlTag;\n@@ -403,3 +401,3 @@\n-            boolean hasUsesOfParameterizedTypes =\n-                    vars.stream()\n-                            .anyMatch(typeMirror -> typeMirror.getKind() != TypeKind.TYPEVAR);\n+            boolean boundTypeParams = vars.stream()\n+                    .map(t -> getLink(linkInfo.forType(t)))\n+                    .anyMatch(t -> t.charCount() > 8);\n@@ -408,1 +406,1 @@\n-                    if (hasUsesOfParameterizedTypes) {\n+                    if (boundTypeParams) {\n@@ -413,3 +411,0 @@\n-                    if (linkInfo.addLineBreaksInTypeParameters()) {\n-                        links.add(Text.NL);\n-                    }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlLinkFactory.java","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -51,1 +51,0 @@\n-import jdk.javadoc.internal.html.HtmlTag;\n@@ -535,7 +534,1 @@\n-            int typeParamLength = typeParameters.charCount();\n-\n-            if (typeParamLength >= TYPE_PARAMS_MAX_INLINE_LENGTH) {\n-                target.add(HtmlTree.SPAN(HtmlStyles.typeParametersLong, typeParameters));\n-            } else {\n-                target.add(HtmlTree.SPAN(HtmlStyles.typeParameters, typeParameters));\n-            }\n+            target.add(HtmlTree.SPAN(HtmlStyles.typeParameters, typeParameters));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/Signatures.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -701,8 +701,0 @@\n-    \/**\n-     * The class of a {@code span} containing type parameters in the signature of an element,\n-     * used when the type parameters are too long to be displayed inline.\n-     * @implNote\n-     * The threshold for choosing between {@code typeParameters} and {@code typeParametersLong}\n-     * is 50 characters.\n-     *\/\n-    typeParametersLong,\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/HtmlStyles.java","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -799,1 +799,0 @@\n-.member-signature .type-parameters-long,\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/resources\/stylesheet.css","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}