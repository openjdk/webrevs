{"files":[{"patch":"@@ -0,0 +1,300 @@\n+\/*\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.imageio.plugins.jpeg;\n+\n+import java.io.InputStream;\n+import java.nio.ByteOrder;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+\n+import javax.imageio.IIOException;\n+import javax.imageio.ImageIO;\n+import javax.imageio.ImageReader;\n+import javax.imageio.event.IIOReadProgressListener;\n+import javax.imageio.metadata.IIOInvalidTreeException;\n+import javax.imageio.metadata.IIOMetadataNode;\n+import javax.imageio.stream.ImageInputStream;\n+import javax.imageio.stream.ImageOutputStream;\n+import javax.imageio.plugins.jpeg.JPEGQTable;\n+import javax.imageio.stream.MemoryCacheImageInputStream;\n+\n+import java.awt.image.BufferedImage;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.LinkedHashMap;\n+import java.util.LinkedList;\n+\n+import com.sun.imageio.plugins.tiff.TIFFImageReader;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.NamedNodeMap;\n+\n+\n+\/**\n+ * An Exif (Exchangeable Image File Format) APP1 (Application-Specific)\n+ * marker segment. This implementation only supports reading thumbnails\n+ * and the image creation time.\n+ *\/\n+class ExifMarkerSegment extends MarkerSegment {\n+\n+    static class ImageFileDirectory implements Cloneable {\n+        static class Entry implements Cloneable {\n+            final int tagNumber, dataFormat;\n+            final long componentCount, fieldValue;\n+\n+            Entry(ImageInputStream in) throws IOException {\n+                tagNumber = in.readUnsignedShort();\n+                dataFormat = in.readUnsignedShort();\n+                componentCount = in.readUnsignedInt();\n+                fieldValue = in.readUnsignedInt();\n+            }\n+\n+            @Override\n+            public String toString() {\n+                return \"Entry[ tagNumber: \" + tagNumber +\n+                        \", dataFormat: \" + dataFormat +\n+                        \", componentCount: \" + componentCount +\n+                        \", fieldValue: \" + fieldValue + \"]\";\n+            }\n+        }\n+        static final int[] bytesPerComponent = new int[] {1, 1, 1, 2, 4, 8, 1};\n+\n+        Map<Integer, Entry> entriesByTag = new LinkedHashMap<>();\n+        long nextIFD;\n+\n+        ImageFileDirectory(ImageInputStream in, long pos) throws IOException {\n+            in.seek(pos);\n+            int entryCount = in.readUnsignedShort();\n+            for (int a = 0; a < entryCount; a++) {\n+                Entry e = new Entry(in);\n+                entriesByTag.put(e.tagNumber, e);\n+            }\n+\n+            \/\/ The next 4 bytes SHOULD be the position of the next IFD.\n+\n+            \/\/ However in rare cases: the position of the next IFD header is missing. We can detect\n+            \/\/ this by checking to see if any of the IFD entries we just read appear where the\n+            \/\/ next IFD position *should* be:\n+\n+            long streamPos = in.getStreamPosition();\n+            for (Entry e : entriesByTag.values()) {\n+                int byteLength = e.dataFormat < bytesPerComponent.length ?\n+                        (int) (e.componentCount * bytesPerComponent[e.dataFormat]) :\n+                        \/\/ this is an unknown data format, so let's just assume its 1 byte\n+                        1;\n+                if (byteLength > 4) {\n+                    long valuePos = e.fieldValue;\n+                    if (valuePos <= streamPos) {\n+                        nextIFD = 0;\n+                        return;\n+                    }\n+                }\n+            }\n+\n+            nextIFD = in.readUnsignedInt();\n+        }\n+\n+        int getTagValueAsInt(int tagID) {\n+            ImageFileDirectory.Entry e = entriesByTag.get(tagID);\n+            if (e == null) {\n+                return NO_VALUE;\n+            }\n+            return (int) e.fieldValue;\n+        }\n+    }\n+\n+    private static final int NO_VALUE = -1;\n+\n+    private static final int TIFF_BIG_ENDIAN = 0x4d4d;\n+    private static final int TIFF_MAGIC = 42;\n+    private static final int TIFF_TYPE_SHORT = 3;\n+    private static final int TAG_IMAGE_WIDTH = 256;\n+    private static final int TAG_IMAGE_HEIGHT = 257;\n+    private static final int TAG_DATE_TIME = 306;\n+    private static final int TAG_JPEG_INTERCHANGE_FORMAT = 513;\n+    private static final int TAG_JPEG_INTERCHANGE_FORMAT_LENGTH = 514;\n+\n+    int thumbnailPos = -1;\n+    int thumbnailLength = -1;\n+    boolean isThumbnailJPEG;\n+\n+    int thumbnailWidth = -1;\n+    int thumbnailHeight = -1;\n+\n+    final long firstIFDOffset;\n+    final List<ImageFileDirectory> imageFileDirectories = new LinkedList<>();\n+\n+    ExifMarkerSegment(JPEGBuffer buffer) throws IOException {\n+        super(buffer);\n+        loadData(buffer);\n+\n+        ByteArrayInputStream in = new ByteArrayInputStream(data, 6, data.length - 6);\n+\n+        \/\/ we aren't actually going to read anything as an image yet, but ImageInputStream\n+        \/\/ has useful helper methods:\n+        ImageInputStream input = new MemoryCacheImageInputStream(in);\n+        input.setByteOrder(input.readUnsignedShort() == TIFF_BIG_ENDIAN ?\n+                ByteOrder.BIG_ENDIAN : ByteOrder.LITTLE_ENDIAN);\n+        if (input.readUnsignedShort() != TIFF_MAGIC) {\n+            throw new IllegalArgumentException(\"Bad magic number\");\n+        }\n+\n+        firstIFDOffset = input.readUnsignedInt();\n+        long ifdOffset = firstIFDOffset;\n+        while (ifdOffset != 0) {\n+            ImageFileDirectory ifd = new ImageFileDirectory(input, ifdOffset);\n+            imageFileDirectories.add(ifd);\n+            ifdOffset = ifd.nextIFD;\n+        }\n+\n+        if (imageFileDirectories.size() == 2) {\n+            \/\/ the thumbnail should always be described in the 2nd IFD (if it exists at all)\n+            ImageFileDirectory ifd2 = imageFileDirectories.get(1);\n+\n+            thumbnailPos = ifd2.getTagValueAsInt(TAG_JPEG_INTERCHANGE_FORMAT);\n+            thumbnailLength = ifd2.getTagValueAsInt(TAG_JPEG_INTERCHANGE_FORMAT_LENGTH);\n+            if (thumbnailPos != NO_VALUE && thumbnailLength != NO_VALUE) {\n+                \/\/ The `compression` tag (259) should also help inform whether we read this\n+                \/\/ image as a JPEG or TIFF. But in reality this is tricky: the docs say\n+                \/\/ the value for a JPEG encoding is 0x0006, but the `jdk_8160327-plastic-wrap.jpg`\n+                \/\/ file shows it can also sometimes be 0x60000. I've also observed it to be\n+                \/\/ undefined, 0x0007, or several variations of 0x????0006. Similarly the same\n+                \/\/ tag should be 0x0001 for TIFFs, but I also observed a case where it as 0x10000.\n+                isThumbnailJPEG = true;\n+            } else {\n+                thumbnailWidth = ifd2.getTagValueAsInt(TAG_IMAGE_WIDTH);\n+                thumbnailHeight = ifd2.getTagValueAsInt(TAG_IMAGE_HEIGHT);\n+                thumbnailPos = 0;\n+                thumbnailLength = data.length - 6;\n+                isThumbnailJPEG = false;\n+            }\n+        }\n+    }\n+\n+    LocalDateTime getImageCreationTime() {\n+        LocalDateTime imageCreationTime = null;\n+\n+        if (!imageFileDirectories.isEmpty()) {\n+            ImageFileDirectory ifd = imageFileDirectories.get(0);\n+            int dateTimeOffset = ifd.getTagValueAsInt(TAG_DATE_TIME);\n+            if (dateTimeOffset != NO_VALUE) {\n+                try {\n+                    String dateTime = new String(data, dateTimeOffset + 6, 19, \"US-ASCII\");\n+                    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"uuuu:MM:dd HH:mm:ss\");\n+                    imageCreationTime = LocalDateTime.parse(dateTime, formatter);\n+                } catch(Exception e) {\n+                    \/\/ intentionally empty\n+                }\n+            }\n+        }\n+\n+        return imageCreationTime;\n+    }\n+\n+    @Override\n+    void print() {\n+        printTag(\"Exif APP1\");\n+        for (int a = 0; a < imageFileDirectories.size(); a++) {\n+            System.out.println(\"ImageFileDirectory #\" + a + \", offset = \" + firstIFDOffset);\n+            int entryCtr = 0;\n+            for (ImageFileDirectory.Entry entry : imageFileDirectories.get(a).entriesByTag.values()) {\n+                System.out.println(\"Entry #\" + (entryCtr++) + \": \" + entry.toString());\n+            }\n+            System.out.println(\"next directory: \" + imageFileDirectories.get(a).nextIFD);\n+        }\n+    }\n+\n+    int getNumThumbnails() {\n+        return thumbnailPos > 0 && thumbnailLength > 0 ? 1 : 0;\n+    }\n+\n+    int getThumbnailWidth() throws IOException {\n+        \/\/ this should only be called if there is a thumbnail\n+\n+        if (thumbnailWidth == -1) {\n+            populateJPEGThumbnailDimensions();\n+        }\n+        return thumbnailWidth;\n+    }\n+\n+    int getThumbnailHeight() throws IOException {\n+        \/\/ this should only be called if there is a thumbnail\n+\n+        if (thumbnailHeight == -1) {\n+            populateJPEGThumbnailDimensions();\n+        }\n+        return thumbnailHeight;\n+    }\n+\n+    \/**\n+     * Use a JPEGImageReader to identify the size of the thumbnail. This\n+     * populates the `thumbnailWidth` and `thumbnailHeight` fields.\n+     *\/\n+    private void populateJPEGThumbnailDimensions() throws IOException {\n+        \/\/ this method will never be invoked for TIFF thumbnails, because TIFF\n+        \/\/ thumbnails clearly define their thumbnail size via IFD entries.\n+        JPEGImageReader reader = new JPEGImageReader(null);\n+        try {\n+            reader.setInput(ImageIO.createImageInputStream(new ByteArrayInputStream(\n+                    data, thumbnailPos + 6, thumbnailLength)));\n+            thumbnailWidth = reader.getWidth(0);\n+            thumbnailHeight = reader.getHeight(0);\n+        } finally {\n+            reader.dispose();\n+        }\n+    }\n+\n+    BufferedImage getThumbnail(JPEGImageReader callbackReader) throws IOException {\n+        \/\/ this should only be called if there is a thumbnail\n+\n+        callbackReader.thumbnailStarted(0);\n+        ImageReader thumbReader;\n+        int imageIndex = 0;\n+        if (isThumbnailJPEG) {\n+            thumbReader = new JPEGImageReader(null);\n+            imageIndex = 0;\n+        } else {\n+            thumbReader = new TIFFImageReader(null);\n+            imageIndex = 1;\n+        }\n+        try {\n+            InputStream byteIn = new ByteArrayInputStream(data, thumbnailPos + 6, thumbnailLength);\n+            ImageInputStream input = new MemoryCacheImageInputStream(byteIn);\n+            thumbReader.setInput(input);\n+            thumbReader.addIIOReadProgressListener(new JFIFMarkerSegment.JFIFThumbJPEG.ThumbnailReadListener(callbackReader));\n+            BufferedImage thumbnailImage = thumbReader.read(imageIndex);\n+            thumbnailWidth = thumbnailImage.getWidth();\n+            thumbnailHeight = thumbnailImage.getHeight();\n+            callbackReader.thumbnailComplete();\n+            return thumbnailImage;\n+        } finally {\n+            thumbReader.dispose();\n+        }\n+    }\n+}\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/jpeg\/ExifMarkerSegment.java","additions":300,"deletions":0,"binary":false,"changes":300,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -1237,1 +1237,1 @@\n-        private static class ThumbnailReadListener\n+        static class ThumbnailReadListener\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/jpeg\/JFIFMarkerSegment.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -1646,0 +1646,10 @@\n+\n+            \/\/ Check the Exif segment\n+            ExifMarkerSegment exifMarkerSegment =\n+                    (ExifMarkerSegment) imageMetadata.findMarkerSegment\n+                            (ExifMarkerSegment.class, true);\n+            if (exifMarkerSegment != null\n+                    && exifMarkerSegment.getNumThumbnails() == 1) {\n+                return 1;\n+            }\n+\n@@ -1672,0 +1682,11 @@\n+\n+            \/\/ Check the Exif segment\n+            ExifMarkerSegment exifMarkerSegment =\n+                    (ExifMarkerSegment) imageMetadata.findMarkerSegment\n+                            (ExifMarkerSegment.class, true);\n+            if (exifMarkerSegment != null\n+                    && thumbnailIndex == 0\n+                    && exifMarkerSegment.getNumThumbnails() == 1) {\n+                return exifMarkerSegment.getThumbnailWidth();\n+            }\n+\n@@ -1693,0 +1714,11 @@\n+\n+            \/\/ Check the Exif segment\n+            ExifMarkerSegment exifMarkerSegment =\n+                    (ExifMarkerSegment) imageMetadata.findMarkerSegment\n+                            (ExifMarkerSegment.class, true);\n+            if (exifMarkerSegment != null\n+                    && thumbnailIndex == 0\n+                    && exifMarkerSegment.getNumThumbnails() == 1) {\n+                return exifMarkerSegment.getThumbnailHeight();\n+            }\n+\n@@ -1715,0 +1747,11 @@\n+\n+            \/\/ Check the Exif segment\n+            ExifMarkerSegment exifMarkerSegment =\n+                    (ExifMarkerSegment) imageMetadata.findMarkerSegment\n+                            (ExifMarkerSegment.class, true);\n+            if (exifMarkerSegment != null\n+                    && thumbnailIndex == 0\n+                    && exifMarkerSegment.getNumThumbnails() == 1) {\n+                return exifMarkerSegment.getThumbnail(this);\n+            }\n+\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/jpeg\/JPEGImageReader.java","additions":44,"deletions":1,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,1 @@\n+import java.time.LocalDateTime;\n@@ -255,0 +256,16 @@\n+            case JPEG.APP1:\n+                buffer.loadBuf(8);\n+                buf = buffer.buf;\n+                ptr = buffer.bufPtr;\n+                if ((buf[ptr+3] == 'E')\n+                        && (buf[ptr+4] == 'x')\n+                        && (buf[ptr+5] == 'i')\n+                        && (buf[ptr+6] == 'f')\n+                        && (buf[ptr+7] == 0)\n+                        && (buf[ptr+8] == 0)) {\n+                    newGuy = new ExifMarkerSegment(buffer);\n+                } else {\n+                    newGuy = new MarkerSegment(buffer);\n+                    newGuy.loadData(buffer);\n+                }\n+                break;\n@@ -1010,0 +1027,29 @@\n+    @Override\n+    protected IIOMetadataNode getStandardDocumentNode() {\n+        IIOMetadataNode doc = null;\n+\n+        ExifMarkerSegment exifMarkerSegment =\n+                (ExifMarkerSegment) findMarkerSegment\n+                        (ExifMarkerSegment.class, true);\n+\n+        if (exifMarkerSegment != null) {\n+            \/\/ If there is an Exif marker segment get the image creation time.\n+            LocalDateTime ict = exifMarkerSegment.getImageCreationTime();\n+            if (ict != null) {\n+                doc = new IIOMetadataNode(\"Document\");\n+                IIOMetadataNode dateTime = new IIOMetadataNode(\"ImageCreationTime\");\n+                dateTime.setAttribute(\"year\", String.valueOf(ict.getYear()));\n+                dateTime.setAttribute(\"month\", String.valueOf(ict.getMonthValue()));\n+                dateTime.setAttribute(\"day\", String.valueOf(ict.getDayOfMonth()));\n+                dateTime.setAttribute(\"hour\", String.valueOf(ict.getHour()));\n+                dateTime.setAttribute(\"minute\", String.valueOf(ict.getMinute()));\n+                dateTime.setAttribute(\"second\", String.valueOf(ict.getSecond()));\n+                doc.appendChild(dateTime);\n+            }\n+        } else {\n+            doc = super.getStandardDocumentNode();\n+        }\n+\n+        return doc;\n+    }\n+\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/jpeg\/JPEGMetadata.java","additions":47,"deletions":1,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -0,0 +1,265 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8160327\n+ * @summary Test verifies thumbnails are read from sample JPEG images\n+ *          that are encoded using Exif file format.\n+ * @run     main JpegExifThumbnailTest\n+ *\/\n+\n+\n+import org.w3c.dom.Node;\n+\n+import java.awt.Dimension;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Iterator;\n+import javax.imageio.ImageIO;\n+import javax.imageio.ImageReader;\n+import javax.imageio.event.IIOReadProgressListener;\n+import javax.imageio.metadata.IIOMetadata;\n+import javax.imageio.metadata.IIOMetadataFormatImpl;\n+import javax.imageio.stream.ImageInputStream;\n+\n+public class JpegExifThumbnailTest {\n+\n+    private static void assertBoolean(boolean b, String errorMsg) {\n+        if (!b) {\n+            throw new Error(errorMsg);\n+        }\n+    }\n+\n+    private static void assertEquals(int expected, int observed) {\n+        if (expected != observed) {\n+            throw new Error(\"expected \" + expected + \", but observed \" + observed);\n+        }\n+    }\n+\n+    private static void assertEquals(Node node, String attributeName, int expectedAttributeValue) {\n+        String s = node.getAttributes().getNamedItem(attributeName).getNodeValue();\n+        if (!Integer.toString(expectedAttributeValue).equals(s))\n+            throw new Error(\"expected \\\"\" + attributeName + \"\\\" to be \" + expectedAttributeValue + \", but observed \" + s);\n+    }\n+\n+    static class MyListener implements IIOReadProgressListener {\n+\n+        boolean thumbnailStarted = false;\n+        boolean thumbnailCompleted = false;\n+        float thumbnailPercent = -1;\n+\n+        @Override\n+        public void sequenceStarted(ImageReader source, int minIndex) {\n+            throw new Error(\"sequenceStarted should not be called\");\n+        }\n+\n+        @Override\n+        public void sequenceComplete(ImageReader source) {\n+            throw new Error(\"sequenceComplete should not be called\");\n+        }\n+\n+        @Override\n+        public void imageStarted(ImageReader source, int imageIndex) {\n+            throw new Error(\"imageStarted should not be called\");\n+        }\n+\n+        @Override\n+        public void imageProgress(ImageReader source, float percentageDone) {\n+            throw new Error(\"imageProgress should not be called\");\n+        }\n+\n+        @Override\n+        public void imageComplete(ImageReader source) {\n+            throw new Error(\"imageComplete should not be called\");\n+        }\n+\n+        @Override\n+        public void thumbnailStarted(ImageReader source, int imageIndex, int thumbnailIndex) {\n+            if (thumbnailStarted || thumbnailCompleted || thumbnailPercent >= 0)\n+                throw new Error();\n+            thumbnailStarted = true;\n+        }\n+\n+        @Override\n+        public void thumbnailProgress(ImageReader source, float percentageDone) {\n+            if (!thumbnailStarted || thumbnailCompleted || thumbnailPercent >= percentageDone)\n+                throw new Error();\n+            thumbnailPercent = percentageDone;\n+        }\n+\n+        @Override\n+        public void thumbnailComplete(ImageReader source) {\n+            if (!thumbnailStarted || thumbnailCompleted)\n+                throw new Error();\n+            thumbnailCompleted = true;\n+        }\n+\n+        @Override\n+        public void readAborted(ImageReader source) {\n+            throw new Error(\"readAborted should not be called\");\n+        }\n+    }\n+\n+    public static void main (String[] args) throws IOException {\n+        \/\/ all the timestamps were verified in a 3rd party app (such as Preview on Mac)\n+\n+        \/\/ this is little endian, and uses a compression type 0x00000006\n+        new JpegExifThumbnailTest(\"jdk_8160327-SV650.jpg\",\n+                2015,6,24,10,3,55,\n+                new Dimension(160, 120)).run();\n+\n+        \/\/ this is big endian, and uses a compression type 0x00010000\n+        new JpegExifThumbnailTest(\"jdk_8160327-exif-rgb-thumbnail-sony-d700.jpg\",\n+                1998,12,1,14,22,36,\n+                new Dimension(80, 60)).run();\n+\n+        \/\/ this includes Exif data, but the `compression` tag is 0x60000 instead of 0x6,\n+        \/\/ also it doesn't include any date\n+        new JpegExifThumbnailTest(\"jdk_8160327-plastic-wrap.jpg\",\n+                -1, -1, -1, -1, -1, -1,\n+                new Dimension(200, 132)).run();\n+\n+        \/\/ here the timestamp doesn't match our parser, so we'll ignore it\n+        new JpegExifThumbnailTest(\"jdk_8160327-bad-timestamp.jpg\",\n+                -1, -1, -1, -1, -1, -1).run();\n+\n+        \/\/ this ImageFileDirectory doesn't terminate like it should. We need to\n+        \/\/ not fail with an EOFException in this case:\n+        new JpegExifThumbnailTest(\"jdk_8160327-unusual-ImageFileDirectory.jpeg\",\n+                2007, 11, 10, 21, 23, 4).run();\n+    }\n+\n+    final String filename;\n+    final Dimension[] thumbnailSizes;\n+    final int year, month, day, hour, minute, second;\n+\n+    JpegExifThumbnailTest(String filename,\n+                          int year, int month, int day,\n+                          int hour, int minute, int second,\n+                          Dimension... thumbnailSizes) {\n+        this.filename = filename;\n+        this.thumbnailSizes = thumbnailSizes;\n+        this.year = year;\n+        this.month = month;\n+        this.day = day;\n+        this.hour = hour;\n+        this.minute = minute;\n+        this.second = second;\n+    }\n+\n+    public void run() throws IOException {\n+        String sep = System.getProperty(\"file.separator\");\n+        String dir = System.getProperty(\"test.src\", \".\");\n+        String filePath = dir+sep+filename;\n+        File file = new File(filePath);\n+\n+        if (!file.exists())\n+            throw new IOException(\"missing test file: \" + file.getPath());\n+        System.out.println(\"Testing \" + file.getPath());\n+\n+        ImageReader reader = getJPEGImageReader();\n+        ImageInputStream stream = ImageIO.createImageInputStream(file);\n+        reader.setInput(stream);\n+\n+        int thumbnailCount = reader.getNumThumbnails(0);\n+        if (thumbnailCount != thumbnailSizes.length)\n+            throw new Error(\"expected \" + thumbnailSizes.length + \" thumbnails, but observed \" + thumbnailCount);\n+\n+        for (int a = 0; a < thumbnailSizes.length; a++) {\n+            MyListener listener = new MyListener();\n+            reader.addIIOReadProgressListener(listener);\n+            try {\n+                int w = reader.getThumbnailWidth(0, a);\n+                int h = reader.getThumbnailHeight(0, a);\n+                System.out.println(\"\\tthumbnail: \" + w + \"x\" + h);\n+                assertEquals(thumbnailSizes[a].width, w);\n+                assertEquals(thumbnailSizes[a].height, h);\n+\n+                BufferedImage bi = reader.readThumbnail(0, a);\n+                assertEquals(thumbnailSizes[a].width, bi.getWidth());\n+                assertEquals(thumbnailSizes[a].height, bi.getHeight());\n+\n+                assertBoolean(listener.thumbnailStarted, \"the IIOReadProgressListener was not notified that the thumbnail started\");\n+                assertBoolean(listener.thumbnailCompleted, \"the IIOReadProgressListener was not notified that the thumbnail completed\");\n+            } finally {\n+                reader.removeIIOReadProgressListener(listener);\n+            }\n+        }\n+\n+        IIOMetadata metadata = reader.getImageMetadata(0);\n+        Node root = metadata.getAsTree(IIOMetadataFormatImpl.standardMetadataFormatName);\n+        Node docNode = findChild(root, \"Document\");\n+        Node timeNode = findChild(docNode, \"ImageCreationTime\");\n+\n+        if (timeNode == null) {\n+            \/\/ this is OK, it means there's no ImageCreationTime\n+            assertEquals(-1, year);\n+            assertEquals(-1, month);\n+            assertEquals(-1, day);\n+            assertEquals(-1, hour);\n+            assertEquals(-1, minute);\n+            assertEquals(-1, second);\n+        } else {\n+            StringBuilder sb = new StringBuilder();\n+            for (int b = 0; b < timeNode.getAttributes().getLength(); b++) {\n+                sb.append(timeNode.getAttributes().item(b).getNodeName() + \"=\" +\n+                        timeNode.getAttributes().item(b).getNodeValue() + \" \");\n+            }\n+            System.out.println(\"\\tImageCreationTime: \" + sb.toString().trim());\n+\n+            assertEquals(timeNode, \"year\", year);\n+            assertEquals(timeNode, \"month\", month);\n+            assertEquals(timeNode, \"day\", day);\n+            assertEquals(timeNode, \"hour\", hour);\n+            assertEquals(timeNode, \"minute\", minute);\n+            assertEquals(timeNode, \"second\", second);\n+        }\n+    }\n+\n+    private static Node findChild(Node node, String nodeName) {\n+        if (node == null) {\n+            return null;\n+        }\n+        Node child = node.getFirstChild();\n+        while (child != null) {\n+            if (child.getNodeName().equals(nodeName))\n+                return child;\n+            child = child.getNextSibling();\n+        }\n+        return null;\n+    }\n+\n+    private static ImageReader getJPEGImageReader() {\n+        Iterator<ImageReader> readers = ImageIO.getImageReadersByFormatName(\"jpeg\");\n+        ImageReader reader;\n+        while(readers.hasNext()) {\n+            reader = readers.next();\n+            if(reader.canReadRaster()) {\n+                return reader;\n+            }\n+        }\n+        return null;\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/JpegExifThumbnailTest.java","additions":265,"deletions":0,"binary":false,"changes":265,"status":"added"},{"filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/jdk_8160327-SV650.jpg","binary":true,"status":"added"},{"filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/jdk_8160327-bad-timestamp.jpg","binary":true,"status":"added"},{"filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/jdk_8160327-exif-rgb-thumbnail-sony-d700.jpg","binary":true,"status":"added"},{"filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/jdk_8160327-jfif-jfif-and-exif-thumbnail-sharpshot-iphone.jpg","binary":true,"status":"added"},{"filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/jdk_8160327-plastic-wrap.jpg","binary":true,"status":"added"},{"filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/jdk_8160327-unusual-ImageFileDirectory.jpeg","binary":true,"status":"added"}]}