[{"commit":{"message":"8160327: fix looping ImageFileDirectory vulnerability\n\nThere was a `while` loop that someone could exploit to loop infinitely. Now we read exactly 2 iterations and stop."},"files":[{"filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/jpeg\/ExifMarkerSegment.java"},{"filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/JpegExifThumbnail\/JpegExifThumbnailTest.java"},{"filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/JpegExifThumbnail\/malicious_looping_IFD.jpg"}],"sha":"366a8c37bb3d438e30d1254de42b93a33ab3c579"},{"commit":{"message":"8160327: remove bug ID from image file names\n\nNow the bug ID is mentioned in their parent directory name.\n\nThis is in response to:\nhttps:\/\/github.com\/openjdk\/jdk\/pull\/22898#issuecomment-2675396159"},"files":[{"filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/JpegExifThumbnail\/JpegExifThumbnailTest.java"},{"filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/JpegExifThumbnail\/SV650.jpg"},{"filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/JpegExifThumbnail\/bad-timestamp.jpg"},{"filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/JpegExifThumbnail\/corrupt-magic-number.jpg"},{"filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/JpegExifThumbnail\/exif-rgb-thumbnail-sony-d700.jpg"},{"filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/JpegExifThumbnail\/jfif_and_exif.jpg"},{"filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/JpegExifThumbnail\/plastic-wrap.jpg"},{"filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/JpegExifThumbnail\/unusual-ImageFileDirectory.jpeg"}],"sha":"91aabcaed8a1992b3edaf2ab4a65b1c309e3161d"},{"commit":{"message":"8160327: replace image of unknown origin with my own image"},"files":[{"filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/JpegExifThumbnail\/JpegExifThumbnailTest.java"}],"sha":"b1e4d134adba8f195d834b4a6ab89834c64ea9af"},{"commit":{"message":"8160327: alphabetize imports\n\nThis is in response to:\nhttps:\/\/github.com\/openjdk\/jdk\/pull\/22898#discussion_r1956718373"},"files":[{"filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/jpeg\/ExifMarkerSegment.java"}],"sha":"a67369a620bf9f1742dac071ee5ec2bd86b1d32c"},{"commit":{"message":"8160327: fallback to using MarkerSegment if ExifMarkerSegment fails\n\nThis is in response to:\nhttps:\/\/github.com\/openjdk\/jdk\/pull\/22898#discussion_r1955194737\n\n\"I would have supposed that if there's an Exif segment we don't like it would be best to just act like the segment isn't there.\""},"files":[{"filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/jpeg\/ExifMarkerSegment.java"},{"filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/jpeg\/JPEGMetadata.java"},{"filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/JpegExifThumbnail\/JpegExifThumbnailTest.java"}],"sha":"57a5542edd214329ecdd56534211d8af3bcf451d"},{"commit":{"message":"8160327: include support for JFIF *and* EXIF thumbnails together\n\nThis is in response to:\nhttps:\/\/github.com\/openjdk\/jdk\/pull\/22898#issuecomment-2666324177\n\nAs mentioned here ( https:\/\/github.com\/openjdk\/jdk\/pull\/22898#issuecomment-2666949882 ) we'll need to update some documentation about thumbnails."},"files":[{"filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/jpeg\/JPEGImageReader.java"},{"filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/JpegExifThumbnail\/JpegExifThumbnailTest.java"}],"sha":"76adb79675fb50269a2dd67eca263ad5846dfc68"},{"commit":{"message":"8160327: moving test + resources to separate directory\n\nThis is in response to:\nhttps:\/\/github.com\/openjdk\/jdk\/pull\/22898#issuecomment-2657721887"},"files":[{"filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/JpegExifThumbnail\/JpegExifThumbnailTest.java"}],"sha":"9aa5f3b4219c02ba53b42c44e1ce2fdc988c953a"},{"commit":{"message":"8160327: fixing typo so `thumbnailPos` can be zero\n\nThe `thumbnailLength` cannot be zero, but the position can be."},"files":[{"filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/jpeg\/ExifMarkerSegment.java"}],"sha":"20d44cfb880043304194e667be6304001ee28ac8"},{"commit":{"message":"8160327: removed unused field"},"files":[{"filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/jpeg\/ExifMarkerSegment.java"}],"sha":"05ee149cd525d0de5932434a27de664635d92121"},{"commit":{"message":"8160327: fixing typo in comment"},"files":[{"filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/jpeg\/ExifMarkerSegment.java"}],"sha":"15a079ea6b887dde474f495e40f13d6e2128911c"},{"commit":{"message":"8160327: if thumbnailLength == 0, we don't have a thumbnail\n\nI found a JPEG file where the thumbnail length was 0. This file was written in \"Adobe Photoshop CS4 Windows\".\n\n(Unfortunately I don't think I can legally make the image public domain as part of unit test.)"},"files":[{"filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/jpeg\/ExifMarkerSegment.java"}],"sha":"d5a169a47f905394e0de83d9c2160617e89dcc19"},{"commit":{"message":"8160327: avoid ArrayIndexOutOfBoundsE for unknown data format\n\nI observed one JPEG had a data format not covered by `bytesPerComponent`. I don't know what to do with that information, but let's not throw an ArrayIndexOutOfBoundsException when we get in that situation. We can assume its length is at least 1.\n\n(Unfortunately I can't legally release the JPEG file into public domain as part of a unit test.)"},"files":[{"filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/jpeg\/ExifMarkerSegment.java"}],"sha":"3a5bf5f57fb24a2a2b22daa65610b8d49837bd7f"},{"commit":{"message":"8160327: support malformed IFD"},"files":[{"filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/jpeg\/ExifMarkerSegment.java"}],"sha":"5adfc17410d537c177c1180e6c2480734969735a"},{"commit":{"message":"8160327: wrap LocaleDateTime.parse in try\/catch\n\nI've observed a few cases where the time is not formatted correctly.\n\nPreviously: the way the parsing logic was positioned meant the ExifMarkerSegment threw an exception. (Meaning: we lost the ability to parse a thumbnail, all because the timestamp had a formatting error.)\n\nNow: we just leave the timestamp empty if we can't parse it."},"files":[{"filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/jpeg\/ExifMarkerSegment.java"}],"sha":"9179a88e243bf642db1fe4083cfdb37760c99c12"},{"commit":{"message":"8160327: clarifying comment"},"files":[{"filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/jpeg\/ExifMarkerSegment.java"}],"sha":"c6ba39620c32eba69fd8264bf415a446d8f90bd1"},{"commit":{"message":"8160327: adding a new test case where the timestamp is \"0000:00...\""},"files":[{"filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/jpeg\/ExifMarkerSegment.java"}],"sha":"c868a89786514076b40924bfcb86358f6a7732d1"},{"commit":{"message":"8160327: adding a new test case where `compression` = 0x60000\n\nPreviously I tried to strictly adhere to the specs (by looking at the `compression` tag). Now instead we interpret the presence of tags 513 & 514 as evidence that we should treat the thumbnail as a JPEG.\n\nThis is what Burkhalter's original proposal did."},"files":[{"filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/jpeg\/ExifMarkerSegment.java"}],"sha":"fdefdcbe3743b432d7208f5e4f629f953dad1e97"},{"commit":{"message":"8160327: updating test to include \"ImageCreationTime\"\n\nAlso generally refactoring test for readability"},"files":[],"sha":"a721256bc74e4312a7e8c9358d660c09adc41c5f"},{"commit":{"message":"8160327: first draft of APP1 Exif thumbnail support\n\nThis is loosely based on\/informed by Brian Burkhalter's orphaned work: https:\/\/cr.openjdk.org\/~bpb\/8160327\/webrev.00\/\n\nThat implementation, however, ALWAYS loaded the thumbnail. This implementation lazily loads the thumbnail. (The goal being to save time & memory when the consumer isn't interested in the thumbnail.)\n\nThis implementation also encapsulates IFD entries. This is not strictly necessary for 8160327 (Burkhalter's implementation avoided it), but it helped me debug as I went. Also introducing data objects may help future work like 5011904 (adding exif metadata), or someday acting on the orientation tag (tag ID 0x0112).\n\nI'm not sure why `imageCreationTime` was included in Burkhalter's implementation, but this implementation includes that logic too. (I assume there's a good\/compelling reason.)\n\nThis implementation includes notifications about thumbnail starting\/progress\/completion. And a slightly informative `print()` implementation.\n\nThis includes a test that reads the thumbnails from the 3 sample JPEG images originally attached to the JDK-8160327"},"files":[{"filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/jpeg\/ExifMarkerSegment.java"},{"filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/jpeg\/JFIFMarkerSegment.java"},{"filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/jpeg\/JPEGImageReader.java"},{"filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/jpeg\/JPEGMetadata.java"}],"sha":"e4f0c8e2237b181925ba87575afa3ffb274c9b37"},{"commit":{"message":"Merge branch 'openjdk:master' into master"},"files":[],"sha":"93ef96abb3e5fb8712496adec0b865087099d45c"},{"commit":{"message":"Merge pull request #5 from openjdk\/master\n\nupdating to openjdk\/jdk"},"files":[],"sha":"81085d416d9ce4ef360ac0bb270a393ee9392d89"},{"commit":{"message":"Merge pull request #4 from openjdk\/master\n\nUpdating mickleness\/jdk from openjdk\/jdk"},"files":[],"sha":"69481fc38f4021224ec4a8d1a75b275a89dfa832"},{"commit":{"message":"Merge pull request #3 from openjdk\/master\n\nMerge from openjdk\/jdk"},"files":[],"sha":"57346a421446d51192ceada277626ba1ae92d8d7"},{"commit":{"message":"Merge pull request #2 from openjdk\/master\n\nMerge openjdk\/jdk"},"files":[],"sha":"333c87c2107262532815db6978c5e8f59c5a967e"},{"commit":{"message":"Merge pull request #1 from openjdk\/master\n\nMerge openjdk\/jdk into mickleness\/jdk"},"files":[],"sha":"5dbf0a67ad41a53e03f02c41b1b6364fc3a633ee"}]