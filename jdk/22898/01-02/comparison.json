{"files":[{"patch":"@@ -28,4 +28,1 @@\n-import java.io.InputStream;\n-import java.nio.ByteOrder;\n-import java.time.LocalDateTime;\n-import java.time.format.DateTimeFormatter;\n+import com.sun.imageio.plugins.tiff.TIFFImageReader;\n@@ -33,1 +30,0 @@\n-import javax.imageio.IIOException;\n@@ -36,3 +32,0 @@\n-import javax.imageio.event.IIOReadProgressListener;\n-import javax.imageio.metadata.IIOInvalidTreeException;\n-import javax.imageio.metadata.IIOMetadataNode;\n@@ -40,2 +33,0 @@\n-import javax.imageio.stream.ImageOutputStream;\n-import javax.imageio.plugins.jpeg.JPEGQTable;\n@@ -43,1 +34,0 @@\n-\n@@ -46,1 +36,0 @@\n-import java.io.ByteArrayOutputStream;\n@@ -48,2 +37,5 @@\n-import java.util.List;\n-import java.util.Map;\n+import java.io.InputStream;\n+import java.nio.ByteOrder;\n+import java.nio.charset.StandardCharsets;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n@@ -52,6 +44,2 @@\n-\n-import com.sun.imageio.plugins.tiff.TIFFImageReader;\n-import org.w3c.dom.Node;\n-import org.w3c.dom.NodeList;\n-import org.w3c.dom.NamedNodeMap;\n-\n+import java.util.List;\n+import java.util.Map;\n@@ -153,3 +141,4 @@\n-    ExifMarkerSegment(JPEGBuffer buffer) throws IOException {\n-        super(buffer);\n-        loadData(buffer);\n+    ExifMarkerSegment(MarkerSegment originalSegment) throws IOException {\n+        super(originalSegment.tag);\n+        this.length = originalSegment.length;\n+        this.data = originalSegment.data;\n@@ -208,1 +197,1 @@\n-                    String dateTime = new String(data, dateTimeOffset + 6, 19, \"US-ASCII\");\n+                    String dateTime = new String(data, dateTimeOffset + 6, 19, StandardCharsets.US_ASCII);\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/jpeg\/ExifMarkerSegment.java","additions":13,"deletions":24,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -1639,0 +1639,7 @@\n+    private int getNumJFIFThumbnails(JFIFMarkerSegment jfif) throws IOException {\n+        if (jfif == null) {\n+            return 0;\n+        }\n+        return ((jfif.thumb == null) ? 0 : 1) + jfif.extSegments.size();\n+    }\n+\n@@ -1647,0 +1654,6 @@\n+            \/\/ Check the jfif segments\n+            JFIFMarkerSegment jfif =\n+                    (JFIFMarkerSegment) imageMetadata.findMarkerSegment\n+                            (JFIFMarkerSegment.class, true);\n+            int numThumbnails = getNumJFIFThumbnails(jfif);\n+\n@@ -1651,3 +1664,2 @@\n-            if (exifMarkerSegment != null\n-                    && exifMarkerSegment.getNumThumbnails() == 1) {\n-                return 1;\n+            if (exifMarkerSegment != null) {\n+                numThumbnails += exifMarkerSegment.getNumThumbnails();\n@@ -1656,10 +1668,1 @@\n-            \/\/ Now check the jfif segments\n-            JFIFMarkerSegment jfif =\n-                (JFIFMarkerSegment) imageMetadata.findMarkerSegment\n-                (JFIFMarkerSegment.class, true);\n-            int retval = 0;\n-            if (jfif != null) {\n-                retval = (jfif.thumb == null) ? 0 : 1;\n-                retval += jfif.extSegments.size();\n-            }\n-            return retval;\n+            return numThumbnails;\n@@ -1683,0 +1686,10 @@\n+            \/\/ Check the JFIF segment\n+            JFIFMarkerSegment jfif =\n+                (JFIFMarkerSegment) imageMetadata.findMarkerSegment\n+                (JFIFMarkerSegment.class, true);\n+\n+            int numJFIFThumbnails = getNumJFIFThumbnails(jfif);\n+            if (thumbnailIndex < numJFIFThumbnails) {\n+                return jfif.getThumbnailWidth(thumbnailIndex);\n+            }\n+\n@@ -1687,11 +1700,1 @@\n-            if (exifMarkerSegment != null\n-                    && thumbnailIndex == 0\n-                    && exifMarkerSegment.getNumThumbnails() == 1) {\n-                return exifMarkerSegment.getThumbnailWidth();\n-            }\n-\n-            \/\/ Now we know that there is a jfif segment\n-            JFIFMarkerSegment jfif =\n-                (JFIFMarkerSegment) imageMetadata.findMarkerSegment\n-                (JFIFMarkerSegment.class, true);\n-            return  jfif.getThumbnailWidth(thumbnailIndex);\n+            return exifMarkerSegment.getThumbnailWidth();\n@@ -1715,0 +1718,10 @@\n+            \/\/ Check the JFIF segment\n+            JFIFMarkerSegment jfif =\n+                    (JFIFMarkerSegment) imageMetadata.findMarkerSegment\n+                            (JFIFMarkerSegment.class, true);\n+\n+            int numJFIFThumbnails = getNumJFIFThumbnails(jfif);\n+            if (thumbnailIndex < numJFIFThumbnails) {\n+                return jfif.getThumbnailHeight(thumbnailIndex);\n+            }\n+\n@@ -1719,11 +1732,1 @@\n-            if (exifMarkerSegment != null\n-                    && thumbnailIndex == 0\n-                    && exifMarkerSegment.getNumThumbnails() == 1) {\n-                return exifMarkerSegment.getThumbnailHeight();\n-            }\n-\n-            \/\/ Now we know that there is a jfif segment\n-            JFIFMarkerSegment jfif =\n-                (JFIFMarkerSegment) imageMetadata.findMarkerSegment\n-                (JFIFMarkerSegment.class, true);\n-            return  jfif.getThumbnailHeight(thumbnailIndex);\n+            return exifMarkerSegment.getThumbnailHeight();\n@@ -1748,0 +1751,9 @@\n+            \/\/ Check the JFIF segment\n+            JFIFMarkerSegment jfif =\n+                    (JFIFMarkerSegment) imageMetadata.findMarkerSegment\n+                            (JFIFMarkerSegment.class, true);\n+            int numJFIFThumbnails = getNumJFIFThumbnails(jfif);\n+            if (thumbnailIndex < numJFIFThumbnails) {\n+                return jfif.getThumbnail(iis, thumbnailIndex, this);\n+            }\n+\n@@ -1752,11 +1764,1 @@\n-            if (exifMarkerSegment != null\n-                    && thumbnailIndex == 0\n-                    && exifMarkerSegment.getNumThumbnails() == 1) {\n-                return exifMarkerSegment.getThumbnail(this);\n-            }\n-\n-            \/\/ Now we know that there is a jfif segment and that iis is good\n-            JFIFMarkerSegment jfif =\n-                (JFIFMarkerSegment) imageMetadata.findMarkerSegment\n-                (JFIFMarkerSegment.class, true);\n-            return  jfif.getThumbnail(iis, thumbnailIndex, this);\n+            return exifMarkerSegment.getThumbnail(this);\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/jpeg\/JPEGImageReader.java","additions":48,"deletions":46,"binary":false,"changes":94,"status":"modified"},{"patch":"@@ -257,13 +257,15 @@\n-                buffer.loadBuf(8);\n-                buf = buffer.buf;\n-                ptr = buffer.bufPtr;\n-                if ((buf[ptr+3] == 'E')\n-                        && (buf[ptr+4] == 'x')\n-                        && (buf[ptr+5] == 'i')\n-                        && (buf[ptr+6] == 'f')\n-                        && (buf[ptr+7] == 0)\n-                        && (buf[ptr+8] == 0)) {\n-                    newGuy = new ExifMarkerSegment(buffer);\n-                } else {\n-                    newGuy = new MarkerSegment(buffer);\n-                    newGuy.loadData(buffer);\n+                newGuy = new MarkerSegment(buffer);\n+                newGuy.loadData(buffer);\n+\n+                if (newGuy.data.length > 5 &&\n+                        newGuy.data[0] == 'E' &&\n+                        newGuy.data[1] == 'x' &&\n+                        newGuy.data[2] == 'i' &&\n+                        newGuy.data[3] == 'f' &&\n+                        newGuy.data[4] == 0) {\n+                    try {\n+                        newGuy = new ExifMarkerSegment(newGuy);\n+                    } catch(Exception e) {\n+                        \/\/ This is intentionally empty.\n+                        \/\/ Now we fallback to keeping the generic MarkerSegment\n+                    }\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/jpeg\/JPEGMetadata.java","additions":15,"deletions":13,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -138,0 +138,5 @@\n+        new JpegExifThumbnailTest(\"jdk_8160327-jfif-jfif-and-exif-thumbnail-sharpshot-iphone.jpg\",\n+                2010,2,11,20,41,27,\n+                new Dimension(131, 122),\n+                new Dimension(160, 120)).run();\n+\n@@ -152,0 +157,7 @@\n+\n+        \/\/ This file is a replica of jdk_8160327-SV650.jpg, except the 14th byte was changed\n+        \/\/ so ExifMarkerSegment's constructor throws a \"Bad magic number\" exception.\n+        \/\/ The expected behavior here is: we do NOT catch an exception, because internally\n+        \/\/ JPEGMetaData just recorded a generic MarkerSegment instead of an ExifMarkerSegment\n+        new JpegExifThumbnailTest(\"jdk_8160327-corrupt-magic-number.jpg\",\n+                -1, -1, -1, -1, -1, -1).run();\n","filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/JpegExifThumbnail\/JpegExifThumbnailTest.java","additions":12,"deletions":0,"binary":false,"changes":12,"previous_filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/JpegExifThumbnailTest.java","status":"renamed"},{"patch":"","filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/JpegExifThumbnail\/jdk_8160327-SV650.jpg","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/jdk_8160327-SV650.jpg","status":"copied"},{"patch":"","filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/JpegExifThumbnail\/jdk_8160327-bad-timestamp.jpg","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/jdk_8160327-bad-timestamp.jpg","status":"renamed"},{"filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/JpegExifThumbnail\/jdk_8160327-corrupt-magic-number.jpg","binary":true,"previous_filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/jdk_8160327-SV650.jpg","status":"renamed"},{"patch":"","filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/JpegExifThumbnail\/jdk_8160327-exif-rgb-thumbnail-sony-d700.jpg","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/jdk_8160327-exif-rgb-thumbnail-sony-d700.jpg","status":"renamed"},{"patch":"","filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/JpegExifThumbnail\/jdk_8160327-jfif-jfif-and-exif-thumbnail-sharpshot-iphone.jpg","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/jdk_8160327-jfif-jfif-and-exif-thumbnail-sharpshot-iphone.jpg","status":"renamed"},{"patch":"","filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/JpegExifThumbnail\/jdk_8160327-plastic-wrap.jpg","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/jdk_8160327-plastic-wrap.jpg","status":"renamed"},{"patch":"","filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/JpegExifThumbnail\/jdk_8160327-unusual-ImageFileDirectory.jpeg","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/jdk_8160327-unusual-ImageFileDirectory.jpeg","status":"renamed"}]}