{"files":[{"patch":"@@ -30,0 +30,2 @@\n+import java.security.Provider;\n+import java.security.Security;\n@@ -35,1 +37,1 @@\n- * @library \/test\/lib\n+ * @library \/test\/lib \/test\/jdk\/sun\/security\/pkcs11\n@@ -41,8 +43,30 @@\n-        check(\"ML-KEM-512\", 1);\n-        check(\"ML-KEM-768\", 3);\n-        check(\"ML-KEM-1024\", 5);\n-        check(\"ML-DSA-44\", 2);\n-        check(\"ML-DSA-65\", 3);\n-        check(\"ML-DSA-87\", 5);\n-        check(\"RSA\", -1);\n-        check(\"Ed25519\", -1);\n+        Security.addProvider(PKCS11Test.getSunPKCS11(PKCS11Test.getNssConfig()));\n+        for (var p : Security.getProviders()) {\n+            for (var s : p.getServices()) {\n+                switch (s.getType()) {\n+                    case \"KeyPairGenerator\" -> test(s);\n+                }\n+            }\n+        }\n+        testLMS();\n+    }\n+\n+    static void test(Provider.Service s) throws Exception {\n+        System.out.println(s.getProvider().getName()\n+                + \" \" + s.getType() + \".\" + s.getAlgorithm());\n+        var alg = s.getAlgorithm();\n+        var g = KeyPairGenerator.getInstance(alg);\n+        var kp = g.generateKeyPair();\n+        var size = switch (g.getAlgorithm()) {\n+            case \"RSA\", \"RSASSA-PSS\", \"DSA\", \"DiffieHellman\", \"DH\",\n+                 \"EC\", \"EdDSA\", \"Ed25519\", \"Ed448\",\n+                 \"XDH\", \"X25519\", \"X448\" -> -1;\n+            case \"ML-KEM-512\" -> 1;\n+            case \"ML-DSA-44\" -> 2;\n+            case \"ML-KEM\", \"ML-KEM-768\", \"ML-DSA\", \"ML-DSA-65\" -> 3;\n+            case \"ML-KEM-1024\", \"ML-DSA-87\" -> 5;\n+            default -> throw new UnsupportedOperationException(alg);\n+        };\n+        Asserts.assertEQ(size, KeyUtil.getNistCategory(kp.getPublic()));\n+        Asserts.assertEQ(size, KeyUtil.getNistCategory(kp.getPrivate()));\n+    }\n@@ -50,0 +74,1 @@\n+    static void testLMS() throws Exception {\n@@ -65,8 +90,0 @@\n-\n-    }\n-\n-    static void check(String alg, int expected) throws Exception {\n-        System.out.println(alg);\n-        var kp = KeyPairGenerator.getInstance(alg).generateKeyPair();\n-        Asserts.assertEQ(expected, KeyUtil.getNistCategory(kp.getPrivate()));\n-        Asserts.assertEQ(expected, KeyUtil.getNistCategory(kp.getPublic()));\n","filename":"test\/jdk\/sun\/security\/provider\/all\/NistCategories.java","additions":34,"deletions":17,"binary":false,"changes":51,"status":"modified"}]}