{"files":[{"patch":"@@ -2067,2 +2067,2 @@\n-     * - \"EC (secp256r1)\", if it's an EC key\n-     * - \"1024-bit RSA\", other known keys\n+     * - \"256-bit EC (secp256r1)\", if it's an EC key\n+     * - \"1024-bit RSA\", other keys with a defined key size\n","filename":"src\/java.base\/share\/classes\/sun\/security\/tools\/keytool\/Main.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -53,0 +53,9 @@\n+     * <p>\n+     * Traditionally, the key size of an asymmetric key refers to the size of\n+     * its modulus. For example, a 2048-bit RSA key or a 256-bit NIST P-256 EC\n+     * key. However, new algorithms based on lattice cryptography,\n+     * such as ML-KEM, do not use a modulus, and the sizes of their public and\n+     * private keys can differ significantly from their security strength.\n+     * Instead of specifying a key length, NIST assigns a security category to\n+     * each standardized parameter set. For example, ML-KEM-768 is assigned to\n+     * category 3, and ML-DSA-87 to category 5.\n@@ -55,2 +64,2 @@\n-     * @return the key size of the given key object in bits, or -1 if the\n-     *       key size is not accessible\n+     * @return the key size of the given key object in bits, or -1 if the key\n+     *       size is not accessible (Ex: PKCS #11) or undefined (Ex: ML-KEM)\n@@ -124,0 +133,27 @@\n+    \/**\n+     * Returns the NIST security categories defined for PQC algorithms. It is\n+     * defined in Section 4.A.5 of \"Submission Requirements and Evaluation Criteria\n+     * for the Post-Quantum Cryptography Standardization Process\" which is available\n+     * at https:\/\/csrc.nist.gov\/CSRC\/media\/Projects\/Post-Quantum-Cryptography\/documents\/call-for-proposals-final-dec-2016.pdf.\n+     *\n+     * Sources:\n+     * ML-KEM: https:\/\/doi.org\/10.6028\/NIST.FIPS.203 Section 8\n+     * ML-DSA: https:\/\/doi.org\/10.6028\/NIST.FIPS.204 Section 4\n+     *\n+     * @param k the key\n+     * @return the security category, -1 if unknown or undefined\n+     *\/\n+    public static final int getNistCategory(Key k) {\n+        String pname = (k instanceof AsymmetricKey ak\n+                    && ak.getParams() instanceof NamedParameterSpec nps)\n+                ? nps.getName()\n+                : k.getAlgorithm();\n+        return switch (pname) {\n+            case \"ML-KEM-512\" -> 1;\n+            case \"ML-DSA-44\" -> 2;\n+            case \"ML-KEM-768\", \"ML-DSA-65\" -> 3;\n+            case \"ML-KEM-1024\", \"ML-DSA-87\" -> 5;\n+            default -> -1;\n+        };\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/KeyUtil.java","additions":38,"deletions":2,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -0,0 +1,100 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.Asserts;\n+import sun.security.util.KeyUtil;\n+import sun.security.util.RawKeySpec;\n+\n+import javax.crypto.spec.SecretKeySpec;\n+import java.security.KeyFactory;\n+import java.security.KeyPairGenerator;\n+import java.security.Provider;\n+import java.security.Security;\n+import java.util.HexFormat;\n+\n+\/*\n+ * @test\n+ * @bug 8358594\n+ * @library \/test\/lib \/test\/jdk\/sun\/security\/pkcs11\n+ * @modules java.base\/sun.security.util\n+ * @summary confirm the hardcoded NIST categories in KeyUtil class\n+ *\/\n+public class NistCategories {\n+    public static void main(String[] args) throws Exception {\n+        Security.addProvider(PKCS11Test.getSunPKCS11(PKCS11Test.getNssConfig()));\n+\n+        \/\/ Test all asymmetric keys we can generate\n+        for (var p : Security.getProviders()) {\n+            for (var s : p.getServices()) {\n+                switch (s.getType()) {\n+                    case \"KeyPairGenerator\" -> test(s);\n+                }\n+            }\n+        }\n+\n+        \/\/ We cannot generate HSS\/LMS keys\n+        testLMS();\n+\n+        \/\/ SecretKey has no NIST category\n+        Asserts.assertEQ(-1, KeyUtil.getNistCategory(\n+                new SecretKeySpec(new byte[32], \"AES\")));\n+    }\n+\n+    static void test(Provider.Service s) throws Exception {\n+        System.out.println(s.getProvider().getName()\n+                + \" \" + s.getType() + \".\" + s.getAlgorithm());\n+        var alg = s.getAlgorithm();\n+        var g = KeyPairGenerator.getInstance(alg);\n+        var kp = g.generateKeyPair();\n+        var size = switch (g.getAlgorithm()) {\n+            case \"RSA\", \"RSASSA-PSS\", \"DSA\", \"DiffieHellman\", \"DH\",\n+                 \"EC\", \"EdDSA\", \"Ed25519\", \"Ed448\",\n+                 \"XDH\", \"X25519\", \"X448\" -> -1;\n+            case \"ML-KEM-512\" -> 1;\n+            case \"ML-DSA-44\" -> 2;\n+            case \"ML-KEM\", \"ML-KEM-768\", \"ML-DSA\", \"ML-DSA-65\" -> 3;\n+            case \"ML-KEM-1024\", \"ML-DSA-87\" -> 5;\n+            default -> throw new UnsupportedOperationException(alg);\n+        };\n+        Asserts.assertEQ(size, KeyUtil.getNistCategory(kp.getPublic()));\n+        Asserts.assertEQ(size, KeyUtil.getNistCategory(kp.getPrivate()));\n+    }\n+\n+    static void testLMS() throws Exception {\n+        System.out.println(\"HSS\/LMS\");\n+        var spec = new RawKeySpec(HexFormat.of().parseHex(\"\"\"\n+                00000002\n+                00000005\n+                00000004\n+                61a5d57d37f5e46bfb7520806b07a1b8\n+                50650e3b31fe4a773ea29a07f09cf2ea\n+                30e579f0df58ef8e298da0434cb2b878\n+                \"\"\".replaceAll(\"\\\\s\", \"\")));\n+        var key = KeyFactory.getInstance(\"HSS\/LMS\")\n+                .generatePublic(spec);\n+        \/\/ This is not really a confirmation that HSS\/LMS keys should\n+        \/\/ not have a category. It just shows they are not defined in JDK\n+        \/\/ at the moment.\n+        Asserts.assertEQ(-1, KeyUtil.getNistCategory(key));\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/provider\/all\/NistCategories.java","additions":100,"deletions":0,"binary":false,"changes":100,"status":"added"}]}