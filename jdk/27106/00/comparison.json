{"files":[{"patch":"@@ -170,3 +170,1 @@\n-        if (socket != null && socket.isConnected() &&\n-                socket instanceof SSLSocket sslSocket) {\n-\n+        if (socket instanceof SSLSocket sslSocket && sslSocket.isConnected()) {\n@@ -175,14 +173,8 @@\n-            if (session != null) {\n-                if (ProtocolVersion.useTLS12PlusSpec(session.getProtocol())) {\n-                    String[] peerSupportedSignAlgs = null;\n-\n-                    if (session instanceof ExtendedSSLSession extSession) {\n-                        \/\/ Peer supported certificate signature algorithms\n-                        \/\/ sent with \"signature_algorithms_cert\" TLS extension.\n-                        peerSupportedSignAlgs =\n-                                extSession.getPeerSupportedSignatureAlgorithms();\n-                    }\n-\n-                    return SSLAlgorithmConstraints.forSocket(\n-                            sslSocket, peerSupportedSignAlgs, true);\n-                }\n+            if (session instanceof ExtendedSSLSession extSession\n+                    && ProtocolVersion.useTLS12PlusSpec(\n+                    extSession.getProtocol())) {\n+                \/\/ Use peer supported certificate signature algorithms\n+                \/\/ sent with \"signature_algorithms_cert\" TLS extension.\n+                return SSLAlgorithmConstraints.forSocket(sslSocket,\n+                        extSession.getPeerSupportedSignatureAlgorithms(),\n+                        true);\n@@ -206,14 +198,9 @@\n-            if (session != null) {\n-                if (ProtocolVersion.useTLS12PlusSpec(session.getProtocol())) {\n-                    String[] peerSupportedSignAlgs = null;\n-\n-                    if (session instanceof ExtendedSSLSession extSession) {\n-                        \/\/ Peer supported certificate signature algorithms\n-                        \/\/ sent with \"signature_algorithms_cert\" TLS extension.\n-                        peerSupportedSignAlgs =\n-                                extSession.getPeerSupportedSignatureAlgorithms();\n-                    }\n-\n-                    return SSLAlgorithmConstraints.forEngine(\n-                            engine, peerSupportedSignAlgs, true);\n-                }\n+\n+            if (session instanceof ExtendedSSLSession extSession\n+                    && ProtocolVersion.useTLS12PlusSpec(\n+                    extSession.getProtocol())) {\n+                \/\/ Use peer supported certificate signature algorithms\n+                \/\/ sent with \"signature_algorithms_cert\" TLS extension.\n+                return SSLAlgorithmConstraints.forEngine(engine,\n+                        extSession.getPeerSupportedSignatureAlgorithms(),\n+                        true);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/X509KeyManagerCertChecking.java","additions":18,"deletions":31,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -60,4 +60,4 @@\n- * @run main\/othervm AlgorithmConstraintsCheck false SunX509 SHA256withRSA\n- * @run main\/othervm AlgorithmConstraintsCheck true SunX509 SHA256withRSA\n- * @run main\/othervm AlgorithmConstraintsCheck false PKIX SHA256withRSA\n- * @run main\/othervm AlgorithmConstraintsCheck true PKIX SHA256withRSA\n+ * @run main\/othervm AlgorithmConstraintsCheck false SunX509\n+ * @run main\/othervm AlgorithmConstraintsCheck true SunX509\n+ * @run main\/othervm AlgorithmConstraintsCheck false PKIX\n+ * @run main\/othervm AlgorithmConstraintsCheck true PKIX\n@@ -68,2 +68,3 @@\n-    private static final String CERT_ALIAS = \"testalias\";\n-    private static final String KEY_TYPE = \"RSA\";\n+    protected static final String CERT_ALIAS = \"testalias\";\n+    protected static final String KEY_TYPE = \"EC\";\n+    protected static final String CERT_SIG_ALG = \"SHA256withECDSA\";\n@@ -72,1 +73,1 @@\n-        if (args.length != 3) {\n+        if (args.length != 2) {\n@@ -78,1 +79,0 @@\n-        String certSignatureAlg = args[2];\n@@ -81,1 +81,1 @@\n-        SecurityUtils.addToDisabledTlsAlgs(certSignatureAlg);\n+        SecurityUtils.addToDisabledTlsAlgs(CERT_SIG_ALG);\n@@ -84,1 +84,1 @@\n-                kmAlg, certSignatureAlg);\n+                kmAlg, KEY_TYPE, CERT_SIG_ALG);\n@@ -111,1 +111,1 @@\n-    private static String normalizeAlias(String alias) {\n+    protected static String normalizeAlias(String alias) {\n@@ -115,3 +115,3 @@\n-    private static X509KeyManager getKeyManager(String kmAlg,\n-            String certSignatureAlg) throws Exception {\n-        KeyPairGenerator kpg = KeyPairGenerator.getInstance(KEY_TYPE);\n+    protected static X509KeyManager getKeyManager(String kmAlg,\n+            String keyAlg, String certSignatureAlg) throws Exception {\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(keyAlg);\n","filename":"test\/jdk\/sun\/security\/ssl\/X509KeyManager\/AlgorithmConstraintsCheck.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -0,0 +1,405 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8365953\n+ * @summary Key manager returns no certificates when handshakeSession is not\n+ *          an ExtendedSSLSession\n+ * @modules java.base\/sun.security.x509\n+ *          java.base\/sun.security.util\n+ * @library \/test\/lib\n+ * @run main\/othervm NonExtendedSSLSessionAlgorithmConstraints\n+ *\/\n+\n+import static jdk.test.lib.Asserts.assertEquals;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.security.Principal;\n+import javax.net.ssl.HandshakeCompletedListener;\n+import javax.net.ssl.SSLEngine;\n+import javax.net.ssl.SSLEngineResult;\n+import javax.net.ssl.SSLException;\n+import javax.net.ssl.SSLSession;\n+import javax.net.ssl.SSLSessionContext;\n+import javax.net.ssl.SSLSocket;\n+import javax.net.ssl.X509ExtendedKeyManager;\n+\n+\/*\n+ * Make sure Key Managers return the certificates when SSLSocket or SSLEngine\n+ * use an SSLSession which is not extending ExtendedSSLSession.\n+ *\/\n+public class NonExtendedSSLSessionAlgorithmConstraints extends\n+        AlgorithmConstraintsCheck {\n+\n+    public static void main(String[] args) throws Exception {\n+        new NonExtendedSSLSessionAlgorithmConstraints().runTest();\n+    }\n+\n+    private void runTest() throws Exception {\n+        for (String kmAlg : new String[]{\"SunX509\", \"PKIX\"}) {\n+\n+            X509ExtendedKeyManager km =\n+                    (X509ExtendedKeyManager) getKeyManager(\n+                            kmAlg, KEY_TYPE, CERT_SIG_ALG);\n+            var testSocket = new TestHandshakeSessionSSLSocket();\n+            var testEngine = new TestHandshakeSessionSSLEngine();\n+\n+            \/\/ Test SSLSocket\n+            assertEquals(CERT_ALIAS, normalizeAlias(km.chooseServerAlias(\n+                    KEY_TYPE, null, testSocket)));\n+            assertEquals(CERT_ALIAS, normalizeAlias(km.chooseClientAlias(\n+                    new String[]{KEY_TYPE}, null, testSocket)));\n+\n+            \/\/ Test SSLEngine\n+            assertEquals(CERT_ALIAS, normalizeAlias(km.chooseEngineServerAlias(\n+                    KEY_TYPE, null, testEngine)));\n+            assertEquals(CERT_ALIAS, normalizeAlias(km.chooseEngineClientAlias(\n+                    new String[]{KEY_TYPE}, null, testEngine)));\n+        }\n+    }\n+\n+    private static class TestHandshakeSessionSSLSocket extends SSLSocket {\n+\n+        TestHandshakeSessionSSLSocket() {\n+        }\n+\n+        @Override\n+        public SSLSession getHandshakeSession() {\n+            return new TestSSLSession();\n+        }\n+\n+        @Override\n+        public boolean isConnected() {\n+            return true;\n+        }\n+\n+        @Override\n+        public SSLSession getSession() {\n+            return null;\n+        }\n+\n+        @Override\n+        public String[] getSupportedCipherSuites() {\n+            return null;\n+        }\n+\n+        @Override\n+        public String[] getSupportedProtocols() {\n+            return null;\n+        }\n+\n+        @Override\n+        public String[] getEnabledCipherSuites() {\n+            return null;\n+        }\n+\n+        @Override\n+        public void setEnabledCipherSuites(String[] suites) {\n+        }\n+\n+        @Override\n+        public String[] getEnabledProtocols() {\n+            return null;\n+        }\n+\n+        @Override\n+        public void setEnabledProtocols(String[] protocols) {\n+        }\n+\n+        @Override\n+        public void addHandshakeCompletedListener\n+                (HandshakeCompletedListener listener) {\n+        }\n+\n+        @Override\n+        public void removeHandshakeCompletedListener\n+                (HandshakeCompletedListener listener) {\n+        }\n+\n+        @Override\n+        public void startHandshake() throws IOException {\n+        }\n+\n+        @Override\n+        public void setUseClientMode(boolean mode) {\n+        }\n+\n+        @Override\n+        public boolean getUseClientMode() {\n+            return false;\n+        }\n+\n+        @Override\n+        public void setNeedClientAuth(boolean need) {\n+        }\n+\n+        @Override\n+        public boolean getNeedClientAuth() {\n+            return false;\n+        }\n+\n+        @Override\n+        public void setWantClientAuth(boolean want) {\n+        }\n+\n+        @Override\n+        public boolean getWantClientAuth() {\n+            return false;\n+        }\n+\n+        @Override\n+        public void setEnableSessionCreation(boolean flag) {\n+        }\n+\n+        @Override\n+        public boolean getEnableSessionCreation() {\n+            return true;\n+        }\n+    }\n+\n+    private static class TestHandshakeSessionSSLEngine extends SSLEngine {\n+\n+        @Override\n+        public SSLSession getHandshakeSession() {\n+            return new TestSSLSession();\n+        }\n+\n+        @Override\n+        public String[] getEnabledProtocols() {\n+            return null;\n+        }\n+\n+        @Override\n+        public SSLEngineResult wrap(ByteBuffer[] src, int off, int len,\n+                ByteBuffer dst) throws SSLException {\n+            return null;\n+        }\n+\n+        @Override\n+        public SSLEngineResult unwrap(ByteBuffer src,\n+                ByteBuffer[] dst, int off, int len)\n+                throws SSLException {\n+            return null;\n+        }\n+\n+        @Override\n+        public Runnable getDelegatedTask() {\n+            return null;\n+        }\n+\n+        @Override\n+        public void closeInbound() {\n+        }\n+\n+        @Override\n+        public boolean isInboundDone() {\n+            return false;\n+        }\n+\n+        @Override\n+        public void closeOutbound() {\n+        }\n+\n+        @Override\n+        public boolean isOutboundDone() {\n+            return false;\n+        }\n+\n+        @Override\n+        public String[] getEnabledCipherSuites() {\n+            return null;\n+        }\n+\n+        @Override\n+        public String[] getSupportedCipherSuites() {\n+            return null;\n+        }\n+\n+        @Override\n+        public void setEnabledCipherSuites(String[] suites) {\n+        }\n+\n+        @Override\n+        public String[] getSupportedProtocols() {\n+            return null;\n+        }\n+\n+        @Override\n+        public void setEnabledProtocols(String[] protocols) {\n+        }\n+\n+        @Override\n+        public SSLSession getSession() {\n+            return null;\n+        }\n+\n+        @Override\n+        public void beginHandshake() {\n+        }\n+\n+        @Override\n+        public SSLEngineResult.HandshakeStatus getHandshakeStatus() {\n+            return null;\n+        }\n+\n+        @Override\n+        public void setUseClientMode(boolean mode) {\n+        }\n+\n+        @Override\n+        public boolean getUseClientMode() {\n+            return false;\n+        }\n+\n+        public void setNeedClientAuth(boolean need) {\n+        }\n+\n+        @Override\n+        public boolean getNeedClientAuth() {\n+            return false;\n+        }\n+\n+        @Override\n+        public void setWantClientAuth(boolean need) {\n+        }\n+\n+        @Override\n+        public boolean getWantClientAuth() {\n+            return false;\n+        }\n+\n+        @Override\n+        public void setEnableSessionCreation(boolean flag) {\n+        }\n+\n+        @Override\n+        public boolean getEnableSessionCreation() {\n+            return false;\n+        }\n+    }\n+\n+    public static class TestSSLSession implements SSLSession {\n+\n+        TestSSLSession() {\n+        }\n+\n+        @Override\n+        public String getProtocol() {\n+            return \"TLSv1.3\";\n+        }\n+\n+        @Override\n+        public byte[] getId() {\n+            return null;\n+        }\n+\n+        @Override\n+        public SSLSessionContext getSessionContext() {\n+            return null;\n+        }\n+\n+        @Override\n+        public long getCreationTime() {\n+            return 0;\n+        }\n+\n+        @Override\n+        public long getLastAccessedTime() {\n+            return 0;\n+        }\n+\n+        @Override\n+        public void invalidate() {\n+        }\n+\n+        @Override\n+        public boolean isValid() {\n+            return true;\n+        }\n+\n+        @Override\n+        public void putValue(String name, Object value) {\n+        }\n+\n+        @Override\n+        public Object getValue(String name) {\n+            return null;\n+        }\n+\n+        @Override\n+        public void removeValue(String name) {\n+        }\n+\n+        @Override\n+        public String[] getValueNames() {\n+            return null;\n+        }\n+\n+        @Override\n+        public java.security.cert.Certificate[] getPeerCertificates() {\n+            return new java.security.cert.Certificate[0];\n+        }\n+\n+        @Override\n+        public java.security.cert.Certificate[] getLocalCertificates() {\n+            return new java.security.cert.Certificate[0];\n+        }\n+\n+        @Override\n+        public Principal getPeerPrincipal() {\n+            return null;\n+        }\n+\n+        @Override\n+        public Principal getLocalPrincipal() {\n+            return null;\n+        }\n+\n+        @Override\n+        public String getCipherSuite() {\n+            return null;\n+        }\n+\n+        @Override\n+        public String getPeerHost() {\n+            return null;\n+        }\n+\n+        @Override\n+        public int getPeerPort() {\n+            return 0;\n+        }\n+\n+        @Override\n+        public int getPacketBufferSize() {\n+            return 0;\n+        }\n+\n+        @Override\n+        public int getApplicationBufferSize() {\n+            return 0;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/ssl\/X509KeyManager\/NonExtendedSSLSessionAlgorithmConstraints.java","additions":405,"deletions":0,"binary":false,"changes":405,"status":"added"}]}