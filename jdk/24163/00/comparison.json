{"files":[{"patch":"@@ -1166,3 +1166,4 @@\n-    @FailCount(4)\n-    @IR(failOn = IRNode.ALLOC, phase = {CompilePhase.FINAL_CODE, CompilePhase.AFTER_MACRO_EXPANSION})\n-    @IR(failOn = IRNode.ALLOC, phase = CompilePhase.PRINT_IDEAL)\n+    @FailCount(6)\n+    @IR(failOn = IRNode.ALLOC, phase = {CompilePhase.FINAL_CODE, CompilePhase.AFTER_MACRO_EXPANSION})  \/\/ FINAL_CODE not available\n+    @IR(failOn = IRNode.ALLOC, phase = CompilePhase.PRINT_IDEAL)  \/\/ PRINT_IDEAL not available\n+    @IR(failOn = IRNode.ALLOC, phase = {CompilePhase.ITER_GVN1, CompilePhase.AFTER_PARSING})  \/\/ works\n@@ -1170,3 +1171,4 @@\n-                                        CompilePhase.PRINT_OPTO_ASSEMBLY}) \/\/ works\n-    @IR(failOn = IRNode.ALLOC_ARRAY, phase = {CompilePhase.FINAL_CODE, CompilePhase.AFTER_MACRO_EXPANSION})\n-    @IR(failOn = IRNode.ALLOC_ARRAY, phase = CompilePhase.PRINT_IDEAL)\n+                                        CompilePhase.PRINT_OPTO_ASSEMBLY})  \/\/ PRINT_OPTO_ASSEMBLY not available\n+    @IR(failOn = IRNode.ALLOC_ARRAY, phase = {CompilePhase.FINAL_CODE, CompilePhase.AFTER_MACRO_EXPANSION})  \/\/ FINAL_CODE not available\n+    @IR(failOn = IRNode.ALLOC_ARRAY, phase = CompilePhase.PRINT_IDEAL)  \/\/ PRINT_IDEAL not available\n+    @IR(failOn = IRNode.ALLOC_ARRAY, phase = {CompilePhase.ITER_GVN1, CompilePhase.AFTER_PARSING})  \/\/ works\n@@ -1174,1 +1176,1 @@\n-                                        CompilePhase.PRINT_OPTO_ASSEMBLY}) \/\/ works\n+                                        CompilePhase.PRINT_OPTO_ASSEMBLY})  \/\/ PRINT_OPTO_ASSEMBLY not available\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestBadFormat.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -110,0 +110,10 @@\n+    public class Helper {\n+        private String s;\n+\n+        public Helper(String s, int i) {\n+            this.s = s;\n+        }\n+\n+        public String getString() { return s; }\n+    }\n+\n@@ -121,1 +131,1 @@\n-    @ExpectedFailure(ruleId = 1, phase = CompilePhase.PRINT_OPTO_ASSEMBLY, counts = 2)\n+    @ExpectedFailure(ruleId = 1, phase = CompilePhase.BEFORE_MACRO_EXPANSION, counts = 2)\n@@ -128,1 +138,1 @@\n-    @ExpectedFailure(ruleId = 3, phase = CompilePhase.PRINT_OPTO_ASSEMBLY, counts = 2)\n+    @ExpectedFailure(ruleId = 3, phase = CompilePhase.BEFORE_MACRO_EXPANSION, counts = 2)\n@@ -138,2 +148,2 @@\n-    @IR(failOn = {IRNode.STORE_F, IRNode.ALLOC, IRNode.COUNTED_LOOP},\n-        counts = {IRNode.STORE_F, \"3\", IRNode.ALLOC, \"1\", IRNode.COUNTED_LOOP, \"2\"})\n+    @IR(failOn = {IRNode.STORE_F, IRNode.FIELD_ACCESS, IRNode.COUNTED_LOOP},\n+        counts = {IRNode.STORE_F, \"3\", IRNode.FIELD_ACCESS, \"1\", IRNode.COUNTED_LOOP, \"2\"})\n@@ -143,1 +153,1 @@\n-    @IR(failOn = {IRNode.STORE_F, IRNode.ALLOC, IRNode.COUNTED_LOOP})\n+    @IR(failOn = {IRNode.STORE_F, IRNode.FIELD_ACCESS, IRNode.COUNTED_LOOP})\n@@ -146,1 +156,1 @@\n-    @IR(counts = {IRNode.STORE_F, \"3\", IRNode.ALLOC, \"1\", IRNode.COUNTED_LOOP, \"2\"})\n+    @IR(counts = {IRNode.STORE_F, \"3\", IRNode.FIELD_ACCESS, \"1\", IRNode.COUNTED_LOOP, \"2\"})\n@@ -149,2 +159,2 @@\n-    @IR(failOn = {IRNode.STORE_F, IRNode.ALLOC, IRNode.COUNTED_LOOP},\n-        counts = {IRNode.STORE_F, \"3\", IRNode.ALLOC, \"2\", IRNode.COUNTED_LOOP, \"2\"})\n+    @IR(failOn = {IRNode.STORE_F, IRNode.FIELD_ACCESS, IRNode.COUNTED_LOOP},\n+        counts = {IRNode.STORE_F, \"3\", IRNode.FIELD_ACCESS, \"2\", IRNode.COUNTED_LOOP, \"2\"})\n@@ -155,1 +165,1 @@\n-    @IR(counts = {IRNode.ALLOC, \"2\"})\n+    @IR(counts = {IRNode.FIELD_ACCESS, \"2\"})\n@@ -157,2 +167,2 @@\n-    public Object defaultOnOptoAssembly() {\n-        return new Object();\n+    public Object defaultOnOptoAssembly(Helper h) {\n+        return h.getString();\n@@ -164,1 +174,1 @@\n-    @ExpectedFailure(ruleId = 1, phase = CompilePhase.PRINT_OPTO_ASSEMBLY, failOn = {2, 3})\n+    @ExpectedFailure(ruleId = 1, phase = CompilePhase.BEFORE_MACRO_EXPANSION, failOn = {2, 3})\n@@ -169,1 +179,1 @@\n-    @ExpectedFailure(ruleId = 2, phase = CompilePhase.PRINT_OPTO_ASSEMBLY, failOn = {2, 3})\n+    @ExpectedFailure(ruleId = 2, phase = CompilePhase.BEFORE_MACRO_EXPANSION, failOn = {2, 3})\n@@ -173,1 +183,1 @@\n-    @ExpectedFailure(ruleId = 3, phase = CompilePhase.PRINT_OPTO_ASSEMBLY, counts = 3)\n+    @ExpectedFailure(ruleId = 3, phase = CompilePhase.BEFORE_MACRO_EXPANSION, counts = 3)\n@@ -177,1 +187,1 @@\n-    @ExpectedFailure(ruleId = 4, phase = CompilePhase.PRINT_OPTO_ASSEMBLY, failOn = {2, 3}, counts = {2, 3})\n+    @ExpectedFailure(ruleId = 4, phase = CompilePhase.BEFORE_MACRO_EXPANSION, failOn = {2, 3}, counts = {2, 3})\n@@ -181,1 +191,1 @@\n-    @ExpectedFailure(ruleId = 5, phase = CompilePhase.PRINT_OPTO_ASSEMBLY, counts = 1)\n+    @ExpectedFailure(ruleId = 5, phase = CompilePhase.BEFORE_MACRO_EXPANSION, counts = 1)\n@@ -205,1 +215,1 @@\n-    @Run(test = \"removeLoopsWithMultipleCompilations\")\n+    @Run(test = {\"removeLoopsWithMultipleCompilations\", \"defaultOnOptoAssembly\"})\n@@ -214,0 +224,1 @@\n+        defaultOnOptoAssembly(new Helper(\"a\", 1));\n@@ -241,1 +252,1 @@\n-        phase = {CompilePhase.BEFORE_REMOVEUSELESS, CompilePhase.CCP1, CompilePhase.PRINT_OPTO_ASSEMBLY, CompilePhase.DEFAULT})\n+        phase = {CompilePhase.BEFORE_REMOVEUSELESS, CompilePhase.CCP1, CompilePhase.DEFAULT})\n@@ -243,1 +254,1 @@\n-                     phase = {CompilePhase.BEFORE_REMOVEUSELESS, CompilePhase.CCP1, CompilePhase.PRINT_OPTO_ASSEMBLY})\n+                     phase = {CompilePhase.BEFORE_REMOVEUSELESS, CompilePhase.CCP1, CompilePhase.BEFORE_MACRO_EXPANSION})\n@@ -251,1 +262,1 @@\n-        phase = {CompilePhase.BEFORE_REMOVEUSELESS, CompilePhase.CCP1, CompilePhase.PRINT_OPTO_ASSEMBLY, CompilePhase.DEFAULT})\n+        phase = {CompilePhase.BEFORE_REMOVEUSELESS, CompilePhase.CCP1, CompilePhase.DEFAULT})\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestPhaseIRMatching.java","additions":31,"deletions":20,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -116,1 +116,1 @@\n-                           OPTIMIZE_FINISHED, PRINT_IDEAL, PRINT_OPTO_ASSEMBLY);\n+                           OPTIMIZE_FINISHED, PRINT_IDEAL);\n@@ -119,1 +119,1 @@\n-        assertContainsOnly(methodToCompilePhases, testClass, \"mix11\", PHASEIDEALLOOP1, PHASEIDEALLOOP2, PRINT_OPTO_ASSEMBLY,\n+        assertContainsOnly(methodToCompilePhases, testClass, \"mix11\", PHASEIDEALLOOP1, PHASEIDEALLOOP2, BEFORE_MACRO_EXPANSION,\n@@ -121,1 +121,1 @@\n-        assertContainsOnly(methodToCompilePhases, testClass, \"mix12\", PHASEIDEALLOOP1, PHASEIDEALLOOP2, PRINT_OPTO_ASSEMBLY,\n+        assertContainsOnly(methodToCompilePhases, testClass, \"mix12\", PHASEIDEALLOOP1, PHASEIDEALLOOP2,\n@@ -132,1 +132,1 @@\n-                           OPTIMIZE_FINISHED, PRINT_OPTO_ASSEMBLY);\n+                           OPTIMIZE_FINISHED, PRINT_IDEAL);\n@@ -150,1 +150,1 @@\n-        Assert.assertEquals(\"must be equal\", compilePhases.length, compilePhaseSet.size());\n+        Assert.assertEquals(\"In method \" + simpleMethodName + \": must be equal\", compilePhases.length, compilePhaseSet.size());\n@@ -152,1 +152,1 @@\n-            Assert.assertTrue(\"did not find \" + compilePhase + \" for \" + methodName,\n+            Assert.assertTrue(\"In method \" + simpleMethodName + \": did not find \" + compilePhase + \" for \" + methodName,\n@@ -196,0 +196,1 @@\n+\n@@ -197,1 +198,1 @@\n-        @IR(failOn = IRNode.ALLOC)\n+        @IR(counts = {IRNode.SCOPE_OBJECT, \"2\"})\n@@ -200,1 +201,0 @@\n-\n@@ -202,1 +202,1 @@\n-        @IR(failOn = {IRNode.ALLOC_OF, \"Foo\"})\n+        @IR(counts = {IRNode.OOPMAP_WITH, \"Foo\", \"2\"})\n@@ -206,1 +206,2 @@\n-        @IR(counts = {IRNode.SCOPE_OBJECT, \"2\"})\n+        @IR(failOn = IRNode.FIELD_ACCESS)\n+        @IR(counts = {IRNode.CHECKCAST_ARRAY, \"2\"})\n@@ -210,1 +211,2 @@\n-        @IR(counts = {IRNode.ALLOC_ARRAY_OF, \"Foo\", \"!= 4\"})\n+        @IR(failOn = {IRNode.CHECKCAST_ARRAYCOPY, IRNode.CHECKCAST_ARRAY_OF, \"Foo\"})\n+        @IR(counts = {IRNode.CBZ_HI, \"> 1\"})\n@@ -213,1 +215,0 @@\n-\n@@ -215,2 +216,2 @@\n-        @IR(failOn = IRNode.FIELD_ACCESS)\n-        @IR(counts = {IRNode.CHECKCAST_ARRAY, \"2\"})\n+        @IR(failOn = {IRNode.CBNZW_HI})\n+        @IR(counts = {IRNode.CBZ_LS, \"2\", IRNode.CBZW_LS, \"> 1\"})\n@@ -220,2 +221,2 @@\n-        @IR(failOn = {IRNode.CHECKCAST_ARRAYCOPY, IRNode.CHECKCAST_ARRAY_OF, \"Foo\"})\n-        @IR(counts = {IRNode.ALLOC, \"2\", IRNode.ALLOC_ARRAY_OF, \"Foo\", \"> 1\"})\n+        @IR(failOn = {IRNode.CBNZW_HI})\n+        @IR(counts = {IRNode.CBZW_LS, \"> 1\"})\n@@ -227,1 +228,1 @@\n-        @IR(failOn = IRNode.ALLOC)\n+        @IR(failOn = IRNode.FIELD_ACCESS)\n@@ -233,1 +234,1 @@\n-        @IR(failOn = {IRNode.ALLOC_OF, \"Foo\"})\n+        @IR(failOn = {IRNode.CHECKCAST_ARRAY_OF, \"Foo\"})\n@@ -244,1 +245,1 @@\n-        @IR(counts = {IRNode.ALLOC_ARRAY_OF, \"Foo\", \"!= 4\"})\n+        @IR(counts = {IRNode.OOPMAP_WITH, \"Foo\", \"!= 4\"})\n@@ -257,1 +258,1 @@\n-        @IR(counts = {IRNode.ALLOC, \"2\", IRNode.STORE_OF_FIELD, \"iFld\", \"> 1\"})\n+        @IR(counts = {IRNode.FIELD_ACCESS, \"2\", IRNode.STORE_OF_FIELD, \"iFld\", \"> 1\"})\n@@ -311,1 +312,1 @@\n-        @IR(failOn = {IRNode.ALLOC_ARRAY_OF, \"Foo\"}, phase = DEFAULT)\n+        @IR(failOn = {IRNode.OOPMAP_WITH, \"Foo\"}, phase = DEFAULT)\n@@ -329,1 +330,1 @@\n-        @IR(failOn = IRNode.ALLOC, phase = DEFAULT)\n+        @IR(failOn = IRNode.FIELD_ACCESS, phase = DEFAULT)\n@@ -349,1 +350,1 @@\n-        @IR(counts = {IRNode.ALLOC_ARRAY_OF, \"Foo\", \">=3\"}, phase = DEFAULT)\n+        @IR(counts = {IRNode.OOPMAP_WITH, \"Foo\", \">=3\"}, phase = DEFAULT)\n@@ -367,1 +368,1 @@\n-        @IR(counts = {IRNode.ALLOC, \"3\"}, phase = DEFAULT)\n+        @IR(counts = {IRNode.FIELD_ACCESS, \"3\"}, phase = DEFAULT)\n@@ -389,1 +390,1 @@\n-        @IR(failOn = {IRNode.ALLOC_OF, \"Foo\"}, phase = DEFAULT)\n+        @IR(failOn = {IRNode.OOPMAP_WITH, \"Foo\"}, phase = DEFAULT)\n@@ -395,1 +396,1 @@\n-        @IR(failOn = IRNode.ALLOC, phase = DEFAULT)\n+        @IR(failOn = IRNode.FIELD_ACCESS, phase = DEFAULT)\n@@ -405,1 +406,1 @@\n-        @IR(counts = {IRNode.ALLOC, \"3\"}, phase = DEFAULT)\n+        @IR(counts = {IRNode.FIELD_ACCESS, \"3\"}, phase = DEFAULT)\n@@ -416,1 +417,1 @@\n-        @IR(counts = {IRNode.ALLOC, \"3\"}, phase = {FINAL_CODE, OPTIMIZE_FINISHED, DEFAULT})\n+        @IR(counts = {IRNode.LOOP, \"3\"}, phase = {FINAL_CODE, OPTIMIZE_FINISHED, DEFAULT})\n@@ -428,1 +429,1 @@\n-        @IR(failOn = IRNode.ALLOC, phase = {PHASEIDEALLOOP1, PRINT_OPTO_ASSEMBLY, PHASEIDEALLOOP2})\n+        @IR(failOn = IRNode.ALLOC, phase = {PHASEIDEALLOOP1, PHASEIDEALLOOP2})\n@@ -434,1 +435,1 @@\n-        @IR(counts = {IRNode.ALLOC, \"3\"}, phase = {FINAL_CODE, OPTIMIZE_FINISHED, DEFAULT})\n+        @IR(counts = {IRNode.LOOP, \"3\"}, phase = {FINAL_CODE, OPTIMIZE_FINISHED, DEFAULT})\n@@ -459,1 +460,1 @@\n-        @IR(failOn = IRNode.ALLOC, phase = {FINAL_CODE, OPTIMIZE_FINISHED, DEFAULT})\n+        @IR(failOn = IRNode.LOOP, phase = {FINAL_CODE, OPTIMIZE_FINISHED, DEFAULT})\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/flag\/TestCompilePhaseCollector.java","additions":32,"deletions":31,"binary":false,"changes":63,"status":"modified"}]}