{"files":[{"patch":"@@ -1,180 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import org.testng.annotations.Test;\n-\n-import static org.testng.Assert.assertEquals;\n-\n-import java.util.Arrays;\n-\n-\/**\n- * @test\n- * @bug 8302323\n- * @summary Test StringBuilder.repeat sanity tests\n- * @run testng\/othervm -XX:-CompactStrings Repeat\n- * @run testng\/othervm -XX:+CompactStrings Repeat\n- *\/\n-@Test\n-public class Repeat {\n-    private static class MyChars implements CharSequence {\n-        private static final char[] DATA = new char[] { 'a', 'b', 'c' };\n-\n-        @Override\n-        public int length() {\n-            return DATA.length;\n-        }\n-\n-        @Override\n-        public char charAt(int index) {\n-            return DATA[index];\n-        }\n-\n-        @Override\n-        public CharSequence subSequence(int start, int end) {\n-            return new String(Arrays.copyOfRange(DATA, start, end));\n-        }\n-    }\n-\n-    private static final MyChars MYCHARS = new MyChars();\n-\n-    public void sanity() {\n-        StringBuilder sb = new StringBuilder();\n-        \/\/ prime the StringBuilder\n-        sb.append(\"repeat\");\n-\n-        \/\/ single character Latin1\n-        sb.repeat('1', 0);\n-        sb.repeat('2', 1);\n-        sb.repeat('3', 5);\n-\n-        \/\/ single string Latin1 (optimized)\n-        sb.repeat(\"1\", 0);\n-        sb.repeat(\"2\", 1);\n-        sb.repeat(\"3\", 5);\n-\n-        \/\/ multi string Latin1\n-        sb.repeat(\"-1\", 0);\n-        sb.repeat(\"-2\", 1);\n-        sb.repeat(\"-3\", 5);\n-\n-        \/\/ single character UTF16\n-        sb.repeat('\\u2460', 0);\n-        sb.repeat('\\u2461', 1);\n-        sb.repeat('\\u2462', 5);\n-\n-        \/\/ single string UTF16 (optimized)\n-        sb.repeat(\"\\u2460\", 0);\n-        sb.repeat(\"\\u2461\", 1);\n-        sb.repeat(\"\\u2462\", 5);\n-\n-        \/\/ multi string UTF16\n-\n-        sb.repeat(\"-\\u2460\", 0);\n-        sb.repeat(\"-\\u2461\", 1);\n-        sb.repeat(\"-\\u2462\", 5);\n-\n-        \/\/ CharSequence\n-        sb.repeat(MYCHARS, 3);\n-\n-        \/\/ null\n-        sb.repeat((String)null, 0);\n-        sb.repeat((String)null, 1);\n-        sb.repeat((String)null, 5);\n-        sb.repeat((CharSequence)null, 0);\n-        sb.repeat((CharSequence)null, 1);\n-        sb.repeat((CharSequence)null, 5);\n-\n-\n-        String expected = \"repeat233333233333-2-3-3-3-3-3\\u2461\\u2462\\u2462\\u2462\\u2462\\u2462\\u2461\\u2462\\u2462\\u2462\\u2462\\u2462-\\u2461-\\u2462-\\u2462-\\u2462-\\u2462-\\u2462abcabcabc\" +\n-                          \"nullnullnullnullnullnullnullnullnullnullnullnull\";\n-        assertEquals(expected, sb.toString());\n-\n-        \/\/ Codepoints\n-\n-        sb.setLength(0);\n-\n-        sb.repeat(0, 0);\n-        sb.repeat(0, 1);\n-        sb.repeat(0, 5);\n-        sb.repeat((int)' ', 0);\n-        sb.repeat((int)' ', 1);\n-        sb.repeat((int)' ', 5);\n-        sb.repeat(0x2460, 0);\n-        sb.repeat(0x2461, 1);\n-        sb.repeat(0x2462, 5);\n-        sb.repeat(0x10FFFF, 0);\n-        sb.repeat(0x10FFFF, 1);\n-        sb.repeat(0x10FFFF, 5);\n-\n-        expected = \"\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u2461\\u2462\\u2462\\u2462\\u2462\\u2462\\udbff\\udfff\\udbff\\udfff\\udbff\\udfff\\udbff\\udfff\\udbff\\udfff\\udbff\\udfff\";\n-        assertEquals(expected, sb.toString());\n-\n-    }\n-\n-    public void exceptions() {\n-        StringBuilder sb = new StringBuilder();\n-\n-        try {\n-            sb.repeat(' ', Integer.MAX_VALUE);\n-            throw new RuntimeException(\"No OutOfMemoryError thrown\");\n-        } catch (OutOfMemoryError | IndexOutOfBoundsException ex) {\n-            \/\/ Okay\n-        }\n-\n-        try {\n-            sb.repeat(\"    \", Integer.MAX_VALUE);\n-            throw new RuntimeException(\"No OutOfMemoryError thrown\");\n-        } catch (OutOfMemoryError | IndexOutOfBoundsException ex) {\n-            \/\/ Okay\n-        }\n-\n-        try {\n-            sb.repeat(MYCHARS, Integer.MAX_VALUE);\n-            throw new RuntimeException(\"No OutOfMemoryError thrown\");\n-        } catch (OutOfMemoryError | IndexOutOfBoundsException ex) {\n-            \/\/ Okay\n-        }\n-\n-        try {\n-            sb.repeat(' ', -1);\n-            throw new RuntimeException(\"No IllegalArgumentException thrown\");\n-        } catch (IllegalArgumentException | IndexOutOfBoundsException ex) {\n-            \/\/ Okay\n-        }\n-\n-        try {\n-            sb.repeat(\"abc\", -1);\n-            throw new RuntimeException(\"No IllegalArgumentException thrown\");\n-        } catch (IllegalArgumentException | IndexOutOfBoundsException ex) {\n-            \/\/ Okay\n-        }\n-\n-        try {\n-            sb.repeat(MYCHARS, -1);\n-            throw new RuntimeException(\"No IllegalArgumentException thrown\");\n-        } catch (IllegalArgumentException | IndexOutOfBoundsException ex) {\n-            \/\/ Okay\n-        }\n-\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/StringBuilder\/Repeat.java","additions":0,"deletions":180,"binary":false,"changes":180,"status":"deleted"},{"patch":"@@ -0,0 +1,194 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+import java.util.Arrays;\n+\n+\/**\n+ * @test\n+ * @bug 8302323\n+ * @summary Test StringBuffer.repeat sanity tests\n+ * @run testng\/othervm -XX:-CompactStrings StringBufferRepeat\n+ * @run testng\/othervm -XX:+CompactStrings StringBufferRepeat\n+ *\/\n+@Test\n+public class StringBufferRepeat {\n+    private static class MyChars implements CharSequence {\n+        private static final char[] DATA = new char[] { 'a', 'b', 'c' };\n+\n+        @Override\n+        public int length() {\n+            return DATA.length;\n+        }\n+\n+        @Override\n+        public char charAt(int index) {\n+            return DATA[index];\n+        }\n+\n+        @Override\n+        public CharSequence subSequence(int start, int end) {\n+            return new String(Arrays.copyOfRange(DATA, start, end));\n+        }\n+    }\n+\n+    private static final MyChars MYCHARS = new MyChars();\n+\n+    public void sanity() {\n+        StringBuffer sb = new StringBuffer();\n+        \/\/ prime the StringBuffer\n+        sb.append(\"repeat\");\n+\n+        \/\/ single character Latin1\n+        sb.repeat('1', 0);\n+        sb.repeat('2', 1);\n+        sb.repeat('3', 5);\n+\n+        \/\/ single string Latin1 (optimized)\n+        sb.repeat(\"1\", 0);\n+        sb.repeat(\"2\", 1);\n+        sb.repeat(\"3\", 5);\n+\n+        \/\/ multi string Latin1\n+        sb.repeat(\"-1\", 0);\n+        sb.repeat(\"-2\", 1);\n+        sb.repeat(\"-3\", 5);\n+\n+        \/\/ single character UTF16\n+        sb.repeat('\\u2460', 0);\n+        sb.repeat('\\u2461', 1);\n+        sb.repeat('\\u2462', 5);\n+\n+        \/\/ single string UTF16 (optimized)\n+        sb.repeat(\"\\u2460\", 0);\n+        sb.repeat(\"\\u2461\", 1);\n+        sb.repeat(\"\\u2462\", 5);\n+\n+        \/\/ multi string UTF16\n+\n+        sb.repeat(\"-\\u2460\", 0);\n+        sb.repeat(\"-\\u2461\", 1);\n+        sb.repeat(\"-\\u2462\", 5);\n+\n+        \/\/ CharSequence\n+        sb.repeat(MYCHARS, 3);\n+\n+        \/\/ null\n+        sb.repeat((String)null, 0);\n+        sb.repeat((String)null, 1);\n+        sb.repeat((String)null, 5);\n+        sb.repeat((CharSequence)null, 0);\n+        sb.repeat((CharSequence)null, 1);\n+        sb.repeat((CharSequence)null, 5);\n+\n+\n+        String expected = \"repeat233333233333-2-3-3-3-3-3\\u2461\\u2462\\u2462\\u2462\\u2462\\u2462\\u2461\\u2462\\u2462\\u2462\\u2462\\u2462-\\u2461-\\u2462-\\u2462-\\u2462-\\u2462-\\u2462abcabcabc\" +\n+                          \"nullnullnullnullnullnullnullnullnullnullnullnull\";\n+        assertEquals(expected, sb.toString());\n+\n+        \/\/ Codepoints\n+\n+        sb.setLength(0);\n+\n+        sb.repeat(0, 0);\n+        sb.repeat(0, 1);\n+        sb.repeat(0, 5);\n+        sb.repeat((int)' ', 0);\n+        sb.repeat((int)' ', 1);\n+        sb.repeat((int)' ', 5);\n+        sb.repeat(0x2460, 0);\n+        sb.repeat(0x2461, 1);\n+        sb.repeat(0x2462, 5);\n+        sb.repeat(0x10FFFF, 0);\n+        sb.repeat(0x10FFFF, 1);\n+        sb.repeat(0x10FFFF, 5);\n+\n+        expected = \"\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u2461\\u2462\\u2462\\u2462\\u2462\\u2462\\udbff\\udfff\\udbff\\udfff\\udbff\\udfff\\udbff\\udfff\\udbff\\udfff\\udbff\\udfff\";\n+        assertEquals(expected, sb.toString());\n+\n+    }\n+\n+    public void exceptions() {\n+        StringBuffer sb = new StringBuffer();\n+\n+        try {\n+            sb.repeat(' ', Integer.MAX_VALUE);\n+            throw new RuntimeException(\"No OutOfMemoryError thrown\");\n+        } catch (OutOfMemoryError | IndexOutOfBoundsException ex) {\n+            \/\/ Okay\n+        }\n+\n+        try {\n+            sb.repeat(\"    \", Integer.MAX_VALUE);\n+            throw new RuntimeException(\"No OutOfMemoryError thrown\");\n+        } catch (OutOfMemoryError | IndexOutOfBoundsException ex) {\n+            \/\/ Okay\n+        }\n+\n+        try {\n+            sb.repeat(MYCHARS, Integer.MAX_VALUE);\n+            throw new RuntimeException(\"No OutOfMemoryError thrown\");\n+        } catch (OutOfMemoryError | IndexOutOfBoundsException ex) {\n+            \/\/ Okay\n+        }\n+\n+        try {\n+            sb.repeat(' ', -1);\n+            throw new RuntimeException(\"No IllegalArgumentException thrown\");\n+        } catch (IllegalArgumentException ex) {\n+            \/\/ Okay\n+        }\n+\n+        try {\n+            sb.repeat(\"abc\", -1);\n+            throw new RuntimeException(\"No IllegalArgumentException thrown\");\n+        } catch (IllegalArgumentException ex) {\n+            \/\/ Okay\n+        }\n+\n+        try {\n+            sb.repeat(MYCHARS, -1);\n+            throw new RuntimeException(\"No IllegalArgumentException thrown\");\n+        } catch (IllegalArgumentException ex) {\n+            \/\/ Okay\n+        }\n+\n+        try {\n+            sb.repeat(0x10FFFF + 1, -1);\n+            throw new RuntimeException(\"No IllegalArgumentException thrown\");\n+        } catch (IllegalArgumentException ex) {\n+            \/\/ Okay\n+        }\n+\n+        try {\n+            sb.repeat(-1, -1);\n+            throw new RuntimeException(\"No IllegalArgumentException thrown\");\n+        } catch (IllegalArgumentException ex) {\n+            \/\/ Okay\n+        }\n+\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/StringBuilder\/StringBufferRepeat.java","additions":194,"deletions":0,"binary":false,"changes":194,"status":"added"},{"patch":"@@ -0,0 +1,194 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+import java.util.Arrays;\n+\n+\/**\n+ * @test\n+ * @bug 8302323\n+ * @summary Test StringBuilder.repeat sanity tests\n+ * @run testng\/othervm -XX:-CompactStrings StringBuilderRepeat\n+ * @run testng\/othervm -XX:+CompactStrings StringBuilderRepeat\n+ *\/\n+@Test\n+public class StringBuilderRepeat {\n+    private static class MyChars implements CharSequence {\n+        private static final char[] DATA = new char[] { 'a', 'b', 'c' };\n+\n+        @Override\n+        public int length() {\n+            return DATA.length;\n+        }\n+\n+        @Override\n+        public char charAt(int index) {\n+            return DATA[index];\n+        }\n+\n+        @Override\n+        public CharSequence subSequence(int start, int end) {\n+            return new String(Arrays.copyOfRange(DATA, start, end));\n+        }\n+    }\n+\n+    private static final MyChars MYCHARS = new MyChars();\n+\n+    public void sanity() {\n+        StringBuilder sb = new StringBuilder();\n+        \/\/ prime the StringBuilder\n+        sb.append(\"repeat\");\n+\n+        \/\/ single character Latin1\n+        sb.repeat('1', 0);\n+        sb.repeat('2', 1);\n+        sb.repeat('3', 5);\n+\n+        \/\/ single string Latin1 (optimized)\n+        sb.repeat(\"1\", 0);\n+        sb.repeat(\"2\", 1);\n+        sb.repeat(\"3\", 5);\n+\n+        \/\/ multi string Latin1\n+        sb.repeat(\"-1\", 0);\n+        sb.repeat(\"-2\", 1);\n+        sb.repeat(\"-3\", 5);\n+\n+        \/\/ single character UTF16\n+        sb.repeat('\\u2460', 0);\n+        sb.repeat('\\u2461', 1);\n+        sb.repeat('\\u2462', 5);\n+\n+        \/\/ single string UTF16 (optimized)\n+        sb.repeat(\"\\u2460\", 0);\n+        sb.repeat(\"\\u2461\", 1);\n+        sb.repeat(\"\\u2462\", 5);\n+\n+        \/\/ multi string UTF16\n+\n+        sb.repeat(\"-\\u2460\", 0);\n+        sb.repeat(\"-\\u2461\", 1);\n+        sb.repeat(\"-\\u2462\", 5);\n+\n+        \/\/ CharSequence\n+        sb.repeat(MYCHARS, 3);\n+\n+        \/\/ null\n+        sb.repeat((String)null, 0);\n+        sb.repeat((String)null, 1);\n+        sb.repeat((String)null, 5);\n+        sb.repeat((CharSequence)null, 0);\n+        sb.repeat((CharSequence)null, 1);\n+        sb.repeat((CharSequence)null, 5);\n+\n+\n+        String expected = \"repeat233333233333-2-3-3-3-3-3\\u2461\\u2462\\u2462\\u2462\\u2462\\u2462\\u2461\\u2462\\u2462\\u2462\\u2462\\u2462-\\u2461-\\u2462-\\u2462-\\u2462-\\u2462-\\u2462abcabcabc\" +\n+                          \"nullnullnullnullnullnullnullnullnullnullnullnull\";\n+        assertEquals(expected, sb.toString());\n+\n+        \/\/ Codepoints\n+\n+        sb.setLength(0);\n+\n+        sb.repeat(0, 0);\n+        sb.repeat(0, 1);\n+        sb.repeat(0, 5);\n+        sb.repeat((int)' ', 0);\n+        sb.repeat((int)' ', 1);\n+        sb.repeat((int)' ', 5);\n+        sb.repeat(0x2460, 0);\n+        sb.repeat(0x2461, 1);\n+        sb.repeat(0x2462, 5);\n+        sb.repeat(0x10FFFF, 0);\n+        sb.repeat(0x10FFFF, 1);\n+        sb.repeat(0x10FFFF, 5);\n+\n+        expected = \"\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u2461\\u2462\\u2462\\u2462\\u2462\\u2462\\udbff\\udfff\\udbff\\udfff\\udbff\\udfff\\udbff\\udfff\\udbff\\udfff\\udbff\\udfff\";\n+        assertEquals(expected, sb.toString());\n+\n+    }\n+\n+    public void exceptions() {\n+        StringBuilder sb = new StringBuilder();\n+\n+        try {\n+            sb.repeat(' ', Integer.MAX_VALUE);\n+            throw new RuntimeException(\"No OutOfMemoryError thrown\");\n+        } catch (OutOfMemoryError | IndexOutOfBoundsException ex) {\n+            \/\/ Okay\n+        }\n+\n+        try {\n+            sb.repeat(\"    \", Integer.MAX_VALUE);\n+            throw new RuntimeException(\"No OutOfMemoryError thrown\");\n+        } catch (OutOfMemoryError | IndexOutOfBoundsException ex) {\n+            \/\/ Okay\n+        }\n+\n+        try {\n+            sb.repeat(MYCHARS, Integer.MAX_VALUE);\n+            throw new RuntimeException(\"No OutOfMemoryError thrown\");\n+        } catch (OutOfMemoryError | IndexOutOfBoundsException ex) {\n+            \/\/ Okay\n+        }\n+\n+        try {\n+            sb.repeat(' ', -1);\n+            throw new RuntimeException(\"No IllegalArgumentException thrown\");\n+        } catch (IllegalArgumentException ex) {\n+            \/\/ Okay\n+        }\n+\n+        try {\n+            sb.repeat(\"abc\", -1);\n+            throw new RuntimeException(\"No IllegalArgumentException thrown\");\n+        } catch (IllegalArgumentException ex) {\n+            \/\/ Okay\n+        }\n+\n+        try {\n+            sb.repeat(MYCHARS, -1);\n+            throw new RuntimeException(\"No IllegalArgumentException thrown\");\n+        } catch (IllegalArgumentException ex) {\n+            \/\/ Okay\n+        }\n+\n+        try {\n+            sb.repeat(0x10FFFF + 1, -1);\n+            throw new RuntimeException(\"No IllegalArgumentException thrown\");\n+        } catch (IllegalArgumentException ex) {\n+            \/\/ Okay\n+        }\n+\n+        try {\n+            sb.repeat(-1, -1);\n+            throw new RuntimeException(\"No IllegalArgumentException thrown\");\n+        } catch (IllegalArgumentException ex) {\n+            \/\/ Okay\n+        }\n+\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/StringBuilder\/StringBuilderRepeat.java","additions":194,"deletions":0,"binary":false,"changes":194,"status":"added"}]}