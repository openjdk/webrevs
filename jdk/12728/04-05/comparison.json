{"files":[{"patch":"@@ -32,0 +32,1 @@\n+import java.nio.CharBuffer;\n@@ -1825,0 +1826,21 @@\n+    private AbstractStringBuilder repeat(char c, int count) {\n+        int limit = this.count + count;\n+        ensureCapacityInternal(limit);\n+        boolean isLatin1 = isLatin1();\n+        if (isLatin1 && StringLatin1.canEncode(c)) {\n+            byte b = (byte)c;\n+            for (int index = this.count; index < limit; index++) {\n+                value[index] = b;\n+            }\n+        } else {\n+            if (isLatin1) {\n+                inflate();\n+            }\n+            for (int index = this.count; index < limit; index++) {\n+                StringUTF16.putCharSB(value, index, c);\n+            }\n+        }\n+        this.count = limit;\n+        return this;\n+    }\n+\n@@ -1826,1 +1848,2 @@\n-     * Appends {@code count} copies of the character {@code c} to this sequence.\n+     * Repeats {@code count} copies of the string representation of the\n+     * {@code codePoint} argument to this sequence.\n@@ -1828,1 +1851,2 @@\n-     * The length of this sequence increases by {@code count}.\n+     * The length of this sequence increases by {@code count} times the\n+     * string representation length.\n@@ -1830,2 +1854,2 @@\n-     * @param c      character to append\n-     * @param count  number of times to copy\n+     * @param codePoint  code point to append\n+     * @param count      number of times to copy\n@@ -1835,1 +1859,2 @@\n-     * @throws IllegalArgumentException  if {@code count} is negative\n+     * @throws IllegalArgumentException if the specified {@code codePoint}\n+     * is not a valid Unicode code point or if {@code count} is negative.\n@@ -1839,1 +1864,1 @@\n-    public AbstractStringBuilder repeat(char c, int count) {\n+    public AbstractStringBuilder repeat(int codePoint, int count) {\n@@ -1845,8 +1870,2 @@\n-        ensureCapacityInternal(this.count + count);\n-        int index = this.count;\n-        int limit = index + count;\n-        boolean isLatin1 = isLatin1();\n-        if (isLatin1 && StringLatin1.canEncode(c)) {\n-            while (index < limit) {\n-                value[index++] = (byte)c;\n-            }\n+        if (Character.isBmpCodePoint(codePoint)) {\n+            repeat((char)codePoint, count);\n@@ -1854,6 +1873,1 @@\n-            if (isLatin1) {\n-                inflate();\n-            }\n-            while (index < limit) {\n-                StringUTF16.putCharSB(value, index++, c);\n-            }\n+            repeat(CharBuffer.wrap(Character.toChars(codePoint)), count);\n@@ -1861,1 +1875,0 @@\n-        this.count = limit;\n@@ -1911,1 +1924,1 @@\n-        } else  if (cs instanceof AbstractStringBuilder asb) {\n+        } else if (cs instanceof AbstractStringBuilder asb) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/AbstractStringBuilder.java","additions":35,"deletions":22,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -717,2 +717,2 @@\n-    public synchronized StringBuffer repeat(char c, int count) {\n-        super.repeat(c, count);\n+    public synchronized StringBuffer repeat(int codePoint, int count) {\n+        super.repeat(codePoint, count);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringBuffer.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -455,2 +455,2 @@\n-    public StringBuilder repeat(char c, int count) {\n-        super.repeat(c, count);\n+    public StringBuilder repeat(int codePoint, int count) {\n+        super.repeat(codePoint, count);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -111,0 +111,21 @@\n+\n+        \/\/ Codepoints\n+\n+        sb.setLength(0);\n+\n+        sb.repeat(0, 0);\n+        sb.repeat(0, 1);\n+        sb.repeat(0, 5);\n+        sb.repeat((int)' ', 0);\n+        sb.repeat((int)' ', 1);\n+        sb.repeat((int)' ', 5);\n+        sb.repeat(0x2460, 0);\n+        sb.repeat(0x2461, 1);\n+        sb.repeat(0x2462, 5);\n+        sb.repeat(0x10FFFF, 0);\n+        sb.repeat(0x10FFFF, 1);\n+        sb.repeat(0x10FFFF, 5);\n+\n+        expected = \"\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u2461\\u2462\\u2462\\u2462\\u2462\\u2462\\udbff\\udfff\\udbff\\udfff\\udbff\\udfff\\udbff\\udfff\\udbff\\udfff\\udbff\\udfff\";\n+        assertEquals(expected, sb.toString());\n+\n","filename":"test\/jdk\/java\/lang\/StringBuilder\/Repeat.java","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"}]}