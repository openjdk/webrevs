{"files":[{"patch":"@@ -2822,1 +2822,1 @@\n-          \/\/ StoreP::memory_type() == T_ADDRESS\n+          \/\/ StoreP::value_basic_type() == T_ADDRESS\n@@ -2829,1 +2829,1 @@\n-              store->as_Store()->memory_type() == ft) {\n+              store->as_Store()->value_basic_type() == ft) {\n","filename":"src\/hotspot\/share\/opto\/escape.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1216,1 +1216,1 @@\n-      if (memory_type() != T_VOID) {\n+      if (value_basic_type() != T_VOID) {\n@@ -1221,1 +1221,1 @@\n-          return phase->zerocon(memory_type());\n+          return phase->zerocon(value_basic_type());\n@@ -2050,1 +2050,1 @@\n-                                                                      memory_type(), is_unsigned());\n+                                                                      value_basic_type(), is_unsigned());\n@@ -2118,1 +2118,1 @@\n-      const Type* con_type = Type::make_constant_from_field(const_oop->as_instance(), off, is_unsigned(), memory_type());\n+      const Type* con_type = Type::make_constant_from_field(const_oop->as_instance(), off, is_unsigned(), value_basic_type());\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -137,1 +137,5 @@\n-  virtual BasicType memory_type() const = 0;\n+  \/\/ The returned type is a property of the value that is loaded\/stored and\n+  \/\/ not the memory that is accessed. For mismatched memory accesses\n+  \/\/ they might differ. For instance, a value of type 'short' may be stored\n+  \/\/ into an array of elements of type 'long'.\n+  virtual BasicType value_basic_type() const = 0;\n@@ -140,1 +144,1 @@\n-    return type2aelembytes(memory_type(), true);\n+    return type2aelembytes(value_basic_type(), true);\n@@ -142,1 +146,1 @@\n-    return type2aelembytes(memory_type());\n+    return type2aelembytes(value_basic_type());\n@@ -340,1 +344,1 @@\n-  virtual BasicType memory_type() const { return T_BYTE; }\n+  virtual BasicType value_basic_type() const { return T_BYTE; }\n@@ -354,1 +358,1 @@\n-  virtual BasicType memory_type() const { return T_BYTE; }\n+  virtual BasicType value_basic_type() const { return T_BYTE; }\n@@ -368,1 +372,1 @@\n-  virtual BasicType memory_type() const { return T_CHAR; }\n+  virtual BasicType value_basic_type() const { return T_CHAR; }\n@@ -382,1 +386,1 @@\n-  virtual BasicType memory_type() const { return T_SHORT; }\n+  virtual BasicType value_basic_type() const { return T_SHORT; }\n@@ -394,1 +398,1 @@\n-  virtual BasicType memory_type() const { return T_INT; }\n+  virtual BasicType value_basic_type() const { return T_INT; }\n@@ -427,1 +431,1 @@\n-  virtual BasicType memory_type() const { return T_LONG; }\n+  virtual BasicType value_basic_type() const { return T_LONG; }\n@@ -456,1 +460,1 @@\n-  virtual BasicType memory_type() const { return T_FLOAT; }\n+  virtual BasicType value_basic_type() const { return T_FLOAT; }\n@@ -477,1 +481,1 @@\n-  virtual BasicType memory_type() const { return T_DOUBLE; }\n+  virtual BasicType value_basic_type() const { return T_DOUBLE; }\n@@ -506,1 +510,1 @@\n-  virtual BasicType memory_type() const { return T_ADDRESS; }\n+  virtual BasicType value_basic_type() const { return T_ADDRESS; }\n@@ -519,1 +523,1 @@\n-  virtual BasicType memory_type() const { return T_NARROWOOP; }\n+  virtual BasicType value_basic_type() const { return T_NARROWOOP; }\n@@ -558,1 +562,1 @@\n-  virtual BasicType memory_type() const { return T_NARROWKLASS; }\n+  virtual BasicType value_basic_type() const { return T_NARROWKLASS; }\n@@ -669,1 +673,1 @@\n-  virtual BasicType memory_type() const { return T_BYTE; }\n+  virtual BasicType value_basic_type() const { return T_BYTE; }\n@@ -680,1 +684,1 @@\n-  virtual BasicType memory_type() const { return T_CHAR; }\n+  virtual BasicType value_basic_type() const { return T_CHAR; }\n@@ -690,1 +694,1 @@\n-  virtual BasicType memory_type() const { return T_INT; }\n+  virtual BasicType value_basic_type() const { return T_INT; }\n@@ -708,1 +712,1 @@\n-  virtual BasicType memory_type() const { return T_LONG; }\n+  virtual BasicType value_basic_type() const { return T_LONG; }\n@@ -726,1 +730,1 @@\n-  virtual BasicType memory_type() const { return T_FLOAT; }\n+  virtual BasicType value_basic_type() const { return T_FLOAT; }\n@@ -744,1 +748,1 @@\n-  virtual BasicType memory_type() const { return T_DOUBLE; }\n+  virtual BasicType value_basic_type() const { return T_DOUBLE; }\n@@ -763,1 +767,1 @@\n-  virtual BasicType memory_type() const { return T_ADDRESS; }\n+  virtual BasicType value_basic_type() const { return T_ADDRESS; }\n@@ -773,1 +777,1 @@\n-  virtual BasicType memory_type() const { return T_NARROWOOP; }\n+  virtual BasicType value_basic_type() const { return T_NARROWOOP; }\n@@ -783,1 +787,1 @@\n-  virtual BasicType memory_type() const { return T_NARROWKLASS; }\n+  virtual BasicType value_basic_type() const { return T_NARROWKLASS; }\n","filename":"src\/hotspot\/share\/opto\/memnode.hpp","additions":27,"deletions":23,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -161,1 +161,1 @@\n-      bt = n->as_Mem()->memory_type();\n+      bt = n->as_Mem()->value_basic_type();\n@@ -194,1 +194,1 @@\n-        bt = n->as_Mem()->memory_type();\n+        bt = n->as_Mem()->value_basic_type();\n@@ -567,1 +567,1 @@\n-        is_java_primitive(mem->memory_type())) {\n+        is_java_primitive(mem->value_basic_type())) {\n@@ -767,2 +767,2 @@\n-  if (!is_java_primitive(s1->as_Mem()->memory_type()) ||\n-      !is_java_primitive(s2->as_Mem()->memory_type())) {\n+  if (!is_java_primitive(s1->as_Mem()->value_basic_type()) ||\n+      !is_java_primitive(s2->as_Mem()->value_basic_type())) {\n@@ -2595,1 +2595,1 @@\n-    BasicType bt = n->as_Mem()->memory_type();\n+    BasicType bt = n->as_Mem()->value_basic_type();\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1020,1 +1020,1 @@\n-  virtual BasicType memory_type() const { return T_VOID; }\n+  virtual BasicType value_basic_type() const { return T_VOID; }\n@@ -1093,1 +1093,1 @@\n-  virtual BasicType memory_type() const { return T_VOID; }\n+  virtual BasicType value_basic_type() const { return T_VOID; }\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}