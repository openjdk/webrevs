{"files":[{"patch":"@@ -0,0 +1,132 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyAdapter;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.KeyListener;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.awt.event.MouseListener;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JComponent;\n+import javax.swing.SwingUtilities;\n+\n+\/*\n+ * @test\n+ * @bug 4199401\n+ * @summary DefaultFocusManager interferes with comps that\n+ *          return true to isManagingFocus().\n+ * @key headful\n+ * @run main Ctrli\n+ *\/\n+\n+public class Ctrli {\n+    private static JFrame frame;\n+    private static JComponent keyecho;\n+    private static volatile boolean iPressed = false;\n+    private static volatile Point compLoc;\n+    private static volatile int compWidth;\n+    private static volatile int compHeight;\n+\n+    public static void main(String[] args) throws Exception {\n+        Robot robot = new Robot();\n+        robot.setAutoDelay(50);\n+        robot.setAutoWaitForIdle(true);\n+        try {\n+            SwingUtilities.invokeAndWait(Ctrli::createAndShowUI);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                compLoc = keyecho.getLocationOnScreen();\n+                compWidth = keyecho.getWidth();\n+                compHeight = keyecho.getHeight();\n+            });\n+\n+            robot.mouseMove(compLoc.x + compWidth \/ 2, compLoc.y + compHeight \/ 2);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.waitForIdle();\n+\n+            robot.keyPress(KeyEvent.VK_CONTROL);\n+            robot.keyPress(KeyEvent.VK_I);\n+            robot.waitForIdle();\n+            robot.keyRelease(KeyEvent.VK_I);\n+            robot.keyRelease(KeyEvent.VK_CONTROL);\n+            robot.waitForIdle();\n+\n+            if (!iPressed) {\n+                throw new RuntimeException(\"Test failed: CTRL+I not pressed.\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void createAndShowUI() {\n+        frame = new JFrame(\"Test Ctrl+I operation\");\n+        keyecho = new JComponent() {\n+            public boolean isManagingFocus() {\n+                return true;\n+            }\n+        };\n+        KeyListener keyListener = new KeyAdapter() {\n+            public void keyPressed(KeyEvent e) {\n+                if (((e.getModifiers() & ActionEvent.CTRL_MASK) == ActionEvent.CTRL_MASK)\n+                        && (e.getKeyCode() == 73))\n+                    iPressed = true;\n+            }\n+\n+            public void keyTyped(KeyEvent e) {\n+                if (!iPressed) {\n+                    throw new RuntimeException(\"Test failed: CTRL+I not pressed.\");\n+                }\n+            }\n+        };\n+\n+        MouseListener mouseListener = new MouseAdapter() {\n+            public void mousePressed(MouseEvent e) {\n+                keyecho.requestFocus();\n+            }\n+        };\n+\n+        keyecho.addKeyListener(keyListener);\n+        keyecho.addMouseListener(mouseListener);\n+        frame.setLayout(new BorderLayout());\n+        frame.getContentPane().add(keyecho);\n+        frame.setSize(200, 200);\n+        frame.setLocationRelativeTo(null);\n+        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+        frame.setVisible(true);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JInternalFrame\/Ctrli.java","additions":132,"deletions":0,"binary":false,"changes":132,"status":"added"},{"patch":"@@ -0,0 +1,159 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.JTextField;\n+import javax.swing.KeyStroke;\n+import javax.swing.SwingUtilities;\n+\n+\/*\n+ * @test\n+ * @bug 4159610\n+ * @key headful\n+ * @summary Verifies that JMenuItem's shortcuts are not inserted in JTextField\n+ * @run main JActionCommandTest\n+ *\/\n+\n+public class JActionCommandTest {\n+\n+    private static Robot robot;\n+    private static JMenu m;\n+    private static JMenuItem mi;\n+    private static JFrame f;\n+    private static JTextField tf;\n+    private static volatile Point menuLoc;\n+    private static volatile Point menuItemLoc;\n+    private static volatile Point textFieldLoc;\n+    private static volatile int menuWidth;\n+    private static volatile int menuHeight;\n+    private static volatile int menuItemWidth;\n+    private static volatile int menuItemHeight;\n+    private static volatile int textFieldWidth;\n+    private static volatile int textFieldHeight;\n+    private static volatile boolean passed = false;\n+\n+    public static void main(String[] args) throws Exception {\n+        robot = new Robot();\n+        robot.setAutoDelay(50);\n+        robot.setAutoWaitForIdle(true);\n+        try {\n+            SwingUtilities.invokeAndWait(JActionCommandTest::createAndShowUI);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            SwingUtilities.invokeAndWait(() -> {\n+                menuLoc = m.getLocationOnScreen();\n+                menuWidth = m.getWidth();\n+                menuHeight = m.getHeight();\n+\n+                textFieldLoc = tf.getLocationOnScreen();\n+                textFieldWidth = tf.getWidth();\n+                textFieldHeight = tf.getHeight();\n+            });\n+            moveAndPressMouse(menuLoc.x, menuLoc.y, menuWidth, menuHeight);\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                menuItemLoc = mi.getLocationOnScreen();\n+                menuItemWidth = mi.getWidth();\n+                menuItemHeight = mi.getHeight();\n+            });\n+            moveAndPressMouse(menuItemLoc.x, menuItemLoc.y, menuItemWidth, menuItemHeight);\n+            System.out.println(\"passed is: \"+passed);\n+            if (!passed) {\n+                throw new RuntimeException(\"Test Failed: JMenuItem label is not\" +\n+                        \" equals to 'Testitem'.\");\n+            }\n+            passed = false;\n+            moveAndPressMouse(textFieldLoc.x, textFieldLoc.y, textFieldWidth, textFieldHeight);\n+            robot.keyPress(KeyEvent.VK_ALT);\n+            robot.keyPress(KeyEvent.VK_T);\n+            robot.keyRelease(KeyEvent.VK_T);\n+            robot.keyRelease(KeyEvent.VK_ALT);\n+            robot.waitForIdle();\n+\n+            System.out.println(\"passed is: \"+passed);\n+            System.out.println(\"tf.getText() is: \"+tf.getText());\n+            if (!passed && tf.getText().equals(\"t\")) {\n+                throw new RuntimeException(\"Test Failed: Either JMenuItem label is not\" +\n+                        \" equal to 'Testitem' or JTextField contains text 't'. \");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (f != null) {\n+                    f.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void createAndShowUI() {\n+        CustomActionListener customListener = new CustomActionListener();\n+        f = new JFrame(\"Test JMenuItem Shortcut\");\n+        f.getContentPane().setLayout(new BorderLayout());\n+        tf = new JTextField(12);\n+        tf.addActionListener(customListener);\n+        JMenuBar mb = new JMenuBar();\n+        m = new JMenu(\"Test\");\n+        mi = new JMenuItem(\"Testitem\");\n+        KeyStroke ks = KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T,\n+                java.awt.Event.ALT_MASK, false);\n+        mi.setAccelerator(ks);\n+        mi.addActionListener(customListener);\n+        m.add(mi);\n+        mb.add(m);\n+        f.setJMenuBar(mb);\n+        f.getContentPane().add(\"South\", tf);\n+        f.setSize(200, 200);\n+        f.setLocationRelativeTo(null);\n+        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+        f.setVisible(true);\n+    }\n+\n+    public static void moveAndPressMouse(int x, int y, int width, int height) {\n+        robot.mouseMove(x + width \/ 2, y + height \/ 2);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.waitForIdle();\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.waitForIdle();\n+    }\n+\n+    static class CustomActionListener implements ActionListener {\n+        @Override\n+        public void actionPerformed(ActionEvent e) {\n+            if (e.getSource() == mi && e.getActionCommand().equals(\"Testitem\")) {\n+                System.out.println(\"MenuItem's label: \" + e.getActionCommand());\n+                passed = true;\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JMenuItem\/JActionCommandTest.java","additions":159,"deletions":0,"binary":false,"changes":159,"status":"added"}]}