{"files":[{"patch":"@@ -733,3 +733,4 @@\n-  \/\/ use MachConstantBase, it gets modified during matching. So when cloning\n-  \/\/ the node the JVMState must be deep cloned. Default is to shallow clone.\n-  virtual bool needs_deep_clone_jvms(Compile* C) { return C->needs_deep_clone_jvms(); }\n+  \/\/ use MachConstantBase, it gets modified during matching. If the call is\n+  \/\/ late inlined, it also needs the full JVMState. So when cloning the\n+  \/\/ node the JVMState must be deep cloned. Default is to shallow clone.\n+  virtual bool needs_deep_clone_jvms(Compile* C) { return _generator != nullptr || C->needs_deep_clone_jvms(); }\n","filename":"src\/hotspot\/share\/opto\/callnode.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -566,0 +566,3 @@\n+      if (cloned_cg->is_mh_late_inline()) {\n+        C->inc_number_of_mh_late_inlines();\n+      }\n","filename":"src\/hotspot\/share\/opto\/node.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,109 @@\n+\/*\n+ * Copyright (c) 2025 IBM Corporation. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8370939\n+ * @summary C2: SIGSEGV in SafePointNode::verify_input when processing MH call from Compile::process_late_inline_calls_no_inline()\n+ * @run main\/othervm -XX:-BackgroundCompilation -XX:CompileOnly=TestLateMHClonedCallNode::test1 -XX:CompileOnly=TestLateMHClonedCallNode::test2 TestLateMHClonedCallNode\n+ * @run main TestLateMHClonedCallNode\n+ *\/\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+\n+public class TestLateMHClonedCallNode {\n+    private static int field;\n+\n+    public static void main(String[] args) throws Throwable {\n+        for (int i = 0; i < 20_000; i++) {\n+            test1(true);\n+            test1(false);\n+            test2(true);\n+            test2(false);\n+        }\n+    }\n+\n+    private static int test1(boolean flag) throws Throwable {\n+        return inlined1(flag);\n+    }\n+\n+    private static int inlined1(boolean flag) throws Throwable {\n+        MethodHandle mh = mh1;\n+        for (int i = 0; i < 3; ++i) {\n+            if (i > 1) {\n+                mh = mh2;\n+            }\n+        }\n+        int res = 0;\n+        for (int i = 0; i < 2; i++) {\n+            if (!flag) {\n+                field = 42;\n+            }\n+            res += (int) mh.invokeExact();\n+        }\n+        return res;\n+    }\n+\n+    private static int test2(boolean flag) throws Throwable {\n+        int res = (int)unknownMh.invokeExact();\n+        return inlined2(flag);\n+    }\n+\n+    private static int inlined2(boolean flag) throws Throwable {\n+        MethodHandle mh = mh1;\n+        for (int i = 0; i < 3; ++i) {\n+            if (i > 1) {\n+                mh = mh2;\n+            }\n+        }\n+        int res = 0;\n+        for (int i = 0; i < 2; i++) {\n+            if (!flag) {\n+                field = 42;\n+            }\n+            res += (int) mh.invokeExact();\n+        }\n+        return res;\n+    }\n+\n+    static final MethodHandle mh1;\n+    static final MethodHandle mh2;\n+    static MethodHandle unknownMh;\n+\n+    static {\n+        try {\n+            MethodHandles.Lookup lookup = MethodHandles.lookup();\n+            mh1 = lookup.findStatic(TestLateMHClonedCallNode.class, \"method1\", MethodType.methodType(int.class));\n+            mh2 = lookup.findStatic(TestLateMHClonedCallNode.class, \"method2\", MethodType.methodType(int.class));\n+            unknownMh = mh1;\n+        } catch (NoSuchMethodException | IllegalAccessException e) {\n+            e.printStackTrace();\n+            throw new RuntimeException(\"Method handle lookup failed\");\n+        }\n+    }\n+\n+    static int method1() { return 0; }\n+    static int method2() { return 42; }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/inlining\/TestLateMHClonedCallNode.java","additions":109,"deletions":0,"binary":false,"changes":109,"status":"added"}]}