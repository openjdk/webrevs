{"files":[{"patch":"@@ -0,0 +1,122 @@\n+\/*\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ * @test\n+ * @bug 4060975\n+ * @summary tests that a component doesn't lose focus on resize\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual FocusChangeOnResizeTest\n+*\/\n+\n+import java.util.List;\n+\n+import java.awt.Button;\n+import java.awt.Dialog;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.Panel;\n+import java.awt.TextField;\n+import java.awt.Window;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.FocusListener;\n+\n+public class FocusChangeOnResizeTest {\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+          For the Frame and the Dialog:\n+          Press the LOWER BUTTON to resize the Frame or Dialog programmatically.\n+          Give the focus to the LOWER BUTTON and resize the Frame or Dialog manually.\n+          If the LOWER BUTTON always has focus after resize\n+          (for both frame and dialog) the test passes.\"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"PopupMenu Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(35)\n+                .testUI(FocusChangeOnResizeTest::createTestUI)\n+                .logArea()\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static List<Window> createTestUI() {\n+        Frame frame = new Frame(\"FocusChangeOnResizeTest frame\");\n+        Dialog dialog = new Dialog(frame, \"Test dialog\");\n+        frame.add(new TestPanel(frame));\n+        dialog.add(new TestPanel(dialog));\n+        frame.setBounds (150, 200, 200, 200);\n+        dialog.setBounds (150, 500, 200, 200);\n+        return List.of(frame, dialog);\n+    }\n+\n+    static FocusListener eventLogger = new FocusListener() {\n+        public void focusGained(FocusEvent e) {\n+            PassFailJFrame.log(e.toString());\n+        }\n+        public void focusLost(FocusEvent e) {\n+           PassFailJFrame.log(e.toString());\n+        }\n+    };\n+}\n+\n+class TestPanel extends Panel {\n+\n+    TextField textField = new TextField(\"TEXT FIELD\");\n+    Button button1 = new Button(\"UPPER BUTTON\");\n+    Button button2 = new Button(\"LOWER BUTTON\");\n+\n+    public TestPanel(Window parent) {\n+        setLayout(new GridLayout(3, 1));\n+        add(textField);\n+        add(button1);\n+        add(button2);\n+        textField.setName(\"TEXT FIELD\");\n+        button1.setName(\"UPPER BUTTON\");\n+        button2.setName(\"LOWER BUTTON\");\n+        textField.addFocusListener(FocusChangeOnResizeTest.eventLogger);\n+        button1.addFocusListener(FocusChangeOnResizeTest.eventLogger);\n+        button2.addFocusListener(FocusChangeOnResizeTest.eventLogger);\n+\n+        button2.addActionListener(new Resizer(parent));\n+    }\n+}\n+\n+class Resizer implements ActionListener {\n+    Window target;\n+\n+    public Resizer(Window window) {\n+        target = window;\n+    }\n+\n+    public void actionPerformed(ActionEvent e) {\n+        target.setSize(200, 100);\n+        target.doLayout();\n+        target.pack();\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/awt\/Focus\/FocusChangeOnResizeTest.java","additions":122,"deletions":0,"binary":false,"changes":122,"status":"added"},{"patch":"@@ -0,0 +1,261 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ * @test\n+ * @bug 4124119\n+ * @summary Checks that lightweight components do not lose focus after\n+        dragging the frame by using the mouse.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual LightweightFocusLostTest\n+*\/\n+\n+import java.awt.AWTEvent;\n+import java.awt.AWTEventMulticaster;\n+import java.awt.BorderLayout;\n+import java.awt.Component;\n+import java.awt.Cursor;\n+import java.awt.Label;\n+import java.awt.Dimension;\n+import java.awt.Font;\n+import java.awt.FontMetrics;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.SystemColor;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.KeyAdapter;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+\n+\n+public class LightweightFocusLostTest {\n+\n+     private static final String INSTRUCTIONS = \"\"\"\n+        Steps to try to reproduce this problem:\n+        When this test is run a window will display (Test Focus).\n+        Click in the text field to give it the focus (a blinking cursor\n+        will appear) and then move the frame with the mouse. The text field\n+        (component which uses a lightweight component) should still have focus.\n+        You should still see the blinking cursor in the text field after the\n+        frame has been moved. If this is the behavior that you observe, the\n+        test has passed, Press the Pass button. Otherwise the test has failed,\n+        Press the Fail button.\"\"\";\n+\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"LightweightFocusLostTest Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 5)\n+                .columns(35)\n+                .testUI(LightweightFocusLostTest::createTestUI)\n+                .logArea()\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static Frame createTestUI() {\n+        Frame f = new Frame(\"LightweightFocusLostTest\");\n+        f.setLayout(new BorderLayout());\n+        String sLabel = \"Lightweight component below (text field)\";\n+        Label TFL = new Label(sLabel, Label.LEFT);\n+        f.add(TFL, BorderLayout.NORTH);\n+        SimpleTextField canvas = new SimpleTextField(30, 5);\n+        f.add(canvas, BorderLayout.CENTER);\n+        f.setSize(new Dimension(300,125));\n+        f.requestFocus();\n+        return f;\n+\n+    }\n+\n+}\n+\n+class SimpleTextField extends Component implements Runnable {\n+    int border;\n+    int length;\n+    Font font;\n+    FontMetrics fontM;\n+    char[] buffer;\n+    int bufferIx;\n+\n+    boolean hasFocus;\n+    boolean cursorOn;\n+\n+    SimpleTextField(int len, int bor) {\n+        super();\n+        border = bor;\n+        length = len;\n+        buffer = new char[len];\n+        font = getFont();\n+        if (font == null) {\n+            font = new Font(\"Dialog\", Font.PLAIN, 20);\n+        }\n+        fontM = getFontMetrics(font);\n+\n+        \/\/ Listen for key and mouse events.\n+        this.addMouseListener(new MouseEventHandler());\n+        this.addFocusListener(new FocusEventHandler());\n+        this.addKeyListener(new KeyEventHandler());\n+\n+        \/\/ Set text cursor.\n+        setCursor(Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR));\n+\n+        \/\/ Start the thread that blinks the cursor.\n+        (new Thread(this)).start();\n+    }\n+\n+    public Dimension getMinimumSize() {\n+        \/\/ The minimum height depends on the point size.\n+        int w = fontM.charWidth('m') * length;\n+        return new Dimension(w + 2 * border, fontM.getHeight() + 2 * border);\n+    }\n+    public Dimension getPreferredSize() {\n+        return getMinimumSize();\n+    }\n+    public Dimension getMaximumSize() {\n+        return new Dimension(Short.MAX_VALUE, getPreferredSize().height);\n+    }\n+\n+    public boolean isFocusTraversable() {\n+        return true;\n+    }\n+\n+    public void paint(Graphics g) {\n+        int y = (getSize().height-fontM.getHeight())\/2;\n+\n+        \/\/ Clear the background using the text background color.\n+        g.setColor(SystemColor.text);\n+        g.fillRect(0, 0, getSize().width, getSize().height);\n+\n+        g.setFont(font);\n+        g.setColor(SystemColor.textText);\n+        g.drawChars(buffer, 0, bufferIx, border, y + fontM.getAscent());\n+\n+        \/\/ Draw blinking cursor.\n+        int x = fontM.charsWidth(buffer, 0, bufferIx) + border;\n+        int w = fontM.charWidth('c');\n+        if (hasFocus) {\n+            g.setColor(getForeground());\n+            g.fillRect(x, y, w, fontM.getHeight());\n+            if (cursorOn) {\n+                if (bufferIx < buffer.length) {\n+                    g.setColor(SystemColor.text);\n+                    g.fillRect(x + 2, y + 2, w - 4, fontM.getHeight() - 4);\n+                }\n+            }\n+        }\n+    }\n+\n+    \/\/ Event handlers\n+    class MouseEventHandler extends MouseAdapter {\n+        public void mousePressed(MouseEvent evt) {\n+            requestFocus();\n+        }\n+    }\n+    class FocusEventHandler extends FocusAdapter {\n+        public void focusGained(FocusEvent evt) {\n+            PassFailJFrame.log(\"Focus gained: \" + evt);\n+\n+            hasFocus = true;\n+            repaint();\n+        }\n+        public void focusLost(FocusEvent evt) {\n+            PassFailJFrame.log(\"Focus lost: \" + evt);\n+            hasFocus = false;\n+            repaint();\n+        }\n+    }\n+    class KeyEventHandler extends KeyAdapter {\n+        public void keyPressed(KeyEvent evt) {\n+            switch (evt.getKeyCode()) {\n+              case KeyEvent.VK_DELETE:\n+              case KeyEvent.VK_BACK_SPACE:\n+                if (bufferIx > 0) {\n+                    bufferIx--;\n+                    repaint();\n+                }\n+                break;\n+              case KeyEvent.VK_ENTER:\n+                ActionEvent action =\n+                    new ActionEvent(SimpleTextField.this,\n+                                    ActionEvent.ACTION_PERFORMED,\n+                                    String.valueOf(buffer, 0, bufferIx));\n+                \/\/ Send contents of buffer to listeners\n+                processEvent(action);\n+                break;\n+              default:\n+                repaint();\n+            }\n+        }\n+        public void keyTyped(KeyEvent evt) {\n+            if (bufferIx < buffer.length\n+                    && !evt.isActionKey()\n+                    && !Character.isISOControl(evt.getKeyChar())) {\n+                buffer[bufferIx++] = evt.getKeyChar();\n+            }\n+        }\n+    }\n+\n+    \/\/ Support for Action Listener.\n+    ActionListener actionListener;\n+\n+    public void addActionListener(ActionListener l) {\n+        actionListener = AWTEventMulticaster.add(actionListener, l);\n+    }\n+\n+    \/\/ Override processEvent() to deal with ActionEvent.\n+    protected void processEvent(AWTEvent evt) {\n+        if (evt instanceof ActionEvent) {\n+            processActionEvent((ActionEvent)evt);\n+        } else {\n+            super.processEvent(evt);\n+        }\n+    }\n+\n+    \/\/ Supply method to process Action event.\n+    protected void processActionEvent(ActionEvent evt) {\n+        if (actionListener != null) {\n+            actionListener.actionPerformed(evt);\n+        }\n+    }\n+\n+    public void run() {\n+        while (true) {\n+            try {\n+                \/\/ If component has focus, blink the cursor every 1\/2 second.\n+                Thread.sleep(500);\n+                cursorOn = !cursorOn;\n+                if (hasFocus) {\n+                    repaint();\n+                }\n+            } catch (Exception e) {\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/awt\/Focus\/LightweightFocusLostTest.java","additions":261,"deletions":0,"binary":false,"changes":261,"status":"added"},{"patch":"@@ -0,0 +1,207 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug  4098290 4140890\n+ * @summary Using non-opaque windows - popups are initially not painted correctly\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual MixedWeightFocus\n+*\/\n+\n+import java.util.List;\n+import java.awt.AWTEvent;\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Dialog;\n+import java.awt.Dimension;\n+import java.awt.Frame;\n+import java.awt.FlowLayout;\n+import java.awt.FontMetrics;\n+import java.awt.Graphics;\n+import java.awt.Panel;\n+import java.awt.Toolkit;\n+import java.awt.Window;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.MouseEvent;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+\n+public class MixedWeightFocus {\n+\n+    static FocusFrame f;\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+        This tests that permanent FOCUS_LOST messages are sent to lightweight\n+        components when the focus shifts to a heavyweight component. It also\n+        tests that components retain the focus when their parent window is\n+        deactivated and activated.\n+\n+        1. Tab or mouse between the light and heavyweight buttons in this test\n+           and verify that the focus rectangle on the lightweight components\n+           disappears when focus shifts to a heavyweight button.\n+\n+        2. Activate another application then reactivate the test frame window.\n+           Verify that the component that had the focus (light or heavy) when\n+           the frame was deactivated regains the focus when it's reactivated. Do\n+           the same thing for the modeless dialog. Also test this by moving the\n+           activation between the dialog and the frame.\n+\n+        3. Verify that lightweight components with the focus in a deactivated\n+           window draw their focus rectangles in gray instead of blue-- this indicates\n+           they received temporary instead of permanent FOCUS_LOST events.\n+\n+        NOTE: There is currently another problem with lightweight components\n+           where if you click on one to activate its frame window, the lightweight\n+           that previously had the focus will not get a FOCUS_LOST event. This\n+           may manifest itself with a gray focus rectangle not getting erased.\n+           Ignore this for now (Win32 only).\"\"\";\n+\n+    public static void main(String[] argv) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"MixedWeightFocus Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 5)\n+                .columns(45)\n+                .testUI(MixedWeightFocus::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static List<Window> createTestUI() {\n+        FocusFrame f = new FocusFrame();\n+        ModelessDialog dlg = new ModelessDialog(f);\n+\n+        return List.of(f, dlg);\n+    }\n+}\n+\n+class FocusFrame extends Frame {\n+    public FocusFrame() {\n+        super(\"FocusFrame\");\n+        Panel p = new Panel();\n+\n+        p.add(new Button(\"button 1\"));\n+        p.add(new LightweightComp(\"lw 1\"));\n+        p.add(new Button(\"button 2\"));\n+        p.add(new LightweightComp(\"lw 2\"));\n+        add(p);\n+\n+        pack();\n+        setLocation(100, 100);\n+\n+        addWindowListener(new WindowAdapter() {\n+                              public void windowClosing(WindowEvent ev) {\n+                                  dispose();\n+                              }\n+                         });\n+    }\n+\n+}\n+\n+class ModelessDialog extends Dialog {\n+    public ModelessDialog(Frame frame) {\n+        super(frame, \"ModelessDialog\", false);\n+        setLayout( new FlowLayout() );\n+        add(new Button(\"button 1\"));\n+        add(new LightweightComp(\"lw 1\"));\n+        pack();\n+        setLocation(100, 400);\n+    }\n+}\n+\n+\/\/ simple lightweight component, focus traversable, highlights upon focus\n+class LightweightComp extends Component {\n+    FontMetrics fm;\n+    String label;\n+    private static final int FOCUS_GONE = 0;\n+    private static final int FOCUS_TEMP = 1;\n+    private static final int FOCUS_HAVE = 2;\n+    int focusLevel = FOCUS_GONE;\n+    public static int nameCounter = 0;\n+\n+    public LightweightComp(String lwLabel ) {\n+        label = lwLabel;\n+        enableEvents(AWTEvent.FOCUS_EVENT_MASK|AWTEvent.MOUSE_EVENT_MASK);\n+        setName(\"lw\"+Integer.toString(nameCounter++));\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        if (fm == null) {\n+            fm = Toolkit.getDefaultToolkit().getFontMetrics(getFont());\n+        }\n+        return new Dimension(fm.stringWidth(label) + 2, fm.getHeight() + 2);\n+    }\n+\n+    public void paint(Graphics g) {\n+        Dimension s=getSize();\n+\n+        \/\/ erase the background\n+        g.setColor(getBackground());\n+        g.fillRect(0, 0, s.width, s.height);\n+\n+        g.setColor(getForeground());\n+\n+        \/\/ draw the string\n+        g.drawString(label, 2, fm.getHeight());\n+\n+        \/\/ draw a focus rectangle\n+        if (focusLevel > FOCUS_GONE) {\n+            if (focusLevel == FOCUS_TEMP) {\n+                g.setColor(Color.gray);\n+            } else {\n+                g.setColor(Color.blue);\n+            }\n+            g.drawRect(1,1,s.width-2,s.height-2);\n+        }\n+    }\n+\n+\n+    public boolean isFocusTraversable() {\n+        return true;\n+    }\n+\n+    protected void processFocusEvent(FocusEvent e) {\n+        super.processFocusEvent(e);\n+        if (e.getID() == FocusEvent.FOCUS_GAINED) {\n+            focusLevel = FOCUS_HAVE;\n+        } else {\n+            if (e.isTemporary()) {\n+                focusLevel = FOCUS_TEMP;\n+            } else {\n+                focusLevel = FOCUS_GONE;\n+            }\n+        }\n+        repaint();\n+    }\n+\n+    protected void processMouseEvent(MouseEvent e) {\n+\n+        if (e.getID()==MouseEvent.MOUSE_PRESSED) {\n+            requestFocus();\n+        }\n+        super.processMouseEvent(e);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Focus\/MixedWeightFocus.java","additions":207,"deletions":0,"binary":false,"changes":207,"status":"added"},{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ * @test\n+ * @bug 4474893\n+ * @summary Component.nextFocusHelper should search for first visible focus cycle root ancst\n+ * @key headful\n+ * @run main NextFocusHelperTest\n+*\/\n+\n+import java.awt.Button;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.FlowLayout;\n+import java.awt.KeyboardFocusManager;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+\n+public class NextFocusHelperTest {\n+    static Panel panel;\n+    static Frame frame;\n+    static Button btn1;\n+    static Button btn3;\n+    static Button hideButton;\n+\n+    public static void main(String[] args) throws Exception {\n+        Robot robot = new Robot();\n+        robot.setAutoDelay(100);\n+        try {\n+            EventQueue.invokeAndWait(() -> createTestUI());\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            Point loc = btn1.getLocationOnScreen();\n+            Dimension dim = btn1.getSize();\n+            robot.mouseMove(loc.x + dim.width\/2, loc.y + dim.height\/2);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.waitForIdle();\n+            robot.delay(500);\n+\n+            Point loc1 = hideButton.getLocationOnScreen();\n+            Dimension dim1 = hideButton.getSize();\n+            robot.mouseMove(loc1.x + dim1.width\/2, loc1.y + dim1.height\/2);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.waitForIdle();\n+\n+            if (KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner()\n+                    instanceof Button btn) {\n+                if (!btn.getLabel().equals(\"Button 3\")) {\n+                    throw new RuntimeException(\"Wrong button has focus\");\n+                }\n+            }\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void createTestUI() {\n+        frame = new Frame(\"NextFocusHelperTest Frame\");\n+        frame.setLayout(new FlowLayout());\n+\n+        panel = new Panel();\n+        panel.setFocusCycleRoot(true);\n+        btn1 = new Button(\"Button In Panel\");\n+        panel.add(btn1);\n+\n+        hideButton = new Button(\"Hide Panel\");\n+        hideButton.setFocusable(false);\n+        hideButton.addActionListener(e -> {\n+            panel.setVisible(false);\n+        });\n+\n+        frame.add(new Button(\"Button 1\"));\n+        frame.add(panel);\n+        frame.add(new Button(\"Button 3\"));\n+        frame.add(hideButton);\n+        frame.setSize(200, 200);\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/awt\/Focus\/NextFocusHelperTest.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"}]}