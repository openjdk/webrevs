{"files":[{"patch":"@@ -35,0 +35,1 @@\n+#include \"prims\/jvmtiAgentList.hpp\"\n@@ -433,0 +434,4 @@\n+\n+  \/\/ This is an old flag used by CDS regression testing only. It doesn't apply\n+  \/\/ to the AOT workflow.\n+  FLAG_SET_ERGO(AllowArchivingWithJavaAgent, false);\n@@ -483,0 +488,9 @@\n+\n+  \/\/ We don't load any agents in the assembly phase, so we can ensure that the agents\n+  \/\/ cannot affect the contents of the AOT cache. E.g., we don't want the agents to\n+  \/\/ redefine any cached classes. We also don't want the agents to modify heap objects that\n+  \/\/ are cached.\n+  \/\/\n+  \/\/ Since application is not executed in the assembly phase, there's no need to load\n+  \/\/ the agents anyway -- no one will notice that the agents are not loaded.\n+  JvmtiAgentList::disable_agent_list();\n","filename":"src\/hotspot\/share\/cds\/cdsConfig.cpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -67,1 +67,2 @@\n-          \"Allow Java agent to be run with CDS dumping\")                    \\\n+          \"Allow Java agent to be run with CDS dumping (not applicable\"     \\\n+          \" to AOT\")                                                        \\\n","filename":"src\/hotspot\/share\/cds\/cds_globals.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"classfile\/systemDictionaryShared.hpp\"\n@@ -208,0 +209,3 @@\n+  if (CDSConfig::is_dumping_archive() && stream->from_class_file_load_hook()) {\n+    SystemDictionaryShared::set_from_class_file_load_hook(result);\n+  }\n","filename":"src\/hotspot\/share\/classfile\/klassFactory.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -737,0 +737,5 @@\n+void SystemDictionaryShared::set_from_class_file_load_hook(InstanceKlass* ik) {\n+  warn_excluded(ik, \"From ClassFileLoadHook\");\n+  set_excluded(ik);\n+}\n+\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -263,0 +263,1 @@\n+  static void set_from_class_file_load_hook(InstanceKlass* k) NOT_CDS_RETURN;\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -581,0 +581,1 @@\n+#if INCLUDE_CDS\n@@ -584,0 +585,9 @@\n+  if (CDSConfig::new_aot_flags_used()) { \/\/ JEP 483\n+    \/\/ Agents are allowed with -XX:AOTMode=record and -XX:AOTMode=on\/auto.\n+    \/\/ Agents are completely disabled when -XX:AOTMode=create\n+    assert(!CDSConfig::is_dumping_final_static_archive(), \"agents should have been disabled with -XX:AOTMode=create\");\n+    return;\n+  }\n+\n+  \/\/ This is classic CDS limitations -- we disallow agents by default. They can be used\n+  \/\/ with -XX:+AllowArchivingWithJavaAgent, but that should be used for diagnostic purposes only.\n@@ -585,1 +595,0 @@\n-  assert(CDSConfig::is_dumping_archive(), \"invariant\");\n@@ -594,0 +603,1 @@\n+#endif \/\/ INCLUDE_CDS\n@@ -601,0 +611,1 @@\n+#if INCLUDE_CDS\n@@ -604,0 +615,1 @@\n+#endif\n","filename":"src\/hotspot\/share\/prims\/jvmtiAgent.cpp","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -24,0 +24,4 @@\n+#include \"cds\/cdsConfig.hpp\"\n+#include \"cds\/cds_globals.hpp\"\n+#include \"logging\/log.hpp\"\n+#include \"memory\/universe.hpp\"\n@@ -65,1 +69,0 @@\n-\n@@ -277,0 +280,9 @@\n+\n+void JvmtiAgentList::disable_agent_list() {\n+#if INCLUDE_CDS\n+  assert(CDSConfig::is_dumping_final_static_archive(), \"use this only for -XX:AOTMode=create!\");\n+  assert(!Universe::is_bootstrapping() && !Universe::is_fully_initialized(), \"must do this very early\");\n+  log_info(aot)(\"Disabled all JVMTI agents during -XX:AOTMode=create\");\n+  _list = nullptr; \/\/ Pretend that no agents have been added.\n+#endif\n+}\n","filename":"src\/hotspot\/share\/prims\/jvmtiAgentList.cpp","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -89,0 +89,1 @@\n+  static void disable_agent_list() NOT_JVMTI_RETURN;\n","filename":"src\/hotspot\/share\/prims\/jvmtiAgentList.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,117 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\n+\/*\n+ * @test\n+ * @summary -javaagent should be allowed in AOT workflow. However, classes transformed\/redefined by agents will not\n+ *          be cached.\n+ * @requires vm.cds.supports.aot.class.linking\n+ * @comment work around JDK-8345635\n+ * @requires !vm.jvmci.enabled\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n+ * @build JavaAgent JavaAgentTransformer Util\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar app.jar JavaAgentApp JavaAgentApp$ShouldBeTransformed\n+ * @run driver JavaAgent AOT\n+ *\/\n+\n+import jdk.test.lib.cds.CDSAppTester;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+\n+public class JavaAgent {\n+    static final String appJar = ClassFileInstaller.getJarPath(\"app.jar\");\n+    static final String mainClass = \"JavaAgentApp\";\n+\n+    public static String agentClasses[] = {\n+        \"JavaAgentTransformer\",\n+        \"Util\",\n+    };\n+    static String agentJar;\n+\n+    public static void main(String... args) throws Exception {\n+        agentJar = ClassFileInstaller.writeJar(\"agent.jar\",\n+                                        ClassFileInstaller.Manifest.fromSourceFile(\"JavaAgentTransformer.mf\"),\n+                                        agentClasses);\n+\n+        new Tester().run(args);\n+    }\n+\n+    static class Tester extends CDSAppTester {\n+        public Tester() {\n+            super(mainClass);\n+        }\n+\n+        @Override\n+        public String classpath(RunMode runMode) {\n+            return appJar;\n+        }\n+\n+        @Override\n+        public String[] vmArgs(RunMode runMode) {\n+            return new String[] { \"-javaagent:\" + agentJar, \"-Xlog:aot,cds\"};\n+        }\n+\n+        @Override\n+        public String[] appCommandLine(RunMode runMode) {\n+            return new String[] {\n+                mainClass,\n+            };\n+        }\n+\n+        @Override\n+        public void checkExecution(OutputAnalyzer out, RunMode runMode) throws Exception {\n+            String agentLoadedMsg = \"JavaAgentTransformer.premain() is called\";\n+            if (runMode.isApplicationExecuted()) {\n+                out.shouldContain(agentLoadedMsg);\n+                out.shouldContain(\"Transforming: JavaAgentApp$ShouldBeTransformed; Class<?> = null\");\n+                out.shouldContain(\"Result: YYYY\"); \/\/ \"XXXX\" has been changed to \"YYYY\" by the agent\n+            } else {\n+                out.shouldNotContain(agentLoadedMsg);\n+            }\n+\n+            switch (runMode) {\n+            case RunMode.TRAINING:\n+                out.shouldContain(\"Skipping JavaAgentApp$ShouldBeTransformed: From ClassFileLoadHook\");\n+                out.shouldContain(\"Skipping JavaAgentTransformer: Unsupported location\");\n+                break;\n+            case RunMode.ASSEMBLY:\n+                out.shouldContain(\"Disabled all JVMTI agents during -XX:AOTMode=create\");\n+                break;\n+            }\n+        }\n+    }\n+}\n+\n+class JavaAgentApp {\n+    public static void main(String[] args) {\n+        System.out.println(\"Result: \" + (new ShouldBeTransformed()));\n+    }\n+\n+    static class ShouldBeTransformed {\n+        public String toString() {\n+            return \"XXXX\"; \/\/ Will be changed to YYYY by the agent\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotCache\/JavaAgent.java","additions":117,"deletions":0,"binary":false,"changes":117,"status":"added"},{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+import java.lang.instrument.ClassFileTransformer;\n+import java.lang.instrument.IllegalClassFormatException;\n+import java.lang.instrument.Instrumentation;\n+import java.security.ProtectionDomain;\n+\n+\/\/ This class is available on the classpath so it can be accessed by JavaAgentApp\n+public class JavaAgentTransformer  implements ClassFileTransformer {\n+    private static Instrumentation savedInstrumentation;\n+\n+    public static void premain(String agentArguments, Instrumentation instrumentation) {\n+        System.out.println(\"JavaAgentTransformer.premain() is called\");\n+        instrumentation.addTransformer(new JavaAgentTransformer(), \/*canRetransform=*\/true);\n+        savedInstrumentation = instrumentation;\n+    }\n+\n+    public static Instrumentation getInstrumentation() {\n+        return savedInstrumentation;\n+    }\n+\n+    public static void agentmain(String args, Instrumentation inst) throws Exception {\n+        premain(args, inst);\n+    }\n+\n+    public byte[] transform(ClassLoader loader, String name, Class<?> classBeingRedefined,\n+                            ProtectionDomain pd, byte[] buffer) throws IllegalClassFormatException {\n+        if (name.equals(\"JavaAgentApp$ShouldBeTransformed\")) {\n+            System.out.println(\"Transforming: \" + name + \"; Class<?> = \" + classBeingRedefined);\n+            try {\n+                replace(buffer, \"XXXX\", \"YYYY\");\n+            } catch (Throwable t) {\n+                t.printStackTrace();\n+            }\n+            Thread.dumpStack();\n+            return buffer;\n+        }\n+        return null;\n+    }\n+\n+    static void replace(byte[] buffer, String from, String to) {\n+        int n = Util.replace(buffer, from, to);\n+        System.out.println(\"..... replaced \" + n + \" occurrence(s) of '\" + from + \"' to '\" + to + \"'\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotCache\/JavaAgentTransformer.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"},{"patch":"@@ -0,0 +1,5 @@\n+Manifest-Version: 1.0\n+Premain-Class: JavaAgentTransformer\n+Agent-Class: JavaAgentTransformer\n+Can-Retransform-Classes: true\n+Can-Redefine-Classes: true\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotCache\/JavaAgentTransformer.mf","additions":5,"deletions":0,"binary":false,"changes":5,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,2 +40,7 @@\n-                 System.out.printf(\"%n Transforming %s\", className);\n-                 return Arrays.copyOf(classfileBuffer, classfileBuffer.length);\n+                if (loader == SimpleAgent.class.getClassLoader()) {\n+                    \/\/ Transform only classes loaded by the apploader.\n+                    System.out.printf(\"%n Transforming %s\", className);\n+                    return Arrays.copyOf(classfileBuffer, classfileBuffer.length);\n+                } else {\n+                    return null;\n+                }\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jvmti\/dumpingWithAgent\/SimpleAgent.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"}]}