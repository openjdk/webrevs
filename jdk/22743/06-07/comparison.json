{"files":[{"patch":"@@ -1919,1 +1919,11 @@\n-      assert(r->mapped_base() != nullptr, \"must be initialized\");\n+      \/\/ Note that this may either be a \"fresh\" mapping into unreserved address\n+      \/\/ space (Windows, first mapping attempt), or a mapping into pre-reserved\n+      \/\/ space (Posix). See also comment in MetaspaceShared::map_archives().\n+      char* mapped_base = r->mapped_base();\n+      size_t size = r->used_aligned();\n+\n+      assert(mapped_base != nullptr, \"must be initialized\");\n+      assert(rs.base() <= mapped_base && mapped_base + size <= rs.end(),\n+               PTR_FORMAT \" <= \" PTR_FORMAT \" < \" PTR_FORMAT \" <= \" PTR_FORMAT,\n+               p2i(rs.base()), p2i(mapped_base), p2i(mapped_base + size), p2i(rs.end()));\n+      r->set_in_reserved_space(rs.is_reserved());\n@@ -2412,1 +2422,1 @@\n-void FileMapInfo::unmap_regions(int regions[], int num_regions, ReservedSpace containing_rs) {\n+void FileMapInfo::unmap_regions(int regions[], int num_regions) {\n@@ -2415,1 +2425,1 @@\n-    unmap_region(idx, containing_rs);\n+    unmap_region(idx);\n@@ -2421,1 +2431,1 @@\n-void FileMapInfo::unmap_region(int i, ReservedSpace containing_rs) {\n+void FileMapInfo::unmap_region(int i) {\n@@ -2428,7 +2438,1 @@\n-      if (containing_rs.is_reserved()) {\n-        \/\/ Don't unmap here; this regions will be released when the containing_rs is released.\n-        assert(containing_rs.base() <= mapped_base && mapped_base + size <= containing_rs.end(),\n-               PTR_FORMAT \" <= \" PTR_FORMAT \" < \" PTR_FORMAT \" <= \" PTR_FORMAT,\n-               p2i(containing_rs.base()), p2i(mapped_base), p2i(mapped_base + size), p2i(containing_rs.end()));\n-      } else {\n-        log_info(cds)(\"Unmapping region #%d at base \" INTPTR_FORMAT \" (%s)\", i, p2i(mapped_base),\n+      log_info(cds)(\"Unmapping region #%d at base \" INTPTR_FORMAT \" (%s)\", i, p2i(mapped_base),\n@@ -2436,0 +2440,6 @@\n+      if (r->in_reserved_space()) {\n+        \/\/ This region was mapped inside a ReservedSpace. Its memory will be freed when the ReservedSpace\n+        \/\/ is released. Zero it so that we don't accidentally read its content.\n+        log_info(cds)(\"Region #%d (%s) is in a reserved space, it will be freed when the space is released\", i, shared_region_name[i]);\n+        memset(mapped_base, 0, size);\n+      } else {\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":21,"deletions":11,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -165,0 +165,1 @@\n+  bool   in_reserved_space()        const { return _in_reserved_space; }\n@@ -170,0 +171,1 @@\n+  void set_in_reserved_space(bool is_reserved) { _in_reserved_space = is_reserved; }\n@@ -473,2 +475,1 @@\n-  void  unmap_region(int i, ReservedSpace containing_rs);\n-  void  unmap_regions(int regions[], int num_regions, ReservedSpace containing_rs);\n+  void  unmap_regions(int regions[], int num_regions);\n@@ -482,0 +483,1 @@\n+  void  unmap_region(int i);\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1353,2 +1353,2 @@\n-    unmap_archive(static_mapinfo, archive_space_rs);\n-    unmap_archive(dynamic_mapinfo, archive_space_rs);\n+    unmap_archive(static_mapinfo);\n+    unmap_archive(dynamic_mapinfo);\n@@ -1606,1 +1606,1 @@\n-    unmap_archive(mapinfo, rs);\n+    unmap_archive(mapinfo);\n@@ -1611,1 +1611,1 @@\n-    unmap_archive(mapinfo, rs);\n+    unmap_archive(mapinfo);\n@@ -1624,1 +1624,1 @@\n-    unmap_archive(mapinfo, rs);\n+    unmap_archive(mapinfo);\n@@ -1632,1 +1632,1 @@\n-void MetaspaceShared::unmap_archive(FileMapInfo* mapinfo, ReservedSpace archive_space_rs) {\n+void MetaspaceShared::unmap_archive(FileMapInfo* mapinfo) {\n@@ -1635,2 +1635,2 @@\n-    mapinfo->unmap_regions(archive_regions, archive_regions_count, archive_space_rs);\n-    mapinfo->unmap_region(MetaspaceShared::bm, {} \/* containing_rs *\/);\n+    mapinfo->unmap_regions(archive_regions, archive_regions_count);\n+    mapinfo->unmap_region(MetaspaceShared::bm);\n@@ -1676,1 +1676,1 @@\n-  static_mapinfo->unmap_region(MetaspaceShared::bm, {} \/* containing_rs *\/);\n+  static_mapinfo->unmap_region(MetaspaceShared::bm);\n@@ -1685,1 +1685,1 @@\n-    dynamic_mapinfo->unmap_region(MetaspaceShared::bm, {} \/* containing_rs *\/);\n+    dynamic_mapinfo->unmap_region(MetaspaceShared::bm);\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -197,1 +197,1 @@\n-  static void unmap_archive(FileMapInfo* mapinfo, ReservedSpace archive_space_rs);\n+  static void unmap_archive(FileMapInfo* mapinfo);\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -73,0 +73,1 @@\n+  bool    _in_reserved_space; \/\/ Is this region in a ReservedSpace\n","filename":"src\/hotspot\/share\/include\/cds.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}