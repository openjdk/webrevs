{"files":[{"patch":"@@ -1892,1 +1892,1 @@\n-  assert(r->mapped_base() == nullptr, \"must be not mapped yet\");\n+  assert(!is_mapped(), \"must be not mapped yet\");\n@@ -2362,1 +2362,1 @@\n-      unmap_region(MetaspaceShared::hp);\n+      unmap_non_reserved_region(MetaspaceShared::hp);\n@@ -2413,1 +2413,1 @@\n-void FileMapInfo::unmap_regions(int regions[], int num_regions) {\n+void FileMapInfo::unmap_regions(int regions[], int num_regions, ReservedSpace rs) {\n@@ -2416,1 +2416,15 @@\n-    unmap_region(idx);\n+\n+    \/\/ If the region is inside an active ReservedSpace, its memory and address space will be\n+    \/\/ freed when the ReservedSpace is released. Skip unmap here to avoid a double release\n+    if (rs.is_reserved()) {\n+      FileMapRegion* r = region_at(idx);\n+      char* mapped_base = r->mapped_base();\n+      size_t size = r->used_aligned();\n+\n+      assert(rs.is_reserved(), \"must be\");\n+      assert(rs.base() <= mapped_base && mapped_base + size <= rs.end(),\n+            PTR_FORMAT \" <= \" PTR_FORMAT \" < \" PTR_FORMAT \" <= \" PTR_FORMAT,\n+            p2i(rs.base()), p2i(mapped_base), p2i(mapped_base + size), p2i(rs.end()));\n+    } else {\n+      unmap_non_reserved_region(idx);\n+    }\n@@ -2439,0 +2453,6 @@\n+\/\/ The mapped region is not within a reserved space so it can be\n+\/\/ released directly\n+void FileMapInfo::unmap_non_reserved_region(int i) {\n+  unmap_region(i);\n+}\n+\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":24,"deletions":4,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -370,0 +370,1 @@\n+  void  unmap_region(int i);\n@@ -473,1 +474,1 @@\n-  void  unmap_regions(int regions[], int num_regions);\n+  void  unmap_regions(int regions[], int num_regions, ReservedSpace rs);\n@@ -481,1 +482,1 @@\n-  void  unmap_region(int i);\n+  void unmap_non_reserved_region(int i);\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1351,2 +1351,4 @@\n-    unmap_archive(static_mapinfo);\n-    unmap_archive(dynamic_mapinfo);\n+    \/\/ The RW and RO regions are in a reserved space so they must only be\n+    \/\/ unmapped when the reserved space is released\n+    unmap_archive(static_mapinfo, archive_space_rs);\n+    unmap_archive(dynamic_mapinfo, archive_space_rs);\n@@ -1604,1 +1606,1 @@\n-    unmap_archive(mapinfo);\n+    unmap_archive(mapinfo, rs);\n@@ -1609,1 +1611,1 @@\n-    unmap_archive(mapinfo);\n+    unmap_archive(mapinfo, rs);\n@@ -1622,1 +1624,1 @@\n-    unmap_archive(mapinfo);\n+    unmap_archive(mapinfo, rs);\n@@ -1630,1 +1632,1 @@\n-void MetaspaceShared::unmap_archive(FileMapInfo* mapinfo) {\n+void MetaspaceShared::unmap_archive(FileMapInfo* mapinfo, ReservedSpace archive_space_rs) {\n@@ -1633,2 +1635,2 @@\n-    mapinfo->unmap_regions(archive_regions, archive_regions_count);\n-    mapinfo->unmap_region(MetaspaceShared::bm);\n+    mapinfo->unmap_regions(archive_regions, archive_regions_count, archive_space_rs);\n+    mapinfo->unmap_non_reserved_region(MetaspaceShared::bm);\n@@ -1674,1 +1676,1 @@\n-  static_mapinfo->unmap_region(MetaspaceShared::bm);\n+  static_mapinfo->unmap_non_reserved_region(MetaspaceShared::bm);\n@@ -1683,1 +1685,1 @@\n-    dynamic_mapinfo->unmap_region(MetaspaceShared::bm);\n+    dynamic_mapinfo->unmap_non_reserved_region(MetaspaceShared::bm);\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -197,1 +197,1 @@\n-  static void unmap_archive(FileMapInfo* mapinfo);\n+  static void unmap_archive(FileMapInfo* mapinfo, ReservedSpace archive_space_rs);\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}