{"files":[{"patch":"@@ -3813,1 +3813,5 @@\n-            \/\/ format mostly using LocalDateTime.toString\n+            if (fractionalDigits == 0) {\n+                inNano = 0;\n+            }\n+            boolean printNanoInLocalDateTime = fractionalDigits == -2\n+                    || (inNano == 0 && (fractionalDigits == 0 || fractionalDigits == -1));\n@@ -3815,12 +3819,1 @@\n-                \/\/ current era\n-                long zeroSecs = inSec - SECONDS_PER_10000_YEARS + SECONDS_0000_TO_1970;\n-                long hi = Math.floorDiv(zeroSecs, SECONDS_PER_10000_YEARS) + 1;\n-                long lo = Math.floorMod(zeroSecs, SECONDS_PER_10000_YEARS);\n-                LocalDateTime ldt = LocalDateTime.ofEpochSecond(lo - SECONDS_0000_TO_1970, 0, ZoneOffset.UTC);\n-                if (hi > 0) {\n-                    buf.append('+').append(hi);\n-                }\n-                buf.append(ldt);\n-                if (ldt.getSecond() == 0) {\n-                    buf.append(\":00\");\n-                }\n+                currentEra(buf, inSec, printNanoInLocalDateTime ? inNano : 0);\n@@ -3828,19 +3821,1 @@\n-                \/\/ before current era\n-                long zeroSecs = inSec + SECONDS_0000_TO_1970;\n-                long hi = zeroSecs \/ SECONDS_PER_10000_YEARS;\n-                long lo = zeroSecs % SECONDS_PER_10000_YEARS;\n-                LocalDateTime ldt = LocalDateTime.ofEpochSecond(lo - SECONDS_0000_TO_1970, 0, ZoneOffset.UTC);\n-                int pos = buf.length();\n-                buf.append(ldt);\n-                if (ldt.getSecond() == 0) {\n-                    buf.append(\":00\");\n-                }\n-                if (hi < 0) {\n-                    if (ldt.getYear() == -10_000) {\n-                        buf.replace(pos, pos + 2, Long.toString(hi - 1));\n-                    } else if (lo == 0) {\n-                        buf.insert(pos, hi);\n-                    } else {\n-                        buf.insert(pos + 1, Math.abs(hi));\n-                    }\n-                }\n+                beforeCurrentEra(buf, inSec, printNanoInLocalDateTime ? inNano : 0);\n@@ -3849,1 +3824,1 @@\n-            if ((fractionalDigits < 0 && inNano > 0) || fractionalDigits > 0) {\n+            if (!printNanoInLocalDateTime) {\n@@ -3865,0 +3840,35 @@\n+        private static void currentEra(StringBuilder buf, long inSec, int inNano) {\n+            long zeroSecs = inSec - SECONDS_PER_10000_YEARS + SECONDS_0000_TO_1970;\n+            long hi = Math.floorDiv(zeroSecs, SECONDS_PER_10000_YEARS) + 1;\n+            long lo = Math.floorMod(zeroSecs, SECONDS_PER_10000_YEARS);\n+            LocalDateTime ldt = LocalDateTime.ofEpochSecond(lo - SECONDS_0000_TO_1970, inNano, ZoneOffset.UTC);\n+            if (hi > 0) {\n+                buf.append('+').append(hi);\n+            }\n+            buf.append(ldt);\n+            if (ldt.getSecond() == 0 && inNano == 0) {\n+                buf.append(\":00\");\n+            }\n+        }\n+\n+        private static void beforeCurrentEra(StringBuilder buf, long inSec, int inNano) {\n+            long zeroSecs = inSec + SECONDS_0000_TO_1970;\n+            long hi = zeroSecs \/ SECONDS_PER_10000_YEARS;\n+            long lo = zeroSecs % SECONDS_PER_10000_YEARS;\n+            LocalDateTime ldt = LocalDateTime.ofEpochSecond(lo - SECONDS_0000_TO_1970, inNano, ZoneOffset.UTC);\n+            int pos = buf.length();\n+            buf.append(ldt);\n+            if (ldt.getSecond() == 0 && inNano == 0) {\n+                buf.append(\":00\");\n+            }\n+            if (hi < 0) {\n+                if (ldt.getYear() == -10_000) {\n+                    buf.replace(pos, pos + 2, Long.toString(hi - 1));\n+                } else if (lo == 0) {\n+                    buf.insert(pos, hi);\n+                } else {\n+                    buf.insert(pos + 1, Math.abs(hi));\n+                }\n+            }\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/java\/time\/format\/DateTimeFormatterBuilder.java","additions":43,"deletions":33,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -314,0 +314,152 @@\n+    @Test\n+    public void test_print_instant() {\n+        DateTimeFormatter formatter = new DateTimeFormatterBuilder().appendInstant().toFormatter();\n+        DateTimeFormatter formatter0 = new DateTimeFormatterBuilder().appendInstant(0).toFormatter();\n+        DateTimeFormatter formatter1 = new DateTimeFormatterBuilder().appendInstant(1).toFormatter();\n+        DateTimeFormatter formatter2 = new DateTimeFormatterBuilder().appendInstant(2).toFormatter();\n+        DateTimeFormatter formatter3 = new DateTimeFormatterBuilder().appendInstant(3).toFormatter();\n+        DateTimeFormatter formatter4 = new DateTimeFormatterBuilder().appendInstant(4).toFormatter();\n+        DateTimeFormatter formatter5 = new DateTimeFormatterBuilder().appendInstant(5).toFormatter();\n+        DateTimeFormatter formatter6 = new DateTimeFormatterBuilder().appendInstant(6).toFormatter();\n+        DateTimeFormatter formatter7 = new DateTimeFormatterBuilder().appendInstant(7).toFormatter();\n+        DateTimeFormatter formatter8 = new DateTimeFormatterBuilder().appendInstant(8).toFormatter();\n+        DateTimeFormatter formatter9 = new DateTimeFormatterBuilder().appendInstant(9).toFormatter();\n+        DateTimeFormatter formatterN1 = new DateTimeFormatterBuilder().appendInstant(-1).toFormatter();\n+\n+        {\n+            Instant instant = Instant.ofEpochSecond(1111721337984L, 1);\n+            assertEquals(\"+37199-01-18T02:46:24.000000001Z\", formatter.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24Z\", formatter0.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.0Z\", formatter1.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.00Z\", formatter2.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.000Z\", formatter3.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.0000Z\", formatter4.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.00000Z\", formatter5.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.000000Z\", formatter6.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.0000000Z\", formatter7.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.00000000Z\", formatter8.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.000000001Z\", formatter9.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.000000001Z\", formatterN1.format(instant));\n+        }\n+        {\n+            Instant instant = Instant.ofEpochSecond(1111721337984L, 10);\n+            assertEquals(\"+37199-01-18T02:46:24.000000010Z\", formatter.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24Z\", formatter0.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.0Z\", formatter1.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.00Z\", formatter2.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.000Z\", formatter3.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.0000Z\", formatter4.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.00000Z\", formatter5.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.000000Z\", formatter6.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.0000000Z\", formatter7.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.00000001Z\", formatter8.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.000000010Z\", formatter9.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.00000001Z\", formatterN1.format(instant));\n+        }\n+        {\n+            Instant instant = Instant.ofEpochSecond(1111721337984L, 100);\n+            assertEquals(\"+37199-01-18T02:46:24.000000100Z\", formatter.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24Z\", formatter0.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.0Z\", formatter1.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.00Z\", formatter2.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.000Z\", formatter3.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.0000Z\", formatter4.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.00000Z\", formatter5.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.000000Z\", formatter6.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.0000001Z\", formatter7.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.00000010Z\", formatter8.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.000000100Z\", formatter9.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.0000001Z\", formatterN1.format(instant));\n+        }\n+        {\n+            Instant instant = Instant.ofEpochSecond(1111721337984L, 1_000);\n+            assertEquals(\"+37199-01-18T02:46:24.000001Z\", formatter.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24Z\", formatter0.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.0Z\", formatter1.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.00Z\", formatter2.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.000Z\", formatter3.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.0000Z\", formatter4.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.00000Z\", formatter5.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.000001Z\", formatter6.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.0000010Z\", formatter7.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.00000100Z\", formatter8.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.000001000Z\", formatter9.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.000001Z\", formatterN1.format(instant));\n+        }\n+        {\n+            Instant instant = Instant.ofEpochSecond(1721337984L, 10_000);\n+            assertEquals(\"2024-07-18T21:26:24.000010Z\", formatter.format(instant));\n+            assertEquals(\"2024-07-18T21:26:24Z\", formatter0.format(instant));\n+            assertEquals(\"2024-07-18T21:26:24.0Z\", formatter1.format(instant));\n+            assertEquals(\"2024-07-18T21:26:24.00Z\", formatter2.format(instant));\n+            assertEquals(\"2024-07-18T21:26:24.000Z\", formatter3.format(instant));\n+            assertEquals(\"2024-07-18T21:26:24.0000Z\", formatter4.format(instant));\n+            assertEquals(\"2024-07-18T21:26:24.00001Z\", formatter5.format(instant));\n+            assertEquals(\"2024-07-18T21:26:24.000010Z\", formatter6.format(instant));\n+            assertEquals(\"2024-07-18T21:26:24.0000100Z\", formatter7.format(instant));\n+            assertEquals(\"2024-07-18T21:26:24.00001000Z\", formatter8.format(instant));\n+            assertEquals(\"2024-07-18T21:26:24.000010000Z\", formatter9.format(instant));\n+            assertEquals(\"2024-07-18T21:26:24.00001Z\", formatterN1.format(instant));\n+        }\n+        {\n+            Instant instant = Instant.ofEpochSecond(-1721337984L, 100_000);\n+            assertEquals(\"1915-06-16T02:33:36.000100Z\", formatter.format(instant));\n+            assertEquals(\"1915-06-16T02:33:36Z\", formatter0.format(instant));\n+            assertEquals(\"1915-06-16T02:33:36.0Z\", formatter1.format(instant));\n+            assertEquals(\"1915-06-16T02:33:36.00Z\", formatter2.format(instant));\n+            assertEquals(\"1915-06-16T02:33:36.000Z\", formatter3.format(instant));\n+            assertEquals(\"1915-06-16T02:33:36.0001Z\", formatter4.format(instant));\n+            assertEquals(\"1915-06-16T02:33:36.00010Z\", formatter5.format(instant));\n+            assertEquals(\"1915-06-16T02:33:36.000100Z\", formatter6.format(instant));\n+            assertEquals(\"1915-06-16T02:33:36.0001000Z\", formatter7.format(instant));\n+            assertEquals(\"1915-06-16T02:33:36.00010000Z\", formatter8.format(instant));\n+            assertEquals(\"1915-06-16T02:33:36.000100000Z\", formatter9.format(instant));\n+            assertEquals(\"1915-06-16T02:33:36.0001Z\", formatterN1.format(instant));\n+        }\n+        {\n+            Instant instant = Instant.ofEpochSecond(-51721337984L, 1_000_000);\n+            assertEquals(\"0331-01-07T09:40:16.001Z\", formatter.format(instant));\n+            assertEquals(\"0331-01-07T09:40:16Z\", formatter0.format(instant));\n+            assertEquals(\"0331-01-07T09:40:16.0Z\", formatter1.format(instant));\n+            assertEquals(\"0331-01-07T09:40:16.00Z\", formatter2.format(instant));\n+            assertEquals(\"0331-01-07T09:40:16.001Z\", formatter3.format(instant));\n+            assertEquals(\"0331-01-07T09:40:16.0010Z\", formatter4.format(instant));\n+            assertEquals(\"0331-01-07T09:40:16.00100Z\", formatter5.format(instant));\n+            assertEquals(\"0331-01-07T09:40:16.001000Z\", formatter6.format(instant));\n+            assertEquals(\"0331-01-07T09:40:16.0010000Z\", formatter7.format(instant));\n+            assertEquals(\"0331-01-07T09:40:16.00100000Z\", formatter8.format(instant));\n+            assertEquals(\"0331-01-07T09:40:16.001000000Z\", formatter9.format(instant));\n+            assertEquals(\"0331-01-07T09:40:16.001Z\", formatterN1.format(instant));\n+        }\n+        {\n+            Instant instant = Instant.ofEpochSecond(11337984L, 100_000_000);\n+            assertEquals(\"1970-05-12T05:26:24.100Z\", formatter.format(instant));\n+            assertEquals(\"1970-05-12T05:26:24Z\", formatter0.format(instant));\n+            assertEquals(\"1970-05-12T05:26:24.1Z\", formatter1.format(instant));\n+            assertEquals(\"1970-05-12T05:26:24.10Z\", formatter2.format(instant));\n+            assertEquals(\"1970-05-12T05:26:24.100Z\", formatter3.format(instant));\n+            assertEquals(\"1970-05-12T05:26:24.1000Z\", formatter4.format(instant));\n+            assertEquals(\"1970-05-12T05:26:24.10000Z\", formatter5.format(instant));\n+            assertEquals(\"1970-05-12T05:26:24.100000Z\", formatter6.format(instant));\n+            assertEquals(\"1970-05-12T05:26:24.1000000Z\", formatter7.format(instant));\n+            assertEquals(\"1970-05-12T05:26:24.10000000Z\", formatter8.format(instant));\n+            assertEquals(\"1970-05-12T05:26:24.100000000Z\", formatter9.format(instant));\n+            assertEquals(\"1970-05-12T05:26:24.1Z\", formatterN1.format(instant));\n+        }\n+        {\n+            Instant instant = Instant.MAX;\n+            assertEquals(\"+1000000000-12-31T23:59:59.999999999Z\", formatter.format(instant));\n+            assertEquals(\"+1000000000-12-31T23:59:59Z\", formatter0.format(instant));\n+            assertEquals(\"+1000000000-12-31T23:59:59.9Z\", formatter1.format(instant));\n+            assertEquals(\"+1000000000-12-31T23:59:59.99Z\", formatter2.format(instant));\n+            assertEquals(\"+1000000000-12-31T23:59:59.999Z\", formatter3.format(instant));\n+            assertEquals(\"+1000000000-12-31T23:59:59.9999Z\", formatter4.format(instant));\n+            assertEquals(\"+1000000000-12-31T23:59:59.99999Z\", formatter5.format(instant));\n+            assertEquals(\"+1000000000-12-31T23:59:59.999999Z\", formatter6.format(instant));\n+            assertEquals(\"+1000000000-12-31T23:59:59.9999999Z\", formatter7.format(instant));\n+            assertEquals(\"+1000000000-12-31T23:59:59.99999999Z\", formatter8.format(instant));\n+            assertEquals(\"+1000000000-12-31T23:59:59.999999999Z\", formatter9.format(instant));\n+            assertEquals(\"+1000000000-12-31T23:59:59.999999999Z\", formatterN1.format(instant));\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/format\/TCKInstantPrinterParser.java","additions":153,"deletions":1,"binary":false,"changes":154,"status":"modified"},{"patch":"@@ -124,0 +124,7 @@\n+\n+    @Benchmark\n+    public void instantToString(Blackhole bh) {\n+        for (Instant instant : INSTANTS) {\n+            bh.consume(instant.toString());\n+        }\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/time\/ToStringBench.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}