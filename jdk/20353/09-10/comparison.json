{"files":[{"patch":"@@ -76,0 +76,1 @@\n+import static jdk.internal.util.DateTimeHelper.formatTo;\n@@ -2151,1 +2152,1 @@\n-        formatTo(buf);\n+        formatTo(buf, this);\n@@ -2155,27 +2156,0 @@\n-    \/**\n-     * Prints the toString result to the given buf, avoiding extra string allocations.\n-     * Requires extra capacity of 10 to avoid StringBuilder reallocation.\n-     *\/\n-    void formatTo(StringBuilder buf) {\n-        int yearValue = year;\n-        int monthValue = month;\n-        int dayValue = day;\n-        int absYear = Math.abs(yearValue);\n-        if (absYear < 1000) {\n-            if (yearValue < 0) {\n-                buf.append('-');\n-            }\n-            buf.repeat('0', absYear < 10 ? 3 : absYear < 100 ? 2 : 1);\n-            buf.append(absYear);\n-        } else {\n-            if (yearValue > 9999) {\n-                buf.append('+');\n-            }\n-            buf.append(yearValue);\n-        }\n-        buf.append(monthValue < 10 ? \"-0\" : \"-\")\n-           .append(monthValue)\n-           .append(dayValue < 10 ? \"-0\" : \"-\")\n-           .append(dayValue);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/time\/LocalDate.java","additions":2,"deletions":28,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -74,0 +74,1 @@\n+import static jdk.internal.util.DateTimeHelper.formatTo;\n@@ -99,3 +100,0 @@\n-import jdk.internal.access.JavaTimeAccess;\n-import jdk.internal.access.SharedSecrets;\n-\n@@ -1972,1 +1970,1 @@\n-        formatTo(buf);\n+        formatTo(buf, this);\n@@ -1976,8 +1974,0 @@\n-    \/**\n-     * Prints the toString result to the given buf, avoiding extra string allocations.\n-     *\/\n-    void formatTo(StringBuilder buf) {\n-        date.formatTo(buf);\n-        buf.append('T');\n-        time.formatTo(buf);\n-    }\n@@ -2024,8 +2014,0 @@\n-\n-    static {\n-        SharedSecrets.setJavaTimeAccess(new JavaTimeAccess() {\n-            public void formatTo(StringBuilder buf, LocalDateTime timeToFormat) {\n-                timeToFormat.formatTo(buf);\n-            }\n-        });\n-    }\n","filename":"src\/java.base\/share\/classes\/java\/time\/LocalDateTime.java","additions":2,"deletions":20,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -72,0 +72,1 @@\n+import static jdk.internal.util.DateTimeHelper.formatTo;\n@@ -95,2 +96,0 @@\n-import jdk.internal.util.DecimalDigits;\n-\n@@ -1635,1 +1634,1 @@\n-        formatTo(buf);\n+        formatTo(buf, this);\n@@ -1639,32 +1638,0 @@\n-    \/**\n-     * Prints the toString result to the given buf, avoiding extra string allocations.\n-     * Requires extra capacity of 18 to avoid StringBuilder reallocation.\n-     *\/\n-    void formatTo(StringBuilder buf) {\n-        int hourValue = hour;\n-        int minuteValue = minute;\n-        int secondValue = second;\n-        int nanoValue = nano;\n-        buf.append(hourValue < 10 ? \"0\" : \"\").append(hourValue)\n-            .append(minuteValue < 10 ? \":0\" : \":\").append(minuteValue);\n-        if (secondValue > 0 || nanoValue > 0) {\n-            buf.append(secondValue < 10 ? \":0\" : \":\").append(secondValue);\n-            if (nanoValue > 0) {\n-                buf.append('.');\n-                int zeros = 9 - DecimalDigits.stringSize(nanoValue);\n-                if (zeros > 0) {\n-                    buf.repeat('0', zeros);\n-                }\n-                int digits;\n-                if (nanoValue % 1_000_000 == 0) {\n-                    digits = nanoValue \/ 1_000_000;\n-                } else if (nanoValue % 1000 == 0) {\n-                    digits = nanoValue \/ 1000;\n-                } else {\n-                    digits = nanoValue;\n-                }\n-                buf.append(digits);\n-            }\n-        }\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/time\/LocalTime.java","additions":2,"deletions":35,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -70,0 +70,1 @@\n+import static jdk.internal.util.DateTimeHelper.formatTo;\n@@ -1928,1 +1929,1 @@\n-        dateTime.formatTo(buf);\n+        formatTo(buf, dateTime);\n","filename":"src\/java.base\/share\/classes\/java\/time\/OffsetDateTime.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -71,0 +71,1 @@\n+import static jdk.internal.util.DateTimeHelper.formatTo;\n@@ -1403,1 +1404,1 @@\n-        time.formatTo(buf);\n+        formatTo(buf, time);\n","filename":"src\/java.base\/share\/classes\/java\/time\/OffsetTime.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -67,0 +67,1 @@\n+import static jdk.internal.util.DateTimeHelper.formatTo;\n@@ -2225,1 +2226,1 @@\n-        dateTime.formatTo(buf);\n+        formatTo(buf, dateTime);\n","filename":"src\/java.base\/share\/classes\/java\/time\/ZonedDateTime.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,0 +74,1 @@\n+import static jdk.internal.util.DateTimeHelper.formatTo;\n@@ -166,2 +167,0 @@\n-    private static final JavaTimeAccess JTA = SharedSecrets.getJavaTimeAccess();\n-\n@@ -3855,1 +3854,1 @@\n-            JTA.formatTo(buf, ldt);\n+            formatTo(buf, ldt);\n@@ -3867,1 +3866,1 @@\n-            JTA.formatTo(buf, ldt);\n+            formatTo(buf, ldt);\n","filename":"src\/java.base\/share\/classes\/java\/time\/format\/DateTimeFormatterBuilder.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1,35 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2024, Alibaba Group Holding Limited. All Rights Reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.access;\n-\n-import java.time.LocalDateTime;\n-\n-public interface JavaTimeAccess {\n-    \/**\n-     * Prints the toString result to the given buf, avoiding extra string allocations.\n-     *\/\n-    void formatTo(StringBuilder buf, LocalDateTime timeToFormat);\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaTimeAccess.java","additions":0,"deletions":35,"binary":false,"changes":35,"status":"deleted"},{"patch":"@@ -83,1 +83,0 @@\n-    private static JavaTimeAccess javaTimeAccess;\n@@ -159,15 +158,0 @@\n-    public static JavaTimeAccess getJavaTimeAccess() {\n-        var access = javaTimeAccess;\n-        if (access == null) {\n-            \/\/ Ensure LocalDateTime is initialized; we know that this class\n-            \/\/ provides the shared secret\n-            ensureClassInitialized(java.time.LocalDateTime.class);\n-            access = javaTimeAccess;\n-        }\n-        return access;\n-    }\n-\n-    public static void setJavaTimeAccess(JavaTimeAccess javaTimeAccess) {\n-        SharedSecrets.javaTimeAccess = javaTimeAccess;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/SharedSecrets.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,101 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.util;\n+\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+\n+\/**\n+ * Helper for java.time\n+ *\/\n+public class DateTimeHelper {\n+    \/**\n+     * Prints the toString result to the given buf, avoiding extra string allocations.\n+     *\/\n+    public static void formatTo(StringBuilder buf, LocalDateTime dateTime) {\n+        DateTimeHelper.formatTo(buf, dateTime.toLocalDate());\n+        buf.append('T');\n+        DateTimeHelper.formatTo(buf, dateTime.toLocalTime());\n+    }\n+\n+    \/**\n+     * Prints the toString result to the given buf, avoiding extra string allocations.\n+     * Requires extra capacity of 10 to avoid StringBuilder reallocation.\n+     *\/\n+    public static void formatTo(StringBuilder buf, LocalDate date) {\n+        int year  = date.getYear(),\n+            month = date.getMonthValue(),\n+            day   = date.getDayOfMonth();\n+        int absYear = Math.abs(year);\n+        if (absYear < 1000) {\n+            if (year < 0) {\n+                buf.append('-');\n+            }\n+            buf.repeat('0', absYear < 10 ? 3 : absYear < 100 ? 2 : 1);\n+            buf.append(absYear);\n+        } else {\n+            if (year > 9999) {\n+                buf.append('+');\n+            }\n+            buf.append(year);\n+        }\n+        buf.append(month < 10 ? \"-0\" : \"-\").append(month)\n+           .append(day < 10 ? \"-0\" : \"-\").append(day);\n+    }\n+\n+    \/**\n+     * Prints the toString result to the given buf, avoiding extra string allocations.\n+     * Requires extra capacity of 18 to avoid StringBuilder reallocation.\n+     *\/\n+    public static void formatTo(StringBuilder buf, LocalTime time) {\n+        int hour   = time.getHour(),\n+            minute = time.getMinute(),\n+            second = time.getSecond(),\n+            nano   = time.getNano();\n+        buf.append(hour < 10 ? \"0\" : \"\").append(hour)\n+           .append(minute < 10 ? \":0\" : \":\").append(minute);\n+        if ((second | nano) > 0) {\n+            buf.append(second < 10 ? \":0\" : \":\").append(second);\n+            if (nano > 0) {\n+                buf.append('.');\n+                int zeros = 9 - DecimalDigits.stringSize(nano);\n+                if (zeros > 0) {\n+                    buf.repeat('0', zeros);\n+                }\n+                int digits;\n+                if (nano % 1_000_000 == 0) {\n+                    digits = nano \/ 1_000_000;\n+                } else if (nano % 1000 == 0) {\n+                    digits = nano \/ 1000;\n+                } else {\n+                    digits = nano;\n+                }\n+                buf.append(digits);\n+            }\n+        }\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/DateTimeHelper.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"}]}