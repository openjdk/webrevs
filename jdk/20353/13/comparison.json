{"files":[{"patch":"@@ -106,0 +106,2 @@\n+import jdk.internal.util.DateTimeHelper;\n+\n@@ -2151,1 +2153,1 @@\n-        formatTo(buf);\n+        DateTimeHelper.formatTo(buf, this);\n@@ -2155,27 +2157,0 @@\n-    \/**\n-     * Prints the toString result to the given buf, avoiding extra string allocations.\n-     * Requires extra capacity of 10 to avoid StringBuilder reallocation.\n-     *\/\n-    void formatTo(StringBuilder buf) {\n-        int yearValue = year;\n-        int monthValue = month;\n-        int dayValue = day;\n-        int absYear = Math.abs(yearValue);\n-        if (absYear < 1000) {\n-            if (yearValue < 0) {\n-                buf.append('-');\n-            }\n-            buf.repeat('0', absYear < 10 ? 3 : absYear < 100 ? 2 : 1);\n-            buf.append(absYear);\n-        } else {\n-            if (yearValue > 9999) {\n-                buf.append('+');\n-            }\n-            buf.append(yearValue);\n-        }\n-        buf.append(monthValue < 10 ? \"-0\" : \"-\")\n-           .append(monthValue)\n-           .append(dayValue < 10 ? \"-0\" : \"-\")\n-           .append(dayValue);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/time\/LocalDate.java","additions":3,"deletions":28,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -99,0 +99,2 @@\n+import jdk.internal.util.DateTimeHelper;\n+\n@@ -1969,1 +1971,1 @@\n-        formatTo(buf);\n+        DateTimeHelper.formatTo(buf, this);\n@@ -1973,8 +1975,0 @@\n-    \/**\n-     * Prints the toString result to the given buf, avoiding extra string allocations.\n-     *\/\n-    void formatTo(StringBuilder buf) {\n-        date.formatTo(buf);\n-        buf.append('T');\n-        time.formatTo(buf);\n-    }\n@@ -2021,1 +2015,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/java\/time\/LocalDateTime.java","additions":3,"deletions":10,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-import jdk.internal.util.DecimalDigits;\n+import jdk.internal.util.DateTimeHelper;\n@@ -1635,1 +1635,1 @@\n-        formatTo(buf);\n+        DateTimeHelper.formatTo(buf, this);\n@@ -1639,32 +1639,0 @@\n-    \/**\n-     * Prints the toString result to the given buf, avoiding extra string allocations.\n-     * Requires extra capacity of 18 to avoid StringBuilder reallocation.\n-     *\/\n-    void formatTo(StringBuilder buf) {\n-        int hourValue = hour;\n-        int minuteValue = minute;\n-        int secondValue = second;\n-        int nanoValue = nano;\n-        buf.append(hourValue < 10 ? \"0\" : \"\").append(hourValue)\n-            .append(minuteValue < 10 ? \":0\" : \":\").append(minuteValue);\n-        if (secondValue > 0 || nanoValue > 0) {\n-            buf.append(secondValue < 10 ? \":0\" : \":\").append(secondValue);\n-            if (nanoValue > 0) {\n-                buf.append('.');\n-                int zeros = 9 - DecimalDigits.stringSize(nanoValue);\n-                if (zeros > 0) {\n-                    buf.repeat('0', zeros);\n-                }\n-                int digits;\n-                if (nanoValue % 1_000_000 == 0) {\n-                    digits = nanoValue \/ 1_000_000;\n-                } else if (nanoValue % 1000 == 0) {\n-                    digits = nanoValue \/ 1000;\n-                } else {\n-                    digits = nanoValue;\n-                }\n-                buf.append(digits);\n-            }\n-        }\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/time\/LocalTime.java","additions":2,"deletions":34,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -96,0 +96,2 @@\n+import jdk.internal.util.DateTimeHelper;\n+\n@@ -1928,1 +1930,1 @@\n-        dateTime.formatTo(buf);\n+        DateTimeHelper.formatTo(buf, dateTime);\n","filename":"src\/java.base\/share\/classes\/java\/time\/OffsetDateTime.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -95,0 +95,2 @@\n+import jdk.internal.util.DateTimeHelper;\n+\n@@ -1403,1 +1405,1 @@\n-        time.formatTo(buf);\n+        DateTimeHelper.formatTo(buf, time);\n","filename":"src\/java.base\/share\/classes\/java\/time\/OffsetTime.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -94,0 +94,2 @@\n+import jdk.internal.util.DateTimeHelper;\n+\n@@ -2225,1 +2227,1 @@\n-        dateTime.formatTo(buf);\n+        DateTimeHelper.formatTo(buf, dateTime);\n","filename":"src\/java.base\/share\/classes\/java\/time\/ZonedDateTime.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -124,0 +124,1 @@\n+import jdk.internal.util.DateTimeHelper;\n@@ -164,1 +165,0 @@\n-\n@@ -3812,1 +3812,5 @@\n-            \/\/ format mostly using LocalDateTime.toString\n+            if (fractionalDigits == 0) {\n+                inNano = 0;\n+            }\n+            boolean printNanoInLocalDateTime = fractionalDigits == -2\n+                    || (inNano == 0 && (fractionalDigits == 0 || fractionalDigits == -1));\n@@ -3814,12 +3818,1 @@\n-                \/\/ current era\n-                long zeroSecs = inSec - SECONDS_PER_10000_YEARS + SECONDS_0000_TO_1970;\n-                long hi = Math.floorDiv(zeroSecs, SECONDS_PER_10000_YEARS) + 1;\n-                long lo = Math.floorMod(zeroSecs, SECONDS_PER_10000_YEARS);\n-                LocalDateTime ldt = LocalDateTime.ofEpochSecond(lo - SECONDS_0000_TO_1970, 0, ZoneOffset.UTC);\n-                if (hi > 0) {\n-                    buf.append('+').append(hi);\n-                }\n-                buf.append(ldt);\n-                if (ldt.getSecond() == 0) {\n-                    buf.append(\":00\");\n-                }\n+                currentEra(buf, inSec, printNanoInLocalDateTime ? inNano : 0);\n@@ -3827,19 +3820,1 @@\n-                \/\/ before current era\n-                long zeroSecs = inSec + SECONDS_0000_TO_1970;\n-                long hi = zeroSecs \/ SECONDS_PER_10000_YEARS;\n-                long lo = zeroSecs % SECONDS_PER_10000_YEARS;\n-                LocalDateTime ldt = LocalDateTime.ofEpochSecond(lo - SECONDS_0000_TO_1970, 0, ZoneOffset.UTC);\n-                int pos = buf.length();\n-                buf.append(ldt);\n-                if (ldt.getSecond() == 0) {\n-                    buf.append(\":00\");\n-                }\n-                if (hi < 0) {\n-                    if (ldt.getYear() == -10_000) {\n-                        buf.replace(pos, pos + 2, Long.toString(hi - 1));\n-                    } else if (lo == 0) {\n-                        buf.insert(pos, hi);\n-                    } else {\n-                        buf.insert(pos + 1, Math.abs(hi));\n-                    }\n-                }\n+                beforeCurrentEra(buf, inSec, printNanoInLocalDateTime ? inNano : 0);\n@@ -3848,11 +3823,2 @@\n-            if ((fractionalDigits < 0 && inNano > 0) || fractionalDigits > 0) {\n-                buf.append('.');\n-                int div = 100_000_000;\n-                for (int i = 0; ((fractionalDigits == -1 && inNano > 0) ||\n-                                    (fractionalDigits == -2 && (inNano > 0 || (i % 3) != 0)) ||\n-                                    i < fractionalDigits); i++) {\n-                    int digit = inNano \/ div;\n-                    buf.append((char) (digit + '0'));\n-                    inNano = inNano - (digit * div);\n-                    div = div \/ 10;\n-                }\n+            if (!printNanoInLocalDateTime) {\n+                printNano(buf, inSec, inNano);\n@@ -3864,0 +3830,49 @@\n+        private void printNano(StringBuilder buf, long inSec, int inNano) {\n+            buf.append('.');\n+            int div = 100_000_000;\n+            int fractionalDigits = this.fractionalDigits;\n+            for (int i = 0; ((fractionalDigits == -1 && inNano > 0) ||\n+                    (fractionalDigits == -2 && (inNano > 0 || (i % 3) != 0)) ||\n+                    i < fractionalDigits); i++) {\n+                int digit = inNano \/ div;\n+                buf.append((char) (digit + '0'));\n+                inNano = inNano - (digit * div);\n+                div = div \/ 10;\n+            }\n+        }\n+\n+        private static void currentEra(StringBuilder buf, long inSec, int inNano) {\n+            long zeroSecs = inSec - SECONDS_PER_10000_YEARS + SECONDS_0000_TO_1970;\n+            long hi = Math.floorDiv(zeroSecs, SECONDS_PER_10000_YEARS) + 1;\n+            long lo = Math.floorMod(zeroSecs, SECONDS_PER_10000_YEARS);\n+            LocalDateTime ldt = LocalDateTime.ofEpochSecond(lo - SECONDS_0000_TO_1970, inNano, ZoneOffset.UTC);\n+            if (hi > 0) {\n+                buf.append('+').append(hi);\n+            }\n+            DateTimeHelper.formatTo(buf, ldt);\n+            if (ldt.getSecond() == 0 && inNano == 0) {\n+                buf.append(\":00\");\n+            }\n+        }\n+\n+        private static void beforeCurrentEra(StringBuilder buf, long inSec, int inNano) {\n+            long zeroSecs = inSec + SECONDS_0000_TO_1970;\n+            long hi = zeroSecs \/ SECONDS_PER_10000_YEARS;\n+            long lo = zeroSecs % SECONDS_PER_10000_YEARS;\n+            LocalDateTime ldt = LocalDateTime.ofEpochSecond(lo - SECONDS_0000_TO_1970, inNano, ZoneOffset.UTC);\n+            int pos = buf.length();\n+            DateTimeHelper.formatTo(buf, ldt);\n+            if (ldt.getSecond() == 0 && inNano == 0) {\n+                buf.append(\":00\");\n+            }\n+            if (hi < 0) {\n+                if (ldt.getYear() == -10_000) {\n+                    buf.replace(pos, pos + 2, Long.toString(hi - 1));\n+                } else if (lo == 0) {\n+                    buf.insert(pos, hi);\n+                } else {\n+                    buf.insert(pos + 1, Math.abs(hi));\n+                }\n+            }\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/java\/time\/format\/DateTimeFormatterBuilder.java","additions":60,"deletions":45,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -0,0 +1,101 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.util;\n+\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+\n+\/**\n+ * Helper for java.time\n+ *\/\n+public class DateTimeHelper {\n+    \/**\n+     * Prints the toString result to the given buf, avoiding extra string allocations.\n+     *\/\n+    public static void formatTo(StringBuilder buf, LocalDateTime dateTime) {\n+        DateTimeHelper.formatTo(buf, dateTime.toLocalDate());\n+        buf.append('T');\n+        DateTimeHelper.formatTo(buf, dateTime.toLocalTime());\n+    }\n+\n+    \/**\n+     * Prints the toString result to the given buf, avoiding extra string allocations.\n+     * Requires extra capacity of 10 to avoid StringBuilder reallocation.\n+     *\/\n+    public static void formatTo(StringBuilder buf, LocalDate date) {\n+        int year  = date.getYear(),\n+            month = date.getMonthValue(),\n+            day   = date.getDayOfMonth();\n+        int absYear = Math.abs(year);\n+        if (absYear < 1000) {\n+            if (year < 0) {\n+                buf.append('-');\n+            }\n+            buf.repeat('0', absYear < 10 ? 3 : absYear < 100 ? 2 : 1);\n+            buf.append(absYear);\n+        } else {\n+            if (year > 9999) {\n+                buf.append('+');\n+            }\n+            buf.append(year);\n+        }\n+        buf.append(month < 10 ? \"-0\" : \"-\").append(month)\n+           .append(day < 10 ? \"-0\" : \"-\").append(day);\n+    }\n+\n+    \/**\n+     * Prints the toString result to the given buf, avoiding extra string allocations.\n+     * Requires extra capacity of 18 to avoid StringBuilder reallocation.\n+     *\/\n+    public static void formatTo(StringBuilder buf, LocalTime time) {\n+        int hour   = time.getHour(),\n+            minute = time.getMinute(),\n+            second = time.getSecond(),\n+            nano   = time.getNano();\n+        buf.append(hour < 10 ? \"0\" : \"\").append(hour)\n+           .append(minute < 10 ? \":0\" : \":\").append(minute);\n+        if ((second | nano) > 0) {\n+            buf.append(second < 10 ? \":0\" : \":\").append(second);\n+            if (nano > 0) {\n+                buf.append('.');\n+                int zeros = 9 - DecimalDigits.stringSize(nano);\n+                if (zeros > 0) {\n+                    buf.repeat('0', zeros);\n+                }\n+                int digits;\n+                if (nano % 1_000_000 == 0) {\n+                    digits = nano \/ 1_000_000;\n+                } else if (nano % 1000 == 0) {\n+                    digits = nano \/ 1000;\n+                } else {\n+                    digits = nano;\n+                }\n+                buf.append(digits);\n+            }\n+        }\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/DateTimeHelper.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -314,0 +314,152 @@\n+    @Test\n+    public void test_print_instant() {\n+        DateTimeFormatter formatter = new DateTimeFormatterBuilder().appendInstant().toFormatter();\n+        DateTimeFormatter formatter0 = new DateTimeFormatterBuilder().appendInstant(0).toFormatter();\n+        DateTimeFormatter formatter1 = new DateTimeFormatterBuilder().appendInstant(1).toFormatter();\n+        DateTimeFormatter formatter2 = new DateTimeFormatterBuilder().appendInstant(2).toFormatter();\n+        DateTimeFormatter formatter3 = new DateTimeFormatterBuilder().appendInstant(3).toFormatter();\n+        DateTimeFormatter formatter4 = new DateTimeFormatterBuilder().appendInstant(4).toFormatter();\n+        DateTimeFormatter formatter5 = new DateTimeFormatterBuilder().appendInstant(5).toFormatter();\n+        DateTimeFormatter formatter6 = new DateTimeFormatterBuilder().appendInstant(6).toFormatter();\n+        DateTimeFormatter formatter7 = new DateTimeFormatterBuilder().appendInstant(7).toFormatter();\n+        DateTimeFormatter formatter8 = new DateTimeFormatterBuilder().appendInstant(8).toFormatter();\n+        DateTimeFormatter formatter9 = new DateTimeFormatterBuilder().appendInstant(9).toFormatter();\n+        DateTimeFormatter formatterN1 = new DateTimeFormatterBuilder().appendInstant(-1).toFormatter();\n+\n+        {\n+            Instant instant = Instant.ofEpochSecond(1111721337984L, 1);\n+            assertEquals(\"+37199-01-18T02:46:24.000000001Z\", formatter.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24Z\", formatter0.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.0Z\", formatter1.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.00Z\", formatter2.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.000Z\", formatter3.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.0000Z\", formatter4.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.00000Z\", formatter5.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.000000Z\", formatter6.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.0000000Z\", formatter7.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.00000000Z\", formatter8.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.000000001Z\", formatter9.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.000000001Z\", formatterN1.format(instant));\n+        }\n+        {\n+            Instant instant = Instant.ofEpochSecond(1111721337984L, 10);\n+            assertEquals(\"+37199-01-18T02:46:24.000000010Z\", formatter.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24Z\", formatter0.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.0Z\", formatter1.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.00Z\", formatter2.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.000Z\", formatter3.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.0000Z\", formatter4.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.00000Z\", formatter5.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.000000Z\", formatter6.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.0000000Z\", formatter7.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.00000001Z\", formatter8.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.000000010Z\", formatter9.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.00000001Z\", formatterN1.format(instant));\n+        }\n+        {\n+            Instant instant = Instant.ofEpochSecond(1111721337984L, 100);\n+            assertEquals(\"+37199-01-18T02:46:24.000000100Z\", formatter.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24Z\", formatter0.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.0Z\", formatter1.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.00Z\", formatter2.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.000Z\", formatter3.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.0000Z\", formatter4.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.00000Z\", formatter5.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.000000Z\", formatter6.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.0000001Z\", formatter7.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.00000010Z\", formatter8.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.000000100Z\", formatter9.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.0000001Z\", formatterN1.format(instant));\n+        }\n+        {\n+            Instant instant = Instant.ofEpochSecond(1111721337984L, 1_000);\n+            assertEquals(\"+37199-01-18T02:46:24.000001Z\", formatter.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24Z\", formatter0.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.0Z\", formatter1.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.00Z\", formatter2.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.000Z\", formatter3.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.0000Z\", formatter4.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.00000Z\", formatter5.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.000001Z\", formatter6.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.0000010Z\", formatter7.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.00000100Z\", formatter8.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.000001000Z\", formatter9.format(instant));\n+            assertEquals(\"+37199-01-18T02:46:24.000001Z\", formatterN1.format(instant));\n+        }\n+        {\n+            Instant instant = Instant.ofEpochSecond(1721337984L, 10_000);\n+            assertEquals(\"2024-07-18T21:26:24.000010Z\", formatter.format(instant));\n+            assertEquals(\"2024-07-18T21:26:24Z\", formatter0.format(instant));\n+            assertEquals(\"2024-07-18T21:26:24.0Z\", formatter1.format(instant));\n+            assertEquals(\"2024-07-18T21:26:24.00Z\", formatter2.format(instant));\n+            assertEquals(\"2024-07-18T21:26:24.000Z\", formatter3.format(instant));\n+            assertEquals(\"2024-07-18T21:26:24.0000Z\", formatter4.format(instant));\n+            assertEquals(\"2024-07-18T21:26:24.00001Z\", formatter5.format(instant));\n+            assertEquals(\"2024-07-18T21:26:24.000010Z\", formatter6.format(instant));\n+            assertEquals(\"2024-07-18T21:26:24.0000100Z\", formatter7.format(instant));\n+            assertEquals(\"2024-07-18T21:26:24.00001000Z\", formatter8.format(instant));\n+            assertEquals(\"2024-07-18T21:26:24.000010000Z\", formatter9.format(instant));\n+            assertEquals(\"2024-07-18T21:26:24.00001Z\", formatterN1.format(instant));\n+        }\n+        {\n+            Instant instant = Instant.ofEpochSecond(-1721337984L, 100_000);\n+            assertEquals(\"1915-06-16T02:33:36.000100Z\", formatter.format(instant));\n+            assertEquals(\"1915-06-16T02:33:36Z\", formatter0.format(instant));\n+            assertEquals(\"1915-06-16T02:33:36.0Z\", formatter1.format(instant));\n+            assertEquals(\"1915-06-16T02:33:36.00Z\", formatter2.format(instant));\n+            assertEquals(\"1915-06-16T02:33:36.000Z\", formatter3.format(instant));\n+            assertEquals(\"1915-06-16T02:33:36.0001Z\", formatter4.format(instant));\n+            assertEquals(\"1915-06-16T02:33:36.00010Z\", formatter5.format(instant));\n+            assertEquals(\"1915-06-16T02:33:36.000100Z\", formatter6.format(instant));\n+            assertEquals(\"1915-06-16T02:33:36.0001000Z\", formatter7.format(instant));\n+            assertEquals(\"1915-06-16T02:33:36.00010000Z\", formatter8.format(instant));\n+            assertEquals(\"1915-06-16T02:33:36.000100000Z\", formatter9.format(instant));\n+            assertEquals(\"1915-06-16T02:33:36.0001Z\", formatterN1.format(instant));\n+        }\n+        {\n+            Instant instant = Instant.ofEpochSecond(-51721337984L, 1_000_000);\n+            assertEquals(\"0331-01-07T09:40:16.001Z\", formatter.format(instant));\n+            assertEquals(\"0331-01-07T09:40:16Z\", formatter0.format(instant));\n+            assertEquals(\"0331-01-07T09:40:16.0Z\", formatter1.format(instant));\n+            assertEquals(\"0331-01-07T09:40:16.00Z\", formatter2.format(instant));\n+            assertEquals(\"0331-01-07T09:40:16.001Z\", formatter3.format(instant));\n+            assertEquals(\"0331-01-07T09:40:16.0010Z\", formatter4.format(instant));\n+            assertEquals(\"0331-01-07T09:40:16.00100Z\", formatter5.format(instant));\n+            assertEquals(\"0331-01-07T09:40:16.001000Z\", formatter6.format(instant));\n+            assertEquals(\"0331-01-07T09:40:16.0010000Z\", formatter7.format(instant));\n+            assertEquals(\"0331-01-07T09:40:16.00100000Z\", formatter8.format(instant));\n+            assertEquals(\"0331-01-07T09:40:16.001000000Z\", formatter9.format(instant));\n+            assertEquals(\"0331-01-07T09:40:16.001Z\", formatterN1.format(instant));\n+        }\n+        {\n+            Instant instant = Instant.ofEpochSecond(11337984L, 100_000_000);\n+            assertEquals(\"1970-05-12T05:26:24.100Z\", formatter.format(instant));\n+            assertEquals(\"1970-05-12T05:26:24Z\", formatter0.format(instant));\n+            assertEquals(\"1970-05-12T05:26:24.1Z\", formatter1.format(instant));\n+            assertEquals(\"1970-05-12T05:26:24.10Z\", formatter2.format(instant));\n+            assertEquals(\"1970-05-12T05:26:24.100Z\", formatter3.format(instant));\n+            assertEquals(\"1970-05-12T05:26:24.1000Z\", formatter4.format(instant));\n+            assertEquals(\"1970-05-12T05:26:24.10000Z\", formatter5.format(instant));\n+            assertEquals(\"1970-05-12T05:26:24.100000Z\", formatter6.format(instant));\n+            assertEquals(\"1970-05-12T05:26:24.1000000Z\", formatter7.format(instant));\n+            assertEquals(\"1970-05-12T05:26:24.10000000Z\", formatter8.format(instant));\n+            assertEquals(\"1970-05-12T05:26:24.100000000Z\", formatter9.format(instant));\n+            assertEquals(\"1970-05-12T05:26:24.1Z\", formatterN1.format(instant));\n+        }\n+        {\n+            Instant instant = Instant.MAX;\n+            assertEquals(\"+1000000000-12-31T23:59:59.999999999Z\", formatter.format(instant));\n+            assertEquals(\"+1000000000-12-31T23:59:59Z\", formatter0.format(instant));\n+            assertEquals(\"+1000000000-12-31T23:59:59.9Z\", formatter1.format(instant));\n+            assertEquals(\"+1000000000-12-31T23:59:59.99Z\", formatter2.format(instant));\n+            assertEquals(\"+1000000000-12-31T23:59:59.999Z\", formatter3.format(instant));\n+            assertEquals(\"+1000000000-12-31T23:59:59.9999Z\", formatter4.format(instant));\n+            assertEquals(\"+1000000000-12-31T23:59:59.99999Z\", formatter5.format(instant));\n+            assertEquals(\"+1000000000-12-31T23:59:59.999999Z\", formatter6.format(instant));\n+            assertEquals(\"+1000000000-12-31T23:59:59.9999999Z\", formatter7.format(instant));\n+            assertEquals(\"+1000000000-12-31T23:59:59.99999999Z\", formatter8.format(instant));\n+            assertEquals(\"+1000000000-12-31T23:59:59.999999999Z\", formatter9.format(instant));\n+            assertEquals(\"+1000000000-12-31T23:59:59.999999999Z\", formatterN1.format(instant));\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/format\/TCKInstantPrinterParser.java","additions":153,"deletions":1,"binary":false,"changes":154,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Alibaba Group Holding Limited. All Rights Reserved.\n+ * Copyright (c) 2025, Alibaba Group Holding Limited. All Rights Reserved.\n@@ -124,0 +124,7 @@\n+\n+    @Benchmark\n+    public void instantToString(Blackhole bh) {\n+        for (Instant instant : INSTANTS) {\n+            bh.consume(instant.toString());\n+        }\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/time\/ToStringBench.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"}]}