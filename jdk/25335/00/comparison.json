{"files":[{"patch":"@@ -49,0 +49,1 @@\n+import java.util.regex.MatchResult;\n@@ -3132,0 +3133,37 @@\n+    \/**\n+     * Replaces each substring of this string that matches the given\n+     * <a href=\"..\/util\/regex\/Pattern.html#sum\">regular expression<\/a> with the result\n+     * of applying the given function to the match.\n+     *\n+     * <p> An invocation of this method of the form\n+     * <i>str<\/i>{@code .replaceAllMapped(}<i>regex<\/i>{@code ,} <i>replacer<\/i>{@code )}\n+     * yields exactly the same result as the expression\n+     *\n+     * <blockquote>\n+     * <code>\n+     * {@link java.util.regex.Pattern}.{@link\n+     * java.util.regex.Pattern#compile(String) compile}(<i>regex<\/i>).{@link\n+     * java.util.regex.Pattern#matcher(java.lang.CharSequence) matcher}(<i>str<\/i>).{@link\n+     * java.util.regex.Matcher#replaceAll(Function) replaceAll}(<i>replacer<\/i>)\n+     * <\/code>\n+     * <\/blockquote>\n+     *\n+     * @param   regex\n+     *          the regular expression to which this string is to be matched\n+     * @param   replacer\n+     *          the function to be applied to each match\n+     *\n+     * @return  The resulting {@code String}\n+     *\n+     * @throws  PatternSyntaxException\n+     *          if the regular expression's syntax is invalid\n+     * @throws  NullPointerException\n+     *          if the regular expression or the replacement\n+     *          function is null\n+     *\n+     * @since 25\n+     *\/\n+    public String replaceAllMapped(String regex, Function<MatchResult, String> replacer) {\n+        return Pattern.compile(regex).matcher(this).replaceAll(replacer);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -32,0 +32,3 @@\n+import java.util.function.Function;\n+import java.util.regex.MatchResult;\n+import java.util.regex.PatternSyntaxException;\n@@ -539,0 +542,16 @@\n+    private static void replaceAllMapped() {\n+        System.out.println(\"replaceAllMapped(String regex, Function<MatchResult, String> replacer)\");\n+        tryCatch(\"  \\\".\\\", null\", NullPointerException.class, new Runnable() {\n+            public void run() {\n+                \"foo\".replaceAllMapped(\".\", null);\n+            }});\n+        tryCatch(\"  null, \\\"-\\\"\", NullPointerException.class, new Runnable() {\n+            public void run() {\n+                \"foo\".replaceAllMapped(null, mr -> \"-\");\n+            }});\n+        tryCatch(\"  null, \\\"-\\\"\", PatternSyntaxException.class, new Runnable() {\n+            public void run() {\n+                \"foo\".replaceAllMapped(\"[\", mr -> \"-\");\n+            }});\n+    }\n+\n@@ -656,0 +675,1 @@\n+        replaceAllMapped();   \/\/ replaceAllMapped(String, Function<MatchResult, String>)\n","filename":"test\/jdk\/java\/lang\/String\/Exceptions.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -85,0 +85,3 @@\n+        ck(foo.replaceAllMapped(\"\\\\w+\", mr -> mr.group().toUpperCase()), \"BOO:AND:FOO\");\n+        ck(foo.replaceAllMapped(\"\\\\w+\", mr -> mr.group() + \"(\" + \")\"), \"boo():and():foo()\");\n+\n","filename":"test\/jdk\/java\/lang\/String\/Regex.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}