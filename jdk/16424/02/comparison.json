{"files":[{"patch":"@@ -126,0 +126,6 @@\n+ * @apiNote\n+ * JAR files retrieved by this class might get cached for performance reasons\n+ * which can result in unexpected behavior if the JAR files are modified while\n+ * being read using this class. If such behavior is undesirable, please use\n+ * the {@link URLConnection#setUseCaches(boolean)} method to disable caching.\n+ *\n","filename":"src\/java.base\/share\/classes\/java\/net\/JarURLConnection.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -136,0 +136,4 @@\n+ * This class uses a cache for ZIP entry metadata, and doesn't handle duplicate\n+ * entries, which can result in unpredictable behavior or crashes\n+ * (@see java.util.zip.ZipFile).\n+ *\n","filename":"src\/java.base\/share\/classes\/java\/util\/jar\/JarFile.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -93,0 +93,21 @@\n+ * @implNote\n+ * This class uses a cache for ZIP entry metadata (but not content) keyed off\n+ * pathname, last modified time and file key. If a ZIP file is modified while\n+ * being read with this class, it can result in unpredictable behavior or\n+ * crashes.\n+ *\n+ * Furthermore, while the\n+ * <a href=\"https:\/\/support.pkware.com\/pkzip\/appnote\">ZIP specification<\/a>\n+ * has no restrictions on ZIP entries with duplicate names,\n+ * the {@link ZipOutputStream} class doesn't allow creation of ZIP archives\n+ * with duplicate entry names. Therefore, when parsing archives containing\n+ * duplicate names, unexpected behavior may occur such as metadata from the\n+ * later entry or content from the first entry being returned due to internal\n+ * caching.\n+ *\n+ * Additionally, for compatibility with earlier versions of the JDK, files and\n+ * directories with the same name (such as \"foobar\" and \"foobar\/\")\n+ * are considered duplicates, which can result in unexpected behavior such as\n+ * wrong metadata or content being returned when parsing archives containing\n+ * duplicate names.\n+ *\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipFile.java","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -67,5 +67,10 @@\n- * The LOC header contains metadata about the Zip file entry. {@code ZipInputStream}\n- * does not read the Central directory (CEN) header for the entry and therefore\n- * will not have access to its metadata such as the external file attributes.\n- * {@linkplain ZipFile} may be used when the information stored within\n- * the CEN header is required.\n+ * The LOC header contains metadata about the Zip file entry.\n+ * {@code ZipInputStream} does not read the Central directory (CEN) header for\n+ * the entry and therefore will not have access to its metadata such as the\n+ * external file attributes. Consequently, {@code ZipInputStream} that reads\n+ * from a ZIP file may read ZIP file entries that are not in the ZIP file's\n+ * central directory or contain information that is\n+ * different than in the Central directory (CEN) header for the same entry.\n+ *\n+ * Whenever possible, {@linkplain ZipFile} should be used for parsing ZIP\n+ * files since it reads data from the central directory.\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipInputStream.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"}]}