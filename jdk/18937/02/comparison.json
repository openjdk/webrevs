{"files":[{"patch":"@@ -1636,5 +1636,3 @@\n-  \/\/ Iterates over all JavaThread's, counts VTMS transitions and restores\n-  \/\/ jt->jvmti_thread_state() and jt->jvmti_vthread() for VTMS transition protocol.\n-  int count_transitions_and_correct_jvmti_thread_states() {\n-    int count = 0;\n-\n+  \/\/ Iterates over all JavaThread's, restores jt->jvmti_thread_state() and\n+  \/\/ jt->jvmti_vthread() for VTMS transition protocol.\n+  void correct_jvmti_thread_states() {\n@@ -1643,1 +1641,1 @@\n-        count++;\n+        jt->set_VTMS_transition_mark(true);\n@@ -1648,1 +1646,0 @@\n-    return count;\n@@ -1658,3 +1655,3 @@\n-    int count = _enable ? count_transitions_and_correct_jvmti_thread_states() : 0;\n-\n-    JvmtiVTMSTransitionDisabler::set_VTMS_transition_count(count);\n+    if (_enable) {\n+      correct_jvmti_thread_states();\n+    }\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvBase.cpp","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -217,3 +217,0 @@\n-\/\/ VTMS transitions cannot be disabled while this counter is positive.\n-volatile int JvmtiVTMSTransitionDisabler::_VTMS_transition_count = 0;\n-\n@@ -241,1 +238,0 @@\n-  log_error(jvmti)(\"_VTMS_transition_count: %d\\n\", _VTMS_transition_count);\n@@ -246,0 +242,4 @@\n+    if (java_thread->VTMS_transition_mark()) {\n+      log_error(jvmti)(\"jt: %p VTMS_transition_mark: %d\\n\",\n+                       (void*)java_thread, java_thread->VTMS_transition_mark());\n+    }\n@@ -361,3 +361,6 @@\n-    while (_VTMS_transition_count > 0) {\n-      if (ml.wait(10)) {\n-        attempts--;\n+    for (JavaThreadIteratorWithHandle jtiwh; JavaThread *jt = jtiwh.next(); ) {\n+      while (jt->VTMS_transition_mark()) {\n+        if (ml.wait(10)) {\n+          attempts--;\n+        }\n+        DEBUG_ONLY(if (attempts == 0) break;)\n@@ -365,1 +368,0 @@\n-      DEBUG_ONLY(if (attempts == 0) break;)\n@@ -430,2 +432,3 @@\n-  \/\/ two-level synchronization with lock-free operations on counters.\n-  Atomic::inc(&_VTMS_transition_count); \/\/ Try to enter VTMS transition section optmistically.\n+  \/\/ two-level synchronization with lock-free operations on state bits.\n+  assert(!thread->VTMS_transition_mark(), \"sanity check\");\n+  thread->set_VTMS_transition_mark(true); \/\/ Try to enter VTMS transition section optmistically.\n@@ -451,1 +454,1 @@\n-    \/\/ Slow path: undo unsuccessful optimistic counter incrementation.\n+    \/\/ Slow path: undo unsuccessful optimistic set of the VTMS_transition_mark.\n@@ -453,1 +456,1 @@\n-    Atomic::dec(&_VTMS_transition_count);\n+    thread->set_VTMS_transition_mark(false);\n@@ -473,1 +476,1 @@\n-      Atomic::inc(&_VTMS_transition_count);\n+      thread->set_VTMS_transition_mark(true);\n@@ -498,1 +501,2 @@\n-  Atomic::dec(&_VTMS_transition_count);\n+  assert(thread->VTMS_transition_mark(), \"sanity check\");\n+  thread->set_VTMS_transition_mark(false);\n","filename":"src\/hotspot\/share\/prims\/jvmtiThreadState.cpp","additions":18,"deletions":14,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -85,1 +85,0 @@\n-  static volatile int _VTMS_transition_count;            \/\/ current number of VTMS transitions\n@@ -87,1 +86,1 @@\n-  static volatile bool _sync_protocol_enabled_permanently; \/\/ seen a suspender: JvmtiVTMSTraansitionDisabler protocol is enabled permanently\n+  static volatile bool _sync_protocol_enabled_permanently; \/\/ seen a suspender: JvmtiVTMSTransitionDisabler protocol is enabled permanently\n@@ -103,2 +102,0 @@\n-  static void set_VTMS_transition_count(bool val)    { _VTMS_transition_count = val; }\n-\n","filename":"src\/hotspot\/share\/prims\/jvmtiThreadState.hpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -453,0 +453,1 @@\n+  _VTMS_transition_mark(false),\n","filename":"src\/hotspot\/share\/runtime\/javaThread.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -320,0 +320,1 @@\n+  bool                  _VTMS_transition_mark;           \/\/ used for sync between VTMS transitions and disablers\n@@ -667,0 +668,3 @@\n+  bool VTMS_transition_mark() const              { return Atomic::load(&_VTMS_transition_mark); }\n+  void set_VTMS_transition_mark(bool val)        { Atomic::store(&_VTMS_transition_mark, val); }\n+\n","filename":"src\/hotspot\/share\/runtime\/javaThread.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}