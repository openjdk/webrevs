{"files":[{"patch":"@@ -65,7 +65,12 @@\n-  \/\/ When this number of consecutive degenerated cycles fail to make progress\n-  \/\/ in generational mode, run a full GC. Non-generational modes will upgrade\n-  \/\/ immediately when a degenerated cycle does not make progress. Many degenerated\n-  \/\/ cycles are caused by floating garbage. It is more efficient to attempt\n-  \/\/ a second degenerated cycle in the young generation to reclaim this memory,\n-  \/\/ rather than running a lengthy full GC over the entire heap.\n-  static constexpr size_t CONSECUTIVE_BAD_DEGEN_PROGRESS_THRESHOLD = 2;\n+  \/\/ The most common scenario for lack of good progress following a degenerated GC is an accumulation of floating\n+  \/\/ garbage during the most recently aborted concurrent GC effort.  With generational GC, it is far more effective to\n+  \/\/ reclaim this floating garbage with another degenerated cycle (which focuses on young generation and might require\n+  \/\/ a pause of 200 ms) rather than a full GC cycle (which may require over 2 seconds with a 10 GB old generation).\n+  \/\/\n+  \/\/ In generational mode, we'll only upgrade to full GC if we've done two degen cycles in a row and both indicated\n+  \/\/ bad progress.  In non-generational mode, we'll preserve the original behavior, which is to upgrade to full\n+  \/\/ immediately following a degenerated cycle with bad progress.  This preserves original behavior of non-generational\n+  \/\/ Shenandoah to avoid introducing \"surprising new behavior.\"  It also makes less sense with non-generational\n+  \/\/ Shenandoah to replace a full GC with a degenerated GC, because both have similar pause times in non-generational\n+  \/\/ mode.\n+  static constexpr size_t GENERATIONAL_CONSECUTIVE_BAD_DEGEN_PROGRESS_THRESHOLD = 2;\n@@ -116,2 +121,2 @@\n-  bool should_upgrade_degenerated_gc() const {\n-    return _consecutive_degenerated_gcs_without_progress >= CONSECUTIVE_BAD_DEGEN_PROGRESS_THRESHOLD;\n+  bool generational_should_upgrade_degenerated_gc() const {\n+    return _consecutive_degenerated_gcs_without_progress >= GENERATIONAL_CONSECUTIVE_BAD_DEGEN_PROGRESS_THRESHOLD;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectorPolicy.hpp","additions":14,"deletions":9,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -313,11 +313,1 @@\n-  \/\/ The most common scenario for lack of good progress following a degenerated GC is an accumulation of floating\n-  \/\/ garbage during the most recently aborted concurrent GC effort.  With generational GC, it is far more effective to\n-  \/\/ reclaim this floating garbage with another degenerated cycle (which focuses on young generation and might require\n-  \/\/ a pause of 200 ms) rather than a full GC cycle (which may require over 2 seconds with a 10 GB old generation).\n-  \/\/\n-  \/\/ In generational mode, we'll only upgrade to full GC if we've done two degen cycles in a row and both indicated\n-  \/\/ bad progress.  In non-generational mode, we'll preserve the original behavior, which is to upgrade to full\n-  \/\/ immediately following a degenerated cycle with bad progress.  This preserves original behavior of non-generational\n-  \/\/ Shenandoah to avoid introducing \"surprising new behavior.\"  It also makes less sense with non-generational\n-  \/\/ Shenandoah to replace a full GC with a degenerated GC, because both have similar pause times in non-generational\n-  \/\/ mode.\n+  \/\/ Decide if this cycle made good progress, and, if not, should it upgrade to a full GC.\n@@ -329,1 +319,1 @@\n-  } else if (!heap->mode()->is_generational() || policy->should_upgrade_degenerated_gc()) {\n+  } else if (!heap->mode()->is_generational() || policy->generational_should_upgrade_degenerated_gc()) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp","additions":2,"deletions":12,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-  EXPECT_EQ(policy.should_upgrade_degenerated_gc(), false);\n+  EXPECT_EQ(policy.generational_should_upgrade_degenerated_gc(), false);\n@@ -39,1 +39,1 @@\n-  EXPECT_EQ(policy.should_upgrade_degenerated_gc(), false);\n+  EXPECT_EQ(policy.generational_should_upgrade_degenerated_gc(), false);\n@@ -47,1 +47,1 @@\n-  EXPECT_EQ(policy.should_upgrade_degenerated_gc(), true);\n+  EXPECT_EQ(policy.generational_should_upgrade_degenerated_gc(), true);\n@@ -55,1 +55,1 @@\n-  EXPECT_EQ(policy.should_upgrade_degenerated_gc(), false);\n+  EXPECT_EQ(policy.generational_should_upgrade_degenerated_gc(), false);\n@@ -63,1 +63,1 @@\n-  EXPECT_EQ(policy.should_upgrade_degenerated_gc(), false);\n+  EXPECT_EQ(policy.generational_should_upgrade_degenerated_gc(), false);\n@@ -71,1 +71,1 @@\n-  EXPECT_EQ(policy.should_upgrade_degenerated_gc(), false);\n+  EXPECT_EQ(policy.generational_should_upgrade_degenerated_gc(), false);\n","filename":"test\/hotspot\/gtest\/gc\/shenandoah\/test_shenandoahCollectorPolicy.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}