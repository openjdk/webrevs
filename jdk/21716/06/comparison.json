{"files":[{"patch":"@@ -809,0 +809,1 @@\n+java\/awt\/print\/PrinterJob\/PrintTextTest.java 8148334 generic-all\n","filename":"test\/jdk\/ProblemList.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-\/**\n+\/*\n@@ -29,1 +29,3 @@\n- * @run main\/manual=yesno PrintTextTest\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual PrintTextTest\n@@ -32,41 +34,50 @@\n-import java.awt.*;\n-import java.awt.event.*;\n-import java.text.*;\n-import java.util.*;\n-import java.awt.font.*;\n-import java.awt.geom.*;\n-import java.awt.print.*;\n-import javax.swing.*;\n-\n-public class PrintTextTest extends Component implements Printable {\n-\n-    static int preferredSize;\n-    Font textFont;\n-    AffineTransform gxTx;\n-    String page;\n-    boolean useFM;\n-\n-    public static void main(String args[]) {\n-        String[] instructions =\n-        {\n-            \"This tests that printed text renders similarly to on-screen\",\n-            \"under a variety of APIs and graphics and font transforms\",\n-            \"Print to your preferred printer. Collect the output.\",\n-            \"Refer to the onscreen buttons to cycle through the on-screen\",\n-            \"content\",\n-            \"For each page, confirm that the printed content corresponds to\",\n-            \"the on-screen rendering for that *same* page.\",\n-            \"Some cases may look odd but its intentional. Verify\",\n-            \"it looks the same on screen and on the printer.\",\n-            \"Note that text does not scale linearly from screen to printer\",\n-            \"so some differences are normal and not a bug.\",\n-            \"The easiest way to spot real problems is to check that\",\n-            \"any underlines are the same length as the underlined text\",\n-            \"and that any rotations are the same in each case.\",\n-            \"Note that each on-screen page is printed in both portrait\",\n-            \"and landscape mode\",\n-            \"So for example, Page 1\/Portrait, and Page 1\/Landscape when\",\n-            \"rotated to view properly, should both match Page 1 on screen.\",\n-        };\n-        Sysout.createDialogWithInstructions(instructions);\n-\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.Font;\n+import java.awt.FontMetrics;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.GraphicsEnvironment;\n+import java.awt.RenderingHints;\n+import java.awt.font.FontRenderContext;\n+import java.awt.font.GlyphVector;\n+import java.awt.font.TextLayout;\n+import java.awt.geom.AffineTransform;\n+import java.awt.geom.Point2D;\n+import java.awt.print.Book;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+import java.text.AttributedCharacterIterator;\n+import java.text.AttributedString;\n+import java.util.HashMap;\n+\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JTabbedPane;\n+\n+public class PrintTextTest {\n+\n+    static final String INSTRUCTIONS = \"\"\"\n+        This tests that printed text renders similarly to on-screen under a variety\n+        of APIs and graphics and font transforms.\n+        1. Print to your preferred printer.\n+        2. Collect the output.\n+        3. Refer to the onscreen buttons to cycle through the on-screen content.\n+        4. For each page, confirm that the printed content corresponds to the\n+           on-screen rendering for that *same* page. Some cases may look odd but\n+           its intentional. Verify it looks the same on screen and on the printer.\n+        Note that text does not scale linearly from screen to printer so some\n+        differences are normal and not a bug.\n+        The easiest way to spot real problems is to check that any underlines are\n+        the same length as the underlined text and that any rotations are the same\n+        in each case.\n+        Note that each on-screen page is printed in both portrait and landscape mode.\n+        So for example, Page 1\/Portrait, and Page 1\/Landscape when rotated to view\n+        properly, should both match Page 1 on screen.\n+        \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n@@ -77,1 +88,1 @@\n-        preferredSize = (int)portrait.getImageableWidth();\n+        int preferredSize = (int) portrait.getImageableWidth();\n@@ -84,1 +95,1 @@\n-        JTabbedPane p = new JTabbedPane();\n+        JTabbedPane pane = new JTabbedPane();\n@@ -87,13 +98,13 @@\n-        Font font = new Font(\"Dialog\", Font.PLAIN, 18);\n-        String name = \"Page \" + new Integer(page++);\n-        PrintTextTest ptt = new PrintTextTest(name, font, null, false);\n-        p.add(name, ptt);\n-        book.append(ptt, portrait);\n-        book.append(ptt, landscape);\n-\n-        font = new Font(\"Dialog\", Font.PLAIN, 18);\n-        name = \"Page \" + new Integer(page++);\n-        ptt = new PrintTextTest(name, font, null, true);\n-        p.add(name, ptt);\n-        book.append(ptt, portrait);\n-        book.append(ptt, landscape);\n+        Font font = new Font(Font.DIALOG, Font.PLAIN, 18);\n+        String name = \"Page \" + page++;\n+        PrintText pt = new PrintText(name, font, null, false, preferredSize);\n+        pane.addTab(name, pt);\n+        book.append(pt, portrait);\n+        book.append(pt, landscape);\n+\n+        font = new Font(Font.DIALOG, Font.PLAIN, 18);\n+        name = \"Page \" + page++;\n+        pt = new PrintText(name, font, null, true, preferredSize);\n+        pane.addTab(name, pt);\n+        book.append(pt, portrait);\n+        book.append(pt, landscape);\n@@ -102,5 +113,5 @@\n-        name = \"Page \" + new Integer(page++);\n-        ptt = new PrintTextTest(name, font, null, false);\n-        p.add(name, ptt);\n-        book.append(ptt, portrait);\n-        book.append(ptt, landscape);\n+        name = \"Page \" + page++;\n+        pt = new PrintText(name, font, null, false, preferredSize);\n+        pane.addTab(name, pt);\n+        book.append(pt, portrait);\n+        book.append(pt, landscape);\n@@ -110,8 +121,8 @@\n-        rotTx.translate(60,0);\n-        name = \"Page \" + new Integer(page++);\n-        ptt = new PrintTextTest(name, font, rotTx, false);\n-        p.add(name, ptt);\n-        book.append(ptt, portrait);\n-        book.append(ptt, landscape);\n-\n-        font = new Font(\"Dialog\", Font.PLAIN, 18);\n+        rotTx.translate(60, 0);\n+        name = \"Page \" + page++;\n+        pt = new PrintText(name, font, rotTx, false, preferredSize);\n+        pane.addTab(name, pt);\n+        book.append(pt, portrait);\n+        book.append(pt, landscape);\n+\n+        font = new Font(Font.DIALOG, Font.PLAIN, 18);\n@@ -119,5 +130,5 @@\n-        name = \"Page \" + new Integer(page++);\n-        ptt = new PrintTextTest(name, font, scaleTx, false);\n-        p.add(name, ptt);\n-        book.append(ptt, portrait);\n-        book.append(ptt, landscape);\n+        name = \"Page \" + page++;\n+        pt = new PrintText(name, font, scaleTx, false, preferredSize);\n+        pane.addTab(name, pt);\n+        book.append(pt, portrait);\n+        book.append(pt, landscape);\n@@ -125,1 +136,1 @@\n-        font = new Font(\"Dialog\", Font.PLAIN, 18);\n+        font = new Font(Font.DIALOG, Font.PLAIN, 18);\n@@ -127,8 +138,8 @@\n-        scaleTx.translate(-preferredSize\/1.25, 0);\n-        name = \"Page \" + new Integer(page++);\n-        ptt = new PrintTextTest(name, font, scaleTx, false);\n-        p.add(name, ptt);\n-        book.append(ptt, portrait);\n-        book.append(ptt, landscape);\n-\n-        font = new Font(\"Dialog\", Font.PLAIN, 18);\n+        scaleTx.translate(-preferredSize \/ 1.25, 0);\n+        name = \"Page \" + page++;\n+        pt = new PrintText(name, font, scaleTx, false, preferredSize);\n+        pane.addTab(name, pt);\n+        book.append(pt, portrait);\n+        book.append(pt, landscape);\n+\n+        font = new Font(Font.DIALOG, Font.PLAIN, 18);\n@@ -136,6 +147,6 @@\n-        scaleTx.translate(0, -preferredSize\/1.25);\n-        name = \"Page \" + new Integer(page++);\n-        ptt = new PrintTextTest(name, font, scaleTx, false);\n-        p.add(name, ptt);\n-        book.append(ptt, portrait);\n-        book.append(ptt, landscape);\n+        scaleTx.translate(0, -preferredSize \/ 1.25);\n+        name = \"Page \" + page++;\n+        pt = new PrintText(name, font, scaleTx, false, preferredSize);\n+        pane.addTab(name, pt);\n+        book.append(pt, portrait);\n+        book.append(pt, landscape);\n@@ -144,14 +155,12 @@\n-        name = \"Page \" + new Integer(page++);\n-        ptt = new PrintTextTest(name, font, null, false);\n-        p.add(ptt, BorderLayout.CENTER);\n-        p.add(name, ptt);\n-        book.append(ptt, portrait);\n-        book.append(ptt, landscape);\n-\n-        font = new Font(\"Monospaced\", Font.PLAIN, 12);\n-        name = \"Page \" + new Integer(page++);\n-        ptt = new PrintTextTest(name, font, null, false);\n-        p.add(ptt, BorderLayout.CENTER);\n-        p.add(name, ptt);\n-        book.append(ptt, portrait);\n-        book.append(ptt, landscape);\n+        name = \"Page \" + page++;\n+        pt = new PrintText(name, font, null, false, preferredSize);\n+        pane.addTab(name, pt);\n+        book.append(pt, portrait);\n+        book.append(pt, landscape);\n+\n+        font = new Font(Font.MONOSPACED, Font.PLAIN, 12);\n+        name = \"Page \" + page++;\n+        pt = new PrintText(name, font, null, false, preferredSize);\n+        pane.addTab(name, pt);\n+        book.append(pt, portrait);\n+        book.append(pt, landscape);\n@@ -160,6 +169,5 @@\n-        name = \"Page \" + new Integer(page++);\n-        ptt = new PrintTextTest(name, xfont, null, false);\n-        p.add(ptt, BorderLayout.CENTER);\n-        p.add(name, ptt);\n-        book.append(ptt, portrait);\n-        book.append(ptt, landscape);\n+        name = \"Page \" + page++;\n+        pt = new PrintText(name, xfont, null, false, preferredSize);\n+        pane.addTab(name, pt);\n+        book.append(pt, portrait);\n+        book.append(pt, landscape);\n@@ -168,6 +176,5 @@\n-        name = \"Page \" + new Integer(page++);\n-        ptt = new PrintTextTest(name, yfont, null, false);\n-        p.add(ptt, BorderLayout.CENTER);\n-        p.add(name, ptt);\n-        book.append(ptt, portrait);\n-        book.append(ptt, landscape);\n+        name = \"Page \" + page++;\n+        pt = new PrintText(name, yfont, null, false, preferredSize);\n+        pane.addTab(name, pt);\n+        book.append(pt, portrait);\n+        book.append(pt, landscape);\n@@ -177,6 +184,5 @@\n-            name = \"Page \" + new Integer(page++);\n-            ptt = new PrintJAText(name, font, null, true);\n-            p.add(ptt, BorderLayout.CENTER);\n-            p.add(name, ptt);\n-            book.append(ptt, portrait);\n-            book.append(ptt, landscape);\n+            name = \"Page \" + page++;\n+            pt = new PrintJapaneseText(name, font, null, true, preferredSize);\n+            pane.addTab(name, pt);\n+            book.append(pt, portrait);\n+            book.append(pt, landscape);\n@@ -185,1 +191,1 @@\n-            name = \"Page \" + new Integer(page++);\n+            name = \"Page \" + page++;\n@@ -187,5 +193,4 @@\n-            ptt = new PrintJAText(name, font, rotTx, true);\n-            p.add(ptt, BorderLayout.CENTER);\n-            p.add(name, ptt);\n-            book.append(ptt, portrait);\n-            book.append(ptt, landscape);\n+            pt = new PrintJapaneseText(name, font, rotTx, true, preferredSize);\n+            pane.addTab(name, pt);\n+            book.append(pt, portrait);\n+            book.append(pt, landscape);\n@@ -196,4 +201,9 @@\n-        JFrame f = new JFrame();\n-        f.add(BorderLayout.CENTER, p);\n-        f.addWindowListener(new WindowAdapter() {\n-            public void windowClosing(WindowEvent e) {System.exit(0);}\n+        JButton printButton = new JButton(\"Print\");\n+        printButton.addActionListener(event -> {\n+            try {\n+                if (pjob.printDialog()) {\n+                    pjob.print();\n+                }\n+            } catch (PrinterException e) {\n+                throw new RuntimeException(e.getMessage(), e);\n+            }\n@@ -201,0 +211,4 @@\n+\n+        JFrame f = new JFrame(\"PrintTextTest\");\n+        f.add(BorderLayout.CENTER, pane);\n+        f.add(BorderLayout.SOUTH, printButton);\n@@ -202,1 +216,0 @@\n-        f.show();\n@@ -204,7 +217,8 @@\n-        try {\n-            if (pjob.printDialog()) {\n-                pjob.print();\n-            }\n-        } catch (PrinterException e) {\n-            throw new RuntimeException(e.getMessage());\n-        }\n+        PassFailJFrame.builder()\n+            .title(\"PrintTextTest\")\n+            .instructions(INSTRUCTIONS)\n+            .testTimeOut(10)\n+            .columns(60)\n+            .testUI(f)\n+            .build()\n+            .awaitAndCheck();\n@@ -224,7 +238,7 @@\n-            switch (n.toLowerCase()) {\n-                case \"dialog\":\n-                case \"dialoginput\":\n-                case \"serif\":\n-                case \"sansserif\":\n-                case \"monospaced\":\n-                     break;\n+            switch (n) {\n+                case Font.DIALOG:\n+                case Font.DIALOG_INPUT:\n+                case Font.SERIF:\n+                case Font.SANS_SERIF:\n+                case Font.MONOSPACED:\n+                     continue;\n@@ -237,1 +251,1 @@\n-             }\n+            }\n@@ -243,18 +257,15 @@\n-    public PrintTextTest(String page, Font font, AffineTransform gxTx,\n-                         boolean fm) {\n-        this.page = page;\n-        textFont = font;\n-        this.gxTx = gxTx;\n-        this.useFM = fm;\n-        setBackground(Color.white);\n-    }\n-\n-    public static AttributedCharacterIterator getIterator(String s) {\n-        return new AttributedString(s).getIterator();\n-    }\n-\n-    static String orient(PageFormat pf) {\n-        if (pf.getOrientation() == PageFormat.PORTRAIT) {\n-            return \"Portrait\";\n-        } else {\n-            return \"Landscape\";\n+    private static class PrintText extends Component implements Printable {\n+\n+        protected final Font textFont;\n+        protected final AffineTransform gxTx;\n+        protected final String page;\n+        protected final boolean useFM;\n+        protected final int preferredSize;\n+\n+        public PrintText(String page, Font font, AffineTransform gxTx, boolean fm, int size) {\n+            this.page = page;\n+            this.textFont = font;\n+            this.gxTx = gxTx;\n+            this.useFM = fm;\n+            this.preferredSize = size;\n+            setBackground(Color.WHITE);\n@@ -262,1 +273,0 @@\n-    }\n@@ -264,28 +274,2 @@\n-    public int print(Graphics g, PageFormat pf, int pageIndex) {\n-\n-        Graphics2D g2d = (Graphics2D)g;\n-        g2d.translate(pf.getImageableX(),  pf.getImageableY());\n-        g.drawString(page+\" \"+orient(pf),50,20);\n-        g.translate(0, 25);\n-        paint(g);\n-        return PAGE_EXISTS;\n-    }\n-\n-    public Dimension getMinimumSize() {\n-        return getPreferredSize();\n-    }\n-\n-    public Dimension getPreferredSize() {\n-        return new Dimension(preferredSize, preferredSize);\n-    }\n-\n-    public void paint(Graphics g) {\n-\n-        \/* fill with white before any transformation is applied *\/\n-        g.setColor(Color.white);\n-        g.fillRect(0, 0, getSize().width, getSize().height);\n-\n-\n-        Graphics2D g2d = (Graphics2D) g;\n-        if (gxTx != null) {\n-            g2d.transform(gxTx);\n+        private static AttributedCharacterIterator getIterator(String s) {\n+            return new AttributedString(s).getIterator();\n@@ -293,7 +277,0 @@\n-        if (useFM) {\n-            g2d.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS,\n-                                 RenderingHints.VALUE_FRACTIONALMETRICS_ON);\n-        }\n-\n-        g.setFont(textFont);\n-        FontMetrics fm = g.getFontMetrics();\n@@ -301,9 +278,6 @@\n-        String s;\n-        int LS = 30;\n-        int ix=10, iy=LS+10;\n-        g.setColor(Color.black);\n-\n-        s = \"drawString(String str, int x, int y)\";\n-        g.drawString(s, ix, iy);\n-        if (!textFont.isTransformed()) {\n-            g.drawLine(ix, iy+1, ix+fm.stringWidth(s), iy+1);\n+        private static String orient(PageFormat pf) {\n+            if (pf.getOrientation() == PageFormat.PORTRAIT) {\n+                return \"Portrait\";\n+            } else {\n+                return \"Landscape\";\n+            }\n@@ -312,9 +286,8 @@\n-        iy += LS;\n-        s = \"drawString(AttributedCharacterIterator iterator, int x, int y)\";\n-        g.drawString(getIterator(s), ix, iy);\n-\n-        iy += LS;\n-        s = \"\\tdrawChars(\\t\\r\\nchar[], int off, int len, int x, int y\\t)\";\n-        g.drawChars(s.toCharArray(), 0, s.length(), ix, iy);\n-        if (!textFont.isTransformed()) {\n-            g.drawLine(ix, iy+1, ix+fm.stringWidth(s), iy+1);\n+        @Override\n+        public int print(Graphics g, PageFormat pf, int pageIndex) {\n+            Graphics2D g2d = (Graphics2D) g;\n+            g2d.translate(pf.getImageableX(), pf.getImageableY());\n+            g.drawString(page + \" \" + orient(pf), 50, 20);\n+            g.translate(0, 25);\n+            paint(g);\n+            return PAGE_EXISTS;\n@@ -323,5 +296,3 @@\n-        iy += LS;\n-        s = \"drawBytes(byte[], int off, int len, int x, int y)\";\n-        byte data[] = new byte[s.length()];\n-        for (int i = 0; i < data.length; i++) {\n-            data[i] = (byte) s.charAt(i);\n+        @Override\n+        public Dimension getMinimumSize() {\n+            return getPreferredSize();\n@@ -329,1 +300,0 @@\n-        g.drawBytes(data, 0, data.length, ix, iy);\n@@ -331,8 +301,3 @@\n-        Font f = g2d.getFont();\n-        FontRenderContext frc = g2d.getFontRenderContext();\n-\n-        iy += LS;\n-        s = \"drawString(String s, float x, float y)\";\n-        g2d.drawString(s, (float) ix, (float) iy);\n-        if (!textFont.isTransformed()) {\n-            g.drawLine(ix, iy+1, ix+fm.stringWidth(s), iy+1);\n+        @Override\n+        public Dimension getPreferredSize() {\n+            return new Dimension(preferredSize, preferredSize);\n@@ -341,13 +306,2 @@\n-        iy += LS;\n-        s = \"drawString(AttributedCharacterIterator iterator, \"+\n-            \"float x, float y)\";\n-        g2d.drawString(getIterator(s), (float) ix, (float) iy);\n-\n-        iy += LS;\n-        s = \"drawGlyphVector(GlyphVector g, float x, float y)\";\n-        GlyphVector gv = f.createGlyphVector(frc, s);\n-        g2d.drawGlyphVector(gv, ix, iy);\n-        Point2D adv = gv.getGlyphPosition(gv.getNumGlyphs());\n-        if (!textFont.isTransformed()) {\n-            g.drawLine(ix, iy+1, ix+(int)adv.getX(), iy+1);\n-        }\n+        @Override\n+        public void paint(Graphics g) {\n@@ -355,14 +309,10 @@\n-        iy += LS;\n-        s = \"GlyphVector with position adjustments\";\n-\n-        gv = f.createGlyphVector(frc, s);\n-        int ng = gv.getNumGlyphs();\n-        adv = gv.getGlyphPosition(ng);\n-        for (int i=0; i<ng; i++) {\n-            Point2D gp = gv.getGlyphPosition(i);\n-            double gx = gp.getX();\n-            double gy = gp.getY();\n-            if (i % 2 == 0) {\n-                gy+=5;\n-            } else {\n-                gy-=5;\n+            g.setColor(Color.WHITE);\n+            g.fillRect(0, 0, getSize().width, getSize().height);\n+\n+            Graphics2D g2d = (Graphics2D) g;\n+            if (gxTx != null) {\n+                g2d.transform(gxTx);\n+            }\n+            if (useFM) {\n+                g2d.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS,\n+                                     RenderingHints.VALUE_FRACTIONALMETRICS_ON);\n@@ -370,7 +320,0 @@\n-            gp.setLocation(gx, gy);\n-            gv.setGlyphPosition(i, gp);\n-        }\n-        g2d.drawGlyphVector(gv, ix, iy);\n-        if (!textFont.isTransformed()) {\n-            g.drawLine(ix, iy+1, ix+(int)adv.getX(), iy+1);\n-        }\n@@ -378,6 +321,2 @@\n-        iy +=LS;\n-        s = \"drawString: \\u0924\\u094d\\u0930 \\u0915\\u0948\\u0930\\u0947 End.\";\n-        g.drawString(s, ix, iy);\n-        if (!textFont.isTransformed()) {\n-            g.drawLine(ix, iy+1, ix+fm.stringWidth(s), iy+1);\n-        }\n+            g.setFont(textFont);\n+            FontMetrics fm = g.getFontMetrics();\n@@ -385,4 +324,4 @@\n-        iy += LS;\n-        s = \"TextLayout 1: \\u0924\\u094d\\u0930 \\u0915\\u0948\\u0930\\u0947 End.\";\n-        TextLayout tl = new TextLayout(s, new HashMap(), frc);\n-        tl.draw(g2d,  ix, iy);\n+            String s;\n+            int LS = 30;\n+            int ix = 10, iy = LS + 10;\n+            g.setColor(Color.BLACK);\n@@ -390,6 +329,5 @@\n-        iy += LS;\n-        s = \"TextLayout 2: \\u0924\\u094d\\u0930 \\u0915\\u0948\\u0930\\u0947 End.\";\n-        tl = new TextLayout(s, f, frc);\n-        tl.draw(g2d,  ix, iy);\n-    }\n-}\n+            s = \"drawString(String str, int x, int y)\";\n+            g.drawString(s, ix, iy);\n+            if (!textFont.isTransformed()) {\n+                g.drawLine(ix, iy + 1, ix + fm.stringWidth(s), iy + 1);\n+            }\n@@ -397,1 +335,3 @@\n-class PrintJAText extends PrintTextTest {\n+            iy += LS;\n+            s = \"drawString(AttributedCharacterIterator iterator, int x, int y)\";\n+            g.drawString(getIterator(s), ix, iy);\n@@ -399,0 +339,6 @@\n+            iy += LS;\n+            s = \"\\tdrawChars(\\t\\r\\nchar[], int off, int len, int x, int y\\t)\";\n+            g.drawChars(s.toCharArray(), 0, s.length(), ix, iy);\n+            if (!textFont.isTransformed()) {\n+                g.drawLine(ix, iy + 1, ix + fm.stringWidth(s), iy + 1);\n+            }\n@@ -400,4 +346,7 @@\n-    public PrintJAText(String page, Font font, AffineTransform gxTx,\n-                         boolean fm) {\n-        super(page, font, gxTx, fm);\n-    }\n+            iy += LS;\n+            s = \"drawBytes(byte[], int off, int len, int x, int y)\";\n+            byte[] data = new byte[s.length()];\n+            for (int i = 0; i < data.length; i++) {\n+                data[i] = (byte) s.charAt(i);\n+            }\n+            g.drawBytes(data, 0, data.length, ix, iy);\n@@ -405,3 +354,2 @@\n-    private static final String TEXT =\n-        \"\\u3042\\u3044\\u3046\\u3048\\u304a\\u30a4\\u30ed\\u30cf\" +\n-        \"\\u30cb\\u30db\\u30d8\\u30c8\\u4e00\\u4e01\\u4e02\\u4e05\\uff08\";\n+            Font f = g2d.getFont();\n+            FontRenderContext frc = g2d.getFontRenderContext();\n@@ -409,0 +357,6 @@\n+            iy += LS;\n+            s = \"drawString(String s, float x, float y)\";\n+            g2d.drawString(s, (float) ix, (float) iy);\n+            if (!textFont.isTransformed()) {\n+                g.drawLine(ix, iy + 1, ix + fm.stringWidth(s), iy + 1);\n+            }\n@@ -410,1 +364,13 @@\n-    public void paint(Graphics g) {\n+            iy += LS;\n+            s = \"drawString(AttributedCharacterIterator iterator, \" +\n+                \"float x, float y)\";\n+            g2d.drawString(getIterator(s), (float) ix, (float) iy);\n+\n+            iy += LS;\n+            s = \"drawGlyphVector(GlyphVector g, float x, float y)\";\n+            GlyphVector gv = f.createGlyphVector(frc, s);\n+            g2d.drawGlyphVector(gv, ix, iy);\n+            Point2D adv = gv.getGlyphPosition(gv.getNumGlyphs());\n+            if (!textFont.isTransformed()) {\n+                g.drawLine(ix, iy + 1, ix + (int) adv.getX(), iy + 1);\n+            }\n@@ -412,3 +378,22 @@\n-        \/* fill with white before any transformation is applied *\/\n-        g.setColor(Color.white);\n-        g.fillRect(0, 0, getSize().width, getSize().height);\n+            iy += LS;\n+            s = \"GlyphVector with position adjustments\";\n+\n+            gv = f.createGlyphVector(frc, s);\n+            int ng = gv.getNumGlyphs();\n+            adv = gv.getGlyphPosition(ng);\n+            for (int i = 0; i < ng; i++) {\n+                Point2D gp = gv.getGlyphPosition(i);\n+                double gx = gp.getX();\n+                double gy = gp.getY();\n+                if (i % 2 == 0) {\n+                    gy += 5;\n+                } else {\n+                    gy -= 5;\n+                }\n+                gp.setLocation(gx, gy);\n+                gv.setGlyphPosition(i, gp);\n+            }\n+            g2d.drawGlyphVector(gv, ix, iy);\n+            if (!textFont.isTransformed()) {\n+                g.drawLine(ix, iy + 1, ix + (int) adv.getX(), iy + 1);\n+            }\n@@ -416,0 +401,6 @@\n+            iy += LS;\n+            s = \"drawString: \\u0924\\u094d\\u0930 \\u0915\\u0948\\u0930\\u0947 End.\";\n+            g.drawString(s, ix, iy);\n+            if (!textFont.isTransformed()) {\n+                g.drawLine(ix, iy + 1, ix + fm.stringWidth(s), iy + 1);\n+            }\n@@ -417,8 +408,4 @@\n-        Graphics2D g2d = (Graphics2D) g;\n-        if (gxTx != null) {\n-            g2d.transform(gxTx);\n-        }\n-        if (useFM) {\n-            g2d.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS,\n-                                 RenderingHints.VALUE_FRACTIONALMETRICS_ON);\n-        }\n+            iy += LS;\n+            s = \"TextLayout 1: \\u0924\\u094d\\u0930 \\u0915\\u0948\\u0930\\u0947 End.\";\n+            TextLayout tl = new TextLayout(s, new HashMap<>(), frc);\n+            tl.draw(g2d, ix, iy);\n@@ -426,14 +413,4 @@\n-        String text = TEXT + TEXT + TEXT;\n-        g.setColor(Color.black);\n-        int y = 20;\n-        float origSize = 7f;\n-        for (int i=0;i<11;i++) {\n-            float size = origSize+(i*0.1f);\n-            g2d.translate(0, size+6);\n-            Font f = textFont.deriveFont(size);\n-            g2d.setFont(f);\n-            FontMetrics fontMetrics = g2d.getFontMetrics();\n-            int stringWidth = fontMetrics.stringWidth(text);\n-            g.drawLine(0, y+1, stringWidth, y+1);\n-            g.drawString(text, 0, y);\n-            y +=10;\n+            iy += LS;\n+            s = \"TextLayout 2: \\u0924\\u094d\\u0930 \\u0915\\u0948\\u0930\\u0947 End.\";\n+            tl = new TextLayout(s, f, frc);\n+            tl.draw(g2d, ix, iy);\n@@ -442,5 +419,0 @@\n-}\n-\n-class Sysout\n- {\n-   private static TestDialog dialog;\n@@ -448,7 +420,1 @@\n-   public static void createDialogWithInstructions( String[] instructions )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      dialog.printInstructions( instructions );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n+    private static class PrintJapaneseText extends PrintText {\n@@ -456,8 +422,3 @@\n-   public static void createDialog( )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-      dialog.printInstructions( defInstr );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n+        public PrintJapaneseText(String page, Font font, AffineTransform gxTx, boolean fm, int size) {\n+            super(page, font, gxTx, fm, size);\n+        }\n@@ -465,0 +426,3 @@\n+        private static final String TEXT =\n+            \"\\u3042\\u3044\\u3046\\u3048\\u304a\\u30a4\\u30ed\\u30cf\" +\n+            \"\\u30cb\\u30db\\u30d8\\u30c8\\u4e00\\u4e01\\u4e02\\u4e05\\uff08\";\n@@ -466,4 +430,2 @@\n-   public static void printInstructions( String[] instructions )\n-    {\n-      dialog.printInstructions( instructions );\n-    }\n+        @Override\n+        public void paint(Graphics g) {\n@@ -471,0 +433,2 @@\n+            g.setColor(Color.WHITE);\n+            g.fillRect(0, 0, getSize().width, getSize().height);\n@@ -472,4 +436,8 @@\n-   public static void println( String messageIn )\n-    {\n-      dialog.displayMessage( messageIn );\n-    }\n+            Graphics2D g2d = (Graphics2D) g;\n+            if (gxTx != null) {\n+                g2d.transform(gxTx);\n+            }\n+            if (useFM) {\n+                g2d.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS,\n+                                     RenderingHints.VALUE_FRACTIONALMETRICS_ON);\n+            }\n@@ -477,79 +445,16 @@\n- }\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog\n- {\n-\n-   TextArea instructionsText;\n-   TextArea messageText;\n-   int maxStringLength = 80;\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public TestDialog( Frame frame, String name )\n-    {\n-      super( frame, name );\n-      int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-      instructionsText = new TextArea( \"\", 20, maxStringLength, scrollBoth );\n-      add( \"North\", instructionsText );\n-\n-      messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-      add(\"South\", messageText);\n-\n-      pack();\n-\n-      show();\n-    }\/\/ TestDialog()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void printInstructions( String[] instructions )\n-    {\n-      \/\/Clear out any current instructions\n-      instructionsText.setText( \"\" );\n-\n-      \/\/Go down array of instruction strings\n-\n-      String printStr, remainingStr;\n-      for( int i=0; i < instructions.length; i++ )\n-       {\n-     \/\/chop up each into pieces maxSringLength long\n-     remainingStr = instructions[ i ];\n-     while( remainingStr.length() > 0 )\n-      {\n-        \/\/if longer than max then chop off first max chars to print\n-        if( remainingStr.length() >= maxStringLength )\n-         {\n-           \/\/Try to chop on a word boundary\n-           int posOfSpace = remainingStr.\n-          lastIndexOf( ' ', maxStringLength - 1 );\n-\n-           if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-           printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-           remainingStr = remainingStr.substring( posOfSpace + 1 );\n-         }\n-        \/\/else just print\n-        else\n-         {\n-           printStr = remainingStr;\n-           remainingStr = \"\";\n-         }\n-\n-            instructionsText.append( printStr + \"\\n\" );\n-\n-      }\/\/ while\n-\n-       }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void displayMessage( String messageIn )\n-    {\n-      messageText.append( messageIn + \"\\n\" );\n+            String text = TEXT + TEXT + TEXT;\n+            g.setColor(Color.BLACK);\n+            int y = 20;\n+            float origSize = 7f;\n+            for (int i = 0; i < 11; i++) {\n+                float size = origSize + (i * 0.1f);\n+                g2d.translate(0, size + 6);\n+                Font f = textFont.deriveFont(size);\n+                g2d.setFont(f);\n+                FontMetrics fontMetrics = g2d.getFontMetrics();\n+                int stringWidth = fontMetrics.stringWidth(text);\n+                g.drawLine(0, y + 1, stringWidth, y + 1);\n+                g.drawString(text, 0, y);\n+                y += 10;\n+            }\n+        }\n@@ -557,2 +462,1 @@\n-\n-}\/\/ TestDialog  class\n+}\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/PrintTextTest.java","additions":333,"deletions":429,"binary":false,"changes":762,"status":"modified"}]}