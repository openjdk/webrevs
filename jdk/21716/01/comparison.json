{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-\/**\n+\/*\n@@ -29,1 +29,3 @@\n- * @run main\/manual=yesno PrintTextTest\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual PrintTextTest\n@@ -32,8 +34,27 @@\n-import java.awt.*;\n-import java.awt.event.*;\n-import java.text.*;\n-import java.util.*;\n-import java.awt.font.*;\n-import java.awt.geom.*;\n-import java.awt.print.*;\n-import javax.swing.*;\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.Font;\n+import java.awt.FontMetrics;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.GraphicsEnvironment;\n+import java.awt.RenderingHints;\n+import java.awt.font.FontRenderContext;\n+import java.awt.font.GlyphVector;\n+import java.awt.font.TextLayout;\n+import java.awt.geom.AffineTransform;\n+import java.awt.geom.Point2D;\n+import java.awt.print.Book;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+import java.text.AttributedCharacterIterator;\n+import java.text.AttributedString;\n+import java.util.HashMap;\n+\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JTabbedPane;\n@@ -43,0 +64,19 @@\n+    static final String INSTRUCTIONS = \"\"\"\n+        This tests that printed text renders similarly to on-screen under a variety\n+        of APIs and graphics and font transforms.\n+        1. Print to your preferred printer.\n+        2. Collect the output.\n+        3. Refer to the onscreen buttons to cycle through the on-screen content.\n+        4. For each page, confirm that the printed content corresponds to the\n+           on-screen rendering for that *same* page. Some cases may look odd but\n+           its intentional. Verify it looks the same on screen and on the printer.\n+        Note that text does not scale linearly from screen to printer so some\n+        differences are normal and not a bug.\n+        The easiest way to spot real problems is to check that any underlines are\n+        the same length as the underlined text and that any rotations are the same\n+        in each case.\n+        Note that each on-screen page is printed in both portrait and landscape mode.\n+        So for example, Page 1\/Portrait, and Page 1\/Landscape when rotated to view\n+        properly, should both match Page 1 on screen.\n+        \"\"\";\n+\n@@ -49,24 +89,1 @@\n-    public static void main(String args[]) {\n-        String[] instructions =\n-        {\n-            \"This tests that printed text renders similarly to on-screen\",\n-            \"under a variety of APIs and graphics and font transforms\",\n-            \"Print to your preferred printer. Collect the output.\",\n-            \"Refer to the onscreen buttons to cycle through the on-screen\",\n-            \"content\",\n-            \"For each page, confirm that the printed content corresponds to\",\n-            \"the on-screen rendering for that *same* page.\",\n-            \"Some cases may look odd but its intentional. Verify\",\n-            \"it looks the same on screen and on the printer.\",\n-            \"Note that text does not scale linearly from screen to printer\",\n-            \"so some differences are normal and not a bug.\",\n-            \"The easiest way to spot real problems is to check that\",\n-            \"any underlines are the same length as the underlined text\",\n-            \"and that any rotations are the same in each case.\",\n-            \"Note that each on-screen page is printed in both portrait\",\n-            \"and landscape mode\",\n-            \"So for example, Page 1\/Portrait, and Page 1\/Landscape when\",\n-            \"rotated to view properly, should both match Page 1 on screen.\",\n-        };\n-        Sysout.createDialogWithInstructions(instructions);\n-\n+    public static void main(String[] args) throws Exception {\n@@ -88,1 +105,1 @@\n-        String name = \"Page \" + new Integer(page++);\n+        String name = \"Page \" + page++;\n@@ -95,1 +112,1 @@\n-        name = \"Page \" + new Integer(page++);\n+        name = \"Page \" + page++;\n@@ -102,1 +119,1 @@\n-        name = \"Page \" + new Integer(page++);\n+        name = \"Page \" + page++;\n@@ -111,1 +128,1 @@\n-        name = \"Page \" + new Integer(page++);\n+        name = \"Page \" + page++;\n@@ -119,1 +136,1 @@\n-        name = \"Page \" + new Integer(page++);\n+        name = \"Page \" + page++;\n@@ -128,1 +145,1 @@\n-        name = \"Page \" + new Integer(page++);\n+        name = \"Page \" + page++;\n@@ -137,1 +154,1 @@\n-        name = \"Page \" + new Integer(page++);\n+        name = \"Page \" + page++;\n@@ -144,1 +161,1 @@\n-        name = \"Page \" + new Integer(page++);\n+        name = \"Page \" + page++;\n@@ -152,1 +169,1 @@\n-        name = \"Page \" + new Integer(page++);\n+        name = \"Page \" + page++;\n@@ -160,1 +177,1 @@\n-        name = \"Page \" + new Integer(page++);\n+        name = \"Page \" + page++;\n@@ -168,1 +185,1 @@\n-        name = \"Page \" + new Integer(page++);\n+        name = \"Page \" + page++;\n@@ -177,1 +194,1 @@\n-            name = \"Page \" + new Integer(page++);\n+            name = \"Page \" + page++;\n@@ -185,1 +202,1 @@\n-            name = \"Page \" + new Integer(page++);\n+            name = \"Page \" + page++;\n@@ -196,4 +213,9 @@\n-        JFrame f = new JFrame();\n-        f.add(BorderLayout.CENTER, p);\n-        f.addWindowListener(new WindowAdapter() {\n-            public void windowClosing(WindowEvent e) {System.exit(0);}\n+        JButton printButton = new JButton(\"Print\");\n+        printButton.addActionListener(event -> {\n+            try {\n+                if (pjob.printDialog()) {\n+                    pjob.print();\n+                }\n+            } catch (PrinterException e) {\n+                throw new RuntimeException(e.getMessage());\n+            }\n@@ -201,0 +223,4 @@\n+\n+        JFrame f = new JFrame(\"PrintTextTest\");\n+        f.add(BorderLayout.CENTER, p);\n+        f.add(BorderLayout.SOUTH, printButton);\n@@ -202,1 +228,0 @@\n-        f.show();\n@@ -204,7 +229,7 @@\n-        try {\n-            if (pjob.printDialog()) {\n-                pjob.print();\n-            }\n-        } catch (PrinterException e) {\n-            throw new RuntimeException(e.getMessage());\n-        }\n+        PassFailJFrame.builder()\n+            .title(\"PrintTextTest\")\n+            .instructions(INSTRUCTIONS)\n+            .columns(60)\n+            .testUI(f)\n+            .build()\n+            .awaitAndCheck();\n@@ -288,1 +313,0 @@\n-\n@@ -399,1 +423,0 @@\n-\n@@ -409,1 +432,0 @@\n-\n@@ -416,1 +438,0 @@\n-\n@@ -443,116 +464,0 @@\n-\n-class Sysout\n- {\n-   private static TestDialog dialog;\n-\n-   public static void createDialogWithInstructions( String[] instructions )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      dialog.printInstructions( instructions );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-   public static void createDialog( )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-      dialog.printInstructions( defInstr );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-\n-   public static void printInstructions( String[] instructions )\n-    {\n-      dialog.printInstructions( instructions );\n-    }\n-\n-\n-   public static void println( String messageIn )\n-    {\n-      dialog.displayMessage( messageIn );\n-    }\n-\n- }\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog\n- {\n-\n-   TextArea instructionsText;\n-   TextArea messageText;\n-   int maxStringLength = 80;\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public TestDialog( Frame frame, String name )\n-    {\n-      super( frame, name );\n-      int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-      instructionsText = new TextArea( \"\", 20, maxStringLength, scrollBoth );\n-      add( \"North\", instructionsText );\n-\n-      messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-      add(\"South\", messageText);\n-\n-      pack();\n-\n-      show();\n-    }\/\/ TestDialog()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void printInstructions( String[] instructions )\n-    {\n-      \/\/Clear out any current instructions\n-      instructionsText.setText( \"\" );\n-\n-      \/\/Go down array of instruction strings\n-\n-      String printStr, remainingStr;\n-      for( int i=0; i < instructions.length; i++ )\n-       {\n-     \/\/chop up each into pieces maxSringLength long\n-     remainingStr = instructions[ i ];\n-     while( remainingStr.length() > 0 )\n-      {\n-        \/\/if longer than max then chop off first max chars to print\n-        if( remainingStr.length() >= maxStringLength )\n-         {\n-           \/\/Try to chop on a word boundary\n-           int posOfSpace = remainingStr.\n-          lastIndexOf( ' ', maxStringLength - 1 );\n-\n-           if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-           printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-           remainingStr = remainingStr.substring( posOfSpace + 1 );\n-         }\n-        \/\/else just print\n-        else\n-         {\n-           printStr = remainingStr;\n-           remainingStr = \"\";\n-         }\n-\n-            instructionsText.append( printStr + \"\\n\" );\n-\n-      }\/\/ while\n-\n-       }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void displayMessage( String messageIn )\n-    {\n-      messageText.append( messageIn + \"\\n\" );\n-    }\n-\n-}\/\/ TestDialog  class\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/PrintTextTest.java","additions":85,"deletions":180,"binary":false,"changes":265,"status":"modified"}]}