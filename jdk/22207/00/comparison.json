{"files":[{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.test;\n+\n+import java.util.List;\n+import java.util.function.BiFunction;\n+\n+public final class CannedFormattedString {\n+\n+    CannedFormattedString(BiFunction<String, Object[], String> formatter,\n+            String key, Object[] args) {\n+        this.formatter = formatter;\n+        this.key = key;\n+        this.args = args;\n+    }\n+\n+    public String getValue() {\n+        return formatter.apply(key, args);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        if (args.length == 0) {\n+            return String.format(\"%s\", key);\n+        } else {\n+            return String.format(\"%s+%s\", key, List.of(args));\n+        }\n+    }\n+\n+    private final BiFunction<String, Object[], String> formatter;\n+    private final String key;\n+    private final Object[] args;\n+}\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/CannedFormattedString.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"patch":"@@ -81,0 +81,1 @@\n+        outputValidator = cmd.outputValidator;\n@@ -742,0 +743,18 @@\n+    public JPackageCommand validateOutput(TKit.TextStreamVerifier validator) {\n+        return JPackageCommand.this.validateOutput(validator::apply);\n+    }\n+\n+    public JPackageCommand validateOutput(Consumer<Stream<String>> validator) {\n+        if (validator != null) {\n+            saveConsoleOutput(true);\n+            outputValidator = validator;\n+        } else {\n+            outputValidator = null;\n+        }\n+        return this;\n+    }\n+\n+    public JPackageCommand validateOutput(CannedFormattedString str) {\n+        return JPackageCommand.this.validateOutput(TKit.assertTextStream(str.getValue()));\n+    }\n+\n@@ -820,0 +839,4 @@\n+        if (outputValidator != null) {\n+            outputValidator.accept(result.getOutput().stream());\n+        }\n+\n@@ -1190,0 +1213,1 @@\n+    private Consumer<Stream<String>> outputValidator;\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JPackageCommand.java","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jpackage.test;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.text.MessageFormat;\n+\n+public enum JPackageStringBundle {\n+\n+    MAIN(\"jdk.jpackage.internal.I18N\"),\n+    ;\n+\n+    JPackageStringBundle(String i18nClassName) {\n+        try {\n+            i18nClass = Class.forName(i18nClassName);\n+\n+            i18nClass_getString = i18nClass.getDeclaredMethod(\"getString\", String.class);\n+            i18nClass_getString.setAccessible(true);\n+        } catch (ClassNotFoundException|NoSuchMethodException ex) {\n+            throw Functional.rethrowUnchecked(ex);\n+        }\n+    }\n+\n+    \/**\n+     * Return a string value of the given key from jpackage resources.\n+     *\/\n+    private String getString(String key) {\n+        try {\n+            return (String)i18nClass_getString.invoke(i18nClass, key);\n+        } catch (IllegalAccessException|InvocationTargetException ex) {\n+            throw Functional.rethrowUnchecked(ex);\n+        }\n+    }\n+\n+    private String getFormattedString(String key, Object[] args) {\n+        return MessageFormat.format(getString(key), args);\n+    }\n+\n+    public CannedFormattedString cannedFormattedString(String key, String ... args) {\n+        return new CannedFormattedString(this::getFormattedString, key, args);\n+    }\n+\n+    private final Class<?> i18nClass;\n+    private final Method i18nClass_getString;\n+}\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JPackageStringBundle.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"},{"patch":"@@ -949,0 +949,10 @@\n+        public TextStreamVerifier andThen(Consumer<? super Stream<String>> anotherVerifier) {\n+            this.anotherVerifier = anotherVerifier;\n+            return this;\n+        }\n+\n+        public TextStreamVerifier andThen(TextStreamVerifier anotherVerifier) {\n+            this.anotherVerifier = anotherVerifier::apply;\n+            return this;\n+        }\n+\n@@ -959,3 +969,16 @@\n-            String matchedStr = lines.filter(line -> predicate.test(line, value)).findFirst().orElse(\n-                    null);\n-            String labelStr = Optional.ofNullable(label).orElse(\"output\");\n+            final String matchedStr;\n+\n+            lines = lines.dropWhile(line -> !predicate.test(line, value));\n+            if (anotherVerifier == null) {\n+                matchedStr = lines.findFirst().orElse(null);\n+            } else {\n+                var tail = lines.toList();\n+                if (tail.isEmpty()) {\n+                    matchedStr = null;\n+                } else {\n+                    matchedStr = tail.get(0);\n+                }\n+                lines = tail.stream().skip(1);\n+            }\n+\n+            final String labelStr = Optional.ofNullable(label).orElse(\"output\");\n@@ -985,0 +1008,4 @@\n+\n+            if (anotherVerifier != null) {\n+                anotherVerifier.accept(lines);\n+            }\n@@ -991,0 +1018,1 @@\n+        private Consumer<? super Stream<String>> anotherVerifier;\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/TKit.java","additions":31,"deletions":3,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -27,1 +27,3 @@\n-import jdk.jpackage.test.Annotations.Parameters;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import jdk.jpackage.test.Annotations.ParameterSupplier;\n@@ -29,0 +31,1 @@\n+import jdk.jpackage.test.CannedFormattedString;\n@@ -30,0 +33,1 @@\n+import jdk.jpackage.test.JPackageStringBundle;\n@@ -56,4 +60,0 @@\n-    private final String expectedError;\n-    private final JPackageCommand cmd;\n-\n-    @Parameters\n@@ -66,1 +66,1 @@\n-                    \"Invalid Option: [--no-such-argument]\"},\n+                    JPackageStringBundle.MAIN.cannedFormattedString(\"ERR_InvalidOption\", \"--no-such-argument\")},\n@@ -71,1 +71,1 @@\n-                    \"--main-jar or --module\"},\n+                    JPackageStringBundle.MAIN.cannedFormattedString(\"ERR_NoEntryPoint\")},\n@@ -76,1 +76,2 @@\n-                    \"main class was not specified\"},\n+                    JPackageStringBundle.MAIN.cannedFormattedString(\"error.no-main-class-with-main-jar\", \"hello.jar\"),\n+                    JPackageStringBundle.MAIN.cannedFormattedString(\"error.no-main-class-with-main-jar.advice\", \"hello.jar\")},\n@@ -81,1 +82,1 @@\n-                    \"main jar does not exist\"},\n+                    JPackageStringBundle.MAIN.cannedFormattedString(\"error.main-jar-does-not-exist\", \"non-existent.jar\")},\n@@ -86,1 +87,1 @@\n-                    \"does not exist\"},\n+                    JPackageStringBundle.MAIN.cannedFormattedString(\"message.runtime-image-dir-does-not-exist\", \"runtime-image\", \"non-existent.runtime\")},\n@@ -91,1 +92,1 @@\n-                    \"does not exist\"},\n+                    JPackageStringBundle.MAIN.cannedFormattedString(\"message.resource-dir-does-not-exist\", \"resource-dir\", \"non-existent.dir\")},\n@@ -96,1 +97,1 @@\n-                    \"Invalid or unsupported type: [invalid-type]\"},\n+                    JPackageStringBundle.MAIN.cannedFormattedString(\"ERR_InvalidInstallerType\", \"invalid-type\")},\n@@ -101,1 +102,1 @@\n-                    \"Missing argument: --input\"},\n+                    JPackageStringBundle.MAIN.cannedFormattedString(\"ERR_MissingArgument\", \"--input\")},\n@@ -106,1 +107,1 @@\n-                    \"Missing argument: --runtime-image or --module-path\"},\n+                    JPackageStringBundle.MAIN.cannedFormattedString(\"ERR_MissingArgument\", \"--runtime-image or --module-path\")},\n@@ -110,4 +111,13 @@\n-    public ErrorTest(String javaAppDesc, String[] jpackageArgs,\n-                String[] removeArgs,\n-                String expectedError) {\n-        this.expectedError = expectedError;\n+    @Test\n+    @ParameterSupplier(\"input\")\n+    public static void test(String javaAppDesc, String[] jpackageArgs,\n+            String[] removeArgs, CannedFormattedString... expectedErrors) {\n+        \/\/ Init default jpackage test command line.\n+        var cmd = JPackageCommand.helloAppImage(javaAppDesc)\n+                \/\/ Disable default logic adding `--verbose` option\n+                \/\/ to jpackage command line.\n+                \/\/ It will affect jpackage error messages if the command line is malformed.\n+                .ignoreDefaultVerbose(true)\n+                \/\/ Ignore external runtime as it will interfer\n+                \/\/ with jpackage arguments in this test.\n+                .ignoreDefaultRuntime(true);\n@@ -115,10 +125,2 @@\n-        cmd = JPackageCommand.helloAppImage(javaAppDesc)\n-                .saveConsoleOutput(true).dumpOutput(true);\n-        if (jpackageArgs != null) {\n-            cmd.addArguments(jpackageArgs);\n-        } if (removeArgs != null) {\n-            for (String arg : removeArgs) {\n-                cmd.removeArgumentWithValue(arg);\n-            }\n-        }\n-    }\n+        \/\/ Add arguments if requested.\n+        Optional.ofNullable(jpackageArgs).ifPresent(cmd::addArguments);\n@@ -126,6 +128,10 @@\n-    @Test\n-    public void test() {\n-        List<String> output = cmd.execute(1).getOutput();\n-        TKit.assertNotNull(output, \"output is null\");\n-        TKit.assertTextStream(expectedError).apply(output.stream());\n-    }\n+        \/\/ Remove arguments if requested.\n+        Optional.ofNullable(removeArgs).map(List::of).ifPresent(\n+                args -> args.forEach(cmd::removeArgumentWithValue));\n+\n+        \/\/ Configure jpackage output verifier to look up the list of provided\n+        \/\/ errors in the order they specified.\n+        cmd.validateOutput(Stream.of(expectedErrors)\n+                .map(CannedFormattedString::getValue)\n+                .map(TKit::assertTextStream)\n+                .reduce(TKit.TextStreamVerifier::andThen).get());\n@@ -133,0 +139,2 @@\n+        cmd.execute(1);\n+    }\n","filename":"test\/jdk\/tools\/jpackage\/share\/ErrorTest.java","additions":42,"deletions":34,"binary":false,"changes":76,"status":"modified"}]}