{"files":[{"patch":"@@ -292,18 +292,13 @@\n-    record Indices(String tr, int startIdx, int endIdx) {\n-        \/\/ first invocation\n-        static Indices findNext(String tr, int startIdx) {\n-            int endIdx = tr.indexOf('\/', startIdx);\n-            if (endIdx != -1) { \/\/ found a slash\n-                \/\/ check the presence of special algorithms with \"\/\" in the\n-                \/\/ name, e.g. truncated SHA512, which can cause the parsing\n-                \/\/ logic to go wrong\n-                int sha512Idx = tr.indexOf(SHA512TRUNCATED, startIdx);\n-                int sha512SlashIdx = (sha512Idx != -1 ? sha512Idx + 3 : -2);\n-                \/\/ if the current slash is the special algorithm slash,\n-                \/\/ move forward to the next non-algorithm slash\n-                while (endIdx == sha512SlashIdx) {\n-                    endIdx = tr.indexOf('\/', endIdx + 1);\n-                    \/\/ check for the next truncated SHA512 and update\n-                    sha512Idx = tr.indexOf(SHA512TRUNCATED, sha512SlashIdx + 1);\n-                    sha512SlashIdx = (sha512Idx != -1 ? sha512Idx + 3 : -2);\n-                }\n+    static int indexOfRealSlash(String s, int fromIndex) {\n+        while (true) {\n+            int pos = s.indexOf('\/', fromIndex);\n+            \/\/ 512\/2\n+            if (pos > 3 && pos + 1 < s.length()\n+                    && s.charAt(pos - 3) == '5'\n+                    && s.charAt(pos - 2) == '1'\n+                    && s.charAt(pos - 1) == '2'\n+                    && s.charAt(pos + 1) == '2') {\n+                fromIndex = pos + 1;\n+                \/\/ see 512\/2, find next\n+            } else {\n+                return pos;\n@@ -311,7 +306,0 @@\n-            return new Indices(tr, startIdx, endIdx);\n-        }\n-\n-        \/\/ find the next set of indices given the current set of indices;\n-        \/\/ called when curr.endIdx != -1\n-        static Indices findNext(Indices curr) {\n-            return findNext(curr.tr, curr.endIdx + 1);\n@@ -319,0 +307,1 @@\n+    }\n@@ -320,8 +309,5 @@\n-        \/\/ check and return the trimmed string, i.e. from startIdx to endIdx.\n-        String getValue(String errMsg) throws NoSuchAlgorithmException {\n-            String value = (endIdx == -1 ? tr.substring(startIdx).trim() :\n-                    tr.substring(startIdx, endIdx).trim());\n-            if (value.isEmpty()) {\n-                throw new NoSuchAlgorithmException(errMsg);\n-            }\n-            return value;\n+    static String reqNonEmpty(String in, String msg)\n+            throws NoSuchAlgorithmException {\n+        in = in.trim();\n+        if (in.isEmpty()) {\n+            throw new NoSuchAlgorithmException(msg);\n@@ -329,0 +315,1 @@\n+        return in;\n@@ -348,19 +335,26 @@\n-        Indices marker = Indices.findNext(transformation, 0);\n-        String algo = marker.getValue(\n-                \"Invalid transformation: algorithm not specified\");\n-        if (marker.endIdx == -1) { \/\/ done, algo only\n-            return new String[] { algo };\n-        } else { \/\/ should be algo\/mode\/padding\n-            marker = Indices.findNext(marker);\n-            if (marker.endIdx != -1) {\n-                String mode = marker.getValue(\n-                        \"Invalid transformation: missing mode\");\n-\n-                marker = Indices.findNext(marker);\n-                \/\/ should have no more slash now\n-                if (marker.endIdx == -1) {\n-                    String padding = marker.getValue(\n-                            \"Invalid transformation: missing padding\");\n-                    return new String[] { algo, mode, padding };\n-                }\n-            }\n+        int endIdx = indexOfRealSlash(transformation, 0);\n+        if (endIdx == -1) { \/\/ algo only, done\n+            return new String[] { reqNonEmpty(transformation,\n+                        \"Invalid transformation: algorithm not specified\")\n+            };\n+        }\n+        \/\/ must be algo\/mode\/padding\n+        String algo = reqNonEmpty(transformation.substring(0, endIdx),\n+                    \"Invalid transformation: algorithm not specified\");\n+\n+        int startIdx = endIdx + 1;\n+        endIdx = indexOfRealSlash(transformation, startIdx);\n+        if (endIdx == -1) {\n+            throw new NoSuchAlgorithmException(\n+                    \"Invalid transformation format: \" + transformation);\n+        }\n+        String mode = reqNonEmpty(transformation.substring(startIdx,\n+                endIdx), \"Invalid transformation: missing mode\");\n+\n+        startIdx = endIdx + 1;\n+        endIdx = indexOfRealSlash(transformation, startIdx);\n+        if (endIdx == -1) {\n+            return new String[] { algo, mode,\n+                    reqNonEmpty(transformation.substring(startIdx),\n+                            \"Invalid transformation: missing padding\") };\n+        } else {\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/Cipher.java","additions":46,"deletions":52,"binary":false,"changes":98,"status":"modified"}]}