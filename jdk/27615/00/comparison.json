{"files":[{"patch":"@@ -289,1 +289,2 @@\n-    private static final String SHA512TRUNCATED = \"SHA512\/2\";\n+    \/\/ for special handling SHA-512\/224, SHA-512\/256, SHA512\/224, SHA512\/256\n+    private static final String SHA512TRUNCATED = \"512\/2\";\n@@ -308,0 +309,9 @@\n+        int endIdx = transformation.indexOf('\/');\n+        if (endIdx == -1) { \/\/ done, algo only\n+            String algo = transformation.trim();\n+            if (algo.isEmpty()) {\n+                throw new NoSuchAlgorithmException(\n+                        \"Invalid transformation: algorithm not specified\");\n+            }\n+            return new String[] { algo };\n+        }\n@@ -309,10 +319,12 @@\n-        \/\/ check if the transformation contains algorithms with \"\/\" in their\n-        \/\/ name which can cause the parsing logic to go wrong\n-        int sha512Idx = transformation.toUpperCase(Locale.ENGLISH)\n-                .indexOf(SHA512TRUNCATED);\n-        int startIdx = (sha512Idx == -1 ? 0 :\n-                sha512Idx + SHA512TRUNCATED.length());\n-        int endIdx = transformation.indexOf('\/', startIdx);\n-\n-        boolean algorithmOnly = (endIdx == -1);\n-        String algo = (algorithmOnly ? transformation.trim() :\n+        \/\/ check the presence of special algorithms with \"\/\" in the name, e.g.\n+        \/\/ truncated SHA512, which can cause the parsing logic to go wrong\n+        int sha512Idx = transformation.indexOf(SHA512TRUNCATED);\n+        int sha512SlashIdx = (sha512Idx != -1 ? sha512Idx + 3 : -2);\n+        \/\/ check for the known algorithm slash\n+        while (endIdx == sha512SlashIdx) {\n+            endIdx = transformation.indexOf('\/', sha512SlashIdx + 1);\n+            sha512Idx = transformation.indexOf(SHA512TRUNCATED, sha512SlashIdx +\n+                    SHA512TRUNCATED.length());\n+            sha512SlashIdx = (sha512Idx != -1 ? sha512Idx + 3 : -2);\n+        }\n+        String algo = (endIdx == -1 ? transformation.trim() :\n@@ -321,3 +333,2 @@\n-            throw new NoSuchAlgorithmException(\"Invalid transformation: \" +\n-                                   \"algorithm not specified-\"\n-                                   + transformation);\n+            throw new NoSuchAlgorithmException(\n+                    \"Invalid transformation: algorithm not specified\");\n@@ -325,1 +336,1 @@\n-        if (algorithmOnly) { \/\/ done\n+        if (endIdx == -1) { \/\/ done, algo only\n@@ -327,3 +338,2 @@\n-        } else {\n-            \/\/ continue parsing mode and padding\n-            startIdx = endIdx+1;\n+        } else { \/\/ continue parsing for mode and padding\n+            int startIdx = endIdx + 1;\n@@ -331,11 +341,26 @@\n-            if (endIdx == -1) {\n-                throw new NoSuchAlgorithmException(\"Invalid transformation\"\n-                            + \" format:\" + transformation);\n-            }\n-            String mode = transformation.substring(startIdx, endIdx).trim();\n-            String padding = transformation.substring(endIdx+1).trim();\n-            \/\/ ensure mode and padding are specified\n-            if (mode.isEmpty() || padding.isEmpty()) {\n-                throw new NoSuchAlgorithmException(\"Invalid transformation: \" +\n-                                   \"missing mode and\/or padding-\"\n-                                   + transformation);\n+            if (endIdx != -1) {\n+                \/\/ no truncated SHA in mode\n+                String mode = transformation.substring(startIdx,\n+                        endIdx).trim();\n+                if (mode.isEmpty()) {\n+                    throw new NoSuchAlgorithmException(\n+                            \"Invalid transformation: missing mode\");\n+                }\n+                startIdx = endIdx + 1;\n+                endIdx = transformation.indexOf('\/', startIdx);\n+                \/\/ check for the known algorithm slash\n+                while (endIdx == sha512SlashIdx) {\n+                    endIdx = transformation.indexOf('\/', sha512SlashIdx + 1);\n+                    sha512Idx = transformation.indexOf(SHA512TRUNCATED,\n+                            sha512SlashIdx + SHA512TRUNCATED.length());\n+                    sha512SlashIdx = (sha512Idx != -1 ? sha512Idx + 3 : -2);\n+                }\n+                \/\/ should have no more slash now\n+                if (endIdx == -1) {\n+                    String padding = transformation.substring(startIdx).trim();\n+                    if (padding.isEmpty()) {\n+                        throw new NoSuchAlgorithmException(\n+                                \"Invalid transformation: missing padding\");\n+                    }\n+                    return new String[] { algo, mode, padding };\n+                }\n@@ -343,1 +368,2 @@\n-            return new String[] { algo, mode, padding };\n+            throw new NoSuchAlgorithmException(\n+                    \"Invalid transformation format: \" + transformation);\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/Cipher.java","additions":56,"deletions":30,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8153029 8360463\n+ * @bug 8153029 8360463 8368984\n@@ -75,2 +75,1 @@\n-        checkTransformation(\"ChaCha20-Poly1305\", null);\n-        checkTransformation(\"ChaCha20-Poly1305\/None\/NoPadding\", null);\n+        checkTransformation(\"ChaCha20\/None\/\/\", NSAE);\n@@ -79,0 +78,3 @@\n+        checkTransformation(\"ChaCha20-Poly1305\", null);\n+        checkTransformation(\"ChaCha20-Poly1305\/None\/NoPadding\", null);\n+        checkTransformation(\"ChaCha20-Poly1305\/None\/\/\", NSAE);\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/ChaCha20\/unittest\/ChaCha20CipherUnitTest.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @bug 8359388\n+ * @bug 8359388 8368984\n@@ -70,0 +70,3 @@\n+            \/\/ 4 or more components transformations\n+            \"PBEWithHmacSHA512\/\/\/PKCS5Padding\",\n+            \"AES\/GCM\/NoPadding\/\/\/\",\n","filename":"test\/jdk\/javax\/crypto\/Cipher\/TestEmptyModePadding.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 4898428\n+ * @bug 4898428 8368984\n@@ -29,0 +29,1 @@\n+ * @library \/test\/lib\n@@ -38,0 +39,1 @@\n+import jdk.test.lib.Utils;\n@@ -51,2 +53,2 @@\n-        Provider p = Security.getProvider(\n-                System.getProperty(\"test.provider.name\", \"SunJCE\"));\n+        String pName = System.getProperty(\"test.provider.name\", \"SunJCE\");\n+        Provider p = Security.getProvider(pName);\n@@ -71,19 +73,10 @@\n-        try {\n-            c = Cipher.getInstance(algo + \"\/XYZ\/PKCS5Padding\");\n-            throw new AssertionError();\n-        } catch (NoSuchAlgorithmException e) {\n-            System.out.println(e);\n-        }\n-        try {\n-            c = Cipher.getInstance(algo + \"\/XYZ\/PKCS5Padding\",\n-                    System.getProperty(\"test.provider.name\", \"SunJCE\"));\n-            throw new AssertionError();\n-        } catch (NoSuchAlgorithmException e) {\n-            System.out.println(e);\n-        }\n-        try {\n-            c = Cipher.getInstance(algo + \"\/XYZ\/PKCS5Padding\", p);\n-            throw new AssertionError();\n-        } catch (NoSuchAlgorithmException e) {\n-            System.out.println(e);\n-        }\n+        \/\/ invalid transformations or transformations containing unsupported\n+        \/\/ modes which should lead to NSAE\n+        String[] nsaeTransformations = {\n+            (algo + \"\/XYZ\/PKCS5Padding\"),\n+            (algo + \"\/CBC\/XYZWithSHA512\/224Padding\/\"),\n+            (algo + \"\/CBC\/XYZWithSHA512\/256Padding\/\"),\n+            (pbeAlgo + \"\/CBC\/XYZWithSHA512\/224Padding\/\"),\n+            (pbeAlgo + \"\/CBC\/XYZWithSHA512\/256Padding\/\"),\n+            \"foo\",\n+        };\n@@ -91,18 +84,8 @@\n-        try {\n-            c = Cipher.getInstance(algo + \"\/CBC\/XYZPadding\");\n-            throw new AssertionError();\n-        } catch (NoSuchAlgorithmException e) {\n-            System.out.println(e);\n-        }\n-        try {\n-            c = Cipher.getInstance(algo + \"\/CBC\/XYZPadding\",\n-                    System.getProperty(\"test.provider.name\", \"SunJCE\"));\n-            throw new AssertionError();\n-        } catch (NoSuchPaddingException e) {\n-            System.out.println(e);\n-        }\n-        try {\n-            c = Cipher.getInstance(algo + \"\/CBC\/XYZPadding\", p);\n-            throw new AssertionError();\n-        } catch (NoSuchPaddingException e) {\n-            System.out.println(e);\n+        for (String t : nsaeTransformations) {\n+            System.out.println(\"Testing NSAE on \" + t);\n+            Utils.runAndCheckException(() -> Cipher.getInstance(t),\n+                    NoSuchAlgorithmException.class);\n+            Utils.runAndCheckException(() -> Cipher.getInstance(t, pName),\n+                    NoSuchAlgorithmException.class);\n+            Utils.runAndCheckException(() -> Cipher.getInstance(t, p),\n+                    NoSuchAlgorithmException.class);\n@@ -111,19 +94,9 @@\n-        try {\n-            c = Cipher.getInstance(\"foo\");\n-            throw new AssertionError();\n-        } catch (NoSuchAlgorithmException e) {\n-            System.out.println(e);\n-        }\n-        try {\n-            c = Cipher.getInstance(\"foo\",\n-                    System.getProperty(\"test.provider.name\", \"SunJCE\"));\n-            throw new AssertionError();\n-        } catch (NoSuchAlgorithmException e) {\n-            System.out.println(e);\n-        }\n-        try {\n-            c = Cipher.getInstance(\"foo\", p);\n-            throw new AssertionError();\n-        } catch (NoSuchAlgorithmException e) {\n-            System.out.println(e);\n-        }\n+        \/\/ transformations containing unsupported paddings for SunJCE provider\n+        \/\/ which should lead to NSPE\n+        String[] nspeTransformations = {\n+            (algo + \"\/CBC\/XYZPadding\"),\n+            (algo + \"\/CBC\/XYZWithSHA512\/224Padding\"),\n+            (algo + \"\/CBC\/XYZWithSHA512\/256Padding\"),\n+            (pbeAlgo + \"\/CBC\/XYZWithSHA512\/224Padding\"),\n+            (pbeAlgo + \"\/CBC\/XYZWithSHA512\/256Padding\"),\n+        };\n@@ -131,19 +104,6 @@\n-        try {\n-            c = Cipher.getInstance(\"foo\",\n-                    System.getProperty(\"test.provider.name\", \"SUN\"));\n-            throw new AssertionError();\n-        } catch (NoSuchAlgorithmException e) {\n-            System.out.println(e);\n-        }\n-        try {\n-            c = Cipher.getInstance(\"foo\", Security.getProvider(\n-                    System.getProperty(\"test.provider.name\", \"SUN\")));\n-            throw new AssertionError();\n-        } catch (NoSuchAlgorithmException e) {\n-            System.out.println(e);\n-        }\n-        try {\n-            c = Cipher.getInstance(\"foo\", \"bar\");\n-            throw new AssertionError();\n-        } catch (NoSuchProviderException e) {\n-            System.out.println(e);\n+        for (String t : nspeTransformations) {\n+            System.out.println(\"Testing NSPE on \" + t);\n+            Utils.runAndCheckException(() -> Cipher.getInstance(t, pName),\n+                    NoSuchPaddingException.class);\n+            Utils.runAndCheckException(() -> Cipher.getInstance(t, p),\n+                    NoSuchPaddingException.class);\n@@ -152,0 +112,10 @@\n+        \/\/ additional misc tests\n+        Utils.runAndCheckException(() -> Cipher.getInstance(\"foo\",\n+                System.getProperty(\"test.provider.name\", \"SUN\")),\n+                NoSuchAlgorithmException.class);\n+        Utils.runAndCheckException(() -> Cipher.getInstance(\"foo\",\n+                Security.getProvider(System.getProperty(\"test.provider.name\",\n+                \"SUN\"))), NoSuchAlgorithmException.class);\n+        Utils.runAndCheckException(() -> Cipher.getInstance(\"foo\", \"bar\"),\n+                NoSuchProviderException.class);\n+\n","filename":"test\/jdk\/javax\/crypto\/Cipher\/TestGetInstance.java","additions":49,"deletions":79,"binary":false,"changes":128,"status":"modified"}]}