{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-  assert((index) < (_reserved.word_size() >> BOTConstants::log_card_size_in_words()),\n+  assert((index) < (_reserved.word_size() >> CardTable::card_shift_in_words()),\n@@ -54,1 +54,1 @@\n-         msg, (index), (_reserved.word_size() >> BOTConstants::log_card_size_in_words()));\n+         msg, (index), (_reserved.word_size() >> CardTable::card_shift_in_words()));\n@@ -110,1 +110,1 @@\n-  assert(_bot->offset_array(start_card-1) < BOTConstants::card_size_in_words(),\n+  assert(_bot->offset_array(start_card-1) < CardTable::card_size_in_words(),\n@@ -119,1 +119,1 @@\n-    offset = BOTConstants::card_size_in_words() + i;\n+    offset = CardTable::card_size_in_words() + i;\n@@ -141,1 +141,1 @@\n-  guarantee(_bot->offset_array(start_card) == BOTConstants::card_size_in_words(), \"Wrong value in second card\");\n+  guarantee(_bot->offset_array(start_card) == CardTable::card_size_in_words(), \"Wrong value in second card\");\n@@ -145,1 +145,1 @@\n-      guarantee(entry > BOTConstants::card_size_in_words(),\n+      guarantee(entry > CardTable::card_size_in_words(),\n@@ -150,1 +150,1 @@\n-                (uint)entry, (uint)_bot->offset_array(c), BOTConstants::card_size_in_words());\n+                (uint)entry, (uint)_bot->offset_array(c), CardTable::card_size_in_words());\n@@ -163,1 +163,1 @@\n-      guarantee(_bot->offset_array(landing_card) < BOTConstants::card_size_in_words(),\n+      guarantee(_bot->offset_array(landing_card) < CardTable::card_size_in_words(),\n@@ -166,1 +166,1 @@\n-                (uint)_bot->offset_array(landing_card), (uint)BOTConstants::card_size_in_words());\n+                (uint)_bot->offset_array(landing_card), (uint)CardTable::card_size_in_words());\n@@ -191,2 +191,2 @@\n-  assert(pointer_delta(cur_card_boundary, blk_start) < BOTConstants::card_size_in_words(),\n-         \"offset should be < BOTConstants::card_size_in_words()\");\n+  assert(pointer_delta(cur_card_boundary, blk_start) < CardTable::card_size_in_words(),\n+         \"offset should be < CardTable::card_size_in_words()\");\n@@ -197,1 +197,1 @@\n-  assert(cur_card_boundary == _bot->_reserved.start() + index*BOTConstants::card_size_in_words(),\n+  assert(cur_card_boundary == _bot->_reserved.start() + index * CardTable::card_size_in_words(),\n@@ -216,1 +216,1 @@\n-  HeapWord* new_card_boundary = _bot->address_for_index(end_index) + BOTConstants::card_size_in_words();\n+  HeapWord* new_card_boundary = _bot->address_for_index(end_index) + CardTable::card_size_in_words();\n@@ -224,1 +224,1 @@\n-         (_bot->offset_array(index) > 0 && _bot->offset_array(index) < BOTConstants::card_size_in_words()),\n+         (_bot->offset_array(index) > 0 && _bot->offset_array(index) < CardTable::card_size_in_words()),\n@@ -234,1 +234,1 @@\n-             (u_char) (BOTConstants::card_size_in_words()+BOTConstants::N_powers-1),\n+             (u_char) (CardTable::card_size_in_words() + BOTConstants::N_powers - 1),\n@@ -239,1 +239,1 @@\n-           (uint) (BOTConstants::card_size_in_words() + BOTConstants::N_powers - 1));\n+           (uint) (CardTable::card_size_in_words() + BOTConstants::N_powers - 1));\n@@ -251,1 +251,1 @@\n-    if (entry < BOTConstants::card_size_in_words()) {\n+    if (entry < CardTable::card_size_in_words()) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BlockOffsetTable.cpp","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+#include \"gc\/shared\/cardTable.hpp\"\n@@ -58,1 +59,1 @@\n-    assert(offset < BOTConstants::card_size_in_words(),\n+    assert(offset < CardTable::card_size_in_words(),\n@@ -60,1 +61,1 @@\n-           msg, offset, BOTConstants::card_size_in_words());\n+           msg, offset, CardTable::card_size_in_words());\n@@ -81,1 +82,1 @@\n-    size_t number_of_slots = (mem_region_words \/ BOTConstants::card_size_in_words());\n+    size_t number_of_slots = (mem_region_words \/ CardTable::card_size_in_words());\n@@ -87,1 +88,1 @@\n-    return BOTConstants::card_size();\n+    return CardTable::card_size();\n@@ -103,1 +104,1 @@\n-    return _reserved.start() + (index << BOTConstants::log_card_size_in_words());\n+    return _reserved.start() + (index << CardTable::card_shift_in_words());\n@@ -127,1 +128,1 @@\n-    return align_up(addr, BOTConstants::card_size());\n+    return align_up(addr, CardTable::card_size());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BlockOffsetTable.hpp","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-\n@@ -31,0 +30,1 @@\n+#include \"gc\/shared\/cardTable.hpp\"\n@@ -50,1 +50,1 @@\n-  while (offset >= BOTConstants::card_size_in_words()) {\n+  while (offset >= CardTable::card_size_in_words()) {\n@@ -57,1 +57,1 @@\n-  assert(offset < BOTConstants::card_size_in_words(), \"offset too large\");\n+  assert(offset < CardTable::card_size_in_words(), \"offset too large\");\n@@ -95,1 +95,1 @@\n-  return pointer_delta((char*)p, _reserved.start(), sizeof(char)) >> BOTConstants::log_card_size();\n+  return pointer_delta((char*)p, _reserved.start(), sizeof(char)) >> CardTable::card_shift();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BlockOffsetTable.inline.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -534,1 +534,1 @@\n-    HeapWord* scan_end = MIN2(card_start + (num_cards << BOTConstants::log_card_size_in_words()), top);\n+    HeapWord* scan_end = MIN2(card_start + (num_cards << CardTable::card_shift_in_words()), top);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-  return mr.word_size() \/ BOTConstants::card_size_in_words();\n+  return mr.word_size() \/ CardTable::card_size_in_words();\n@@ -61,1 +61,1 @@\n-  _offset_base = (uint8_t*)(_virtual_space.low_boundary() - (uintptr_t(reserved_region.start()) >> BOTConstants::log_card_size()));\n+  _offset_base = (uint8_t*)(_virtual_space.low_boundary() - (uintptr_t(reserved_region.start()) >> CardTable::card_shift()));\n@@ -114,1 +114,1 @@\n-      uint8_t value = checked_cast<uint8_t>(BOTConstants::card_size_in_words() + i);\n+      uint8_t value = checked_cast<uint8_t>(CardTable::card_size_in_words() + i);\n@@ -135,1 +135,1 @@\n-  assert(*start_entry < BOTConstants::card_size_in_words(), \"offset entry\");\n+  assert(*start_entry < CardTable::card_size_in_words(), \"offset entry\");\n","filename":"src\/hotspot\/share\/gc\/parallel\/objectStartArray.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+#include \"gc\/shared\/cardTable.hpp\"\n@@ -53,1 +54,1 @@\n-    uint8_t* result = &_offset_base[uintptr_t(p) >> BOTConstants::log_card_size()];\n+    uint8_t* result = &_offset_base[uintptr_t(p) >> CardTable::card_shift()];\n@@ -60,1 +61,1 @@\n-    HeapWord* result = (HeapWord*) (delta << BOTConstants::log_card_size());\n+    HeapWord* result = (HeapWord*) (delta << CardTable::card_shift());\n@@ -67,1 +68,1 @@\n-    return align_up(addr, BOTConstants::card_size());\n+    return align_up(addr, CardTable::card_size());\n","filename":"src\/hotspot\/share\/gc\/parallel\/objectStartArray.hpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,1 @@\n-    if (offset < BOTConstants::card_size_in_words()) {\n+    if (offset < CardTable::card_size_in_words()) {\n","filename":"src\/hotspot\/share\/gc\/parallel\/objectStartArray.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -130,1 +130,1 @@\n-  assert((block_word_size % BOTConstants::card_size_in_words()) == 0,\n+  assert((block_word_size % CardTable::card_size_in_words()) == 0,\n","filename":"src\/hotspot\/share\/gc\/parallel\/psOldGen.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -132,1 +132,1 @@\n-      uint8_t value = checked_cast<uint8_t>(BOTConstants::card_size_in_words() + i);\n+      uint8_t value = checked_cast<uint8_t>(CardTable::card_size_in_words() + i);\n@@ -154,1 +154,1 @@\n-    if (offset < BOTConstants::card_size_in_words()) {\n+    if (offset < CardTable::card_size_in_words()) {\n@@ -174,1 +174,1 @@\n-  assert(_array->offset_array(start_card) < BOTConstants::card_size_in_words(), \"offset card\");\n+  assert(_array->offset_array(start_card) < CardTable::card_size_in_words(), \"offset card\");\n","filename":"src\/hotspot\/share\/gc\/serial\/serialBlockOffsetTable.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,1 +64,1 @@\n-    assert(mem_region_words % BOTConstants::card_size_in_words() == 0, \"precondition\");\n+    assert(mem_region_words % CardTable::card_size_in_words() == 0, \"precondition\");\n@@ -66,1 +66,1 @@\n-    size_t number_of_slots = mem_region_words \/ BOTConstants::card_size_in_words();\n+    size_t number_of_slots = mem_region_words \/ CardTable::card_size_in_words();\n@@ -94,1 +94,1 @@\n-    assert(pointer_delta(high, low) < BOTConstants::card_size_in_words(), \"offset too large\");\n+    assert(pointer_delta(high, low) < CardTable::card_size_in_words(), \"offset too large\");\n@@ -120,1 +120,1 @@\n-    return align_up(addr, BOTConstants::card_size());\n+    return align_up(addr, CardTable::card_size());\n@@ -128,3 +128,1 @@\n-  SerialBlockOffsetTable(SerialBlockOffsetSharedArray* array) : _array(array) {\n-    assert(BOTConstants::card_size() == CardTable::card_size(), \"sanity\");\n-  }\n+  SerialBlockOffsetTable(SerialBlockOffsetSharedArray* array) : _array(array) {}\n","filename":"src\/hotspot\/share\/gc\/serial\/serialBlockOffsetTable.hpp","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-  size_t result = delta >> BOTConstants::log_card_size();\n+  size_t result = delta >> CardTable::card_shift();\n@@ -43,1 +43,1 @@\n-  HeapWord* result = _reserved.start() + (index << BOTConstants::log_card_size_in_words());\n+  HeapWord* result = _reserved.start() + (index << CardTable::card_shift_in_words());\n","filename":"src\/hotspot\/share\/gc\/serial\/serialBlockOffsetTable.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,39 +0,0 @@\n-\/*\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#include \"precompiled.hpp\"\n-#include \"gc\/shared\/blockOffsetTable.hpp\"\n-#include \"utilities\/globalDefinitions.hpp\"\n-\n-uint BOTConstants::_log_card_size = 0;\n-uint BOTConstants::_log_card_size_in_words = 0;\n-uint BOTConstants::_card_size = 0;\n-uint BOTConstants::_card_size_in_words = 0;\n-\n-void BOTConstants::initialize_bot_size(uint card_shift) {\n-  _log_card_size =  card_shift;\n-  _log_card_size_in_words = _log_card_size - LogHeapWordSize;\n-  _card_size = 1 << _log_card_size;\n-  _card_size_in_words = 1 << _log_card_size_in_words;\n-}\n","filename":"src\/hotspot\/share\/gc\/shared\/blockOffsetTable.cpp","additions":0,"deletions":39,"binary":false,"changes":39,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+#include \"gc\/shared\/cardTable.hpp\"\n@@ -32,5 +33,0 @@\n-  static uint _log_card_size;\n-  static uint _log_card_size_in_words;\n-  static uint _card_size;\n-  static uint _card_size_in_words;\n-\n@@ -44,3 +40,0 @@\n-  \/\/ Initialize bot size based on card size\n-  static void initialize_bot_size(uint card_shift);\n-\n@@ -52,14 +45,2 @@\n-    assert(entry >= _card_size_in_words, \"Precondition\");\n-    return power_to_cards_back(entry - _card_size_in_words);\n-  }\n-  static uint log_card_size() {\n-    return _log_card_size;\n-  }\n-  static uint log_card_size_in_words() {\n-    return _log_card_size_in_words;\n-  }\n-  static uint card_size() {\n-    return _card_size;\n-  }\n-  static uint card_size_in_words() {\n-    return _card_size_in_words;\n+    assert(entry >= CardTable::card_size_in_words(), \"Precondition\");\n+    return power_to_cards_back(entry - CardTable::card_size_in_words());\n","filename":"src\/hotspot\/share\/gc\/shared\/blockOffsetTable.hpp","additions":4,"deletions":23,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+uint CardTable::_card_shift_in_words = 0;\n@@ -53,3 +54,1 @@\n-\n-  \/\/ Set blockOffsetTable size based on card table entry size\n-  BOTConstants::initialize_bot_size(_card_shift);\n+  _card_shift_in_words = _card_shift - LogHeapWordSize;\n","filename":"src\/hotspot\/share\/gc\/shared\/cardTable.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -76,0 +76,1 @@\n+  static uint _card_shift_in_words;\n@@ -185,0 +186,4 @@\n+  static uint card_shift_in_words() {\n+    return _card_shift_in_words;\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/cardTable.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-                                         BOTConstants::card_size(),\n+                                         CardTable::card_size(),\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_freeRegionList.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}