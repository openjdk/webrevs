{"files":[{"patch":"@@ -3095,1 +3095,1 @@\n-  inline void z_popcnt(Register r1, Register r2);   \/\/ population count\n+  inline void z_popcnt(Register r1, Register r2, int64_t m3 = 0);   \/\/ population count\n","filename":"src\/hotspot\/cpu\/s390\/assembler_s390.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -744,1 +744,1 @@\n-inline void Assembler::z_popcnt(Register r1, Register r2)              { emit_32( POPCNT_ZOPC | reg(r1, 24, 32) | reg(r2, 28, 32)); }\n+inline void Assembler::z_popcnt(Register r1, Register r2, int64_t  m3) { emit_32( POPCNT_ZOPC | reg(r1, 24, 32) | reg(r2, 28, 32) | uimm4(m3, 16, 32)); }\n","filename":"src\/hotspot\/cpu\/s390\/assembler_s390.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5806,0 +5806,49 @@\n+\n+void MacroAssembler::pop_count_int(Register r_dst, Register r_src, Register r_tmp) {\n+  BLOCK_COMMENT(\"pop_count_int {\");\n+\n+  if (VM_Version::has_MiscInstrExt3()) {\n+    z_llgfr(r_src, r_src);\n+    z_popcnt(r_dst, r_src, 8);\n+  } else {\n+\n+#ifdef ASSERT\n+    assert(r_tmp != noreg, \"temp register required for popcnt, for machines < z15\");\n+    assert_different_registers(r_dst, r_tmp); \/\/ if r_src is same as r_tmp, it should be fine\n+#endif \/\/ ASSERT\n+\n+    z_popcnt(r_dst, r_src);\n+    z_srlg(r_tmp, r_dst, 16);\n+    z_alr(r_dst, r_tmp);\n+    z_srlg(r_tmp, r_dst, 8);\n+    z_alr(r_dst, r_tmp);\n+    \/\/ TODO: use risbgn instruction instead of srl below\n+    z_llgcr(r_dst, r_dst);\n+  }\n+\n+  BLOCK_COMMENT(\"} pop_count_int\");\n+}\n+\n+void MacroAssembler::pop_count_long(Register r_dst, Register r_src, Register r_tmp) {\n+  BLOCK_COMMENT(\"pop_count_long {\");\n+\n+  if (VM_Version::has_MiscInstrExt3()) {\n+    z_popcnt(r_dst, r_src, 8);\n+  } else {\n+\n+#ifdef ASSERT\n+    assert(r_tmp != noreg, \"temp register required for popcnt, for machines < z15\");\n+    assert_different_registers(r_dst, r_tmp); \/\/ if r_src is same as r_tmp, it should be fine\n+#endif \/\/ ASSERT\n+\n+    z_popcnt(r_dst, r_src);\n+    z_ahhlr(r_dst, r_dst, r_dst);\n+    z_sllg(r_tmp, r_dst, 16);\n+    z_algr(r_dst, r_tmp);\n+    z_sllg(r_tmp, r_dst, 8);\n+    z_algr(r_dst, r_tmp);\n+    z_srlg(r_dst, r_dst, 56);\n+  }\n+\n+  BLOCK_COMMENT(\"} pop_count_long\");\n+}\n","filename":"src\/hotspot\/cpu\/s390\/macroAssembler_s390.cpp","additions":49,"deletions":0,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2016, 2023 SAP SE. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024 SAP SE. All rights reserved.\n@@ -1024,0 +1024,4 @@\n+\n+  void pop_count_int(Register dst, Register src, Register tmp = noreg);\n+  void pop_count_long(Register dst, Register src, Register tmp = noreg);\n+\n","filename":"src\/hotspot\/cpu\/s390\/macroAssembler_s390.hpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -10678,0 +10678,42 @@\n+instruct popCountI_Ext3(iRegI dst, iRegI src, flagsReg cr) %{\n+  match(Set dst (PopCountI src));\n+  effect(TEMP_DEF dst, KILL cr);\n+  predicate(UsePopCountInstruction &&\n+            VM_Version::has_PopCount() &&\n+            VM_Version::has_MiscInstrExt3());\n+  ins_cost(DEFAULT_COST);\n+  size(8); \/\/ popcnt + llgfr\n+  format %{ \"POPCNT  $dst,$src\\t # pop count int\" %}\n+  ins_encode %{\n+    Register Rdst = $dst$$Register;\n+    Register Rsrc = $src$$Register;\n+\n+    \/\/ Prefer compile-time assertion over run-time SIGILL.\n+    assert(VM_Version::has_PopCount(), \"bad predicate for popCountI_Ext3\");\n+    __ pop_count_int(Rdst, Rsrc);\n+\n+  %}\n+  ins_pipe(pipe_class_dummy);\n+%}\n+\n+instruct popCountL_Ext3(iRegI dst, iRegL src, flagsReg cr) %{\n+  match(Set dst (PopCountL src));\n+  effect(TEMP_DEF dst, KILL cr);\n+  predicate(UsePopCountInstruction &&\n+            VM_Version::has_PopCount() &&\n+            VM_Version::has_MiscInstrExt3());\n+  ins_cost(DEFAULT_COST);\n+  size(4); \/\/ popcnt\n+  \/\/ TODO: s390 port size(FIXED_SIZE);\n+  format %{ \"POPCNT  $dst,$src\\t # pop count long\" %}\n+  ins_encode %{\n+    Register Rdst = $dst$$Register;\n+    Register Rsrc = $src$$Register;\n+\n+    \/\/ Prefer compile-time assertion over run-time SIGILL.\n+    assert(VM_Version::has_PopCount(), \"bad predicate for popCountL_Ext3\");\n+    __ pop_count_long(Rdst, Rsrc);\n+  %}\n+  ins_pipe(pipe_class_dummy);\n+%}\n+\n@@ -10681,1 +10723,3 @@\n-  predicate(UsePopCountInstruction && VM_Version::has_PopCount());\n+  predicate(UsePopCountInstruction &&\n+            VM_Version::has_PopCount() &&\n+            (!VM_Version::has_MiscInstrExt3()));\n@@ -10691,2 +10735,2 @@\n-    assert(VM_Version::has_PopCount(), \"bad predicate for countLeadingZerosI\");\n-    assert_different_registers(Rdst, Rtmp);\n+    assert(VM_Version::has_PopCount(), \"bad predicate for popCountI\");\n+    __ pop_count_int(Rdst, Rsrc, Rtmp);\n@@ -10694,7 +10738,0 @@\n-    \/\/ Version 2: shows 10%(z196) improvement over original.\n-    __ z_popcnt(Rdst, Rsrc);\n-    __ z_srlg(Rtmp, Rdst, 16); \/\/ calc  byte4+byte6 and byte5+byte7\n-    __ z_alr(Rdst, Rtmp);      \/\/   into byte6 and byte7\n-    __ z_srlg(Rtmp, Rdst,  8); \/\/ calc (byte4+byte6) + (byte5+byte7)\n-    __ z_alr(Rdst, Rtmp);      \/\/   into byte7\n-    __ z_llgcr(Rdst, Rdst);    \/\/ zero-extend sum\n@@ -10708,1 +10745,3 @@\n-  predicate(UsePopCountInstruction && VM_Version::has_PopCount());\n+  predicate(UsePopCountInstruction &&\n+            VM_Version::has_PopCount() &&\n+            (!VM_Version::has_MiscInstrExt3()));\n@@ -10710,1 +10749,1 @@\n-  \/\/ TODO: s390 port size(FIXED_SIZE);\n+  size(34);\n@@ -10718,11 +10757,2 @@\n-    assert(VM_Version::has_PopCount(), \"bad predicate for countLeadingZerosI\");\n-    assert_different_registers(Rdst, Rtmp);\n-\n-    \/\/ Original version. Using LA instead of algr seems to be a really bad idea (-35%).\n-    __ z_popcnt(Rdst, Rsrc);\n-    __ z_ahhlr(Rdst, Rdst, Rdst);\n-    __ z_sllg(Rtmp, Rdst, 16);\n-    __ z_algr(Rdst, Rtmp);\n-    __ z_sllg(Rtmp, Rdst,  8);\n-    __ z_algr(Rdst, Rtmp);\n-    __ z_srlg(Rdst, Rdst, 56);\n+    assert(VM_Version::has_PopCount(), \"bad predicate for popCountL\");\n+    __ pop_count_long(Rdst, Rsrc, Rtmp);\n","filename":"src\/hotspot\/cpu\/s390\/s390.ad","additions":53,"deletions":23,"binary":false,"changes":76,"status":"modified"}]}