{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -331,1 +331,1 @@\n-        } else if (au.retries > retry_limit) {\n+        } else if (au.retries >= retry_limit) {\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/AuthenticationFilter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,116 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/*\n+ * @test\n+ * @bug 8340182\n+ * @summary Retry limit system property\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.httpclient.test.lib.http2.Http2TestServer\n+ * @run junit HttpClientRetryLimitTest\n+ * @run junit\/othervm -Djdk.httpclient.auth.retrylimit=1 HttpClientRetryLimitTest\n+ * @run junit\/othervm -Djdk.httpclient.auth.retrylimit=0 HttpClientRetryLimitTest\n+ * @run junit\/othervm -Djdk.httpclient.auth.retrylimit=-1 HttpClientRetryLimitTest\n+ *\/\n+\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.io.IOException;\n+import java.net.Authenticator;\n+import java.net.PasswordAuthentication;\n+import java.net.URI;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.stream.Stream;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+\n+class HttpClientRetryLimitTest implements HttpServerAdapters {\n+\n+    \/\/ This is the system default value for jdk.httpclient.auth.retrylimit\n+    private static final int DEFAULT_RETRY_LIMIT = 3;\n+    private static final int RETRY_LIMIT = Integer.getInteger(\n+            \"jdk.httpclient.auth.retrylimit\", DEFAULT_RETRY_LIMIT);\n+\n+    static Stream<HttpClient.Version> args() {\n+        return Stream.of(\n+                HttpClient.Version.HTTP_1_1,\n+                HttpClient.Version.HTTP_2\n+        );\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"args\")\n+    public void testDefaultSystemProperty(HttpClient.Version version) throws Exception {\n+        AtomicInteger requestCount = new AtomicInteger(0);\n+\n+        try (HttpTestServer httpTestServer = HttpTestServer.create(version)) {\n+\n+            HttpTestHandler httpTestHandler = t -> {\n+                t.getResponseHeaders()\n+                        .addHeader(\"WWW-Authenticate\", \"Basic realm=\\\"Test\\\"\");\n+                t.sendResponseHeaders(401,0);\n+            };\n+\n+            httpTestServer.addHandler(httpTestHandler, \"\/\");\n+            httpTestServer.start();\n+            try (\n+                HttpClient client = HttpClient.newBuilder()\n+                        .authenticator(new Authenticator() {\n+                            @Override\n+                            protected PasswordAuthentication getPasswordAuthentication() {\n+                                requestCount.incrementAndGet();\n+                                return new PasswordAuthentication(\"username\", \"password\".toCharArray());\n+                            }\n+                        })\n+                        .build()) {\n+\n+                HttpRequest request = HttpRequest.newBuilder()\n+                        .GET()\n+                        .uri(new URI(\"http:\/\/\" + httpTestServer.serverAuthority() + \"\/\" + this.getClass().getSimpleName() + \"\/\"))\n+                        .build();\n+                throw assertThrows(IOException.class, () -> client.send(request, HttpResponse.BodyHandlers.discarding()));\n+            } catch (Exception e) {\n+                if (RETRY_LIMIT > 0){\n+                    assertEquals(RETRY_LIMIT, requestCount.get(),\n+                            \"Expected number of request retries was \" + RETRY_LIMIT + \" but actual was \"+requestCount);\n+                }\n+                else{\n+                    requestCount.decrementAndGet();\n+                    assertEquals(0, requestCount.get(),\n+                            \"Expected number of request retries was 0 but actual was \"+requestCount);\n+                }\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/httpclient\/HttpClientRetryLimitTest.java","additions":116,"deletions":0,"binary":false,"changes":116,"status":"added"}]}