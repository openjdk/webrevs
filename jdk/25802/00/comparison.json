{"files":[{"patch":"@@ -36,0 +36,1 @@\n+import java.security.SecureRandom;\n@@ -62,0 +63,1 @@\n+    private static final String DOM_SIGNATURE_RANDOM = \"org.jcp.xml.dsig.internal.dom.SecureRandom\";\n@@ -327,1 +329,6 @@\n-        signature.initSign((PrivateKey)key);\n+        SecureRandom sr = (SecureRandom)context.getProperty(DOM_SIGNATURE_RANDOM);\n+        if (sr != null) {\n+            signature.initSign((PrivateKey) key, sr);\n+        } else {\n+            signature.initSign((PrivateKey) key);\n+        }\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMRSAPSSSignatureMethod.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import java.security.SecureRandom;\n@@ -67,0 +68,1 @@\n+    private static final String DOM_SIGNATURE_RANDOM = \"org.jcp.xml.dsig.internal.dom.SecureRandom\";\n@@ -393,1 +395,6 @@\n-        signature.initSign((PrivateKey)key);\n+        SecureRandom sr = (SecureRandom)context.getProperty(DOM_SIGNATURE_RANDOM);\n+        if (sr != null) {\n+            signature.initSign((PrivateKey) key, sr);\n+        } else {\n+            signature.initSign((PrivateKey) key);\n+        }\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMSignatureMethod.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,101 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.security.SeededSecureRandom;\n+import jdk.test.lib.security.XMLUtils;\n+import org.w3c.dom.Document;\n+\n+import javax.xml.crypto.dsig.XMLSignatureException;\n+import java.security.KeyPairGenerator;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.Security;\n+import java.util.Base64;\n+import java.util.logging.*;\n+\n+\/**\n+ * @test\n+ * @bug 8359395\n+ * @summary ensure properties are used\n+ * @library \/test\/lib\n+ *\/\n+public class Properties {\n+\n+    private static final String DOM_SIGNATURE_PROVIDER\n+            = \"org.jcp.xml.dsig.internal.dom.SignatureProvider\";\n+    private static final String DOM_SIGNATURE_RANDOM\n+            = \"org.jcp.xml.dsig.internal.dom.SecureRandom\";\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ Do not test on RSA. It's always deterministic.\n+        test(\"EC\");\n+        test(\"RSASSA-PSS\");\n+    }\n+\n+    static void test(String alg) throws Exception {\n+        var kp = KeyPairGenerator.getInstance(alg).generateKeyPair();\n+        var signer = XMLUtils.signer(kp.getPrivate(), kp.getPublic());\n+\n+        var n1 = getSignature(signer.sign(\"hello\")); \/\/ random one\n+        var n2 = getSignature(signer.sign(\"hello\")); \/\/ another random one\n+\n+        signer.prop(DOM_SIGNATURE_RANDOM, new SeededSecureRandom(1L));\n+        var s1 = getSignature(signer.sign(\"hello\")); \/\/ deterministic one\n+\n+        signer.prop(DOM_SIGNATURE_RANDOM, new SeededSecureRandom(1L));\n+        var s1again = getSignature(signer.sign(\"hello\")); \/\/ deterministic one repeated\n+\n+        signer.prop(DOM_SIGNATURE_RANDOM, new SeededSecureRandom(2L));\n+        var s2 = getSignature(signer.sign(\"hello\")); \/\/ deterministic two\n+\n+        Asserts.assertEqualsByteArray(s1, s1again);\n+        assertsAllDifferent(n1, n2, s1, s2);\n+\n+        signer.prop(DOM_SIGNATURE_PROVIDER, Security.getProvider(\"SunJCE\"));\n+        \/\/ Asserts throwing XMLSignatureException with cause NoSuchAlgorithmException\n+        Asserts.assertEquals(\n+                Asserts.assertThrows(XMLSignatureException.class,\n+                        () -> signer.sign(\"hello\")).getCause().getClass(),\n+                NoSuchAlgorithmException.class);\n+    }\n+\n+    private static void assertsAllDifferent(byte[]... inputs) {\n+        for (var a : inputs) {\n+            for (var b : inputs) {\n+                if (a != b) {\n+                    Asserts.assertNotEqualsByteArray(a, b);\n+                }\n+            }\n+        }\n+    }\n+\n+    static byte[] getSignature(Document doc) {\n+        for (var n = doc.getDocumentElement().getFirstChild();\n+                n != null; n = n.getNextSibling()) {\n+            if (\"SignatureValue\".equals(n.getLocalName())) {\n+                return Base64.getMimeDecoder().decode(n.getTextContent());\n+            }\n+        }\n+        throw new IllegalArgumentException(\"Not found\");\n+    }\n+}\n","filename":"test\/jdk\/javax\/xml\/crypto\/dsig\/Properties.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"}]}