{"files":[{"patch":"@@ -0,0 +1,438 @@\n+\/*\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4327618 4327623 4327639 4327654 4327664 4327666 4327676 4327679 4507822\n+ * @summary Tests that MouseDragged and MouseReleased are triggered by Button,\n+ * Checkbox, Choice, Label, List, Scrollbar, TextArea, TextField\n+ * for Left, Middle and Right mouse buttons\n+ * @key headful\n+ * @library \/lib\/client \/java\/awt\/regtesthelpers\n+ * @build ExtendedRobot Util\n+ * @run main\/othervm -Dsun.java2d.uiScale=1 DragMouseEventTest\n+*\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Checkbox;\n+import java.awt.Choice;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Label;\n+import java.awt.List;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Scrollbar;\n+import java.awt.TextArea;\n+import java.awt.TextField;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.ItemEvent;\n+import java.awt.event.ItemListener;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.util.Arrays;\n+\n+import test.java.awt.regtesthelpers.Util;\n+\n+public class DragMouseEventTest {\n+    private static ExtendedRobot robot;\n+    private static DragMouseEventFrame dmef;\n+    private static final int DELAY = 200;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            EventQueue.invokeAndWait(DragMouseEventTest::createAndShowGUI);\n+            test();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (dmef != null) {\n+                    dmef.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void createAndShowGUI() {\n+        dmef = new DragMouseEventFrame();\n+        dmef.setVisible(true);\n+    }\n+\n+    private static void test() throws Exception {\n+        robot = new ExtendedRobot();\n+        robot.waitForIdle();\n+        robot.delay(500);\n+\n+        testComponent(dmef.scrollbar);\n+        testComponent(dmef.choice);\n+        testComponent(dmef.textarea);\n+        testComponent(dmef.textfield);\n+        testComponent(dmef.checkbox);\n+        testComponent(dmef.label);\n+        testComponent(dmef.list);\n+        testComponent(dmef.button);\n+    }\n+\n+    private static void testComponent(Component component) throws Exception {\n+        Rectangle componentBounds = Util.invokeOnEDT(() -> {\n+            Point locationOnScreen = component.getLocationOnScreen();\n+            Dimension size = component.getSize();\n+            return new Rectangle(locationOnScreen, size);\n+        });\n+\n+        Rectangle frameBounds = Util.invokeOnEDT(() -> dmef.getBounds());\n+\n+        Point start = new Point(componentBounds.x + 10, componentBounds.y + 10);\n+\n+        Adapter adapter = getAdapterFromComponent(component);\n+\n+        testItemStateChanged(component, adapter, start, componentBounds);\n+        testActionListener(component, adapter, start);\n+\n+        Point mid = getEndPoint(start, frameBounds, 3);\n+        Point end = getEndPoint(start, frameBounds, 15);\n+\n+        testButtonDrag(component, adapter, MouseEvent.BUTTON1_DOWN_MASK, start, mid, end);\n+        testButtonDrag(component, adapter, MouseEvent.BUTTON2_DOWN_MASK, start, mid, end);\n+        testButtonDrag(component, adapter, MouseEvent.BUTTON3_DOWN_MASK, start, mid, end);\n+    }\n+\n+    private static Adapter getAdapterFromComponent(Component component) {\n+        return (Adapter) Arrays\n+                .stream(component.getMouseListeners())\n+                .filter((m) -> m instanceof Adapter)\n+                .findFirst()\n+                .orElseThrow();\n+    }\n+\n+    private static void testItemStateChanged(Component component,\n+                                             Adapter adapter,\n+                                             Point start,\n+                                             Rectangle componentBounds) {\n+        if (!(component instanceof Choice\n+                || component instanceof Checkbox\n+                || component instanceof List)) {\n+            return;\n+        }\n+\n+        System.out.println(\"\\ntestItemStateChanged \" + component);\n+\n+        adapter.reset();\n+        robot.mouseMove(start.x, start.y);\n+        robot.waitForIdle();\n+        robot.click();\n+\n+        if (component instanceof Choice) {\n+            robot.mouseMove(start.x, componentBounds.y + componentBounds.height + 25);\n+            robot.waitForIdle();\n+            robot.click();\n+        }\n+\n+        robot.waitForIdle();\n+\n+        if (!adapter.itemStateChangedReceived) {\n+            throw new RuntimeException(\"itemStateChanged was not received for \" + component);\n+        }\n+    }\n+\n+    private static void testActionListener(Component component,\n+                                           Adapter adapter,\n+                                           Point start) {\n+        if (!(component instanceof Button || component instanceof List)) {\n+            \/\/ skip for not applicable components\n+            return;\n+        }\n+\n+        System.out.println(\"\\ntestActionListener \" + component);\n+        adapter.reset();\n+\n+        robot.mouseMove(start.x, start.y);\n+        robot.waitForIdle();\n+\n+        if (component instanceof List) {\n+            robot.mousePress(MouseEvent.BUTTON1_DOWN_MASK);\n+            robot.delay(25);\n+            robot.mouseRelease(MouseEvent.BUTTON1_DOWN_MASK);\n+            robot.delay(25);\n+            robot.mousePress(MouseEvent.BUTTON1_DOWN_MASK);\n+            robot.delay(25);\n+            robot.mouseRelease(MouseEvent.BUTTON1_DOWN_MASK);\n+            robot.waitForIdle();\n+            robot.delay(DELAY);\n+        } else {\n+            robot.click();\n+        }\n+\n+        robot.waitForIdle();\n+        robot.delay(DELAY);\n+\n+        if (!adapter.actionPerformedReceived) {\n+            throw new RuntimeException(\"actionPerformed was not received for \" + component);\n+        }\n+    }\n+\n+    private static String getButtonName(int button) {\n+        return switch (button) {\n+            case MouseEvent.BUTTON1_DOWN_MASK -> \"BUTTON1\";\n+            case MouseEvent.BUTTON2_DOWN_MASK -> \"BUTTON2\";\n+            case MouseEvent.BUTTON3_DOWN_MASK -> \"BUTTON3\";\n+            default -> throw new IllegalStateException(\"Unexpected value: \" + button);\n+        };\n+    }\n+\n+    private static void testButtonDrag(Component component,\n+                                      Adapter adapter,\n+                                      int button,\n+                                      Point start, Point mid, Point end) {\n+        String buttonName = getButtonName(button);\n+        System.out.printf(\"\\n> testButtonDrag: %s on %s\\n\",\n+                buttonName, component);\n+\n+        robot.mouseMove(start.x, start.y);\n+        robot.waitForIdle();\n+\n+        robot.mousePress(button);\n+        robot.waitForIdle();\n+\n+        System.out.printf(\"> gliding from (%d,%d) to (%d,%d)\\n\",\n+                start.x, start.y, mid.x, mid.y);\n+        robot.glide(start, mid);\n+        robot.waitForIdle();\n+        robot.delay(DELAY);\n+\n+\n+        \/\/ Catch events only after we leave the frame boundaries\n+        adapter.reset();\n+\n+        System.out.printf(\"> gliding after crossing the border (%d,%d) to (%d,%d)\\n\",\n+                mid.x, mid.y, end.x, end.y);\n+        robot.glide(mid, end);\n+\n+        robot.mouseRelease(button);\n+        robot.waitForIdle();\n+        robot.delay(DELAY);\n+        System.out.printf(\"> %s released\\n\", buttonName);\n+\n+        boolean mouseDraggedReceived = adapter.mouseDraggedReceived;\n+        boolean mouseReleasedReceived = adapter.mouseReleasedReceived;\n+\n+        if (component instanceof Choice) {\n+            \/\/ Close the popup if it is still open\n+            robot.keyPress(KeyEvent.VK_ESCAPE);\n+            robot.delay(25);\n+            robot.keyRelease(KeyEvent.VK_ESCAPE);\n+            robot.waitForIdle();\n+            robot.delay(DELAY);\n+        }\n+\n+\n+        if (!mouseDraggedReceived || !mouseReleasedReceived) {\n+            throw new RuntimeException((\"%d: Mouse drag or release was not received\\n\" +\n+                    \"mouseDraggedReceived %b mouseReleasedReceived %b\")\n+                    .formatted(button, mouseDraggedReceived, mouseReleasedReceived));\n+        }\n+    }\n+\n+    \/*\n+     * returns the closest border point with a specified offset\n+     *\/\n+    private  static Point getEndPoint(Point start, Rectangle bounds, int offset) {\n+        int left = bounds.x;\n+        int right = bounds.x + bounds.width;\n+        int top = bounds.y;\n+        int bottom = bounds.y + bounds.height;\n+\n+        int distanceLeft = start.x - left;\n+        int distanceRight = right - start.x;\n+        int distanceTop = start.y - top;\n+        int distanceBottom = bottom - start.y;\n+\n+        int minDistance = Math.min(\n+                Math.min(distanceLeft, distanceRight),\n+                Math.min(distanceTop, distanceBottom)\n+        );\n+\n+        if (minDistance == distanceLeft) {\n+            return new Point(left - offset, start.y);\n+        } else if (minDistance == distanceRight) {\n+            return new Point(right + offset, start.y);\n+        } else if (minDistance == distanceTop) {\n+            return new Point(start.x, top - offset);\n+        } else {\n+            return new Point(start.x, bottom + offset);\n+        }\n+    }\n+\n+    private static class DragMouseEventFrame extends Frame {\n+        TextArea textarea = new TextArea(\"TextArea\", 20, 30);\n+        Label label = new Label(\"Label\");\n+        Panel panel = new Panel();\n+        List list = new List();\n+        Choice choice = new Choice();\n+        Button button = new Button(\"Button\");\n+        TextField textfield = new TextField(\"TextField\");\n+        Checkbox checkbox = new Checkbox(\"CheckBox\");\n+        Scrollbar scrollbar = new Scrollbar();\n+        Panel centerPanel = new Panel();\n+\n+        public DragMouseEventFrame() {\n+            setTitle(\"DragMouseEventTest\");\n+\n+            add(centerPanel, BorderLayout.CENTER);\n+            centerPanel.setLayout(new FlowLayout());\n+\n+            add(panel, BorderLayout.NORTH);\n+            panel.setLayout(new FlowLayout());\n+\n+            choice.add(\"choice item 1\");\n+            choice.add(\"choice item 2\");\n+            choice.add(\"choice item 3\");\n+            panel.add(choice);\n+\n+            Adapter adapter = new Adapter();\n+            choice.addMouseMotionListener(adapter);\n+            choice.addMouseListener(adapter);\n+            choice.addItemListener(adapter);\n+\n+            adapter = new Adapter();\n+            panel.add(label);\n+            label.addMouseMotionListener(adapter);\n+            label.addMouseListener(adapter);\n+\n+            adapter = new Adapter();\n+            panel.add(button);\n+            button.addMouseMotionListener(adapter);\n+            button.addMouseListener(adapter);\n+            button.addActionListener(adapter);\n+\n+            adapter = new Adapter();\n+            panel.add(checkbox);\n+            checkbox.addMouseMotionListener(adapter);\n+            checkbox.addMouseListener(adapter);\n+            checkbox.addItemListener(adapter);\n+\n+            adapter = new Adapter();\n+            panel.add(textfield, BorderLayout.EAST);\n+            textfield.addMouseMotionListener(adapter);\n+            textfield.addMouseListener(adapter);\n+            textfield.addActionListener(adapter);\n+\n+            adapter = new Adapter();\n+            add(textarea, BorderLayout.EAST);\n+            textarea.addMouseMotionListener(adapter);\n+            textarea.addMouseListener(adapter);\n+\n+            adapter = new Adapter();\n+            list.add(\"list item 1\");\n+            list.add(\"list item 2\");\n+            add(list, BorderLayout.SOUTH);\n+            list.addMouseMotionListener(adapter);\n+            list.addMouseListener(adapter);\n+            list.addActionListener(adapter);\n+            list.addItemListener(adapter);\n+\n+            adapter = new Adapter();\n+            add(scrollbar, BorderLayout.WEST);\n+            scrollbar.addMouseMotionListener(adapter);\n+            scrollbar.addMouseListener(adapter);\n+\n+            setSize(500, 400);\n+            setLocationRelativeTo(null);\n+            addWindowListener(new WindowAdapter() {\n+                @Override\n+                public void windowClosing(WindowEvent e) {\n+                    DragMouseEventFrame.this.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static class Adapter extends MouseAdapter\n+            implements ActionListener, ItemListener {\n+\n+        public volatile boolean mouseDraggedReceived = false;\n+        public volatile boolean mouseReleasedReceived = false;\n+        public volatile boolean itemStateChangedReceived = false;\n+        public volatile boolean actionPerformedReceived = false;\n+\n+\n+        public void mouseDragged(MouseEvent me) {\n+            mouseDraggedReceived = true;\n+            System.out.println(me.paramString());\n+        }\n+\n+        private void consumeIfNeeded(MouseEvent me) {\n+            Component c = me.getComponent();\n+            \/\/ do not show popup menu for the following components,\n+            \/\/ as it may interfere with the testing.\n+            if (c instanceof TextArea\n+                || c instanceof TextField\n+                || c instanceof Scrollbar) {\n+                if (me.isPopupTrigger()) {\n+                    System.out.println(\"CONSUMED: \" + me);\n+                    me.consume();\n+                }\n+            }\n+        }\n+\n+        public void mouseReleased(MouseEvent me) {\n+            consumeIfNeeded(me);\n+            mouseReleasedReceived = true;\n+            System.out.println(me.paramString());\n+        }\n+\n+        public void mousePressed(MouseEvent me) {\n+            consumeIfNeeded(me);\n+            System.out.println(me.paramString());\n+        }\n+\n+        public void mouseClicked(MouseEvent me) {\n+            System.out.println(me.paramString());\n+        }\n+\n+        public void actionPerformed(ActionEvent e) {\n+            actionPerformedReceived = true;\n+            System.out.println(e.paramString());\n+        }\n+\n+        public void itemStateChanged(ItemEvent e) {\n+            itemStateChangedReceived = true;\n+            System.out.println(e.paramString());\n+        }\n+\n+        public void reset() {\n+            mouseDraggedReceived = false;\n+            mouseReleasedReceived = false;\n+            itemStateChangedReceived = false;\n+            actionPerformedReceived = false;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/MouseEvent\/DragMouseEventTest.java","additions":438,"deletions":0,"binary":false,"changes":438,"status":"added"},{"patch":"@@ -0,0 +1,307 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4017222\n+ * @summary Checks whether mouse events are reported correctly during drag.\n+ * @author Stuart Lawrence, Brent Christian: area=event\n+ * @key headful\n+ * @library \/lib\/client \/java\/awt\/regtesthelpers\n+ * @build ExtendedRobot Util\n+ * @run main MouseEventsDuringDrag\n+ *\/\n+\n+\n+\/*\n+ * MouseEventsDuringDrag.java\n+ *\n+ * summary:\n+ * On Solaris drag enter\/exit events are only reported for the\n+ * component where drag started, they're not reported on other\n+ * components. On Win32 enter\/exit events are reported correctly.\n+ *\/\n+\n+import test.java.awt.regtesthelpers.Util;\n+\n+import java.awt.Canvas;\n+import java.awt.Choice;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.GridBagConstraints;\n+import java.awt.GridBagLayout;\n+import java.awt.Insets;\n+import java.awt.Label;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.event.InputEvent;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+public class MouseEventsDuringDrag {\n+\n+    private static ExtendedRobot robot;\n+    private static Frame frame;\n+\n+    private static final MouseHandler mouseHandler = new MouseHandler();\n+\n+    static Label lab;\n+    static Canvas c1, c2;\n+    static Choice choice;\n+\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            EventQueue.invokeAndWait(MouseEventsDuringDrag::createAndShowGUI);\n+            test();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void test() throws Exception {\n+        robot = new ExtendedRobot();\n+        robot.waitForIdle();\n+        robot.delay(500);\n+\n+        \/\/ Part 1: Press and hold down the mouse button inside the red box.\n+        \/\/ Drag the mouse over to the blue box (whilst still holding down\n+        \/\/ the mouse button).\n+        \/\/ Whilst dragging the mouse from the red box, enter and exit\n+        \/\/ events should be reported for the blue box.\n+        testcase(c2, \"c1 to c2\");\n+\n+        \/\/ Part 2: Again, press and hold down the mouse button inside the red box.\n+        \/\/ This time drag the mouse over to the Choice menu.\n+        \/\/ Enter and exit events should be reported for the Choice menu.\n+        testcase(choice, \"c1 to choice\");\n+    }\n+\n+    private static void testcase(Component moveTo, String message) throws Exception {\n+        System.out.println(\"\\ntestcase: \" + message);\n+        Rectangle c1bounds = getBounds(c1);\n+        Rectangle moveToBound = getBounds(moveTo);\n+\n+        Point startDragLocation =\n+                new Point(c1bounds.x + c1bounds.width - 10,\n+                        c1bounds.y + c1bounds.height \/ 2);\n+\n+        Point endDragLocation =\n+                new Point(moveToBound.x + 10, moveToBound.y + moveToBound.height \/ 2);\n+\n+        robot.mouseMove(startDragLocation);\n+        robot.waitForIdle();\n+        robot.delay(200);\n+        mouseHandler.reset();\n+\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.waitForIdle();\n+\n+        robot.glide(startDragLocation, endDragLocation);\n+        robot.waitForIdle();\n+\n+        robot.glide(endDragLocation.x, endDragLocation.y, endDragLocation.x - 20, endDragLocation.y);\n+\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+        robot.waitForIdle();\n+        robot.delay(200);\n+\n+        List<EventRecord> actual = mouseHandler.getRecordedEvents();\n+\n+        List<EventRecord> expected = List.of(\n+                new EventRecord(MouseEvent.MOUSE_PRESSED, c1),\n+                new EventRecord(MouseEvent.MOUSE_EXITED, c1),\n+                new EventRecord(MouseEvent.MOUSE_ENTERED, moveTo),\n+                new EventRecord(MouseEvent.MOUSE_EXITED, moveTo),\n+                new EventRecord(MouseEvent.MOUSE_RELEASED, c1)\n+        );\n+\n+        System.out.println(\"Expected:\\n\" + expected);\n+        System.out.println(\"Actual:\\n\" + actual);\n+        if (!actual.equals(expected)) {\n+            throw new RuntimeException(\"Mismatch between expected and actual events\\n%s\\n%s\"\n+                    .formatted(expected, actual));\n+        }\n+    }\n+\n+    private static Rectangle getBounds(Component c) throws Exception {\n+        return Util.invokeOnEDT(() -> {\n+            Point locationOnScreen = c.getLocationOnScreen();\n+            Dimension size = c.getSize();\n+            return new Rectangle(locationOnScreen.x, locationOnScreen.y, size.width, size.height);\n+        });\n+    }\n+\n+    private static void createAndShowGUI() {\n+        frame = new Frame();\n+        MouseHandler mouseHandler = new MouseHandler();\n+        frame.setLayout(new GridBagLayout());\n+\n+        int canvasSize = 100;\n+        c1 = new Canvas();\n+        c1.setPreferredSize(new Dimension(canvasSize, canvasSize));\n+        c1.setBackground(Color.red);\n+        c1.addMouseListener(mouseHandler);\n+\n+        c2 = new Canvas();\n+        c2.setPreferredSize(new Dimension(canvasSize, canvasSize));\n+        c2.setBackground(Color.blue);\n+        c2.addMouseListener(mouseHandler);\n+\n+        GridBagConstraints gbc = new GridBagConstraints();\n+        gbc.fill = GridBagConstraints.HORIZONTAL;\n+        gbc.insets = new Insets(5, 5, 5, 5);\n+\n+        gbc.gridx = 0;\n+        gbc.gridy = 0;\n+        frame.add(c1, gbc);\n+\n+        gbc.gridx = 2;\n+        frame.add(c2, gbc);\n+\n+        Panel p1 = new Panel();\n+        p1.setLayout(new FlowLayout());\n+        choice = new Choice();\n+        choice.addItem(\"Choice\");\n+        choice.addItem(\"One\");\n+        choice.addItem(\"Two\");\n+        choice.addMouseListener(mouseHandler);\n+        p1.add(choice);\n+\n+        gbc.gridx = 1;\n+        gbc.gridy = 1;\n+        frame.add(p1, gbc);\n+\n+        lab = new Label();\n+\n+        gbc.gridx = 0;\n+        gbc.gridy = 2;\n+        gbc.gridwidth = 3;\n+        frame.add(lab, gbc);\n+\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+\n+        frame.setVisible(true);\n+    }\n+\n+    record EventRecord(int eventId, Component component) {\n+\n+        @Override\n+        public String toString() {\n+            StringBuilder str = new StringBuilder(80);\n+            switch(eventId) {\n+                case MouseEvent.MOUSE_PRESSED:\n+                    str.append(\"MOUSE_PRESSED\");\n+                    break;\n+                case MouseEvent.MOUSE_RELEASED:\n+                    str.append(\"MOUSE_RELEASED\");\n+                    break;\n+                case MouseEvent.MOUSE_CLICKED:\n+                    str.append(\"MOUSE_CLICKED\");\n+                    break;\n+                case MouseEvent.MOUSE_ENTERED:\n+                    str.append(\"MOUSE_ENTERED\");\n+                    break;\n+                case MouseEvent.MOUSE_EXITED:\n+                    str.append(\"MOUSE_EXITED\");\n+                    break;\n+                case MouseEvent.MOUSE_MOVED:\n+                    str.append(\"MOUSE_MOVED\");\n+                    break;\n+                case MouseEvent.MOUSE_DRAGGED:\n+                    str.append(\"MOUSE_DRAGGED\");\n+                    break;\n+                case MouseEvent.MOUSE_WHEEL:\n+                    str.append(\"MOUSE_WHEEL\");\n+                    break;\n+                default:\n+                    str.append(\"unknown type\");\n+            }\n+            return str.append(\" \").append(component).toString();\n+        }\n+    }\n+\n+    static class MouseHandler extends MouseAdapter {\n+        static final List<EventRecord> list = new CopyOnWriteArrayList<>();\n+\n+        public void mousePressed(MouseEvent e) {\n+            list.add(new EventRecord(e.getID(), e.getComponent()));\n+            if (e.getSource() == c1) {\n+                lab.setText(\"Mouse pressed in red box\");\n+            } else if (e.getSource() == c2) {\n+                lab.setText(\"Mouse pressed in blue box\");\n+            } else if (e.getSource() == choice) {\n+                lab.setText(\"Mouse pressed in choice\");\n+            }\n+        }\n+\n+        public void mouseReleased(MouseEvent e) {\n+            list.add(new EventRecord(e.getID(), e.getComponent()));\n+            lab.setText(\"Mouse released\");\n+        }\n+\n+        public void mouseEntered(MouseEvent e) {\n+            list.add(new EventRecord(e.getID(), e.getComponent()));\n+            if (e.getSource() == c1) {\n+                lab.setText(\"Mouse entered red box\");\n+            } else if (e.getSource() == c2) {\n+                lab.setText(\"Mouse entered blue box\");\n+            } else if (e.getSource() == choice) {\n+                lab.setText(\"Mouse entered choice\");\n+            }\n+        }\n+\n+        public void mouseExited(MouseEvent e) {\n+            list.add(new EventRecord(e.getID(), e.getComponent()));\n+            if (e.getSource() == c1) {\n+                lab.setText(\"Mouse exited red box\");\n+            } else if (e.getSource() == c2) {\n+                lab.setText(\"Mouse exited blue box\");\n+            } else if (e.getSource() == choice) {\n+                lab.setText(\"Mouse exited choice\");\n+            }\n+        }\n+\n+        public void reset() {\n+            list.clear();\n+        }\n+\n+        public List<EventRecord> getRecordedEvents() {\n+            return new ArrayList<>(list);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/MouseEvent\/MouseEventsDuringDrag.java","additions":307,"deletions":0,"binary":false,"changes":307,"status":"added"},{"patch":"@@ -0,0 +1,181 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4117523\n+ * @summary Solaris: MousePressed event has modifier=0 when left button is pressed\n+ * @key headful\n+ * @library \/javax\/swing\/regtesthelpers \/test\/lib\n+ * @build Util jdk.test.lib.Platform\n+ * @run main MouseModifierTest\n+*\/\n+\n+\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+\n+import jdk.test.lib.Platform;\n+\n+public class MouseModifierTest {\n+    private static Frame frame;\n+    private static volatile MouseEvent lastMousePressedEvent = null;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            EventQueue.invokeAndWait(MouseModifierTest::createAndShowGUI);\n+            test();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void test() throws Exception {\n+        Robot robot = new Robot();\n+        robot.waitForIdle();\n+        robot.delay(500);\n+\n+        Point centerPoint = Util.getCenterPoint(frame);\n+\n+        System.out.println(\"MOUSE1 press case\");\n+\n+        robot.mouseMove(centerPoint.x, centerPoint.y);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.delay(25);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.waitForIdle();\n+        robot.delay(300);\n+\n+        if (lastMousePressedEvent == null\n+                || lastMousePressedEvent.getModifiers() != InputEvent.BUTTON1_MASK) {\n+            throw new RuntimeException(\"Test failed\");\n+        }\n+\n+        if (Platform.isWindows()) {\n+            System.out.println(\"Windows: Testing ALT + MOUSE1 press case\");\n+            lastMousePressedEvent = null;\n+            robot.waitForIdle();\n+            robot.delay(300);\n+\n+            robot.keyPress(KeyEvent.VK_ALT);\n+            robot.delay(25);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.delay(25);\n+            robot.keyRelease(KeyEvent.VK_ALT);\n+            robot.delay(25);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.waitForIdle();\n+            robot.delay(300);\n+\n+            int expectedModifiers  = InputEvent.BUTTON1_MASK\n+                    | InputEvent.BUTTON2_MASK\n+                    | InputEvent.ALT_MASK;\n+            if (lastMousePressedEvent == null\n+                    || lastMousePressedEvent.getModifiers() != expectedModifiers) {\n+                throw new RuntimeException(\"Test failed\");\n+            }\n+        }\n+    }\n+\n+    private static void createAndShowGUI() {\n+        frame = new Frame(\"MouseModifierTest\");\n+        frame.setSize(300, 300);\n+        frame.setLocationRelativeTo(null);\n+        frame.addMouseListener(new MouseHandler());\n+        frame.setVisible(true);\n+    }\n+\n+    private static class MouseHandler extends MouseAdapter {\n+        public void mouseClicked(MouseEvent e) {\n+            System.out.println(\"\\nmouseClicked:\");\n+            printMouseEventDetail(e);\n+        }\n+\n+        public void mousePressed(MouseEvent e) {\n+            lastMousePressedEvent = e;\n+            System.out.println(\"\\nmousePressed:\");\n+            printMouseEventDetail(e);\n+        }\n+\n+        public void mouseReleased(MouseEvent e) {\n+            System.out.println(\"\\nmouseReleased:\");\n+            printMouseEventDetail(e);\n+        }\n+\n+        public void mouseEntered(MouseEvent e) {\n+            System.out.println(\"\\nmouseEntered:\");\n+            printMouseEventDetail(e);\n+        }\n+\n+        public void mouseExited(MouseEvent e) {\n+            System.out.println(\"\\nmouseExited:\");\n+            printMouseEventDetail(e);\n+        }\n+\n+        private void printMouseEventDetail(MouseEvent e) {\n+            System.out.println(e.toString());\n+            System.out.println(\"Modifiers: \");\n+            printModifiers(e);\n+        }\n+\n+        private void printModifiers(MouseEvent e) {\n+            if (e == null) {\n+                return;\n+            }\n+\n+            int mod = e.getModifiers();\n+\n+            if ((mod & InputEvent.ALT_MASK) != 0) {\n+                System.out.println(\"\\tALT_MASK\");\n+            }\n+            if ((mod & InputEvent.BUTTON1_MASK) != 0) {\n+                System.out.println(\"\\tBUTTON1_MASK\");\n+            }\n+            if ((mod & InputEvent.BUTTON2_MASK) != 0) {\n+                System.out.println(\"\\tBUTTON2_MASK\");\n+            }\n+            if ((mod & InputEvent.BUTTON3_MASK) != 0) {\n+                System.out.println(\"\\tBUTTON3_MASK\");\n+            }\n+            if ((mod & InputEvent.CTRL_MASK) != 0) {\n+                System.out.println(\"\\tCTRL_MASK\");\n+            }\n+            if ((mod & InputEvent.META_MASK) != 0) {\n+                System.out.println(\"\\tMETA_MASK\");\n+            }\n+            if ((mod & InputEvent.SHIFT_MASK) != 0) {\n+                System.out.println(\"\\tSHIFT_MASK\");\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/MouseEvent\/MouseModifierTest.java","additions":181,"deletions":0,"binary":false,"changes":181,"status":"added"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4037521\n+ * @summary Mouse Right button does not send mouseClick action\n+ * @key headful\n+ * @library \/javax\/swing\/regtesthelpers\n+ * @build Util\n+ * @run main MouseRButTest\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+public class MouseRButTest {\n+    private static Frame frame;\n+    private static Button button;\n+    private static final CountDownLatch latch = new CountDownLatch(1);\n+\n+    public static void main(String[] args) throws Exception {\n+        Robot robot = new Robot();\n+        try {\n+            EventQueue.invokeAndWait(MouseRButTest::createAndShowGUI);\n+\n+            robot.waitForIdle();\n+            robot.delay(500);\n+\n+            Point point = Util.getCenterPoint(button);\n+            robot.mouseMove(point.x, point.y);\n+            robot.waitForIdle();\n+            robot.mousePress(InputEvent.BUTTON3_DOWN_MASK);\n+            robot.delay(50);\n+            robot.mouseRelease(InputEvent.BUTTON3_DOWN_MASK);\n+\n+            if (!latch.await(2, TimeUnit.SECONDS)) {\n+                throw new RuntimeException(\"mouse click action was not sent\");\n+            }\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void createAndShowGUI() {\n+        button = new Button(\"Click Me\");\n+        button.addMouseListener(new MouseAdapter() {\n+            public void mouseClicked(MouseEvent e) {\n+                System.out.println(e);\n+                if (e.getModifiers() == e.BUTTON3_MASK) {\n+                    System.out.println(\"right mouse button clicked\");\n+                    latch.countDown();\n+                }\n+            }\n+        });\n+\n+        frame = new Frame();\n+        frame.setLayout(new FlowLayout());\n+        frame.add(button);\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/MouseEvent\/MouseRButTest.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Frame;\n+import java.awt.Window;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+\n+\/*\n+ * @test\n+ * @bug 4074498\n+ * @summary Test: MOUSE_PRESSED events in the title bar of a frame\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual TitleBarGetsMousePressed\n+ *\/\n+public class TitleBarGetsMousePressed {\n+    private static final String INSTRUCTIONS = \"\"\"\n+    1. You will see a Frame window next to this window with instructions\n+    2. Clicking in the title bar of the Frame and even moving around the Frame\n+       should not generate MOUSE_PRESSED \/ MOUSE_RELEASED \/ MOUSE_CLICKED events.\n+       (printed below in the log area).\n+    \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"TitleBarGetsMousePressed Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(45)\n+                .testUI(TitleBarGetsMousePressed::createTestUI)\n+                .logArea(5)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static Window createTestUI() {\n+        Frame frame = new Frame(\"TitleBarGetsMousePressed\");\n+        frame.setSize(300, 200);\n+        frame.addMouseListener(new MouseAdapter() {\n+            public void mouseClicked(MouseEvent ev) {\n+                PassFailJFrame.log(\"mouseClicked at x:\" + ev.getX() +\n+                        \" y:\" + ev.getY());\n+            }\n+\n+            public void mousePressed(MouseEvent ev) {\n+                PassFailJFrame.log(\"mousePressed at x:\" + ev.getX() +\n+                        \" y:\" + ev.getY());\n+            }\n+\n+            public void mouseReleased(MouseEvent ev) {\n+                PassFailJFrame.log(\"mouseReleased at x:\" + ev.getX() +\n+                        \" y:\" + ev.getY());\n+            }\n+        });\n+\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/MouseEvent\/TitleBarGetsMousePressed.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"}]}