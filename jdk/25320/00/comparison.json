{"files":[{"patch":"@@ -843,1 +843,1 @@\n-bool G1CollectedHeap::do_full_collection(bool clear_all_soft_refs,\n+void G1CollectedHeap::do_full_collection(bool clear_all_soft_refs,\n@@ -857,3 +857,0 @@\n-\n-  \/\/ Full collection was successfully completed.\n-  return true;\n@@ -871,1 +868,1 @@\n-bool G1CollectedHeap::upgrade_to_full_collection() {\n+void G1CollectedHeap::upgrade_to_full_collection() {\n@@ -874,6 +871,2 @@\n-  bool success = do_full_collection(true  \/* clear_all_soft_refs *\/,\n-                                    false \/* do_maximal_compaction *\/);\n-  \/\/ do_full_collection only fails if blocked by GC locker and that can't\n-  \/\/ be the case here since we only call this when already completed one gc.\n-  assert(success, \"invariant\");\n-  return success;\n+  do_full_collection(true  \/* clear_all_soft_refs *\/,\n+                     false \/* do_maximal_compaction *\/);\n@@ -900,3 +893,1 @@\n-                                                            bool expect_null_mutator_alloc_region,\n-                                                            bool* gc_succeeded) {\n-  *gc_succeeded = true;\n+                                                            bool expect_null_mutator_alloc_region) {\n@@ -930,2 +921,2 @@\n-    *gc_succeeded = do_full_collection(maximal_compaction \/* clear_all_soft_refs *\/ ,\n-                                       maximal_compaction \/* do_maximal_compaction *\/);\n+    do_full_collection(maximal_compaction \/* clear_all_soft_refs *\/ ,\n+                       maximal_compaction \/* do_maximal_compaction *\/);\n@@ -937,2 +928,1 @@\n-HeapWord* G1CollectedHeap::satisfy_failed_allocation(size_t word_size,\n-                                                     bool* succeeded) {\n+HeapWord* G1CollectedHeap::satisfy_failed_allocation(size_t word_size) {\n@@ -946,2 +936,1 @@\n-                                     false, \/* expect_null_mutator_alloc_region *\/\n-                                     succeeded);\n+                                     false \/* expect_null_mutator_alloc_region *\/);\n@@ -949,1 +938,1 @@\n-  if (result != nullptr || !*succeeded) {\n+  if (result != nullptr) {\n@@ -957,2 +946,1 @@\n-                                            true, \/* expect_null_mutator_alloc_region *\/\n-                                            succeeded);\n+                                            true \/* expect_null_mutator_alloc_region *\/);\n@@ -960,1 +948,1 @@\n-  if (result != nullptr || !*succeeded) {\n+  if (result != nullptr) {\n@@ -968,2 +956,1 @@\n-                                            true,  \/* expect_null_mutator_alloc_region *\/\n-                                            succeeded);\n+                                            true  \/* expect_null_mutator_alloc_region *\/);\n@@ -2304,2 +2291,2 @@\n-  bool ret_succeeded = op.prologue_succeeded() && op.gc_succeeded();\n-  assert(result == nullptr || ret_succeeded,\n+  *succeeded = op.gc_succeeded();\n+  assert(result == nullptr || *succeeded,\n@@ -2307,1 +2294,0 @@\n-  *succeeded = ret_succeeded;\n@@ -2434,1 +2420,1 @@\n-bool G1CollectedHeap::do_collection_pause_at_safepoint() {\n+void G1CollectedHeap::do_collection_pause_at_safepoint() {\n@@ -2439,1 +2425,0 @@\n-  return true;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":16,"deletions":31,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -483,3 +483,1 @@\n-  \/\/ - it returns false if it is unable to do the collection due to the\n-  \/\/   GC locker being active, true otherwise.\n-  bool do_full_collection(bool clear_all_soft_refs,\n+  void do_full_collection(bool clear_all_soft_refs,\n@@ -492,1 +490,1 @@\n-  bool upgrade_to_full_collection();\n+  void upgrade_to_full_collection();\n@@ -497,2 +495,1 @@\n-  HeapWord* satisfy_failed_allocation(size_t word_size,\n-                                      bool* succeeded);\n+  HeapWord* satisfy_failed_allocation(size_t word_size);\n@@ -513,2 +510,1 @@\n-                                             bool expect_null_mutator_alloc_region,\n-                                             bool* gc_succeeded);\n+                                             bool expect_null_mutator_alloc_region);\n@@ -745,3 +741,1 @@\n-  \/\/ followed by a by-policy upgrade to a full collection.  Returns\n-  \/\/ false if unable to do the collection due to the GC locker being\n-  \/\/ active, true otherwise.\n+  \/\/ followed by a by-policy upgrade to a full collection.\n@@ -750,1 +744,1 @@\n-  bool do_collection_pause_at_safepoint();\n+  void do_collection_pause_at_safepoint();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -53,2 +53,2 @@\n-  _gc_succeeded = g1h->do_full_collection(false \/* clear_all_soft_refs *\/,\n-                                          false \/* do_maximal_compaction *\/);\n+  g1h->do_full_collection(false \/* clear_all_soft_refs *\/,\n+                          false \/* do_maximal_compaction *\/);\n@@ -104,2 +104,2 @@\n-    _gc_succeeded = g1h->do_collection_pause_at_safepoint();\n-    assert(_gc_succeeded, \"No reason to fail\");\n+    g1h->do_collection_pause_at_safepoint();\n+    _gc_succeeded = true;\n@@ -112,2 +112,1 @@\n-  VM_CollectForAllocation(word_size, gc_count_before, gc_cause),\n-  _gc_succeeded(false) {}\n+  VM_CollectForAllocation(word_size, gc_count_before, gc_cause) {}\n@@ -120,2 +119,1 @@\n-  _gc_succeeded = g1h->do_collection_pause_at_safepoint();\n-  assert(_gc_succeeded, \"no reason to fail\");\n+  g1h->do_collection_pause_at_safepoint();\n@@ -126,1 +124,1 @@\n-    _result = g1h->satisfy_failed_allocation(_word_size, &_gc_succeeded);\n+    _result = g1h->satisfy_failed_allocation(_word_size);\n@@ -131,1 +129,1 @@\n-    _gc_succeeded = g1h->upgrade_to_full_collection();\n+    g1h->upgrade_to_full_collection();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1VMOperations.cpp","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -55,0 +55,2 @@\n+  \/\/ The concurrent start pause may be cancelled for some reasons. Keep track of\n+  \/\/ this.\n@@ -71,1 +73,0 @@\n-  bool _gc_succeeded;\n@@ -79,1 +80,1 @@\n-  bool gc_succeeded() const { return _gc_succeeded; }\n+  bool gc_succeeded() const { return prologue_succeeded(); }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1VMOperations.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}