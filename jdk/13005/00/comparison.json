{"files":[{"patch":"@@ -1258,2 +1258,2 @@\n-    Klass* d = str.klass();\n-    InstanceKlass::cast(d)->mark_dependent_nmethods(deopt_scope, changes);\n+    InstanceKlass* d = str.klass();\n+    d->mark_dependent_nmethods(deopt_scope, changes);\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1169,1 +1169,1 @@\n-      context_type = InstanceKlass::cast(context_type->implementor());\n+      context_type = context_type->implementor();\n@@ -1600,1 +1600,1 @@\n-  if (lm == nullptr && ctxk->is_instance_klass()) {\n+  if (lm == nullptr) {\n@@ -1602,2 +1602,1 @@\n-    lm = InstanceKlass::cast(ctxk)->lookup_method_in_ordered_interfaces(m->name(),\n-                                                                        m->signature());\n+    lm = ctxk->lookup_method_in_ordered_interfaces(m->name(), m->signature());\n@@ -2177,1 +2176,1 @@\n-    Klass* k = str.klass();\n+    InstanceKlass* k = str.klass();\n@@ -2206,1 +2205,1 @@\n-  Klass* type = (_changes.is_klass_change() ? _changes.as_klass_change()->type() : (Klass*) nullptr);\n+  InstanceKlass* type = (_changes.is_klass_change() ? _changes.as_klass_change()->type() : (InstanceKlass*) nullptr);\n@@ -2217,1 +2216,1 @@\n-    _ti_base = InstanceKlass::cast(_klass)->transitive_interfaces();\n+    _ti_base = _klass->transitive_interfaces();\n@@ -2227,1 +2226,1 @@\n-      _klass = _klass->super();\n+      _klass = _klass->java_super();\n@@ -2257,3 +2256,3 @@\n-    Klass* d = str.klass();\n-    assert(!InstanceKlass::cast(d)->is_marked_dependent(), \"checking\");\n-    InstanceKlass::cast(d)->set_is_marked_dependent(true);\n+    InstanceKlass* d = str.klass();\n+    assert(!d->is_marked_dependent(), \"checking\");\n+    d->set_is_marked_dependent(true);\n@@ -2267,2 +2266,2 @@\n-    Klass* d = str.klass();\n-    InstanceKlass::cast(d)->set_is_marked_dependent(false);\n+    InstanceKlass* d = str.klass();\n+    d->set_is_marked_dependent(false);\n","filename":"src\/hotspot\/share\/code\/dependencies.cpp","additions":12,"deletions":13,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -717,1 +717,1 @@\n-  \/\/   Klass* k = str.klass();\n+  \/\/   InstanceKlass* k = str.klass();\n@@ -728,2 +728,2 @@\n-    ChangeType  _change_type;\n-    Klass*      _klass;\n+    ChangeType     _change_type;\n+    InstanceKlass* _klass;\n@@ -750,1 +750,1 @@\n-    Klass*     klass()           { return _klass; }\n+    InstanceKlass* klass()       { return _klass; }\n","filename":"src\/hotspot\/share\/code\/dependencies.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -616,2 +616,2 @@\n-          Klass* klass = deps.context_type();\n-          if (klass == nullptr) {\n+          InstanceKlass* ik = deps.context_type();\n+          if (ik == nullptr) {\n@@ -621,1 +621,1 @@\n-          InstanceKlass::cast(klass)->add_dependent_nmethod(nm);\n+          ik->add_dependent_nmethod(nm);\n@@ -1499,2 +1499,2 @@\n-        Klass* klass = deps.context_type();\n-        if (klass == nullptr) {\n+        InstanceKlass* ik = deps.context_type();\n+        if (ik == nullptr) {\n@@ -1505,1 +1505,1 @@\n-        InstanceKlass::cast(klass)->clean_dependency_context();\n+        ik->clean_dependency_context();\n@@ -2490,1 +2490,1 @@\n-    Klass* ctxk = deps.context_type();\n+    InstanceKlass* ctxk = deps.context_type();\n@@ -2492,1 +2492,1 @@\n-      if (ctxk->is_instance_klass() && InstanceKlass::cast(ctxk)->is_dependent_nmethod(this)) {\n+      if (ctxk->is_dependent_nmethod(this)) {\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"}]}