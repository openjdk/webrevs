{"files":[{"patch":"@@ -54,1 +54,1 @@\n-        List<String> declaredTypeNames,\n+        List<String> qualifiedTypeNames,\n@@ -59,1 +59,2 @@\n-        var declaredTypeNames = new ArrayList<String>();\n+        var packageNameAndDot = \"\"; \/\/ empty string or packageName + '.'\n+        var qualifiedTypeNames = new ArrayList<String>();\n@@ -65,10 +66,9 @@\n-            for (var tree : task.parse()) {\n-                for (var decl : tree.getTypeDecls()) {\n-                    if (decl instanceof ClassTree cdecl) {\n-                        declaredTypeNames.add(cdecl.getSimpleName().toString());\n-                    }\n-                }\n-                var packageTree = tree.getPackage();\n-                if (packageTree != null) {\n-                    packageName = packageTree.getPackageName().toString();\n-                    break;\n+            var tree = task.parse().iterator().next(); \/\/ single compilation unit\n+            var packageTree = tree.getPackage();\n+            if (packageTree != null) {\n+                packageName = packageTree.getPackageName().toString();\n+                packageNameAndDot = packageName + '.';\n+            }\n+            for (var type : tree.getTypeDecls()) {\n+                if (type instanceof ClassTree classType) {\n+                    qualifiedTypeNames.add(packageNameAndDot + classType.getSimpleName());\n@@ -80,1 +80,1 @@\n-        if (declaredTypeNames.isEmpty()) {\n+        if (qualifiedTypeNames.isEmpty()) {\n@@ -83,2 +83,0 @@\n-        var root = computeSourceRootPath(file, packageName);\n-        var pn = packageName.isEmpty() ? \"\" : packageName + '.';\n@@ -87,5 +85,3 @@\n-                packageName.isEmpty()\n-                        ? Optional.empty()\n-                        : Optional.of(packageName),\n-                declaredTypeNames.stream().map(name -> pn + name).toList(),\n-                root);\n+                packageName.isEmpty() ? Optional.empty() : Optional.of(packageName),\n+                List.copyOf(qualifiedTypeNames),\n+                computeSourceRootPath(file, packageName));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/launcher\/ProgramDescriptor.java","additions":16,"deletions":20,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -200,1 +200,1 @@\n-        String firstClassName = program.declaredTypeNames().getFirst();\n+        String firstClassName = program.qualifiedTypeNames().getFirst();\n@@ -218,1 +218,1 @@\n-            var actualName = program.declaredTypeNames().stream()\n+            var actualName = program.qualifiedTypeNames().stream()\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/launcher\/SourceLauncher.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}