{"files":[{"patch":"@@ -265,0 +265,3 @@\n+            if (npairs < 0 || npairs > code.codeLength >> 3) {\n+                throw new IllegalArgumentException(\"Invalid lookupswitch npairs value: \" + npairs);\n+            }\n@@ -317,0 +320,3 @@\n+            if (high < low || high - low > code.codeLength >> 2) {\n+                throw new IllegalArgumentException(\"Invalid tableswitch values low: \" + low + \" high: \" + high);\n+            }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractInstruction.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8320360 8330684\n+ * @bug 8320360 8330684 8331320\n@@ -30,0 +30,2 @@\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.BufWriter;\n@@ -34,0 +36,2 @@\n+import java.lang.classfile.Opcode;\n+import java.lang.classfile.attribute.CodeAttribute;\n@@ -35,0 +39,1 @@\n+import jdk.internal.classfile.impl.DirectMethodBuilder;\n@@ -36,0 +41,1 @@\n+import jdk.internal.classfile.impl.UnboundAttribute;\n@@ -102,0 +108,47 @@\n+\n+    @Test\n+    void testInvalidLookupSwitch() {\n+        assertThrows(IllegalArgumentException.class, () ->\n+                ClassFile.of().parse(ClassFile.of().build(ClassDesc.of(\"LookupSwitchClass\"), cb -> cb.withMethod(\n+                \"lookupSwitchMethod\", MethodTypeDesc.of(ConstantDescs.CD_void), 0, mb ->\n+                        ((DirectMethodBuilder)mb).writeAttribute(new UnboundAttribute.AdHocAttribute<CodeAttribute>(Attributes.CODE) {\n+                                @Override\n+                                public void writeBody(BufWriter b) {\n+                                    b.writeU2(-1);\/\/max stack\n+                                    b.writeU2(-1);\/\/max locals\n+                                    b.writeInt(16);\n+                                    b.writeU1(Opcode.NOP.bytecode());\n+                                    b.writeU1(Opcode.NOP.bytecode());\n+                                    b.writeU1(Opcode.NOP.bytecode());\n+                                    b.writeU1(Opcode.NOP.bytecode());\n+                                    b.writeU1(Opcode.LOOKUPSWITCH.bytecode());\n+                                    b.writeU1(0); \/\/padding\n+                                    b.writeU2(0); \/\/padding\n+                                    b.writeInt(0); \/\/default\n+                                    b.writeInt(-2); \/\/npairs to jump back and cause OOME if not checked\n+                                    b.writeU2(0);\/\/exception handlers\n+                                    b.writeU2(0);\/\/attributes\n+                                }})))).methods().get(0).code().get().elementList());\n+    }\n+\n+    @Test\n+    void testInvalidTableSwitch() {\n+        assertThrows(IllegalArgumentException.class, () ->\n+                ClassFile.of().parse(ClassFile.of().build(ClassDesc.of(\"TableSwitchClass\"), cb -> cb.withMethod(\n+                \"tableSwitchMethod\", MethodTypeDesc.of(ConstantDescs.CD_void), 0, mb ->\n+                        ((DirectMethodBuilder)mb).writeAttribute(new UnboundAttribute.AdHocAttribute<CodeAttribute>(Attributes.CODE) {\n+                                @Override\n+                                public void writeBody(BufWriter b) {\n+                                    b.writeU2(-1);\/\/max stack\n+                                    b.writeU2(-1);\/\/max locals\n+                                    b.writeInt(16);\n+                                    b.writeU1(Opcode.TABLESWITCH.bytecode());\n+                                    b.writeU1(0); \/\/padding\n+                                    b.writeU2(0); \/\/padding\n+                                    b.writeInt(0); \/\/default\n+                                    b.writeInt(0); \/\/low\n+                                    b.writeInt(-5); \/\/high to jump back and cause OOME if not checked\n+                                    b.writeU2(0);\/\/exception handlers\n+                                    b.writeU2(0);\/\/attributes\n+                                }})))).methods().get(0).code().get().elementList());\n+    }\n","filename":"test\/jdk\/jdk\/classfile\/LimitsTest.java","additions":54,"deletions":1,"binary":false,"changes":55,"status":"modified"}]}