{"files":[{"patch":"@@ -215,0 +215,9 @@\n+  const TypeInstPtr* dest_type = phase->type(base_dest)->is_instptr();\n+  if (dest_type->instance_klass() != ik) {\n+    \/\/ At parse time, exact type of the object to clone was not known. That inexact type was captured by the CheckCastPP\n+    \/\/ of the newly allocated cloned object (in dest). Exact type is now known (in src), but type for the cloned object\n+    \/\/ (dest) was not updated. When copying fields below, Store nodes may write to offsets for fields that don't exist in\n+    \/\/ the inexact class. The stores would then be assigned an incorrect slice.\n+    return NodeSentinel;\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/arraycopynode.cpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * Copyright (c) 2025 IBM Corporation. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8339526\n+ * @summary C2: store incorrectly removed for clone() transformed to series of loads\/stores\n+ * @run main\/othervm -XX:-BackgroundCompilation TestCloneUnknownClassAtParseTime\n+ *\/\n+\n+public class TestCloneUnknownClassAtParseTime {\n+    private static volatile int volatileField;\n+\n+    public static void main(String[] args) throws CloneNotSupportedException {\n+        A a = new A();\n+        for (int i = 0; i < 20_000; i++) {\n+            B b = (B)test1(-1);\n+            if (b.field1 != 42 || b.field2 != 42|| b.field3 != 42) {\n+                throw new RuntimeException(\"Clone wrongly initialized\");\n+            }\n+            inlined1(42);\n+            field = a;\n+            inlined2();\n+        }\n+    }\n+\n+    static A field;\n+\n+    private static A test1(int i) throws CloneNotSupportedException {\n+        int[] nonEscapingArray = new int[1];\n+        field = new B(42, 42, 42);\n+\n+        if (i > 0) {\n+            throw new RuntimeException(\"never taken\");\n+        }\n+        inlined1(i);\n+\n+        nonEscapingArray[0] = 42;\n+        return inlined2();\n+    }\n+\n+    private static A inlined2() throws CloneNotSupportedException {\n+        A a = field;\n+        return (A)a.clone();\n+    }\n+\n+    private static void inlined1(int i) {\n+        if (i > 0) {\n+            volatileField = 42;\n+        }\n+    }\n+\n+    private static class A implements Cloneable {\n+        public Object clone() throws CloneNotSupportedException {\n+            return super.clone();\n+        }\n+    }\n+\n+    private static class B extends A {\n+        int field1;\n+        int field2;\n+        int field3;\n+\n+        B(int v1, int v2, int v3) {\n+            field1 = v1;\n+            field2 = v2;\n+            field3 = v3;\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/arraycopy\/TestCloneUnknownClassAtParseTime.java","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"}]}