{"files":[{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -457,0 +457,12 @@\n+$(eval $(call SetupTarget, static-launcher, \\\n+    MAKEFILE := StaticLibs, \\\n+    TARGET := static-launcher, \\\n+    DEPS := hotspot-server-static-libs static-libs, \\\n+))\n+\n+$(eval $(call SetupTarget, static-jdk-image, \\\n+    MAKEFILE := StaticLibs, \\\n+    TARGET := static-jdk-image, \\\n+    DEPS := static-exploded-image jdk-image, \\\n+))\n+\n@@ -1089,1 +1101,1 @@\n-  static-libs-image: hotspot-static-libs $(STATIC_LIBS_TARGETS)\n+  static-libs-image: hotspot-static-libs static-libs\n@@ -1091,1 +1103,1 @@\n-  static-libs-graal-image: $(STATIC_LIBS_TARGETS)\n+  static-libs-graal-image: static-libs\n@@ -1257,0 +1269,2 @@\n+static-exploded-image: static-launcher exploded-image\n+\n@@ -1299,1 +1313,1 @@\n-all-images: product-images test-image all-docs-images\n+all-images: product-images static-jdk-image test-image all-docs-images\n@@ -1312,1 +1326,1 @@\n-    docs-bundles all-docs-bundles test-image all-images \\\n+    docs-bundles all-docs-bundles test-image all-images static-exploded-image \\\n","filename":"make\/Main.gmk","additions":19,"deletions":5,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,0 +48,12 @@\n+ifeq ($(MAKEFILE_PREFIX), Lib)\n+  ifneq ($($(MODULE)_JDK_LIBS), )\n+    LIBLIST := $(SUPPORT_OUTPUTDIR)\/modules_static-libs\/$(MODULE)\/module-libs.txt\n+\n+    $(LIBLIST): $(TARGETS)\n+\t$(call MakeDir, $(@D))\n+\t$(ECHO) $($(MODULE)_JDK_LIBS) > $@\n+\n+    TARGETS += $(LIBLIST)\n+  endif\n+endif\n+\n","filename":"make\/ModuleWrapper.gmk","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,183 @@\n+#\n+# Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+default: all\n+\n+include $(SPEC)\n+include MakeBase.gmk\n+\n+include CopyFiles.gmk\n+include Modules.gmk\n+include modules\/LauncherCommon.gmk\n+\n+################################################################################\n+#\n+# Create the static java launcher\n+#\n+################################################################################\n+\n+STATIC_JDK_IMAGE_DIR := $(IMAGES_OUTPUTDIR)\/static-jdk\n+STATIC_LAUNCHER_OUTPUT_DIR := $(SUPPORT_OUTPUTDIR)\/static-native\/launcher\n+HOTSPOT_STATIC_LIB_PATH := $(HOTSPOT_OUTPUTDIR)\/*\/libjvm\/objs\/static\n+\n+ifneq ($(word 2, $(wildcard $(HOTSPOT_STATIC_LIB_PATH))), )\n+  $(error Cannot perform static linking when building more than one JVM library)\n+endif\n+\n+# Find all modules with static libraries\n+STATIC_LIB_MODULES := $(patsubst $(SUPPORT_OUTPUTDIR)\/modules_static-libs\/%, \\\n+    %, $(wildcard $(SUPPORT_OUTPUTDIR)\/modules_static-libs\/*))\n+\n+# Filter out known broken libraries. This is a temporary measure until\n+# proper support for these libraries can be provided.\n+ifeq ($(call isTargetOs, linux), true)\n+  # libsplashscreen has a name conflict with libawt in the function\n+  # BitmapToYXBandedRectangles, so we exclude it for now.\n+  BROKEN_STATIC_LIBS += splashscreen\n+else ifeq ($(call isTargetOs, macosx), true)\n+  # libosxsecurity has a name conflict with libosxapp in the function\n+  # JavaStringToNSString, so we exclude it for now.\n+  BROKEN_STATIC_LIBS += osxsecurity\n+else ifeq ($(call isTargetOs, windows), true)\n+  # libsplashscreen has a name conflict with libawt in the function\n+  # BitmapToYXBandedRectangles, so we exclude it for now.\n+  BROKEN_STATIC_LIBS += splashscreen\n+  # windowsaccessbridge-64 has multiple collisions and conflicts\n+  BROKEN_STATIC_LIBS += windowsaccessbridge-64\n+  # libsspi_bridge has name conflicts with sunmscapi\n+  BROKEN_STATIC_LIBS += sspi_bridge\n+  # These libs define DllMain which conflict with Hotspot\n+  BROKEN_STATIC_LIBS += awt dt_shmem dt_socket javaaccessbridge\n+  # These libs are dependent on any of the above disabled libs\n+  BROKEN_STATIC_LIBS += fontmanager jawt lcms net nio\n+endif\n+\n+$(foreach module, $(STATIC_LIB_MODULES), \\\n+    $(eval LIBS_$(module) := $(filter-out $(BROKEN_STATIC_LIBS), $(shell cat \\\n+    $(SUPPORT_OUTPUTDIR)\/modules_static-libs\/$(module)\/module-libs.txt))) \\\n+)\n+\n+STATIC_LIB_FILES := $(foreach module, $(STATIC_LIB_MODULES), \\\n+    $(foreach lib, $(LIBS_$(module)), \\\n+    $(SUPPORT_OUTPUTDIR)\/native\/$(module)\/lib$(lib)\/static\/$(LIBRARY_PREFIX)$(lib)$(STATIC_LIBRARY_SUFFIX)))\n+\n+# Add Hotspot\n+STATIC_LIB_FILES += $(wildcard $(HOTSPOT_STATIC_LIB_PATH)\/$(LIBRARY_PREFIX)jvm$(STATIC_LIBRARY_SUFFIX))\n+\n+# Figure out what external libraries are required to link these static JDK\n+# libraries.\n+LIB_FLAGS_FILES := $(addsuffix .lib-flags.txt, $(STATIC_LIB_FILES))\n+\n+# Gather the lib flags from all individual libraries. There are many duplicates,\n+# so sort and just keep unique instances. On macOS, a common pattern is\n+# \"-framework FooFramework\", so we must make sure we keep the two words together.\n+EXTERNAL_LIBS := $(strip $(shell $(CAT) $(LIB_FLAGS_FILES) | \\\n+    $(SED) -e 's\/-framework \/-framework_\/g' | $(TR) ' ' '\\n' | $(SORT) -u | \\\n+    $(SED) -e 's\/-framework_\/-framework \/g'))\n+\n+ifeq ($(call isTargetOs, macosx), true)\n+  STATIC_LIBS := $(addprefix -force_load$(SPACE), $(STATIC_LIB_FILES))\n+  STANDARD_LIBS += -lstdc++\n+else ifeq ($(call isTargetOs, linux), true)\n+  STATIC_LIBS := -Wl,--export-dynamic -Wl,--whole-archive $(STATIC_LIB_FILES) -Wl,--no-whole-archive\n+  STANDARD_LIBS := -l:libstdc++.a\n+else ifeq ($(call isTargetOs, windows), true)\n+  STATIC_LIBS := $(addprefix -wholearchive:, $(STATIC_LIB_FILES))\n+else\n+  $(error Unsupported platform)\n+endif\n+\n+$(eval $(call SetupBuildLauncher, java, \\\n+    CFLAGS := -DEXPAND_CLASSPATH_WILDCARDS -DENABLE_ARG_FILES, \\\n+    EXTRA_RCFLAGS := $(JAVA_RCFLAGS), \\\n+    VERSION_INFO_RESOURCE := $(JAVA_VERSION_INFO_RESOURCE), \\\n+    OPTIMIZATION := HIGH, \\\n+    STATIC_LAUNCHER := true, \\\n+    LDFLAGS := $(JAVASTATIC_LINK_LDFLAGS), \\\n+    LIBS := $(STATIC_LIBS) $(EXTERNAL_LIBS) $(STANDARD_LIBS), \\\n+    OUTPUT_DIR := $(STATIC_LAUNCHER_OUTPUT_DIR), \\\n+    OBJECT_DIR := $(STATIC_LAUNCHER_OUTPUT_DIR), \\\n+))\n+\n+TARGETS += $(java)\n+\n+JAVA_LAUNCHER := $(BUILD_LAUNCHER_java_TARGET)\n+\n+static-launcher: $(java)\n+\n+################################################################################\n+#\n+# Create the static-jdk image with the statically built java launcher\n+#\n+################################################################################\n+\n+# Until we get proper support in jlink for generating an image with static\n+# builds, we need to create the image ourselves. We base it on a normal\n+# dynamically linked JDK image.\n+\n+# All these files\/dirs should be copied as-is\n+JDK_IMAGE_COPY_FILES := $(addprefix $(JDK_IMAGE_DIR)\/, conf demo include jmods \\\n+    legal man\/man1\/java.1 release README)\n+\n+# We need to copy some files from lib, but not the dynamic libraries themselves\n+ALL_LIB_FILES := $(call FindFiles, $(JDK_IMAGE_DIR)\/lib)\n+\n+# Remove all dynamic libraries from the list\n+JDK_IMAGE_COPY_LIB_FILES := $(filter-out %$(SHARED_LIBRARY_SUFFIX), $(ALL_LIB_FILES))\n+# Remove all debug files from the list\n+ifeq ($(call isTargetOs, macosx), true)\n+  JDK_IMAGE_COPY_LIB_FILES := $(call not-containing, .dSYM, $(JDK_IMAGE_COPY_LIB_FILES))\n+else\n+  JDK_IMAGE_COPY_LIB_FILES := $(filter-out %.debuginfo %.pdb %.map, $(JDK_IMAGE_COPY_LIB_FILES))\n+endif\n+\n+static-jdk-info:\n+\t$(call LogWarn, Creating static-jdk image)\n+\n+$(eval $(call SetupCopyFiles, copy-from-jdk-image, \\\n+    SRC := $(JDK_IMAGE_DIR), \\\n+    DEST := $(STATIC_JDK_IMAGE_DIR), \\\n+    FILES := $(call FindFiles, $(JDK_IMAGE_COPY_FILES)) \\\n+        $(JDK_IMAGE_COPY_LIB_FILES), \\\n+))\n+\n+TARGETS += $(copy-from-jdk-image)\n+\n+$(copy-from-jdk-image): | static-jdk-info\n+\n+$(eval $(call SetupCopyFiles, copy-static-launcher, \\\n+    FILES := $(JAVA_LAUNCHER), \\\n+    DEST := $(STATIC_JDK_IMAGE_DIR)\/bin, \\\n+))\n+\n+TARGETS += $(copy-static-launcher)\n+\n+static-jdk-image: $(copy-from-jdk-image) $(copy-static-launcher)\n+\n+TARGETS += static-jdk-image\n+\n+all: $(TARGETS)\n+\n+.PHONY: all static-launcher static-jdk-image\n","filename":"make\/StaticLibs.gmk","additions":183,"deletions":0,"binary":false,"changes":183,"status":"added"},{"patch":"@@ -306,0 +306,6 @@\n+  ifneq ($$(MODULE), )\n+    ifneq ($$($1_EXCLUDE_FROM_STATIC_LIBS), true)\n+      $$(MODULE)_JDK_LIBS += $$($1_NAME)\n+    endif\n+  endif\n+\n","filename":"make\/common\/JdkNativeCompilation.gmk","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -65,0 +65,1 @@\n+# STATIC_LAUNCHER   If true, will use settings for building a static launcher\n@@ -123,0 +124,9 @@\n+  ifneq ($$($1_STATIC_LAUNCHER), true)\n+      $1_JDK_LIBS := java.base:libjli\n+      $1_JDK_LIBS_windows := java.base:libjava\n+  else\n+    ifneq ($(findstring $(TOOLCHAIN_TYPE), gcc clang), )\n+      $1_LDFLAGS_FILTER_OUT := -Wl$(COMMA)--exclude-libs$(COMMA)ALL\n+    endif\n+  endif\n+\n@@ -143,2 +153,3 @@\n-      JDK_LIBS := java.base:libjli, \\\n-      JDK_LIBS_windows := java.base:libjava, \\\n+      LDFLAGS_FILTER_OUT := $$($1_LDFLAGS_FILTER_OUT), \\\n+      JDK_LIBS := $$($1_JDK_LIBS), \\\n+      JDK_LIBS_windows := $$($1_JDK_LIBS_windows), \\\n@@ -153,0 +164,1 @@\n+      OBJECT_DIR := $$($1_OBJECT_DIR), \\\n","filename":"make\/common\/modules\/LauncherCommon.gmk","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -122,0 +122,1 @@\n+\t$$(ECHO) $$(strip $$($1_LIBS) $$($1_EXTRA_LIBS)) > $$($1_TARGET).lib-flags.txt\n","filename":"make\/common\/native\/Link.gmk","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -57,1 +57,2 @@\n-\t        $$($1_LD_OBJ_ARG) $$($1_RES))\n+\t        $$($1_LD_OBJ_ARG))\n+\t$$(ECHO) $$(strip $$($1_LIBS) $$($1_EXTRA_LIBS)) > $$($1_TARGET).lib-flags.txt\n","filename":"make\/common\/native\/LinkMicrosoft.gmk","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -175,0 +175,5 @@\n+  ifneq ($(ENABLE_HEADLESS_ONLY), true)\n+    # We cannot link with both awt_headless and awt_xawt at the same time\n+    LIBAWT_HEADLESS_EXCLUDE_FROM_STATIC_LIBS := true\n+  endif\n+\n@@ -179,0 +184,1 @@\n+      EXCLUDE_FROM_STATIC_LIBS := $(LIBAWT_HEADLESS_EXCLUDE_FROM_STATIC_LIBS), \\\n@@ -315,0 +321,2 @@\n+  LIBAWT_LWAWT_STATIC_EXCLUDE_OBJS := systemScale.o\n+\n@@ -353,0 +361,1 @@\n+      STATIC_LIB_EXCLUDE_OBJS := $(LIBAWT_LWAWT_STATIC_EXCLUDE_OBJS), \\\n","filename":"make\/modules\/java.desktop\/lib\/AwtLibraries.gmk","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -158,0 +158,9 @@\n+    LIBSPLASHSCREEN_STATIC_LIB_EXCLUDE_OBJS += jcapimin.o jcapistd.o \\\n+        jccoefct.o jccolor.o jcdctmgr.o jchuff.o jcinit.o jcmainct.o \\\n+        jcmarker.o jcmaster.o jcomapi.o jcparam.o jcphuff.o jcprepct.o \\\n+        jcsample.o jctrans.o jdapimin.o jdapistd.o jdcoefct.o jdcolor.o \\\n+        jddctmgr.o jdhuff.o jdinput.o jdmainct.o jdmarker.o jdmaster.o \\\n+        jdmerge.o jdphuff.o jdpostct.o jdsample.o jdtrans.o jerror.o \\\n+        jfdctflt.o jfdctfst.o jfdctint.o jidctflt.o jidctfst.o jidctint.o \\\n+        jidctred.o jmemmgr.o jmemnobs.o jpegdecoder.o jquant1.o jquant2.o \\\n+        jutils.o\n@@ -168,0 +177,4 @@\n+    LIBSPLASHSCREEN_STATIC_LIB_EXCLUDE_OBJS += Adler32.o compress.o CRC32.o \\\n+        deflate.o Deflater.o Inflater.o gzclose.o gzlib.o gzread.o gzwrite.o \\\n+        infback.o inffast.o inflate.o inftrees.o trees.o uncompr.o zadler32.o \\\n+        zcrc32.o zip_util.o zutil.o\n@@ -210,0 +223,2 @@\n+  LIBSPLASHSCREEN_STATIC_LIB_EXCLUDE_OBJS += systemScale.o\n+\n@@ -260,0 +275,1 @@\n+      STATIC_LIB_EXCLUDE_OBJS := $(LIBSPLASHSCREEN_STATIC_LIB_EXCLUDE_OBJS), \\\n","filename":"make\/modules\/java.desktop\/lib\/ClientLibraries.gmk","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -85,0 +85,1 @@\n+        STATIC_LIB_EXCLUDE_OBJS := AccessBridgeDebug.obj AccessBridgeMessages.obj, \\\n","filename":"make\/modules\/jdk.accessibility\/Lib.gmk","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+    EXCLUDE_FROM_STATIC_LIBS := true, \\\n@@ -86,0 +87,1 @@\n+      EXCLUDE_FROM_STATIC_LIBS := true, \\\n@@ -130,0 +132,1 @@\n+      EXCLUDE_FROM_STATIC_LIBS := true, \\\n@@ -149,0 +152,1 @@\n+      EXCLUDE_FROM_STATIC_LIBS := true, \\\n@@ -167,0 +171,1 @@\n+      EXCLUDE_FROM_STATIC_LIBS := true, \\\n","filename":"make\/modules\/jdk.jpackage\/Lib.gmk","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -574,0 +574,1 @@\n+#define JVM_LIB_NAME \"libjvm.so\"\n@@ -588,2 +589,4 @@\n-    \/\/ Found the full path to libjvm.so.\n-    \/\/ Now cut the path to <java_home>\/jre if we can.\n+    \/\/ Found the full path to the binary. It is normally of this structure:\n+    \/\/   <jdk_path>\/lib\/<hotspot_variant>\/libjvm.so\n+    \/\/ but can also be like this for a statically linked binary:\n+    \/\/   <jdk_path>\/bin\/<executable>\n@@ -592,5 +595,11 @@\n-      *pslash = '\\0';            \/\/ Get rid of \/libjvm.so.\n-    }\n-    pslash = strrchr(buf, '\/');\n-    if (pslash != nullptr) {\n-      *pslash = '\\0';            \/\/ Get rid of \/{client|server|hotspot}.\n+      if (strncmp(pslash + 1, JVM_LIB_NAME, strlen(JVM_LIB_NAME)) == 0) {\n+        \/\/ Binary name is libjvm.so. Get rid of \/libjvm.so.\n+        *pslash = '\\0';\n+      }\n+\n+      \/\/ Get rid of \/<hotspot_variant>, if binary is libjvm.so,\n+      \/\/ or cut off \/<executable>, if it is a statically linked binary.\n+      pslash = strrchr(buf, '\/');\n+      if (pslash != nullptr) {\n+        *pslash = '\\0';\n+      }\n@@ -600,0 +609,2 @@\n+    \/\/ Get rid of \/lib, if binary is libjvm.so,\n+    \/\/ or cut off \/bin, if it is a statically linked binary.\n@@ -603,1 +614,1 @@\n-        *pslash = '\\0';        \/\/ Get rid of \/lib.\n+        *pslash = '\\0';\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":19,"deletions":8,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -870,0 +870,6 @@\n+void* os::lookup_function(const char* name) {\n+  \/\/ This returns the global symbol in the main executable and its dependencies,\n+  \/\/ as well as shared objects dynamically loaded with RTLD_GLOBAL flag.\n+  return dlsym(RTLD_DEFAULT, name);\n+}\n+\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1407,0 +1407,6 @@\n+void* os::lookup_function(const char* name) {\n+  \/\/ This is needed only for static builds which are not supported on Windows\n+  ShouldNotReachHere();\n+  return nullptr; \/\/ Satisfy compiler\n+}\n+\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -958,0 +958,6 @@\n+  if (is_vm_statically_linked()) {\n+    CanonicalizeEntry = CAST_TO_FN_PTR(canonicalize_fn_t, os::lookup_function(\"JDK_Canonicalize\"));\n+    assert(CanonicalizeEntry != nullptr, \"could not lookup JDK_Canonicalize\");\n+    return;\n+  }\n+\n@@ -964,0 +970,1 @@\n+  assert(CanonicalizeEntry != nullptr, \"could not lookup JDK_Canonicalize in java library\");\n@@ -968,0 +975,12 @@\n+\n+  if (is_vm_statically_linked()) {\n+      JImageOpen = CAST_TO_FN_PTR(JImageOpen_t, os::lookup_function(\"JIMAGE_Open\"));\n+      JImageClose = CAST_TO_FN_PTR(JImageClose_t, os::lookup_function(\"JIMAGE_Close\"));\n+      JImageFindResource = CAST_TO_FN_PTR(JImageFindResource_t, os::lookup_function(\"JIMAGE_FindResource\"));\n+      JImageGetResource = CAST_TO_FN_PTR(JImageGetResource_t, os::lookup_function(\"JIMAGE_GetResource\"));\n+      assert(JImageOpen != nullptr && JImageClose != nullptr &&\n+            JImageFindResource != nullptr && JImageGetResource != nullptr,\n+            \"could not lookup all jimage library functions\");\n+      return;\n+    }\n+\n@@ -982,0 +1001,3 @@\n+  assert(JImageOpen != nullptr && JImageClose != nullptr &&\n+        JImageFindResource != nullptr && JImageGetResource != nullptr,\n+        \"could not lookup all jimage library functions in jimage library\");\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -87,0 +87,1 @@\n+  void *lib_handle = nullptr;\n@@ -88,8 +89,12 @@\n-  char buffer[JVM_MAXPATHLEN];\n-  char ebuf[1024];\n-  if (!os::dll_locate_lib(buffer, sizeof(buffer), Arguments::get_dll_dir(), \"verify\"))\n-    return nullptr; \/\/ Caller will throw VerifyError\n-\n-  void *lib_handle = os::dll_load(buffer, ebuf, sizeof(ebuf));\n-  if (lib_handle == nullptr)\n-    return nullptr; \/\/ Caller will throw VerifyError\n+  if (is_vm_statically_linked()) {\n+    lib_handle = os::get_default_process_handle();\n+  } else {\n+    char buffer[JVM_MAXPATHLEN];\n+    char ebuf[1024];\n+    if (!os::dll_locate_lib(buffer, sizeof(buffer), Arguments::get_dll_dir(), \"verify\"))\n+      return nullptr; \/\/ Caller will throw VerifyError\n+\n+    lib_handle = os::dll_load(buffer, ebuf, sizeof(ebuf));\n+    if (lib_handle == nullptr)\n+      return nullptr; \/\/ Caller will throw VerifyError\n+  }\n","filename":"src\/hotspot\/share\/classfile\/verifier.cpp","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -516,0 +516,5 @@\n+    if (is_vm_statically_linked()) {\n+      _native_java_library = get_default_process_handle();\n+      return _native_java_library;\n+    }\n+\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -755,0 +755,3 @@\n+  \/\/ Lookup the named function. This is used by the static JDK.\n+  static void* lookup_function(const char* name);\n+\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,0 +63,4 @@\n+  if (is_vm_statically_linked()) {\n+    return os::lookup_function(name);\n+  }\n+\n@@ -90,7 +94,14 @@\n-  if (os::dll_locate_lib(&path[0], sizeof path, Arguments::get_dll_dir(), \"zip\")) {\n-    char ebuf[1024];\n-    _zip_handle = os::dll_load(&path[0], &ebuf[0], sizeof ebuf);\n-  }\n-  if (_zip_handle == nullptr) {\n-    if (vm_exit_on_failure) {\n-      vm_exit_during_initialization(\"Unable to load zip library\", &path[0]);\n+\n+  if (is_vm_statically_linked()) {\n+    _zip_handle = os::get_default_process_handle();\n+  } else {\n+    \/\/ Load the libzip shared library and lookup the needed functions.\n+    if (os::dll_locate_lib(&path[0], sizeof path, Arguments::get_dll_dir(), \"zip\")) {\n+      char ebuf[1024];\n+      _zip_handle = os::dll_load(&path[0], &ebuf[0], sizeof ebuf);\n+    }\n+    if (_zip_handle == nullptr) {\n+      if (vm_exit_on_failure) {\n+        vm_exit_during_initialization(\"Unable to load zip library\", &path[0]);\n+      }\n+      return;\n@@ -98,1 +109,0 @@\n-    return;\n@@ -100,0 +110,1 @@\n+\n","filename":"src\/hotspot\/share\/utilities\/zipLibrary.cpp","additions":20,"deletions":9,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -339,12 +339,13 @@\n-    \/* Find out where the JRE is that we will be using. *\/\n-    if (!GetJREPath(jrepath, so_jrepath, JNI_FALSE) ) {\n-        JLI_ReportErrorMessage(JRE_ERROR1);\n-        exit(2);\n-    }\n-    JLI_Snprintf(jvmcfg, so_jvmcfg, \"%s%slib%sjvm.cfg\",\n-                 jrepath, FILESEP, FILESEP);\n-    \/* Find the specified JVM type *\/\n-    if (ReadKnownVMs(jvmcfg, JNI_FALSE) < 1) {\n-        JLI_ReportErrorMessage(CFG_ERROR7);\n-        exit(1);\n-    }\n+    if (!JLI_IsStaticallyLinked()) {\n+        \/* Find out where the JRE is that we will be using. *\/\n+        if (!GetJREPath(jrepath, so_jrepath, JNI_FALSE) ) {\n+            JLI_ReportErrorMessage(JRE_ERROR1);\n+            exit(2);\n+        }\n+        JLI_Snprintf(jvmcfg, so_jvmcfg, \"%s%slib%sjvm.cfg\",\n+                    jrepath, FILESEP, FILESEP);\n+        \/* Find the specified JVM type *\/\n+        if (ReadKnownVMs(jvmcfg, JNI_FALSE) < 1) {\n+            JLI_ReportErrorMessage(CFG_ERROR7);\n+            exit(1);\n+        }\n@@ -352,6 +353,6 @@\n-    jvmpath[0] = '\\0';\n-    jvmtype = CheckJvmType(pargc, pargv, JNI_FALSE);\n-    if (JLI_StrCmp(jvmtype, \"ERROR\") == 0) {\n-        JLI_ReportErrorMessage(CFG_ERROR9);\n-        exit(4);\n-    }\n+        jvmpath[0] = '\\0';\n+        jvmtype = CheckJvmType(pargc, pargv, JNI_FALSE);\n+        if (JLI_StrCmp(jvmtype, \"ERROR\") == 0) {\n+            JLI_ReportErrorMessage(CFG_ERROR9);\n+            exit(4);\n+        }\n@@ -359,3 +360,4 @@\n-    if (!GetJVMPath(jrepath, jvmtype, jvmpath, so_jvmpath)) {\n-        JLI_ReportErrorMessage(CFG_ERROR8, jvmtype, jvmpath);\n-        exit(4);\n+        if (!GetJVMPath(jrepath, jvmtype, jvmpath, so_jvmpath)) {\n+            JLI_ReportErrorMessage(CFG_ERROR8, jvmtype, jvmpath);\n+            exit(4);\n+        }\n","filename":"src\/java.base\/macosx\/native\/libjli\/java_md_macosx.m","additions":23,"deletions":21,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -279,0 +279,10 @@\n+    \/* Compute\/set the name of the executable. This is needed for macOS. *\/\n+    SetExecname(*pargv);\n+\n+    if (JLI_IsStaticallyLinked()) {\n+        \/\/ With static builds, all JDK and VM natives are statically linked\n+        \/\/ with the launcher executable. No need to manipulate LD_LIBRARY_PATH\n+        \/\/ by adding <jdk_path>\/lib and etc. The 'jrepath', 'jvmpath' and\n+        \/\/ 'jvmcfg' are not used by the caller for static builds. Simply return.\n+        return;\n+    }\n@@ -293,3 +303,0 @@\n-    \/* Compute\/set the name of the executable *\/\n-    SetExecname(*pargv);\n-\n@@ -321,0 +328,1 @@\n+\n@@ -481,0 +489,4 @@\n+        if (JLI_IsStaticallyLinked()) {\n+            return JNI_TRUE;\n+        }\n+\n@@ -522,5 +534,9 @@\n-    libjvm = dlopen(jvmpath, RTLD_NOW + RTLD_GLOBAL);\n-    if (libjvm == NULL) {\n-        JLI_ReportErrorMessage(DLL_ERROR1, __LINE__);\n-        JLI_ReportErrorMessage(DLL_ERROR2, jvmpath, dlerror());\n-        return JNI_FALSE;\n+    if (JLI_IsStaticallyLinked()) {\n+        libjvm = dlopen(NULL, RTLD_NOW + RTLD_GLOBAL);\n+    } else {\n+        libjvm = dlopen(jvmpath, RTLD_NOW + RTLD_GLOBAL);\n+        if (libjvm == NULL) {\n+            JLI_ReportErrorMessage(DLL_ERROR1, __LINE__);\n+            JLI_ReportErrorMessage(DLL_ERROR2, jvmpath, dlerror());\n+            return JNI_FALSE;\n+        }\n@@ -603,6 +619,9 @@\n-        if (!GetJREPath(jrePath, sizeof(jrePath), JNI_FALSE)) {\n-            JLI_ReportErrorMessage(JRE_ERROR1);\n-            return NULL;\n-        }\n-        ret = JLI_Snprintf(splashPath, sizeof(splashPath), \"%s\/lib\/%s\",\n-                     jrePath, SPLASHSCREEN_SO);\n+        if (JLI_IsStaticallyLinked()) {\n+            hSplashLib = dlopen(NULL, RTLD_LAZY);\n+        } else {\n+            if (!GetJREPath(jrePath, sizeof(jrePath), JNI_FALSE)) {\n+                JLI_ReportErrorMessage(JRE_ERROR1);\n+                return NULL;\n+            }\n+            ret = JLI_Snprintf(splashPath, sizeof(splashPath), \"%s\/lib\/%s\",\n+                        jrePath, SPLASHSCREEN_SO);\n@@ -610,7 +629,9 @@\n-        if (ret >= (int) sizeof(splashPath)) {\n-            JLI_ReportErrorMessage(JRE_ERROR11);\n-            return NULL;\n-        }\n-        if (ret < 0) {\n-            JLI_ReportErrorMessage(JRE_ERROR13);\n-            return NULL;\n+            if (ret >= (int) sizeof(splashPath)) {\n+                JLI_ReportErrorMessage(JRE_ERROR11);\n+                return NULL;\n+            }\n+            if (ret < 0) {\n+                JLI_ReportErrorMessage(JRE_ERROR13);\n+                return NULL;\n+            }\n+            hSplashLib = dlopen(splashPath, RTLD_LAZY | RTLD_GLOBAL);\n@@ -618,1 +639,0 @@\n-        hSplashLib = dlopen(splashPath, RTLD_LAZY | RTLD_GLOBAL);\n","filename":"src\/java.base\/unix\/native\/libjli\/java_md.c","additions":42,"deletions":22,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -135,1 +135,3 @@\n-    if (!JVM_IsStaticallyLinked()) {\n+    if (JVM_IsStaticallyLinked()) {\n+        awtHandle = dlopen(NULL, RTLD_LAZY);\n+    } else {\n","filename":"src\/java.desktop\/unix\/native\/libawt\/awt\/awt_LoadLibrary.c","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}