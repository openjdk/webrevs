{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -198,63 +198,0 @@\n-    \/*\n-     * NOTE: The following embedded*() methods are non-public API intended\n-     * for internal use only.  The methods are unsupported and could go\n-     * away in future releases.\n-     *\n-     * New hook functions for using the AWT as an embedded service. These\n-     * functions replace the global C function AwtInit() which was previously\n-     * exported by awt.dll.\n-     *\n-     * When used as an embedded service, the AWT does NOT have its own\n-     * message pump. It instead relies on the parent application to provide\n-     * this functionality. embeddedInit() assumes that the thread on which it\n-     * is called is the message pumping thread. Violating this assumption\n-     * will lead to undefined behavior.\n-     *\n-     * embeddedInit must be called before the WToolkit() constructor.\n-     * embeddedDispose should be called before the application terminates the\n-     * Java VM. It is currently unsafe to reinitialize the toolkit again\n-     * after it has been disposed. Instead, awt.dll must be reloaded and the\n-     * class loader which loaded WToolkit must be finalized before it is\n-     * safe to reuse AWT. Dynamic reusability may be added to the toolkit in\n-     * the future.\n-     *\/\n-\n-    \/**\n-     * Initializes the Toolkit for use in an embedded environment.\n-     *\n-     * @return true if the initialization succeeded; false if it failed.\n-     *         The function will fail if the Toolkit was already initialized.\n-     * @since 1.3\n-     *\/\n-    public static native boolean embeddedInit();\n-\n-    \/**\n-     * Disposes the Toolkit in an embedded environment. This method should\n-     * not be called on exit unless the Toolkit was constructed with\n-     * embeddedInit.\n-     *\n-     * @return true if the disposal succeeded; false if it failed. The\n-     *         function will fail if the calling thread is not the same\n-     *         thread which called embeddedInit(), or if the Toolkit was\n-     *         already disposed.\n-     * @since 1.3\n-     *\/\n-    public static native boolean embeddedDispose();\n-\n-    \/**\n-     * To be called after processing the event queue by users of the above\n-     * embeddedInit() function.  The reason for this additional call is that\n-     * there are some operations performed during idle time in the AwtToolkit\n-     * event loop which should also be performed during idle time in any\n-     * other native event loop.  Failure to do so could result in\n-     * deadlocks.\n-     *\n-     * This method was added at the last minute of the jdk1.4 release\n-     * to work around a specific customer problem.  As with the above\n-     * embedded*() class, this method is non-public and should not be\n-     * used by external applications.\n-     *\n-     * See bug #4526587 for more information.\n-     *\/\n-    public native void embeddedEventLoopIdleProcessing();\n-\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WToolkit.java","additions":1,"deletions":64,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -297,1 +297,0 @@\n-    m_localPump = FALSE;\n@@ -607,1 +606,1 @@\n-BOOL AwtToolkit::Initialize(BOOL localPump) {\n+BOOL AwtToolkit::Initialize() {\n@@ -620,5 +619,0 @@\n-    if (!localPump) {\n-        \/\/ if preload thread was run, terminate it\n-        preloadThread.Terminate(true);\n-    }\n-\n@@ -653,1 +647,0 @@\n-    tk.m_localPump = localPump;\n@@ -1510,6 +1503,0 @@\n- *\n- * This method may be called from WToolkit.embeddedEventLoopIdleProcessing\n- * if there is a separate event loop that must do the same CriticalSection\n- * check.\n- *\n- * See bug #4526587 for more information.\n@@ -2025,3 +2012,0 @@\n-    if (m_env != NULL) { \/\/ If already cashed (by means of embeddedInit() call).\n-        return;\n-    }\n@@ -2497,47 +2481,0 @@\n-\/*\n- * Class:     sun_awt_windows_WToolkit\n- * Method:    embeddedInit\n- * Signature: ()Z\n- *\/\n-JNIEXPORT jboolean JNICALL\n-Java_sun_awt_windows_WToolkit_embeddedInit(JNIEnv *env, jclass cls)\n-{\n-    TRY;\n-\n-    AwtToolkit::SetEnv(env);\n-\n-    return AwtToolkit::GetInstance().Initialize(FALSE);\n-\n-    CATCH_BAD_ALLOC_RET(JNI_FALSE);\n-}\n-\n-\/*\n- * Class:     sun_awt_windows_WToolkit\n- * Method:    embeddedDispose\n- * Signature: ()Z\n- *\/\n-JNIEXPORT jboolean JNICALL\n-Java_sun_awt_windows_WToolkit_embeddedDispose(JNIEnv *env, jclass cls)\n-{\n-    TRY;\n-\n-    BOOL retval = AwtToolkit::GetInstance().Dispose();\n-    AwtToolkit::GetInstance().SetPeer(env, NULL);\n-    return retval;\n-\n-    CATCH_BAD_ALLOC_RET(JNI_FALSE);\n-}\n-\n-\/*\n- * Class:     sun_awt_windows_WToolkit\n- * Method:    embeddedEventLoopIdleProcessing\n- * Signature: ()V\n- *\/\n-JNIEXPORT void JNICALL\n-Java_sun_awt_windows_WToolkit_embeddedEventLoopIdleProcessing(JNIEnv *env,\n-    jobject self)\n-{\n-    VerifyWindowMoveLockReleased();\n-}\n-\n-\n@@ -2560,1 +2497,1 @@\n-    return AwtToolkit::GetInstance().Initialize(TRUE);\n+    return AwtToolkit::GetInstance().Initialize();\n@@ -2575,2 +2512,0 @@\n-    DASSERT(AwtToolkit::GetInstance().localPump());\n-\n@@ -3234,1 +3169,0 @@\n-\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_Toolkit.cpp","additions":3,"deletions":69,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,12 +30,0 @@\n- * There are two ways this DLL can be used: either as a dynamically-\n- * loaded Java native library from the interpreter, or by a Windows-\n- * specific app.  The first manner requires that the Toolkit provide\n- * all support needed so the app can function as a first-class Windows\n- * app, while the second assumes that the app will provide that\n- * functionality.  Which mode this DLL functions in is determined by\n- * which initialization paradigm is used. If the Toolkit is constructed\n- * normally, then the Toolkit will have its own pump. If it is explicitly\n- * initialized for an embedded environment (via a static method on\n- * sun.awt.windows.WToolkit), then it will rely on an external message\n- * pump.\n- *\n@@ -225,1 +213,1 @@\n-    BOOL Initialize(BOOL localPump);\n+    BOOL Initialize();\n@@ -249,1 +237,0 @@\n-    INLINE BOOL localPump() { return m_localPump; }\n@@ -452,1 +439,0 @@\n-    BOOL m_localPump;\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_Toolkit.h","additions":2,"deletions":16,"binary":false,"changes":18,"status":"modified"}]}