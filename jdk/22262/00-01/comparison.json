{"files":[{"patch":"@@ -64,1 +64,12 @@\n-            \"        System.out.println(\\\"Hello from Foo\\\");\",\n+            \"        System.out.println(\\\"Hello from Foo old version \\\");\",\n+            \"    }\",\n+            \"}\",\n+        };\n+        return sts;\n+    }\n+\n+    static String[] getFooNewVersion() {\n+        String[] sts = {\n+            \"class Foo {\",\n+            \"    static {\",\n+            \"        System.out.println(\\\"Hello from Foo new version \\\");\",\n@@ -104,0 +115,2 @@\n+     * META-INF\/versions\/24\/\n+     * META-INF\/versions\/24\/Foo.class\n@@ -109,0 +122,1 @@\n+        File vDir2   = new File(tempDir + File.separator + MAJOR_VERSION_STRING);\n@@ -117,0 +131,3 @@\n+        writeFile(fileFoo, getFooNewVersion());\n+        JarBuilder.compile(vDir2.getAbsolutePath(), fileFoo.getAbsolutePath(), \"--release\", MAJOR_VERSION_STRING);\n+\n@@ -133,1 +150,2 @@\n-            \"--release\", BASE_VERSION_STRING, \"-C\", vDir.getAbsolutePath(), \".\");\n+            \"--release\", BASE_VERSION_STRING, \"-C\", vDir.getAbsolutePath(), \".\",\n+            \"--release\", MAJOR_VERSION_STRING, \"-C\", vDir2.getAbsolutePath(), \".\");\n@@ -137,11 +155,0 @@\n-    static void checkExecOutput(OutputAnalyzer output, String expectedOutput) throws Exception {\n-        try {\n-            TestCommon.checkExec(output, expectedOutput);\n-        } catch (java.lang.RuntimeException re) {\n-            String cause = re.getMessage();\n-            if (!expectedOutput.equals(cause)) {\n-                throw re;\n-            }\n-        }\n-    }\n-\n@@ -150,1 +157,1 @@\n-        \/\/ Foo.class has only one version: base version 9.\n+        \/\/ Foo.class has two version: base version 9 and current major JDK version.\n@@ -152,0 +159,3 @@\n+        \/\/ Since there is no default version for Foo, the class loader will get the\n+        \/\/ highest version (current major JDK version in this case) which is the\n+        \/\/ same or below the current JDK version.\n@@ -169,2 +179,2 @@\n-              \/\/ Foo is loaded from jar since it was modified by CFLH\n-              .shouldContain(\"HELLO from Foo\") \/\/ CFLH changed \"Hello\" to \"HELLO\"\n+              \/\/ New version of Foo is loaded from jar since it was modified by CFLH\n+              .shouldContain(\"HELLO from Foo new version\") \/\/ CFLH changed \"Hello\" to \"HELLO\"\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jvmti\/CFLH\/MultiReleaseJars.java","additions":26,"deletions":16,"binary":false,"changes":42,"status":"modified"}]}