{"files":[{"patch":"@@ -159,0 +159,5 @@\n+  \/\/ normally when the two ids are equal the entry span is 1 but we\n+  \/\/ have a special case when the base and max are both NO_STUBID in\n+  \/\/ which case the entry count is 0. n.b. that only happens in the\n+  \/\/ case where a stub group is empty e.g. when either C1 or C2 is\n+  \/\/ omitted from the build\n@@ -161,1 +166,4 @@\n-  assert(idx2 >= 0 && idx2 >= idx1, \"bad stub ids first %d and second %d\", idx1, idx2);\n+  assert((idx1 < 0 && idx2  < 0) || (idx1 >= 0 && idx2 >= idx1), \"bad stub ids first %d and second %d\", idx1, idx2);\n+  if (idx1 < 0) {\n+    return 0;\n+  }\n@@ -167,0 +175,5 @@\n+  \/\/ normally when the two ids are equal the entry span is 1 but we\n+  \/\/ have a special case when the base and max are both NO_BLOBID in\n+  \/\/ which case the entry count is 0. n.b. that only happens in the\n+  \/\/ case where a stub group is empty e.g. when either C1 or C2 is\n+  \/\/ omitted from the build\n@@ -169,1 +182,4 @@\n-  assert(idx2 >= 0 && idx2 >= idx1, \"bad blob ids first %d and second %d\", idx1, idx2);\n+  assert((idx1 < 0 && idx2  < 0) || (idx1 >= 0 && idx2 >= idx1), \"bad blob ids first %d and second %d\", idx1, idx2);\n+  if (idx1 < 0) {\n+    return 0;\n+  }\n@@ -908,2 +924,2 @@\n-  \/\/ delegate\n-  return stub_base(blob_base(stub_group));\n+  BlobId base = blob_base(stub_group);\n+  return (base == BlobId::NO_BLOBID ? StubId::NO_STUBID : stub_base(base));\n@@ -913,2 +929,2 @@\n-  \/\/ delegate\n-  return stub_max(blob_max(stub_group));\n+  BlobId base = blob_max(stub_group);\n+  return (base == BlobId::NO_BLOBID ? StubId::NO_STUBID : stub_max(base));\n","filename":"src\/hotspot\/share\/runtime\/stubInfo.cpp","additions":22,"deletions":6,"binary":false,"changes":28,"status":"modified"}]}