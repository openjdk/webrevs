{"files":[{"patch":"@@ -1500,1 +1500,3 @@\n-      assert(bt == T_SHORT, \"\");\n+      if (!is_signed || (bt != T_SHORT)) {\n+        return 0;\n+      }\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,165 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+* @test\n+* @key randomness\n+* @bug 8350835\n+* @summary Test bug fix for JDK-8350835 discovered through Template Framework\n+* @library \/test\/lib \/\n+* @run main\/othervm compiler.vectorization.TestFloat16ToFloatConv\n+*\/\n+\n+package compiler.vectorization;\n+\n+import compiler.lib.ir_framework.*;\n+import jdk.test.lib.Utils;\n+import java.util.Random;\n+\n+public class TestFloat16ToFloatConv {\n+    private static final Random RANDOM = Utils.getRandomInstance();\n+    private static final int SIZE = 1024;\n+    private static byte[] aB = new byte[SIZE];\n+    private static char[] aC = new char[SIZE];\n+    private static short[] aS = new short[SIZE];\n+    private static int[] aI = new int[SIZE];\n+    private static long[] aL = new long[SIZE];\n+    private static float[] goldB, goldC, goldS, goldI, goldL;\n+\n+    static {\n+        for (int i = 0; i < aB.length; i++) {\n+            aB[i] = (byte)RANDOM.nextInt();\n+            aC[i] = (char)RANDOM.nextInt();\n+            aS[i] = (short)RANDOM.nextInt();\n+            aI[i] = RANDOM.nextInt();\n+            aL[i] = RANDOM.nextLong();\n+        }\n+        goldB = testByteKernel(aB);\n+        goldC = testCharKernel(aC);\n+        goldS = testShortKernel(aS);\n+        goldI = testIntKernel(aI);\n+        goldL = testLongKernel(aL);\n+    }\n+\n+    @Test\n+    \/\/ Not vectorized due to JDK-8350835\n+    @IR(failOn = { IRNode.VECTOR_CAST_HF2F })\n+    public static float[] testByteKernel(byte[] barr) {\n+        float[] res = new float[barr.length];\n+        for (int i = 0; i < barr.length; i++) {\n+            res[i] = Float.float16ToFloat(barr[i]);\n+        }\n+        return res;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.VECTOR_CAST_HF2F, \"> 0\"},\n+        applyIfOr = {\"UseCompactObjectHeaders\", \"false\", \"AlignVector\", \"false\"},\n+        applyIfPlatformOr = {\"x64\", \"true\", \"aarch64\", \"true\", \"riscv64\", \"true\"},\n+        applyIfCPUFeatureOr = {\"f16c\", \"true\", \"avx512f\", \"true\", \"zvfh\", \"true\", \"asimd\", \"true\", \"sve\", \"true\"})\n+    public static float[] testCharKernel(char[] carr) {\n+        float[] res = new float[carr.length];\n+        for (int i = 0; i < carr.length; i++) {\n+            res[i] = Float.float16ToFloat((short)carr[i]);\n+        }\n+        return res;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.VECTOR_CAST_HF2F, \"> 0\"},\n+        applyIfOr = {\"UseCompactObjectHeaders\", \"false\", \"AlignVector\", \"false\"},\n+        applyIfPlatformOr = {\"x64\", \"true\", \"aarch64\", \"true\", \"riscv64\", \"true\"},\n+        applyIfCPUFeatureOr = {\"f16c\", \"true\", \"avx512f\", \"true\", \"zvfh\", \"true\", \"asimd\", \"true\", \"sve\", \"true\"})\n+    public static float[] testShortKernel(short[] sarr) {\n+        float[] res = new float[sarr.length];\n+        for (int i = 0; i < sarr.length; i++) {\n+            res[i] = Float.float16ToFloat(sarr[i]);\n+        }\n+        return res;\n+    }\n+\n+    @Test\n+    \/\/ Not vectorized due to JDK-8350835\n+    @IR(failOn = { IRNode.VECTOR_CAST_HF2F })\n+    public static float[] testIntKernel(int[] iarr) {\n+        float[] res = new float[iarr.length];\n+        for (int i = 0; i < iarr.length; i++) {\n+            res[i] = Float.float16ToFloat((short)iarr[i]);\n+        }\n+        return res;\n+    }\n+\n+    @Test\n+    \/\/ Not vectorized due to JDK-8350835\n+    @IR(failOn = { IRNode.VECTOR_CAST_HF2F })\n+    public static float[] testLongKernel(long[] larr) {\n+        float[] res = new float[larr.length];\n+        for (int i = 0; i < larr.length; i++) {\n+            res[i] = Float.float16ToFloat((short)larr[i]);\n+        }\n+        return res;\n+    }\n+\n+    public static void checkResult(float[] res, float[] gold) {\n+        for (int i = 0; i < res.length; i++) {\n+            if (Float.floatToIntBits(res[i]) != Float.floatToIntBits(gold[i])) {\n+                throw new RuntimeException(\"wrong value: \" + Float.floatToRawIntBits(res[i]) + \" \" + Float.floatToRawIntBits(gold[i]));\n+            }\n+        }\n+    }\n+\n+    @Run(test = {\"testByteKernel\"})\n+    public static void testByte() {\n+        float[] farr = testByteKernel(aB);\n+        checkResult(farr, goldB);\n+    }\n+\n+    @Run(test = {\"testCharKernel\"})\n+    public static void testChar() {\n+        float[] farr = testCharKernel(aC);\n+        checkResult(farr, goldC);\n+    }\n+\n+    @Run(test = {\"testShortKernel\"})\n+    public static void testShort() {\n+        float[] farr = testShortKernel(aS);\n+        checkResult(farr, goldS);\n+    }\n+\n+    @Run(test = {\"testIntKernel\"})\n+    public static void testInt() {\n+        float[] farr = testIntKernel(aI);\n+        checkResult(farr, goldI);\n+    }\n+\n+    @Run(test = {\"testLongKernel\"})\n+    public static void testLong() {\n+        float[] farr = testLongKernel(aL);\n+        checkResult(farr, goldL);\n+    }\n+\n+    public static void main(String [] args) {\n+        TestFramework.run(TestFloat16ToFloatConv.class);\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestFloat16ToFloatConv.java","additions":165,"deletions":0,"binary":false,"changes":165,"status":"added"}]}