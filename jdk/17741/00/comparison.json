{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -83,2 +83,2 @@\n-    if (is_neutral()) {   \/\/ last bits = 01\n-      st->print(\"is_neutral\");\n+    if (is_unlocked()) {   \/\/ last bits = 01\n+      st->print(\"is_unlocked\");\n","filename":"src\/hotspot\/share\/oops\/markWord.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -146,1 +146,1 @@\n-  bool is_neutral()  const {\n+  bool is_neutral()  const {  \/\/ Not locked, or marked - a \"clean\" neutral state\n","filename":"src\/hotspot\/share\/oops\/markWord.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,1 @@\n-  \/\/ case, the displaced_header() is unlocked\/is_neutral, because the\n+  \/\/ case, the displaced_header() is unlocked\/neutral, because the\n@@ -46,1 +46,1 @@\n-  \/\/ does not matter, this inflation will just a no-op. For other cases,\n+  \/\/ does not matter, this inflation will just be a no-op. For other cases,\n@@ -66,1 +66,1 @@\n-  \/\/ is small (given the support for inflated fast-path locking in the fast_lock, etc)\n+  \/\/ small (given the support for inflated fast-path locking in the fast_lock, etc)\n@@ -70,1 +70,1 @@\n-    if (displaced_header().is_neutral()) {\n+    if (displaced_header().is_unlocked()) {\n","filename":"src\/hotspot\/share\/runtime\/basicLock.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,2 @@\n+  \/\/ This is either the actual displaced header from a locked object, or\n+  \/\/ a sentinel zero value indicating a recursive stack-lock.\n@@ -49,1 +51,1 @@\n-  \/\/ move a basic lock (used during deoptimization\n+  \/\/ move a basic lock (used during deoptimization)\n","filename":"src\/hotspot\/share\/runtime\/basicLock.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -605,1 +605,1 @@\n-      while (mark.is_neutral()) {\n+      while (mark.is_unlocked()) {\n@@ -628,1 +628,1 @@\n-      if (mark.is_neutral()) {\n+      if (mark.is_unlocked()) {\n@@ -699,1 +699,1 @@\n-          assert(!mark.is_neutral(), \"invariant\");\n+          assert(!mark.is_unlocked(), \"invariant\");\n@@ -1012,1 +1012,1 @@\n-    if (mark.is_neutral() || (LockingMode == LM_LIGHTWEIGHT && mark.is_fast_locked())) {\n+    if (mark.is_unlocked() || (LockingMode == LM_LIGHTWEIGHT && mark.is_fast_locked())) {\n@@ -1142,1 +1142,1 @@\n-  assert(mark.is_neutral(), \"sanity check\");\n+  assert(mark.is_unlocked(), \"sanity check\");\n@@ -1175,1 +1175,1 @@\n-  \/\/ assert(mark.is_neutral(), \"sanity check\");\n+  \/\/ assert(mark.is_unlocked(), \"sanity check\");\n@@ -1426,1 +1426,1 @@\n-    \/\/ *  neutral      - Aggressively inflate the object.\n+    \/\/ *  unlocked     - Aggressively inflate the object.\n@@ -1604,1 +1604,1 @@\n-    \/\/ CASE: neutral\n+    \/\/ CASE: unlocked\n@@ -1613,3 +1613,1 @@\n-    \/\/ Catch if the object's header is not neutral (not locked and\n-    \/\/ not marked is what we care about here).\n-    assert(mark.is_neutral(), \"invariant: header=\" INTPTR_FORMAT, mark.value());\n+    assert(mark.is_unlocked(), \"invariant: header=\" INTPTR_FORMAT, mark.value());\n@@ -1638,1 +1636,1 @@\n-      lsh.print_cr(\"inflate(neutral): object=\" INTPTR_FORMAT \", mark=\"\n+      lsh.print_cr(\"inflate(unlocked): object=\" INTPTR_FORMAT \", mark=\"\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":10,"deletions":12,"binary":false,"changes":22,"status":"modified"}]}