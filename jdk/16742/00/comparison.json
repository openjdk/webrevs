{"files":[{"patch":"@@ -69,1 +69,1 @@\n-    void implDeregister(int fd) {\n+    void implDeregister(int fd, boolean polled) {\n","filename":"src\/java.base\/aix\/classes\/sun\/nio\/ch\/PollsetPoller.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,2 +65,5 @@\n-    void implDeregister(int fdVal) {\n-        EPoll.ctl(epfd, EPOLL_CTL_DEL, fdVal, 0);\n+    void implDeregister(int fdVal, boolean polled) {\n+        \/\/ event is disabled if already polled\n+        if (!polled) {\n+            EPoll.ctl(epfd, EPOLL_CTL_DEL, fdVal, 0);\n+        }\n","filename":"src\/java.base\/linux\/classes\/sun\/nio\/ch\/EPollPoller.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,2 +59,5 @@\n-    void implDeregister(int fdVal) {\n-        KQueue.register(kqfd, fdVal, filter, EV_DELETE);\n+    void implDeregister(int fdVal, boolean polled) {\n+        \/\/ event was deleted if already polled\n+        if (!polled) {\n+            KQueue.register(kqfd, fdVal, filter, EV_DELETE);\n+        }\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/ch\/KQueuePoller.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -97,1 +97,2 @@\n-     * Register the file descriptor.\n+     * Register the file descriptor. The registration is \"one shot\", meaning it should\n+     * be polled at most once.\n@@ -103,0 +104,1 @@\n+     * @param polled true if the file descriptor has already been polled\n@@ -104,1 +106,1 @@\n-    abstract void implDeregister(int fdVal);\n+    abstract void implDeregister(int fdVal, boolean polled);\n@@ -185,1 +187,2 @@\n-     * Registers the file descriptor.\n+     * Registers the file descriptor to be polled at most once when the file descriptor\n+     * is ready for I\/O.\n@@ -188,1 +191,1 @@\n-        Thread previous = map.putIfAbsent(fdVal, Thread.currentThread());\n+        Thread previous = map.put(fdVal, Thread.currentThread());\n@@ -194,1 +197,1 @@\n-     * Deregister the file descriptor, a no-op if already polled.\n+     * Deregister the file descriptor so that the file descriptor is not polled.\n@@ -198,4 +201,3 @@\n-        assert previous == null || previous == Thread.currentThread();\n-        if (previous != null) {\n-            implDeregister(fdVal);\n-        }\n+        boolean polled = (previous == null);\n+        assert polled || previous == Thread.currentThread();\n+        implDeregister(fdVal, polled);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/Poller.java","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -132,8 +132,1 @@\n-                        if (sa instanceof InetSocketAddress\n-                                && Thread.currentThread().isVirtual()) {\n-                            \/\/ workaround \"lost event\" issue on older releases of Windows\n-                            sc1 = SocketChannel.open();\n-                            sc1.socket().connect(sa, 10_000);\n-                        } else {\n-                            sc1 = SocketChannel.open(sa);\n-                        }\n+                        sc1 = SocketChannel.open(sa);\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/PipeImpl.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,4 +49,1 @@\n-        \/\/ re-arm\n-        int err = WEPoll.ctl(handle, EPOLL_CTL_MOD, fdVal, (event | EPOLLONESHOT));\n-        if (err == ENOENT)\n-            err = WEPoll.ctl(handle, EPOLL_CTL_ADD, fdVal, (event | EPOLLONESHOT));\n+        int err = WEPoll.ctl(handle, EPOLL_CTL_ADD, fdVal, (event | EPOLLONESHOT));\n@@ -58,1 +55,1 @@\n-    void implDeregister(int fdVal) {\n+    void implDeregister(int fdVal, boolean polled) {\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/WEPollPoller.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -688,1 +688,1 @@\n-                    s1.connect(listener.getLocalSocketAddress(), 10_000);\n+                    s1.connect(listener.getLocalSocketAddress());\n","filename":"test\/jdk\/java\/net\/vthread\/BlockingSocketOps.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -811,1 +811,1 @@\n-                    sc1.socket().connect(listener.getLocalAddress(), 10_000);\n+                    sc1.socket().connect(listener.getLocalAddress());\n","filename":"test\/jdk\/java\/nio\/channels\/vthread\/BlockingChannelOps.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}