{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -197,0 +197,8 @@\n+        \/**\n+         * This identifies the default button in a window\/dialog.\n+         * The name PULSED has become misleading over time.\n+         * The default button used to continually pulse up until\n+         * Mac OS 10.9, but now there is no pulsing animation.\n+         * We still need this State constant to render default\n+         * buttons correctly, though.\n+         *\/\n","filename":"src\/java.desktop\/macosx\/classes\/apple\/laf\/JRSUIConstants.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -205,6 +205,0 @@\n-        protected State getButtonState(final AbstractButton b, final ButtonModel model) {\n-            final State state = super.getButtonState(b, model);\n-            painter.state.set(state == State.PULSED ? Animating.YES : Animating.NO);\n-            return state;\n-        }\n-\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaButtonBorder.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,2 +61,0 @@\n-import javax.swing.event.AncestorEvent;\n-import javax.swing.event.AncestorListener;\n@@ -228,2 +226,0 @@\n-\n-            b.addAncestorListener(listener);\n@@ -255,1 +251,0 @@\n-        final AquaButtonListener listener = (AquaButtonListener)b.getClientProperty(this);\n@@ -257,3 +252,0 @@\n-        if (listener != null) {\n-            b.removeAncestorListener(listener);\n-        }\n@@ -594,1 +586,1 @@\n-    class AquaButtonListener extends BasicButtonListener implements AncestorListener {\n+    class AquaButtonListener extends BasicButtonListener {\n@@ -661,22 +653,0 @@\n-\n-        public void ancestorMoved(final AncestorEvent e) {}\n-\n-        public void ancestorAdded(final AncestorEvent e) {\n-            updateDefaultButton();\n-        }\n-\n-        public void ancestorRemoved(final AncestorEvent e) {\n-            updateDefaultButton();\n-        }\n-\n-        protected void updateDefaultButton() {\n-            if (!(b instanceof JButton)) return;\n-            if (!((JButton)b).isDefaultButton()) return;\n-\n-            final JRootPane rootPane = b.getRootPane();\n-            if (rootPane == null) return;\n-\n-            final RootPaneUI ui = rootPane.getUI();\n-            if (!(ui instanceof AquaRootPaneUI)) return;\n-            ((AquaRootPaneUI)ui).updateDefaultButton(rootPane);\n-        }\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaButtonUI.java","additions":2,"deletions":32,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,3 +43,0 @@\n- * The JRootPane manages the default button.  There can be only one active rootpane,\n- * and one default button, so we need only one timer\n- *\n@@ -50,4 +47,0 @@\n-\n-    static final int kDefaultButtonPaintDelayBetweenFrames = 50;\n-    JButton fCurrentDefaultButton = null;\n-    Timer fTimer = null;\n@@ -64,4 +57,0 @@\n-        if (c.isShowing() && c.isEnabled()) {\n-            updateDefaultButton((JRootPane)c);\n-        }\n-\n@@ -95,1 +84,0 @@\n-        stopTimer();\n@@ -164,67 +152,0 @@\n-    \/**\n-     * Invoked when a property changes on the root pane. If the event\n-     * indicates the {@code defaultButton} has changed, this will\n-     * update the animation.\n-     * If the enabled state changed, it will start or stop the animation\n-     *\/\n-    public void propertyChange(final PropertyChangeEvent e) {\n-        super.propertyChange(e);\n-\n-        final String prop = e.getPropertyName();\n-        if (\"defaultButton\".equals(prop) || \"temporaryDefaultButton\".equals(prop)) {\n-            \/\/ Change the animating button if this root is showing and enabled\n-            \/\/ otherwise do nothing - someone else may be active\n-            final JRootPane root = (JRootPane)e.getSource();\n-\n-            if (root.isShowing() && root.isEnabled()) {\n-                updateDefaultButton(root);\n-            }\n-        } else if (\"enabled\".equals(prop) || AquaFocusHandler.FRAME_ACTIVE_PROPERTY.equals(prop)) {\n-            final JRootPane root = (JRootPane)e.getSource();\n-            if (root.isShowing()) {\n-                if (((Boolean)e.getNewValue()).booleanValue()) {\n-                    updateDefaultButton((JRootPane)e.getSource());\n-                } else {\n-                    stopTimer();\n-                }\n-            }\n-        }\n-    }\n-\n-    synchronized void stopTimer() {\n-        if (fTimer != null) {\n-            fTimer.stop();\n-            fTimer = null;\n-        }\n-    }\n-\n-    synchronized void updateDefaultButton(final JRootPane root) {\n-        final JButton button = root.getDefaultButton();\n-        \/\/System.err.println(\"in updateDefaultButton button = \" + button);\n-        fCurrentDefaultButton = button;\n-        stopTimer();\n-        if (button != null) {\n-            fTimer = new Timer(kDefaultButtonPaintDelayBetweenFrames, new DefaultButtonPainter(root));\n-            fTimer.start();\n-        }\n-    }\n-\n-    class DefaultButtonPainter implements ActionListener {\n-        JRootPane root;\n-\n-        public DefaultButtonPainter(final JRootPane root) {\n-            this.root = root;\n-        }\n-\n-        public void actionPerformed(final ActionEvent e) {\n-            final JButton defaultButton = root.getDefaultButton();\n-            if ((defaultButton != null) && defaultButton.isShowing()) {\n-                if (defaultButton.isEnabled()) {\n-                    defaultButton.repaint();\n-                }\n-            } else {\n-                stopTimer();\n-            }\n-        }\n-    }\n-\n@@ -252,12 +173,0 @@\n-\n-        \/\/ The root pane has been added to the hierarchy.  If it's enabled update the default\n-        \/\/ button to start the throbbing.  Since the UI is a singleton make sure the root pane\n-        \/\/ we are checking has a default button before calling update otherwise we will stop\n-        \/\/ throbbing the current default button.\n-        final JComponent comp = event.getComponent();\n-        if (comp instanceof JRootPane) {\n-            final JRootPane rp = (JRootPane)comp;\n-            if (rp.isEnabled() && rp.getDefaultButton() != null) {\n-                updateDefaultButton((JRootPane)comp);\n-            }\n-        }\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaRootPaneUI.java","additions":1,"deletions":92,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -0,0 +1,234 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @key headful\n+ * @bug 8344697\n+ * @summary Default button in AquaRootPaneUI should paint special background color\n+ * @requires (os.family == \"mac\")\n+ * @run main RootPaneDefaultButtonTest\n+ *\/\n+\n+import javax.swing.*;\n+import javax.swing.border.*;\n+import java.awt.*;\n+import java.awt.event.*;\n+\n+\/**\n+ * This presents two dialogs, each with two possible default buttons. The background color of the\n+ * default button should change based on which radio button is selected.\n+ * <p>\n+ * Note we've never expected this test to fail. This test was introduced because the resolution\n+ * to JDK-8344697 involved removing code, and we wanted to double-check that the removed code\n+ * didn't negatively affect how default buttons are repainted.\n+ *\/\n+public class RootPaneDefaultButtonTest extends JDialog {\n+\n+    record ButtonRenderingExpectation(JButton button, boolean appearAsDefault) {}\n+\n+    public static void main(String[] args) throws Exception {\n+        if (!System.getProperty(\"os.name\").contains(\"OS X\")) {\n+            System.out.println(\"This test is for MacOS only. Automatically passed on: \" + System.getProperty(\"os.name\"));\n+            return;\n+        }\n+\n+        RootPaneDefaultButtonTest window1 = new RootPaneDefaultButtonTest();\n+        RootPaneDefaultButtonTest window2 = new RootPaneDefaultButtonTest();\n+\n+        SwingUtilities.invokeAndWait(new Runnable() {\n+            @Override\n+            public void run() {\n+                Rectangle r1 = new Rectangle(0, 20,\n+                        window1.getWidth(), window1.getHeight());\n+                window1.setBounds(r1);\n+\n+                Rectangle r2 = new Rectangle((int) (r1.getMaxX() + 10), 20,\n+                        window2.getWidth(), window2.getHeight());\n+                window2.setBounds(r2);\n+\n+                window1.setVisible(true);\n+                window2.setVisible(true);\n+            }\n+        });\n+\n+        Robot robot = new Robot();\n+\n+        test(robot, window1.radioButton1,\n+                new ButtonRenderingExpectation(window1.button1, true),\n+                new ButtonRenderingExpectation(window1.button2, false),\n+                new ButtonRenderingExpectation(window2.button1, false),\n+                new ButtonRenderingExpectation(window2.button2, false));\n+\n+        test(robot, window1.radioButton2,\n+                new ButtonRenderingExpectation(window1.button1, false),\n+                new ButtonRenderingExpectation(window1.button2, true),\n+                new ButtonRenderingExpectation(window2.button1, false),\n+                new ButtonRenderingExpectation(window2.button2, false));\n+\n+        test(robot, window1.radioButton3,\n+                new ButtonRenderingExpectation(window1.button1, false),\n+                new ButtonRenderingExpectation(window1.button2, false),\n+                new ButtonRenderingExpectation(window2.button1, false),\n+                new ButtonRenderingExpectation(window2.button2, false));\n+\n+        test(robot, window2.radioButton1,\n+                new ButtonRenderingExpectation(window1.button1, false),\n+                new ButtonRenderingExpectation(window1.button2, false),\n+                new ButtonRenderingExpectation(window2.button1, true),\n+                new ButtonRenderingExpectation(window2.button2, false));\n+\n+        test(robot, window2.radioButton2,\n+                new ButtonRenderingExpectation(window1.button1, false),\n+                new ButtonRenderingExpectation(window1.button2, false),\n+                new ButtonRenderingExpectation(window2.button1, false),\n+                new ButtonRenderingExpectation(window2.button2, true));\n+\n+        test(robot, window2.radioButton3,\n+                new ButtonRenderingExpectation(window1.button1, false),\n+                new ButtonRenderingExpectation(window1.button2, false),\n+                new ButtonRenderingExpectation(window2.button1, false),\n+                new ButtonRenderingExpectation(window2.button2, false));\n+\n+        System.out.println(\"Test passed successfully\");\n+    }\n+\n+    private static void test(Robot robot, AbstractButton buttonToClick, ButtonRenderingExpectation... expectations) throws Exception {\n+        robot.delay(100);\n+\n+        robot.mouseMove(buttonToClick.getLocationOnScreen().x + buttonToClick.getSize().width\/2,\n+                buttonToClick.getLocationOnScreen().y + buttonToClick.getSize().height\/2 );\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.delay(20);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+        robot.delay(100);\n+\n+        \/\/ the colors may change depending on your system's appearance. Depending\n+        \/\/ on how you've configured \"Appearance\" in the System Settings app: the\n+        \/\/ default button may be blue (the default), red, purple, etc. So instead\n+        \/\/ of checking for a specific color: we'll make sure 3-4 are the same color,\n+        \/\/ and one is significantly different.\n+        Color defaultColor = null;\n+        Color nonDefaultColor = null;\n+\n+        for (ButtonRenderingExpectation expectation : expectations) {\n+            int x = expectation.button.getLocationOnScreen().x + 20;\n+            int y = expectation.button.getLocationOnScreen().y + 10;\n+\n+            \/\/ this mouseMove is optional, but it helps debug this test to see where\n+            \/\/ we're sampling the pixel color from:\n+            robot.mouseMove(x, y);\n+\n+            Color c = robot.getPixelColor(x, y);\n+            if (expectation.appearAsDefault) {\n+                if (defaultColor == null) {\n+                    defaultColor = c;\n+                } else {\n+                    throw new IllegalStateException(\"there should only be at most 1 default button sampled\");\n+                }\n+            } else {\n+                if (nonDefaultColor == null) {\n+                    nonDefaultColor = c;\n+                } else if (!isSimilar(nonDefaultColor, c)) {\n+                    throw new IllegalStateException(\"these two colors should match: \" + c + \", \" + nonDefaultColor);\n+                }\n+            }\n+        }\n+\n+        if (defaultColor != null && isSimilar(defaultColor, nonDefaultColor)) {\n+            throw new IllegalStateException(\"The default button and non-default buttons should look different: \" + defaultColor + \" matches \" + nonDefaultColor);\n+        }\n+    }\n+\n+    private static boolean isSimilar(Color c1, Color c2) {\n+        if (Math.abs(c1.getRed() - c2.getRed()) > 15) {\n+            return false;\n+        }\n+        if (Math.abs(c1.getGreen() - c2.getGreen()) > 15) {\n+            return false;\n+        }\n+        if (Math.abs(c1.getBlue() - c2.getBlue()) > 15) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    JRadioButton radioButton1 = new JRadioButton(\"\\\"Button 1\\\" is the default button\");\n+    JRadioButton radioButton2 = new JRadioButton(\"\\\"Button 2\\\" is the default button\");\n+    JRadioButton radioButton3 = new JRadioButton(\"No default button\");\n+\n+    JButton button1 = new JButton(\"Button 1\");\n+    JButton button2 = new JButton(\"Button 2\");\n+\n+    public RootPaneDefaultButtonTest() {\n+        getContentPane().setLayout(new BorderLayout());\n+        getContentPane().add(createRadioButtonPanel(), BorderLayout.NORTH);\n+        getContentPane().add(createPushButtonRow(), BorderLayout.SOUTH);\n+        pack();\n+\n+        radioButton1.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                getRootPane().setDefaultButton(button1);\n+            }\n+        });\n+\n+        radioButton2.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                getRootPane().setDefaultButton(button2);\n+            }\n+        });\n+\n+        radioButton3.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                getRootPane().setDefaultButton(null);\n+            }\n+        });\n+\n+        ButtonGroup g = new ButtonGroup();\n+        g.add(radioButton1);\n+        g.add(radioButton2);\n+        g.add(radioButton3);\n+        radioButton1.doClick();\n+    }\n+\n+    private JPanel createPushButtonRow() {\n+        JPanel p = new JPanel(new GridLayout(1, 2));\n+        p.add(button1);\n+        p.add(button2);\n+        p.setBorder(new EmptyBorder(5,5,5,5));\n+        return p;\n+    }\n+\n+    private JPanel createRadioButtonPanel() {\n+        JPanel p = new JPanel(new GridLayout(3, 1));\n+        p.add(radioButton1);\n+        p.add(radioButton2);\n+        p.add(radioButton3);\n+        p.setBorder(new EmptyBorder(5,5,5,5));\n+        return p;\n+    }\n+}\n","filename":"test\/jdk\/com\/apple\/laf\/RootPane\/RootPaneDefaultButtonTest.java","additions":234,"deletions":0,"binary":false,"changes":234,"status":"added"}]}