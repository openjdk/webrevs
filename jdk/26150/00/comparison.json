{"files":[{"patch":"@@ -63,1 +63,1 @@\n-  address reloc_destination(address orig_address);\n+  address reloc_destination();\n@@ -91,1 +91,1 @@\n-  assert(cb && cb->is_nmethod(), \"sanity\");\n+  assert(cb != nullptr && cb->is_nmethod(), \"nmethod expected\");\n@@ -99,1 +99,1 @@\n-address NativeFarCall::reloc_destination(address orig_address) {\n+address NativeFarCall::reloc_destination() {\n@@ -101,0 +101,1 @@\n+  assert(NativeFarCall::is_at(call_addr), \"unexpected code at call site\");\n@@ -103,6 +104,2 @@\n-  assert(code != nullptr, \"Could not find the containing code blob\");\n-\n-  address stub_addr = nullptr;\n-  if (code != nullptr && code->is_nmethod()) {\n-    stub_addr = trampoline_stub_Relocation::get_trampoline_for(call_addr, (nmethod*)code);\n-  }\n+  assert(code != nullptr && code->is_nmethod(), \"nmethod expected\");\n+  nmethod* nm = code->as_nmethod();\n@@ -110,0 +107,1 @@\n+  address stub_addr = trampoline_stub_Relocation::get_trampoline_for(call_addr, nm);\n@@ -113,0 +111,1 @@\n+\n@@ -138,3 +137,0 @@\n-  address call_addr = addr_at(0);\n-  assert(NativeFarCall::is_at(call_addr), \"unexpected code at call site\");\n-\n@@ -142,1 +138,0 @@\n-\n@@ -159,2 +154,3 @@\n-  if (code != nullptr && code->is_nmethod()) {\n-    stub_addr = trampoline_stub_Relocation::get_trampoline_for(call_addr, (nmethod*)code);\n+  if (code->is_nmethod()) {\n+    nmethod* nm = code->as_nmethod();\n+    stub_addr = trampoline_stub_Relocation::get_trampoline_for(call_addr, nm);\n@@ -162,1 +158,0 @@\n-\n@@ -212,1 +207,1 @@\n-      (MacroAssembler::extract_rd(addr + 2 * instr_size)  == x1)) {\n+      (MacroAssembler::extract_rd(addr + 2 * instr_size)   == x1)) {\n@@ -241,2 +236,2 @@\n-address NativeCall::reloc_destination(address orig_address) {\n-  return NativeFarCall::at(addr_at(0))->reloc_destination(orig_address);\n+address NativeCall::reloc_destination() {\n+  return NativeFarCall::at(addr_at(0))->reloc_destination();\n","filename":"src\/hotspot\/cpu\/riscv\/nativeInst_riscv.cpp","additions":14,"deletions":19,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -137,1 +137,1 @@\n-  address reloc_destination(address orig_address);\n+  address reloc_destination();\n","filename":"src\/hotspot\/cpu\/riscv\/nativeInst_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -75,6 +75,6 @@\n-  assert(is_call(), \"should be an address instruction here\");\n-  if (NativeCall::is_at(addr())) {\n-    return nativeCall_at(addr())->reloc_destination(orig_addr);\n-  }\n-  \/\/ Non call reloc\n-  if (orig_addr != nullptr) {\n+  assert(is_call(), \"should be a call here\");\n+  if (orig_addr == nullptr) {\n+    if (NativeCall::is_at(addr())) {\n+      return nativeCall_at(addr())->reloc_destination();\n+    }\n+  } else {\n@@ -94,1 +94,1 @@\n-  assert(is_call(), \"should be an address instruction here\");\n+  assert(is_call(), \"should be a call here\");\n@@ -96,4 +96,5 @@\n-    NativeCall* nc = nativeCall_at(addr());\n-    if (nc->reloc_set_destination(x)) {\n-      return;\n-    }\n+    NativeCall* call = nativeCall_at(addr());\n+    call->reloc_set_destination(x);\n+  } else {\n+    MacroAssembler::pd_patch_instruction_size(addr(), x);\n+    assert(pd_call_destination(addr()) == x, \"fail in reloc\");\n@@ -101,3 +102,0 @@\n-  MacroAssembler::pd_patch_instruction_size(addr(), x);\n-  address pd_call = pd_call_destination(addr());\n-  assert(pd_call == x, \"fail in reloc\");\n","filename":"src\/hotspot\/cpu\/riscv\/relocInfo_riscv.cpp","additions":12,"deletions":14,"binary":false,"changes":26,"status":"modified"}]}