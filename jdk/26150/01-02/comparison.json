{"files":[{"patch":"@@ -69,1 +69,1 @@\n-  bool set_destination_mt_safe(address dest, bool assert_lock = true);\n+  bool set_destination_mt_safe(address dest);\n@@ -105,1 +105,0 @@\n-  nmethod* nm = code->as_nmethod();\n@@ -107,1 +106,1 @@\n-  address stub_addr = trampoline_stub_Relocation::get_trampoline_for(call_addr, nm);\n+  address stub_addr = trampoline_stub_Relocation::get_trampoline_for(call_addr, code->as_nmethod());\n@@ -130,1 +129,1 @@\n-bool NativeFarCall::set_destination_mt_safe(address dest, bool assert_lock) {\n+bool NativeFarCall::set_destination_mt_safe(address dest) {\n@@ -132,2 +131,1 @@\n-  assert(!assert_lock ||\n-         (CodeCache_lock->is_locked() || SafepointSynchronize::is_at_safepoint()) ||\n+  assert((CodeCache_lock->is_locked() || SafepointSynchronize::is_at_safepoint()) ||\n@@ -155,2 +153,1 @@\n-    nmethod* nm = code->as_nmethod();\n-    stub_addr = trampoline_stub_Relocation::get_trampoline_for(call_addr, nm);\n+    stub_addr = trampoline_stub_Relocation::get_trampoline_for(call_addr, code->as_nmethod());\n@@ -252,2 +249,2 @@\n-bool NativeCall::set_destination_mt_safe(address dest, bool assert_lock) {\n-  return NativeFarCall::at(addr_at(0))->set_destination_mt_safe(dest, assert_lock);\n+bool NativeCall::set_destination_mt_safe(address dest) {\n+  return NativeFarCall::at(addr_at(0))->set_destination_mt_safe(dest);\n","filename":"src\/hotspot\/cpu\/riscv\/nativeInst_riscv.cpp","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -144,1 +144,1 @@\n-  bool set_destination_mt_safe(address dest, bool assert_lock = true);\n+  bool set_destination_mt_safe(address dest);\n","filename":"src\/hotspot\/cpu\/riscv\/nativeInst_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}