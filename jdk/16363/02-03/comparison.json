{"files":[{"patch":"@@ -52,0 +52,16 @@\n+        String[] cpaths = System.getProperty(\"test.classes\", \".\")\n+                                .split(File.pathSeparator);\n+        URL[] urls = new URL[cpaths.length];\n+        for (int i=0; i < cpaths.length; i++) {\n+            urls[i] = Paths.get(cpaths[i]).toUri().toURL();\n+        }\n+\n+        Test loaderMBean = new Test(urls);\n+        Class<?> shadowClass = loaderMBean.loadClass(TestMBean.class.getName());\n+        if (shadowClass == TestMBean.class) {\n+            System.out.println(\"TEST INVALID: MBean got original \" +\n+                               \"TestMBean not shadow\");\n+            System.exit(1);\n+        }\n+        shadowClass = null;\n+\n@@ -53,3 +69,13 @@\n-        ObjectName testName = new ObjectName(\"x:name=Test\");\n-        Test mbean = new Test();\n-        mbs.registerMBean(mbean, testName);\n+        ObjectName loaderMBeanName = new ObjectName(\"x:name=loader\");\n+        mbs.registerMBean(loaderMBean, loaderMBeanName);\n+\n+        ObjectName testName = new ObjectName(\"x:type=test\");\n+        mbs.createMBean(Test.class.getName(), testName, loaderMBeanName);\n+\n+        ClassLoader testLoader = mbs.getClassLoaderFor(testName);\n+        if (testLoader != loaderMBean) {\n+            System.out.println(\"TEST INVALID: MBean's class loader is not \" +\n+                               \"MLet: \" + testLoader);\n+            System.exit(1);\n+        }\n+        testLoader = null;\n@@ -85,1 +111,1 @@\n-        WeakReference mbeanRef = new WeakReference(mbean);\n+        WeakReference mbeanRef = new WeakReference(loaderMBean);\n@@ -87,1 +113,2 @@\n-        mbean = null;\n+        mbs.unregisterMBean(loaderMBeanName);\n+        loaderMBean = null;\n@@ -110,4 +137,7 @@\n-    public static class Test implements TestMBean {\n-        public Test() {}\n-        public Test(int x) {}\n-\n+    public static class Test extends URLClassLoader implements TestMBean, PrivateClassLoader {\n+        public Test() {\n+            super(new URL[0], null);\n+        }\n+        public Test(URL[] urls) {\n+            super(urls, null);\n+        }\n","filename":"test\/jdk\/javax\/management\/Introspector\/ClassLeakTest.java","additions":39,"deletions":9,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import java.net.URLClassLoader;\n@@ -50,0 +51,1 @@\n+import javax.management.loading.PrivateClassLoader;\n@@ -63,1 +65,0 @@\n-\n@@ -83,0 +84,11 @@\n+            URL[] urls = new URL[]{new URL(clsLoadPath)};\n+            Loader loader = new Loader(urls);\n+            Class<?> shadowClass = loader.loadClass(TestMXBean.class.getName());\n+\n+            if (shadowClass == TestMXBean.class) {\n+                String message = \"(ERROR) Loader got original TestMXBean, not shadow\";\n+                System.out.println(message);\n+                throw new RuntimeException(message);\n+            }\n+            shadowClass = null;\n+\n@@ -84,0 +96,3 @@\n+            ObjectName loaderName = new ObjectName(\"x:type=myloader\");\n+            mbs.registerMBean(loader, loaderName);\n+\n@@ -85,1 +100,14 @@\n-            ObjectInstance mb = mbs.createMBean(Test.class.getName(), testName);\n+            mbs.createMBean(Test.class.getName(), testName, loaderName);\n+\n+            \/\/ That test fails because the MXBean instance is accessed via\n+            \/\/ a delegate OpenMBean which has\n+            ClassLoader testLoader = mbs.getClassLoaderFor(testName);\n+\n+            if (testLoader != loader) {\n+                System.out.println(\"Loader \" + loader);\n+                String message = \"(ERROR) MXBean's class loader is not Loader: \"\n+                        + testLoader;\n+                System.out.println(message);\n+                throw new RuntimeException(message);\n+            }\n+            testLoader = null;\n@@ -238,1 +266,1 @@\n-            WeakReference<ObjectInstance> mbRef = new WeakReference<>(mb);\n+            WeakReference<Loader> loaderRef = new WeakReference<>(loader);\n@@ -240,1 +268,2 @@\n-            mb = null;\n+            mbs.unregisterMBean(loaderName);\n+            loader = null;\n@@ -245,1 +274,1 @@\n-            for (int i = 0; i < 10000 && mbRef.get() != null; i++) {\n+            for (int i = 0; i < 10000 && loaderRef.get() != null; i++) {\n@@ -250,1 +279,1 @@\n-            if (mbRef.get() == null)\n+            if (loaderRef.get() == null)\n@@ -265,0 +294,8 @@\n+    public static interface LoaderMBean {\n+    }\n+\n+    public static class Loader extends URLClassLoader implements LoaderMBean, PrivateClassLoader {\n+        public Loader(URL[] urls) {\n+            super(urls, null);\n+        }\n+    }\n","filename":"test\/jdk\/javax\/management\/mxbean\/MXBeanLoadingTest1.java","additions":43,"deletions":6,"binary":false,"changes":49,"status":"modified"}]}