{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,3 +47,2 @@\n-     * References the property that specifies the directory where\n-     * the native libraries will be stored before the MLet Service\n-     * loads them into memory.\n+     * References the property that optionally specifies the class name\n+     * of an alternative MBeanServerBuilder.\n@@ -51,1 +50,1 @@\n-     * Property Name: <B>jmx.mlet.library.dir<\/B>\n+     * Property Name: <B>javax.management.builder.initial<\/B>\n@@ -56,9 +55,0 @@\n-    \/**\n-     * References the property that specifies the directory where\n-     * the native libraries will be stored before the MLet Service\n-     * loads them into memory.\n-     * <p>\n-     * Property Name: <B>jmx.mlet.library.dir<\/B>\n-     *\/\n-    public static final String MLET_LIB_DIR = \"jmx.mlet.library.dir\";\n-\n@@ -125,12 +115,0 @@\n-    \/**\n-     * Logger name for MLet service information.\n-     *\/\n-    public static final String MLET_LOGGER_NAME =\n-            \"javax.management.mlet\";\n-\n-    \/**\n-     * Logger for MLet service information.\n-     *\/\n-    public static final Logger MLET_LOGGER =\n-            System.getLogger(MLET_LOGGER_NAME);\n-\n","filename":"src\/java.management\/share\/classes\/com\/sun\/jmx\/defaults\/JmxProperties.java","additions":4,"deletions":26,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2008, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,8 +47,0 @@\n-    \/**\n-     * The default key properties for registering the class loader of the\n-     * MLet service.\n-     * <BR>\n-     * The value is <CODE>type=MLet<\/CODE>.\n-     *\/\n-    public static final String MLET = \"type=MLet\";\n-\n","filename":"src\/java.management\/share\/classes\/com\/sun\/jmx\/defaults\/ServiceName.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -209,12 +209,0 @@\n-                \/* We used to have a special case for \"instanceof\n-                   MLet\" here, where we invoked the method\n-                   loadClass(className, null) to prevent infinite\n-                   recursion.  But the rule whereby the MLet only\n-                   consults loaders that precede it in the CLR (via\n-                   loadClassBefore) means that the recursion can't\n-                   happen, and the test here caused some legitimate\n-                   classloading to fail.  For example, if you have\n-                   dependencies C->D->E with loaders {E D C} in the\n-                   CLR in that order, you would expect to be able to\n-                   load C.  The problem is that while resolving D, CLR\n-                   delegation is disabled, so it can't find E.  *\/\n","filename":"src\/java.management\/share\/classes\/com\/sun\/jmx\/mbeanserver\/ClassLoaderRepositorySupport.java","additions":1,"deletions":13,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,2 +78,1 @@\n- * to create an MBean that is a ClassLoader, which includes MLets, or to\n- * execute the method addURL on an MBean that is an MLet. This prevents\n+ * to create an MBean that is a ClassLoader.  This prevents\n@@ -83,1 +82,1 @@\n- * users who do want the ability to use MLets are presumably advanced enough\n+ * users who do want an MBean which is a ClassLoader are presumably advanced enough\n@@ -471,1 +470,0 @@\n-        checkMLetMethods(name, operationName);\n@@ -623,43 +621,0 @@\n-    private void checkMLetMethods(ObjectName name, String operation)\n-    throws InstanceNotFoundException {\n-        \/\/ Check if security manager installed\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            return;\n-        }\n-        \/\/ Check for addURL and getMBeansFromURL methods\n-        if (!operation.equals(\"addURL\") &&\n-                !operation.equals(\"getMBeansFromURL\")) {\n-            return;\n-        }\n-        \/\/ Check if MBean is instance of MLet\n-        if (!getMBeanServer().isInstanceOf(name,\n-                \"javax.management.loading.MLet\")) {\n-            return;\n-        }\n-        \/\/ Throw security exception\n-        if (operation.equals(\"addURL\")) { \/\/ addURL\n-            throw new SecurityException(\"Access denied! MLet method addURL \" +\n-                    \"cannot be invoked unless a security manager is installed.\");\n-        } else { \/\/ getMBeansFromURL\n-            \/\/ Whether or not calling getMBeansFromURL is allowed is controlled\n-            \/\/ by the value of the \"jmx.remote.x.mlet.allow.getMBeansFromURL\"\n-            \/\/ system property. If the value of this property is true, calling\n-            \/\/ the MLet's getMBeansFromURL method is allowed. The default value\n-            \/\/ for this property is false.\n-            final String propName = \"jmx.remote.x.mlet.allow.getMBeansFromURL\";\n-            GetPropertyAction propAction = new GetPropertyAction(propName);\n-            @SuppressWarnings(\"removal\")\n-            String propValue = AccessController.doPrivileged(propAction);\n-            boolean allowGetMBeansFromURL = \"true\".equalsIgnoreCase(propValue);\n-            if (!allowGetMBeansFromURL) {\n-                throw new SecurityException(\"Access denied! MLet method \" +\n-                        \"getMBeansFromURL cannot be invoked unless a \" +\n-                        \"security manager is installed or the system property \" +\n-                        \"-Djmx.remote.x.mlet.allow.getMBeansFromURL=true \" +\n-                        \"is specified.\");\n-            }\n-        }\n-    }\n-\n","filename":"src\/java.management\/share\/classes\/com\/sun\/jmx\/remote\/security\/MBeanServerAccessController.java","additions":3,"deletions":48,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -1,1294 +0,0 @@\n-\/*\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package javax.management.loading;\n-\n-import com.sun.jmx.defaults.ServiceName;\n-\n-import com.sun.jmx.remote.util.EnvHelp;\n-\n-import java.io.Externalizable;\n-import java.io.File;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.ObjectInput;\n-import java.io.ObjectInputStream;\n-import java.io.ObjectOutput;\n-import java.lang.reflect.Constructor;\n-import java.net.MalformedURLException;\n-import java.net.URL;\n-import java.net.URLStreamHandlerFactory;\n-import java.nio.file.Files;\n-import java.nio.file.StandardCopyOption;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.lang.System.Logger.Level;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.StringTokenizer;\n-\n-import javax.management.InstanceAlreadyExistsException;\n-import javax.management.InstanceNotFoundException;\n-import javax.management.MBeanException;\n-import javax.management.MBeanRegistration;\n-import javax.management.MBeanRegistrationException;\n-import javax.management.MBeanServer;\n-import javax.management.NotCompliantMBeanException;\n-import javax.management.ObjectInstance;\n-import javax.management.ObjectName;\n-import javax.management.ReflectionException;\n-\n-import static com.sun.jmx.defaults.JmxProperties.MLET_LIB_DIR;\n-import static com.sun.jmx.defaults.JmxProperties.MLET_LOGGER;\n-import javax.management.ServiceNotFoundException;\n-\n-\/**\n- * Allows you to instantiate and register one or several MBeans in the MBean server\n- * coming from a remote URL. M-let is a shortcut for management applet. The m-let service does this\n- * by loading an m-let text file, which specifies information on the MBeans to be obtained.\n- * The information on each MBean is specified in a single instance of a tag, called the MLET tag.\n- * The location of the m-let text file is specified by a URL.\n- * <p>\n- * The <CODE>MLET<\/CODE> tag has the following syntax:\n- * <p>\n- * &lt;<CODE>MLET<\/CODE><BR>\n- *      <CODE>CODE = <\/CODE><VAR>class<\/VAR><CODE> | OBJECT = <\/CODE><VAR>serfile<\/VAR><BR>\n- *      <CODE>ARCHIVE = &quot;<\/CODE><VAR>archiveList<\/VAR><CODE>&quot;<\/CODE><BR>\n- *      <CODE>[CODEBASE = <\/CODE><VAR>codebaseURL<\/VAR><CODE>]<\/CODE><BR>\n- *      <CODE>[NAME = <\/CODE><VAR>mbeanname<\/VAR><CODE>]<\/CODE><BR>\n- *      <CODE>[VERSION = <\/CODE><VAR>version<\/VAR><CODE>]<\/CODE><BR>\n- * &gt;<BR>\n- *      <CODE>[<\/CODE><VAR>arglist<\/VAR><CODE>]<\/CODE><BR>\n- * &lt;<CODE>\/MLET<\/CODE>&gt;\n- * <p>\n- * where:\n- * <DL>\n- * <DT><CODE>CODE = <\/CODE><VAR>class<\/VAR><\/DT>\n- * <DD>\n- * This attribute specifies the full Java class name, including package name, of the MBean to be obtained.\n- * The compiled <CODE>.class<\/CODE> file of the MBean must be contained in one of the <CODE>.jar<\/CODE> files specified by the <CODE>ARCHIVE<\/CODE>\n- * attribute. Either <CODE>CODE<\/CODE> or <CODE>OBJECT<\/CODE> must be present.\n- * <\/DD>\n- * <DT><CODE>OBJECT = <\/CODE><VAR>serfile<\/VAR><\/DT>\n- * <DD>\n- * This attribute specifies the <CODE>.ser<\/CODE> file that contains a serialized representation of the MBean to be obtained.\n- * This file must be contained in one of the <CODE>.jar<\/CODE> files specified by the <CODE>ARCHIVE<\/CODE> attribute. If the <CODE>.jar<\/CODE> file contains a directory hierarchy, specify the path of the file within this hierarchy. Otherwise  a match will not be found. Either <CODE>CODE<\/CODE> or <CODE>OBJECT<\/CODE> must be present.\n- * <\/DD>\n- * <DT><CODE>ARCHIVE = &quot;<\/CODE><VAR>archiveList<\/VAR><CODE>&quot;<\/CODE><\/DT>\n- * <DD>\n- * This mandatory attribute specifies one or more <CODE>.jar<\/CODE> files\n- * containing MBeans or other resources used by\n- * the MBean to be obtained. One of the <CODE>.jar<\/CODE> files must contain the file specified by the <CODE>CODE<\/CODE> or <CODE>OBJECT<\/CODE> attribute.\n- * If archivelist contains more than one file:\n- * <UL>\n- * <LI>Each file must be separated from the one that follows it by a comma (,).\n- * <LI><VAR>archivelist<\/VAR> must be enclosed in double quote marks.\n- * <\/UL>\n- * All <CODE>.jar<\/CODE> files in <VAR>archivelist<\/VAR> must be stored in the directory specified by the code base URL.\n- * <\/DD>\n- * <DT><CODE>CODEBASE = <\/CODE><VAR>codebaseURL<\/VAR><\/DT>\n- * <DD>\n- * This optional attribute specifies the code base URL of the MBean to be obtained. It identifies the directory that contains\n- * the <CODE>.jar<\/CODE> files specified by the <CODE>ARCHIVE<\/CODE> attribute. Specify this attribute only if the <CODE>.jar<\/CODE> files are not in the same\n- * directory as the m-let text file. If this attribute is not specified, the base URL of the m-let text file is used.\n- * <\/DD>\n- * <DT><CODE>NAME = <\/CODE><VAR>mbeanname<\/VAR><\/DT>\n- * <DD>\n- * This optional attribute specifies the object name to be assigned to the\n- * MBean instance when the m-let service registers it. If\n- * <VAR>mbeanname<\/VAR> starts with the colon character (:), the domain\n- * part of the object name is the default domain of the MBean server,\n- * as returned by {@link javax.management.MBeanServer#getDefaultDomain()}.\n- * <\/DD>\n- * <DT><CODE>VERSION = <\/CODE><VAR>version<\/VAR><\/DT>\n- * <DD>\n- * This optional attribute specifies the version number of the MBean and\n- * associated <CODE>.jar<\/CODE> files to be obtained. This version number can\n- * be used to specify that the <CODE>.jar<\/CODE> files are loaded from the\n- * server to update those stored locally in the cache the next time the m-let\n- * text file is loaded. <VAR>version<\/VAR> must be a series of non-negative\n- * decimal integers each separated by a period from the one that precedes it.\n- * <\/DD>\n- * <DT><VAR>arglist<\/VAR><\/DT>\n- * <DD>\n- * This optional attribute specifies a list of one or more parameters for the\n- * MBean to be instantiated. This list describes the parameters to be passed the MBean's constructor.\n- * Use the following syntax to specify each item in\n- * <VAR>arglist<\/VAR>:\n- * <DL>\n- * <DT>&lt;<CODE>ARG TYPE=<\/CODE><VAR>argumentType<\/VAR> <CODE>VALUE=<\/CODE><VAR>value<\/VAR>&gt;<\/DT>\n- * <DD>where:\n- * <UL>\n- * <LI><VAR>argumentType<\/VAR> is the type of the argument that will be passed as parameter to the MBean's constructor.<\/UL>\n- * <\/DD>\n- * <\/DL>\n- * <P>The arguments' type in the argument list should be a Java primitive type or a Java basic type\n- * (<CODE>java.lang.Boolean, java.lang.Byte, java.lang.Short, java.lang.Long, java.lang.Integer, java.lang.Float, java.lang.Double, java.lang.String<\/CODE>).\n- * <\/DD>\n- * <\/DL>\n- *\n- * When an m-let text file is loaded, an\n- * instance of each MBean specified in the file is created and registered.\n- * <P>\n- * The m-let service extends the <CODE>java.net.URLClassLoader<\/CODE> and can be used to load remote classes\n- * and jar files in the VM of the agent.\n- * <p><STRONG>Note - <\/STRONG> The <CODE>MLet<\/CODE> class loader uses the {@link javax.management.MBeanServerFactory#getClassLoaderRepository(javax.management.MBeanServer)}\n- * to load classes that could not be found in the loaded jar files.\n- *\n- * @deprecated This API is part of Management Applets (m-lets), which is a legacy feature that allows loading\n- * of remote MBeans. This feature is not usable without a Security Manager, which is deprecated and subject to\n- * removal in a future release. Consequently, this API is also deprecated and subject to removal. There is no replacement.\n- *\n- * @since 1.5\n- *\/\n-@Deprecated(since=\"20\", forRemoval=true)\n-@SuppressWarnings(\"removal\")\n-public class MLet extends java.net.URLClassLoader\n-     implements MLetMBean, MBeanRegistration, Externalizable {\n-\n-     private static final long serialVersionUID = 3636148327800330130L;\n-\n-     \/*\n-     * ------------------------------------------\n-     *   PRIVATE VARIABLES\n-     * ------------------------------------------\n-     *\/\n-\n-     \/**\n-      * The reference to the MBean server.\n-      * @serial\n-      *\/\n-     @SuppressWarnings(\"serial\") \/\/ Type of field is not Serializable\n-     private MBeanServer server = null;\n-\n-\n-     \/**\n-      * The list of instances of the <CODE>MLetContent<\/CODE>\n-      * class found at the specified URL.\n-      * @serial\n-      *\/\n-     @SuppressWarnings(\"serial\") \/\/ Type of field is not Serializable\n-     private List<MLetContent> mletList = new ArrayList<>();\n-\n-\n-     \/**\n-      * The directory used for storing libraries locally before they are loaded.\n-      *\/\n-     private String libraryDirectory;\n-\n-\n-     \/**\n-      * The object name of the MLet Service.\n-      * @serial\n-      *\/\n-     private ObjectName mletObjectName = null;\n-\n-     \/**\n-      * The URLs of the MLet Service.\n-      * @serial\n-      *\/\n-     private URL[] myUrls = null;\n-\n-     \/**\n-      * What ClassLoaderRepository, if any, to use if this MLet\n-      * doesn't find an asked-for class.\n-      *\/\n-     private transient ClassLoaderRepository currentClr;\n-\n-     \/**\n-      * True if we should consult the {@link ClassLoaderRepository}\n-      * when we do not find a class ourselves.\n-      *\/\n-     private transient boolean delegateToCLR;\n-\n-     \/**\n-      * objects maps from primitive classes to primitive object classes.\n-      *\/\n-     @SuppressWarnings(\"serial\") \/\/ Type of field is not Serializable\n-     private Map<String,Class<?>> primitiveClasses = new HashMap<>(8) ;\n-     {\n-         primitiveClasses.put(Boolean.TYPE.toString(), Boolean.class);\n-         primitiveClasses.put(Character.TYPE.toString(), Character.class);\n-         primitiveClasses.put(Byte.TYPE.toString(), Byte.class);\n-         primitiveClasses.put(Short.TYPE.toString(), Short.class);\n-         primitiveClasses.put(Integer.TYPE.toString(), Integer.class);\n-         primitiveClasses.put(Long.TYPE.toString(), Long.class);\n-         primitiveClasses.put(Float.TYPE.toString(), Float.class);\n-         primitiveClasses.put(Double.TYPE.toString(), Double.class);\n-\n-     }\n-\n-\n-     \/*\n-      * ------------------------------------------\n-      *  CONSTRUCTORS\n-      * ------------------------------------------\n-      *\/\n-\n-     \/*\n-      * The constructor stuff would be considerably simplified if our\n-      * parent, URLClassLoader, specified that its one- and\n-      * two-argument constructors were equivalent to its\n-      * three-argument constructor with trailing null arguments.  But\n-      * it doesn't, which prevents us from having all the constructors\n-      * but one call this(...args...).\n-      *\/\n-\n-     \/**\n-      * Constructs a new MLet using the default delegation parent ClassLoader.\n-      *\/\n-     public MLet() {\n-         this(new URL[0]);\n-     }\n-\n-     \/**\n-      * Constructs a new MLet for the specified URLs using the default\n-      * delegation parent ClassLoader.  The URLs will be searched in\n-      * the order specified for classes and resources after first\n-      * searching in the parent class loader.\n-      *\n-      * @param  urls  The URLs from which to load classes and resources.\n-      *\n-      *\/\n-     public MLet(URL[] urls) {\n-         this(urls, true);\n-     }\n-\n-     \/**\n-      * Constructs a new MLet for the given URLs. The URLs will be\n-      * searched in the order specified for classes and resources\n-      * after first searching in the specified parent class loader.\n-      * The parent argument will be used as the parent class loader\n-      * for delegation.\n-      *\n-      * @param  urls  The URLs from which to load classes and resources.\n-      * @param  parent The parent class loader for delegation.\n-      *\n-      *\/\n-     public MLet(URL[] urls, ClassLoader parent) {\n-         this(urls, parent, true);\n-     }\n-\n-     \/**\n-      * Constructs a new MLet for the specified URLs, parent class\n-      * loader, and URLStreamHandlerFactory. The parent argument will\n-      * be used as the parent class loader for delegation. The factory\n-      * argument will be used as the stream handler factory to obtain\n-      * protocol handlers when creating new URLs.\n-      *\n-      * @param  urls  The URLs from which to load classes and resources.\n-      * @param  parent The parent class loader for delegation.\n-      * @param  factory  The URLStreamHandlerFactory to use when creating URLs.\n-      *\n-      *\/\n-     public MLet(URL[] urls,\n-                 ClassLoader parent,\n-                 URLStreamHandlerFactory factory) {\n-         this(urls, parent, factory, true);\n-     }\n-\n-     \/**\n-      * Constructs a new MLet for the specified URLs using the default\n-      * delegation parent ClassLoader.  The URLs will be searched in\n-      * the order specified for classes and resources after first\n-      * searching in the parent class loader.\n-      *\n-      * @param  urls  The URLs from which to load classes and resources.\n-      * @param  delegateToCLR  True if, when a class is not found in\n-      * either the parent ClassLoader or the URLs, the MLet should delegate\n-      * to its containing MBeanServer's {@link ClassLoaderRepository}.\n-      *\n-      *\/\n-     public MLet(URL[] urls, boolean delegateToCLR) {\n-         super(urls);\n-         init(delegateToCLR);\n-     }\n-\n-     \/**\n-      * Constructs a new MLet for the given URLs. The URLs will be\n-      * searched in the order specified for classes and resources\n-      * after first searching in the specified parent class loader.\n-      * The parent argument will be used as the parent class loader\n-      * for delegation.\n-      *\n-      * @param  urls  The URLs from which to load classes and resources.\n-      * @param  parent The parent class loader for delegation.\n-      * @param  delegateToCLR  True if, when a class is not found in\n-      * either the parent ClassLoader or the URLs, the MLet should delegate\n-      * to its containing MBeanServer's {@link ClassLoaderRepository}.\n-      *\n-      *\/\n-     public MLet(URL[] urls, ClassLoader parent, boolean delegateToCLR) {\n-         super(urls, parent);\n-         init(delegateToCLR);\n-     }\n-\n-     \/**\n-      * Constructs a new MLet for the specified URLs, parent class\n-      * loader, and URLStreamHandlerFactory. The parent argument will\n-      * be used as the parent class loader for delegation. The factory\n-      * argument will be used as the stream handler factory to obtain\n-      * protocol handlers when creating new URLs.\n-      *\n-      * @param  urls  The URLs from which to load classes and resources.\n-      * @param  parent The parent class loader for delegation.\n-      * @param  factory  The URLStreamHandlerFactory to use when creating URLs.\n-      * @param  delegateToCLR  True if, when a class is not found in\n-      * either the parent ClassLoader or the URLs, the MLet should delegate\n-      * to its containing MBeanServer's {@link ClassLoaderRepository}.\n-      *\n-      *\/\n-     public MLet(URL[] urls,\n-                 ClassLoader parent,\n-                 URLStreamHandlerFactory factory,\n-                 boolean delegateToCLR) {\n-         super(urls, parent, factory);\n-         init(delegateToCLR);\n-     }\n-\n-     private void init(boolean delegateToCLR) {\n-         this.delegateToCLR = delegateToCLR;\n-\n-         try {\n-             libraryDirectory = System.getProperty(MLET_LIB_DIR);\n-             if (libraryDirectory == null)\n-                 libraryDirectory = getTmpDir();\n-         } catch (SecurityException e) {\n-             \/\/ OK : We don't do AccessController.doPrivileged, but we don't\n-             \/\/      stop the user from creating an MLet just because they\n-             \/\/      can't read the MLET_LIB_DIR or java.io.tmpdir properties\n-             \/\/      either.\n-         }\n-     }\n-\n-\n-     \/*\n-      * ------------------------------------------\n-      *  PUBLIC METHODS\n-      * ------------------------------------------\n-      *\/\n-\n-\n-     \/**\n-      * Appends the specified URL to the list of URLs to search for classes and\n-      * resources.\n-      *\/\n-     public void addURL(URL url) {\n-         if (!Arrays.asList(getURLs()).contains(url))\n-             super.addURL(url);\n-     }\n-\n-     \/**\n-      * Appends the specified URL to the list of URLs to search for classes and\n-      * resources.\n-      * @exception ServiceNotFoundException The specified URL is malformed.\n-      *\/\n-     public void addURL(String url) throws ServiceNotFoundException {\n-         try {\n-             @SuppressWarnings(\"deprecation\")\n-             URL ur = new URL(url);\n-             if (!Arrays.asList(getURLs()).contains(ur))\n-                 super.addURL(ur);\n-         } catch (MalformedURLException e) {\n-             if (MLET_LOGGER.isLoggable(Level.DEBUG)) {\n-                 MLET_LOGGER.log(Level.DEBUG, \"Malformed URL: \" + url, e);\n-             }\n-             throw new\n-                 ServiceNotFoundException(\"The specified URL is malformed\");\n-         }\n-     }\n-\n-     \/** Returns the search path of URLs for loading classes and resources.\n-      * This includes the original list of URLs specified to the constructor,\n-      * along with any URLs subsequently appended by the addURL() method.\n-      *\/\n-     public URL[] getURLs() {\n-         return super.getURLs();\n-     }\n-\n-     \/**\n-      * Loads a text file containing MLET tags that define the MBeans to\n-      * be added to the MBean server. The location of the text file is specified by\n-      * a URL. The MBeans specified in the MLET file will be instantiated and\n-      * registered in the MBean server.\n-      *\n-      * @param url The URL of the text file to be loaded as URL object.\n-      *\n-      * @return  A set containing one entry per MLET tag in the m-let text file loaded.\n-      * Each entry specifies either the ObjectInstance for the created MBean, or a throwable object\n-      * (that is, an error or an exception) if the MBean could not be created.\n-      *\n-      * @exception ServiceNotFoundException One of the following errors has occurred: The m-let text file does\n-      * not contain an MLET tag, the m-let text file is not found, a mandatory\n-      * attribute of the MLET tag is not specified, the value of url is\n-      * null.\n-      * @exception IllegalStateException MLet MBean is not registered with an MBeanServer.\n-      *\/\n-     public Set<Object> getMBeansFromURL(URL url)\n-             throws ServiceNotFoundException  {\n-         if (url == null) {\n-             throw new ServiceNotFoundException(\"The specified URL is null\");\n-         }\n-         return getMBeansFromURL(url.toString());\n-     }\n-\n-     \/**\n-      * Loads a text file containing MLET tags that define the MBeans to\n-      * be added to the MBean server. The location of the text file is specified by\n-      * a URL. The MBeans specified in the MLET file will be instantiated and\n-      * registered in the MBean server.\n-      *\n-      * @param url The URL of the text file to be loaded as String object.\n-      *\n-      * @return A set containing one entry per MLET tag in the m-let\n-      * text file loaded.  Each entry specifies either the\n-      * ObjectInstance for the created MBean, or a throwable object\n-      * (that is, an error or an exception) if the MBean could not be\n-      * created.\n-      *\n-      * @exception ServiceNotFoundException One of the following\n-      * errors has occurred: The m-let text file does not contain an\n-      * MLET tag, the m-let text file is not found, a mandatory\n-      * attribute of the MLET tag is not specified, the url is\n-      * malformed.\n-      * @exception IllegalStateException MLet MBean is not registered\n-      * with an MBeanServer.\n-      *\n-      *\/\n-     public Set<Object> getMBeansFromURL(String url)\n-             throws ServiceNotFoundException  {\n-\n-         if (server == null) {\n-             throw new IllegalStateException(\"This MLet MBean is not \" +\n-                                             \"registered with an MBeanServer.\");\n-         }\n-         \/\/ Parse arguments\n-         if (url == null) {\n-             MLET_LOGGER.log(Level.TRACE, \"URL is null\");\n-             throw new ServiceNotFoundException(\"The specified URL is null\");\n-         } else {\n-             url = url.replace(File.separatorChar,'\/');\n-         }\n-         if (MLET_LOGGER.isLoggable(Level.TRACE)) {\n-             MLET_LOGGER.log(Level.TRACE, \"<URL = \" + url + \">\");\n-         }\n-\n-         \/\/ Parse URL\n-         try {\n-             MLetParser parser = new MLetParser();\n-             mletList = parser.parseURL(url);\n-         } catch (Exception e) {\n-             final String msg =\n-                 \"Problems while parsing URL [\" + url +\n-                 \"], got exception [\" + e.toString() + \"]\";\n-             MLET_LOGGER.log(Level.TRACE, msg);\n-             throw EnvHelp.initCause(new ServiceNotFoundException(msg), e);\n-         }\n-\n-         \/\/ Check that the list of MLets is not empty\n-         if (mletList.size() == 0) {\n-             final String msg =\n-                 \"File \" + url + \" not found or MLET tag not defined in file\";\n-             MLET_LOGGER.log(Level.TRACE, msg);\n-             throw new ServiceNotFoundException(msg);\n-         }\n-\n-         \/\/ Walk through the list of MLets\n-         Set<Object> mbeans = new HashSet<>();\n-         for (MLetContent elmt : mletList) {\n-             \/\/ Initialize local variables\n-             String code = elmt.getCode();\n-             if (code != null) {\n-                 if (code.endsWith(\".class\")) {\n-                     code = code.substring(0, code.length() - 6);\n-                 }\n-             }\n-             String name = elmt.getName();\n-             URL codebase = elmt.getCodeBase();\n-             String version = elmt.getVersion();\n-             String serName = elmt.getSerializedObject();\n-             String jarFiles = elmt.getJarFiles();\n-             URL documentBase = elmt.getDocumentBase();\n-\n-             \/\/ Display debug information\n-             if (MLET_LOGGER.isLoggable(Level.TRACE)) {\n-                 final StringBuilder strb = new StringBuilder()\n-                 .append(\"\\n\\tMLET TAG     = \").append(elmt.getAttributes())\n-                 .append(\"\\n\\tCODEBASE     = \").append(codebase)\n-                 .append(\"\\n\\tARCHIVE      = \").append(jarFiles)\n-                 .append(\"\\n\\tCODE         = \").append(code)\n-                 .append(\"\\n\\tOBJECT       = \").append(serName)\n-                 .append(\"\\n\\tNAME         = \").append(name)\n-                 .append(\"\\n\\tVERSION      = \").append(version)\n-                 .append(\"\\n\\tDOCUMENT URL = \").append(documentBase);\n-                 MLET_LOGGER.log(Level.TRACE, strb::toString);\n-             }\n-\n-             \/\/ Load classes from JAR files\n-             StringTokenizer st = new StringTokenizer(jarFiles, \",\", false);\n-             while (st.hasMoreTokens()) {\n-                 String tok = st.nextToken().trim();\n-                 if (MLET_LOGGER.isLoggable(Level.TRACE)) {\n-                     MLET_LOGGER.log(Level.TRACE,\n-                             \"Load archive for codebase <\" + codebase +\n-                             \">, file <\" + tok + \">\");\n-                 }\n-                 \/\/ Check which is the codebase to be used for loading the jar file.\n-                 \/\/ If we are using the base MLet implementation then it will be\n-                 \/\/ always the remote server but if the service has been extended in\n-                 \/\/ order to support caching and versioning then this method will\n-                 \/\/ return the appropriate one.\n-                 \/\/\n-                 try {\n-                     codebase = check(version, codebase, tok, elmt);\n-                 } catch (Exception ex) {\n-                     MLET_LOGGER.log(Level.DEBUG,\n-                             \"Got unexpected exception\", ex);\n-                     mbeans.add(ex);\n-                     continue;\n-                 }\n-\n-                 \/\/ Appends the specified JAR file URL to the list of\n-                 \/\/ URLs to search for classes and resources.\n-                 try {\n-                     @SuppressWarnings(\"deprecation\")\n-                     var u = new URL(codebase.toString() + tok);\n-                     if (!Arrays.asList(getURLs())\n-                         .contains(u)) {\n-                         addURL(codebase + tok);\n-                     }\n-                 } catch (MalformedURLException me) {\n-                     \/\/ OK : Ignore jar file if its name provokes the\n-                     \/\/ URL to be an invalid one.\n-                 }\n-\n-             }\n-             \/\/ Instantiate the class specified in the\n-             \/\/ CODE or OBJECT section of the MLet tag\n-             \/\/\n-             Object o;\n-             ObjectInstance objInst;\n-\n-             if (code != null && serName != null) {\n-                 final String msg =\n-                     \"CODE and OBJECT parameters cannot be specified at the \" +\n-                     \"same time in tag MLET\";\n-                 MLET_LOGGER.log(Level.TRACE, msg);\n-                 mbeans.add(new Error(msg));\n-                 continue;\n-             }\n-             if (code == null && serName == null) {\n-                 final String msg =\n-                     \"Either CODE or OBJECT parameter must be specified in \" +\n-                     \"tag MLET\";\n-                 MLET_LOGGER.log(Level.TRACE, msg);\n-                 mbeans.add(new Error(msg));\n-                 continue;\n-             }\n-             try {\n-                 if (code != null) {\n-\n-                     List<String> signat = elmt.getParameterTypes();\n-                     List<String> stringPars = elmt.getParameterValues();\n-                     List<Object> objectPars = new ArrayList<>();\n-\n-                     for (int i = 0; i < signat.size(); i++) {\n-                         objectPars.add(constructParameter(stringPars.get(i),\n-                                                           signat.get(i)));\n-                     }\n-                     if (signat.isEmpty()) {\n-                         if (name == null) {\n-                             objInst = server.createMBean(code, null,\n-                                                          mletObjectName);\n-                         } else {\n-                             objInst = server.createMBean(code,\n-                                                          new ObjectName(name),\n-                                                          mletObjectName);\n-                         }\n-                     } else {\n-                         Object[] parms = objectPars.toArray();\n-                         String[] signature = new String[signat.size()];\n-                         signat.toArray(signature);\n-                         if (MLET_LOGGER.isLoggable(Level.TRACE)) {\n-                             final StringBuilder strb = new StringBuilder();\n-                             for (int i = 0; i < signature.length; i++) {\n-                                 strb.append(\"\\n\\tSignature     = \")\n-                                 .append(signature[i])\n-                                 .append(\"\\t\\nParams        = \")\n-                                 .append(parms[i]);\n-                             }\n-                             MLET_LOGGER.log(Level.TRACE, strb::toString);\n-                         }\n-                         if (name == null) {\n-                             objInst =\n-                                 server.createMBean(code, null, mletObjectName,\n-                                                    parms, signature);\n-                         } else {\n-                             objInst =\n-                                 server.createMBean(code, new ObjectName(name),\n-                                                    mletObjectName, parms,\n-                                                    signature);\n-                         }\n-                     }\n-                 } else {\n-                     o = loadSerializedObject(codebase,serName);\n-                     if (name == null) {\n-                         server.registerMBean(o, null);\n-                     } else {\n-                         server.registerMBean(o,  new ObjectName(name));\n-                     }\n-                     objInst = new ObjectInstance(name, o.getClass().getName());\n-                 }\n-             } catch (ReflectionException  ex) {\n-                 MLET_LOGGER.log(Level.TRACE, \"ReflectionException\", ex);\n-                 mbeans.add(ex);\n-                 continue;\n-             } catch (InstanceAlreadyExistsException  ex) {\n-                 MLET_LOGGER.log(Level.TRACE,\n-                         \"InstanceAlreadyExistsException\", ex);\n-                 mbeans.add(ex);\n-                 continue;\n-             } catch (MBeanRegistrationException ex) {\n-                 MLET_LOGGER.log(Level.TRACE, \"MBeanRegistrationException\", ex);\n-                 mbeans.add(ex);\n-                 continue;\n-             } catch (MBeanException  ex) {\n-                 MLET_LOGGER.log(Level.TRACE, \"MBeanException\", ex);\n-                 mbeans.add(ex);\n-                 continue;\n-             } catch (NotCompliantMBeanException  ex) {\n-                 MLET_LOGGER.log(Level.TRACE,\n-                         \"NotCompliantMBeanException\", ex);\n-                 mbeans.add(ex);\n-                 continue;\n-             } catch (InstanceNotFoundException   ex) {\n-                 MLET_LOGGER.log(Level.TRACE,\n-                         \"InstanceNotFoundException\", ex);\n-                 mbeans.add(ex);\n-                 continue;\n-             } catch (IOException ex) {\n-                 MLET_LOGGER.log(Level.TRACE, \"IOException\", ex);\n-                 mbeans.add(ex);\n-                 continue;\n-             } catch (SecurityException ex) {\n-                 MLET_LOGGER.log(Level.TRACE, \"SecurityException\", ex);\n-                 mbeans.add(ex);\n-                 continue;\n-             } catch (Exception ex) {\n-                 MLET_LOGGER.log(Level.TRACE, \"Exception\", ex);\n-                 mbeans.add(ex);\n-                 continue;\n-             } catch (Error ex) {\n-                 MLET_LOGGER.log(Level.TRACE, \"Error\", ex);\n-                 mbeans.add(ex);\n-                 continue;\n-             }\n-             mbeans.add(objInst);\n-         }\n-         return mbeans;\n-     }\n-\n-     \/**\n-      * Gets the current directory used by the library loader for\n-      * storing native libraries before they are loaded into memory.\n-      *\n-      * @return The current directory used by the library loader.\n-      *\n-      * @see #setLibraryDirectory\n-      *\n-      * @throws UnsupportedOperationException if this implementation\n-      * does not support storing native libraries in this way.\n-      *\/\n-     public synchronized String getLibraryDirectory() {\n-         return libraryDirectory;\n-     }\n-\n-     \/**\n-      * Sets the directory used by the library loader for storing\n-      * native libraries before they are loaded into memory.\n-      *\n-      * @param libdir The directory used by the library loader.\n-      *\n-      * @see #getLibraryDirectory\n-      *\n-      * @throws UnsupportedOperationException if this implementation\n-      * does not support storing native libraries in this way.\n-      *\/\n-     public synchronized void setLibraryDirectory(String libdir) {\n-         libraryDirectory = libdir;\n-     }\n-\n-     \/**\n-      * Allows the m-let to perform any operations it needs before\n-      * being registered in the MBean server. If the ObjectName is\n-      * null, the m-let provides a default name for its registration\n-      * &lt;defaultDomain&gt;:type=MLet\n-      *\n-      * @param server The MBean server in which the m-let will be registered.\n-      * @param name The object name of the m-let.\n-      *\n-      * @return  The name of the m-let registered.\n-      *\n-      * @exception java.lang.Exception This exception should be caught by the MBean server and re-thrown\n-      *as an MBeanRegistrationException.\n-      *\/\n-     public ObjectName preRegister(MBeanServer server, ObjectName name)\n-             throws Exception {\n-\n-         \/\/ Initialize local pointer to the MBean server\n-         setMBeanServer(server);\n-\n-         \/\/ If no name is specified return a default name for the MLet\n-         if (name == null) {\n-             name = new ObjectName(server.getDefaultDomain() + \":\" + ServiceName.MLET);\n-         }\n-\n-        this.mletObjectName = name;\n-        return this.mletObjectName;\n-     }\n-\n-     \/**\n-      * Allows the m-let to perform any operations needed after having been\n-      * registered in the MBean server or after the registration has failed.\n-      *\n-      * @param registrationDone Indicates whether or not the m-let has\n-      * been successfully registered in the MBean server. The value\n-      * false means that either the registration phase has failed.\n-      *\n-      *\/\n-     public void postRegister (Boolean registrationDone) {\n-     }\n-\n-     \/**\n-      * Allows the m-let to perform any operations it needs before being unregistered\n-      * by the MBean server.\n-      *\n-      * @exception java.lang.Exception This exception should be caught\n-      * by the MBean server and re-thrown as an\n-      * MBeanRegistrationException.\n-      *\/\n-     public void preDeregister() throws java.lang.Exception {\n-     }\n-\n-\n-     \/**\n-      * Allows the m-let to perform any operations needed after having been\n-      * unregistered in the MBean server.\n-      *\/\n-     public void postDeregister() {\n-     }\n-\n-     \/**\n-      * <p>Save this MLet's contents to the given {@link ObjectOutput}.\n-      * Not all implementations support this method.  Those that do not\n-      * throw {@link UnsupportedOperationException}.  A subclass may\n-      * override this method to support it or to change the format of\n-      * the written data.<\/p>\n-      *\n-      * <p>The format of the written data is not specified, but if\n-      * an implementation supports {@link #writeExternal} it must\n-      * also support {@link #readExternal} in such a way that what is\n-      * written by the former can be read by the latter.<\/p>\n-      *\n-      * @param out The object output stream to write to.\n-      *\n-      * @exception IOException If a problem occurred while writing.\n-      * @exception UnsupportedOperationException If this\n-      * implementation does not support this operation.\n-      *\/\n-     public void writeExternal(ObjectOutput out)\n-             throws IOException, UnsupportedOperationException {\n-         throw new UnsupportedOperationException(\"MLet.writeExternal\");\n-     }\n-\n-     \/**\n-      * <p>Restore this MLet's contents from the given {@link ObjectInput}.\n-      * Not all implementations support this method.  Those that do not\n-      * throw {@link UnsupportedOperationException}.  A subclass may\n-      * override this method to support it or to change the format of\n-      * the read data.<\/p>\n-      *\n-      * <p>The format of the read data is not specified, but if an\n-      * implementation supports {@link #readExternal} it must also\n-      * support {@link #writeExternal} in such a way that what is\n-      * written by the latter can be read by the former.<\/p>\n-      *\n-      * @param in The object input stream to read from.\n-      *\n-      * @exception IOException if a problem occurred while reading.\n-      * @exception ClassNotFoundException if the class for the object\n-      * being restored cannot be found.\n-      * @exception UnsupportedOperationException if this\n-      * implementation does not support this operation.\n-      *\/\n-     public void readExternal(ObjectInput in)\n-             throws IOException, ClassNotFoundException,\n-                    UnsupportedOperationException {\n-         throw new UnsupportedOperationException(\"MLet.readExternal\");\n-     }\n-\n-     \/*\n-      * ------------------------------------------\n-      *  PACKAGE METHODS\n-      * ------------------------------------------\n-      *\/\n-\n-     \/**\n-      * <p>Load a class, using the given {@link ClassLoaderRepository} if\n-      * the class is not found in this MLet's URLs.  The given\n-      * ClassLoaderRepository can be null, in which case a {@link\n-      * ClassNotFoundException} occurs immediately if the class is not\n-      * found in this MLet's URLs.<\/p>\n-      *\n-      * @param name The name of the class we want to load.\n-      * @param clr  The ClassLoaderRepository that will be used to search\n-      *             for the given class, if it is not found in this\n-      *             ClassLoader.  May be null.\n-      * @return The resulting Class object.\n-      * @exception ClassNotFoundException The specified class could not be\n-      *            found in this ClassLoader nor in the given\n-      *            ClassLoaderRepository.\n-      *\n-      *\/\n-     public synchronized Class<?> loadClass(String name,\n-                                            ClassLoaderRepository clr)\n-              throws ClassNotFoundException {\n-         final ClassLoaderRepository before=currentClr;\n-         try {\n-             currentClr = clr;\n-             return loadClass(name);\n-         } finally {\n-             currentClr = before;\n-         }\n-     }\n-\n-     \/*\n-      * ------------------------------------------\n-      *  PROTECTED METHODS\n-      * ------------------------------------------\n-      *\/\n-\n-     \/**\n-      * This is the main method for class loaders that is being redefined.\n-      *\n-      * @param name The name of the class.\n-      *\n-      * @return The resulting Class object.\n-      *\n-      * @exception ClassNotFoundException The specified class could not be\n-      *            found.\n-      *\/\n-     protected Class<?> findClass(String name) throws ClassNotFoundException {\n-         \/* currentClr is context sensitive - used to avoid recursion\n-            in the class loader repository.  (This is no longer\n-            necessary with the new CLR semantics but is kept for\n-            compatibility with code that might have called the\n-            two-parameter loadClass explicitly.)  *\/\n-         return findClass(name, currentClr);\n-     }\n-\n-     \/**\n-      * Called by {@link MLet#findClass(java.lang.String)}.\n-      *\n-      * @param name The name of the class that we want to load\/find.\n-      * @param clr The ClassLoaderRepository that can be used to search\n-      *            for the given class. This parameter is\n-      *            <code>null<\/code> when called from within the\n-      *            {@link javax.management.MBeanServerFactory#getClassLoaderRepository(javax.management.MBeanServer) Class Loader Repository}.\n-      * @exception ClassNotFoundException The specified class could not be\n-      *            found.\n-      *\n-      **\/\n-     Class<?> findClass(String name, ClassLoaderRepository clr)\n-         throws ClassNotFoundException {\n-         Class<?> c = null;\n-         MLET_LOGGER.log(Level.TRACE, name);\n-         \/\/ Try looking in the JAR:\n-         try {\n-             c = super.findClass(name);\n-             if (MLET_LOGGER.isLoggable(Level.TRACE)) {\n-                 MLET_LOGGER.log(Level.TRACE,\n-                         \"Class \" + name + \" loaded through MLet classloader\");\n-             }\n-         } catch (ClassNotFoundException e) {\n-             \/\/ Drop through\n-             if (MLET_LOGGER.isLoggable(Level.TRACE)) {\n-                 MLET_LOGGER.log(Level.TRACE,\n-                         \"Class \" + name + \" not found locally\");\n-             }\n-         }\n-         \/\/ if we are not called from the ClassLoaderRepository\n-         if (c == null && delegateToCLR && clr != null) {\n-             \/\/ Try the classloader repository:\n-             \/\/\n-             try {\n-                 if (MLET_LOGGER.isLoggable(Level.TRACE)) {\n-                     MLET_LOGGER.log(Level.TRACE,\n-                             \"Class \" + name + \" : looking in CLR\");\n-                 }\n-                 c = clr.loadClassBefore(this, name);\n-                 \/\/ The loadClassBefore method never returns null.\n-                 \/\/ If the class is not found we get an exception.\n-                 if (MLET_LOGGER.isLoggable(Level.TRACE)) {\n-                     MLET_LOGGER.log(Level.TRACE,\n-                             \"Class \" + name + \" loaded through \" +\n-                             \"the default classloader repository\");\n-                 }\n-             } catch (ClassNotFoundException e) {\n-                 \/\/ Drop through\n-                 if (MLET_LOGGER.isLoggable(Level.TRACE)) {\n-                     MLET_LOGGER.log(Level.TRACE,\n-                             \"Class \" + name + \" not found in CLR\");\n-                 }\n-             }\n-         }\n-         if (c == null) {\n-             MLET_LOGGER.log(Level.TRACE, \"Failed to load class \" + name);\n-             throw new ClassNotFoundException(name);\n-         }\n-         return c;\n-     }\n-\n-     \/**\n-      * Returns the absolute path name of a native library. The VM\n-      * invokes this method to locate the native libraries that belong\n-      * to classes loaded with this class loader. Libraries are\n-      * searched in the JAR files using first just the native library\n-      * name and if not found the native library name together with\n-      * the architecture-specific path name\n-      * (<code>OSName\/OSArch\/OSVersion\/lib\/nativelibname<\/code>), i.e.\n-      * <p>\n-      * the library stat on Solaris SPARC 5.7 will be searched in the JAR file as:\n-      * <OL>\n-      * <LI>libstat.so\n-      * <LI>SunOS\/sparc\/5.7\/lib\/libstat.so\n-      * <\/OL>\n-      * the library stat on Windows NT 4.0 will be searched in the JAR file as:\n-      * <OL>\n-      * <LI>stat.dll\n-      * <LI>WindowsNT\/x86\/4.0\/lib\/stat.dll\n-      * <\/OL>\n-      *\n-      * <p>More specifically, let <em>{@code nativelibname}<\/em> be the result of\n-      * {@link System#mapLibraryName(java.lang.String)\n-      * System.mapLibraryName}{@code (libname)}.  Then the following names are\n-      * searched in the JAR files, in order:<br>\n-      * <em>{@code nativelibname}<\/em><br>\n-      * {@code <os.name>\/<os.arch>\/<os.version>\/lib\/}<em>{@code nativelibname}<\/em><br>\n-      * where {@code <X>} means {@code System.getProperty(X)} with any\n-      * spaces in the result removed, and {@code \/} stands for the\n-      * file separator character ({@link File#separator}).\n-      * <p>\n-      * If this method returns <code>null<\/code>, i.e. the libraries\n-      * were not found in any of the JAR files loaded with this class\n-      * loader, the VM searches the library along the path specified\n-      * as the <code>java.library.path<\/code> property.\n-      *\n-      * @param libname The library name.\n-      *\n-      * @return The absolute path of the native library.\n-      *\/\n-     protected String findLibrary(String libname) {\n-\n-         String abs_path;\n-         String mth = \"findLibrary\";\n-\n-         \/\/ Get the platform-specific string representing a native library.\n-         \/\/\n-         String nativelibname = System.mapLibraryName(libname);\n-\n-         \/\/\n-         \/\/ See if the native library is accessible as a resource through the JAR file.\n-         \/\/\n-         if (MLET_LOGGER.isLoggable(Level.TRACE)) {\n-             MLET_LOGGER.log(Level.TRACE,\n-                     \"Search \" + libname + \" in all JAR files\");\n-         }\n-\n-         \/\/ First try to locate the library in the JAR file using only\n-         \/\/ the native library name.  e.g. if user requested a load\n-         \/\/ for \"foo\" on Solaris SPARC 5.7 we try to load \"libfoo.so\"\n-         \/\/ from the JAR file.\n-         \/\/\n-         if (MLET_LOGGER.isLoggable(Level.TRACE)) {\n-             MLET_LOGGER.log(Level.TRACE,\n-                     \"loadLibraryAsResource(\" + nativelibname + \")\");\n-         }\n-         abs_path = loadLibraryAsResource(nativelibname);\n-         if (abs_path != null) {\n-             if (MLET_LOGGER.isLoggable(Level.TRACE)) {\n-                 MLET_LOGGER.log(Level.TRACE,\n-                         nativelibname + \" loaded, absolute path = \" + abs_path);\n-             }\n-             return abs_path;\n-         }\n-\n-         \/\/ Next try to locate it using the native library name and\n-         \/\/ the architecture-specific path name.  e.g. if user\n-         \/\/ requested a load for \"foo\" on Solaris SPARC 5.7 we try to\n-         \/\/ load \"SunOS\/sparc\/5.7\/lib\/libfoo.so\" from the JAR file.\n-         \/\/\n-         nativelibname = removeSpace(System.getProperty(\"os.name\")) + File.separator +\n-             removeSpace(System.getProperty(\"os.arch\")) + File.separator +\n-             removeSpace(System.getProperty(\"os.version\")) + File.separator +\n-             \"lib\" + File.separator + nativelibname;\n-         if (MLET_LOGGER.isLoggable(Level.TRACE)) {\n-             MLET_LOGGER.log(Level.TRACE,\n-                     \"loadLibraryAsResource(\" + nativelibname + \")\");\n-         }\n-\n-         abs_path = loadLibraryAsResource(nativelibname);\n-         if (abs_path != null) {\n-             if (MLET_LOGGER.isLoggable(Level.TRACE)) {\n-                 MLET_LOGGER.log(Level.TRACE,\n-                         nativelibname + \" loaded, absolute path = \" + abs_path);\n-             }\n-             return abs_path;\n-         }\n-\n-         \/\/\n-         \/\/ All paths exhausted, library not found in JAR file.\n-         \/\/\n-\n-         if (MLET_LOGGER.isLoggable(Level.TRACE)) {\n-             MLET_LOGGER.log(Level.TRACE,\n-                     libname + \" not found in any JAR file\");\n-             MLET_LOGGER.log(Level.TRACE,\n-                     \"Search \" + libname + \" along the path \" +\n-                     \"specified as the java.library.path property\");\n-         }\n-\n-         \/\/ Let the VM search the library along the path\n-         \/\/ specified as the java.library.path property.\n-         \/\/\n-         return null;\n-     }\n-\n-\n-     \/*\n-      * ------------------------------------------\n-      *  PRIVATE METHODS\n-      * ------------------------------------------\n-      *\/\n-\n-     private String getTmpDir() {\n-         \/\/ JDK 1.4\n-         String tmpDir = System.getProperty(\"java.io.tmpdir\");\n-         if (tmpDir != null) return tmpDir;\n-\n-         \/\/ JDK < 1.4\n-         File tmpFile = null;\n-         try {\n-             \/\/ Try to guess the system temporary dir...\n-             tmpFile = File.createTempFile(\"tmp\",\"jmx\");\n-             if (tmpFile == null) return null;\n-             final File tmpDirFile = tmpFile.getParentFile();\n-             if (tmpDirFile == null) return null;\n-             return tmpDirFile.getAbsolutePath();\n-         } catch (Exception x) {\n-             MLET_LOGGER.log(Level.DEBUG,\n-                     \"Failed to determine system temporary dir\");\n-             return null;\n-         } finally {\n-             \/\/ Cleanup ...\n-             if (tmpFile!=null) {\n-                 try {\n-                     boolean deleted = tmpFile.delete();\n-                     if (!deleted) {\n-                         MLET_LOGGER.log(Level.DEBUG,\n-                                 \"Failed to delete temp file\");\n-                     }\n-                 } catch (Exception x) {\n-                     MLET_LOGGER.log(Level.DEBUG,\n-                             \"Failed to delete temporary file\", x);\n-                 }\n-             }\n-        }\n-     }\n-\n-     \/**\n-      * Search the specified native library in any of the JAR files\n-      * loaded by this classloader.  If the library is found copy it\n-      * into the library directory and return the absolute path.  If\n-      * the library is not found then return null.\n-      *\/\n-     private synchronized String loadLibraryAsResource(String libname) {\n-         try {\n-             InputStream is = getResourceAsStream(\n-                     libname.replace(File.separatorChar,'\/'));\n-             if (is != null) {\n-                 try {\n-                     File directory = new File(libraryDirectory);\n-                     directory.mkdirs();\n-                     File file = Files.createTempFile(directory.toPath(),\n-                                                      libname + \".\", null)\n-                                      .toFile();\n-                     file.deleteOnExit();\n-                     Files.copy(is, file.toPath(), StandardCopyOption.REPLACE_EXISTING);\n-                     return file.getAbsolutePath();\n-                 } finally {\n-                     is.close();\n-                 }\n-             }\n-         } catch (Exception e) {\n-             MLET_LOGGER.log(Level.DEBUG,\n-                     \"Failed to load library : \" + libname, e);\n-             return null;\n-         }\n-         return null;\n-     }\n-\n-   \/**\n-    * Removes any white space from a string. This is used to\n-    * convert strings such as \"Windows NT\" to \"WindowsNT\".\n-    *\/\n-     private static String removeSpace(String s) {\n-         return s.trim().replace(\" \", \"\");\n-     }\n-\n-     \/**\n-      * <p>This method is to be overridden when extending this service to\n-      * support caching and versioning.  It is called from {@link\n-      * #getMBeansFromURL getMBeansFromURL} when the version,\n-      * codebase, and jarfile have been extracted from the MLet file,\n-      * and can be used to verify that it is all right to load the\n-      * given MBean, or to replace the given URL with a different one.<\/p>\n-      *\n-      * <p>The default implementation of this method returns\n-      * <code>codebase<\/code> unchanged.<\/p>\n-      *\n-      * @param version The version number of the <CODE>.jar<\/CODE>\n-      * file stored locally.\n-      * @param codebase The base URL of the remote <CODE>.jar<\/CODE> file.\n-      * @param jarfile The name of the <CODE>.jar<\/CODE> file to be loaded.\n-      * @param mlet The <CODE>MLetContent<\/CODE> instance that\n-      * represents the <CODE>MLET<\/CODE> tag.\n-      *\n-      * @return the codebase to use for the loaded MBean.  The returned\n-      * value should not be null.\n-      *\n-      * @exception Exception if the MBean is not to be loaded for some\n-      * reason.  The exception will be added to the set returned by\n-      * {@link #getMBeansFromURL getMBeansFromURL}.\n-      *\n-      *\/\n-     protected URL check(String version, URL codebase, String jarfile,\n-                         MLetContent mlet)\n-             throws Exception {\n-         return codebase;\n-     }\n-\n-    \/**\n-     * Loads the serialized object specified by the <CODE>OBJECT<\/CODE>\n-     * attribute of the <CODE>MLET<\/CODE> tag.\n-     *\n-     * @param codebase The <CODE>codebase<\/CODE>.\n-     * @param filename The name of the file containing the serialized object.\n-     * @return The serialized object.\n-     * @exception ClassNotFoundException The specified serialized\n-     * object could not be found.\n-     * @exception IOException An I\/O error occurred while loading\n-     * serialized object.\n-     *\/\n-     private Object loadSerializedObject(URL codebase, String filename)\n-             throws IOException, ClassNotFoundException {\n-        if (filename != null) {\n-            filename = filename.replace(File.separatorChar,'\/');\n-        }\n-        if (MLET_LOGGER.isLoggable(Level.TRACE)) {\n-            MLET_LOGGER.log(Level.TRACE, codebase.toString() + filename);\n-        }\n-        InputStream is = getResourceAsStream(filename);\n-        if (is != null) {\n-            try {\n-                ObjectInputStream ois = new MLetObjectInputStream(is, this);\n-                Object serObject = ois.readObject();\n-                ois.close();\n-                return serObject;\n-            } catch (IOException | ClassNotFoundException e) {\n-                if (MLET_LOGGER.isLoggable(Level.DEBUG)) {\n-                    MLET_LOGGER.log(Level.DEBUG,\n-                            \"Exception while deserializing \" + filename, e);\n-                }\n-                throw e;\n-            }\n-        } else {\n-            if (MLET_LOGGER.isLoggable(Level.DEBUG)) {\n-                MLET_LOGGER.log(Level.DEBUG, \"Error: File \" + filename +\n-                        \" containing serialized object not found\");\n-            }\n-            throw new Error(\"File \" + filename + \" containing serialized object not found\");\n-        }\n-     }\n-\n-     \/**\n-      * Converts the String value of the constructor's parameter to\n-      * a basic Java object with the type of the parameter.\n-      *\/\n-     private  Object constructParameter(String param, String type) {\n-         \/\/ check if it is a primitive type\n-         Class<?> c = primitiveClasses.get(type);\n-         if (c != null) {\n-            try {\n-                Constructor<?> cons =\n-                    c.getConstructor(String.class);\n-                Object[] oo = new Object[1];\n-                oo[0]=param;\n-                return(cons.newInstance(oo));\n-\n-            } catch (Exception  e) {\n-                MLET_LOGGER.log(Level.DEBUG, \"Got unexpected exception\", e);\n-            }\n-        }\n-         return switch (type) {\n-             case \"java.lang.Boolean\" -> Boolean.valueOf(param);\n-             case \"java.lang.Byte\" -> Byte.valueOf(param);\n-             case \"java.lang.Short\" -> Short.valueOf(param);\n-             case \"java.lang.Long\" -> Long.valueOf(param);\n-             case \"java.lang.Integer\" -> Integer.valueOf(param);\n-             case \"java.lang.Float\" -> Float.valueOf(param);\n-             case \"java.lang.Double\" -> Double.valueOf(param);\n-             default -> param;\n-         };\n-     }\n-\n-    @SuppressWarnings(\"removal\")\n-    private synchronized void setMBeanServer(final MBeanServer server) {\n-        this.server = server;\n-        PrivilegedAction<ClassLoaderRepository> act =\n-            new PrivilegedAction<>() {\n-                public ClassLoaderRepository run() {\n-                    return server.getClassLoaderRepository();\n-                }\n-            };\n-        currentClr = AccessController.doPrivileged(act);\n-    }\n-\n-}\n","filename":"src\/java.management\/share\/classes\/javax\/management\/loading\/MLet.java","additions":0,"deletions":1294,"binary":false,"changes":1294,"status":"deleted"},{"patch":"@@ -1,245 +0,0 @@\n-\/*\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package javax.management.loading;\n-\n-\n-\/\/ java import\n-\n-import java.net.URL;\n-import java.net.MalformedURLException;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Map;\n-\n-\/**\n- * This class represents the contents of the <CODE>MLET<\/CODE> tag.\n- * It can be consulted by a subclass of {@link MLet} that overrides\n- * the {@link MLet#check MLet.check} method.\n- *\n- * @deprecated This API is part of Management Applets (m-lets), which is a legacy feature that allows loading\n- * of remote MBeans. This feature is not usable without a Security Manager, which is deprecated and subject to\n- * removal in a future release. Consequently, this API is also deprecated and subject to removal. There is no replacement.\n- *\n- * @since 1.6\n- *\/\n-@Deprecated(since=\"20\", forRemoval=true)\n-public class MLetContent {\n-\n-    \/**\n-     * A map of the attributes of the <CODE>MLET<\/CODE> tag\n-     * and their values.\n-     *\/\n-    private Map<String,String> attributes;\n-\n-    \/**\n-     * An ordered list of the TYPE attributes that appeared in nested\n-     * &lt;PARAM&gt; tags.\n-     *\/\n-    private List<String> types;\n-\n-    \/**\n-     * An ordered list of the VALUE attributes that appeared in nested\n-     * &lt;PARAM&gt; tags.\n-     *\/\n-    private List<String> values;\n-\n-    \/**\n-     * The MLet text file's base URL.\n-     *\/\n-    private URL documentURL;\n-    \/**\n-     * The base URL.\n-     *\/\n-    private URL baseURL;\n-\n-\n-    \/**\n-     * Creates an <CODE>MLet<\/CODE> instance initialized with attributes read\n-     * from an <CODE>MLET<\/CODE> tag in an MLet text file.\n-     *\n-     * @param url The URL of the MLet text file containing the\n-     * <CODE>MLET<\/CODE> tag.\n-     * @param attributes A map of the attributes of the <CODE>MLET<\/CODE> tag.\n-     * The keys in this map are the attribute names in lowercase, for\n-     * example <code>codebase<\/code>.  The values are the associated attribute\n-     * values.\n-     * @param types A list of the TYPE attributes that appeared in nested\n-     * &lt;PARAM&gt; tags.\n-     * @param values A list of the VALUE attributes that appeared in nested\n-     * &lt;PARAM&gt; tags.\n-     *\/\n-    public MLetContent(URL url, Map<String,String> attributes,\n-                       List<String> types, List<String> values) {\n-        this.documentURL = url;\n-        this.attributes = Collections.unmodifiableMap(attributes);\n-        this.types = Collections.unmodifiableList(types);\n-        this.values = Collections.unmodifiableList(values);\n-\n-        \/\/ Initialize baseURL\n-        \/\/\n-        String att = getParameter(\"codebase\");\n-        if (att != null) {\n-            if (!att.endsWith(\"\/\")) {\n-                att += \"\/\";\n-            }\n-            try {\n-                @SuppressWarnings(\"deprecation\")\n-                var _unused = baseURL = new URL(documentURL, att);\n-            } catch (MalformedURLException e) {\n-                \/\/ OK : Move to next block as baseURL could not be initialized.\n-            }\n-        }\n-        if (baseURL == null) {\n-            String file = documentURL.getFile();\n-            int i = file.lastIndexOf('\/');\n-            if (i >= 0 && i < file.length() - 1) {\n-                try {\n-                    @SuppressWarnings(\"deprecation\")\n-                    var _unused = baseURL = new URL(documentURL, file.substring(0, i + 1));\n-                } catch (MalformedURLException e) {\n-                    \/\/ OK : Move to next block as baseURL could not be initialized.\n-                }\n-            }\n-        }\n-        if (baseURL == null)\n-            baseURL = documentURL;\n-\n-    }\n-\n-    \/\/ GETTERS AND SETTERS\n-    \/\/--------------------\n-\n-    \/**\n-     * Gets the attributes of the <CODE>MLET<\/CODE> tag.  The keys in\n-     * the returned map are the attribute names in lowercase, for\n-     * example <code>codebase<\/code>.  The values are the associated\n-     * attribute values.\n-     * @return A map of the attributes of the <CODE>MLET<\/CODE> tag\n-     * and their values.\n-     *\/\n-    public Map<String,String> getAttributes() {\n-        return attributes;\n-    }\n-\n-    \/**\n-     * Gets the MLet text file's base URL.\n-     * @return The MLet text file's base URL.\n-     *\/\n-    public URL getDocumentBase() {\n-        return documentURL;\n-    }\n-\n-    \/**\n-     * Gets the code base URL.\n-     * @return The code base URL.\n-     *\/\n-    public URL getCodeBase() {\n-        return baseURL;\n-    }\n-\n-    \/**\n-     * Gets the list of <CODE>.jar<\/CODE> files specified by the <CODE>ARCHIVE<\/CODE>\n-     * attribute of the <CODE>MLET<\/CODE> tag.\n-     * @return A comma-separated list of <CODE>.jar<\/CODE> file names.\n-     *\/\n-    public String getJarFiles() {\n-        return getParameter(\"archive\");\n-    }\n-\n-    \/**\n-     * Gets the value of the <CODE>CODE<\/CODE>\n-     * attribute of the <CODE>MLET<\/CODE> tag.\n-     * @return The value of the <CODE>CODE<\/CODE>\n-     * attribute of the <CODE>MLET<\/CODE> tag.\n-     *\/\n-    public String getCode() {\n-        return getParameter(\"code\");\n-    }\n-\n-    \/**\n-     * Gets the value of the <CODE>OBJECT<\/CODE>\n-     * attribute of the <CODE>MLET<\/CODE> tag.\n-     * @return The value of the <CODE>OBJECT<\/CODE>\n-     * attribute of the <CODE>MLET<\/CODE> tag.\n-     *\/\n-    public String getSerializedObject() {\n-        return getParameter(\"object\");\n-    }\n-\n-    \/**\n-     * Gets the value of the <CODE>NAME<\/CODE>\n-     * attribute of the <CODE>MLET<\/CODE> tag.\n-     * @return The value of the <CODE>NAME<\/CODE>\n-     * attribute of the <CODE>MLET<\/CODE> tag.\n-     *\/\n-    public String getName() {\n-        return getParameter(\"name\");\n-    }\n-\n-\n-    \/**\n-     * Gets the value of the <CODE>VERSION<\/CODE>\n-     * attribute of the <CODE>MLET<\/CODE> tag.\n-     * @return The value of the <CODE>VERSION<\/CODE>\n-     * attribute of the <CODE>MLET<\/CODE> tag.\n-     *\/\n-    public String getVersion() {\n-        return getParameter(\"version\");\n-    }\n-\n-    \/**\n-     * Gets the list of values of the <code>TYPE<\/code> attribute in\n-     * each nested &lt;PARAM&gt; tag within the <code>MLET<\/code>\n-     * tag.\n-     * @return the list of types.\n-     *\/\n-    public List<String> getParameterTypes() {\n-        return types;\n-    }\n-\n-    \/**\n-     * Gets the list of values of the <code>VALUE<\/code> attribute in\n-     * each nested &lt;PARAM&gt; tag within the <code>MLET<\/code>\n-     * tag.\n-     * @return the list of values.\n-     *\/\n-    public List<String> getParameterValues() {\n-        return values;\n-    }\n-\n-    \/**\n-     * Gets the value of the specified\n-     * attribute of the <CODE>MLET<\/CODE> tag.\n-     *\n-     * @param name A string representing the name of the attribute.\n-     * @return The value of the specified\n-     * attribute of the <CODE>MLET<\/CODE> tag.\n-     *\/\n-    private String getParameter(String name) {\n-        return attributes.get(name.toLowerCase());\n-    }\n-\n-}\n","filename":"src\/java.management\/share\/classes\/javax\/management\/loading\/MLetContent.java","additions":0,"deletions":245,"binary":false,"changes":245,"status":"deleted"},{"patch":"@@ -1,190 +0,0 @@\n-\/*\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package javax.management.loading;\n-\n-import java.net.URL;\n-import java.io.InputStream;\n-import java.io.IOException;\n-import java.util.Set;\n-import java.util.Enumeration;\n-\n-import javax.management.*;\n-\n-\n-\n-\/**\n- * Exposes the remote management interface of the MLet\n- * MBean.\n- *\n- * @deprecated This API is part of Management Applets (m-lets), which is a legacy feature that allows loading\n- * of remote MBeans. This feature is not usable without a Security Manager, which is deprecated and subject to\n- * removal in a future release. Consequently, this API is also deprecated and subject to removal. There is no replacement.\n- *\n- * @since 1.5\n- *\/\n-@Deprecated(since=\"20\", forRemoval=true)\n-public interface MLetMBean   {\n-\n-    \/**\n-     * Loads a text file containing MLET tags that define the MBeans\n-     * to be added to the MBean server. The location of the text file is\n-     * specified by a URL. The text file is read using the UTF-8\n-     * encoding. The MBeans specified in the MLET file will be\n-     * instantiated and registered in the MBean server.\n-     *\n-     * @param url The URL of the text file to be loaded as String object.\n-     *\n-     * @return A set containing one entry per MLET tag in the m-let\n-     * text file loaded.  Each entry specifies either the\n-     * ObjectInstance for the created MBean, or a throwable object\n-     * (that is, an error or an exception) if the MBean could not be\n-     * created.\n-     *\n-     * @exception ServiceNotFoundException One of the following errors\n-     * has occurred: The m-let text file does not contain an MLET tag,\n-     * the m-let text file is not found, a mandatory attribute of the\n-     * MLET tag is not specified, the value of url is malformed.\n-     *\/\n-    public Set<Object> getMBeansFromURL(String url)\n-            throws ServiceNotFoundException;\n-\n-    \/**\n-     * Loads a text file containing MLET tags that define the MBeans\n-     * to be added to the MBean server. The location of the text file is\n-     * specified by a URL. The text file is read using the UTF-8\n-     * encoding. The MBeans specified in the MLET file will be\n-     * instantiated and registered in the MBean server.\n-     *\n-     * @param url The URL of the text file to be loaded as URL object.\n-     *\n-     * @return A set containing one entry per MLET tag in the m-let\n-     * text file loaded.  Each entry specifies either the\n-     * ObjectInstance for the created MBean, or a throwable object\n-     * (that is, an error or an exception) if the MBean could not be\n-     * created.\n-     *\n-     * @exception ServiceNotFoundException One of the following errors\n-     * has occurred: The m-let text file does not contain an MLET tag,\n-     * the m-let text file is not found, a mandatory attribute of the\n-     * MLET tag is not specified, the value of url is null.\n-     *\/\n-    public Set<Object> getMBeansFromURL(URL url)\n-            throws ServiceNotFoundException;\n-\n-    \/**\n-     * Appends the specified URL to the list of URLs to search for classes and\n-     * resources.\n-     *\n-     * @param url the URL to add.\n-     *\/\n-    public void addURL(URL url) ;\n-\n-    \/**\n-     * Appends the specified URL to the list of URLs to search for classes and\n-     * resources.\n-     *\n-     * @param url the URL to add.\n-     *\n-     * @exception ServiceNotFoundException The specified URL is malformed.\n-     *\/\n-    public void addURL(String url) throws ServiceNotFoundException;\n-\n-    \/**\n-     * Returns the search path of URLs for loading classes and resources.\n-     * This includes the original list of URLs specified to the constructor,\n-     * along with any URLs subsequently appended by the addURL() method.\n-     *\n-     * @return the list of URLs.\n-     *\/\n-    public URL[] getURLs();\n-\n-    \/** Finds the resource with the given name.\n-     * A resource is some data (images, audio, text, etc) that can be accessed by class code in a way that is\n-     *   independent of the location of the code.\n-     *   The name of a resource is a \"\/\"-separated path name that identifies the resource.\n-     *\n-     * @param name The resource name\n-     *\n-     * @return  An URL for reading the resource, or null if the resource could not be found or the caller doesn't have adequate privileges to get the\n-     * resource.\n-     *\/\n-    public URL getResource(String name);\n-\n-    \/** Returns an input stream for reading the specified resource. The search order is described in the documentation for\n-     *  getResource(String).\n-     *\n-     * @param name  The resource name\n-     *\n-     * @return An input stream for reading the resource, or null if the resource could not be found\n-     *\n-     *\/\n-    public InputStream getResourceAsStream(String name);\n-\n-    \/**\n-     * Finds all the resources with the given name. A resource is some\n-     * data (images, audio, text, etc) that can be accessed by class\n-     * code in a way that is independent of the location of the code.\n-     * The name of a resource is a \"\/\"-separated path name that\n-     * identifies the resource.\n-     *\n-     * @param name The  resource name.\n-     *\n-     * @return An enumeration of URL to the resource. If no resources\n-     * could be found, the enumeration will be empty. Resources that\n-     * cannot be accessed will not be in the enumeration.\n-     *\n-     * @exception IOException if an I\/O exception occurs when\n-     * searching for resources.\n-     *\/\n-    public Enumeration<URL> getResources(String name) throws IOException;\n-\n-    \/**\n-     * Gets the current directory used by the library loader for\n-     * storing native libraries before they are loaded into memory.\n-     *\n-     * @return The current directory used by the library loader.\n-     *\n-     * @see #setLibraryDirectory\n-     *\n-     * @throws UnsupportedOperationException if this implementation\n-     * does not support storing native libraries in this way.\n-     *\/\n-    public String getLibraryDirectory();\n-\n-    \/**\n-     * Sets the directory used by the library loader for storing\n-     * native libraries before they are loaded into memory.\n-     *\n-     * @param libdir The directory used by the library loader.\n-     *\n-     * @see #getLibraryDirectory\n-     *\n-     * @throws UnsupportedOperationException if this implementation\n-     * does not support storing native libraries in this way.\n-     *\/\n-    public void setLibraryDirectory(String libdir);\n-\n- }\n","filename":"src\/java.management\/share\/classes\/javax\/management\/loading\/MLetMBean.java","additions":0,"deletions":190,"binary":false,"changes":190,"status":"deleted"},{"patch":"@@ -1,125 +0,0 @@\n-\/*\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package javax.management.loading;\n-\n-\n-\/\/ java import\n-\n-import java.io.*;\n-import java.lang.reflect.Array;\n-\n-\n-\/**\n- * This subclass of ObjectInputStream delegates loading of classes to\n- * an existing MLetClassLoader.\n- *\n- * @since 1.5\n- *\/\n-@Deprecated(since=\"20\", forRemoval=true)\n-class MLetObjectInputStream extends ObjectInputStream {\n-\n-    @SuppressWarnings(\"removal\")\n-    private MLet loader;\n-\n-    \/**\n-     * Loader must be non-null;\n-     *\/\n-    @SuppressWarnings(\"removal\")\n-    public MLetObjectInputStream(InputStream in, MLet loader)\n-        throws IOException, StreamCorruptedException {\n-\n-        super(in);\n-        if (loader == null) {\n-            throw new IllegalArgumentException(\"Illegal null argument to MLetObjectInputStream\");\n-        }\n-        this.loader = loader;\n-    }\n-\n-    private Class<?> primitiveType(char c) {\n-        switch(c) {\n-        case 'B':\n-            return Byte.TYPE;\n-\n-        case 'C':\n-            return Character.TYPE;\n-\n-        case 'D':\n-            return Double.TYPE;\n-\n-        case 'F':\n-            return Float.TYPE;\n-\n-        case 'I':\n-            return Integer.TYPE;\n-\n-        case 'J':\n-            return Long.TYPE;\n-\n-        case 'S':\n-            return Short.TYPE;\n-\n-        case 'Z':\n-            return Boolean.TYPE;\n-        }\n-        return null;\n-    }\n-\n-    \/**\n-     * Use the given ClassLoader rather than using the system class\n-     *\/\n-    @Override\n-    protected Class<?> resolveClass(ObjectStreamClass objectstreamclass)\n-        throws IOException, ClassNotFoundException {\n-\n-        String s = objectstreamclass.getName();\n-        if (s.startsWith(\"[\")) {\n-            int i;\n-            for (i = 1; s.charAt(i) == '['; i++);\n-            Class<?> class1;\n-            if (s.charAt(i) == 'L') {\n-                class1 = loader.loadClass(s.substring(i + 1, s.length() - 1));\n-            } else {\n-                if (s.length() != i + 1)\n-                    throw new ClassNotFoundException(s);\n-                class1 = primitiveType(s.charAt(i));\n-            }\n-            int ai[] = new int[i];\n-            for (int j = 0; j < i; j++)\n-                ai[j] = 0;\n-\n-            return Array.newInstance(class1, ai).getClass();\n-        } else {\n-            return loader.loadClass(s);\n-        }\n-    }\n-\n-    \/**\n-     * Returns the ClassLoader being used\n-     *\/\n-    public ClassLoader getClassLoader() {\n-        return loader;\n-    }\n-}\n","filename":"src\/java.management\/share\/classes\/javax\/management\/loading\/MLetObjectInputStream.java","additions":0,"deletions":125,"binary":false,"changes":125,"status":"deleted"},{"patch":"@@ -1,279 +0,0 @@\n-\/*\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package javax.management.loading;\n-\n-import static com.sun.jmx.defaults.JmxProperties.MLET_LOGGER;\n-import static java.nio.charset.StandardCharsets.UTF_8;\n-\n-import java.io.BufferedReader;\n-import java.io.File;\n-import java.io.IOException;\n-import java.io.InputStreamReader;\n-import java.io.Reader;\n-import java.net.URL;\n-import java.net.URLConnection;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.Map;\n-import java.lang.System.Logger.Level;\n-\n-\/**\n- * This class is used for parsing URLs.\n- *\n- * @since 1.5\n- *\/\n-@Deprecated(since=\"20\", forRemoval=true)\n-class MLetParser {\n-\n-\/*\n-  * ------------------------------------------\n-  *   PRIVATE VARIABLES\n-  * ------------------------------------------\n-  *\/\n-\n-    \/**\n-     * The current character\n-     *\/\n-    private int c;\n-\n-    \/**\n-     * Tag to parse.\n-     *\/\n-    private static String tag = \"mlet\";\n-\n-\n-  \/*\n-  * ------------------------------------------\n-  *   CONSTRUCTORS\n-  * ------------------------------------------\n-  *\/\n-\n-    \/**\n-     * Create an MLet parser object\n-     *\/\n-    public MLetParser() {\n-    }\n-\n-    \/*\n-     * ------------------------------------------\n-     *   PUBLIC METHODS\n-     * ------------------------------------------\n-     *\/\n-\n-    \/**\n-     * Scan spaces.\n-     *\/\n-    public void skipSpace(Reader in) throws IOException {\n-        while ((c >= 0) && ((c == ' ') || (c == '\\t') || (c == '\\n') || (c == '\\r'))) {\n-            c = in.read();\n-        }\n-    }\n-\n-    \/**\n-     * Scan identifier\n-     *\/\n-    public String scanIdentifier(Reader in) throws IOException {\n-        StringBuilder buf = new StringBuilder();\n-        while (true) {\n-            if (((c >= 'a') && (c <= 'z')) ||\n-                ((c >= 'A') && (c <= 'Z')) ||\n-                ((c >= '0') && (c <= '9')) || (c == '_')) {\n-                buf.append((char)c);\n-                c = in.read();\n-            } else {\n-                return buf.toString();\n-            }\n-        }\n-    }\n-\n-    \/**\n-     * Scan tag\n-     *\/\n-    public Map<String,String> scanTag(Reader in) throws IOException {\n-        Map<String,String> atts = new HashMap<>();\n-        skipSpace(in);\n-        while (c >= 0 && c != '>') {\n-            if (c == '<')\n-                throw new IOException(\"Missing '>' in tag\");\n-            String att = scanIdentifier(in);\n-            String val = \"\";\n-            skipSpace(in);\n-            if (c == '=') {\n-                int quote = -1;\n-                c = in.read();\n-                skipSpace(in);\n-                if ((c == '\\'') || (c == '\\\"')) {\n-                    quote = c;\n-                    c = in.read();\n-                }\n-                StringBuilder buf = new StringBuilder();\n-                while ((c > 0) &&\n-                       (((quote < 0) && (c != ' ') && (c != '\\t') &&\n-                         (c != '\\n') && (c != '\\r') && (c != '>'))\n-                        || ((quote >= 0) && (c != quote)))) {\n-                    buf.append((char)c);\n-                    c = in.read();\n-                }\n-                if (c == quote) {\n-                    c = in.read();\n-                }\n-                skipSpace(in);\n-                val = buf.toString();\n-            }\n-            atts.put(att.toLowerCase(Locale.ENGLISH), val);\n-            skipSpace(in);\n-        }\n-        return atts;\n-    }\n-\n-    \/**\n-     * Scan an html file for {@literal <mlet>} tags.\n-     *\/\n-    @SuppressWarnings(\"removal\")\n-    public List<MLetContent> parse(URL url) throws IOException {\n-        \/\/ Warning Messages\n-        String requiresTypeWarning = \"<arg type=... value=...> tag requires type parameter.\";\n-        String requiresValueWarning = \"<arg type=... value=...> tag requires value parameter.\";\n-        String paramOutsideWarning = \"<arg> tag outside <mlet> ... <\/mlet>.\";\n-        String requiresCodeWarning = \"<mlet> tag requires either code or object parameter.\";\n-        String requiresJarsWarning = \"<mlet> tag requires archive parameter.\";\n-\n-        URLConnection conn;\n-\n-        conn = url.openConnection();\n-        Reader in = new BufferedReader(new InputStreamReader(conn.getInputStream(),\n-                                                             UTF_8));\n-\n-        \/\/ The original URL may have been redirected - this\n-        \/\/ sets it to whatever URL\/codebase we ended up getting\n-        \/\/\n-        url = conn.getURL();\n-\n-        List<MLetContent> mlets = new ArrayList<>();\n-        Map<String,String> atts = null;\n-\n-        List<String> types = new ArrayList<>();\n-        List<String> values = new ArrayList<>();\n-\n-        \/\/ debug(\"parse\",\"*** Parsing \" + url );\n-        while(true) {\n-            c = in.read();\n-            if (c == -1)\n-                break;\n-            if (c == '<') {\n-                c = in.read();\n-                if (c == '\/') {\n-                    c = in.read();\n-                    String nm = scanIdentifier(in);\n-                    if (c != '>')\n-                        throw new IOException(\"Missing '>' in tag\");\n-                    if (nm.equalsIgnoreCase(tag)) {\n-                        if (atts != null) {\n-                            mlets.add(new MLetContent(url, atts, types, values));\n-                        }\n-                        atts = null;\n-                        types = new ArrayList<>();\n-                        values = new ArrayList<>();\n-                    }\n-                } else {\n-                    String nm = scanIdentifier(in);\n-                    if (nm.equalsIgnoreCase(\"arg\")) {\n-                        Map<String,String> t = scanTag(in);\n-                        String att = t.get(\"type\");\n-                        if (att == null) {\n-                            MLET_LOGGER.log(Level.TRACE, requiresTypeWarning);\n-                            throw new IOException(requiresTypeWarning);\n-                        } else {\n-                            if (atts != null) {\n-                                types.add(att);\n-                            } else {\n-                                MLET_LOGGER.log(Level.TRACE, paramOutsideWarning);\n-                                throw new IOException(paramOutsideWarning);\n-                            }\n-                        }\n-                        String val = t.get(\"value\");\n-                        if (val == null) {\n-                            MLET_LOGGER.log(Level.TRACE, requiresValueWarning);\n-                            throw new IOException(requiresValueWarning);\n-                        } else {\n-                            if (atts != null) {\n-                                values.add(val);\n-                            } else {\n-                                MLET_LOGGER.log(Level.TRACE, paramOutsideWarning);\n-                                throw new IOException(paramOutsideWarning);\n-                            }\n-                        }\n-                    } else {\n-                        if (nm.equalsIgnoreCase(tag)) {\n-                            atts = scanTag(in);\n-                            if (atts.get(\"code\") == null && atts.get(\"object\") == null) {\n-                                MLET_LOGGER.log(Level.TRACE, requiresCodeWarning);\n-                                throw new IOException(requiresCodeWarning);\n-                            }\n-                            if (atts.get(\"archive\") == null) {\n-                                MLET_LOGGER.log(Level.TRACE, requiresJarsWarning);\n-                                throw new IOException(requiresJarsWarning);\n-                            }\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-        in.close();\n-        return mlets;\n-    }\n-\n-    \/**\n-     * Parse the document pointed by the URL urlname\n-     *\/\n-    @SuppressWarnings(\"removal\")\n-    public List<MLetContent> parseURL(String urlname) throws IOException {\n-        \/\/ Parse the document\n-        \/\/\n-        URL url;\n-        if (urlname.indexOf(':') <= 1) {\n-            String userDir = System.getProperty(\"user.dir\");\n-            String prot;\n-            if (userDir.charAt(0) == '\/' ||\n-                userDir.charAt(0) == File.separatorChar) {\n-                prot = \"file:\";\n-            } else {\n-                prot = \"file:\/\";\n-            }\n-            url =\n-                new URL(prot + userDir.replace(File.separatorChar, '\/') + \"\/\");\n-            url = new URL(url, urlname);\n-        } else {\n-            url = new URL(urlname);\n-        }\n-        \/\/ Return list of parsed MLets\n-        \/\/\n-        return parse(url);\n-    }\n-\n-}\n","filename":"src\/java.management\/share\/classes\/javax\/management\/loading\/MLetParser.java","additions":0,"deletions":279,"binary":false,"changes":279,"status":"deleted"},{"patch":"@@ -1,105 +0,0 @@\n-\/*\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package javax.management.loading;\n-\n-import java.net.URL;\n-import java.net.URLStreamHandlerFactory;\n-\n-\/**\n- * An MLet that is not added to the {@link ClassLoaderRepository}.\n- * This class acts exactly like its parent class, {@link MLet}, with\n- * one exception.  When a PrivateMLet is registered in an MBean\n- * server, it is not added to that MBean server's {@link\n- * ClassLoaderRepository}.  This is true because this class implements\n- * the interface {@link PrivateClassLoader}.\n- *\n- * @deprecated This API is part of Management Applets (m-lets), which is a legacy feature that allows loading\n- * of remote MBeans. This feature is not usable without a Security Manager, which is deprecated and subject to\n- * removal in a future release. Consequently, this API is also deprecated and subject to removal. There is no replacement.\n- *\n- * @since 1.5\n- *\/\n-@Deprecated(since=\"20\", forRemoval=true)\n-@SuppressWarnings({\"serial\", \"removal\"}) \/\/ Externalizable class w\/o no-arg c'tor\n-public class PrivateMLet extends MLet implements PrivateClassLoader {\n-    private static final long serialVersionUID = 2503458973393711979L;\n-\n-    \/**\n-      * Constructs a new PrivateMLet for the specified URLs using the\n-      * default delegation parent ClassLoader.  The URLs will be\n-      * searched in the order specified for classes and resources\n-      * after first searching in the parent class loader.\n-      *\n-      * @param  urls  The URLs from which to load classes and resources.\n-      * @param  delegateToCLR  True if, when a class is not found in\n-      * either the parent ClassLoader or the URLs, the MLet should delegate\n-      * to its containing MBeanServer's {@link ClassLoaderRepository}.\n-      *\n-      *\/\n-    public PrivateMLet(URL[] urls, boolean delegateToCLR) {\n-        super(urls, delegateToCLR);\n-    }\n-\n-    \/**\n-      * Constructs a new PrivateMLet for the given URLs. The URLs will\n-      * be searched in the order specified for classes and resources\n-      * after first searching in the specified parent class loader.\n-      * The parent argument will be used as the parent class loader\n-      * for delegation.\n-      *\n-      * @param  urls  The URLs from which to load classes and resources.\n-      * @param  parent The parent class loader for delegation.\n-      * @param  delegateToCLR  True if, when a class is not found in\n-      * either the parent ClassLoader or the URLs, the MLet should delegate\n-      * to its containing MBeanServer's {@link ClassLoaderRepository}.\n-      *\n-      *\/\n-    public PrivateMLet(URL[] urls, ClassLoader parent, boolean delegateToCLR) {\n-        super(urls, parent, delegateToCLR);\n-    }\n-\n-    \/**\n-      * Constructs a new PrivateMLet for the specified URLs, parent\n-      * class loader, and URLStreamHandlerFactory. The parent argument\n-      * will be used as the parent class loader for delegation. The\n-      * factory argument will be used as the stream handler factory to\n-      * obtain protocol handlers when creating new URLs.\n-      *\n-      * @param  urls  The URLs from which to load classes and resources.\n-      * @param  parent The parent class loader for delegation.\n-      * @param  factory  The URLStreamHandlerFactory to use when creating URLs.\n-      * @param  delegateToCLR  True if, when a class is not found in\n-      * either the parent ClassLoader or the URLs, the MLet should delegate\n-      * to its containing MBeanServer's {@link ClassLoaderRepository}.\n-      *\n-      *\/\n-    public PrivateMLet(URL[] urls,\n-                       ClassLoader parent,\n-                       URLStreamHandlerFactory factory,\n-                       boolean delegateToCLR) {\n-        super(urls, parent, factory, delegateToCLR);\n-    }\n-}\n","filename":"src\/java.management\/share\/classes\/javax\/management\/loading\/PrivateMLet.java","additions":0,"deletions":105,"binary":false,"changes":105,"status":"deleted"},{"patch":"@@ -5,1 +5,1 @@\n-Copyright (c) 1999, 2017, Oracle and\/or its affiliates. All rights reserved.\n+Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,9 +42,1 @@\n-\tObject[], String[])}.  The {@link\n-\tjavax.management.loading.MLet MLet} class is an example of\n-\tsuch an MBean.  It is a {@link java.net.URLClassLoader\n-\tURLClassLoader}, so the list of URLs to load classes from can\n-\tbe configured.<\/p>\n-\n-      <p>Additionally, an <code>MLet<\/code> can read a configuration\n-\tfile that specifies a set of MBeans to be registered in the same\n-\tMBean Server as the <code>MLet<\/code>.<\/p>\n+\tObject[], String[])}.<\/p>\n@@ -58,3 +50,1 @@\n-\tinterface that do not have an explicit loader parameter.  It\n-\tis also used by the <code>MLet<\/code> class when it does not\n-\tfind a class in its own set of URLs.<\/p>\n+\tinterface that do not have an explicit loader parameter.<\/p>\n@@ -64,4 +54,1 @@\n-\tthen it is not added to the class loader repository.  The class\n-\t{@link javax.management.loading.PrivateMLet PrivateMLet} is a\n-\tsubclass of <code>MLet<\/code> that implements\n-\t<code>PrivateClassLoader<\/code>.<\/p>\n+\tthen it is not added to the class loader repository.<\/p>\n","filename":"src\/java.management\/share\/classes\/javax\/management\/loading\/package.html","additions":4,"deletions":17,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n- * @run main ClassLeakTest\n+ * @run main\/othervm ClassLeakTest\n@@ -36,0 +36,1 @@\n+import java.lang.management.ManagementFactory;\n@@ -51,18 +52,0 @@\n-\n-        String[] cpaths = System.getProperty(\"test.classes\", \".\")\n-                                .split(File.pathSeparator);\n-        URL[] urls = new URL[cpaths.length];\n-        for (int i=0; i < cpaths.length; i++) {\n-            urls[i] = Paths.get(cpaths[i]).toUri().toURL();\n-        }\n-\n-        @SuppressWarnings(\"removal\")\n-        PrivateMLet mlet = new PrivateMLet(urls, null, false);\n-        Class<?> shadowClass = mlet.loadClass(TestMBean.class.getName());\n-        if (shadowClass == TestMBean.class) {\n-            System.out.println(\"TEST INVALID: MLet got original \" +\n-                               \"TestMBean not shadow\");\n-            System.exit(1);\n-        }\n-        shadowClass = null;\n-\n@@ -70,13 +53,3 @@\n-        ObjectName mletName = new ObjectName(\"x:type=mlet\");\n-        mbs.registerMBean(mlet, mletName);\n-\n-        ObjectName testName = new ObjectName(\"x:type=test\");\n-        mbs.createMBean(Test.class.getName(), testName, mletName);\n-\n-        ClassLoader testLoader = mbs.getClassLoaderFor(testName);\n-        if (testLoader != mlet) {\n-            System.out.println(\"TEST INVALID: MBean's class loader is not \" +\n-                               \"MLet: \" + testLoader);\n-            System.exit(1);\n-        }\n-        testLoader = null;\n+        ObjectName testName = new ObjectName(\"x:name=Test\");\n+        Test mbean = new Test();\n+        mbs.registerMBean(mbean, testName);\n@@ -112,0 +85,1 @@\n+        WeakReference mbeanRef = new WeakReference(mbean);\n@@ -113,4 +87,1 @@\n-        mbs.unregisterMBean(mletName);\n-\n-        WeakReference mletRef = new WeakReference(mlet);\n-        mlet = null;\n+        mbean = null;\n@@ -120,1 +91,1 @@\n-        for (int i = 0; i < 10000 && mletRef.get() != null; i++) {\n+        for (int i = 0; i < 10000 && mbeanRef.get() != null; i++) {\n@@ -125,1 +96,1 @@\n-        if (mletRef.get() == null)\n+        if (mbeanRef.get() == null)\n","filename":"test\/jdk\/javax\/management\/Introspector\/ClassLeakTest.java","additions":10,"deletions":39,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+import java.net.URLClassLoader;\n@@ -38,1 +39,0 @@\n-import javax.management.loading.MLet;\n@@ -98,1 +98,1 @@\n-        \/\/ Wich method is used to create the MBean is indicated by \"how\"\n+        \/\/ Which method is used to create the MBean is indicated by \"how\"\n@@ -378,1 +378,1 @@\n-                final ObjectName loaderName = registerMLet(server);\n+                final ObjectName loaderName = registerMB(server);\n@@ -407,1 +407,1 @@\n-                        registerMLet(server), params, signature);\n+                        registerMB(server), params, signature);\n@@ -425,1 +425,1 @@\n-        \/\/ This is a bit of a hack - we use an MLet that delegates to the\n+        \/\/ Create an MBean that delegates to the\n@@ -430,2 +430,2 @@\n-        public ObjectName registerMLet(MBeanServer server) throws Exception {\n-            final ObjectName name = new ObjectName(\"test:type=MLet\");\n+        public ObjectName registerMB(MBeanServer server) throws Exception {\n+            final ObjectName name = new ObjectName(\"test:type=TestMBean\");\n@@ -435,4 +435,2 @@\n-            @SuppressWarnings(\"removal\")\n-            final MLet mlet = new MLet(new URL[0],\n-                    ClassLoader.getSystemClassLoader());\n-            return server.registerMBean(mlet, name).getObjectName();\n+            final TestMBean mbean = new Test();\n+            return server.registerMBean(mbean, name).getObjectName();\n@@ -443,1 +441,1 @@\n-     *A Wombat MBean that can throw exceptions or errors in any of the\n+     * A Wombat MBean that can throw exceptions or errors in any of the\n@@ -517,0 +515,9 @@\n+    public static interface TestMBean {\n+    }\n+\n+    public static class Test extends URLClassLoader implements TestMBean {\n+        public Test() {\n+            super(new URL[0], ClassLoader.getSystemClassLoader());\n+        }\n+    }\n+\n","filename":"test\/jdk\/javax\/management\/MBeanServer\/PostExceptionTest.java","additions":20,"deletions":13,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,1 @@\n-        \/\/ Create an MLet that can load the same class names but\n+        \/\/ Create a SpyLoader MBean that can load the same class names but\n@@ -108,4 +108,0 @@\n-    \/* We originally had this extend MLet but for some reason that\n-       stopped the bug from happening.  Some side-effect of registering\n-       the MLet in the MBean server caused it not to fail when asked\n-       to load Z[].  *\/\n@@ -120,13 +116,0 @@\n-        \/*\n-        public Class loadClass(String name) throws ClassNotFoundException {\n-            System.out.println(\"loadClass: \" + name);\n-            return super.loadClass(name);\n-        }\n-\n-        public Class loadClass(String name, boolean resolve)\n-                throws ClassNotFoundException {\n-            System.out.println(\"loadClass: \" + name + \", \" + resolve);\n-            return super.loadClass(name, resolve);\n-        }\n-        *\/\n-\n","filename":"test\/jdk\/javax\/management\/loading\/ArrayClassTest.java","additions":2,"deletions":19,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -1,75 +0,0 @@\n-\/*\n- * Copyright (c) 2006, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 6500139\n- * @summary Test parsing error when the mlet file is\n- *          located in the web server's document root.\n- * @author Luis-Miguel Alventosa\n- *\n- * @run clean DocumentRootTest\n- * @run build DocumentRootTest\n- * @run main DocumentRootTest\n- *\/\n-\n-import java.net.URL;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import javax.management.loading.MLetContent;\n-\n-@SuppressWarnings(\"removal\")\n-public class DocumentRootTest {\n-    public static int test(URL documentBase, URL codeBase) {\n-        int error = 0;\n-        MLetContent mc = new MLetContent(\n-                documentBase,\n-                new HashMap<String,String>(),\n-                new ArrayList<String>(),\n-                new ArrayList<String>());\n-        System.out.println(\"\\nACTUAL   DOCUMENT BASE = \" + mc.getDocumentBase());\n-        System.out.println(\"EXPECTED DOCUMENT BASE = \" + documentBase);\n-        if (!documentBase.equals(mc.getDocumentBase())) {\n-            System.out.println(\"ERROR: Wrong document base\");\n-            error++;\n-        };\n-        System.out.println(\"ACTUAL   CODEBASE = \" + mc.getCodeBase());\n-        System.out.println(\"EXPECTED CODEBASE = \" + codeBase);\n-        if (!codeBase.equals(mc.getCodeBase())) {\n-            System.out.println(\"ERROR: Wrong code base\");\n-            error++;\n-        };\n-        return error;\n-    }\n-    public static void main(String[] args) throws Exception {\n-        int error = 0;\n-        error += test(new URL(\"file:\/mlet.txt\"), new URL(\"file:\/\"));\n-        error += test(new URL(\"http:\/\/localhost\/mlet.txt\"), new URL(\"http:\/\/localhost\/\"));\n-        if (error > 0) {\n-            System.out.println(\"\\nTest FAILED!\\n\");\n-            throw new IllegalArgumentException(\"Test FAILED!\");\n-        } else {\n-            System.out.println(\"\\nTest PASSED!\\n\");\n-        }\n-    }\n-}\n","filename":"test\/jdk\/javax\/management\/loading\/DocumentRootTest.java","additions":0,"deletions":75,"binary":false,"changes":75,"status":"deleted"},{"patch":"@@ -1,105 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 5018593\n- * @summary Test that calling getMBeansFromURL(url) with a bogus URL on a\n- *          given MLet instance throws a ServiceNotFoundException exception\n- *          with a non null cause.\n- * @author Luis-Miguel Alventosa\n- *\n- * @run clean GetMBeansFromURLTest\n- * @run build GetMBeansFromURLTest\n- * @run main GetMBeansFromURLTest\n- *\/\n-\n-import javax.management.MBeanServer;\n-import javax.management.MBeanServerFactory;\n-import javax.management.ObjectName;\n-import javax.management.ServiceNotFoundException;\n-import javax.management.loading.MLet;\n-\n-@SuppressWarnings(\"removal\")\n-public class GetMBeansFromURLTest {\n-\n-    public static void main(String[] args) throws Exception {\n-\n-        boolean error = false;\n-\n-        \/\/ Instantiate the MBean server\n-        \/\/\n-        System.out.println(\"Create the MBean server\");\n-        MBeanServer mbs = MBeanServerFactory.createMBeanServer();\n-\n-        \/\/ Instantiate an MLet\n-        \/\/\n-        System.out.println(\"Create the MLet\");\n-        MLet mlet = new MLet();\n-\n-        \/\/ Register the MLet MBean with the MBeanServer\n-        \/\/\n-        System.out.println(\"Register the MLet MBean\");\n-        ObjectName mletObjectName = new ObjectName(\"Test:type=MLet\");\n-        mbs.registerMBean(mlet, mletObjectName);\n-\n-        \/\/ Call getMBeansFromURL\n-        \/\/\n-        System.out.println(\"Call mlet.getMBeansFromURL(<url>)\");\n-        try {\n-            mlet.getMBeansFromURL(\"bogus:\/\/whatever\");\n-            System.out.println(\"TEST FAILED: Expected \" +\n-                               ServiceNotFoundException.class +\n-                               \" exception not thrown.\");\n-            error = true;\n-        } catch (ServiceNotFoundException e) {\n-            if (e.getCause() == null) {\n-                System.out.println(\"TEST FAILED: Got null cause in \" +\n-                                   ServiceNotFoundException.class +\n-                                   \" exception.\");\n-                error = true;\n-            } else {\n-                System.out.println(\"TEST PASSED: Got non-null cause in \" +\n-                                   ServiceNotFoundException.class +\n-                                   \" exception.\");\n-                error = false;\n-            }\n-            e.printStackTrace(System.out);\n-        }\n-\n-        \/\/ Unregister the MLet MBean\n-        \/\/\n-        System.out.println(\"Unregister the MLet MBean\");\n-        mbs.unregisterMBean(mletObjectName);\n-\n-        \/\/ Release MBean server\n-        \/\/\n-        System.out.println(\"Release the MBean server\");\n-        MBeanServerFactory.releaseMBeanServer(mbs);\n-\n-        \/\/ End Test\n-        \/\/\n-        System.out.println(\"Bye! Bye!\");\n-        if (error) System.exit(1);\n-    }\n-}\n","filename":"test\/jdk\/javax\/management\/loading\/GetMBeansFromURLTest.java","additions":0,"deletions":105,"binary":false,"changes":105,"status":"deleted"},{"patch":"@@ -1,155 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4969756\n- * @summary Test that the same native library coming from the same jar file can\n- * be loaded twice by two different MLets on the same JVM without conflict.\n- * @author Luis-Miguel Alventosa\n- *\n- * @run clean LibraryLoaderTest\n- * @run build LibraryLoaderTest\n- * @run main\/othervm LibraryLoaderTest\n- *\/\n-\n-import java.io.File;\n-import java.util.Set;\n-import javax.management.Attribute;\n-import javax.management.MBeanServer;\n-import javax.management.MBeanServerFactory;\n-import javax.management.ObjectInstance;\n-import javax.management.ObjectName;\n-import javax.management.ReflectionException;\n-\n-public class LibraryLoaderTest {\n-\n-    private static final String mletInfo[][] = {\n-        {\"testDomain:type=MLet,index=0\", \"UseNativeLib0.html\"},\n-        {\"testDomain:type=MLet,index=1\", \"UseNativeLib1.html\"}\n-    };\n-\n-    public static void main(String args[]) throws Exception {\n-\n-        String osName = System.getProperty(\"os.name\");\n-        System.out.println(\"os.name=\" + osName);\n-        String osArch = System.getProperty(\"os.arch\");\n-        System.out.println(\"os.name=\" + osArch);\n-\n-        \/\/ Check for supported platforms:\n-        \/\/\n-        \/\/ Windows\/x86\n-        \/\/\n-        if ((!(osName.startsWith(\"Windows\") && osArch.equals(\"x86\")))) {\n-            System.out.println(\n-              \"This test runs only on Windows\/x86 platforms\");\n-            System.out.println(\"Bye! Bye!\");\n-            return;\n-        }\n-\n-        String libPath = System.getProperty(\"java.library.path\");\n-        System.out.println(\"java.library.path=\" + libPath);\n-        String testSrc = System.getProperty(\"test.src\");\n-        System.out.println(\"test.src=\" + testSrc);\n-        String workingDir = System.getProperty(\"user.dir\");\n-        System.out.println(\"user.dir=\" + workingDir);\n-\n-        String urlCodebase;\n-        if (testSrc.startsWith(\"\/\")) {\n-            urlCodebase =\n-                \"file:\" + testSrc.replace(File.separatorChar, '\/') + \"\/\";\n-        } else {\n-            urlCodebase =\n-                \"file:\/\" + testSrc.replace(File.separatorChar, '\/') + \"\/\";\n-        }\n-\n-        \/\/ Create MBeanServer\n-        \/\/\n-        MBeanServer server = MBeanServerFactory.newMBeanServer();\n-\n-        \/\/ Create MLet instances and call getRandom on the loaded MBeans\n-        \/\/\n-        for (int i = 0; i < mletInfo.length; i++) {\n-            \/\/ Create ObjectName for MLet\n-            \/\/\n-            ObjectName mlet = new ObjectName(mletInfo[i][0]);\n-            server.createMBean(\"javax.management.loading.MLet\", mlet);\n-            System.out.println(\"MLet = \" + mlet);\n-\n-            \/\/ Display old library directory and set it to test.classes\n-            \/\/\n-            String libraryDirectory =\n-                (String) server.getAttribute(mlet, \"LibraryDirectory\");\n-            System.out.println(\"Old Library Directory = \" +\n-                               libraryDirectory);\n-            Attribute attribute =\n-                new Attribute(\"LibraryDirectory\", workingDir);\n-            server.setAttribute(mlet, attribute);\n-            libraryDirectory =\n-                (String) server.getAttribute(mlet, \"LibraryDirectory\");\n-            System.out.println(\"New Library Directory = \" +\n-                               libraryDirectory);\n-\n-            \/\/ Get MBeans from URL\n-            \/\/\n-            String mletURL = urlCodebase + mletInfo[i][1];\n-            System.out.println(\"MLet URL = \" + mletURL);\n-            Object[] params = new Object[] { mletURL };\n-            String[] signature = new String[] {\"java.lang.String\"};\n-            Object res[] = ((Set<?>) server.invoke(mlet,\n-                                                   \"getMBeansFromURL\",\n-                                                   params,\n-                                                   signature)).toArray();\n-\n-            \/\/ Iterate through all the loaded MBeans\n-            \/\/\n-            for (int j = 0; j < res.length; j++) {\n-                \/\/ Now ensure none of the returned objects is a Throwable\n-                \/\/\n-                if (res[j] instanceof Throwable) {\n-                    ((Throwable) res[j]).printStackTrace(System.out);\n-                    throw new Exception(\"Failed to load the MBean #\" + j\n-                        ,(Throwable)res[j]);\n-                }\n-\n-                \/\/ On each of the loaded MBeans, try to invoke their\n-                \/\/ native operation\n-                \/\/\n-                Object result = null;\n-                try {\n-                    ObjectName mbean =\n-                        ((ObjectInstance) res[j]).getObjectName();\n-                    result = server.getAttribute(mbean, \"Random\");\n-                    System.out.println(\"MBean #\" + j + \" = \" + mbean);\n-                    System.out.println(\"Random number = \" + result);\n-                } catch (ReflectionException e) {\n-                    e.getTargetException().printStackTrace(System.out);\n-                    throw new Exception (\"A ReflectionException \"\n-                            + \"occured when attempting to invoke \"\n-                            + \"a native library based operation.\",\n-                            e.getTargetException());\n-                }\n-            }\n-        }\n-    }\n-}\n","filename":"test\/jdk\/javax\/management\/loading\/LibraryLoader\/LibraryLoaderTest.java","additions":0,"deletions":155,"binary":false,"changes":155,"status":"deleted"},{"patch":"@@ -1,19 +0,0 @@\n-<HTML>\n-<MLET\n-\tCODE = \"UseNativeLib.class\"\n-\tARCHIVE = \"native.jar\"\n-\tNAME = \"mletTests:type=nativeLibLoading,index=0.0\"\n->\n-<\/MLET>\n-<MLET\n-\tCODE = \"UseNativeLib.class\"\n-\tARCHIVE = \"native.jar\"\n-\tNAME = \"mletTests:type=nativeLibLoading,index=0.1\"\n->\n-<\/MLET>\n-<BODY>\n-\n-Test MLet.\n-\n-<\/BODY>\n-<\/HTML>\n","filename":"test\/jdk\/javax\/management\/loading\/LibraryLoader\/UseNativeLib0.html","additions":0,"deletions":19,"binary":false,"changes":19,"status":"deleted"},{"patch":"@@ -1,19 +0,0 @@\n-<HTML>\n-<MLET\n-\tCODE = \"UseNativeLib.class\"\n-\tARCHIVE = \"native.jar\"\n-\tNAME = \"mletTests:type=nativeLibLoading,index=1.0\"\n->\n-<\/MLET>\n-<MLET\n-\tCODE = \"UseNativeLib.class\"\n-\tARCHIVE = \"native.jar\"\n-\tNAME = \"mletTests:type=nativeLibLoading,index=1.1\"\n->\n-<\/MLET>\n-<BODY>\n-\n-Test MLet.\n-\n-<\/BODY>\n-<\/HTML>\n","filename":"test\/jdk\/javax\/management\/loading\/LibraryLoader\/UseNativeLib1.html","additions":0,"deletions":19,"binary":false,"changes":19,"status":"deleted"},{"patch":"@@ -1,15 +0,0 @@\n-#include <jni.h>\n-#include <stdio.h>\n-#include <stdlib.h>\n-\n-#ifdef __cplusplus\n-extern \"C\" {\n-#endif\n-\n-JNIEXPORT jint JNICALL Java_UseNativeLib_getRandom(JNIEnv *env, jobject obj) {\n-        return rand();\n-}\n-\n-#ifdef __cplusplus\n-}\n-#endif\n","filename":"test\/jdk\/javax\/management\/loading\/LibraryLoader\/jar_src\/RandomGen.c","additions":0,"deletions":15,"binary":false,"changes":15,"status":"deleted"},{"patch":"@@ -1,15 +0,0 @@\n-#include <jni.h>\n-\n-#ifndef RandomGen\n-#define RandomGen\n-#ifdef __cplusplus\n-extern \"C\" {\n-#endif\n-\n-JNIEXPORT jint JNICALL Java_RandomGen_getRandom\n-  (JNIEnv *, jobject);\n-\n-#ifdef __cplusplus\n-}\n-#endif\n-#endif\n","filename":"test\/jdk\/javax\/management\/loading\/LibraryLoader\/jar_src\/RandomGen.h","additions":0,"deletions":15,"binary":false,"changes":15,"status":"deleted"},{"patch":"@@ -1,36 +0,0 @@\n-\/*\n- * Copyright (c) 2004, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-public class UseNativeLib implements java.io.Serializable, UseNativeLibMBean {\n-\n-    public native int getRandom();\n-\n-    static {\n-        try {\n-            System.loadLibrary(\"genrandom\");\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-    }\n-\n-}\n","filename":"test\/jdk\/javax\/management\/loading\/LibraryLoader\/jar_src\/UseNativeLib.java","additions":0,"deletions":36,"binary":false,"changes":36,"status":"deleted"},{"patch":"@@ -1,26 +0,0 @@\n-\/*\n- * Copyright (c) 2004, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-public interface UseNativeLibMBean {\n-    public int getRandom();\n-}\n","filename":"test\/jdk\/javax\/management\/loading\/LibraryLoader\/jar_src\/UseNativeLibMBean.java","additions":0,"deletions":26,"binary":false,"changes":26,"status":"deleted"},{"filename":"test\/jdk\/javax\/management\/loading\/LibraryLoader\/native.jar","binary":true,"status":"deleted"},{"patch":"@@ -1,65 +0,0 @@\n-\/*\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4836468\n- * @summary Test that the getClassLoaderRepository permission is not necessary\n- * for the test codebase as it is executed by the MLet code using\n- * doPrivileged.\n- * @author Luis-Miguel Alventosa\n- *\n- * @run clean MLetCommand\n- * @run build MLetCommand\n- * @run main\/othervm\/java.security.policy=policy MLetCommand\n- *\/\n-\n-import javax.management.MBeanServer;\n-import javax.management.MBeanServerFactory;\n-import javax.management.ObjectName;\n-import java.io.File;\n-\n-@SuppressWarnings(\"removal\")\n-public class MLetCommand {\n-\n-    public static void main(String[] args) throws Exception {\n-        if (System.getSecurityManager() == null)\n-            throw new IllegalStateException(\"No security manager installed!\");\n-\n-        System.out.println(\"java.security.policy=\" +\n-                           System.getProperty(\"java.security.policy\"));\n-\n-        \/\/ Instantiate the MBean server\n-        \/\/\n-        System.out.println(\"Create the MBean server\");\n-        MBeanServer mbs = MBeanServerFactory.createMBeanServer();\n-        \/\/ Register the MLetMBean\n-        \/\/\n-        System.out.println(\"Create MLet MBean\");\n-        ObjectName mlet = new ObjectName(\"MLetTest:name=MLetMBean\");\n-        mbs.createMBean(\"javax.management.loading.MLet\", mlet);\n-        \/\/ Test OK!\n-        \/\/\n-        System.out.println(\"Bye! Bye!\");\n-    }\n-}\n","filename":"test\/jdk\/javax\/management\/loading\/MLetCLR\/MLetCommand.java","additions":0,"deletions":65,"binary":false,"changes":65,"status":"deleted"},{"patch":"@@ -1,8 +0,0 @@\n-\n-grant {\n-  permission java.util.PropertyPermission \"*\", \"read\";\n-  permission javax.management.MBeanServerPermission \"createMBeanServer\";\n-  permission javax.management.MBeanPermission \"javax.management.loading.MLet#-[-]\", \"instantiate\";\n-  permission javax.management.MBeanPermission \"javax.management.loading.MLet#-[MLetTest:name=MLetMBean]\", \"registerMBean\";\n-  permission java.lang.RuntimePermission \"createClassLoader\";\n-};\n","filename":"test\/jdk\/javax\/management\/loading\/MLetCLR\/policy","additions":0,"deletions":8,"binary":false,"changes":8,"status":"deleted"},{"patch":"@@ -1,146 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4796780\n- * @summary The class MLetContentTest becomes public\n- * @author Shanliang JIANG\n- *\n- * @run clean MLetContentTest\n- * @run build MLetContentTest\n- * @run main MLetContentTest\n- *\/\n-\n-import java.util.*;\n-import java.net.*;\n-\n-import javax.management.loading.*;\n-\n-@SuppressWarnings(\"removal\")\n-public class MLetContentTest {\n-    public static void main(String[] args) throws Exception {\n-        System.out.println(\">>> General test for the public class MLetContent.\");\n-\n-        Map<String,String> attributes = new HashMap();\n-        attributes.put(\"archive\", archive);\n-        attributes.put(\"Archive\", \"hahaha\");\n-\n-        attributes.put(\"code\", code);\n-        attributes.put(\"codE\", \"hihi\");\n-\n-        attributes.put(\"object\", object);\n-        attributes.put(\"obJect\", \"toto\");\n-\n-        attributes.put(\"name\", name);\n-        attributes.put(\"NAME\", \"titi\");\n-\n-        attributes.put(\"version\", version);\n-        attributes.put(\"VeRsIoN\", \"tttt\");\n-\n-        List<String> types = new ArrayList();\n-        types.add(\"my type\");\n-\n-        List<String> values = new ArrayList();\n-        values.add(\"my values\");\n-\n-        URL url = new URL(baseUrl+myfile);\n-        MLetContent content = new MLetContent(url, attributes, types, values);\n-\n-        if (!attributes.equals(content.getAttributes())) {\n-            throw new RuntimeException(\"The user specific attributes are changed.\");\n-        }\n-\n-        if (!url.equals(content.getDocumentBase())) {\n-            throw new RuntimeException(\"The user specific document bas is changed.\");\n-        }\n-\n-        if (!archive.equals(content.getJarFiles())) {\n-            throw new RuntimeException(\"The user specific archive files are changed.\");\n-        }\n-\n-        if (!code.equals(content.getCode())) {\n-            throw new RuntimeException(\"The user specific code is changed.\");\n-        }\n-\n-        if (!object.equals(content.getSerializedObject())) {\n-            throw new RuntimeException(\"The user specific object is changed.\");\n-        }\n-\n-        if (!name.equals(content.getName())) {\n-            throw new RuntimeException(\"The user specific name is changed.\");\n-        }\n-\n-        if (!version.equals(content.getVersion())) {\n-            throw new RuntimeException(\"The user specific version is changed.\");\n-        }\n-\n-        if (!types.equals(content.getParameterTypes())) {\n-            throw new RuntimeException(\"The user specific types are changed.\");\n-        }\n-\n-        if (!values.equals(content.getParameterValues())) {\n-            throw new RuntimeException(\"The user specific values are changed.\");\n-        }\n-\n-        if (!baseUrl.equals(content.getCodeBase().toString())) {\n-            throw new RuntimeException(\"The user specific base url are changed.\");\n-        }\n-\n-        url = new URL(baseUrl);\n-        attributes.put(\"codebase\", codebase);\n-        content = new MLetContent(url, attributes, types, values);\n-\n-        if (!content.getCodeBase().toString().equals(baseUrl+codebase)) {\n-            throw new RuntimeException(\"The user specific base url are changed.\");\n-        }\n-\n-        final MyMLet myMlet = new MyMLet();\n-\n-        if (myMlet.check(null, null, null, content) != content.getCodeBase()) {\n-            throw new RuntimeException(\"Failed to overrid the protected methed check\");\n-        }\n-\n-        System.out.println(\">>> The test is well passed.\");\n-    }\n-\n-    private static class MyMLet extends MLet {\n-        public URL check(String version,\n-                         URL codebase,\n-                         String jarfile,\n-                         MLetContent content) {\n-            return content.getCodeBase();\n-        }\n-    }\n-\n-    private static final String archive = \"my jarfile\";\n-    private static final String code = \"my code\";\n-    private static final String object = \"my object\";\n-    private static final String name = \"my name\";\n-    private static final String version = \"my version\";\n-\n-    private static final String myfile = \"My file\";\n-    private static final String baseUrl = \"file:\/tmp\/test\/\";\n-\n-    private final static String codebase = \"my code base\/\";\n-}\n","filename":"test\/jdk\/javax\/management\/loading\/MLetContentTest.java","additions":0,"deletions":146,"binary":false,"changes":146,"status":"deleted"},{"patch":"@@ -1,93 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.lang.reflect.Method;\n-import java.util.HashMap;\n-import java.util.Map;\n-import javax.management.loading.MLet;\n-import org.testng.annotations.Test;\n-import org.testng.annotations.BeforeClass;\n-import org.testng.annotations.BeforeTest;\n-\n-import static org.testng.Assert.*;\n-\n-\/*\n- * @test\n- * @bug 8058089\n- * @summary Tests various internal functions provided by MLet for correctness\n- * @author Jaroslav Bachorik\n- * @modules java.management\/javax.management.loading:open\n- * @run testng MLetInternalsTest\n- *\/\n-@SuppressWarnings(\"removal\")\n-public class MLetInternalsTest {\n-    private final static String CONSTRUCT_PARAMETER = \"constructParameter\";\n-\n-    private final static Map<String, Method> testedMethods = new HashMap<>();\n-\n-    @BeforeClass\n-    public static void setupClass() {\n-        testedMethods.clear();\n-        try {\n-            Method m = MLet.class.getDeclaredMethod(\n-                    CONSTRUCT_PARAMETER,\n-                    String.class, String.class\n-            );\n-            m.setAccessible(true);\n-\n-            testedMethods.put(CONSTRUCT_PARAMETER, m);\n-        } catch (Exception ex) {\n-            throw new Error(ex);\n-        }\n-    }\n-\n-    private MLet mlet;\n-\n-    @BeforeTest\n-    public void setupTest() {\n-        mlet = new MLet();\n-    }\n-\n-    @Test\n-    public void testConstructParameter() throws Exception {\n-        assertEquals(constructParameter(\"120\", \"int\"), 120);\n-        assertEquals(constructParameter(\"120\", \"java.lang.Integer\"), Integer.valueOf(120));\n-        assertEquals(constructParameter(\"120\", \"long\"), 120L);\n-        assertEquals(constructParameter(\"120\", \"java.lang.Long\"), Long.valueOf(120));\n-        assertEquals(constructParameter(\"120.0\", \"float\"), 120.0f);\n-        assertEquals(constructParameter(\"120.0\", \"java.lang.Float\"), Float.valueOf(120.0f));\n-        assertEquals(constructParameter(\"120.0\", \"double\"), 120.0d);\n-        assertEquals(constructParameter(\"120\", \"java.lang.Double\"), Double.valueOf(120d));\n-        assertEquals(constructParameter(\"120\", \"java.lang.String\"), \"120\");\n-        assertEquals(constructParameter(\"120\", \"byte\"), (byte)120);\n-        assertEquals(constructParameter(\"120\", \"java.lang.Byte\"), (byte)120);\n-        assertEquals(constructParameter(\"120\", \"short\"), (short)120);\n-        assertEquals(constructParameter(\"120\", \"java.lang.Short\"), (short)120);\n-        assertEquals(constructParameter(\"true\", \"boolean\"), true);\n-        assertEquals(constructParameter(\"true\", \"java.lang.Boolean\"), Boolean.valueOf(true));\n-    }\n-\n-    private Object constructParameter(String param, String type) throws Exception {\n-        return testedMethods.get(CONSTRUCT_PARAMETER).invoke(mlet, param, type);\n-    }\n-}\n","filename":"test\/jdk\/javax\/management\/loading\/MLetInternalsTest.java","additions":0,"deletions":93,"binary":false,"changes":93,"status":"deleted"},{"patch":"@@ -1,110 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 7065236\n- * @summary Checking MletParser for Locale insensitive strings\n- * @author Harsha Wardhana B\n- *\n- * @run clean MletParserLocaleTest\n- * @run build MletParserLocaleTest\n- * @run main\/othervm MletParserLocaleTest mlet4.html\n- *\/\n-\n-import java.io.File;\n-import java.util.Locale;\n-import javax.management.MBeanServer;\n-import javax.management.MBeanServerFactory;\n-import javax.management.ObjectName;\n-import javax.management.loading.MLet;\n-\n-@SuppressWarnings(\"removal\")\n-public class MletParserLocaleTest {\n-\n-    public static void main(String[] args) throws Exception {\n-\n-        boolean error = false;\n-\n-        \/\/ Instantiate the MBean server\n-        \/\/\n-        System.out.println(\"Create the MBean server\");\n-        MBeanServer mbs = MBeanServerFactory.createMBeanServer();\n-\n-        \/\/ Get Default Locale\n-        Locale loc = Locale.getDefault();\n-\n-        \/\/ Instantiate an MLet\n-        \/\/\n-        System.out.println(\"Create the MLet\");\n-        MLet mlet = new MLet();\n-\n-        \/\/ Register the MLet MBean with the MBeanServer\n-        \/\/\n-        System.out.println(\"Register the MLet MBean\");\n-        ObjectName mletObjectName = new ObjectName(\"Test:type=MLet\");\n-        mbs.registerMBean(mlet, mletObjectName);\n-\n-        \/\/ Call getMBeansFromURL\n-        \/\/\n-        System.out.println(\"Call mlet.getMBeansFromURL(<url>)\");\n-        String testSrc = System.getProperty(\"test.src\");\n-        System.out.println(\"test.src = \" + testSrc);\n-        String urlCodebase;\n-        if (testSrc.startsWith(\"\/\")) {\n-            urlCodebase =\n-                \"file:\" + testSrc.replace(File.separatorChar, '\/') + \"\/\";\n-        } else {\n-            urlCodebase =\n-                \"file:\/\" + testSrc.replace(File.separatorChar, '\/') + \"\/\";\n-        }\n-        String mletFile = urlCodebase + args[0];\n-        System.out.println(\"MLet File = \" + mletFile);\n-        try {\n-            \/\/ Change default Locale to Turkish\n-            Locale.setDefault(Locale.of(\"tr\", \"TR\"));\n-            mlet.getMBeansFromURL(mletFile);\n-            System.out.println(\"Test Passes\");\n-        } catch (Exception e) {\n-            error = true;\n-            e.printStackTrace(System.out);\n-        }finally {\n-            Locale.setDefault(loc);\n-        }\n-\n-        \/\/ Unregister the MLet MBean\n-        \/\/\n-        System.out.println(\"Unregister the MLet MBean\");\n-        mbs.unregisterMBean(mletObjectName);\n-\n-        \/\/ Release MBean server\n-        \/\/\n-        System.out.println(\"Release the MBean server\");\n-        MBeanServerFactory.releaseMBeanServer(mbs);\n-\n-        \/\/ End Test\n-        \/\/\n-        System.out.println(\"Bye! Bye!\");\n-        if (error) System.exit(1);\n-    }\n-}\n","filename":"test\/jdk\/javax\/management\/loading\/MletParserLocaleTest.java","additions":0,"deletions":110,"binary":false,"changes":110,"status":"deleted"},{"patch":"@@ -1,123 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 5042364\n- * @summary Malformed MLet text file causes infinite loop in parser.\n- * The MLetParser goes into an infinite loop when a tag is not\n- * terminated with the corresponding '>' and an opening '<' for\n- * the subsequent tag is encountered.\n- * @author Luis-Miguel Alventosa\n- *\n- * @run clean ParserInfiniteLoopTest\n- * @run build ParserInfiniteLoopTest\n- * @run main\/othervm ParserInfiniteLoopTest mlet1.html\n- * @run main\/othervm ParserInfiniteLoopTest mlet2.html\n- * @run main\/othervm ParserInfiniteLoopTest mlet3.html\n- *\/\n-\n-import java.io.File;\n-import java.io.IOException;\n-import javax.management.MBeanServer;\n-import javax.management.MBeanServerFactory;\n-import javax.management.ObjectName;\n-import javax.management.ServiceNotFoundException;\n-import javax.management.loading.MLet;\n-\n-@SuppressWarnings(\"removal\")\n-public class ParserInfiniteLoopTest {\n-\n-    public static void main(String[] args) throws Exception {\n-\n-        boolean error = false;\n-\n-        \/\/ Instantiate the MBean server\n-        \/\/\n-        System.out.println(\"Create the MBean server\");\n-        MBeanServer mbs = MBeanServerFactory.createMBeanServer();\n-\n-        \/\/ Instantiate an MLet\n-        \/\/\n-        System.out.println(\"Create the MLet\");\n-        MLet mlet = new MLet();\n-\n-        \/\/ Register the MLet MBean with the MBeanServer\n-        \/\/\n-        System.out.println(\"Register the MLet MBean\");\n-        ObjectName mletObjectName = new ObjectName(\"Test:type=MLet\");\n-        mbs.registerMBean(mlet, mletObjectName);\n-\n-        \/\/ Call getMBeansFromURL\n-        \/\/\n-        System.out.println(\"Call mlet.getMBeansFromURL(<url>)\");\n-        String testSrc = System.getProperty(\"test.src\");\n-        System.out.println(\"test.src = \" + testSrc);\n-        String urlCodebase;\n-        if (testSrc.startsWith(\"\/\")) {\n-            urlCodebase =\n-                \"file:\" + testSrc.replace(File.separatorChar, '\/') + \"\/\";\n-        } else {\n-            urlCodebase =\n-                \"file:\/\" + testSrc.replace(File.separatorChar, '\/') + \"\/\";\n-        }\n-        String mletFile = urlCodebase + args[0];\n-        System.out.println(\"MLet File = \" + mletFile);\n-        try {\n-            mlet.getMBeansFromURL(mletFile);\n-            System.out.println(\n-                \"TEST FAILED: Expected ServiceNotFoundException not thrown\");\n-            error = true;\n-        } catch (ServiceNotFoundException e) {\n-            if (e.getCause() == null) {\n-                System.out.println(\"TEST FAILED: Got unexpected null cause \" +\n-                    \"in ServiceNotFoundException\");\n-                error = true;\n-            } else if (!(e.getCause() instanceof IOException)) {\n-                System.out.println(\"TEST FAILED: Got unexpected non-null \" +\n-                    \"cause in ServiceNotFoundException\");\n-                error = true;\n-            } else {\n-                System.out.println(\"TEST PASSED: Got expected non-null \" +\n-                    \"cause in ServiceNotFoundException\");\n-                error = false;\n-            }\n-            e.printStackTrace(System.out);\n-        }\n-\n-        \/\/ Unregister the MLet MBean\n-        \/\/\n-        System.out.println(\"Unregister the MLet MBean\");\n-        mbs.unregisterMBean(mletObjectName);\n-\n-        \/\/ Release MBean server\n-        \/\/\n-        System.out.println(\"Release the MBean server\");\n-        MBeanServerFactory.releaseMBeanServer(mbs);\n-\n-        \/\/ End Test\n-        \/\/\n-        System.out.println(\"Bye! Bye!\");\n-        if (error) System.exit(1);\n-    }\n-}\n","filename":"test\/jdk\/javax\/management\/loading\/ParserInfiniteLoopTest.java","additions":0,"deletions":123,"binary":false,"changes":123,"status":"deleted"},{"patch":"@@ -1,2 +0,0 @@\n-<MLET CODE=HelloWorld ARCHIVE=\"helloworld.jar\"\n-<\/MLET>\n","filename":"test\/jdk\/javax\/management\/loading\/mlet1.html","additions":0,"deletions":2,"binary":false,"changes":2,"status":"deleted"},{"patch":"@@ -1,2 +0,0 @@\n-<MLET CODE=HelloWorld ARCHIVE=\"helloworld.jar\">\n-<\/MLET\n","filename":"test\/jdk\/javax\/management\/loading\/mlet2.html","additions":0,"deletions":2,"binary":false,"changes":2,"status":"deleted"},{"patch":"@@ -1,3 +0,0 @@\n-<MLET CODE=HelloWorld ARCHIVE=\"helloworld.jar\">\n-<ARG TYPE=argumentType VALUE=value\n-<\/MLET>\n","filename":"test\/jdk\/javax\/management\/loading\/mlet3.html","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -1,2 +0,0 @@\n-<MLET CODE=HelloWorld ARCHIVE=\"helloworld.jar\">\n-<\/MLET>\n","filename":"test\/jdk\/javax\/management\/loading\/mlet4.html","additions":0,"deletions":2,"binary":false,"changes":2,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,0 +48,1 @@\n+import javax.management.ObjectInstance;\n@@ -49,1 +50,0 @@\n-import javax.management.loading.PrivateMLet;\n@@ -83,12 +83,0 @@\n-            URL[] urls = new URL[]{new URL(clsLoadPath)};\n-            @SuppressWarnings(\"removal\")\n-            PrivateMLet mlet = new PrivateMLet(urls, null, false);\n-            Class<?> shadowClass = mlet.loadClass(TestMXBean.class.getName());\n-\n-            if (shadowClass == TestMXBean.class) {\n-                String message = \"(ERROR) MLet got original TestMXBean, not shadow\";\n-                System.out.println(message);\n-                throw new RuntimeException(message);\n-            }\n-            shadowClass = null;\n-\n@@ -96,3 +84,0 @@\n-            ObjectName mletName = new ObjectName(\"x:type=mlet\");\n-            mbs.registerMBean(mlet, mletName);\n-\n@@ -100,15 +85,1 @@\n-            mbs.createMBean(Test.class.getName(), testName, mletName);\n-\n-            \/\/ That test fails because the MXBean instance is accessed via\n-            \/\/ a delegate OpenMBean which has\n-            ClassLoader testLoader = mbs.getClassLoaderFor(testName);\n-\n-            if (testLoader != mlet) {\n-                System.out.println(\"MLet \" + mlet);\n-                String message = \"(ERROR) MXBean's class loader is not MLet: \"\n-                        + testLoader;\n-                System.out.println(message);\n-                throw new RuntimeException(message);\n-            }\n-            testLoader = null;\n-\n+            ObjectInstance mb = mbs.createMBean(Test.class.getName(), testName);\n@@ -267,0 +238,1 @@\n+            WeakReference<ObjectInstance> mbRef = new WeakReference<>(mb);\n@@ -268,6 +240,1 @@\n-            mbs.unregisterMBean(mletName);\n-\n-            @SuppressWarnings(\"removal\")\n-            WeakReference<PrivateMLet> mletRef =\n-                    new WeakReference<PrivateMLet>(mlet);\n-            mlet = null;\n+            mb = null;\n@@ -278,1 +245,1 @@\n-            for (int i = 0; i < 10000 && mletRef.get() != null; i++) {\n+            for (int i = 0; i < 10000 && mbRef.get() != null; i++) {\n@@ -283,1 +250,1 @@\n-            if (mletRef.get() == null)\n+            if (mbRef.get() == null)\n","filename":"test\/jdk\/javax\/management\/mxbean\/MXBeanLoadingTest1.java","additions":7,"deletions":40,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-import javax.management.loading.MLet;\n+import javax.management.timer.Timer;\n@@ -42,1 +42,0 @@\n-    @SuppressWarnings(\"removal\") \/\/ use of MLet\n@@ -54,4 +53,4 @@\n-        ObjectName mlet1Name = new ObjectName(\"r:type=MLet,instance=1\");\n-        ObjectName mlet2Name = new ObjectName(\"r:type=MLet,instance=2\");\n-        mbs.createMBean(MLet.class.getName(), mlet1Name);\n-        mbs.createMBean(MLet.class.getName(), mlet2Name);\n+        ObjectName mb1Name = new ObjectName(\"r:type=Timer,instance=1\");\n+        ObjectName mb2Name = new ObjectName(\"r:type=Timer,instance=2\");\n+        mbs.createMBean(Timer.class.getName(), mb1Name);\n+        mbs.createMBean(Timer.class.getName(), mb2Name);\n@@ -59,2 +58,2 @@\n-        RoleInfo leftRoleInfo = new RoleInfo(\"left\", MLet.class.getName());\n-        RoleInfo rightRoleInfo = new RoleInfo(\"right\", MLet.class.getName());\n+        RoleInfo leftRoleInfo = new RoleInfo(\"left\", Timer.class.getName());\n+        RoleInfo rightRoleInfo = new RoleInfo(\"right\", Timer.class.getName());\n@@ -63,1 +62,1 @@\n-            new ArrayList(Arrays.asList(new ObjectName[] {mlet1Name}));\n+            new ArrayList(Arrays.asList(new ObjectName[] {mb1Name}));\n@@ -65,1 +64,1 @@\n-            new ArrayList(Arrays.asList(new ObjectName[] {mlet2Name}));\n+            new ArrayList(Arrays.asList(new ObjectName[] {mb2Name}));\n","filename":"test\/jdk\/javax\/management\/relation\/NonArrayListTest.java","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -214,3 +214,2 @@\n-                    final String name = \"d:type=mlet,instance=\" + i;\n-                    mbs.createMBean(\"javax.management.loading.MLet\",\n-                                    new ObjectName(name));\n+                    final String name = \"d:instance=\" + i;\n+                    mbs.registerMBean(new Test(), new ObjectName(name));\n@@ -313,0 +312,13 @@\n+\n+    public static interface TestMBean {\n+        public int getA();\n+        public void setA(int a);\n+    }\n+\n+    public static class Test implements TestMBean {\n+        public Test() {}\n+        public Test(int x) {}\n+\n+        public int getA() {return 0;}\n+        public void setA(int a) {}\n+    }\n","filename":"test\/jdk\/javax\/management\/remote\/mandatory\/connection\/IdleTimeoutTest.java","additions":16,"deletions":4,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-  We test this as follows.  We fabricate an MLet that has the same set\n+  We test this as follows.  We create an MBean that has the same set\n@@ -54,1 +54,1 @@\n-  loader (or at least, it is a URLClassLoader).  This MLet is\n+  loader (or at least, it is a URLClassLoader).  This MBean is\n@@ -58,1 +58,1 @@\n-  Then, we use the MLet to create an RMIConnectorServer MBean.  This\n+  Then, we use the MBean to create an RMIConnectorServer MBean.  This\n@@ -75,1 +75,1 @@\n-    private static final ObjectName mletName;\n+    private static final ObjectName mbeanName;\n@@ -78,1 +78,1 @@\n-            mletName = new ObjectName(\"x:type=mlet\");\n+            mbeanName = new ObjectName(\"x:type=TestMBean\");\n@@ -104,3 +104,2 @@\n-        @SuppressWarnings(\"removal\")\n-        PrivateMLet mlet = new PrivateMLet(urls, null, false);\n-        Class shadowClass = mlet.loadClass(JMXServiceURL.class.getName());\n+        TestMBean mbean = new Test(urls);\n+        Class shadowClass = mbean.loadClass(JMXServiceURL.class.getName());\n@@ -108,1 +107,1 @@\n-            System.out.println(\"TEST INVALID: MLet got original \" +\n+            System.out.println(\"TEST INVALID: Test MBean got original \" +\n@@ -114,1 +113,1 @@\n-        mbs.registerMBean(mlet, mletName);\n+        mbs.registerMBean(mbean, mbeanName);\n@@ -158,1 +157,1 @@\n-                         mletName,\n+                         mbeanName,\n@@ -169,0 +168,14 @@\n+\n+    public static interface TestMBean {\n+        public Class<?> loadClass(String name) throws ClassNotFoundException;\n+    }\n+\n+    public static class Test extends URLClassLoader implements TestMBean {\n+        public Test(URL[] urls) {\n+            super(urls, null);\n+        }\n+\n+        public Class<?> loadClass(String name) throws ClassNotFoundException {\n+            return loadClass(name, false);\n+        }\n+    }\n","filename":"test\/jdk\/javax\/management\/remote\/mandatory\/loading\/TargetMBeanTest.java","additions":25,"deletions":12,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,1 @@\n-import javax.management.loading.MLet;\n+import javax.management.timer.Timer;\n@@ -83,1 +83,0 @@\n-    @SuppressWarnings(\"removal\") \/\/ use of MLet\n@@ -124,1 +123,1 @@\n-        mbs.createMBean(MLet.class.getName(), null);\n+        mbs.createMBean(Timer.class.getName(), new ObjectName(\":type=Timer\"));\n","filename":"test\/jdk\/javax\/management\/remote\/mandatory\/notif\/NotificationBufferTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -94,6 +94,0 @@\n-            \/\/ Register the ClassPathClassLoaderMBean\n-            \/\/\n-            System.out.println(\"Create ClassPathClassLoader MBean\");\n-            ObjectName cpcl =\n-                new ObjectName(\"ClassLoader:name=ClassPathClassLoader\");\n-            mbs.createMBean(\"javax.management.loading.MLet\", cpcl);\n","filename":"test\/jdk\/javax\/management\/remote\/mandatory\/passwordAuthenticator\/RMIAltAuthTest.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -92,6 +92,0 @@\n-            \/\/ Register the ClassPathClassLoaderMBean\n-            \/\/\n-            System.out.println(\"Create ClassPathClassLoader MBean\");\n-            ObjectName cpcl =\n-                new ObjectName(\"ClassLoader:name=ClassPathClassLoader\");\n-            mbs.createMBean(\"javax.management.loading.MLet\", cpcl);\n","filename":"test\/jdk\/javax\/management\/remote\/mandatory\/passwordAuthenticator\/RMIPasswdAuthTest.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"}]}