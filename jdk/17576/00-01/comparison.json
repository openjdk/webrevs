{"files":[{"patch":"@@ -39,0 +39,3 @@\n+product(bool, UseAllWindowsProcessorGroups, false,                        \\\n+        \"Use all processor groups on supported Windows versions\")         \\\n+                                                                          \\\n","filename":"src\/hotspot\/os\/windows\/globals_windows.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -871,13 +871,16 @@\n-  \/\/ Starting with Windows 11 and Windows Server 2022, the OS has changed to\n-  \/\/ make processes and their threads span all processors in the system,\n-  \/\/ across all processor groups, by default. Therefore, we will allow all\n-  \/\/ processors to be active processors on these operating systems. However,\n-  \/\/ job objects can be used to restrict processor affinity across the\n-  \/\/ processor groups. In this case, the number of active processors must be\n-  \/\/ obtained from the processor affinity in the job object.\n-  bool schedules_all_processor_groups = win32::is_windows_11_or_greater() || win32::is_windows_server_2022_or_greater();\n-  if (schedules_all_processor_groups) {\n-    DWORD processors_in_job_object = win32::active_processors_in_job_object();\n-\n-    if (processors_in_job_object > 0) {\n-      return processors_in_job_object;\n+  bool schedules_all_processor_groups = false;\n+  if (UseAllWindowsProcessorGroups) {\n+    \/\/ Starting with Windows 11 and Windows Server 2022, the OS has changed to\n+    \/\/ make processes and their threads span all processors in the system,\n+    \/\/ across all processor groups, by default. Therefore, we will allow all\n+    \/\/ processors to be active processors on these operating systems. However,\n+    \/\/ job objects can be used to restrict processor affinity across the\n+    \/\/ processor groups. In this case, the number of active processors must be\n+    \/\/ obtained from the processor affinity in the job object.\n+    schedules_all_processor_groups = win32::is_windows_11_or_greater() || win32::is_windows_server_2022_or_greater();\n+    if (schedules_all_processor_groups) {\n+      DWORD processors_in_job_object = win32::active_processors_in_job_object();\n+\n+      if (processors_in_job_object > 0) {\n+        return processors_in_job_object;\n+      }\n@@ -895,0 +898,1 @@\n+    \/\/ Number of active processors is number of bits in process affinity mask\n@@ -905,11 +909,13 @@\n-  \/\/ There are no processor affinity restrictions at this point so we can return\n-  \/\/ the overall processor count if the OS automatically schedules threads across\n-  \/\/ all processors on the system. Note that older operating systems can\n-  \/\/ correctly report processor count but will not schedule threads across\n-  \/\/ processor groups unless the application explicitly uses group affinity APIs\n-  \/\/ to assign threads to processor groups. On these older operating systems, we\n-  \/\/ will continue to use the dwNumberOfProcessors field. For details on the\n-  \/\/ latest Windows scheduling behavior, see\n-  \/\/ https:\/\/learn.microsoft.com\/en-us\/windows\/win32\/procthread\/processor-groups#behavior-starting-with-windows-11-and-windows-server-2022\n-  if (schedules_all_processor_groups) {\n-    logical_processors = processor_count();\n+  if (UseAllWindowsProcessorGroups) {\n+    \/\/ There are no processor affinity restrictions at this point so we can return\n+    \/\/ the overall processor count if the OS automatically schedules threads across\n+    \/\/ all processors on the system. Note that older operating systems can\n+    \/\/ correctly report processor count but will not schedule threads across\n+    \/\/ processor groups unless the application explicitly uses group affinity APIs\n+    \/\/ to assign threads to processor groups. On these older operating systems, we\n+    \/\/ will continue to use the dwNumberOfProcessors field. For details on the\n+    \/\/ latest Windows scheduling behavior, see\n+    \/\/ https:\/\/learn.microsoft.com\/en-us\/windows\/win32\/procthread\/processor-groups#behavior-starting-with-windows-11-and-windows-server-2022\n+    if (schedules_all_processor_groups) {\n+      logical_processors = processor_count();\n+    }\n@@ -3996,2 +4002,0 @@\n-  bool is_workstation = !IsWindowsServer();\n-\n@@ -4036,0 +4040,2 @@\n+\n+  os::free(version_info);\n@@ -4074,1 +4080,5 @@\n-            assert(group_count == job_object_information_length \/ sizeof(GROUP_AFFINITY), \"Unexpected group count\");\n+            DWORD groups_found = job_object_information_length \/ sizeof(GROUP_AFFINITY);\n+            if (groups_found != group_count) {\n+              warning(\"Unexpected processor group count->%ld. Expected %ld processor groups.\", groups_found, group_count);\n+              assert(false, \"Unexpected group count\");\n+            }\n@@ -4076,3 +4086,3 @@\n-            for (DWORD i = 0; i < group_count; i++) {\n-              KAFFINITY group_affinity = ((GROUP_AFFINITY*)job_object_information)[i].Mask;\n-              processors += population_count(group_affinity);\n+            GROUP_AFFINITY* group_affinity_data = ((GROUP_AFFINITY*)job_object_information);\n+            for (DWORD i = 0; i < groups_found; i++, group_affinity_data++) {\n+              processors += population_count(group_affinity_data->Mask);\n@@ -4081,1 +4091,4 @@\n-            assert(processors > 0, \"Must find at least 1 logical processor\");\n+            if (processors == 0) {\n+              warning(\"Could not determine processor count from the job object.\");\n+              assert(false, \"Must find at least 1 logical processor\");\n+            }\n@@ -4098,13 +4111,3 @@\n-  typedef BOOL(WINAPI* LPFN_GET_LOGICAL_PROCESSOR_INFORMATION_EX)(\n-      LOGICAL_PROCESSOR_RELATIONSHIP, PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX, PDWORD);\n-\n-  LPFN_GET_LOGICAL_PROCESSOR_INFORMATION_EX glpiex;\n-\n-  glpiex = (LPFN_GET_LOGICAL_PROCESSOR_INFORMATION_EX)GetProcAddress(\n-      GetModuleHandle(TEXT(\"kernel32\")),\n-      \"GetLogicalProcessorInformationEx\");\n-\n-  if (glpiex != nullptr) {\n-    LOGICAL_PROCESSOR_RELATIONSHIP relationship_type = RelationGroup;\n-    PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX system_logical_processor_info = nullptr;\n-    DWORD returned_length = 0;\n+  LOGICAL_PROCESSOR_RELATIONSHIP relationship_type = RelationGroup;\n+  PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX system_logical_processor_info = nullptr;\n+  DWORD returned_length = 0;\n@@ -4112,6 +4115,3 @@\n-    \/\/ https:\/\/learn.microsoft.com\/en-us\/windows\/win32\/api\/sysinfoapi\/nf-sysinfoapi-getlogicalprocessorinformationex\n-    if (!glpiex(relationship_type, nullptr, &returned_length)) {\n-      DWORD last_error = GetLastError();\n-\n-      if (last_error == ERROR_INSUFFICIENT_BUFFER) {\n-        system_logical_processor_info = (PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX)os::malloc(returned_length, mtInternal);\n+  \/\/ https:\/\/learn.microsoft.com\/en-us\/windows\/win32\/api\/sysinfoapi\/nf-sysinfoapi-getlogicalprocessorinformationex\n+  if (!GetLogicalProcessorInformationEx(relationship_type, nullptr, &returned_length)) {\n+    DWORD last_error = GetLastError();\n@@ -4119,6 +4119,2 @@\n-        if (nullptr == system_logical_processor_info) {\n-          warning(\"os::malloc() failed to allocate %ld bytes for GetLogicalProcessorInformationEx buffer\", returned_length);\n-        } else if (!glpiex(relationship_type, system_logical_processor_info, &returned_length)) {\n-          warning(\"GetLogicalProcessorInformationEx() failed: GetLastError->%ld.\", GetLastError());\n-        } else {\n-          DWORD processor_groups = system_logical_processor_info->Group.ActiveGroupCount;\n+    if (last_error == ERROR_INSUFFICIENT_BUFFER) {\n+      system_logical_processor_info = (PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX)os::malloc(returned_length, mtInternal);\n@@ -4126,4 +4122,6 @@\n-          for (DWORD i = 0; i < processor_groups; i++) {\n-            PROCESSOR_GROUP_INFO group_info = system_logical_processor_info->Group.GroupInfo[i];\n-            logical_processors += group_info.ActiveProcessorCount;\n-          }\n+      if (nullptr == system_logical_processor_info) {\n+        warning(\"os::malloc() failed to allocate %ld bytes for GetLogicalProcessorInformationEx buffer\", returned_length);\n+      } else if (!GetLogicalProcessorInformationEx(relationship_type, system_logical_processor_info, &returned_length)) {\n+        warning(\"GetLogicalProcessorInformationEx() failed: GetLastError->%ld.\", GetLastError());\n+      } else {\n+        DWORD processor_groups = system_logical_processor_info->Group.ActiveGroupCount;\n@@ -4131,1 +4129,3 @@\n-          assert(logical_processors > 0, \"Must find at least 1 logical processor\");\n+        PROCESSOR_GROUP_INFO* group_info = (PROCESSOR_GROUP_INFO*)system_logical_processor_info->Group.GroupInfo;\n+        for (DWORD i = 0; i < processor_groups; i++, group_info++) {\n+          logical_processors += group_info->ActiveProcessorCount;\n@@ -4134,4 +4134,4 @@\n-        os::free(system_logical_processor_info);\n-      }\n-      else {\n-        warning(\"GetLogicalProcessorInformationEx() failed: GetLastError->%ld.\", last_error);\n+        if (logical_processors == 0) {\n+          warning(\"Could not determine logical processor count from GetLogicalProcessorInformationEx()\");\n+          assert(false, \"Must find at least 1 logical processor\");\n+        }\n@@ -4139,0 +4139,4 @@\n+\n+      os::free(system_logical_processor_info);\n+    } else {\n+      warning(\"GetLogicalProcessorInformationEx() failed: GetLastError->%ld.\", last_error);\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":69,"deletions":65,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -707,0 +707,3 @@\n+  JVMFlag* flag = JVMFlag::find_flag(\"UseAllWindowsProcessorGroups\");\n+  EXPECT_NE(flag, nullptr) << \"Expected UseAllWindowsProcessorGroups product flag to be available\";\n+\n@@ -714,1 +717,1 @@\n-  if (schedules_all_processor_groups) {\n+  if (schedules_all_processor_groups && UseAllWindowsProcessorGroups) {\n","filename":"test\/hotspot\/gtest\/runtime\/test_os_windows.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -148,0 +148,1 @@\n+  gtest\/WindowsProcessorGroups.java\n","filename":"test\/hotspot\/jtreg\/TEST.groups","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,34 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * This runs the os related gtests on Windows with all processor groups enabled.\n+ *\/\n+\n+\/* @test id=use-all-windows-processor-groups\n+ * @summary Run gtests with all Windows processor groups enabled\n+ * @library \/test\/lib\n+ * @requires os.family == \"windows\"\n+ * @run main\/native GTestWrapper --gtest_filter=os* -XX:+UseAllWindowsProcessorGroups\n+ *\/\n","filename":"test\/hotspot\/jtreg\/gtest\/WindowsProcessorGroups.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"}]}