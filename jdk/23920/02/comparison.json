{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -379,0 +379,9 @@\n+\n+            int maxArea = (0xffff - DATA_SIZE - LENGTH_SIZE) \/ thumb.getSampleModel().getNumBands();\n+            if (thumbWidth * thumbHeight > maxArea) {\n+                writer.warningOccurred(JPEGImageWriter.WARNING_THUMB_CLIPPED);\n+                double scale = Math.sqrt( ((double)maxArea) \/ (double)(thumbWidth * thumbHeight));\n+                thumbWidth = (int) (scale * thumbWidth);\n+                thumbHeight = (int) (scale * thumbHeight);\n+            }\n+\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/jpeg\/JFIFMarkerSegment.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -193,0 +193,3 @@\n+        if (value < 0 || value > 0xffff) {\n+            throw new IIOException(\"Invalid 2-byte value: \" + value);\n+        }\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/jpeg\/MarkerSegment.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,153 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug     8351110\n+ * @summary Test verifies that when a JFIF thumbnail may exceed 65535 bytes\n+ *          we still write a valid JPEG file.\n+ * @run     main WriteJPEGThumbnailTest\n+ *\/\n+\n+import javax.imageio.IIOImage;\n+import javax.imageio.ImageIO;\n+import javax.imageio.ImageReader;\n+import javax.imageio.ImageWriter;\n+import javax.imageio.stream.ImageInputStream;\n+import javax.imageio.stream.ImageOutputStream;\n+import java.awt.geom.AffineTransform;\n+import java.awt.image.BufferedImage;\n+import java.awt.Color;\n+import java.awt.Graphics2D;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class WriteJPEGThumbnailTest {\n+\n+    private static void assertEquals(int expected, int observed) {\n+        if (expected != observed) {\n+            throw new Error(\"expected \" + expected + \", but observed \" + observed);\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        boolean b1 = new WriteJPEGThumbnailTest(100, 218).run();\n+        boolean b2 = new WriteJPEGThumbnailTest(100, 219).run();\n+        if (!(b1 && b2))\n+            System.err.println(\"Test failed\");\n+    }\n+\n+    final int thumbWidth, thumbHeight;\n+\n+    public WriteJPEGThumbnailTest(int thumbWidth, int thumbHeight) {\n+        this.thumbWidth = thumbWidth;\n+        this.thumbHeight = thumbHeight;\n+    }\n+\n+    public boolean run() throws Exception {\n+        System.out.println(\"Testing thumbnail \" + thumbWidth + \"x\" + thumbHeight + \"...\");\n+        try {\n+            byte[] jpegData;\n+            BufferedImage thumbnail;\n+            try (ByteArrayOutputStream byteOut = new ByteArrayOutputStream()) {\n+                try {\n+                    thumbnail = writeImage(byteOut);\n+                } finally {\n+                    jpegData = byteOut.toByteArray();\n+                }\n+            }\n+\n+            ImageReader reader = getJPEGImageReader();\n+            ImageInputStream stream = ImageIO.createImageInputStream(new ByteArrayInputStream(jpegData));\n+            reader.setInput(stream);\n+            assertEquals(1, reader.getNumThumbnails(0));\n+\n+            \/\/ we may have a subset of our original thumbnail, that's OK\n+            BufferedImage readThumbnail = reader.readThumbnail(0, 0);\n+            for (int y = 0; y < readThumbnail.getHeight(); y++) {\n+                for (int x = 0; x < readThumbnail.getWidth(); x++) {\n+                    int rgb1 = thumbnail.getRGB(x, y);\n+                    int rgb2 = readThumbnail.getRGB(x, y);\n+                    assertEquals(rgb1, rgb2);\n+                }\n+            }\n+            System.out.println(\"\\tTest passed\");\n+        } catch(Exception e) {\n+            e.printStackTrace();\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    private BufferedImage writeImage(OutputStream out) throws IOException {\n+        BufferedImage thumbnail = createImage(thumbWidth, thumbHeight);\n+        BufferedImage bi = createImage(thumbnail.getWidth() * 10, thumbnail.getHeight() * 10);\n+\n+        ImageWriter writer = ImageIO.getImageWritersByFormatName(\"jpeg\").next();\n+\n+        try (ImageOutputStream outputStream = ImageIO.createImageOutputStream(out)) {\n+            writer.setOutput(outputStream);\n+\n+            \/\/ Write the main image\n+            IIOImage img = new javax.imageio.IIOImage(bi, List.of(thumbnail), null);\n+            writer.write(null, img, null);\n+        } finally {\n+            writer.dispose();\n+        }\n+        return thumbnail;\n+    }\n+\n+    private static BufferedImage createImage(int width, int height) {\n+        BufferedImage bi = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n+        Graphics2D g = bi.createGraphics();\n+        double sx = ((double)width) \/ 1000.0;\n+        double sy = ((double)height) \/ 1000.0;\n+        g.transform(AffineTransform.getScaleInstance(sx, sy));\n+        g.setColor(Color.red);\n+        g.fillRect(0,0,100,100);\n+        g.setColor(Color.green);\n+        g.fillRect(900,0,900,100);\n+        g.setColor(Color.orange);\n+        g.fillRect(0,900,100,100);\n+        g.setColor(Color.magenta);\n+        g.fillRect(900,900,100,100);\n+        g.dispose();\n+        return bi;\n+    }\n+\n+    private static ImageReader getJPEGImageReader() {\n+        Iterator<ImageReader> readers = ImageIO.getImageReadersByFormatName(\"jpeg\");\n+        ImageReader reader;\n+        while(readers.hasNext()) {\n+            reader = readers.next();\n+            if(reader.canReadRaster()) {\n+                return reader;\n+            }\n+        }\n+        return null;\n+    }\n+}\n","filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/WriteJPEGThumbnailTest.java","additions":153,"deletions":0,"binary":false,"changes":153,"status":"added"}]}