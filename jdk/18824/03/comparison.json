{"files":[{"patch":"@@ -626,0 +626,1 @@\n+                  _allow_macro_nodes(true),\n@@ -917,0 +918,1 @@\n+    _allow_macro_nodes(true),\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -321,0 +321,1 @@\n+  bool                  _allow_macro_nodes;     \/\/ True if we allow creation of macro nodes.\n@@ -790,0 +791,3 @@\n+  bool       allow_macro_nodes() { return _allow_macro_nodes;  }\n+  void reset_allow_macro_nodes() { _allow_macro_nodes = false;  }\n+\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2448,0 +2448,2 @@\n+  \/\/ Do not allow new macro nodes once we started to expand\n+  C->reset_allow_macro_nodes();\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -203,3 +203,2 @@\n-  \/\/ If we're post loop opts then don't attempt to match the min\/max pattern, as this node might have been a\n-  \/\/ MinL or MaxL that was already expanded during macro expansion.\n-  if (phase->C->post_loop_opts_phase()) {\n+  \/\/ Only create MinL\/MaxL if we are allowed to create macro nodes.\n+  if (!phase->C->allow_macro_nodes()) {\n","filename":"src\/hotspot\/share\/opto\/movenode.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @bug 8324655\n+ * @bug 8324655 8329797\n@@ -37,1 +37,1 @@\n- * @run main compiler.c2.irTests.TestIfMinMax\n+ * @run driver compiler.c2.irTests.TestIfMinMax\n@@ -142,0 +142,36 @@\n+    public class Dummy {\n+        long l;\n+        public Dummy(long l) { this.l = l; }\n+    }\n+\n+    @Setup\n+    Object[] setupDummyArray() {\n+        Dummy[] arr = new Dummy[512];\n+        for (int i = 0; i < 512; i++) {\n+            arr[i] = new Dummy(RANDOM.nextLong());\n+        }\n+        return new Object[] { arr };\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setupDummyArray\")\n+    @IR(failOn = { IRNode.MAX_L })\n+    public long testMaxLAndBarrierInLoop(Dummy[] arr) {\n+        long result = 0;\n+        for (int i = 0; i < arr.length; ++i) {\n+            result += Math.max(arr[i].l, 1);\n+        }\n+        return result;\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setupDummyArray\")\n+    @IR(failOn = { IRNode.MIN_L })\n+    public long testMinLAndBarrierInLoop(Dummy[] arr) {\n+        long result = 0;\n+        for (int i = 0; i < arr.length; ++i) {\n+            result += Math.min(arr[i].l, 1);\n+        }\n+        return result;\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestIfMinMax.java","additions":38,"deletions":2,"binary":false,"changes":40,"status":"modified"}]}