{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-ClassFileLoadHook(jvmtiEnv *jvmti_env, JNIEnv *jni_env,\n+ClassFileLoadHook(jvmtiEnv *jvmti, JNIEnv *jni,\n@@ -64,12 +64,1 @@\n-\n-            if (!NSK_JNI_VERIFY(jni_env, (*new_class_data_len =\n-                    jni_env->GetArrayLength(classBytes)) > 0)) {\n-                nsk_jvmti_setFailStatus();\n-                return;\n-            }\n-\n-            if (!NSK_JNI_VERIFY(jni_env, (*new_class_data = (unsigned char*)\n-                    jni_env->GetByteArrayElements(classBytes, nullptr)) != nullptr)) {\n-                nsk_jvmti_setFailStatus();\n-                return;\n-            }\n+            *new_class_data = jni_array_to_jvmti_allocated(jvmti, jni, classBytes, new_class_data_len);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/scenarios\/bcinstr\/BI02\/bi02t001\/bi02t001.cpp","additions":3,"deletions":14,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-ClassFileLoadHook(jvmtiEnv *jvmti_env, JNIEnv *jni_env,\n+ClassFileLoadHook(jvmtiEnv *jvmti, JNIEnv *jni,\n@@ -65,11 +65,1 @@\n-            if (!NSK_JNI_VERIFY(jni_env, (*new_class_data_len =\n-                    jni_env->GetArrayLength(classBytes)) > 0)) {\n-                nsk_jvmti_setFailStatus();\n-                return;\n-            }\n-\n-            if (!NSK_JNI_VERIFY(jni_env, (*new_class_data = (unsigned char*)\n-                    jni_env->GetByteArrayElements(classBytes, nullptr)) != nullptr)) {\n-                nsk_jvmti_setFailStatus();\n-                return;\n-            }\n+            *new_class_data = jni_array_to_jvmti_allocated(jvmti, jni, classBytes, new_class_data_len);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/scenarios\/bcinstr\/BI03\/bi03t001\/bi03t001.cpp","additions":3,"deletions":13,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -450,0 +450,3 @@\n+\/* Used in a couple of nsk\/jvmti\/scenarios tests to convert jbyteArray to a JVMTI allocated *\/\n+static unsigned char* jni_array_to_jvmti_allocated(jvmtiEnv *jvmti, JNIEnv *jni, jbyteArray arr, jint* len_ptr) {\n+    unsigned char* new_arr = nullptr;\n@@ -451,0 +454,17 @@\n+    jint len = jni->GetArrayLength(arr);\n+    if (len <= 0) {\n+      fatal(jni, \"JNI GetArrayLength returned a non-positive value\");\n+    }\n+    jbyte* jni_arr = jni->GetByteArrayElements(arr, nullptr);\n+    if (jni_arr == nullptr) {\n+      fatal(jni, \"JNI GetByteArrayElements returned nullptr\");\n+    }\n+    jvmtiError err = jvmti->Allocate(len, &new_arr);\n+    check_jvmti_status(jni, err, \"JVMTI Allocate returned an error code\");\n+\n+    memcpy(new_arr, jni_arr, (size_t)len);\n+    jni->ReleaseByteArrayElements(arr, jni_arr, JNI_ABORT);\n+\n+    *len_ptr = len;\n+    return new_arr;\n+}\n","filename":"test\/lib\/jdk\/test\/lib\/jvmti\/jvmti_common.hpp","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"}]}