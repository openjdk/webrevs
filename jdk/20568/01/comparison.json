{"files":[{"patch":"@@ -1796,1 +1796,1 @@\n-    if (!Arguments::copy_expand_pid(DEFAULT_PERFMAP_FILENAME,\n+    if (!Arguments::copy_expand_arguments(DEFAULT_PERFMAP_FILENAME,\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -130,1 +130,1 @@\n-  const bool result = Arguments::copy_expand_pid(filename_fmt, strlen(filename_fmt), _path_buffer + path_len, JVM_MAXPATHLEN - path_len);\n+  const bool result = Arguments::copy_expand_arguments(filename_fmt, strlen(filename_fmt), _path_buffer + path_len, JVM_MAXPATHLEN - path_len);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/repository\/jfrEmergencyDump.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -105,0 +105,2 @@\n+jlong  Arguments::_vm_start_time                = 0;\n+\n@@ -3882,1 +3884,2 @@\n-\/\/ Copies src into buf, replacing \"%%\" with \"%\" and \"%p\" with pid\n+\/\/ Copies src into buf, replacing \"%%\" with \"%\", \"%p\" with pid and\n+\/\/ \"%t\" with the timestamp.\n@@ -3888,1 +3891,1 @@\n-\/\/ pid characters, it also returns false instead of returning the partially\n+\/\/ arguments, it also returns false instead of returning the partially\n@@ -3891,3 +3894,2 @@\n-bool Arguments::copy_expand_pid(const char* src, size_t srclen,\n-                                char* buf, size_t buflen) {\n-  const char* p = src;\n+bool Arguments::copy_expand_arguments(const char* src, size_t srclen, char* buf, size_t buflen) {\n+const char* p = src;\n@@ -3916,1 +3918,31 @@\n-          assert(*b == '\\0', \"fail in copy_expand_pid\");\n+          assert(*b == '\\0', \"fail in copy_expand_arguments.\");\n+          if (p == src_end && b == buf_end + 1) {\n+            \/\/ reach the end of the buffer.\n+            return true;\n+          }\n+        }\n+        p++;\n+        break;\n+      }\n+      case 't':  {       \/\/  \"%t\" ==> current timestamp\n+        \/\/ Write vm start time to to time_str\n+        const size_t time_buffer_len = 20;\n+        char time_str[time_buffer_len];\n+        struct tm local_time;\n+        time_t utc_time = _vm_start_time \/ 1000;\n+        os::localtime_pd(&utc_time, &local_time);\n+        int res = (int)strftime(time_str, sizeof(time_str), \"%Y-%m-%d_%H-%M-%S\", &local_time);\n+        assert(res > 0, \"fail in copy_expand_arguments. Time buffer too small.\");\n+\n+        \/\/ buf_end points to the character before the last character so\n+        \/\/ that we could write '\\0' to the end of the buffer.\n+        size_t buf_sz = buf_end - b + 1;\n+        int ret = jio_snprintf(b, buf_sz, \"%s\", time_str);\n+\n+        \/\/ if jio_snprintf fails or the buffer is not long enough to hold\n+        \/\/ the expanded timestamp, returns false.\n+        if (ret < 0 || ret >= (int)buf_sz) {\n+          return false;\n+        } else {\n+          b += ret;\n+          assert(*b == '\\0', \"fail in copy_expand_arguments\");\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":38,"deletions":6,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -261,0 +261,3 @@\n+  \/\/ VM start time\n+  static jlong _vm_start_time;\n+\n@@ -504,2 +507,6 @@\n-  \/\/ Utility: copies src into buf, replacing \"%%\" with \"%\" and \"%p\" with pid.\n-  static bool copy_expand_pid(const char* src, size_t srclen, char* buf, size_t buflen);\n+  \/\/ Records vm start time\n+  static void set_vm_start_time(jlong time) { _vm_start_time = time; }\n+  static jlong vm_start_time() { return _vm_start_time; }\n+\n+  \/\/ Utility: copies src into buf, replacing \"%%\" with \"%\", \"%p\" with pid and \"%t\" with timestamp\n+  static bool copy_expand_arguments(const char* src, size_t srclen, char* buf, size_t buflen);\n","filename":"src\/hotspot\/share\/runtime\/arguments.hpp","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -250,1 +250,2 @@\n-    \/\/ contains %p which will be replaced by pid.\n+    \/\/ contains %p or %t it will be replaced with the pid and\n+    \/\/ timestamp respectively\n@@ -252,1 +253,1 @@\n-    if(!Arguments::copy_expand_pid(PerfDataSaveFile, strlen(PerfDataSaveFile),\n+    if(!Arguments::copy_expand_arguments(PerfDataSaveFile, strlen(PerfDataSaveFile),\n","filename":"src\/hotspot\/share\/runtime\/perfMemory.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -447,1 +447,5 @@\n-  LogConfiguration::initialize(create_vm_timer.begin_time());\n+  jlong start_time = create_vm_timer.begin_time();\n+  LogConfiguration::initialize(start_time);\n+\n+  \/\/ Initialize start time for argument expansion\n+  Arguments::set_vm_start_time(start_time);\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -194,1 +194,1 @@\n-      if (!Arguments::copy_expand_pid(str, len, _value, JVM_MAXPATHLEN)) {\n+      if (!Arguments::copy_expand_arguments(str, len, _value, JVM_MAXPATHLEN)) {\n","filename":"src\/hotspot\/share\/services\/diagnosticArgument.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+#include \"runtime\/arguments.hpp\"\n@@ -2816,0 +2817,2 @@\n+      stringStream default_filename;\n+      default_filename.print(\"%s%%p%s\", dump_file_name, dump_file_ext);\n@@ -2817,2 +2820,1 @@\n-      jio_snprintf(&base_path[dlen], sizeof(base_path)-dlen, \"%s%d%s\",\n-                   dump_file_name, os::current_process_id(), dump_file_ext);\n+      strncpy(&base_path[dlen], default_filename.base(), sizeof(base_path) - dlen);\n@@ -2820,0 +2822,9 @@\n+\n+    \/\/ Expand arguments in filename\n+    char filepath[JVM_MAXPATHLEN];\n+    if (!Arguments::copy_expand_arguments(base_path, strlen(base_path),\n+                                          filepath, sizeof(filepath))) {\n+      warning(\"Cannot expand arguments in filename %s\", base_path);\n+      return;\n+    }\n+    strncpy(base_path, filepath, sizeof(filepath));\n","filename":"src\/hotspot\/share\/services\/heapDumper.cpp","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -155,1 +155,1 @@\n-  Arguments::copy_expand_pid(cmd, cmdend - cmd, buf, buflen);\n+  Arguments::copy_expand_arguments(cmd, cmdend - cmd, buf, buflen);\n@@ -1539,1 +1539,1 @@\n-  if (Arguments::copy_expand_pid(pattern, strlen(pattern), &buf[pos], buflen - pos)) {\n+  if (Arguments::copy_expand_arguments(pattern, strlen(pattern), &buf[pos], buflen - pos)) {\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Red Hat, Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/*\n+ * @test TestHeapDumpFilenameExpansion\n+ * @bug 8204681\n+ * @summary Test heap dump filename arguments are expanded i.e. %p to pid and %t to timestamp.\n+ * @library \/test\/lib\n+ * @requires vm.flagless\n+ * @run driver\/timeout=240 TestHeapDumpFilenameExpansion run\n+ *\/\n+\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.hprof.HprofParser;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class TestHeapDumpFilenameExpansion {\n+\n+    private static final String PID_FILENAME = \"file%p.hprof\";\n+    private static final String TIMESTAMP_FILENAME = \"file%t.hprof\";\n+    public static void main(String[] args) throws Exception {\n+        if (args.length == 0) {\n+            try {\n+                Object[] oa = new Object[Integer.MAX_VALUE];\n+                for(int i = 0; i < oa.length; i++) {\n+                    oa[i] = new Object[Integer.MAX_VALUE];\n+                }\n+            } catch (OutOfMemoryError err) {\n+                return;\n+            }\n+        }\n+\n+        testPidSubstitution(PID_FILENAME);\n+        testTimestampSusbtitution(TIMESTAMP_FILENAME);\n+    }\n+\n+    private static void testPidSubstitution(String filename) throws Exception {\n+        Process process = startProcess(filename);\n+        long pid = process.pid();\n+        String heapdumpFilename = \"file%d.hprof\".formatted(pid);\n+\n+        OutputAnalyzer output = new OutputAnalyzer(process);\n+        output.stdoutShouldNotBeEmpty();\n+        output.shouldContain(\"Dumping heap to \" + heapdumpFilename);\n+        File dump = new File(heapdumpFilename);\n+        if (dump.exists() && dump.isFile()) {\n+            HprofParser.parse(new File(heapdumpFilename));\n+            dump.delete();\n+        } else {\n+            throw new Exception(\"Pid was not expanded for filename %s\".formatted(filename));\n+        }\n+    }\n+\n+    private static void testTimestampSusbtitution(String filename) throws Exception {\n+        Process process = startProcess(filename);\n+        OutputAnalyzer output = new OutputAnalyzer(process);\n+        output.stdoutShouldNotBeEmpty();\n+\n+        boolean found = false;\n+        Pattern pattern = Pattern.compile(\"file\\\\d{4}-\\\\d{2}-\\\\d{2}_\\\\d{2}-\\\\d{2}-\\\\d{2}\");\n+        File[] files = new File(\".\").listFiles();\n+        if(files != null) {\n+            for (File file : files) {\n+                Matcher matcher = pattern.matcher(file.getName());\n+                if (matcher.find()) {\n+                    found = true;\n+                    HprofParser.parse(file);\n+                    Files.delete(file.toPath());\n+                }\n+            }\n+        }\n+\n+        if (!found) {\n+            throw new Exception(\"Timestamp was not expanded for filename %s\".formatted(filename));\n+        }\n+    }\n+\n+    private static Process startProcess(String filename) throws Exception {\n+        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+HeapDumpOnOutOfMemoryError\",\n+                \"-XX:HeapDumpPath=\" + filename,\n+                \"-XX:MaxMetaspaceSize=16m\",\n+                \"-Xmx128m\",\n+                Platform.isDebugBuild() ? \"-XX:-VerifyDependencies\" : \"-Dx\",\n+                TestHeapDumpFilenameExpansion.class.getName());\n+        return pb.start();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/TestHeapDumpFilenameExpansion.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"},{"patch":"@@ -0,0 +1,101 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Red Hat Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8334492 8204681\n+ * @summary Test to verify jcmd accepts %p and %t in output filenames and substitutes for PID and timestamp respectively.\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @run driver TestJcmdArgumentSubstitution\n+ *\n+ *\/\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import jdk.test.lib.Platform;\n+\n+public class TestJcmdArgumentSubstitution {\n+\n+    private static final String PID_FILENAME = \"myfile%p\";\n+    private static final String TIMESTAMP_FILENAME = \"myfile%t\";\n+\n+    public static void main(String[] args) throws Exception {\n+        verifyFilenamePidSusbtitution(\"Thread.dump_to_file\", PID_FILENAME);\n+        verifyFilenamePidSusbtitution(\"GC.heap_dump\", PID_FILENAME);\n+        verifyFilenameTimestampSubstitution(\"Thread.dump_to_file\", TIMESTAMP_FILENAME);\n+        verifyFilenameTimestampSubstitution(\"GC.heap_dump\", TIMESTAMP_FILENAME);\n+        if (Platform.isLinux()) {\n+            verifyFilenamePidSusbtitution(\"Compiler.perfmap\", PID_FILENAME);\n+            verifyFilenamePidSusbtitution(\"System.dump_map\", \"-F=%s\".formatted(PID_FILENAME));\n+            verifyFilenameTimestampSubstitution(\"Compiler.perfmap\", TIMESTAMP_FILENAME);\n+            verifyFilenameTimestampSubstitution(\"System.dump_map\", \"-F=%s\".formatted(TIMESTAMP_FILENAME));\n+        }\n+    }\n+\n+    private static void verifyFilenamePidSusbtitution(String... args) throws Exception {\n+        long pid = ProcessTools.getProcessId();\n+        String test_dir = System.getProperty(\"test.dir\", \".\");\n+        Path path = Paths.get(\"%s\/myfile%d\".formatted(test_dir, pid));\n+        OutputAnalyzer output = JcmdBase.jcmd(args);\n+        output.shouldHaveExitValue(0);\n+        if (Files.exists(path)) {\n+            Files.delete(path);\n+        } else {\n+            throw new Exception(\"File %s was not created as expected for diagnostic cmd %s\".formatted(path, args[0]));\n+        }\n+    }\n+\n+    private static void verifyFilenameTimestampSubstitution(String... args) throws Exception {\n+        String test_dir = System.getProperty(\"test.dir\", \".\");\n+        OutputAnalyzer output = JcmdBase.jcmd(args);\n+        output.shouldHaveExitValue(0);\n+\n+        boolean found = false;\n+        Pattern pattern = Pattern.compile(\"myfile\\\\d{4}-\\\\d{2}-\\\\d{2}_\\\\d{2}-\\\\d{2}-\\\\d{2}\");\n+        File[] files = new File(test_dir).listFiles();\n+        if(files != null) {\n+            for (File file : files) {\n+                Matcher matcher = pattern.matcher(file.getName());\n+                if (matcher.find()) {\n+                    found = true;\n+                }\n+                Files.delete(file.toPath());\n+            }\n+        }\n+\n+        if (!found) {\n+            throw new Exception(\"File %s was not created as expected for diagnostic cmd %s\".formatted(args[1], args[0]));\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/tools\/jcmd\/TestJcmdArgumentSubstitution.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"},{"patch":"@@ -1,70 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2024, Red Hat Inc.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8334492\n- * @summary Test to verify jcmd accepts %p in output filenames and substitutes for PID\n- * @library \/test\/lib\n- * @modules java.base\/jdk.internal.misc\n- *          java.management\n- * @run driver TestJcmdPIDSubstitution\n- *\n- *\/\n-\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n-\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-\n-import jdk.test.lib.Platform;\n-\n-public class TestJcmdPIDSubstitution {\n-\n-    private static final String FILENAME = \"myfile%p\";\n-\n-    public static void main(String[] args) throws Exception {\n-        verifyOutputFilenames(\"Thread.dump_to_file\", FILENAME);\n-        verifyOutputFilenames(\"GC.heap_dump\", FILENAME);\n-        if (Platform.isLinux()) {\n-            verifyOutputFilenames(\"Compiler.perfmap\", FILENAME);\n-            verifyOutputFilenames(\"System.dump_map\", \"-F=%s\".formatted(FILENAME));\n-        }\n-    }\n-\n-    private static void verifyOutputFilenames(String... args) throws Exception {\n-        long pid = ProcessTools.getProcessId();\n-        String test_dir = System.getProperty(\"test.dir\", \".\");\n-        Path path = Paths.get(\"%s\/myfile%d\".formatted(test_dir, pid));\n-        OutputAnalyzer output = JcmdBase.jcmd(args);\n-        output.shouldHaveExitValue(0);\n-        if (Files.exists(path)) {\n-            Files.delete(path);\n-        } else {\n-            throw new Exception(\"File %s was not created as expected for diagnostic cmd %s\".formatted(path, args[0]));\n-        }\n-    }\n-}\n","filename":"test\/jdk\/sun\/tools\/jcmd\/TestJcmdPIDSubstitution.java","additions":0,"deletions":70,"binary":false,"changes":70,"status":"deleted"}]}