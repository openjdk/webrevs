{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -738,0 +738,3 @@\n+        if (length() == 0) {\n+            return \"\";\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringBuffer.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -474,0 +474,3 @@\n+        if (length() == 0) {\n+            return \"\";\n+        }\n@@ -475,1 +478,1 @@\n-        return new String(this);\n+        return new String(this, null);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringBuilder.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,31 +46,1 @@\n-    private String name;\n-    private String blaha;\n-    private Sigurd sig;\n-\n-    @Setup\n-    public void setup() {\n-        name = \"joe\";\n-        blaha = \"sniglogigloienlitenapasomarengrodasjukadjavelhej\";\n-        sig = new Sigurd();\n-    }\n-\n-    @Benchmark\n-    public String appendAndToString() {\n-        return \"MyStringBuffer named:\" + ((name == null) ? \"unknown\" : name) + \".\";\n-    }\n-\n-    @Benchmark\n-    public String toStringComplex() {\n-        return sig.toString();\n-    }\n-\n-    static class Sigurd {\n-        int x;\n-        byte y;\n-        String z = \"yahoo\";\n-\n-        @Override\n-        public String toString() {\n-            return Integer.toString(x) + \"_\" + Integer.toString((int) y) + \"_\" + z + \"_\";\n-        }\n-    }\n+    StringBuffer sb = new StringBuffer();\n@@ -79,2 +49,2 @@\n-    public String substring() {\n-        return blaha.substring(30, 35);\n+    public String emptyToString() {\n+        return sb.toString();\n@@ -82,1 +52,0 @@\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringBuffers.java","additions":4,"deletions":35,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import org.openjdk.jmh.annotations.Setup;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringBuilderToString.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -367,0 +367,5 @@\n+    @Benchmark\n+    public String emptyToString(Data data) {\n+        return data.sb.toString();\n+    }\n+\n@@ -383,0 +388,1 @@\n+        StringBuilder sb;\n@@ -401,0 +407,1 @@\n+            sb = new StringBuilder(length);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringBuilders.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"}]}