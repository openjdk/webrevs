{"files":[{"patch":"@@ -26,0 +26,1 @@\n+import java.util.stream.Stream;\n@@ -29,1 +30,4 @@\n-import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.function.Executable;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -38,0 +42,26 @@\n+\n+    private static Stream<Arguments> npeFromConstructors() {\n+        return Stream.of(Arguments.of((Executable) () -> new GZIPInputStream(null)),\n+                Arguments.of((Executable) () -> new GZIPInputStream(null, 1)));\n+    }\n+\n+    \/*\n+     * Verifies that the GZIPInputStream constructors throw the expected NullPointerException\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"npeFromConstructors\")\n+    public void testNPEFromConstructors(final Executable constructor) {\n+        Assertions.assertThrows(NullPointerException.class, constructor,\n+                \"GZIPInputStream constructor did not throw NullPointerException\");\n+    }\n+\n+    private static Stream<Arguments> iaeFromConstructors() {\n+        return Stream.of(\n+                Arguments.of((Executable) () -> new GZIPInputStream(\n+                        new ByteArrayInputStream(new byte[0]), 0)),\n+                Arguments.of((Executable) () -> new GZIPInputStream(\n+                        new ByteArrayInputStream(new byte[0]), -1)),\n+                Arguments.of((Executable) () -> new GZIPInputStream(\n+                        new ByteArrayInputStream(new byte[0]), -42)));\n+    }\n+\n@@ -39,1 +69,1 @@\n-     * Verifies that the GZIPInputStream constructors throw the expected exceptions\n+     * Verifies that the GZIPInputStream constructors throw the expected IllegalArgumentException\n@@ -41,14 +71,6 @@\n-    @Test\n-    public void testConstructors() throws Exception {\n-        Assertions.assertThrows(NullPointerException.class,\n-                () -> new GZIPInputStream(null),\n-                \"GZIPInputStream did not throw NullPointerException for null InputStream\");\n-        Assertions.assertThrows(NullPointerException.class,\n-                () -> new GZIPInputStream(null, 1),\n-                \"GZIPInputStream did not throw NullPointerException for null InputStream\");\n-        Assertions.assertThrows(IllegalArgumentException.class,\n-                () -> new GZIPInputStream(new ByteArrayInputStream(new byte[0]), 0),\n-                \"GZIPInputStream did not throw IllegalArgumentException for size = 0\");\n-        Assertions.assertThrows(IllegalArgumentException.class,\n-                () -> new GZIPInputStream(new ByteArrayInputStream(new byte[0]), -1),\n-                \"GZIPInputStream did not throw IllegalArgumentException for size = -1\");\n+    @ParameterizedTest\n+    @MethodSource(\"iaeFromConstructors\")\n+    public void testIAEFromConstructors(final Executable constructor) {\n+        Assertions.assertThrows(IllegalArgumentException.class, constructor,\n+                \"GZIPInputStream constructor did not throw IllegalArgumentException\");\n+    }\n@@ -56,2 +78,1 @@\n-        \/\/ verify the constructor throws IOException when the underlying stream isn't\n-        \/\/ a GZIP stream\n+    private static Stream<Arguments> ioeFromConstructors() {\n@@ -59,6 +80,14 @@\n-        Assertions.assertThrows(IOException.class,\n-                () -> new GZIPInputStream(notGZIPContent),\n-                \"GZIPInputStream did not throw IOException for non-gzip stream\");\n-        Assertions.assertThrows(IOException.class,\n-                () -> new GZIPInputStream(notGZIPContent, 1024 \/* buffer size *\/),\n-                \"GZIPInputStream did not throw IOException for non-gzip stream\");\n+        return Stream.of(\n+                Arguments.of((Executable) () -> new GZIPInputStream(notGZIPContent)),\n+                Arguments.of((Executable) () -> new GZIPInputStream(\n+                        notGZIPContent, 1024 \/* buffer size *\/)));\n+    }\n+\n+    \/*\n+     * Verifies that the GZIPInputStream constructors throw the expected IOException\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"ioeFromConstructors\")\n+    public void testIOEFromConstructors(final Executable constructor) {\n+        Assertions.assertThrows(IOException.class, constructor,\n+                \"GZIPInputStream constructor did not throw IOException\");\n","filename":"test\/jdk\/java\/util\/zip\/GZIP\/BasicGZIPInputStreamTest.java","additions":53,"deletions":24,"binary":false,"changes":77,"status":"modified"}]}