{"files":[{"patch":"@@ -34,0 +34,1 @@\n+import java.util.Objects;\n@@ -78,1 +79,1 @@\n-        super(in, in != null ? new Inflater(true) : null, size);\n+        super(in, createInflater(in, size), size);\n@@ -80,1 +81,21 @@\n-        readHeader(in);\n+        try {\n+            readHeader(in);\n+        } catch (IOException ioe) {\n+            this.inf.end();\n+            throw ioe;\n+        }\n+    }\n+\n+    \/*\n+     * Creates and returns an Inflater only if the input stream is not null and the\n+     * buffer size is > 0.\n+     * If the input stream is null, then this method throws a\n+     * NullPointerException. If the size is <= 0, then this method throws\n+     * an IllegalArgumentException\n+     *\/\n+    private static Inflater createInflater(InputStream in, int size) {\n+        Objects.requireNonNull(in);\n+        if (size <= 0) {\n+            throw new IllegalArgumentException(\"buffer size <= 0\");\n+        }\n+        return new Inflater(true);\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/GZIPInputStream.java","additions":23,"deletions":2,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.util.zip.GZIPInputStream;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+\/*\n+ * @test\n+ * @summary basic API verification tests for GZIPInputStream\n+ * @run junit BasicGZIPInputStreamTest\n+ *\/\n+public class BasicGZIPInputStreamTest {\n+\n+    \/*\n+     * Verifies that the GZIPInputStream constructors throw the expected exceptions\n+     *\/\n+    @Test\n+    public void testConstructors() throws Exception {\n+        Assertions.assertThrows(NullPointerException.class,\n+                () -> new GZIPInputStream(null),\n+                \"GZIPInputStream did not throw NullPointerException for null InputStream\");\n+        Assertions.assertThrows(NullPointerException.class,\n+                () -> new GZIPInputStream(null, 1),\n+                \"GZIPInputStream did not throw NullPointerException for null InputStream\");\n+        Assertions.assertThrows(IllegalArgumentException.class,\n+                () -> new GZIPInputStream(new ByteArrayInputStream(new byte[0]), 0),\n+                \"GZIPInputStream did not throw IllegalArgumentException for size = 0\");\n+        Assertions.assertThrows(IllegalArgumentException.class,\n+                () -> new GZIPInputStream(new ByteArrayInputStream(new byte[0]), -1),\n+                \"GZIPInputStream did not throw IllegalArgumentException for size = -1\");\n+\n+        \/\/ verify the constructor throws IOException when the underlying stream isn't\n+        \/\/ a GZIP stream\n+        final ByteArrayInputStream notGZIPContent = new ByteArrayInputStream(new byte[0]);\n+        Assertions.assertThrows(IOException.class,\n+                () -> new GZIPInputStream(notGZIPContent),\n+                \"GZIPInputStream did not throw IOException for non-gzip stream\");\n+        Assertions.assertThrows(IOException.class,\n+                () -> new GZIPInputStream(notGZIPContent, 1024 \/* buffer size *\/),\n+                \"GZIPInputStream did not throw IOException for non-gzip stream\");\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/zip\/GZIP\/BasicGZIPInputStreamTest.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"}]}