{"files":[{"patch":"@@ -520,1 +520,1 @@\n-                .setCategory(I18N.getString(\"resource.runtime-image-info-plist\"))\n+                .setCategory(I18N.getString(\"resource.runtime-bundle-info-plist\"))\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacAppImageBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-resource.runtime-image-info-plist=Java Runtime Bundle Info.plist\n+resource.runtime-bundle-info-plist=Java Runtime Bundle Info.plist\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/resources\/MacResources.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -245,1 +245,2 @@\n-    public static String getPropertyFromFile(Path filename, String name) {\n+    public static String getPropertyFromFile(Path filename, String name)\n+            throws IOException {\n@@ -250,2 +251,0 @@\n-        } catch (IOException e) {\n-            Log.error(\"Exception: \" + e.getMessage());\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/IOUtils.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -637,2 +637,6 @@\n-                releaseVersion = IOUtils.getPropertyFromFile(releasePath, \"JAVA_VERSION\");\n-                releaseVersion = Arguments.unquoteIfNeeded(releaseVersion);\n+                try {\n+                    releaseVersion = IOUtils.getPropertyFromFile(releasePath, \"JAVA_VERSION\");\n+                    releaseVersion = Arguments.unquoteIfNeeded(releaseVersion);\n+                } catch (IOException ex) {\n+                    throw new RuntimeException(ex);\n+                }\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/StandardBundlerParam.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -254,2 +254,8 @@\n-                    releaseVersion = IOUtils.getPropertyFromFile(releasePath, \"JAVA_VERSION\");\n-                    releaseVersion = Arguments.unquoteIfNeeded(releaseVersion);\n+                    try {\n+                        releaseVersion = IOUtils.getPropertyFromFile(releasePath, \"JAVA_VERSION\");\n+                        releaseVersion = Arguments.unquoteIfNeeded(releaseVersion);\n+                    } catch (IOException ex) {\n+                        TKit.error(String.format(\n+                            \"Failed to read property file at %s: %s\",\n+                            releasePath, ex));\n+                    }\n@@ -1002,3 +1008,4 @@\n-            \/\/ External runtime image should be R\/O unless it is on macOS.\n-            \/\/ On macOS it will be signed ad-hoc or with real certificate.\n-            return !TKit.isOSX();\n+            \/\/ External runtime image should be R\/O unless it is runtime installer\n+            \/\/ on macOS. On macOS runtime image will be signed ad-hoc or with\n+            \/\/ real certificate when creating runtime installers.\n+            return !(cmd.isRuntime() && TKit.isOSX());\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JPackageCommand.java","additions":12,"deletions":5,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.nio.file.Files;\n@@ -43,0 +44,1 @@\n+import java.io.IOException;\n@@ -91,0 +93,25 @@\n+        INVALID_JDK_BUNDLE(cmd -> {\n+            \/\/ Missing \"Contents\/MacOS\/libjli.dylib\"\n+            try {\n+                final Path runtimePath = TKit.createTempDirectory(\"invalidJDKBundle\");\n+                Files.createDirectories(runtimePath.resolve(\"Contents\/Home\"));\n+                Files.createFile(runtimePath.resolve(\"Contents\/Info.plist\"));\n+                return runtimePath.toAbsolutePath().toString();\n+            } catch (IOException ex) {\n+                TKit.error(ex.getMessage());\n+                return null;\n+            }\n+        }),\n+        INVALID_JDK_IMAGE(cmd -> {\n+            \/\/ Missing \"\"lib\/*\/libjli.dylib\"\"\n+            try {\n+                final Path runtimePath = TKit.createTempDirectory(\"invalidJDKImage\");\n+                Files.createDirectories(runtimePath.resolve(\"jmods\"));\n+                Files.createDirectories(runtimePath.resolve(\"lib\"));\n+                Files.createFile(runtimePath.resolve(\"lib\/src.zip\"));\n+                return runtimePath.toAbsolutePath().toString();\n+            } catch (IOException ex) {\n+                TKit.error(ex.getMessage());\n+                return null;\n+            }\n+        }),\n@@ -606,1 +633,13 @@\n-                        }, Token.JAVA_HOME.token()))\n+                        }, Token.JAVA_HOME.token())),\n+                testSpec().noAppDesc().nativeType()\n+                        .addArgs(\"--runtime-image\", Token.INVALID_JDK_BUNDLE.token())\n+                        .error(\"message.runtime-image-invalid\", JPackageCommand.cannedArgument(cmd -> {\n+                            return Path.of(cmd.getArgumentValue(\"--runtime-image\")).toAbsolutePath();\n+                        }, Token.INVALID_JDK_BUNDLE.token()))\n+                        .error(\"message.runtime-image-invalid.advice\"),\n+                testSpec().noAppDesc().nativeType()\n+                        .addArgs(\"--runtime-image\", Token.INVALID_JDK_IMAGE.token())\n+                        .error(\"message.runtime-image-invalid\", JPackageCommand.cannedArgument(cmd -> {\n+                            return Path.of(cmd.getArgumentValue(\"--runtime-image\")).toAbsolutePath();\n+                        }, Token.INVALID_JDK_IMAGE.token()))\n+                        .error(\"message.runtime-image-invalid.advice\")\n","filename":"test\/jdk\/tools\/jpackage\/share\/ErrorTest.java","additions":40,"deletions":1,"binary":false,"changes":41,"status":"modified"}]}