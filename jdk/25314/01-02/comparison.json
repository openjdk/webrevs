{"files":[{"patch":"@@ -93,1 +93,1 @@\n-        allArgs = IOUtils.getPropertiesFromFile(Path.of(filename));\n+        allArgs = Arguments.getPropertiesFromFile(filename);\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/AddLauncherArguments.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.io.Reader;\n@@ -41,0 +42,1 @@\n+import java.util.Properties;\n@@ -215,2 +217,1 @@\n-            Map<String, String> initialMap =\n-                IOUtils.getPropertiesFromFile(Path.of(popArg()));\n+            Map<String, String> initialMap = getPropertiesFromFile(popArg());\n@@ -761,0 +762,17 @@\n+    static Map<String, String> getPropertiesFromFile(String filename) {\n+        Map<String, String> map = new HashMap<>();\n+        \/\/ load properties file\n+        Properties properties = new Properties();\n+        try (Reader reader = Files.newBufferedReader(Path.of(filename))) {\n+            properties.load(reader);\n+        } catch (IOException e) {\n+            Log.error(\"Exception: \" + e.getMessage());\n+        }\n+\n+        for (final String name: properties.stringPropertyNames()) {\n+            map.put(name, properties.getProperty(name));\n+        }\n+\n+        return map;\n+    }\n+\n@@ -790,1 +808,1 @@\n-    public static String unquoteIfNeeded(String in) {\n+    private static String unquoteIfNeeded(String in) {\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/Arguments.java","additions":21,"deletions":3,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import java.io.Reader;\n@@ -37,1 +36,0 @@\n-import java.util.HashMap;\n@@ -39,2 +37,0 @@\n-import java.util.Map;\n-import java.util.Properties;\n@@ -48,1 +44,1 @@\n-public final class IOUtils {\n+final class IOUtils {\n@@ -227,28 +223,0 @@\n-\n-    static Map<String, String> getPropertiesFromFile(Path filename) {\n-        Map<String, String> map = new HashMap<>();\n-        \/\/ load properties file\n-        Properties properties = new Properties();\n-        try (Reader reader = Files.newBufferedReader(filename)) {\n-            properties.load(reader);\n-        } catch (IOException e) {\n-            Log.error(\"Exception: \" + e.getMessage());\n-        }\n-\n-        for (final String name: properties.stringPropertyNames()) {\n-            map.put(name, properties.getProperty(name));\n-        }\n-\n-        return map;\n-    }\n-\n-    public static String getPropertyFromFile(Path filename, String name)\n-            throws IOException {\n-        \/\/ load properties file\n-        Properties properties = new Properties();\n-        try (Reader reader = Files.newBufferedReader(filename)) {\n-            properties.load(reader);\n-        }\n-\n-        return properties.getProperty(name);\n-    }\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/IOUtils.java","additions":1,"deletions":33,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -617,29 +617,1 @@\n-            Path runtimePath = PREDEFINED_RUNTIME_IMAGE.fetchFrom(params);\n-            Path releasePath = null;\n-            \/\/ Try special case for macOS first. \"Contents\/Home\/release\"\n-            if (OperatingSystem.isMacOS()) {\n-                releasePath = runtimePath.resolve(\"Contents\/Home\/release\");\n-                if (!IOUtils.exists(releasePath)) {\n-                    releasePath = null;\n-                }\n-            }\n-\n-            \/\/ Try root for all platforms including macOS.\n-            if (releasePath == null) {\n-                releasePath = runtimePath.resolve(\"release\");\n-                if (!IOUtils.exists(releasePath)) {\n-                    releasePath = null;\n-                }\n-            }\n-\n-            String releaseVersion = null;\n-            if (releasePath != null) {\n-                try {\n-                    releaseVersion = IOUtils.getPropertyFromFile(releasePath, \"JAVA_VERSION\");\n-                    releaseVersion = Arguments.unquoteIfNeeded(releaseVersion);\n-                } catch (IOException ex) {\n-                    throw new RuntimeException(ex);\n-                }\n-            }\n-\n-            return releaseVersion == null ? appVersion : releaseVersion;\n+            return appVersion;\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/StandardBundlerParam.java","additions":1,"deletions":29,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -188,12 +188,1 @@\n-                    params -> {\n-                        String version = VERSION.fetchFrom(params);\n-                        \/\/ Special case for MSI product version for runtime\n-                        \/\/ installer. Runtime version can be single digit\n-                        \/\/ for example \"25\", but product version requires 2 or 4\n-                        \/\/ components. JDK uses \"25.0.0.0\" in this case.\n-                        if (StandardBundlerParam.isRuntimeInstaller(params) &&\n-                                !version.contains(\".\")) {\n-                            version = version.concat(\".0.0.0\");\n-                        }\n-                        return version;\n-                    },\n+                    VERSION::fetchFrom,\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/WinMsiBundler.java","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -57,2 +57,0 @@\n-import jdk.jpackage.internal.Arguments;\n-import jdk.jpackage.internal.IOUtils;\n@@ -229,48 +227,1 @@\n-        if (isRuntime()) {\n-            String appVersion = getArgumentValue(\"--app-image\");\n-            if (appVersion != null) {\n-                return appVersion;\n-            } else {\n-                Path runtimePath = Path.of(getArgumentValue(\"--runtime-image\"));\n-                Path releasePath = null;\n-                \/\/ Try special case for macOS first. \"Contents\/Home\/release\"\n-                if (TKit.isOSX()) {\n-                    releasePath = runtimePath.resolve(\"Contents\/Home\/release\");\n-                    if (!Files.exists(releasePath)) {\n-                        releasePath = null;\n-                    }\n-                }\n-\n-                \/\/ Try root for all platforms including macOS.\n-                if (releasePath == null) {\n-                    releasePath = runtimePath.resolve(\"release\");\n-                    if (!Files.exists(releasePath)) {\n-                        releasePath = null;\n-                    }\n-                }\n-\n-                String releaseVersion = null;\n-                if (releasePath != null) {\n-                    try {\n-                        releaseVersion = IOUtils.getPropertyFromFile(releasePath, \"JAVA_VERSION\");\n-                        releaseVersion = Arguments.unquoteIfNeeded(releaseVersion);\n-                    } catch (IOException ex) {\n-                        TKit.error(String.format(\n-                            \"Failed to read property file at %s: %s\",\n-                            releasePath, ex));\n-                    }\n-                }\n-\n-                if (releaseVersion == null) {\n-                    if (appVersion == null) {\n-                        return \"1.0\";\n-                    } else {\n-                        return appVersion;\n-                    }\n-                } else {\n-                    return releaseVersion;\n-                }\n-            }\n-        } else {\n-            return getArgumentValue(\"--app-version\", () -> \"1.0\");\n-        }\n+        return getArgumentValue(\"--app-version\", () -> \"1.0\");\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JPackageCommand.java","additions":1,"deletions":50,"binary":false,"changes":51,"status":"modified"}]}