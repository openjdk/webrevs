{"files":[{"patch":"@@ -635,1 +635,1 @@\n-        assert(VerifyAccess.isTypeVisible(c, Object.class)) : c.getName();\n+        assert(VerifyAccess.ensureTypeVisible(c, Object.class)) : c.getName();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InvokerBytecodeGenerator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -803,1 +803,1 @@\n-    void checkForTypeAlias(Class<?> refc) {\n+    void ensureTypeVisible(Class<?> refc) {\n@@ -811,1 +811,1 @@\n-            if (VerifyAccess.isTypeVisible(type, refc))  return;\n+            if (VerifyAccess.ensureTypeVisible(type, refc))  return;\n@@ -819,1 +819,1 @@\n-            if (VerifyAccess.isTypeVisible(type, refc))  return;\n+            if (VerifyAccess.ensureTypeVisible(type, refc))  return;\n@@ -961,1 +961,1 @@\n-                m.checkForTypeAlias(m.getDeclaringClass());\n+                m.ensureTypeVisible(m.getDeclaringClass());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MemberName.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -271,1 +271,1 @@\n-    public static boolean isTypeVisible(Class<?> type, Class<?> refc) {\n+    public static boolean ensureTypeVisible(Class<?> type, Class<?> refc) {\n@@ -343,2 +343,2 @@\n-    public static boolean isTypeVisible(java.lang.invoke.MethodType type, Class<?> refc) {\n-        if (!isTypeVisible(type.returnType(), refc)) {\n+    public static boolean ensureTypeVisible(java.lang.invoke.MethodType type, Class<?> refc) {\n+        if (!ensureTypeVisible(type.returnType(), refc)) {\n@@ -348,1 +348,1 @@\n-            if (!isTypeVisible(type.parameterType(n), refc)) {\n+            if (!ensureTypeVisible(type.parameterType(n), refc)) {\n","filename":"src\/java.base\/share\/classes\/sun\/invoke\/util\/VerifyAccess.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}