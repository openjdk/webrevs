{"files":[{"patch":"@@ -65,16 +65,16 @@\n-reg_def R_R0 (SOC, SOC, Op_RegI,  0,  R(0)->as_VMReg());\n-reg_def R_R1 (SOC, SOC, Op_RegI,  1,  R(1)->as_VMReg());\n-reg_def R_R2 (SOC, SOC, Op_RegI,  2,  R(2)->as_VMReg());\n-reg_def R_R3 (SOC, SOC, Op_RegI,  3,  R(3)->as_VMReg());\n-reg_def R_R4 (SOC, SOE, Op_RegI,  4,  R(4)->as_VMReg());\n-reg_def R_R5 (SOC, SOE, Op_RegI,  5,  R(5)->as_VMReg());\n-reg_def R_R6 (SOC, SOE, Op_RegI,  6,  R(6)->as_VMReg());\n-reg_def R_R7 (SOC, SOE, Op_RegI,  7,  R(7)->as_VMReg());\n-reg_def R_R8 (SOC, SOE, Op_RegI,  8,  R(8)->as_VMReg());\n-reg_def R_R9 (SOC, SOE, Op_RegI,  9,  R(9)->as_VMReg());\n-reg_def R_R10(NS,  SOE, Op_RegI, 10, R(10)->as_VMReg());\n-reg_def R_R11(NS,  SOE, Op_RegI, 11, R(11)->as_VMReg());\n-reg_def R_R12(SOC, SOC, Op_RegI, 12, R(12)->as_VMReg());\n-reg_def R_R13(NS,  NS,  Op_RegI, 13, R(13)->as_VMReg());\n-reg_def R_R14(SOC, SOC, Op_RegI, 14, R(14)->as_VMReg());\n-reg_def R_R15(NS,  NS,  Op_RegI, 15, R(15)->as_VMReg());\n+reg_def R_R0 (SOC, SOC, Op_RegI,  0,  as_Register(0)->as_VMReg());\n+reg_def R_R1 (SOC, SOC, Op_RegI,  1,  as_Register(1)->as_VMReg());\n+reg_def R_R2 (SOC, SOC, Op_RegI,  2,  as_Register(2)->as_VMReg());\n+reg_def R_R3 (SOC, SOC, Op_RegI,  3,  as_Register(3)->as_VMReg());\n+reg_def R_R4 (SOC, SOE, Op_RegI,  4,  as_Register(4)->as_VMReg());\n+reg_def R_R5 (SOC, SOE, Op_RegI,  5,  as_Register(5)->as_VMReg());\n+reg_def R_R6 (SOC, SOE, Op_RegI,  6,  as_Register(6)->as_VMReg());\n+reg_def R_R7 (SOC, SOE, Op_RegI,  7,  as_Register(7)->as_VMReg());\n+reg_def R_R8 (SOC, SOE, Op_RegI,  8,  as_Register(8)->as_VMReg());\n+reg_def R_R9 (SOC, SOE, Op_RegI,  9,  as_Register(9)->as_VMReg());\n+reg_def R_R10(NS,  SOE, Op_RegI, 10, as_Register(10)->as_VMReg());\n+reg_def R_R11(NS,  SOE, Op_RegI, 11, as_Register(11)->as_VMReg());\n+reg_def R_R12(SOC, SOC, Op_RegI, 12, as_Register(12)->as_VMReg());\n+reg_def R_R13(NS,  NS,  Op_RegI, 13, as_Register(13)->as_VMReg());\n+reg_def R_R14(SOC, SOC, Op_RegI, 14, as_Register(14)->as_VMReg());\n+reg_def R_R15(NS,  NS,  Op_RegI, 15, as_Register(15)->as_VMReg());\n","filename":"src\/hotspot\/cpu\/arm\/arm_32.ad","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -117,1 +117,1 @@\n-    assert(first < last, \"encoding constraint\");\n+    assert(first->encoding() < last->encoding(), \"encoding constraint\");\n","filename":"src\/hotspot\/cpu\/arm\/assembler_arm_32.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-  if (obj_reg < lock_reg) {\n+  if (obj_reg->encoding() < lock_reg->encoding()) {\n","filename":"src\/hotspot\/cpu\/arm\/c1_CodeStubs_arm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2634,1 +2634,1 @@\n-    if (src_lo < src_hi) {\n+    if (src_lo->encoding() < src_hi->encoding()) {\n@@ -2638,1 +2638,1 @@\n-      assert(src_lo < Rtemp, \"Rtemp is higher than any allocatable register\");\n+      assert(src_lo->encoding() < Rtemp->encoding(), \"Rtemp is higher than any allocatable register\");\n@@ -2651,1 +2651,1 @@\n-    if (dest_lo < dest_hi) {\n+    if (dest_lo->encoding() < dest_hi->encoding()) {\n@@ -2654,1 +2654,1 @@\n-      assert(dest_lo < Rtemp, \"Rtemp is higher than any allocatable register\");\n+      assert(dest_lo->encoding() < Rtemp->encoding(), \"Rtemp is higher than any allocatable register\");\n","filename":"src\/hotspot\/cpu\/arm\/c1_LIRAssembler_arm.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -412,1 +412,1 @@\n-  assert(lo < hi, \"lo must be < hi\");\n+  assert(lo->encoding() < hi->encoding(), \"lo must be < hi\");\n@@ -462,1 +462,1 @@\n-  assert(lo < hi, \"lo must be < hi\");\n+  assert(lo->encoding() < hi->encoding(), \"lo must be < hi\");\n","filename":"src\/hotspot\/cpu\/arm\/interp_masm_arm.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,3 +28,9 @@\n-const int ConcreteRegisterImpl::max_gpr = ConcreteRegisterImpl::num_gpr;\n-const int ConcreteRegisterImpl::max_fpr = ConcreteRegisterImpl::num_fpr +\n-                                          ConcreteRegisterImpl::max_gpr;\n+Register::RegisterImpl all_RegisterImpls [Register::number_of_registers + 1];\n+FloatRegister::FloatRegisterImpl all_FloatRegisterImpls [FloatRegister::number_of_registers + 1];\n+VFPSystemRegister::VFPSystemRegisterImpl all_VFPSystemRegisterImpls [VFPSystemRegister::number_of_registers + 1] {\n+  { -1 }, \/\/vfpsnoreg\n+  { VFPSystemRegister::FPSID },\n+  { VFPSystemRegister::FPSCR },\n+  { VFPSystemRegister::MVFR0 },\n+  { VFPSystemRegister::MVFR1 }\n+};\n@@ -32,2 +38,3 @@\n-const char* RegisterImpl::name() const {\n-  const char* names[number_of_registers] = {\n+const char* Register::RegisterImpl::name() const {\n+  static const char* names[number_of_registers + 1] = {\n+    \"noreg\",\n@@ -48,1 +55,1 @@\n-  return is_valid() ? names[encoding()] : \"noreg\";\n+  return names[encoding() + 1];\n@@ -51,4 +58,5 @@\n-const char* FloatRegisterImpl::name() const {\n-  const char* names[number_of_registers] = {\n-     \"s0\",  \"s1\",  \"s2\",  \"s3\",  \"s4\",  \"s5\",  \"s6\",  \"s7\",\n-     \"s8\",  \"s9\", \"s10\", \"s11\", \"s12\", \"s13\", \"s14\", \"s15\",\n+const char* FloatRegister::FloatRegisterImpl::name() const {\n+  static const char* names[number_of_registers + 1] = {\n+    \"fnoreg\",\n+    \"s0\",  \"s1\",  \"s2\",  \"s3\",  \"s4\",  \"s5\",  \"s6\",  \"s7\",\n+    \"s8\",  \"s9\", \"s10\", \"s11\", \"s12\", \"s13\", \"s14\", \"s15\",\n@@ -64,1 +72,1 @@\n-  return is_valid() ? names[encoding()] : \"fnoreg\";\n+  return names[encoding() + 1];\n","filename":"src\/hotspot\/cpu\/arm\/register_arm.cpp","additions":19,"deletions":11,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -34,20 +34,0 @@\n-\/\/ These are declared ucontext.h\n-#undef R0\n-#undef R1\n-#undef R2\n-#undef R3\n-#undef R4\n-#undef R5\n-#undef R6\n-#undef R7\n-#undef R8\n-#undef R9\n-#undef R10\n-#undef R11\n-#undef R12\n-#undef R13\n-#undef R14\n-#undef R15\n-\n-#define R(r)   ((Register)(r))\n-\n@@ -97,19 +77,82 @@\n-#define R0     ((Register)0)\n-#define R1     ((Register)1)\n-#define R2     ((Register)2)\n-#define R3     ((Register)3)\n-#define R4     ((Register)4)\n-#define R5     ((Register)5)\n-#define R6     ((Register)6)\n-#define R7     ((Register)7)\n-#define R8     ((Register)8)\n-#define R9     ((Register)9)\n-#define R10    ((Register)10)\n-#define R11    ((Register)11)\n-#define R12    ((Register)12)\n-#define R13    ((Register)13)\n-#define R14    ((Register)14)\n-#define R15    ((Register)15)\n-\n-\n-#define FP     ((Register)FP_REG_NUM)\n+class Register {\n+ private:\n+  int _encoding;\n+\n+  constexpr explicit Register(int encoding) : _encoding(encoding) {}\n+\n+ public:\n+  enum {\n+    number_of_registers = 16,\n+    max_slots_per_register = 1 << (LogBytesPerWord - LogBytesPerInt) \/\/ LogBytesPerWord depends on _LP64\n+  };\n+\n+  class RegisterImpl : public AbstractRegisterImpl {\n+    friend class Register;\n+\n+    static constexpr const RegisterImpl* first();\n+\n+   public:\n+\n+    \/\/ accessors\n+    int raw_encoding() const {return this - first();}\n+    int encoding() const {assert(is_valid(), \"invalid register\"); return raw_encoding();}\n+\n+    \/\/ testers\n+    bool is_valid() const {return 0 <= raw_encoding() && raw_encoding() < number_of_registers;}\n+\n+    inline Register successor() const;\n+\n+    VMReg as_VMReg() const;\n+\n+    const char* name() const;\n+  };\n+\n+\n+  inline friend constexpr Register as_Register(int encoding);\n+\n+  constexpr Register() : _encoding(-1) {} \/\/noreg\n+\n+  int operator==(const Register r) const { return _encoding == r._encoding; }\n+  int operator!=(const Register r) const { return _encoding != r._encoding; }\n+\n+  const RegisterImpl* operator->() const { return RegisterImpl::first() + _encoding; }\n+};\n+\n+extern Register::RegisterImpl all_RegisterImpls[Register::number_of_registers + 1] INTERNAL_VISIBILITY;\n+\n+inline constexpr const Register::RegisterImpl* Register::RegisterImpl::first() {\n+  return all_RegisterImpls + 1;\n+}\n+\n+constexpr Register noreg = Register();\n+\n+inline constexpr Register as_Register(int encoding) {\n+  if (0 <= encoding && encoding < Register::number_of_registers) {\n+    return Register(encoding);\n+  }\n+  return noreg;\n+}\n+\n+inline Register Register::RegisterImpl::successor() const {\n+  assert(is_valid(), \"sainty\");\n+  return as_Register(encoding() + 1);\n+}\n+\n+constexpr Register R0 = as_Register(0);\n+constexpr Register R1 = as_Register(1);\n+constexpr Register R2 = as_Register(2);\n+constexpr Register R3 = as_Register(3);\n+constexpr Register R4 = as_Register(4);\n+constexpr Register R5 = as_Register(5);\n+constexpr Register R6 = as_Register(6);\n+constexpr Register R7 = as_Register(7);\n+constexpr Register R8 = as_Register(8);\n+constexpr Register R9 = as_Register(9);\n+constexpr Register R10 = as_Register(10);\n+constexpr Register R11 = as_Register(11);\n+constexpr Register R12 = as_Register(12);\n+constexpr Register R13 = as_Register(13);\n+constexpr Register R14 = as_Register(14);\n+constexpr Register R15 = as_Register(15);\n+\n+constexpr Register FP = as_Register(FP_REG_NUM);\n@@ -125,1 +168,1 @@\n-#define altFP_7_11     ((Register)11)\n+constexpr Register altFP_7_11 = R11;\n@@ -127,1 +170,1 @@\n-#define altFP_7_11     ((Register)7)\n+constexpr Register altFP_7_11 = R7;\n@@ -129,3 +172,3 @@\n-#define SP     R13\n-#define LR     R14\n-#define PC     R15\n+constexpr Register SP = R13;\n+constexpr Register LR = R14;\n+constexpr Register PC = R15;\n@@ -135,2 +178,3 @@\n-class RegisterImpl;\n-typedef RegisterImpl* Register;\n+class FloatRegister {\n+ private:\n+  int _encoding;\n@@ -138,3 +182,1 @@\n-inline Register as_Register(int encoding) {\n-  return (Register)(intptr_t)encoding;\n-}\n+  constexpr explicit FloatRegister(int encoding) : _encoding(encoding) {}\n@@ -142,1 +184,0 @@\n-class RegisterImpl : public AbstractRegisterImpl {\n@@ -145,1 +186,2 @@\n-    number_of_registers = 16\n+    number_of_registers = NOT_COMPILER2(32) COMPILER2_PRESENT(64),\n+    max_slots_per_register = 1\n@@ -148,1 +190,2 @@\n-  Register successor() const      { return as_Register(encoding() + 1); }\n+  class FloatRegisterImpl : public AbstractRegisterImpl {\n+    friend class FloatRegister;\n@@ -150,1 +193,1 @@\n-  inline friend Register as_Register(int encoding);\n+    static constexpr const FloatRegisterImpl* first();\n@@ -152,1 +195,1 @@\n-  VMReg as_VMReg();\n+   public:\n@@ -154,3 +197,3 @@\n-  \/\/ accessors\n-  int   encoding() const          { assert(is_valid(), \"invalid register\"); return value(); }\n-  const char* name() const;\n+    \/\/ accessors\n+    int raw_encoding() const {return this - first();}\n+    int encoding() const {assert(is_valid(), \"invalid register\"); return raw_encoding();}\n@@ -158,0 +201,2 @@\n+    \/\/ testers\n+    bool is_valid() const {return 0 <= raw_encoding() && raw_encoding() < number_of_registers;}\n@@ -159,2 +204,1 @@\n-  \/\/ testers\n-  bool is_valid() const           { return 0 <= value() && value() < number_of_registers; }\n+    inline FloatRegister successor() const;\n@@ -162,1 +206,1 @@\n-};\n+    VMReg as_VMReg() const;\n@@ -164,1 +208,3 @@\n-CONSTANT_REGISTER_DECLARATION(Register, noreg, (-1));\n+    int hi_bits() const {\n+      return (encoding() >> 1) & 0xf;\n+    }\n@@ -166,0 +212,3 @@\n+    int lo_bit() const {\n+      return encoding() & 1;\n+    }\n@@ -167,3 +216,3 @@\n-\/\/ Use FloatRegister as shortcut\n-class FloatRegisterImpl;\n-typedef FloatRegisterImpl* FloatRegister;\n+    int hi_bit() const {\n+      return encoding() >> 5;\n+    }\n@@ -171,8 +220,1 @@\n-inline FloatRegister as_FloatRegister(int encoding) {\n-  return (FloatRegister)(intptr_t)encoding;\n-}\n-\n-class FloatRegisterImpl : public AbstractRegisterImpl {\n- public:\n-  enum {\n-    number_of_registers = NOT_COMPILER2(32) COMPILER2_PRESENT(64)\n+    const char* name() const;\n@@ -181,1 +223,1 @@\n-  inline friend FloatRegister as_FloatRegister(int encoding);\n+  inline friend constexpr FloatRegister as_FloatRegister(int encoding);\n@@ -183,1 +225,1 @@\n-  VMReg as_VMReg();\n+  constexpr FloatRegister() : _encoding(-1) {} \/\/ fnoreg\n@@ -185,3 +227,2 @@\n-  int   encoding() const          { assert(is_valid(), \"invalid register\"); return value(); }\n-  bool  is_valid() const          { return 0 <= (intx)this && (intx)this < number_of_registers; }\n-  FloatRegister successor() const { return as_FloatRegister(encoding() + 1); }\n+  int operator==(const FloatRegister r) const { return _encoding == r._encoding; }\n+  int operator!=(const FloatRegister r) const { return _encoding != r._encoding; }\n@@ -189,1 +230,2 @@\n-  const char* name() const;\n+  const FloatRegisterImpl* operator->() const { return FloatRegisterImpl::first() + _encoding; }\n+};\n@@ -191,3 +233,1 @@\n-  int hi_bits() const {\n-    return (encoding() >> 1) & 0xf;\n-  }\n+extern FloatRegister::FloatRegisterImpl all_FloatRegisterImpls[FloatRegister::number_of_registers + 1] INTERNAL_VISIBILITY;\n@@ -195,3 +235,5 @@\n-  int lo_bit() const {\n-    return encoding() & 1;\n-  }\n+inline constexpr const FloatRegister::FloatRegisterImpl* FloatRegister::FloatRegisterImpl::first() {\n+  return all_FloatRegisterImpls + 1;\n+}\n+\n+constexpr FloatRegister fnoreg = FloatRegister();\n@@ -199,2 +241,3 @@\n-  int hi_bit() const {\n-    return encoding() >> 5;\n+inline constexpr FloatRegister as_FloatRegister(int encoding) {\n+  if (0 <= encoding && encoding < FloatRegister::number_of_registers) {\n+    return FloatRegister(encoding);\n@@ -202,1 +245,2 @@\n-};\n+  return fnoreg;\n+}\n@@ -204,1 +248,4 @@\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, fnoreg, (-1));\n+inline FloatRegister FloatRegister::FloatRegisterImpl::successor() const {\n+  assert(is_valid(), \"sainty\");\n+  return as_FloatRegister(encoding() + 1);\n+}\n@@ -211,66 +258,66 @@\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, S0,     ( 0));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, S1_reg, ( 1));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, S2_reg, ( 2));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, S3_reg, ( 3));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, S4_reg, ( 4));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, S5_reg, ( 5));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, S6_reg, ( 6));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, S7,     ( 7));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, S8,     ( 8));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, S9,     ( 9));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, S10,    (10));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, S11,    (11));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, S12,    (12));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, S13,    (13));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, S14,    (14));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, S15,    (15));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, S16,    (16));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, S17,    (17));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, S18,    (18));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, S19,    (19));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, S20,    (20));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, S21,    (21));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, S22,    (22));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, S23,    (23));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, S24,    (24));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, S25,    (25));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, S26,    (26));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, S27,    (27));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, S28,    (28));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, S29,    (29));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, S30,    (30));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, S31,    (31));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, Stemp,  (30));\n-\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, D0,     ( 0));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, D1,     ( 2));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, D2,     ( 4));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, D3,     ( 6));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, D4,     ( 8));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, D5,     ( 10));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, D6,     ( 12));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, D7,     ( 14));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, D8,     ( 16));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, D9,     ( 18));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, D10,    ( 20));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, D11,    ( 22));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, D12,    ( 24));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, D13,    ( 26));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, D14,    ( 28));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, D15,    (30));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, D16,    (32));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, D17,    (34));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, D18,    (36));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, D19,    (38));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, D20,    (40));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, D21,    (42));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, D22,    (44));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, D23,    (46));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, D24,    (48));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, D25,    (50));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, D26,    (52));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, D27,    (54));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, D28,    (56));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, D29,    (58));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, D30,    (60));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, D31,    (62));\n+constexpr FloatRegister S0 = as_FloatRegister(0);\n+constexpr FloatRegister S1_reg = as_FloatRegister(1);\n+constexpr FloatRegister S2_reg = as_FloatRegister(2);\n+constexpr FloatRegister S3_reg = as_FloatRegister(3);\n+constexpr FloatRegister S4_reg = as_FloatRegister(4);\n+constexpr FloatRegister S5_reg = as_FloatRegister(5);\n+constexpr FloatRegister S6_reg = as_FloatRegister(6);\n+constexpr FloatRegister S7 = as_FloatRegister(7);\n+constexpr FloatRegister S8 = as_FloatRegister(8);\n+constexpr FloatRegister S9 = as_FloatRegister(9);\n+constexpr FloatRegister S10 = as_FloatRegister(10);\n+constexpr FloatRegister S11 = as_FloatRegister(11);\n+constexpr FloatRegister S12 = as_FloatRegister(12);\n+constexpr FloatRegister S13 = as_FloatRegister(13);\n+constexpr FloatRegister S14 = as_FloatRegister(14);\n+constexpr FloatRegister S15 = as_FloatRegister(15);\n+constexpr FloatRegister S16 = as_FloatRegister(16);\n+constexpr FloatRegister S17 = as_FloatRegister(17);\n+constexpr FloatRegister S18 = as_FloatRegister(18);\n+constexpr FloatRegister S19 = as_FloatRegister(19);\n+constexpr FloatRegister S20 = as_FloatRegister(20);\n+constexpr FloatRegister S21 = as_FloatRegister(21);\n+constexpr FloatRegister S22 = as_FloatRegister(22);\n+constexpr FloatRegister S23 = as_FloatRegister(23);\n+constexpr FloatRegister S24 = as_FloatRegister(24);\n+constexpr FloatRegister S25 = as_FloatRegister(25);\n+constexpr FloatRegister S26 = as_FloatRegister(26);\n+constexpr FloatRegister S27 = as_FloatRegister(27);\n+constexpr FloatRegister S28 = as_FloatRegister(28);\n+constexpr FloatRegister S29 = as_FloatRegister(29);\n+constexpr FloatRegister S30 = as_FloatRegister(30);\n+constexpr FloatRegister S31 = as_FloatRegister(31);\n+constexpr FloatRegister Stemp = S30;\n+\n+constexpr FloatRegister D0 = as_FloatRegister(0);\n+constexpr FloatRegister D1 = as_FloatRegister(2);\n+constexpr FloatRegister D2 = as_FloatRegister(4);\n+constexpr FloatRegister D3 = as_FloatRegister(6);\n+constexpr FloatRegister D4 = as_FloatRegister(8);\n+constexpr FloatRegister D5 = as_FloatRegister(10);\n+constexpr FloatRegister D6 = as_FloatRegister(12);\n+constexpr FloatRegister D7 = as_FloatRegister(14);\n+constexpr FloatRegister D8 = as_FloatRegister(16);\n+constexpr FloatRegister D9 = as_FloatRegister(18);\n+constexpr FloatRegister D10 = as_FloatRegister(20);\n+constexpr FloatRegister D11 = as_FloatRegister(22);\n+constexpr FloatRegister D12 = as_FloatRegister(24);\n+constexpr FloatRegister D13 = as_FloatRegister(26);\n+constexpr FloatRegister D14 = as_FloatRegister(28);\n+constexpr FloatRegister D15 = as_FloatRegister(30);\n+constexpr FloatRegister D16 = as_FloatRegister(32);\n+constexpr FloatRegister D17 = as_FloatRegister(34);\n+constexpr FloatRegister D18 = as_FloatRegister(36);\n+constexpr FloatRegister D19 = as_FloatRegister(38);\n+constexpr FloatRegister D20 = as_FloatRegister(40);\n+constexpr FloatRegister D21 = as_FloatRegister(42);\n+constexpr FloatRegister D22 = as_FloatRegister(44);\n+constexpr FloatRegister D23 = as_FloatRegister(46);\n+constexpr FloatRegister D24 = as_FloatRegister(48);\n+constexpr FloatRegister D25 = as_FloatRegister(50);\n+constexpr FloatRegister D26 = as_FloatRegister(52);\n+constexpr FloatRegister D27 = as_FloatRegister(54);\n+constexpr FloatRegister D28 = as_FloatRegister(56);\n+constexpr FloatRegister D29 = as_FloatRegister(58);\n+constexpr FloatRegister D30 = as_FloatRegister(60);\n+constexpr FloatRegister D31 = as_FloatRegister(62);\n@@ -282,19 +329,2 @@\n-    log_vmregs_per_word = LogBytesPerWord - LogBytesPerInt, \/\/ VMRegs are of 4-byte size\n-#ifdef COMPILER2\n-    log_bytes_per_fpr  = 2, \/\/ quad vectors\n-#else\n-    log_bytes_per_fpr  = 2, \/\/ double vectors\n-#endif\n-    log_words_per_fpr  = log_bytes_per_fpr - LogBytesPerWord,\n-    words_per_fpr      = 1 << log_words_per_fpr,\n-    log_vmregs_per_fpr = log_bytes_per_fpr - LogBytesPerInt,\n-    log_vmregs_per_gpr = log_vmregs_per_word,\n-    vmregs_per_gpr = 1 << log_vmregs_per_gpr,\n-    vmregs_per_fpr = 1 << log_vmregs_per_fpr,\n-\n-    num_gpr  = RegisterImpl::number_of_registers << log_vmregs_per_gpr,\n-    max_gpr0 = num_gpr,\n-    num_fpr  = FloatRegisterImpl::number_of_registers << log_vmregs_per_fpr,\n-    max_fpr0 = max_gpr0 + num_fpr,\n-    number_of_registers = num_gpr + num_fpr + 1+1 \/\/ APSR and FPSCR so that c2's REG_COUNT <= ConcreteRegisterImpl::number_of_registers\n-  };\n+    max_gpr = Register::number_of_registers * Register::max_slots_per_register,\n+    max_fpr = max_gpr + FloatRegister::number_of_registers * FloatRegister::max_slots_per_register,\n@@ -302,2 +332,2 @@\n-  static const int max_gpr;\n-  static const int max_fpr;\n+    number_of_registers = max_fpr + 1+1 \/\/ APSR and FPSCR so that c2's REG_COUNT <= ConcreteRegisterImpl::number_of_registers\n+  };\n@@ -331,3 +361,13 @@\n-class VFPSystemRegisterImpl;\n-typedef VFPSystemRegisterImpl* VFPSystemRegister;\n-class VFPSystemRegisterImpl : public AbstractRegisterImpl {\n+class VFPSystemRegister {\n+ private:\n+  int _store_idx;\n+\n+  constexpr explicit VFPSystemRegister(int store_idx) : _store_idx(store_idx) {}\n+\n+  enum {\n+    _FPSID_store_idx = 0,\n+    _FPSCR_store_idx = 1,\n+    _MVFR0_store_idx = 2,\n+    _MVFR1_store_idx = 3\n+  };\n+\n@@ -335,1 +375,29 @@\n-  int   encoding() const          { return value(); }\n+  enum {\n+    FPSID = 0,\n+    FPSCR = 1,\n+    MVFR0 = 6,\n+    MVFR1 = 7,\n+    number_of_registers = 4\n+  };\n+\n+  class VFPSystemRegisterImpl : public AbstractRegisterImpl {\n+    friend class VFPSystemRegister;\n+\n+    int _encoding;\n+\n+    static constexpr const VFPSystemRegisterImpl* first();\n+\n+   public:\n+    constexpr VFPSystemRegisterImpl(int encoding) : _encoding(encoding) {}\n+\n+    int   encoding() const { return _encoding; }\n+  };\n+\n+  inline friend constexpr VFPSystemRegister as_VFPSystemRegister(int encoding);\n+\n+  constexpr VFPSystemRegister() : _store_idx(-1) {} \/\/ vfpsnoreg\n+\n+  int operator==(const VFPSystemRegister r) const { return _store_idx == r._store_idx; }\n+  int operator!=(const VFPSystemRegister r) const { return _store_idx != r._store_idx; }\n+\n+  const VFPSystemRegisterImpl* operator->() const { return VFPSystemRegisterImpl::first() + _store_idx; }\n@@ -338,4 +406,22 @@\n-#define FPSID     ((VFPSystemRegister)0)\n-#define FPSCR     ((VFPSystemRegister)1)\n-#define MVFR0     ((VFPSystemRegister)0x6)\n-#define MVFR1     ((VFPSystemRegister)0x7)\n+extern VFPSystemRegister::VFPSystemRegisterImpl all_VFPSystemRegisterImpls[VFPSystemRegister::number_of_registers + 1] INTERNAL_VISIBILITY;\n+\n+inline constexpr const VFPSystemRegister::VFPSystemRegisterImpl* VFPSystemRegister::VFPSystemRegisterImpl::first() {\n+  return all_VFPSystemRegisterImpls + 1;\n+}\n+\n+constexpr VFPSystemRegister vfpsnoreg = VFPSystemRegister();\n+\n+inline constexpr VFPSystemRegister as_VFPSystemRegister(int encoding) {\n+  switch (encoding) {\n+    case VFPSystemRegister::_FPSID_store_idx: return VFPSystemRegister(VFPSystemRegister::FPSID);\n+    case VFPSystemRegister::_FPSCR_store_idx: return VFPSystemRegister(VFPSystemRegister::FPSCR);\n+    case VFPSystemRegister::_MVFR0_store_idx: return VFPSystemRegister(VFPSystemRegister::MVFR0);\n+    case VFPSystemRegister::_MVFR1_store_idx: return VFPSystemRegister(VFPSystemRegister::MVFR1);\n+    default: return vfpsnoreg;\n+  }\n+}\n+\n+constexpr VFPSystemRegister FPSID = as_VFPSystemRegister(  0);\n+constexpr VFPSystemRegister FPSCR = as_VFPSystemRegister(  1);\n+constexpr VFPSystemRegister MVFR0 = as_VFPSystemRegister(0x6);\n+constexpr VFPSystemRegister MVFR1 = as_VFPSystemRegister(0x7);\n@@ -346,2 +432,2 @@\n-#define Rexception_obj   R4\n-#define Rexception_pc    R5\n+constexpr Register Rexception_obj = R4;\n+constexpr Register Rexception_pc = R5;\n@@ -352,4 +438,4 @@\n-#define Rlocals          R8\n-#define Rmethod          R9\n-#define Rthread          R10\n-#define Rtemp            R12\n+constexpr Register Rlocals = R8;\n+constexpr Register Rmethod = R9;\n+constexpr Register Rthread = R10;\n+constexpr Register Rtemp = R12;\n@@ -359,2 +445,2 @@\n-#define Rparams          SP\n-#define Rsender_sp       R4\n+constexpr Register Rparams = SP;\n+constexpr Register Rsender_sp = R4;\n@@ -366,1 +452,1 @@\n-#define R5_mh            R5 \/\/ MethodHandle register, used during the call setup\n+constexpr Register R5_mh = R5; \/\/ MethodHandle register, used during the call setup\n@@ -371,5 +457,5 @@\n-#define Rsave0   R4\n-#define Rsave1   R5\n-#define Rsave2   R6\n-#define Rstate   altFP_7_11 \/\/ R7 or R11\n-#define Ricklass R8\n+constexpr Register Rsave0 = R4;\n+constexpr Register Rsave1 = R5;\n+constexpr Register Rsave2 = R6;\n+constexpr Register Rstate = altFP_7_11; \/\/ R7 or R11\n+constexpr Register Ricklass = R8;\n@@ -382,8 +468,8 @@\n-#define R0_tmp                 R0\n-#define R1_tmp                 R1\n-#define R2_tmp                 R2\n-#define R3_tmp                 R3\n-#define R4_tmp                 R4\n-#define R5_tmp                 R5\n-#define R12_tmp                R12\n-#define LR_tmp                 LR\n+constexpr Register R0_tmp = R0;\n+constexpr Register R1_tmp = R1;\n+constexpr Register R2_tmp = R2;\n+constexpr Register R3_tmp = R3;\n+constexpr Register R4_tmp = R4;\n+constexpr Register R5_tmp = R5;\n+constexpr Register R12_tmp = R12;\n+constexpr Register LR_tmp = LR;\n@@ -391,2 +477,2 @@\n-#define S0_tmp                 S0\n-#define S1_tmp                 S1_reg\n+constexpr FloatRegister S0_tmp = S0;\n+constexpr FloatRegister S1_tmp = S1_reg;\n@@ -394,2 +480,2 @@\n-#define D0_tmp                 D0\n-#define D1_tmp                 D1\n+constexpr FloatRegister D0_tmp = D0;\n+constexpr FloatRegister D1_tmp = D1;\n@@ -398,2 +484,2 @@\n-#define Rtmp_save0             R4\n-#define Rtmp_save1             R5\n+constexpr Register Rtmp_save0 = R4;\n+constexpr Register Rtmp_save1 = R5;\n@@ -402,1 +488,1 @@\n-#define R0_tos                 R0\n+constexpr Register R0_tos = R0;\n@@ -404,2 +490,2 @@\n-#define R0_tos_lo              R0\n-#define R1_tos_hi              R1\n+constexpr Register R0_tos_lo = R0;\n+constexpr Register R1_tos_hi = R1;\n@@ -407,2 +493,2 @@\n-#define S0_tos                 S0\n-#define D0_tos                 D0\n+constexpr FloatRegister S0_tos = S0;\n+constexpr FloatRegister D0_tos = D0;\n@@ -411,1 +497,1 @@\n-#define RdispatchTable         R6\n+constexpr Register RdispatchTable = R6;\n@@ -414,1 +500,1 @@\n-#define Rbcp                   altFP_7_11\n+constexpr Register Rbcp = altFP_7_11;\n@@ -417,1 +503,1 @@\n-#define R3_bytecode            R3\n+constexpr Register R3_bytecode = R3;\n@@ -420,2 +506,2 @@\n-#define R2_ClassCastException_obj        R2\n-#define R4_ArrayIndexOutOfBounds_index   R4\n+constexpr Register R2_ClassCastException_obj = R2;\n+constexpr Register R4_ArrayIndexOutOfBounds_index = R4;\n@@ -424,1 +510,1 @@\n-#define Rstack_top             SP\n+constexpr Register Rstack_top = SP;\n@@ -447,4 +533,5 @@\n-#define c_rarg0  R0\n-#define c_rarg1  R1\n-#define c_rarg2  R2\n-#define c_rarg3  R3\n+\n+constexpr Register c_rarg0 = R0;\n+constexpr Register c_rarg1 = R1;\n+constexpr Register c_rarg2 = R2;\n+constexpr Register c_rarg3 = R3;\n@@ -458,4 +545,4 @@\n-#define j_rarg0  c_rarg0\n-#define j_rarg1  c_rarg1\n-#define j_rarg2  c_rarg2\n-#define j_rarg3  c_rarg3\n+constexpr Register j_rarg0 = c_rarg0;\n+constexpr Register j_rarg1 = c_rarg1;\n+constexpr Register j_rarg2 = c_rarg2;\n+constexpr Register j_rarg3 = c_rarg3;\n","filename":"src\/hotspot\/cpu\/arm\/register_arm.hpp","additions":317,"deletions":230,"binary":false,"changes":547,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-    fpu_save_size = FloatRegisterImpl::number_of_registers,\n+    fpu_save_size = FloatRegister::number_of_registers,\n@@ -142,2 +142,2 @@\n-      if (FloatRegisterImpl::number_of_registers > 32) {\n-        assert(FloatRegisterImpl::number_of_registers == 64, \"nb fp registers should be 64\");\n+      if (FloatRegister::number_of_registers > 32) {\n+        assert(FloatRegister::number_of_registers == 64, \"nb fp registers should be 64\");\n@@ -185,2 +185,2 @@\n-      if (FloatRegisterImpl::number_of_registers > 32) {\n-        assert(FloatRegisterImpl::number_of_registers == 64, \"nb fp registers should be 64\");\n+      if (FloatRegister::number_of_registers > 32) {\n+        assert(FloatRegister::number_of_registers == 64, \"nb fp registers should be 64\");\n","filename":"src\/hotspot\/cpu\/arm\/sharedRuntime_arm.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-    for (int j = 0; j < (1 << ConcreteRegisterImpl::log_vmregs_per_gpr); j++) {\n+    for (int j = 0; j < Register::max_slots_per_register; j++) {\n@@ -40,1 +40,1 @@\n-    for (int j = 0; j < (1 << ConcreteRegisterImpl::log_vmregs_per_fpr); j++) {\n+    for (int j = 0; j < Register::max_slots_per_register; j++) {\n","filename":"src\/hotspot\/cpu\/arm\/vmreg_arm.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-    return ::as_Register(value() >> ConcreteRegisterImpl::log_vmregs_per_gpr);\n+    return ::as_Register(value() \/ Register::max_slots_per_register);\n@@ -45,1 +45,1 @@\n-    return ::as_FloatRegister((value() - ConcreteRegisterImpl::max_gpr) >> ConcreteRegisterImpl::log_vmregs_per_fpr);\n+    return ::as_FloatRegister((value() - ConcreteRegisterImpl::max_gpr) \/ FloatRegister::max_slots_per_register);\n@@ -50,1 +50,1 @@\n-      return ((value() & right_n_bits(ConcreteRegisterImpl::log_vmregs_per_gpr)) == 0);\n+      return (value() % Register::max_slots_per_register == 0);\n@@ -52,1 +52,1 @@\n-      return (((value() - ConcreteRegisterImpl::max_gpr) & right_n_bits(ConcreteRegisterImpl::log_vmregs_per_fpr)) == 0);\n+      return true; \/\/ Single slot\n","filename":"src\/hotspot\/cpu\/arm\/vmreg_arm.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-inline VMReg RegisterImpl::as_VMReg() {\n-  return VMRegImpl::as_VMReg(encoding() << ConcreteRegisterImpl::log_vmregs_per_gpr);\n+inline VMReg Register::RegisterImpl::as_VMReg() const {\n+  return VMRegImpl::as_VMReg(encoding() * Register::max_slots_per_register);\n@@ -32,2 +32,2 @@\n-inline VMReg FloatRegisterImpl::as_VMReg() {\n-  return VMRegImpl::as_VMReg((encoding() << ConcreteRegisterImpl::log_vmregs_per_fpr) + ConcreteRegisterImpl::max_gpr);\n+inline VMReg FloatRegister::FloatRegisterImpl::as_VMReg() const {\n+  return VMRegImpl::as_VMReg((encoding() * FloatRegister::max_slots_per_register) + ConcreteRegisterImpl::max_gpr);\n","filename":"src\/hotspot\/cpu\/arm\/vmreg_arm.inline.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -249,3 +249,3 @@\n-    assert(memval_hi == memval_lo + 1 && memval_lo < R9, \"cmpxchg_long: illegal registers\");\n-    assert(oldval_hi == oldval_lo + 1 && oldval_lo < R9, \"cmpxchg_long: illegal registers\");\n-    assert(newval_hi == newval_lo + 1 && newval_lo < R9, \"cmpxchg_long: illegal registers\");\n+    assert(memval_hi == as_Register(memval_lo->encoding() + 1) && memval_lo->encoding() < R9->encoding(), \"cmpxchg_long: illegal registers\");\n+    assert(oldval_hi == as_Register(oldval_lo->encoding() + 1) && oldval_lo->encoding() < R9->encoding(), \"cmpxchg_long: illegal registers\");\n+    assert(newval_hi == as_Register(newval_lo->encoding() + 1) && newval_lo->encoding() < R9->encoding(), \"cmpxchg_long: illegal registers\");\n","filename":"src\/hotspot\/os_cpu\/linux_arm\/macroAssembler_linux_arm_32.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}