{"files":[{"patch":"@@ -851,0 +851,4 @@\n+static int sort_string(const char** a, const char** b) {\n+  return strcmp(*a,*b);\n+}\n+\n@@ -900,1 +904,9 @@\n-        return classpath_failure(\"[APP classpath mismatch, actual: -Djava.class.path=\", appcp);\n+        \/\/Handle run java with wildcard classpath like this: java -cp \"lib\/*\"\n+        \/\/ at dump time, the classpath expands to: a.jar:b.jar\n+        \/\/ at using shared space-time, the classpath may expand to: b.jar:a.jar\n+        \/\/ the order of 'lib\/*' is undefined, depending on filesystem.\n+        mismatch = !is_out_of_order_path(header()->app_class_paths_start_index(),\n+                                         shared_app_paths_len, rp_array);\n+        if (mismatch) {\n+          return classpath_failure(\"[APP classpath mismatch, actual: -Djava.class.path=\", appcp);\n+        }\n@@ -907,0 +919,26 @@\n+bool FileMapInfo::is_out_of_order_path(int shared_path_start_idx, int num_paths,\n+                                        GrowableArray<const char*>* rp_array) {\n+  GrowableArray<const char*>* sp_array = new GrowableArray<const char*>(num_paths);\n+  for(int i = shared_path_start_idx; i < shared_path_start_idx + num_paths; i++) {\n+    if (shared_path(i)->from_class_path_attr()) {\n+      continue;\n+    }\n+    sp_array->append(shared_path(i)->name());\n+  }\n+  \/\/only handle same jars but with different orders.\n+  if (rp_array->length() != sp_array->length()) {\n+    return false;\n+  }\n+\n+  rp_array->sort(sort_string);\n+  sp_array->sort(sort_string);\n+\n+  for(int i = 0; i < sp_array->length(); i++) {\n+    if (!os::same_files(sp_array->at(i), rp_array->at(i))) {\n+      return false;\n+    }\n+  }\n+  return true;\n+}\n+\n+\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":39,"deletions":1,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -551,0 +551,1 @@\n+  bool  is_out_of_order_path(int shared_path_start_idx, int num_paths, GrowableArray<const char*>* rp_array);\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Alibaba Group Holding Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ *@test\n+ *@summary Test app class path are different order between\n+ *         dump time and using shared space time.\n+ *@library \/test\/lib\n+ *@compile test-classes\/Greet.java\n+ *@compile test-classes\/Hi.java\n+ *@run driver OutOfOrderClasspathTest\n+ *\/\n+\n+import java.io.File;\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class OutOfOrderClasspathTest {\n+    public static void main(String[] args) throws Exception {\n+        String[] testClasses = {\"Hi\", \"Greet\"};\n+        JarBuilder.build(\"hi\", \"Hi\", \"Hi$MyClass\");\n+        JarBuilder.build(\"greet\", \"Greet\");\n+\n+        String appJar = null;\n+        String outputDir = CDSTestUtils.getOutputDir();\n+        System.setProperty(\"test.noclasspath\", \"true\");\n+        String hiJar = outputDir + File.separator + \"hi.jar\";\n+        String greetJar = outputDir + File.separator + \"greet.jar\";\n+\n+        TestCommon.dump(appJar,\n+            testClasses,\n+            \"-cp\",\n+            hiJar + File.pathSeparator + greetJar,\n+            \"Hi\");\n+\n+        OutputAnalyzer out = TestCommon.exec(appJar,\n+            \"-cp\",\n+            greetJar + File.pathSeparator + hiJar,\n+            \"-Xlog:class+load\",\n+            \"Hi\");\n+\n+        TestCommon.checkExec(out, \"Hi, how are you?\");\n+        out.shouldContain(\" Hi source: shared objects file\");\n+        out.shouldContain(\" Greet source: shared objects file\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/OutOfOrderClasspathTest.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -309,0 +309,1 @@\n+        \/\/after sorting the classpath, the classpath is same as the dump time.\n@@ -317,2 +318,2 @@\n-                   .shouldNotContain(OPTIMIZE_ENABLED)\n-                   .shouldContain(MAP_FAILED);\n+                   .shouldContain(OPTIMIZE_ENABLED)\n+                   .shouldNotContain(MAP_FAILED);\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/modulepath\/OptimizeModuleHandlingTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}