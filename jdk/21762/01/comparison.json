{"files":[{"patch":"@@ -221,1 +221,1 @@\n-\\                      The default value is \"allow\".\\n\\n\\\n+\\                      The default value is \"warn\".\\n\\n\\\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/resources\/launcher.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1249,1 +1249,1 @@\n-The default value when the option is not specified is \\f[V]allow\\f[R].\n+The default value when the option is not specified is \\f[V]warn\\f[R].\n","filename":"src\/java.base\/share\/man\/java.1","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1853,1 +1853,1 @@\n-            return ALLOW;\n+            return WARN;\n","filename":"src\/jdk.unsupported\/share\/classes\/sun\/misc\/Unsafe.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8331670\n+ * @bug 8331670 8338383\n@@ -46,1 +46,1 @@\n-     * Test default is \"allow\"\n+     * Test default is \"warn\"\n@@ -48,11 +48,7 @@\n-    @Test\n-    void testDefault() throws Exception {\n-        test(\"allocateMemory+freeMemory+objectFieldOffset+putLong+getLong+invokeCleaner\")\n-            .shouldHaveExitValue(0)\n-            .shouldNotContain(\"WARNING: A terminally deprecated method in sun.misc.Unsafe has been called\")\n-            .shouldNotContain(\"WARNING: sun.misc.Unsafe::allocateMemory\")\n-            .shouldNotContain(\"WARNING: sun.misc.Unsafe::freeMemory\")\n-            .shouldNotContain(\"WARNING: sun.misc.Unsafe::objectFieldOffset\")\n-            .shouldNotContain(\"WARNING: sun.misc.Unsafe::putLong\")\n-            .shouldNotContain(\"WARNING: sun.misc.Unsafe::getLong\")\n-            .shouldNotContain(\"WARNING: sun.misc.Unsafe::invokeCleaner\");\n+    @ParameterizedTest\n+    @ValueSource(strings = {\n+            \"allocateMemory+freeMemory\",\n+            \"objectFieldOffset+putLong+getLong\"\n+    })\n+    void testDefault(String input) throws Exception {\n+        testOneWarning(input);\n@@ -84,2 +80,1 @@\n-            \"objectFieldOffset+putLong+getLong\",\n-            \"invokeCleaner\"\n+            \"objectFieldOffset+putLong+getLong\"\n@@ -88,1 +83,10 @@\n-        var output = test(input, \"--sun-misc-unsafe-memory-access=warn\").shouldHaveExitValue(0);\n+        testOneWarning(input, \"--sun-misc-unsafe-memory-access=warn\");\n+    }\n+\n+    \/**\n+     * Test that a warning is printed by the first memory access method only.\n+     * @param input comma separated list of Unsafe memory access methods to execute\n+     * @param vmopts VM options\n+     *\/\n+    private void testOneWarning(String input, String... vmopts) throws Exception {\n+        var output = test(input, vmopts).shouldHaveExitValue(0);\n@@ -102,0 +106,1 @@\n+            assertNotEquals(firstMethodName, methodName);\n","filename":"test\/jdk\/sun\/misc\/UnsafeMemoryAccessWarnings.java","additions":21,"deletions":16,"binary":false,"changes":37,"status":"modified"}]}