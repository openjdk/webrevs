{"files":[{"patch":"@@ -224,0 +224,6 @@\n+    \/**\n+     * Sentinel help value to denote options that are not printed by -XX:+JVMCIPrintProperties.\n+     * Javadoc is used instead to document these options.\n+     *\/\n+    private static final String[] NO_HELP = null;\n+\n@@ -232,21 +238,39 @@\n-                \"that will raise an exception upon receiving a compilation request.\"),\n-        \/\/ Note: The following one is not used (see InitTimer.ENABLED). It is added here\n-        \/\/ so that -XX:+JVMCIPrintProperties shows the option.\n-        InitTimer(Boolean.class, false, \"Specifies if initialization timing is enabled.\"),\n-        CodeSerializationTypeInfo(Boolean.class, false, \"Prepend the size and label of each element to the stream when \" +\n-                \"serializing HotSpotCompiledCode to verify both ends of the protocol agree on the format. \" +\n-                \"Defaults to true in non-product builds.\"),\n-        DumpSerializedCode(String.class, null, \"Dump serialized code during code installation for code whose simple \" +\n-                \"name (a stub) or fully qualified name (an nmethod) contains this option's value as a substring.\"),\n-        ForceTranslateFailure(String.class, null, \"Forces HotSpotJVMCIRuntime.translate to throw an exception in the context \" +\n-                \"of the peer runtime. The value is a filter that can restrict the forced failure to matching translated \" +\n-                \"objects. See HotSpotJVMCIRuntime.postTranslation for more details. This option exists solely to test \" +\n-                \"correct handling of translation failures.\"),\n-        PrintConfig(Boolean.class, false, \"Prints VM configuration available via JVMCI.\"),\n-        AuditHandles(Boolean.class, false, \"Record stack trace along with scoped foreign object reference wrappers \" +\n-                \"to debug issue with a wrapper being used after its scope has closed.\"),\n-        TraceMethodDataFilter(String.class, null,\n-                \"Enables tracing of profiling info when read by JVMCI.\",\n-                \"Empty value: trace all methods\",\n-                        \"Non-empty value: trace methods whose fully qualified name contains the value.\"),\n-        UseProfilingInformation(Boolean.class, true, \"\");\n+                \"that raises an exception upon receiving a compilation request.\"),\n+\n+        PrintConfig(Boolean.class, false, \"Prints VM values (e.g. flags, constants, field offsets etc) exposed to JVMCI.\"),\n+\n+        InitTimer(Boolean.class, false, NO_HELP),\n+\n+        \/**\n+         * Prepends the size and label of each element to the stream when serializing {@link HotSpotCompiledCode}\n+         * to verify both ends of the protocol agree on the format. Defaults to true in non-product builds.\n+         *\/\n+        CodeSerializationTypeInfo(Boolean.class, false, NO_HELP),\n+\n+        \/**\n+         * Dumps serialized code during code installation for code whose qualified form (e.g.\n+         * {@code java.lang.String.hashCode()}) contains this option's value as a substring.\n+         *\/\n+        DumpSerializedCode(String.class, null, NO_HELP),\n+\n+        \/**\n+         * Forces {@link #translate} to throw an exception in the context of the peer runtime for\n+         * translated objects that match this value. See {@link #postTranslation} for more details.\n+         * This option exists solely to test correct handling of translation failures.\n+         *\/\n+        ForceTranslateFailure(String.class, null, NO_HELP),\n+\n+        \/**\n+         * Records a stack trace along with scoped foreign object reference wrappers\n+         * to debug issue with a wrapper being used after its scope has closed.\n+         *\/\n+        AuditHandles(Boolean.class, false, NO_HELP),\n+\n+        \/**\n+         * Enables tracing of profiling info when read by JVMCI.\n+         *     Empty value: trace all methods\"\n+         * Non-empty value: trace methods whose fully qualified name contains the value\n+         *\/\n+        TraceMethodDataFilter(String.class, null, NO_HELP),\n+\n+        UseProfilingInformation(Boolean.class, true, NO_HELP);\n@@ -346,0 +370,3 @@\n+                if (option.helpLines == null) {\n+                    continue;\n+                }\n@@ -365,0 +392,1 @@\n+                out.println();\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotJVMCIRuntime.java","additions":49,"deletions":21,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @summary Ensure -XX:-JVMCIPrintProperties can be enabled and successfully prints expected output to stdout.\n+ * @summary Ensure -XX:+JVMCIPrintProperties successfully prints expected output to stdout.\n@@ -52,1 +52,0 @@\n-        output.shouldContain(\"jvmci.InitTimer = false\"); \/\/ expected message\n@@ -54,1 +53,0 @@\n-        output.shouldContain(\"jvmci.TraceMethodDataFilter = null\"); \/\/ expected message\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/TestJVMCIPrintProperties.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"}]}