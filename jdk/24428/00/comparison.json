{"files":[{"patch":"@@ -554,10 +554,7 @@\n-            if (Log.isVerbose()) {\n-                Log.verbose(e);\n-            } else {\n-                String msg1 = e.getMessage();\n-                Log.fatalError(msg1);\n-                if (e.getCause() != null && e.getCause() != e) {\n-                    String msg2 = e.getCause().getMessage();\n-                    if (msg2 != null && !msg1.contains(msg2)) {\n-                        Log.fatalError(msg2);\n-                    }\n+            Log.verbose(e);\n+            String msg1 = e.getMessage();\n+            Log.fatalError(msg1);\n+            if (e.getCause() != null && e.getCause() != e) {\n+                String msg2 = e.getCause().getMessage();\n+                if (msg2 != null && !msg1.contains(msg2)) {\n+                    Log.fatalError(msg2);\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/Arguments.java","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -45,1 +45,0 @@\n-import java.util.regex.Matcher;\n@@ -1177,8 +1176,8 @@\n-        \/\/ [HH:mm:ss.SSS]\n-        final Pattern timestampRegexp = Pattern.compile(\n-                \"^\\\\[\\\\d\\\\d:\\\\d\\\\d:\\\\d\\\\d.\\\\d\\\\d\\\\d\\\\] \");\n-        return stream.map(str -> {\n-            Matcher m = timestampRegexp.matcher(str);\n-            if (m.find()) {\n-                str = str.substring(m.end());\n-            }\n+        return stream.map(JPackageCommand::stripTimestamp);\n+    }\n+\n+    public static String stripTimestamp(String str) {\n+        final var m = TIMESTAMP_REGEXP.matcher(str);\n+        if (m.find()) {\n+            return str.substring(m.end());\n+        } else {\n@@ -1186,1 +1185,5 @@\n-        });\n+        }\n+    }\n+\n+    public static boolean withTimestamp(String str) {\n+        return TIMESTAMP_REGEXP.matcher(str).find();\n@@ -1282,0 +1285,4 @@\n+\n+    \/\/ [HH:mm:ss.SSS]\n+    private static final Pattern TIMESTAMP_REGEXP = Pattern.compile(\n+            \"^\\\\[\\\\d\\\\d:\\\\d\\\\d:\\\\d\\\\d.\\\\d\\\\d\\\\d\\\\] \");\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JPackageCommand.java","additions":17,"deletions":10,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -25,0 +25,2 @@\n+import static jdk.jpackage.test.RunnablePackageTest.Action.CREATE_AND_UNPACK;\n+\n@@ -28,1 +30,0 @@\n-import java.util.List;\n@@ -32,0 +33,1 @@\n+import java.util.List;\n@@ -37,1 +39,7 @@\n-import jdk.jpackage.test.TKit;\n+import jdk.jpackage.internal.util.function.ThrowingConsumer;\n+import jdk.jpackage.test.Annotations.Parameter;\n+import jdk.jpackage.test.Annotations.ParameterSupplier;\n+import jdk.jpackage.test.Annotations.Test;\n+import jdk.jpackage.test.CannedFormattedString;\n+import jdk.jpackage.test.Executor;\n+import jdk.jpackage.test.HelloApp;\n@@ -41,3 +49,0 @@\n-import jdk.jpackage.test.PackageTest;\n-import jdk.jpackage.test.HelloApp;\n-import jdk.jpackage.test.Executor;\n@@ -45,4 +50,2 @@\n-import jdk.jpackage.test.Annotations.Test;\n-import jdk.jpackage.test.Annotations.Parameter;\n-import jdk.jpackage.test.Annotations.ParameterSupplier;\n-import jdk.jpackage.internal.util.function.ThrowingConsumer;\n+import jdk.jpackage.test.PackageTest;\n+import jdk.jpackage.test.TKit;\n@@ -50,1 +53,0 @@\n-import static jdk.jpackage.test.RunnablePackageTest.Action.CREATE_AND_UNPACK;\n@@ -231,0 +233,23 @@\n+    @Test\n+    @Parameter(\"false\")\n+    @Parameter(\"true\")\n+    public void testErrorsAlwaysPrinted(boolean verbose) {\n+        final var cmd = JPackageCommand.helloAppImage()\n+                .ignoreDefaultVerbose(true)\n+                .useToolProvider(false)\n+                .removeArgumentWithValue(\"--main-class\");\n+\n+        if (verbose) {\n+            cmd.addArgument(\"--verbose\");\n+        }\n+\n+        final var textVerifier = Stream.of(\n+                List.of(\"error.no-main-class-with-main-jar\", \"hello.jar\"),\n+                List.of(\"error.no-main-class-with-main-jar.advice\", \"hello.jar\")\n+        ).map(args -> {\n+            return JPackageStringBundle.MAIN.cannedFormattedString(args.getFirst(), args.subList(1, args.size()).toArray());\n+        }).map(CannedFormattedString::getValue).map(TKit::assertTextStream).reduce(TKit.TextStreamVerifier::andThen).orElseThrow();\n+\n+        textVerifier.apply(cmd.saveConsoleOutput(true).execute(1).getOutput().stream().filter(Predicate.not(JPackageCommand::withTimestamp)));\n+    }\n+\n","filename":"test\/jdk\/tools\/jpackage\/share\/BasicTest.java","additions":35,"deletions":10,"binary":false,"changes":45,"status":"modified"}]}