{"files":[{"patch":"@@ -145,4 +145,5 @@\n- * competing threads are racing to initialize a lazy constant, only one updating\n- * thread runs the computing function, while the other threads are blocked until\n- * the constant is initialized, after which the other threads observe the lazy constant\n- * is initialized and leave the constant unchanged and will never invoke any computation.\n+ * competing threads are racing to initialize a lazy constant, only one updating thread\n+ * runs the computing function (which is the caller's thread and is hereafter denoted\n+ * <em>the computing thread<\/em>), while the other threads are blocked until the constant\n+ * is initialized, after which the other threads observe the lazy constant is initialized\n+ * and leave the constant unchanged and will never invoke any computation.\n@@ -150,2 +151,2 @@\n- * The invocation of the computing function and the resulting initialization of the constant\n- * {@linkplain java.util.concurrent##MemoryVisibility <em>happens-before<\/em>}\n+ * The invocation of the computing function and the resulting initialization of\n+ * the constant {@linkplain java.util.concurrent##MemoryVisibility <em>happens-before<\/em>}\n@@ -155,6 +156,4 @@\n- * The computing function runs on the caller’s thread.\n- * <p>\n- * If a thread that is blocked by another computing thread is interrupted, this is not\n- * acted upon by the lazy constant (e.g., the thread’s interrupted status is not\n- * cleared, and it does not throw InterruptedException; interruption does not cancel\n- * initialization).\n+ * If the computing thread or any thread that is blocked by the computing thread\n+ * is interrupted, this is not acted upon by the lazy constant (e.g., the interrupted\n+ * thread’s interrupted status is not cleared, and it does not throw InterruptedException;\n+ * interruption does not cancel initialization).\n","filename":"src\/java.base\/share\/classes\/java\/lang\/LazyConstant.java","additions":11,"deletions":12,"binary":false,"changes":23,"status":"modified"}]}