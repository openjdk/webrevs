{"files":[{"patch":"@@ -154,8 +154,9 @@\n- * The contents of lazy constant can never change after it has been initialized. Therefore,\n- * a JVM implementation may, for an initialized lazy constant, elide all future reads of\n- * that lazy constant's contents and instead use the contents that has been previously\n- * observed. We call this optimization <em>constant folding<\/em>. This is only possible\n- * if the reference to the lazy constant in a {@code static final} field or forms\n- * a trusted chain to such a field via one or more trusted fields (i.e., any\n- * combination of {@code static final} fields, {@linkplain Record record} fields,\n- * lazy constants, lazy lists, lazy maps, or final instance fields in hidden classes).\n+ * The contents of a lazy constant can never change after the lazy constant has been\n+ * initialized. Therefore, a JVM implementation may, for an initialized lazy constant,\n+ * elide all future reads of that lazy constant's contents and instead use the contents\n+ * that has been previously observed. We call this optimization <em>constant folding<\/em>.\n+ * This is only possible if there is a direct reference from a {@code static final} field\n+ * to a lazy constant or if there is a chain from a {@code static final} field -- via one\n+ * or more <em>trusted fields<\/em> (i.e., {@code static final} fields,\n+ * {@linkplain Record record} fields, lazy constants, lazy lists, lazy maps,\n+ * or final instance fields in hidden classes) -- to a lazy constant.\n@@ -174,2 +175,2 @@\n- *          A lazy constant whose contents is an array will not optimize access to\n- *          the elements of such array. Instead, a\n+ *          While it's possible to store an array inside a lazy constant, doing so will\n+ *          not result in improved access performance of the array elements. Instead, a\n@@ -289,1 +290,1 @@\n-     *                          to compute the constant\n+     *                          to initialize the constant\n","filename":"src\/java.base\/share\/classes\/java\/lang\/LazyConstant.java","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -1235,1 +1235,1 @@\n-     * implementation-dependant string is returned for uninitialized elements.\n+     * implementation-dependent string is returned for uninitialized elements.\n","filename":"src\/java.base\/share\/classes\/java\/util\/List.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1788,1 +1788,1 @@\n-     * implementation-dependant string is returned for uninitialized values.\n+     * implementation-dependent string is returned for uninitialized values.\n","filename":"src\/java.base\/share\/classes\/java\/util\/Map.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}