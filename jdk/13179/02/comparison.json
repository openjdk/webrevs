{"files":[{"patch":"@@ -32,7 +32,303 @@\n-bool            Bytecodes::_is_initialized = false;\n-const char*     Bytecodes::_name          [Bytecodes::number_of_codes];\n-BasicType       Bytecodes::_result_type   [Bytecodes::number_of_codes];\n-s_char          Bytecodes::_depth         [Bytecodes::number_of_codes];\n-u_char          Bytecodes::_lengths       [Bytecodes::number_of_codes];\n-Bytecodes::Code Bytecodes::_java_code     [Bytecodes::number_of_codes];\n-unsigned short  Bytecodes::_flags         [(1<<BitsPerByte)*2];\n+#define JVM_BYTECODES_DO(def)                                                                                                     \\\n+  def(_fast_agetfield            , \"fast_agetfield\"            , \"bJJ\"  , nullptr    , T_OBJECT ,  0, true , _getfield          ) \\\n+  def(_fast_bgetfield            , \"fast_bgetfield\"            , \"bJJ\"  , nullptr    , T_INT    ,  0, true , _getfield          ) \\\n+  def(_fast_cgetfield            , \"fast_cgetfield\"            , \"bJJ\"  , nullptr    , T_CHAR   ,  0, true , _getfield          ) \\\n+  def(_fast_dgetfield            , \"fast_dgetfield\"            , \"bJJ\"  , nullptr    , T_DOUBLE ,  0, true , _getfield          ) \\\n+  def(_fast_fgetfield            , \"fast_fgetfield\"            , \"bJJ\"  , nullptr    , T_FLOAT  ,  0, true , _getfield          ) \\\n+  def(_fast_igetfield            , \"fast_igetfield\"            , \"bJJ\"  , nullptr    , T_INT    ,  0, true , _getfield          ) \\\n+  def(_fast_lgetfield            , \"fast_lgetfield\"            , \"bJJ\"  , nullptr    , T_LONG   ,  0, true , _getfield          ) \\\n+  def(_fast_sgetfield            , \"fast_sgetfield\"            , \"bJJ\"  , nullptr    , T_SHORT  ,  0, true , _getfield          ) \\\n+                                                                                                                                  \\\n+  def(_fast_aputfield            , \"fast_aputfield\"            , \"bJJ\"  , nullptr    , T_OBJECT ,  0, true , _putfield          ) \\\n+  def(_fast_bputfield            , \"fast_bputfield\"            , \"bJJ\"  , nullptr    , T_INT    ,  0, true , _putfield          ) \\\n+  def(_fast_zputfield            , \"fast_zputfield\"            , \"bJJ\"  , nullptr    , T_INT    ,  0, true , _putfield          ) \\\n+  def(_fast_cputfield            , \"fast_cputfield\"            , \"bJJ\"  , nullptr    , T_CHAR   ,  0, true , _putfield          ) \\\n+  def(_fast_dputfield            , \"fast_dputfield\"            , \"bJJ\"  , nullptr    , T_DOUBLE ,  0, true , _putfield          ) \\\n+  def(_fast_fputfield            , \"fast_fputfield\"            , \"bJJ\"  , nullptr    , T_FLOAT  ,  0, true , _putfield          ) \\\n+  def(_fast_iputfield            , \"fast_iputfield\"            , \"bJJ\"  , nullptr    , T_INT    ,  0, true , _putfield          ) \\\n+  def(_fast_lputfield            , \"fast_lputfield\"            , \"bJJ\"  , nullptr    , T_LONG   ,  0, true , _putfield          ) \\\n+  def(_fast_sputfield            , \"fast_sputfield\"            , \"bJJ\"  , nullptr    , T_SHORT  ,  0, true , _putfield          ) \\\n+                                                                                                                                  \\\n+  def(_fast_aload_0              , \"fast_aload_0\"              , \"b\"    , nullptr    , T_OBJECT ,  1, true , _aload_0           ) \\\n+  def(_fast_iaccess_0            , \"fast_iaccess_0\"            , \"b_JJ\" , nullptr    , T_INT    ,  1, true , _aload_0           ) \\\n+  def(_fast_aaccess_0            , \"fast_aaccess_0\"            , \"b_JJ\" , nullptr    , T_OBJECT ,  1, true , _aload_0           ) \\\n+  def(_fast_faccess_0            , \"fast_faccess_0\"            , \"b_JJ\" , nullptr    , T_OBJECT ,  1, true , _aload_0           ) \\\n+                                                                                                                                  \\\n+  def(_fast_iload                , \"fast_iload\"                , \"bi\"   , nullptr    , T_INT    ,  1, false, _iload             ) \\\n+  def(_fast_iload2               , \"fast_iload2\"               , \"bi_i\" , nullptr    , T_INT    ,  2, false, _iload             ) \\\n+  def(_fast_icaload              , \"fast_icaload\"              , \"bi_\"  , nullptr    , T_INT    ,  0, false, _iload             ) \\\n+                                                                                                                                  \\\n+  def(_fast_invokevfinal         , \"fast_invokevfinal\"         , \"bJJ\"  , nullptr    , T_ILLEGAL, -1, true , _invokevirtual     ) \\\n+  def(_fast_linearswitch         , \"fast_linearswitch\"         , \"\"     , nullptr    , T_VOID   , -1, false, _lookupswitch      ) \\\n+  def(_fast_binaryswitch         , \"fast_binaryswitch\"         , \"\"     , nullptr    , T_VOID   , -1, false, _lookupswitch      ) \\\n+                                                                                                                                  \\\n+  def(_fast_aldc                 , \"fast_aldc\"                 , \"bj\"   , nullptr    , T_OBJECT ,  1, true ,  _ldc              ) \\\n+  def(_fast_aldc_w               , \"fast_aldc_w\"               , \"bJJ\"  , nullptr    , T_OBJECT ,  1, true ,  _ldc_w            ) \\\n+                                                                                                                                  \\\n+  def(_return_register_finalizer , \"return_register_finalizer\" , \"b\"     , nullptr    , T_VOID  ,  0, true , _return            ) \\\n+                                                                                                                                  \\\n+  def(_invokehandle              , \"invokehandle\"              , \"bJJ\"  , nullptr    , T_ILLEGAL, -1, true , _invokevirtual     ) \\\n+                                                                                                                                  \\\n+  def(_nofast_getfield           , \"nofast_getfield\"           , \"bJJ\"  , nullptr    , T_ILLEGAL,  0, true ,  _getfield         ) \\\n+  def(_nofast_putfield           , \"nofast_putfield\"           , \"bJJ\"  , nullptr    , T_ILLEGAL, -2, true , _putfield          ) \\\n+  def(_nofast_aload_0            , \"nofast_aload_0\"            , \"b\"    , nullptr    , T_OBJECT ,  1, true , _aload_0           ) \\\n+  def(_nofast_iload              , \"nofast_iload\"              , \"bi\"   , nullptr    , T_INT    ,  1, false, _iload             ) \\\n+                                                                                                                                  \\\n+  def(_shouldnotreachhere        , \"_shouldnotreachhere\"       , \"b\"    , nullptr    , T_VOID   ,  0, false, _shouldnotreachhere)\n+\n+#define BYTECODES_DO(def)                                                                                  \\\n+  def(_nop             , \"nop\"             , \"b\"    , nullptr    , T_VOID   ,  0, false, _nop            ) \\\n+  def(_aconst_null     , \"aconst_null\"     , \"b\"    , nullptr    , T_OBJECT ,  1, false, _aconst_null    ) \\\n+  def(_iconst_m1       , \"iconst_m1\"       , \"b\"    , nullptr    , T_INT    ,  1, false, _iconst_m1      ) \\\n+  def(_iconst_0        , \"iconst_0\"        , \"b\"    , nullptr    , T_INT    ,  1, false, _iconst_0       ) \\\n+  def(_iconst_1        , \"iconst_1\"        , \"b\"    , nullptr    , T_INT    ,  1, false, _iconst_1       ) \\\n+  def(_iconst_2        , \"iconst_2\"        , \"b\"    , nullptr    , T_INT    ,  1, false, _iconst_2       ) \\\n+  def(_iconst_3        , \"iconst_3\"        , \"b\"    , nullptr    , T_INT    ,  1, false, _iconst_3       ) \\\n+  def(_iconst_4        , \"iconst_4\"        , \"b\"    , nullptr    , T_INT    ,  1, false, _iconst_4       ) \\\n+  def(_iconst_5        , \"iconst_5\"        , \"b\"    , nullptr    , T_INT    ,  1, false, _iconst_5       ) \\\n+  def(_lconst_0        , \"lconst_0\"        , \"b\"    , nullptr    , T_LONG   ,  2, false, _lconst_0       ) \\\n+  def(_lconst_1        , \"lconst_1\"        , \"b\"    , nullptr    , T_LONG   ,  2, false, _lconst_1       ) \\\n+  def(_fconst_0        , \"fconst_0\"        , \"b\"    , nullptr    , T_FLOAT  ,  1, false, _fconst_0       ) \\\n+  def(_fconst_1        , \"fconst_1\"        , \"b\"    , nullptr    , T_FLOAT  ,  1, false, _fconst_1       ) \\\n+  def(_fconst_2        , \"fconst_2\"        , \"b\"    , nullptr    , T_FLOAT  ,  1, false, _fconst_2       ) \\\n+  def(_dconst_0        , \"dconst_0\"        , \"b\"    , nullptr    , T_DOUBLE ,  2, false, _dconst_0       ) \\\n+  def(_dconst_1        , \"dconst_1\"        , \"b\"    , nullptr    , T_DOUBLE ,  2, false, _dconst_1       ) \\\n+  def(_bipush          , \"bipush\"          , \"bc\"   , nullptr    , T_INT    ,  1, false, _bipush         ) \\\n+  def(_sipush          , \"sipush\"          , \"bcc\"  , nullptr    , T_INT    ,  1, false, _sipush         ) \\\n+  def(_ldc             , \"ldc\"             , \"bk\"   , nullptr    , T_ILLEGAL,  1, true , _ldc            ) \\\n+  def(_ldc_w           , \"ldc_w\"           , \"bkk\"  , nullptr    , T_ILLEGAL,  1, true , _ldc_w          ) \\\n+  def(_ldc2_w          , \"ldc2_w\"          , \"bkk\"  , nullptr    , T_ILLEGAL,  2, true , _ldc2_w         ) \\\n+  def(_iload           , \"iload\"           , \"bi\"   , \"wbii\"     , T_INT    ,  1, false, _iload          ) \\\n+  def(_lload           , \"lload\"           , \"bi\"   , \"wbii\"     , T_LONG   ,  2, false, _lload          ) \\\n+  def(_fload           , \"fload\"           , \"bi\"   , \"wbii\"     , T_FLOAT  ,  1, false, _fload          ) \\\n+  def(_dload           , \"dload\"           , \"bi\"   , \"wbii\"     , T_DOUBLE ,  2, false, _dload          ) \\\n+  def(_aload           , \"aload\"           , \"bi\"   , \"wbii\"     , T_OBJECT ,  1, false, _aload          ) \\\n+  def(_iload_0         , \"iload_0\"         , \"b\"    , nullptr    , T_INT    ,  1, false, _iload_0        ) \\\n+  def(_iload_1         , \"iload_1\"         , \"b\"    , nullptr    , T_INT    ,  1, false, _iload_1        ) \\\n+  def(_iload_2         , \"iload_2\"         , \"b\"    , nullptr    , T_INT    ,  1, false, _iload_2        ) \\\n+  def(_iload_3         , \"iload_3\"         , \"b\"    , nullptr    , T_INT    ,  1, false, _iload_3        ) \\\n+  def(_lload_0         , \"lload_0\"         , \"b\"    , nullptr    , T_LONG   ,  2, false, _lload_0        ) \\\n+  def(_lload_1         , \"lload_1\"         , \"b\"    , nullptr    , T_LONG   ,  2, false, _lload_1        ) \\\n+  def(_lload_2         , \"lload_2\"         , \"b\"    , nullptr    , T_LONG   ,  2, false, _lload_2        ) \\\n+  def(_lload_3         , \"lload_3\"         , \"b\"    , nullptr    , T_LONG   ,  2, false, _lload_3        ) \\\n+  def(_fload_0         , \"fload_0\"         , \"b\"    , nullptr    , T_FLOAT  ,  1, false, _fload_0        ) \\\n+  def(_fload_1         , \"fload_1\"         , \"b\"    , nullptr    , T_FLOAT  ,  1, false, _fload_1        ) \\\n+  def(_fload_2         , \"fload_2\"         , \"b\"    , nullptr    , T_FLOAT  ,  1, false, _fload_2        ) \\\n+  def(_fload_3         , \"fload_3\"         , \"b\"    , nullptr    , T_FLOAT  ,  1, false, _fload_3        ) \\\n+  def(_dload_0         , \"dload_0\"         , \"b\"    , nullptr    , T_DOUBLE ,  2, false, _dload_0        ) \\\n+  def(_dload_1         , \"dload_1\"         , \"b\"    , nullptr    , T_DOUBLE ,  2, false, _dload_1        ) \\\n+  def(_dload_2         , \"dload_2\"         , \"b\"    , nullptr    , T_DOUBLE ,  2, false, _dload_2        ) \\\n+  def(_dload_3         , \"dload_3\"         , \"b\"    , nullptr    , T_DOUBLE ,  2, false, _dload_3        ) \\\n+  def(_aload_0         , \"aload_0\"         , \"b\"    , nullptr    , T_OBJECT ,  1, true , _aload_0        ) \\\n+  def(_aload_1         , \"aload_1\"         , \"b\"    , nullptr    , T_OBJECT ,  1, false, _aload_1        ) \\\n+  def(_aload_2         , \"aload_2\"         , \"b\"    , nullptr    , T_OBJECT ,  1, false, _aload_2        ) \\\n+  def(_aload_3         , \"aload_3\"         , \"b\"    , nullptr    , T_OBJECT ,  1, false, _aload_3        ) \\\n+  def(_iaload          , \"iaload\"          , \"b\"    , nullptr    , T_INT    , -1, true , _iaload         ) \\\n+  def(_laload          , \"laload\"          , \"b\"    , nullptr    , T_LONG   ,  0, true , _laload         ) \\\n+  def(_faload          , \"faload\"          , \"b\"    , nullptr    , T_FLOAT  , -1, true , _faload         ) \\\n+  def(_daload          , \"daload\"          , \"b\"    , nullptr    , T_DOUBLE ,  0, true , _daload         ) \\\n+  def(_aaload          , \"aaload\"          , \"b\"    , nullptr    , T_OBJECT , -1, true , _aaload         ) \\\n+  def(_baload          , \"baload\"          , \"b\"    , nullptr    , T_INT    , -1, true , _baload         ) \\\n+  def(_caload          , \"caload\"          , \"b\"    , nullptr    , T_INT    , -1, true , _caload         ) \\\n+  def(_saload          , \"saload\"          , \"b\"    , nullptr    , T_INT    , -1, true , _saload         ) \\\n+  def(_istore          , \"istore\"          , \"bi\"   , \"wbii\"     , T_VOID   , -1, false, _istore         ) \\\n+  def(_lstore          , \"lstore\"          , \"bi\"   , \"wbii\"     , T_VOID   , -2, false, _lstore         ) \\\n+  def(_fstore          , \"fstore\"          , \"bi\"   , \"wbii\"     , T_VOID   , -1, false, _fstore         ) \\\n+  def(_dstore          , \"dstore\"          , \"bi\"   , \"wbii\"     , T_VOID   , -2, false, _dstore         ) \\\n+  def(_astore          , \"astore\"          , \"bi\"   , \"wbii\"     , T_VOID   , -1, false, _astore         ) \\\n+  def(_istore_0        , \"istore_0\"        , \"b\"    , nullptr    , T_VOID   , -1, false, _istore_0       ) \\\n+  def(_istore_1        , \"istore_1\"        , \"b\"    , nullptr    , T_VOID   , -1, false, _istore_1       ) \\\n+  def(_istore_2        , \"istore_2\"        , \"b\"    , nullptr    , T_VOID   , -1, false, _istore_2       ) \\\n+  def(_istore_3        , \"istore_3\"        , \"b\"    , nullptr    , T_VOID   , -1, false, _istore_3       ) \\\n+  def(_lstore_0        , \"lstore_0\"        , \"b\"    , nullptr    , T_VOID   , -2, false, _lstore_0       ) \\\n+  def(_lstore_1        , \"lstore_1\"        , \"b\"    , nullptr    , T_VOID   , -2, false, _lstore_1       ) \\\n+  def(_lstore_2        , \"lstore_2\"        , \"b\"    , nullptr    , T_VOID   , -2, false, _lstore_2       ) \\\n+  def(_lstore_3        , \"lstore_3\"        , \"b\"    , nullptr    , T_VOID   , -2, false, _lstore_3       ) \\\n+  def(_fstore_0        , \"fstore_0\"        , \"b\"    , nullptr    , T_VOID   , -1, false, _fstore_0       ) \\\n+  def(_fstore_1        , \"fstore_1\"        , \"b\"    , nullptr    , T_VOID   , -1, false, _fstore_1       ) \\\n+  def(_fstore_2        , \"fstore_2\"        , \"b\"    , nullptr    , T_VOID   , -1, false, _fstore_2       ) \\\n+  def(_fstore_3        , \"fstore_3\"        , \"b\"    , nullptr    , T_VOID   , -1, false, _fstore_3       ) \\\n+  def(_dstore_0        , \"dstore_0\"        , \"b\"    , nullptr    , T_VOID   , -2, false, _dstore_0       ) \\\n+  def(_dstore_1        , \"dstore_1\"        , \"b\"    , nullptr    , T_VOID   , -2, false, _dstore_1       ) \\\n+  def(_dstore_2        , \"dstore_2\"        , \"b\"    , nullptr    , T_VOID   , -2, false, _dstore_2       ) \\\n+  def(_dstore_3        , \"dstore_3\"        , \"b\"    , nullptr    , T_VOID   , -2, false, _dstore_3       ) \\\n+  def(_astore_0        , \"astore_0\"        , \"b\"    , nullptr    , T_VOID   , -1, false, _astore_0       ) \\\n+  def(_astore_1        , \"astore_1\"        , \"b\"    , nullptr    , T_VOID   , -1, false, _astore_1       ) \\\n+  def(_astore_2        , \"astore_2\"        , \"b\"    , nullptr    , T_VOID   , -1, false, _astore_2       ) \\\n+  def(_astore_3        , \"astore_3\"        , \"b\"    , nullptr    , T_VOID   , -1, false, _astore_3       ) \\\n+  def(_iastore         , \"iastore\"         , \"b\"    , nullptr    , T_VOID   , -3, true , _iastore        ) \\\n+  def(_lastore         , \"lastore\"         , \"b\"    , nullptr    , T_VOID   , -4, true , _lastore        ) \\\n+  def(_fastore         , \"fastore\"         , \"b\"    , nullptr    , T_VOID   , -3, true , _fastore        ) \\\n+  def(_dastore         , \"dastore\"         , \"b\"    , nullptr    , T_VOID   , -4, true , _dastore        ) \\\n+  def(_aastore         , \"aastore\"         , \"b\"    , nullptr    , T_VOID   , -3, true , _aastore        ) \\\n+  def(_bastore         , \"bastore\"         , \"b\"    , nullptr    , T_VOID   , -3, true , _bastore        ) \\\n+  def(_castore         , \"castore\"         , \"b\"    , nullptr    , T_VOID   , -3, true , _castore        ) \\\n+  def(_sastore         , \"sastore\"         , \"b\"    , nullptr    , T_VOID   , -3, true , _sastore        ) \\\n+  def(_pop             , \"pop\"             , \"b\"    , nullptr    , T_VOID   , -1, false, _pop            ) \\\n+  def(_pop2            , \"pop2\"            , \"b\"    , nullptr    , T_VOID   , -2, false, _pop2           ) \\\n+  def(_dup             , \"dup\"             , \"b\"    , nullptr    , T_VOID   ,  1, false, _dup            ) \\\n+  def(_dup_x1          , \"dup_x1\"          , \"b\"    , nullptr    , T_VOID   ,  1, false, _dup_x1         ) \\\n+  def(_dup_x2          , \"dup_x2\"          , \"b\"    , nullptr    , T_VOID   ,  1, false, _dup_x2         ) \\\n+  def(_dup2            , \"dup2\"            , \"b\"    , nullptr    , T_VOID   ,  2, false, _dup2           ) \\\n+  def(_dup2_x1         , \"dup2_x1\"         , \"b\"    , nullptr    , T_VOID   ,  2, false, _dup2_x1        ) \\\n+  def(_dup2_x2         , \"dup2_x2\"         , \"b\"    , nullptr    , T_VOID   ,  2, false, _dup2_x2        ) \\\n+  def(_swap            , \"swap\"            , \"b\"    , nullptr    , T_VOID   ,  0, false, _swap           ) \\\n+  def(_iadd            , \"iadd\"            , \"b\"    , nullptr    , T_INT    , -1, false, _iadd           ) \\\n+  def(_ladd            , \"ladd\"            , \"b\"    , nullptr    , T_LONG   , -2, false, _ladd           ) \\\n+  def(_fadd            , \"fadd\"            , \"b\"    , nullptr    , T_FLOAT  , -1, false, _fadd           ) \\\n+  def(_dadd            , \"dadd\"            , \"b\"    , nullptr    , T_DOUBLE , -2, false, _dadd           ) \\\n+  def(_isub            , \"isub\"            , \"b\"    , nullptr    , T_INT    , -1, false, _isub           ) \\\n+  def(_lsub            , \"lsub\"            , \"b\"    , nullptr    , T_LONG   , -2, false, _lsub           ) \\\n+  def(_fsub            , \"fsub\"            , \"b\"    , nullptr    , T_FLOAT  , -1, false, _fsub           ) \\\n+  def(_dsub            , \"dsub\"            , \"b\"    , nullptr    , T_DOUBLE , -2, false, _dsub           ) \\\n+  def(_imul            , \"imul\"            , \"b\"    , nullptr    , T_INT    , -1, false, _imul           ) \\\n+  def(_lmul            , \"lmul\"            , \"b\"    , nullptr    , T_LONG   , -2, false, _lmul           ) \\\n+  def(_fmul            , \"fmul\"            , \"b\"    , nullptr    , T_FLOAT  , -1, false, _fmul           ) \\\n+  def(_dmul            , \"dmul\"            , \"b\"    , nullptr    , T_DOUBLE , -2, false, _dmul           ) \\\n+  def(_idiv            , \"idiv\"            , \"b\"    , nullptr    , T_INT    , -1, true , _idiv           ) \\\n+  def(_ldiv            , \"ldiv\"            , \"b\"    , nullptr    , T_LONG   , -2, true , _ldiv           ) \\\n+  def(_fdiv            , \"fdiv\"            , \"b\"    , nullptr    , T_FLOAT  , -1, false, _fdiv           ) \\\n+  def(_ddiv            , \"ddiv\"            , \"b\"    , nullptr    , T_DOUBLE , -2, false, _ddiv           ) \\\n+  def(_irem            , \"irem\"            , \"b\"    , nullptr    , T_INT    , -1, true , _irem           ) \\\n+  def(_lrem            , \"lrem\"            , \"b\"    , nullptr    , T_LONG   , -2, true , _lrem           ) \\\n+  def(_frem            , \"frem\"            , \"b\"    , nullptr    , T_FLOAT  , -1, false, _frem           ) \\\n+  def(_drem            , \"drem\"            , \"b\"    , nullptr    , T_DOUBLE , -2, false, _drem           ) \\\n+  def(_ineg            , \"ineg\"            , \"b\"    , nullptr    , T_INT    ,  0, false, _ineg           ) \\\n+  def(_lneg            , \"lneg\"            , \"b\"    , nullptr    , T_LONG   ,  0, false, _lneg           ) \\\n+  def(_fneg            , \"fneg\"            , \"b\"    , nullptr    , T_FLOAT  ,  0, false, _fneg           ) \\\n+  def(_dneg            , \"dneg\"            , \"b\"    , nullptr    , T_DOUBLE ,  0, false, _dneg           ) \\\n+  def(_ishl            , \"ishl\"            , \"b\"    , nullptr    , T_INT    , -1, false, _ishl           ) \\\n+  def(_lshl            , \"lshl\"            , \"b\"    , nullptr    , T_LONG   , -1, false, _lshl           ) \\\n+  def(_ishr            , \"ishr\"            , \"b\"    , nullptr    , T_INT    , -1, false, _ishr           ) \\\n+  def(_lshr            , \"lshr\"            , \"b\"    , nullptr    , T_LONG   , -1, false, _lshr           ) \\\n+  def(_iushr           , \"iushr\"           , \"b\"    , nullptr    , T_INT    , -1, false, _iushr          ) \\\n+  def(_lushr           , \"lushr\"           , \"b\"    , nullptr    , T_LONG   , -1, false, _lushr          ) \\\n+  def(_iand            , \"iand\"            , \"b\"    , nullptr    , T_INT    , -1, false, _iand           ) \\\n+  def(_land            , \"land\"            , \"b\"    , nullptr    , T_LONG   , -2, false, _land           ) \\\n+  def(_ior             , \"ior\"             , \"b\"    , nullptr    , T_INT    , -1, false, _ior            ) \\\n+  def(_lor             , \"lor\"             , \"b\"    , nullptr    , T_LONG   , -2, false, _lor            ) \\\n+  def(_ixor            , \"ixor\"            , \"b\"    , nullptr    , T_INT    , -1, false, _ixor           ) \\\n+  def(_lxor            , \"lxor\"            , \"b\"    , nullptr    , T_LONG   , -2, false, _lxor           ) \\\n+  def(_iinc            , \"iinc\"            , \"bic\"  , \"wbiicc\",    T_VOID   ,  0, false, _iinc           ) \\\n+  def(_i2l             , \"i2l\"             , \"b\"    , nullptr    , T_LONG   ,  1, false, _i2l            ) \\\n+  def(_i2f             , \"i2f\"             , \"b\"    , nullptr    , T_FLOAT  ,  0, false, _i2f            ) \\\n+  def(_i2d             , \"i2d\"             , \"b\"    , nullptr    , T_DOUBLE ,  1, false, _i2d            ) \\\n+  def(_l2i             , \"l2i\"             , \"b\"    , nullptr    , T_INT    , -1, false, _l2i            ) \\\n+  def(_l2f             , \"l2f\"             , \"b\"    , nullptr    , T_FLOAT  , -1, false, _l2f            ) \\\n+  def(_l2d             , \"l2d\"             , \"b\"    , nullptr    , T_DOUBLE ,  0, false, _l2d            ) \\\n+  def(_f2i             , \"f2i\"             , \"b\"    , nullptr    , T_INT    ,  0, false, _f2i            ) \\\n+  def(_f2l             , \"f2l\"             , \"b\"    , nullptr    , T_LONG   ,  1, false, _f2l            ) \\\n+  def(_f2d             , \"f2d\"             , \"b\"    , nullptr    , T_DOUBLE ,  1, false, _f2d            ) \\\n+  def(_d2i             , \"d2i\"             , \"b\"    , nullptr    , T_INT    , -1, false, _d2i            ) \\\n+  def(_d2l             , \"d2l\"             , \"b\"    , nullptr    , T_LONG   ,  0, false, _d2l            ) \\\n+  def(_d2f             , \"d2f\"             , \"b\"    , nullptr    , T_FLOAT  , -1, false, _d2f            ) \\\n+  def(_i2b             , \"i2b\"             , \"b\"    , nullptr    , T_BYTE   ,  0, false, _i2b            ) \\\n+  def(_i2c             , \"i2c\"             , \"b\"    , nullptr    , T_CHAR   ,  0, false, _i2c            ) \\\n+  def(_i2s             , \"i2s\"             , \"b\"    , nullptr    , T_SHORT  ,  0, false, _i2s            ) \\\n+  def(_lcmp            , \"lcmp\"            , \"b\"    , nullptr    , T_VOID   , -3, false, _lcmp           ) \\\n+  def(_fcmpl           , \"fcmpl\"           , \"b\"    , nullptr    , T_VOID   , -1, false, _fcmpl          ) \\\n+  def(_fcmpg           , \"fcmpg\"           , \"b\"    , nullptr    , T_VOID   , -1, false, _fcmpg          ) \\\n+  def(_dcmpl           , \"dcmpl\"           , \"b\"    , nullptr    , T_VOID   , -3, false, _dcmpl          ) \\\n+  def(_dcmpg           , \"dcmpg\"           , \"b\"    , nullptr    , T_VOID   , -3, false, _dcmpg          ) \\\n+  def(_ifeq            , \"ifeq\"            , \"boo\"  , nullptr    , T_VOID   , -1, false, _ifeq           ) \\\n+  def(_ifne            , \"ifne\"            , \"boo\"  , nullptr    , T_VOID   , -1, false, _ifne           ) \\\n+  def(_iflt            , \"iflt\"            , \"boo\"  , nullptr    , T_VOID   , -1, false, _iflt           ) \\\n+  def(_ifge            , \"ifge\"            , \"boo\"  , nullptr    , T_VOID   , -1, false, _ifge           ) \\\n+  def(_ifgt            , \"ifgt\"            , \"boo\"  , nullptr    , T_VOID   , -1, false, _ifgt           ) \\\n+  def(_ifle            , \"ifle\"            , \"boo\"  , nullptr    , T_VOID   , -1, false, _ifle           ) \\\n+  def(_if_icmpeq       , \"if_icmpeq\"       , \"boo\"  , nullptr    , T_VOID   , -2, false, _if_icmpeq      ) \\\n+  def(_if_icmpne       , \"if_icmpne\"       , \"boo\"  , nullptr    , T_VOID   , -2, false, _if_icmpne      ) \\\n+  def(_if_icmplt       , \"if_icmplt\"       , \"boo\"  , nullptr    , T_VOID   , -2, false, _if_icmplt      ) \\\n+  def(_if_icmpge       , \"if_icmpge\"       , \"boo\"  , nullptr    , T_VOID   , -2, false, _if_icmpge      ) \\\n+  def(_if_icmpgt       , \"if_icmpgt\"       , \"boo\"  , nullptr    , T_VOID   , -2, false, _if_icmpgt      ) \\\n+  def(_if_icmple       , \"if_icmple\"       , \"boo\"  , nullptr    , T_VOID   , -2, false, _if_icmple      ) \\\n+  def(_if_acmpeq       , \"if_acmpeq\"       , \"boo\"  , nullptr    , T_VOID   , -2, false, _if_acmpeq      ) \\\n+  def(_if_acmpne       , \"if_acmpne\"       , \"boo\"  , nullptr    , T_VOID   , -2, false, _if_acmpne      ) \\\n+  def(_goto            , \"goto\"            , \"boo\"  , nullptr    , T_VOID   ,  0, false, _goto           ) \\\n+  def(_jsr             , \"jsr\"             , \"boo\"  , nullptr    , T_INT    ,  0, false, _jsr            ) \\\n+  def(_ret             , \"ret\"             , \"bi\"   , \"wbii\"     , T_VOID   ,  0, false, _ret            ) \\\n+  def(_tableswitch     , \"tableswitch\"     , \"\"     , nullptr    , T_VOID   , -1, false, _tableswitch    ) \\\n+  def(_lookupswitch    , \"lookupswitch\"    , \"\"     , nullptr    , T_VOID   , -1, false, _lookupswitch   ) \\\n+  def(_ireturn         , \"ireturn\"         , \"b\"    , nullptr    , T_INT    , -1, true , _ireturn        ) \\\n+  def(_lreturn         , \"lreturn\"         , \"b\"    , nullptr    , T_LONG   , -2, true , _lreturn        ) \\\n+  def(_freturn         , \"freturn\"         , \"b\"    , nullptr    , T_FLOAT  , -1, true , _freturn        ) \\\n+  def(_dreturn         , \"dreturn\"         , \"b\"    , nullptr    , T_DOUBLE , -2, true , _dreturn        ) \\\n+  def(_areturn         , \"areturn\"         , \"b\"    , nullptr    , T_OBJECT , -1, true , _areturn        ) \\\n+  def(_return          , \"return\"          , \"b\"    , nullptr    , T_VOID   ,  0, true , _return         ) \\\n+  def(_getstatic       , \"getstatic\"       , \"bJJ\"  , nullptr    , T_ILLEGAL,  1, true , _getstatic      ) \\\n+  def(_putstatic       , \"putstatic\"       , \"bJJ\"  , nullptr    , T_ILLEGAL, -1, true , _putstatic      ) \\\n+  def(_getfield        , \"getfield\"        , \"bJJ\"  , nullptr    , T_ILLEGAL,  0, true , _getfield       ) \\\n+  def(_putfield        , \"putfield\"        , \"bJJ\"  , nullptr    , T_ILLEGAL, -2, true , _putfield       ) \\\n+  def(_invokevirtual   , \"invokevirtual\"   , \"bJJ\"  , nullptr    , T_ILLEGAL, -1, true , _invokevirtual  ) \\\n+  def(_invokespecial   , \"invokespecial\"   , \"bJJ\"  , nullptr    , T_ILLEGAL, -1, true , _invokespecial  ) \\\n+  def(_invokestatic    , \"invokestatic\"    , \"bJJ\"  , nullptr    , T_ILLEGAL,  0, true , _invokestatic   ) \\\n+  def(_invokeinterface , \"invokeinterface\" , \"bJJ__\", nullptr    , T_ILLEGAL, -1, true , _invokeinterface) \\\n+  def(_invokedynamic   , \"invokedynamic\"   , \"bJJJJ\", nullptr    , T_ILLEGAL,  0, true , _invokedynamic  ) \\\n+  def(_new             , \"new\"             , \"bkk\"  , nullptr    , T_OBJECT ,  1, true , _new            ) \\\n+  def(_newarray        , \"newarray\"        , \"bc\"   , nullptr    , T_OBJECT ,  0, true , _newarray       ) \\\n+  def(_anewarray       , \"anewarray\"       , \"bkk\"  , nullptr    , T_OBJECT ,  0, true , _anewarray      ) \\\n+  def(_arraylength     , \"arraylength\"     , \"b\"    , nullptr    , T_INT    ,  0, true , _arraylength    ) \\\n+  def(_athrow          , \"athrow\"          , \"b\"    , nullptr    , T_VOID   , -1, true , _athrow         ) \\\n+  def(_checkcast       , \"checkcast\"       , \"bkk\"  , nullptr    , T_OBJECT ,  0, true , _checkcast      ) \\\n+  def(_instanceof      , \"instanceof\"      , \"bkk\"  , nullptr    , T_INT    ,  0, true , _instanceof     ) \\\n+  def(_monitorenter    , \"monitorenter\"    , \"b\"    , nullptr    , T_VOID   , -1, true , _monitorenter   ) \\\n+  def(_monitorexit     , \"monitorexit\"     , \"b\"    , nullptr    , T_VOID   , -1, true , _monitorexit    ) \\\n+  def(_wide            , \"wide\"            , \"\"     , nullptr    , T_VOID   ,  0, false, _wide           ) \\\n+  def(_multianewarray  , \"multianewarray\"  , \"bkkc\" , nullptr    , T_OBJECT ,  1, true , _multianewarray ) \\\n+  def(_ifnull          , \"ifnull\"          , \"boo\"  , nullptr    , T_VOID   , -1, false, _ifnull         ) \\\n+  def(_ifnonnull       , \"ifnonnull\"       , \"boo\"  , nullptr    , T_VOID   , -1, false, _ifnonnull      ) \\\n+  def(_goto_w          , \"goto_w\"          , \"boooo\", nullptr    , T_VOID   ,  0, false, _goto_w         ) \\\n+  def(_jsr_w           , \"jsr_w\"           , \"boooo\", nullptr    , T_INT    ,  0, false, _jsr_w          ) \\\n+  def(_breakpoint      , \"breakpoint\"      , \"\"     , nullptr    , T_VOID   ,  0, true , _breakpoint     ) \\\n+  JVM_BYTECODES_DO(def)\n+\n+bool Bytecodes::_is_initialized = false;\n+\n+const char* const Bytecodes::_name[Bytecodes::number_of_codes] = {\n+#define BYTECODE_NAME(code, name, format, wide_format, result_type, depth, can_trap, java_code) name,\n+  BYTECODES_DO(BYTECODE_NAME)\n+#undef BYTECODE_NAME\n+};\n+\n+const BasicType Bytecodes::_result_type[Bytecodes::number_of_codes] = {\n+#define BYTECODE_RESULT_TYPE(code, name, format, wide_format, result_type, depth, can_trap, java_code) result_type,\n+  BYTECODES_DO(BYTECODE_RESULT_TYPE)\n+#undef BYTECODE_RESULT_TYPE\n+};\n+\n+const s_char Bytecodes::_depth[Bytecodes::number_of_codes] = {\n+#define BYTECODE_DEPTH(code, name, format, wide_format, result_type, depth, can_trap, java_code) depth,\n+  BYTECODES_DO(BYTECODE_DEPTH)\n+#undef BYTECODE_DEPTH\n+};\n+\n+\/\/ Helper for determining the size (a.k.a. length) of a string literal.\n+struct StringLiteralSize {\n+  template <size_t N>\n+  static constexpr size_t invoke(const char (&)[N]) {\n+    static_assert(N > 0, \"N must be greater than 0\");\n+    \/\/ The size is N - 1, as C strings have an implicit NUL at the end. So \"foo\" will result in N\n+    \/\/ being 4, but we actually want 3.\n+    return N - 1;\n+  }\n+\n+  static constexpr size_t invoke(std::nullptr_t) {\n+    return 0;\n+  }\n+};\n+\n+#define STRING_SIZE(string) StringLiteralSize::invoke(string)\n+\n+const u_char Bytecodes::_lengths[Bytecodes::number_of_codes] = {\n+#define BYTECODE_LENGTHS(code, name, format, wide_format, result_type, depth, can_trap, java_code) static_cast<u_char>((STRING_SIZE(wide_format) << 4) | (STRING_SIZE(format) & 0xf)),\n+  BYTECODES_DO(BYTECODE_LENGTHS)\n+#undef BYTECODE_LENGTHS\n+};\n+\n+const Bytecodes::Code Bytecodes::_java_code[Bytecodes::number_of_codes] = {\n+#define BYTECODE_JAVA_CODE(code, name, format, wide_format, result_type, depth, can_trap, java_code) Bytecodes::java_code,\n+  BYTECODES_DO(BYTECODE_JAVA_CODE)\n+#undef BYTECODE_JAVA_CODE\n+};\n+\n+jchar Bytecodes::_flags[(1<<BitsPerByte)*2];\n@@ -140,8 +436,1 @@\n-\n-\n-void Bytecodes::def(Code code, const char* name, const char* format, const char* wide_format, BasicType result_type, int depth, bool can_trap) {\n-  def(code, name, format, wide_format, result_type, depth, can_trap, code);\n-}\n-\n-\n-void Bytecodes::def(Code code, const char* name, const char* format, const char* wide_format, BasicType result_type, int depth, bool can_trap, Code java_code) {\n+void Bytecodes::def_flags(Code code, const char* format, const char* wide_format, bool can_trap, Code java_code) {\n@@ -149,0 +438,1 @@\n+#ifdef ASSERT\n@@ -151,5 +441,1 @@\n-  _name          [code] = name;\n-  _result_type   [code] = result_type;\n-  _depth         [code] = depth;\n-  _lengths       [code] = (wlen << 4) | (len & 0xF);\n-  _java_code     [code] = java_code;\n+#endif\n@@ -163,1 +449,1 @@\n-  assert(length_for(code)      == len, \"\");\n+  assert(length_for(code)      == len,  \"\");\n@@ -260,1 +546,0 @@\n-  assert(number_of_codes <= 256, \"too many bytecodes\");\n@@ -266,4 +551,1 @@\n-  \/\/ Note 1: nullptr for the format string means the bytecode doesn't exist\n-  \/\/         in that form.\n-  \/\/\n-  \/\/ Note 2: The result type is T_ILLEGAL for bytecodes where the top of stack\n+  \/\/ Note 1: The result type is T_ILLEGAL for bytecodes where the top of stack\n@@ -272,257 +554,10 @@\n-  \/\/  Java bytecodes\n-  \/\/  bytecode               bytecode name           format   wide f.   result tp  stk traps\n-  def(_nop                 , \"nop\"                 , \"b\"    , nullptr    , T_VOID   ,  0, false);\n-  def(_aconst_null         , \"aconst_null\"         , \"b\"    , nullptr    , T_OBJECT ,  1, false);\n-  def(_iconst_m1           , \"iconst_m1\"           , \"b\"    , nullptr    , T_INT    ,  1, false);\n-  def(_iconst_0            , \"iconst_0\"            , \"b\"    , nullptr    , T_INT    ,  1, false);\n-  def(_iconst_1            , \"iconst_1\"            , \"b\"    , nullptr    , T_INT    ,  1, false);\n-  def(_iconst_2            , \"iconst_2\"            , \"b\"    , nullptr    , T_INT    ,  1, false);\n-  def(_iconst_3            , \"iconst_3\"            , \"b\"    , nullptr    , T_INT    ,  1, false);\n-  def(_iconst_4            , \"iconst_4\"            , \"b\"    , nullptr    , T_INT    ,  1, false);\n-  def(_iconst_5            , \"iconst_5\"            , \"b\"    , nullptr    , T_INT    ,  1, false);\n-  def(_lconst_0            , \"lconst_0\"            , \"b\"    , nullptr    , T_LONG   ,  2, false);\n-  def(_lconst_1            , \"lconst_1\"            , \"b\"    , nullptr    , T_LONG   ,  2, false);\n-  def(_fconst_0            , \"fconst_0\"            , \"b\"    , nullptr    , T_FLOAT  ,  1, false);\n-  def(_fconst_1            , \"fconst_1\"            , \"b\"    , nullptr    , T_FLOAT  ,  1, false);\n-  def(_fconst_2            , \"fconst_2\"            , \"b\"    , nullptr    , T_FLOAT  ,  1, false);\n-  def(_dconst_0            , \"dconst_0\"            , \"b\"    , nullptr    , T_DOUBLE ,  2, false);\n-  def(_dconst_1            , \"dconst_1\"            , \"b\"    , nullptr    , T_DOUBLE ,  2, false);\n-  def(_bipush              , \"bipush\"              , \"bc\"   , nullptr    , T_INT    ,  1, false);\n-  def(_sipush              , \"sipush\"              , \"bcc\"  , nullptr    , T_INT    ,  1, false);\n-  def(_ldc                 , \"ldc\"                 , \"bk\"   , nullptr    , T_ILLEGAL,  1, true );\n-  def(_ldc_w               , \"ldc_w\"               , \"bkk\"  , nullptr    , T_ILLEGAL,  1, true );\n-  def(_ldc2_w              , \"ldc2_w\"              , \"bkk\"  , nullptr    , T_ILLEGAL,  2, true );\n-  def(_iload               , \"iload\"               , \"bi\"   , \"wbii\"     , T_INT    ,  1, false);\n-  def(_lload               , \"lload\"               , \"bi\"   , \"wbii\"     , T_LONG   ,  2, false);\n-  def(_fload               , \"fload\"               , \"bi\"   , \"wbii\"     , T_FLOAT  ,  1, false);\n-  def(_dload               , \"dload\"               , \"bi\"   , \"wbii\"     , T_DOUBLE ,  2, false);\n-  def(_aload               , \"aload\"               , \"bi\"   , \"wbii\"     , T_OBJECT ,  1, false);\n-  def(_iload_0             , \"iload_0\"             , \"b\"    , nullptr    , T_INT    ,  1, false);\n-  def(_iload_1             , \"iload_1\"             , \"b\"    , nullptr    , T_INT    ,  1, false);\n-  def(_iload_2             , \"iload_2\"             , \"b\"    , nullptr    , T_INT    ,  1, false);\n-  def(_iload_3             , \"iload_3\"             , \"b\"    , nullptr    , T_INT    ,  1, false);\n-  def(_lload_0             , \"lload_0\"             , \"b\"    , nullptr    , T_LONG   ,  2, false);\n-  def(_lload_1             , \"lload_1\"             , \"b\"    , nullptr    , T_LONG   ,  2, false);\n-  def(_lload_2             , \"lload_2\"             , \"b\"    , nullptr    , T_LONG   ,  2, false);\n-  def(_lload_3             , \"lload_3\"             , \"b\"    , nullptr    , T_LONG   ,  2, false);\n-  def(_fload_0             , \"fload_0\"             , \"b\"    , nullptr    , T_FLOAT  ,  1, false);\n-  def(_fload_1             , \"fload_1\"             , \"b\"    , nullptr    , T_FLOAT  ,  1, false);\n-  def(_fload_2             , \"fload_2\"             , \"b\"    , nullptr    , T_FLOAT  ,  1, false);\n-  def(_fload_3             , \"fload_3\"             , \"b\"    , nullptr    , T_FLOAT  ,  1, false);\n-  def(_dload_0             , \"dload_0\"             , \"b\"    , nullptr    , T_DOUBLE ,  2, false);\n-  def(_dload_1             , \"dload_1\"             , \"b\"    , nullptr    , T_DOUBLE ,  2, false);\n-  def(_dload_2             , \"dload_2\"             , \"b\"    , nullptr    , T_DOUBLE ,  2, false);\n-  def(_dload_3             , \"dload_3\"             , \"b\"    , nullptr    , T_DOUBLE ,  2, false);\n-  def(_aload_0             , \"aload_0\"             , \"b\"    , nullptr    , T_OBJECT ,  1, true ); \/\/ rewriting in interpreter\n-  def(_aload_1             , \"aload_1\"             , \"b\"    , nullptr    , T_OBJECT ,  1, false);\n-  def(_aload_2             , \"aload_2\"             , \"b\"    , nullptr    , T_OBJECT ,  1, false);\n-  def(_aload_3             , \"aload_3\"             , \"b\"    , nullptr    , T_OBJECT ,  1, false);\n-  def(_iaload              , \"iaload\"              , \"b\"    , nullptr    , T_INT    , -1, true );\n-  def(_laload              , \"laload\"              , \"b\"    , nullptr    , T_LONG   ,  0, true );\n-  def(_faload              , \"faload\"              , \"b\"    , nullptr    , T_FLOAT  , -1, true );\n-  def(_daload              , \"daload\"              , \"b\"    , nullptr    , T_DOUBLE ,  0, true );\n-  def(_aaload              , \"aaload\"              , \"b\"    , nullptr    , T_OBJECT , -1, true );\n-  def(_baload              , \"baload\"              , \"b\"    , nullptr    , T_INT    , -1, true );\n-  def(_caload              , \"caload\"              , \"b\"    , nullptr    , T_INT    , -1, true );\n-  def(_saload              , \"saload\"              , \"b\"    , nullptr    , T_INT    , -1, true );\n-  def(_istore              , \"istore\"              , \"bi\"   , \"wbii\"     , T_VOID   , -1, false);\n-  def(_lstore              , \"lstore\"              , \"bi\"   , \"wbii\"     , T_VOID   , -2, false);\n-  def(_fstore              , \"fstore\"              , \"bi\"   , \"wbii\"     , T_VOID   , -1, false);\n-  def(_dstore              , \"dstore\"              , \"bi\"   , \"wbii\"     , T_VOID   , -2, false);\n-  def(_astore              , \"astore\"              , \"bi\"   , \"wbii\"     , T_VOID   , -1, false);\n-  def(_istore_0            , \"istore_0\"            , \"b\"    , nullptr    , T_VOID   , -1, false);\n-  def(_istore_1            , \"istore_1\"            , \"b\"    , nullptr    , T_VOID   , -1, false);\n-  def(_istore_2            , \"istore_2\"            , \"b\"    , nullptr    , T_VOID   , -1, false);\n-  def(_istore_3            , \"istore_3\"            , \"b\"    , nullptr    , T_VOID   , -1, false);\n-  def(_lstore_0            , \"lstore_0\"            , \"b\"    , nullptr    , T_VOID   , -2, false);\n-  def(_lstore_1            , \"lstore_1\"            , \"b\"    , nullptr    , T_VOID   , -2, false);\n-  def(_lstore_2            , \"lstore_2\"            , \"b\"    , nullptr    , T_VOID   , -2, false);\n-  def(_lstore_3            , \"lstore_3\"            , \"b\"    , nullptr    , T_VOID   , -2, false);\n-  def(_fstore_0            , \"fstore_0\"            , \"b\"    , nullptr    , T_VOID   , -1, false);\n-  def(_fstore_1            , \"fstore_1\"            , \"b\"    , nullptr    , T_VOID   , -1, false);\n-  def(_fstore_2            , \"fstore_2\"            , \"b\"    , nullptr    , T_VOID   , -1, false);\n-  def(_fstore_3            , \"fstore_3\"            , \"b\"    , nullptr    , T_VOID   , -1, false);\n-  def(_dstore_0            , \"dstore_0\"            , \"b\"    , nullptr    , T_VOID   , -2, false);\n-  def(_dstore_1            , \"dstore_1\"            , \"b\"    , nullptr    , T_VOID   , -2, false);\n-  def(_dstore_2            , \"dstore_2\"            , \"b\"    , nullptr    , T_VOID   , -2, false);\n-  def(_dstore_3            , \"dstore_3\"            , \"b\"    , nullptr    , T_VOID   , -2, false);\n-  def(_astore_0            , \"astore_0\"            , \"b\"    , nullptr    , T_VOID   , -1, false);\n-  def(_astore_1            , \"astore_1\"            , \"b\"    , nullptr    , T_VOID   , -1, false);\n-  def(_astore_2            , \"astore_2\"            , \"b\"    , nullptr    , T_VOID   , -1, false);\n-  def(_astore_3            , \"astore_3\"            , \"b\"    , nullptr    , T_VOID   , -1, false);\n-  def(_iastore             , \"iastore\"             , \"b\"    , nullptr    , T_VOID   , -3, true );\n-  def(_lastore             , \"lastore\"             , \"b\"    , nullptr    , T_VOID   , -4, true );\n-  def(_fastore             , \"fastore\"             , \"b\"    , nullptr    , T_VOID   , -3, true );\n-  def(_dastore             , \"dastore\"             , \"b\"    , nullptr    , T_VOID   , -4, true );\n-  def(_aastore             , \"aastore\"             , \"b\"    , nullptr    , T_VOID   , -3, true );\n-  def(_bastore             , \"bastore\"             , \"b\"    , nullptr    , T_VOID   , -3, true );\n-  def(_castore             , \"castore\"             , \"b\"    , nullptr    , T_VOID   , -3, true );\n-  def(_sastore             , \"sastore\"             , \"b\"    , nullptr    , T_VOID   , -3, true );\n-  def(_pop                 , \"pop\"                 , \"b\"    , nullptr    , T_VOID   , -1, false);\n-  def(_pop2                , \"pop2\"                , \"b\"    , nullptr    , T_VOID   , -2, false);\n-  def(_dup                 , \"dup\"                 , \"b\"    , nullptr    , T_VOID   ,  1, false);\n-  def(_dup_x1              , \"dup_x1\"              , \"b\"    , nullptr    , T_VOID   ,  1, false);\n-  def(_dup_x2              , \"dup_x2\"              , \"b\"    , nullptr    , T_VOID   ,  1, false);\n-  def(_dup2                , \"dup2\"                , \"b\"    , nullptr    , T_VOID   ,  2, false);\n-  def(_dup2_x1             , \"dup2_x1\"             , \"b\"    , nullptr    , T_VOID   ,  2, false);\n-  def(_dup2_x2             , \"dup2_x2\"             , \"b\"    , nullptr    , T_VOID   ,  2, false);\n-  def(_swap                , \"swap\"                , \"b\"    , nullptr    , T_VOID   ,  0, false);\n-  def(_iadd                , \"iadd\"                , \"b\"    , nullptr    , T_INT    , -1, false);\n-  def(_ladd                , \"ladd\"                , \"b\"    , nullptr    , T_LONG   , -2, false);\n-  def(_fadd                , \"fadd\"                , \"b\"    , nullptr    , T_FLOAT  , -1, false);\n-  def(_dadd                , \"dadd\"                , \"b\"    , nullptr    , T_DOUBLE , -2, false);\n-  def(_isub                , \"isub\"                , \"b\"    , nullptr    , T_INT    , -1, false);\n-  def(_lsub                , \"lsub\"                , \"b\"    , nullptr    , T_LONG   , -2, false);\n-  def(_fsub                , \"fsub\"                , \"b\"    , nullptr    , T_FLOAT  , -1, false);\n-  def(_dsub                , \"dsub\"                , \"b\"    , nullptr    , T_DOUBLE , -2, false);\n-  def(_imul                , \"imul\"                , \"b\"    , nullptr    , T_INT    , -1, false);\n-  def(_lmul                , \"lmul\"                , \"b\"    , nullptr    , T_LONG   , -2, false);\n-  def(_fmul                , \"fmul\"                , \"b\"    , nullptr    , T_FLOAT  , -1, false);\n-  def(_dmul                , \"dmul\"                , \"b\"    , nullptr    , T_DOUBLE , -2, false);\n-  def(_idiv                , \"idiv\"                , \"b\"    , nullptr    , T_INT    , -1, true );\n-  def(_ldiv                , \"ldiv\"                , \"b\"    , nullptr    , T_LONG   , -2, true );\n-  def(_fdiv                , \"fdiv\"                , \"b\"    , nullptr    , T_FLOAT  , -1, false);\n-  def(_ddiv                , \"ddiv\"                , \"b\"    , nullptr    , T_DOUBLE , -2, false);\n-  def(_irem                , \"irem\"                , \"b\"    , nullptr    , T_INT    , -1, true );\n-  def(_lrem                , \"lrem\"                , \"b\"    , nullptr    , T_LONG   , -2, true );\n-  def(_frem                , \"frem\"                , \"b\"    , nullptr    , T_FLOAT  , -1, false);\n-  def(_drem                , \"drem\"                , \"b\"    , nullptr    , T_DOUBLE , -2, false);\n-  def(_ineg                , \"ineg\"                , \"b\"    , nullptr    , T_INT    ,  0, false);\n-  def(_lneg                , \"lneg\"                , \"b\"    , nullptr    , T_LONG   ,  0, false);\n-  def(_fneg                , \"fneg\"                , \"b\"    , nullptr    , T_FLOAT  ,  0, false);\n-  def(_dneg                , \"dneg\"                , \"b\"    , nullptr    , T_DOUBLE ,  0, false);\n-  def(_ishl                , \"ishl\"                , \"b\"    , nullptr    , T_INT    , -1, false);\n-  def(_lshl                , \"lshl\"                , \"b\"    , nullptr    , T_LONG   , -1, false);\n-  def(_ishr                , \"ishr\"                , \"b\"    , nullptr    , T_INT    , -1, false);\n-  def(_lshr                , \"lshr\"                , \"b\"    , nullptr    , T_LONG   , -1, false);\n-  def(_iushr               , \"iushr\"               , \"b\"    , nullptr    , T_INT    , -1, false);\n-  def(_lushr               , \"lushr\"               , \"b\"    , nullptr    , T_LONG   , -1, false);\n-  def(_iand                , \"iand\"                , \"b\"    , nullptr    , T_INT    , -1, false);\n-  def(_land                , \"land\"                , \"b\"    , nullptr    , T_LONG   , -2, false);\n-  def(_ior                 , \"ior\"                 , \"b\"    , nullptr    , T_INT    , -1, false);\n-  def(_lor                 , \"lor\"                 , \"b\"    , nullptr    , T_LONG   , -2, false);\n-  def(_ixor                , \"ixor\"                , \"b\"    , nullptr    , T_INT    , -1, false);\n-  def(_lxor                , \"lxor\"                , \"b\"    , nullptr    , T_LONG   , -2, false);\n-  def(_iinc                , \"iinc\"                , \"bic\"  , \"wbiicc\",    T_VOID   ,  0, false);\n-  def(_i2l                 , \"i2l\"                 , \"b\"    , nullptr    , T_LONG   ,  1, false);\n-  def(_i2f                 , \"i2f\"                 , \"b\"    , nullptr    , T_FLOAT  ,  0, false);\n-  def(_i2d                 , \"i2d\"                 , \"b\"    , nullptr    , T_DOUBLE ,  1, false);\n-  def(_l2i                 , \"l2i\"                 , \"b\"    , nullptr    , T_INT    , -1, false);\n-  def(_l2f                 , \"l2f\"                 , \"b\"    , nullptr    , T_FLOAT  , -1, false);\n-  def(_l2d                 , \"l2d\"                 , \"b\"    , nullptr    , T_DOUBLE ,  0, false);\n-  def(_f2i                 , \"f2i\"                 , \"b\"    , nullptr    , T_INT    ,  0, false);\n-  def(_f2l                 , \"f2l\"                 , \"b\"    , nullptr    , T_LONG   ,  1, false);\n-  def(_f2d                 , \"f2d\"                 , \"b\"    , nullptr    , T_DOUBLE ,  1, false);\n-  def(_d2i                 , \"d2i\"                 , \"b\"    , nullptr    , T_INT    , -1, false);\n-  def(_d2l                 , \"d2l\"                 , \"b\"    , nullptr    , T_LONG   ,  0, false);\n-  def(_d2f                 , \"d2f\"                 , \"b\"    , nullptr    , T_FLOAT  , -1, false);\n-  def(_i2b                 , \"i2b\"                 , \"b\"    , nullptr    , T_BYTE   ,  0, false);\n-  def(_i2c                 , \"i2c\"                 , \"b\"    , nullptr    , T_CHAR   ,  0, false);\n-  def(_i2s                 , \"i2s\"                 , \"b\"    , nullptr    , T_SHORT  ,  0, false);\n-  def(_lcmp                , \"lcmp\"                , \"b\"    , nullptr    , T_VOID   , -3, false);\n-  def(_fcmpl               , \"fcmpl\"               , \"b\"    , nullptr    , T_VOID   , -1, false);\n-  def(_fcmpg               , \"fcmpg\"               , \"b\"    , nullptr    , T_VOID   , -1, false);\n-  def(_dcmpl               , \"dcmpl\"               , \"b\"    , nullptr    , T_VOID   , -3, false);\n-  def(_dcmpg               , \"dcmpg\"               , \"b\"    , nullptr    , T_VOID   , -3, false);\n-  def(_ifeq                , \"ifeq\"                , \"boo\"  , nullptr    , T_VOID   , -1, false);\n-  def(_ifne                , \"ifne\"                , \"boo\"  , nullptr    , T_VOID   , -1, false);\n-  def(_iflt                , \"iflt\"                , \"boo\"  , nullptr    , T_VOID   , -1, false);\n-  def(_ifge                , \"ifge\"                , \"boo\"  , nullptr    , T_VOID   , -1, false);\n-  def(_ifgt                , \"ifgt\"                , \"boo\"  , nullptr    , T_VOID   , -1, false);\n-  def(_ifle                , \"ifle\"                , \"boo\"  , nullptr    , T_VOID   , -1, false);\n-  def(_if_icmpeq           , \"if_icmpeq\"           , \"boo\"  , nullptr    , T_VOID   , -2, false);\n-  def(_if_icmpne           , \"if_icmpne\"           , \"boo\"  , nullptr    , T_VOID   , -2, false);\n-  def(_if_icmplt           , \"if_icmplt\"           , \"boo\"  , nullptr    , T_VOID   , -2, false);\n-  def(_if_icmpge           , \"if_icmpge\"           , \"boo\"  , nullptr    , T_VOID   , -2, false);\n-  def(_if_icmpgt           , \"if_icmpgt\"           , \"boo\"  , nullptr    , T_VOID   , -2, false);\n-  def(_if_icmple           , \"if_icmple\"           , \"boo\"  , nullptr    , T_VOID   , -2, false);\n-  def(_if_acmpeq           , \"if_acmpeq\"           , \"boo\"  , nullptr    , T_VOID   , -2, false);\n-  def(_if_acmpne           , \"if_acmpne\"           , \"boo\"  , nullptr    , T_VOID   , -2, false);\n-  def(_goto                , \"goto\"                , \"boo\"  , nullptr    , T_VOID   ,  0, false);\n-  def(_jsr                 , \"jsr\"                 , \"boo\"  , nullptr    , T_INT    ,  0, false);\n-  def(_ret                 , \"ret\"                 , \"bi\"   , \"wbii\"     , T_VOID   ,  0, false);\n-  def(_tableswitch         , \"tableswitch\"         , \"\"     , nullptr    , T_VOID   , -1, false); \/\/ may have backward branches\n-  def(_lookupswitch        , \"lookupswitch\"        , \"\"     , nullptr    , T_VOID   , -1, false); \/\/ rewriting in interpreter\n-  def(_ireturn             , \"ireturn\"             , \"b\"    , nullptr    , T_INT    , -1, true);\n-  def(_lreturn             , \"lreturn\"             , \"b\"    , nullptr    , T_LONG   , -2, true);\n-  def(_freturn             , \"freturn\"             , \"b\"    , nullptr    , T_FLOAT  , -1, true);\n-  def(_dreturn             , \"dreturn\"             , \"b\"    , nullptr    , T_DOUBLE , -2, true);\n-  def(_areturn             , \"areturn\"             , \"b\"    , nullptr    , T_OBJECT , -1, true);\n-  def(_return              , \"return\"              , \"b\"    , nullptr    , T_VOID   ,  0, true);\n-  def(_getstatic           , \"getstatic\"           , \"bJJ\"  , nullptr    , T_ILLEGAL,  1, true );\n-  def(_putstatic           , \"putstatic\"           , \"bJJ\"  , nullptr    , T_ILLEGAL, -1, true );\n-  def(_getfield            , \"getfield\"            , \"bJJ\"  , nullptr    , T_ILLEGAL,  0, true );\n-  def(_putfield            , \"putfield\"            , \"bJJ\"  , nullptr    , T_ILLEGAL, -2, true );\n-  def(_invokevirtual       , \"invokevirtual\"       , \"bJJ\"  , nullptr    , T_ILLEGAL, -1, true);\n-  def(_invokespecial       , \"invokespecial\"       , \"bJJ\"  , nullptr    , T_ILLEGAL, -1, true);\n-  def(_invokestatic        , \"invokestatic\"        , \"bJJ\"  , nullptr    , T_ILLEGAL,  0, true);\n-  def(_invokeinterface     , \"invokeinterface\"     , \"bJJ__\", nullptr    , T_ILLEGAL, -1, true);\n-  def(_invokedynamic       , \"invokedynamic\"       , \"bJJJJ\", nullptr    , T_ILLEGAL,  0, true );\n-  def(_new                 , \"new\"                 , \"bkk\"  , nullptr    , T_OBJECT ,  1, true );\n-  def(_newarray            , \"newarray\"            , \"bc\"   , nullptr    , T_OBJECT ,  0, true );\n-  def(_anewarray           , \"anewarray\"           , \"bkk\"  , nullptr    , T_OBJECT ,  0, true );\n-  def(_arraylength         , \"arraylength\"         , \"b\"    , nullptr    , T_INT    ,  0, true );\n-  def(_athrow              , \"athrow\"              , \"b\"    , nullptr    , T_VOID   , -1, true );\n-  def(_checkcast           , \"checkcast\"           , \"bkk\"  , nullptr    , T_OBJECT ,  0, true );\n-  def(_instanceof          , \"instanceof\"          , \"bkk\"  , nullptr    , T_INT    ,  0, true );\n-  def(_monitorenter        , \"monitorenter\"        , \"b\"    , nullptr    , T_VOID   , -1, true );\n-  def(_monitorexit         , \"monitorexit\"         , \"b\"    , nullptr    , T_VOID   , -1, true );\n-  def(_wide                , \"wide\"                , \"\"     , nullptr    , T_VOID   ,  0, false);\n-  def(_multianewarray      , \"multianewarray\"      , \"bkkc\" , nullptr    , T_OBJECT ,  1, true );\n-  def(_ifnull              , \"ifnull\"              , \"boo\"  , nullptr    , T_VOID   , -1, false);\n-  def(_ifnonnull           , \"ifnonnull\"           , \"boo\"  , nullptr    , T_VOID   , -1, false);\n-  def(_goto_w              , \"goto_w\"              , \"boooo\", nullptr    , T_VOID   ,  0, false);\n-  def(_jsr_w               , \"jsr_w\"               , \"boooo\", nullptr    , T_INT    ,  0, false);\n-  def(_breakpoint          , \"breakpoint\"          , \"\"     , nullptr    , T_VOID   ,  0, true);\n-\n-  \/\/  JVM bytecodes\n-  \/\/  bytecode               bytecode name           format   wide f.   result tp  stk traps  std code\n-\n-  def(_fast_agetfield      , \"fast_agetfield\"      , \"bJJ\"  , nullptr    , T_OBJECT ,  0, true , _getfield       );\n-  def(_fast_bgetfield      , \"fast_bgetfield\"      , \"bJJ\"  , nullptr    , T_INT    ,  0, true , _getfield       );\n-  def(_fast_cgetfield      , \"fast_cgetfield\"      , \"bJJ\"  , nullptr    , T_CHAR   ,  0, true , _getfield       );\n-  def(_fast_dgetfield      , \"fast_dgetfield\"      , \"bJJ\"  , nullptr    , T_DOUBLE ,  0, true , _getfield       );\n-  def(_fast_fgetfield      , \"fast_fgetfield\"      , \"bJJ\"  , nullptr    , T_FLOAT  ,  0, true , _getfield       );\n-  def(_fast_igetfield      , \"fast_igetfield\"      , \"bJJ\"  , nullptr    , T_INT    ,  0, true , _getfield       );\n-  def(_fast_lgetfield      , \"fast_lgetfield\"      , \"bJJ\"  , nullptr    , T_LONG   ,  0, true , _getfield       );\n-  def(_fast_sgetfield      , \"fast_sgetfield\"      , \"bJJ\"  , nullptr    , T_SHORT  ,  0, true , _getfield       );\n-\n-  def(_fast_aputfield      , \"fast_aputfield\"      , \"bJJ\"  , nullptr    , T_OBJECT ,  0, true , _putfield       );\n-  def(_fast_bputfield      , \"fast_bputfield\"      , \"bJJ\"  , nullptr    , T_INT    ,  0, true , _putfield       );\n-  def(_fast_zputfield      , \"fast_zputfield\"      , \"bJJ\"  , nullptr    , T_INT    ,  0, true , _putfield       );\n-  def(_fast_cputfield      , \"fast_cputfield\"      , \"bJJ\"  , nullptr    , T_CHAR   ,  0, true , _putfield       );\n-  def(_fast_dputfield      , \"fast_dputfield\"      , \"bJJ\"  , nullptr    , T_DOUBLE ,  0, true , _putfield       );\n-  def(_fast_fputfield      , \"fast_fputfield\"      , \"bJJ\"  , nullptr    , T_FLOAT  ,  0, true , _putfield       );\n-  def(_fast_iputfield      , \"fast_iputfield\"      , \"bJJ\"  , nullptr    , T_INT    ,  0, true , _putfield       );\n-  def(_fast_lputfield      , \"fast_lputfield\"      , \"bJJ\"  , nullptr    , T_LONG   ,  0, true , _putfield       );\n-  def(_fast_sputfield      , \"fast_sputfield\"      , \"bJJ\"  , nullptr    , T_SHORT  ,  0, true , _putfield       );\n-\n-  def(_fast_aload_0        , \"fast_aload_0\"        , \"b\"    , nullptr    , T_OBJECT ,  1, true , _aload_0        );\n-  def(_fast_iaccess_0      , \"fast_iaccess_0\"      , \"b_JJ\" , nullptr    , T_INT    ,  1, true , _aload_0        );\n-  def(_fast_aaccess_0      , \"fast_aaccess_0\"      , \"b_JJ\" , nullptr    , T_OBJECT ,  1, true , _aload_0        );\n-  def(_fast_faccess_0      , \"fast_faccess_0\"      , \"b_JJ\" , nullptr    , T_OBJECT ,  1, true , _aload_0        );\n-\n-  def(_fast_iload          , \"fast_iload\"          , \"bi\"   , nullptr    , T_INT    ,  1, false, _iload);\n-  def(_fast_iload2         , \"fast_iload2\"         , \"bi_i\" , nullptr    , T_INT    ,  2, false, _iload);\n-  def(_fast_icaload        , \"fast_icaload\"        , \"bi_\"  , nullptr    , T_INT    ,  0, false, _iload);\n-\n-  \/\/ Faster method invocation.\n-  def(_fast_invokevfinal   , \"fast_invokevfinal\"   , \"bJJ\"  , nullptr    , T_ILLEGAL, -1, true, _invokevirtual   );\n-\n-  def(_fast_linearswitch   , \"fast_linearswitch\"   , \"\"     , nullptr    , T_VOID   , -1, false, _lookupswitch   );\n-  def(_fast_binaryswitch   , \"fast_binaryswitch\"   , \"\"     , nullptr    , T_VOID   , -1, false, _lookupswitch   );\n-\n-  def(_return_register_finalizer , \"return_register_finalizer\" , \"b\"     , nullptr    , T_VOID   ,  0, true, _return);\n-\n-  def(_invokehandle        , \"invokehandle\"        , \"bJJ\"  , nullptr    , T_ILLEGAL, -1, true, _invokevirtual   );\n-\n-  def(_fast_aldc           , \"fast_aldc\"           , \"bj\"   , nullptr    , T_OBJECT,   1, true,  _ldc   );\n-  def(_fast_aldc_w         , \"fast_aldc_w\"         , \"bJJ\"  , nullptr    , T_OBJECT,   1, true,  _ldc_w );\n-\n-  def(_nofast_getfield     , \"nofast_getfield\"     , \"bJJ\"  , nullptr    , T_ILLEGAL,  0, true,  _getfield       );\n-  def(_nofast_putfield     , \"nofast_putfield\"     , \"bJJ\"  , nullptr    , T_ILLEGAL, -2, true , _putfield       );\n-\n-  def(_nofast_aload_0      , \"nofast_aload_0\"      , \"b\"    , nullptr    , T_OBJECT,   1, true , _aload_0        );\n-  def(_nofast_iload        , \"nofast_iload\"        , \"bi\"   , nullptr    , T_INT,      1, false, _iload          );\n-\n-  def(_shouldnotreachhere  , \"_shouldnotreachhere\" , \"b\"    , nullptr    , T_VOID   ,  0, false);\n+#define BYTECODE(code, name, format, wide_format, result_type, depth, can_trap, java_code)  \\\n+  assert(strcmp(_name[code], name) == 0, \"bytecode name mismatch\");                         \\\n+  assert(_result_type[code] == result_type, \"bytecode result_type mismatch\");               \\\n+  assert(_depth[code] == depth, \"bytecode depth mismatch\");                                 \\\n+  assert(_lengths[code] == ((STRING_SIZE(wide_format) << 4) | (STRING_SIZE(format) & 0xF)), \\\n+         \"bytecode lengths mismatch\");                                                      \\\n+  assert(_java_code[code] == java_code, \"bytecode java_code mismatch\");                     \\\n+  def_flags(code, format, wide_format, can_trap, java_code);\n+  BYTECODES_DO(BYTECODE)\n+#undef BYTECODE\n","filename":"src\/hotspot\/share\/interpreter\/bytecodes.cpp","additions":318,"deletions":283,"binary":false,"changes":601,"status":"modified"},{"patch":"@@ -310,0 +310,2 @@\n+  static_assert(number_of_codes <= 256, \"too many bytecodes\");\n+\n@@ -340,7 +342,7 @@\n-  static bool        _is_initialized;\n-  static const char* _name          [number_of_codes];\n-  static BasicType   _result_type   [number_of_codes];\n-  static s_char      _depth         [number_of_codes];\n-  static u_char      _lengths       [number_of_codes];\n-  static Code        _java_code     [number_of_codes];\n-  static jchar       _flags         [(1<<BitsPerByte)*2]; \/\/ all second page for wide formats\n+  static bool              _is_initialized;\n+  static const char* const _name       [number_of_codes];\n+  static const BasicType   _result_type[number_of_codes];\n+  static const s_char      _depth      [number_of_codes];\n+  static const u_char      _lengths    [number_of_codes];\n+  static const Code        _java_code  [number_of_codes];\n+  static       jchar       _flags      [(1<<BitsPerByte)*2]; \/\/ all second page for wide formats\n@@ -348,2 +350,1 @@\n-  static void        def(Code code, const char* name, const char* format, const char* wide_format, BasicType result_type, int depth, bool can_trap);\n-  static void        def(Code code, const char* name, const char* format, const char* wide_format, BasicType result_type, int depth, bool can_trap, Code java_code);\n+  static void def_flags(Code code, const char* format, const char* wide_format, bool can_trap, Code java_code);\n","filename":"src\/hotspot\/share\/interpreter\/bytecodes.hpp","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"}]}