{"files":[{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Robot;\n+import java.awt.event.ActionListener;\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import javax.swing.SwingUtilities;\n+\n+\/*\n+ * @test\n+ * @bug 4166593\n+ * @summary Tests that JComboBox fires action events every time the user does an action\n+ * @key headful\n+ * @run main bug4166593\n+ *\/\n+\n+public class bug4166593 {\n+    static JFrame frame;\n+    static JComboBox comboBox;\n+    static volatile int numberOfActionEvents = 0;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            SwingUtilities.invokeAndWait(() -> createTestUI());\n+            robot.waitForIdle();\n+            robot.delay(250);\n+\n+            \/\/ change selected index 3 times\n+            SwingUtilities.invokeAndWait(() -> {\n+                comboBox.setSelectedIndex(1);\n+                comboBox.setSelectedIndex(3);\n+                comboBox.setSelectedIndex(2);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(250);\n+\n+            if (numberOfActionEvents != 3) {\n+                throw new RuntimeException(\"Unexpected number of Action Events!\\n\" +\n+                        \"Expected: 3\\nActual: \" + numberOfActionEvents);\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public static void createTestUI() {\n+        comboBox = new JComboBox(new Object[]{\n+                \"Bob\", \"Fred\", \"Hank\", \"Joe\", \"Mildred\", \"Agatha\", \"Buffy\"\n+        });\n+        JPanel panel = new JPanel();\n+        JLabel label = new JLabel(\"0\");\n+        frame = new JFrame(\"bug4166593\");\n+        comboBox.setEditable(true);\n+\n+        ActionListener actionCounter = e -> {\n+            ++numberOfActionEvents;\n+            label.setText(Integer.toString(numberOfActionEvents));\n+        };\n+\n+        comboBox.addActionListener(actionCounter);\n+\n+        panel.add(comboBox);\n+        panel.add(label);\n+\n+        frame.add(panel);\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JComboBox\/bug4166593.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"},{"patch":"@@ -0,0 +1,112 @@\n+\/*\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Robot;\n+import javax.swing.DefaultComboBoxModel;\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import javax.swing.SwingUtilities;\n+import javax.swing.event.ListDataEvent;\n+import javax.swing.event.ListDataListener;\n+\n+\/*\n+ * @test\n+ * @bug 4180054\n+ * @summary Tests that DefaultComboBoxModel doesn't fire a \"contents changed\" unneccesarily\n+ * @key headful\n+ * @run main bug4180054\n+ *\/\n+\n+public class bug4180054 {\n+    static JFrame frame;\n+    static JComboBox comboBox;\n+    static volatile int numberOfContentsChangedEvents = 0;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            SwingUtilities.invokeAndWait(() -> createTestUI());\n+            robot.waitForIdle();\n+            robot.delay(250);\n+\n+            \/\/ change selected index 3 times\n+            SwingUtilities.invokeAndWait(() -> {\n+                comboBox.setSelectedIndex(1);\n+                comboBox.setSelectedIndex(3);\n+                comboBox.setSelectedIndex(2);\n+                comboBox.setSelectedIndex(2);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(250);\n+\n+            if (numberOfContentsChangedEvents != 3) {\n+                throw new RuntimeException(\"Unexpected number of Contents Changed Events!\\n\" +\n+                        \"Expected: 3\\nActual: \" + numberOfContentsChangedEvents);\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public static void createTestUI() {\n+        frame = new JFrame(\"bug4180054\");\n+        JPanel panel = new JPanel();\n+        JLabel label = new JLabel(\"0\");\n+\n+        DefaultComboBoxModel model = new DefaultComboBoxModel();\n+        for (int i = 0; i < 100; ++i) {\n+            model.addElement(Integer.toString(i));\n+        }\n+        comboBox = new JComboBox(model);\n+        comboBox.setEditable(true);\n+\n+        ListDataListener contentsCounter = new ListDataListener() {\n+            public void contentsChanged(ListDataEvent e) {\n+                ++numberOfContentsChangedEvents;\n+                label.setText(Integer.toString(numberOfContentsChangedEvents));\n+            }\n+\n+            public void intervalAdded(ListDataEvent e) {\n+            }\n+\n+            public void intervalRemoved(ListDataEvent e) {\n+            }\n+        };\n+\n+        comboBox.getModel().addListDataListener(contentsCounter);\n+\n+        panel.add(comboBox);\n+        panel.add(label);\n+\n+        frame.add(panel);\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JComboBox\/bug4180054.java","additions":112,"deletions":0,"binary":false,"changes":112,"status":"added"},{"patch":"@@ -0,0 +1,138 @@\n+\/*\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.FlowLayout;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.ActionListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import javax.swing.JButton;\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.JTextField;\n+import javax.swing.SwingUtilities;\n+import javax.swing.event.DocumentEvent;\n+import javax.swing.event.DocumentListener;\n+\n+\/*\n+ * @test\n+ * @bug 4530952\n+ * @summary Tests that double mouse clicks invoke Event\n+ * @key headful\n+ * @run main bug4530952\n+ *\/\n+\n+public class bug4530952 {\n+    static JFrame frame;\n+    static JButton btnAction;\n+    static volatile Point loc;\n+\n+    private static boolean flag = false;\n+    private static boolean passed() {\n+        return flag;\n+    }\n+    private static void pass() {\n+        flag = true;\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        Robot robot = new Robot();\n+        SwingUtilities.invokeAndWait(() -> createTestUI());\n+        robot.waitForIdle();\n+        robot.delay(250);\n+\n+        \/\/ enter some text in combo box\n+        robot.keyPress(KeyEvent.VK_A);\n+        robot.keyRelease(KeyEvent.VK_A);\n+        robot.keyPress(KeyEvent.VK_A);\n+        robot.keyRelease(KeyEvent.VK_A);\n+        robot.waitForIdle();\n+        robot.delay(250);\n+\n+        \/\/ find and click action button\n+        SwingUtilities.invokeAndWait(() -> loc = btnAction.getLocationOnScreen());\n+        robot.waitForIdle();\n+        robot.delay(250);\n+\n+        robot.mouseMove(loc.x, loc.y);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.waitForIdle();\n+        robot.delay(250);\n+\n+        if (frame != null) {\n+            SwingUtilities.invokeAndWait(() -> frame.dispose());\n+        }\n+\n+        if (!passed()) {\n+            throw new Error(\"Failed: button action was not fired\");\n+        }\n+    }\n+\n+    public static void createTestUI() {\n+        frame = new JFrame(\"bug4530952\");\n+        frame.setLayout(new FlowLayout());\n+\n+        btnAction = new JButton(\"Action\");\n+        JComboBox cmbAction = new JComboBox();\n+\n+        ActionListener al = e -> pass();\n+        DocumentListener dl = new DocumentListener() {\n+            @Override\n+            public void changedUpdate(DocumentEvent evt) {\n+                resetButtons();\n+            }\n+\n+            @Override\n+            public void insertUpdate(DocumentEvent evt) {\n+                resetButtons();\n+            }\n+\n+            @Override\n+            public void removeUpdate(DocumentEvent evt) {\n+                resetButtons();\n+            }\n+        };\n+\n+        \/\/ Add an editable combo box\n+        cmbAction.setEditable(true);\n+        frame.add(cmbAction);\n+\n+        btnAction.setEnabled(false);\n+        frame.add(btnAction);\n+\n+        btnAction.addActionListener(al);\n+        ((JTextField) cmbAction.getEditor().getEditorComponent()).\n+                getDocument().addDocumentListener(dl);\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+\n+    public static void resetButtons() {\n+        int length = ((JTextField) cmbAction.getEditor().getEditorComponent()).\n+                getDocument().getLength();\n+        btnAction.setEnabled(length > 0);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JComboBox\/bug4530952.java","additions":138,"deletions":0,"binary":false,"changes":138,"status":"added"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.FlowLayout;\n+import java.awt.Robot;\n+import java.awt.event.KeyEvent;\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n+\n+\/*\n+ * @test\n+ * @bug 4530953\n+ * @summary Tests that highlighted Item appears after automatically scrolling to the item\n+ * @key headful\n+ * @run main bug4530953\n+ *\/\n+\n+public class bug4530953 {\n+    static JFrame frame;\n+    static JComboBox combo;\n+    static String[] data = {\"Apple\", \"Orange\", \"Cherry\"};\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            SwingUtilities.invokeAndWait(() -> createTestUI());\n+            robot.waitForIdle();\n+            robot.delay(250);\n+\n+            \/\/ enter some text in combo box editor\n+            robot.keyPress(KeyEvent.VK_A);\n+            robot.keyRelease(KeyEvent.VK_A);\n+            robot.keyPress(KeyEvent.VK_A);\n+            robot.keyRelease(KeyEvent.VK_A);\n+            robot.keyPress(KeyEvent.VK_ENTER);\n+            robot.keyRelease(KeyEvent.VK_ENTER);\n+            robot.waitForIdle();\n+            robot.delay(250);\n+\n+            \/\/ select orange in combo box\n+            robot.keyPress(KeyEvent.VK_DOWN);\n+            robot.keyRelease(KeyEvent.VK_DOWN);\n+            robot.keyPress(KeyEvent.VK_DOWN);\n+            robot.keyRelease(KeyEvent.VK_DOWN);\n+            robot.keyPress(KeyEvent.VK_DOWN);\n+            robot.keyRelease(KeyEvent.VK_DOWN);\n+            robot.keyPress(KeyEvent.VK_ENTER);\n+            robot.keyRelease(KeyEvent.VK_ENTER);\n+            robot.waitForIdle();\n+            robot.delay(250);\n+\n+            String currSelection = (String) combo.getEditor().getItem();\n+            if (!currSelection.equals(\"Orange\")) {\n+                throw new RuntimeException(\"Unexpected Selection.\\n\" +\n+                        \"Expected: Orange\\nActual: \" + currSelection);\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public static void createTestUI() {\n+        frame = new JFrame(\"bug4530953\");\n+        combo = new JComboBox(data);\n+        combo.setEditable(true);\n+        combo.setSelectedIndex(1);\n+        frame.setLayout(new FlowLayout());\n+        frame.add(combo);\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JComboBox\/bug4530953.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"}]}