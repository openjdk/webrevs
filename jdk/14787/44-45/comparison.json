{"files":[{"patch":"@@ -130,3 +130,0 @@\n-        } catch (RuntimeImageLinkException e) {\n-            \/\/ populate modified files exception\n-            throw e;\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/JRTArchive.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import java.util.Objects;\n+\n@@ -44,2 +46,2 @@\n-        this.file = file;\n-        this.reason = reason;\n+        this.file = Objects.requireNonNull(file);\n+        this.reason = Objects.requireNonNull(reason);\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/runtimelink\/RuntimeImageLinkException.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -126,1 +126,1 @@\n-\\ --keep-packaged-modules is not supported.\n+\\ --keep-packaged-modules is not supported\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/resources\/jlink.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.tools.jlink.internal.LinkableRuntimeImage;\n@@ -32,18 +33,0 @@\n-\/*\n- * @test id=packaged_modules\n- * @summary Make sure that modules can be linked using jlink\n- * and deduplication works correctly when creating sub methods\n- * @bug 8311591\n- * @library \/test\/lib\n- *          ..\/lib\n- * @enablePreview\n- * @modules java.base\/jdk.internal.jimage\n- *          jdk.jlink\/jdk.tools.jlink.internal\n- *          jdk.jlink\/jdk.tools.jlink.plugin\n- *          jdk.jlink\/jdk.tools.jmod\n- *          jdk.jlink\/jdk.tools.jimage\n- *          jdk.compiler\n- * @build tests.* JLinkDedupTestBatchSizeOne jdk.test.lib.compiler.CompilerUtils\n- * @requires jlink.packagedModules\n- * @run main\/othervm -Xmx1g -Xlog:init=debug -XX:+UnlockDiagnosticVMOptions -XX:+BytecodeVerificationLocal JLinkDedupTestBatchSizeOne false\n- *\/\n@@ -52,1 +35,1 @@\n- * @test id=linkable_jdk_runtimes\n+ * @test\n@@ -65,1 +48,0 @@\n- * @requires (jlink.runtime.linkable & !jlink.packagedModules)\n@@ -67,1 +49,1 @@\n- * @run main\/othervm -Xmx1g -Xlog:init=debug -XX:+UnlockDiagnosticVMOptions -XX:+BytecodeVerificationLocal JLinkDedupTestBatchSizeOne true\n+ * @run main\/othervm -Xmx1g -Xlog:init=debug -XX:+UnlockDiagnosticVMOptions -XX:+BytecodeVerificationLocal JLinkDedupTestBatchSizeOne\n@@ -104,4 +86,1 @@\n-        if (args.length != 1) {\n-            throw new AssertionError(\"Wrong number of arguments for the test!\");\n-        }\n-        boolean linkableRuntime = Boolean.parseBoolean(args[0]);\n+        boolean linkableRuntime = LinkableRuntimeImage.isLinkableRuntime();\n@@ -109,2 +88,2 @@\n-                               (linkableRuntime ? \"a linkable JDK runtime\" :\n-                                   \"packaged modules\") + \".\");\n+                            (linkableRuntime ? \"enabled\" : \"disabled\") +\n+                            \" capability of linking from the run-time image.\");\n","filename":"test\/jdk\/tools\/jlink\/JLinkDedupTestBatchSizeOne.java","additions":6,"deletions":27,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -28,6 +28,1 @@\n-\/*\n- * @test id=run-time-image-cap-yes\n- * @summary Test jlink --help for capability output (true)\n- * @requires (vm.compMode != \"Xcomp\" & jlink.runtime.linkable)\n- * @run main\/othervm -Duser.language=en JLinkHelpCapabilityTest true\n- *\/\n+import jdk.tools.jlink.internal.LinkableRuntimeImage;\n@@ -36,4 +31,5 @@\n- * @test id=run-time-image-cap-no\n- * @summary Test jlink --help for capability output (false)\n- * @requires (vm.compMode != \"Xcomp\" & !jlink.runtime.linkable)\n- * @run main\/othervm -Duser.language=en JLinkHelpCapabilityTest false\n+ * @test\n+ * @summary Test jlink --help for capability output\n+ * @modules jdk.jlink\/jdk.tools.jlink.internal\n+ * @requires vm.compMode != \"Xcomp\"\n+ * @run main\/othervm -Duser.language=en JLinkHelpCapabilityTest\n@@ -48,1 +44,1 @@\n-        boolean runtimeLinkCap = Boolean.parseBoolean(args[0]);\n+        boolean runtimeLinkCap = LinkableRuntimeImage.isLinkableRuntime();\n","filename":"test\/jdk\/tools\/jlink\/JLinkHelpCapabilityTest.java","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import jdk.tools.jlink.internal.LinkableRuntimeImage;\n@@ -46,15 +47,0 @@\n-\/*\n- * @test id=packaged_modules\n- * @bug 8252919 8327499\n- * @library ..\/..\/lib\n- * @summary Test --generate-jli-classes plugin\n- * @enablePreview\n- * @modules java.base\/jdk.internal.jimage\n- *          jdk.jlink\/jdk.tools.jlink.internal\n- *          jdk.jlink\/jdk.tools.jlink.internal.plugins\n- *          jdk.jlink\/jdk.tools.jmod\n- *          jdk.jlink\/jdk.tools.jimage\n- * @requires jlink.packagedModules\n- * @build tests.*\n- * @run testng\/othervm -DlinkableRuntime=false GenerateJLIClassesPluginTest\n- *\/\n@@ -63,1 +49,1 @@\n- * @test id=linkable_jdk_runtimes\n+ * @test\n@@ -73,1 +59,0 @@\n- * @requires (jlink.runtime.linkable & !jlink.packagedModules)\n@@ -75,1 +60,1 @@\n- * @run testng\/othervm -DlinkableRuntime=true GenerateJLIClassesPluginTest\n+ * @run testng\/othervm GenerateJLIClassesPluginTest\n@@ -79,1 +64,0 @@\n-    private static final String LINKABLE_RUNTIME_PROP = \"linkableRuntime\";\n@@ -84,3 +68,7 @@\n-        boolean isLinkableRuntime = Boolean.getBoolean(LINKABLE_RUNTIME_PROP);\n-        System.out.println(\"Tests run on \" +\n-                           (isLinkableRuntime ? \"linkable JDK runtime.\" : \"packaged modules.\"));\n+        boolean isLinkableRuntime = LinkableRuntimeImage.isLinkableRuntime();\n+        System.out.println(\"DEBUG: Tests run on \" +\n+                           (isLinkableRuntime ? \"enabled\" : \"disabled\") +\n+                           \" capability of linking from the run-time image.\");\n+        System.out.println(\"DEBUG: default module-path, 'jmods', \" +\n+                           (Helper.jdkHasPackagedModules() ? \"\" : \"NOT \") +\n+                           \"present.\");\n@@ -89,0 +77,2 @@\n+            \/\/ In case of no linkable run-time image and also no packaged\n+            \/\/ modules, helper will be null.\n@@ -92,1 +82,0 @@\n-        helper.generateDefaultModules();\n@@ -103,1 +92,0 @@\n-                .modulePath(helper.defaultModulePath())\n@@ -129,1 +117,0 @@\n-                    .modulePath(helper.defaultModulePath())\n@@ -142,1 +129,0 @@\n-                .modulePath(helper.defaultModulePath())\n@@ -158,1 +144,0 @@\n-                .modulePath(helper.defaultModulePath())\n@@ -207,0 +192,1 @@\n+\n","filename":"test\/jdk\/tools\/jlink\/plugins\/GenerateJLIClassesPluginTest.java","additions":13,"deletions":27,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import jdk.tools.jlink.internal.LinkableRuntimeImage;\n@@ -39,21 +40,0 @@\n-\/*\n- * @test id=packaged_modules\n- * @bug 8152143 8152704 8155649 8165804 8185841 8176841 8190918\n- *      8179071 8202537 8221432 8222098 8251317 8258794 8265315\n- *      8296248 8306116 8174269 8333582\n- * @summary IncludeLocalesPlugin tests\n- * @author Naoto Sato\n- * @requires (jlink.packagedModules & vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n- * @library ..\/..\/lib\n- * @enablePreview\n- * @modules java.base\/jdk.internal.jimage\n- *          jdk.jlink\/jdk.tools.jlink.internal\n- *          jdk.jlink\/jdk.tools.jlink.internal.plugins\n- *          jdk.jlink\/jdk.tools.jlink.plugin\n- *          jdk.jlink\/jdk.tools.jmod\n- *          jdk.jlink\/jdk.tools.jimage\n- *          jdk.compiler\n- * @build tests.*\n- * @build tools.jlink.plugins.GetAvailableLocales\n- * @run main\/othervm\/timeout=180 -Xmx1g IncludeLocalesPluginTest false\n- *\/\n@@ -62,1 +42,1 @@\n- * @test id=linkable_jdk_runtimes\n+ * @test\n@@ -68,1 +48,1 @@\n- * @requires (jlink.runtime.linkable & !jlink.packagedModules & vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n+ * @requires (vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n@@ -80,1 +60,1 @@\n- * @run main\/othervm\/timeout=180 -Xmx1g IncludeLocalesPluginTest true\n+ * @run main\/othervm\/timeout=180 -Xmx1g IncludeLocalesPluginTest\n@@ -438,6 +418,1 @@\n-        if (args.length != 1) {\n-            throw new RuntimeException(\"Usage: \" +\n-                                       IncludeLocalesPluginTest.class.getSimpleName() +\n-                                       \" {true,false}\");\n-        }\n-        boolean isLinkableRuntime = Boolean.parseBoolean(args[0]);\n+        boolean isLinkableRuntime = LinkableRuntimeImage.isLinkableRuntime();\n@@ -445,1 +420,5 @@\n-                           (isLinkableRuntime ? \"linkable JDK runtime.\" : \"packaged modules.\"));\n+                           (isLinkableRuntime ? \"enabled\" : \"disabled\") +\n+                           \" capability of linking from the run-time image.\");\n+        System.out.println(\"Default module-path, 'jmods', \" +\n+                           (Helper.jdkHasPackagedModules() ? \"\" : \"NOT \") +\n+                           \"present.\");\n@@ -451,1 +430,0 @@\n-        helper.generateDefaultModules();\n@@ -459,1 +437,0 @@\n-                    .modulePath(helper.defaultModulePath())\n@@ -466,1 +443,0 @@\n-                    .modulePath(helper.defaultModulePath())\n","filename":"test\/jdk\/tools\/jlink\/plugins\/IncludeLocalesPluginTest.java","additions":10,"deletions":34,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import jdk.tools.jlink.internal.LinkableRuntimeImage;\n@@ -53,1 +54,2 @@\n-    public void run(boolean isLinkableRuntime) throws Exception {\n+    public void run() throws Exception {\n+        boolean isLinkableRuntime = LinkableRuntimeImage.isLinkableRuntime();\n","filename":"test\/jdk\/tools\/jlink\/runtimeImage\/AbstractLinkableRuntimeTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @test id=linkable_runtime\n+ * @test\n@@ -34,1 +34,1 @@\n- * @requires (jlink.runtime.linkable & vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n+ * @requires (vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n@@ -43,16 +43,1 @@\n- * @run main\/othervm -Xmx1g AddOptionsTest true\n- *\/\n-\n-\/*\n- * @test id=default_build\n- * @summary Test --add-options jlink plugin when linking from the run-time image\n- * @requires (!jlink.runtime.linkable & vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n- * @library ..\/..\/lib \/test\/lib\n- * @enablePreview\n- * @modules java.base\/jdk.internal.jimage\n- *          jdk.jlink\/jdk.tools.jlink.internal\n- *          jdk.jlink\/jdk.tools.jlink.plugin\n- *          jdk.jlink\/jdk.tools.jimage\n- * @build tests.* jdk.test.lib.process.OutputAnalyzer\n- *        jdk.test.lib.process.ProcessTools\n- * @run main\/othervm -Xmx1g AddOptionsTest false\n+ * @run main\/othervm -Xmx1g AddOptionsTest\n@@ -63,4 +48,0 @@\n-        if (args.length != 1) {\n-            throw new IllegalArgumentException(\"Wrong number of passed arguments\");\n-        }\n-        boolean isLinkableRuntime = Boolean.parseBoolean(args[0]);\n@@ -68,1 +49,1 @@\n-        test.run(isLinkableRuntime);\n+        test.run();\n","filename":"test\/jdk\/tools\/jlink\/runtimeImage\/AddOptionsTest.java","additions":4,"deletions":23,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @test id=linkable_runtime\n+ * @test\n@@ -35,1 +35,1 @@\n- * @requires (jlink.packagedModules & jlink.runtime.linkable & vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n+ * @requires (jlink.packagedModules & vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n@@ -44,17 +44,1 @@\n- * @run main\/othervm -Xmx1g BasicJlinkMissingJavaBase true\n- *\/\n-\n-\/*\n- * @test id=default_build\n- * @summary Test basic linking from the run-time image with java.base.jmod missing\n- *          but java.xml.jmod present. It should link from the run-time image without errors.\n- * @requires (jlink.packagedModules & !jlink.runtime.linkable & vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n- * @library ..\/..\/lib \/test\/lib\n- * @enablePreview\n- * @modules java.base\/jdk.internal.jimage\n- *          jdk.jlink\/jdk.tools.jlink.internal\n- *          jdk.jlink\/jdk.tools.jlink.plugin\n- *          jdk.jlink\/jdk.tools.jimage\n- * @build tests.* jdk.test.lib.process.OutputAnalyzer\n- *        jdk.test.lib.process.ProcessTools\n- * @run main\/othervm -Xmx1g BasicJlinkMissingJavaBase false\n+ * @run main\/othervm -Xmx1g BasicJlinkMissingJavaBase\n@@ -84,4 +68,0 @@\n-        if (args.length != 1) {\n-            throw new IllegalArgumentException(\"Wrong number of passed arguments\");\n-        }\n-        boolean isLinkableRuntime = Boolean.parseBoolean(args[0]);\n@@ -89,1 +69,1 @@\n-        test.run(isLinkableRuntime);\n+        test.run();\n","filename":"test\/jdk\/tools\/jlink\/runtimeImage\/BasicJlinkMissingJavaBase.java","additions":4,"deletions":24,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @test id=linkable_runtime\n+ * @test\n@@ -33,16 +33,1 @@\n- * @requires (jlink.runtime.linkable & vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n- * @library ..\/..\/lib \/test\/lib\n- * @enablePreview\n- * @modules java.base\/jdk.internal.jimage\n- *          jdk.jlink\/jdk.tools.jlink.internal\n- *          jdk.jlink\/jdk.tools.jlink.plugin\n- *          jdk.jlink\/jdk.tools.jimage\n- * @build tests.* jdk.test.lib.process.OutputAnalyzer\n- *        jdk.test.lib.process.ProcessTools\n- * @run main\/othervm -Xmx1g BasicJlinkTest true\n- *\/\n-\n-\/*\n- * @test id=default_build\n- * @summary Test basic linking from the run-time image\n- * @requires (!jlink.runtime.linkable & vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n+ * @requires (vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n@@ -80,4 +65,0 @@\n-        if (args.length != 1) {\n-            throw new IllegalArgumentException(\"Wrong number of passed arguments\");\n-        }\n-        boolean isLinkableRuntime = Boolean.parseBoolean(args[0]);\n@@ -85,1 +66,1 @@\n-        test.run(isLinkableRuntime);\n+        test.run();\n","filename":"test\/jdk\/tools\/jlink\/runtimeImage\/BasicJlinkTest.java","additions":3,"deletions":22,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @test id=linkable_runtime\n+ * @test\n@@ -33,1 +33,1 @@\n- * @requires (jlink.runtime.linkable & vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n+ * @requires (vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n@@ -42,16 +42,1 @@\n- * @run main\/othervm -Xmx1g CustomModuleJlinkTest true\n- *\/\n-\n-\/*\n- * @test id=default_build\n- * @summary Test jmod-less jlink with a custom module\n- * @requires (!jlink.runtime.linkable & vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n- * @library ..\/..\/lib \/test\/lib\n- * @enablePreview\n- * @modules java.base\/jdk.internal.jimage\n- *          jdk.jlink\/jdk.tools.jlink.internal\n- *          jdk.jlink\/jdk.tools.jlink.plugin\n- *          jdk.jlink\/jdk.tools.jimage\n- * @build tests.* jdk.test.lib.process.OutputAnalyzer\n- *        jdk.test.lib.process.ProcessTools\n- * @run main\/othervm -Xmx1g CustomModuleJlinkTest false\n+ * @run main\/othervm -Xmx1g CustomModuleJlinkTest\n@@ -62,4 +47,0 @@\n-        if (args.length != 1) {\n-            throw new IllegalArgumentException(\"Wrong number of passed arguments\");\n-        }\n-        boolean isLinkableRuntime = Boolean.parseBoolean(args[0]);\n@@ -67,1 +48,1 @@\n-        test.run(isLinkableRuntime);\n+        test.run();\n","filename":"test\/jdk\/tools\/jlink\/runtimeImage\/CustomModuleJlinkTest.java","additions":4,"deletions":23,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @test id=linkable_runtime\n+ * @test\n@@ -33,1 +33,1 @@\n- * @requires (jlink.runtime.linkable & vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n+ * @requires (vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n@@ -42,16 +42,1 @@\n- * @run main\/othervm -Xmx1g GenerateJLIClassesTest true\n- *\/\n-\n-\/*\n- * @test id=default_build\n- * @summary Verify JLI class generation in run-time image link mode\n- * @requires (!jlink.runtime.linkable & vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n- * @library ..\/..\/lib \/test\/lib\n- * @enablePreview\n- * @modules java.base\/jdk.internal.jimage\n- *          jdk.jlink\/jdk.tools.jlink.internal\n- *          jdk.jlink\/jdk.tools.jlink.plugin\n- *          jdk.jlink\/jdk.tools.jimage\n- * @build tests.* jdk.test.lib.process.OutputAnalyzer\n- *        jdk.test.lib.process.ProcessTools\n- * @run main\/othervm -Xmx1g GenerateJLIClassesTest false\n+ * @run main\/othervm -Xmx1g GenerateJLIClassesTest\n@@ -62,4 +47,0 @@\n-        if (args.length != 1) {\n-            throw new IllegalArgumentException(\"Wrong number of passed arguments\");\n-        }\n-        boolean isLinkableRuntime = Boolean.parseBoolean(args[0]);\n@@ -67,1 +48,1 @@\n-        test.run(isLinkableRuntime);\n+        test.run();\n","filename":"test\/jdk\/tools\/jlink\/runtimeImage\/GenerateJLIClassesTest.java","additions":4,"deletions":23,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -29,15 +29,0 @@\n-\/*\n- * @test id=linkable_runtime\n- * @summary Test reproducibility of linking an java.se image using the run-time\n- *          image.\n- * @requires (jlink.runtime.linkable & vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n- * @library ..\/..\/lib \/test\/lib\n- * @enablePreview\n- * @modules java.base\/jdk.internal.jimage\n- *          jdk.jlink\/jdk.tools.jlink.internal\n- *          jdk.jlink\/jdk.tools.jlink.plugin\n- *          jdk.jlink\/jdk.tools.jimage\n- * @build tests.* jdk.test.lib.process.OutputAnalyzer\n- *        jdk.test.lib.process.ProcessTools\n- * @run main\/othervm -Xmx1g JavaSEReproducibleTest true\n- *\/\n@@ -46,1 +31,1 @@\n- * @test id=default_build\n+ * @test\n@@ -49,1 +34,1 @@\n- * @requires (!jlink.runtime.linkable & vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n+ * @requires (vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n@@ -58,1 +43,1 @@\n- * @run main\/othervm -Xmx1g JavaSEReproducibleTest false\n+ * @run main\/othervm -Xmx1g JavaSEReproducibleTest\n@@ -63,4 +48,0 @@\n-        if (args.length != 1) {\n-            throw new IllegalArgumentException(\"Wrong number of passed arguments\");\n-        }\n-        boolean isLinkableRuntime = Boolean.parseBoolean(args[0]);\n@@ -68,1 +49,1 @@\n-        test.run(isLinkableRuntime);\n+        test.run();\n","filename":"test\/jdk\/tools\/jlink\/runtimeImage\/JavaSEReproducibleTest.java","additions":4,"deletions":23,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @test id=linkable_runtime\n+ * @test\n@@ -35,1 +35,1 @@\n- * @requires (jlink.runtime.linkable & vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n+ * @requires (vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n@@ -44,17 +44,1 @@\n- * @run main\/othervm -Xmx1g KeepPackagedModulesFailTest true\n- *\/\n-\n-\/*\n- * @test id=default_build\n- * @summary Verify that jlink with an empty module path, but trying to use\n- *          --keep-packaged-modules fails as expected.\n- * @requires (!jlink.runtime.linkable & vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n- * @library ..\/..\/lib \/test\/lib\n- * @enablePreview\n- * @modules java.base\/jdk.internal.jimage\n- *          jdk.jlink\/jdk.tools.jlink.internal\n- *          jdk.jlink\/jdk.tools.jlink.plugin\n- *          jdk.jlink\/jdk.tools.jimage\n- * @build tests.* jdk.test.lib.process.OutputAnalyzer\n- *        jdk.test.lib.process.ProcessTools\n- * @run main\/othervm -Xmx1g KeepPackagedModulesFailTest false\n+ * @run main\/othervm -Xmx1g KeepPackagedModulesFailTest\n@@ -65,4 +49,0 @@\n-        if (args.length != 1) {\n-            throw new IllegalArgumentException(\"Wrong number of passed arguments\");\n-        }\n-        boolean isLinkableRuntime = Boolean.parseBoolean(args[0]);\n@@ -70,1 +50,1 @@\n-        test.run(isLinkableRuntime);\n+        test.run();\n","filename":"test\/jdk\/tools\/jlink\/runtimeImage\/KeepPackagedModulesFailTest.java","additions":4,"deletions":24,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @test id=linkable_runtime\n+ * @test\n@@ -34,1 +34,1 @@\n- * @requires (jlink.runtime.linkable & vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n+ * @requires (vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n@@ -43,17 +43,1 @@\n- * @run main\/othervm -Xmx1g ModifiedFilesExitTest true\n- *\/\n-\n-\/*\n- * @test id=default_build\n- * @summary Verify jlink fails by default when linking from the run-time image\n- *          and files have been modified\n- * @requires (!jlink.runtime.linkable & vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n- * @library ..\/..\/lib \/test\/lib\n- * @enablePreview\n- * @modules java.base\/jdk.internal.jimage\n- *          jdk.jlink\/jdk.tools.jlink.internal\n- *          jdk.jlink\/jdk.tools.jlink.plugin\n- *          jdk.jlink\/jdk.tools.jimage\n- * @build tests.* jdk.test.lib.process.OutputAnalyzer\n- *        jdk.test.lib.process.ProcessTools\n- * @run main\/othervm -Xmx1g ModifiedFilesExitTest false\n+ * @run main\/othervm -Xmx1g ModifiedFilesExitTest\n@@ -64,4 +48,0 @@\n-        if (args.length != 1) {\n-            throw new IllegalArgumentException(\"Wrong number of passed arguments\");\n-        }\n-        boolean isLinkableRuntime = Boolean.parseBoolean(args[0]);\n@@ -69,1 +49,1 @@\n-        test.run(isLinkableRuntime);\n+        test.run();\n","filename":"test\/jdk\/tools\/jlink\/runtimeImage\/ModifiedFilesExitTest.java","additions":4,"deletions":24,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @test id=linkable_runtime\n+ * @test\n@@ -33,1 +33,1 @@\n- * @requires (jlink.runtime.linkable & vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n+ * @requires (vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n@@ -42,17 +42,1 @@\n- * @run main\/othervm -Xmx1g ModifiedFilesWarningTest true\n- *\/\n-\n-\/*\n- * @test id=default_build\n- * @summary Verify warnings are being produced when linking from the run-time\n- *          image and files have been modified\n- * @requires (!jlink.runtime.linkable & vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n- * @library ..\/..\/lib \/test\/lib\n- * @enablePreview\n- * @modules java.base\/jdk.internal.jimage\n- *          jdk.jlink\/jdk.tools.jlink.internal\n- *          jdk.jlink\/jdk.tools.jlink.plugin\n- *          jdk.jlink\/jdk.tools.jimage\n- * @build tests.* jdk.test.lib.process.OutputAnalyzer\n- *        jdk.test.lib.process.ProcessTools\n- * @run main\/othervm -Xmx1g ModifiedFilesWarningTest false\n+ * @run main\/othervm -Xmx1g ModifiedFilesWarningTest\n@@ -65,4 +49,0 @@\n-        if (args.length != 1) {\n-            throw new IllegalArgumentException(\"Wrong number of passed arguments\");\n-        }\n-        boolean isLinkableRuntime = Boolean.parseBoolean(args[0]);\n@@ -70,1 +50,1 @@\n-        test.run(isLinkableRuntime);\n+        test.run();\n","filename":"test\/jdk\/tools\/jlink\/runtimeImage\/ModifiedFilesWarningTest.java","additions":4,"deletions":24,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -30,14 +30,0 @@\n-\/*\n- * @test id=linkable_runtime\n- * @summary Verify that a jlink using the run-time image cannot include jdk.jlink\n- * @requires (jlink.runtime.linkable & vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n- * @library ..\/..\/lib \/test\/lib\n- * @enablePreview\n- * @modules java.base\/jdk.internal.jimage\n- *          jdk.jlink\/jdk.tools.jlink.internal\n- *          jdk.jlink\/jdk.tools.jlink.plugin\n- *          jdk.jlink\/jdk.tools.jimage\n- * @build tests.* jdk.test.lib.process.OutputAnalyzer\n- *        jdk.test.lib.process.ProcessTools\n- * @run main\/othervm -Xmx1g MultiHopTest true\n- *\/\n@@ -46,1 +32,1 @@\n- * @test id=default_build\n+ * @test\n@@ -48,1 +34,1 @@\n- * @requires (!jlink.runtime.linkable & vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n+ * @requires (vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n@@ -57,1 +43,1 @@\n- * @run main\/othervm -Xmx1g MultiHopTest false\n+ * @run main\/othervm -Xmx1g MultiHopTest\n@@ -103,4 +89,0 @@\n-        if (args.length != 1) {\n-            throw new IllegalArgumentException(\"Wrong number of passed arguments\");\n-        }\n-        boolean isLinkableRuntime = Boolean.parseBoolean(args[0]);\n@@ -108,1 +90,1 @@\n-        test.run(isLinkableRuntime);\n+        test.run();\n","filename":"test\/jdk\/tools\/jlink\/runtimeImage\/MultiHopTest.java","additions":4,"deletions":22,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -38,15 +38,0 @@\n-\/*\n- * @test id=linkable_runtime\n- * @summary Compare packaged-modules jlink with a run-time image based jlink to\n- *          produce the same result\n- * @requires (jlink.packagedModules & jlink.runtime.linkable & vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n- * @library ..\/..\/lib \/test\/lib\n- * @enablePreview\n- * @modules java.base\/jdk.internal.jimage\n- *          jdk.jlink\/jdk.tools.jlink.internal\n- *          jdk.jlink\/jdk.tools.jlink.plugin\n- *          jdk.jlink\/jdk.tools.jimage\n- * @build tests.* jdk.test.lib.process.OutputAnalyzer\n- *        jdk.test.lib.process.ProcessTools\n- * @run main\/othervm -Xmx1g PackagedModulesVsRuntimeImageLinkTest true\n- *\/\n@@ -55,1 +40,1 @@\n- * @test id=default_build\n+ * @test\n@@ -58,1 +43,1 @@\n- * @requires (jlink.packagedModules & !jlink.runtime.linkable & vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n+ * @requires (jlink.packagedModules & vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n@@ -67,1 +52,1 @@\n- * @run main\/othervm -Xmx1g PackagedModulesVsRuntimeImageLinkTest false\n+ * @run main\/othervm -Xmx1g PackagedModulesVsRuntimeImageLinkTest\n@@ -72,4 +57,0 @@\n-        if (args.length != 1) {\n-            throw new IllegalArgumentException(\"Wrong number of passed arguments\");\n-        }\n-        boolean isLinkableRuntime = Boolean.parseBoolean(args[0]);\n@@ -77,1 +58,1 @@\n-        test.run(isLinkableRuntime);\n+        test.run();\n","filename":"test\/jdk\/tools\/jlink\/runtimeImage\/PackagedModulesVsRuntimeImageLinkTest.java","additions":4,"deletions":23,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @test id=linkable_runtime\n+ * @test\n@@ -36,1 +36,1 @@\n- * @requires (jlink.runtime.linkable & vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n+ * @requires (vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n@@ -45,16 +45,1 @@\n- * @run main\/othervm -Xmx1g PatchedJDKModuleJlinkTest true\n- *\/\n-\n-\/*\n- * @test id=default_build\n- * @summary Test run-time link with --patch-module. Expect failure.\n- * @requires (!jlink.runtime.linkable & vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n- * @library ..\/..\/lib \/test\/lib\n- * @enablePreview\n- * @modules java.base\/jdk.internal.jimage\n- *          jdk.jlink\/jdk.tools.jlink.internal\n- *          jdk.jlink\/jdk.tools.jlink.plugin\n- *          jdk.jlink\/jdk.tools.jimage\n- * @build tests.* jdk.test.lib.process.OutputAnalyzer\n- *        jdk.test.lib.process.ProcessTools\n- * @run main\/othervm -Xmx1g PatchedJDKModuleJlinkTest false\n+ * @run main\/othervm -Xmx1g PatchedJDKModuleJlinkTest\n@@ -135,4 +120,0 @@\n-        if (args.length != 1) {\n-            throw new IllegalArgumentException(\"Wrong number of passed arguments\");\n-        }\n-        boolean isLinkableRuntime = Boolean.parseBoolean(args[0]);\n@@ -140,1 +121,1 @@\n-        test.run(isLinkableRuntime);\n+        test.run();\n","filename":"test\/jdk\/tools\/jlink\/runtimeImage\/PatchedJDKModuleJlinkTest.java","additions":4,"deletions":23,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -31,14 +31,0 @@\n-\/*\n- * @test id=linkable_runtime\n- * @summary Test appropriate handling of generated SystemModules* classes in run-time image link mode\n- * @requires (jlink.runtime.linkable & vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n- * @library ..\/..\/lib \/test\/lib\n- * @enablePreview\n- * @modules java.base\/jdk.internal.jimage\n- *          jdk.jlink\/jdk.tools.jlink.internal\n- *          jdk.jlink\/jdk.tools.jlink.plugin\n- *          jdk.jlink\/jdk.tools.jimage\n- * @build tests.* jdk.test.lib.process.OutputAnalyzer\n- *        jdk.test.lib.process.ProcessTools\n- * @run main\/othervm -Xmx1g SystemModulesTest true\n- *\/\n@@ -47,1 +33,1 @@\n- * @test id=default_build\n+ * @test\n@@ -49,1 +35,1 @@\n- * @requires (!jlink.runtime.linkable & vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n+ * @requires (vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n@@ -58,1 +44,1 @@\n- * @run main\/othervm -Xmx1g SystemModulesTest false\n+ * @run main\/othervm -Xmx1g SystemModulesTest\n@@ -63,4 +49,0 @@\n-        if (args.length != 1) {\n-            throw new IllegalArgumentException(\"Wrong number of passed arguments\");\n-        }\n-        boolean isLinkableRuntime = Boolean.parseBoolean(args[0]);\n@@ -68,1 +50,1 @@\n-        test.run(isLinkableRuntime);\n+        test.run();\n","filename":"test\/jdk\/tools\/jlink\/runtimeImage\/SystemModulesTest.java","additions":4,"deletions":22,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -31,15 +31,0 @@\n-\/*\n- * @test id=linkable_runtime\n- * @summary Test disabled SystemModulesPlugin in run-time image link mode. Expect\n- *          generated classes to not be there.\n- * @requires (jlink.runtime.linkable & vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n- * @library ..\/..\/lib \/test\/lib\n- * @enablePreview\n- * @modules java.base\/jdk.internal.jimage\n- *          jdk.jlink\/jdk.tools.jlink.internal\n- *          jdk.jlink\/jdk.tools.jlink.plugin\n- *          jdk.jlink\/jdk.tools.jimage\n- * @build tests.* jdk.test.lib.process.OutputAnalyzer\n- *        jdk.test.lib.process.ProcessTools\n- * @run main\/othervm -Xmx1g SystemModulesTest2 true\n- *\/\n@@ -48,1 +33,1 @@\n- * @test id=default_build\n+ * @test\n@@ -51,1 +36,1 @@\n- * @requires (!jlink.runtime.linkable & vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n+ * @requires (vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n@@ -60,1 +45,1 @@\n- * @run main\/othervm -Xmx1g SystemModulesTest2 false\n+ * @run main\/othervm -Xmx1g SystemModulesTest2\n@@ -65,4 +50,0 @@\n-        if (args.length != 1) {\n-            throw new IllegalArgumentException(\"Wrong number of passed arguments\");\n-        }\n-        boolean isLinkableRuntime = Boolean.parseBoolean(args[0]);\n@@ -70,1 +51,1 @@\n-        test.run(isLinkableRuntime);\n+        test.run();\n","filename":"test\/jdk\/tools\/jlink\/runtimeImage\/SystemModulesTest2.java","additions":4,"deletions":23,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-        if (!linkableRuntime && !Files.exists(JDK_HOME.resolve(\"jmods\"))) {\n+        if (!linkableRuntime && !jdkHasPackagedModules()) {\n@@ -83,0 +83,4 @@\n+    public static boolean jdkHasPackagedModules() {\n+        return Files.exists(JDK_HOME.resolve(\"jmods\"));\n+    }\n+\n","filename":"test\/jdk\/tools\/lib\/tests\/Helper.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -146,1 +146,0 @@\n-        map.put(\"jlink.runtime.linkable\", this::runtimeLinkable);\n@@ -740,25 +739,0 @@\n-    private String runtimeLinkable() {\n-        \/\/ jdk.jlink module has the following resource indicating a runtime-linkable\n-        \/\/ image. It's the diff file for runtime linking of the java.base module.\n-        String linkableRuntimeResource = \"jdk\/tools\/jlink\/internal\/runtimelink\/diff_java.base\";\n-        try {\n-            ModuleFinder finder = ModuleFinder.ofSystem();\n-            Optional<ModuleReference> ref = finder.find(\"jdk.jlink\");\n-            if (ref.isEmpty()) {\n-                \/\/ No jdk.jlink in the current image\n-                return Boolean.FALSE.toString();\n-            }\n-            try (ModuleReader reader = ref.get().open()) {\n-                Optional<InputStream> inOpt = reader.open(linkableRuntimeResource);\n-                if (inOpt.isPresent()) {\n-                    inOpt.get().close();\n-                    return Boolean.TRUE.toString();\n-                } else {\n-                    return Boolean.FALSE.toString();\n-                }\n-            }\n-        } catch (Throwable t) {\n-            return Boolean.FALSE.toString();\n-        }\n-    }\n-\n","filename":"test\/jtreg-ext\/requires\/VMProps.java","additions":0,"deletions":26,"binary":false,"changes":26,"status":"modified"}]}