{"files":[{"patch":"@@ -548,1 +548,1 @@\n-            log.println(\"'jmods' folder not present, performing a run-image based link.\");\n+            log.println(\"'jmods' folder not present, performing a run-time image based link.\");\n@@ -556,1 +556,1 @@\n-                                        rm.name(), rm.reference().location().get(), config.useModulePath() ? \"\" : \" (run-image)\"));\n+                                        rm.name(), rm.reference().location().get(), config.useModulePath() ? \"\" : \" (run-time image)\"));\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/JlinkTask.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-    private static final String OTHER_RESOURCES_FILE = \"runimage_resources\";\n+    private static final String OTHER_RESOURCES_FILE = \"jdk_internal_runimage\";\n@@ -139,1 +139,1 @@\n-                String msg = \"Recursive links based on the current run-image are not allowed.\";\n+                String msg = \"Recursive links based on the current run-time image are not allowed.\";\n@@ -156,1 +156,2 @@\n-        Optional<InputStream> runImageResources = ref.open().open(OTHER_RESOURCES_FILE);\n+        String otherResourceFile = String.format(OTHER_RESOURCES_FILE, module);\n+        Optional<InputStream> runImageResources = ref.open().open(otherResourceFile);\n@@ -217,1 +218,1 @@\n-        private static final String MISMATCH_FORMAT = \"%s has been modified. Please double check!%s%n\";\n+        private static final String MISMATCH_FORMAT = \"%s has been modified.%s%n\";\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/RunImageArchive.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import java.nio.file.Paths;\n@@ -33,6 +32,0 @@\n-import java.util.Map;\n-import java.util.HashMap;\n-import java.util.Map.Entry;\n-import java.util.Set;\n-import java.util.HashSet;\n-import java.util.List;\n@@ -41,1 +34,0 @@\n-import java.util.stream.Stream;\n@@ -43,0 +35,4 @@\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n@@ -44,1 +40,2 @@\n-import java.util.ResourceBundle;\n+import java.util.Map;\n+import java.util.Map.Entry;\n@@ -46,2 +43,3 @@\n-import java.util.Comparator;\n-\n+import java.util.ResourceBundle;\n+import java.util.Set;\n+import java.util.stream.Stream;\n@@ -58,1 +56,0 @@\n-import jdk.tools.jlink.plugin.PluginException;\n@@ -605,0 +602,1 @@\n+                    .filter((Plugin plugin) -> !plugin.isHidden())\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/TaskHelper.java","additions":10,"deletions":12,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-    private static final String RESPATH = \"\/%s\/runimage_resources\";\n+    private static final String RESPATH = \"\/%s\/jdk_internal_runimage\";\n@@ -87,0 +87,5 @@\n+    @Override\n+    public boolean isHidden() {\n+        return true; \/\/ Don't show in --list-plugins output\n+    }\n+\n@@ -142,1 +147,2 @@\n-            \/\/ Filter \/<module>\/jmod_resources file which we create later\n+            \/\/ Filter internal runtime image based link resource file which we\n+            \/\/ create later\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/AddRunImageResourcesPlugin.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -169,0 +169,10 @@\n+    \/**\n+     * Determine whether or not the plugin is hidden from\n+     * {@code jlink --list-plugins} output.\n+     *\n+     * @return true if the plugin needs to be hidden from --list-plugins\n+     *\/\n+    public default boolean isHidden() {\n+        return false;\n+    }\n+\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/plugin\/Plugin.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-        handler.analyzer().stdoutShouldContain(\"Recursive links based on the current run-image are not allowed.\");\n+        handler.analyzer().stdoutShouldContain(\"Recursive links based on the current run-time image are not allowed.\");\n","filename":"test\/jdk\/tools\/jlink\/JmodLess\/MultiHopTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}