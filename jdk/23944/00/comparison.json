{"files":[{"patch":"@@ -405,0 +405,3 @@\n+  if (dead->for_merge_stores_igvn()) {\n+    remove_from_merge_stores_igvn(dead);\n+  }\n@@ -456,0 +459,1 @@\n+  remove_useless_nodes(_for_merge_stores_igvn, useful); \/\/ remove useless node recorded for merge stores IGVN pass\n@@ -630,0 +634,1 @@\n+      _merge_stores_phase(false),\n@@ -654,0 +659,1 @@\n+      _for_merge_stores_igvn(comp_arena(), 8, 0, nullptr),\n@@ -908,0 +914,1 @@\n+      _merge_stores_phase(false),\n@@ -926,0 +933,1 @@\n+      _for_merge_stores_igvn(comp_arena(), 8, 0, nullptr),\n@@ -1873,0 +1881,40 @@\n+void Compile::record_for_merge_stores_igvn(Node* n) {\n+  if (!n->for_merge_stores_igvn()) {\n+    assert(!_for_merge_stores_igvn.contains(n), \"duplicate\");\n+    n->add_flag(Node::NodeFlags::Flag_for_merge_stores_igvn);\n+    _for_merge_stores_igvn.append(n);\n+  }\n+}\n+\n+void Compile::remove_from_merge_stores_igvn(Node* n) {\n+  n->remove_flag(Node::NodeFlags::Flag_for_merge_stores_igvn);\n+  _for_merge_stores_igvn.remove(n);\n+}\n+\n+\/\/ We need to wait with merging stores until RangeCheck smearing has removed the RangeChecks during\n+\/\/ the post loops IGVN phase. If we do it earlier, then there may still be some RangeChecks between\n+\/\/ the stores, and we merge the wrong sequence of stores.\n+\/\/ Example:\n+\/\/   StoreI RangeCheck StoreI StoreI RangeCheck StoreI\n+\/\/ Apply MergeStores:\n+\/\/   StoreI RangeCheck [   StoreL  ] RangeCheck StoreI\n+\/\/ Remove more RangeChecks:\n+\/\/   StoreI            [   StoreL  ]            StoreI\n+\/\/ But now it would have been better to do this instead:\n+\/\/   [         StoreL       ] [       StoreL         ]\n+void Compile::process_for_merge_stores_igvn(PhaseIterGVN& igvn) {\n+  C->set_merge_stores_phase();\n+\n+  if (_for_merge_stores_igvn.length() > 0) {\n+    while (_for_merge_stores_igvn.length() > 0) {\n+      Node* n = _for_merge_stores_igvn.pop();\n+      n->remove_flag(Node::NodeFlags::Flag_for_merge_stores_igvn);\n+      igvn._worklist.push(n);\n+    }\n+    igvn.optimize();\n+    if (failing()) return;\n+    assert(_for_merge_stores_igvn.length() == 0, \"no more delayed nodes allowed\");\n+    print_method(PHASE_AFTER_MERGE_STORES, 3);\n+  }\n+}\n+\n@@ -2432,0 +2480,2 @@\n+  process_for_merge_stores_igvn(igvn);\n+\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":50,"deletions":0,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -321,0 +321,1 @@\n+  bool                  _merge_stores_phase;    \/\/ Phase for merging stores, after post loop opts phase.\n@@ -377,0 +378,1 @@\n+  GrowableArray<Node*>  _for_merge_stores_igvn; \/\/ List of nodes for IGVN merge stores\n@@ -769,0 +771,6 @@\n+  bool     merge_stores_phase() { return _merge_stores_phase;  }\n+  void set_merge_stores_phase() { _merge_stores_phase = true;  }\n+  void record_for_merge_stores_igvn(Node* n);\n+  void remove_from_merge_stores_igvn(Node* n);\n+  void process_for_merge_stores_igvn(PhaseIterGVN& igvn);\n+\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -3374,1 +3374,1 @@\n-    if (phase->C->post_loop_opts_phase()) {\n+    if (phase->C->merge_stores_phase()) {\n@@ -3379,1 +3379,12 @@\n-      phase->C->record_for_post_loop_opts_igvn(this);\n+      \/\/ We need to wait with merging stores until RangeCheck smearing has removed the RangeChecks during\n+      \/\/ the post loops IGVN phase. If we do it earlier, then there may still be some RangeChecks between\n+      \/\/ the stores, and we merge the wrong sequence of stores.\n+      \/\/ Example:\n+      \/\/   StoreI RangeCheck StoreI StoreI RangeCheck StoreI\n+      \/\/ Apply MergeStores:\n+      \/\/   StoreI RangeCheck [   StoreL  ] RangeCheck StoreI\n+      \/\/ Remove more RangeChecks:\n+      \/\/   StoreI            [   StoreL  ]            StoreI\n+      \/\/ But now it would have been better to do this instead:\n+      \/\/   [         StoreL       ] [       StoreL         ]\n+      phase->C->record_for_merge_stores_igvn(this);\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -511,0 +511,5 @@\n+  if (for_merge_stores_igvn()) {\n+    \/\/ Don't add cloned node to Compile::_for_merge_stores_igvn list automatically.\n+    \/\/ If it is applicable, it will happen anyway when the cloned node is registered with IGVN.\n+    n->remove_flag(Node::NodeFlags::Flag_for_merge_stores_igvn);\n+  }\n@@ -618,0 +623,3 @@\n+  if (for_merge_stores_igvn()) {\n+    compile->remove_from_merge_stores_igvn(this);\n+  }\n","filename":"src\/hotspot\/share\/opto\/node.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -833,2 +833,3 @@\n-    Flag_is_removed_by_peephole      = 1 << 16,\n-    Flag_is_predicated_using_blend   = 1 << 17,\n+    Flag_for_merge_stores_igvn       = 1 << 16,\n+    Flag_is_removed_by_peephole      = 1 << 17,\n+    Flag_is_predicated_using_blend   = 1 << 18,\n@@ -1078,0 +1079,1 @@\n+  bool for_merge_stores_igvn() const { return (_flags & Flag_for_merge_stores_igvn) != 0; }\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -91,0 +91,1 @@\n+  flags(AFTER_MERGE_STORES,             \"After Merge Stores\") \\\n","filename":"src\/hotspot\/share\/opto\/phasetype.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -52,0 +52,9 @@\n+\/*\n+ * @test\n+ * @bug 8318446 8331054 8331311 8335392 8348959 8351414\n+ * @summary Test merging of consecutive stores\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib \/\n+ * @run main compiler.c2.TestMergeStores StressIGVN\n+ *\/\n+\n@@ -102,0 +111,13 @@\n+            \/\/ StressIGVN can mix up the order of RangeCheck smearing and MergeStores optimization,\n+            \/\/ if they run in the same IGVN round. When we did not yet have a dedicated IGVN round\n+            \/\/ after post loop opts for MergeStrores, it could happen that we would only remove\n+            \/\/ RangeChecks after already merging some stores, and now they would have to be split\n+            \/\/ up again and re-merged with different stores. Example:\n+            \/\/   StoreI RangeCheck StoreI StoreI RangeCheck StoreI\n+            \/\/ Apply MergeStores:\n+            \/\/   StoreI RangeCheck [   StoreL  ] RangeCheck StoreI\n+            \/\/ Remove more RangeChecks:\n+            \/\/   StoreI            [   StoreL  ]            StoreI\n+            \/\/ But now it would have been better to do this instead:\n+            \/\/   [         StoreL       ] [       StoreL         ]\n+            case \"StressIGVN\"  -> { framework.addFlags(\"-XX:+StressIGVN\"); }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestMergeStores.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -98,0 +98,1 @@\n+    AFTER_MERGE_STORES(\"After Merge Stores\"),\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/CompilePhase.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}