{"files":[{"patch":"@@ -35,0 +35,1 @@\n+import java.lang.classfile.MethodModel;\n@@ -38,0 +39,1 @@\n+import java.lang.invoke.MethodType;\n@@ -70,0 +72,17 @@\n+        ClassModel classModel = findClassBytes(method.getDeclaringClass());\n+        MethodModel methodModel = findMethod(classModel, method);\n+        if (methodModel == null)\n+            return Map.of();\n+\n+        var foundLineNumberTable = methodModel.code().flatMap(code ->\n+                code.findAttribute(Attributes.lineNumberTable()));\n+        if (foundLineNumberTable.isEmpty()) {\n+            boolean isEmptyMethod = Modifier.isAbstract(method.getModifiers())\n+                    || Modifier.isNative(method.getModifiers());\n+            if (!isEmptyMethod) {\n+                throw new Error(method + \" doesn't contains the line numbers table \"\n+                        + \"(the method marked neither abstract nor native)\");\n+            }\n+            return Map.of();\n+        }\n+\n@@ -71,2 +90,8 @@\n-        Class<?> owner = method.getDeclaringClass();\n-        String binaryName = owner.getName();\n+        foundLineNumberTable.get().lineNumbers().forEach(ln ->\n+                lineNumbers.put(ln.startPc(), ln.lineNumber()));\n+        return lineNumbers;\n+    }\n+\n+    \/\/ Finds the ClassFile API model of a given class, or fail with an Error.\n+    public static ClassModel findClassBytes(Class<?> clazz) {\n+        String binaryName = clazz.getName();\n@@ -74,1 +99,1 @@\n-        try (var inputStream = owner.getModule().getResourceAsStream(\n+        try (var inputStream = clazz.getModule().getResourceAsStream(\n@@ -80,1 +105,2 @@\n-        ClassModel classModel = ClassFile.of().parse(fileBytes);\n+        return ClassFile.of().parse(fileBytes);\n+    }\n@@ -82,7 +108,5 @@\n-        List<ClassDesc> paramTypes = Arrays.stream(method.getParameterTypes())\n-                .map(cl -> cl.describeConstable().orElseThrow())\n-                .toList();\n-        ClassDesc returnType = method instanceof Method m\n-                ? m.getReturnType().describeConstable().orElseThrow()\n-                : ConstantDescs.CD_void;\n-        MethodTypeDesc methodType = MethodTypeDesc.of(returnType, paramTypes);\n+    \/\/ Finds a matching method in a class model, or null if none match.\n+    public static MethodModel findMethod(ClassModel classModel, Executable method) {\n+        MethodTypeDesc methodType = MethodType.methodType(\n+                method instanceof Method m ? m.getReturnType() : void.class,\n+                method.getParameterTypes()).describeConstable().orElseThrow();\n@@ -94,14 +118,1 @@\n-                var foundLineNumberTable = methodModel.code().flatMap(code ->\n-                        code.findAttribute(Attributes.lineNumberTable()));\n-                if (foundLineNumberTable.isEmpty()) {\n-                    boolean isEmptyMethod = Modifier.isAbstract(method.getModifiers())\n-                            || Modifier.isNative(method.getModifiers());\n-                    if (!isEmptyMethod) {\n-                        throw new Error(method + \" doesn't contains the line numbers table \"\n-                                + \"(the method marked neither abstract nor native)\");\n-                    }\n-                    break;\n-                }\n-                foundLineNumberTable.get().lineNumbers().forEach(ln ->\n-                        lineNumbers.put(ln.startPc(), ln.lineNumber()));\n-                break;\n+                return methodModel;\n@@ -110,1 +121,1 @@\n-        return lineNumbers;\n+        return null;\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/common\/CTVMUtilities.java","additions":37,"deletions":26,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -64,1 +64,5 @@\n-                count += foundStackMapTable.get().entries().size();\n+                int methodFrames = foundStackMapTable.get().entries().size();\n+                log(\"  method \" + method.methodName() + \" - \" + methodFrames + \" frames\");\n+                count += methodFrames;\n+            } else {\n+                log(\"  method \" + method.methodName() + \" - No StackMapTable\");\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/MissedStackMapFrames\/MissedStackMapFrames.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"}]}