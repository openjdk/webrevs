{"files":[{"patch":"@@ -24,1 +24,1 @@\n-\/**\n+\/*\n@@ -29,1 +29,0 @@\n- * @library \/testlibrary\/asm\n@@ -40,6 +39,0 @@\n-import org.objectweb.asm.ClassReader;\n-import org.objectweb.asm.ClassVisitor;\n-import org.objectweb.asm.ClassWriter;\n-import org.objectweb.asm.MethodVisitor;\n-import org.objectweb.asm.Opcodes;\n-\n@@ -49,0 +42,4 @@\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.ClassHierarchyResolver;\n+import java.lang.classfile.ClassTransform;\n+import java.lang.classfile.instruction.ConstantInstruction;\n@@ -162,16 +159,7 @@\n-                ClassReader cr = new ClassReader(classfileBuffer);\n-                ClassWriter cw = new ClassWriter(cr, ClassWriter.COMPUTE_FRAMES);\n-                ClassVisitor adapter = new ClassVisitor(Opcodes.ASM5, cw) {\n-                    @Override\n-                    public MethodVisitor visitMethod(int access, String base, String desc, String signature, String[] exceptions) {\n-                        MethodVisitor mv = cv.visitMethod(access, base, desc, signature, exceptions);\n-                        if (mv != null) {\n-                            mv = new MethodVisitor(Opcodes.ASM5, mv) {\n-                                @Override\n-                                public void visitLdcInsn(Object cst) {\n-                                    System.out.println(\"replacing \\\"\" + cst + \"\\\" with \\\"bar\\\"\");\n-                                    mv.visitLdcInsn(\"bar\");\n-                                }\n-                            };\n-                        }\n-                        return mv;\n+                var cf = ClassFile.of(ClassFile.ClassHierarchyResolverOption.of(ClassHierarchyResolver.ofClassLoading(cl)));\n+                return cf.transformClass(cf.parse(classfileBuffer), ClassTransform.transformingMethodBodies((cob, coe) -> {\n+                    if (coe instanceof ConstantInstruction.LoadConstantInstruction ldc) {\n+                        System.out.println(\"replacing \\\"\" + ldc.constantEntry().constantValue() + \"\\\" with \\\"bar\\\"\");\n+                        cob.ldc(\"bar\");\n+                    } else {\n+                        cob.with(coe);\n@@ -179,5 +167,1 @@\n-                };\n-\n-                cr.accept(adapter, ClassReader.SKIP_FRAMES);\n-                cw.visitEnd();\n-                return cw.toByteArray();\n+                }));\n","filename":"test\/hotspot\/jtreg\/compiler\/jsr292\/RedefineMethodUsedByMultipleMethodHandles.java","additions":13,"deletions":29,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -38,0 +38,5 @@\n+import java.lang.classfile.ClassBuilder;\n+import java.lang.classfile.ClassElement;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.ClassTransform;\n+import java.lang.classfile.attribute.SourceFileAttribute;\n@@ -142,1 +147,1 @@\n-        byte[] bytecode = InMemoryJavaCompiler.compile(GenericSignatureTarget.class.getName(), newTargetClassSource, \"--release\", \"21\");\n+        byte[] bytecode = InMemoryJavaCompiler.compile(GenericSignatureTarget.class.getName(), newTargetClassSource);\n@@ -144,3 +149,2 @@\n-        ClassWriter cw = new ClassWriter(0);\n-        ClassReader cr = new ClassReader(bytecode);\n-        cr.accept(new ClassVisitor(Opcodes.ASM7, cw) {\n+        var cf = ClassFile.of();\n+        return cf.transformClass(cf.parse(bytecode), new ClassTransform() {\n@@ -149,4 +153,8 @@\n-            public void visitSource(String source, String debug) {\n-                sourceSet = true;\n-                log(\"Changing source: \\\"\" + source + \"\\\" -> \\\"\" + sourceFileNameNew + \"\\\"\");\n-                super.visitSource(sourceFileNameNew, debug);\n+            public void accept(ClassBuilder builder, ClassElement element) {\n+                if (element instanceof SourceFileAttribute src) {\n+                    sourceSet = true;\n+                    log(\"Changing source: \\\"\" + src.sourceFile() + \"\\\" -> \\\"\" + sourceFileNameNew + \"\\\"\");\n+                    builder.with(SourceFileAttribute.of(sourceFileNameNew));\n+                } else {\n+                    builder.with(element);\n+                }\n@@ -156,1 +164,1 @@\n-            public void visitEnd() {\n+            public void atEnd(ClassBuilder builder) {\n@@ -159,1 +167,1 @@\n-                    super.visitSource(sourceFileNameNew, null);\n+                    builder.with(SourceFileAttribute.of(sourceFileNameNew));\n@@ -161,1 +169,0 @@\n-                super.visitEnd();\n@@ -163,2 +170,1 @@\n-        }, 0);\n-        return cw.toByteArray();\n+        });\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/RedefineGenericSignatureTest.java","additions":19,"deletions":13,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -29,0 +29,3 @@\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.ClassTransform;\n+import java.lang.constant.ClassDesc;\n@@ -45,5 +48,0 @@\n-import org.objectweb.asm.ClassReader;\n-import org.objectweb.asm.ClassVisitor;\n-import org.objectweb.asm.ClassWriter;\n-import org.objectweb.asm.Opcodes;\n-\n@@ -262,5 +260,2 @@\n-       ClassReader cr = new ClassReader(classToMorph);\n-       ClassWriter cw = new ClassWriter(cr, ClassWriter.COMPUTE_MAXS);\n-       ClassVisitor cv = new ClassRenamer(cw, newName);\n-       cr.accept(cv, 0);\n-       return cw.toByteArray();\n+       var cf = ClassFile.of();\n+       return cf.transformClass(cf.parse(classToMorph), ClassDesc.ofInternalName(newName), ClassTransform.ACCEPT_ALL);\n@@ -268,18 +263,0 @@\n-\n-    \/**\n-     * Visitor to rename class.\n-     *\/\n-    static class ClassRenamer extends ClassVisitor implements Opcodes {\n-        private final String newName;\n-\n-        public ClassRenamer(ClassVisitor cv, String newName) {\n-            super(ASM4, cv);\n-            this.newName = newName;\n-        }\n-\n-        @Override\n-        public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {\n-            cv.visit(version, access, newName, signature, superName, interfaces);\n-        }\n-\n-    }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/GenClassPoolJar.java","additions":5,"deletions":28,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n- * @library \/testlibrary\/asm\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_rootClass_inMemoryCompilation_keep_cl\/TestDescription.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n- * @library \/testlibrary\/asm\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_rootClass_inMemoryCompilation_keep_class\/TestDescription.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n- * @library \/testlibrary\/asm\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_rootClass_inMemoryCompilation_keep_obj\/TestDescription.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n- * @library \/testlibrary\/asm\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_rootClass_keep_cl\/TestDescription.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n- * @library \/testlibrary\/asm\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_rootClass_keep_class\/TestDescription.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n- * @library \/testlibrary\/asm\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_rootClass_keep_obj\/TestDescription.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.lang.classfile.ClassFile;\n@@ -31,5 +32,0 @@\n-import org.objectweb.asm.ClassReader;\n-import org.objectweb.asm.ClassVisitor;\n-import org.objectweb.asm.FieldVisitor;\n-import org.objectweb.asm.Opcodes;\n-\n@@ -82,2 +78,1 @@\n-        FieldExplorer explorer = new FieldExplorer(cls);\n-        List<String> fields = explorer.get();\n+        List<String> fields = getFields(cls);\n@@ -87,23 +82,5 @@\n-    \/\/ helper class to get list of the class fields\n-    \/\/ in the order they appear in the class file\n-    static class FieldExplorer extends ClassVisitor {\n-        private final Class cls;\n-        private List<String> fieldNameAndSig = new ArrayList<>();\n-        private FieldExplorer(Class cls) {\n-            super(Opcodes.ASM7);\n-            this.cls = cls;\n-        }\n-\n-        @Override\n-        public FieldVisitor visitField(int access, String name, String descriptor, String signature, Object value) {\n-            System.out.println(\"  field '\" + name + \"', type = \" + descriptor);\n-            fieldNameAndSig.add(name);\n-            fieldNameAndSig.add(descriptor);\n-            return super.visitField(access, name, descriptor, signature, value);\n-        }\n-\n-        private InputStream getClassBytes() throws Exception {\n-            String clsName = cls.getName();\n-            String clsPath = clsName.replace('.', '\/') + \".class\";\n-            return cls.getClassLoader().getResourceAsStream(clsPath);\n-        }\n+    private static InputStream getClassBytes(Class<?> cls) throws Exception {\n+        String clsName = cls.getName();\n+        String clsPath = clsName.replace('.', '\/') + \".class\";\n+        return cls.getClassLoader().getResourceAsStream(clsPath);\n+    }\n@@ -111,6 +88,10 @@\n-        \/\/ each field is represented by 2 Strings in the list: name and type descriptor\n-        public List<String> get() throws Exception {\n-            System.out.println(\"Class \" + cls.getName());\n-            try (InputStream classBytes = getClassBytes()) {\n-                ClassReader classReader = new ClassReader(classBytes);\n-                classReader.accept(this, 0);\n+    \/\/ get list of the class fields in the order they appear in the class file\n+    \/\/ each field is represented by 2 Strings in the list: name and type descriptor\n+    public static List<String> getFields(Class<?> cls) throws Exception {\n+        System.out.println(\"Class \" + cls.getName());\n+        List<String> fieldNameAndSig = new ArrayList<>();\n+        try (InputStream classBytes = getClassBytes(cls)) {\n+            var classModel = ClassFile.of().parse(classBytes.readAllBytes());\n+            for (var field : classModel.fields()) {\n+                fieldNameAndSig.add(field.fieldName().stringValue());\n+                fieldNameAndSig.add(field.fieldType().stringValue());\n@@ -118,1 +99,0 @@\n-            return fieldNameAndSig;\n@@ -120,0 +100,1 @@\n+        return fieldNameAndSig;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/GetClassFields\/getclfld007.java","additions":18,"deletions":37,"binary":false,"changes":55,"status":"modified"}]}