{"files":[{"patch":"@@ -159,3 +159,3 @@\n-                var cf = ClassFile.of(ClassFile.ClassHierarchyResolverOption.of(ClassHierarchyResolver.ofClassLoading(cl)));\n-                return cf.transformClass(cf.parse(classfileBuffer), ClassTransform.transformingMethodBodies((cob, coe) -> {\n-                    if (coe instanceof ConstantInstruction.LoadConstantInstruction ldc) {\n+                var context = ClassFile.of(ClassFile.ClassHierarchyResolverOption.of(ClassHierarchyResolver.ofResourceParsing(cl)));\n+                return context.transformClass(context.parse(classfileBuffer), ClassTransform.transformingMethodBodies((codeBuilder, codeElement) -> {\n+                    if (codeElement instanceof ConstantInstruction.LoadConstantInstruction ldc) {\n@@ -163,1 +163,1 @@\n-                        cob.ldc(\"bar\");\n+                        codeBuilder.ldc(\"bar\");\n@@ -165,1 +165,1 @@\n-                        cob.with(coe);\n+                        codeBuilder.with(codeElement);\n","filename":"test\/hotspot\/jtreg\/compiler\/jsr292\/RedefineMethodUsedByMultipleMethodHandles.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.lang.constant.ClassDesc;\n@@ -42,0 +43,1 @@\n+import java.util.List;\n@@ -69,7 +71,6 @@\n-        Class<?> aClass = method.getDeclaringClass();\n-        ClassModel cm;\n-        try {\n-            Module aModule = aClass.getModule();\n-            String name = aClass.getName();\n-            cm = ClassFile.of().parse(aModule.getResourceAsStream(\n-                    name.replace('.', '\/') + \".class\").readAllBytes());\n+        Class<?> owner = method.getDeclaringClass();\n+        String binaryName = owner.getName();\n+        byte[] fileBytes;\n+        try (var inputStream = owner.getModule().getResourceAsStream(\n+                binaryName.replace('.', '\/') + \".class\")) {\n+            fileBytes = inputStream.readAllBytes();\n@@ -77,1 +78,1 @@\n-                        throw new Error(\"TEST BUG: can read \" + aClass.getName() + \" : \" + e, e);\n+            throw new Error(\"TEST BUG: cannot read \" + binaryName, e);\n@@ -79,0 +80,1 @@\n+        ClassModel classModel = ClassFile.of().parse(fileBytes);\n@@ -80,1 +82,1 @@\n-        var params = Arrays.stream(method.getParameterTypes())\n+        List<ClassDesc> paramTypes = Arrays.stream(method.getParameterTypes())\n@@ -83,4 +85,5 @@\n-        var ret = method instanceof Method m ? m.getReturnType().describeConstable().orElseThrow()\n-                                             : ConstantDescs.CD_void;\n-        var mt = MethodTypeDesc.of(ret, params);\n-        var name = method instanceof Method m ? m.getName() : ConstantDescs.INIT_NAME;\n+        ClassDesc returnType = method instanceof Method m\n+                ? m.getReturnType().describeConstable().orElseThrow()\n+                : ConstantDescs.CD_void;\n+        MethodTypeDesc methodType = MethodTypeDesc.of(returnType, paramTypes);\n+        String methodName = method instanceof Method m ? m.getName() : ConstantDescs.INIT_NAME;\n@@ -88,4 +91,6 @@\n-        for (var m : cm.methods()) {\n-            if (m.methodName().equalsString(name) && m.methodType().isMethodType(mt)) {\n-                var optLnt = m.code().flatMap(code -> code.findAttribute(Attributes.lineNumberTable()));\n-                if (optLnt.isEmpty()) {\n+        for (var methodModel : classModel.methods()) {\n+            if (methodModel.methodName().equalsString(methodName)\n+                    && methodModel.methodType().isMethodType(methodType)) {\n+                var foundLineNumberTable = methodModel.code().flatMap(code ->\n+                        code.findAttribute(Attributes.lineNumberTable()));\n+                if (foundLineNumberTable.isEmpty()) {\n@@ -100,1 +105,2 @@\n-                optLnt.get().lineNumbers().forEach(ln -> lineNumbers.put(ln.startPc(), ln.lineNumber()));\n+                foundLineNumberTable.get().lineNumbers().forEach(ln ->\n+                        lineNumbers.put(ln.startPc(), ln.lineNumber()));\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/common\/CTVMUtilities.java","additions":24,"deletions":18,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -37,0 +37,2 @@\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.MethodModel;\n@@ -57,1 +59,1 @@\n-        var cm = ClassFile.of().parse(classfileBuffer);\n+        ClassModel clazz = ClassFile.of().parse(classfileBuffer);\n@@ -59,4 +61,4 @@\n-        for (var mth : cm.methods()) {\n-            var optSmt = mth.code().flatMap(code -> code.findAttribute(Attributes.stackMapTable()));\n-            if (optSmt.isPresent()) {\n-                count += optSmt.get().entries().size();\n+        for (MethodModel method : clazz.methods()) {\n+            var foundStackMapTable = method.code().flatMap(code -> code.findAttribute(Attributes.stackMapTable()));\n+            if (foundStackMapTable.isPresent()) {\n+                count += foundStackMapTable.get().entries().size();\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/MissedStackMapFrames\/MissedStackMapFrames.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -86,4 +86,4 @@\n-            var cf = ClassFile.of(ClassFile.ConstantPoolSharingOption.NEW_POOL);\n-            return cf.transformClass(cf.parse(classfileBuffer), new ClassTransform() {\n-                \/\/ Shuffle constant pool\n-                final List<FieldModel> fields = new ArrayList<>();\n+            \/\/ Shuffle constant pool\n+            ClassFile context = ClassFile.of(ClassFile.ConstantPoolSharingOption.NEW_POOL);\n+            return context.transformClass(context.parse(classfileBuffer), new ClassTransform() {\n+                final List<FieldModel> dummyFields = new ArrayList<>();\n@@ -94,1 +94,2 @@\n-                        fields.addLast(field);\n+                        \/\/ Remove dummy field\n+                        dummyFields.addLast(field);\n@@ -102,1 +103,2 @@\n-                    fields.forEach(builder);\n+                    \/\/ Re-add dummy fields\n+                    dummyFields.forEach(builder);\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/RedefineAnnotations.java","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -149,2 +149,2 @@\n-        var cf = ClassFile.of();\n-        return cf.transformClass(cf.parse(bytecode), new ClassTransform() {\n+        ClassFile context = ClassFile.of();\n+        return context.transformClass(context.parse(bytecode), new ClassTransform() {\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/RedefineGenericSignatureTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,0 +43,2 @@\n+import java.lang.classfile.ClassBuilder;\n+import java.lang.classfile.ClassElement;\n@@ -65,2 +67,2 @@\n-            return ClassFile.of().transformClass(ClassFile.of().parse(classfileBuffer), (cb, ce) -> {\n-                if (ce instanceof ClassFileVersion cfv) {\n+            return ClassFile.of().transformClass(ClassFile.of().parse(classfileBuffer), (classBuilder, classElement) -> {\n+                if (classElement instanceof ClassFileVersion cfv) {\n@@ -68,1 +70,1 @@\n-                    cb.with(ClassFileVersion.of(cfv.majorVersion() - 1, 0));\n+                    classBuilder.with(ClassFileVersion.of(cfv.majorVersion() - 1, 0));\n@@ -70,1 +72,1 @@\n-                    cb.with(ce);\n+                    classBuilder.with(classElement);\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/RedefineObject.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+import java.lang.classfile.ClassModel;\n@@ -52,0 +53,1 @@\n+import java.util.List;\n@@ -94,1 +96,1 @@\n-                ClassTransform.endHandler(clb -> clb.with(RuntimeVisibleAnnotationsAttribute\n+                ClassTransform.endHandler(classBuilder -> classBuilder.with(RuntimeVisibleAnnotationsAttribute\n@@ -100,4 +102,6 @@\n-        var cm = ClassFile.of().parse(classBytes);\n-        var rvaa = cm.findAttribute(Attributes.runtimeVisibleAnnotations()).orElseThrow();\n-        var elements = rvaa.annotations().stream().filter(anno -> anno.className().isFieldType(CD_ClassVersion)).findFirst().orElseThrow().elements();\n-        if (elements.size() != 1)\n+        ClassModel clazz = ClassFile.of().parse(classBytes);\n+        RuntimeVisibleAnnotationsAttribute rvaa = clazz.findAttribute(Attributes.runtimeVisibleAnnotations()).orElseThrow();\n+        List<AnnotationElement> classVersionElementValuePairs = rvaa.annotations().stream()\n+                .filter(anno -> anno.className().isFieldType(CD_ClassVersion))\n+                .findFirst().orElseThrow().elements();\n+        if (classVersionElementValuePairs.size() != 1)\n@@ -105,2 +109,2 @@\n-        var element = elements.getFirst();\n-        if (!element.name().equalsString(\"value\") || !(element.value() instanceof AnnotationValue.OfInt intVal))\n+        AnnotationElement elementValuePair = classVersionElementValuePairs.getFirst();\n+        if (!elementValuePair.name().equalsString(\"value\") || !(elementValuePair.value() instanceof AnnotationValue.OfInt intVal))\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/RedefineRetransform\/RedefineRetransform.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -262,2 +262,4 @@\n-       var cf = ClassFile.of();\n-       return cf.transformClass(cf.parse(classToMorph), ClassDesc.ofInternalName(newName), ClassTransform.ACCEPT_ALL);\n+       var context = ClassFile.of();\n+       return context.transformClass(context.parse(classToMorph),\n+               ClassDesc.ofInternalName(newName),\n+               ClassTransform.ACCEPT_ALL);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/GenClassPoolJar.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.FieldModel;\n@@ -94,2 +96,2 @@\n-            var classModel = ClassFile.of().parse(classBytes.readAllBytes());\n-            for (var field : classModel.fields()) {\n+            ClassModel classModel = ClassFile.of().parse(classBytes.readAllBytes());\n+            for (FieldModel field : classModel.fields()) {\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/GetClassFields\/getclfld007.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}