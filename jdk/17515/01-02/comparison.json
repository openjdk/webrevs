{"files":[{"patch":"@@ -8982,1 +8982,1 @@\n-void Assembler::vinserti64x2(XMMRegister dst, XMMRegister nds, XMMRegister src, uint8_t imm8, int vector_len) {\n+void Assembler::evinserti64x2(XMMRegister dst, XMMRegister nds, XMMRegister src, uint8_t imm8, int vector_len) {\n@@ -8984,1 +8984,1 @@\n-   assert(vector_len == AVX_256bit || VM_Version::supports_avx512vl(), \"\");\n+   assert(vector_len == AVX_512bit || VM_Version::supports_avx512vl(), \"\");\n@@ -11057,1 +11057,1 @@\n-  assert(vector_len == AVX_256bit || VM_Version::supports_avx512vl(), \"\");\n+  assert(vector_len == AVX_512bit || VM_Version::supports_avx512vl(), \"\");\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2822,1 +2822,1 @@\n-  void vinserti64x2(XMMRegister dst, XMMRegister nds, XMMRegister src, uint8_t imm8, int vector_len);\n+  void evinserti64x2(XMMRegister dst, XMMRegister nds, XMMRegister src, uint8_t imm8, int vector_len);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-* Copyright (c) 2019, 2023, Intel Corporation. All rights reserved.\n+* Copyright (c) 2019, 2024, Intel Corporation. All rights reserved.\n@@ -282,5 +282,4 @@\n-  __ push(r12);\n-  __ push(r13);\n-  __ push(r14);\n-  __ push(r15);\n-  __ push(rbx);\n+  __ push(r12);\/\/holds pointer to avx512_subkeyHtbl\n+  __ push(r14);\/\/holds CTR_CHECK value to check for overflow\n+  __ push(r15);\/\/holds number of rounds\n+  __ push(rbx);\/\/scratch register\n@@ -298,1 +297,1 @@\n-  __ subptr(rsp, 200 * longSize); \/\/ Create space on the stack for 64 htbl entries and 4 zmm AES entries\n+  __ subptr(rsp, 200 * longSize); \/\/ Create space on the stack for 64 htbl entries and 8 zmm AES entries\n@@ -307,1 +306,1 @@\n-  __ lea(rsp, Address(rbp, -7 * wordSize));\n+  __ lea(rsp, Address(rbp, -6 * wordSize));\n@@ -311,1 +310,1 @@\n-  __ lea(rsp, Address(rbp, -5 * wordSize));\n+  __ lea(rsp, Address(rbp, -4 * wordSize));\n@@ -316,1 +315,0 @@\n-  __ pop(r13);\n@@ -2745,0 +2743,1 @@\n+\/\/ Holds 64 Htbl entries, 32 HKey and 32 HkKey (derived from HKey)\n@@ -2771,1 +2770,1 @@\n-  __ vinserti64x2(ZT7, ZT7, HK, 3, Assembler::AVX_512bit);\n+  __ evinserti64x2(ZT7, ZT7, HK, 3, Assembler::AVX_512bit);\n@@ -2776,1 +2775,1 @@\n-  __ vinserti64x2(ZT7, ZT7, ZT5, 2, Assembler::AVX_512bit);\n+  __ evinserti64x2(ZT7, ZT7, ZT5, 2, Assembler::AVX_512bit);\n@@ -2781,1 +2780,1 @@\n-  __ vinserti64x2(ZT7, ZT7, ZT5, 1, Assembler::AVX_512bit);\n+  __ evinserti64x2(ZT7, ZT7, ZT5, 1, Assembler::AVX_512bit);\n@@ -2786,1 +2785,1 @@\n-  __ vinserti64x2(ZT7, ZT7, ZT5, 0, Assembler::AVX_512bit);\n+  __ evinserti64x2(ZT7, ZT7, ZT5, 0, Assembler::AVX_512bit);\n@@ -2813,1 +2812,1 @@\n-  for (int i = 20, j = 52; i >= 0;) {\n+  for (int i = 20, j = 52; i > 0;) {\n@@ -3392,0 +3391,27 @@\n+  \/* Structure of the Htbl is as follows:\n+  *   Where 0 - 31 we have 32 Hashkey's and 32-63 we have 32 HashKeyK (derived from HashKey)\n+  *   Rest 8 entries are for storing CTR values post AES rounds\n+  * ----------------------------------------------------------------------------------------\n+      Hashkey32 -> 16 * 0\n+      Hashkey31 -> 16 * 1\n+      Hashkey30 -> 16 * 2\n+      ........\n+      Hashkey1 -> 16 * 31\n+      ---------------------\n+      HaskeyK32 -> 16 * 32\n+      HashkeyK31 -> 16 * 33\n+      .........\n+      HashkeyK1 -> 16 * 63\n+      ---------------------\n+      1st set of AES Entries\n+      B00_03 -> 16 * 64\n+      B04_07 -> 16 * 68\n+      B08_11 -> 16 * 72\n+      B12_15 -> 16 * 80\n+      ---------------------\n+      2nd set of AES Entries\n+      B00_03 -> 16 * 84\n+      B04_07 -> 16 * 88\n+      B08_11 -> 16 * 92\n+      B12_15 -> 16 * 96\n+      ---------------------*\/\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_aes.cpp","additions":41,"deletions":15,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-* Copyright (c) 2019, 2021, Intel Corporation. All rights reserved.\n+* Copyright (c) 2019, 2024, Intel Corporation. All rights reserved.\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_ghash.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}