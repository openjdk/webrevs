{"files":[{"patch":"@@ -11034,0 +11034,1 @@\n+  effect(DEF dst);\n@@ -11045,0 +11046,1 @@\n+  effect(DEF dst);\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import jdk.incubator.vector.*;\n@@ -169,14 +168,0 @@\n-    \/**\n-     * Generates uniform float16s in the range of [lo, hi) (inclusive of lo, exclusive of hi).\n-     *\/\n-    public RestrictableGenerator<Float16> uniformFloat16s(Float16 lo, Float16 hi) {\n-        return new UniformFloat16Generator(this, lo, hi);\n-    }\n-\n-    \/**\n-     * Generates uniform float16s in the range of [0, 1) (inclusive of 0, exclusive of 1).\n-     *\/\n-    public RestrictableGenerator<Float16> uniformFloat16s() {\n-        return uniformFloat16s(Float16.valueOf(0.0f), Float16.valueOf(1.0f));\n-    }\n-\n@@ -406,1 +391,0 @@\n-        -0d,\n@@ -434,1 +418,1 @@\n-     * Generates interesting float values, which often are corner cases such as, 0, 1, -1, NaN, +\/- Infinity, Min,\n+     * Generates interesting double values, which often are corner cases such as, 0, 1, -1, NaN, +\/- Infinity, Min,\n@@ -439,1 +423,0 @@\n-        -0f,\n@@ -450,23 +433,0 @@\n-    \/**\n-     * Generates interesting float16 values, which often are corner cases such as, +\/- 0, NaN, +\/- Infinity, Min,\n-     * Max.\n-     *\/\n-    public final RestrictableGenerator<Float16> SPECIAL_FLOAT16S = orderedRandomElement(List.of(\n-        Float16.valueOf(0.0f),\n-        Float16.valueOf(-0.0f),\n-        Float16.POSITIVE_INFINITY,\n-        Float16.NEGATIVE_INFINITY,\n-        Float16.NaN,\n-        Float16.MAX_VALUE,\n-        Float16.MIN_NORMAL,\n-        Float16.MIN_VALUE\n-    ));\n-\n-    \/**\n-     * Returns a mixed generator that mixes the provided background generator and {@link #SPECIAL_FLOAT16S} with the provided\n-     * weights.\n-     *\/\n-    public Generator<Float16> mixedWithSpecialFloat16s(Generator<Float16> background, int weightNormal, int weightSpecial) {\n-        return mixed(background, SPECIAL_FLOAT16S, weightNormal, weightSpecial);\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/Generators.java","additions":1,"deletions":41,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -1,52 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package compiler.lib.generators;\n-\n-import jdk.incubator.vector.Float16;\n-import static jdk.incubator.vector.Float16.*;\n-\n-\/**\n- * Provides a uniform float16 distribution random generator, in the provided range [lo, hi).\n- *\/\n-final class UniformFloat16Generator extends UniformIntersectionRestrictableGenerator<Float16> {\n-    \/**\n-     * Creates a new {@link UniformFloat16Generator}.\n-     *\n-     * @param lo Lower bound of the range (inclusive).\n-     * @param hi Higher bound of the range (exclusive).\n-     *\/\n-    public UniformFloat16Generator(Generators g, Float16 lo, Float16 hi) {\n-        super(g, lo, hi);\n-    }\n-\n-    @Override\n-    public Float16 next() {\n-        return valueOf(g.random.nextFloat(lo().floatValue(), hi().floatValue()));\n-    }\n-\n-    @Override\n-    protected RestrictableGenerator<Float16> doRestrictionFromIntersection(Float16 lo, Float16 hi) {\n-        return new UniformFloat16Generator(g, lo, hi);\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/UniformFloat16Generator.java","additions":0,"deletions":52,"binary":false,"changes":52,"status":"deleted"},{"patch":"@@ -38,1 +38,1 @@\n-import jdk.incubator.vector.Float16;\n+import java.util.Random;\n@@ -41,2 +41,0 @@\n-import jdk.test.lib.*;\n-import compiler.lib.generators.*;\n@@ -51,0 +49,1 @@\n+    private Random rng;\n@@ -56,9 +55,0 @@\n-    public static boolean assertResults(short expected, short actual) {\n-        Float16 expected_fp16 = valueOf(expected);\n-        Float16 actual_fp16 = valueOf(actual);\n-        if (isNaN(expected_fp16) ^ isNaN(actual_fp16)) {\n-            return !expected_fp16.equals(actual_fp16);\n-        }\n-        return false;\n-    }\n-\n@@ -70,2 +60,1 @@\n-\n-        Generator<Float16> gen = Generators.G.mixedWithSpecialFloat16s(Generators.G.uniformFloat16s(Float16.MIN_VALUE, Float16.MAX_VALUE), 10, 2);\n+        rng = new Random(42);\n@@ -73,3 +62,3 @@\n-            input1[i] = float16ToRawShortBits(gen.next());\n-            input2[i] = float16ToRawShortBits(gen.next());\n-            input3[i] = float16ToRawShortBits(gen.next());\n+            input1[i] = floatToFloat16(rng.nextFloat());\n+            input2[i] = floatToFloat16(rng.nextFloat());\n+            input3[i] = floatToFloat16(rng.nextFloat());\n@@ -93,1 +82,1 @@\n-            if (assertResults(expected, output[i])) {\n+            if (output[i] != expected) {\n@@ -113,1 +102,1 @@\n-            if (assertResults(expected, output[i])) {\n+            if (output[i] != expected) {\n@@ -133,1 +122,1 @@\n-            if (assertResults(expected, output[i])) {\n+            if (output[i] != expected) {\n@@ -153,1 +142,1 @@\n-            if (assertResults(expected, output[i])) {\n+            if (output[i] != expected) {\n@@ -173,1 +162,1 @@\n-            if (assertResults(expected, output[i])) {\n+            if (output[i] != expected) {\n@@ -193,1 +182,1 @@\n-            if (assertResults(expected, output[i])) {\n+            if (output[i] != expected) {\n@@ -212,2 +201,2 @@\n-            short expected = float16ToRawShortBits(sqrt(shortBitsToFloat16(input1[i])));\n-            if (assertResults(expected, output[i])) {\n+            short expected = float16ToRawShortBits(valueOf(Math.sqrt(float16ToFloat(input1[i]))));\n+            if (output[i] != expected) {\n@@ -232,2 +221,2 @@\n-            short expected = float16ToRawShortBits(fma(shortBitsToFloat16(input1[i]), shortBitsToFloat16(input2[i]), shortBitsToFloat16(input3[i])));\n-            if (assertResults(expected, output[i])) {\n+            short expected = floatToFloat16(Math.fma(float16ToFloat(input1[i]), float16ToFloat(input2[i]), float16ToFloat(input3[i])));\n+            if (output[i] != expected) {\n@@ -253,1 +242,1 @@\n-            if (assertResults(expected, output[i])) {\n+            if (output[i] != expected) {\n@@ -274,1 +263,1 @@\n-            if (assertResults(expected, output[i])) {\n+            if (output[i] != expected) {\n@@ -294,1 +283,1 @@\n-            if (assertResults(expected, output[i])) {\n+            if (output[i] != expected) {\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestFloat16VectorOperations.java","additions":19,"deletions":30,"binary":false,"changes":49,"status":"modified"}]}