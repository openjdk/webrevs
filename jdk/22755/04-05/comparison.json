{"files":[{"patch":"@@ -7121,0 +7121,1 @@\n+    \/\/ Move sign bits of src2 to mask register.\n@@ -7122,0 +7123,1 @@\n+    \/\/ xtmp1 = src2 < 0 ? src2 : src1\n@@ -7123,0 +7125,1 @@\n+    \/\/ xtmp2 = src2 < 0 ? ? src1 : src2\n@@ -7124,0 +7127,5 @@\n+    \/\/ Idea behind above swapping is to make seconds source operand a +ve value.\n+    \/\/ As per instruction semantic, if the values being compared are both 0.0s (of either sign), the value in\n+    \/\/ the second source operand is returned. If only one value is a NaN (SNaN or QNaN) for this instruction,\n+    \/\/ the second source operand, either a NaN or a valid floating-point value, is returned\n+    \/\/ dst = max(xtmp1, xtmp2)\n@@ -7125,0 +7133,1 @@\n+    \/\/ isNaN = is_unordered_quite(xtmp1)\n@@ -7126,0 +7135,3 @@\n+    \/\/ Final result is same as first source if its a NaN value,\n+    \/\/ in case second operand holds a NaN value then as per above semantics\n+    \/\/ result is same as second operand.\n@@ -7129,0 +7141,1 @@\n+    \/\/ Move sign bits of src1 to mask register.\n@@ -7130,0 +7143,1 @@\n+    \/\/ xtmp1 = src1 < 0 ? src2 : src1\n@@ -7131,0 +7145,1 @@\n+    \/\/ xtmp2 = src1 < 0 ? src1 : src2\n@@ -7132,0 +7147,6 @@\n+    \/\/ Idea behind above swapping is to make seconds source operand a -ve value.\n+    \/\/ As per instruction semantics, if the values being compared are both 0.0s (of either sign), the value in\n+    \/\/ the second source operand is returned.\n+    \/\/ If only one value is a NaN (SNaN or QNaN) for this instruction, the second source operand, either a NaN\n+    \/\/ or a valid floating-point value, is written to the result.\n+    \/\/ dst = min(xtmp1, xtmp2)\n@@ -7133,0 +7154,1 @@\n+    \/\/ isNaN = is_unordered_quite(xtmp1)\n@@ -7134,0 +7156,3 @@\n+    \/\/ Final result is same as first source if its a NaN value,\n+    \/\/ in case second operand holds a NaN value then as per above semantics\n+    \/\/ result is same as second operand.\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import jdk.incubator.vector.*;\n@@ -172,1 +171,1 @@\n-    public RestrictableGenerator<Float16> uniformFloat16s(Float16 lo, Float16 hi) {\n+    public RestrictableGenerator<Short> uniformFloat16s(short lo, short hi) {\n@@ -179,2 +178,2 @@\n-    public RestrictableGenerator<Float16> uniformFloat16s() {\n-        return uniformFloat16s(Float16.valueOf(0.0f), Float16.valueOf(1.0f));\n+    public RestrictableGenerator<Short> uniformFloat16s() {\n+        return uniformFloat16s(Float.floatToFloat16(0.0f), Float.floatToFloat16(1.0f));\n@@ -454,9 +453,9 @@\n-    public final RestrictableGenerator<Float16> SPECIAL_FLOAT16S = orderedRandomElement(List.of(\n-        Float16.valueOf(0.0f),\n-        Float16.valueOf(-0.0f),\n-        Float16.POSITIVE_INFINITY,\n-        Float16.NEGATIVE_INFINITY,\n-        Float16.NaN,\n-        Float16.MAX_VALUE,\n-        Float16.MIN_NORMAL,\n-        Float16.MIN_VALUE\n+    public final RestrictableGenerator<Short> SPECIAL_FLOAT16S = orderedRandomElement(List.of(\n+        Float.floatToFloat16(0.0f),\n+        Float.floatToFloat16(-0.0f),\n+        Float.floatToFloat16(Float.POSITIVE_INFINITY),\n+        Float.floatToFloat16(Float.NEGATIVE_INFINITY),\n+        Float.floatToFloat16(Float.NaN),\n+        Float.floatToFloat16(0x1.ffcP+15f), \/\/ MAX_VALUE\n+        Float.floatToFloat16(0x1.0P-14f),   \/\/ MIN_NORMAL\n+        Float.floatToFloat16(0x1.0P-24f)    \/\/ MIN_VALUE\n@@ -469,1 +468,1 @@\n-    public Generator<Float16> mixedWithSpecialFloat16s(Generator<Float16> background, int weightNormal, int weightSpecial) {\n+    public Generator<Short> mixedWithSpecialFloat16s(Generator<Short> background, int weightNormal, int weightSpecial) {\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/Generators.java","additions":13,"deletions":14,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -26,2 +26,1 @@\n-import jdk.incubator.vector.Float16;\n-import static jdk.incubator.vector.Float16.*;\n+import static java.lang.Float.*;\n@@ -32,1 +31,1 @@\n-final class UniformFloat16Generator extends UniformIntersectionRestrictableGenerator<Float16> {\n+final class UniformFloat16Generator extends UniformIntersectionRestrictableGenerator<Short> {\n@@ -39,1 +38,1 @@\n-    public UniformFloat16Generator(Generators g, Float16 lo, Float16 hi) {\n+    public UniformFloat16Generator(Generators g, Short lo, Short hi) {\n@@ -44,2 +43,2 @@\n-    public Float16 next() {\n-        return valueOf(g.random.nextFloat(lo().floatValue(), hi().floatValue()));\n+    public Short next() {\n+        return floatToFloat16(g.random.nextFloat(float16ToFloat(lo()), float16ToFloat(hi())));\n@@ -49,1 +48,1 @@\n-    protected RestrictableGenerator<Float16> doRestrictionFromIntersection(Float16 lo, Float16 hi) {\n+    protected RestrictableGenerator<Short> doRestrictionFromIntersection(Short lo, Short hi) {\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/UniformFloat16Generator.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -42,1 +42,2 @@\n-import compiler.lib.generators.*;\n+import compiler.lib.generators.Generator;\n+import static compiler.lib.generators.Generators.G;\n@@ -71,1 +72,3 @@\n-        Generator<Float16> gen = Generators.G.mixedWithSpecialFloat16s(Generators.G.uniformFloat16s(Float16.MIN_VALUE, Float16.MAX_VALUE), 10, 2);\n+        short min_value = float16ToRawShortBits(Float16.MIN_VALUE);\n+        short max_value = float16ToRawShortBits(Float16.MAX_VALUE);\n+        Generator<Short> gen = G.mixedWithSpecialFloat16s(G.uniformFloat16s(min_value, max_value), 10, 2);\n@@ -73,3 +76,3 @@\n-            input1[i] = float16ToRawShortBits(gen.next());\n-            input2[i] = float16ToRawShortBits(gen.next());\n-            input3[i] = float16ToRawShortBits(gen.next());\n+            input1[i] = gen.next();\n+            input2[i] = gen.next();\n+            input3[i] = gen.next();\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestFloat16VectorOperations.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"}]}