{"files":[{"patch":"@@ -0,0 +1,43 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.lib.generators;\n+\n+\/**\n+ * Provides an any-bits float16 distribution random generator, i.e. the bits are uniformly sampled,\n+ * thus creating any possible float16 value, including the multiple different NaN representations.\n+ *\/\n+final class AnyBitsFloat16Generator extends BoundGenerator<Short> {\n+\n+    \/**\n+     * Creates a new {@link AnyBitsFloat16Generator}.\n+     *\/\n+    public AnyBitsFloat16Generator(Generators g) {\n+        super(g);\n+    }\n+\n+    @Override\n+    public Short next() {\n+        return (short)g.random.nextInt();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/AnyBitsFloat16Generator.java","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -29,0 +29,1 @@\n+import static java.lang.Float.floatToFloat16;\n@@ -179,1 +180,1 @@\n-        return uniformFloat16s(Float.floatToFloat16(0.0f), Float.floatToFloat16(1.0f));\n+        return uniformFloat16s(floatToFloat16(0.0f), floatToFloat16(1.0f));\n@@ -189,0 +190,8 @@\n+    \/**\n+     * Provides an any-bits float16 distribution random generator, i.e. the bits are uniformly sampled,\n+     * thus creating any possible float16 value, including the multiple different NaN representations.\n+     *\/\n+    public Generator<Short> anyBitsFloat16s() {\n+        return new AnyBitsFloat16Generator(this);\n+    }\n+\n@@ -361,0 +370,19 @@\n+    \/**\n+     * Randomly pick a float16 generator.\n+     *\n+     * @return Random float16 generator.\n+     *\/\n+    public Generator<Short> float16s() {\n+        switch(random.nextInt(0, 5)) {\n+            case 0  -> { return uniformFloat16s(floatToFloat16(-1.0f), floatToFloat16(1.0f)); }\n+            \/\/ Well-balanced, so that multiplication reduction never explodes or collapses to zero:\n+            case 1  -> { return uniformFloat16s(floatToFloat16(0.999f), floatToFloat16(1.001f)); }\n+            case 2  -> { return anyBitsFloat16s(); }\n+            \/\/ A tame distribution, mixed in with the occasional special float value:\n+            case 3  -> { return mixedWithSpecialFloat16s(uniformFloat16s(floatToFloat16(0.999f), floatToFloat16(1.001f)), 10, 1000); }\n+            \/\/ Generating any bits, but special values are more frequent.\n+            case 4  -> { return mixedWithSpecialFloat16s(anyBitsFloat16s(), 100, 200); }\n+            default -> { throw new RuntimeException(\"impossible\"); }\n+        }\n+    }\n+\n@@ -454,8 +482,8 @@\n-        Float.floatToFloat16(0.0f),\n-        Float.floatToFloat16(-0.0f),\n-        Float.floatToFloat16(Float.POSITIVE_INFINITY),\n-        Float.floatToFloat16(Float.NEGATIVE_INFINITY),\n-        Float.floatToFloat16(Float.NaN),\n-        Float.floatToFloat16(0x1.ffcP+15f), \/\/ MAX_VALUE\n-        Float.floatToFloat16(0x1.0P-14f),   \/\/ MIN_NORMAL\n-        Float.floatToFloat16(0x1.0P-24f)    \/\/ MIN_VALUE\n+        floatToFloat16(0.0f),\n+        floatToFloat16(-0.0f),\n+        floatToFloat16(Float.POSITIVE_INFINITY),\n+        floatToFloat16(Float.NEGATIVE_INFINITY),\n+        floatToFloat16(Float.NaN),\n+        floatToFloat16(0x1.ffcP+15f), \/\/ MAX_VALUE\n+        floatToFloat16(0x1.0P-14f),   \/\/ MIN_NORMAL\n+        floatToFloat16(0x1.0P-24f)    \/\/ MIN_VALUE\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/Generators.java","additions":37,"deletions":9,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -45,0 +45,2 @@\n+    \/** Samples the next float16 value in the half-open interval [lo, hi) uniformly at random. *\/\n+    short nextFloat16(short lo, short hi);\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/RandomnessSource.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import static java.lang.Float.floatToFloat16;\n+import static java.lang.Float.float16ToFloat;\n@@ -68,0 +70,5 @@\n+\n+    @Override\n+    public short nextFloat16(short lo, short hi) {\n+        return floatToFloat16(rand.nextFloat(float16ToFloat(lo), float16ToFloat(hi)));\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/RandomnessSourceAdapter.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-        return floatToFloat16(g.random.nextFloat(float16ToFloat(lo()), float16ToFloat(hi())));\n+        return g.random.nextFloat16(lo(), hi());\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/UniformFloat16Generator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-        Generator<Short> gen = G.mixedWithSpecialFloat16s(G.uniformFloat16s(min_value, max_value), 10, 2);\n+        Generator<Short> gen = G.float16s();\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestFloat16VectorOperations.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+    private final Queue<Bounded<Short>> boundedFloat16Queue = new ArrayDeque<>();\n@@ -94,0 +95,5 @@\n+    public MockRandomnessSource enqueueFloat16(short lo, short hi, short value) {\n+        boundedFloat16Queue.add(new Bounded<>(lo, hi, value));\n+        return this;\n+    }\n+\n@@ -101,0 +107,1 @@\n+        checkQueueEmpty(boundedFloat16Queue, \"bounded float16s\");\n@@ -133,0 +140,5 @@\n+\n+    @Override\n+    public short nextFloat16(short lo, short hi) {\n+        return dequeueBounded(boundedFloat16Queue, lo, hi);\n+    }\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/generators\/tests\/MockRandomnessSource.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -60,0 +60,1 @@\n+        testUniformFloat16();\n@@ -67,0 +68,1 @@\n+        testSpecialFloat16();\n@@ -160,1 +162,1 @@\n-                .enqueueInteger(0, 9, 1);\n+                .enqueueInteger(0, 10, 1);\n@@ -172,1 +174,1 @@\n-                .enqueueInteger(0, 9, 1);\n+                .enqueueInteger(0, 10, 1);\n@@ -178,0 +180,22 @@\n+    static void testSpecialFloat16() {\n+        mockSource\n+                .checkEmpty()\n+                .enqueueInteger(0, 8, 2)\n+                .enqueueFloat16((short)0, (short)15360, (short)17010)\n+                .enqueueInteger(0, 8, 6)\n+                .enqueueInteger(0, 8, 5)\n+                .enqueueInteger(0, 8, 7)\n+                .enqueueInteger(0, 8, 4);\n+        var g = mockGS.mixedWithSpecialFloat16s(mockGS.uniformFloat16s(), 4, 4);\n+        Asserts.assertEQ(g.next(), (short)17010);\n+        Asserts.assertEQ(g.next(), (short)31743);\n+        Asserts.assertEQ(g.next(), (short)1024);\n+    }\n+\n+    static void testUniformFloat16() {\n+        mockSource.checkEmpty().enqueueFloat16((short)0, (short)10, (short)17664);\n+        Asserts.assertEQ(mockGS.uniformFloat16s((short)0, (short)10).next(), (short)17664);\n+        mockSource.checkEmpty().enqueueFloat16((short)0, (short)5, (short)31744);\n+        Asserts.assertEQ(mockGS.uniformFloat16s((short)0, (short)5).next(), (short)31744);\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/generators\/tests\/TestGenerators.java","additions":26,"deletions":2,"binary":false,"changes":28,"status":"modified"}]}