{"files":[{"patch":"@@ -453,0 +453,1 @@\n+                appendBreakIfNeeded(tree, cases, c.head);\n@@ -597,1 +598,0 @@\n-                appendBreakIfNeeded(tree, c);\n@@ -642,3 +642,5 @@\n-    private void appendBreakIfNeeded(JCTree switchTree, JCCase c) {\n-        if (c.caseKind == CaseTree.CaseKind.RULE) {\n-            JCBreak brk = make.at(TreeInfo.endPos(c.stats.last())).Break(null);\n+    void appendBreakIfNeeded(JCTree switchTree, List<JCCase> cases, JCCase c) {\n+        if (c.caseKind == CaseTree.CaseKind.RULE || (cases.last() == c && c.completesNormally)) {\n+            JCTree pos = c.stats.nonEmpty() ? c.stats.last()\n+                                            : c;\n+            JCBreak brk = make.at(TreeInfo.endPos(pos)).Break(null);\n@@ -747,1 +749,0 @@\n-                        appendBreakIfNeeded(currentSwitch, accummulated);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransPatterns.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8291769 8301858\n+ * @bug 8291769 8301858 8304694\n@@ -48,0 +48,2 @@\n+        assertEquals(runFallThrough(new R6(1, 1)), 0);\n+        assertEquals(runFallThrough(new R6(0, 0)), 1);\n@@ -116,0 +118,9 @@\n+\n+    public static int runFallThrough(R6 r) {\n+        switch (r) {\n+            case R6(var v1, var v2) when v1 != 0: return 0;\n+            case R6(var v1, var v2):\n+        }\n+        return 1;\n+    }\n+\n@@ -137,0 +148,1 @@\n+    record R6(int i1, int i2) {}\n","filename":"test\/langtools\/tools\/javac\/patterns\/DeconstructionDesugaring.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"}]}