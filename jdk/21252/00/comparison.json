{"files":[{"patch":"@@ -0,0 +1,100 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4147246\n+ * @summary Simple check for peer != null in Component.componentMoved\n+ * (Component.java)\n+ * @key headful\n+ * @run main LWParentMovedTest\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Container;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+\n+public class LWParentMovedTest {\n+    static CMTFrame f;\n+\n+    \/\/ test will throw an exception and fail if lwc is null\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            EventQueue.invokeAndWait(() -> f = new CMTFrame());\n+        } finally {\n+            if (f != null) {\n+                EventQueue.invokeAndWait(() -> f.dispose());\n+            }\n+        }\n+    }\n+}\n+\n+class CMTFrame extends Frame {\n+    Container lwc;\n+    Button button;\n+\n+    public CMTFrame() {\n+        super(\"Moving LWC Test\");\n+        setLayout(new FlowLayout());\n+        lwc = new LWSquare(Color.blue, 100, 100);\n+        button = new Button();\n+        lwc.add(button);\n+        add(lwc);\n+\n+        setSize(400, 300);\n+        setVisible(true);\n+\n+        \/\/ queue up a bunch of COMPONENT_MOVED events\n+        for (int i = 0; i < 1000; i++) {\n+            lwc.setLocation(i, i);\n+        }\n+\n+        \/\/ remove heavyweight from lightweight container\n+        lwc.remove(button);\n+    }\n+}\n+\n+\/\/\n+\/\/ Lightweight container\n+\/\/\n+class LWSquare extends Container {\n+    int width;\n+    int height;\n+\n+    public LWSquare(Color color, int w, int h) {\n+        setBackground(color);\n+        setLayout(new FlowLayout());\n+        width = w;\n+        height = h;\n+        setName(\"LWSquare-\" + color.toString());\n+    }\n+\n+    public void paint(Graphics g) {\n+        g.setColor(getBackground());\n+        g.fillRect(0, 0, 1000, 1000);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/LightweightComponent\/LWParentMovedTest\/LWParentMovedTest.java","additions":100,"deletions":0,"binary":false,"changes":100,"status":"added"},{"patch":"@@ -0,0 +1,153 @@\n+\/*\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4095214\n+ * @summary Test change of focus on lightweights using the tab key\n+ * @key headful\n+ * @run main LightWeightTabFocus\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.FocusListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+\n+public class LightWeightTabFocus {\n+    private static Frame f;\n+    private static LightweightButton btn1;\n+    private static Button btn2;\n+    private static Robot robot;\n+    private static volatile Point point;\n+    private static Point loc;\n+\n+    public static void main(String[] args) throws Exception {\n+        robot = new Robot();\n+        robot.setAutoDelay(100);\n+        try {\n+            EventQueue.invokeAndWait(() -> createUI());\n+            robot.delay(1000);\n+            EventQueue.invokeAndWait(() -> {\n+                loc = f.getLocation();\n+                point = btn2.getLocation();\n+            });\n+            robot.mouseMove(loc.x + point.x, loc.y + point.y);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            \/\/ First TAB\n+            robot.keyPress(KeyEvent.VK_TAB);\n+            robot.keyRelease(KeyEvent.VK_TAB);\n+            if (!btn1.hasFocus()) {\n+                new RuntimeException(\"First tab failed\");\n+            }\n+            \/\/ Second TAB\n+            robot.keyPress(KeyEvent.VK_TAB);\n+            robot.keyRelease(KeyEvent.VK_TAB);\n+            if (!btn2.hasFocus()) {\n+                new RuntimeException(\"Second tab failed\");\n+            }\n+            \/\/ First SHIFT+TAB\n+            robot.keyPress(KeyEvent.VK_SHIFT);\n+            robot.keyPress(KeyEvent.VK_TAB);\n+            robot.delay(100);\n+            robot.keyRelease(KeyEvent.VK_TAB);\n+            robot.keyRelease(KeyEvent.VK_SHIFT);\n+            if (!btn1.hasFocus()) {\n+                new RuntimeException(\"First shift+tab failed\");\n+            }\n+            \/\/ Second SHIFT+TAB\n+            robot.keyPress(KeyEvent.VK_SHIFT);\n+            robot.keyPress(KeyEvent.VK_TAB);\n+            robot.delay(100);\n+            robot.keyRelease(KeyEvent.VK_TAB);\n+            robot.keyRelease(KeyEvent.VK_SHIFT);\n+            if (!btn2.hasFocus()) {\n+                new RuntimeException(\"Second shift+tab failed\");\n+            }\n+\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (f != null) {\n+                    f.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static Frame createUI() {\n+        f = new Frame(\"TAB Focus Change on LW Test\");\n+        f.setLayout(new FlowLayout());\n+        btn1 = new LightweightButton();\n+        f.add(btn1);\n+        btn2 = new Button(\"Click Me To start\");\n+        f.add(btn2);\n+        f.pack();\n+        f.setVisible(true);\n+    }\n+}\n+\n+class LightweightButton extends Component implements FocusListener {\n+    boolean focus;\n+    LightweightButton() {\n+        focus = false;\n+        addFocusListener(this);\n+    }\n+\n+    public Dimension getPreferredSize()\n+    {\n+        return new Dimension(100, 100);\n+    }\n+\n+    public void focusGained(FocusEvent e) {\n+        focus = true;\n+        repaint();\n+    }\n+\n+    public void focusLost(FocusEvent e) {\n+        focus = false;\n+        repaint();\n+    }\n+\n+    public void paint(Graphics g) {\n+        if (focus) {\n+            g.drawString(\"Has Focus\", 10, 20);\n+        } else {\n+            g.drawString(\"Not Focused\", 10, 20);\n+        }\n+    }\n+\n+    public boolean isFocusable() {\n+        return true;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/LightweightComponent\/LightWeightTabFocus\/LightWeightTabFocus.java","additions":153,"deletions":0,"binary":false,"changes":153,"status":"added"},{"patch":"@@ -0,0 +1,182 @@\n+\/*\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4077709 4153989\n+ * @summary Lightweight component font settable test\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual LightweightFontTest\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.FlowLayout;\n+import java.awt.Font;\n+import java.awt.FontMetrics;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+\n+\n+public class LightweightFontTest {\n+    static Font desiredFont = null;\n+\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                [ There are 7 steps to this test ]\n+                1. The 2 bordered labels (Emacs vs. vi) should be in a LARGE font\n+                   (approximately 1\/2 inch tall)\n+                2. The labels should not overlap.\n+                3. Each button should be large enough to contain the entire label.\n+                4. The labels should have red backgrounds\n+                5. The text in the left label should be blue and the right yellow\n+                6. Resize the window to make it much smaller and larger\n+                7. The buttons should never overlap, and they should be large\n+                   enough to contain the entire label.\n+                   (although the button may disappear if there is not enough\n+                   room in the window)\"\n+                \"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(35)\n+                .testUI(LightweightFontTest::createUI)\n+                .logArea(5)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static Frame createUI() {\n+        Frame f = new Frame(\"Lightweight Font Test\");\n+        f.setLayout(new FlowLayout());\n+\n+        desiredFont = new Font(Font.DIALOG, Font.PLAIN, 36);\n+        Component component;\n+        component = new BorderedLabel(\"Emacs or vi?\");\n+        component.setFont(desiredFont);\n+        component.setBackground(Color.red);\n+        component.setForeground(Color.blue);\n+        f.add(component);\n+        component = new BorderedLabel(\"Vi or Emacs???\");\n+        component.setFont(desiredFont);\n+        component.setBackground(Color.red);\n+        component.setForeground(Color.yellow);\n+        f.add(component);\n+        f.pack();\n+        return f;\n+    }\n+}\n+\n+\/**\n+ * Lightweight component\n+ *\/\n+class BorderedLabel extends Component {\n+    boolean superIsButton;\n+    String labelString;\n+\n+    BorderedLabel(String labelString) {\n+        this.labelString = labelString;\n+\n+        Component thisComponent = this;\n+        superIsButton = (thisComponent instanceof Button);\n+        if(superIsButton) {\n+            ((Button)thisComponent).setLabel(labelString);\n+        }\n+    }\n+\n+    public Dimension getMinimumSize() {\n+        Dimension minSize = new Dimension();\n+\n+        if (superIsButton) {\n+            minSize = super.getMinimumSize();\n+        } else {\n+\n+            Graphics g = getGraphics();\n+            verifyFont(g);\n+            FontMetrics metrics = g.getFontMetrics();\n+\n+            minSize.width = metrics.stringWidth(labelString) + 14;\n+            minSize.height = metrics.getMaxAscent() + metrics.getMaxDescent() + 9;\n+\n+            g.dispose();\n+        }\n+        return minSize;\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        Dimension prefSize = new Dimension();\n+        if (superIsButton) {\n+            prefSize = super.getPreferredSize();\n+        } else {\n+            prefSize = getMinimumSize();\n+        }\n+        return prefSize;\n+    }\n+\n+    public void paint(Graphics g) {\n+        verifyFont(g);\n+        super.paint(g);\n+        if (superIsButton) {\n+            return;\n+        }\n+        Dimension size = getSize();\n+        Color oldColor = g.getColor();\n+\n+        \/\/ draw border\n+        g.setColor(getBackground());\n+        g.fill3DRect(0, 0, size.width, size.height, false);\n+        g.fill3DRect(3, 3, size.width - 6, size.height - 6, true);\n+\n+        \/\/ draw text\n+        FontMetrics metrics = g.getFontMetrics();\n+        int centerX = size.width \/ 2;\n+        int centerY = size.height \/ 2;\n+        int textX = centerX - (metrics.stringWidth(labelString) \/ 2);\n+        int textY = centerY + ((metrics.getMaxAscent()\n+                + metrics.getMaxDescent()) \/ 2);\n+        g.setColor(getForeground());\n+        g.drawString(labelString, textX, textY);\n+\n+        g.setColor(oldColor);\n+    }\n+\n+    \/**\n+     * Verifies that the font is correct and prints a warning\n+     * message and\/or throws a RuntimeException if it is not.\n+     *\/\n+    private void verifyFont(Graphics g) {\n+        Font desiredFont = LightweightFontTest.desiredFont;\n+        Font actualFont = g.getFont();\n+        if (!actualFont.equals(desiredFont)) {\n+            PassFailJFrame.log(\"AWT BUG: FONT INFORMATION LOST!\");\n+            PassFailJFrame.log(\"         Desired font: \" + desiredFont);\n+            PassFailJFrame.log(\"          Actual font: \" + actualFont);\n+            PassFailJFrame.forceFail();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/LightweightComponent\/LightweightFontTest\/LightweightFontTest.java","additions":182,"deletions":0,"binary":false,"changes":182,"status":"added"}]}