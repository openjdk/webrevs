{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import java.util.Comparators;\n@@ -192,0 +191,40 @@\n+    \/**\n+     * Returns the greater of two values according to this comparator.\n+     * If the arguments are equal with respect to this comparator,\n+     * the {@code o1} argument is returned.\n+     *\n+     * @param   o1   an argument.\n+     * @param   o2   another argument.\n+     * @param   <U> the type of the arguments and the result.\n+     * @return  the larger of {@code o1} and {@code o2} according to this comparator.\n+     * @throws  NullPointerException if an argument is null and this\n+     *          comparator does not permit null arguments\n+     * @throws  ClassCastException if the arguments' types prevent them from\n+     *          being compared by this comparator.\n+     *\n+     * @since 26\n+     *\/\n+    default <U extends T> U max(U o1, U o2) {\n+        return compare(o1, o2) >= 0 ? o1 : o2;\n+    }\n+\n+    \/**\n+     * Returns the smaller of two values according to this comparator.\n+     * If the arguments are equal with respect to this comparator,\n+     * the {@code o1} argument is returned.\n+     *\n+     * @param   o1   an argument.\n+     * @param   o2   another argument.\n+     * @param   <U> the type of the arguments and the result.\n+     * @return  the smaller of {@code o1} and {@code o2} according to this comparator.\n+     * @throws  NullPointerException if an argument is null and this\n+     *          comparator does not permit null arguments\n+     * @throws  ClassCastException if the arguments' types prevent them from\n+     *          being compared by this comparator.\n+     *\n+     * @since 26\n+     *\/\n+    default <U extends T> U min(U o1, U o2) {\n+        return compare(o1, o2) <= 0 ? o1 : o2;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/Comparator.java","additions":41,"deletions":2,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8356995\n+ * @summary Comparator min\/max method tests\n+ * @run junit MinMaxTest\n+ *\/\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.Comparator;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class MinMaxTest {\n+  @Test\n+  void testMin() {\n+    Comparator<String> c = Comparator.naturalOrder();\n+    assertEquals(\"a\", c.min(\"a\", \"b\"));\n+    assertEquals(\"a\", c.min(\"b\", \"a\"));\n+  }\n+\n+  @Test\n+  void testMax() {\n+    Comparator<String> c = Comparator.naturalOrder();\n+    assertEquals(\"b\", c.max(\"a\", \"b\"));\n+    assertEquals(\"b\", c.max(\"b\", \"a\"));\n+  }\n+\n+  @Test\n+  void testThrowsNPE() {\n+    Comparator<String> c = Comparator.naturalOrder();\n+    assertThrows(NullPointerException.class, () -> c.min(null, \"a\"));\n+    assertThrows(NullPointerException.class, () -> c.min(\"a\", null));\n+    assertThrows(NullPointerException.class, () -> c.max(null, \"a\"));\n+    assertThrows(NullPointerException.class, () -> c.max(\"a\", null));\n+  }\n+\n+  @Test\n+  void testThrowsCCE() {\n+    @SuppressWarnings(\"unchecked\")\n+    Comparator<Object> c = (Comparator<Object>) (Comparator<?>)Comparator.naturalOrder();\n+    assertThrows(ClassCastException.class, () -> c.min(1, \"a\"));\n+    assertThrows(ClassCastException.class, () -> c.min(\"a\", 1));\n+    assertThrows(ClassCastException.class, () -> c.max(1, \"a\"));\n+    assertThrows(ClassCastException.class, () -> c.max(\"a\", 1));\n+  }\n+\n+  @Test\n+  void testEqualReturnFirst() {\n+    Comparator<Object> allEqual = (_, _) -> 0;\n+    Object o1 = new Object();\n+    Object o2 = new Object();\n+    assertSame(o1, allEqual.min(o1, o2));\n+    assertSame(o1, allEqual.max(o1, o2));\n+  }\n+\n+  @Test\n+  void testComparatorSubtype() {\n+    Comparator<CharSequence> byLength = Comparator.comparing(CharSequence::length);\n+    String s1 = \"long_string\";\n+    String s2 = \"short\";\n+    String min = byLength.min(s1, s2);\n+    String max = byLength.max(s1, s2);\n+    assertEquals(s1, max);\n+    assertEquals(s2, min);\n+  }\n+}\n","filename":"test\/jdk\/java\/util\/Comparator\/MinMaxTest.java","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"}]}