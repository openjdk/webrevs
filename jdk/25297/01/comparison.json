{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import java.util.Comparators;\n@@ -192,0 +191,36 @@\n+    \/**\n+     * Returns the greater of two values according to this comparator.\n+     * If the arguments are equal with respect to this comparator,\n+     * the {@code a} argument is returned.\n+     *\n+     * @param   a   an argument.\n+     * @param   b   another argument.\n+     * @return  the larger of {@code a} and {@code b} according to this comparator.\n+     * @throws  ClassCastException if the collection contains elements that are\n+     *          not <i>mutually comparable<\/i> (for example, strings and\n+     *          integers).\n+     *\n+     * @since 25\n+     *\/\n+    default T max(T a, T b) {\n+        return compare(a, b) >= 0 ? a : b;\n+    }\n+\n+    \/**\n+     * Returns the smaller of two values according to this comparator.\n+     * If the arguments are equal with respect to this comparator,\n+     * the {@code a} argument is returned.\n+     *\n+     * @param   a   an argument.\n+     * @param   b   another argument.\n+     * @return  the smaller of {@code a} and {@code b} according to this comparator.\n+     * @throws  ClassCastException if the collection contains elements that are\n+     *          not <i>mutually comparable<\/i> (for example, strings and\n+     *          integers).\n+     *\n+     * @since 25\n+     *\/\n+    default T min(T a, T b) {\n+        return compare(a, b) <= 0 ? a : b;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/Comparator.java","additions":37,"deletions":2,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8356995\n+ * @summary Comparator min\/max method tests\n+ * @run junit MinMaxTest\n+ *\/\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.Comparator;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class MinMaxTest {\n+  @Test\n+  public void testMin() {\n+    Comparator<String> c = Comparator.naturalOrder();\n+    assertEquals(\"a\", c.min(\"a\", \"b\"));\n+    assertEquals(\"a\", c.min(\"b\", \"a\"));\n+  }\n+\n+  @Test\n+  public void testMax() {\n+    Comparator<String> c = Comparator.naturalOrder();\n+    assertEquals(\"b\", c.max(\"a\", \"b\"));\n+    assertEquals(\"b\", c.max(\"b\", \"a\"));\n+  }\n+\n+  @Test\n+  public void testThrowsNPE() {\n+    Comparator<String> c = Comparator.naturalOrder();\n+    assertThrows(NullPointerException.class, () -> c.min(null, \"a\"));\n+    assertThrows(NullPointerException.class, () -> c.min(\"a\", null));\n+    assertThrows(NullPointerException.class, () -> c.max(null, \"a\"));\n+    assertThrows(NullPointerException.class, () -> c.max(\"a\", null));\n+  }\n+\n+  @Test\n+  public void testThrowsCCE() {\n+    @SuppressWarnings(\"unchecked\")\n+    Comparator<Object> c = (Comparator<Object>) (Comparator<?>)Comparator.naturalOrder();\n+    assertThrows(ClassCastException.class, () -> c.min(1, \"a\"));\n+    assertThrows(ClassCastException.class, () -> c.min(\"a\", 1));\n+    assertThrows(ClassCastException.class, () -> c.max(1, \"a\"));\n+    assertThrows(ClassCastException.class, () -> c.max(\"a\", 1));\n+  }\n+\n+  @Test\n+  public void testEqualReturnFirst() {\n+    Comparator<Object> allEqual = (_, _) -> 0;\n+    Object o1 = new Object();\n+    Object o2 = new Object();\n+    assertSame(o1, allEqual.min(o1, o2));\n+    assertSame(o1, allEqual.max(o1, o2));\n+  }\n+}\n","filename":"test\/jdk\/java\/util\/Comparator\/MinMaxTest.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"}]}