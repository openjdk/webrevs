{"files":[{"patch":"@@ -4768,0 +4768,13 @@\n+#ifdef ASSERT\n+        \/\/ See PhaseIdealLoop::do_unroll\n+        \/\/ This property is desirable, but it maybe not hold after cloning a loop.\n+        \/\/ In such a case, we bailout unrolling, and rely on IGVN to cleanup stuff.\n+        \/\/ We are here before loop cloning (before iteration_split), so if there is a\n+        \/\/ mess, it must come from the previous round of loop optimizations, which is bad.\n+        \/\/ On the other hand, if this assert passes, bailing out in do_unroll means that\n+        \/\/ this property was broken in the current round of loop optimization, which is\n+        \/\/ acceptable.\n+        if (!head->is_pre_loop() && !head->is_post_loop()) {\n+          assert(opaque->outcnt() == 1 && opaque->in(1) == head->limit(), \"IGVN should have cleaned that up!\");\n+        }\n+#endif\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"}]}