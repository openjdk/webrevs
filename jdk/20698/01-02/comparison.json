{"files":[{"patch":"@@ -1361,1 +1361,1 @@\n-  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_64bit);\n+  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_32bit);\n@@ -1403,1 +1403,1 @@\n-  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_64bit);\n+  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_32bit);\n@@ -1461,0 +1461,1 @@\n+  InstructionMark im(this);\n@@ -1475,1 +1476,0 @@\n-  \/\/ (void) evex_prefix_and_encode_ndd(src->encoding(), dst->encoding(), 0, VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes);\n@@ -1780,1 +1780,1 @@\n-  (void) evex_prefix_and_encode_ndd(src1->encoding(), dst->encoding(), src2->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags);\n+  (void) evex_prefix_and_encode_ndd(src1->encoding(), dst->encoding(), src2->encoding(), VEX_SIMD_66, VEX_OPCODE_0F_3C, &attributes, no_flags);\n@@ -1793,1 +1793,1 @@\n-  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_64bit);\n+  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_32bit);\n@@ -1819,1 +1819,1 @@\n-  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_64bit);\n+  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_32bit);\n@@ -1835,1 +1835,1 @@\n-  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_64bit);\n+  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_32bit);\n@@ -1837,0 +1837,1 @@\n+  emit_int8(0x23);\n@@ -2642,1 +2643,0 @@\n-  \/\/ Don't use it directly. Use MacroAssembler::decrement() instead.\n@@ -2721,1 +2721,1 @@\n-  emit_int16((unsigned char)0xA7, (0xE8 | encode));\n+  emit_int16((unsigned char)0xF7, (0xE8 | encode));\n@@ -4583,1 +4583,1 @@\n-  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_64bit);\n+  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_32bit);\n@@ -4637,1 +4637,1 @@\n-  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_64bit);\n+  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_32bit);\n@@ -6593,1 +6593,1 @@\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n+  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n@@ -6647,1 +6647,1 @@\n-  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_64bit);\n+  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_32bit);\n@@ -6670,1 +6670,1 @@\n-  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_64bit);\n+  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_32bit);\n@@ -6687,0 +6687,1 @@\n+  assert(isShiftCount(imm8), \"illegal shift count\");\n@@ -6690,1 +6691,1 @@\n-    emit_int16((unsigned char)0xD1, (0xF8 | encode));\n+    emit_int16((unsigned char)0xD1, (0xE0 | encode));\n@@ -6692,1 +6693,1 @@\n-    emit_int24((unsigned char)0xC1, (0xF8 | encode), imm8);\n+    emit_int24((unsigned char)0xC1, (0xE0 | encode), imm8);\n@@ -6723,0 +6724,1 @@\n+  assert(isShiftCount(imm8), \"illegal shift count\");\n@@ -6725,1 +6727,1 @@\n-  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_64bit);\n+  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_32bit);\n@@ -6748,1 +6750,1 @@\n-  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_64bit);\n+  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_32bit);\n@@ -6765,0 +6767,1 @@\n+  assert(isShiftCount(imm8), \"illegal shift count\");\n@@ -6794,1 +6797,1 @@\n-  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_64bit);\n+  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_32bit);\n@@ -6819,1 +6822,1 @@\n-  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_64bit);\n+  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_32bit);\n@@ -7546,1 +7549,1 @@\n-  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_64bit);\n+  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_32bit);\n@@ -7572,1 +7575,1 @@\n-  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_64bit);\n+  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_32bit);\n@@ -7600,1 +7603,1 @@\n-  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_64bit);\n+  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_32bit);\n@@ -7645,1 +7648,1 @@\n-  (void) evex_prefix_and_encode_ndd(src1->encoding(), dst->encoding(), src2->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags);\n+  (void) evex_prefix_and_encode_ndd(src1->encoding(), dst->encoding(), src2->encoding(), VEX_SIMD_66, VEX_OPCODE_0F_3C, &attributes, no_flags);\n@@ -7662,1 +7665,1 @@\n-  evex_prefix_ndd(src2, dst->encoding(), src1->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags);\n+  evex_prefix_ndd(src2, dst->encoding(), src1->encoding(), VEX_SIMD_66, VEX_OPCODE_0F_3C, &attributes, no_flags);\n@@ -12251,1 +12254,0 @@\n-  \/\/ Don't use it directly. Use MacroAssembler::deccrementl() instead.\n@@ -12746,1 +12748,1 @@\n-void Assembler::vex_prefix(Address adr, int nds_enc, int xreg_enc, VexSimdPrefix pre, VexOpcode opc, InstructionAttr *attributes, bool nds_is_ndd, bool force_evex, bool no_flags) {\n+void Assembler::vex_prefix(Address adr, int nds_enc, int xreg_enc, VexSimdPrefix pre, VexOpcode opc, InstructionAttr *attributes, bool nds_is_ndd, bool no_flags) {\n@@ -12751,1 +12753,1 @@\n-  bool is_extended = adr.base_needs_rex2() || adr.index_needs_rex2() || nds_enc >= 16 || xreg_enc >= 16 || nds_is_ndd || force_evex;\n+  bool is_extended = adr.base_needs_rex2() || adr.index_needs_rex2() || nds_enc >= 16 || xreg_enc >= 16 || nds_is_ndd;\n@@ -12803,1 +12805,11 @@\n-int Assembler::vex_prefix_and_encode(int dst_enc, int nds_enc, int src_enc, VexSimdPrefix pre, VexOpcode opc, InstructionAttr *attributes, bool src_is_gpr, bool nds_is_ndd, bool force_evex, bool no_flags) {\n+void Assembler::evex_prefix_ndd(Address adr, int ndd_enc, int xreg_enc, VexSimdPrefix pre, VexOpcode opc, InstructionAttr *attributes, bool no_flags) {\n+  attributes->set_is_evex_instruction();\n+  vex_prefix(adr, ndd_enc, xreg_enc, pre, opc, attributes, \/* nds_is_ndd *\/ true, no_flags);\n+}\n+\n+void Assembler::evex_prefix_nf(Address adr, int ndd_enc, int xreg_enc, VexSimdPrefix pre, VexOpcode opc, InstructionAttr *attributes, bool no_flags) {\n+  attributes->set_is_evex_instruction();\n+  vex_prefix(adr, ndd_enc, xreg_enc, pre, opc, attributes, \/* nds_is_ndd *\/ false, no_flags);\n+}\n+\n+int Assembler::vex_prefix_and_encode(int dst_enc, int nds_enc, int src_enc, VexSimdPrefix pre, VexOpcode opc, InstructionAttr *attributes, bool src_is_gpr, bool nds_is_ndd, bool no_flags) {\n@@ -12841,1 +12853,1 @@\n-  if ((UseAVX > 2 && !attributes->is_legacy_mode()) || nds_is_ndd || force_evex)\n+  if (UseAVX > 2 && !attributes->is_legacy_mode())\n@@ -12861,0 +12873,12 @@\n+int Assembler::evex_prefix_and_encode_ndd(int dst_enc, int nds_enc, int src_enc, VexSimdPrefix pre, VexOpcode opc,\n+                           InstructionAttr *attributes, bool no_flags) {\n+  attributes->set_is_evex_instruction();\n+  return vex_prefix_and_encode(dst_enc, nds_enc, src_enc, pre, opc, attributes, \/* src_is_gpr *\/ true, \/* nds_is_ndd *\/ true, no_flags);\n+}\n+\n+int Assembler::evex_prefix_and_encode_nf(int dst_enc, int nds_enc, int src_enc, VexSimdPrefix pre, VexOpcode opc,\n+                           InstructionAttr *attributes, bool no_flags) {\n+  attributes->set_is_evex_instruction();\n+  return vex_prefix_and_encode(dst_enc, nds_enc, src_enc, pre, opc, attributes, \/* src_is_gpr *\/ true, \/* nds_is_ndd *\/ false, no_flags);\n+}\n+\n@@ -13706,1 +13730,0 @@\n-  \/\/ Don't use it directly. Use MacroAssembler::incrementl() instead.\n@@ -14787,2 +14810,0 @@\n-  \/\/ Don't use it directly. Use MacroAssembler::decrementl() instead.\n-  \/\/ Use two-byte form (one-byte form is a REX prefix in 64-bit mode)\n@@ -14802,2 +14823,0 @@\n-  \/\/ Don't use it directly. Use MacroAssembler::incrementq() instead.\n-  \/\/ Use two-byte form (one-byte from is a REX prefix in 64-bit mode)\n@@ -14817,1 +14836,0 @@\n-  \/\/ Don't use it directly. Use MacroAssembler::increment() instead.\n@@ -14883,1 +14901,1 @@\n-  int encode = vex_prefix_and_encode(dst->encoding(), 0, src->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, \/* src_is_gpr *\/ true, \/* nds_is_ndd *\/ false, no_flags);\n+  int encode = evex_prefix_and_encode_nf(dst->encoding(), 0, src->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags);\n@@ -14900,1 +14918,1 @@\n-  int encode = vex_prefix_and_encode(0, 0, src->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, \/* src_is_gpr *\/ true, \/* nds_is_ndd *\/ false, no_flags);\n+  int encode = evex_prefix_and_encode_nf(0, 0, src->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags);\n@@ -15827,0 +15845,1 @@\n+  assert(isShiftCount(imm8 >> 1), \"illegal shift count\");\n@@ -15885,1 +15904,1 @@\n-  emit_int16((unsigned char)0xD1, (0xF8 | encode));\n+  emit_int16((unsigned char)0xD3, (0xF8 | encode));\n@@ -15921,0 +15940,1 @@\n+  InstructionMark im(this);\n@@ -15934,1 +15954,1 @@\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n+  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n@@ -16039,1 +16059,1 @@\n-  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_32bit);\n+  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_64bit);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":61,"deletions":41,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -794,3 +794,1 @@\n-  void evex_prefix_ndd(Address adr, int ndd_enc, int xreg_enc, VexSimdPrefix pre, VexOpcode opc, InstructionAttr *attributes, bool no_flags = false) {\n-    vex_prefix(adr, ndd_enc, xreg_enc, pre, opc, attributes, \/* nds_is_ndd *\/ true , \/* force_evex *\/ true, no_flags);\n-  }\n+  void evex_prefix_ndd(Address adr, int ndd_enc, int xreg_enc, VexSimdPrefix pre, VexOpcode opc, InstructionAttr *attributes, bool no_flags = false);\n@@ -798,3 +796,1 @@\n-  void evex_prefix_nf(Address adr, int ndd_enc, int xreg_enc, VexSimdPrefix pre, VexOpcode opc, InstructionAttr *attributes, bool no_flags = false) {\n-    vex_prefix(adr, ndd_enc, xreg_enc, pre, opc, attributes, \/* nds_is_ndd *\/ false , \/* force_evex *\/ true, no_flags);\n-  }\n+  void evex_prefix_nf(Address adr, int ndd_enc, int xreg_enc, VexSimdPrefix pre, VexOpcode opc, InstructionAttr *attributes, bool no_flags = false);\n@@ -803,1 +799,1 @@\n-                  InstructionAttr *attributes, bool nds_is_ndd = false, bool force_evex = false, bool no_flags = false);\n+                  InstructionAttr *attributes, bool nds_is_ndd = false, bool no_flags = false);\n@@ -807,1 +803,1 @@\n-                             InstructionAttr *attributes, bool src_is_gpr = false, bool nds_is_ndd = false, bool force_evex = false, bool no_flags = false);\n+                             InstructionAttr *attributes, bool src_is_gpr = false, bool nds_is_ndd = false, bool no_flags = false);\n@@ -810,3 +806,1 @@\n-                             InstructionAttr *attributes, bool no_flags = false) {\n-    return vex_prefix_and_encode(dst_enc, nds_enc, src_enc, pre, opc, attributes, \/* src_is_gpr *\/ true, \/* nds_is_ndd *\/ true , \/* force_evex *\/ true, no_flags);\n-  }\n+                                  InstructionAttr *attributes, bool no_flags = false);\n@@ -815,3 +809,1 @@\n-                             InstructionAttr *attributes, bool no_flags = false) {\n-    return vex_prefix_and_encode(dst_enc, nds_enc, src_enc, pre, opc, attributes, \/* src_is_gpr *\/ true, \/* nds_is_ndd *\/ false, \/* force_evex *\/ true, no_flags);\n-  }\n+                                 InstructionAttr *attributes, bool no_flags = false);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":6,"deletions":14,"binary":false,"changes":20,"status":"modified"}]}