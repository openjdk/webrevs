{"files":[{"patch":"@@ -1358,8 +1358,0 @@\n-void Assembler::eadcl(Register dst, Address src, int32_t imm32) {\n-  InstructionMark im(this);\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n-  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_32bit);\n-  evex_prefix_ndd(src, dst->encoding(), 0, VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes);\n-  emit_arith_operand(0x81, rdx, src, imm32);\n-}\n-\n@@ -1373,9 +1365,0 @@\n-void Assembler::eadcl(Register dst, Address src1, Register src2) {\n-  InstructionMark im(this);\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n-  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_32bit);\n-  evex_prefix_ndd(src1, dst->encoding(), src2->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes);\n-  emit_int8(0x11);\n-  emit_operand(src2, src1, 0);\n-}\n-\n@@ -1387,6 +1370,0 @@\n-void Assembler::eadcl(Register dst, Register src, int32_t imm32) {\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n-  int encode = evex_prefix_and_encode_ndd(0, dst->encoding(), src->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes);\n-  emit_arith(0x81, 0xD0, src, imm32);\n-}\n-\n@@ -1400,9 +1377,0 @@\n-void Assembler::eadcl(Register dst, Register src1, Address src2) {\n-  InstructionMark im(this);\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n-  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_32bit);\n-  evex_prefix_ndd(src2, dst->encoding(), src1->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes);\n-  emit_int8(0x13);\n-  emit_operand(src1, src2, 0);\n-}\n-\n@@ -1414,7 +1382,0 @@\n-void Assembler::eadcl(Register dst, Register src1, Register src2) {\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n-  (void) evex_prefix_and_encode_ndd(src1->encoding(), dst->encoding(), src2->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes);\n-  \/\/ opcode matches gcc\n-  emit_arith(0x11, 0xC0, src1, src2);\n-}\n-\n@@ -1443,10 +1404,0 @@\n-void Assembler::eaddb(Register dst, Address src, int imm8, bool no_flags) {\n-  InstructionMark im(this);\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n-  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_8bit);\n-  evex_prefix_ndd(src, dst->encoding(), 0, VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags);\n-  emit_int8((unsigned char)0x80);\n-  emit_operand(rax, src, 1);\n-  emit_int8(imm8);\n-}\n-\n@@ -1460,9 +1411,0 @@\n-void Assembler::eaddb(Register dst, Address src1, Register src2, bool no_flags) {\n-  InstructionMark im(this);\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n-  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_8bit);\n-  evex_prefix_ndd(src1, dst->encoding(), src2->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags);\n-  emit_int8(0x00);\n-  emit_operand(src2, src1, 0);\n-}\n-\n@@ -1474,6 +1416,0 @@\n-void Assembler::eaddb(Register dst, Register src, int imm8, bool no_flags) {\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n-  (void) evex_prefix_and_encode_ndd(0, dst->encoding(), src->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags);\n-  emit_arith_b(0x80, 0xC0, src, imm8);\n-}\n-\n@@ -1486,7 +1422,0 @@\n-void Assembler::eaddw(Register dst, Register src1, Register src2, bool no_flags) {\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n-  (void) evex_prefix_and_encode_ndd(src1->encoding(), dst->encoding(), src2->encoding(), VEX_SIMD_66, VEX_OPCODE_0F_3C, &attributes, no_flags);\n-  \/\/ opcode matches gcc\n-  emit_arith(0x01, 0xC0, src1, src2);\n-}\n-\n@@ -1502,10 +1431,0 @@\n-void Assembler::eaddw(Register dst, Address src, int imm16, bool no_flags) {\n-  InstructionMark im(this);\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n-  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_16bit);\n-  evex_prefix_ndd(src, dst->encoding(), 0, VEX_SIMD_66, VEX_OPCODE_0F_3C, &attributes, no_flags);\n-  emit_int8((unsigned char)0x81);\n-  emit_operand(rax, src, 2);\n-  emit_int16(imm16);\n-}\n-\n@@ -1520,9 +1439,0 @@\n-void Assembler::eaddw(Register dst, Address src1, Register src2, bool no_flags) {\n-  InstructionMark im(this);\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n-  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_16bit);\n-  evex_prefix_ndd(src1, dst->encoding(), src2->encoding(), VEX_SIMD_66, VEX_OPCODE_0F_3C, &attributes, no_flags);\n-  emit_int8(0x01);\n-  emit_operand(src2, src1, 0);\n-}\n-\n@@ -1764,9 +1674,0 @@\n-void Assembler::eandb(Register dst, Address src1, Register src2, bool no_flags) {\n-  InstructionMark im(this);\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n-  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_8bit);\n-  evex_prefix_ndd(src1, dst->encoding(), src2->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags);\n-  emit_int8(0x20);\n-  emit_operand(src2, src1, 0);\n-}\n-\n@@ -1778,6 +1679,0 @@\n-void Assembler::eandw(Register dst, Register src1, Register src2, bool no_flags) {\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n-  (void) evex_prefix_and_encode_ndd(src1->encoding(), dst->encoding(), src2->encoding(), VEX_SIMD_66, VEX_OPCODE_0F_3C, &attributes, no_flags);\n-  emit_arith(0x23, 0xC0, src1, src2);\n-}\n-\n@@ -1795,1 +1690,1 @@\n-  emit_arith_operand(0x81, as_Register(4), src, imm32);\n+  emit_arith_operand(0x81, rsp, src, imm32);\n@@ -1816,9 +1711,0 @@\n-void Assembler::eandl(Register dst, Address src1, Register src2, bool no_flags) {\n-  InstructionMark im(this);\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n-  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_32bit);\n-  evex_prefix_ndd(src1, dst->encoding(), src2->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags);\n-  emit_int8(0x21);\n-  emit_operand(src2, src1, 0);\n-}\n-\n@@ -2016,1 +1902,0 @@\n-  NOT_LP64(guarantee(VM_Version::supports_cmov(), \"illegal instruction\"));\n@@ -2696,1 +2581,1 @@\n-void Assembler::eidivl(Register src, bool no_flags) { \/\/ Unsigned\n+void Assembler::eidivl(Register src, bool no_flags) { \/\/ Signed\n@@ -6794,8 +6679,0 @@\n-void Assembler::esbbl(Register dst, Address src, int32_t imm32) {\n-  InstructionMark im(this);\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n-  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_32bit);\n-  evex_prefix_ndd(src, dst->encoding(), 0, VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes);\n-  emit_arith_operand(0x81, rbx, src, imm32);\n-}\n-\n@@ -6807,6 +6684,0 @@\n-void Assembler::esbbl(Register dst, Register src, int32_t imm32) {\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n-  (void) evex_prefix_and_encode_ndd(0, dst->encoding(), src->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes);\n-  emit_arith(0x81, 0xD8, src, imm32);\n-}\n-\n@@ -6820,8 +6691,0 @@\n-void Assembler::esbbl(Register dst, Register src1, Address src2) {\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n-  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_32bit);\n-  evex_prefix_ndd(src2, dst->encoding(), src1->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes);\n-  emit_int8(0x1B);\n-  emit_operand(src1, src2, 0);\n-}\n-\n@@ -6833,7 +6696,0 @@\n-void Assembler::esbbl(Register dst, Register src1, Register src2) {\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n-  (void) evex_prefix_and_encode_ndd(src1->encoding(), dst->encoding(), src2->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes);\n-  \/\/ opcode matches gcc\n-  emit_arith(0x19, 0xC0, src1, src2);\n-}\n-\n@@ -12723,1 +12579,1 @@\n-  \/\/ P2: byte 4 as zL'Lbv'aaa or 00L0VF00 where V = V4 and F = NF (no flags)\n+  \/\/ P2: byte 4 as zL'Lbv'aaa or 00LXVF00 where V = V4, X(extended context) = ND and F = NF (no flags)\n@@ -14342,6 +14198,0 @@\n-void Assembler::eadcq(Register dst, Register src, int32_t imm32) {\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n-  int encode = evex_prefix_and_encode_ndd(0, dst->encoding(), src->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes);\n-  emit_arith(0x81, 0xD0, src, imm32);\n-}\n-\n@@ -14354,9 +14204,0 @@\n-void Assembler::eadcq(Register dst, Register src1, Address src2) {\n-  InstructionMark im(this);\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n-  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_64bit);\n-  evex_prefix_ndd(src2, dst->encoding(), src1->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes);\n-  emit_int8(0x13);\n-  emit_operand(src1, src2, 0);\n-}\n-\n@@ -14368,7 +14209,0 @@\n-void Assembler::eadcq(Register dst, Register src1, Register src2) {\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n-  (void) evex_prefix_and_encode_ndd(src1->encoding(), dst->encoding(), src2->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes);\n-  \/\/ opcode matches gcc\n-  emit_arith(0x11, 0xC0, src1, src2);\n-}\n-\n@@ -15914,8 +15748,0 @@\n-void Assembler::esbbq(Register dst, Address src, int32_t imm32) {\n-  InstructionMark im(this);\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n-  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_64bit);\n-  evex_prefix_ndd(src, dst->encoding(), 0, VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes);\n-  emit_arith_operand(0x81, rbx, src, imm32);\n-}\n-\n@@ -15927,6 +15753,0 @@\n-void Assembler::esbbq(Register dst, Register src, int32_t imm32) {\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n-  (void) evex_prefix_and_encode_ndd(0, dst->encoding(), src->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes);\n-  emit_arith(0x81, 0xD8, src, imm32);\n-}\n-\n@@ -15939,9 +15759,0 @@\n-void Assembler::esbbq(Register dst, Register src1, Address src2) {\n-  InstructionMark im(this);\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n-  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_64bit);\n-  evex_prefix_ndd(src2, dst->encoding(), src1->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes);\n-  emit_int8(0x1B);\n-  emit_operand(src1, src2, 0);\n-}\n-\n@@ -15953,7 +15764,0 @@\n-void Assembler::esbbq(Register dst, Register src1, Register src2) {\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n-  (void) evex_prefix_and_encode_ndd(src1->encoding(), dst->encoding(), src2->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes);\n-  \/\/ opcode matches gcc\n-  emit_arith(0x19, 0xC0, src1, src2);\n-}\n-\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":3,"deletions":199,"binary":false,"changes":202,"status":"modified"},{"patch":"@@ -1082,6 +1082,0 @@\n-  void eadcl(Register dst, Address src, int32_t imm32);\n-  void eadcl(Register dst, Address src1, Register src2);\n-  void eadcl(Register dst, Register src, int32_t imm32);\n-  void eadcl(Register dst, Register src1, Address src2);\n-  void eadcl(Register dst, Register src1, Register src2);\n-\n@@ -1089,1 +1083,0 @@\n-  void eadcq(Register dst, Register src, int32_t imm32);\n@@ -1091,1 +1084,0 @@\n-  void eadcq(Register dst, Register src1, Address src2);\n@@ -1093,1 +1085,0 @@\n-  void eadcq(Register dst, Register src1, Register src2);\n@@ -1096,1 +1087,0 @@\n-  void eaddb(Register dst, Address src, int imm8, bool no_flags);\n@@ -1098,1 +1088,0 @@\n-  void eaddb(Register dst, Address src1, Register src2, bool no_flags);\n@@ -1100,1 +1089,0 @@\n-  void eaddb(Register dst, Register src, int imm8, bool no_flags);\n@@ -1102,1 +1090,0 @@\n-  void eaddw(Register dst, Register src1, Register srcs, bool no_flags);\n@@ -1104,1 +1091,0 @@\n-  void eaddw(Register dst, Address src, int imm16, bool no_flags);\n@@ -1106,1 +1092,0 @@\n-  void eaddw(Register dst, Address src1, Register src2, bool no_flags);\n@@ -1169,1 +1154,0 @@\n-  void eandw(Register dst, Register src1, Register src2, bool no_flags);\n@@ -1171,1 +1155,0 @@\n-  void eandb(Register dst, Address src1, Register src2, bool no_flags);\n@@ -1182,1 +1165,0 @@\n-  void eandl(Register dst, Address src1, Register src2, bool no_flags);\n@@ -1568,1 +1550,0 @@\n-  \/\/ void eimull(Register dst, Register src, bool no_flags);\n@@ -1575,1 +1556,0 @@\n-  \/\/ void eimull(Register dst, Address src, bool no_flags);\n@@ -2333,1 +2313,0 @@\n-  void esbbl(Register dst, Address src, int32_t imm32);\n@@ -2335,1 +2314,0 @@\n-  void esbbl(Register dst, Register src, int32_t imm32);\n@@ -2337,1 +2315,0 @@\n-  void esbbl(Register dst, Register src1, Address src2);\n@@ -2339,1 +2316,0 @@\n-  void esbbl(Register dst, Register src1, Register src2);\n@@ -2342,1 +2318,0 @@\n-  void esbbq(Register dst, Address src, int32_t imm32);\n@@ -2344,1 +2319,0 @@\n-  void esbbq(Register dst, Register src, int32_t imm32);\n@@ -2346,1 +2320,0 @@\n-  void esbbq(Register dst, Register src1, Address src2);\n@@ -2348,1 +2321,0 @@\n-  void esbbq(Register dst, Register src, Register src2);\n@@ -2386,1 +2358,0 @@\n-  \/\/ void eshll(Register dst, bool no_flags);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":0,"deletions":29,"binary":false,"changes":29,"status":"modified"}]}