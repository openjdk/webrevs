{"files":[{"patch":"@@ -117,0 +117,2 @@\n+  # nio tests' libCreationTimeHelper native needs -ldl linker flag\n+  BUILD_JDK_JTREG_LIBRARIES_LDFLAGS_libCreationTimeHelper := -ldl\n","filename":"make\/test\/JtregNativeJdk.gmk","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2024 Alibaba Group Holding Limited. All Rights Reserved.\n@@ -28,3 +29,3 @@\n- * @library  ..\/.. \/test\/lib\n- * @build jdk.test.lib.Platform\n- * @run main CreationTime\n+ * @library  ..\/.. \/test\/lib \/java\/foreign\n+ * @build jdk.test.lib.Platform NativeTestHelper\n+ * @run main\/othervm\/native --enable-native-access=ALL-UNNAMED CreationTime\n@@ -37,3 +38,3 @@\n- * @library  ..\/.. \/test\/lib\n- * @build jdk.test.lib.Platform\n- * @run main CreationTime .\n+ * @library  ..\/.. \/test\/lib \/java\/foreign\n+ * @build jdk.test.lib.Platform NativeTestHelper\n+ * @run main\/othervm\/native --enable-native-access=ALL-UNNAMED CreationTime .\n@@ -54,2 +55,0 @@\n-    private static final java.io.PrintStream err = System.err;\n-\n@@ -82,7 +81,2 @@\n-            \/\/ If the file system doesn't support birth time, then skip this test\n-            if (creationTime.toMillis() == 0) {\n-                throw new SkippedException(\"birth time not support for: \" + file);\n-            } else {\n-                err.println(\"File creation time reported as: \" + creationTime);\n-                throw new RuntimeException(\"Expected to be close to: \" + now);\n-            }\n+            System.err.println(\"File creation time reported as: \" + creationTime);\n+            throw new RuntimeException(\"Expected to be close to: \" + now);\n@@ -110,1 +104,6 @@\n-            supportsCreationTimeRead = Linker.nativeLinker().defaultLookup().find(\"statx\").isPresent();\n+            try {\n+                supportsCreationTimeRead = CreationTimeHelper.\n+                        linuxIsCreationTimeSupported(file.toAbsolutePath().toString());\n+            } catch (Throwable e) {\n+                supportsCreationTimeRead = false;\n+            }\n@@ -125,1 +124,3 @@\n-            if (!current.equals(creationTime))\n+            if (!current.equals(creationTime)) {\n+                System.err.println(\"current = \" + current);\n+                System.err.println(\"creationTime = \" + creationTime);\n@@ -127,0 +128,1 @@\n+            }\n","filename":"test\/jdk\/java\/nio\/file\/attribute\/BasicFileAttributeView\/CreationTime.java","additions":19,"deletions":17,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2024 Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.Linker;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.SymbolLookup;\n+import java.lang.foreign.ValueLayout;\n+import java.lang.invoke.MethodHandle;\n+\n+public class CreationTimeHelper extends NativeTestHelper {\n+\n+    static {\n+        System.loadLibrary(\"CreationTimeHelper\");\n+    }\n+\n+    final static Linker abi = Linker.nativeLinker();\n+    static final SymbolLookup lookup = SymbolLookup.loaderLookup();\n+    final static MethodHandle methodHandle = abi.\n+            downcallHandle(lookup.findOrThrow(\"linuxIsCreationTimeSupported\"),\n+            FunctionDescriptor.of(C_BOOL, C_POINTER));\n+\n+    \/\/ Helper so as to determine birth time support or not on Linux.\n+    \/\/ Support is determined in a two-step process:\n+    \/\/ 1. Determine if `statx` system call is available. If available proceed,\n+    \/\/    otherwise return false.\n+    \/\/ 2. Perform an actual `statx` call on the given file and check for birth\n+    \/\/    time support in the mask returned from the call. This is needed,\n+    \/\/    since some file systems, like nfs\/tmpfs etc., don't support birth\n+    \/\/    time even though the `statx` system call is available.\n+    static boolean linuxIsCreationTimeSupported(String file) throws Throwable {\n+        if (!abi.defaultLookup().find(\"statx\").isPresent()) {\n+            return false;\n+        }\n+        try (var arena = Arena.ofConfined()) {\n+            MemorySegment s = arena.allocateFrom(file);\n+            return (boolean)methodHandle.invokeExact(s);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/nio\/file\/attribute\/BasicFileAttributeView\/CreationTimeHelper.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"},{"patch":"@@ -0,0 +1,117 @@\n+\/*\n+ * Copyright (c) 2024 Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+#include \"export.h\"\n+#include <stdbool.h>\n+#if defined(__linux__)\n+#include <linux\/fcntl.h>\n+#include <stdio.h>\n+#include <string.h>\n+#include <sys\/stat.h>\n+#include <bits\/types.h>\n+#include <dlfcn.h>\n+#ifndef STATX_BASIC_STATS\n+#define STATX_BASIC_STATS 0x000007ffU\n+#endif\n+#ifndef STATX_BTIME\n+#define STATX_BTIME 0x00000800U\n+#endif\n+#ifndef RTLD_DEFAULT\n+#define RTLD_DEFAULT RTLD_LOCAL\n+#endif\n+\n+\/*\n+ * Timestamp structure for the timestamps in struct statx.\n+ *\/\n+struct my_statx_timestamp {\n+        __int64_t   tv_sec;\n+        __uint32_t  tv_nsec;\n+        __int32_t   __reserved;\n+};\n+\n+\/*\n+ * struct statx used by statx system call on >= glibc 2.28\n+ * systems\n+ *\/\n+struct my_statx\n+{\n+  __uint32_t stx_mask;\n+  __uint32_t stx_blksize;\n+  __uint64_t stx_attributes;\n+  __uint32_t stx_nlink;\n+  __uint32_t stx_uid;\n+  __uint32_t stx_gid;\n+  __uint16_t stx_mode;\n+  __uint16_t __statx_pad1[1];\n+  __uint64_t stx_ino;\n+  __uint64_t stx_size;\n+  __uint64_t stx_blocks;\n+  __uint64_t stx_attributes_mask;\n+  struct my_statx_timestamp stx_atime;\n+  struct my_statx_timestamp stx_btime;\n+  struct my_statx_timestamp stx_ctime;\n+  struct my_statx_timestamp stx_mtime;\n+  __uint32_t stx_rdev_major;\n+  __uint32_t stx_rdev_minor;\n+  __uint32_t stx_dev_major;\n+  __uint32_t stx_dev_minor;\n+  __uint64_t __statx_pad2[14];\n+};\n+\n+typedef int statx_func(int dirfd, const char *restrict pathname, int flags,\n+                       unsigned int mask, struct my_statx *restrict statxbuf);\n+\n+static statx_func* my_statx_func = NULL;\n+#endif  \/\/#defined(__linux__)\n+\n+\/\/ static boolean linuxIsCreationTimeSupported(char* file)\n+EXPORT bool linuxIsCreationTimeSupported(char* file) {\n+#if defined(__linux__)\n+    struct my_statx stx = {0};\n+    int ret, atflag = AT_SYMLINK_NOFOLLOW;\n+    unsigned int mask = STATX_BASIC_STATS | STATX_BTIME;\n+\n+    my_statx_func = (statx_func*) dlsym(RTLD_DEFAULT, \"statx\");\n+    if (my_statx_func == NULL) {\n+        return false;\n+    }\n+\n+    if (file == NULL) {\n+        printf(\"input file error!\\n\");\n+        return false;\n+    }\n+\n+    ret = my_statx_func(AT_FDCWD, file, atflag, mask, &stx);\n+    if (ret != 0) {\n+        return false;\n+    }\n+    \/\/ On some systems where statx is available but birth time might still not\n+    \/\/ be supported as it's file system specific. The only reliable way to\n+    \/\/ check for supported or not is looking at the filled in STATX_BTIME bit\n+    \/\/ in the returned statx buffer mask.\n+    if ((stx.stx_mask & STATX_BTIME) != 0)\n+        return true;\n+    return false;\n+#else\n+    return false;\n+#endif\n+}\n","filename":"test\/jdk\/java\/nio\/file\/attribute\/BasicFileAttributeView\/libCreationTimeHelper.c","additions":117,"deletions":0,"binary":false,"changes":117,"status":"added"}]}