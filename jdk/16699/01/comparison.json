{"files":[{"patch":"@@ -120,1 +120,1 @@\n-     * @param isLinkPlain   {@code true} if the link should be presented in \"plain\" font,\n+     * @param isPlain       {@code true} if the link should be presented in \"plain\" font,\n@@ -133,1 +133,1 @@\n-                                   boolean isLinkPlain,\n+                                   boolean isPlain,\n@@ -140,1 +140,1 @@\n-        Content labelContent = plainOrCode(isLinkPlain, label);\n+        Content labelContent = plainOrCode(isPlain, label);\n@@ -143,1 +143,1 @@\n-        Content text = plainOrCode(isLinkPlain,\n+        Content text = plainOrCode(isPlain,\n@@ -173,1 +173,1 @@\n-                    labelContent = plainOrCode(isLinkPlain,\n+                    labelContent = plainOrCode(isPlain,\n@@ -205,1 +205,1 @@\n-                    return plainOrCode(isLinkPlain, htmlWriter.getLink(\n+                    return plainOrCode(isPlain, htmlWriter.getLink(\n@@ -208,1 +208,1 @@\n-                labelContent = plainOrCode(isLinkPlain, Text.of(utils.getSimpleName(refClass)));\n+                labelContent = plainOrCode(isPlain, Text.of(utils.getSimpleName(refClass)));\n@@ -270,1 +270,1 @@\n-                            ? plainOrCode(isLinkPlain, Text.of(refMemName))\n+                            ? plainOrCode(isPlain, Text.of(refMemName))\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/taglets\/LinkTaglet.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import com.sun.source.doctree.TextTree;\n@@ -177,1 +178,1 @@\n-                        false,\n+                        isPlain(refSignature, label),\n@@ -192,0 +193,56 @@\n+    }\n+\n+    \/**\n+     * {@return {@code true} if the label should be rendered in plain font}\n+     *\n+     * The method uses a heuristic, to see if the string form of the label\n+     * is a substring of the reference. Thus, for example:\n+     *\n+     * <ul>\n+     * <li>{@code @see MyClass.MY_CONSTANT MY_CONSTANT}  returns {@code true}\n+     * <li>{@code @see MyClass.MY_CONSTANT a constant}  returns {@code false}\n+     * <\/ul>\n+     *\n+     * The result will be {@code true} (meaning, displayed in plain font) if\n+     * any of the following are true about the label:\n+     *\n+     * <ul>\n+     * <li>There is more than a single item in the list of nodes,\n+     *     suggesting there may be formatting nodes.\n+     * <li>There is whitespace outside any parentheses,\n+     *     suggesting the label is a phrase\n+     * <li>There are nested parentheses, or content after the parentheses,\n+     *     which cannot occur in a standalone signature\n+     * <li>The simple name inferred from the reference does not match\n+     *     any simple name inferred from the label\n+     * <\/ul>\n+     *\n+     * @param refSignature the signature of the target of the reference\n+     * @param label the label\n+     *\/\n+    private boolean isPlain(String refSignature, List<? extends DocTree> label) {\n+        if (label.isEmpty()) {\n+            return false;\n+        } else if (label.size() > 1) {\n+            return true;\n+        }\n+\n+        var l0 = label.get(0);\n+        String s;\n+        if (l0 instanceof TextTree t) {\n+            s = t.getBody().trim();\n+        } else {\n+            return true;\n+        }\n+\n+        \/\/ look for whitespace outside any parens, nested parens, or characters after parens:\n+        \/\/ all of which will not be found in a simple signature\n+        var inParens = false;\n+        var ids = new ArrayList<String>();\n+        var sb = new StringBuilder();\n+        for (var i = 0; i < s.length(); i++) {\n+             var ch = s.charAt(i);\n+             if (!sb.isEmpty() && !Character.isJavaIdentifierPart(ch)) {\n+                 ids.add(sb.toString());\n+                 sb.setLength(0);\n+             }\n@@ -193,0 +250,61 @@\n+             switch (ch) {\n+                 case '(' -> {\n+                     if (inParens) {\n+                         return true;\n+                     } else {\n+                         inParens = true;\n+                     }\n+                 }\n+                 case ')' -> {\n+                     if (inParens && i < s.length() - 1) {\n+                         return true;\n+                     } else {\n+                         inParens = false;\n+                     }\n+                 }\n+                 default -> {\n+                     if (!inParens) {\n+                         if (Character.isJavaIdentifierStart(ch)\n+                                 || (!sb.isEmpty() && Character.isJavaIdentifierPart(ch))) {\n+                             sb.append(ch);\n+                         } else if (Character.isWhitespace(ch)) {\n+                             return true;\n+                         }\n+                     }\n+                 }\n+             }\n+        }\n+\n+        if (!sb.isEmpty()) {\n+            ids.add(sb.toString());\n+        }\n+\n+        if (ids.isEmpty()) {\n+            return true;\n+        }\n+\n+        \/\/ final check: does the simple name inferred from the label\n+        \/\/ match the simple name inferred from the reference\n+        var labelSimpleName = ids.get(ids.size() - 1);\n+        var refSimpleName = getSimpleName(refSignature);\n+        return !labelSimpleName.equals((refSimpleName));\n+    }\n+\n+    \/**\n+     * {@return the simple name from a signature}\n+     *\n+     * If there is a member part in the signature, the simple name is the\n+     * identifier after the {@code #} character.\n+     * Otherwise, the simple name is the last identifier in the signature.\n+     *\n+     * @param sig the signature\n+     *\/\n+    private String getSimpleName(String sig) {\n+        int hash = sig.indexOf('#');\n+        if (hash == -1 ) {\n+            int lastDot = sig.lastIndexOf(\".\");\n+            return lastDot == -1 ? sig : sig.substring(lastDot + 1);\n+        } else {\n+            int parens = sig.indexOf(\"(\", hash);\n+            return parens == -1 ? sig.substring(hash + 1) : sig.substring(hash + 1, parens);\n+        }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/taglets\/SeeTaglet.java","additions":119,"deletions":1,"binary":false,"changes":120,"status":"modified"},{"patch":"@@ -115,2 +115,2 @@\n-                    s or interface in java.util\" class=\"external-link\"><code>Link to generic type with \\\n-                    label<\/code><\/a><\/li>\n+                    s or interface in java.util\" class=\"external-link\">Link to generic type with label<\\\n+                    \/a><\/li>\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testGenericTypeLink\/TestGenericTypeLink.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -82,2 +82,2 @@\n-                    <li><a href=\"..\/p2\/Class2.html#class2main\"><code>See main heading in p2.Class2<\/code><\/a><\/li>\n-                    <li><a href=\"..\/p2\/package-summary.html#package-p2-heading\"><code>See heading in p2<\/code><\/a><\/li>\n+                    <li><a href=\"..\/p2\/Class2.html#class2main\">See main heading in p2.Class2<\/a><\/li>\n+                    <li><a href=\"..\/p2\/package-summary.html#package-p2-heading\">See heading in p2<\/a><\/li>\n@@ -92,1 +92,1 @@\n-                    <a href=\"Class2.html#class2-sub-heading\"><code>See sub heading in p2.Class2<\/code><\/a>\"\"\");\n+                    <a href=\"Class2.html#class2-sub-heading\">See sub heading in p2.Class2<\/a>\"\"\");\n@@ -98,1 +98,1 @@\n-                    <a href=\"..\/Class2.html#class2main\"><code>See main heading in p2.ClassB<\/code><\/a>\"\"\");\n+                    <a href=\"..\/Class2.html#class2main\">See main heading in p2.ClassB<\/a>\"\"\");\n@@ -114,1 +114,1 @@\n-                    <a href=\"..\/m2\/com\/m2\/Class2.html#main-heading\"><code>See main heading in Class2<\/code><\/a>\"\"\");\n+                    <a href=\"..\/m2\/com\/m2\/Class2.html#main-heading\">See main heading in Class2<\/a>\"\"\");\n@@ -119,2 +119,2 @@\n-                    <li><a href=\"..\/..\/..\/m2\/com\/m2\/Class2.html#main-heading\"><code>See main heading in Class2<\/code><\/a><\/li>\n-                    <li><a href=\"..\/..\/module-summary.html#module-m1-heading\"><code>See heading in module m1<\/code><\/a><\/li>\n+                    <li><a href=\"..\/..\/..\/m2\/com\/m2\/Class2.html#main-heading\">See main heading in Class2<\/a><\/li>\n+                    <li><a href=\"..\/..\/module-summary.html#module-m1-heading\">See heading in module m1<\/a><\/li>\n@@ -131,1 +131,1 @@\n-                    <li><a href=\"..\/..\/m1\/module-summary.html#module-m1-heading\"><code>Heading in module m1<\/code><\/a><\/li>\"\"\");\n+                    <li><a href=\"..\/..\/m1\/module-summary.html#module-m1-heading\">Heading in module m1<\/a><\/li>\"\"\");\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testSeeLinkAnchor\/TestSeeLinkAnchor.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-                <li><a href=\"Test.InnerOne.html#baz(float)\"><code>something<\/code><\/a><\/li>\n+                <li><a href=\"Test.InnerOne.html#baz(float)\">something<\/a><\/li>\n@@ -83,1 +83,1 @@\n-                <li><a href=\"Test.html\" title=\"class in pkg\"><code>See tag with very long label text<\/code><\/a><\/li>\n+                <li><a href=\"Test.html\" title=\"class in pkg\">See tag with very long label text<\/a><\/li>\n@@ -216,3 +216,3 @@\n-                    <li><a href=\"#noArgs()\"><code>no args<\/code><\/a><\/li>\n-                    <li><a href=\"#oneArg(int)\"><code>one arg<\/code><\/a><\/li>\n-                    <li><a href=\"#twoArgs(int,int)\"><code>two args<\/code><\/a><\/li>\n+                    <li><a href=\"#noArgs()\">no args<\/a><\/li>\n+                    <li><a href=\"#oneArg(int)\">one arg<\/a><\/li>\n+                    <li><a href=\"#twoArgs(int,int)\">two args<\/a><\/li>\n@@ -224,3 +224,3 @@\n-                    <li><a href=\"#noArgs()\"><code>no args<\/code><\/a><\/li>\n-                    <li><a href=\"#oneArg(int)\"><code>one arg<\/code><\/a><\/li>\n-                    <li><a href=\"#twoArgs(int,int)\"><code>two args with a comma , in the description<\/code><\/a><\/li>\n+                    <li><a href=\"#noArgs()\">no args<\/a><\/li>\n+                    <li><a href=\"#oneArg(int)\">one arg<\/a><\/li>\n+                    <li><a href=\"#twoArgs(int,int)\">two args with a comma , in the description<\/a><\/li>\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testSeeTag\/TestSeeTag.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,145 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug      8320207\n+ * @summary  doclet incorrectly chooses code font for a See Also link\n+ * @library  \/tools\/lib ..\/..\/lib\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.tool\n+ * @build    toolbox.ToolBox javadoc.tester.*\n+ * @run main TestSeeTagFont\n+ *\/\n+\n+import java.nio.file.Path;\n+\n+import javadoc.tester.JavadocTester;\n+import toolbox.ToolBox;\n+\n+public class TestSeeTagFont extends JavadocTester {\n+    public static void main(String... args) throws Exception {\n+        var tester = new TestSeeTagFont();\n+        tester.runTests();\n+    }\n+\n+    private final ToolBox tb = new ToolBox();\n+\n+    @Test\n+    public void testPlain(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                    package p;\n+                    import p2.Other;\n+                    \/**\n+                     * Description.\n+                     * @see Other multi-word phrase\n+                     * @see Other <em>Other<\/em>\n+                     * @see Other Other() with trailing text\n+                     * @see Other simpleNameMismatch\n+                     *\n+                     * @see Other#Other() multi-word phrase\n+                     * @see Other#Other() Other#Other() with trailing text\n+                     * @see Other#Other() simpleNameMismatch\n+                     *\n+                     * @see Other#m() <code>Other.m<\/code> with formatting and trailing text\n+                     *\/\n+                    public class C { }\n+                    \"\"\",\n+                \"\"\"\n+                    package p2;\n+                    \/** Lorem ipsum. *\/\n+                    public class Other {\n+                        \/** Lorem ipsum. *\/\n+                        public void m() { }\n+                    }\n+                    \"\"\");\n+\n+        javadoc(\"-d\", base.resolve(\"api\").toString(),\n+                \"-Xdoclint:none\",\n+                \"-sourcepath\", src.toString(),\n+                \"p\", \"p2\");\n+        checkExit(Exit.OK);\n+\n+        \/\/ none of the following should contain <code>...<\/code>\n+        checkOutput(\"p\/C.html\", true,\n+                \"\"\"\n+                        <ul class=\"tag-list-long\">\n+                        <li><a href=\"..\/p2\/Other.html\" title=\"class in p2\">multi-word phrase<\/a><\/li>\n+                        <li><a href=\"..\/p2\/Other.html\" title=\"class in p2\"><em>Other<\/em><\/a><\/li>\n+                        <li><a href=\"..\/p2\/Other.html\" title=\"class in p2\">Other() with trailing text<\/a><\/li>\n+                        <li><a href=\"..\/p2\/Other.html\" title=\"class in p2\">simpleNameMismatch<\/a><\/li>\n+                        <li><a href=\"..\/p2\/Other.html#%3Cinit%3E()\">multi-word phrase<\/a><\/li>\n+                        <li><a href=\"..\/p2\/Other.html#%3Cinit%3E()\">Other#Other() with trailing text<\/a><\/li>\n+                        <li><a href=\"..\/p2\/Other.html#%3Cinit%3E()\">simpleNameMismatch<\/a><\/li>\n+                        <li><a href=\"..\/p2\/Other.html#m()\"><code>Other.m<\/code> with formatting and trailing text<\/a><\/li>\n+                        <\/ul>\n+                        \"\"\");\n+    }\n+\n+    @Test\n+    public void testCode(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                    package p;\n+                    import p2.Other;\n+                    \/**\n+                     * Description.\n+                     * @see Other\n+                     * @see p2.Other Other\n+                     *\n+                     * @see Other#Other() Other\n+                     * @see Other#m() m\n+                     * @see Other#m() Other.m\n+                     *\/\n+                    public class C { }\n+                    \"\"\",\n+                \"\"\"\n+                    package p2;\n+                    \/** Lorem ipsum. *\/\n+                    public class Other {\n+                        \/** Lorem ipsum. *\/\n+                        public void m() { }\n+                    }\n+                    \"\"\");\n+\n+        javadoc(\"-d\", base.resolve(\"api\").toString(),\n+                \"-Xdoclint:none\",\n+                \"-sourcepath\", src.toString(),\n+                \"p\", \"p2\");\n+        checkExit(Exit.OK);\n+\n+        \/\/ all of the following should contain <code>...<\/code>\n+        checkOutput(\"p\/C.html\", true,\n+                \"\"\"\n+                    <ul class=\"tag-list\">\n+                    <li><a href=\"..\/p2\/Other.html\" title=\"class in p2\"><code>Other<\/code><\/a><\/li>\n+                    <li><a href=\"..\/p2\/Other.html\" title=\"class in p2\"><code>Other<\/code><\/a><\/li>\n+                    <li><a href=\"..\/p2\/Other.html#%3Cinit%3E()\"><code>Other<\/code><\/a><\/li>\n+                    <li><a href=\"..\/p2\/Other.html#m()\"><code>m<\/code><\/a><\/li>\n+                    <li><a href=\"..\/p2\/Other.html#m()\"><code>Other.m<\/code><\/a><\/li>\n+                    <\/ul>\n+                    \"\"\");\n+    }\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testSeeTag\/TestSeeTagFont.java","additions":145,"deletions":0,"binary":false,"changes":145,"status":"added"}]}