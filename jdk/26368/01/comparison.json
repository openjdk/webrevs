{"files":[{"patch":"@@ -2561,0 +2561,16 @@\n+  \/\/ Check for redundant conversion patterns:\n+  \/\/ ConvD2L->ConvL2D->ConvD2L\n+  \/\/ ConvF2I->ConvI2F->ConvF2I\n+  \/\/ ConvF2L->ConvL2F->ConvF2L\n+  \/\/ ConvI2F->ConvF2I->ConvI2F\n+  if ((n->Opcode() == Op_ConvD2L && use_op == Op_ConvL2D) ||\n+      (n->Opcode() == Op_ConvF2I && use_op == Op_ConvI2F) ||\n+      (n->Opcode() == Op_ConvF2L && use_op == Op_ConvL2F) ||\n+      (n->Opcode() == Op_ConvI2F && use_op == Op_ConvF2I)) {\n+    for (DUIterator_Fast i2max, i2 = use->fast_outs(i2max); i2 < i2max; i2++) {\n+      Node* u = use->fast_out(i2);\n+      if (u->Opcode() == n->Opcode()) {\n+        worklist.push(u);\n+      }\n+    }\n+  }\n","filename":"src\/hotspot\/share\/opto\/phaseX.cpp","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,107 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8359603\n+ * @summary Redundant ConvX2Y->ConvY2X->ConvX2Y sequences should be\n+ *          simplified to a single ConvX2Y operation when applicable\n+ *          VerifyIterativeGVN checks that this optimization was applied\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions\n+ *      -XX:CompileCommand=compileonly,compiler.c2.TestEliminateRedundantConversionSequences::test*\n+ *      -XX:-TieredCompilation -Xbatch -XX:VerifyIterativeGVN=1110 compiler.c2.TestEliminateRedundantConversionSequences\n+ * @run main compiler.c2.TestEliminateRedundantConversionSequences\n+ *\n+ *\/\n+\n+package compiler.c2;\n+\n+public class TestEliminateRedundantConversionSequences {\n+    static long instanceCountD2L;\n+    static int instanceCoundF2I;\n+    static long instanceCountF2L;\n+    static float instanceCountI2F;\n+\n+    \/\/ ConvD2L->ConvL2D->ConvD2L\n+    static void testD2L(double d) {\n+        int i = 1;\n+        int j = 1;\n+        while (++i < 3) {\n+            for (; 8 > j; ++j) {\n+                instanceCountD2L = (long)d;\n+                d = instanceCountD2L;\n+            }\n+        }\n+    }\n+\n+    \/\/ ConvF2I->ConvI2F->ConvF2I\n+    static void testF2I(float d) {\n+        int i = 1;\n+        int j = 1;\n+        while (++i < 3) {\n+            for (; 8 > j; ++j) {\n+                instanceCoundF2I = (int)d;\n+                d = instanceCoundF2I;\n+            }\n+        }\n+    }\n+\n+    \/\/ ConvF2L->ConvL2F->ConvF2L\n+    static void testF2L(float d) {\n+        int i = 1;\n+        int j = 1;\n+        while (++i < 3) {\n+            for (; 8 > j; ++j) {\n+                instanceCountF2L = (long)d;\n+                d = instanceCountF2L;\n+            }\n+        }\n+    }\n+\n+    \/\/ ConvI2F->ConvF2I->ConvI2F\n+    static void testI2F(int d) {\n+        int i = 1;\n+        int j = 1;\n+        while (++i < 3) {\n+            for (; 8 > j; ++j) {\n+                instanceCountI2F = d;\n+                d = (int)instanceCountI2F;\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] strArr) {\n+        for (int i = 0; i < 50_000; ++i) {\n+            testD2L(1);\n+        }\n+        for (int i = 0; i < 50_000; ++i) {\n+            testF2I(1);\n+        }\n+        for (int i = 0; i < 50_000; ++i) {\n+            testF2L(1);\n+        }\n+        for (int i = 0; i < 50_000; ++i) {\n+            testI2F(1);\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestEliminateRedundantConversionSequences.java","additions":107,"deletions":0,"binary":false,"changes":107,"status":"added"}]}