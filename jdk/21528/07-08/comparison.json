{"files":[{"patch":"@@ -30,0 +30,3 @@\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.SocketAddress;\n@@ -35,0 +38,1 @@\n+import jdk.jfr.Recording;\n@@ -135,5 +139,51 @@\n-    public static void checkConnectEventException(RecordedEvent event, IOException ioe) {\n-        Asserts.assertEquals(IOEvent.EVENT_SOCKET_CONNECT_FAILED, event.getEventType().getName());\n-        Asserts.assertNotNull(ioe);\n-        String eventMessage = event.getString(\"connectExceptionMessage\");\n-        Asserts.assertEquals(eventMessage, ioe.toString());\n+    public interface ConnectExceptionMaker {\n+        \/**\n+         * Implementation should attempt to connect to the given address, which\n+         * should cause an exception to be generated.\n+         * @return the exception generated, or null if the connection was\n+         *         unexpectedly successful.\n+         * @throws Throwable if something else failed\n+         *\/\n+        IOException generateConnectException(SocketAddress addr) throws Throwable;\n+    }\n+\n+    \/**\n+     * Attempt to test JFR events for an exception condition while attempting to connect\n+     * a socket.  The given function attempts to make the connection which we would like to\n+     * fail so we can inspect the associated JFR event.  To do this a range of IANA reserved\n+     * ports are used which it is expected will be unused.\n+     *\n+     * @param func   an implementation of a connection attempt\n+     * @throws Throwable\n+     *\/\n+    public static void testConnectException(ConnectExceptionMaker func) throws Throwable {\n+        InetAddress lb = InetAddress.getLoopbackAddress();\n+        boolean completed = false;\n+        for (int port = 225; (completed == false)  && (port <= 241); ++port) {\n+            completed = testConnectExceptionOnPort(new InetSocketAddress(lb, port), func);\n+        }\n+        if (! completed)\n+            throw new Exception(\"Unable to setup connect exception\");\n+    }\n+\n+    private static boolean testConnectExceptionOnPort(SocketAddress addr, ConnectExceptionMaker func) throws Throwable {\n+        try (Recording recording = new Recording()) {\n+            recording.enable(IOEvent.EVENT_SOCKET_CONNECT_FAILED);\n+            recording.start();\n+\n+            \/\/ try to connect to a port we expect to be unused\n+            \/\/ to generate an exception\n+            IOException connectException = func.generateConnectException(addr);\n+            if (connectException == null)\n+                return false;\n+\n+            recording.stop();\n+            List<RecordedEvent> events = Events.fromRecording(recording);\n+            Asserts.assertEquals(1, events.size());\n+            RecordedEvent event = events.get(0);\n+            Asserts.assertEquals(IOEvent.EVENT_SOCKET_CONNECT_FAILED, event.getEventType().getName());\n+            Asserts.assertNotNull(connectException);\n+            String eventMessage = event.getString(\"connectExceptionMessage\");\n+            Asserts.assertEquals(eventMessage, connectException.toString());\n+            return true;\n+        }\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/IOHelper.java","additions":55,"deletions":5,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-import jdk.test.lib.Asserts;\n@@ -59,1 +58,0 @@\n-    private static final int MAX_ATTEMPTS = 5;\n@@ -69,6 +67,1 @@\n-        boolean completed = false;\n-        for (int ntries = 0; (completed == false)  && (ntries < MAX_ATTEMPTS); ++ntries) {\n-            completed = testConnectException();\n-        }\n-        if (! completed)\n-            throw new Exception(\"Unable to setup connect exception\");\n+        IOHelper.testConnectException(TestSocketAdapterEvents::makeConnectException);\n@@ -138,28 +131,7 @@\n-    private static boolean testConnectException() throws Throwable {\n-        try (Recording recording = new Recording()) {\n-            try (ServerSocketChannel ssc = ServerSocketChannel.open()) {\n-                recording.enable(IOEvent.EVENT_SOCKET_CONNECT_FAILED);\n-                recording.start();\n-\n-                InetAddress lb = InetAddress.getLoopbackAddress();\n-                ssc.bind(new InetSocketAddress(lb, 0));\n-                SocketAddress addr = ssc.getLocalAddress();\n-                ssc.close();\n-\n-                IOException connectException = null;\n-                try (SocketChannel sc = SocketChannel.open()) {\n-                    Socket s = sc.socket();\n-                    s.connect(addr);\n-                    \/\/ unexpected, abandon the test\n-                    return false;\n-                } catch (IOException ioe) {\n-                    \/\/ we expect this\n-                    connectException = ioe;\n-                }\n-\n-                recording.stop();\n-                List<RecordedEvent> events = Events.fromRecording(recording);\n-                Asserts.assertEquals(1, events.size());\n-                IOHelper.checkConnectEventException(events.get(0), connectException);\n-                return true;\n-            }\n+    private static IOException makeConnectException(SocketAddress addr) throws Throwable {\n+        IOException connectException = null;\n+        try (SocketChannel sc = SocketChannel.open()) {\n+            Socket s = sc.socket();\n+            s.connect(addr);\n+        } catch (IOException ioe) {\n+            connectException = ioe;\n@@ -167,0 +139,1 @@\n+        return connectException;\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/TestSocketAdapterEvents.java","additions":9,"deletions":36,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n-import jdk.test.lib.Asserts;\n@@ -56,1 +55,0 @@\n-    private static final int MAX_ATTEMPTS = 5;\n@@ -67,15 +65,2 @@\n-\n-        boolean completed = false;\n-        for (int ntries = 0; (completed == false)  && (ntries < MAX_ATTEMPTS); ++ntries) {\n-            completed = testConnectException();\n-        }\n-        if (! completed)\n-            throw new Exception(\"Unable to setup connect exception\");\n-\n-        completed = false;\n-        for (int ntries = 0; (completed == false)  && (ntries < MAX_ATTEMPTS); ++ntries) {\n-            completed = testNonBlockingConnectException();\n-        }\n-        if (! completed)\n-            throw new Exception(\"Unable to setup non-blocking connect exception\");\n-\n+        IOHelper.testConnectException(TestSocketChannelEvents::makeBlockingConnectException);\n+        IOHelper.testConnectException(TestSocketChannelEvents::makeNonBlockingConnectException);\n@@ -182,27 +167,5 @@\n-    private static boolean testConnectException() throws Throwable {\n-        try (Recording recording = new Recording()) {\n-            try (ServerSocketChannel ssc = ServerSocketChannel.open()) {\n-                recording.enable(IOEvent.EVENT_SOCKET_CONNECT_FAILED);\n-                recording.start();\n-\n-                InetAddress lb = InetAddress.getLoopbackAddress();\n-                ssc.bind(new InetSocketAddress(lb, 0));\n-                SocketAddress addr = ssc.getLocalAddress();\n-                ssc.close();\n-\n-                \/\/ try to connect, but the server will not accept\n-                IOException connectException = null;\n-                try (SocketChannel sc = SocketChannel.open(addr)) {\n-                    \/\/ unexpected connect, abandon the test\n-                    return false;\n-                } catch (IOException ioe) {\n-                    \/\/ we expect this\n-                    connectException = ioe;\n-                }\n-\n-                recording.stop();\n-                List<RecordedEvent> events = Events.fromRecording(recording);\n-                Asserts.assertEquals(1, events.size());\n-                IOHelper.checkConnectEventException(events.get(0), connectException);\n-                return true;\n-            }\n+    private static IOException makeBlockingConnectException(SocketAddress addr) throws Throwable {\n+        IOException connectException = null;\n+        try (SocketChannel sc = SocketChannel.open(addr)) {\n+        } catch (IOException ioe) {\n+            connectException = ioe;\n@@ -210,0 +173,1 @@\n+        return connectException;\n@@ -212,26 +176,9 @@\n-    private static boolean testNonBlockingConnectException() throws Throwable {\n-        try (Recording recording = new Recording()) {\n-            try (ServerSocketChannel ssc = ServerSocketChannel.open()) {\n-                recording.enable(IOEvent.EVENT_SOCKET_CONNECT_FAILED);\n-                recording.start();\n-\n-                InetAddress lb = InetAddress.getLoopbackAddress();\n-                ssc.bind(new InetSocketAddress(lb, 0));\n-                SocketAddress addr = ssc.getLocalAddress();\n-                ssc.close();\n-\n-                IOException connectException = null;\n-                try (SocketChannel sc = SocketChannel.open()) {\n-                    sc.configureBlocking(false);\n-                    try {\n-                        boolean connected = sc.connect(addr);\n-                        while (!connected) {\n-                            Thread.sleep(10);\n-                            connected = sc.finishConnect();\n-                        }\n-                        \/\/ unexpected connect, abandon the test\n-                        return false;\n-                    } catch (IOException ioe) {\n-                        \/\/ we expect this\n-                        connectException = ioe;\n-                    }\n+    private static IOException makeNonBlockingConnectException(SocketAddress addr) throws Throwable {\n+        IOException connectException = null;\n+        try (SocketChannel sc = SocketChannel.open()) {\n+            sc.configureBlocking(false);\n+            try {\n+                boolean connected = sc.connect(addr);\n+                while (!connected) {\n+                    Thread.sleep(10);\n+                    connected = sc.finishConnect();\n@@ -239,6 +186,2 @@\n-\n-                recording.stop();\n-                List<RecordedEvent> events = Events.fromRecording(recording);\n-                Asserts.assertEquals(1, events.size());\n-                IOHelper.checkConnectEventException(events.get(0), connectException);\n-                return true;\n+            } catch (IOException ioe) {\n+                connectException = ioe;\n@@ -247,0 +190,1 @@\n+        return connectException;\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/TestSocketChannelEvents.java","additions":20,"deletions":76,"binary":false,"changes":96,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-import jdk.test.lib.Asserts;\n@@ -58,1 +57,0 @@\n-    private static final int MAX_ATTEMPTS = 5;\n@@ -68,6 +66,1 @@\n-        boolean completed = false;\n-        for (int ntries = 0; (completed == false)  && (ntries < MAX_ATTEMPTS); ++ntries) {\n-            completed = testConnectException();\n-        }\n-        if (! completed)\n-            throw new Exception(\"Unable to setup connect exception\");\n+        IOHelper.testConnectException(TestSocketEvents::makeConnectException);\n@@ -135,27 +128,6 @@\n-    private static boolean testConnectException() throws Throwable {\n-        try (Recording recording = new Recording()) {\n-            try (ServerSocket ss = new ServerSocket()) {\n-                recording.enable(IOEvent.EVENT_SOCKET_CONNECT_FAILED);\n-                recording.start();\n-\n-                InetAddress lb = InetAddress.getLoopbackAddress();\n-                ss.bind(new InetSocketAddress(lb, 0));\n-                SocketAddress addr = ss.getLocalSocketAddress();\n-                ss.close();\n-\n-                IOException connectException = null;\n-                try (Socket s = new Socket()) {\n-                    s.connect(addr);\n-                    \/\/ unexpected, abandon the test\n-                    return false;\n-                } catch (IOException ioe) {\n-                    \/\/ we expect this\n-                    connectException = ioe;\n-                }\n-\n-                recording.stop();\n-                List<RecordedEvent> events = Events.fromRecording(recording);\n-                Asserts.assertEquals(1, events.size());\n-                IOHelper.checkConnectEventException(events.get(0), connectException);\n-                return true;\n-            }\n+    private static IOException makeConnectException(SocketAddress addr) throws Throwable {\n+        IOException connectException = null;\n+        try (Socket s = new Socket()) {\n+            s.connect(addr);\n+        } catch (IOException ioe) {\n+            connectException = ioe;\n@@ -163,0 +135,1 @@\n+        return connectException;\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/TestSocketEvents.java","additions":8,"deletions":35,"binary":false,"changes":43,"status":"modified"}]}