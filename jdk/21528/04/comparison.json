{"files":[{"patch":"@@ -0,0 +1,156 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.event;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.SocketAddress;\n+import java.net.UnixDomainSocketAddress;\n+\n+\/**\n+ * A JFR event for socket connect operations.  This event is mirrored in\n+ * {@code jdk.jfr.events.SocketConnectEvent } where the metadata for the event is\n+ * provided with annotations.  Some of the methods are replaced by generated\n+ * methods when jfr is enabled.  Note that the order of the arguments of the\n+ * {@link #commit(long, long, String, String, int, String)} method\n+ * must be the same as the order of the fields.\n+ *\/\n+public class SocketConnectEvent extends Event {\n+\n+    \/\/ THE ORDER OF THE FOLLOWING FIELDS IS IMPORTANT!\n+    \/\/ The order must match the argument order of the generated commit method.\n+    public String host;\n+    public String address;\n+    public int port;\n+    public String exceptionMessage;\n+\n+    \/**\n+     * Actually commit an event.  The implementation is generated automatically.\n+     * The order of the fields must be the same as the parameters in this method.\n+     * {@code commit(..., String, String, int, long)}\n+     *\n+     * @param start     timestamp of the start of the operation\n+     * @param duration  time in nanoseconds to complete the operation\n+     * @param host      remote host of the connection\n+     * @param address   remote address of the connection\n+     * @param port      remote port of the connection\n+     * @param exceptionMessage message from exception if failed\n+     *\/\n+    public static void commit(long start, long duration, String host, String address, int port, String exceptionMessage) {\n+        \/\/ Generated by JFR\n+    }\n+\n+    \/**\n+     * Determine if an event should be emitted.  The duration of the operation\n+     * must exceed some threshold in order to commit the event.  The implementation\n+     * of this method is generated automatically if jfr is enabled.\n+     *\n+     * @param duration  time in nanoseconds to complete the operation\n+     * @return  true if the event should be commited\n+     *\/\n+    public static boolean shouldCommit(long duration) {\n+        \/\/ Generated by JFR\n+        return false;\n+    }\n+\n+    \/**\n+     * Determine if this kind of event is enabled.  The implementation\n+     * of this method is generated automatically if jfr is enabled.\n+     *\n+     * @return true if event is enabled, false otherwise\n+     *\/\n+    public static boolean enabled() {\n+        \/\/ Generated by JFR\n+        return false;\n+    }\n+\n+    \/**\n+     * Fetch the current timestamp in nanoseconds.  This method is used\n+     * to determine the start and end of an operation.  The implementation\n+     * of this method is generated automatically if jfr is enabled.\n+     *\n+     * @return  the current timestamp value\n+     *\/\n+    public static long timestamp() {\n+        \/\/ Generated by JFR\n+        return 0L;\n+    }\n+\n+    static String exceptionToMessage(IOException ex) {\n+        if (ex == null) {\n+            return null;\n+        }\n+        String m = ex.getMessage();\n+        return m != null ? m : ex.toString();\n+    }\n+\n+    \/**\n+     * Helper method to offer the data needed to potentially commit an event.\n+     * The duration of the operation is computed using the current\n+     * timestamp and the given start time.  If the duration is meets\n+     * or exceeds the configured value (determined by calling the generated method\n+     * {@link #shouldCommit(long)}), an event will be emitted by calling\n+     * {@link #commit(long, long, String, String, int, String)}.\n+     *\n+     * @param start  the start time\n+     * @param remote  the address of the remote socket\n+     * @param thrown  the exception thrown or null if succeeded\n+     *\/\n+    public static void offer(long start, SocketAddress remote, IOException thrown) {\n+        long duration = timestamp() - start;\n+        if (shouldCommit(duration)) {\n+            String msg = exceptionToMessage(thrown);\n+            if (remote instanceof InetSocketAddress isa) {\n+                commit(start, duration, isa.getHostString(), isa.getAddress().getHostAddress(), isa.getPort(), msg);\n+            } else if (remote instanceof UnixDomainSocketAddress udsa) {\n+                String path = \"[\" + udsa.getPath().toString() + \"]\";\n+                commit(start, duration, \"Unix domain socket\", path, 0, msg);\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Helper method to offer the data needed to potentially commit an event.\n+     * The duration of the operation is computed using the current\n+     * timestamp and the given start time.  If the duration is meets\n+     * or exceeds the configured value (determined by calling the generated method\n+     * {@link #shouldCommit(long)}), an event will be emitted by calling\n+     * {@code commit(long, long, String, String, int, long)}\n+     *\n+     * @param start     timestamp of the start of the operation\n+     * @param host      remote host of the connection\n+     * @param address   remote address of the connection\n+     * @param port      remote port of the connection\n+     * @param thrown  the exception thrown or null if succeeded\n+     *\/\n+    public static void offer(long start, String host, InetAddress address, int port, IOException thrown) {\n+        long duration = timestamp() - start;\n+        if (shouldCommit(duration)) {\n+            commit(start, duration, host, address.getHostAddress(), port, exceptionToMessage(thrown));\n+        }\n+    }\n+\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/event\/SocketConnectEvent.java","additions":156,"deletions":0,"binary":false,"changes":156,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,0 +56,1 @@\n+import jdk.internal.event.SocketConnectEvent;\n@@ -575,0 +576,3 @@\n+        long connectStart = 0L;\n+        IOException connectEx = null;\n+\n@@ -583,0 +587,1 @@\n+                    connectStart = SocketConnectEvent.timestamp();\n@@ -612,1 +617,1 @@\n-                throw ioe;\n+                connectEx = ioe;\n@@ -614,1 +619,1 @@\n-                throw SocketExceptions.of(ioe, isa);\n+                connectEx = SocketExceptions.of(ioe, isa);\n@@ -617,0 +622,6 @@\n+        if (connectStart != 0L && SocketConnectEvent.enabled()) {\n+            SocketConnectEvent.offer(connectStart, isa.getHostString(), address, port, connectEx);\n+        }\n+        if (connectEx != null) {\n+            throw connectEx;\n+        }\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/NioSocketImpl.java","additions":14,"deletions":3,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -62,0 +62,1 @@\n+import jdk.internal.event.SocketConnectEvent;\n@@ -135,0 +136,4 @@\n+    \/\/ JFR support, start time of non-blocking connect\n+    private long nonBlockingConnectStart;\n+\n+\n@@ -859,1 +864,1 @@\n-     * @param isa the remote address\n+     * @param sa the remote socket address\n@@ -953,0 +958,5 @@\n+\n+        boolean connected = false;\n+        long connectStart = 0L;\n+        IOException connectEx = null;\n+\n@@ -960,1 +970,0 @@\n-                    boolean connected = false;\n@@ -964,0 +973,1 @@\n+                        connectStart = SocketConnectEvent.timestamp();\n@@ -980,0 +990,3 @@\n+                        } else {\n+                            \/\/ non-blocking and not connected\n+                            this.nonBlockingConnectStart = connectStart;\n@@ -984,1 +997,0 @@\n-                    return connected;\n@@ -994,1 +1006,15 @@\n-            throw SocketExceptions.of(ioe, sa);\n+            connectEx = SocketExceptions.of(ioe, sa);\n+        }\n+\n+        \/\/ record JFR event\n+        if (connectStart != 0L\n+                && SocketConnectEvent.enabled()\n+                && (connected || connectEx != null)) {\n+            SocketConnectEvent.offer(connectStart, sa, connectEx);\n+        }\n+\n+        if (connectEx == null) {\n+            return connected;\n+        } else {\n+            assert !connected;\n+            throw connectEx;\n@@ -1048,0 +1074,3 @@\n+        long connectStart = 0L;\n+        boolean connected = false;\n+        IOException connectEx = null;\n@@ -1056,1 +1085,0 @@\n-\n@@ -1059,1 +1087,0 @@\n-                    boolean connected = false;\n@@ -1062,0 +1089,1 @@\n+                        connectStart = this.nonBlockingConnectStart;\n@@ -1074,1 +1102,0 @@\n-                    return connected;\n@@ -1084,1 +1111,15 @@\n-            throw SocketExceptions.of(ioe, remoteAddress);\n+            connectEx = SocketExceptions.of(ioe, remoteAddress);\n+        }\n+\n+        \/\/ record JFR event\n+        if (connectStart != 0L\n+                && SocketConnectEvent.enabled()\n+                && (connected || connectEx != null)) {\n+            SocketConnectEvent.offer(connectStart, remoteAddress(), connectEx);\n+        }\n+\n+        if (connectEx != null) {\n+            assert !connected;\n+            throw connectEx;\n+        } else {\n+            return connected;\n@@ -1308,0 +1349,3 @@\n+\n+        long connectStart = 0L;\n+        IOException connectEx = null;\n@@ -1321,0 +1365,1 @@\n+                            connectStart = SocketConnectEvent.timestamp();\n@@ -1344,1 +1389,10 @@\n-            throw SocketExceptions.of(ioe, sa);\n+            connectEx = SocketExceptions.of(ioe, sa);\n+        }\n+\n+        \/\/ record JFR event\n+        if (connectStart != 0L && SocketConnectEvent.enabled()) {\n+            SocketConnectEvent.offer(connectStart, sa, connectEx);\n+        }\n+\n+        if (connectEx != null) {\n+            throw connectEx;\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/SocketChannelImpl.java","additions":63,"deletions":9,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.events;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Label;\n+import jdk.jfr.Name;\n+import jdk.jfr.internal.MirrorEvent;\n+import jdk.jfr.internal.Type;\n+\n+@Name(Type.EVENT_NAME_PREFIX + \"SocketConnect\")\n+@Label(\"Socket Connect\")\n+@Category(\"Java Application\")\n+@Description(\"Connecting a socket\")\n+public class SocketConnectEvent extends MirrorEvent {\n+\n+    @Label(\"Remote Host\")\n+    public String host;\n+\n+    @Label(\"Remote Address\")\n+    public String address;\n+\n+    @Label(\"Remote Port\")\n+    public int port;\n+\n+    @Label(\"Exception Message\")\n+    public String exceptionMessage;\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/SocketConnectEvent.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"},{"patch":"@@ -65,0 +65,1 @@\n+        jdk.internal.event.SocketConnectEvent.class,\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/JDKEvents.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import jdk.jfr.events.SocketConnectEvent;\n@@ -69,0 +70,1 @@\n+        register(\"jdk.internal.event.SocketConnectEvent\", SocketConnectEvent.class);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/MirrorEvents.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -737,0 +737,6 @@\n+    <event name=\"jdk.SocketConnect\">\n+      <setting name=\"enabled\">true<\/setting>\n+      <setting name=\"stackTrace\">true<\/setting>\n+      <setting name=\"threshold\" control=\"socket-threshold\">20 ms<\/setting>\n+    <\/event>\n+\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/default.jfc","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -737,0 +737,6 @@\n+    <event name=\"jdk.SocketConnect\">\n+      <setting name=\"enabled\">true<\/setting>\n+      <setting name=\"stackTrace\">true<\/setting>\n+      <setting name=\"threshold\" control=\"socket-threshold\">10 ms<\/setting>\n+    <\/event>\n+\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/profile.jfc","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -76,0 +76,1 @@\n+    public static final String EVENT_SOCKET_CONNECT = EventNames.SocketConnect;\n@@ -79,1 +80,1 @@\n-    public enum EventType { UnknownEvent, FileForce, FileRead, FileWrite, SocketRead, SocketWrite }\n+    public enum EventType { UnknownEvent, FileForce, FileRead, FileWrite, SocketConnect, SocketRead, SocketWrite }\n@@ -82,1 +83,1 @@\n-        EVENT_UNKNOWN, EVENT_FILE_FORCE, EVENT_FILE_READ, EVENT_FILE_WRITE, EVENT_SOCKET_READ, EVENT_SOCKET_WRITE\n+        EVENT_UNKNOWN, EVENT_FILE_FORCE, EVENT_FILE_READ, EVENT_FILE_WRITE, EVENT_SOCKET_CONNECT, EVENT_SOCKET_READ, EVENT_SOCKET_WRITE\n@@ -97,0 +98,4 @@\n+    public static IOEvent createSocketConnectEvent(Socket s) {\n+        return new IOEvent(Thread.currentThread().getName(), EventType.SocketConnect, 0, getAddress(s), false);\n+    }\n+\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/IOEvent.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import java.io.IOException;\n@@ -37,0 +38,1 @@\n+import jdk.test.lib.Asserts;\n@@ -133,0 +135,6 @@\n+    public static void checkConnectionEventException(RecordedEvent event, IOException ioe) {\n+        Asserts.assertEquals(event.getEventType().getName(),IOEvent.EVENT_SOCKET_CONNECT);\n+        Asserts.assertNotNull(ioe);\n+        String eventMessage = event.getString(\"exceptionMessage\");\n+        Asserts.assertEquals(eventMessage, ioe.getMessage());\n+    }\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/IOHelper.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n-import java.nio.ByteBuffer;\n+import java.net.SocketAddress;\n@@ -43,0 +43,1 @@\n+import jdk.test.lib.Asserts;\n@@ -68,0 +69,1 @@\n+        testConnectException();\n@@ -70,1 +72,1 @@\n-    public void test() throws Throwable {\n+    private void test() throws Throwable {\n@@ -73,0 +75,1 @@\n+                recording.enable(IOEvent.EVENT_SOCKET_CONNECT).withThreshold(Duration.ofMillis(0));\n@@ -109,9 +112,11 @@\n-                try (SocketChannel sc = SocketChannel.open(ssc.getLocalAddress());\n-                     Socket s = sc.socket(); OutputStream os = s.getOutputStream()) {\n-\n-                    os.write(writeInt);\n-                    addExpectedEvent(IOEvent.createSocketWriteEvent(1, s));\n-                    os.write(writeBuf, 0, 3);\n-                    addExpectedEvent(IOEvent.createSocketWriteEvent(3, s));\n-                    os.write(writeBuf);\n-                    addExpectedEvent(IOEvent.createSocketWriteEvent(writeBuf.length, s));\n+                try (SocketChannel sc = SocketChannel.open(); Socket s = sc.socket()) {\n+                    s.connect(ssc.getLocalAddress());\n+                    addExpectedEvent(IOEvent.createSocketConnectEvent(s));\n+                    try (OutputStream os = s.getOutputStream()) {\n+                        os.write(writeInt);\n+                        addExpectedEvent(IOEvent.createSocketWriteEvent(1, s));\n+                        os.write(writeBuf, 0, 3);\n+                        addExpectedEvent(IOEvent.createSocketWriteEvent(3, s));\n+                        os.write(writeBuf);\n+                        addExpectedEvent(IOEvent.createSocketWriteEvent(writeBuf.length, s));\n+                    }\n@@ -127,0 +132,28 @@\n+\n+    private static void testConnectException() throws Throwable {\n+        try (Recording recording = new Recording()) {\n+            try (ServerSocketChannel ssc = ServerSocketChannel.open()) {\n+                recording.enable(IOEvent.EVENT_SOCKET_CONNECT).withThreshold(Duration.ofMillis(0));\n+                recording.start();\n+\n+                InetAddress lb = InetAddress.getLoopbackAddress();\n+                ssc.bind(new InetSocketAddress(lb, 0));\n+                SocketAddress addr = ssc.getLocalAddress();\n+                ssc.close();\n+\n+                IOException connectException = null;\n+                try (SocketChannel sc = SocketChannel.open()) {\n+                    Socket s = sc.socket();\n+                    s.connect(addr);\n+                } catch (IOException ioe) {\n+                    \/\/ we expect this\n+                    connectException = ioe;\n+                }\n+\n+                recording.stop();\n+                List<RecordedEvent> events = Events.fromRecording(recording);\n+                Asserts.assertEquals(events.size(), 1);\n+                IOHelper.checkConnectionEventException(events.get(0), connectException);\n+            }\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/TestSocketAdapterEvents.java","additions":45,"deletions":12,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+import java.net.SocketAddress;\n@@ -40,0 +41,1 @@\n+import jdk.test.lib.Asserts;\n@@ -64,0 +66,3 @@\n+        new TestSocketChannelEvents().testNonBlockingConnect();\n+        testConnectException();\n+        testNonBlockingConnectException();\n@@ -66,1 +71,1 @@\n-    public void test() throws Throwable {\n+    private void test() throws Throwable {\n@@ -69,0 +74,1 @@\n+                recording.enable(IOEvent.EVENT_SOCKET_CONNECT).withThreshold(Duration.ofMillis(0));\n@@ -105,0 +111,1 @@\n+                    addExpectedEvent(IOEvent.createSocketConnectEvent(sc.socket()));\n@@ -133,0 +140,86 @@\n+\n+    private void testNonBlockingConnect() throws Throwable {\n+        try (Recording recording = new Recording()) {\n+            try (ServerSocketChannel ssc = ServerSocketChannel.open()) {\n+                recording.enable(IOEvent.EVENT_SOCKET_CONNECT).withThreshold(Duration.ofMillis(0));\n+                recording.start();\n+\n+                InetAddress lb = InetAddress.getLoopbackAddress();\n+                ssc.bind(new InetSocketAddress(lb, 0));\n+                SocketAddress addr = ssc.getLocalAddress();\n+\n+                try (SocketChannel sc = SocketChannel.open()) {\n+                    sc.configureBlocking(false);\n+                    sc.connect(addr);\n+                    try (SocketChannel serverSide = ssc.accept()) {\n+                        while (! sc.finishConnect()) {\n+                            Thread.sleep(1);\n+                        }\n+                    }\n+                    addExpectedEvent(IOEvent.createSocketConnectEvent(sc.socket()));\n+                }\n+\n+                recording.stop();\n+                List<RecordedEvent> events = Events.fromRecording(recording);\n+                IOHelper.verifyEquals(events, expectedEvents);\n+            }\n+        }\n+    }\n+\n+    private static void testConnectException() throws Throwable {\n+        try (Recording recording = new Recording()) {\n+            try (ServerSocketChannel ssc = ServerSocketChannel.open()) {\n+                recording.enable(IOEvent.EVENT_SOCKET_CONNECT).withThreshold(Duration.ofMillis(0));\n+                recording.start();\n+\n+                InetAddress lb = InetAddress.getLoopbackAddress();\n+                ssc.bind(new InetSocketAddress(lb, 0));\n+                SocketAddress addr = ssc.getLocalAddress();\n+                ssc.close();\n+\n+                \/\/ try to connect, but the server will not accept\n+                IOException connectException = null;\n+                try (SocketChannel sc = SocketChannel.open(addr)) {\n+                } catch (IOException ioe) {\n+                    \/\/ we expect this\n+                    connectException = ioe;\n+                }\n+\n+                recording.stop();\n+                List<RecordedEvent> events = Events.fromRecording(recording);\n+                Asserts.assertEquals(events.size(), 1);\n+                IOHelper.checkConnectionEventException(events.get(0), connectException);\n+            }\n+        }\n+    }\n+\n+    private static void testNonBlockingConnectException() throws Throwable {\n+        try (Recording recording = new Recording()) {\n+            try (ServerSocketChannel ssc = ServerSocketChannel.open()) {\n+                recording.enable(IOEvent.EVENT_SOCKET_CONNECT).withThreshold(Duration.ofMillis(0));\n+                recording.start();\n+\n+                InetAddress lb = InetAddress.getLoopbackAddress();\n+                ssc.bind(new InetSocketAddress(lb, 0));\n+                SocketAddress addr = ssc.getLocalAddress();\n+                ssc.close();\n+\n+                IOException connectException = null;\n+                try (SocketChannel sc = SocketChannel.open()) {\n+                    sc.configureBlocking(false);\n+                    sc.connect(addr);\n+                    while (! sc.finishConnect()) {\n+                        Thread.sleep(1);\n+                    }\n+                } catch (IOException ioe) {\n+                    \/\/ we expect this\n+                    connectException = ioe;\n+                }\n+\n+                recording.stop();\n+                List<RecordedEvent> events = Events.fromRecording(recording);\n+                Asserts.assertEquals(events.size(), 1);\n+                IOHelper.checkConnectionEventException(events.get(0), connectException);\n+            }\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/TestSocketChannelEvents.java","additions":95,"deletions":2,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,1 @@\n+import java.net.SocketAddress;\n@@ -41,0 +42,1 @@\n+import jdk.test.lib.Asserts;\n@@ -66,0 +68,1 @@\n+        testConnectException();\n@@ -71,0 +74,1 @@\n+                recording.enable(IOEvent.EVENT_SOCKET_CONNECT).withThreshold(Duration.ofMillis(0));\n@@ -107,0 +111,1 @@\n+                    addExpectedEvent(IOEvent.createSocketConnectEvent(s));\n@@ -124,0 +129,27 @@\n+\n+    private static void testConnectException() throws Throwable {\n+        try (Recording recording = new Recording()) {\n+            try (ServerSocket ss = new ServerSocket()) {\n+                recording.enable(IOEvent.EVENT_SOCKET_CONNECT).withThreshold(Duration.ofMillis(0));\n+                recording.start();\n+\n+                InetAddress lb = InetAddress.getLoopbackAddress();\n+                ss.bind(new InetSocketAddress(lb, 0));\n+                SocketAddress addr = ss.getLocalSocketAddress();\n+                ss.close();\n+\n+                IOException connectException = null;\n+                try (Socket s = new Socket()) {\n+                    s.connect(addr);\n+                } catch (IOException ioe) {\n+                    \/\/ we expect this\n+                    connectException = ioe;\n+                }\n+\n+                recording.stop();\n+                List<RecordedEvent> events = Events.fromRecording(recording);\n+                Asserts.assertEquals(events.size(), 1);\n+                IOHelper.checkConnectionEventException(events.get(0), connectException);\n+            }\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/TestSocketEvents.java","additions":33,"deletions":1,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -196,0 +196,1 @@\n+    public static final String SocketConnect = PREFIX + \"SocketConnect\";\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/EventNames.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}