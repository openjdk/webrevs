{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/JDKEvents.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import java.io.IOException;\n@@ -37,0 +38,1 @@\n+import jdk.test.lib.Asserts;\n@@ -133,0 +135,6 @@\n+    public static void checkConnectionEventException(RecordedEvent event, IOException ioe) {\n+        Asserts.assertEquals(event.getEventType().getName(),IOEvent.EVENT_SOCKET_CONNECT);\n+        Asserts.assertNotNull(ioe);\n+        String eventMessage = event.getString(\"exceptionMessage\");\n+        Asserts.assertEquals(eventMessage, ioe.getMessage());\n+    }\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/IOHelper.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n-import java.nio.ByteBuffer;\n+import java.net.SocketAddress;\n@@ -43,0 +43,1 @@\n+import jdk.test.lib.Asserts;\n@@ -68,0 +69,1 @@\n+        testConnectException();\n@@ -70,1 +72,1 @@\n-    public void test() throws Throwable {\n+    private void test() throws Throwable {\n@@ -73,0 +75,1 @@\n+                recording.enable(IOEvent.EVENT_SOCKET_CONNECT).withThreshold(Duration.ofMillis(0));\n@@ -109,9 +112,11 @@\n-                try (SocketChannel sc = SocketChannel.open(ssc.getLocalAddress());\n-                     Socket s = sc.socket(); OutputStream os = s.getOutputStream()) {\n-\n-                    os.write(writeInt);\n-                    addExpectedEvent(IOEvent.createSocketWriteEvent(1, s));\n-                    os.write(writeBuf, 0, 3);\n-                    addExpectedEvent(IOEvent.createSocketWriteEvent(3, s));\n-                    os.write(writeBuf);\n-                    addExpectedEvent(IOEvent.createSocketWriteEvent(writeBuf.length, s));\n+                try (SocketChannel sc = SocketChannel.open(); Socket s = sc.socket()) {\n+                    s.connect(ssc.getLocalAddress());\n+                    addExpectedEvent(IOEvent.createSocketConnectEvent(s));\n+                    try (OutputStream os = s.getOutputStream()) {\n+                        os.write(writeInt);\n+                        addExpectedEvent(IOEvent.createSocketWriteEvent(1, s));\n+                        os.write(writeBuf, 0, 3);\n+                        addExpectedEvent(IOEvent.createSocketWriteEvent(3, s));\n+                        os.write(writeBuf);\n+                        addExpectedEvent(IOEvent.createSocketWriteEvent(writeBuf.length, s));\n+                    }\n@@ -127,0 +132,28 @@\n+\n+    private static void testConnectException() throws Throwable {\n+        try (Recording recording = new Recording()) {\n+            try (ServerSocketChannel ssc = ServerSocketChannel.open()) {\n+                recording.enable(IOEvent.EVENT_SOCKET_CONNECT).withThreshold(Duration.ofMillis(0));\n+                recording.start();\n+\n+                InetAddress lb = InetAddress.getLoopbackAddress();\n+                ssc.bind(new InetSocketAddress(lb, 0));\n+                SocketAddress addr = ssc.getLocalAddress();\n+                ssc.close();\n+\n+                IOException connectException = null;\n+                try (SocketChannel sc = SocketChannel.open()) {\n+                    Socket s = sc.socket();\n+                    s.connect(addr);\n+                } catch (IOException ioe) {\n+                    \/\/ we expect this\n+                    connectException = ioe;\n+                }\n+\n+                recording.stop();\n+                List<RecordedEvent> events = Events.fromRecording(recording);\n+                Asserts.assertEquals(events.size(), 1);\n+                IOHelper.checkConnectionEventException(events.get(0), connectException);\n+            }\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/TestSocketAdapterEvents.java","additions":45,"deletions":12,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.net.SocketAddress;\n@@ -40,0 +41,1 @@\n+import jdk.test.lib.Asserts;\n@@ -64,0 +66,3 @@\n+        new TestSocketChannelEvents().testNonBlockingConnect();\n+        testConnectException();\n+        testNonBlockingConnectException();\n@@ -66,1 +71,1 @@\n-    public void test() throws Throwable {\n+    private void test() throws Throwable {\n@@ -135,0 +140,86 @@\n+\n+    private void testNonBlockingConnect() throws Throwable {\n+        try (Recording recording = new Recording()) {\n+            try (ServerSocketChannel ssc = ServerSocketChannel.open()) {\n+                recording.enable(IOEvent.EVENT_SOCKET_CONNECT).withThreshold(Duration.ofMillis(0));\n+                recording.start();\n+\n+                InetAddress lb = InetAddress.getLoopbackAddress();\n+                ssc.bind(new InetSocketAddress(lb, 0));\n+                SocketAddress addr = ssc.getLocalAddress();\n+\n+                try (SocketChannel sc = SocketChannel.open()) {\n+                    sc.configureBlocking(false);\n+                    sc.connect(addr);\n+                    try (SocketChannel serverSide = ssc.accept()) {\n+                        while (! sc.finishConnect()) {\n+                            Thread.sleep(1);\n+                        }\n+                    }\n+                    addExpectedEvent(IOEvent.createSocketConnectEvent(sc.socket()));\n+                }\n+\n+                recording.stop();\n+                List<RecordedEvent> events = Events.fromRecording(recording);\n+                IOHelper.verifyEquals(events, expectedEvents);\n+            }\n+        }\n+    }\n+\n+    private static void testConnectException() throws Throwable {\n+        try (Recording recording = new Recording()) {\n+            try (ServerSocketChannel ssc = ServerSocketChannel.open()) {\n+                recording.enable(IOEvent.EVENT_SOCKET_CONNECT).withThreshold(Duration.ofMillis(0));\n+                recording.start();\n+\n+                InetAddress lb = InetAddress.getLoopbackAddress();\n+                ssc.bind(new InetSocketAddress(lb, 0));\n+                SocketAddress addr = ssc.getLocalAddress();\n+                ssc.close();\n+\n+                \/\/ try to connect, but the server will not accept\n+                IOException connectException = null;\n+                try (SocketChannel sc = SocketChannel.open(addr)) {\n+                } catch (IOException ioe) {\n+                    \/\/ we expect this\n+                    connectException = ioe;\n+                }\n+\n+                recording.stop();\n+                List<RecordedEvent> events = Events.fromRecording(recording);\n+                Asserts.assertEquals(events.size(), 1);\n+                IOHelper.checkConnectionEventException(events.get(0), connectException);\n+            }\n+        }\n+    }\n+\n+    private static void testNonBlockingConnectException() throws Throwable {\n+        try (Recording recording = new Recording()) {\n+            try (ServerSocketChannel ssc = ServerSocketChannel.open()) {\n+                recording.enable(IOEvent.EVENT_SOCKET_CONNECT).withThreshold(Duration.ofMillis(0));\n+                recording.start();\n+\n+                InetAddress lb = InetAddress.getLoopbackAddress();\n+                ssc.bind(new InetSocketAddress(lb, 0));\n+                SocketAddress addr = ssc.getLocalAddress();\n+                ssc.close();\n+\n+                IOException connectException = null;\n+                try (SocketChannel sc = SocketChannel.open()) {\n+                    sc.configureBlocking(false);\n+                    sc.connect(addr);\n+                    while (! sc.finishConnect()) {\n+                        Thread.sleep(1);\n+                    }\n+                } catch (IOException ioe) {\n+                    \/\/ we expect this\n+                    connectException = ioe;\n+                }\n+\n+                recording.stop();\n+                List<RecordedEvent> events = Events.fromRecording(recording);\n+                Asserts.assertEquals(events.size(), 1);\n+                IOHelper.checkConnectionEventException(events.get(0), connectException);\n+            }\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/TestSocketChannelEvents.java","additions":92,"deletions":1,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.net.SocketAddress;\n@@ -41,0 +42,1 @@\n+import jdk.test.lib.Asserts;\n@@ -66,0 +68,1 @@\n+        testConnectException();\n@@ -126,0 +129,27 @@\n+\n+    private static void testConnectException() throws Throwable {\n+        try (Recording recording = new Recording()) {\n+            try (ServerSocket ss = new ServerSocket()) {\n+                recording.enable(IOEvent.EVENT_SOCKET_CONNECT).withThreshold(Duration.ofMillis(0));\n+                recording.start();\n+\n+                InetAddress lb = InetAddress.getLoopbackAddress();\n+                ss.bind(new InetSocketAddress(lb, 0));\n+                SocketAddress addr = ss.getLocalSocketAddress();\n+                ss.close();\n+\n+                IOException connectException = null;\n+                try (Socket s = new Socket()) {\n+                    s.connect(addr);\n+                } catch (IOException ioe) {\n+                    \/\/ we expect this\n+                    connectException = ioe;\n+                }\n+\n+                recording.stop();\n+                List<RecordedEvent> events = Events.fromRecording(recording);\n+                Asserts.assertEquals(events.size(), 1);\n+                IOHelper.checkConnectionEventException(events.get(0), connectException);\n+            }\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/TestSocketEvents.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"modified"}]}