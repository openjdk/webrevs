{"files":[{"patch":"@@ -0,0 +1,137 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.event;\n+\n+import java.net.InetSocketAddress;\n+import java.net.SocketAddress;\n+import java.net.UnixDomainSocketAddress;\n+\n+\/**\n+ * A JFR event for socket connect operations.  This event is mirrored in\n+ * {@code jdk.jfr.events.SocketConnectEvent } where the metadata for the event is\n+ * provided with annotations.  Some of the methods are replaced by generated\n+ * methods when jfr is enabled.  Note that the order of the arguments of the\n+ * {@link #commit(long, long, String, String, int, boolean)} method\n+ * must be the same as the order of the fields.\n+ *\/\n+public class SocketConnectEvent extends Event {\n+\n+    \/\/ THE ORDER OF THE FOLLOWING FIELDS IS IMPORTANT!\n+    \/\/ The order must match the argument order of the generated commit method.\n+    public String host;\n+    public String address;\n+    public int port;\n+    public boolean connected;\n+\n+    \/**\n+     * Actually commit an event.  The implementation is generated automatically.\n+     * The order of the fields must be the same as the parameters in this method.\n+     * {@code commit(..., String, String, int, long)}\n+     *\n+     * @param start     timestamp of the start of the operation\n+     * @param duration  time in nanoseconds to complete the operation\n+     * @param host      remote host of the connection\n+     * @param address   remote address of the connection\n+     * @param port      remote port of the connection\n+     * @param connected     is the connection connected\n+     *\/\n+    public static void commit(long start, long duration, String host, String address, int port, boolean connected) {\n+        \/\/ Generated by JFR\n+    }\n+\n+    \/**\n+     * Determine if an event should be emitted.  The duration of the operation\n+     * must exceed some threshold in order to commit the event.  The implementation\n+     * of this method is generated automatically if jfr is enabled.\n+     *\n+     * @param duration  time in nanoseconds to complete the operation\n+     * @return  true if the event should be commited\n+     *\/\n+    public static boolean shouldCommit(long duration) {\n+        \/\/ Generated by JFR\n+        return false;\n+    }\n+\n+    \/**\n+     * Determine if this kind of event is enabled.  The implementation\n+     * of this method is generated automatically if jfr is enabled.\n+     *\n+     * @return true if event is enabled, false otherwise\n+     *\/\n+    public static boolean enabled() {\n+        \/\/ Generated by JFR\n+        return false;\n+    }\n+\n+    \/**\n+     * Fetch the current timestamp in nanoseconds.  This method is used\n+     * to determine the start and end of an operation.  The implementation\n+     * of this method is generated automatically if jfr is enabled.\n+     *\n+     * @return  the current timestamp value\n+     *\/\n+    public static long timestamp() {\n+        \/\/ Generated by JFR\n+        return 0L;\n+    }\n+\n+    \/**\n+     * Helper method to offer the data needed to potentially commit an event.\n+     * The duration of the operation is computed using the current\n+     * timestamp and the given start time.  If the duration is meets\n+     * or exceeds the configured value (determined by calling the generated method\n+     * {@link #shouldCommit(long)}), an event will be emitted by calling\n+     * {@link #emit(long, long, boolean, SocketAddress)}.\n+     *\n+     * @param start  the start time\n+     * @param connected     is the connection connected\n+     * @param remote  the address of the remote socket\n+     *\/\n+    public static void offer(long start, boolean connected, SocketAddress remote) {\n+        long duration = timestamp() - start;\n+        if (shouldCommit(duration)) {\n+            emit(start, duration, connected, remote);\n+        }\n+    }\n+\n+    \/**\n+     * Helper method to perform a common task of getting event data ready and\n+     * then emitting the event by calling\n+     * {@link #commit(long, long, String, String, int, boolean)}.\n+     *\n+     * @param start  the start time\n+     * @param duration the duration\n+     * @param connected     is the connection connected\n+     * @param remote  the address of the remote socket\n+     *\/\n+    public static void emit(long start, long duration, boolean connected, SocketAddress remote) {\n+        if (remote instanceof InetSocketAddress isa) {\n+            commit(start, duration, isa.getHostString(), isa.getAddress().getHostAddress(), isa.getPort(), connected);\n+        } else if (remote instanceof UnixDomainSocketAddress udsa) {\n+            String path = \"[\" + udsa.getPath().toString() + \"]\";\n+            commit(start, duration, \"Unix domain socket\", path, 0, connected);\n+        }\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/event\/SocketConnectEvent.java","additions":137,"deletions":0,"binary":false,"changes":137,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,0 +56,1 @@\n+import jdk.internal.event.SocketConnectEvent;\n@@ -576,0 +577,2 @@\n+        boolean connected = false;\n+        long start = SocketConnectEvent.timestamp();\n@@ -579,1 +582,0 @@\n-                boolean connected = false;\n@@ -617,0 +619,6 @@\n+        if (SocketConnectEvent.enabled()) {\n+            long duration = SocketConnectEvent.timestamp() - start;\n+            if (SocketConnectEvent.shouldCommit(duration)) {\n+                SocketConnectEvent.commit(start, duration, isa.getHostString(), address.getHostAddress(), port, connected);\n+            }\n+        }\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/NioSocketImpl.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -62,0 +62,1 @@\n+import jdk.internal.event.SocketConnectEvent;\n@@ -950,3 +951,1 @@\n-    @Override\n-    public boolean connect(SocketAddress remote) throws IOException {\n-        SocketAddress sa = checkRemote(remote);\n+    private boolean implConnect(SocketAddress sa) throws IOException {\n@@ -998,0 +997,12 @@\n+    @Override\n+    public boolean connect(SocketAddress remote) throws IOException {\n+        SocketAddress sa = checkRemote(remote);\n+        if (!SocketConnectEvent.enabled()) {\n+            return implConnect(sa);\n+        }\n+        long start = SocketConnectEvent.timestamp();\n+        boolean connected = implConnect(sa);\n+        SocketConnectEvent.offer(start, connected, sa);\n+        return connected;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/SocketChannelImpl.java","additions":14,"deletions":3,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.events;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Label;\n+import jdk.jfr.Name;\n+import jdk.jfr.internal.MirrorEvent;\n+import jdk.jfr.internal.Type;\n+\n+@Name(Type.EVENT_NAME_PREFIX + \"SocketConnect\")\n+@Label(\"Socket Connect\")\n+@Category(\"Java Application\")\n+@Description(\"Connecting a socket\")\n+public class SocketConnectEvent extends MirrorEvent {\n+\n+    @Label(\"Remote Host\")\n+    public String host;\n+\n+    @Label(\"Remote Address\")\n+    public String address;\n+\n+    @Label(\"Remote Port\")\n+    public int port;\n+\n+    @Label(\"Connected\")\n+    public boolean connected;\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/SocketConnectEvent.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,0 +65,1 @@\n+        jdk.internal.event.SocketConnectEvent.class,\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/JDKEvents.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import jdk.jfr.events.SocketConnectEvent;\n@@ -69,0 +70,1 @@\n+        register(\"jdk.internal.event.SocketConnectEvent\", SocketConnectEvent.class);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/MirrorEvents.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -737,0 +737,6 @@\n+    <event name=\"jdk.SocketConnect\">\n+      <setting name=\"enabled\">true<\/setting>\n+      <setting name=\"stackTrace\">true<\/setting>\n+      <setting name=\"threshold\" control=\"socket-threshold\">20 ms<\/setting>\n+    <\/event>\n+\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/default.jfc","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -737,0 +737,6 @@\n+    <event name=\"jdk.SocketConnect\">\n+      <setting name=\"enabled\">true<\/setting>\n+      <setting name=\"stackTrace\">true<\/setting>\n+      <setting name=\"threshold\" control=\"socket-threshold\">10 ms<\/setting>\n+    <\/event>\n+\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/profile.jfc","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -76,0 +76,1 @@\n+    public static final String EVENT_SOCKET_CONNECT = EventNames.SocketConnect;\n@@ -79,1 +80,1 @@\n-    public enum EventType { UnknownEvent, FileForce, FileRead, FileWrite, SocketRead, SocketWrite }\n+    public enum EventType { UnknownEvent, FileForce, FileRead, FileWrite, SocketConnect, SocketRead, SocketWrite }\n@@ -82,1 +83,1 @@\n-        EVENT_UNKNOWN, EVENT_FILE_FORCE, EVENT_FILE_READ, EVENT_FILE_WRITE, EVENT_SOCKET_READ, EVENT_SOCKET_WRITE\n+        EVENT_UNKNOWN, EVENT_FILE_FORCE, EVENT_FILE_READ, EVENT_FILE_WRITE, EVENT_SOCKET_CONNECT, EVENT_SOCKET_READ, EVENT_SOCKET_WRITE\n@@ -97,0 +98,4 @@\n+    public static IOEvent createSocketConnectEvent(Socket s) {\n+        return new IOEvent(Thread.currentThread().getName(), EventType.SocketConnect, 0, getAddress(s), false);\n+    }\n+\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/IOEvent.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -69,0 +69,1 @@\n+                recording.enable(IOEvent.EVENT_SOCKET_CONNECT).withThreshold(Duration.ofMillis(0));\n@@ -105,0 +106,1 @@\n+                    addExpectedEvent(IOEvent.createSocketConnectEvent(sc.socket()));\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/TestSocketChannelEvents.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,0 +71,1 @@\n+                recording.enable(IOEvent.EVENT_SOCKET_CONNECT).withThreshold(Duration.ofMillis(0));\n@@ -107,0 +108,1 @@\n+                    addExpectedEvent(IOEvent.createSocketConnectEvent(s));\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/TestSocketEvents.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -196,0 +196,1 @@\n+    public static final String SocketConnect = PREFIX + \"SocketConnect\";\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/EventNames.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}