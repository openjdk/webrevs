{"files":[{"patch":"@@ -27,0 +27,1 @@\n+import java.io.IOException;\n@@ -46,1 +47,1 @@\n-    public boolean connected;\n+    public String exceptionMessage;\n@@ -58,1 +59,1 @@\n-     * @param connected     is the connection connected\n+     * @param exceptionMessage message from exception if failed\n@@ -60,1 +61,1 @@\n-    public static void commit(long start, long duration, String host, String address, int port, boolean connected) {\n+    public static void commit(long start, long duration, String host, String address, int port, String exceptionMessage) {\n@@ -100,0 +101,8 @@\n+    static String exceptionToMessage(IOException ex) {\n+        if (ex == null) {\n+            return null;\n+        }\n+        String m = ex.getMessage();\n+        return m != null ? m : ex.toString();\n+    }\n+\n@@ -106,1 +115,1 @@\n-     * {@link #emit(long, long, boolean, SocketAddress)}.\n+     * {@link #commit(long, long, String, String, int, String)}.\n@@ -109,1 +118,0 @@\n-     * @param connected     is the connection connected\n@@ -111,0 +119,1 @@\n+     * @param thrown  the exception thrown or null if succeeded\n@@ -112,1 +121,1 @@\n-    public static void offer(long start, boolean connected, SocketAddress remote) {\n+    public static void offer(long start, SocketAddress remote, IOException thrown) {\n@@ -115,1 +124,7 @@\n-            emit(start, duration, connected, remote);\n+            String msg = exceptionToMessage(thrown);\n+            if (remote instanceof InetSocketAddress isa) {\n+                commit(start, duration, isa.getHostString(), isa.getAddress().getHostAddress(), isa.getPort(), msg);\n+            } else if (remote instanceof UnixDomainSocketAddress udsa) {\n+                String path = \"[\" + udsa.getPath().toString() + \"]\";\n+                commit(start, duration, \"Unix domain socket\", path, 0, msg);\n+            }\n@@ -120,3 +135,6 @@\n-     * Helper method to perform a common task of getting event data ready and\n-     * then emitting the event by calling\n-     * {@link #commit(long, long, String, String, int, boolean)}.\n+     * Helper method to offer the data needed to potentially commit an event.\n+     * The duration of the operation is computed using the current\n+     * timestamp and the given start time.  If the duration is meets\n+     * or exceeds the configured value (determined by calling the generated method\n+     * {@link #shouldCommit(long)}), an event will be emitted by calling\n+     * {@code commit(long, long, String, String, int, long)}\n@@ -124,4 +142,5 @@\n-     * @param start  the start time\n-     * @param duration the duration\n-     * @param connected     is the connection connected\n-     * @param remote  the address of the remote socket\n+     * @param start     timestamp of the start of the operation\n+     * @param host      remote host of the connection\n+     * @param address   remote address of the connection\n+     * @param port      remote port of the connection\n+     * @param thrown  the exception thrown or null if succeeded\n@@ -129,6 +148,4 @@\n-    public static void emit(long start, long duration, boolean connected, SocketAddress remote) {\n-        if (remote instanceof InetSocketAddress isa) {\n-            commit(start, duration, isa.getHostString(), isa.getAddress().getHostAddress(), isa.getPort(), connected);\n-        } else if (remote instanceof UnixDomainSocketAddress udsa) {\n-            String path = \"[\" + udsa.getPath().toString() + \"]\";\n-            commit(start, duration, \"Unix domain socket\", path, 0, connected);\n+    public static void offer(long start, String host, String address, int port, IOException thrown) {\n+        long duration = timestamp() - start;\n+        if (shouldCommit(duration)) {\n+            commit(start, duration, host, address, port, exceptionToMessage(thrown));\n@@ -137,0 +154,1 @@\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/event\/SocketConnectEvent.java","additions":38,"deletions":20,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -579,0 +579,1 @@\n+        IOException thrown = null;\n@@ -613,0 +614,1 @@\n+            thrown = ioe;\n@@ -616,1 +618,2 @@\n-                throw SocketExceptions.of(ioe, isa);\n+                thrown = SocketExceptions.of(ioe, isa);\n+                throw thrown;\n@@ -618,5 +621,3 @@\n-        }\n-        if (SocketConnectEvent.enabled()) {\n-            long duration = SocketConnectEvent.timestamp() - start;\n-            if (SocketConnectEvent.shouldCommit(duration)) {\n-                SocketConnectEvent.commit(start, duration, isa.getHostString(), address.getHostAddress(), port, connected);\n+        } finally {\n+            if (SocketConnectEvent.enabled()) {\n+                    SocketConnectEvent.offer(start, isa.getHostString(), address.getHostAddress(), port, thrown);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/NioSocketImpl.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -136,0 +136,3 @@\n+    \/\/ timestamp for socket connect event\n+    private long connectStartTimestamp;\n+\n@@ -951,1 +954,6 @@\n-    private boolean implConnect(SocketAddress sa) throws IOException {\n+    @Override\n+    public boolean connect(SocketAddress remote) throws IOException {\n+        boolean connected = false;\n+        IOException thrown = null;\n+        long start = SocketConnectEvent.timestamp();\n+        SocketAddress sa = checkRemote(remote);\n@@ -957,0 +965,1 @@\n+                    connectStartTimestamp = start;\n@@ -959,1 +968,0 @@\n-                    boolean connected = false;\n@@ -993,9 +1001,6 @@\n-            throw SocketExceptions.of(ioe, sa);\n-        }\n-    }\n-\n-    @Override\n-    public boolean connect(SocketAddress remote) throws IOException {\n-        SocketAddress sa = checkRemote(remote);\n-        if (!SocketConnectEvent.enabled()) {\n-            return implConnect(sa);\n+            thrown = SocketExceptions.of(ioe, sa);\n+            throw thrown;\n+        } finally {\n+            if (SocketConnectEvent.enabled() && (connected || thrown != null)) {\n+                SocketConnectEvent.offer(start, sa, thrown);\n+            }\n@@ -1003,4 +1008,0 @@\n-        long start = SocketConnectEvent.timestamp();\n-        boolean connected = implConnect(sa);\n-        SocketConnectEvent.offer(start, connected, sa);\n-        return connected;\n@@ -1059,0 +1060,3 @@\n+        boolean connected = false;\n+        IOException thrown = null;\n+        long start = 0;\n@@ -1061,0 +1065,1 @@\n+            start = connectStartTimestamp;\n@@ -1065,2 +1070,4 @@\n-                    if (isConnected())\n-                        return true;\n+                    if (isConnected()) {\n+                        connected = true;\n+                        return connected;\n+                    }\n@@ -1070,1 +1077,0 @@\n-                    boolean connected = false;\n@@ -1095,1 +1101,6 @@\n-            throw SocketExceptions.of(ioe, remoteAddress);\n+            thrown = SocketExceptions.of(ioe, remoteAddress);\n+            throw thrown;\n+        } finally {\n+            if (SocketConnectEvent.enabled() && (connected || thrown != null)) {\n+                SocketConnectEvent.offer(start, remoteAddress, thrown);\n+            }\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/SocketChannelImpl.java","additions":30,"deletions":19,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -50,2 +50,2 @@\n-    @Label(\"Connected\")\n-    public boolean connected;\n+    @Label(\"Exception Message\")\n+    public String exceptionMessage;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/SocketConnectEvent.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}