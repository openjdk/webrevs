{"files":[{"patch":"@@ -0,0 +1,141 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.event;\n+\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.SocketAddress;\n+import java.net.UnixDomainSocketAddress;\n+\n+\/**\n+ * A JFR event for when a socket connection is established. This event is mirrored in\n+ * {@code jdk.jfr.events.SocketConnectEvent} where the metadata for the event is\n+ * provided with annotations.  Some of the methods are replaced by generated\n+ * methods when jfr is enabled.  Note that the order of the arguments of the\n+ * {@link #commit(long, long, String, String, int)} method must be the same as the\n+ * order of the fields.\n+ *\/\n+public class SocketConnectEvent extends Event {\n+\n+    \/\/ THE ORDER OF THE FOLLOWING FIELDS IS IMPORTANT!\n+    \/\/ The order must match the argument order of the generated commit method.\n+    public String host;\n+    public String address;\n+    public int port;\n+\n+    \/**\n+     * Actually commit an event.  The implementation is generated automatically.\n+     * The order of the fields must be the same as the parameters in this method.\n+     * {@code commit(..., String, String, int, long)}\n+     *\n+     * @param start     timestamp of the start of the operation\n+     * @param duration  time in nanoseconds to complete the operation\n+     * @param host      remote host of the connection\n+     * @param address   remote address of the connection\n+     * @param port      remote port of the connection\n+     *\/\n+    public static void commit(long start, long duration, String host, String address, int port) {\n+        \/\/ Generated by JFR\n+    }\n+\n+    \/**\n+     * Determine if an event should be emitted.  The duration of the operation\n+     * must exceed some threshold in order to commit the event.  The implementation\n+     * of this method is generated automatically if jfr is enabled.\n+     *\n+     * @param duration  time in nanoseconds to complete the operation\n+     * @return  true if the event should be commited\n+     *\/\n+    public static boolean shouldCommit(long duration) {\n+        \/\/ Generated by JFR\n+        return false;\n+    }\n+\n+    \/**\n+     * Determine if this kind of event is enabled.  The implementation\n+     * of this method is generated automatically if jfr is enabled.\n+     *\n+     * @return true if event is enabled, false otherwise\n+     *\/\n+    public static boolean enabled() {\n+        \/\/ Generated by JFR\n+        return false;\n+    }\n+\n+    \/**\n+     * Fetch the current timestamp in nanoseconds.  This method is used\n+     * to determine the start and end of an operation.  The implementation\n+     * of this method is generated automatically if jfr is enabled.\n+     *\n+     * @return  the current timestamp value\n+     *\/\n+    public static long timestamp() {\n+        \/\/ Generated by JFR\n+        return 0L;\n+    }\n+\n+    \/**\n+     * Helper method to offer the data needed to potentially commit an event.\n+     * The duration of the operation is computed using the current\n+     * timestamp and the given start time.  If the duration is meets\n+     * or exceeds the configured value (determined by calling the generated method\n+     * {@link #shouldCommit(long)}), an event will be emitted by calling\n+     * {@link #commit(long, long, String, String, int)}.\n+     *\n+     * @param start  the start time\n+     * @param remote  the address of the remote socket\n+     *\/\n+    public static void offer(long start, SocketAddress remote) {\n+        long duration = timestamp() - start;\n+        if (shouldCommit(duration)) {\n+            if (remote instanceof InetSocketAddress isa) {\n+                commit(start, duration, isa.getHostString(), isa.getAddress().getHostAddress(), isa.getPort());\n+            } else if (remote instanceof UnixDomainSocketAddress udsa) {\n+                String path = \"[\" + udsa.getPath().toString() + \"]\";\n+                commit(start, duration, \"Unix domain socket\", path, 0);\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Helper method to offer the data needed to potentially commit an event.\n+     * The duration of the operation is computed using the current\n+     * timestamp and the given start time.  If the duration is meets\n+     * or exceeds the configured value (determined by calling the generated method\n+     * {@link #shouldCommit(long)}), an event will be emitted by calling\n+     * {@code commit(long, long, String, String, int, long)}\n+     *\n+     * @param start     timestamp of the start of the operation\n+     * @param host      remote host of the connection\n+     * @param address   remote address of the connection\n+     * @param port      remote port of the connection\n+     *\/\n+    public static void offer(long start, String host, InetAddress address, int port) {\n+        long duration = timestamp() - start;\n+        if (shouldCommit(duration)) {\n+            commit(start, duration, host, address.getHostAddress(), port);\n+        }\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/event\/SocketConnectEvent.java","additions":141,"deletions":0,"binary":false,"changes":141,"status":"added"},{"patch":"@@ -0,0 +1,147 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.event;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.SocketAddress;\n+import java.net.UnixDomainSocketAddress;\n+\n+\/**\n+ * A JFR event for when a socket connection cannot be established. This event is mirrored\n+ * in {@code jdk.jfr.events.SocketConnectFailedEvent} where the metadata for the event is\n+ * provided with annotations.  Some of the methods are replaced by generated\n+ * methods when jfr is enabled.  Note that the order of the arguments of the\n+ * {@link #commit(long, long, String, String, int, String)} method must be the same as\n+ * the order of the fields.\n+ *\/\n+public class SocketConnectFailedEvent extends Event {\n+\n+    \/\/ THE ORDER OF THE FOLLOWING FIELDS IS IMPORTANT!\n+    \/\/ The order must match the argument order of the generated commit method.\n+    public String host;\n+    public String address;\n+    public int port;\n+    public String connectExceptionMessage;\n+\n+    \/**\n+     * Actually commit an event.  The implementation is generated automatically.\n+     * The order of the fields must be the same as the parameters in this method.\n+     * {@code commit(..., String, String, int, long)}\n+     *\n+     * @param start     timestamp of the start of the operation\n+     * @param duration  time in nanoseconds to complete the operation\n+     * @param host      remote host of the connection\n+     * @param address   remote address of the connection\n+     * @param port      remote port of the connection\n+     * @param connectEx the connect exception message\n+     *\/\n+    public static void commit(long start, long duration, String host, String address, int port, String connectEx) {\n+        \/\/ Generated by JFR\n+    }\n+\n+    \/**\n+     * Determine if an event should be emitted.  The duration of the operation\n+     * must exceed some threshold in order to commit the event.  The implementation\n+     * of this method is generated automatically if jfr is enabled.\n+     *\n+     * @param duration  time in nanoseconds to complete the operation\n+     * @return  true if the event should be commited\n+     *\/\n+    public static boolean shouldCommit(long duration) {\n+        \/\/ Generated by JFR\n+        return false;\n+    }\n+\n+    \/**\n+     * Determine if this kind of event is enabled.  The implementation\n+     * of this method is generated automatically if jfr is enabled.\n+     *\n+     * @return true if event is enabled, false otherwise\n+     *\/\n+    public static boolean enabled() {\n+        \/\/ Generated by JFR\n+        return false;\n+    }\n+\n+    \/**\n+     * Fetch the current timestamp in nanoseconds.  This method is used\n+     * to determine the start and end of an operation.  The implementation\n+     * of this method is generated automatically if jfr is enabled.\n+     *\n+     * @return  the current timestamp value\n+     *\/\n+    public static long timestamp() {\n+        \/\/ Generated by JFR\n+        return 0L;\n+    }\n+\n+    \/**\n+     * Helper method to offer the data needed to potentially commit an event.\n+     * The duration of the operation is computed using the current\n+     * timestamp and the given start time.  If the duration is meets\n+     * or exceeds the configured value (determined by calling the generated method\n+     * {@link #shouldCommit(long)}), an event will be emitted by calling\n+     * {@link #commit(long, long, String, String, int, String)}.\n+     *\n+     * @param start  the start time\n+     * @param remote  the address of the remote socket\n+     * @param connectEx the I\/O exception thrown\n+     *\/\n+    public static void offer(long start, SocketAddress remote, IOException connectEx) {\n+        long duration = timestamp() - start;\n+        if (shouldCommit(duration)) {\n+            String msg = connectEx.toString();\n+            if (remote instanceof InetSocketAddress isa) {\n+                commit(start, duration, isa.getHostString(), isa.getAddress().getHostAddress(), isa.getPort(), msg);\n+            } else if (remote instanceof UnixDomainSocketAddress udsa) {\n+                String path = \"[\" + udsa.getPath().toString() + \"]\";\n+                commit(start, duration, \"Unix domain socket\", path, 0, msg);\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Helper method to offer the data needed to potentially commit an event.\n+     * The duration of the operation is computed using the current\n+     * timestamp and the given start time.  If the duration is meets\n+     * or exceeds the configured value (determined by calling the generated method\n+     * {@link #shouldCommit(long)}), an event will be emitted by calling\n+     * {@code commit(long, long, String, String, int, long)}\n+     *\n+     * @param start     timestamp of the start of the operation\n+     * @param host      remote host of the connection\n+     * @param address   remote address of the connection\n+     * @param port      remote port of the connection\n+     * @param connectEx the I\/O exception thrown\n+     *\/\n+    public static void offer(long start, String host, InetAddress address, int port, IOException connectEx) {\n+        long duration = timestamp() - start;\n+        if (shouldCommit(duration)) {\n+            commit(start, duration, host, address.getHostAddress(), port, connectEx.toString());\n+        }\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/event\/SocketConnectFailedEvent.java","additions":147,"deletions":0,"binary":false,"changes":147,"status":"added"},{"patch":"@@ -56,0 +56,2 @@\n+import jdk.internal.event.SocketConnectEvent;\n+import jdk.internal.event.SocketConnectFailedEvent;\n@@ -566,0 +568,3 @@\n+        long connectStart = 0L;\n+        IOException connectEx = null;\n+\n@@ -574,0 +579,1 @@\n+                    connectStart = SocketConnectEvent.timestamp();\n@@ -603,1 +609,1 @@\n-                throw ioe;\n+                connectEx = ioe;\n@@ -606,1 +612,1 @@\n-                throw new SocketException(\"Closed by interrupt\");\n+                connectEx = new SocketException(\"Closed by interrupt\");\n@@ -608,1 +614,11 @@\n-                throw SocketExceptions.of(ioe, isa);\n+                connectEx = SocketExceptions.of(ioe, isa);\n+            }\n+        }\n+\n+        \/\/ record JFR event\n+        if (connectStart != 0L) {\n+            String hostname = isa.getHostString();\n+            if (connectEx == null && SocketConnectEvent.enabled()) {\n+                SocketConnectEvent.offer(connectStart, hostname , address, port);\n+            } else if (connectEx != null && SocketConnectFailedEvent.enabled()) {\n+                SocketConnectFailedEvent.offer(connectStart, hostname, address, port, connectEx);\n@@ -611,0 +627,4 @@\n+\n+        if (connectEx != null) {\n+            throw connectEx;\n+        }\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/NioSocketImpl.java","additions":23,"deletions":3,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -62,0 +62,2 @@\n+import jdk.internal.event.SocketConnectEvent;\n+import jdk.internal.event.SocketConnectFailedEvent;\n@@ -135,0 +137,4 @@\n+    \/\/ JFR support, start time of non-blocking connect\n+    private long nonBlockingConnectStart;\n+\n+\n@@ -849,1 +855,1 @@\n-     * @param isa the remote address\n+     * @param sa the remote socket address\n@@ -937,0 +943,5 @@\n+\n+        boolean connected = false;\n+        long connectStart = 0L;\n+        IOException connectEx = null;\n+\n@@ -944,1 +955,0 @@\n-                    boolean connected = false;\n@@ -948,0 +958,1 @@\n+                        connectStart = SocketConnectEvent.timestamp();\n@@ -964,0 +975,3 @@\n+                        } else {\n+                            \/\/ non-blocking and not connected\n+                            this.nonBlockingConnectStart = connectStart;\n@@ -968,1 +982,0 @@\n-                    return connected;\n@@ -978,1 +991,17 @@\n-            throw SocketExceptions.of(ioe, sa);\n+            connectEx = SocketExceptions.of(ioe, sa);\n+        }\n+\n+        \/\/ record JFR event\n+        if (connectStart != 0L) {\n+            if (connected && SocketConnectEvent.enabled()) {\n+                SocketConnectEvent.offer(connectStart, sa);\n+            } else if (connectEx != null && SocketConnectFailedEvent.enabled()) {\n+                SocketConnectFailedEvent.offer(connectStart, sa, connectEx);\n+            }\n+        }\n+\n+        if (connectEx == null) {\n+            return connected;\n+        } else {\n+            assert !connected;\n+            throw connectEx;\n@@ -1032,0 +1061,3 @@\n+        long connectStart = 0L;\n+        boolean connected = false;\n+        IOException connectEx = null;\n@@ -1040,1 +1072,0 @@\n-\n@@ -1043,1 +1074,0 @@\n-                    boolean connected = false;\n@@ -1046,0 +1076,1 @@\n+                        connectStart = this.nonBlockingConnectStart;\n@@ -1058,1 +1089,0 @@\n-                    return connected;\n@@ -1068,1 +1098,17 @@\n-            throw SocketExceptions.of(ioe, remoteAddress);\n+            connectEx = SocketExceptions.of(ioe, remoteAddress);\n+        }\n+\n+        \/\/ record JFR event\n+        if (connectStart != 0L) {\n+            if (connected && SocketConnectEvent.enabled()) {\n+                SocketConnectEvent.offer(connectStart, remoteAddress());\n+            } else if (connectEx != null && SocketConnectFailedEvent.enabled()) {\n+                SocketConnectFailedEvent.offer(connectStart, remoteAddress(), connectEx);\n+            }\n+        }\n+\n+        if (connectEx != null) {\n+            assert !connected;\n+            throw connectEx;\n+        } else {\n+            return connected;\n@@ -1292,0 +1338,3 @@\n+\n+        long connectStart = 0L;\n+        IOException connectEx = null;\n@@ -1305,0 +1354,1 @@\n+                            connectStart = SocketConnectEvent.timestamp();\n@@ -1328,1 +1378,14 @@\n-            throw SocketExceptions.of(ioe, sa);\n+            connectEx = SocketExceptions.of(ioe, sa);\n+        }\n+\n+        \/\/ record JFR event\n+        if (connectStart != 0L) {\n+            if (connectEx == null && SocketConnectEvent.enabled()) {\n+                SocketConnectEvent.offer(connectStart, sa);\n+            } else if (connectEx != null && SocketConnectFailedEvent.enabled()) {\n+                SocketConnectFailedEvent.offer(connectStart, sa, connectEx);\n+            }\n+        }\n+\n+        if (connectEx != null) {\n+            throw connectEx;\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/SocketChannelImpl.java","additions":72,"deletions":9,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.events;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Label;\n+import jdk.jfr.Name;\n+import jdk.jfr.internal.MirrorEvent;\n+import jdk.jfr.internal.Type;\n+\n+@Name(Type.EVENT_NAME_PREFIX + \"SocketConnect\")\n+@Label(\"Socket Connect\")\n+@Category(\"Java Application\")\n+@Description(\"Socket connection established\")\n+public class SocketConnectEvent extends MirrorEvent {\n+\n+    @Label(\"Remote Host\")\n+    public String host;\n+\n+    @Label(\"Remote Address\")\n+    public String address;\n+\n+    @Label(\"Remote Port\")\n+    public int port;\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/SocketConnectEvent.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.events;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Label;\n+import jdk.jfr.Name;\n+import jdk.jfr.internal.MirrorEvent;\n+import jdk.jfr.internal.Type;\n+\n+@Name(Type.EVENT_NAME_PREFIX + \"SocketConnectFailed\")\n+@Label(\"Socket Connect Failed\")\n+@Category(\"Java Application\")\n+@Description(\"Socket connection could not be established\")\n+public class SocketConnectFailedEvent extends MirrorEvent {\n+\n+    @Label(\"Remote Host\")\n+    public String host;\n+\n+    @Label(\"Remote Address\")\n+    public String address;\n+\n+    @Label(\"Remote Port\")\n+    public int port;\n+\n+    @Label(\"Connect Exception Message\")\n+    public String connectExceptionMessage;\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/SocketConnectFailedEvent.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"},{"patch":"@@ -65,0 +65,2 @@\n+        jdk.internal.event.SocketConnectEvent.class,\n+        jdk.internal.event.SocketConnectFailedEvent.class,\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/JDKEvents.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,0 +41,2 @@\n+import jdk.jfr.events.SocketConnectEvent;\n+import jdk.jfr.events.SocketConnectFailedEvent;\n@@ -68,0 +70,2 @@\n+        register(\"jdk.internal.event.SocketConnectEvent\", SocketConnectEvent.class);\n+        register(\"jdk.internal.event.SocketConnectFailedEvent\", SocketConnectFailedEvent.class);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/MirrorEvents.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -741,0 +741,12 @@\n+    <event name=\"jdk.SocketConnect\">\n+      <setting name=\"enabled\">true<\/setting>\n+      <setting name=\"stackTrace\">true<\/setting>\n+      <setting name=\"threshold\" control=\"socket-threshold\">20 ms<\/setting>\n+    <\/event>\n+\n+    <event name=\"jdk.SocketConnectFailed\">\n+      <setting name=\"enabled\">true<\/setting>\n+      <setting name=\"stackTrace\">true<\/setting>\n+      <setting name=\"threshold\" control=\"socket-threshold\">20 ms<\/setting>\n+    <\/event>\n+\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/default.jfc","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -741,0 +741,12 @@\n+    <event name=\"jdk.SocketConnect\">\n+      <setting name=\"enabled\">true<\/setting>\n+      <setting name=\"stackTrace\">true<\/setting>\n+      <setting name=\"threshold\" control=\"socket-threshold\">10 ms<\/setting>\n+    <\/event>\n+\n+    <event name=\"jdk.SocketConnectFailed\">\n+      <setting name=\"enabled\">true<\/setting>\n+      <setting name=\"stackTrace\">true<\/setting>\n+      <setting name=\"threshold\" control=\"socket-threshold\">10 ms<\/setting>\n+    <\/event>\n+\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/profile.jfc","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -76,0 +76,2 @@\n+    public static final String EVENT_SOCKET_CONNECT = EventNames.SocketConnect;\n+    public static final String EVENT_SOCKET_CONNECT_FAILED = EventNames.SocketConnectFailed;\n@@ -79,1 +81,1 @@\n-    public enum EventType { UnknownEvent, FileForce, FileRead, FileWrite, SocketRead, SocketWrite }\n+    public enum EventType { UnknownEvent, FileForce, FileRead, FileWrite, SocketConnect, SocketConnectFailed, SocketRead, SocketWrite }\n@@ -82,1 +84,1 @@\n-        EVENT_UNKNOWN, EVENT_FILE_FORCE, EVENT_FILE_READ, EVENT_FILE_WRITE, EVENT_SOCKET_READ, EVENT_SOCKET_WRITE\n+        EVENT_UNKNOWN, EVENT_FILE_FORCE, EVENT_FILE_READ, EVENT_FILE_WRITE, EVENT_SOCKET_CONNECT, EVENT_SOCKET_CONNECT_FAILED, EVENT_SOCKET_READ, EVENT_SOCKET_WRITE\n@@ -97,0 +99,9 @@\n+    public static IOEvent createSocketConnectEvent(Socket s) {\n+        return new IOEvent(Thread.currentThread().getName(), EventType.SocketConnect, 0, getAddress(s), false);\n+    }\n+\n+\n+    public static IOEvent createSocketConnectFailedEvent(Socket s) {\n+        return new IOEvent(Thread.currentThread().getName(), EventType.SocketConnectFailed, 0, getAddress(s), false);\n+    }\n+\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/IOEvent.java","additions":14,"deletions":3,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,4 @@\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.SocketAddress;\n@@ -34,0 +38,1 @@\n+import jdk.jfr.Recording;\n@@ -37,0 +42,1 @@\n+import jdk.test.lib.Asserts;\n@@ -133,0 +139,52 @@\n+    public interface ConnectExceptionMaker {\n+        \/**\n+         * Implementation should attempt to connect to the given address, which\n+         * should cause an exception to be generated.\n+         * @return the exception generated, or null if the connection was\n+         *         unexpectedly successful.\n+         * @throws Throwable if something else failed\n+         *\/\n+        IOException generateConnectException(SocketAddress addr) throws Throwable;\n+    }\n+\n+    \/**\n+     * Attempt to test JFR events for an exception condition while attempting to connect\n+     * a socket.  The given function attempts to make the connection which we would like to\n+     * fail so we can inspect the associated JFR event.  To do this a range of IANA reserved\n+     * ports are used which it is expected will be unused.\n+     *\n+     * @param func   an implementation of a connection attempt\n+     * @throws Throwable\n+     *\/\n+    public static void testConnectException(ConnectExceptionMaker func) throws Throwable {\n+        InetAddress lb = InetAddress.getLoopbackAddress();\n+        boolean completed = false;\n+        for (int port = 225; (completed == false)  && (port <= 241); ++port) {\n+            completed = testConnectExceptionOnPort(new InetSocketAddress(lb, port), func);\n+        }\n+        if (! completed)\n+            throw new Exception(\"Unable to setup connect exception\");\n+    }\n+\n+    private static boolean testConnectExceptionOnPort(SocketAddress addr, ConnectExceptionMaker func) throws Throwable {\n+        try (Recording recording = new Recording()) {\n+            recording.enable(IOEvent.EVENT_SOCKET_CONNECT_FAILED);\n+            recording.start();\n+\n+            \/\/ try to connect to a port we expect to be unused\n+            \/\/ to generate an exception\n+            IOException connectException = func.generateConnectException(addr);\n+            if (connectException == null)\n+                return false;\n+\n+            recording.stop();\n+            List<RecordedEvent> events = Events.fromRecording(recording);\n+            Asserts.assertEquals(1, events.size());\n+            RecordedEvent event = events.get(0);\n+            Asserts.assertEquals(IOEvent.EVENT_SOCKET_CONNECT_FAILED, event.getEventType().getName());\n+            Asserts.assertNotNull(connectException);\n+            String eventMessage = event.getString(\"connectExceptionMessage\");\n+            Asserts.assertEquals(eventMessage, connectException.toString());\n+            return true;\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/IOHelper.java","additions":59,"deletions":1,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n-import java.nio.ByteBuffer;\n+import java.net.SocketAddress;\n@@ -37,1 +37,0 @@\n-import java.time.Duration;\n@@ -68,0 +67,1 @@\n+        IOHelper.testConnectException(TestSocketAdapterEvents::makeConnectException);\n@@ -70,1 +70,1 @@\n-    public void test() throws Throwable {\n+    private void test() throws Throwable {\n@@ -73,2 +73,3 @@\n-                recording.enable(IOEvent.EVENT_SOCKET_READ).withThreshold(Duration.ofMillis(0));\n-                recording.enable(IOEvent.EVENT_SOCKET_WRITE).withThreshold(Duration.ofMillis(0));\n+                recording.enable(IOEvent.EVENT_SOCKET_CONNECT);\n+                recording.enable(IOEvent.EVENT_SOCKET_READ);\n+                recording.enable(IOEvent.EVENT_SOCKET_WRITE);\n@@ -88,1 +89,1 @@\n-                            assertEquals(readInt, writeInt, \"Wrong readInt\");\n+                            assertEquals(writeInt, readInt, \"Wrong readInt\");\n@@ -92,1 +93,1 @@\n-                            assertEquals(bytesRead, 3, \"Wrong bytesRead partial buffer\");\n+                            assertEquals(3, bytesRead, \"Wrong bytesRead partial buffer\");\n@@ -96,1 +97,1 @@\n-                            assertEquals(bytesRead, writeBuf.length, \"Wrong bytesRead full buffer\");\n+                            assertEquals(writeBuf.length, bytesRead, \"Wrong bytesRead full buffer\");\n@@ -102,1 +103,1 @@\n-                            assertEquals(readInt, -1, \"Wrong readInt at EOF\");\n+                            assertEquals(-1, readInt, \"Wrong readInt at EOF\");\n@@ -109,9 +110,11 @@\n-                try (SocketChannel sc = SocketChannel.open(ssc.getLocalAddress());\n-                     Socket s = sc.socket(); OutputStream os = s.getOutputStream()) {\n-\n-                    os.write(writeInt);\n-                    addExpectedEvent(IOEvent.createSocketWriteEvent(1, s));\n-                    os.write(writeBuf, 0, 3);\n-                    addExpectedEvent(IOEvent.createSocketWriteEvent(3, s));\n-                    os.write(writeBuf);\n-                    addExpectedEvent(IOEvent.createSocketWriteEvent(writeBuf.length, s));\n+                try (SocketChannel sc = SocketChannel.open(); Socket s = sc.socket()) {\n+                    s.connect(ssc.getLocalAddress());\n+                    addExpectedEvent(IOEvent.createSocketConnectEvent(s));\n+                    try (OutputStream os = s.getOutputStream()) {\n+                        os.write(writeInt);\n+                        addExpectedEvent(IOEvent.createSocketWriteEvent(1, s));\n+                        os.write(writeBuf, 0, 3);\n+                        addExpectedEvent(IOEvent.createSocketWriteEvent(3, s));\n+                        os.write(writeBuf);\n+                        addExpectedEvent(IOEvent.createSocketWriteEvent(writeBuf.length, s));\n+                    }\n@@ -127,0 +130,11 @@\n+\n+    private static IOException makeConnectException(SocketAddress addr) throws Throwable {\n+        IOException connectException = null;\n+        try (SocketChannel sc = SocketChannel.open()) {\n+            Socket s = sc.socket();\n+            s.connect(addr);\n+        } catch (IOException ioe) {\n+            connectException = ioe;\n+        }\n+        return connectException;\n+    }\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/TestSocketAdapterEvents.java","additions":33,"deletions":19,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+import java.net.SocketAddress;\n@@ -34,1 +35,0 @@\n-import java.time.Duration;\n@@ -64,0 +64,3 @@\n+        new TestSocketChannelEvents().testNonBlockingConnect();\n+        IOHelper.testConnectException(TestSocketChannelEvents::makeBlockingConnectException);\n+        IOHelper.testConnectException(TestSocketChannelEvents::makeNonBlockingConnectException);\n@@ -66,1 +69,1 @@\n-    public void test() throws Throwable {\n+    private void test() throws Throwable {\n@@ -69,2 +72,3 @@\n-                recording.enable(IOEvent.EVENT_SOCKET_READ).withThreshold(Duration.ofMillis(0));\n-                recording.enable(IOEvent.EVENT_SOCKET_WRITE).withThreshold(Duration.ofMillis(0));\n+                recording.enable(IOEvent.EVENT_SOCKET_CONNECT);\n+                recording.enable(IOEvent.EVENT_SOCKET_READ);\n+                recording.enable(IOEvent.EVENT_SOCKET_WRITE);\n@@ -83,1 +87,1 @@\n-                            assertEquals(readSize, bufSizeA, \"Wrong readSize bufA\");\n+                            assertEquals(bufSizeA, readSize, \"Wrong readSize bufA\");\n@@ -89,1 +93,1 @@\n-                            assertEquals(readSize, 1 + bufSizeB, \"Wrong readSize 1+bufB\");\n+                            assertEquals(1 + bufSizeB, readSize, \"Wrong readSize 1+bufB\");\n@@ -97,1 +101,1 @@\n-                            assertEquals(readSize, -1, \"Wrong readSize at EOF\");\n+                            assertEquals(-1, readSize, \"Wrong readSize at EOF\");\n@@ -105,0 +109,1 @@\n+                    addExpectedEvent(IOEvent.createSocketConnectEvent(sc.socket()));\n@@ -122,1 +127,1 @@\n-                    assertEquals(bytesWritten, 1 + bufSizeB, \"Wrong bytesWritten 1+bufB\");\n+                    assertEquals(1 + bufSizeB, bytesWritten, \"Wrong bytesWritten 1+bufB\");\n@@ -133,0 +138,54 @@\n+\n+    private void testNonBlockingConnect() throws Throwable {\n+        try (Recording recording = new Recording()) {\n+            try (ServerSocketChannel ssc = ServerSocketChannel.open()) {\n+                recording.enable(IOEvent.EVENT_SOCKET_CONNECT);\n+                recording.start();\n+\n+                InetAddress lb = InetAddress.getLoopbackAddress();\n+                ssc.bind(new InetSocketAddress(lb, 0));\n+                SocketAddress addr = ssc.getLocalAddress();\n+\n+                try (SocketChannel sc = SocketChannel.open()) {\n+                    sc.configureBlocking(false);\n+                    sc.connect(addr);\n+                    try (SocketChannel serverSide = ssc.accept()) {\n+                        while (! sc.finishConnect()) {\n+                            Thread.sleep(1);\n+                        }\n+                    }\n+                    addExpectedEvent(IOEvent.createSocketConnectEvent(sc.socket()));\n+                }\n+\n+                recording.stop();\n+                List<RecordedEvent> events = Events.fromRecording(recording);\n+                IOHelper.verifyEquals(events, expectedEvents);\n+            }\n+        }\n+    }\n+\n+    private static IOException makeBlockingConnectException(SocketAddress addr) throws Throwable {\n+        IOException connectException = null;\n+        try (SocketChannel sc = SocketChannel.open(addr)) {\n+        } catch (IOException ioe) {\n+            connectException = ioe;\n+        }\n+        return connectException;\n+    }\n+\n+    private static IOException makeNonBlockingConnectException(SocketAddress addr) throws Throwable {\n+        IOException connectException = null;\n+        try (SocketChannel sc = SocketChannel.open()) {\n+            sc.configureBlocking(false);\n+            try {\n+                boolean connected = sc.connect(addr);\n+                while (!connected) {\n+                    Thread.sleep(10);\n+                    connected = sc.finishConnect();\n+                }\n+            } catch (IOException ioe) {\n+                connectException = ioe;\n+            }\n+        }\n+        return connectException;\n+    }\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/TestSocketChannelEvents.java","additions":68,"deletions":9,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n-import java.time.Duration;\n+import java.net.SocketAddress;\n@@ -66,0 +66,1 @@\n+        IOHelper.testConnectException(TestSocketEvents::makeConnectException);\n@@ -71,2 +72,3 @@\n-                recording.enable(IOEvent.EVENT_SOCKET_READ).withThreshold(Duration.ofMillis(0));\n-                recording.enable(IOEvent.EVENT_SOCKET_WRITE).withThreshold(Duration.ofMillis(0));\n+                recording.enable(IOEvent.EVENT_SOCKET_CONNECT);\n+                recording.enable(IOEvent.EVENT_SOCKET_READ);\n+                recording.enable(IOEvent.EVENT_SOCKET_WRITE);\n@@ -84,1 +86,1 @@\n-                            assertEquals(readInt, writeInt, \"Wrong readInt\");\n+                            assertEquals(writeInt, readInt, \"Wrong readInt\");\n@@ -88,1 +90,1 @@\n-                            assertEquals(bytesRead, 3, \"Wrong bytesRead partial buffer\");\n+                            assertEquals(3, bytesRead, \"Wrong bytesRead partial buffer\");\n@@ -92,1 +94,1 @@\n-                            assertEquals(bytesRead, writeBuf.length, \"Wrong bytesRead full buffer\");\n+                            assertEquals(writeBuf.length, bytesRead, \"Wrong bytesRead full buffer\");\n@@ -98,1 +100,1 @@\n-                            assertEquals(readInt, -1, \"Wrong readInt at EOF\");\n+                            assertEquals(-1, readInt, \"Wrong readInt at EOF\");\n@@ -107,0 +109,1 @@\n+                    addExpectedEvent(IOEvent.createSocketConnectEvent(s));\n@@ -124,0 +127,10 @@\n+\n+    private static IOException makeConnectException(SocketAddress addr) throws Throwable {\n+        IOException connectException = null;\n+        try (Socket s = new Socket()) {\n+            s.connect(addr);\n+        } catch (IOException ioe) {\n+            connectException = ioe;\n+        }\n+        return connectException;\n+    }\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/TestSocketEvents.java","additions":21,"deletions":8,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -197,0 +197,2 @@\n+    public static final String SocketConnect = PREFIX + \"SocketConnect\";\n+    public static final String SocketConnectFailed = PREFIX + \"SocketConnectFailed\";\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/EventNames.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}