{"files":[{"patch":"@@ -27,1 +27,0 @@\n-import java.io.IOException;\n@@ -34,2 +33,2 @@\n- * A JFR event for socket connect operations.  This event is mirrored in\n- * {@code jdk.jfr.events.SocketConnectEvent } where the metadata for the event is\n+ * A JFR event for when a socket connection is established. This event is mirrored in\n+ * {@code jdk.jfr.events.SocketConnectEvent} where the metadata for the event is\n@@ -38,2 +37,2 @@\n- * {@link #commit(long, long, String, String, int, String)} method\n- * must be the same as the order of the fields.\n+ * {@link #commit(long, long, String, String, int)} method must be the same as the\n+ * order of the fields.\n@@ -48,1 +47,0 @@\n-    public String exceptionMessage;\n@@ -60,1 +58,0 @@\n-     * @param exceptionMessage message from exception if failed\n@@ -62,1 +59,1 @@\n-    public static void commit(long start, long duration, String host, String address, int port, String exceptionMessage) {\n+    public static void commit(long start, long duration, String host, String address, int port) {\n@@ -102,8 +99,0 @@\n-    static String exceptionToMessage(IOException ex) {\n-        if (ex == null) {\n-            return null;\n-        }\n-        String m = ex.getMessage();\n-        return m != null ? m : ex.toString();\n-    }\n-\n@@ -116,1 +105,1 @@\n-     * {@link #commit(long, long, String, String, int, String)}.\n+     * {@link #commit(long, long, String, String, int)}.\n@@ -120,1 +109,0 @@\n-     * @param thrown  the exception thrown or null if succeeded\n@@ -122,1 +110,1 @@\n-    public static void offer(long start, SocketAddress remote, IOException thrown) {\n+    public static void offer(long start, SocketAddress remote) {\n@@ -125,1 +113,0 @@\n-            String msg = exceptionToMessage(thrown);\n@@ -127,1 +114,1 @@\n-                commit(start, duration, isa.getHostString(), isa.getAddress().getHostAddress(), isa.getPort(), msg);\n+                commit(start, duration, isa.getHostString(), isa.getAddress().getHostAddress(), isa.getPort());\n@@ -130,1 +117,1 @@\n-                commit(start, duration, \"Unix domain socket\", path, 0, msg);\n+                commit(start, duration, \"Unix domain socket\", path, 0);\n@@ -147,1 +134,0 @@\n-     * @param thrown  the exception thrown or null if succeeded\n@@ -149,1 +135,1 @@\n-    public static void offer(long start, String host, InetAddress address, int port, IOException thrown) {\n+    public static void offer(long start, String host, InetAddress address, int port) {\n@@ -152,1 +138,1 @@\n-            commit(start, duration, host, address.getHostAddress(), port, exceptionToMessage(thrown));\n+            commit(start, duration, host, address.getHostAddress(), port);\n@@ -155,1 +141,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/event\/SocketConnectEvent.java","additions":11,"deletions":26,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -0,0 +1,147 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.event;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.SocketAddress;\n+import java.net.UnixDomainSocketAddress;\n+\n+\/**\n+ * A JFR event for when a socket connection cannot be established. This event is mirrored\n+ * in {@code jdk.jfr.events.SocketConnectFailedEvent} where the metadata for the event is\n+ * provided with annotations.  Some of the methods are replaced by generated\n+ * methods when jfr is enabled.  Note that the order of the arguments of the\n+ * {@link #commit(long, long, String, String, int, String)} method must be the same as\n+ * the order of the fields.\n+ *\/\n+public class SocketConnectFailedEvent extends Event {\n+\n+    \/\/ THE ORDER OF THE FOLLOWING FIELDS IS IMPORTANT!\n+    \/\/ The order must match the argument order of the generated commit method.\n+    public String host;\n+    public String address;\n+    public int port;\n+    public String connectExceptionMessage;\n+\n+    \/**\n+     * Actually commit an event.  The implementation is generated automatically.\n+     * The order of the fields must be the same as the parameters in this method.\n+     * {@code commit(..., String, String, int, long)}\n+     *\n+     * @param start     timestamp of the start of the operation\n+     * @param duration  time in nanoseconds to complete the operation\n+     * @param host      remote host of the connection\n+     * @param address   remote address of the connection\n+     * @param port      remote port of the connection\n+     * @param connectEx the connect exception message\n+     *\/\n+    public static void commit(long start, long duration, String host, String address, int port, String connectEx) {\n+        \/\/ Generated by JFR\n+    }\n+\n+    \/**\n+     * Determine if an event should be emitted.  The duration of the operation\n+     * must exceed some threshold in order to commit the event.  The implementation\n+     * of this method is generated automatically if jfr is enabled.\n+     *\n+     * @param duration  time in nanoseconds to complete the operation\n+     * @return  true if the event should be commited\n+     *\/\n+    public static boolean shouldCommit(long duration) {\n+        \/\/ Generated by JFR\n+        return false;\n+    }\n+\n+    \/**\n+     * Determine if this kind of event is enabled.  The implementation\n+     * of this method is generated automatically if jfr is enabled.\n+     *\n+     * @return true if event is enabled, false otherwise\n+     *\/\n+    public static boolean enabled() {\n+        \/\/ Generated by JFR\n+        return false;\n+    }\n+\n+    \/**\n+     * Fetch the current timestamp in nanoseconds.  This method is used\n+     * to determine the start and end of an operation.  The implementation\n+     * of this method is generated automatically if jfr is enabled.\n+     *\n+     * @return  the current timestamp value\n+     *\/\n+    public static long timestamp() {\n+        \/\/ Generated by JFR\n+        return 0L;\n+    }\n+\n+    \/**\n+     * Helper method to offer the data needed to potentially commit an event.\n+     * The duration of the operation is computed using the current\n+     * timestamp and the given start time.  If the duration is meets\n+     * or exceeds the configured value (determined by calling the generated method\n+     * {@link #shouldCommit(long)}), an event will be emitted by calling\n+     * {@link #commit(long, long, String, String, int, String)}.\n+     *\n+     * @param start  the start time\n+     * @param remote  the address of the remote socket\n+     * @param connectEx the I\/O exception thrown\n+     *\/\n+    public static void offer(long start, SocketAddress remote, IOException connectEx) {\n+        long duration = timestamp() - start;\n+        if (shouldCommit(duration)) {\n+            String msg = connectEx.getMessage();\n+            if (remote instanceof InetSocketAddress isa) {\n+                commit(start, duration, isa.getHostString(), isa.getAddress().getHostAddress(), isa.getPort(), msg);\n+            } else if (remote instanceof UnixDomainSocketAddress udsa) {\n+                String path = \"[\" + udsa.getPath().toString() + \"]\";\n+                commit(start, duration, \"Unix domain socket\", path, 0, msg);\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Helper method to offer the data needed to potentially commit an event.\n+     * The duration of the operation is computed using the current\n+     * timestamp and the given start time.  If the duration is meets\n+     * or exceeds the configured value (determined by calling the generated method\n+     * {@link #shouldCommit(long)}), an event will be emitted by calling\n+     * {@code commit(long, long, String, String, int, long)}\n+     *\n+     * @param start     timestamp of the start of the operation\n+     * @param host      remote host of the connection\n+     * @param address   remote address of the connection\n+     * @param port      remote port of the connection\n+     * @param connectEx the I\/O exception thrown\n+     *\/\n+    public static void offer(long start, String host, InetAddress address, int port, IOException connectEx) {\n+        long duration = timestamp() - start;\n+        if (shouldCommit(duration)) {\n+            commit(start, duration, host, address.getHostAddress(), port, connectEx.getMessage());\n+        }\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/event\/SocketConnectFailedEvent.java","additions":147,"deletions":0,"binary":false,"changes":147,"status":"added"},{"patch":"@@ -57,0 +57,1 @@\n+import jdk.internal.event.SocketConnectFailedEvent;\n@@ -622,2 +623,9 @@\n-        if (connectStart != 0L && SocketConnectEvent.enabled()) {\n-            SocketConnectEvent.offer(connectStart, isa.getHostString(), address, port, connectEx);\n+\n+        \/\/ record JFR event\n+        if (connectStart != 0L) {\n+            String hostname = isa.getHostString();\n+            if (connectEx == null && SocketConnectEvent.enabled()) {\n+                SocketConnectEvent.offer(connectStart, hostname , address, port);\n+            } else if (connectEx != null && SocketConnectFailedEvent.enabled()) {\n+                SocketConnectFailedEvent.offer(connectStart, hostname, address, port, connectEx);\n+            }\n@@ -625,0 +633,1 @@\n+\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/NioSocketImpl.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -63,0 +63,1 @@\n+import jdk.internal.event.SocketConnectFailedEvent;\n@@ -1010,4 +1011,6 @@\n-        if (connectStart != 0L\n-                && SocketConnectEvent.enabled()\n-                && (connected || connectEx != null)) {\n-            SocketConnectEvent.offer(connectStart, sa, connectEx);\n+        if (connectStart != 0L) {\n+            if (connected && SocketConnectEvent.enabled()) {\n+                SocketConnectEvent.offer(connectStart, sa);\n+            } else if (connectEx != null && SocketConnectFailedEvent.enabled()) {\n+                SocketConnectFailedEvent.offer(connectStart, sa, connectEx);\n+            }\n@@ -1115,4 +1118,6 @@\n-        if (connectStart != 0L\n-                && SocketConnectEvent.enabled()\n-                && (connected || connectEx != null)) {\n-            SocketConnectEvent.offer(connectStart, remoteAddress(), connectEx);\n+        if (connectStart != 0L) {\n+            if (connected && SocketConnectEvent.enabled()) {\n+                SocketConnectEvent.offer(connectStart, remoteAddress());\n+            } else if (connectEx != null && SocketConnectFailedEvent.enabled()) {\n+                SocketConnectFailedEvent.offer(connectStart, remoteAddress(), connectEx);\n+            }\n@@ -1393,2 +1398,6 @@\n-        if (connectStart != 0L && SocketConnectEvent.enabled()) {\n-            SocketConnectEvent.offer(connectStart, sa, connectEx);\n+        if (connectStart != 0L) {\n+            if (connectEx == null && SocketConnectEvent.enabled()) {\n+                SocketConnectEvent.offer(connectStart, sa);\n+            } else if (connectEx != null && SocketConnectFailedEvent.enabled()) {\n+                SocketConnectFailedEvent.offer(connectStart, sa, connectEx);\n+            }\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/SocketChannelImpl.java","additions":19,"deletions":10,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-@Description(\"Connecting a socket\")\n+@Description(\"Socket connection established\")\n@@ -49,3 +49,0 @@\n-\n-    @Label(\"Exception Message\")\n-    public String exceptionMessage;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/SocketConnectEvent.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.events;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Label;\n+import jdk.jfr.Name;\n+import jdk.jfr.internal.MirrorEvent;\n+import jdk.jfr.internal.Type;\n+\n+@Name(Type.EVENT_NAME_PREFIX + \"SocketConnectFailed\")\n+@Label(\"Socket Connect Failed\")\n+@Category(\"Java Application\")\n+@Description(\"Socket connection could not be established\")\n+public class SocketConnectFailedEvent extends MirrorEvent {\n+\n+    @Label(\"Remote Host\")\n+    public String host;\n+\n+    @Label(\"Remote Address\")\n+    public String address;\n+\n+    @Label(\"Remote Port\")\n+    public int port;\n+\n+    @Label(\"Connect Exception Message\")\n+    public String connectExceptionMessage;\n+}\n\\ No newline at end of file\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/SocketConnectFailedEvent.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"},{"patch":"@@ -66,0 +66,1 @@\n+        jdk.internal.event.SocketConnectFailedEvent.class,\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/JDKEvents.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+import jdk.jfr.events.SocketConnectFailedEvent;\n@@ -71,0 +72,1 @@\n+        register(\"jdk.internal.event.SocketConnectFailedEvent\", SocketConnectFailedEvent.class);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/MirrorEvents.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -743,0 +743,6 @@\n+    <event name=\"jdk.SocketConnectFailed\">\n+      <setting name=\"enabled\">true<\/setting>\n+      <setting name=\"stackTrace\">true<\/setting>\n+      <setting name=\"threshold\" control=\"socket-threshold\">20 ms<\/setting>\n+    <\/event>\n+\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/default.jfc","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -743,0 +743,6 @@\n+    <event name=\"jdk.SocketConnectFailed\">\n+      <setting name=\"enabled\">true<\/setting>\n+      <setting name=\"stackTrace\">true<\/setting>\n+      <setting name=\"threshold\" control=\"socket-threshold\">10 ms<\/setting>\n+    <\/event>\n+\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/profile.jfc","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -77,0 +77,1 @@\n+    public static final String EVENT_SOCKET_CONNECT_FAILED = EventNames.SocketConnectFailed;\n@@ -80,1 +81,1 @@\n-    public enum EventType { UnknownEvent, FileForce, FileRead, FileWrite, SocketConnect, SocketRead, SocketWrite }\n+    public enum EventType { UnknownEvent, FileForce, FileRead, FileWrite, SocketConnect, SocketConnectFailed, SocketRead, SocketWrite }\n@@ -83,1 +84,1 @@\n-        EVENT_UNKNOWN, EVENT_FILE_FORCE, EVENT_FILE_READ, EVENT_FILE_WRITE, EVENT_SOCKET_CONNECT, EVENT_SOCKET_READ, EVENT_SOCKET_WRITE\n+        EVENT_UNKNOWN, EVENT_FILE_FORCE, EVENT_FILE_READ, EVENT_FILE_WRITE, EVENT_SOCKET_CONNECT, EVENT_SOCKET_CONNECT_FAILED, EVENT_SOCKET_READ, EVENT_SOCKET_WRITE\n@@ -102,0 +103,5 @@\n+\n+    public static IOEvent createSocketConnectFailedEvent(Socket s) {\n+        return new IOEvent(Thread.currentThread().getName(), EventType.SocketConnectFailed, 0, getAddress(s), false);\n+    }\n+\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/IOEvent.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -135,2 +135,2 @@\n-    public static void checkConnectionEventException(RecordedEvent event, IOException ioe) {\n-        Asserts.assertEquals(event.getEventType().getName(),IOEvent.EVENT_SOCKET_CONNECT);\n+    public static void checkConnectEventException(RecordedEvent event, IOException ioe) {\n+        Asserts.assertEquals(IOEvent.EVENT_SOCKET_CONNECT_FAILED, event.getEventType().getName());\n@@ -138,1 +138,1 @@\n-        String eventMessage = event.getString(\"exceptionMessage\");\n+        String eventMessage = event.getString(\"connectExceptionMessage\");\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/IOHelper.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import java.time.Duration;\n@@ -75,3 +74,3 @@\n-                recording.enable(IOEvent.EVENT_SOCKET_CONNECT).withThreshold(Duration.ofMillis(0));\n-                recording.enable(IOEvent.EVENT_SOCKET_READ).withThreshold(Duration.ofMillis(0));\n-                recording.enable(IOEvent.EVENT_SOCKET_WRITE).withThreshold(Duration.ofMillis(0));\n+                recording.enable(IOEvent.EVENT_SOCKET_CONNECT);\n+                recording.enable(IOEvent.EVENT_SOCKET_READ);\n+                recording.enable(IOEvent.EVENT_SOCKET_WRITE);\n@@ -91,1 +90,1 @@\n-                            assertEquals(readInt, writeInt, \"Wrong readInt\");\n+                            assertEquals(writeInt, readInt, \"Wrong readInt\");\n@@ -95,1 +94,1 @@\n-                            assertEquals(bytesRead, 3, \"Wrong bytesRead partial buffer\");\n+                            assertEquals(3, bytesRead, \"Wrong bytesRead partial buffer\");\n@@ -99,1 +98,1 @@\n-                            assertEquals(bytesRead, writeBuf.length, \"Wrong bytesRead full buffer\");\n+                            assertEquals(writeBuf.length, bytesRead, \"Wrong bytesRead full buffer\");\n@@ -105,1 +104,1 @@\n-                            assertEquals(readInt, -1, \"Wrong readInt at EOF\");\n+                            assertEquals(-1, readInt, \"Wrong readInt at EOF\");\n@@ -136,1 +135,1 @@\n-                recording.enable(IOEvent.EVENT_SOCKET_CONNECT).withThreshold(Duration.ofMillis(0));\n+                recording.enable(IOEvent.EVENT_SOCKET_CONNECT_FAILED);\n@@ -155,2 +154,2 @@\n-                Asserts.assertEquals(events.size(), 1);\n-                IOHelper.checkConnectionEventException(events.get(0), connectException);\n+                Asserts.assertEquals(1, events.size());\n+                IOHelper.checkConnectEventException(events.get(0), connectException);\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/TestSocketAdapterEvents.java","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-import java.time.Duration;\n@@ -74,3 +73,3 @@\n-                recording.enable(IOEvent.EVENT_SOCKET_CONNECT).withThreshold(Duration.ofMillis(0));\n-                recording.enable(IOEvent.EVENT_SOCKET_READ).withThreshold(Duration.ofMillis(0));\n-                recording.enable(IOEvent.EVENT_SOCKET_WRITE).withThreshold(Duration.ofMillis(0));\n+                recording.enable(IOEvent.EVENT_SOCKET_CONNECT);\n+                recording.enable(IOEvent.EVENT_SOCKET_READ);\n+                recording.enable(IOEvent.EVENT_SOCKET_WRITE);\n@@ -89,1 +88,1 @@\n-                            assertEquals(readSize, bufSizeA, \"Wrong readSize bufA\");\n+                            assertEquals(bufSizeA, readSize, \"Wrong readSize bufA\");\n@@ -95,1 +94,1 @@\n-                            assertEquals(readSize, 1 + bufSizeB, \"Wrong readSize 1+bufB\");\n+                            assertEquals(1 + bufSizeB, readSize, \"Wrong readSize 1+bufB\");\n@@ -103,1 +102,1 @@\n-                            assertEquals(readSize, -1, \"Wrong readSize at EOF\");\n+                            assertEquals(-1, readSize, \"Wrong readSize at EOF\");\n@@ -129,1 +128,1 @@\n-                    assertEquals(bytesWritten, 1 + bufSizeB, \"Wrong bytesWritten 1+bufB\");\n+                    assertEquals(1 + bufSizeB, bytesWritten, \"Wrong bytesWritten 1+bufB\");\n@@ -144,1 +143,1 @@\n-                recording.enable(IOEvent.EVENT_SOCKET_CONNECT).withThreshold(Duration.ofMillis(0));\n+                recording.enable(IOEvent.EVENT_SOCKET_CONNECT);\n@@ -172,1 +171,1 @@\n-                recording.enable(IOEvent.EVENT_SOCKET_CONNECT).withThreshold(Duration.ofMillis(0));\n+                recording.enable(IOEvent.EVENT_SOCKET_CONNECT_FAILED);\n@@ -190,2 +189,2 @@\n-                Asserts.assertEquals(events.size(), 1);\n-                IOHelper.checkConnectionEventException(events.get(0), connectException);\n+                Asserts.assertEquals(1, events.size());\n+                IOHelper.checkConnectEventException(events.get(0), connectException);\n@@ -199,1 +198,1 @@\n-                recording.enable(IOEvent.EVENT_SOCKET_CONNECT).withThreshold(Duration.ofMillis(0));\n+                recording.enable(IOEvent.EVENT_SOCKET_CONNECT_FAILED);\n@@ -210,3 +209,4 @@\n-                    sc.connect(addr);\n-                    while (! sc.finishConnect()) {\n-                        Thread.sleep(1);\n+                    boolean connected = sc.connect(addr);\n+                    while (!connected) {\n+                        Thread.sleep(10);\n+                        connected = sc.finishConnect();\n@@ -221,2 +221,2 @@\n-                Asserts.assertEquals(events.size(), 1);\n-                IOHelper.checkConnectionEventException(events.get(0), connectException);\n+                Asserts.assertEquals(1, events.size());\n+                IOHelper.checkConnectEventException(events.get(0), connectException);\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/TestSocketChannelEvents.java","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import java.time.Duration;\n@@ -74,3 +73,3 @@\n-                recording.enable(IOEvent.EVENT_SOCKET_CONNECT).withThreshold(Duration.ofMillis(0));\n-                recording.enable(IOEvent.EVENT_SOCKET_READ).withThreshold(Duration.ofMillis(0));\n-                recording.enable(IOEvent.EVENT_SOCKET_WRITE).withThreshold(Duration.ofMillis(0));\n+                recording.enable(IOEvent.EVENT_SOCKET_CONNECT);\n+                recording.enable(IOEvent.EVENT_SOCKET_READ);\n+                recording.enable(IOEvent.EVENT_SOCKET_WRITE);\n@@ -88,1 +87,1 @@\n-                            assertEquals(readInt, writeInt, \"Wrong readInt\");\n+                            assertEquals(writeInt, readInt, \"Wrong readInt\");\n@@ -92,1 +91,1 @@\n-                            assertEquals(bytesRead, 3, \"Wrong bytesRead partial buffer\");\n+                            assertEquals(3, bytesRead, \"Wrong bytesRead partial buffer\");\n@@ -96,1 +95,1 @@\n-                            assertEquals(bytesRead, writeBuf.length, \"Wrong bytesRead full buffer\");\n+                            assertEquals(writeBuf.length, bytesRead, \"Wrong bytesRead full buffer\");\n@@ -102,1 +101,1 @@\n-                            assertEquals(readInt, -1, \"Wrong readInt at EOF\");\n+                            assertEquals(-1, readInt, \"Wrong readInt at EOF\");\n@@ -133,1 +132,1 @@\n-                recording.enable(IOEvent.EVENT_SOCKET_CONNECT).withThreshold(Duration.ofMillis(0));\n+                recording.enable(IOEvent.EVENT_SOCKET_CONNECT_FAILED);\n@@ -151,2 +150,2 @@\n-                Asserts.assertEquals(events.size(), 1);\n-                IOHelper.checkConnectionEventException(events.get(0), connectException);\n+                Asserts.assertEquals(1, events.size());\n+                IOHelper.checkConnectEventException(events.get(0), connectException);\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/TestSocketEvents.java","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -197,0 +197,1 @@\n+    public static final String SocketConnectFailed = PREFIX + \"SocketConnectFailed\";\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/EventNames.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}