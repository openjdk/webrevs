{"files":[{"patch":"@@ -119,5 +119,0 @@\n-  if ((LockingMode != LM_LEGACY) && (LockingMode != LM_MONITOR)) {\n-    warning(\"Unsupported locking mode for this CPU.\");\n-    FLAG_SET_DEFAULT(LockingMode, LM_LEGACY);\n-  }\n-\n","filename":"src\/hotspot\/cpu\/zero\/vm_version_zero.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -488,12 +488,16 @@\n-    BasicLock *lock = monitor->lock();\n-    markWord header = lock->displaced_header();\n-    oop rcvr = monitor->obj();\n-    monitor->set_obj(nullptr);\n-\n-    bool dec_monitor_count = true;\n-    if (header.to_pointer() != nullptr) {\n-      markWord old_header = markWord::encode(lock);\n-      if (rcvr->cas_set_mark(header, old_header) != old_header) {\n-        monitor->set_obj(rcvr);\n-        dec_monitor_count = false;\n-        InterpreterRuntime::monitorexit(monitor);\n+    bool success = false;\n+    if (LockingMode == LM_LEGACY) {\n+      BasicLock* lock = monitor->lock();\n+      oop rcvr = monitor->obj();\n+      monitor->set_obj(nullptr);\n+      success = true;\n+      markWord header = lock->displaced_header();\n+      if (header.to_pointer() != nullptr) { \/\/ Check for recursive lock\n+        markWord old_header = markWord::encode(lock);\n+        if (rcvr->cas_set_mark(header, old_header) != old_header) {\n+          monitor->set_obj(rcvr);\n+          success = false;\n+        }\n+      }\n+      if (success) {\n+        THREAD->dec_held_monitor_count();\n@@ -502,2 +506,2 @@\n-    if (dec_monitor_count) {\n-      THREAD->dec_held_monitor_count();\n+    if (!success) {\n+      InterpreterRuntime::monitorexit(monitor);\n@@ -507,1 +511,1 @@\n- unwind_and_return:\n+  unwind_and_return:\n","filename":"src\/hotspot\/cpu\/zero\/zeroInterpreter_zero.cpp","additions":19,"deletions":15,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -1820,11 +1820,0 @@\n-#if !defined(X86) && !defined(AARCH64) && !defined(RISCV64) && !defined(ARM) && !defined(PPC64) && !defined(S390)\n-  if (LockingMode == LM_LIGHTWEIGHT) {\n-    FLAG_SET_CMDLINE(LockingMode, LM_LEGACY);\n-    warning(\"New lightweight locking not supported on this platform\");\n-  }\n-  if (UseObjectMonitorTable) {\n-    FLAG_SET_CMDLINE(UseObjectMonitorTable, false);\n-    warning(\"UseObjectMonitorTable not supported on this platform\");\n-  }\n-#endif\n-\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"}]}