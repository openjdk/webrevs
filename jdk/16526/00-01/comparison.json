{"files":[{"patch":"@@ -28,1 +28,1 @@\n-import static jdk.internal.classfile.Opcode.*;\n+import static jdk.internal.classfile.Classfile.*;\n@@ -39,39 +39,18 @@\n-        return Classfile.of().build(classModel.thisClass().asSymbol(),\n-                classBuilder ->  {\n-                    for (ClassElement ce : classModel) {\n-                        if (ce instanceof AccessFlags accessFlags) {\n-                            classBuilder.withFlags(0x0601); \/\/ ACC_INTERFACE | ACC_ABSTRACT | ACC_PUBLIC);\n-                        } else if (ce instanceof MethodModel mm) {\n-                            \/\/ Find <init> method and delete it\n-                            if (mm.methodName().stringValue().equals(\"<init>\")) {\n-                                continue;\n-                            }\n-                            \/\/  Convert method tag. Find Methodref, which is not \"<init>\" and only invoked\n-                            \/\/  by other methods in the interface, convert it to InterfaceMethodref and\n-                            \/\/  if opcode is invokevirtual, convert it to invokeinterface\n-                            classBuilder.withMethod(mm.methodName().stringValue(),\n-                                    mm.methodTypeSymbol(),\n-                                    mm.flags().flagsMask(),\n-                                    methodBuilder -> {\n-                                        for (MethodElement me : mm) {\n-                                            if (me instanceof CodeModel xm) {\n-                                                methodBuilder.withCode(codeBuilder -> {\n-                                                    for (CodeElement e : xm) {\n-                                                        if (e instanceof InvokeInstruction i && i.owner() == classModel.thisClass()) {\n-                                                            Opcode opcode = i.opcode() == INVOKEVIRTUAL ? INVOKEINTERFACE : i.opcode();\n-                                                            codeBuilder.invokeInstruction(opcode, i.owner().asSymbol(),\n-                                                                    i.name().stringValue(), i.typeSymbol(), true);\n-                                                        } else {\n-                                                            codeBuilder.with(e);\n-                                                        }\n-                                                    }});\n-                                            } else {\n-                                                methodBuilder.with(me);\n-                                            }\n-                                        }\n-                                    });\n-                        } else {\n-                            classBuilder.with(ce);\n-                        }\n-                    }\n-                });\n+        \/\/  Convert method tag. Find Methodref which is only invoked by other methods\n+        \/\/  in the interface, convert it to InterfaceMethodref.  If opcode is invokevirtual,\n+        \/\/  convert it to invokeinterface\n+        CodeTransform ct = (b, e) -> {\n+            if (e instanceof InvokeInstruction i && i.owner() == classModel.thisClass()) {\n+                Opcode opcode = i.opcode() == Opcode.INVOKEVIRTUAL ? Opcode.INVOKEINTERFACE : i.opcode();\n+                b.invokeInstruction(opcode, i.owner().asSymbol(),\n+                        i.name().stringValue(), i.typeSymbol(), true);\n+            } else {\n+                b.with(e);\n+            }\n+        };\n+        \n+        return Classfile.of().transform(classModel,\n+            ClassTransform.dropping(ce -> ce instanceof MethodModel mm && mm.methodName().stringValue().equals(\"<init>\"))\n+                          .andThen(ClassTransform.transformingMethodBodies(ct))\n+                          .andThen(ClassTransform.endHandler(b -> b.withFlags(ACC_INTERFACE | ACC_ABSTRACT | ACC_PUBLIC)))\n+        );\n","filename":"test\/jdk\/jdk\/lambda\/separate\/ClassToInterfaceConverter.java","additions":19,"deletions":40,"binary":false,"changes":59,"status":"modified"}]}