{"files":[{"patch":"@@ -36,1 +36,1 @@\n-    * Compile all sources in {@code jasmSources}. First write them to the {@code sourceDir},\n+    * Compile all sources in {@code javaSources}. First write them to the {@code sourceDir},\n@@ -39,3 +39,3 @@\n-    public static void compileJasmSources(List<SourceCode> jasmSources, Path sourceDir, Path classesDir) {\n-        if (jasmSources.isEmpty()) {\n-            Utils.printlnVerbose(\"No jasm sources to compile.\");\n+    public static void compileJavaSources(List<SourceCode> javaSources, Path sourceDir, Path classesDir) {\n+        if (javaSources.isEmpty()) {\n+            Utils.printlnVerbose(\"No java sources to compile.\");\n@@ -44,1 +44,1 @@\n-        Utils.printlnVerbose(\"Compiling jasm sources: \" + jasmSources.size());\n+        Utils.printlnVerbose(\"Compiling Java sources: \" + javaSources.size());\n@@ -46,3 +46,3 @@\n-        List<Path> jasmFilePaths = Utils.writeSourcesToFile(jasmSources, sourceDir);\n-        compileJasmFiles(jasmFilePaths, classesDir);\n-        Utils.printlnVerbose(\"Jasm sources compiled.\");\n+        List<Path> javaFilePaths = Utils.writeSourcesToFile(javaSources, sourceDir);\n+        compileJavaFiles(javaFilePaths, classesDir);\n+        Utils.printlnVerbose(\"Java sources compiled.\");\n@@ -52,1 +52,1 @@\n-    * Compile a list of files (i.e. {@code paths}) using asmtools jasm and store\n+    * Compile a list of files (i.e. {@code paths}) using javac and store\n@@ -55,1 +55,1 @@\n-    private static void compileJasmFiles(List<Path> paths, Path classesDir) {\n+    private static void compileJavaFiles(List<Path> paths, Path classesDir) {\n@@ -58,1 +58,1 @@\n-        command.add(\"%s\/bin\/java\".formatted(System.getProperty(\"compile.jdk\")));\n+        command.add(\"%s\/bin\/javac\".formatted(System.getProperty(\"compile.jdk\")));\n@@ -60,2 +60,2 @@\n-        command.add(Utils.getAsmToolsPath());\n-        command.add(\"org.openjdk.asmtools.jasm.Main\");\n+        \/\/ Note: the backslashes from windows paths must be escaped!\n+        command.add(Utils.getEscapedClassPathAndClassesDir(classesDir));\n@@ -72,1 +72,1 @@\n-    * Compile all sources in {@code javaSources}. First write them to the {@code sourceDir},\n+    * Compile all sources in {@code jasmSources}. First write them to the {@code sourceDir},\n@@ -75,3 +75,3 @@\n-    public static void compileJavaSources(List<SourceCode> javaSources, Path sourceDir, Path classesDir) {\n-        if (javaSources.isEmpty()) {\n-            Utils.printlnVerbose(\"No java sources to compile.\");\n+    public static void compileJasmSources(List<SourceCode> jasmSources, Path sourceDir, Path classesDir) {\n+        if (jasmSources.isEmpty()) {\n+            Utils.printlnVerbose(\"No jasm sources to compile.\");\n@@ -80,1 +80,1 @@\n-        Utils.printlnVerbose(\"Compiling Java sources: \" + javaSources.size());\n+        Utils.printlnVerbose(\"Compiling jasm sources: \" + jasmSources.size());\n@@ -82,3 +82,3 @@\n-        List<Path> javaFilePaths = Utils.writeSourcesToFile(javaSources, sourceDir);\n-        compileJavaFiles(javaFilePaths, classesDir);\n-        Utils.printlnVerbose(\"Java sources compiled.\");\n+        List<Path> jasmFilePaths = Utils.writeSourcesToFile(jasmSources, sourceDir);\n+        compileJasmFiles(jasmFilePaths, classesDir);\n+        Utils.printlnVerbose(\"Jasm sources compiled.\");\n@@ -88,1 +88,1 @@\n-    * Compile a list of files (i.e. {@code paths}) using javac and store\n+    * Compile a list of files (i.e. {@code paths}) using asmtools jasm and store\n@@ -91,1 +91,1 @@\n-    private static void compileJavaFiles(List<Path> paths, Path classesDir) {\n+    private static void compileJasmFiles(List<Path> paths, Path classesDir) {\n@@ -94,1 +94,1 @@\n-        command.add(\"%s\/bin\/javac\".formatted(System.getProperty(\"compile.jdk\")));\n+        command.add(\"%s\/bin\/java\".formatted(System.getProperty(\"compile.jdk\")));\n@@ -96,2 +96,2 @@\n-        \/\/ Note: the backslashes from windows paths must be escaped!\n-        command.add(Utils.getEscapedClassPathAndClassesDir(classesDir));\n+        command.add(Utils.getAsmToolsPath());\n+        command.add(\"org.openjdk.asmtools.jasm.Main\");\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/compile_framework\/Compile.java","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -41,2 +41,2 @@\n-    private final Path sourceDir = Utils.getTempDir(\"compile-framework-sources-\");\n-    private final Path classesDir = Utils.getTempDir(\"compile-framework-classes-\");\n+    private final Path sourceDir = Utils.makeUniqueDir(\"compile-framework-sources-\");\n+    private final Path classesDir = Utils.makeUniqueDir(\"compile-framework-classes-\");\n@@ -45,11 +45,0 @@\n-    \/**\n-    * Returns the classpath appended with the {@code classesDir}, where\n-    * the compiled classes are stored. This enables another VM to load\n-    * the compiled classes. Note, the string is already backslash escaped,\n-    * so that the windows paths which use backslashes can be used directly\n-    * as strings.\n-    *\/\n-    public String getEscapedClassPathOfCompiledClasses() {\n-        return Utils.getEscapedClassPathAndClassesDir(classesDir);\n-    }\n-\n@@ -113,19 +102,0 @@\n-    \/**\n-    * Invoke a static method from the compiled code.\n-    * @param className Class name of a compiled class.\n-    * @param methodName Method name of the class.\n-    * @param args List of arguments for the method invocation.\n-    * @return Return value from the invocation.\n-    *\/\n-    public Object invoke(String className, String methodName, Object[] args) {\n-        Method method = findMethod(className, methodName);\n-\n-        try {\n-            return method.invoke(null, args);\n-        } catch (IllegalAccessException e) {\n-            throw new CompileFrameworkException(\"Illegal access:\", e);\n-        } catch (InvocationTargetException e) {\n-            throw new CompileFrameworkException(\"Invocation target:\", e);\n-        }\n-    }\n-\n@@ -152,0 +122,30 @@\n+\n+    \/**\n+    * Invoke a static method from the compiled code.\n+    * @param className Class name of a compiled class.\n+    * @param methodName Method name of the class.\n+    * @param args List of arguments for the method invocation.\n+    * @return Return value from the invocation.\n+    *\/\n+    public Object invoke(String className, String methodName, Object[] args) {\n+        Method method = findMethod(className, methodName);\n+\n+        try {\n+            return method.invoke(null, args);\n+        } catch (IllegalAccessException e) {\n+            throw new CompileFrameworkException(\"Illegal access:\", e);\n+        } catch (InvocationTargetException e) {\n+            throw new CompileFrameworkException(\"Invocation target:\", e);\n+        }\n+    }\n+\n+    \/**\n+    * Returns the classpath appended with the {@code classesDir}, where\n+    * the compiled classes are stored. This enables another VM to load\n+    * the compiled classes. Note, the string is already backslash escaped,\n+    * so that the windows paths which use backslashes can be used directly\n+    * as strings.\n+    *\/\n+    public String getEscapedClassPathOfCompiledClasses() {\n+        return Utils.getEscapedClassPathAndClassesDir(classesDir);\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/compile_framework\/CompileFramework.java","additions":32,"deletions":32,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-    public static Path getTempDir(String prefix) {\n+    public static Path makeUniqueDir(String prefix) {\n@@ -75,0 +75,12 @@\n+    \/**\n+    * Return the classpath, appended with the {@code classesDir}.\n+    *\/\n+    public static String getEscapedClassPathAndClassesDir(Path classesDir) {\n+        String cp = System.getProperty(\"java.class.path\") +\n+                    File.pathSeparator +\n+                    classesDir.toAbsolutePath();\n+        \/\/ Escape the backslash for Windows paths. We are using the path in the\n+        \/\/ command-line and Java code, so we always want it to be escaped.\n+        return cp.replace(\"\\\\\", \"\\\\\\\\\");\n+    }\n+\n@@ -159,12 +171,0 @@\n-\n-    \/**\n-    * Return the classpath, appended with the {@code classesDir}.\n-    *\/\n-    public static String getEscapedClassPathAndClassesDir(Path classesDir) {\n-        String cp = System.getProperty(\"java.class.path\") +\n-                    File.pathSeparator +\n-                    classesDir.toAbsolutePath();\n-        \/\/ Escape the backslash for Windows paths. We are using the path in the\n-        \/\/ command-line and Java code, so we always want it to be escaped.\n-        return cp.replace(\"\\\\\", \"\\\\\\\\\");\n-    }\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/compile_framework\/Utils.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"}]}