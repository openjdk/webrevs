{"files":[{"patch":"@@ -41,0 +41,3 @@\n+\/**\n+* TODO\n+*\/\n@@ -50,0 +53,3 @@\n+    \/**\n+    * TODO\n+    *\/\n@@ -54,1 +60,3 @@\n-        return cp.replace(\"\\\\\", \"\\\\\\\\\"); \/\/ For windows paths\n+        \/\/ Escape the backslash for Windows paths. We are using the path in the command-line\n+\t\/\/ and Java code, so we always want it to be escaped.\n+        return cp.replace(\"\\\\\", \"\\\\\\\\\");\n@@ -57,2 +65,6 @@\n-    public void add(SourceCode sourceCode) {\n-        sourceCodes.add(sourceCode);\n+    public void addJavaSourceCode(String className, String code) {\n+        sourceCodes.add(new SourceCode(className, code, SourceCode.Kind.JAVA));\n+    }\n+\n+    public void addJasmSourceCode(String className, String code) {\n+        sourceCodes.add(new SourceCode(className, code, SourceCode.Kind.JASM));\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/compile_framework\/CompileFramework.java","additions":15,"deletions":3,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-public class SourceCode {\n+class SourceCode {\n@@ -42,8 +42,0 @@\n-    public static SourceCode newJavaSourceCode(String className, String code) {\n-        return new SourceCode(className, code, Kind.JAVA);\n-    }\n-\n-    public static SourceCode newJasmSourceCode(String className, String code) {\n-        return new SourceCode(className, code, Kind.JASM);\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/compile_framework\/SourceCode.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -92,2 +92,2 @@\n-        comp.add(SourceCode.newJasmSourceCode(\"p.xyz.XYZJasm\", generateJasm()));\n-        comp.add(SourceCode.newJavaSourceCode(\"p.xyz.XYZJava\", generateJava()));\n+        comp.addJasmSourceCode(\"p.xyz.XYZJasm\", generateJasm());\n+        comp.addJavaSourceCode(\"p.xyz.XYZJava\", generateJava());\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/compile_framework\/examples\/CombinedJavaJasmExample.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-            comp.add(SourceCode.newJasmSourceCode(\"p.xyz.XYZ\" + i, generate(i)));\n+            comp.addJasmSourceCode(\"p.xyz.XYZ\" + i, generate(i));\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/compile_framework\/examples\/MultiFileJasmExample.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-            comp.add(SourceCode.newJavaSourceCode(\"p.xyz.XYZ\" + i, generate(i)));\n+            comp.addJavaSourceCode(\"p.xyz.XYZ\" + i, generate(i));\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/compile_framework\/examples\/MultiFileJavaExample.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,2 +63,1 @@\n-        SourceCode file = SourceCode.newJasmSourceCode(\"XYZ\", src);\n-        comp.add(file);\n+        comp.addJasmSourceCode(\"XYZ\", src);\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/compile_framework\/examples\/SimpleJasmExample.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -58,3 +58,1 @@\n-        String src = generate();\n-        SourceCode file = SourceCode.newJavaSourceCode(\"XYZ\", src);\n-        comp.add(file);\n+        comp.addJavaSourceCode(\"XYZ\", generate());\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/compile_framework\/examples\/SimpleJavaExample.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-        comp.add(SourceCode.newJavaSourceCode(\"X1\", generate_X1(comp)));\n+        comp.addJavaSourceCode(\"X1\", generate_X1(comp));\n@@ -120,1 +120,1 @@\n-        comp.add(SourceCode.newJavaSourceCode(\"X2\", generate_X2(comp)));\n+        comp.addJavaSourceCode(\"X2\", generate_X2(comp));\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/compile_framework\/examples\/TestFrameworkJavaExample.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -52,3 +52,1 @@\n-        String src = generate();\n-        SourceCode file = SourceCode.newJasmSourceCode(\"XYZ\", src);\n-        comp.add(file);\n+        comp.addJasmSourceCode(\"XYZ\", generate());\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/compile_framework\/tests\/TestBadJasmCompilation.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -52,3 +52,1 @@\n-        String src = generate();\n-        SourceCode file = SourceCode.newJavaSourceCode(\"XYZ\", src);\n-        comp.add(file);\n+        comp.addJavaSourceCode(\"XYZ\", generate());\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/compile_framework\/tests\/TestBadJavaCompilation.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-        comp.add(SourceCode.newJavaSourceCode(\"XYZ\", generate(i)));\n+        comp.addJavaSourceCode(\"XYZ\", generate(i));\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/compile_framework\/tests\/TestConcurrentCompilation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}