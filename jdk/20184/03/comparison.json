{"files":[{"patch":"@@ -0,0 +1,303 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.lib.compile_framework;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.concurrent.TimeUnit;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class CompileFramework {\n+    private static final int COMPILE_TIMEOUT = 60;\n+    private static final boolean VERBOSE = Boolean.getBoolean(\"CompileFrameworkVerbose\");\n+\n+    private List<SourceCode> sourceCodes = new ArrayList<>();\n+    private final Path sourceDir = getTempDir(\"compile-framework-sources-\");\n+    private final Path classesDir = getTempDir(\"compile-framework-classes-\");\n+    private URLClassLoader classLoader;\n+\n+    public String getClassPathOfCompiledClasses() {\n+        String cp = System.getProperty(\"java.class.path\") +\n+                    File.pathSeparator +\n+                    classesDir.toAbsolutePath();\n+        return cp.replace(\"\\\\\", \"\\\\\\\\\"); \/\/ For windows paths\n+    }\n+\n+    public void add(SourceCode sourceCode) {\n+        sourceCodes.add(sourceCode);\n+    }\n+\n+    public String sourceCodesAsString() {\n+        StringBuilder builder = new StringBuilder();\n+        for (SourceCode sourceCode : sourceCodes) {\n+            builder.append(\"SourceCode: \").append(sourceCode.filePathName()).append(System.lineSeparator());\n+            builder.append(sourceCode.code).append(System.lineSeparator());\n+        }\n+        return builder.toString();\n+    }\n+\n+    private static void println(String s) {\n+        if (VERBOSE) {\n+            System.out.println(s);\n+        }\n+    }\n+\n+    public void compile() {\n+        if (classLoader != null) {\n+            throw new CompileFrameworkException(\"Cannot compile twice!\");\n+        }\n+\n+        println(\"------------------ CompileFramework: SourceCode -------------------\");\n+        println(sourceCodesAsString());\n+\n+        List<SourceCode> javaSources = new ArrayList<SourceCode>();\n+        List<SourceCode> jasmSources = new ArrayList<SourceCode>();\n+        for (SourceCode sourceCode : sourceCodes) {\n+            switch (sourceCode.kind) {\n+                case SourceCode.Kind.JASM -> { jasmSources.add(sourceCode);  }\n+                case SourceCode.Kind.JAVA -> { javaSources.add(sourceCode);  }\n+            }\n+        }\n+\n+        System.out.println(\"------------------ CompileFramework: Compilation ------------------\");\n+        System.out.println(\"Source directory: \" + sourceDir);\n+        System.out.println(\"Classes directory: \" + classesDir);\n+\n+        compileJasmSources(jasmSources);\n+        compileJavaSources(javaSources);\n+        setUpClassLoader();\n+    }\n+\n+    private static Path getTempDir(String prefix) {\n+        try {\n+            return Files.createTempDirectory(Paths.get(\".\"), prefix);\n+        } catch (Exception e) {\n+            throw new InternalCompileFrameworkException(\"Could not set up temporary directory\", e);\n+        }\n+    }\n+\n+    private void compileJasmSources(List<SourceCode> jasmSources) {\n+        if (jasmSources.isEmpty()) {\n+            println(\"No jasm sources to compile.\");\n+            return;\n+        }\n+        println(\"Compiling jasm sources: \" + jasmSources.size());\n+\n+        List<Path> jasmFilePaths = writeSourcesToFile(jasmSources);\n+        compileJasmFiles(jasmFilePaths);\n+        println(\"Jasm sources compiled.\");\n+    }\n+\n+    private void compileJasmFiles(List<Path> paths) {\n+        \/\/ Compile JASM files with asmtools.jar, shipped with jtreg.\n+        List<String> command = new ArrayList<>();\n+\n+        command.add(\"%s\/bin\/java\".formatted(System.getProperty(\"compile.jdk\")));\n+        command.add(\"-classpath\");\n+        command.add(getAsmToolsPath());\n+        command.add(\"org.openjdk.asmtools.jasm.Main\");\n+        command.add(\"-d\");\n+        command.add(classesDir.toString());\n+        for (Path path : paths) {\n+            command.add(path.toAbsolutePath().toString());\n+        }\n+\n+        executeCompileCommand(command);\n+    }\n+\n+    private static String[] getClassPaths() {\n+        String separator = File.pathSeparator;\n+        return System.getProperty(\"java.class.path\").split(separator);\n+    }\n+\n+    private static String getAsmToolsPath() {\n+        for (String path : getClassPaths()) {\n+            if (path.endsWith(\"jtreg.jar\")) {\n+                File jtreg = new File(path);\n+                File dir = jtreg.getAbsoluteFile().getParentFile();\n+                File asmtools = new File(dir, \"asmtools.jar\");\n+                if (!asmtools.exists()) {\n+                    throw new InternalCompileFrameworkException(\"Found jtreg.jar in classpath, but could not find asmtools.jar\");\n+                }\n+                return asmtools.getAbsolutePath();\n+            }\n+        }\n+        throw new InternalCompileFrameworkException(\"Could not find asmtools because could not find jtreg.jar in classpath\");\n+    }\n+\n+    private void compileJavaSources(List<SourceCode> javaSources) {\n+        if (javaSources.isEmpty()) {\n+            println(\"No java sources to compile.\");\n+            return;\n+        }\n+        println(\"Compiling Java sources: \" + javaSources.size());\n+\n+        List<Path> javaFilePaths = writeSourcesToFile(javaSources);\n+        compileJavaFiles(javaFilePaths);\n+        println(\"Java sources compiled.\");\n+    }\n+\n+    private void compileJavaFiles(List<Path> paths) {\n+        \/\/ Compile JAVA files with javac, in the \"compile.jdk\".\n+        List<String> command = new ArrayList<>();\n+\n+        command.add(\"%s\/bin\/javac\".formatted(System.getProperty(\"compile.jdk\")));\n+        command.add(\"-classpath\");\n+        command.add(getClassPathOfCompiledClasses());\n+        command.add(\"-d\");\n+        command.add(classesDir.toString());\n+        for (Path path : paths) {\n+            command.add(path.toAbsolutePath().toString());\n+        }\n+\n+        executeCompileCommand(command);\n+    }\n+\n+    private List<Path> writeSourcesToFile(List<SourceCode> sources) {\n+        List<Path> storedFiles = new ArrayList<Path>();\n+        for (SourceCode sourceCode : sources) {\n+            Path path = sourceDir.resolve(sourceCode.filePathName());\n+            writeCodeToFile(sourceCode.code, path);\n+            storedFiles.add(path);\n+        }\n+        return storedFiles;\n+    }\n+\n+    private static void writeCodeToFile(String code, Path path) {\n+        println(\"File: \" + path);\n+\n+        \/\/ Ensure directory of the file exists.\n+        Path dir = path.getParent();\n+        try {\n+            Files.createDirectories(dir);\n+        } catch (Exception e) {\n+            throw new CompileFrameworkException(\"Could not create directory: \" + dir, e);\n+        }\n+\n+        \/\/ Write to file.\n+        try (BufferedWriter writer = Files.newBufferedWriter(path)) {\n+            writer.write(code);\n+        } catch (Exception e) {\n+            throw new CompileFrameworkException(\"Could not write file: \" + path, e);\n+        }\n+    }\n+\n+    private static void executeCompileCommand(List<String> command) {\n+        println(\"Compile command: \" + String.join(\" \", command));\n+\n+        ProcessBuilder builder = new ProcessBuilder(command);\n+        builder.redirectErrorStream(true);\n+\n+        String output;\n+        int exitCode;\n+        try {\n+            Process process = builder.start();\n+            boolean exited = process.waitFor(COMPILE_TIMEOUT, TimeUnit.SECONDS);\n+            if (!exited) {\n+                process.destroyForcibly();\n+                System.out.println(\"Timeout: compile command: \" + String.join(\" \", command));\n+                throw new InternalCompileFrameworkException(\"Process timeout: compilation took too long.\");\n+            }\n+            output = new String(process.getInputStream().readAllBytes(), StandardCharsets.UTF_8);\n+            exitCode = process.exitValue();\n+        } catch (IOException e) {\n+            throw new InternalCompileFrameworkException(\"IOException during compilation\", e);\n+        } catch (InterruptedException e) {\n+            throw new CompileFrameworkException(\"InterruptedException during compilation\", e);\n+        }\n+\n+        if (exitCode != 0 || !output.equals(\"\")) {\n+            System.out.println(\"Compilation failed.\");\n+            System.out.println(\"Exit code: \" + exitCode);\n+            System.out.println(\"Output: '\" + output + \"'\");\n+            throw new CompileFrameworkException(\"Compilation failed.\");\n+        }\n+    }\n+\n+    private void setUpClassLoader() {\n+        ClassLoader sysLoader = ClassLoader.getSystemClassLoader();\n+\n+        try {\n+            \/\/ Classpath for all included classes (e.g. IR Framework).\n+            \/\/ Get all class paths, convert to urls.\n+            List<URL> urls = new ArrayList<URL>();\n+            for (String path : getClassPaths()) {\n+                urls.add(new File(path).toURI().toURL());\n+            }\n+            \/\/ And add in the compiled classes from this instance of CompileFramework.\n+            urls.add(new File(classesDir.toString()).toURI().toURL());\n+            classLoader = URLClassLoader.newInstance(urls.toArray(URL[]::new), sysLoader);\n+        } catch (IOException e) {\n+            throw new CompileFrameworkException(\"IOException while creating ClassLoader\", e);\n+        }\n+    }\n+\n+    public Class<?> getClass(String name) {\n+        try {\n+            return Class.forName(name, true, classLoader);\n+        } catch (ClassNotFoundException e) {\n+            throw new CompileFrameworkException(\"Class not found:\", e);\n+        }\n+    }\n+\n+    public Object invoke(String className, String methodName, Object[] args) {\n+        Class<?> c = getClass(className);\n+\n+        Method[] methods = c.getDeclaredMethods();\n+\n+        Method method = null;\n+\n+        for (Method m : methods) {\n+            if (m.getName().equals(methodName)) {\n+                if (method != null) {\n+                  throw new CompileFrameworkException(\"Method name \\\"\" + methodName + \"\\\" not unique in class \\n\" + className + \"\\\".\");\n+                }\n+                method = m;\n+            }\n+        }\n+\n+        if (method == null) {\n+            throw new CompileFrameworkException(\"Method \\\"\" + methodName + \"\\\" not found in class \\n\" + className + \"\\\".\");\n+        }\n+\n+        try {\n+            return method.invoke(null, args);\n+        } catch (IllegalAccessException e) {\n+            throw new CompileFrameworkException(\"Illegal access:\", e);\n+        } catch (InvocationTargetException e) {\n+            throw new CompileFrameworkException(\"Invocation target:\", e);\n+        }\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/compile_framework\/CompileFramework.java","additions":303,"deletions":0,"binary":false,"changes":303,"status":"added"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.lib.compile_framework;\n+\n+\/**\n+ * Exception thrown in the Compilation Framework. Most likely, the user is responsible for the failure.\n+ *\/\n+public class CompileFrameworkException extends RuntimeException {\n+    public CompileFrameworkException(String message) {\n+        super(\"Exception in Compile Framework:\" + System.lineSeparator() + message);\n+    }\n+\n+    public CompileFrameworkException(String message, Throwable e) {\n+        super(\"Exception in Compile Framework:\" + System.lineSeparator() + message, e);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/compile_framework\/CompileFrameworkException.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.lib.compile_framework;\n+\n+\/**\n+ * Internal exception thrown in Compilation Framework. Most likely, this is due to a bug in the CompileFramework.\n+ *\/\n+public class InternalCompileFrameworkException extends RuntimeException {\n+    public InternalCompileFrameworkException(String message) {\n+        super(\"Internal exception in Compile Framework, please file a bug:\" + System.lineSeparator() + message);\n+    }\n+\n+    public InternalCompileFrameworkException(String message, Throwable e) {\n+        super(\"Internal exception in Compile Framework, please file a bug:\" + System.lineSeparator() + message, e);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/compile_framework\/InternalCompileFrameworkException.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.lib.compile_framework;\n+\n+\/**\n+ * This class represents the source code of a specific class.\n+ *\/\n+public class SourceCode {\n+    enum Kind { JAVA, JASM };\n+\n+    public final String className;\n+    public final String code;\n+    public final Kind kind;\n+\n+    public SourceCode(String className, String code, Kind kind) {\n+        this.className = className;\n+        this.code = code;\n+        this.kind = kind;\n+    }\n+\n+    public static SourceCode newJavaSourceCode(String className, String code) {\n+        return new SourceCode(className, code, Kind.JAVA);\n+    }\n+\n+    public static SourceCode newJasmSourceCode(String className, String code) {\n+        return new SourceCode(className, code, Kind.JASM);\n+    }\n+\n+    public String fileExtension() {\n+        return kind.name().toLowerCase();\n+    }\n+\n+    public String filePathName() {\n+        StringBuilder builder = new StringBuilder();\n+        String extension = kind.name().toLowerCase();\n+        builder.append(className.replace('.','\/')).append(\".\").append(extension);\n+        return builder.toString();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/compile_framework\/SourceCode.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Example test to use the Compile Framework.\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib \/\n+ * @run driver compile_framework.examples.CombinedJavaJasmExample\n+ *\/\n+\n+package compile_framework.examples;\n+\n+import compiler.lib.compile_framework.*;\n+\n+\/**\n+ * This test shows a compilation of multiple java and jasm source code files.\n+ * In this example, the classes even reference each other.\n+ *\/\n+public class CombinedJavaJasmExample {\n+\n+    \/\/ Generate a source jasm file as String\n+    public static String generateJasm() {\n+        return \"\"\"\n+               package p\/xyz;\n+\n+               super public class XYZJasm {\n+                   public static Method test:\"(I)I\"\n+                   stack 20 locals 20\n+                   {\n+                       iload_0;\n+                       iconst_2;\n+                       imul;\n+                       invokestatic Method p\/xyz\/XYZJava.\"mul3\":\"(I)I\";\n+                       ireturn;\n+                   }\n+\n+                   public static Method mul5:\"(I)I\"\n+                   stack 20 locals 20\n+                   {\n+                       iload_0;\n+                       ldc 5;\n+                       imul;\n+                       ireturn;\n+                   }\n+               }\n+               \"\"\";\n+    }\n+\n+    \/\/ Generate a source java file as String\n+    public static String generateJava() {\n+        return \"\"\"\n+               package p.xyz;\n+\n+               public class XYZJava {\n+                   public static int test(int i) {\n+                       return p.xyz.XYZJasm.mul5(i * 7);\n+                   }\n+\n+                   public static int mul3(int i) {\n+                       return i * 3;\n+                   }\n+               }\n+               \"\"\";\n+    }\n+\n+    public static void main(String args[]) {\n+        \/\/ Create a new CompileFramework instance.\n+        CompileFramework comp = new CompileFramework();\n+\n+        \/\/ Generate files.\n+        comp.add(SourceCode.newJasmSourceCode(\"p.xyz.XYZJasm\", generateJasm()));\n+        comp.add(SourceCode.newJavaSourceCode(\"p.xyz.XYZJava\", generateJava()));\n+\n+        \/\/ Compile the source files.\n+        comp.compile();\n+\n+        test(comp, \"p.xyz.XYZJasm\", \"test\", 11, 11 * 2 * 3);\n+        test(comp, \"p.xyz.XYZJava\", \"test\", 13, 13 * 7 * 5);\n+\n+        System.out.println(\"Success.\");\n+    }\n+\n+    public static void test(CompileFramework comp, String className, String methodName, int input, int expected) {\n+        Object ret = comp.invoke(className, methodName, new Object[] {input});\n+\n+        \/\/ Extract return value of invocation, verify its value.\n+        int i = (int)ret;\n+        System.out.println(\"Result of call: \" + i + \" vs expected: \" + expected);\n+        if (i != expected) {\n+            throw new RuntimeException(\"wrong value: \" + i);\n+        }\n+\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/compile_framework\/examples\/CombinedJavaJasmExample.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"},{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Example test to use the Compile Framework.\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib \/\n+ * @run driver comile_framework.examples.MultiFileJasmExample\n+ *\/\n+\n+package comile_framework.examples;\n+\n+import compiler.lib.compile_framework.*;\n+import java.io.StringWriter;\n+import java.io.PrintWriter;\n+\n+\/**\n+ * This test shows a compilation of multiple jasm source code files.\n+ *\/\n+public class MultiFileJasmExample {\n+\n+    \/\/ Generate a source jasm file as String\n+    public static String generate(int i) {\n+        StringWriter writer = new StringWriter();\n+        PrintWriter out = new PrintWriter(writer);\n+        out.println(\"package p\/xyz;\");\n+        out.println(\"\");\n+        out.println(\"super public class XYZ\" + i + \" {\");\n+        out.println(\"    public static Method test:\\\"(I)I\\\"\");\n+        out.println(\"    stack 20 locals 20\");\n+        out.println(\"    {\");\n+        out.println(\"        iload_0;\");\n+        out.println(\"        iconst_2;\"); \/\/ every call multiplies by 2, in total 2^10 = 1024\n+        out.println(\"        imul;\");\n+        if (i != 0) {\n+            out.println(\"        invokestatic Method p\/xyz\/XYZ\" + (i-1) + \".\\\"test\\\":\\\"(I)I\\\";\");\n+        }\n+        out.println(\"        ireturn;\");\n+        out.println(\"    }\");\n+        out.println(\"}\");\n+        return writer.toString();\n+    }\n+\n+    public static void main(String args[]) {\n+        \/\/ Create a new CompileFramework instance.\n+        CompileFramework comp = new CompileFramework();\n+\n+        \/\/ Generate 10 files.\n+        for (int i = 0; i < 10; i++) {\n+            comp.add(SourceCode.newJasmSourceCode(\"p.xyz.XYZ\" + i, generate(i)));\n+        }\n+\n+        \/\/ Compile the source files.\n+        comp.compile();\n+\n+        \/\/ Object ret = XYZ9.test(5);\n+        Object ret = comp.invoke(\"p.xyz.XYZ9\", \"test\", new Object[] { 5 });\n+\n+        \/\/ Extract return value of invocation, verify its value.\n+        int i = (int)ret;\n+        System.out.println(\"Result of call: \" + i);\n+        if (i != 5 * 1024) {\n+            throw new RuntimeException(\"wrong value: \" + i);\n+        }\n+        System.out.println(\"Success.\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/compile_framework\/examples\/MultiFileJasmExample.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Example test to use the Compile Framework.\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib \/\n+ * @run driver compile_framework.examples.MultiFileJavaExample\n+ *\/\n+\n+package compile_framework.examples;\n+\n+import compiler.lib.compile_framework.*;\n+import java.io.StringWriter;\n+import java.io.PrintWriter;\n+\n+\/**\n+ * This test shows a compilation of multiple java source code files.\n+ *\/\n+public class MultiFileJavaExample {\n+\n+    \/\/ Generate a source java file as String\n+    public static String generate(int i) {\n+        StringWriter writer = new StringWriter();\n+        PrintWriter out = new PrintWriter(writer);\n+        out.println(\"package p.xyz;\");\n+        out.println(\"\");\n+        out.println(\"public class XYZ\" + i + \" {\");\n+        if (i > 0) {\n+            out.println(\"    public XYZ\" + (i - 1) + \" xyz = new XYZ\" + (i - 1) + \"();\");\n+        }\n+        out.println(\"\");\n+        out.println(\"    public static Object test() {\");\n+        out.println(\"        return new XYZ\" + i + \"();\");\n+        out.println(\"    }\");\n+        out.println(\"}\");\n+        return writer.toString();\n+    }\n+\n+    public static void main(String args[]) {\n+        \/\/ Create a new CompileFramework instance.\n+        CompileFramework comp = new CompileFramework();\n+\n+        \/\/ Generate 10 files.\n+        for (int i = 0; i < 10; i++) {\n+            comp.add(SourceCode.newJavaSourceCode(\"p.xyz.XYZ\" + i, generate(i)));\n+        }\n+\n+        \/\/ Compile the source files.\n+        comp.compile();\n+\n+\n+        \/\/ Object ret = XYZ9.test();\n+        Object ret = comp.invoke(\"p.xyz.XYZ9\", \"test\", new Object[] {});\n+\n+        if (!ret.getClass().getSimpleName().equals(\"XYZ9\")) {\n+            throw new RuntimeException(\"wrong result:\" + ret);\n+        }\n+        System.out.println(\"Success.\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/compile_framework\/examples\/MultiFileJavaExample.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Example test to use the Compile Framework.\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib \/\n+ * @run driver compile_framework.examples.SimpleJasmExample\n+ *\/\n+\n+package compile_framework.examples;\n+\n+import compiler.lib.compile_framework.*;\n+\n+\/**\n+ * This test shows a simple compilation of java source code, and its invocation.\n+ *\/\n+public class SimpleJasmExample {\n+\n+    \/\/ Generate a source jasm file as String\n+    public static String generate() {\n+        return \"\"\"\n+               super public class XYZ {\n+                   public static Method test:\"(I)I\"\n+                   stack 20 locals 20\n+                   {\n+                       iload_0;\n+                       iconst_2;\n+                       imul;\n+                       ireturn;\n+                   }\n+               }\n+               \"\"\";\n+    }\n+\n+    public static void main(String args[]) {\n+        \/\/ Create a new CompileFramework instance.\n+        CompileFramework comp = new CompileFramework();\n+\n+        \/\/ Add a java source file.\n+        String src = generate();\n+        SourceCode file = SourceCode.newJasmSourceCode(\"XYZ\", src);\n+        comp.add(file);\n+\n+        \/\/ Compile the source file.\n+        comp.compile();\n+\n+        \/\/ Object ret = XYZ.test(5);\n+        Object ret = comp.invoke(\"XYZ\", \"test\", new Object[] {5});\n+\n+        \/\/ Extract return value of invocation, verify its value.\n+        int i = (int)ret;\n+        System.out.println(\"Result of call: \" + i);\n+        if (i != 10) {\n+            throw new RuntimeException(\"wrong value: \" + i);\n+        }\n+        System.out.println(\"Success.\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/compile_framework\/examples\/SimpleJasmExample.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Example test to use the Compile Framework.\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib \/\n+ * @run driver compile_framework.examples.SimpleJavaExample\n+ *\/\n+\n+package compile_framework.examples;\n+\n+import compiler.lib.compile_framework.*;\n+\n+\/**\n+ * This test shows a simple compilation of java source code, and its invocation.\n+ *\/\n+public class SimpleJavaExample {\n+\n+    \/\/ Generate a source java file as String\n+    public static String generate() {\n+        return \"\"\"\n+               public class XYZ {\n+                   public static int test(int i) {\n+                       System.out.println(\"Hello from XYZ.test: \" + i);\n+                       return i * 2;\n+                   }\n+               }\n+               \"\"\";\n+    }\n+\n+    public static void main(String args[]) {\n+        \/\/ Create a new CompileFramework instance.\n+        CompileFramework comp = new CompileFramework();\n+\n+        \/\/ Add a java source file.\n+        String src = generate();\n+        SourceCode file = SourceCode.newJavaSourceCode(\"XYZ\", src);\n+        comp.add(file);\n+\n+        \/\/ Compile the source file.\n+        comp.compile();\n+\n+        \/\/ Object ret = XYZ.test(5);\n+        Object ret = comp.invoke(\"XYZ\", \"test\", new Object[] {5});\n+\n+        \/\/ Extract return value of invocation, verify its value.\n+        int i = (int)ret;\n+        System.out.println(\"Result of call: \" + i);\n+        if (i != 10) {\n+            throw new RuntimeException(\"wrong value: \" + i);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/compile_framework\/examples\/SimpleJavaExample.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"},{"patch":"@@ -0,0 +1,153 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Example test to use the Compile Framework together with the TestFramework.\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib \/\n+ * @compile ..\/..\/..\/compiler\/lib\/ir_framework\/TestFramework.java\n+ * @run driver compile_framework.examples.TestFrameworkJavaExample\n+ *\/\n+\n+package compile_framework.examples;\n+\n+import compiler.lib.compile_framework.*;\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.Platform;\n+import java.lang.reflect.InvocationTargetException;\n+\n+\/**\n+ * This test shows that the IR verification can be done on code compiled by the Compile Framework.\n+ * The \"@compile\" command for JTREG is required so that the TestFramework is compiled, other javac\n+ * might not compile it because it is not present in the class, only in the dynamically compiled\n+ * code.\n+ *\/\n+public class TestFrameworkJavaExample {\n+\n+    public static void main(String args[]) {\n+        test_X1();\n+        test_X2();\n+    }\n+\n+    \/\/ Generate a source java file as String\n+    public static String generate_X1(CompileFramework comp) {\n+        return String.format(\"\"\"\n+               import compiler.lib.ir_framework.*;\n+\n+               public class X1 {\n+                   public static void main(String args[]) {\n+                       TestFramework framework = new TestFramework(X1.class);\n+                       framework.addFlags(\"-classpath\", \"%s\");\n+                       framework.start();\n+                   }\n+\n+                   @Test\n+                   @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\"},\n+                       applyIfCPUFeatureOr = {\"sse2\", \"true\", \"asimd\", \"true\"})\n+                   static float[] test() {\n+                       float[] a = new float[1024*8];\n+                       for (int i = 0; i < a.length; i++) {\n+                           a[i]++;\n+                       }\n+                       return a;\n+                   }\n+               }\n+               \"\"\", comp.getClassPathOfCompiledClasses());\n+    }\n+\n+    static void test_X1() {\n+        \/\/ Create a new CompileFramework instance.\n+        CompileFramework comp = new CompileFramework();\n+\n+        \/\/ Add a java source file.\n+        comp.add(SourceCode.newJavaSourceCode(\"X1\", generate_X1(comp)));\n+\n+        \/\/ Compile the source file.\n+        comp.compile();\n+\n+        \/\/ X1.main();\n+        comp.invoke(\"X1\", \"main\", new Object[] {null});\n+    }\n+\n+    \/\/ Generate a source java file as String\n+    public static String generate_X2(CompileFramework comp) {\n+        \/\/ Example with conflicting \"@IR\" rules -> expect a IRViolationException.\n+        return String.format(\"\"\"\n+               import compiler.lib.ir_framework.*;\n+\n+               public class X2 {\n+                   public static void main(String args[]) {\n+                       TestFramework framework = new TestFramework(X2.class);\n+                       framework.addFlags(\"-classpath\", \"%s\");\n+                       framework.start();\n+                   }\n+\n+                   @Test\n+                   @IR(counts = {IRNode.LOAD, \"> 0\"})\n+                   @IR(failOn = IRNode.LOAD)\n+                   static void test() {\n+                   }\n+               }\n+               \"\"\", comp.getClassPathOfCompiledClasses());\n+    }\n+\n+    static void test_X2() {\n+        \/\/ Create a new CompileFramework instance.\n+        CompileFramework comp = new CompileFramework();\n+\n+        \/\/ Add a java source file.\n+        comp.add(SourceCode.newJavaSourceCode(\"X2\", generate_X2(comp)));\n+\n+        \/\/ Compile the source file.\n+        comp.compile();\n+\n+        \/\/ Load the compiled class.\n+        Class c = comp.getClass(\"X2\");\n+\n+        \/\/ Invoke the \"X2.main\" method from the compiled and loaded class.\n+        try {\n+            c.getDeclaredMethod(\"main\", new Class[] { String[].class }).invoke(null, new Object[] { null });\n+\n+            \/\/ Check if IR framework is expected to execute the IR rules.\n+            if (Utils.getTestJavaOpts().length == 0 && Platform.isDebugBuild() && !Platform.isInt() && !Platform.isComp()) {\n+                throw new RuntimeException(\"IRViolationException expected.\");\n+            } else {\n+                System.out.println(\"Got no IRViolationException, but was also not expected.\");\n+            }\n+        } catch (NoSuchMethodException e) {\n+            throw new RuntimeException(\"No such method:\", e);\n+        } catch (IllegalAccessException e) {\n+            throw new RuntimeException(\"Illegal access:\", e);\n+        } catch (InvocationTargetException e) {\n+            Throwable t = e.getCause();\n+            if (t == null) {\n+                throw new RuntimeException(\"IRViolationException expected:\", e);\n+            }\n+            if (!t.getClass().getSimpleName().equals(\"IRViolationException\")) {\n+                throw new RuntimeException(\"IRViolationException expected:\", e);\n+            }\n+            System.out.println(\"Success, we got a IRViolationException.\");\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/compile_framework\/examples\/TestFrameworkJavaExample.java","additions":153,"deletions":0,"binary":false,"changes":153,"status":"added"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Example test with failing jasm compilation.\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib \/\n+ * @run driver compile_framework.tests.TestBadJasmCompilation\n+ *\/\n+\n+package compile_framework.tests;\n+\n+import compiler.lib.compile_framework.*;\n+\n+public class TestBadJasmCompilation {\n+\n+    \/\/ Generate a source jasm file as String\n+    public static String generate() {\n+        return \"\"\"\n+               super public class XYZ {\n+                   some bad code\n+               }\n+               \"\"\";\n+    }\n+\n+    public static void main(String args[]) {\n+        \/\/ Create a new CompileFramework instance.\n+        CompileFramework comp = new CompileFramework();\n+\n+        \/\/ Add a java source file.\n+        String src = generate();\n+        SourceCode file = SourceCode.newJasmSourceCode(\"XYZ\", src);\n+        comp.add(file);\n+\n+        try {\n+            \/\/ Compile the source file.\n+            comp.compile();\n+            throw new RuntimeException(\"Expected compilation to fail.\");\n+        } catch (CompileFrameworkException e) {\n+            System.out.println(\"Success, expected compilation to fail.\");\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/compile_framework\/tests\/TestBadJasmCompilation.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Example test with failing java compilation.\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib \/\n+ * @run driver compile_framework.tests.TestBadJavaCompilation\n+ *\/\n+\n+package compile_framework.tests;\n+\n+import compiler.lib.compile_framework.*;\n+\n+public class TestBadJavaCompilation {\n+\n+    \/\/ Generate a source java file as String\n+    public static String generate() {\n+        return \"\"\"\n+               public class XYZ {\n+                   some bad code\n+               }\n+               \"\"\";\n+    }\n+\n+    public static void main(String args[]) {\n+        \/\/ Create a new CompileFramework instance.\n+        CompileFramework comp = new CompileFramework();\n+\n+        \/\/ Add a java source file.\n+        String src = generate();\n+        SourceCode file = SourceCode.newJavaSourceCode(\"XYZ\", src);\n+        comp.add(file);\n+\n+        try {\n+            \/\/ Compile the source file.\n+            comp.compile();\n+            throw new RuntimeException(\"Expected compilation to fail.\");\n+        } catch (CompileFrameworkException e) {\n+            System.out.println(\"Success, expected compilation to fail.\");\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/compile_framework\/tests\/TestBadJavaCompilation.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -0,0 +1,108 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Example test with multi-threaded use of the CompileFramework.\n+ *          Tests that the source and class directories are set up correctly.\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib \/\n+ * @run driver compile_framework.tests.TestConcurrentCompilation\n+ *\/\n+\n+package compile_framework.tests;\n+\n+import compiler.lib.compile_framework.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class TestConcurrentCompilation {\n+\n+    \/\/ Generate a source java file as String\n+    public static String generate(int i) {\n+        return String.format(\"\"\"\n+                             public class XYZ {\n+                                 public static int test() {\n+                                     return %d;\n+                                 }\n+                             }\n+                             \"\"\", i);\n+    }\n+\n+    public static void test(int i) {\n+        System.out.println(\"Generate and compile XYZ for \" + i);\n+        CompileFramework comp = new CompileFramework();\n+        comp.add(SourceCode.newJavaSourceCode(\"XYZ\", generate(i)));\n+        comp.compile();\n+\n+        \/\/ Now, sleep to give the other threads time to compile and store their class-files.\n+        System.out.println(\"Sleep for \" + i);\n+        try {\n+            Thread.sleep(100);\n+        } catch (InterruptedException e) {\n+            System.out.println(\"Sleep interrupted for \" + i);\n+        }\n+\n+        \/\/ Now, hopefully all threads have compiled and stored their class-files.\n+        \/\/ We can check if we get the expected result, i.e. the class-file from the current thread.\n+        System.out.println(\"Run XYZ.test for \" + i);\n+        int j = (int)comp.invoke(\"XYZ\", \"test\", new Object[] {});\n+        if (i != j) {\n+            System.out.println(\"Wrong value: \" + i + \" vs \" + j);\n+            throw new RuntimeException(\"Wrong value: \" + i + \" vs \" + j);\n+        }\n+        System.out.println(\"Success for \" + i);\n+    }\n+\n+    public static class MyRunnable implements Runnable {\n+        private int i;\n+\n+        public MyRunnable(int i) {\n+            this.i = i;\n+        }\n+\n+        public void run() {\n+            TestConcurrentCompilation.test(i);\n+        }\n+    }\n+\n+    public static void main(String args[]) {\n+        System.out.println(\"Generating threads:\");\n+        List<Thread> threads = new ArrayList<Thread>();\n+        for (int i = 0; i < 3; i++) {\n+            Thread thread = new Thread(new MyRunnable(i));\n+            thread.start();\n+            threads.add(thread);\n+        }\n+        System.out.println(\"Waiting to join threads:\");\n+        try {\n+            for (Thread thread : threads) {\n+                thread.join();\n+            }\n+        } catch (InterruptedException e) {\n+            throw new RuntimeException(\"interrupted\", e);\n+        }\n+        System.out.println(\"Success.\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/compile_framework\/tests\/TestConcurrentCompilation.java","additions":108,"deletions":0,"binary":false,"changes":108,"status":"added"}]}