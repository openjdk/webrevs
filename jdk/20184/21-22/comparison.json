{"files":[{"patch":"@@ -36,8 +36,2 @@\n-import jdk.test.lib.Utils;\n-\n-import java.io.IOException;\n-import java.nio.charset.StandardCharsets;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.concurrent.TimeUnit;\n-import java.util.List;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n@@ -62,0 +56,1 @@\n+                       System.err.println(args[0]);\n@@ -67,1 +62,1 @@\n-    public static void main(String[] args) {\n+    public static void main(String[] args) throws Exception {\n@@ -78,18 +73,12 @@\n-        List<String> command = new ArrayList<>();\n-        command.add(\"%s\/bin\/java\".formatted(System.getProperty(\"test.jdk\")));\n-        \/\/ Pass JVM options from JTREG to our new VM.\n-        command.addAll(Arrays.asList(Utils.getTestJavaOpts()));\n-        \/\/ Set the classpath to include our newly compiled class.\n-        command.add(\"-classpath\");\n-        command.add(comp.getEscapedClassPathOfCompiledClasses());\n-        \/\/ Pass additional flags here.\n-        \/\/ And \"-Xbatch\" is a harmless VM flag, so this example runs everywhere without issue.\n-        \/\/ We can also pass properties like \"MyMessage\".\n-        command.add(\"-Xbatch\");\n-        command.add(\"-DMyMessage=hello_world\");\n-        command.add(\"p.xyz.X\");\n-        System.out.println(\"Running on command-line: \" + String.join(\" \", command));\n-\n-        \/\/ Execute command, and capture the output.\n-        ProcessBuilder builder = new ProcessBuilder(command);\n-        builder.redirectErrorStream(true);\n+        String[] command = {\n+            \/\/ Set the classpath to include our newly compiled class.\n+            \"-classpath\",\n+            comp.getEscapedClassPathOfCompiledClasses(),\n+            \/\/ Pass additional flags here.\n+            \/\/ \"-Xbatch\" is a harmless VM flag, so this example runs everywhere without issue.\n+            \"-Xbatch\",\n+            \/\/ We can also pass properties like \"MyMessage\".\n+            \"-DMyMessage=hello_world\",\n+            \"p.xyz.X\",\n+            \"hello_arg\"\n+        };\n@@ -97,17 +86,3 @@\n-        String output;\n-        int exitCode;\n-        try {\n-            Process process = builder.start();\n-            boolean exited = process.waitFor(60, TimeUnit.SECONDS);\n-            if (!exited) {\n-                process.destroyForcibly();\n-                System.out.println(\"Timeout: compile command: \" + String.join(\" \", command));\n-                throw new RuntimeException(\"Process timeout: compilation took too long.\");\n-            }\n-            output = new String(process.getInputStream().readAllBytes(), StandardCharsets.UTF_8);\n-            exitCode = process.exitValue();\n-        } catch (IOException e) {\n-            throw new RuntimeException(\"IOException when launching new VM\", e);\n-        } catch (InterruptedException e) {\n-            throw new RuntimeException(\"InterruptedException when launching new VM\", e);\n-        }\n+        \/\/ Execute the command, and capture the output.\n+        \/\/ The JTREG VM options are automatically passed to the test VM.\n+        OutputAnalyzer analyzer = ProcessTools.executeTestJava(command);\n@@ -116,11 +91,7 @@\n-        System.err.println(\"Exit code: \" + exitCode);\n-        System.err.println(\"Output: '\" + output + \"'\");\n-        if (exitCode != 0) {\n-            throw new RuntimeException(\"Exit code must be zero!\");\n-        }\n-        if (!output.contains(\"Hello world!\")) {\n-            throw new RuntimeException(\"Did not find 'Hello world!' in output!\");\n-        }\n-        if (!output.contains(\"hello_world\")) {\n-            throw new RuntimeException(\"Did not find 'hello_world' in output!\");\n-        }\n+        analyzer.shouldHaveExitValue(0);\n+        analyzer.stdoutContains(\"Hello world!\");\n+        analyzer.stdoutContains(\"hello_world\");\n+        analyzer.stdoutContains(\"hello_arg\");\n+\n+        \/\/ Print output to stderr.\n+        analyzer.reportDiagnosticSummary();\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/compile_framework\/examples\/RunWithFlagsExample.java","additions":26,"deletions":55,"binary":false,"changes":81,"status":"modified"}]}