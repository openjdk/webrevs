{"files":[{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.lib.compile_framework;\n+\n+\n+import java.io.IOException;\n+import java.io.File;\n+import java.net.URLClassLoader;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.nio.file.Path;\n+\n+\/**\n+* TODO\n+*\/\n+class ClassLoaderBuilder {\n+\n+    \/**\n+    * TODO\n+    *\/\n+    public static ClassLoader build(Path classesDir) {\n+        ClassLoader sysLoader = ClassLoader.getSystemClassLoader();\n+\n+        try {\n+            \/\/ Classpath for all included classes (e.g. IR Framework).\n+            \/\/ Get all class paths, convert to urls.\n+            List<URL> urls = new ArrayList<URL>();\n+            for (String path : Utils.getClassPaths()) {\n+                urls.add(new File(path).toURI().toURL());\n+            }\n+            \/\/ And add in the compiled classes from this instance of CompileFramework.\n+            urls.add(new File(classesDir.toString()).toURI().toURL());\n+            return URLClassLoader.newInstance(urls.toArray(URL[]::new), sysLoader);\n+        } catch (IOException e) {\n+            throw new CompileFrameworkException(\"IOException while creating ClassLoader\", e);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/compile_framework\/ClassLoaderBuilder.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -0,0 +1,102 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.lib.compile_framework;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.nio.file.Path;\n+\n+\/**\n+* TODO\n+*\/\n+class Compile {\n+\n+    \/**\n+    * TODO\n+    *\/\n+    public static void compileJasmSources(List<SourceCode> jasmSources, Path sourceDir, Path classesDir) {\n+        if (jasmSources.isEmpty()) {\n+            Utils.printlnVerbose(\"No jasm sources to compile.\");\n+            return;\n+        }\n+        Utils.printlnVerbose(\"Compiling jasm sources: \" + jasmSources.size());\n+\n+        List<Path> jasmFilePaths = Utils.writeSourcesToFile(jasmSources, sourceDir);\n+        compileJasmFiles(jasmFilePaths, classesDir);\n+        Utils.printlnVerbose(\"Jasm sources compiled.\");\n+    }\n+\n+    \/**\n+    * TODO\n+    *\/\n+    private static void compileJasmFiles(List<Path> paths, Path classesDir) {\n+        List<String> command = new ArrayList<>();\n+\n+        command.add(\"%s\/bin\/java\".formatted(System.getProperty(\"compile.jdk\")));\n+        command.add(\"-classpath\");\n+        command.add(Utils.getAsmToolsPath());\n+        command.add(\"org.openjdk.asmtools.jasm.Main\");\n+        command.add(\"-d\");\n+        command.add(classesDir.toString());\n+        for (Path path : paths) {\n+            command.add(path.toAbsolutePath().toString());\n+        }\n+\n+        Utils.executeCompileCommand(command);\n+    }\n+\n+    \/**\n+    * TODO\n+    *\/\n+    public static void compileJavaSources(List<SourceCode> javaSources, Path sourceDir, Path classesDir) {\n+        if (javaSources.isEmpty()) {\n+            Utils.printlnVerbose(\"No java sources to compile.\");\n+            return;\n+        }\n+        Utils.printlnVerbose(\"Compiling Java sources: \" + javaSources.size());\n+\n+        List<Path> javaFilePaths = Utils.writeSourcesToFile(javaSources, sourceDir);\n+        compileJavaFiles(javaFilePaths, classesDir);\n+        Utils.printlnVerbose(\"Java sources compiled.\");\n+    }\n+\n+    \/**\n+    * TODO\n+    *\/\n+    private static void compileJavaFiles(List<Path> paths, Path classesDir) {\n+        List<String> command = new ArrayList<>();\n+\n+        command.add(\"%s\/bin\/javac\".formatted(System.getProperty(\"compile.jdk\")));\n+        command.add(\"-classpath\");\n+        \/\/ Note: the backslashes from windows paths must be escaped!\n+        command.add(Utils.getEscapedClassPathAndClassesDir(classesDir));\n+        command.add(\"-d\");\n+        command.add(classesDir.toString());\n+        for (Path path : paths) {\n+            command.add(path.toAbsolutePath().toString());\n+        }\n+\n+        Utils.executeCompileCommand(command);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/compile_framework\/Compile.java","additions":102,"deletions":0,"binary":false,"changes":102,"status":"added"},{"patch":"@@ -26,3 +26,0 @@\n-import java.io.BufferedWriter;\n-import java.io.File;\n-import java.io.IOException;\n@@ -31,4 +28,0 @@\n-import java.net.URL;\n-import java.net.URLClassLoader;\n-import java.nio.charset.StandardCharsets;\n-import java.nio.file.Files;\n@@ -36,2 +29,0 @@\n-import java.nio.file.Paths;\n-import java.util.concurrent.TimeUnit;\n@@ -45,3 +36,0 @@\n-    private static final int COMPILE_TIMEOUT = 60;\n-    private static final boolean VERBOSE = Boolean.getBoolean(\"CompileFrameworkVerbose\");\n-\n@@ -49,3 +37,3 @@\n-    private final Path sourceDir = getTempDir(\"compile-framework-sources-\");\n-    private final Path classesDir = getTempDir(\"compile-framework-classes-\");\n-    private URLClassLoader classLoader;\n+    private final Path sourceDir = Utils.getTempDir(\"compile-framework-sources-\");\n+    private final Path classesDir = Utils.getTempDir(\"compile-framework-classes-\");\n+    private ClassLoader classLoader;\n@@ -54,1 +42,1 @@\n-    * TODO\n+    * TODO change name to escaped too???\n@@ -57,6 +45,1 @@\n-        String cp = System.getProperty(\"java.class.path\") +\n-                    File.pathSeparator +\n-                    classesDir.toAbsolutePath();\n-        \/\/ Escape the backslash for Windows paths. We are using the path in the command-line\n-\t\/\/ and Java code, so we always want it to be escaped.\n-        return cp.replace(\"\\\\\", \"\\\\\\\\\");\n+        return Utils.getEscapedClassPathAndClassesDir(classesDir);\n@@ -65,0 +48,3 @@\n+    \/**\n+    * TODO\n+    *\/\n@@ -69,0 +55,3 @@\n+    \/**\n+    * TODO\n+    *\/\n@@ -73,1 +62,1 @@\n-    public String sourceCodesAsString() {\n+    private String sourceCodesAsString() {\n@@ -82,6 +71,3 @@\n-    private static void println(String s) {\n-        if (VERBOSE) {\n-            System.out.println(s);\n-        }\n-    }\n-\n+    \/**\n+    * TODO\n+    *\/\n@@ -93,2 +79,2 @@\n-        println(\"------------------ CompileFramework: SourceCode -------------------\");\n-        println(sourceCodesAsString());\n+        Utils.printlnVerbose(\"------------------ CompileFramework: SourceCode -------------------\");\n+        Utils.printlnVerbose(sourceCodesAsString());\n@@ -109,167 +95,3 @@\n-        compileJasmSources(jasmSources);\n-        compileJavaSources(javaSources);\n-        setUpClassLoader();\n-    }\n-\n-    private static Path getTempDir(String prefix) {\n-        try {\n-            return Files.createTempDirectory(Paths.get(\".\"), prefix);\n-        } catch (Exception e) {\n-            throw new InternalCompileFrameworkException(\"Could not set up temporary directory\", e);\n-        }\n-    }\n-\n-    private void compileJasmSources(List<SourceCode> jasmSources) {\n-        if (jasmSources.isEmpty()) {\n-            println(\"No jasm sources to compile.\");\n-            return;\n-        }\n-        println(\"Compiling jasm sources: \" + jasmSources.size());\n-\n-        List<Path> jasmFilePaths = writeSourcesToFile(jasmSources);\n-        compileJasmFiles(jasmFilePaths);\n-        println(\"Jasm sources compiled.\");\n-    }\n-\n-    private void compileJasmFiles(List<Path> paths) {\n-        \/\/ Compile JASM files with asmtools.jar, shipped with jtreg.\n-        List<String> command = new ArrayList<>();\n-\n-        command.add(\"%s\/bin\/java\".formatted(System.getProperty(\"compile.jdk\")));\n-        command.add(\"-classpath\");\n-        command.add(getAsmToolsPath());\n-        command.add(\"org.openjdk.asmtools.jasm.Main\");\n-        command.add(\"-d\");\n-        command.add(classesDir.toString());\n-        for (Path path : paths) {\n-            command.add(path.toAbsolutePath().toString());\n-        }\n-\n-        executeCompileCommand(command);\n-    }\n-\n-    private static String[] getClassPaths() {\n-        String separator = File.pathSeparator;\n-        return System.getProperty(\"java.class.path\").split(separator);\n-    }\n-\n-    private static String getAsmToolsPath() {\n-        for (String path : getClassPaths()) {\n-            if (path.endsWith(\"jtreg.jar\")) {\n-                File jtreg = new File(path);\n-                File dir = jtreg.getAbsoluteFile().getParentFile();\n-                File asmtools = new File(dir, \"asmtools.jar\");\n-                if (!asmtools.exists()) {\n-                    throw new InternalCompileFrameworkException(\"Found jtreg.jar in classpath, but could not find asmtools.jar\");\n-                }\n-                return asmtools.getAbsolutePath();\n-            }\n-        }\n-        throw new InternalCompileFrameworkException(\"Could not find asmtools because could not find jtreg.jar in classpath\");\n-    }\n-\n-    private void compileJavaSources(List<SourceCode> javaSources) {\n-        if (javaSources.isEmpty()) {\n-            println(\"No java sources to compile.\");\n-            return;\n-        }\n-        println(\"Compiling Java sources: \" + javaSources.size());\n-\n-        List<Path> javaFilePaths = writeSourcesToFile(javaSources);\n-        compileJavaFiles(javaFilePaths);\n-        println(\"Java sources compiled.\");\n-    }\n-\n-    private void compileJavaFiles(List<Path> paths) {\n-        \/\/ Compile JAVA files with javac, in the \"compile.jdk\".\n-        List<String> command = new ArrayList<>();\n-\n-        command.add(\"%s\/bin\/javac\".formatted(System.getProperty(\"compile.jdk\")));\n-        command.add(\"-classpath\");\n-        command.add(getClassPathOfCompiledClasses());\n-        command.add(\"-d\");\n-        command.add(classesDir.toString());\n-        for (Path path : paths) {\n-            command.add(path.toAbsolutePath().toString());\n-        }\n-\n-        executeCompileCommand(command);\n-    }\n-\n-    private List<Path> writeSourcesToFile(List<SourceCode> sources) {\n-        List<Path> storedFiles = new ArrayList<Path>();\n-        for (SourceCode sourceCode : sources) {\n-            Path path = sourceDir.resolve(sourceCode.filePathName());\n-            writeCodeToFile(sourceCode.code, path);\n-            storedFiles.add(path);\n-        }\n-        return storedFiles;\n-    }\n-\n-    private static void writeCodeToFile(String code, Path path) {\n-        println(\"File: \" + path);\n-\n-        \/\/ Ensure directory of the file exists.\n-        Path dir = path.getParent();\n-        try {\n-            Files.createDirectories(dir);\n-        } catch (Exception e) {\n-            throw new CompileFrameworkException(\"Could not create directory: \" + dir, e);\n-        }\n-\n-        \/\/ Write to file.\n-        try (BufferedWriter writer = Files.newBufferedWriter(path)) {\n-            writer.write(code);\n-        } catch (Exception e) {\n-            throw new CompileFrameworkException(\"Could not write file: \" + path, e);\n-        }\n-    }\n-\n-    private static void executeCompileCommand(List<String> command) {\n-        println(\"Compile command: \" + String.join(\" \", command));\n-\n-        ProcessBuilder builder = new ProcessBuilder(command);\n-        builder.redirectErrorStream(true);\n-\n-        String output;\n-        int exitCode;\n-        try {\n-            Process process = builder.start();\n-            boolean exited = process.waitFor(COMPILE_TIMEOUT, TimeUnit.SECONDS);\n-            if (!exited) {\n-                process.destroyForcibly();\n-                System.out.println(\"Timeout: compile command: \" + String.join(\" \", command));\n-                throw new InternalCompileFrameworkException(\"Process timeout: compilation took too long.\");\n-            }\n-            output = new String(process.getInputStream().readAllBytes(), StandardCharsets.UTF_8);\n-            exitCode = process.exitValue();\n-        } catch (IOException e) {\n-            throw new InternalCompileFrameworkException(\"IOException during compilation\", e);\n-        } catch (InterruptedException e) {\n-            throw new CompileFrameworkException(\"InterruptedException during compilation\", e);\n-        }\n-\n-        if (exitCode != 0 || !output.equals(\"\")) {\n-            System.out.println(\"Compilation failed.\");\n-            System.out.println(\"Exit code: \" + exitCode);\n-            System.out.println(\"Output: '\" + output + \"'\");\n-            throw new CompileFrameworkException(\"Compilation failed.\");\n-        }\n-    }\n-\n-    private void setUpClassLoader() {\n-        ClassLoader sysLoader = ClassLoader.getSystemClassLoader();\n-\n-        try {\n-            \/\/ Classpath for all included classes (e.g. IR Framework).\n-            \/\/ Get all class paths, convert to urls.\n-            List<URL> urls = new ArrayList<URL>();\n-            for (String path : getClassPaths()) {\n-                urls.add(new File(path).toURI().toURL());\n-            }\n-            \/\/ And add in the compiled classes from this instance of CompileFramework.\n-            urls.add(new File(classesDir.toString()).toURI().toURL());\n-            classLoader = URLClassLoader.newInstance(urls.toArray(URL[]::new), sysLoader);\n-        } catch (IOException e) {\n-            throw new CompileFrameworkException(\"IOException while creating ClassLoader\", e);\n-        }\n+        Compile.compileJasmSources(jasmSources, sourceDir, classesDir);\n+        Compile.compileJavaSources(javaSources, sourceDir, classesDir);\n+        classLoader = ClassLoaderBuilder.build(classesDir);\n@@ -278,0 +100,3 @@\n+    \/**\n+    * TODO\n+    *\/\n@@ -286,0 +111,3 @@\n+    \/**\n+    * TODO\n+    *\/\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/compile_framework\/CompileFramework.java","additions":26,"deletions":198,"binary":false,"changes":224,"status":"modified"},{"patch":"@@ -0,0 +1,168 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.lib.compile_framework;\n+\n+import java.io.BufferedWriter;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.nio.file.Path;\n+import java.util.concurrent.TimeUnit;\n+import java.io.IOException;\n+import java.io.File;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+\/**\n+* TODO\n+*\/\n+class Utils {\n+    private static final boolean VERBOSE = Boolean.getBoolean(\"CompileFrameworkVerbose\");\n+    private static final int COMPILE_TIMEOUT = 60;\n+\n+    \/**\n+    * TODO\n+    *\/\n+    public static void printlnVerbose(String s) {\n+        if (VERBOSE) {\n+            System.out.println(s);\n+        }\n+    }\n+\n+    \/**\n+    * TODO\n+    *\/\n+    public static Path getTempDir(String prefix) {\n+        try {\n+            return Files.createTempDirectory(Paths.get(\".\"), prefix);\n+        } catch (Exception e) {\n+            throw new InternalCompileFrameworkException(\"Could not set up temporary directory\", e);\n+        }\n+    }\n+\n+    \/**\n+    * TODO\n+    *\/\n+    public static String[] getClassPaths() {\n+        String separator = File.pathSeparator;\n+        return System.getProperty(\"java.class.path\").split(separator);\n+    }\n+\n+    \/**\n+    * TODO\n+    *\/\n+    public static String getAsmToolsPath() {\n+        for (String path : getClassPaths()) {\n+            if (path.endsWith(\"jtreg.jar\")) {\n+                File jtreg = new File(path);\n+                File dir = jtreg.getAbsoluteFile().getParentFile();\n+                File asmtools = new File(dir, \"asmtools.jar\");\n+                if (!asmtools.exists()) {\n+                    throw new InternalCompileFrameworkException(\"Found jtreg.jar in classpath, but could not find asmtools.jar\");\n+                }\n+                return asmtools.getAbsolutePath();\n+            }\n+        }\n+        throw new InternalCompileFrameworkException(\"Could not find asmtools because could not find jtreg.jar in classpath\");\n+    }\n+\n+    private static void writeCodeToFile(String code, Path path) {\n+        printlnVerbose(\"File: \" + path);\n+\n+        \/\/ Ensure directory of the file exists.\n+        Path dir = path.getParent();\n+        try {\n+            Files.createDirectories(dir);\n+        } catch (Exception e) {\n+            throw new CompileFrameworkException(\"Could not create directory: \" + dir, e);\n+        }\n+\n+        \/\/ Write to file.\n+        try (BufferedWriter writer = Files.newBufferedWriter(path)) {\n+            writer.write(code);\n+        } catch (Exception e) {\n+            throw new CompileFrameworkException(\"Could not write file: \" + path, e);\n+        }\n+    }\n+\n+    \/**\n+    * TODO\n+    *\/\n+    public static List<Path> writeSourcesToFile(List<SourceCode> sources, Path sourceDir) {\n+        List<Path> storedFiles = new ArrayList<Path>();\n+        for (SourceCode sourceCode : sources) {\n+            Path path = sourceDir.resolve(sourceCode.filePathName());\n+            writeCodeToFile(sourceCode.code, path);\n+            storedFiles.add(path);\n+        }\n+        return storedFiles;\n+    }\n+\n+    \/**\n+    * TODO\n+    *\/\n+    public static void executeCompileCommand(List<String> command) {\n+        printlnVerbose(\"Compile command: \" + String.join(\" \", command));\n+\n+        ProcessBuilder builder = new ProcessBuilder(command);\n+        builder.redirectErrorStream(true);\n+\n+        String output;\n+        int exitCode;\n+        try {\n+            Process process = builder.start();\n+            boolean exited = process.waitFor(COMPILE_TIMEOUT, TimeUnit.SECONDS);\n+            if (!exited) {\n+                process.destroyForcibly();\n+                System.out.println(\"Timeout: compile command: \" + String.join(\" \", command));\n+                throw new InternalCompileFrameworkException(\"Process timeout: compilation took too long.\");\n+            }\n+            output = new String(process.getInputStream().readAllBytes(), StandardCharsets.UTF_8);\n+            exitCode = process.exitValue();\n+        } catch (IOException e) {\n+            throw new InternalCompileFrameworkException(\"IOException during compilation\", e);\n+        } catch (InterruptedException e) {\n+            throw new CompileFrameworkException(\"InterruptedException during compilation\", e);\n+        }\n+\n+        if (exitCode != 0 || !output.isEmpty()) {\n+            System.out.println(\"Compilation failed.\");\n+            System.out.println(\"Exit code: \" + exitCode);\n+            System.out.println(\"Output: '\" + output + \"'\");\n+            throw new CompileFrameworkException(\"Compilation failed.\");\n+        }\n+    }\n+\n+    \/**\n+    * TODO\n+    *\/\n+    public static String getEscapedClassPathAndClassesDir(Path classesDir) {\n+        String cp = System.getProperty(\"java.class.path\") +\n+                    File.pathSeparator +\n+                    classesDir.toAbsolutePath();\n+        \/\/ Escape the backslash for Windows paths. We are using the path in the command-line\n+        \/\/ and Java code, so we always want it to be escaped.\n+        return cp.replace(\"\\\\\", \"\\\\\\\\\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/compile_framework\/Utils.java","additions":168,"deletions":0,"binary":false,"changes":168,"status":"added"}]}