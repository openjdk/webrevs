{"files":[{"patch":"@@ -33,5 +33,5 @@\n-* This is the entry-point for the Compile Framework. Its purpose it to allow\n-* compilation and execution of Java and Jasm sources generated at runtime.\n-*\n-* Please reference the README.md for more explanation.\n-*\/\n+ * This is the entry-point for the Compile Framework. Its purpose it to allow\n+ * compilation and execution of Java and Jasm sources generated at runtime.\n+ *\n+ * <p> Please reference the README.md for more details and examples.\n+ *\/\n@@ -39,2 +39,2 @@\n-    private List<SourceCode> javaSources = new ArrayList<>();\n-    private List<SourceCode> jasmSources = new ArrayList<>();\n+    private final List<SourceCode> javaSources = new ArrayList<>();\n+    private final List<SourceCode> jasmSources = new ArrayList<>();\n@@ -46,2 +46,10 @@\n-    * Add a Java source to the compilation.\n-    *\/\n+     * Set up a new Compile Framework instance, for a new compilation unit.\n+     *\/\n+    public CompileFramework() {}\n+\n+    \/**\n+     * Add a Java source to the compilation.\n+     *\n+     * @param className Class name of the class (e.g. \"{@code p.xyz.YXZ}\").\n+     * @param code Java code for the class, in the form of a {@link String}.\n+     *\/\n@@ -53,2 +61,5 @@\n-    * Add a Jasm source to the compilation.\n-    *\/\n+     * Add a Jasm source to the compilation.\n+     *\n+     * @param className Class name of the class (e.g. \"{@code p.xyz.YXZ}\").\n+     * @param code Jasm code for the class, in the form of a {@link String}.\n+     *\/\n@@ -59,9 +70,0 @@\n-    private String sourceCodesAsString(List<SourceCode> sourceCodes) {\n-        StringBuilder builder = new StringBuilder();\n-        for (SourceCode sourceCode : sourceCodes) {\n-            builder.append(\"SourceCode: \").append(sourceCode.filePathName()).append(System.lineSeparator());\n-            builder.append(sourceCode.code()).append(System.lineSeparator());\n-        }\n-        return builder.toString();\n-    }\n-\n@@ -69,4 +71,4 @@\n-    * Compile all sources: store the sources to the sources directory, compile\n-    * Java and Jasm sources and store the generated class-files in the classes\n-    * directory.\n-    *\/\n+     * Compile all sources: store the sources to the {@link sourceDir} directory, compile\n+     * Java and Jasm sources and store the generated class-files in the {@link classesDir}\n+     * directory.\n+     *\/\n@@ -91,0 +93,9 @@\n+    private static String sourceCodesAsString(List<SourceCode> sourceCodes) {\n+        StringBuilder builder = new StringBuilder();\n+        for (SourceCode sourceCode : sourceCodes) {\n+            builder.append(\"SourceCode: \").append(sourceCode.filePathName()).append(System.lineSeparator());\n+            builder.append(sourceCode.code()).append(System.lineSeparator());\n+        }\n+        return builder.toString();\n+    }\n+\n@@ -92,2 +103,5 @@\n-    * Access a class from the compiled code.\n-    *\/\n+     * Access a class from the compiled code.\n+     *\n+     * @param name Name of the class to be retrieved.\n+     * @return A class corresponding to the {@code name}.\n+     *\/\n@@ -102,0 +116,19 @@\n+    \/**\n+     * Invoke a static method from the compiled code.\n+     * @param className Class name of a compiled class.\n+     * @param methodName Method name of the class.\n+     * @param args List of arguments for the method invocation.\n+     * @return Return value from the invocation.\n+     *\/\n+    public Object invoke(String className, String methodName, Object[] args) {\n+        Method method = findMethod(className, methodName);\n+\n+        try {\n+            return method.invoke(null, args);\n+        } catch (IllegalAccessException e) {\n+            throw new CompileFrameworkException(\"Illegal access:\", e);\n+        } catch (InvocationTargetException e) {\n+            throw new CompileFrameworkException(\"Invocation target:\", e);\n+        }\n+    }\n+\n@@ -124,25 +157,8 @@\n-    * Invoke a static method from the compiled code.\n-    * @param className Class name of a compiled class.\n-    * @param methodName Method name of the class.\n-    * @param args List of arguments for the method invocation.\n-    * @return Return value from the invocation.\n-    *\/\n-    public Object invoke(String className, String methodName, Object[] args) {\n-        Method method = findMethod(className, methodName);\n-\n-        try {\n-            return method.invoke(null, args);\n-        } catch (IllegalAccessException e) {\n-            throw new CompileFrameworkException(\"Illegal access:\", e);\n-        } catch (InvocationTargetException e) {\n-            throw new CompileFrameworkException(\"Invocation target:\", e);\n-        }\n-    }\n-\n-    \/**\n-    * Returns the classpath appended with the {@code classesDir}, where\n-    * the compiled classes are stored. This enables another VM to load\n-    * the compiled classes. Note, the string is already backslash escaped,\n-    * so that the windows paths which use backslashes can be used directly\n-    * as strings.\n-    *\/\n+     * Returns the classpath appended with the {@code classesDir}, where\n+     * the compiled classes are stored. This enables another VM to load\n+     * the compiled classes. Note, the string is already backslash escaped,\n+     * so that the windows paths which use backslashes can be used directly\n+     * as strings.\n+     *\n+     * @return Classpath appended with the path to the compiled classes.\n+     *\/\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/compile_framework\/CompileFramework.java","additions":67,"deletions":51,"binary":false,"changes":118,"status":"modified"}]}