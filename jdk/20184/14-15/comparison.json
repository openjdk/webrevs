{"files":[{"patch":"@@ -35,7 +35,7 @@\n-* Build a ClassLoader that loads from classpath and {@code classesDir}.\n-* Helper class that generates a ClassLoader which allows loading classes\n-* from the classpath (see {@link Utils#getClassPaths()}) and {@code classesDir}.\n-* <p>\n-* The CompileFramework compiles all its classes to a specific {@code classesDir},\n-* and this generated ClassLoader thus can be used to load those classes.\n-*\/\n+ * Build a ClassLoader that loads from classpath and {@code classesDir}.\n+ * Helper class that generates a ClassLoader which allows loading classes\n+ * from the classpath (see {@link Utils#getClassPaths()}) and {@code classesDir}.\n+ * <p>\n+ * The CompileFramework compiles all its classes to a specific {@code classesDir},\n+ * and this generated ClassLoader thus can be used to load those classes.\n+ *\/\n@@ -45,2 +45,2 @@\n-    * Build a ClassLoader that loads from classpath and {@code classesDir}.\n-    *\/\n+     * Build a ClassLoader that loads from classpath and {@code classesDir}.\n+     *\/\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/compile_framework\/ClassLoaderBuilder.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -31,2 +31,2 @@\n-* Helper class for compilation of Java and Jasm {@code SourceCode}.\n-*\/\n+ * Helper class for compilation of Java and Jasm {@code SourceCode}.\n+ *\/\n@@ -36,3 +36,3 @@\n-    * Compile all sources in {@code javaSources}. First write them to the {@code sourceDir},\n-    * then compile them to class-files which are stored in {@code classesDir}.\n-    *\/\n+     * Compile all sources in {@code javaSources}. First write them to the {@code sourceDir},\n+     * then compile them to class-files which are stored in {@code classesDir}.\n+     *\/\n@@ -52,3 +52,3 @@\n-    * Compile a list of files (i.e. {@code paths}) using javac and store\n-    * them in {@code classesDir}.\n-    *\/\n+     * Compile a list of files (i.e. {@code paths}) using javac and store\n+     * them in {@code classesDir}.\n+     *\/\n@@ -72,3 +72,3 @@\n-    * Compile all sources in {@code jasmSources}. First write them to the {@code sourceDir},\n-    * then compile them to class-files which are stored in {@code classesDir}.\n-    *\/\n+     * Compile all sources in {@code jasmSources}. First write them to the {@code sourceDir},\n+     * then compile them to class-files which are stored in {@code classesDir}.\n+     *\/\n@@ -88,3 +88,3 @@\n-    * Compile a list of files (i.e. {@code paths}) using asmtools jasm and store\n-    * them in {@code classesDir}.\n-    *\/\n+     * Compile a list of files (i.e. {@code paths}) using asmtools jasm and store\n+     * them in {@code classesDir}.\n+     *\/\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/compile_framework\/Compile.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -18,1 +18,1 @@\n-    CompileFramework comp = new CompileFramework();\n+    CompileFramework compileFramework = new CompileFramework();\n@@ -21,1 +21,1 @@\n-    comp.addJavaSourceCode(\"XYZ\", \"<your XYZ definition string>\");\n+    compileFramework.addJavaSourceCode(\"XYZ\", \"<your XYZ definition string>\");\n@@ -24,1 +24,1 @@\n-    comp.compile();\n+    compileFramework.compile();\n@@ -26,2 +26,2 @@\n-    \/\/ Object ret = XYZ.test(5);\n-    Object ret = comp.invoke(\"XYZ\", \"test\", new Object[] {5});\n+    \/\/ Object returnValue = XYZ.test(5);\n+    Object returnValue = compileFramework.invoke(\"XYZ\", \"test\", new Object[] {5});\n@@ -33,0 +33,2 @@\n+The Compile Framework prints the names of the directories, they are subdirectories of the JTREG scratch directory `JTWork\/scratch`.\n+\n@@ -35,1 +37,3 @@\n-Java and Jasm sources can be added to the compilation using `comp.addJavaSourceCode()` and `comp.addJasmSourceCode()`. The source classes can depend on each other, and they can also use the IR Framework ([TestFrameworkJavaExample](..\/..\/..\/testlibrary_tests\/compile_framework\/examples\/TestFrameworkJavaExample.java)).\n+Java and Jasm sources can be added to the compilation using `compileFramework.addJavaSourceCode()` and `compileFramework.addJasmSourceCode()`. The source classes can depend on each other, and they can also use the IR Framework ([IRFrameworkJavaExample](..\/..\/..\/testlibrary_tests\/compile_framework\/examples\/IRFrameworkJavaExample.java)).\n+\n+When using the IR Framework, or any other library that needs to be compiled, it can be necessary to explicitly let JTREG compile that library. For example with `@compile ..\/..\/..\/compiler\/lib\/ir_framework\/TestFramework.java`. Otherwise, the corresponding class files may not be available, and a corresponding failure will be encounter at class loading.\n@@ -39,1 +43,1 @@\n-All sources are compiled with `comp.compile()`. First, the sources are stored to the sources directory, then compiled, and then the class-files stored in the classes directory. The respective directory names are printed, so that the user can easily access the generated files for debugging.\n+All sources are compiled with `compileFramework.compile()`. First, the sources are stored to the sources directory, then compiled, and then the class-files stored in the classes directory. The respective directory names are printed, so that the user can easily access the generated files for debugging.\n@@ -43,1 +47,1 @@\n-The compiled code is then loaded with a `ClassLoader`. The classes can be accessed directly with `comp.getClass(name)`. Specific methods can also directly be invoked with `comp.invoke()`.\n+The compiled code is then loaded with a `ClassLoader`. The classes can be accessed directly with `compileFramework.getClass(name)`. Specific methods can also directly be invoked with `compileFramework.invoke()`.\n@@ -45,1 +49,1 @@\n-Should one require the modified classpath that includes the compiled classes, this is available with `comp.getEscapedClassPathOfCompiledClasses()`. This can be necessary if the test launches any other VMs that also access the compiled classes. This is for example necessary when using the IR Framework.\n+Should one require the modified classpath that includes the compiled classes, this is available with `compileFramework.getEscapedClassPathOfCompiledClasses()`. This can be necessary if the test launches any other VMs that also access the compiled classes. This is for example necessary when using the IR Framework.\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/compile_framework\/README.md","additions":13,"deletions":9,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -38,2 +38,2 @@\n-* Utility class, with many helper methods for the Compile Framework.\n-*\/\n+ * Utility class, with many helper methods for the Compile Framework.\n+ *\/\n@@ -45,2 +45,2 @@\n-    * Verbose printing, enabled with {@code -DCompileFrameworkVerbose=true}.\n-    *\/\n+     * Verbose printing, enabled with {@code -DCompileFrameworkVerbose=true}.\n+     *\/\n@@ -54,5 +54,5 @@\n-    * Create a temporary directory with a unique name to avoid collisions\n-    * with multi-threading. Used to create the sources and classes directories. Since they\n-    * are unique even across threads, the Compile Framework is multi-threading safe, i.e.\n-    * it does not have collisions if two instances generate classes with the same name.\n-    *\/\n+     * Create a temporary directory with a unique name to avoid collisions\n+     * with multi-threading. Used to create the sources and classes directories. Since they\n+     * are unique even across threads, the Compile Framework is multi-threading safe, i.e.\n+     * it does not have collisions if two instances generate classes with the same name.\n+     *\/\n@@ -68,2 +68,2 @@\n-    * Get all paths in the classpath.\n-    *\/\n+     * Get all paths in the classpath.\n+     *\/\n@@ -76,2 +76,2 @@\n-    * Return the classpath, appended with the {@code classesDir}.\n-    *\/\n+     * Return the classpath, appended with the {@code classesDir}.\n+     *\/\n@@ -88,2 +88,2 @@\n-    * Get the path of asmtools, which is shipped with JTREG.\n-    *\/\n+     * Get the path of asmtools, which is shipped with JTREG.\n+     *\/\n@@ -125,2 +125,2 @@\n-    * Write sources to file.\n-    *\/\n+     * Write sources to file.\n+     *\/\n@@ -138,2 +138,2 @@\n-    * Execute a given compilation, given as a {@code command}.\n-    *\/\n+     * Execute a given compilation, given as a {@code command}.\n+     *\/\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/compile_framework\/Utils.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Example test to use the Compile Framework together with the TestFramework.\n+ * @summary Example test to use the Compile Framework together with the IR Framework (i.e. TestFramework).\n@@ -30,1 +30,1 @@\n- * @run driver compile_framework.examples.TestFrameworkJavaExample\n+ * @run driver compile_framework.examples.IRFrameworkJavaExample\n@@ -42,1 +42,1 @@\n- * The \"@compile\" command for JTREG is required so that the TestFramework is compiled, other javac\n+ * The \"@compile\" command for JTREG is required so that the IRFramework is compiled, other javac\n@@ -49,1 +49,1 @@\n-public class TestFrameworkJavaExample {\n+public class IRFrameworkJavaExample {\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/compile_framework\/examples\/IRFrameworkJavaExample.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"test\/hotspot\/jtreg\/testlibrary_tests\/compile_framework\/examples\/TestFrameworkJavaExample.java","status":"renamed"}]}