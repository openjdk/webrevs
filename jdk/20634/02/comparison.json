{"files":[{"patch":"@@ -4360,1 +4360,1 @@\n-    \"VectorRearrange\",\"VectorLoadShuffle\", \"VectorLoadConst\",\n+    \"VectorRearrange\", \"VectorLoadShuffle\", \"VectorLoadConst\",\n","filename":"src\/hotspot\/share\/adlc\/formssel.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1010,0 +1010,9 @@\n+  do_intrinsic(_VectorWrapShuffleIndexes, jdk_internal_vm_vector_VectorSupport, vector_wrap_shuffle_indexes_name,                              \\\n+                                                                                                         vector_wrap_shuffle_indexes_sig, F_S) \\\n+   do_signature(vector_wrap_shuffle_indexes_sig, \"(Ljava\/lang\/Class;\"                                                                          \\\n+                                                  \"Ljava\/lang\/Class;\"                                                                          \\\n+                                                  \"Ljdk\/internal\/vm\/vector\/VectorSupport$VectorShuffle;\"                                       \\\n+                                                  \"ILjdk\/internal\/vm\/vector\/VectorSupport$WrapShuffleIndexesOperation;)\"                       \\\n+                                                  \"Ljdk\/internal\/vm\/vector\/VectorSupport$VectorShuffle;\")                                      \\\n+   do_name(vector_wrap_shuffle_indexes_name, \"wrapShuffleIndexes\")                                                                             \\\n+                                                                                                                                               \\\n@@ -1131,0 +1140,12 @@\n+  do_intrinsic(_VectorSelectFrom, jdk_internal_vm_vector_VectorSupport, vector_select_from_name, vector_select_from_sig, F_S)                  \\\n+   do_signature(vector_select_from_sig, \"(Ljava\/lang\/Class;\"                                                                                   \\\n+                                        \"Ljava\/lang\/Class;\"                                                                                     \\\n+                                        \"Ljava\/lang\/Class;\"                                                                                     \\\n+                                        \"I\"                                                                                                     \\\n+                                        \"Ljdk\/internal\/vm\/vector\/VectorSupport$Vector;\"                                                         \\\n+                                        \"Ljdk\/internal\/vm\/vector\/VectorSupport$Vector;\"                                                         \\\n+                                        \"Ljdk\/internal\/vm\/vector\/VectorSupport$VectorMask;\"                                                     \\\n+                                        \"Ljdk\/internal\/vm\/vector\/VectorSupport$VectorSelectFromOp;)\"                                            \\\n+                                        \"Ljdk\/internal\/vm\/vector\/VectorSupport$Vector;\")                                                        \\\n+   do_name(vector_select_from_name, \"selectFromOp\")                                                                                              \\\n+                                                                                                                                               \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -813,0 +813,1 @@\n+  case vmIntrinsics::_VectorWrapShuffleIndexes:\n@@ -823,0 +824,1 @@\n+  case vmIntrinsics::_VectorSelectFrom:\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -719,0 +719,2 @@\n+  case vmIntrinsics::_VectorWrapShuffleIndexes:\n+    return inline_vector_wrap_shuffle_indexes();\n@@ -739,0 +741,2 @@\n+  case vmIntrinsics::_VectorSelectFrom:\n+    return inline_vector_select_from();\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -356,0 +356,1 @@\n+  bool inline_vector_wrap_shuffle_indexes();\n@@ -366,0 +367,1 @@\n+  bool inline_vector_select_from();\n","filename":"src\/hotspot\/share\/opto\/library_call.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -760,0 +760,59 @@\n+\/\/ public static\n+\/\/ <E,\n+\/\/  SH extends VectorShuffle<E>>\n+\/\/ SH wrapShuffleIndexes(Class<E> eClass, Class<? extends SH> shClass, SH sh, int length,\n+\/\/                       ShuffleWrapIndexesOperation<SH> defaultImpl)\n+bool LibraryCallKit::inline_vector_wrap_shuffle_indexes() {\n+  const TypeInstPtr* elem_klass    = gvn().type(argument(0))->isa_instptr();\n+  const TypeInstPtr* shuffle_klass = gvn().type(argument(1))->isa_instptr();\n+  Node*              shuffle       = argument(2);\n+  const TypeInt*     vlen          = gvn().type(argument(3))->isa_int();\n+\n+  if (elem_klass == nullptr || shuffle_klass == nullptr || shuffle->is_top() || vlen == nullptr) {\n+    return false; \/\/ dead code\n+  }\n+  if (!vlen->is_con() || shuffle_klass->const_oop() == nullptr) {\n+    return false; \/\/ not enough info for intrinsification\n+  }\n+  if (!is_klass_initialized(shuffle_klass)) {\n+    log_if_needed(\"  ** klass argument not initialized\");\n+    return false;\n+  }\n+\n+  int num_elem = vlen->get_con();\n+  if ((num_elem < 4) || !is_power_of_2(num_elem)) {\n+    log_if_needed(\"  ** vlen < 4 or not power of two=%d\", num_elem);\n+    return false;\n+  }\n+\n+  \/\/ Shuffles use byte array based backing storage\n+  BasicType shuffle_bt = T_BYTE;\n+\n+  if (!arch_supports_vector(Op_AndV, num_elem, shuffle_bt, VecMaskNotUsed) ||\n+      !arch_supports_vector(Op_Replicate, num_elem, shuffle_bt, VecMaskNotUsed)) {\n+    return false;\n+  }\n+\n+  ciKlass* sbox_klass = shuffle_klass->const_oop()->as_instance()->java_lang_Class_klass();\n+  const TypeInstPtr* shuffle_box_type = TypeInstPtr::make_exact(TypePtr::NotNull, sbox_klass);\n+\n+  \/\/ Unbox shuffle with true flag to indicate its load shuffle to vector\n+  \/\/ shuffle is a byte array\n+  Node* shuffle_vec = unbox_vector(shuffle, shuffle_box_type, shuffle_bt, num_elem, true);\n+\n+  const TypeVect* vt  = TypeVect::make(shuffle_bt, num_elem);\n+  const Type* shuffle_type_bt = Type::get_const_basic_type(shuffle_bt);\n+\n+  Node* mod_mask = gvn().makecon(TypeInt::make(num_elem-1));\n+  Node* bcast_mod_mask  = gvn().transform(VectorNode::scalar2vector(mod_mask, num_elem, shuffle_type_bt));\n+\n+  \/\/ Wrap the indices greater than lane count.\n+  Node* res = gvn().transform(VectorNode::make(Op_AndV, shuffle_vec, bcast_mod_mask, vt));\n+\n+  \/\/ Wrap it up in VectorBox to keep object type information.\n+  res = box_vector(res, shuffle_box_type, shuffle_bt, num_elem);\n+  set_result(res);\n+  C->set_max_vector_size(MAX2(C->max_vector_size(), (uint)(num_elem * type2aelembytes(shuffle_bt))));\n+  return true;\n+}\n+\n@@ -2047,0 +2106,142 @@\n+\/\/    public static\n+\/\/    <V extends Vector<E>,\n+\/\/     M  extends VectorMask<E>,\n+\/\/     E>\n+\/\/    V selectFromOp(Class<? extends V> vClass, Class<M> mClass, Class<E> eClass,\n+\/\/                   int length, V v1, V v2, M m,\n+\/\/                   VectorSelectFromOp<V, M> defaultImpl)\n+bool LibraryCallKit::inline_vector_select_from() {\n+  const TypeInstPtr* vector_klass  = gvn().type(argument(0))->isa_instptr();\n+  const TypeInstPtr* mask_klass    = gvn().type(argument(1))->isa_instptr();\n+  const TypeInstPtr* elem_klass    = gvn().type(argument(2))->isa_instptr();\n+  const TypeInt*     vlen          = gvn().type(argument(3))->isa_int();\n+\n+  if (vector_klass == nullptr  || elem_klass == nullptr || vlen == nullptr) {\n+    return false; \/\/ dead code\n+  }\n+  if (vector_klass->const_oop()  == nullptr ||\n+      elem_klass->const_oop()    == nullptr ||\n+      !vlen->is_con()) {\n+    log_if_needed(\"  ** missing constant: vclass=%s etype=%s vlen=%s\",\n+                    NodeClassNames[argument(0)->Opcode()],\n+                    NodeClassNames[argument(2)->Opcode()],\n+                    NodeClassNames[argument(3)->Opcode()]);\n+    return false; \/\/ not enough info for intrinsification\n+  }\n+  if (!is_klass_initialized(vector_klass)) {\n+    log_if_needed(\"  ** klass argument not initialized\");\n+    return false;\n+  }\n+  ciType* elem_type = elem_klass->const_oop()->as_instance()->java_mirror_type();\n+  if (!elem_type->is_primitive_type()) {\n+    log_if_needed(\"  ** not a primitive bt=%d\", elem_type->basic_type());\n+    return false; \/\/ should be primitive type\n+  }\n+  BasicType elem_bt = elem_type->basic_type();\n+\n+  int num_elem = vlen->get_con();\n+  if ((num_elem < 4) || !is_power_of_2(num_elem)) {\n+    log_if_needed(\"  ** vlen < 4 or not power of two=%d\", num_elem);\n+    return false;\n+  }\n+\n+  int cast_vopc = VectorCastNode::opcode(-1, elem_bt); \/\/ from vector of type elem_bt\n+  if (!arch_supports_vector(Op_VectorLoadShuffle, num_elem, elem_bt, VecMaskNotUsed)||\n+      !arch_supports_vector(Op_AndV, num_elem, T_BYTE, VecMaskNotUsed)              ||\n+      !arch_supports_vector(Op_Replicate, num_elem, T_BYTE, VecMaskNotUsed)         ||\n+      !arch_supports_vector(cast_vopc, num_elem, T_BYTE, VecMaskNotUsed)) {\n+    log_if_needed(\"  ** not supported: arity=0 op=selectFrom vlen=%d etype=%s ismask=no\",\n+                    num_elem, type2name(elem_bt));\n+    return false; \/\/ not supported\n+  }\n+\n+  bool is_masked_op = argument(6)->bottom_type() != TypePtr::NULL_PTR;\n+  bool use_predicate = is_masked_op;\n+  if (is_masked_op &&\n+      (mask_klass == nullptr ||\n+       mask_klass->const_oop() == nullptr ||\n+       !is_klass_initialized(mask_klass))) {\n+    log_if_needed(\"  ** mask_klass argument not initialized\");\n+    return false; \/\/ not supported\n+  }\n+  VectorMaskUseType checkFlags = (VectorMaskUseType)(is_masked_op ? (VecMaskUseLoad | VecMaskUsePred) : VecMaskNotUsed);\n+  if (!arch_supports_vector(Op_VectorRearrange, num_elem, elem_bt, checkFlags)) {\n+    use_predicate = false;\n+    if(!is_masked_op ||\n+       (!arch_supports_vector(Op_VectorRearrange, num_elem, elem_bt, VecMaskNotUsed) ||\n+        !arch_supports_vector(Op_VectorBlend, num_elem, elem_bt, VecMaskUseLoad)     ||\n+        !arch_supports_vector(Op_Replicate, num_elem, elem_bt, VecMaskNotUsed))) {\n+      log_if_needed(\"  ** not supported: op=selectFrom vlen=%d etype=%s is_masked_op=%d\",\n+                      num_elem, type2name(elem_bt), is_masked_op);\n+      return false; \/\/ not supported\n+    }\n+  }\n+  ciKlass* vbox_klass = vector_klass->const_oop()->as_instance()->java_lang_Class_klass();\n+  const TypeInstPtr* vbox_type = TypeInstPtr::make_exact(TypePtr::NotNull, vbox_klass);\n+\n+  \/\/ v1 is the index vector\n+  Node* v1 = unbox_vector(argument(4), vbox_type, elem_bt, num_elem);\n+  \/\/ v2 is the vector being rearranged\n+  Node* v2 = unbox_vector(argument(5), vbox_type, elem_bt, num_elem);\n+\n+  if (v1 == nullptr || v2 == nullptr) {\n+    return false; \/\/ operand unboxing failed\n+  }\n+\n+  Node* mask = nullptr;\n+  if (is_masked_op) {\n+    ciKlass* mbox_klass = mask_klass->const_oop()->as_instance()->java_lang_Class_klass();\n+    const TypeInstPtr* mbox_type = TypeInstPtr::make_exact(TypePtr::NotNull, mbox_klass);\n+    mask = unbox_vector(argument(6), mbox_type, elem_bt, num_elem);\n+    if (mask == nullptr) {\n+      log_if_needed(\"  ** not supported: op=selectFrom vlen=%d etype=%s is_masked_op=1\",\n+                      num_elem, type2name(elem_bt));\n+      return false;\n+    }\n+  }\n+\n+  \/\/ cast index vector from elem_bt vector to byte vector\n+  const Type * byte_bt = Type::get_const_basic_type(T_BYTE);\n+  const TypeVect * byte_vt  = TypeVect::make(byte_bt, num_elem);\n+  Node* byte_shuffle = gvn().transform(VectorCastNode::make(cast_vopc, v1, T_BYTE, num_elem));\n+\n+  \/\/ wrap the byte vector lanes to (num_elem - 1) to form the shuffle vector where num_elem is vector length\n+  \/\/ this is a simple AND operation as we come here only for power of two vector length\n+  Node* mod_val = gvn().makecon(TypeInt::make(num_elem-1));\n+  Node* bcast_mod  = gvn().transform(VectorNode::scalar2vector(mod_val, num_elem, byte_bt));\n+  byte_shuffle = gvn().transform(VectorNode::make(Op_AndV, byte_shuffle, bcast_mod, byte_vt));\n+\n+  \/\/ load the shuffle to use in rearrange\n+  const TypeVect * shuffle_vt  = TypeVect::make(elem_bt, num_elem);\n+  Node* load_shuffle = gvn().transform(new VectorLoadShuffleNode(byte_shuffle, shuffle_vt));\n+\n+  \/\/ and finally rearrange\n+  Node* rearrange = new VectorRearrangeNode(v2, load_shuffle);\n+  if (is_masked_op) {\n+    if (use_predicate) {\n+      \/\/ masked rearrange is supported so use that directly\n+      rearrange->add_req(mask);\n+      rearrange->add_flag(Node::Flag_is_predicated_vector);\n+    } else {\n+      \/\/ masked rearrange is not supported so emulate usig blend\n+      const TypeVect* vt = v1->bottom_type()->is_vect();\n+      rearrange = gvn().transform(rearrange);\n+\n+      \/\/ create a zero vector with each lane element set as zero\n+      Node* zero = gvn().makecon(Type::get_zero_type(elem_bt));\n+      Node* zerovec = gvn().transform(VectorNode::scalar2vector(zero, num_elem, Type::get_const_basic_type(elem_bt)));\n+\n+      \/\/ For each lane for which mask is set, blend in the rearranged lane into zero vector\n+      rearrange = new VectorBlendNode(zerovec, rearrange, mask);\n+    }\n+  }\n+  rearrange = gvn().transform(rearrange);\n+\n+  \/\/ box the result\n+  Node* box = box_vector(rearrange, vbox_type, elem_bt, num_elem);\n+  set_result(box);\n+\n+  C->set_max_vector_size(MAX2(C->max_vector_size(), (uint)(num_elem * type2aelembytes(elem_bt))));\n+  return true;\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":201,"deletions":0,"binary":false,"changes":201,"status":"modified"},{"patch":"@@ -266,0 +266,14 @@\n+    public interface WrapShuffleIndexesOperation<SH extends VectorShuffle<?>> {\n+        SH apply(SH sh);\n+    }\n+\n+    @IntrinsicCandidate\n+    public static\n+    <E,\n+     SH extends VectorShuffle<E>>\n+    SH wrapShuffleIndexes(Class<E> eClass, Class<? extends SH> shClass, SH sh, int length,\n+                          WrapShuffleIndexesOperation<SH> defaultImpl) {\n+       assert isNonCapturingLambda(defaultImpl) : defaultImpl;\n+       return defaultImpl.apply(sh);\n+    }\n+\n@@ -608,0 +622,17 @@\n+    public interface VectorSelectFromOp<V extends Vector<?>,\n+                                        M extends VectorMask<?>> {\n+        V apply(V v1, V v2, M m);\n+    }\n+\n+    @IntrinsicCandidate\n+    public static\n+    <V extends Vector<E>,\n+     M  extends VectorMask<E>,\n+     E>\n+    V selectFromOp(Class<? extends V> vClass, Class<M> mClass, Class<E> eClass,\n+                   int length, V v1, V v2, M m,\n+                   VectorSelectFromOp<V, M> defaultImpl) {\n+        assert isNonCapturingLambda(defaultImpl) : defaultImpl;\n+        return defaultImpl.apply(v1, v2, m);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/vector\/VectorSupport.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -136,1 +136,1 @@\n-    public final VectorShuffle<E> wrapIndexes() {\n+    public final VectorShuffle<E> wrapIndexesTemplate() {\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/AbstractShuffle.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -506,1 +506,1 @@\n-                                     (Byte128Mask) m);  \/\/ specialize\n+                                     Byte128Mask.class, (Byte128Mask) m);  \/\/ specialize\n@@ -863,0 +863,7 @@\n+        @Override\n+        @ForceInline\n+        public Byte128Shuffle wrapIndexes() {\n+            return VectorSupport.wrapShuffleIndexes(ETYPE, Byte128Shuffle.class, this, VLENGTH,\n+                                                    (s) -> ((Byte128Shuffle)(((AbstractShuffle<Byte>)(s)).wrapIndexesTemplate())));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte128Vector.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -506,1 +506,1 @@\n-                                     (Byte256Mask) m);  \/\/ specialize\n+                                     Byte256Mask.class, (Byte256Mask) m);  \/\/ specialize\n@@ -895,0 +895,7 @@\n+        @Override\n+        @ForceInline\n+        public Byte256Shuffle wrapIndexes() {\n+            return VectorSupport.wrapShuffleIndexes(ETYPE, Byte256Shuffle.class, this, VLENGTH,\n+                                                    (s) -> ((Byte256Shuffle)(((AbstractShuffle<Byte>)(s)).wrapIndexesTemplate())));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte256Vector.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -506,1 +506,1 @@\n-                                     (Byte512Mask) m);  \/\/ specialize\n+                                     Byte512Mask.class, (Byte512Mask) m);  \/\/ specialize\n@@ -959,0 +959,7 @@\n+        @Override\n+        @ForceInline\n+        public Byte512Shuffle wrapIndexes() {\n+            return VectorSupport.wrapShuffleIndexes(ETYPE, Byte512Shuffle.class, this, VLENGTH,\n+                                                    (s) -> ((Byte512Shuffle)(((AbstractShuffle<Byte>)(s)).wrapIndexesTemplate())));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte512Vector.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -506,1 +506,1 @@\n-                                     (Byte64Mask) m);  \/\/ specialize\n+                                     Byte64Mask.class, (Byte64Mask) m);  \/\/ specialize\n@@ -847,0 +847,7 @@\n+        @Override\n+        @ForceInline\n+        public Byte64Shuffle wrapIndexes() {\n+            return VectorSupport.wrapShuffleIndexes(ETYPE, Byte64Shuffle.class, this, VLENGTH,\n+                                                    (s) -> ((Byte64Shuffle)(((AbstractShuffle<Byte>)(s)).wrapIndexesTemplate())));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte64Vector.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -506,1 +506,1 @@\n-                                     (ByteMaxMask) m);  \/\/ specialize\n+                                     ByteMaxMask.class, (ByteMaxMask) m);  \/\/ specialize\n@@ -833,0 +833,7 @@\n+        @Override\n+        @ForceInline\n+        public ByteMaxShuffle wrapIndexes() {\n+            return VectorSupport.wrapShuffleIndexes(ETYPE, ByteMaxShuffle.class, this, VLENGTH,\n+                                                    (s) -> ((ByteMaxShuffle)(((AbstractShuffle<Byte>)(s)).wrapIndexesTemplate())));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteMaxVector.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2396,1 +2396,1 @@\n-    ByteVector rearrange(VectorShuffle<Byte> m);\n+    ByteVector rearrange(VectorShuffle<Byte> shuffle);\n@@ -2403,1 +2403,2 @@\n-        shuffle.checkIndexes();\n+        @SuppressWarnings(\"unchecked\")\n+        S ws = (S) shuffle.wrapIndexes();\n@@ -2406,1 +2407,1 @@\n-            this, shuffle, null,\n+            this, ws, null,\n@@ -2431,5 +2432,2 @@\n-        VectorMask<Byte> valid = shuffle.laneIsValid();\n-        if (m.andNot(valid).anyTrue()) {\n-            shuffle.checkIndexes();\n-            throw new AssertionError();\n-        }\n+        @SuppressWarnings(\"unchecked\")\n+        S ws = (S) shuffle.wrapIndexes();\n@@ -2438,1 +2436,1 @@\n-                   this, shuffle, m,\n+                   this, ws, m,\n@@ -2441,1 +2439,1 @@\n-                        return ei < 0  || !m_.laneIsSet(i) ? 0 : v1.lane(ei);\n+                        return !m_.laneIsSet(i) ? 0 : v1.lane(ei);\n@@ -2554,1 +2552,4 @@\n-        return v.rearrange(this.toShuffle());\n+        return (ByteVector)VectorSupport.selectFromOp(getClass(), null, byte.class,\n+                                                        length(), this, v, null,\n+                                                        (v1, v2, _m) ->\n+                                                         v2.rearrange(v1.toShuffle()));\n@@ -2566,3 +2567,9 @@\n-    final ByteVector selectFromTemplate(ByteVector v,\n-                                                  AbstractMask<Byte> m) {\n-        return v.rearrange(this.toShuffle(), m);\n+    final\n+    <M extends VectorMask<Byte>>\n+    ByteVector selectFromTemplate(ByteVector v,\n+                                            Class<M> masktype, M m) {\n+        m.check(masktype, this);\n+        return (ByteVector)VectorSupport.selectFromOp(getClass(), masktype, byte.class,\n+                                                        length(), this, v, m,\n+                                                        (v1, v2, _m) ->\n+                                                         v2.rearrange(v1.toShuffle(), _m));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":21,"deletions":14,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -493,1 +493,1 @@\n-                                     (Double128Mask) m);  \/\/ specialize\n+                                     Double128Mask.class, (Double128Mask) m);  \/\/ specialize\n@@ -824,0 +824,7 @@\n+        @Override\n+        @ForceInline\n+        public Double128Shuffle wrapIndexes() {\n+            return VectorSupport.wrapShuffleIndexes(ETYPE, Double128Shuffle.class, this, VLENGTH,\n+                                                    (s) -> ((Double128Shuffle)(((AbstractShuffle<Double>)(s)).wrapIndexesTemplate())));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double128Vector.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -493,1 +493,1 @@\n-                                     (Double256Mask) m);  \/\/ specialize\n+                                     Double256Mask.class, (Double256Mask) m);  \/\/ specialize\n@@ -828,0 +828,7 @@\n+        @Override\n+        @ForceInline\n+        public Double256Shuffle wrapIndexes() {\n+            return VectorSupport.wrapShuffleIndexes(ETYPE, Double256Shuffle.class, this, VLENGTH,\n+                                                    (s) -> ((Double256Shuffle)(((AbstractShuffle<Double>)(s)).wrapIndexesTemplate())));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double256Vector.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -493,1 +493,1 @@\n-                                     (Double512Mask) m);  \/\/ specialize\n+                                     Double512Mask.class, (Double512Mask) m);  \/\/ specialize\n@@ -836,0 +836,7 @@\n+        @Override\n+        @ForceInline\n+        public Double512Shuffle wrapIndexes() {\n+            return VectorSupport.wrapShuffleIndexes(ETYPE, Double512Shuffle.class, this, VLENGTH,\n+                                                    (s) -> ((Double512Shuffle)(((AbstractShuffle<Double>)(s)).wrapIndexesTemplate())));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double512Vector.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -493,1 +493,1 @@\n-                                     (Double64Mask) m);  \/\/ specialize\n+                                     Double64Mask.class, (Double64Mask) m);  \/\/ specialize\n@@ -822,0 +822,7 @@\n+        @Override\n+        @ForceInline\n+        public Double64Shuffle wrapIndexes() {\n+            return VectorSupport.wrapShuffleIndexes(ETYPE, Double64Shuffle.class, this, VLENGTH,\n+                                                    (s) -> ((Double64Shuffle)(((AbstractShuffle<Double>)(s)).wrapIndexesTemplate())));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double64Vector.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -493,1 +493,1 @@\n-                                     (DoubleMaxMask) m);  \/\/ specialize\n+                                     DoubleMaxMask.class, (DoubleMaxMask) m);  \/\/ specialize\n@@ -821,0 +821,7 @@\n+        @Override\n+        @ForceInline\n+        public DoubleMaxShuffle wrapIndexes() {\n+            return VectorSupport.wrapShuffleIndexes(ETYPE, DoubleMaxShuffle.class, this, VLENGTH,\n+                                                    (s) -> ((DoubleMaxShuffle)(((AbstractShuffle<Double>)(s)).wrapIndexesTemplate())));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleMaxVector.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2238,1 +2238,1 @@\n-    DoubleVector rearrange(VectorShuffle<Double> m);\n+    DoubleVector rearrange(VectorShuffle<Double> shuffle);\n@@ -2245,1 +2245,2 @@\n-        shuffle.checkIndexes();\n+        @SuppressWarnings(\"unchecked\")\n+        S ws = (S) shuffle.wrapIndexes();\n@@ -2248,1 +2249,1 @@\n-            this, shuffle, null,\n+            this, ws, null,\n@@ -2273,5 +2274,2 @@\n-        VectorMask<Double> valid = shuffle.laneIsValid();\n-        if (m.andNot(valid).anyTrue()) {\n-            shuffle.checkIndexes();\n-            throw new AssertionError();\n-        }\n+        @SuppressWarnings(\"unchecked\")\n+        S ws = (S) shuffle.wrapIndexes();\n@@ -2280,1 +2278,1 @@\n-                   this, shuffle, m,\n+                   this, ws, m,\n@@ -2283,1 +2281,1 @@\n-                        return ei < 0  || !m_.laneIsSet(i) ? 0 : v1.lane(ei);\n+                        return !m_.laneIsSet(i) ? 0 : v1.lane(ei);\n@@ -2396,1 +2394,4 @@\n-        return v.rearrange(this.toShuffle());\n+        return (DoubleVector)VectorSupport.selectFromOp(getClass(), null, double.class,\n+                                                        length(), this, v, null,\n+                                                        (v1, v2, _m) ->\n+                                                         v2.rearrange(v1.toShuffle()));\n@@ -2408,3 +2409,9 @@\n-    final DoubleVector selectFromTemplate(DoubleVector v,\n-                                                  AbstractMask<Double> m) {\n-        return v.rearrange(this.toShuffle(), m);\n+    final\n+    <M extends VectorMask<Double>>\n+    DoubleVector selectFromTemplate(DoubleVector v,\n+                                            Class<M> masktype, M m) {\n+        m.check(masktype, this);\n+        return (DoubleVector)VectorSupport.selectFromOp(getClass(), masktype, double.class,\n+                                                        length(), this, v, m,\n+                                                        (v1, v2, _m) ->\n+                                                         v2.rearrange(v1.toShuffle(), _m));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":21,"deletions":14,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -493,1 +493,1 @@\n-                                     (Float128Mask) m);  \/\/ specialize\n+                                     Float128Mask.class, (Float128Mask) m);  \/\/ specialize\n@@ -828,0 +828,7 @@\n+        @Override\n+        @ForceInline\n+        public Float128Shuffle wrapIndexes() {\n+            return VectorSupport.wrapShuffleIndexes(ETYPE, Float128Shuffle.class, this, VLENGTH,\n+                                                    (s) -> ((Float128Shuffle)(((AbstractShuffle<Float>)(s)).wrapIndexesTemplate())));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float128Vector.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -493,1 +493,1 @@\n-                                     (Float256Mask) m);  \/\/ specialize\n+                                     Float256Mask.class, (Float256Mask) m);  \/\/ specialize\n@@ -836,0 +836,7 @@\n+        @Override\n+        @ForceInline\n+        public Float256Shuffle wrapIndexes() {\n+            return VectorSupport.wrapShuffleIndexes(ETYPE, Float256Shuffle.class, this, VLENGTH,\n+                                                    (s) -> ((Float256Shuffle)(((AbstractShuffle<Float>)(s)).wrapIndexesTemplate())));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float256Vector.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -493,1 +493,1 @@\n-                                     (Float512Mask) m);  \/\/ specialize\n+                                     Float512Mask.class, (Float512Mask) m);  \/\/ specialize\n@@ -852,0 +852,7 @@\n+        @Override\n+        @ForceInline\n+        public Float512Shuffle wrapIndexes() {\n+            return VectorSupport.wrapShuffleIndexes(ETYPE, Float512Shuffle.class, this, VLENGTH,\n+                                                    (s) -> ((Float512Shuffle)(((AbstractShuffle<Float>)(s)).wrapIndexesTemplate())));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float512Vector.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -493,1 +493,1 @@\n-                                     (Float64Mask) m);  \/\/ specialize\n+                                     Float64Mask.class, (Float64Mask) m);  \/\/ specialize\n@@ -824,0 +824,7 @@\n+        @Override\n+        @ForceInline\n+        public Float64Shuffle wrapIndexes() {\n+            return VectorSupport.wrapShuffleIndexes(ETYPE, Float64Shuffle.class, this, VLENGTH,\n+                                                    (s) -> ((Float64Shuffle)(((AbstractShuffle<Float>)(s)).wrapIndexesTemplate())));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float64Vector.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -493,1 +493,1 @@\n-                                     (FloatMaxMask) m);  \/\/ specialize\n+                                     FloatMaxMask.class, (FloatMaxMask) m);  \/\/ specialize\n@@ -821,0 +821,7 @@\n+        @Override\n+        @ForceInline\n+        public FloatMaxShuffle wrapIndexes() {\n+            return VectorSupport.wrapShuffleIndexes(ETYPE, FloatMaxShuffle.class, this, VLENGTH,\n+                                                    (s) -> ((FloatMaxShuffle)(((AbstractShuffle<Float>)(s)).wrapIndexesTemplate())));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatMaxVector.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2250,1 +2250,1 @@\n-    FloatVector rearrange(VectorShuffle<Float> m);\n+    FloatVector rearrange(VectorShuffle<Float> shuffle);\n@@ -2257,1 +2257,2 @@\n-        shuffle.checkIndexes();\n+        @SuppressWarnings(\"unchecked\")\n+        S ws = (S) shuffle.wrapIndexes();\n@@ -2260,1 +2261,1 @@\n-            this, shuffle, null,\n+            this, ws, null,\n@@ -2285,5 +2286,2 @@\n-        VectorMask<Float> valid = shuffle.laneIsValid();\n-        if (m.andNot(valid).anyTrue()) {\n-            shuffle.checkIndexes();\n-            throw new AssertionError();\n-        }\n+        @SuppressWarnings(\"unchecked\")\n+        S ws = (S) shuffle.wrapIndexes();\n@@ -2292,1 +2290,1 @@\n-                   this, shuffle, m,\n+                   this, ws, m,\n@@ -2295,1 +2293,1 @@\n-                        return ei < 0  || !m_.laneIsSet(i) ? 0 : v1.lane(ei);\n+                        return !m_.laneIsSet(i) ? 0 : v1.lane(ei);\n@@ -2408,1 +2406,4 @@\n-        return v.rearrange(this.toShuffle());\n+        return (FloatVector)VectorSupport.selectFromOp(getClass(), null, float.class,\n+                                                        length(), this, v, null,\n+                                                        (v1, v2, _m) ->\n+                                                         v2.rearrange(v1.toShuffle()));\n@@ -2420,3 +2421,9 @@\n-    final FloatVector selectFromTemplate(FloatVector v,\n-                                                  AbstractMask<Float> m) {\n-        return v.rearrange(this.toShuffle(), m);\n+    final\n+    <M extends VectorMask<Float>>\n+    FloatVector selectFromTemplate(FloatVector v,\n+                                            Class<M> masktype, M m) {\n+        m.check(masktype, this);\n+        return (FloatVector)VectorSupport.selectFromOp(getClass(), masktype, float.class,\n+                                                        length(), this, v, m,\n+                                                        (v1, v2, _m) ->\n+                                                         v2.rearrange(v1.toShuffle(), _m));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":21,"deletions":14,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -506,1 +506,1 @@\n-                                     (Int128Mask) m);  \/\/ specialize\n+                                     Int128Mask.class, (Int128Mask) m);  \/\/ specialize\n@@ -839,0 +839,7 @@\n+        @Override\n+        @ForceInline\n+        public Int128Shuffle wrapIndexes() {\n+            return VectorSupport.wrapShuffleIndexes(ETYPE, Int128Shuffle.class, this, VLENGTH,\n+                                                    (s) -> ((Int128Shuffle)(((AbstractShuffle<Integer>)(s)).wrapIndexesTemplate())));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int128Vector.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -506,1 +506,1 @@\n-                                     (Int256Mask) m);  \/\/ specialize\n+                                     Int256Mask.class, (Int256Mask) m);  \/\/ specialize\n@@ -847,0 +847,7 @@\n+        @Override\n+        @ForceInline\n+        public Int256Shuffle wrapIndexes() {\n+            return VectorSupport.wrapShuffleIndexes(ETYPE, Int256Shuffle.class, this, VLENGTH,\n+                                                    (s) -> ((Int256Shuffle)(((AbstractShuffle<Integer>)(s)).wrapIndexesTemplate())));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int256Vector.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -506,1 +506,1 @@\n-                                     (Int512Mask) m);  \/\/ specialize\n+                                     Int512Mask.class, (Int512Mask) m);  \/\/ specialize\n@@ -863,0 +863,7 @@\n+        @Override\n+        @ForceInline\n+        public Int512Shuffle wrapIndexes() {\n+            return VectorSupport.wrapShuffleIndexes(ETYPE, Int512Shuffle.class, this, VLENGTH,\n+                                                    (s) -> ((Int512Shuffle)(((AbstractShuffle<Integer>)(s)).wrapIndexesTemplate())));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int512Vector.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -506,1 +506,1 @@\n-                                     (Int64Mask) m);  \/\/ specialize\n+                                     Int64Mask.class, (Int64Mask) m);  \/\/ specialize\n@@ -835,0 +835,7 @@\n+        @Override\n+        @ForceInline\n+        public Int64Shuffle wrapIndexes() {\n+            return VectorSupport.wrapShuffleIndexes(ETYPE, Int64Shuffle.class, this, VLENGTH,\n+                                                    (s) -> ((Int64Shuffle)(((AbstractShuffle<Integer>)(s)).wrapIndexesTemplate())));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int64Vector.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -506,1 +506,1 @@\n-                                     (IntMaxMask) m);  \/\/ specialize\n+                                     IntMaxMask.class, (IntMaxMask) m);  \/\/ specialize\n@@ -844,0 +844,7 @@\n+        @Override\n+        @ForceInline\n+        public IntMaxShuffle wrapIndexes() {\n+            return VectorSupport.wrapShuffleIndexes(ETYPE, IntMaxShuffle.class, this, VLENGTH,\n+                                                    (s) -> ((IntMaxShuffle)(((AbstractShuffle<Integer>)(s)).wrapIndexesTemplate())));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntMaxVector.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2381,1 +2381,1 @@\n-    IntVector rearrange(VectorShuffle<Integer> m);\n+    IntVector rearrange(VectorShuffle<Integer> shuffle);\n@@ -2388,1 +2388,2 @@\n-        shuffle.checkIndexes();\n+        @SuppressWarnings(\"unchecked\")\n+        S ws = (S) shuffle.wrapIndexes();\n@@ -2391,1 +2392,1 @@\n-            this, shuffle, null,\n+            this, ws, null,\n@@ -2416,5 +2417,2 @@\n-        VectorMask<Integer> valid = shuffle.laneIsValid();\n-        if (m.andNot(valid).anyTrue()) {\n-            shuffle.checkIndexes();\n-            throw new AssertionError();\n-        }\n+        @SuppressWarnings(\"unchecked\")\n+        S ws = (S) shuffle.wrapIndexes();\n@@ -2423,1 +2421,1 @@\n-                   this, shuffle, m,\n+                   this, ws, m,\n@@ -2426,1 +2424,1 @@\n-                        return ei < 0  || !m_.laneIsSet(i) ? 0 : v1.lane(ei);\n+                        return !m_.laneIsSet(i) ? 0 : v1.lane(ei);\n@@ -2539,1 +2537,4 @@\n-        return v.rearrange(this.toShuffle());\n+        return (IntVector)VectorSupport.selectFromOp(getClass(), null, int.class,\n+                                                        length(), this, v, null,\n+                                                        (v1, v2, _m) ->\n+                                                         v2.rearrange(v1.toShuffle()));\n@@ -2551,3 +2552,9 @@\n-    final IntVector selectFromTemplate(IntVector v,\n-                                                  AbstractMask<Integer> m) {\n-        return v.rearrange(this.toShuffle(), m);\n+    final\n+    <M extends VectorMask<Integer>>\n+    IntVector selectFromTemplate(IntVector v,\n+                                            Class<M> masktype, M m) {\n+        m.check(masktype, this);\n+        return (IntVector)VectorSupport.selectFromOp(getClass(), masktype, int.class,\n+                                                        length(), this, v, m,\n+                                                        (v1, v2, _m) ->\n+                                                         v2.rearrange(v1.toShuffle(), _m));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":21,"deletions":14,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -496,1 +496,1 @@\n-                                     (Long128Mask) m);  \/\/ specialize\n+                                     Long128Mask.class, (Long128Mask) m);  \/\/ specialize\n@@ -825,0 +825,7 @@\n+        @Override\n+        @ForceInline\n+        public Long128Shuffle wrapIndexes() {\n+            return VectorSupport.wrapShuffleIndexes(ETYPE, Long128Shuffle.class, this, VLENGTH,\n+                                                    (s) -> ((Long128Shuffle)(((AbstractShuffle<Long>)(s)).wrapIndexesTemplate())));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long128Vector.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -496,1 +496,1 @@\n-                                     (Long256Mask) m);  \/\/ specialize\n+                                     Long256Mask.class, (Long256Mask) m);  \/\/ specialize\n@@ -829,0 +829,7 @@\n+        @Override\n+        @ForceInline\n+        public Long256Shuffle wrapIndexes() {\n+            return VectorSupport.wrapShuffleIndexes(ETYPE, Long256Shuffle.class, this, VLENGTH,\n+                                                    (s) -> ((Long256Shuffle)(((AbstractShuffle<Long>)(s)).wrapIndexesTemplate())));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long256Vector.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -496,1 +496,1 @@\n-                                     (Long512Mask) m);  \/\/ specialize\n+                                     Long512Mask.class, (Long512Mask) m);  \/\/ specialize\n@@ -837,0 +837,7 @@\n+        @Override\n+        @ForceInline\n+        public Long512Shuffle wrapIndexes() {\n+            return VectorSupport.wrapShuffleIndexes(ETYPE, Long512Shuffle.class, this, VLENGTH,\n+                                                    (s) -> ((Long512Shuffle)(((AbstractShuffle<Long>)(s)).wrapIndexesTemplate())));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long512Vector.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -496,1 +496,1 @@\n-                                     (Long64Mask) m);  \/\/ specialize\n+                                     Long64Mask.class, (Long64Mask) m);  \/\/ specialize\n@@ -823,0 +823,7 @@\n+        @Override\n+        @ForceInline\n+        public Long64Shuffle wrapIndexes() {\n+            return VectorSupport.wrapShuffleIndexes(ETYPE, Long64Shuffle.class, this, VLENGTH,\n+                                                    (s) -> ((Long64Shuffle)(((AbstractShuffle<Long>)(s)).wrapIndexesTemplate())));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long64Vector.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -496,1 +496,1 @@\n-                                     (LongMaxMask) m);  \/\/ specialize\n+                                     LongMaxMask.class, (LongMaxMask) m);  \/\/ specialize\n@@ -823,0 +823,7 @@\n+        @Override\n+        @ForceInline\n+        public LongMaxShuffle wrapIndexes() {\n+            return VectorSupport.wrapShuffleIndexes(ETYPE, LongMaxShuffle.class, this, VLENGTH,\n+                                                    (s) -> ((LongMaxShuffle)(((AbstractShuffle<Long>)(s)).wrapIndexesTemplate())));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongMaxVector.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2247,1 +2247,1 @@\n-    LongVector rearrange(VectorShuffle<Long> m);\n+    LongVector rearrange(VectorShuffle<Long> shuffle);\n@@ -2254,1 +2254,2 @@\n-        shuffle.checkIndexes();\n+        @SuppressWarnings(\"unchecked\")\n+        S ws = (S) shuffle.wrapIndexes();\n@@ -2257,1 +2258,1 @@\n-            this, shuffle, null,\n+            this, ws, null,\n@@ -2282,5 +2283,2 @@\n-        VectorMask<Long> valid = shuffle.laneIsValid();\n-        if (m.andNot(valid).anyTrue()) {\n-            shuffle.checkIndexes();\n-            throw new AssertionError();\n-        }\n+        @SuppressWarnings(\"unchecked\")\n+        S ws = (S) shuffle.wrapIndexes();\n@@ -2289,1 +2287,1 @@\n-                   this, shuffle, m,\n+                   this, ws, m,\n@@ -2292,1 +2290,1 @@\n-                        return ei < 0  || !m_.laneIsSet(i) ? 0 : v1.lane(ei);\n+                        return !m_.laneIsSet(i) ? 0 : v1.lane(ei);\n@@ -2405,1 +2403,4 @@\n-        return v.rearrange(this.toShuffle());\n+        return (LongVector)VectorSupport.selectFromOp(getClass(), null, long.class,\n+                                                        length(), this, v, null,\n+                                                        (v1, v2, _m) ->\n+                                                         v2.rearrange(v1.toShuffle()));\n@@ -2417,3 +2418,9 @@\n-    final LongVector selectFromTemplate(LongVector v,\n-                                                  AbstractMask<Long> m) {\n-        return v.rearrange(this.toShuffle(), m);\n+    final\n+    <M extends VectorMask<Long>>\n+    LongVector selectFromTemplate(LongVector v,\n+                                            Class<M> masktype, M m) {\n+        m.check(masktype, this);\n+        return (LongVector)VectorSupport.selectFromOp(getClass(), masktype, long.class,\n+                                                        length(), this, v, m,\n+                                                        (v1, v2, _m) ->\n+                                                         v2.rearrange(v1.toShuffle(), _m));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":21,"deletions":14,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -506,1 +506,1 @@\n-                                     (Short128Mask) m);  \/\/ specialize\n+                                     Short128Mask.class, (Short128Mask) m);  \/\/ specialize\n@@ -847,0 +847,7 @@\n+        @Override\n+        @ForceInline\n+        public Short128Shuffle wrapIndexes() {\n+            return VectorSupport.wrapShuffleIndexes(ETYPE, Short128Shuffle.class, this, VLENGTH,\n+                                                    (s) -> ((Short128Shuffle)(((AbstractShuffle<Short>)(s)).wrapIndexesTemplate())));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short128Vector.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -506,1 +506,1 @@\n-                                     (Short256Mask) m);  \/\/ specialize\n+                                     Short256Mask.class, (Short256Mask) m);  \/\/ specialize\n@@ -863,0 +863,7 @@\n+        @Override\n+        @ForceInline\n+        public Short256Shuffle wrapIndexes() {\n+            return VectorSupport.wrapShuffleIndexes(ETYPE, Short256Shuffle.class, this, VLENGTH,\n+                                                    (s) -> ((Short256Shuffle)(((AbstractShuffle<Short>)(s)).wrapIndexesTemplate())));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short256Vector.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -506,1 +506,1 @@\n-                                     (Short512Mask) m);  \/\/ specialize\n+                                     Short512Mask.class, (Short512Mask) m);  \/\/ specialize\n@@ -895,0 +895,7 @@\n+        @Override\n+        @ForceInline\n+        public Short512Shuffle wrapIndexes() {\n+            return VectorSupport.wrapShuffleIndexes(ETYPE, Short512Shuffle.class, this, VLENGTH,\n+                                                    (s) -> ((Short512Shuffle)(((AbstractShuffle<Short>)(s)).wrapIndexesTemplate())));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short512Vector.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -506,1 +506,1 @@\n-                                     (Short64Mask) m);  \/\/ specialize\n+                                     Short64Mask.class, (Short64Mask) m);  \/\/ specialize\n@@ -839,0 +839,7 @@\n+        @Override\n+        @ForceInline\n+        public Short64Shuffle wrapIndexes() {\n+            return VectorSupport.wrapShuffleIndexes(ETYPE, Short64Shuffle.class, this, VLENGTH,\n+                                                    (s) -> ((Short64Shuffle)(((AbstractShuffle<Short>)(s)).wrapIndexesTemplate())));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short64Vector.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -506,1 +506,1 @@\n-                                     (ShortMaxMask) m);  \/\/ specialize\n+                                     ShortMaxMask.class, (ShortMaxMask) m);  \/\/ specialize\n@@ -833,0 +833,7 @@\n+        @Override\n+        @ForceInline\n+        public ShortMaxShuffle wrapIndexes() {\n+            return VectorSupport.wrapShuffleIndexes(ETYPE, ShortMaxShuffle.class, this, VLENGTH,\n+                                                    (s) -> ((ShortMaxShuffle)(((AbstractShuffle<Short>)(s)).wrapIndexesTemplate())));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortMaxVector.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2397,1 +2397,1 @@\n-    ShortVector rearrange(VectorShuffle<Short> m);\n+    ShortVector rearrange(VectorShuffle<Short> shuffle);\n@@ -2404,1 +2404,2 @@\n-        shuffle.checkIndexes();\n+        @SuppressWarnings(\"unchecked\")\n+        S ws = (S) shuffle.wrapIndexes();\n@@ -2407,1 +2408,1 @@\n-            this, shuffle, null,\n+            this, ws, null,\n@@ -2432,5 +2433,2 @@\n-        VectorMask<Short> valid = shuffle.laneIsValid();\n-        if (m.andNot(valid).anyTrue()) {\n-            shuffle.checkIndexes();\n-            throw new AssertionError();\n-        }\n+        @SuppressWarnings(\"unchecked\")\n+        S ws = (S) shuffle.wrapIndexes();\n@@ -2439,1 +2437,1 @@\n-                   this, shuffle, m,\n+                   this, ws, m,\n@@ -2442,1 +2440,1 @@\n-                        return ei < 0  || !m_.laneIsSet(i) ? 0 : v1.lane(ei);\n+                        return !m_.laneIsSet(i) ? 0 : v1.lane(ei);\n@@ -2555,1 +2553,4 @@\n-        return v.rearrange(this.toShuffle());\n+        return (ShortVector)VectorSupport.selectFromOp(getClass(), null, short.class,\n+                                                        length(), this, v, null,\n+                                                        (v1, v2, _m) ->\n+                                                         v2.rearrange(v1.toShuffle()));\n@@ -2567,3 +2568,9 @@\n-    final ShortVector selectFromTemplate(ShortVector v,\n-                                                  AbstractMask<Short> m) {\n-        return v.rearrange(this.toShuffle(), m);\n+    final\n+    <M extends VectorMask<Short>>\n+    ShortVector selectFromTemplate(ShortVector v,\n+                                            Class<M> masktype, M m) {\n+        m.check(masktype, this);\n+        return (ShortVector)VectorSupport.selectFromOp(getClass(), masktype, short.class,\n+                                                        length(), this, v, m,\n+                                                        (v1, v2, _m) ->\n+                                                         v2.rearrange(v1.toShuffle(), _m));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":21,"deletions":14,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2617,1 +2617,1 @@\n-     * source index {@code I=s.laneSource(N)} in the shuffle,\n+     * source index {@code I=s.wrapIndex(s.laneSource(N))} in the shuffle,\n@@ -2623,2 +2623,0 @@\n-     * @throws IndexOutOfBoundsException if there are any exceptional\n-     *        source indexes in the shuffle\n@@ -2627,1 +2625,0 @@\n-     * @see VectorShuffle#laneIsValid()\n@@ -2639,1 +2636,1 @@\n-     * source index {@code I=s.laneSource(N)} in the shuffle,\n+     * source index {@code I=s.wrapIndex(s.laneSource(N))} in the shuffle,\n@@ -2646,3 +2643,1 @@\n-     * Vector<E> r = this.rearrange(s.wrapIndexes());\n-     * VectorMask<E> valid = s.laneIsValid();\n-     * if (m.andNot(valid).anyTrue()) throw ...;\n+     * Vector<E> r = this.rearrange(s);\n@@ -2655,2 +2650,0 @@\n-     * @throws IndexOutOfBoundsException if there are any exceptional\n-     *        source indexes in the shuffle where the mask is set\n@@ -2659,1 +2652,0 @@\n-     * @see VectorShuffle#laneIsValid()\n@@ -2750,1 +2742,1 @@\n-     * value {@code I=this.lane(N)} in this vector,\n+     * value {@code I=wrapIndex(this.lane(N))} in this vector,\n@@ -2763,2 +2755,0 @@\n-     * @throws IndexOutOfBoundsException if any invalid\n-     *         source indexes are found in {@code this}\n@@ -2790,3 +2780,0 @@\n-     * @throws IndexOutOfBoundsException if any invalid\n-     *         source indexes are found in {@code this},\n-     *         in a lane which is set in the mask\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Vector.java","additions":4,"deletions":17,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2773,1 +2773,1 @@\n-    $abstractvectortype$ rearrange(VectorShuffle<$Boxtype$> m);\n+    $abstractvectortype$ rearrange(VectorShuffle<$Boxtype$> shuffle);\n@@ -2780,1 +2780,2 @@\n-        shuffle.checkIndexes();\n+        @SuppressWarnings(\"unchecked\")\n+        S ws = (S) shuffle.wrapIndexes();\n@@ -2783,1 +2784,1 @@\n-            this, shuffle, null,\n+            this, ws, null,\n@@ -2808,5 +2809,2 @@\n-        VectorMask<$Boxtype$> valid = shuffle.laneIsValid();\n-        if (m.andNot(valid).anyTrue()) {\n-            shuffle.checkIndexes();\n-            throw new AssertionError();\n-        }\n+        @SuppressWarnings(\"unchecked\")\n+        S ws = (S) shuffle.wrapIndexes();\n@@ -2815,1 +2813,1 @@\n-                   this, shuffle, m,\n+                   this, ws, m,\n@@ -2818,1 +2816,1 @@\n-                        return ei < 0  || !m_.laneIsSet(i) ? 0 : v1.lane(ei);\n+                        return !m_.laneIsSet(i) ? 0 : v1.lane(ei);\n@@ -2931,1 +2929,4 @@\n-        return v.rearrange(this.toShuffle());\n+        return ($Type$Vector)VectorSupport.selectFromOp(getClass(), null, $type$.class,\n+                                                        length(), this, v, null,\n+                                                        (v1, v2, _m) ->\n+                                                         v2.rearrange(v1.toShuffle()));\n@@ -2943,3 +2944,9 @@\n-    final $abstractvectortype$ selectFromTemplate($abstractvectortype$ v,\n-                                                  AbstractMask<$Boxtype$> m) {\n-        return v.rearrange(this.toShuffle(), m);\n+    final\n+    <M extends VectorMask<$Boxtype$>>\n+    $abstractvectortype$ selectFromTemplate($abstractvectortype$ v,\n+                                            Class<M> masktype, M m) {\n+        m.check(masktype, this);\n+        return ($Type$Vector)VectorSupport.selectFromOp(getClass(), masktype, $type$.class,\n+                                                        length(), this, v, m,\n+                                                        (v1, v2, _m) ->\n+                                                         v2.rearrange(v1.toShuffle(), _m));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":21,"deletions":14,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -512,1 +512,1 @@\n-                                     ($masktype$) m);  \/\/ specialize\n+                                     $masktype$.class, ($masktype$) m);  \/\/ specialize\n@@ -1121,0 +1121,7 @@\n+        @Override\n+        @ForceInline\n+        public $shuffletype$ wrapIndexes() {\n+            return VectorSupport.wrapShuffleIndexes(ETYPE, $shuffletype$.class, this, VLENGTH,\n+                                                    (s) -> (($shuffletype$)(((AbstractShuffle<$Boxtype$>)(s)).wrapIndexesTemplate())));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-VectorBits.java.template","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"}]}