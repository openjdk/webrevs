{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2025 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/security\/PKCS12Attribute.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import jdk.internal.vm.annotation.Stable;\n@@ -73,2 +72,1 @@\n-    @Stable\n-    private transient int hash; \/\/ Default to 0\n+    private transient int hash = -1; \/\/ Default to -1\n@@ -135,1 +133,1 @@\n-        if (h == 0) {\n+        if (h == -1) {\n","filename":"src\/java.base\/share\/classes\/java\/security\/cert\/Certificate.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2025 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/security\/PKCS12Attribute\/HashCode.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,139 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import jdk.test.lib.security.CertUtils;\n-\n-import java.io.*;\n-import java.security.cert.Certificate;\n-import java.util.HashSet;\n-import java.util.Set;\n-\/*\n- * @test\n- * @bug 8355379\n- * @library \/test\/lib\n- * @summary Basic testing for Certificate\n- * @run main TestHashCode\n- *\/\n-public class TestHashCode{\n-    public static void main(String[] args) throws Exception {\n-        Certificate cert = loadCert();\n-\n-        testEqualityAndHashCode(cert);\n-        testRepeatedHashCode(cert);\n-        testSerializationRoundTrip(cert);\n-        testHashUniqueness();\n-        System.out.println(\"All Certificate tests passed.\");\n-    }\n-\n-    private static Certificate loadCert() throws Exception {\n-        \/\/ Base64 DER-encoded X.509 certificate (short, valid)\n-        String cert =\n-                \"-----BEGIN CERTIFICATE-----\\n\" +\n-                        \"MIICvTCCAaWgAwIBAgIEGYqL9TANBgkqhkiG9w0BAQsFADAPMQ0wCwYDVQQDEwRT\\n\" +\n-                        \"ZWxmMB4XDTE3MDMyODE2NDcyNloXDTE3MDYyNjE2NDcyNlowDzENMAsGA1UEAxME\\n\" +\n-                        \"U2VsZjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAL1pfSJljFVSABOL\\n\" +\n-                        \"tJbIVPEkz1+2AFgzY1hqwE0EH80lvhOEkiPPYCKwBE5VTZdyFfwFjpyx7eEeJMNT\\n\" +\n-                        \"o7cixfmkQaiXHr\/S1AS4BRTqLG\/zgLzoJpVbzi45rnVEZc0oTm11KG3uUxkZTRr3\\n\" +\n-                        \"5ORbYyZpkscKwHL2M0J\/1GmnA1hmhQdwUQyIKxg4eKQwyE+\/TdbFlCWVNnOlb+91\\n\" +\n-                        \"eXvS11nIJ1oaBgn7u4qihuVmFmngLMxExnLYKV6AwdkwFD6pERObclRD9vAl5eUk\\n\" +\n-                        \"+sM6zQYwfLdyC2i8e+ETBeOg1ijptM4KT5Uaq89zxjLR0DPH4S+aILp3gYHGrW5r\\n\" +\n-                        \"eMxZAEMCAwEAAaMhMB8wHQYDVR0OBBYEFOME39JtbjzQaK3ufpKo\/Pl4sZ8XMA0G\\n\" +\n-                        \"CSqGSIb3DQEBCwUAA4IBAQCDcw0+Sf0yeVROVlb2\/VV3oIblHkGQheXeIurW64k7\\n\" +\n-                        \"tEzHtx9i8dnj5lzTZNH6hU4GRlyULbSDzjcM3P2XFRsM+0a\/kEJZVqnLz5ji\/\/7\/\\n\" +\n-                        \"ZXaRX0TiE2IfFOTGbO6LusO3yR4tOER\/WHllz2H21C2SbW3+92Ou28glTZa42AAZ\\n\" +\n-                        \"mUj9j+p6mZqD4\/tUBqAEqqQoMIhw9CNjc46STNayBjt\/0\/+I2pfy6LagrMbjBzZ0\\n\" +\n-                        \"A5kXg9WjnywGk8XFr\/3RZz8DrUmCYs2qCYLCHQHsuCE6gCuf9wKhKyD51MFXXRr0\\n\" +\n-                        \"cyG6LYQjrreMHYk4ZfN2NPC6lGjWxB5mIbV\/DuikCnYu\\n\" +\n-                        \"-----END CERTIFICATE-----\";\n-\n-        return CertUtils.getCertFromString(cert);\n-    }\n-\n-    private static void testEqualityAndHashCode(Certificate cert) throws Exception {\n-        Certificate duplicate = loadCert();\n-\n-        if (!cert.equals(cert) || cert.hashCode() != cert.hashCode()) {\n-            throw new Exception(\"Certificate not equal to itself\");\n-        }\n-\n-        if (!cert.equals(duplicate) || cert.hashCode() != duplicate.hashCode()) {\n-            throw new Exception(\"Equal certs do not have equal hashCodes\");\n-        }\n-\n-        if (cert.equals(null)) {\n-            throw new Exception(\"Certificate equals null unexpectedly\");\n-        }\n-\n-        System.out.println(\"Certificate equality and hashCode check passed\");\n-    }\n-\n-    private static void testRepeatedHashCode(Certificate cert) {\n-        int h1 = cert.hashCode();\n-        int h2 = cert.hashCode();\n-        if (h1 != h2) {\n-            throw new RuntimeException(\"Inconsistent hashCode across calls\");\n-        }\n-        System.out.println(\"Repeated hashCode call consistency passed\");\n-    }\n-\n-    private static void testSerializationRoundTrip(Certificate cert) throws Exception {\n-        Certificate copy = serializeAndDeserialize(cert);\n-        if (!cert.equals(copy)) {\n-            throw new Exception(\"Certs not equal after deserialization\");\n-        }\n-        if (cert.hashCode() != copy.hashCode()) {\n-            throw new Exception(\"hashCode mismatch after deserialization\");\n-        }\n-        System.out.println(\"Serialization + hashCode test passed\");\n-    }\n-\n-    private static Certificate serializeAndDeserialize(Certificate cert) throws Exception {\n-        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-        try (ObjectOutputStream oos = new ObjectOutputStream(baos)) {\n-            oos.writeObject(cert);\n-        }\n-\n-        try (ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(baos.toByteArray()))) {\n-            return (Certificate) ois.readObject();\n-        }\n-    }\n-\n-    private static void testHashUniqueness() throws Exception {\n-        System.out.println(\"Hash uniqueness test with slightly varied certs\");\n-        Set<Integer> seen = new HashSet<>();\n-        int collisions = 0;\n-\n-        for (int i = 0; i < 5; i++) {\n-            Certificate cert = loadCert(); \/\/ Same input = same hash\n-            if (!seen.add(cert.hashCode())) {\n-                collisions++;\n-            }\n-        }\n-\n-        if (collisions > 0) {\n-            System.out.println(\"Hash collisions seen: \" + collisions + \" (expected if same cert reused)\");\n-        } else {\n-            System.out.println(\"Hash uniqueness (within sample set)\");\n-        }\n-    }\n-}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/security\/cert\/Certificate\/TestHashCode.java","additions":0,"deletions":139,"binary":false,"changes":139,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2025 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/security\/cert\/URICertStoreParameters\/TestBasic.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}