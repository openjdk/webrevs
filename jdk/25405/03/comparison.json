{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,2 @@\n+\n+import jdk.internal.vm.annotation.Stable;\n@@ -48,1 +50,3 @@\n-    private int hashValue = -1;\n+\n+    @Stable\n+    private int hashValue;\n@@ -210,1 +214,1 @@\n-        if (h == -1) {\n+        if (h == 0) {\n","filename":"src\/java.base\/share\/classes\/java\/security\/PKCS12Attribute.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+import jdk.internal.vm.annotation.Stable;\n+\n@@ -60,1 +62,2 @@\n-    private int myhash = -1;\n+    @Stable\n+    private int myhash;\n@@ -108,2 +111,3 @@\n-        if (myhash == -1) {\n-            myhash = uri.hashCode()*7;\n+        int h = myhash;\n+        if (h == 0) {\n+            myhash = h = uri.hashCode()*7;\n@@ -111,1 +115,1 @@\n-        return myhash;\n+        return h;\n","filename":"src\/java.base\/share\/classes\/java\/security\/cert\/URICertStoreParameters.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,2 @@\n- * @bug 8200792\n- * @summary PKCS12Attribute#hashCode is always constant -1\n+ * @bug 8200792 8355379\n+ * @summary Tests PKCS12Attribute#hashCode correctness, stability, and caching after Stable annotation fix\n@@ -29,1 +29,0 @@\n-\n@@ -31,0 +30,2 @@\n+import java.util.HashSet;\n+import java.util.Set;\n@@ -37,1 +38,1 @@\n-            throw new Exception(\"I see \" + h1 + \" and \" + h2);\n+            throw new Exception(\"Unexpected hashCodes: \" + h1 + \" and \" + h2);\n@@ -39,0 +40,79 @@\n+\n+        PKCS12Attribute attr1 = new PKCS12Attribute(\"1.2.3.4\", \"AA\");\n+\n+        \/\/ Equality and hash code consistency\n+        testHashCode(attr1);\n+\n+        \/\/ Inequality and hash code difference\n+        testInequality(new PKCS12Attribute(\"1.2.3.4\", \"AA\"),\n+                new PKCS12Attribute(\"1.2.3.4\", \"BB\"));\n+        testInequality(new PKCS12Attribute(\"1.2.3.4\", \"AA\"),\n+                new PKCS12Attribute(\"2.3.4.5\", \"AA\"));\n+\n+        \/\/ Repeated hashCode consistency\n+        testRepeatHashCode(attr1);\n+\n+        \/\/ Hash code uniqueness stress test\n+        testHashCodeUniqueness();\n+    }\n+\n+    private static void testHashCode(PKCS12Attribute attr) throws Exception {\n+        int originalHash = attr.hashCode();\n+\n+        PKCS12Attribute reconstructed = new PKCS12Attribute(attr.getName(), attr.getValue());\n+\n+        if (!attr.equals(reconstructed)) {\n+            throw new Exception(\"Equality failed for: name=\" + attr.getName() +\n+                    \", value=\" + attr.getValue());\n+        }\n+\n+        int newHash = reconstructed.hashCode();\n+        if (originalHash != newHash) {\n+            throw new Exception(\"Hash code mismatch for: name=\" + attr.getName() +\n+                    \", original=\" + originalHash + \", new=\" + newHash);\n+        }\n+\n+        System.out.println(\"Pass: name=\" + attr.getName() + \", value=\" + attr.getValue() +\n+                \", hashCode=\" + originalHash);\n+    }\n+\n+    private static void testInequality(PKCS12Attribute a1, PKCS12Attribute a2) throws Exception {\n+        if (a1.equals(a2)) {\n+            throw new Exception(\"Unexpected equality: name=\" + a1.getName() +\n+                    \", values=\" + a1.getValue() + \" vs \" + a2.getValue());\n+        }\n+\n+        if (a1.hashCode() == a2.hashCode()) {\n+            System.out.println(\"Warning: Different attributes share hashCode: \" + a1.hashCode());\n+        } else {\n+            System.out.println(\"Pass: name=\" + a1.getName() +\n+                    \", values differ and hashCodes differ\");\n+        }\n+    }\n+\n+    private static void testRepeatHashCode(PKCS12Attribute attr) throws Exception {\n+        int h1 = attr.hashCode();\n+        int h2 = attr.hashCode();\n+\n+        if (h1 != h2) {\n+            throw new Exception(\"Inconsistent hashCode for: name=\" + attr.getName() +\n+                    \", value=\" + attr.getValue());\n+        }\n+\n+        System.out.println(\"Pass: repeat hashCode consistency for name=\" + attr.getName());\n+    }\n+\n+    private static void testHashCodeUniqueness() {\n+        Set<Integer> seen = new HashSet<>();\n+        int collisions = 0;\n+\n+        for (int i = 0; i < 1000; i++) {\n+            PKCS12Attribute attr = new PKCS12Attribute(\"1.2.3.\" + i, \"V\" + i);\n+            if (!seen.add(attr.hashCode())) {\n+                System.out.println(\"Hash collision: name=\" + attr.getName() +\n+                        \", value=\" + attr.getValue());\n+                collisions++;\n+            }\n+        }\n+\n+        System.out.println(\"Hash uniqueness test complete. Collisions: \" + collisions);\n","filename":"test\/jdk\/java\/security\/PKCS12Attribute\/HashCode.java","additions":85,"deletions":5,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,2 @@\n+import java.util.HashSet;\n+import java.util.Set;\n@@ -30,1 +32,1 @@\n- * @bug 8038084\n+ * @bug 8038084 8355379\n@@ -40,0 +42,1 @@\n+        testRepeatedHashCode(str1);\n@@ -71,0 +74,11 @@\n+\n+    private static void testRepeatedHashCode(String str) throws Exception {\n+        System.out.println(\"Testing repeated hashCode consistency\");\n+        URICertStoreParameters p = new URICertStoreParameters(new URI(str));\n+        int h1 = p.hashCode();\n+        int h2 = p.hashCode();\n+        if (h1 != h2) {\n+            throw new Exception(\"hashCode inconsistent across calls\");\n+        }\n+        System.out.println(\"hashCode consistency verified\");\n+    }\n","filename":"test\/jdk\/java\/security\/cert\/URICertStoreParameters\/TestBasic.java","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"}]}