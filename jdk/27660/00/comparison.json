{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -115,1 +115,1 @@\n- *      \/\/                  on the first Sunday in April\n+ *      \/\/                  on the second Sunday in March\n@@ -117,1 +117,1 @@\n- *      \/\/                  on the last Sunday in October\n+ *      \/\/                  on the first Sunday in November\n@@ -121,1 +121,1 @@\n- *                     Calendar.APRIL, 1, -Calendar.SUNDAY,\n+ *                     Calendar.MARCH, 8, -Calendar.SUNDAY,\n@@ -123,1 +123,1 @@\n- *                     Calendar.OCTOBER, -1, Calendar.SUNDAY,\n+ *                     Calendar.NOVEMBER, 1, -Calendar.SUNDAY,\n@@ -871,2 +871,13 @@\n-        return startMonth ^ startDay ^ startDayOfWeek ^ startTime ^\n-            endMonth ^ endDay ^ endDayOfWeek ^ endTime ^ rawOffset;\n+        int hash = 31 * getID().hashCode() + rawOffset;\n+        hash = 31 * hash + Boolean.hashCode(useDaylight);\n+        if (useDaylight) {\n+            hash = 31 * hash + startMonth;\n+            hash = 31 * hash + startDay;\n+            hash = 31 * hash + startDayOfWeek;\n+            hash = 31 * hash + startTime;\n+            hash = 31 * hash + endMonth;\n+            hash = 31 * hash + endDay;\n+            hash = 31 * hash + endDayOfWeek;\n+            hash = 31 * hash + endTime;\n+        }\n+        return hash;\n","filename":"src\/java.base\/share\/classes\/java\/util\/SimpleTimeZone.java","additions":18,"deletions":7,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8369184\n+ * @summary Checks if equals()\/hashCode() of SimpleTimeZone works correctly\n+ * @run junit SimpleTimeZoneHashCodeTest\n+ *\/\n+\n+import java.util.SimpleTimeZone;\n+import static java.util.Calendar.MARCH;\n+import static java.util.Calendar.NOVEMBER;\n+import static java.util.Calendar.SUNDAY;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class SimpleTimeZoneHashCodeTest {\n+    private static final SimpleTimeZone STZ_WITH_DST =\n+        new SimpleTimeZone(-288_000_000, \"America\/Los_Angeles\",\n+            MARCH, 8, -SUNDAY, 7_200_000,\n+            NOVEMBER, 1, -SUNDAY, 7_200_000);\n+    private static final SimpleTimeZone STZ_WITHOUT_DST =\n+        new SimpleTimeZone(0, \"foo\");\n+\n+    @Test\n+    void withDSTTest() {\n+        var stz = (SimpleTimeZone)STZ_WITH_DST.clone();\n+        assertEquals(STZ_WITH_DST, stz);\n+        assertEquals(STZ_WITH_DST.hashCode(), stz.hashCode());\n+\n+        stz.setEndRule(NOVEMBER, 8, -SUNDAY, 7_200_000);\n+        assertNotEquals(STZ_WITH_DST, stz);\n+        \/\/ from the contract point, hash codes may be the same\n+        assertNotEquals(STZ_WITH_DST.hashCode(), stz.hashCode());\n+    }\n+\n+    @Test\n+    void withOutDSTTest() {\n+        var stz = (SimpleTimeZone)STZ_WITHOUT_DST.clone();\n+\n+        \/\/ Only setting start rule. Still considered non-DST zone\n+        stz.setStartRule(MARCH, 8, -SUNDAY, 7_200_000);\n+        assertTrue(!stz.useDaylightTime());\n+        assertEquals(STZ_WITHOUT_DST, stz);\n+        assertEquals(STZ_WITHOUT_DST.hashCode(), stz.hashCode());\n+\n+        \/\/ Setting end rule as well. Now it is considered DST zone\n+        stz.setEndRule(NOVEMBER, 8, -SUNDAY, 7_200_000);\n+        assertTrue(stz.useDaylightTime());\n+        assertNotEquals(STZ_WITHOUT_DST, stz);\n+        assertNotEquals(STZ_WITHOUT_DST.hashCode(), stz.hashCode());\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/TimeZone\/SimpleTimeZoneHashCodeTest.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"}]}