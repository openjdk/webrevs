{"files":[{"patch":"@@ -72,1 +72,1 @@\n-    debug_only(__ should_not_reach_here());\n+    DEBUG_ONLY(__ should_not_reach_here());\n@@ -93,1 +93,1 @@\n-  debug_only(__ should_not_reach_here());\n+  DEBUG_ONLY(__ should_not_reach_here());\n@@ -106,1 +106,1 @@\n-  debug_only(__ should_not_reach_here());\n+  DEBUG_ONLY(__ should_not_reach_here());\n@@ -277,1 +277,1 @@\n-  debug_only(__ should_not_reach_here());\n+  DEBUG_ONLY(__ should_not_reach_here());\n@@ -292,1 +292,1 @@\n-  debug_only(__ should_not_reach_here());\n+  DEBUG_ONLY(__ should_not_reach_here());\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_CodeStubs_aarch64.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1241,1 +1241,1 @@\n-    debug_only(int off0 = __ offset());\n+    DEBUG_ONLY(int off0 = __ offset());\n@@ -1245,1 +1245,1 @@\n-    debug_only(int off1 = __ offset());\n+    DEBUG_ONLY(int off1 = __ offset());\n@@ -1254,1 +1254,1 @@\n-    debug_only(int off0 = __ offset());\n+    DEBUG_ONLY(int off0 = __ offset());\n@@ -1258,1 +1258,1 @@\n-    debug_only(int off1 = __ offset());\n+    DEBUG_ONLY(int off1 = __ offset());\n","filename":"src\/hotspot\/cpu\/arm\/arm.ad","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-    debug_only(__ should_not_reach_here());\n+    DEBUG_ONLY(__ should_not_reach_here());\n@@ -94,1 +94,1 @@\n-  debug_only(__ should_not_reach_here());\n+  DEBUG_ONLY(__ should_not_reach_here());\n","filename":"src\/hotspot\/cpu\/arm\/c1_CodeStubs_arm.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-  debug_only(barrier->verify());\n+  DEBUG_ONLY(barrier->verify());\n","filename":"src\/hotspot\/cpu\/arm\/gc\/shared\/barrierSetNMethod_arm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-    debug_only(__ illtrap());\n+    DEBUG_ONLY(__ illtrap());\n@@ -101,1 +101,1 @@\n-  debug_only(__ illtrap());\n+  DEBUG_ONLY(__ illtrap());\n@@ -118,1 +118,1 @@\n-  debug_only(__ illtrap());\n+  DEBUG_ONLY(__ illtrap());\n@@ -159,1 +159,1 @@\n-  debug_only(__ illtrap());\n+  DEBUG_ONLY(__ illtrap());\n@@ -182,1 +182,1 @@\n-  debug_only(__ illtrap());\n+  DEBUG_ONLY(__ illtrap());\n@@ -196,1 +196,1 @@\n-  debug_only( __ illtrap(); )\n+  DEBUG_ONLY( __ illtrap(); )\n@@ -444,1 +444,1 @@\n-  debug_only(__ illtrap());\n+  DEBUG_ONLY(__ illtrap());\n","filename":"src\/hotspot\/cpu\/ppc\/c1_CodeStubs_ppc.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -192,1 +192,1 @@\n-  debug_only(fpu_range_check(rnr);)\n+  DEBUG_ONLY(fpu_range_check(rnr);)\n","filename":"src\/hotspot\/cpu\/ppc\/c1_FrameMap_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-  debug_only(barrier->verify());\n+  DEBUG_ONLY(barrier->verify());\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shared\/barrierSetNMethod_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-    debug_only(__ should_not_reach_here());\n+    DEBUG_ONLY(__ should_not_reach_here());\n@@ -95,1 +95,1 @@\n-  debug_only(__ should_not_reach_here());\n+  DEBUG_ONLY(__ should_not_reach_here());\n@@ -108,1 +108,1 @@\n-  debug_only(__ should_not_reach_here());\n+  DEBUG_ONLY(__ should_not_reach_here());\n@@ -261,1 +261,1 @@\n-  debug_only(__ should_not_reach_here());\n+  DEBUG_ONLY(__ should_not_reach_here());\n@@ -275,1 +275,1 @@\n-  debug_only(__ should_not_reach_here());\n+  DEBUG_ONLY(__ should_not_reach_here());\n","filename":"src\/hotspot\/cpu\/riscv\/c1_CodeStubs_riscv.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -303,1 +303,1 @@\n-  debug_only(jump->verify();)\n+  DEBUG_ONLY(jump->verify();)\n","filename":"src\/hotspot\/cpu\/riscv\/nativeInst_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-    debug_only(__ should_not_reach_here());\n+    DEBUG_ONLY(__ should_not_reach_here());\n@@ -77,1 +77,1 @@\n-  debug_only(__ should_not_reach_here());\n+  DEBUG_ONLY(__ should_not_reach_here());\n@@ -91,1 +91,1 @@\n-  debug_only(__ should_not_reach_here());\n+  DEBUG_ONLY(__ should_not_reach_here());\n@@ -119,1 +119,1 @@\n-  debug_only(__ should_not_reach_here());\n+  DEBUG_ONLY(__ should_not_reach_here());\n@@ -137,1 +137,1 @@\n-  debug_only(__ should_not_reach_here());\n+  DEBUG_ONLY(__ should_not_reach_here());\n@@ -150,1 +150,1 @@\n-  debug_only(__ should_not_reach_here());\n+  DEBUG_ONLY(__ should_not_reach_here());\n","filename":"src\/hotspot\/cpu\/s390\/c1_CodeStubs_s390.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -147,1 +147,1 @@\n-  debug_only(fpu_range_check(rnr);)\n+  DEBUG_ONLY(fpu_range_check(rnr);)\n@@ -152,2 +152,2 @@\n-  debug_only(fpu_range_check(rnr);)\n-  debug_only(fpu_range_check(reg->encoding());)\n+  DEBUG_ONLY(fpu_range_check(rnr);)\n+  DEBUG_ONLY(fpu_range_check(reg->encoding());)\n","filename":"src\/hotspot\/cpu\/s390\/c1_FrameMap_s390.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -110,1 +110,1 @@\n-    debug_only(fpu_range_check(c1rnr);)\n+    DEBUG_ONLY(fpu_range_check(c1rnr);)\n","filename":"src\/hotspot\/cpu\/s390\/c1_FrameMap_s390.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-      debug_only(Assembler::is_z_cfi(*((long*)inst_addr)));\n+      DEBUG_ONLY(Assembler::is_z_cfi(*((long*)inst_addr)));\n@@ -94,1 +94,1 @@\n-  debug_only(barrier->verify());\n+  DEBUG_ONLY(barrier->verify());\n","filename":"src\/hotspot\/cpu\/s390\/gc\/shared\/barrierSetNMethod_s390.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -447,1 +447,1 @@\n-  debug_only(verify_esp(Z_esp, Z_R1_scratch));\n+  DEBUG_ONLY(verify_esp(Z_esp, Z_R1_scratch));\n@@ -461,1 +461,1 @@\n-  debug_only(verify_esp(Z_esp, Z_R1_scratch));\n+  DEBUG_ONLY(verify_esp(Z_esp, Z_R1_scratch));\n@@ -468,1 +468,1 @@\n-  debug_only(verify_esp(Z_esp, Z_R1_scratch));\n+  DEBUG_ONLY(verify_esp(Z_esp, Z_R1_scratch));\n@@ -475,1 +475,1 @@\n-  debug_only(verify_esp(Z_esp, Z_R1_scratch));\n+  DEBUG_ONLY(verify_esp(Z_esp, Z_R1_scratch));\n@@ -481,1 +481,1 @@\n-  debug_only(verify_esp(Z_esp, Z_R1_scratch));\n+  DEBUG_ONLY(verify_esp(Z_esp, Z_R1_scratch));\n@@ -487,1 +487,1 @@\n-  debug_only(verify_esp(Z_esp, Z_R1_scratch));\n+  DEBUG_ONLY(verify_esp(Z_esp, Z_R1_scratch));\n@@ -492,1 +492,1 @@\n-  debug_only(verify_esp(Z_esp, Z_R1_scratch));\n+  DEBUG_ONLY(verify_esp(Z_esp, Z_R1_scratch));\n@@ -504,1 +504,1 @@\n-  debug_only(verify_esp(Z_esp, Z_R1_scratch));\n+  DEBUG_ONLY(verify_esp(Z_esp, Z_R1_scratch));\n@@ -512,1 +512,1 @@\n-  debug_only(verify_esp(Z_esp, Z_R1_scratch));\n+  DEBUG_ONLY(verify_esp(Z_esp, Z_R1_scratch));\n@@ -518,1 +518,1 @@\n-  debug_only(verify_esp(Z_esp, Z_R1_scratch));\n+  DEBUG_ONLY(verify_esp(Z_esp, Z_R1_scratch));\n","filename":"src\/hotspot\/cpu\/s390\/interp_masm_s390.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -804,1 +804,1 @@\n-  debug_only(bool has_disp32 = false);\n+  DEBUG_ONLY(bool has_disp32 = false);\n@@ -862,1 +862,1 @@\n-    debug_only(has_disp32 = true);\n+    DEBUG_ONLY(has_disp32 = true);\n@@ -901,1 +901,1 @@\n-      debug_only(has_disp32 = true);\n+      DEBUG_ONLY(has_disp32 = true);\n@@ -904,1 +904,1 @@\n-      debug_only(has_disp32 = true);\n+      DEBUG_ONLY(has_disp32 = true);\n@@ -926,1 +926,1 @@\n-    debug_only(has_disp32 = true); \/\/ has both kinds of operands!\n+    DEBUG_ONLY(has_disp32 = true); \/\/ has both kinds of operands!\n@@ -935,1 +935,1 @@\n-      debug_only(has_disp32 = true); \/\/ has both kinds of operands!\n+      DEBUG_ONLY(has_disp32 = true); \/\/ has both kinds of operands!\n@@ -939,1 +939,1 @@\n-      debug_only(has_disp32 = true); \/\/ has both kinds of operands!\n+      DEBUG_ONLY(has_disp32 = true); \/\/ has both kinds of operands!\n@@ -964,1 +964,1 @@\n-      debug_only(has_disp32 = true);\n+      DEBUG_ONLY(has_disp32 = true);\n@@ -979,1 +979,1 @@\n-      debug_only(has_disp32 = true);\n+      DEBUG_ONLY(has_disp32 = true);\n@@ -984,1 +984,1 @@\n-      debug_only(has_disp32 = true);\n+      DEBUG_ONLY(has_disp32 = true);\n@@ -990,1 +990,1 @@\n-      debug_only(has_disp32 = true);\n+      DEBUG_ONLY(has_disp32 = true);\n@@ -1007,1 +1007,1 @@\n-    debug_only(has_disp32 = true); \/\/ has both kinds of operands!\n+    DEBUG_ONLY(has_disp32 = true); \/\/ has both kinds of operands!\n@@ -1012,1 +1012,1 @@\n-    debug_only(has_disp32 = true); \/\/ has both kinds of operands!\n+    DEBUG_ONLY(has_disp32 = true); \/\/ has both kinds of operands!\n@@ -1029,1 +1029,1 @@\n-      debug_only(has_disp32 = true);\n+      DEBUG_ONLY(has_disp32 = true);\n@@ -1048,1 +1048,1 @@\n-    debug_only(has_disp32 = true); \/\/ has both kinds of operands!\n+    DEBUG_ONLY(has_disp32 = true); \/\/ has both kinds of operands!\n@@ -1060,1 +1060,1 @@\n-    debug_only(has_disp32 = true); \/\/ has both kinds of operands!\n+    DEBUG_ONLY(has_disp32 = true); \/\/ has both kinds of operands!\n@@ -1112,1 +1112,1 @@\n-    debug_only(has_disp32 = true); \/\/ has both kinds of operands!\n+    DEBUG_ONLY(has_disp32 = true); \/\/ has both kinds of operands!\n@@ -1138,1 +1138,1 @@\n-    debug_only(has_disp32 = true); \/\/ has both kinds of operands!\n+    DEBUG_ONLY(has_disp32 = true); \/\/ has both kinds of operands!\n@@ -1150,1 +1150,1 @@\n-    debug_only(has_disp32 = true);\n+    DEBUG_ONLY(has_disp32 = true);\n@@ -1187,1 +1187,1 @@\n-    debug_only(has_disp32 = true); \/\/ has both kinds of operands!\n+    DEBUG_ONLY(has_disp32 = true); \/\/ has both kinds of operands!\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-    debug_only(__ should_not_reach_here());\n+    DEBUG_ONLY(__ should_not_reach_here());\n@@ -91,1 +91,1 @@\n-  debug_only(__ should_not_reach_here());\n+  DEBUG_ONLY(__ should_not_reach_here());\n@@ -104,1 +104,1 @@\n-  debug_only(__ should_not_reach_here());\n+  DEBUG_ONLY(__ should_not_reach_here());\n@@ -114,1 +114,1 @@\n-  debug_only(__ should_not_reach_here());\n+  DEBUG_ONLY(__ should_not_reach_here());\n@@ -402,1 +402,1 @@\n-  debug_only(__ should_not_reach_here());\n+  DEBUG_ONLY(__ should_not_reach_here());\n@@ -416,1 +416,1 @@\n-  debug_only(__ should_not_reach_here());\n+  DEBUG_ONLY(__ should_not_reach_here());\n","filename":"src\/hotspot\/cpu\/x86\/c1_CodeStubs_x86.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -143,1 +143,1 @@\n-  debug_only(verify());\n+  DEBUG_ONLY(verify());\n","filename":"src\/hotspot\/cpu\/x86\/nativeInst_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -506,1 +506,1 @@\n-  debug_only(jump->verify();)\n+  DEBUG_ONLY(jump->verify();)\n","filename":"src\/hotspot\/cpu\/x86\/nativeInst_x86.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1853,1 +1853,1 @@\n-    debug_only(int off0 = __ offset());\n+    DEBUG_ONLY(int off0 = __ offset());\n@@ -1860,1 +1860,1 @@\n-    debug_only(int off1 = __ offset());\n+    DEBUG_ONLY(int off1 = __ offset());\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1667,1 +1667,1 @@\n-          debug_only(VMNativeEntryWrapper vew;)\n+          DEBUG_ONLY(VMNativeEntryWrapper vew;)\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -150,1 +150,1 @@\n-debug_only(static bool signal_sets_initialized = false);\n+DEBUG_ONLY(static bool signal_sets_initialized = false);\n@@ -1550,1 +1550,1 @@\n-  debug_only(signal_sets_initialized = true);\n+  DEBUG_ONLY(signal_sets_initialized = true);\n","filename":"src\/hotspot\/os\/posix\/signals_posix.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-  enum { PatchCacheSize = 4 debug_only( +4 ) };\n+  enum { PatchCacheSize = 4 DEBUG_ONLY( +4 ) };\n","filename":"src\/hotspot\/share\/asm\/assembler.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-  debug_only(verify_section_allocation();)\n+  DEBUG_ONLY(verify_section_allocation();)\n@@ -123,1 +123,1 @@\n-  debug_only(verify_section_allocation();)\n+  DEBUG_ONLY(verify_section_allocation();)\n@@ -497,1 +497,1 @@\n-    debug_only(dest_cs->_start = nullptr);  \/\/ defeat double-initialization assert\n+    DEBUG_ONLY(dest_cs->_start = nullptr);  \/\/ defeat double-initialization assert\n@@ -508,1 +508,1 @@\n-  debug_only(dest->verify_section_allocation();)\n+  DEBUG_ONLY(dest->verify_section_allocation();)\n@@ -942,1 +942,1 @@\n-  debug_only(Copy::fill_to_bytes(bxp->_total_start, bxp->_total_size,\n+  DEBUG_ONLY(Copy::fill_to_bytes(bxp->_total_start, bxp->_total_size,\n@@ -946,1 +946,1 @@\n-  debug_only(verify_section_allocation();)\n+  DEBUG_ONLY(verify_section_allocation();)\n","filename":"src\/hotspot\/share\/asm\/codeBuffer.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -124,2 +124,2 @@\n-    debug_only(_index = -1);\n-    debug_only(_outer = (CodeBuffer*)badAddress);\n+    DEBUG_ONLY(_index = -1);\n+    DEBUG_ONLY(_outer = (CodeBuffer*)badAddress);\n@@ -538,1 +538,1 @@\n-    debug_only(verify_section_allocation();)\n+    DEBUG_ONLY(verify_section_allocation();)\n","filename":"src\/hotspot\/share\/asm\/codeBuffer.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -112,1 +112,1 @@\n-    debug_only(cpu_range_check(rnr);)\n+    DEBUG_ONLY(cpu_range_check(rnr);)\n@@ -118,1 +118,1 @@\n-    debug_only(cpu_range_check(reg->encoding());)\n+    DEBUG_ONLY(cpu_range_check(reg->encoding());)\n@@ -123,2 +123,2 @@\n-    debug_only(cpu_range_check(rnr);)\n-    debug_only(cpu_range_check(reg->encoding());)\n+    DEBUG_ONLY(cpu_range_check(rnr);)\n+    DEBUG_ONLY(cpu_range_check(reg->encoding());)\n","filename":"src\/hotspot\/share\/c1\/c1_FrameMap.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1366,1 +1366,1 @@\n-  debug_only(NoHandleMark nhm;)\n+  DEBUG_ONLY(NoHandleMark nhm;)\n@@ -1383,1 +1383,1 @@\n-  debug_only(NoHandleMark nhm;)\n+  DEBUG_ONLY(NoHandleMark nhm;)\n@@ -1400,1 +1400,1 @@\n-  debug_only(NoHandleMark nhm;)\n+  DEBUG_ONLY(NoHandleMark nhm;)\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2927,1 +2927,1 @@\n-  debug_only(int max_block = _next_pre_order;)\n+  DEBUG_ONLY(int max_block = _next_pre_order;)\n","filename":"src\/hotspot\/share\/ci\/ciTypeFlow.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -256,1 +256,1 @@\n-      debug_only(set_type_at_tos(bottom_type()));\n+      DEBUG_ONLY(set_type_at_tos(bottom_type()));\n","filename":"src\/hotspot\/share\/ci\/ciTypeFlow.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-  debug_only(VMNativeEntryWrapper __vew;)\n+  DEBUG_ONLY(VMNativeEntryWrapper __vew;)\n@@ -52,1 +52,1 @@\n- * debug_only(NoHandleMark __hm();)         \\\n+ * DEBUG_ONLY(NoHandleMark __hm();)         \\\n@@ -55,1 +55,1 @@\n-  debug_only(VMNativeEntryWrapper __vew;)\n+  DEBUG_ONLY(VMNativeEntryWrapper __vew;)\n","filename":"src\/hotspot\/share\/ci\/ciUtilities.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -179,1 +179,1 @@\n-  debug_only(const u1* const old_current = stream->current();)\n+  DEBUG_ONLY(const u1* const old_current = stream->current();)\n@@ -5246,1 +5246,1 @@\n-  debug_only(ik->verify();)\n+  DEBUG_ONLY(ik->verify();)\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4824,1 +4824,1 @@\n-  debug_only(jint loop_count = 0);\n+  DEBUG_ONLY(jint loop_count = 0);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -143,1 +143,1 @@\n-  debug_only(_recording_state = rs_null);\n+  DEBUG_ONLY(_recording_state = rs_null);\n@@ -162,1 +162,1 @@\n-  debug_only(_recording_state = rs_safepoint);\n+  DEBUG_ONLY(_recording_state = rs_safepoint);\n@@ -172,1 +172,1 @@\n-  debug_only(_recording_state = rs_non_safepoint);\n+  DEBUG_ONLY(_recording_state = rs_non_safepoint);\n@@ -363,1 +363,1 @@\n-  debug_only(_recording_state = rs_null);\n+  DEBUG_ONLY(_recording_state = rs_null);\n@@ -416,1 +416,1 @@\n-  debug_only(mark_recorders_frozen());  \/\/ mark it \"frozen\" for asserts\n+  DEBUG_ONLY(mark_recorders_frozen());  \/\/ mark it \"frozen\" for asserts\n@@ -422,1 +422,1 @@\n-  debug_only(mark_recorders_frozen());  \/\/ mark it \"frozen\" for asserts\n+  DEBUG_ONLY(mark_recorders_frozen());  \/\/ mark it \"frozen\" for asserts\n","filename":"src\/hotspot\/share\/code\/debugInfoRec.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1125,1 +1125,1 @@\n-    debug_only(nm->verify();) \/\/ might block\n+    DEBUG_ONLY(nm->verify();) \/\/ might block\n@@ -1272,1 +1272,1 @@\n-  debug_only(Universe::heap()->verify_nmethod(this));\n+  DEBUG_ONLY(Universe::heap()->verify_nmethod(this));\n@@ -1299,1 +1299,1 @@\n-    debug_only(NoSafepointVerifier nsv;)\n+    DEBUG_ONLY(NoSafepointVerifier nsv;)\n@@ -1440,1 +1440,1 @@\n-    debug_only(NoSafepointVerifier nsv;)\n+    DEBUG_ONLY(NoSafepointVerifier nsv;)\n@@ -2805,1 +2805,1 @@\n-  const int LOG2_RADIX = 4 \/*smaller steps in debug mode:*\/ debug_only(-1);\n+  const int LOG2_RADIX = 4 \/*smaller steps in debug mode:*\/ DEBUG_ONLY(-1);\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -103,1 +103,1 @@\n-  PcDescCache() { debug_only(_pc_descs[0] = nullptr); }\n+  PcDescCache() { DEBUG_ONLY(_pc_descs[0] = nullptr); }\n","filename":"src\/hotspot\/share\/code\/nmethod.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -125,1 +125,1 @@\n-  debug_only(_find_index_calls++);\n+  DEBUG_ONLY(_find_index_calls++);\n@@ -137,1 +137,1 @@\n-      debug_only(_hit_indexes++);\n+      DEBUG_ONLY(_hit_indexes++);\n@@ -154,1 +154,1 @@\n-      debug_only(_missed_indexes++);\n+      DEBUG_ONLY(_missed_indexes++);\n","filename":"src\/hotspot\/share\/code\/oopRecorder.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-    debug_only(_value = 0xFFFF);\n+    DEBUG_ONLY(_value = 0xFFFF);\n@@ -345,1 +345,1 @@\n-  debug_only(const CodeBuffer* src0 = src);\n+  DEBUG_ONLY(const CodeBuffer* src0 = src);\n","filename":"src\/hotspot\/share\/code\/relocInfo.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -577,1 +577,1 @@\n-    debug_only(_data = nullptr);\n+    DEBUG_ONLY(_data = nullptr);\n","filename":"src\/hotspot\/share\/code\/relocInfo.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -179,1 +179,1 @@\n-  debug_only(stub_verify(s);)\n+  DEBUG_ONLY(stub_verify(s);)\n@@ -186,1 +186,1 @@\n-  debug_only(stub_verify(s);)\n+  DEBUG_ONLY(stub_verify(s);)\n@@ -213,1 +213,1 @@\n-  debug_only(verify();)\n+  DEBUG_ONLY(verify();)\n","filename":"src\/hotspot\/share\/code\/stubs.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -329,1 +329,1 @@\n-  debug_only( _locs_used[reg->value()] = x; )\n+  DEBUG_ONLY( _locs_used[reg->value()] = x; )\n@@ -514,1 +514,1 @@\n-  debug_only(reg_map->_update_for_id = fr->id());\n+  DEBUG_ONLY(reg_map->_update_for_id = fr->id());\n","filename":"src\/hotspot\/share\/compiler\/oopMap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -165,1 +165,1 @@\n-  debug_only( OopMapValue::oop_types* _locs_used; int _locs_length;)\n+  DEBUG_ONLY( OopMapValue::oop_types* _locs_used; int _locs_length;)\n","filename":"src\/hotspot\/share\/compiler\/oopMap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -124,1 +124,1 @@\n-  debug_only(verify_for_block(blk_start, blk_end);)\n+  DEBUG_ONLY(verify_for_block(blk_start, blk_end);)\n","filename":"src\/hotspot\/share\/gc\/parallel\/objectStartArray.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1632,1 +1632,1 @@\n-  debug_only(verify_forward();)\n+  DEBUG_ONLY(verify_forward();)\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-      debug_only(Copy::fill_to_words(top(), free()\/HeapWordSize, badHeapWord));\n+      DEBUG_ONLY(Copy::fill_to_words(top(), free()\/HeapWordSize, badHeapWord));\n","filename":"src\/hotspot\/share\/gc\/parallel\/psPromotionLAB.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-  debug_only(virtual bool lab_is_valid(MemRegion lab) { return false; });\n+  DEBUG_ONLY(virtual bool lab_is_valid(MemRegion lab) { return false; });\n@@ -98,1 +98,1 @@\n-  debug_only(virtual bool lab_is_valid(MemRegion lab);)\n+  DEBUG_ONLY(virtual bool lab_is_valid(MemRegion lab);)\n@@ -130,1 +130,1 @@\n-  debug_only(virtual bool lab_is_valid(MemRegion lab));\n+  DEBUG_ONLY(virtual bool lab_is_valid(MemRegion lab));\n","filename":"src\/hotspot\/share\/gc\/parallel\/psPromotionLAB.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -158,1 +158,1 @@\n-  debug_only(verify_for_block(blk_start, blk_end);)\n+  DEBUG_ONLY(verify_for_block(blk_start, blk_end);)\n","filename":"src\/hotspot\/share\/gc\/serial\/serialBlockOffsetTable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -182,1 +182,1 @@\n-  debug_only(static void check_for_valid_allocation_state();)\n+  DEBUG_ONLY(static void check_for_valid_allocation_state();)\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-debug_only(\n+DEBUG_ONLY(\n","filename":"src\/hotspot\/share\/gc\/shared\/hSpaceCounters.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-  debug_only(\n+  DEBUG_ONLY(\n","filename":"src\/hotspot\/share\/gc\/shared\/hSpaceCounters.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -148,1 +148,1 @@\n-  debug_only(check_for_valid_allocation_state());\n+  DEBUG_ONLY(check_for_valid_allocation_state());\n@@ -330,1 +330,1 @@\n-  debug_only(allocation._thread->check_for_valid_safepoint_state());\n+  DEBUG_ONLY(allocation._thread->check_for_valid_safepoint_state());\n","filename":"src\/hotspot\/share\/gc\/shared\/memAllocator.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -134,1 +134,1 @@\n-  debug_only(mark_on_list_nmethods());\n+  DEBUG_ONLY(mark_on_list_nmethods());\n@@ -140,1 +140,1 @@\n-    debug_only(data.clear_marked());\n+    DEBUG_ONLY(data.clear_marked());\n@@ -159,1 +159,1 @@\n-  debug_only(verify_nmethods());\n+  DEBUG_ONLY(verify_nmethods());\n@@ -169,1 +169,1 @@\n-  debug_only(mark_on_list_nmethods());\n+  DEBUG_ONLY(mark_on_list_nmethods());\n@@ -175,1 +175,1 @@\n-    debug_only(data.clear_marked());\n+    DEBUG_ONLY(data.clear_marked());\n@@ -190,1 +190,1 @@\n-  debug_only(verify_nmethods());\n+  DEBUG_ONLY(verify_nmethods());\n","filename":"src\/hotspot\/share\/gc\/shared\/scavengableNMethods.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -899,1 +899,1 @@\n-    debug_only(gc_state_adr_type = phase->C->get_adr_type(gc_state_idx));\n+    DEBUG_ONLY(gc_state_adr_type = phase->C->get_adr_type(gc_state_idx));\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahBarrierSetC2.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -193,1 +193,1 @@\n-  debug_only(size_t regions = 0;)\n+  DEBUG_ONLY(size_t regions = 0;)\n@@ -197,1 +197,1 @@\n-      debug_only(regions ++;)\n+      DEBUG_ONLY(regions ++;)\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectionSet.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -312,1 +312,1 @@\n-  debug_only(uint   _reserved;  )\n+  DEBUG_ONLY(uint   _reserved;  )\n@@ -319,1 +319,1 @@\n-    debug_only(_reserved = 0; )\n+    DEBUG_ONLY(_reserved = 0; )\n@@ -329,1 +329,1 @@\n-    debug_only(_reserved = n;)\n+    DEBUG_ONLY(_reserved = n;)\n@@ -332,1 +332,1 @@\n-  debug_only(uint get_reserved() const { return (uint)_reserved; })\n+  DEBUG_ONLY(uint get_reserved() const { return (uint)_reserved; })\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahTaskqueue.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -314,1 +314,1 @@\n-    debug_only(_bit_mask[0] = 0;)\n+    DEBUG_ONLY(_bit_mask[0] = 0;)\n","filename":"src\/hotspot\/share\/interpreter\/oopMapCache.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -507,1 +507,1 @@\n-  debug_only(const u1 current_epoch = JfrTraceIdEpoch::current();)\n+  DEBUG_ONLY(const u1 current_epoch = JfrTraceIdEpoch::current();)\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/jfrCheckpointManager.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -401,1 +401,1 @@\n-  debug_only(assert_flush_precondition(cur, used, native, t);)\n+  DEBUG_ONLY(assert_flush_precondition(cur, used, native, t);)\n@@ -410,1 +410,1 @@\n-  debug_only(assert_flush_regular_precondition(cur, cur_pos, used, req, t);)\n+  DEBUG_ONLY(assert_flush_regular_precondition(cur, cur_pos, used, req, t);)\n@@ -453,1 +453,1 @@\n-  debug_only(assert_flush_large_precondition(cur, cur_pos, used, req, native, t);)\n+  DEBUG_ONLY(assert_flush_large_precondition(cur, cur_pos, used, req, native, t);)\n@@ -483,1 +483,1 @@\n-  debug_only(assert_provision_large_precondition(cur, used, req, t);)\n+  DEBUG_ONLY(assert_provision_large_precondition(cur, used, req, t);)\n","filename":"src\/hotspot\/share\/jfr\/recorder\/storage\/jfrStorage.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-  debug_only(add(alloc_size));\n+  DEBUG_ONLY(add(alloc_size));\n@@ -114,1 +114,1 @@\n-  debug_only(hook_memory_deallocation(size);)\n+  DEBUG_ONLY(hook_memory_deallocation(size);)\n@@ -119,1 +119,1 @@\n-  debug_only(hook_memory_deallocation(size);)\n+  DEBUG_ONLY(hook_memory_deallocation(size);)\n@@ -130,1 +130,1 @@\n-  debug_only(hook_memory_deallocation(size);)\n+  DEBUG_ONLY(hook_memory_deallocation(size);)\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrAllocation.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -208,1 +208,1 @@\n-  debug_only(validate_count_param(node, count);)\n+  DEBUG_ONLY(validate_count_param(node, count);)\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrDoublyLinkedList.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-  debug_only(AccessAssert _access;)\n+  DEBUG_ONLY(AccessAssert _access;)\n@@ -56,1 +56,1 @@\n-  debug_only(bool is_acquired() const;)\n+  DEBUG_ONLY(bool is_acquired() const;)\n","filename":"src\/hotspot\/share\/jfr\/writers\/jfrMemoryWriterHost.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-  debug_only(_access.acquire();)\n+  DEBUG_ONLY(_access.acquire();)\n@@ -59,1 +59,1 @@\n-  debug_only(is_acquired();)\n+  DEBUG_ONLY(is_acquired();)\n@@ -64,1 +64,1 @@\n-  debug_only(is_acquired();)\n+  DEBUG_ONLY(is_acquired();)\n@@ -66,1 +66,1 @@\n-  debug_only(_access.release();)\n+  DEBUG_ONLY(_access.release();)\n","filename":"src\/hotspot\/share\/jfr\/writers\/jfrMemoryWriterHost.inline.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -176,1 +176,1 @@\n-  debug_only(VMNativeEntryWrapper __vew;)\n+  DEBUG_ONLY(VMNativeEntryWrapper __vew;)\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-  debug_only(static intx _locking_thread_id;)\n+  DEBUG_ONLY(static intx _locking_thread_id;)\n@@ -66,1 +66,1 @@\n-    debug_only(_locking_thread_id = os::current_thread_id());\n+    DEBUG_ONLY(_locking_thread_id = os::current_thread_id());\n@@ -69,1 +69,1 @@\n-    debug_only(_locking_thread_id = -1);\n+    DEBUG_ONLY(_locking_thread_id = -1);\n@@ -72,1 +72,1 @@\n-  debug_only(static bool current_thread_has_lock();)\n+  DEBUG_ONLY(static bool current_thread_has_lock();)\n","filename":"src\/hotspot\/share\/logging\/logConfiguration.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -168,2 +168,2 @@\n-debug_only(OopHandle Universe::_fullgc_alot_dummy_array;)\n-debug_only(int Universe::_fullgc_alot_dummy_next = 0;)\n+DEBUG_ONLY(OopHandle Universe::_fullgc_alot_dummy_array;)\n+DEBUG_ONLY(int Universe::_fullgc_alot_dummy_next = 0;)\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -120,2 +120,2 @@\n-  debug_only(static OopHandle   _fullgc_alot_dummy_array;)\n-  debug_only(static int         _fullgc_alot_dummy_next;)\n+  DEBUG_ONLY(static OopHandle   _fullgc_alot_dummy_array;)\n+  DEBUG_ONLY(static int         _fullgc_alot_dummy_next;)\n@@ -360,1 +360,1 @@\n-  debug_only(static bool release_fullgc_alot_dummy();)\n+  DEBUG_ONLY(static bool release_fullgc_alot_dummy();)\n","filename":"src\/hotspot\/share\/memory\/universe.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -203,1 +203,1 @@\n-  debug_only(warning(\n+  DEBUG_ONLY(warning(\n@@ -374,1 +374,1 @@\n-      debug_only(warning(\"os::uncommit_memory failed\"));\n+      DEBUG_ONLY(warning(\"os::uncommit_memory failed\"));\n@@ -385,1 +385,1 @@\n-      debug_only(warning(\"os::uncommit_memory failed\"));\n+      DEBUG_ONLY(warning(\"os::uncommit_memory failed\"));\n@@ -396,1 +396,1 @@\n-      debug_only(warning(\"os::uncommit_memory failed\"));\n+      DEBUG_ONLY(warning(\"os::uncommit_memory failed\"));\n","filename":"src\/hotspot\/share\/memory\/virtualspace.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-  debug_only(friend class ClassVerifier;)\n+  DEBUG_ONLY(friend class ClassVerifier;)\n","filename":"src\/hotspot\/share\/oops\/cpCache.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2030,1 +2030,1 @@\n-    debug_only(BasicBlock* target_bb = &jsr_bb[1];)\n+    DEBUG_ONLY(BasicBlock* target_bb = &jsr_bb[1];)\n","filename":"src\/hotspot\/share\/oops\/generateOopMap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1324,1 +1324,1 @@\n-    debug_only(vtable().verify(tty, true);)\n+    DEBUG_ONLY(vtable().verify(tty, true);)\n@@ -4194,1 +4194,1 @@\n-  debug_only(_is_static_field_id = false;)\n+  DEBUG_ONLY(_is_static_field_id = false;)\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-  debug_only(static bool first_time = true);\n+  DEBUG_ONLY(static bool first_time = true);\n@@ -77,1 +77,1 @@\n-  debug_only(first_time = false);\n+  DEBUG_ONLY(first_time = false);\n","filename":"src\/hotspot\/share\/oops\/instanceRefKlass.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -681,1 +681,1 @@\n-  debug_only(verify();)\n+  DEBUG_ONLY(verify();)\n@@ -706,1 +706,1 @@\n-  debug_only(verify();)\n+  DEBUG_ONLY(verify();)\n","filename":"src\/hotspot\/share\/oops\/klass.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1259,1 +1259,1 @@\n-  debug_only(NoSafepointVerifier nsv;)\n+  DEBUG_ONLY(NoSafepointVerifier nsv;)\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-  debug_only(_limit = i+1);\n+  DEBUG_ONLY(_limit = i+1);\n","filename":"src\/hotspot\/share\/opto\/block.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-  debug_only(uint _limit;)      \/\/ limit to formal domain\n+  DEBUG_ONLY(uint _limit;)      \/\/ limit to formal domain\n@@ -60,1 +60,1 @@\n-    debug_only(_limit=0);\n+    DEBUG_ONLY(_limit=0);\n@@ -72,1 +72,1 @@\n-  uint Max() const { debug_only(return _limit); return _size; }\n+  uint Max() const { DEBUG_ONLY(return _limit); return _size; }\n","filename":"src\/hotspot\/share\/opto\/block.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -194,1 +194,1 @@\n-  debug_only( memset(defs,0,(max_size+1)*sizeof(Node*)) );\n+  DEBUG_ONLY( memset(defs,0,(max_size+1)*sizeof(Node*)) );\n@@ -212,1 +212,1 @@\n-  debug_only( char *dup_check = NEW_RESOURCE_ARRAY(char,OptoReg::stack0());\n+  DEBUG_ONLY( char *dup_check = NEW_RESOURCE_ARRAY(char,OptoReg::stack0());\n@@ -354,1 +354,1 @@\n-      debug_only( dup_check[_callees[reg]]=1; )\n+      DEBUG_ONLY( dup_check[_callees[reg]]=1; )\n","filename":"src\/hotspot\/share\/opto\/buildOopMap.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -269,2 +269,2 @@\n-  debug_only(_bci = -99);  \/\/ random garbage value\n-  debug_only(_map = (SafePointNode*)-1);\n+  DEBUG_ONLY(_bci = -99);  \/\/ random garbage value\n+  DEBUG_ONLY(_map = (SafePointNode*)-1);\n@@ -284,1 +284,1 @@\n-  debug_only(_map = (SafePointNode*)-1);\n+  DEBUG_ONLY(_map = (SafePointNode*)-1);\n@@ -326,1 +326,1 @@\n-  debug_only(JVMState* jvmroot = of_depth(1));\n+  DEBUG_ONLY(JVMState* jvmroot = of_depth(1));\n@@ -333,1 +333,1 @@\n-  debug_only(JVMState* jvmroot = of_depth(1));\n+  DEBUG_ONLY(JVMState* jvmroot = of_depth(1));\n@@ -1468,1 +1468,1 @@\n-  debug_only(int num_before_pop = jvms()->nof_monitors());\n+  DEBUG_ONLY(int num_before_pop = jvms()->nof_monitors());\n","filename":"src\/hotspot\/share\/opto\/callnode.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2236,1 +2236,1 @@\n-    debug_only(Node* ident = Identity(phase));\n+    DEBUG_ONLY(Node* ident = Identity(phase));\n","filename":"src\/hotspot\/share\/opto\/cfgnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1326,1 +1326,1 @@\n-    debug_only( int lo_no_simplify=0; );\n+    DEBUG_ONLY( int lo_no_simplify=0; );\n@@ -1338,1 +1338,1 @@\n-      debug_only( if( lrgs(i)._was_lo ) lo_no_simplify=i; );\n+      DEBUG_ONLY( if( lrgs(i)._was_lo ) lo_no_simplify=i; );\n@@ -1580,1 +1580,1 @@\n-    debug_only(RegMask orig_mask = lrg->mask();)\n+    DEBUG_ONLY(RegMask orig_mask = lrg->mask();)\n@@ -1709,2 +1709,2 @@\n-        debug_only(tty->print(\" original mask: \"));\n-        debug_only(orig_mask.dump());\n+        DEBUG_ONLY(tty->print(\" original mask: \"));\n+        DEBUG_ONLY(orig_mask.dump());\n","filename":"src\/hotspot\/share\/opto\/chaitin.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-    debug_only(_degree_valid = 1;)\n+    DEBUG_ONLY(_degree_valid = 1;)\n@@ -89,1 +89,1 @@\n-  void invalid_degree() { debug_only(_degree_valid=0;) }\n+  void invalid_degree() { DEBUG_ONLY(_degree_valid=0;) }\n@@ -131,5 +131,5 @@\n-  void set_mask( const RegMask &rm ) { _mask = rm; debug_only(_msize_valid=0;)}\n-  void AND( const RegMask &rm ) { _mask.AND(rm); debug_only(_msize_valid=0;)}\n-  void SUBTRACT( const RegMask &rm ) { _mask.SUBTRACT(rm); debug_only(_msize_valid=0;)}\n-  void Clear()   { _mask.Clear()  ; debug_only(_msize_valid=1); _mask_size = 0; }\n-  void Set_All() { _mask.Set_All(); debug_only(_msize_valid=1); _mask_size = RegMask::CHUNK_SIZE; }\n+  void set_mask( const RegMask &rm ) { _mask = rm; DEBUG_ONLY(_msize_valid=0;)}\n+  void AND( const RegMask &rm ) { _mask.AND(rm); DEBUG_ONLY(_msize_valid=0;)}\n+  void SUBTRACT( const RegMask &rm ) { _mask.SUBTRACT(rm); DEBUG_ONLY(_msize_valid=0;)}\n+  void Clear()   { _mask.Clear()  ; DEBUG_ONLY(_msize_valid=1); _mask_size = 0; }\n+  void Set_All() { _mask.Set_All(); DEBUG_ONLY(_msize_valid=1); _mask_size = RegMask::CHUNK_SIZE; }\n@@ -137,3 +137,3 @@\n-  void Insert( OptoReg::Name reg ) { _mask.Insert(reg);  debug_only(_msize_valid=0;) }\n-  void Remove( OptoReg::Name reg ) { _mask.Remove(reg);  debug_only(_msize_valid=0;) }\n-  void clear_to_sets()  { _mask.clear_to_sets(_num_regs); debug_only(_msize_valid=0;) }\n+  void Insert( OptoReg::Name reg ) { _mask.Insert(reg);  DEBUG_ONLY(_msize_valid=0;) }\n+  void Remove( OptoReg::Name reg ) { _mask.Remove(reg);  DEBUG_ONLY(_msize_valid=0;) }\n+  void clear_to_sets()  { _mask.clear_to_sets(_num_regs); DEBUG_ONLY(_msize_valid=0;) }\n","filename":"src\/hotspot\/share\/opto\/chaitin.hpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -477,1 +477,1 @@\n-  debug_only(verify_graph_edges(true \/*check for no_dead_code*\/, root_and_safepoints);)\n+  DEBUG_ONLY(verify_graph_edges(true \/*check for no_dead_code*\/, root_and_safepoints);)\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4570,1 +4570,1 @@\n-      debug_only(n->dump();)\n+      DEBUG_ONLY(n->dump();)\n","filename":"src\/hotspot\/share\/opto\/escape.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -75,2 +75,2 @@\n-  debug_only(_sp = -99);\n-  debug_only(set_bci(-99));\n+  DEBUG_ONLY(_sp = -99);\n+  DEBUG_ONLY(set_bci(-99));\n@@ -199,1 +199,1 @@\n-  debug_only(verify_exception_state(ex_map));\n+  DEBUG_ONLY(verify_exception_state(ex_map));\n@@ -299,1 +299,1 @@\n-      debug_only(verify_map());\n+      DEBUG_ONLY(verify_map());\n@@ -675,1 +675,1 @@\n-  debug_only(kit->verify_map());\n+  DEBUG_ONLY(kit->verify_map());\n@@ -783,1 +783,1 @@\n-  debug_only(verify_map());\n+  DEBUG_ONLY(verify_map());\n@@ -1540,1 +1540,1 @@\n-  debug_only( map()->set_memory((Node*)nullptr) );\n+  DEBUG_ONLY( map()->set_memory((Node*)nullptr) );\n@@ -1577,1 +1577,1 @@\n-  debug_only(adr_type = C->get_adr_type(adr_idx));\n+  DEBUG_ONLY(adr_type = C->get_adr_type(adr_idx));\n@@ -1605,1 +1605,1 @@\n-  debug_only(adr_type = C->get_adr_type(adr_idx));\n+  DEBUG_ONLY(adr_type = C->get_adr_type(adr_idx));\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -148,1 +148,1 @@\n-  void set_map(SafePointNode* m)      { _map = m; debug_only(verify_map()); }\n+  void set_map(SafePointNode* m)      { _map = m; DEBUG_ONLY(verify_map()); }\n@@ -229,1 +229,1 @@\n-      debug_only(verify_exception_state(ex_map));\n+      DEBUG_ONLY(verify_exception_state(ex_map));\n@@ -236,1 +236,1 @@\n-    debug_only(verify_exception_state(ex_map));\n+    DEBUG_ONLY(verify_exception_state(ex_map));\n","filename":"src\/hotspot\/share\/opto\/graphKit.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -357,1 +357,1 @@\n-  debug_only(adr_type = C->get_adr_type(adr_idx));\n+  DEBUG_ONLY(adr_type = C->get_adr_type(adr_idx));\n@@ -369,1 +369,1 @@\n-  debug_only(adr_type = C->get_adr_type(adr_idx));\n+  DEBUG_ONLY(adr_type = C->get_adr_type(adr_idx));\n","filename":"src\/hotspot\/share\/opto\/idealKit.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -124,1 +124,1 @@\n-  debug_only(check_watch(\"free block\", i));\n+  DEBUG_ONLY(check_watch(\"free block\", i));\n","filename":"src\/hotspot\/share\/opto\/indexSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -362,1 +362,1 @@\n-    debug_only( bol->dump(2); )\n+    DEBUG_ONLY( bol->dump(2); )\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -228,1 +228,1 @@\n-        debug_only(intptr_t offset;)\n+        DEBUG_ONLY(intptr_t offset;)\n@@ -1331,1 +1331,1 @@\n-    debug_only(slow_region = NodeSentinel);\n+    DEBUG_ONLY(slow_region = NodeSentinel);\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -131,1 +131,1 @@\n-  debug_only(_mem_node = nullptr;)   \/\/ Ideal memory node consumed by mach node\n+  DEBUG_ONLY(_mem_node = nullptr;)   \/\/ Ideal memory node consumed by mach node\n@@ -1187,1 +1187,1 @@\n-          debug_only(match_alias_type(C, n, m));\n+          DEBUG_ONLY(match_alias_type(C, n, m));\n@@ -1594,1 +1594,1 @@\n-  debug_only( _mem_node = save_mem_node; )\n+  DEBUG_ONLY( _mem_node = save_mem_node; )\n@@ -1968,1 +1968,1 @@\n-    debug_only(Node *save_mem_node = _mem_node;)\n+    DEBUG_ONLY(Node *save_mem_node = _mem_node;)\n@@ -1970,1 +1970,1 @@\n-    debug_only(_mem_node = save_mem_node;)\n+    DEBUG_ONLY(_mem_node = save_mem_node;)\n@@ -1982,1 +1982,1 @@\n-    debug_only( if( mem == (Node*)1 ) _mem_node = s->_leaf;)\n+    DEBUG_ONLY( if( mem == (Node*)1 ) _mem_node = s->_leaf;)\n@@ -2026,1 +2026,1 @@\n-        debug_only(Node *save_mem_node = _mem_node;)\n+        DEBUG_ONLY(Node *save_mem_node = _mem_node;)\n@@ -2028,1 +2028,1 @@\n-        debug_only(_mem_node = save_mem_node;)\n+        DEBUG_ONLY(_mem_node = save_mem_node;)\n@@ -2059,1 +2059,1 @@\n-    debug_only(_mem_node = s->_leaf;)\n+    DEBUG_ONLY(_mem_node = s->_leaf;)\n@@ -2088,1 +2088,1 @@\n-      debug_only(Node *save_mem_node = _mem_node;)\n+      DEBUG_ONLY(Node *save_mem_node = _mem_node;)\n@@ -2090,1 +2090,1 @@\n-      debug_only(_mem_node = save_mem_node;)\n+      DEBUG_ONLY(_mem_node = save_mem_node;)\n","filename":"src\/hotspot\/share\/opto\/matcher.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-    debug_only(_adr_type=at; adr_type();)\n+    DEBUG_ONLY(_adr_type=at; adr_type();)\n@@ -83,1 +83,1 @@\n-    debug_only(_adr_type=at; adr_type();)\n+    DEBUG_ONLY(_adr_type=at; adr_type();)\n@@ -92,1 +92,1 @@\n-    debug_only(_adr_type=at; adr_type();)\n+    DEBUG_ONLY(_adr_type=at; adr_type();)\n@@ -276,1 +276,1 @@\n-    debug_only(uint check_hash = (VerifyHashTableKeys && _hash_lock) ? hash() : NO_HASH);\n+    DEBUG_ONLY(uint check_hash = (VerifyHashTableKeys && _hash_lock) ? hash() : NO_HASH);\n@@ -1500,1 +1500,1 @@\n-    debug_only(_cnt2 = 999);\n+    DEBUG_ONLY(_cnt2 = 999);\n","filename":"src\/hotspot\/share\/opto\/memnode.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-    debug_only(check_con());\n+    DEBUG_ONLY(check_con());\n","filename":"src\/hotspot\/share\/opto\/multnode.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -325,1 +325,1 @@\n-  debug_only( verify_construction() );\n+  DEBUG_ONLY( verify_construction() );\n@@ -344,1 +344,1 @@\n-  debug_only( verify_construction() );\n+  DEBUG_ONLY( verify_construction() );\n@@ -357,1 +357,1 @@\n-  debug_only( verify_construction() );\n+  DEBUG_ONLY( verify_construction() );\n@@ -372,1 +372,1 @@\n-  debug_only( verify_construction() );\n+  DEBUG_ONLY( verify_construction() );\n@@ -389,1 +389,1 @@\n-  debug_only( verify_construction() );\n+  DEBUG_ONLY( verify_construction() );\n@@ -408,1 +408,1 @@\n-  debug_only( verify_construction() );\n+  DEBUG_ONLY( verify_construction() );\n@@ -430,1 +430,1 @@\n-  debug_only( verify_construction() );\n+  DEBUG_ONLY( verify_construction() );\n@@ -454,1 +454,1 @@\n-  debug_only( verify_construction() );\n+  DEBUG_ONLY( verify_construction() );\n@@ -492,1 +492,1 @@\n-  debug_only(n->_hash_lock = 0);\n+  DEBUG_ONLY(n->_hash_lock = 0);\n@@ -528,1 +528,1 @@\n-  debug_only( n->verify_construction() );\n+  DEBUG_ONLY( n->verify_construction() );\n@@ -532,1 +532,1 @@\n-  \/\/debug_only( n->set_debug_idx( debug_idx() ) );\n+  \/\/DEBUG_ONLY( n->set_debug_idx( debug_idx() ) );\n@@ -945,1 +945,1 @@\n-  \/\/ debug_only(destruct();)   \/\/ no reuse benefit expected\n+  \/\/ DEBUG_ONLY(destruct();)   \/\/ no reuse benefit expected\n","filename":"src\/hotspot\/share\/opto\/node.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -430,1 +430,1 @@\n-    debug_only(_last_del = _out[i]; ++_del_tick);\n+    DEBUG_ONLY(_last_del = _out[i]; ++_del_tick);\n@@ -434,1 +434,1 @@\n-    debug_only(_out[_outcnt] = (Node *)(uintptr_t)0xdeadbeef);\n+    DEBUG_ONLY(_out[_outcnt] = (Node *)(uintptr_t)0xdeadbeef);\n@@ -536,1 +536,1 @@\n-    debug_only(_out[_outcnt] = (Node *)(uintptr_t)0xdeadbeef);\n+    DEBUG_ONLY(_out[_outcnt] = (Node *)(uintptr_t)0xdeadbeef);\n@@ -539,1 +539,1 @@\n-    debug_only(_last_del = n; ++_del_tick);\n+    DEBUG_ONLY(_last_del = n; ++_del_tick);\n@@ -596,1 +596,1 @@\n-    debug_only(uint check_hash = (VerifyHashTableKeys && _hash_lock) ? hash() : NO_HASH);\n+    DEBUG_ONLY(uint check_hash = (VerifyHashTableKeys && _hash_lock) ? hash() : NO_HASH);\n@@ -1434,1 +1434,1 @@\n-    { _idx = 0;                         debug_only(sample(node)); }\n+    { _idx = 0;                         DEBUG_ONLY(sample(node)); }\n@@ -1439,1 +1439,1 @@\n-    { \/*initialize to garbage*\/         debug_only(_vdui = false); }\n+    { \/*initialize to garbage*\/         DEBUG_ONLY(_vdui = false); }\n@@ -1442,1 +1442,1 @@\n-    { _idx = that._idx;                 debug_only(_vdui = false; reset(that)); }\n+    { _idx = that._idx;                 DEBUG_ONLY(_vdui = false; reset(that)); }\n@@ -1454,1 +1454,1 @@\n-    { _idx = that._idx;                 debug_only(reset(that)); }\n+    { _idx = that._idx;                 DEBUG_ONLY(reset(that)); }\n@@ -1464,1 +1464,1 @@\n-  { I_VDUI_ONLY(i, i.verify(this));     return debug_only(i._last=) _out[i._idx]; }\n+  { I_VDUI_ONLY(i, i.verify(this));     return DEBUG_ONLY(i._last=) _out[i._idx]; }\n@@ -1499,1 +1499,1 @@\n-    { _outp = node->_out + offset;      debug_only(sample(node)); }\n+    { _outp = node->_out + offset;      DEBUG_ONLY(sample(node)); }\n@@ -1504,1 +1504,1 @@\n-    { \/*initialize to garbage*\/         debug_only(_vdui = false); }\n+    { \/*initialize to garbage*\/         DEBUG_ONLY(_vdui = false); }\n@@ -1507,1 +1507,1 @@\n-    { _outp = that._outp;               debug_only(_vdui = false; reset(that)); }\n+    { _outp = that._outp;               DEBUG_ONLY(_vdui = false; reset(that)); }\n@@ -1525,1 +1525,1 @@\n-    { _outp = that._outp;               debug_only(reset(that)); }\n+    { _outp = that._outp;               DEBUG_ONLY(reset(that)); }\n@@ -1536,1 +1536,1 @@\n-  return debug_only(i._last=) *i._outp;\n+  return DEBUG_ONLY(i._last=) *i._outp;\n@@ -1594,1 +1594,1 @@\n-  return debug_only(i._last=) *i._outp;\n+  return DEBUG_ONLY(i._last=) *i._outp;\n@@ -2038,1 +2038,1 @@\n-    debug_only(uint check_hash = (VerifyHashTableKeys && _hash_lock) ? hash() : NO_HASH);\n+    DEBUG_ONLY(uint check_hash = (VerifyHashTableKeys && _hash_lock) ? hash() : NO_HASH);\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2974,1 +2974,1 @@\n-  debug_only( def = (Node*)((intptr_t)0xdeadbeef); )\n+  DEBUG_ONLY( def = (Node*)((intptr_t)0xdeadbeef); )\n","filename":"src\/hotspot\/share\/opto\/output.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1838,1 +1838,1 @@\n-          debug_only(const Type* bt1 = phi->bottom_type());\n+          DEBUG_ONLY(const Type* bt1 = phi->bottom_type());\n@@ -1841,1 +1841,1 @@\n-          debug_only(const Type* bt2 = phi->bottom_type());\n+          DEBUG_ONLY(const Type* bt2 = phi->bottom_type());\n@@ -1939,1 +1939,1 @@\n-    debug_only(mms.set_memory());  \/\/ keep the iterator happy\n+    DEBUG_ONLY(mms.set_memory());  \/\/ keep the iterator happy\n","filename":"src\/hotspot\/share\/opto\/parse1.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -126,1 +126,1 @@\n-    debug_only(n->enter_hash_lock()); \/\/ Lock down the node while in the table.\n+    DEBUG_ONLY(n->enter_hash_lock()); \/\/ Lock down the node while in the table.\n@@ -155,1 +155,1 @@\n-      debug_only(n->enter_hash_lock()); \/\/ Lock down the node while in the table.\n+      DEBUG_ONLY(n->enter_hash_lock()); \/\/ Lock down the node while in the table.\n@@ -191,1 +191,1 @@\n-  debug_only(n->enter_hash_lock()); \/\/ Lock down the node while in the table.\n+  DEBUG_ONLY(n->enter_hash_lock()); \/\/ Lock down the node while in the table.\n@@ -206,1 +206,1 @@\n-  debug_only( uint counter = 0; );\n+  DEBUG_ONLY( uint counter = 0; );\n@@ -208,1 +208,1 @@\n-    debug_only( counter++ );\n+    DEBUG_ONLY( counter++ );\n@@ -218,1 +218,1 @@\n-      debug_only(((Node*)n)->exit_hash_lock()); \/\/ Unlock the node upon removal from table.\n+      DEBUG_ONLY(((Node*)n)->exit_hash_lock()); \/\/ Unlock the node upon removal from table.\n@@ -260,1 +260,1 @@\n-    debug_only(m->exit_hash_lock()); \/\/ Unlock the node upon removal from old table.\n+    DEBUG_ONLY(m->exit_hash_lock()); \/\/ Unlock the node upon removal from old table.\n@@ -292,1 +292,1 @@\n-      debug_only(n->exit_hash_lock()); \/\/ Unlock the node when removed\n+      DEBUG_ONLY(n->exit_hash_lock()); \/\/ Unlock the node when removed\n","filename":"src\/hotspot\/share\/opto\/phaseX.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    debug_only( if( n->_idx >= _node_regs_max_index ) n->dump(); );\n+    DEBUG_ONLY( if( n->_idx >= _node_regs_max_index ) n->dump(); );\n@@ -68,1 +68,1 @@\n-    debug_only( if( n->_idx >= _node_regs_max_index ) n->dump(); );\n+    DEBUG_ONLY( if( n->_idx >= _node_regs_max_index ) n->dump(); );\n","filename":"src\/hotspot\/share\/opto\/regalloc.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1947,1 +1947,1 @@\n-  debug_only(NoHandleMark __hm;)\n+  DEBUG_ONLY(NoHandleMark __hm;)\n","filename":"src\/hotspot\/share\/opto\/runtime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -759,1 +759,1 @@\n-  debug_only(base());           \/\/ Check the assertion in Type::base().\n+  DEBUG_ONLY(base());           \/\/ Check the assertion in Type::base().\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -218,1 +218,1 @@\n-    debug_only(NoSafepointVerifier nosafepoint;)\n+    DEBUG_ONLY(NoSafepointVerifier nosafepoint;)\n@@ -238,1 +238,1 @@\n-    debug_only(NoSafepointVerifier nosafepoint;)\n+    DEBUG_ONLY(NoSafepointVerifier nosafepoint;)\n@@ -413,1 +413,1 @@\n-    debug_only(id->set_is_static_field_id();)\n+    DEBUG_ONLY(id->set_is_static_field_id();)\n@@ -475,1 +475,1 @@\n-  debug_only(Klass* super2 = ( k->is_array_klass()\n+  DEBUG_ONLY(Klass* super2 = ( k->is_array_klass()\n@@ -909,1 +909,1 @@\n-      debug_only(NoSafepointVerifier nosafepoint;)\n+      DEBUG_ONLY(NoSafepointVerifier nosafepoint;)\n@@ -1998,1 +1998,1 @@\n-  debug_only(id->set_is_static_field_id();)\n+  DEBUG_ONLY(id->set_is_static_field_id();)\n@@ -2000,1 +2000,1 @@\n-  debug_only(id->verify(fd.field_holder()));\n+  DEBUG_ONLY(id->verify(fd.field_holder()));\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2323,1 +2323,1 @@\n-  debug_only(intptr_t *lastPtr = (intptr_t *)((char *)&checked_jni_NativeInterface + \\\n+  DEBUG_ONLY(intptr_t *lastPtr = (intptr_t *)((char *)&checked_jni_NativeInterface + \\\n","filename":"src\/hotspot\/share\/prims\/jniCheck.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -447,1 +447,1 @@\n-    <xsl:text>debug_only(VMNativeEntryWrapper __vew;)<\/xsl:text>\n+    <xsl:text>DEBUG_ONLY(VMNativeEntryWrapper __vew;)<\/xsl:text>\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnter.xsl","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -202,1 +202,1 @@\n-    debug_only(VMNativeEntryWrapper __vew;)\n+    DEBUG_ONLY(VMNativeEntryWrapper __vew;)\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -387,1 +387,1 @@\n-    debug_only(VMNativeEntryWrapper __vew;)\n+    DEBUG_ONLY(VMNativeEntryWrapper __vew;)\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-    debug_only(NoSafepointVerifier nosafepoint;)\n+    DEBUG_ONLY(NoSafepointVerifier nosafepoint;)\n@@ -157,1 +157,1 @@\n-    debug_only(NoSafepointVerifier nosafepoint;)\n+    DEBUG_ONLY(NoSafepointVerifier nosafepoint;)\n@@ -762,1 +762,1 @@\n-    debug_only(NoSafepointVerifier nosafepoint;)\n+    DEBUG_ONLY(NoSafepointVerifier nosafepoint;)\n","filename":"src\/hotspot\/share\/prims\/jvmtiThreadState.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -114,1 +114,1 @@\n-    debug_only(warning(\"unexpected units argument, units = %d\", units));\n+    DEBUG_ONLY(warning(\"unexpected units argument, units = %d\", units));\n@@ -153,1 +153,1 @@\n-    debug_only(warning(\"unexpected variability value: %d\", variability));\n+    DEBUG_ONLY(warning(\"unexpected variability value: %d\", variability));\n@@ -182,1 +182,1 @@\n-    debug_only(warning(\"unexpected variability value: %d\", variability));\n+    DEBUG_ONLY(warning(\"unexpected variability value: %d\", variability));\n@@ -189,1 +189,1 @@\n-    debug_only(warning(\"unexpected units value: %d\", variability));\n+    DEBUG_ONLY(warning(\"unexpected units value: %d\", variability));\n","filename":"src\/hotspot\/share\/prims\/perf.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-  debug_only(thread->inc_java_call_counter());\n+  DEBUG_ONLY(thread->inc_java_call_counter());\n@@ -121,1 +121,1 @@\n-  debug_only(thread->dec_java_call_counter());\n+  DEBUG_ONLY(thread->dec_java_call_counter());\n","filename":"src\/hotspot\/share\/prims\/upcallLinker.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -136,1 +136,1 @@\n-  debug_only(_area->_handle_mark_nesting++);\n+  DEBUG_ONLY(_area->_handle_mark_nesting++);\n","filename":"src\/hotspot\/share\/runtime\/handles.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -191,2 +191,2 @@\n-    debug_only(_handle_mark_nesting    = 0);\n-    debug_only(_no_handle_mark_nesting = 0);\n+    DEBUG_ONLY(_handle_mark_nesting    = 0);\n+    DEBUG_ONLY(_no_handle_mark_nesting = 0);\n@@ -215,1 +215,1 @@\n-  debug_only(bool no_handle_mark_active() { return _no_handle_mark_nesting > 0; })\n+  DEBUG_ONLY(bool no_handle_mark_active() { return _no_handle_mark_nesting > 0; })\n","filename":"src\/hotspot\/share\/runtime\/handles.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-  debug_only(_area->_handle_mark_nesting++);\n+  DEBUG_ONLY(_area->_handle_mark_nesting++);\n@@ -98,1 +98,1 @@\n-  debug_only(_area->_handle_mark_nesting--);\n+  DEBUG_ONLY(_area->_handle_mark_nesting--);\n","filename":"src\/hotspot\/share\/runtime\/handles.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -262,1 +262,1 @@\n-  debug_only(NoHandleMark __hm;)                                     \\\n+  DEBUG_ONLY(NoHandleMark __hm;)                                     \\\n@@ -267,1 +267,1 @@\n-  debug_only(ResetNoHandleMark __rnhm;)                              \\\n+  DEBUG_ONLY(ResetNoHandleMark __rnhm;)                              \\\n@@ -289,1 +289,1 @@\n-    debug_only(VMEntryWrapper __vew;)\n+    DEBUG_ONLY(VMEntryWrapper __vew;)\n@@ -308,1 +308,1 @@\n-  debug_only(NoSafepointVerifier __nsv;)\n+  DEBUG_ONLY(NoSafepointVerifier __nsv;)\n@@ -317,1 +317,1 @@\n-    debug_only(VMEntryWrapper __vew;)\n+    DEBUG_ONLY(VMEntryWrapper __vew;)\n@@ -332,1 +332,1 @@\n-    debug_only(VMEntryWrapper __vew;)\n+    DEBUG_ONLY(VMEntryWrapper __vew;)\n@@ -339,1 +339,1 @@\n-    debug_only(VMEntryWrapper __vew;)\n+    DEBUG_ONLY(VMEntryWrapper __vew;)\n@@ -363,1 +363,1 @@\n-    debug_only(VMNativeEntryWrapper __vew;)                          \\\n+    DEBUG_ONLY(VMNativeEntryWrapper __vew;)                          \\\n@@ -388,1 +388,1 @@\n-    debug_only(VMNativeEntryWrapper __vew;)                          \\\n+    DEBUG_ONLY(VMNativeEntryWrapper __vew;)                          \\\n@@ -398,1 +398,1 @@\n-    debug_only(VMNativeEntryWrapper __vew;)                          \\\n+    DEBUG_ONLY(VMNativeEntryWrapper __vew;)                          \\\n","filename":"src\/hotspot\/share\/runtime\/interfaceSupport.inline.hpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-  debug_only(_thread->inc_java_call_counter());\n+  DEBUG_ONLY(_thread->inc_java_call_counter());\n@@ -112,1 +112,1 @@\n-  debug_only(_thread->dec_java_call_counter());\n+  DEBUG_ONLY(_thread->dec_java_call_counter());\n","filename":"src\/hotspot\/share\/runtime\/javaCalls.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -556,1 +556,1 @@\n-  debug_only(check_for_dangling_thread_pointer(this);)\n+  DEBUG_ONLY(check_for_dangling_thread_pointer(this);)\n@@ -572,1 +572,1 @@\n-  debug_only(check_for_dangling_thread_pointer(this);)\n+  DEBUG_ONLY(check_for_dangling_thread_pointer(this);)\n","filename":"src\/hotspot\/share\/runtime\/javaThread.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -160,1 +160,1 @@\n-      debug_only(id->set_is_static_field_id());\n+      DEBUG_ONLY(id->set_is_static_field_id());\n","filename":"src\/hotspot\/share\/runtime\/jfieldIDWorkaround.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -345,3 +345,3 @@\n-  debug_only(block->_last = nullptr);\n-  debug_only(block->_free_list = nullptr);\n-  debug_only(block->_allocate_before_rebuild = -1);\n+  DEBUG_ONLY(block->_last = nullptr);\n+  DEBUG_ONLY(block->_free_list = nullptr);\n+  DEBUG_ONLY(block->_allocate_before_rebuild = -1);\n","filename":"src\/hotspot\/share\/runtime\/jniHandles.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -246,1 +246,1 @@\n-  debug_only(Thread::check_for_dangling_thread_pointer(thread);)\n+  DEBUG_ONLY(Thread::check_for_dangling_thread_pointer(thread);)\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-  debug_only(_owned_locks = nullptr;)\n+  DEBUG_ONLY(_owned_locks = nullptr;)\n@@ -382,1 +382,1 @@\n-  debug_only(check_for_dangling_thread_pointer(thread);)\n+  DEBUG_ONLY(check_for_dangling_thread_pointer(thread);)\n@@ -491,1 +491,1 @@\n-  debug_only(if (WizardMode) print_owned_locks_on(st);)\n+  DEBUG_ONLY(if (WizardMode) print_owned_locks_on(st);)\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -458,1 +458,1 @@\n-  debug_only(_sub_record_left -= len);\n+  DEBUG_ONLY(_sub_record_left -= len);\n@@ -470,1 +470,1 @@\n-  debug_only(_sub_record_left -= len);\n+  DEBUG_ONLY(_sub_record_left -= len);\n@@ -594,2 +594,2 @@\n-  debug_only(_sub_record_left = len);\n-  debug_only(_sub_record_ended = false);\n+  DEBUG_ONLY(_sub_record_left = len);\n+  DEBUG_ONLY(_sub_record_ended = false);\n@@ -604,1 +604,1 @@\n-  debug_only(_sub_record_ended = true);\n+  DEBUG_ONLY(_sub_record_ended = true);\n","filename":"src\/hotspot\/share\/services\/heapDumper.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -231,1 +231,1 @@\n-  debug_only(Thread::check_for_dangling_thread_pointer(thread);)\n+  DEBUG_ONLY(Thread::check_for_dangling_thread_pointer(thread);)\n","filename":"src\/hotspot\/share\/services\/threadService.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -625,1 +625,1 @@\n-  debug_only(GrowableArrayNestingCheck _nesting_check;)\n+  DEBUG_ONLY(GrowableArrayNestingCheck _nesting_check;)\n@@ -648,1 +648,1 @@\n-      debug_only(COMMA _nesting_check(true)) {\n+      DEBUG_ONLY(COMMA _nesting_check(true)) {\n@@ -654,1 +654,1 @@\n-      debug_only(COMMA _nesting_check(arena)) {\n+      DEBUG_ONLY(COMMA _nesting_check(arena)) {\n@@ -660,1 +660,1 @@\n-      debug_only(COMMA _nesting_check(false)) {\n+      DEBUG_ONLY(COMMA _nesting_check(false)) {\n@@ -728,1 +728,1 @@\n-  void init_checks() const { debug_only(_metadata.init_checks(this);) }\n+  void init_checks() const { DEBUG_ONLY(_metadata.init_checks(this);) }\n@@ -737,1 +737,1 @@\n-      debug_only(_metadata.on_resource_area_alloc_check());\n+      DEBUG_ONLY(_metadata.on_resource_area_alloc_check());\n@@ -746,1 +746,1 @@\n-    debug_only(_metadata.on_arena_alloc_check());\n+    DEBUG_ONLY(_metadata.on_arena_alloc_check());\n","filename":"src\/hotspot\/share\/utilities\/growableArray.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -380,2 +380,0 @@\n-\/\/ Historical.\n-#define debug_only(code) code\n@@ -386,1 +384,0 @@\n-#define debug_only(code)\n","filename":"src\/hotspot\/share\/utilities\/macros.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"}]}