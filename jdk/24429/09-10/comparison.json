{"files":[{"patch":"@@ -66,3 +66,0 @@\n-    \/\/ the PBMAC1 algorithm name\n-    private String pbmac1AlgorithmName = null;\n-\n@@ -85,2 +82,2 @@\n-        throws InvalidParameterSpecException {\n-        if (!(paramSpec instanceof PBEParameterSpec)) {\n+            throws InvalidParameterSpecException {\n+        if (!(paramSpec instanceof PBEParameterSpec pbeParamSpec)) {\n@@ -90,2 +87,2 @@\n-        salt = ((PBEParameterSpec)paramSpec).getSalt().clone();\n-        iCount = ((PBEParameterSpec)paramSpec).getIterationCount();\n+        salt = pbeParamSpec.getSalt().clone();\n+        iCount = pbeParamSpec.getIterationCount();\n@@ -134,3 +131,0 @@\n-\n-        pbmac1AlgorithmName = \"PBMAC1With\" + this.prfAlgo + \"And\"\n-                + this.hmacAlgo;\n@@ -176,2 +170,1 @@\n-    protected byte[] getEncoded(String encodingMethod)\n-        throws IOException {\n+    protected byte[] getEncoded(String encodingMethod) throws IOException {\n@@ -181,7 +174,0 @@\n-    \/*\n-     * Returns a formatted string describing the parameters.\n-     *\/\n-    public String engineToString() {\n-        return pbmac1AlgorithmName;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/PBMAC1Parameters.java","additions":5,"deletions":19,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.security.InvalidAlgorithmParameterException;\n@@ -32,0 +33,1 @@\n+import java.security.InvalidKeyException;\n@@ -33,0 +35,1 @@\n+import java.security.spec.InvalidKeySpecException;\n@@ -61,1 +64,1 @@\n-    private String Hmac;\n+    private String hmac;\n@@ -101,2 +104,2 @@\n-            this.Hmac = algParams.getHmac();\n-            this.macAlgorithm = \"PBEWith\" + this.kdfHmac + \"And\" + this.Hmac;\n+            this.hmac = algParams.getHmac();\n+            this.macAlgorithm = \"PBEWith\" + this.kdfHmac + \"And\" + this.hmac;\n@@ -110,0 +113,1 @@\n+            \/\/ Remove \"-\" from digest algorithm names\n@@ -116,1 +120,2 @@\n-            String kdfHmac, String Hmac, int keyLength) throws NoSuchAlgorithmException {\n+            String kdfHmac, String hmac, int keyLength)\n+            throws NoSuchAlgorithmException {\n@@ -148,1 +153,1 @@\n-            this.Hmac = Hmac;\n+            this.hmac = hmac;\n@@ -154,1 +159,1 @@\n-            this.Hmac = null;\n+            this.hmac = null;\n@@ -174,5 +179,8 @@\n-    void processMacData(AlgorithmParameterSpec params,\n-            MacData macData, char[] password, byte[] data, String macAlgorithm)\n-            throws  Exception {\n-        final String kdfHmac;\n-        final String Hmac;\n+    static Mac getMac(String macAlgorithm, char[] password,\n+            PBEParameterSpec params, byte[] data,\n+            String kdfHmac, String hmac)\n+            throws NoSuchAlgorithmException, InvalidKeySpecException,\n+            InvalidKeyException, InvalidAlgorithmParameterException {\n+        SecretKeyFactory skf;\n+        SecretKey pbeKey;\n+        Mac m;\n@@ -181,2 +189,5 @@\n-            kdfHmac = macData.getKdfHmac();\n-            Hmac = macData.getHmac();\n+            m = Mac.getInstance(hmac);\n+            int keyLength = m.getMacLength()*8;\n+            skf = SecretKeyFactory.getInstance(\"PBKDF2With\" +kdfHmac);\n+            pbeKey = skf.generateSecret(new PBEKeySpec(password,\n+                    params.getSalt(), params.getIterationCount(), keyLength));\n@@ -184,2 +195,5 @@\n-            kdfHmac = macAlgorithm;\n-            Hmac = macAlgorithm;\n+            hmac = macAlgorithm;\n+            m = Mac.getInstance(hmac);\n+            PBEKeySpec keySpec = new PBEKeySpec(password);\n+            skf = SecretKeyFactory.getInstance(\"PBE\");\n+            pbeKey = skf.generateSecret(keySpec);\n@@ -188,9 +202,0 @@\n-        var skf = SecretKeyFactory.getInstance(\n-                kdfHmac.equals(\"HmacSHA512\") ?\n-                \"PBKDF2WithHmacSHA512\" : \"PBKDF2WithHmacSHA256\");\n-\n-        SecretKey pbeKey = skf.generateSecret(new PBEKeySpec(password,\n-                ((PBEParameterSpec)params).getSalt(),\n-                ((PBEParameterSpec)params).getIterationCount(),\n-                Hmac.equals(\"HmacSHA512\") ? 64*8 : 32*8));\n-        Mac m = Mac.getInstance(Hmac);\n@@ -198,1 +203,5 @@\n-            m.init(pbeKey);\n+            if (macAlgorithm.startsWith(\"PBEWith\")) {\n+                 m.init(pbeKey);\n+            } else {\n+                 m.init(pbeKey, params);\n+            }\n@@ -203,1 +212,13 @@\n-        byte[] macResult = m.doFinal();\n+        return m;\n+    }\n+\n+    void processMacData(PBEParameterSpec params, char[] password,\n+            byte[] data, String macAlgorithm) throws InvalidKeySpecException,\n+            NoSuchAlgorithmException, UnrecoverableKeyException,\n+            InvalidKeyException, InvalidAlgorithmParameterException {\n+        Mac m;\n+        byte[] macResult;\n+\n+        m = getMac(macAlgorithm, password, params, data, this.kdfHmac,\n+                this.hmac);\n+        macResult = m.doFinal();\n@@ -208,1 +229,1 @@\n-                    + macData.getIterations() + \")\");\n+                    + this.iterations + \")\");\n@@ -211,1 +232,1 @@\n-        if (!MessageDigest.isEqual(macData.getDigest(), macResult)) {\n+        if (!MessageDigest.isEqual(this.digest, macResult)) {\n@@ -224,3 +245,2 @@\n-            boolean newKeystore, String macAlgorithm, int macIterationCount,\n-            byte[] salt)\n-        throws IOException, NoSuchAlgorithmException {\n+            String macAlgorithm, int macIterationCount, byte[] salt)\n+            throws IOException, NoSuchAlgorithmException {\n@@ -232,1 +252,3 @@\n-        String Hmac = null;\n+        String hmac = null;\n+        Mac m;\n+        int keyLength;\n@@ -234,14 +256,5 @@\n-        if (newKeystore) {\n-            if (macAlgorithm.startsWith(\"PBEWith\")) {\n-                kdfHmac = MacData.parseKdfHmac(macAlgorithm);\n-                Hmac = MacData.parseHmac(macAlgorithm);\n-                if (Hmac == null) {\n-                    Hmac = kdfHmac;\n-                }\n-            }\n-        } else {\n-            \/\/ existing keystore\n-            String tmp = MacData.parseKdfHmac(macAlgorithm);\n-            if (tmp != null) {\n-                kdfHmac = tmp;\n-                Hmac = MacData.parseHmac(macAlgorithm);\n+        if (macAlgorithm.startsWith(\"PBEWith\")) {\n+            kdfHmac = MacData.parseKdfHmac(macAlgorithm);\n+            hmac = MacData.parseHmac(macAlgorithm);\n+            if (hmac == null) {\n+                hmac = kdfHmac;\n@@ -249,3 +262,1 @@\n-        }\n-        \/\/ Fall back to old way of computing MAC\n-        if (kdfHmac == null) {\n+        } else if (macAlgorithm.equals(\"HmacPBESHA256\")) {\n@@ -254,1 +265,3 @@\n-            Hmac = macAlgorithm;\n+            hmac = macAlgorithm;\n+        } else {\n+            throw new ParsingException(\"unexpected algorithm\");\n@@ -259,2 +272,0 @@\n-        var skf = SecretKeyFactory.getInstance(kdfHmac.equals(\"HmacSHA512\") ?\n-                \"PBKDF2WithHmacSHA512\" : \"PBKDF2WithHmacSHA256\");\n@@ -262,12 +273,1 @@\n-            int keyLength = Hmac.equals(\"HmacSHA512\") ? 64*8 : 32*8;\n-\n-            SecretKey pbeKey = skf.generateSecret(new PBEKeySpec(passwd,\n-                    params.getSalt(), macIterationCount, keyLength));\n-\n-            Mac m = Mac.getInstance(Hmac);\n-            try {\n-                m.init(pbeKey);\n-            } finally {\n-                destroyPBEKey(pbeKey);\n-            }\n-            m.update(data);\n+            m = getMac(macAlgorithm, passwd, params, data, kdfHmac, hmac);\n@@ -275,0 +275,1 @@\n+            keyLength = m.getMacLength()*8;\n@@ -278,1 +279,1 @@\n-                    kdfHmac, Hmac, keyLength);\n+                    kdfHmac, hmac, keyLength);\n@@ -282,1 +283,2 @@\n-        } catch (Exception e) {\n+        } catch (InvalidKeySpecException | InvalidKeyException |\n+                    InvalidAlgorithmParameterException e) {\n@@ -288,4 +290,0 @@\n-    String getDigestAlgName() {\n-        return this.digestAlgorithmName;\n-    }\n-\n@@ -304,12 +302,0 @@\n-    byte[] getDigest() {\n-        return this.digest;\n-    }\n-\n-    String getKdfHmac() {\n-        return this.kdfHmac;\n-    }\n-\n-    String getHmac() {\n-        return this.Hmac;\n-    }\n-\n@@ -335,1 +321,1 @@\n-            DerOutputStream Hmac = new DerOutputStream();\n+            DerOutputStream hmac = new DerOutputStream();\n@@ -344,2 +330,2 @@\n-            Hmac.putOID(ObjectIdentifier.of(KnownOIDs.findMatch(this.Hmac)));\n-            Hmac.putNull();\n+            hmac.putOID(ObjectIdentifier.of(KnownOIDs.findMatch(this.hmac)));\n+            hmac.putNull();\n@@ -362,1 +348,1 @@\n-            tmp4.write(DerValue.tag_Sequence, Hmac);\n+            tmp4.write(DerValue.tag_Sequence, hmac);\n@@ -420,1 +406,1 @@\n-        int index1 = text.indexOf(\"And\") + 3;;\n+        int index1 = text.indexOf(\"And\") + 3;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs12\/MacData.java","additions":73,"deletions":87,"binary":false,"changes":160,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n-import javax.crypto.Mac;\n@@ -177,1 +176,0 @@\n-    private boolean newKeystore;\n@@ -1248,1 +1246,0 @@\n-            newKeystore = true;\n@@ -1256,1 +1253,1 @@\n-                   newKeystore, macAlgorithm, macIterationCount, getSalt());\n+                    macAlgorithm, macIterationCount, getSalt());\n@@ -2085,1 +2082,0 @@\n-                    macAlgorithm = macData.getMacAlgorithm();\n@@ -2089,2 +2085,2 @@\n-                        macData.processMacData(params, macData, pass,\n-                                authSafeData, macAlgorithm);\n+                        macData.processMacData(params, pass, authSafeData,\n+                                macData.getMacAlgorithm());\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs12\/PKCS12KeyStore.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -151,1 +151,1 @@\n-        return this.salt.clone();\n+        return this.salt;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/PBKDF2Parameters.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,0 +37,9 @@\n+\/*\n+ * Tests A.1 - A.6 are from RFC 9879.\n+ * \n+ * A.7 was generated by openssl in 2 steps:\n+ * openssl req -x509 -newkey rsa:4096 -keyout myKey.pem -out cert.pem -days 365 -nodes\n+ * openssl pkcs12 -export -out keyStore.p12 -inkey myKey.pem -in cert.pem -pbmac1_pbkdf2 -macalg sha384 -passout pass:changeit\n+ *\n+ * A.8 is same as A7 except sha384 is changed to sha224.\n+*\/\n@@ -398,0 +407,189 @@\n+    \/\/ A.7.  SHA384 PRF and HMAC\n+    static final String A7 =\n+        \"MIIRHAIBAzCCEIUGCSqGSIb3DQEHAaCCEHYEghByMIIQbjCCBloGCSqGSIb3DQEH\" +\n+        \"BqCCBkswggZHAgEAMIIGQAYJKoZIhvcNAQcBMF8GCSqGSIb3DQEFDTBSMDEGCSqG\" +\n+        \"SIb3DQEFDDAkBBCDik8IB\/dPZETuhIat3X84AgIIADAMBggqhkiG9w0CCQUAMB0G\" +\n+        \"CWCGSAFlAwQBKgQQ6ZeG2lhwua6h4dBr8iI08oCCBdCduUvjdkLYpt5NFJ5zRV\/S\" +\n+        \"bYB8AMxJWlKUHh0kzmKR9gbivZMYshwk5tQZV3aRD99a3RoNqH4yTJTmN05AzFd8\" +\n+        \"yMYfmnqv9j2MPjftqaf8E4d61r53q7l\/8BK1Sn6SC32uqKmQhVk9TEq\/oVfhCxWL\" +\n+        \"2FwCB2th8vmZGyapjiT72Hwv291rDBulMWkiSO9bnckm1qYSXtDzthXXuZN4ruTT\" +\n+        \"lweP7GSOxdrxmuwAH8F+qkOwC6PW7GQDYQ1R9JW00HUKbE926D2RzTBgmcuq2JUn\" +\n+        \"YyaKY8ooAeuo0Xk2YVOv+kPfP0PKkd05FN4HCeA5Ut1xnWLBNIJnrIib8SksLE1M\" +\n+        \"uHZqdT7iB4oF1bEUxz6IOZyUdBnDcX8+\/UO4aNc0QgDYqBI83Hgv9g8WPAz5V6s5\" +\n+        \"cHDgG\/LwzRI6iO2PujOmUd7pSIyTr109jTgUj9\/cT86ly9xJwn7uIIZtb9jE1SNt\" +\n+        \"VwFviiI+ZfQkEmDtmqTxWMR2KmoLsPQ4WvzQ4bTdVe+bJcZU4xuApXkY9EU\/8qR2\" +\n+        \"b5+p8ZxlmAQkmCPoo3qt+6rhH5J\/tDqD1wC4uioIl4soidWJuoWOgbPDvX3NFVC+\" +\n+        \"PP1PcNimeBLoXGDk0zJOG\/THnc+miOVHtlYg8EaCPU\/980cM0Zrm\/Wf+af4GKAmH\" +\n+        \"5DBRZ\/n79ChL23KD8z2paNxD0kUbl0JbjQjCczG10g6Db4HSX3bH+vn6craVr4vD\" +\n+        \"blBh+7AL5sDjgQwpQV5+LyWJRjyccFsSXw4D+5Z1oHPhEltBtfKY3RWAAOy64F9B\" +\n+        \"cqmydBc8Ywgcxi523yTtBAsnHGcrqwqOGpFVQU2Xo19B02GAr2f1pyWYKhiEdh4X\" +\n+        \"ThtECsvwAdBmD8Vk\/CnNFnq93xTYzXErdKHoAnOJk2pbm6CrT\/zjFhqQT6abUHuO\" +\n+        \"gEiOcgFFtUcXowBt4y4Ts6NaG7oGaklo2DCprwSGK4soBFUc\/iSh6ykXanszEq0x\" +\n+        \"V\/HEGiPoTGwjnoEMJMarc7DYoWaEA7+FsqTwnrqzE51Kp1pDQ0nVqNpi3GCS0gV8\" +\n+        \"KSgJCZjzcMxX5BdxFNDjbUtcj\/NruniHNJkFj08W3cMyMjfne1gAhByXxYYomfbp\" +\n+        \"61Nd8yFGnTqWUn06Za+OIm6YdqQUd8SSiZci8Zv+7j2D2VDZIWVOr7oLhnkEnbGU\" +\n+        \"4o44vUsxC1kcBRCHzJlIBl0jS47p9qeOY1UrMQW5e866VQAyX6XV3m3oPCXhP2lR\" +\n+        \"vEh+jfS2Q8IEJY0GRh3blu34aFSXS3H+F8v+9d9pvW7naAcGZD8Xx1oqHJMPzg3F\" +\n+        \"pb5uDcaq6fz+d66vkiQDNEFTqLQ88kgx50f4UiWzI5y762cqIepzjJn1Q1AEHw1C\" +\n+        \"\/Plrc3H0p58tVvr9FA+orMYGis+E8LhG17SyE4L5R\/dXNWe+GdbGi4n1\/3wRdzyS\" +\n+        \"JWuh9ckEPXfk4Qn0N55kcuiIzpJ5EWXqO1aeLt2L0Sw+xmwjX4g1YrLioCNzQEWs\" +\n+        \"olkoG8wQbodTAoGBcgd9rts2lm\/ct0BxkGLRhTP38TYeSnVv6ouhsl+lZgWM2Vf6\" +\n+        \"i3zmJbJ9H1ILdFNC170rwReJIslcC5kUANUWnxdTuc6Zq6nq+N8Vh7RiR+yNDeY8\" +\n+        \"\/Vl4Iff4zqm4x5NOsY\/UDc0INfHFrpOS4vkYihK6zhBM55QaL31OOrrm3dRPiQGW\" +\n+        \"vpKWTwtNgHtUlHbqKITrMJcXc3xM9FcgSZCQdXoRAgzm9qt8ZYSsKmJOA6DKz6Qf\" +\n+        \"0Hh5k5wgCRGFKaf4Q+oaXb3LVuOd\/QSGIGv1ARAfQhQAz7iEk\/BRAuf3yvDG0CQ8\" +\n+        \"cNJ8XXNtqPTaxelcYx1omnFb2jpis48064kAdN6akOHZ33w0WYWWfP3o+kjuOVUw\" +\n+        \"v3g+X0eBh8JXsCdCzT+64UW8E8Yq5lHz4pwwIxt0ieKHmtdNjMotNqZEa56\/k6rK\" +\n+        \"zSs1jCWFSmerWnLcVbAJ6dVNcaL7fbRCp\/1o13fAZE8wggoMBgkqhkiG9w0BBwGg\" +\n+        \"ggn9BIIJ+TCCCfUwggnxBgsqhkiG9w0BDAoBAqCCCbkwggm1MF8GCSqGSIb3DQEF\" +\n+        \"DTBSMDEGCSqGSIb3DQEFDDAkBBAbYC\/ASTvUQabUugtUNzD2AgIIADAMBggqhkiG\" +\n+        \"9w0CCQUAMB0GCWCGSAFlAwQBKgQQBgWwEH00jwkG4jDpw0aABwSCCVD30cGGomiq\" +\n+        \"y62kUioZv7isOO38lW17YcH+UekLv41KefKDtf2g788X10l3egnO6CGKF\/CvT8Os\" +\n+        \"D09Am34u+lX93EkI6uHSj+zCIXGiKd6QzNhwWNuifBsQhm\/RMdFXni809ek\/7AEG\" +\n+        \"9S5\/5Gk42\/Cr16\/xzZXTy3cY932ffl0qPZUGB4ZnZOX9v+xausfYTWuSXYJ\/+AGp\" +\n+        \"bvjGph07I0brId7RtAg93Y4iHZHT9Kf\/BOJIl+sGvNamihuX\/f7yu6kpcLU7VM8+\" +\n+        \"LPqmIP9vNbjYjSe3d9RrRhiqwrr6Fi7bclOWro6SrGyyDseNCs8TcA2YNiyBTkkb\" +\n+        \"7PQCCTS9oCf2bfRoBJZifYEmnc8zX71z7J3e3B883losL6QaZb4MhuHpmW5BClhB\" +\n+        \"fpv2cNt1j4Md7491F7D7x3buqkW9OhU5MCF4w2FhM7UNMqyJeOqUPRV+PYwS6PWl\" +\n+        \"7lv0Y077RJnG5IJd1NJHwiJKQPq\/1dNh5DQFBr+vULKKghFO3Wd8l1bunOkjPlbi\" +\n+        \"hS4ZycuAKmIE9q6cLY0uoSAvBn4161opqZsTaubc\/ksNVJPww0eyIquPIH+V2bRe\" +\n+        \"0LxXDzRa9bE2rJCXc1nme0wr4EAe8eDKfHlNsAGJ4q+lgLD17c8CjEBCDqLWUIFC\" +\n+        \"4whnOVhouj54v75Xzb1kAK\/HFaVbcw\/sWx+1hxwZ9pOfp+FoQmWa2oV+zPB95\/EB\" +\n+        \"msz7eZCpLUmI9KseD8tF8coCBj42\/H8aee\/FK0eZEdL9w30fQivL6oefwxj9arvI\" +\n+        \"\/wPkSG4g7F69PjJNEAOmO4eJjR2Fs3H6Xm181YW6hd6elZV8OI1jt994OHMEJrvY\" +\n+        \"tJeqYKoFPbBidzIw\/Pcx2\/wjLa2HvNxaFeFHhPGkR\/st7PWO+UVgyhX2PWGCtzH8\" +\n+        \"xYgxEdhVyN7yceCv4d1\/S6K+K1x+UmQ679QBkvGHpI5HSUSlLAptw5GdQOhfH60f\" +\n+        \"qJoTELxDsW8qynK7k5PLcswiGR34b7KsKaqFQsM+kVf9iMXhBam\/hqzDFUEfnLHj\" +\n+        \"4\/SFCa\/iXPRpa\/0VyUJgzmo5A9IHM2AHyUhW\/jJgJhlkRtcJrnyv4kL3ILAx4Jfa\" +\n+        \"wOLFLHxNYbyikvnCgsAcXyxteh0aWGP1eqiYXfZ8SVpwNfnn9Jxs1IkFtSzqiwpZ\" +\n+        \"gHuSVngcKHHDYFVtdpuMuvqkBGzQs\/kHCYv1D8mAVuuSijvNcKRuSZ6InnWlo5tt\" +\n+        \"9gHsrht9YndssqjJMv7mpp6O8XjAh+arNqrBkkkqPnWzfVnmeQJKcjmAOAArNkVN\" +\n+        \"l1jeQGXjlExNjfBEXlDNhwajM+Vj0IgjL3LqWw6\/o+5EaNkRYXHCNBhNkBkzIMBc\" +\n+        \"OAnqH+fXJ37v5ijZYK0FmGM9XFX2diuUCvz1R8q2CpKU4HcXU9nVhxNkCV7Ccf2w\" +\n+        \"gcAyZs6TUXOwBxvjlGvYGsE\/Qm7JN9GqLHHFeJsIL7O6MYPdp9u44bNzVIbr8zsB\" +\n+        \"7bajCMkukx2LUWwJSaoQmtarqbjlMu12tDG+nF0SBGiZ6xyjb1r5X22Z21diIhUe\" +\n+        \"L\/+cB65LVP1lt83R7nmff1x3LKQcII\/BhnXI3lcwYOdVEFrR0NC2TCn6qtLEriMf\" +\n+        \"3LU6IyiBb2rQPOSaQnQuPFmHhWwxfGSp71qJhWYZvRjPryxDHOWsJpbonOOzlnOS\" +\n+        \"AqwxsihUqx2QnKAY1S8pm74+Dx0BmIfJUmzbLhfo7chBx\/Z87oMlJgBHISCeFez3\" +\n+        \"OZpY56z+GoTvClw6Yxf5KOaYDlzfyAfDJlq+UFFaKRi5kJV9QgJdCVus4+ozlszV\" +\n+        \"x2FTcBmPdfkve6XMVUxWenbPA4\/zoSsuBIdM0ULSyrXrtLH8aDVCdfzKcLyHPECY\" +\n+        \"TyhGZbkcnDGpcK6OO10wPlAf36k9vB+Xo2U\/ImMw\/8\/z\/Vc8lCUeNsRJ6bBGLifX\" +\n+        \"tqi+Ts58U9z\/3LAUD\/uKGDgOi9KR93iaMBH6UeqhPS6s5p69ZG4KQ+by7vUBsvl8\" +\n+        \"KFWiLXXONjlVR3EQInMW0u7A4kXvtLxzmvQZg3TMNo7VprgUjWhjLEjP0uroFF9m\" +\n+        \"YYVRjv5xmBQi2SejEidrztzfuGjDUIoMNiw5zK8H80B8xbTkbGsrGfy6c1UU37+L\" +\n+        \"aXqN9lpX1wdiPuKaXpDq5SdpIUrJvqulFmsGGqU\/Fwr1TLkkO3\/1cxj696xKVGRQ\" +\n+        \"OF1+7jnRudUkRabl8XDJBZlRjWcizi4knpbov\/uH\/Zw3pS+nu+RACMWTXFMN6Ap8\" +\n+        \"saipOJErynAQQD\/g9nWi0SgQNi5TNlRhp9u9YCYHlrjk7BXJeXMGWSL4Gd0TazwC\" +\n+        \"HayTlN6miL5H3kyLI1COcYFl12S2ktCRqCzZ0fxw3tS5lodZm2joaDGvg4wi7AM1\" +\n+        \"76zzn4KCcJMjHrNGLZE\/JiIyrlyL83CVi0gTLg\/RPwoDDo2uwsxb6ZNmSUl\/f4oN\" +\n+        \"HO0bM5VByrafmNcl\/tlg1Bdeqii3ulFvD2ML0D1JTStHI0QH+fVvWFDeOWwUtgid\" +\n+        \"+uky13yQz2P\/P0N4SgSH+nwTAmRF4QaUqdtqTqRmHnaAyjMvBBzbRMKqbuC2uABj\" +\n+        \"kiVPoGYgyz5ABK+S7m5578T+ATSvA0zTHewHVPzhTvuCZbSdEEeI9jRk7dvY7Z1i\" +\n+        \"6xqFL77SM7\/F70xolTFx0vl+qygqSewKYqTKWs8kZ92P+LoPvuieSsBrLGHq9CLX\" +\n+        \"15XJ62uFp+Wn3uS0K\/8vnaFx68F9xEtiAOj8YewyeqokjUuSpJtIt5o\/F\/PYmjYn\" +\n+        \"8nMjeEaPzq2RSFiNFsAUqP2hmurMdSNMQFGnRI7GcrjamJFAm4y6yrUQSA1B0E\/l\" +\n+        \"TH99jAem8w80JZWfPpX654DLpFjMyga5MZvKxK2WZyXcZxLOtHudayaZGhIzNsJx\" +\n+        \"PxFKcAmVS6OnDxHSYBid5tcKNzIfYqJENImlOi9MQyks9zQzfm1CJsQVZ7Xim+f2\" +\n+        \"aKnbazg9d+cCKD63eSLBFJG2uB8SImF3\/4fthZyft2wUvIRvvw75NwLzxjcQoVY\/\" +\n+        \"aj5tdJ6LuWxtWLsVz5CTcFQPnyP98Zw3keWU8fPmckK1IjBhPnPKcSUec0sX8OIe\" +\n+        \"WOnWUKCOpm1zIpKxyVMcWaNCBnvjBNgHlRUJjf7Qv3QYVOchinDVGqYNw8PvZnre\" +\n+        \"0OCUwN3Vzx1cMhPKdskrs4yscxsJR2NCEjElMCMGCSqGSIb3DQEJFTEWBBQRhkQa\" +\n+        \"SZ3piuKFvLRAzBKNNCzkoTCBjTB9MEkGCSqGSIb3DQEFDjA8MCwGCSqGSIb3DQEF\" +\n+        \"DDAfBAjuQzW+wYDvfAICCAACATAwDAYIKoZIhvcNAgoFADAMBggqhkiG9w0CCgUA\" +\n+        \"BDByPl+gyA0f5yrMizs5YCvtJNAL+6BnxQCAk6owqdCCu8Mn2CFD\/5Li6Eammf3G\" +\n+        \"AasECO5DNb7BgO98AgIIAA==\";\n+\n+    \/\/ A.8.  SHA224 PRF and HMAC\n+    static final String A8 =\n+        \"MIIRBwIBAzCCEIUGCSqGSIb3DQEHAaCCEHYEghByMIIQbjCCBloGCSqGSIb3DQEH\" +\n+        \"BqCCBkswggZHAgEAMIIGQAYJKoZIhvcNAQcBMF8GCSqGSIb3DQEFDTBSMDEGCSqG\" +\n+        \"SIb3DQEFDDAkBBChs1p0lxBJoGy52D3uOH\/GAgIIADAMBggqhkiG9w0CCQUAMB0G\" +\n+        \"CWCGSAFlAwQBKgQQe3+TAtS5hkQO4vuMgrV\/fICCBdAxan2fHMY650+NqPDMGHT6\" +\n+        \"GWii9xttNs+4u5MkgOzFLzB0WkRSuo59wH5lYfz3KN9vn8En851nIVTWcO0OkB8d\" +\n+        \"rlPElbIf79QvoMU9pkwwnCDbkCNGUgIr4995ScF9wpS0CeMvYlQzLoNHbNaNt9n0\" +\n+        \"g7TUlgeU9wUR+Wbfu8svR9yaPZ3Jdzt2BC0YYrdNEOJLQ5Gjt5epylnHPOvHG54V\" +\n+        \"5lhSJdZLJ+K6i2OjGYeIriOxUftnZexO7osbM4udC+0\/0Kon7x7e5gd3MmcLTHiR\" +\n+        \"n1wGB7HbPUH\/w595y5HdH+CKJ0nkAwd6qHd6JLUyxl02zD5YHdrwaw\/hH3gHL5Ep\" +\n+        \"mD\/6teb6kG+TCrh1Qs0fHwICr8z175NRHb58TG1Y5dnUA+m9g2\/WRnqzI9ItleOi\" +\n+        \"oeP0QN4poIKxyZRTDWa\/BiDycSlI\/Wwamumz0YY0rLCrS33MQ5nkt5BqwmMfjxYr\" +\n+        \"C9SGMxzA06B9ki1l0N3mhiERlhQ0eU\/yJcYOHrLNR\/jhR1E\/FO+SFjqmIv0d7pQ3\" +\n+        \"C5++HgmTzFlMRl8ZKlWKJqqUSNevjGw5uzysOrH3tgLuMihJAmvZCIzdjHhbS\/rR\" +\n+        \"shcP3aFiMJSkxjDlZELjz0fTGOy1kg5n3WM7MoWggmzR4fY4uti2L1oInyD+FqkA\" +\n+        \"O1USu4nTf1JRXnQjGp6oY2qIr9dT\/\/B5CHnEWZbAms4n714CA2OCEKi+eF7Jjn7y\" +\n+        \"YMS7SWW\/3\/Ho9HhgECoXafDrQBcF3bVn6jytQk+C2k248VAeaVApurIgrr1TafLM\" +\n+        \"\/PEnCGfPF4CDF9Tp+\/Oa0X3gQ20wDrn1KweHuG5nItxCeXI0z1jIJOVjqKuJxhe8\" +\n+        \"d1Mm0MPuHJeE1d5llcQISGzatYLF5myWpK7c5K98tu8B52Ku4Q5jfIGtQGi\/7Hl7\" +\n+        \"POdRN75XcAWcn88QEkGMKMkwTGqVkvHlq6G5q0rCCZdnKyJ21WoEKPvyu3wXEjre\" +\n+        \"dibOk\/A9LmjHgLFoZY0kQK8OYAOVusXOEzUapDDkUHdwHJBZbXTaOXSraaCyOqNu\" +\n+        \"8KlpSCaNQ0xI4hINRSTEhD\/IHhlz3TKpWtvjba3d3A2PNe0Xqn\/viBnS1uxcyL5h\" +\n+        \"5h18Vg3lGoPhXmnkUI1mCCDzE7ZKf3nYVZJYnDaLaiI5vPqPuC90Nl6Ixt97LnPm\" +\n+        \"XeuRut\/UoCcY52FeMrtkLPnIYxuHKvZ9zgELBdaUCB1g7fR7Pp\/uFzF7Fvqsaqtd\" +\n+        \"0tIHyJ8tO4StwA6XgZFHQbLwrPr6pSc9DM2t+nl0yJ5FCezzVC\/QIZq0FJg2T6Np\" +\n+        \"MZ3GgZzlYzwlFMS2drv3wxZl6fVE0sUYHShaWw8kBZxixd8boITSMHKaa4KcDBZ4\" +\n+        \"fmtwAXFe5VQmjJak5Ku6L73VsOJtQqggBB9lf7EgnOPEb3AZ6pOzQfDeJ+FkLCVZ\" +\n+        \"ynzCrio7MeAWDC9DVdADsZO1BxLUI45sbK\/JSM1yAtRcLcs1aDNsce7aVkCw8DfC\" +\n+        \"5YNUTgPS10TUNjUA2+04NkfOj1CuZPXowZdA9GQBzapQZ21WhNqXaNpg6EKg3nBi\" +\n+        \"SMbzreu6EoLE+GS4Q+915FR+\/fI0SesXyz+FsYAYFZXKfuzeB23\/AqXdjd5tLbWq\" +\n+        \"5x9LGgarbaCX2KUCjRIOs\/xkvWvBXyhL9WpFrJx595wvSc2LqP5Vng8okKzgqUWP\" +\n+        \"EIO9dbbI4sktRY0wBqp\/tggHwzvuv0GTF0puEhydNLNb3T4N4zIVe\/t46t666Z7q\" +\n+        \"JyCPtvG52izyNh04ERNAyzXJctVIKkp4MnUANUaCX32mbRiFobqyNa6WtoBVO1EZ\" +\n+        \"nCIbGMxrGJM6KQ\/sMvDA2NsfQ2Tu\/qexWtpvqSkLH34t53ve2v3bDlt0\/pW914M5\" +\n+        \"Y2LCzBe2fT7pvgt0QPX0BRokvk9w8Cm\/qAmXRslWg+7TTMwsHvSJndcb4S+8hjhi\" +\n+        \"pkKWA77Dk0N+znKFu7qkeSIhbYtiRcJbW9nmaq4rUKgwggoMBgkqhkiG9w0BBwGg\" +\n+        \"ggn9BIIJ+TCCCfUwggnxBgsqhkiG9w0BDAoBAqCCCbkwggm1MF8GCSqGSIb3DQEF\" +\n+        \"DTBSMDEGCSqGSIb3DQEFDDAkBBAbd6pT8MxNjuVgT\/s9SA6FAgIIADAMBggqhkiG\" +\n+        \"9w0CCQUAMB0GCWCGSAFlAwQBKgQQ\/oTTtdzRsmLFcN09hTVuIQSCCVDHRkd4aevn\" +\n+        \"G3WhnQu8OyzSIRKcylF1p26\/LpN67qdlMTwg9tXk0IfOMODoMkKjqb6IevPGeqC4\" +\n+        \"mkZ\/XMpVDLTyYuJkgDyFp8dRuKIfhEUeQrfx1J3QZCZIGB8Tf0sbCrmAd+Rmi0kO\" +\n+        \"4Ki+fYmIHPO40V9LZoZZI+pbLL\/GC7SFsmC3xNSn8hPsyNuBteX9KAJ5P05vHYnC\" +\n+        \"Uzec9BBASx8eT4HgdsYUE57WgiWT8cIgou+zDIJRiv0muTMAz+1GEFD29DyXMc3z\" +\n+        \"puIYlR3WP4WdrdKMAC2bCjbETt3uZdEF7n\/yH7QLHLXptBSSEEtz62EVbFJtggrJ\" +\n+        \"7QWyNw8v+CVm+DR5Yc+Inw60ZeJSyLmTMKXfAmvHCVeGpzOggL5I6PkgtFPSSiqN\" +\n+        \"5bq1RUNo++QSgySGi82AWRESBE9tYebGnMk1ecfIPT4wQa6\/xR8CVUkEr1oe311W\" +\n+        \"4B5BKQXNjbMP0Hv5gZfOlVqSd2PQTqXaa6w9II+56nu5BQ5E6DytCVmSYOO6AfmS\" +\n+        \"0XqGbaBNzoDx7NeHY9K0hnztGkqxpyaAnGHj0+0e1oqK86fjDawCPZEm6o+Pf9NC\" +\n+        \"tvpeGpV6fB7YgKgKuybHRIxrQAp\/Q1MRDBa4AZgYkqvjvnIG2rLr6Ry8m\/ls\/yGe\" +\n+        \"\/hPL9PMamn\/O++zjMufiefoXANXaK0aP7773cCkXr+pC7puA6PPfYXSBrGLbvxZS\" +\n+        \"sXdVUyPRCx0kTpg1zKTnz\/S3PZDLD+VlQ5evsiSMcDZirCbuUW1P0oXIF3W+\/OUD\" +\n+        \"SqMR\/GQnO9tCnUo2\/2nRJU1ZW2l3I2tHlhkRYqzEFIRJWBkSnNYccfoZQ7Rlp3Bh\" +\n+        \"kdI3hCN5c2BL8GGD67IRbTpN+Q7EObZOgvuq6tTc06QrOcF6vL63UQ3axaYqDT0U\" +\n+        \"6RJIxQZtc+MG5nbb2bJQlA0gt4PeMKaTUnjDhu8s5A9iUv9tlgbAMfjQ74Jr8IUa\" +\n+        \"TlLdEPSk6LNbwWW1dxmu\/0LwchPujEVgoylIUXum6AGy+snUmvSITfnd4xkZIrCk\" +\n+        \"WSJcLFsMTvmzl+Gz4n5bpcKb5rA6SU8Urg\/\/2GtyankmYybbGdmIE5oYcc41KBgk\" +\n+        \"40s8MKTA7u078T+WnzJZIqhbyWwouEXLvWiqHo7WKufA\/spCNC8hlXx6SreYcvRO\" +\n+        \"OuI57kagquU5\/+f8Nagn9VyGLnzHQE5daQxjK\/zMloKaXNP\/e8tqei4Yx7QPWLDf\" +\n+        \"Cp\/67GI8sU\/D45QUa9Rp7oU+vx7erkCjlP+DLMg98new64jkAHiOcAwzkKY23kSY\" +\n+        \"ZvKNJb7Fbk\/5YLpZFrPM8KtM4t0C9GCvF\/hoMB7Z82wQ2JZEAhdd2bqkCveY\/GhI\" +\n+        \"rYsRroa7ETjedx3OU5GOFt\/+AKW22ybKdb6217lTphf1mszI7BIjwyxwz5\/HzUBL\" +\n+        \"deKvZjzO6anfA6kmWRWDFfxtTuYi8EoqGi7mNmQb5e7kfo2KnkjTsfYWxzvPpVI9\" +\n+        \"yjqWN769ECw30CLJB96piEnBT24yXwm6VYMb69Edyq2vAWvBeJB1YBxqqaBrnQ\/U\" +\n+        \"Uz3hxsgroskoebzTeds4vXxsnE5lFpaCZ8V\/85ugSmtm2nt6JVi2aRZ+X+UdkYD0\" +\n+        \"p4wEXhSLZcWZemZdc3r5pUMZJJsZsx75lIO4ePoyLeD745RmdO2GtSLAlTED\/6dm\" +\n+        \"b6GM5fybLIBjycLU\/Ko5KES9RLpkTYjM+1j1KG4tMOfbCP9std5Y\/yPTDgSu3rHt\" +\n+        \"RGO2005fbz0Zw6GqBxYTBlEzNuNm1BrKdE5ZCm7bQCQGqC8fjaDa4XMIIl8JpsKq\" +\n+        \"HhwsrV+gWcvOpLVmgfMnoTICucK2hCN1PUNjflH58yAQ\/A60s+A9H5vuXNVrQvt0\" +\n+        \"59A8quND7DCfr3KLap4R38Rw1izRBBimWI7sbIdRki5XhcjLDHjGQovtT6WbzPUQ\" +\n+        \"M11NHtdMHxYx22cHuT8Q48lGVEkLGrKF+XZEakaOERTrUHjme2PCsZbviEAbx8sv\" +\n+        \"1H8\/awbkki822Z64D\/\/hiUC7NR4NqAtGRiIs8u8RmetOoxXw4H7HYKJ+L8kVBwyL\" +\n+        \"liiAHt5IwPAOUrExDFkicalohi8Kcnq\/GQSERd4DJv6VtkzeVnyzrAbzwLCLQGG6\" +\n+        \"hVQIClYbAkjt2Gk27otOvPThWNhX0XdxM86HI+AxDv6\/JDx8QqauRWslU9RGP4q1\" +\n+        \"DKhckD3qodddH268LyLR2Pmtwk6e\/Zim4W8HI\/FE4i29JzuTClg4gf7cb7PpL78U\" +\n+        \"E9fzpD\/3f4F5tzyem83zntCgiEPek0LmsXI1u6gaW8yOefC5THynBGMWnn3GFRPL\" +\n+        \"WSqBpA6qXy+Mbq4ZvL9jDgflf38ek7v3U31\/VAkO4LI3NRrc6\/Lnk\/7pA+UkCa89\" +\n+        \"UUuXHRyTJf\/pkCatH1ozsGKEeb+o3I0hcIeEkol3w6krfJDA8sB+PUS0Ty19jMk8\" +\n+        \"xyeXgKiHi4xFNWWqUqDI6NMVtUUBiS9OZKclov3zw3DRrHGJXiegRCiHhylZRPnS\" +\n+        \"cLiSB7UhXt1zwAXczp7UI35jHLb4vJI6qZjtoil8qItJ19LuFVKykhq8YSnRBrsA\" +\n+        \"43KlDhVmthvko1Ray1urepZsQoml3n5rcZ+gI4KVavRSdrHnITJ3ejiaVRW6jAi2\" +\n+        \"MwsYVMDXhipu+aiJO3Epffn5J0vH+6ZxBWqnxfJcXRyP87kVqOweDLzWBZOss7tD\" +\n+        \"ocIoTc94TyhA+4fSuo6vJtTGMCuD1Pu7AY+4RTvgqKbji0pXaNQkFXEO14AXPLJa\" +\n+        \"jP2Mf0SsrjQlNynRDOjw\/iAYSj90Xvs14kpXgNUW8EIoSDnSvTYoa91uY+IAAknE\" +\n+        \"fNH8qLRIxaQ++Pz\/3WRlpqLJZUblMQrrfgTPirQKarkY20eecbSBYARq\/uIWd3LY\" +\n+        \"JFSjQFvvw15EGW+pMcjCXNF2u2hz5nqzu8faJjbHuR1Sz8cGh\/0KJR+02JH96LXq\" +\n+        \"v9m4o+Xm2pQ08hweroKWZpYYMHkV0JiZ4neSa5QlqaQVD\/u26KbSjsl1eSBI5mBn\" +\n+        \"c+Q+N8qTsmFCQUE5nnUxftKJuLfDdoyo+bLnXQC8tXGF0CEKExoP8nsEx\/YvIr0H\" +\n+        \"huG5EjJL+30zYg88gAWr2Ui2ECSO1OQ4RtgEJJPyS03znl0SNGvFbvke6G0HZPIw\" +\n+        \"o3hNwVY6DYjX+\/WajApCFtOUq39MWCz\/rjElMCMGCSqGSIb3DQEJFTEWBBT8muXa\" +\n+        \"5vJFzMUDkXw8nPa4lA8tNTB5MGkwSQYJKoZIhvcNAQUOMDwwLAYJKoZIhvcNAQUM\" +\n+        \"MB8ECKNphYwlt+s9AgIIAAIBHDAMBggqhkiG9w0CCAUAMAwGCCqGSIb3DQIIBQAE\" +\n+        \"HCjYF9vCKIoIek1JFN6CIyulPiprFFB1o5vOBycECKNphYwlt+s9AgIIAA==\";\n+\n@@ -419,8 +617,13 @@\n-        \/\/ Unsupported: key length must be same as Hmac output length.\n-        try {\n-            ks = KeyStore.getInstance(\"PKCS12\");\n-            ks.load(new ByteArrayInputStream(Base64.getDecoder().decode(A2)),\n-                    password.toCharArray());\n-        } catch (IOException e) {\n-            System.out.println(\"A.2 pass\");\n-        }\n+        ks = KeyStore.getInstance(\"PKCS12\");\n+        ks.load(new ByteArrayInputStream(Base64.getDecoder().decode(A2)),\n+                password.toCharArray());\n+\n+        fos = new FileOutputStream(\"pbmac1KeyStore.p12\");\n+        ks.store(fos, password.toCharArray());\n+        fos.close();\n+\n+        \/\/ read keystore we just wrote\n+        fis = new FileInputStream(\"pbmac1KeyStore.p12\");\n+        ks.load(fis, password.toCharArray());\n+        fis.close();\n+        System.out.println(\"A.2 pass\");\n@@ -446,0 +649,1 @@\n+            throw new Exception(\"The expected exception was not thrown.\");\n@@ -454,0 +658,1 @@\n+            throw new Exception(\"The expected exception was not thrown.\");\n@@ -463,0 +668,1 @@\n+            throw new Exception(\"The expected exception was not thrown.\");\n@@ -466,0 +672,28 @@\n+\n+        ks = KeyStore.getInstance(\"PKCS12\");\n+        ks.load(new ByteArrayInputStream(Base64.getDecoder().decode(A7)),\n+                \"changeit\".toCharArray());\n+\n+        fos = new FileOutputStream(\"pbmac1KeyStore.p12\");\n+        ks.store(fos, password.toCharArray());\n+        fos.close();\n+\n+        \/\/ read keystore we just wrote\n+        fis = new FileInputStream(\"pbmac1KeyStore.p12\");\n+        ks.load(fis, password.toCharArray());\n+        fis.close();\n+        System.out.println(\"A.7 pass\");\n+\n+        ks = KeyStore.getInstance(\"PKCS12\");\n+        ks.load(new ByteArrayInputStream(Base64.getDecoder().decode(A8)),\n+                \"changeit\".toCharArray());\n+\n+        fos = new FileOutputStream(\"pbmac1KeyStore.p12\");\n+        ks.store(fos, password.toCharArray());\n+        fos.close();\n+\n+        \/\/ read keystore we just wrote\n+        fis = new FileInputStream(\"pbmac1KeyStore.p12\");\n+        ks.load(fis, password.toCharArray());\n+        fis.close();\n+        System.out.println(\"A.8 pass\");\n","filename":"test\/jdk\/sun\/security\/pkcs12\/PBMAC1Encoding.java","additions":242,"deletions":8,"binary":false,"changes":250,"status":"modified"}]}