{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,1 @@\n+import sun.security.util.PBKDF2Parameters;\n@@ -230,14 +231,1 @@\n-        String kdfAlgo = parseKDF(kdf);\n-\n-        if (pBES2_params.tag != DerValue.tag_Sequence) {\n-            throw new IOException(\"PBE parameter parsing error: \"\n-                + \"not an ASN.1 SEQUENCE tag\");\n-        }\n-        String cipherAlgo = parseES(pBES2_params.data.getDerValue());\n-\n-        this.pbes2AlgorithmName = \"PBEWith\" + kdfAlgo + \"And\" + cipherAlgo;\n-    }\n-\n-    private String parseKDF(DerValue keyDerivationFunc) throws IOException {\n-\n-        if (!pkcs5PBKDF2_OID.equals(keyDerivationFunc.data.getOID())) {\n+        if (!pkcs5PBKDF2_OID.equals(kdf.data.getOID())) {\n@@ -247,1 +235,1 @@\n-        if (keyDerivationFunc.tag != DerValue.tag_Sequence) {\n+        if (kdf.tag != DerValue.tag_Sequence) {\n@@ -251,1 +239,1 @@\n-        DerValue pBKDF2_params = keyDerivationFunc.data.getDerValue();\n+        DerValue pBKDF2_params = kdf.data.getDerValue();\n@@ -253,1 +241,1 @@\n-            throw new IOException(\"PBE parameter parsing error: \"\n+            throw new IOException(\"PBKDF2 parameter parsing error: \"\n@@ -256,10 +244,0 @@\n-        DerValue specified = pBKDF2_params.data.getDerValue();\n-        \/\/ the 'specified' ASN.1 CHOICE for 'salt' is supported\n-        if (specified.tag == DerValue.tag_OctetString) {\n-            salt = specified.getOctetString();\n-        } else {\n-            \/\/ the 'otherSource' ASN.1 CHOICE for 'salt' is not supported\n-            throw new IOException(\"PBE parameter parsing error: \"\n-                + \"not an ASN.1 OCTET STRING tag\");\n-        }\n-        iCount = pBKDF2_params.data.getInteger();\n@@ -267,5 +245,5 @@\n-        \/\/ keyLength INTEGER (1..MAX) OPTIONAL,\n-        var ksDer = pBKDF2_params.data.getOptional(DerValue.tag_Integer);\n-        if (ksDer.isPresent()) {\n-            keysize = ksDer.get().getInteger() * 8; \/\/ keysize (in bits)\n-        }\n+        var kdfParams = new PBKDF2Parameters(pBKDF2_params);\n+        String kdfAlgo = kdfParams.getPrfAlgo();\n+        salt = kdfParams.getSalt();\n+        iCount = kdfParams.getIterationCount();\n+        keysize = kdfParams.getKeyLength();\n@@ -273,23 +251,3 @@\n-        \/\/ prf AlgorithmIdentifier {{PBKDF2-PRFs}} DEFAULT algid-hmacWithSHA1\n-        String kdfAlgo;\n-        var prfDer = pBKDF2_params.data.getOptional(DerValue.tag_Sequence);\n-        if (prfDer.isPresent()) {\n-            DerValue prf = prfDer.get();\n-            kdfAlgo_OID = prf.data.getOID();\n-            KnownOIDs o = KnownOIDs.findMatch(kdfAlgo_OID.toString());\n-            if (o == null || (!o.stdName().equals(\"HmacSHA1\") &&\n-                    !o.stdName().equals(\"HmacSHA224\") &&\n-                    !o.stdName().equals(\"HmacSHA256\") &&\n-                    !o.stdName().equals(\"HmacSHA384\") &&\n-                    !o.stdName().equals(\"HmacSHA512\") &&\n-                    !o.stdName().equals(\"HmacSHA512\/224\") &&\n-                    !o.stdName().equals(\"HmacSHA512\/256\"))) {\n-                throw new IOException(\"PBE parameter parsing error: \"\n-                        + \"expecting the object identifier for a HmacSHA key \"\n-                        + \"derivation function\");\n-            }\n-            kdfAlgo = o.stdName();\n-            prf.data.getOptional(DerValue.tag_Null);\n-            prf.data.atEnd();\n-        } else {\n-            kdfAlgo = \"HmacSHA1\";\n+        if (pBES2_params.tag != DerValue.tag_Sequence) {\n+            throw new IOException(\"PBE parameter parsing error: \"\n+                + \"not an ASN.1 SEQUENCE tag\");\n@@ -297,1 +255,3 @@\n-        return kdfAlgo;\n+        String cipherAlgo = parseES(pBES2_params.data.getDerValue());\n+\n+        this.pbes2AlgorithmName = \"PBEWith\" + kdfAlgo + \"And\" + cipherAlgo;\n@@ -347,21 +307,2 @@\n-\n-        DerOutputStream keyDerivationFunc = new DerOutputStream();\n-        keyDerivationFunc.putOID(pkcs5PBKDF2_OID);\n-\n-        DerOutputStream pBKDF2_params = new DerOutputStream();\n-        pBKDF2_params.putOctetString(salt); \/\/ choice: 'specified OCTET STRING'\n-        pBKDF2_params.putInteger(iCount);\n-\n-        if (keysize > 0) {\n-            pBKDF2_params.putInteger(keysize \/ 8); \/\/ derived key length (in octets)\n-        }\n-\n-        DerOutputStream prf = new DerOutputStream();\n-        \/\/ algorithm is id-hmacWith<MD>\n-        prf.putOID(kdfAlgo_OID);\n-        \/\/ parameters is 'NULL'\n-        prf.putNull();\n-        pBKDF2_params.write(DerValue.tag_Sequence, prf);\n-\n-        keyDerivationFunc.write(DerValue.tag_Sequence, pBKDF2_params);\n-        pBES2_params.write(DerValue.tag_Sequence, keyDerivationFunc);\n+        pBES2_params.write(DerValue.tag_Sequence,\n+                PBKDF2Parameters.encode(salt, iCount, keysize, kdfAlgo_OID));\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/PBES2Parameters.java","additions":19,"deletions":78,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-final class PBKDF2KeyImpl implements javax.crypto.interfaces.PBEKey {\n+public final class PBKDF2KeyImpl implements javax.crypto.interfaces.PBEKey {\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/PBKDF2KeyImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import java.io.*;\n+import java.io.IOException;\n@@ -30,0 +30,7 @@\n+import java.security.spec.InvalidKeySpecException;\n+import static java.util.Locale.ENGLISH;\n+import javax.crypto.Mac;\n+import javax.crypto.SecretKey;\n+import javax.crypto.SecretKeyFactory;\n+import javax.crypto.spec.PBEKeySpec;\n+import javax.crypto.spec.PBEParameterSpec;\n@@ -31,4 +38,0 @@\n-import sun.security.util.DerInputStream;\n-import sun.security.util.DerOutputStream;\n-import sun.security.util.DerValue;\n-import sun.security.x509.AlgorithmId;\n@@ -36,0 +39,2 @@\n+import sun.security.util.*;\n+import sun.security.x509.AlgorithmId;\n@@ -39,1 +44,1 @@\n- * A MacData type, as defined in PKCS#12.\n+ * The MacData type, as defined in PKCS#12.\n@@ -42,0 +47,19 @@\n+ *\n+ * The ASN.1 definition is as follows:\n+ *\n+ * <pre>\n+ *\n+ * MacData ::= SEQUENCE {\n+ *     mac        DigestInfo,\n+ *     macSalt    OCTET STRING,\n+ *     iterations INTEGER DEFAULT 1\n+ *      -- Note: The default is for historical reasons and its use is\n+ *      -- deprecated.\n+ * }\n+ *\n+ * DigestInfo ::= SEQUENCE {\n+ *     digestAlgorithm DigestAlgorithmIdentifier,\n+ *     digest OCTET STRING\n+ * }\n+ *\n+ * <\/pre>\n@@ -46,2 +70,2 @@\n-    private final String digestAlgorithmName;\n-    private AlgorithmParameters digestAlgorithmParams;\n+    private static final Debug debug = Debug.getInstance(\"pkcs12\");\n+    private final String macAlgorithm;\n@@ -51,3 +75,3 @@\n-\n-    \/\/ the ASN.1 encoded contents of this class\n-    private byte[] encoded = null;\n+    private final int keyLength;\n+    private final String kdfHmac;\n+    private final String hmac;\n@@ -73,2 +97,2 @@\n-        this.digestAlgorithmName = digestAlgorithmId.getName();\n-        this.digestAlgorithmParams = digestAlgorithmId.getParameters();\n+        String digestAlgorithmName = digestAlgorithmId.getName();\n+\n@@ -78,2 +102,5 @@\n-        \/\/ Get the salt.\n-        this.macSalt = macData[1].getOctetString();\n+        if (digestAlgorithmName.equals(\"PBMAC1\")) {\n+            PBMAC1Parameters algParams;\n+\n+            algParams = new PBMAC1Parameters(digestAlgorithmId\n+                    .getEncodedParams());\n@@ -81,3 +108,45 @@\n-        \/\/ Iterations is optional. The default value is 1.\n-        if (macData.length > 2) {\n-            this.iterations = macData[2].getInteger();\n+            this.iterations = algParams.getKdfParams().getIterationCount();\n+            this.macSalt = algParams.getKdfParams().getSalt();\n+            this.kdfHmac = algParams.getKdfParams().getPrfAlgo();\n+            this.keyLength = algParams.getKdfParams().getKeyLength();\n+\n+            \/\/ Implementations MUST NOT accept params that omit keyLength.\n+            if (this.keyLength == -1) {\n+                throw new IOException(\"error: missing keyLength field\");\n+            }\n+            this.hmac = algParams.getHmac();\n+            this.macAlgorithm = \"pbewith\" + this.kdfHmac + \"and\" + this.hmac;\n+        } else {\n+            this.kdfHmac = null;\n+            this.hmac = null;\n+            this.keyLength = -1;\n+            this.macSalt = macData[1].getOctetString();\n+            if (macData.length > 2) {\n+                this.iterations = macData[2].getInteger();\n+            } else {\n+                this.iterations = 1;\n+            }\n+            \/\/ Remove \"-\" from digest algorithm names\n+            this.macAlgorithm = \"hmacpbe\"\n+                    + digestAlgorithmName.replace(\"-\", \"\");\n+        }\n+    }\n+\n+    private static Mac getMac(String macAlgorithm, char[] password,\n+            PBEParameterSpec params, byte[] data,\n+            String kdfHmac, String hmac, int keyLength)\n+            throws NoSuchAlgorithmException, InvalidKeySpecException,\n+            InvalidKeyException, InvalidAlgorithmParameterException {\n+        SecretKeyFactory skf;\n+        SecretKey pbeKey;\n+        Mac m;\n+\n+        PBEKeySpec keySpec;\n+        if (macAlgorithm.startsWith(\"pbewith\")) {\n+            m = Mac.getInstance(hmac);\n+            int len = keyLength == 0 ? m.getMacLength()*8 : keyLength;\n+            skf = SecretKeyFactory.getInstance(\"PBKDF2With\" +kdfHmac);\n+            keySpec = new PBEKeySpec(password, params.getSalt(),\n+                    params.getIterationCount(), len);\n+            pbeKey = skf.generateSecret(new PBEKeySpec(password,\n+                    params.getSalt(), params.getIterationCount(), len));\n@@ -85,1 +154,42 @@\n-            this.iterations = 1;\n+            hmac = macAlgorithm;\n+            m = Mac.getInstance(hmac);\n+            keySpec = new PBEKeySpec(password);\n+            skf = SecretKeyFactory.getInstance(\"PBE\");\n+            pbeKey = skf.generateSecret(keySpec);\n+        }\n+        keySpec.clearPassword();\n+\n+        try {\n+            if (macAlgorithm.startsWith(\"pbewith\")) {\n+                m.init(pbeKey);\n+            } else {\n+                m.init(pbeKey, params);\n+            }\n+        } finally {\n+            sun.security.util.KeyUtil.destroySecretKeys(pbeKey);\n+        }\n+        m.update(data);\n+        return m;\n+    }\n+\n+    void processMacData(char[] password, byte[] data)\n+            throws InvalidKeySpecException,\n+            NoSuchAlgorithmException, UnrecoverableKeyException,\n+            InvalidKeyException, InvalidAlgorithmParameterException {\n+        Mac m;\n+        byte[] macResult;\n+\n+        m = getMac(this.macAlgorithm, password,\n+                new PBEParameterSpec(this.macSalt, this.iterations),\n+                data, this.kdfHmac, this.hmac, this.keyLength);\n+        macResult = m.doFinal();\n+\n+        if (debug != null) {\n+            debug.println(\"Checking keystore integrity \" +\n+                    \"(\" + m.getAlgorithm() + \" iterations: \"\n+                    + this.iterations + \")\");\n+        }\n+\n+        if (!MessageDigest.isEqual(this.digest, macResult)) {\n+            throw new UnrecoverableKeyException(\"Failed PKCS12\" +\n+                    \" integrity checking\");\n@@ -89,17 +199,28 @@\n-    MacData(String algName, byte[] digest, byte[] salt, int iterations)\n-        throws NoSuchAlgorithmException\n-    {\n-        if (algName == null)\n-           throw new NullPointerException(\"the algName parameter \" +\n-                                               \"must be non-null\");\n-\n-        AlgorithmId algid = AlgorithmId.get(algName);\n-        this.digestAlgorithmName = algid.getName();\n-        this.digestAlgorithmParams = algid.getParameters();\n-\n-        if (digest == null) {\n-            throw new NullPointerException(\"the digest \" +\n-                                           \"parameter must be non-null\");\n-        } else if (digest.length == 0) {\n-            throw new IllegalArgumentException(\"the digest \" +\n-                                                \"parameter must not be empty\");\n+    \/*\n+     * Calculate MAC using HMAC algorithm (required for password integrity)\n+     *\n+     * Hash-based MAC algorithm combines secret key with message digest to\n+     * create a message authentication code (MAC)\n+     *\/\n+    static byte[] calculateMac(char[] passwd, byte[] data,\n+            String macAlgorithm, int macIterationCount, byte[] salt)\n+            throws IOException, NoSuchAlgorithmException {\n+        final byte[] mData;\n+        final PBEParameterSpec params;\n+        String algName = \"PBMAC1\";\n+        String kdfHmac;\n+        String hmac;\n+        Mac m;\n+        int keyLength;\n+\n+        macAlgorithm = macAlgorithm.toLowerCase(ENGLISH);\n+        if (macAlgorithm.startsWith(\"pbewith\")) {\n+            kdfHmac = MacData.parseKdfHmac(macAlgorithm);\n+            hmac = MacData.parseHmac(macAlgorithm);\n+            if (hmac == null) {\n+                hmac = kdfHmac;\n+            }\n+        } else if (macAlgorithm.startsWith(\"hmacpbe\")) {\n+            algName = macAlgorithm.substring(7);\n+            kdfHmac = macAlgorithm;\n+            hmac = macAlgorithm;\n@@ -107,1 +228,2 @@\n-            this.digest = digest.clone();\n+            throw new ParsingException(\"unexpected algorithm '\"\n+                    +macAlgorithm+ \"'\");\n@@ -110,2 +232,1 @@\n-        this.macSalt = salt;\n-        this.iterations = iterations;\n+        params = new PBEParameterSpec(salt, macIterationCount);\n@@ -113,3 +234,3 @@\n-        \/\/ delay the generation of ASN.1 encoding until\n-        \/\/ getEncoded() is called\n-        this.encoded = null;\n+        try {\n+            m = getMac(macAlgorithm, passwd, params, data, kdfHmac, hmac, 0);\n+            byte[] macResult = m.doFinal();\n@@ -117,0 +238,9 @@\n+            DerOutputStream bytes = new DerOutputStream();\n+            bytes.write(encode(algName, macResult, params, kdfHmac, hmac,\n+                    m.getMacLength()));\n+            mData = bytes.toByteArray();\n+        } catch (InvalidKeySpecException | InvalidKeyException |\n+                    InvalidAlgorithmParameterException e) {\n+            throw new IOException(\"calculateMac failed: \" + e, e);\n+        }\n+        return mData;\n@@ -119,2 +249,2 @@\n-    String getDigestAlgName() {\n-        return digestAlgorithmName;\n+    String getMacAlgorithm() {\n+        return this.macAlgorithm;\n@@ -124,1 +254,1 @@\n-        return macSalt;\n+        return this.macSalt;\n@@ -128,5 +258,1 @@\n-        return iterations;\n-    }\n-\n-    byte[] getDigest() {\n-        return digest;\n+        return this.iterations;\n@@ -138,1 +264,1 @@\n-     * @exception IOException if error occurs when constructing its\n+     * @exception NoSuchAlgorithmException if error occurs when constructing its\n@@ -141,27 +267,6 @@\n-    public byte[] getEncoded() throws NoSuchAlgorithmException\n-    {\n-        if (this.encoded != null)\n-            return this.encoded.clone();\n-\n-        DerOutputStream out = new DerOutputStream();\n-        DerOutputStream tmp = new DerOutputStream();\n-\n-        DerOutputStream tmp2 = new DerOutputStream();\n-        \/\/ encode encryption algorithm\n-        AlgorithmId algid = AlgorithmId.get(digestAlgorithmName);\n-        algid.encode(tmp2);\n-\n-        \/\/ encode digest data\n-        tmp2.putOctetString(digest);\n-\n-        tmp.write(DerValue.tag_Sequence, tmp2);\n-\n-        \/\/ encode salt\n-        tmp.putOctetString(macSalt);\n-\n-        \/\/ encode iterations\n-        tmp.putInteger(iterations);\n-\n-        \/\/ wrap everything into a SEQUENCE\n-        out.write(DerValue.tag_Sequence, tmp);\n-        this.encoded = out.toByteArray();\n+    static byte[] encode(String algName, byte[] digest, PBEParameterSpec p,\n+            String kdfHmac, String hmac, int keyLength)\n+            throws NoSuchAlgorithmException {\n+        return PBMAC1Parameters.encode(algName, p.getSalt(),\n+                p.getIterationCount(), keyLength, kdfHmac, hmac, digest);\n+    }\n@@ -169,1 +274,10 @@\n-        return this.encoded.clone();\n+    private static String parseKdfHmac(String text) {\n+        int index1 = text.indexOf(\"with\") + 4;\n+        int index2 = text.indexOf(\"and\");\n+        if (index1 == 3) { \/\/ -1 + 4\n+            return null;\n+        } else if (index2 == -1) {\n+            return text.substring(index1);\n+        } else {\n+            return text.substring(index1, index2);\n+        }\n@@ -172,0 +286,8 @@\n+    private static String parseHmac(String text) {\n+        int index1 = text.indexOf(\"and\") + 3;\n+        if (index1 == 2) { \/\/ -1 + 3\n+            return null;\n+        } else {\n+            return text.substring(index1);\n+        }\n+    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs12\/MacData.java","additions":202,"deletions":80,"binary":false,"changes":282,"status":"modified"},{"patch":"@@ -0,0 +1,150 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package sun.security.pkcs12;\n+\n+import java.io.IOException;\n+import java.security.NoSuchAlgorithmException;\n+\n+import sun.security.x509.AlgorithmId;\n+import sun.security.util.*;\n+\n+\/**\n+ * This class implements the parameter set used with password-based\n+ * mac scheme 1 (PBMAC1), which is defined in PKCS#5 as follows:\n+ *\n+ * <pre>\n+ * -- PBMAC1\n+ *\n+ * PBMAC1Algorithms ALGORITHM-IDENTIFIER ::=\n+ *   { {PBMAC1-params IDENTIFIED BY id-PBMAC1}, ...}\n+ *\n+ * id-PBMAC1 OBJECT IDENTIFIER ::= {pkcs-5 14}\n+ *\n+ * PBMAC1-params ::= SEQUENCE {\n+ *   keyDerivationFunc AlgorithmIdentifier {{PBMAC1-KDFs}},\n+ *   messageAuthScheme AlgorithmIdentifier {{PBMAC1-MACs}} }\n+ *\n+ * PBMAC1-KDFs ALGORITHM-IDENTIFIER ::=\n+ *   { {PBKDF2-params IDENTIFIED BY id-PBKDF2}, ... }\n+ *\n+ * PBMAC1-MACs ALGORITHM-IDENTIFIER ::= { ... }\n+ *\n+ * -- PBKDF2\n+ *\n+ * See sun.security.util.PBKDF2Parameters.\n+ *\n+ * <\/pre>\n+ *\n+ * @since 26\n+ *\/\n+final class PBMAC1Parameters {\n+\n+    static final ObjectIdentifier pkcs5PBKDF2_OID =\n+            ObjectIdentifier.of(KnownOIDs.PBKDF2WithHmacSHA1);\n+\n+    private final String hmacAlgo;\n+    private final PBKDF2Parameters kdfParams;\n+\n+    PBMAC1Parameters(byte[] encoded) throws IOException {\n+        DerValue pBMAC1_params = new DerValue(encoded);\n+        if (pBMAC1_params.tag != DerValue.tag_Sequence) {\n+            throw new IOException(\"PBMAC1 parameter parsing error: \"\n+                    + \"not an ASN.1 SEQUENCE tag\");\n+        }\n+        DerValue[] info = new DerInputStream(pBMAC1_params.toByteArray())\n+                .getSequence(2);\n+        if (info.length != 2) {\n+            throw new IOException(\"PBMAC1 parameter parsing error: \"\n+                + \"expected length not 2\");\n+        }\n+        ObjectIdentifier OID = info[1].data.getOID();\n+        KnownOIDs o = KnownOIDs.findMatch(OID.toString());\n+        if (o == null || (!o.stdName().equals(\"HmacSHA1\") &&\n+                !o.stdName().equals(\"HmacSHA224\") &&\n+                !o.stdName().equals(\"HmacSHA256\") &&\n+                !o.stdName().equals(\"HmacSHA384\") &&\n+                !o.stdName().equals(\"HmacSHA512\") &&\n+                !o.stdName().equals(\"HmacSHA512\/224\") &&\n+                !o.stdName().equals(\"HmacSHA512\/256\"))) {\n+            throw new IOException(\"PBMAC1 parameter parsing error: \"\n+                    + \"expecting the object identifier for a HmacSHA key \"\n+                    + \"derivation function\");\n+        }\n+        \/\/ Hmac function used to compute the MAC\n+        this.hmacAlgo = o.stdName();\n+\n+        DerValue kdf = pBMAC1_params.data.getDerValue();\n+\n+        if (!pkcs5PBKDF2_OID.equals(kdf.data.getOID())) {\n+            throw new IOException(\"PBKDF2 parameter parsing error: \"\n+                + \"expecting the object identifier for PBKDF2\");\n+        }\n+        if (kdf.tag != DerValue.tag_Sequence) {\n+            throw new IOException(\"PBKDF2 parameter parsing error: \"\n+                + \"not an ASN.1 SEQUENCE tag\");\n+        }\n+        DerValue pBKDF2_params = kdf.data.getDerValue();\n+        if (pBKDF2_params.tag != DerValue.tag_Sequence) {\n+            throw new IOException(\"PBKDF2 parameter parsing error: \"\n+                + \"not an ASN.1 SEQUENCE tag\");\n+        }\n+\n+        this.kdfParams = new PBKDF2Parameters(pBKDF2_params);\n+    }\n+\n+    static byte[] encode(String algName, byte[] salt, int iterationCount, int keyLength,\n+            String kdfHmac, String hmac, byte[] digest) throws NoSuchAlgorithmException {\n+        if (algName.equals(\"PBMAC1\")) {\n+            return new DerOutputStream().write(DerValue.tag_Sequence, new DerOutputStream()\n+                    .write(DerValue.tag_Sequence, new DerOutputStream()\n+                            .write(DerValue.tag_Sequence, new DerOutputStream()\n+                                    .putOID(ObjectIdentifier.of(KnownOIDs.PBMAC1))\n+                                    .write(DerValue.tag_Sequence, new DerOutputStream()\n+                                            .write(DerValue.tag_Sequence, PBKDF2Parameters.encode(salt, iterationCount, keyLength, kdfHmac))\n+                                            .write(DerValue.tag_Sequence, new DerOutputStream()\n+                                                    .putOID(ObjectIdentifier.of(KnownOIDs.findMatch(hmac)))\n+                                                    .putNull())))\n+                            .putOctetString(digest))\n+                    .putOctetString(new byte[]{ 'N', 'O', 'T', ' ', 'U', 'S', 'E', 'D' })\n+                    .putInteger(1)).toByteArray();\n+        } else {\n+            return new DerOutputStream()\n+                    .write(DerValue.tag_Sequence, new DerOutputStream()\n+                        .write(DerValue.tag_Sequence, new DerOutputStream()\n+                                .write(AlgorithmId.get(algName)).putOctetString(digest))\n+                        .putOctetString(salt)\n+                        .putInteger(iterationCount)).toByteArray();\n+        }\n+    }\n+\n+    PBKDF2Parameters getKdfParams() {\n+        return this.kdfParams;\n+    }\n+\n+    String getHmac() {\n+        return this.hmacAlgo;\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs12\/PBMAC1Parameters.java","additions":150,"deletions":0,"binary":false,"changes":150,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,13 +29,1 @@\n-import java.security.MessageDigest;\n-import java.security.NoSuchAlgorithmException;\n-import java.security.Key;\n-import java.security.KeyFactory;\n-import java.security.KeyStore;\n-import java.security.KeyStoreSpi;\n-import java.security.KeyStoreException;\n-import java.security.PKCS12Attribute;\n-import java.security.PrivateKey;\n-import java.security.UnrecoverableEntryException;\n-import java.security.UnrecoverableKeyException;\n-import java.security.SecureRandom;\n-import java.security.Security;\n+import java.security.*;\n@@ -43,0 +31,1 @@\n+import java.security.cert.CertificateException;\n@@ -45,1 +34,0 @@\n-import java.security.cert.CertificateException;\n@@ -51,6 +39,3 @@\n-\n-import static java.nio.charset.StandardCharsets.UTF_8;\n-\n-import java.security.AlgorithmParameters;\n-import java.security.InvalidAlgorithmParameterException;\n-import javax.crypto.spec.PBEParameterSpec;\n+import javax.crypto.Cipher;\n+import javax.crypto.SecretKey;\n+import javax.crypto.SecretKeyFactory;\n@@ -58,0 +43,1 @@\n+import javax.crypto.spec.PBEParameterSpec;\n@@ -59,4 +45,0 @@\n-import javax.crypto.SecretKeyFactory;\n-import javax.crypto.SecretKey;\n-import javax.crypto.Cipher;\n-import javax.crypto.Mac;\n@@ -67,2 +49,0 @@\n-import sun.security.tools.KeyStoreUtil;\n-import sun.security.util.*;\n@@ -70,1 +50,0 @@\n-import sun.security.x509.AlgorithmId;\n@@ -73,0 +52,3 @@\n+import sun.security.tools.KeyStoreUtil;\n+import sun.security.util.*;\n+import sun.security.x509.AlgorithmId;\n@@ -75,0 +57,2 @@\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n@@ -1268,1 +1252,2 @@\n-            byte[] macData = calculateMac(password, authenticatedSafe);\n+            byte[] macData = MacData.calculateMac(password, authenticatedSafe,\n+                    macAlgorithm, macIterationCount, getSalt());\n@@ -1483,42 +1468,0 @@\n-    \/*\n-     * Calculate MAC using HMAC algorithm (required for password integrity)\n-     *\n-     * Hash-based MAC algorithm combines secret key with message digest to\n-     * create a message authentication code (MAC)\n-     *\/\n-    private byte[] calculateMac(char[] passwd, byte[] data)\n-        throws IOException\n-    {\n-        byte[] mData;\n-        String algName = macAlgorithm.substring(7);\n-\n-        try {\n-            \/\/ Generate a random salt.\n-            byte[] salt = getSalt();\n-\n-            \/\/ generate MAC (MAC key is generated within JCE)\n-            Mac m = Mac.getInstance(macAlgorithm);\n-            PBEParameterSpec params =\n-                        new PBEParameterSpec(salt, macIterationCount);\n-            SecretKey key = getPBEKey(passwd);\n-            try {\n-                m.init(key, params);\n-            } finally {\n-                destroyPBEKey(key);\n-            }\n-            m.update(data);\n-            byte[] macResult = m.doFinal();\n-\n-            \/\/ encode as MacData\n-            MacData macData = new MacData(algName, macResult, salt,\n-                    macIterationCount);\n-            DerOutputStream bytes = new DerOutputStream();\n-            bytes.write(macData.getEncoded());\n-            mData = bytes.toByteArray();\n-        } catch (Exception e) {\n-            throw new IOException(\"calculateMac failed: \" + e, e);\n-        }\n-        return mData;\n-    }\n-\n-\n@@ -2131,0 +2074,1 @@\n+                byte[] salt = macData.getSalt();\n@@ -2138,7 +2082,2 @@\n-                    String algName =\n-                            macData.getDigestAlgName().toUpperCase(Locale.ENGLISH);\n-\n-                    \/\/ Change SHA-1 to SHA1\n-                    algName = algName.replace(\"-\", \"\");\n-\n-                    macAlgorithm = \"HmacPBE\" + algName;\n+                    \/\/ Store MAC algorithm of keystore that was just loaded.\n+                    macAlgorithm = macData.getMacAlgorithm();\n@@ -2146,6 +2085,0 @@\n-\n-                    \/\/ generate MAC (MAC key is created within JCE)\n-                    Mac m = Mac.getInstance(macAlgorithm);\n-                    PBEParameterSpec params =\n-                            new PBEParameterSpec(macData.getSalt(), ic);\n-\n@@ -2153,18 +2086,1 @@\n-                        SecretKey key = getPBEKey(pass);\n-                        try {\n-                            m.init(key, params);\n-                        } finally {\n-                            destroyPBEKey(key);\n-                        }\n-                        m.update(authSafeData);\n-                        byte[] macResult = m.doFinal();\n-\n-                        if (debug != null) {\n-                            debug.println(\"Checking keystore integrity \" +\n-                                    \"(\" + m.getAlgorithm() + \" iterations: \" + ic + \")\");\n-                        }\n-\n-                        if (!MessageDigest.isEqual(macData.getDigest(), macResult)) {\n-                            throw new UnrecoverableKeyException(\"Failed PKCS12\" +\n-                                    \" integrity checking\");\n-                        }\n+                        macData.processMacData(pass, authSafeData);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs12\/PKCS12KeyStore.java","additions":18,"deletions":102,"binary":false,"changes":120,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+import com.sun.crypto.provider.PBKDF2KeyImpl;\n@@ -472,0 +473,2 @@\n+                } else if (k instanceof PBKDF2KeyImpl p2k) {\n+                    p2k.clear();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/KeyUtil.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -213,0 +213,1 @@\n+    PBMAC1(\"1.2.840.113549.1.5.14\"),\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/KnownOIDs.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,193 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package sun.security.util;\n+\n+import java.io.IOException;\n+\n+\/**\n+ * This class implements the parameter set used with password-based\n+ * key derivation function 2 (PBKDF2), which is defined in PKCS#5 as follows:\n+ *\n+ * <pre>\n+ *\n+ * PBKDF2Algorithms ALGORITHM-IDENTIFIER ::=\n+ *   { {PBKDF2-params IDENTIFIED BY id-PBKDF2}, ...}\n+ *\n+ * id-PBKDF2 OBJECT IDENTIFIER ::= {pkcs-5 12}\n+ *\n+ * PBKDF2-params ::= SEQUENCE {\n+ *     salt CHOICE {\n+ *       specified OCTET STRING,\n+ *       otherSource AlgorithmIdentifier {{PBKDF2-SaltSources}}\n+ *     },\n+ *     iterationCount INTEGER (1..MAX),\n+ *     keyLength INTEGER (1..MAX) OPTIONAL,\n+ *     prf AlgorithmIdentifier {{PBKDF2-PRFs}} DEFAULT algid-hmacWithSHA1\n+ * }\n+ *\n+ * PBKDF2-SaltSources ALGORITHM-IDENTIFIER ::= { ... }\n+ *\n+ * PBKDF2-PRFs ALGORITHM-IDENTIFIER ::= {\n+ *     {NULL IDENTIFIED BY id-hmacWithSHA1} |\n+ *     {NULL IDENTIFIED BY id-hmacWithSHA224} |\n+ *     {NULL IDENTIFIED BY id-hmacWithSHA256} |\n+ *     {NULL IDENTIFIED BY id-hmacWithSHA384} |\n+ *     {NULL IDENTIFIED BY id-hmacWithSHA512}, ... }\n+ *\n+ * algid-hmacWithSHA1 AlgorithmIdentifier {{PBKDF2-PRFs}} ::=\n+ *     {algorithm id-hmacWithSHA1, parameters NULL : NULL}\n+ *\n+ * id-hmacWithSHA1 OBJECT IDENTIFIER ::= {digestAlgorithm 7}\n+ *\n+ * For more information, see\n+ * <a href=\"https:\/\/tools.ietf.org\/html\/rfc8018\">RFC 8018:\n+ * PKCS #5: Password-Based Cryptography Specification<\/a>.\n+ *\n+ * <\/pre>\n+ *\/\n+public final class PBKDF2Parameters {\n+\n+    private final byte[] salt;\n+\n+    private final int iterationCount;\n+\n+    \/\/ keyLength in bits, or -1 if not present\n+    private final int keyLength;\n+\n+    private String prfAlgo;\n+\n+    \/**\n+     * Initialize PBKDF2Parameters from a DER encoded\n+     * parameter block.\n+     * \n+     * @param keyDerivationFunc the DER encoding of the parameter block\n+     *      \n+     * @throws IOException for parsing errors in the input stream\n+     *\/\n+    public PBKDF2Parameters(DerValue pBKDF2_params) throws IOException {\n+\n+        DerValue specified = pBKDF2_params.data.getDerValue();\n+        \/\/ the 'specified' ASN.1 CHOICE for 'salt' is supported\n+        if (specified.tag == DerValue.tag_OctetString) {\n+            salt = specified.getOctetString();\n+        } else {\n+            \/\/ the 'otherSource' ASN.1 CHOICE for 'salt' is not supported\n+            throw new IOException(\"PBKDF2 parameter parsing error: \"\n+                + \"not an ASN.1 OCTET STRING tag\");\n+        }\n+        iterationCount = pBKDF2_params.data.getInteger();\n+\n+        \/\/ keyLength INTEGER (1..MAX) OPTIONAL,\n+        var ksDer = pBKDF2_params.data.getOptional(DerValue.tag_Integer);\n+        if (ksDer.isPresent()) {\n+            keyLength = ksDer.get().getInteger() * 8; \/\/ keyLength (in bits)\n+        } else {\n+            keyLength = -1;\n+        }\n+\n+        \/\/ prf AlgorithmIdentifier {{PBKDF2-PRFs}} DEFAULT algid-hmacWithSHA1\n+        var prfDer = pBKDF2_params.data.getOptional(DerValue.tag_Sequence);\n+        if (prfDer.isPresent()) {\n+            DerValue prf = prfDer.get();\n+            \/\/ the pseudorandom function (default is HmacSHA1)\n+            ObjectIdentifier kdfAlgo_OID = prf.data.getOID();\n+            KnownOIDs o = KnownOIDs.findMatch(kdfAlgo_OID.toString());\n+            if (o == null || (!o.stdName().equals(\"HmacSHA1\") &&\n+                    !o.stdName().equals(\"HmacSHA224\") &&\n+                    !o.stdName().equals(\"HmacSHA256\") &&\n+                    !o.stdName().equals(\"HmacSHA384\") &&\n+                    !o.stdName().equals(\"HmacSHA512\") &&\n+                    !o.stdName().equals(\"HmacSHA512\/224\") &&\n+                    !o.stdName().equals(\"HmacSHA512\/256\"))) {\n+                throw new IOException(\"PBKDF2 parameter parsing error: \"\n+                        + \"expecting the object identifier for a HmacSHA \"\n+                        + \"pseudorandom function\");\n+            }\n+            prfAlgo = o.stdName();\n+            prf.data.getOptional(DerValue.tag_Null);\n+            prf.data.atEnd();\n+        } else {\n+            prfAlgo = \"HmacSHA1\";\n+        }\n+    }\n+\n+    public static byte[] encode(byte[] salt, int iterationCount,\n+            int keyLength, String kdfHmac) {\n+        ObjectIdentifier kdfAlgo_OID =\n+               ObjectIdentifier.of(KnownOIDs.findMatch(kdfHmac));\n+        return PBKDF2Parameters.encode(salt, iterationCount, keyLength,\n+                kdfAlgo_OID);\n+    }\n+\n+    public static byte[] encode(byte[] salt, int iterationCount,\n+            int keyLength, ObjectIdentifier kdfAlgo_OID) {\n+        return new DerOutputStream()\n+                .putOID(ObjectIdentifier.of(KnownOIDs.PBKDF2WithHmacSHA1))\n+                .write(DerValue.tag_Sequence, new DerOutputStream()\n+                        .putOctetString(salt)\n+                        .putInteger(iterationCount)\n+                        .putInteger(keyLength)\n+                        .write(DerValue.tag_Sequence, new DerOutputStream()\n+                                .putOID(kdfAlgo_OID)\n+                                .putNull())).toByteArray();\n+    }\n+\n+    \/**\n+     * Returns the salt.\n+     *\n+     * @return the salt\n+     *\/\n+    public byte[] getSalt() {\n+        return this.salt;\n+    }\n+\n+    \/**\n+     * Returns the iteration count.\n+     *\n+     * @return the iteration count\n+     *\/\n+    public int getIterationCount() {\n+        return this.iterationCount;\n+    }\n+\n+    \/**\n+     * Returns size of key generated by PBKDF2, or -1 if not found\/set.\n+     *\n+     * @return size of key generated by PBKDF2, or -1 if not found\/set\n+     *\/\n+    public int getKeyLength() {\n+        return this.keyLength;\n+    }\n+\n+    \/**\n+     * Returns name of Hmac.\n+     *\n+     * @return name of Hmac\n+     *\/\n+    public String getPrfAlgo() {\n+        return this.prfAlgo;\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/PBKDF2Parameters.java","additions":193,"deletions":0,"binary":false,"changes":193,"status":"added"},{"patch":"@@ -0,0 +1,701 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8343232\n+ * @summary PKCS#12 KeyStore support for RFC 9579: Use of Password-Based Message Authentication Code 1 (PBMAC1)\n+ *\/\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.security.KeyStore;\n+import java.util.Base64;\n+\n+\/*\n+ * Tests A.1 - A.6 are from RFC 9879.\n+ *\n+ * A.7 was generated by openssl in 2 steps:\n+ * openssl req -x509 -newkey rsa:4096 -keyout myKey.pem -out cert.pem -days 365 -nodes\n+ * openssl pkcs12 -export -out keyStore.p12 -inkey myKey.pem -in cert.pem -pbmac1_pbkdf2 -macalg sha384 -passout pass:changeit\n+ *\n+ * A.8 is same as A7 except sha384 is changed to sha224.\n+*\/\n+public class PBMAC1Encoding {\n+    \/\/ A.1.  Valid PKCS #12 File with SHA-256 HMAC and PRF\n+    static final String A1 =\n+        \"MIIKigIBAzCCCgUGCSqGSIb3DQEHAaCCCfYEggnyMIIJ7jCCBGIGCSqGSIb3DQEH\" +\n+        \"BqCCBFMwggRPAgEAMIIESAYJKoZIhvcNAQcBMFcGCSqGSIb3DQEFDTBKMCkGCSqG\" +\n+        \"SIb3DQEFDDAcBAg9pxXxY2yscwICCAAwDAYIKoZIhvcNAgkFADAdBglghkgBZQME\" +\n+        \"ASoEEK7yYaFQDi1pYwWzm9F\/fs+AggPgFIT2XapyaFgDppdvLkdvaF3HXw+zjzKb\" +\n+        \"7xFC76DtVPhVTWVHD+kIss+jsj+XyvMwY0aCuAhAG\/Dig+vzWomnsqB5ssw5\/kTb\" +\n+        \"+TMQ5PXLkNeoBmB6ArKeGc\/QmCBQvQG\/a6b+nXSWmxNpP+71772dmWmB8gcSJ0kF\" +\n+        \"Fj75NrIbmNiDMCb71Q8gOzBMFf6BpXf\/3xWAJtxyic+tSNETfOJa8zTZb0+lV0w9\" +\n+        \"5eUmDrPUpuxEVbb0KJtIc63gRkcfrPtDd6Ii4Zzbzj2Evr4\/S4hnrQBsiryVzJWy\" +\n+        \"IEjaD0y6+DmG0JwMgRuGi1wBoGowi37GMrDCOyOZWC4n5wHLtYyhR6JaElxbrhxP\" +\n+        \"H46z2USLKmZoF+YgEQgYcSBXMgP0t36+XQocFWYi2N5niy02TnctwF430FYsQlhJ\" +\n+        \"Suma4I33E808dJuMv8T\/soF66HsD4Zj46hOf4nWmas7IaoSAbGKXgIa7KhGRJvij\" +\n+        \"xM3WOX0aqNi\/8bhnxSA7fCmIy\/7opyx5UYJFWGBSmHP1pBHBVmx7Ad8SAsB9MSsh\" +\n+        \"nbGjGiUk4h0QcOi29\/M9WwFlo4urePyI8PK2qtVAmpD3rTLlsmgzguZ69L0Q\/CFU\" +\n+        \"fbtqsMF0bgEuh8cfivd1DYFABEt1gypuwCUtCqQ7AXK2nQqOjsQCxVz9i9K8NDeD\" +\n+        \"aau98VAl0To2sk3\/VR\/QUq0PRwU1jPN5BzUevhE7SOy\/ImuJKwpGqqFljYdrQmj5\" +\n+        \"jDe+LmYH9QGVRlfN8zuU+48FY8CAoeBeHn5AAPml0PYPVUnt3\/jQN1+v+CahNVI+\" +\n+        \"La8q1Nen+j1R44aa2I3y\/pUgtzXRwK+tPrxTQbG030EU51LYJn8amPWmn3w75ZIA\" +\n+        \"MJrXWeKj44de7u4zdUsEBVC2uM44rIHM8MFjyYAwYsey0rcp0emsaxzar+7ZA67r\" +\n+        \"lDoXvvS3NqsnTXHcn3T9tkPRoee6L7Dh3x4Od96lcRwgdYT5BwyH7e34ld4VTUmJ\" +\n+        \"bDEq7Ijvn4JKrwQJh1RCC+Z\/ObfkC42xAm7G010u3g08xB0Qujpdg4a7VcuWrywF\" +\n+        \"c7hLNquuaF4qoDaVwYXHH3iuX6YlJ\/3siTKbYCVXPEZOAMBP9lF\/OU76UMJBQNfU\" +\n+        \"0xjDx+3AhUVgnGuCsmYlK6ETDp8qOZKGyV0KrNSGtqLx3uMhd7PETeW+ML3tDQ\/0\" +\n+        \"X9fMkcZHi4C2fXnoHV\/qa2dGhBj4jjQ0Xh1poU6mxGn2Mebe2hDsBZkkBpnn7pK4\" +\n+        \"wP\/VqXdQTwqEuvzGHLVFsCuADe40ZFBmtBrf70wG7ZkO8SUZ8Zz1IX3+S024g7yj\" +\n+        \"QRev\/6x6TtkwggWEBgkqhkiG9w0BBwGgggV1BIIFcTCCBW0wggVpBgsqhkiG9w0B\" +\n+        \"DAoBAqCCBTEwggUtMFcGCSqGSIb3DQEFDTBKMCkGCSqGSIb3DQEFDDAcBAhTxzw+\" +\n+        \"VptrYAICCAAwDAYIKoZIhvcNAgkFADAdBglghkgBZQMEASoEEK9nSqc1I2t4tMVG\" +\n+        \"bWHpdtQEggTQzCwI7j34gCTvfj6nuOSndAjShGv7mN2j7WMV0pslTpq2b9Bn3vn1\" +\n+        \"Y0JMvL4E7sLrUzNU02pdOcfCnEpMFccNv2sQrLp1mOCKxu8OjSqHZLoKVL0ROVsZ\" +\n+        \"8dMECLLigDlPKRiSyLErl14tErX4\/zbkUaWMROO28kFbTbubQ8YoHlRUwsKW1xLg\" +\n+        \"vfi0gRkG\/zHXRfQHjX\/8NStv7hXlehn7\/Gy2EKPsRFhadm\/iUHAfmCMkMgHTU248\" +\n+        \"JER9+nsXltd59H+IeDpj\/kbxZ+YvHow9XUZKu828d3MQnUpLZ1BfJGhMBPVwbVUD\" +\n+        \"A40CiQBVdCoGtPJyalL28xoS3H0ILFCnwQOr6u0HwleNJPGHq78HUyH6Hwxnh0b0\" +\n+        \"5o163r6wTFZn5cMOxpbs\/Ttd+3TrxmrYpd2XnuRme3cnaYJ0ILvpc\/8eLLR7SKjD\" +\n+        \"T4JhZ0h\/CfcV2WWvhpQugkY0pWrZ+EIMneB1dZB96mJVLxOi148OeSgi0PsxZMNi\" +\n+        \"YM33rTpwQT5WqOsEyDwUQpne5b8Kkt\/s7EN0LJNnPyJJRL1LcqOdr6j+6YqRtPa7\" +\n+        \"a9oWJqMcuTP+bqzGRJh+3HDlFBw2Yzp9iadv4KmB2MzhStLUoi2MSjvnnkkd5Led\" +\n+        \"sshAd6WbKfF7kLAHQHT4Ai6dMEO4EKkEVF9JBtxCR4JEn6C98Lpg+Lk+rfY7gHOf\" +\n+        \"ZxtgGURwgXRY3aLUrdT55ZKgk3ExVKPzi5EhdpAau7JKhpOwyKozAp\/OKWMNrz6h\" +\n+        \"obu2Mbn1B+IA60psYHHxynBgsJHv7WQmbYh8HyGfHgVvaA8pZCYqxxjpLjSJrR8B\" +\n+        \"Bu9H9xkTh7KlhxgreXYv19uAYbUd95kcox9izad6VPnovgFSb+Omdy6PJACPj6hF\" +\n+        \"W6PJbucP0YPpO0VtWtQdZZ3df1P0hZ7qvKwOPFA+gKZSckgqASfygiP9V3Zc8jIi\" +\n+        \"wjNzoDM2QT+UUJKiiGYXJUEOO9hxzFHlGj759DcNRhpgl5AgR57ofISD9yBuCAJY\" +\n+        \"PQ\/aZHPFuRTrcVG3RaIbCAS73nEznKyFaLOXfzyfyaSmyhsH253tnyL1MejC+2bR\" +\n+        \"Eko\/yldgFUxvU5JI+Q3KJ6Awj+PnduHXx71E4UwSuu2xXYMpxnQwI6rroQpZBX82\" +\n+        \"HhqgcLV83P8lpzQwPdHjH5zkoxmWdC0+jU\/tcQfNXYpJdyoaX7tDmVclLhwl9ps\/\" +\n+        \"O841pIsNLJWXwvxG6B+3LN\/kw4QjwN194PopiOD7+oDm5mhttO78CrBrRxHMD\/0Q\" +\n+        \"qniZjKzSZepxlZq+J792u8vtMnuzzChxu0Bf3PhIXcJNcVhwUtr0yKe\/N+NvC0tm\" +\n+        \"p8wyik\/BlndxN9eKbdTOi2wIi64h2QG8nOk66wQ\/PSIJYwZl6eDNEQSzH\/1mGCfU\" +\n+        \"QnUT17UC\/p+Qgenf6Auap2GWlvsJrB7u\/pytz65rtjt\/ouo6Ih6EwWqwVVpGXZD0\" +\n+        \"7gVWH0Ke\/Vr6aPGNvkLcmftPuDZsn9jiig3guhdeyRVf10Ox369kKWcG75q77hxE\" +\n+        \"IzSzDyUlBNbnom9SIjut3r+qVYmWONatC6q\/4D0I42Lnjd3dEyZx7jmH3g\/S2ASM\" +\n+        \"FzWr9pvXc61dsYOkdZ4PYa9XPUZxXFagZsoS3F1sU799+IJVU0tC0MExJTAjBgkq\" +\n+        \"hkiG9w0BCRUxFgQUwWO5DorvVWYF3BWUmAw0rUEajScwfDBtMEkGCSqGSIb3DQEF\" +\n+        \"DjA8MCwGCSqGSIb3DQEFDDAfBAhvRzw4sC4xcwICCAACASAwDAYIKoZIhvcNAgkF\" +\n+        \"ADAMBggqhkiG9w0CCQUABCB6pW2FOdcCNj87zS64NUXG36K5aXDnFHctIk5Bf4kG\" +\n+        \"3QQITk9UIFVTRUQCAQE=\";\n+\n+    \/\/ A.2.  Valid PKCS #12 File with SHA-256 HMAC and SHA-512 PRF\n+    static final String A2 =\n+        \"MIIKigIBAzCCCgUGCSqGSIb3DQEHAaCCCfYEggnyMIIJ7jCCBGIGCSqGSIb3DQEH\" +\n+        \"BqCCBFMwggRPAgEAMIIESAYJKoZIhvcNAQcBMFcGCSqGSIb3DQEFDTBKMCkGCSqG\" +\n+        \"SIb3DQEFDDAcBAi4j6UBBY2iOgICCAAwDAYIKoZIhvcNAgkFADAdBglghkgBZQME\" +\n+        \"ASoEEFpHSS5zrk\/9pkDo1JRbtE6AggPgtbMLGoFd5KLpVXMdcxLrT129L7\/vCr0B\" +\n+        \"0I2tnhPPA7aFtRjjuGbwooCMQwxw9qzuCX1eH4xK2LUw6Gbd2H47WimSOWJMaiUb\" +\n+        \"wy4alIWELYufe74kXPmKPCyH92lN1hqu8s0EGhIl7nBhWbFzow1+qpIc9\/lpujJo\" +\n+        \"wodSY+pNBD8oBeoU1m6DgOjgc62apL7m0nwavDUqEt7HAqtTBxKxu\/3lpb1q8nbl\" +\n+        \"XLTqROax5feXErf+GQAqs24hUJIPg3O1eCMDVzH0h5pgZyRN9ZSIP0HC1i+d1lnb\" +\n+        \"JwHyrAhZv8GMdAVKaXHETbq8zTpxT3UE\/LmH1gyZGOG2B21D2dvNDKa712sHOS\/t\" +\n+        \"3XkFngHDLx+a9pVftt6p7Nh6jqI581tb7fyc7HBV9VUc\/+xGgPgHZouaZw+I3PUz\" +\n+        \"fjHboyLQer22ndBz+l1\/S2GhhZ4xLXg4l0ozkgn7DX92S\/UlbmcZam1apjGwkGY\/\" +\n+        \"7ktA8BarNW211mJF+Z+hci+BeDiM7eyEguLCYRdH+\/UBiUuYjG1hi5Ki3+42pRZD\" +\n+        \"FZkTHGOrcG6qE2KJDsENj+RkGiylG98v7flm4iWFVAB78AlAogT38Bod40evR7Ok\" +\n+        \"c48sOIW05eCH\/GLSO0MHKcttYUQNMqIDiG1TLzP1czFghhG97AxiTzYkKLx2cYfs\" +\n+        \"pgg5PE9drq1fNzBZMUmC2bSwRhGRb5PDu6meD8uqvjxoIIZQAEV53xmD63umlUH1\" +\n+        \"jhVXfcWSmhU\/+vV\/IWStZgQbwhF7DmH2q6S8itCkz7J7Byp5xcDiUOZ5Gpf9RJnk\" +\n+        \"DTZoOYM5iA8kte6KCwA+jnmCgstI5EbRbnsNcjNvAT3q\/X776VdmnehW0VeL+6k4\" +\n+        \"z+GvQkr+D2sxPpldIb5hrb+1rcp9nOQgtpBnbXaT16Lc1HdTNe5kx4ScujXOWwfd\" +\n+        \"Iy6bR6H0QFq2SLKAAC0qw4E8h1j3WPxll9e0FXNtoRKdsRuX3jzyqDBrQ6oGskkL\" +\n+        \"wnyMtVjSX+3c9xbFc4vyJPFMPwb3Ng3syjUDrOpU5RxaMEAWt4josadWKEeyIC2F\" +\n+        \"wrS1dzFn\/5wv1g7E7xWq+nLq4zdppsyYOljzNUbhOEtJ2lhme3NJ45fxnxXmrPku\" +\n+        \"gBda1lLf29inVuzuTjwtLjQwGk+usHJm9R\/K0hTaSNRgepXnjY0cIgS+0gEY1\/BW\" +\n+        \"k3+Y4GE2JXds2cQToe5rCSYH3QG0QTyUAGvwX6hAlhrRRgUG3vxtYSixQ3UUuwzs\" +\n+        \"eQW2SUFLl1611lJ7cQwFSPyr0sL0p81vdxWiigwjkfPtgljZ2QpmzR5rX2xiqItH\" +\n+        \"Dy4E+iVigIYwggWEBgkqhkiG9w0BBwGgggV1BIIFcTCCBW0wggVpBgsqhkiG9w0B\" +\n+        \"DAoBAqCCBTEwggUtMFcGCSqGSIb3DQEFDTBKMCkGCSqGSIb3DQEFDDAcBAhDiwsh\" +\n+        \"4wt3aAICCAAwDAYIKoZIhvcNAgkFADAdBglghkgBZQMEASoEELNFnEpJT65wsXwd\" +\n+        \"fZ1g56cEggTQRo04bP\/fWfPPZrTEczq1qO1HHV86j76Sgxau2WQ9OQAG998HFtNq\" +\n+        \"NxO8R66en6QFhqpWCI73tSJD+oA29qOsT+Xt2bR2z5+K7D4QoiXuLa3gXv62VkjB\" +\n+        \"0DLCHAS7Mu+hkp5OKCpXCS7fo0OnAiQjM4EluAsiwwLrHu7z1E16UwpmlgKQnaC1\" +\n+        \"S44fV9znS9TxofRTnuCq1lupdn2qQjSydOU6inQeKLBflKRiLrJHOobaFmjWwp1U\" +\n+        \"OQAMuZrALhHyIbOFXMPYk3mmU\/1UPuRGcbcV5v2Ut2UME+WYExXSCOYR3\/R4UfVk\" +\n+        \"IfEzeRPFs2slJMIDS2fmMyFkEEElBckhKO9IzhQV3koeKUBdM066ufyax\/uIyXPm\" +\n+        \"MiB9fAqbQQ4jkQTT80bKkBAP1Bvyg2L8BssstR5iCoZgWnfA9Uz4RI5GbRqbCz7H\" +\n+        \"iSkuOIowEqOox3IWbXty5VdWBXNjZBHpbE0CyMLSH\/4QdGVw8R0DiCAC0mmaMaZq\" +\n+        \"32yrBR32E472N+2KaicvX31MwB\/LkZN46c34TGanL5LJZx0DR6ITjdNgP8TlSSrp\" +\n+        \"7y2mqi7VbKp\/C\/28Cj5r+m++Gk6EOUpLHsZ2d2hthrr7xqoPzUAEkkyYWedHJaoQ\" +\n+        \"TkoIisZb0MGlXb9thjQ8Ee429ekfjv7CQfSDS6KTE\/+mhuJ33mPz1ZcIacHjdHhE\" +\n+        \"6rbrKhjSrLbgmrGa8i7ezd89T4EONu0wkG9KW0wM2cn5Gb12PF6rxjTfzypG7a50\" +\n+        \"yc1IJ2Wrm0B7gGuYpVoCeIohr7IlxPYdeQGRO\/SlzTd0xYaJVm9FzJaMNK0ZqnZo\" +\n+        \"QMEPaeq8PC3kMjpa8eAiHXk9K3DWdOWYviGVCPVYIZK6Cpwe+EwfXs+2hZgZlYzc\" +\n+        \"vpUWg60md1PD4UsyLQagaj37ubR6K4C4mzlhFx5NovV\/C\/KD+LgekMbjCtwEQeWy\" +\n+        \"agev2l9KUEz73\/BT4TgQFM5K2qZpVamwmsOmldPpekGPiUCu5YxYg\/y4jUKvAqj1\" +\n+        \"S9t4wUAScCJx8OvXUfgpmS2+mhFPBiFps0M4O3nWG91Q6mKMqbNHPUcFDn9P7cUh\" +\n+        \"s1xu3NRLyJ+QIfVfba3YBTV8A6WBYEmL9lxf1uL1WS2Bx6+Crh0keyNUPo9cRjpx\" +\n+        \"1oj\/xkInoc2HQODEkvuK9DD7VrLr7sDhfmJvr1mUfJMQ5\/THk7Z+E+NAuMdMtkM2\" +\n+        \"yKXxghZAbBrQkU3mIW150i7PsjlUw0o0\/LJvQwJIsh6yeJDHY8mby9mIdeP3LQAF\" +\n+        \"clYKzNwmgwbdtmVAXmQxLuhmEpXfstIzkBrNJzChzb2onNSfa+r5L6XEHNHl7wCw\" +\n+        \"TuuV\/JWldNuYXLfVfuv3msfSjSWkv6aRtRWIvmOv0Qba2o05LlwFMd1PzKM5uN4D\" +\n+        \"DYtsS9A6yQOXEsvUkWcLOJnCs8SkJRdXhJTxdmzeBqM1JttKwLbgGMbpjbxlg3ns\" +\n+        \"N+Z+sEFox+2ZWOglgnBHj0mCZOiAC8wqUu+sxsLT4WndaPWKVqoRQChvDaZaNOaN\" +\n+        \"qHciF9HPUcfZow+fH8TnSHneiQcDe6XcMhSaQ2MtpY8\/jrgNKguZt22yH9gw\/VpT\" +\n+        \"3\/QOB7FBgKFIEbvUaf3nVjFIlryIheg+LeiBd2isoMNNXaBwcg2YXukxJTAjBgkq\" +\n+        \"hkiG9w0BCRUxFgQUwWO5DorvVWYF3BWUmAw0rUEajScwfDBtMEkGCSqGSIb3DQEF\" +\n+        \"DjA8MCwGCSqGSIb3DQEFDDAfBAgUr2yP+\/DBrgICCAACASAwDAYIKoZIhvcNAgsF\" +\n+        \"ADAMBggqhkiG9w0CCQUABCA5zFL93jw8ItGlcbHKhqkNwbgpp6layuOuxSju4\/Vd\" +\n+        \"6QQITk9UIFVTRUQCAQE=\";\n+\n+    \/\/ A.3.  Valid PKCS #12 File with SHA-512 HMAC and PRF\n+    static final String A3 =\n+        \"MIIKrAIBAzCCCgUGCSqGSIb3DQEHAaCCCfYEggnyMIIJ7jCCBGIGCSqGSIb3DQEH\" +\n+        \"BqCCBFMwggRPAgEAMIIESAYJKoZIhvcNAQcBMFcGCSqGSIb3DQEFDTBKMCkGCSqG\" +\n+        \"SIb3DQEFDDAcBAisrqL8obSBaQICCAAwDAYIKoZIhvcNAgkFADAdBglghkgBZQME\" +\n+        \"ASoEECjXYYca0pwsgn1Imb9WqFGAggPgT7RcF5YzEJANZU9G3tSdpCHnyWatTlhm\" +\n+        \"iCEcBGgwI5gz0+GoX+JCojgYY4g+KxeqznyCu+6GeD00T4Em7SWme9nzAfBFzng0\" +\n+        \"3lYCSnahSEKfgHerbzAtq9kgXkclPVk0Liy92\/buf0Mqotjjs\/5o78AqP86Pwbj8\" +\n+        \"xYNuXOU1ivO0JiW2c2HefKYvUvMYlOh99LCoZPLHPkaaZ4scAwDjFeTICU8oowVk\" +\n+        \"LKvslrg1pHbfmXHMFJ4yqub37hRtj2CoJNy4+UA2hBYlBi9WnuAJIsjv0qS3kpLe\" +\n+        \"4+J2DGe31GNG8pD01XD0l69OlailK1ykh4ap2u0KeD2z357+trCFbpWMMXQcSUCO\" +\n+        \"OcVjxYqgv\/l1++9huOHoPSt224x4wZfJ7cO2zbAAx\/K2CPhdvi4CBaDHADsRq\/c8\" +\n+        \"SAi+LX5SCocGT51zL5KQD6pnr2ExaVum+U8a3nMPPMv9R2MfFUksYNGgFvS+lcZf\" +\n+        \"R3qk\/G9iXtSgray0mwRA8pWzoXl43vc9HJuuCU+ryOc\/h36NChhQ9ltivUNaiUc2\" +\n+        \"b9AAQSrZD8Z7KtxjbH3noS+gjDtimDB0Uh199zaCwQ95y463zdYsNCESm1OT979o\" +\n+        \"Y+81BWFMFM\/Hog5s7Ynhoi2E9+ZlyLK2UeKwvWjGzvcdPvxHR+5l\/h6PyWROlpaZ\" +\n+        \"zmzZBm+NKmbXtMD2AEa5+Q32ZqJQhijXZyIji3NS65y81j\/a1ZrvU0lOVKA+MSPN\" +\n+        \"KU27\/eKZuF1LEL6qaazTUmpznLLdaVQy5aZ1qz5dyCziKcuHIclhh+RCblHU6XdE\" +\n+        \"6pUTZSRQQiGUIkPUTnU9SFlZc7VwvxgeynLyXPCSzOKNWYGajy1LxDvv28uhMgNd\" +\n+        \"WF51bNkl1QYl0fNunGO7YFt4wk+g7CQ\/Yu2w4P7S3ZLMw0g4eYclcvyIMt4vxXfp\" +\n+        \"VTKIPyzMqLr+0dp1eCPm8fIdaBZUhMUC\/OVqLwgnPNY9cXCrn2R1cGKo5LtvtjbH\" +\n+        \"2skz\/D5DIOErfZSBJ8LE3De4j8MAjOeC8ia8LaM4PNfW\/noQP1LBsZtTDTqEy01N\" +\n+        \"Z5uliIocyQzlyWChErJv\/Wxh+zBpbk1iXc2Owmh2GKjx0VSe7XbiqdoKkONUNUIE\" +\n+        \"siseASiU\/oXdJYUnBYVEUDJ1HPz7qnKiFhSgxNJZnoPfzbbx1hEzV+wxQqNnWIqQ\" +\n+        \"U0s7Jt22wDBzPBHGao2tnGRLuBZWVePJGbsxThGKwrf3vYsNJTxme5KJiaxcPMwE\" +\n+        \"r+ln2AqVOzzXHXgIxv\/dvK0Qa7pH3AvGzcFjQChTRipgqiRrLor0\/\/8580h+Ly2l\" +\n+        \"IFo7bCuztmcwggWEBgkqhkiG9w0BBwGgggV1BIIFcTCCBW0wggVpBgsqhkiG9w0B\" +\n+        \"DAoBAqCCBTEwggUtMFcGCSqGSIb3DQEFDTBKMCkGCSqGSIb3DQEFDDAcBAi1c7S5\" +\n+        \"IEG77wICCAAwDAYIKoZIhvcNAgkFADAdBglghkgBZQMEASoEEN6rzRtIdYxqOnY+\" +\n+        \"aDS3AFYEggTQNdwUoZDXCryOFBUI\/z71vfoyAxlnwJLRHNXQUlI7w0KkH22aNnSm\" +\n+        \"xiaXHoCP1HgcmsYORS7p\/ITi\/9atCHqnGR4zHmePNhoMpNHFehdjlUUWgt004vUJ\" +\n+        \"5ZwTdXweM+K4We6CfWA\/tyvsyGNAsuunel+8243Zsv0mGLKpjA+ZyALt51s0knmX\" +\n+        \"OD2DW49FckImUVnNC5LmvEIAmVC\/ZNycryZQI+2EBkJKe+BC3834GexJnSwtUBg3\" +\n+        \"Xg33ZV7X66kw8tK1Ws5zND5GQAJyIu47mnjZkIWQBY+XbWowrBZ8uXIQuxMZC0p8\" +\n+        \"u62oIAtZaVQoVTR1LyR\/7PISFW6ApwtbTn6uQxsb16qF8lEM0S1+x0AfJY6Zm11t\" +\n+        \"yCqbb2tYZF+X34MoUkR\/IYC\/KCq\/KJdpnd8Yqgfrwjg8dR2WGIxbp2GBHq6BK\/DI\" +\n+        \"ehOLMcLcsOuP0DEXppfcelMOGNIs+4h4KsjWiHVDMPsqLdozBdm6FLGcno3lY5FO\" +\n+        \"+avVrlElAOB+9evgaBbD2lSrEMoOjAoD090tgXXwYBEnWnIpdk+56cf5IpshrLBA\" +\n+        \"\/+H13LBLes+X1o5dd0Mu+3abp5RtAv7zLPRRtXkDYJPzgNcTvJ2Wxw2C+zrAclzZ\" +\n+        \"7IRdcLESUa4CsN01aEvQgOtkCNVjSCtkJGP0FstsWM4hP7lfSB7P2tDL+ugy6GvB\" +\n+        \"X1sz9fMC7QMAFL98nDm\/yqcnejG1BcQXZho8n0svSfbcVByGlPZGMuI9t25+0B2M\" +\n+        \"TAx0f6zoD8+fFmhcVgS6MQPybGKFawckYl0zulsePqs+G4voIW17owGKsRiv06Jm\" +\n+        \"ZSwd3KoGmjM49ADzuG9yrQ5PSa0nhVk1tybNape4HNYHrAmmN0ILlN+E0Bs\/Edz4\" +\n+        \"ntYZuoc\/Z35tCgm79dV4\/Vl6HUZ1JrLsLrEWCByVytwVFyf3\/MwTWdf+Ac+XzBuC\" +\n+        \"yEMqPlvnPWswdnaid35pxios79fPl1Hr0\/Q6+DoA5GyYq8SFdP7EYLrGMGa5GJ+x\" +\n+        \"5nS7z6U4UmZ2sXuKYHnuhB0zi6Y04a+fhT71x02eTeC7aPlEB319UqysujJVJnso\" +\n+        \"bkcwOu\/Jj0Is9YeFd693dB44xeZuYyvlwoD19lqcim0TSa2Tw7D1W\/yu47dKrVP2\" +\n+        \"VKxRqomuAQOpoZiuSfq1\/7ysrV8U4hIlIU2vnrSVJ8EtPQKsoBW5l70dQGwXyxBk\" +\n+        \"BUTHqfJ4LG\/kPGRMOtUzgqFw2DjJtbym1q1MZgp2ycMon4vp7DeQLGs2XfEANB+Y\" +\n+        \"nRwtjpevqAnIuK6K3Y02LY4FXTNQpC37Xb04bmdIQAcE0MaoP4\/hY87aS82PQ68g\" +\n+        \"3bI79uKo4we2g+WaEJlEzQ7147ZzV2wbDq89W69x1MWTfaDwlEtd4UaacYchAv7B\" +\n+        \"TVaaVFiRAUywWaHGePpZG2WV1feH\/zd+temxWR9qMFgBZySg1jipBPVciwl0LqlW\" +\n+        \"s\/raIBYmLmAaMMgM3759UkNVznDoFHrY4z2EADXp0RHHVzJS1x+yYvp\/9I+AcW55\" +\n+        \"oN0UP\/3uQ6eyz\/ix22sovQwhMJ8rmgR6CfyRPKmXu1RPK3puNv7mbFTfTXpYN2vX\" +\n+        \"vhEZReXY8hJF\/9o4G3UrJ1F0MgUHMCG86cw1z0bhPSaXVoufOnx\/fRoxJTAjBgkq\" +\n+        \"hkiG9w0BCRUxFgQUwWO5DorvVWYF3BWUmAw0rUEajScwgZ0wgY0wSQYJKoZIhvcN\" +\n+        \"AQUOMDwwLAYJKoZIhvcNAQUMMB8ECFDaXOUaOcUPAgIIAAIBQDAMBggqhkiG9w0C\" +\n+        \"CwUAMAwGCCqGSIb3DQILBQAEQHIAM8C9OAsHUCj9CmOJioqf7YwD4O\/b3UiZ3Wqo\" +\n+        \"F6OmQIRDc68SdkZJ6024l4nWlnhTE7a4lb2Tru4k3NOTa1oECE5PVCBVU0VEAgEB\";\n+\n+    \/\/ Invalid PKCS #12 File with Incorrect Iteration Count\n+    static final String A4 =\n+        \"MIIKiwIBAzCCCgUGCSqGSIb3DQEHAaCCCfYEggnyMIIJ7jCCBGIGCSqGSIb3DQEH\" +\n+        \"BqCCBFMwggRPAgEAMIIESAYJKoZIhvcNAQcBMFcGCSqGSIb3DQEFDTBKMCkGCSqG\" +\n+        \"SIb3DQEFDDAcBAg9pxXxY2yscwICCAAwDAYIKoZIhvcNAgkFADAdBglghkgBZQME\" +\n+        \"ASoEEK7yYaFQDi1pYwWzm9F\/fs+AggPgFIT2XapyaFgDppdvLkdvaF3HXw+zjzKb\" +\n+        \"7xFC76DtVPhVTWVHD+kIss+jsj+XyvMwY0aCuAhAG\/Dig+vzWomnsqB5ssw5\/kTb\" +\n+        \"+TMQ5PXLkNeoBmB6ArKeGc\/QmCBQvQG\/a6b+nXSWmxNpP+71772dmWmB8gcSJ0kF\" +\n+        \"Fj75NrIbmNiDMCb71Q8gOzBMFf6BpXf\/3xWAJtxyic+tSNETfOJa8zTZb0+lV0w9\" +\n+        \"5eUmDrPUpuxEVbb0KJtIc63gRkcfrPtDd6Ii4Zzbzj2Evr4\/S4hnrQBsiryVzJWy\" +\n+        \"IEjaD0y6+DmG0JwMgRuGi1wBoGowi37GMrDCOyOZWC4n5wHLtYyhR6JaElxbrhxP\" +\n+        \"H46z2USLKmZoF+YgEQgYcSBXMgP0t36+XQocFWYi2N5niy02TnctwF430FYsQlhJ\" +\n+        \"Suma4I33E808dJuMv8T\/soF66HsD4Zj46hOf4nWmas7IaoSAbGKXgIa7KhGRJvij\" +\n+        \"xM3WOX0aqNi\/8bhnxSA7fCmIy\/7opyx5UYJFWGBSmHP1pBHBVmx7Ad8SAsB9MSsh\" +\n+        \"nbGjGiUk4h0QcOi29\/M9WwFlo4urePyI8PK2qtVAmpD3rTLlsmgzguZ69L0Q\/CFU\" +\n+        \"fbtqsMF0bgEuh8cfivd1DYFABEt1gypuwCUtCqQ7AXK2nQqOjsQCxVz9i9K8NDeD\" +\n+        \"aau98VAl0To2sk3\/VR\/QUq0PRwU1jPN5BzUevhE7SOy\/ImuJKwpGqqFljYdrQmj5\" +\n+        \"jDe+LmYH9QGVRlfN8zuU+48FY8CAoeBeHn5AAPml0PYPVUnt3\/jQN1+v+CahNVI+\" +\n+        \"La8q1Nen+j1R44aa2I3y\/pUgtzXRwK+tPrxTQbG030EU51LYJn8amPWmn3w75ZIA\" +\n+        \"MJrXWeKj44de7u4zdUsEBVC2uM44rIHM8MFjyYAwYsey0rcp0emsaxzar+7ZA67r\" +\n+        \"lDoXvvS3NqsnTXHcn3T9tkPRoee6L7Dh3x4Od96lcRwgdYT5BwyH7e34ld4VTUmJ\" +\n+        \"bDEq7Ijvn4JKrwQJh1RCC+Z\/ObfkC42xAm7G010u3g08xB0Qujpdg4a7VcuWrywF\" +\n+        \"c7hLNquuaF4qoDaVwYXHH3iuX6YlJ\/3siTKbYCVXPEZOAMBP9lF\/OU76UMJBQNfU\" +\n+        \"0xjDx+3AhUVgnGuCsmYlK6ETDp8qOZKGyV0KrNSGtqLx3uMhd7PETeW+ML3tDQ\/0\" +\n+        \"X9fMkcZHi4C2fXnoHV\/qa2dGhBj4jjQ0Xh1poU6mxGn2Mebe2hDsBZkkBpnn7pK4\" +\n+        \"wP\/VqXdQTwqEuvzGHLVFsCuADe40ZFBmtBrf70wG7ZkO8SUZ8Zz1IX3+S024g7yj\" +\n+        \"QRev\/6x6TtkwggWEBgkqhkiG9w0BBwGgggV1BIIFcTCCBW0wggVpBgsqhkiG9w0B\" +\n+        \"DAoBAqCCBTEwggUtMFcGCSqGSIb3DQEFDTBKMCkGCSqGSIb3DQEFDDAcBAhTxzw+\" +\n+        \"VptrYAICCAAwDAYIKoZIhvcNAgkFADAdBglghkgBZQMEASoEEK9nSqc1I2t4tMVG\" +\n+        \"bWHpdtQEggTQzCwI7j34gCTvfj6nuOSndAjShGv7mN2j7WMV0pslTpq2b9Bn3vn1\" +\n+        \"Y0JMvL4E7sLrUzNU02pdOcfCnEpMFccNv2sQrLp1mOCKxu8OjSqHZLoKVL0ROVsZ\" +\n+        \"8dMECLLigDlPKRiSyLErl14tErX4\/zbkUaWMROO28kFbTbubQ8YoHlRUwsKW1xLg\" +\n+        \"vfi0gRkG\/zHXRfQHjX\/8NStv7hXlehn7\/Gy2EKPsRFhadm\/iUHAfmCMkMgHTU248\" +\n+        \"JER9+nsXltd59H+IeDpj\/kbxZ+YvHow9XUZKu828d3MQnUpLZ1BfJGhMBPVwbVUD\" +\n+        \"A40CiQBVdCoGtPJyalL28xoS3H0ILFCnwQOr6u0HwleNJPGHq78HUyH6Hwxnh0b0\" +\n+        \"5o163r6wTFZn5cMOxpbs\/Ttd+3TrxmrYpd2XnuRme3cnaYJ0ILvpc\/8eLLR7SKjD\" +\n+        \"T4JhZ0h\/CfcV2WWvhpQugkY0pWrZ+EIMneB1dZB96mJVLxOi148OeSgi0PsxZMNi\" +\n+        \"YM33rTpwQT5WqOsEyDwUQpne5b8Kkt\/s7EN0LJNnPyJJRL1LcqOdr6j+6YqRtPa7\" +\n+        \"a9oWJqMcuTP+bqzGRJh+3HDlFBw2Yzp9iadv4KmB2MzhStLUoi2MSjvnnkkd5Led\" +\n+        \"sshAd6WbKfF7kLAHQHT4Ai6dMEO4EKkEVF9JBtxCR4JEn6C98Lpg+Lk+rfY7gHOf\" +\n+        \"ZxtgGURwgXRY3aLUrdT55ZKgk3ExVKPzi5EhdpAau7JKhpOwyKozAp\/OKWMNrz6h\" +\n+        \"obu2Mbn1B+IA60psYHHxynBgsJHv7WQmbYh8HyGfHgVvaA8pZCYqxxjpLjSJrR8B\" +\n+        \"Bu9H9xkTh7KlhxgreXYv19uAYbUd95kcox9izad6VPnovgFSb+Omdy6PJACPj6hF\" +\n+        \"W6PJbucP0YPpO0VtWtQdZZ3df1P0hZ7qvKwOPFA+gKZSckgqASfygiP9V3Zc8jIi\" +\n+        \"wjNzoDM2QT+UUJKiiGYXJUEOO9hxzFHlGj759DcNRhpgl5AgR57ofISD9yBuCAJY\" +\n+        \"PQ\/aZHPFuRTrcVG3RaIbCAS73nEznKyFaLOXfzyfyaSmyhsH253tnyL1MejC+2bR\" +\n+        \"Eko\/yldgFUxvU5JI+Q3KJ6Awj+PnduHXx71E4UwSuu2xXYMpxnQwI6rroQpZBX82\" +\n+        \"HhqgcLV83P8lpzQwPdHjH5zkoxmWdC0+jU\/tcQfNXYpJdyoaX7tDmVclLhwl9ps\/\" +\n+        \"O841pIsNLJWXwvxG6B+3LN\/kw4QjwN194PopiOD7+oDm5mhttO78CrBrRxHMD\/0Q\" +\n+        \"qniZjKzSZepxlZq+J792u8vtMnuzzChxu0Bf3PhIXcJNcVhwUtr0yKe\/N+NvC0tm\" +\n+        \"p8wyik\/BlndxN9eKbdTOi2wIi64h2QG8nOk66wQ\/PSIJYwZl6eDNEQSzH\/1mGCfU\" +\n+        \"QnUT17UC\/p+Qgenf6Auap2GWlvsJrB7u\/pytz65rtjt\/ouo6Ih6EwWqwVVpGXZD0\" +\n+        \"7gVWH0Ke\/Vr6aPGNvkLcmftPuDZsn9jiig3guhdeyRVf10Ox369kKWcG75q77hxE\" +\n+        \"IzSzDyUlBNbnom9SIjut3r+qVYmWONatC6q\/4D0I42Lnjd3dEyZx7jmH3g\/S2ASM\" +\n+        \"FzWr9pvXc61dsYOkdZ4PYa9XPUZxXFagZsoS3F1sU799+IJVU0tC0MExJTAjBgkq\" +\n+        \"hkiG9w0BCRUxFgQUwWO5DorvVWYF3BWUmAw0rUEajScwfTBtMEkGCSqGSIb3DQEF\" +\n+        \"DjA8MCwGCSqGSIb3DQEFDDAfBAhvRzw4sC4xcwICCAECASAwDAYIKoZIhvcNAgkF\" +\n+        \"ADAMBggqhkiG9w0CCQUABCB6pW2FOdcCNj87zS64NUXG36K5aXDnFHctIk5Bf4kG\" +\n+        \"3QQITk9UIFVTRUQCAggA\";\n+\n+    \/\/ A.5. Invalid PKCS #12 File with Incorrect Salt\n+    static final String A5 =\n+        \"MIIKigIBAzCCCgUGCSqGSIb3DQEHAaCCCfYEggnyMIIJ7jCCBGIGCSqGSIb3DQEH\" +\n+        \"BqCCBFMwggRPAgEAMIIESAYJKoZIhvcNAQcBMFcGCSqGSIb3DQEFDTBKMCkGCSqG\" +\n+        \"SIb3DQEFDDAcBAg9pxXxY2yscwICCAAwDAYIKoZIhvcNAgkFADAdBglghkgBZQME\" +\n+        \"ASoEEK7yYaFQDi1pYwWzm9F\/fs+AggPgFIT2XapyaFgDppdvLkdvaF3HXw+zjzKb\" +\n+        \"7xFC76DtVPhVTWVHD+kIss+jsj+XyvMwY0aCuAhAG\/Dig+vzWomnsqB5ssw5\/kTb\" +\n+        \"+TMQ5PXLkNeoBmB6ArKeGc\/QmCBQvQG\/a6b+nXSWmxNpP+71772dmWmB8gcSJ0kF\" +\n+        \"Fj75NrIbmNiDMCb71Q8gOzBMFf6BpXf\/3xWAJtxyic+tSNETfOJa8zTZb0+lV0w9\" +\n+        \"5eUmDrPUpuxEVbb0KJtIc63gRkcfrPtDd6Ii4Zzbzj2Evr4\/S4hnrQBsiryVzJWy\" +\n+        \"IEjaD0y6+DmG0JwMgRuGi1wBoGowi37GMrDCOyOZWC4n5wHLtYyhR6JaElxbrhxP\" +\n+        \"H46z2USLKmZoF+YgEQgYcSBXMgP0t36+XQocFWYi2N5niy02TnctwF430FYsQlhJ\" +\n+        \"Suma4I33E808dJuMv8T\/soF66HsD4Zj46hOf4nWmas7IaoSAbGKXgIa7KhGRJvij\" +\n+        \"xM3WOX0aqNi\/8bhnxSA7fCmIy\/7opyx5UYJFWGBSmHP1pBHBVmx7Ad8SAsB9MSsh\" +\n+        \"nbGjGiUk4h0QcOi29\/M9WwFlo4urePyI8PK2qtVAmpD3rTLlsmgzguZ69L0Q\/CFU\" +\n+        \"fbtqsMF0bgEuh8cfivd1DYFABEt1gypuwCUtCqQ7AXK2nQqOjsQCxVz9i9K8NDeD\" +\n+        \"aau98VAl0To2sk3\/VR\/QUq0PRwU1jPN5BzUevhE7SOy\/ImuJKwpGqqFljYdrQmj5\" +\n+        \"jDe+LmYH9QGVRlfN8zuU+48FY8CAoeBeHn5AAPml0PYPVUnt3\/jQN1+v+CahNVI+\" +\n+        \"La8q1Nen+j1R44aa2I3y\/pUgtzXRwK+tPrxTQbG030EU51LYJn8amPWmn3w75ZIA\" +\n+        \"MJrXWeKj44de7u4zdUsEBVC2uM44rIHM8MFjyYAwYsey0rcp0emsaxzar+7ZA67r\" +\n+        \"lDoXvvS3NqsnTXHcn3T9tkPRoee6L7Dh3x4Od96lcRwgdYT5BwyH7e34ld4VTUmJ\" +\n+        \"bDEq7Ijvn4JKrwQJh1RCC+Z\/ObfkC42xAm7G010u3g08xB0Qujpdg4a7VcuWrywF\" +\n+        \"c7hLNquuaF4qoDaVwYXHH3iuX6YlJ\/3siTKbYCVXPEZOAMBP9lF\/OU76UMJBQNfU\" +\n+        \"0xjDx+3AhUVgnGuCsmYlK6ETDp8qOZKGyV0KrNSGtqLx3uMhd7PETeW+ML3tDQ\/0\" +\n+        \"X9fMkcZHi4C2fXnoHV\/qa2dGhBj4jjQ0Xh1poU6mxGn2Mebe2hDsBZkkBpnn7pK4\" +\n+        \"wP\/VqXdQTwqEuvzGHLVFsCuADe40ZFBmtBrf70wG7ZkO8SUZ8Zz1IX3+S024g7yj\" +\n+        \"QRev\/6x6TtkwggWEBgkqhkiG9w0BBwGgggV1BIIFcTCCBW0wggVpBgsqhkiG9w0B\" +\n+        \"DAoBAqCCBTEwggUtMFcGCSqGSIb3DQEFDTBKMCkGCSqGSIb3DQEFDDAcBAhTxzw+\" +\n+        \"VptrYAICCAAwDAYIKoZIhvcNAgkFADAdBglghkgBZQMEASoEEK9nSqc1I2t4tMVG\" +\n+        \"bWHpdtQEggTQzCwI7j34gCTvfj6nuOSndAjShGv7mN2j7WMV0pslTpq2b9Bn3vn1\" +\n+        \"Y0JMvL4E7sLrUzNU02pdOcfCnEpMFccNv2sQrLp1mOCKxu8OjSqHZLoKVL0ROVsZ\" +\n+        \"8dMECLLigDlPKRiSyLErl14tErX4\/zbkUaWMROO28kFbTbubQ8YoHlRUwsKW1xLg\" +\n+        \"vfi0gRkG\/zHXRfQHjX\/8NStv7hXlehn7\/Gy2EKPsRFhadm\/iUHAfmCMkMgHTU248\" +\n+        \"JER9+nsXltd59H+IeDpj\/kbxZ+YvHow9XUZKu828d3MQnUpLZ1BfJGhMBPVwbVUD\" +\n+        \"A40CiQBVdCoGtPJyalL28xoS3H0ILFCnwQOr6u0HwleNJPGHq78HUyH6Hwxnh0b0\" +\n+        \"5o163r6wTFZn5cMOxpbs\/Ttd+3TrxmrYpd2XnuRme3cnaYJ0ILvpc\/8eLLR7SKjD\" +\n+        \"T4JhZ0h\/CfcV2WWvhpQugkY0pWrZ+EIMneB1dZB96mJVLxOi148OeSgi0PsxZMNi\" +\n+        \"YM33rTpwQT5WqOsEyDwUQpne5b8Kkt\/s7EN0LJNnPyJJRL1LcqOdr6j+6YqRtPa7\" +\n+        \"a9oWJqMcuTP+bqzGRJh+3HDlFBw2Yzp9iadv4KmB2MzhStLUoi2MSjvnnkkd5Led\" +\n+        \"sshAd6WbKfF7kLAHQHT4Ai6dMEO4EKkEVF9JBtxCR4JEn6C98Lpg+Lk+rfY7gHOf\" +\n+        \"ZxtgGURwgXRY3aLUrdT55ZKgk3ExVKPzi5EhdpAau7JKhpOwyKozAp\/OKWMNrz6h\" +\n+        \"obu2Mbn1B+IA60psYHHxynBgsJHv7WQmbYh8HyGfHgVvaA8pZCYqxxjpLjSJrR8B\" +\n+        \"Bu9H9xkTh7KlhxgreXYv19uAYbUd95kcox9izad6VPnovgFSb+Omdy6PJACPj6hF\" +\n+        \"W6PJbucP0YPpO0VtWtQdZZ3df1P0hZ7qvKwOPFA+gKZSckgqASfygiP9V3Zc8jIi\" +\n+        \"wjNzoDM2QT+UUJKiiGYXJUEOO9hxzFHlGj759DcNRhpgl5AgR57ofISD9yBuCAJY\" +\n+        \"PQ\/aZHPFuRTrcVG3RaIbCAS73nEznKyFaLOXfzyfyaSmyhsH253tnyL1MejC+2bR\" +\n+        \"Eko\/yldgFUxvU5JI+Q3KJ6Awj+PnduHXx71E4UwSuu2xXYMpxnQwI6rroQpZBX82\" +\n+        \"HhqgcLV83P8lpzQwPdHjH5zkoxmWdC0+jU\/tcQfNXYpJdyoaX7tDmVclLhwl9ps\/\" +\n+        \"O841pIsNLJWXwvxG6B+3LN\/kw4QjwN194PopiOD7+oDm5mhttO78CrBrRxHMD\/0Q\" +\n+        \"qniZjKzSZepxlZq+J792u8vtMnuzzChxu0Bf3PhIXcJNcVhwUtr0yKe\/N+NvC0tm\" +\n+        \"p8wyik\/BlndxN9eKbdTOi2wIi64h2QG8nOk66wQ\/PSIJYwZl6eDNEQSzH\/1mGCfU\" +\n+        \"QnUT17UC\/p+Qgenf6Auap2GWlvsJrB7u\/pytz65rtjt\/ouo6Ih6EwWqwVVpGXZD0\" +\n+        \"7gVWH0Ke\/Vr6aPGNvkLcmftPuDZsn9jiig3guhdeyRVf10Ox369kKWcG75q77hxE\" +\n+        \"IzSzDyUlBNbnom9SIjut3r+qVYmWONatC6q\/4D0I42Lnjd3dEyZx7jmH3g\/S2ASM\" +\n+        \"FzWr9pvXc61dsYOkdZ4PYa9XPUZxXFagZsoS3F1sU799+IJVU0tC0MExJTAjBgkq\" +\n+        \"hkiG9w0BCRUxFgQUwWO5DorvVWYF3BWUmAw0rUEajScwfDBtMEkGCSqGSIb3DQEF\" +\n+        \"DjA8MCwGCSqGSIb3DQEFDDAfBAhOT1QgVVNFRAICCAACASAwDAYIKoZIhvcNAgkF\" +\n+        \"ADAMBggqhkiG9w0CCQUABCB6pW2FOdcCNj87zS64NUXG36K5aXDnFHctIk5Bf4kG\" +\n+        \"3QQIb0c8OLAuMXMCAQE=\";\n+\n+    \/\/ A.6.  Invalid PKCS #12 File with Missing Key Length\n+    static final String A6 =\n+        \"MIIKiAIBAzCCCgUGCSqGSIb3DQEHAaCCCfYEggnyMIIJ7jCCBGIGCSqGSIb3DQEH\" +\n+        \"BqCCBFMwggRPAgEAMIIESAYJKoZIhvcNAQcBMFcGCSqGSIb3DQEFDTBKMCkGCSqG\" +\n+        \"SIb3DQEFDDAcBAg9pxXxY2yscwICCAAwDAYIKoZIhvcNAgkFADAdBglghkgBZQME\" +\n+        \"ASoEEK7yYaFQDi1pYwWzm9F\/fs+AggPgFIT2XapyaFgDppdvLkdvaF3HXw+zjzKb\" +\n+        \"7xFC76DtVPhVTWVHD+kIss+jsj+XyvMwY0aCuAhAG\/Dig+vzWomnsqB5ssw5\/kTb\" +\n+        \"+TMQ5PXLkNeoBmB6ArKeGc\/QmCBQvQG\/a6b+nXSWmxNpP+71772dmWmB8gcSJ0kF\" +\n+        \"Fj75NrIbmNiDMCb71Q8gOzBMFf6BpXf\/3xWAJtxyic+tSNETfOJa8zTZb0+lV0w9\" +\n+        \"5eUmDrPUpuxEVbb0KJtIc63gRkcfrPtDd6Ii4Zzbzj2Evr4\/S4hnrQBsiryVzJWy\" +\n+        \"IEjaD0y6+DmG0JwMgRuGi1wBoGowi37GMrDCOyOZWC4n5wHLtYyhR6JaElxbrhxP\" +\n+        \"H46z2USLKmZoF+YgEQgYcSBXMgP0t36+XQocFWYi2N5niy02TnctwF430FYsQlhJ\" +\n+        \"Suma4I33E808dJuMv8T\/soF66HsD4Zj46hOf4nWmas7IaoSAbGKXgIa7KhGRJvij\" +\n+        \"xM3WOX0aqNi\/8bhnxSA7fCmIy\/7opyx5UYJFWGBSmHP1pBHBVmx7Ad8SAsB9MSsh\" +\n+        \"nbGjGiUk4h0QcOi29\/M9WwFlo4urePyI8PK2qtVAmpD3rTLlsmgzguZ69L0Q\/CFU\" +\n+        \"fbtqsMF0bgEuh8cfivd1DYFABEt1gypuwCUtCqQ7AXK2nQqOjsQCxVz9i9K8NDeD\" +\n+        \"aau98VAl0To2sk3\/VR\/QUq0PRwU1jPN5BzUevhE7SOy\/ImuJKwpGqqFljYdrQmj5\" +\n+        \"jDe+LmYH9QGVRlfN8zuU+48FY8CAoeBeHn5AAPml0PYPVUnt3\/jQN1+v+CahNVI+\" +\n+        \"La8q1Nen+j1R44aa2I3y\/pUgtzXRwK+tPrxTQbG030EU51LYJn8amPWmn3w75ZIA\" +\n+        \"MJrXWeKj44de7u4zdUsEBVC2uM44rIHM8MFjyYAwYsey0rcp0emsaxzar+7ZA67r\" +\n+        \"lDoXvvS3NqsnTXHcn3T9tkPRoee6L7Dh3x4Od96lcRwgdYT5BwyH7e34ld4VTUmJ\" +\n+        \"bDEq7Ijvn4JKrwQJh1RCC+Z\/ObfkC42xAm7G010u3g08xB0Qujpdg4a7VcuWrywF\" +\n+        \"c7hLNquuaF4qoDaVwYXHH3iuX6YlJ\/3siTKbYCVXPEZOAMBP9lF\/OU76UMJBQNfU\" +\n+        \"0xjDx+3AhUVgnGuCsmYlK6ETDp8qOZKGyV0KrNSGtqLx3uMhd7PETeW+ML3tDQ\/0\" +\n+        \"X9fMkcZHi4C2fXnoHV\/qa2dGhBj4jjQ0Xh1poU6mxGn2Mebe2hDsBZkkBpnn7pK4\" +\n+        \"wP\/VqXdQTwqEuvzGHLVFsCuADe40ZFBmtBrf70wG7ZkO8SUZ8Zz1IX3+S024g7yj\" +\n+        \"QRev\/6x6TtkwggWEBgkqhkiG9w0BBwGgggV1BIIFcTCCBW0wggVpBgsqhkiG9w0B\" +\n+        \"DAoBAqCCBTEwggUtMFcGCSqGSIb3DQEFDTBKMCkGCSqGSIb3DQEFDDAcBAhTxzw+\" +\n+        \"VptrYAICCAAwDAYIKoZIhvcNAgkFADAdBglghkgBZQMEASoEEK9nSqc1I2t4tMVG\" +\n+        \"bWHpdtQEggTQzCwI7j34gCTvfj6nuOSndAjShGv7mN2j7WMV0pslTpq2b9Bn3vn1\" +\n+        \"Y0JMvL4E7sLrUzNU02pdOcfCnEpMFccNv2sQrLp1mOCKxu8OjSqHZLoKVL0ROVsZ\" +\n+        \"8dMECLLigDlPKRiSyLErl14tErX4\/zbkUaWMROO28kFbTbubQ8YoHlRUwsKW1xLg\" +\n+        \"vfi0gRkG\/zHXRfQHjX\/8NStv7hXlehn7\/Gy2EKPsRFhadm\/iUHAfmCMkMgHTU248\" +\n+        \"JER9+nsXltd59H+IeDpj\/kbxZ+YvHow9XUZKu828d3MQnUpLZ1BfJGhMBPVwbVUD\" +\n+        \"A40CiQBVdCoGtPJyalL28xoS3H0ILFCnwQOr6u0HwleNJPGHq78HUyH6Hwxnh0b0\" +\n+        \"5o163r6wTFZn5cMOxpbs\/Ttd+3TrxmrYpd2XnuRme3cnaYJ0ILvpc\/8eLLR7SKjD\" +\n+        \"T4JhZ0h\/CfcV2WWvhpQugkY0pWrZ+EIMneB1dZB96mJVLxOi148OeSgi0PsxZMNi\" +\n+        \"YM33rTpwQT5WqOsEyDwUQpne5b8Kkt\/s7EN0LJNnPyJJRL1LcqOdr6j+6YqRtPa7\" +\n+        \"a9oWJqMcuTP+bqzGRJh+3HDlFBw2Yzp9iadv4KmB2MzhStLUoi2MSjvnnkkd5Led\" +\n+        \"sshAd6WbKfF7kLAHQHT4Ai6dMEO4EKkEVF9JBtxCR4JEn6C98Lpg+Lk+rfY7gHOf\" +\n+        \"ZxtgGURwgXRY3aLUrdT55ZKgk3ExVKPzi5EhdpAau7JKhpOwyKozAp\/OKWMNrz6h\" +\n+        \"obu2Mbn1B+IA60psYHHxynBgsJHv7WQmbYh8HyGfHgVvaA8pZCYqxxjpLjSJrR8B\" +\n+        \"Bu9H9xkTh7KlhxgreXYv19uAYbUd95kcox9izad6VPnovgFSb+Omdy6PJACPj6hF\" +\n+        \"W6PJbucP0YPpO0VtWtQdZZ3df1P0hZ7qvKwOPFA+gKZSckgqASfygiP9V3Zc8jIi\" +\n+        \"wjNzoDM2QT+UUJKiiGYXJUEOO9hxzFHlGj759DcNRhpgl5AgR57ofISD9yBuCAJY\" +\n+        \"PQ\/aZHPFuRTrcVG3RaIbCAS73nEznKyFaLOXfzyfyaSmyhsH253tnyL1MejC+2bR\" +\n+        \"Eko\/yldgFUxvU5JI+Q3KJ6Awj+PnduHXx71E4UwSuu2xXYMpxnQwI6rroQpZBX82\" +\n+        \"HhqgcLV83P8lpzQwPdHjH5zkoxmWdC0+jU\/tcQfNXYpJdyoaX7tDmVclLhwl9ps\/\" +\n+        \"O841pIsNLJWXwvxG6B+3LN\/kw4QjwN194PopiOD7+oDm5mhttO78CrBrRxHMD\/0Q\" +\n+        \"qniZjKzSZepxlZq+J792u8vtMnuzzChxu0Bf3PhIXcJNcVhwUtr0yKe\/N+NvC0tm\" +\n+        \"p8wyik\/BlndxN9eKbdTOi2wIi64h2QG8nOk66wQ\/PSIJYwZl6eDNEQSzH\/1mGCfU\" +\n+        \"QnUT17UC\/p+Qgenf6Auap2GWlvsJrB7u\/pytz65rtjt\/ouo6Ih6EwWqwVVpGXZD0\" +\n+        \"7gVWH0Ke\/Vr6aPGNvkLcmftPuDZsn9jiig3guhdeyRVf10Ox369kKWcG75q77hxE\" +\n+        \"IzSzDyUlBNbnom9SIjut3r+qVYmWONatC6q\/4D0I42Lnjd3dEyZx7jmH3g\/S2ASM\" +\n+        \"FzWr9pvXc61dsYOkdZ4PYa9XPUZxXFagZsoS3F1sU799+IJVU0tC0MExJTAjBgkq\" +\n+        \"hkiG9w0BCRUxFgQUwWO5DorvVWYF3BWUmAw0rUEajScwejBqMEYGCSqGSIb3DQEF\" +\n+        \"DjA5MCkGCSqGSIb3DQEFDDAcBAhvRzw4sC4xcwICCAAwDAYIKoZIhvcNAgkFADAM\" +\n+        \"BggqhkiG9w0CCQUABCB6pW2FOdcCNj87zS64NUXG36K5aXDnFHctIk5Bf4kG3QQI\" +\n+        \"b0c8OLAuMXMCAggA\";\n+\n+    \/\/ A.7.  SHA384 PRF and HMAC\n+    static final String A7 =\n+        \"MIIRHAIBAzCCEIUGCSqGSIb3DQEHAaCCEHYEghByMIIQbjCCBloGCSqGSIb3DQEH\" +\n+        \"BqCCBkswggZHAgEAMIIGQAYJKoZIhvcNAQcBMF8GCSqGSIb3DQEFDTBSMDEGCSqG\" +\n+        \"SIb3DQEFDDAkBBCDik8IB\/dPZETuhIat3X84AgIIADAMBggqhkiG9w0CCQUAMB0G\" +\n+        \"CWCGSAFlAwQBKgQQ6ZeG2lhwua6h4dBr8iI08oCCBdCduUvjdkLYpt5NFJ5zRV\/S\" +\n+        \"bYB8AMxJWlKUHh0kzmKR9gbivZMYshwk5tQZV3aRD99a3RoNqH4yTJTmN05AzFd8\" +\n+        \"yMYfmnqv9j2MPjftqaf8E4d61r53q7l\/8BK1Sn6SC32uqKmQhVk9TEq\/oVfhCxWL\" +\n+        \"2FwCB2th8vmZGyapjiT72Hwv291rDBulMWkiSO9bnckm1qYSXtDzthXXuZN4ruTT\" +\n+        \"lweP7GSOxdrxmuwAH8F+qkOwC6PW7GQDYQ1R9JW00HUKbE926D2RzTBgmcuq2JUn\" +\n+        \"YyaKY8ooAeuo0Xk2YVOv+kPfP0PKkd05FN4HCeA5Ut1xnWLBNIJnrIib8SksLE1M\" +\n+        \"uHZqdT7iB4oF1bEUxz6IOZyUdBnDcX8+\/UO4aNc0QgDYqBI83Hgv9g8WPAz5V6s5\" +\n+        \"cHDgG\/LwzRI6iO2PujOmUd7pSIyTr109jTgUj9\/cT86ly9xJwn7uIIZtb9jE1SNt\" +\n+        \"VwFviiI+ZfQkEmDtmqTxWMR2KmoLsPQ4WvzQ4bTdVe+bJcZU4xuApXkY9EU\/8qR2\" +\n+        \"b5+p8ZxlmAQkmCPoo3qt+6rhH5J\/tDqD1wC4uioIl4soidWJuoWOgbPDvX3NFVC+\" +\n+        \"PP1PcNimeBLoXGDk0zJOG\/THnc+miOVHtlYg8EaCPU\/980cM0Zrm\/Wf+af4GKAmH\" +\n+        \"5DBRZ\/n79ChL23KD8z2paNxD0kUbl0JbjQjCczG10g6Db4HSX3bH+vn6craVr4vD\" +\n+        \"blBh+7AL5sDjgQwpQV5+LyWJRjyccFsSXw4D+5Z1oHPhEltBtfKY3RWAAOy64F9B\" +\n+        \"cqmydBc8Ywgcxi523yTtBAsnHGcrqwqOGpFVQU2Xo19B02GAr2f1pyWYKhiEdh4X\" +\n+        \"ThtECsvwAdBmD8Vk\/CnNFnq93xTYzXErdKHoAnOJk2pbm6CrT\/zjFhqQT6abUHuO\" +\n+        \"gEiOcgFFtUcXowBt4y4Ts6NaG7oGaklo2DCprwSGK4soBFUc\/iSh6ykXanszEq0x\" +\n+        \"V\/HEGiPoTGwjnoEMJMarc7DYoWaEA7+FsqTwnrqzE51Kp1pDQ0nVqNpi3GCS0gV8\" +\n+        \"KSgJCZjzcMxX5BdxFNDjbUtcj\/NruniHNJkFj08W3cMyMjfne1gAhByXxYYomfbp\" +\n+        \"61Nd8yFGnTqWUn06Za+OIm6YdqQUd8SSiZci8Zv+7j2D2VDZIWVOr7oLhnkEnbGU\" +\n+        \"4o44vUsxC1kcBRCHzJlIBl0jS47p9qeOY1UrMQW5e866VQAyX6XV3m3oPCXhP2lR\" +\n+        \"vEh+jfS2Q8IEJY0GRh3blu34aFSXS3H+F8v+9d9pvW7naAcGZD8Xx1oqHJMPzg3F\" +\n+        \"pb5uDcaq6fz+d66vkiQDNEFTqLQ88kgx50f4UiWzI5y762cqIepzjJn1Q1AEHw1C\" +\n+        \"\/Plrc3H0p58tVvr9FA+orMYGis+E8LhG17SyE4L5R\/dXNWe+GdbGi4n1\/3wRdzyS\" +\n+        \"JWuh9ckEPXfk4Qn0N55kcuiIzpJ5EWXqO1aeLt2L0Sw+xmwjX4g1YrLioCNzQEWs\" +\n+        \"olkoG8wQbodTAoGBcgd9rts2lm\/ct0BxkGLRhTP38TYeSnVv6ouhsl+lZgWM2Vf6\" +\n+        \"i3zmJbJ9H1ILdFNC170rwReJIslcC5kUANUWnxdTuc6Zq6nq+N8Vh7RiR+yNDeY8\" +\n+        \"\/Vl4Iff4zqm4x5NOsY\/UDc0INfHFrpOS4vkYihK6zhBM55QaL31OOrrm3dRPiQGW\" +\n+        \"vpKWTwtNgHtUlHbqKITrMJcXc3xM9FcgSZCQdXoRAgzm9qt8ZYSsKmJOA6DKz6Qf\" +\n+        \"0Hh5k5wgCRGFKaf4Q+oaXb3LVuOd\/QSGIGv1ARAfQhQAz7iEk\/BRAuf3yvDG0CQ8\" +\n+        \"cNJ8XXNtqPTaxelcYx1omnFb2jpis48064kAdN6akOHZ33w0WYWWfP3o+kjuOVUw\" +\n+        \"v3g+X0eBh8JXsCdCzT+64UW8E8Yq5lHz4pwwIxt0ieKHmtdNjMotNqZEa56\/k6rK\" +\n+        \"zSs1jCWFSmerWnLcVbAJ6dVNcaL7fbRCp\/1o13fAZE8wggoMBgkqhkiG9w0BBwGg\" +\n+        \"ggn9BIIJ+TCCCfUwggnxBgsqhkiG9w0BDAoBAqCCCbkwggm1MF8GCSqGSIb3DQEF\" +\n+        \"DTBSMDEGCSqGSIb3DQEFDDAkBBAbYC\/ASTvUQabUugtUNzD2AgIIADAMBggqhkiG\" +\n+        \"9w0CCQUAMB0GCWCGSAFlAwQBKgQQBgWwEH00jwkG4jDpw0aABwSCCVD30cGGomiq\" +\n+        \"y62kUioZv7isOO38lW17YcH+UekLv41KefKDtf2g788X10l3egnO6CGKF\/CvT8Os\" +\n+        \"D09Am34u+lX93EkI6uHSj+zCIXGiKd6QzNhwWNuifBsQhm\/RMdFXni809ek\/7AEG\" +\n+        \"9S5\/5Gk42\/Cr16\/xzZXTy3cY932ffl0qPZUGB4ZnZOX9v+xausfYTWuSXYJ\/+AGp\" +\n+        \"bvjGph07I0brId7RtAg93Y4iHZHT9Kf\/BOJIl+sGvNamihuX\/f7yu6kpcLU7VM8+\" +\n+        \"LPqmIP9vNbjYjSe3d9RrRhiqwrr6Fi7bclOWro6SrGyyDseNCs8TcA2YNiyBTkkb\" +\n+        \"7PQCCTS9oCf2bfRoBJZifYEmnc8zX71z7J3e3B883losL6QaZb4MhuHpmW5BClhB\" +\n+        \"fpv2cNt1j4Md7491F7D7x3buqkW9OhU5MCF4w2FhM7UNMqyJeOqUPRV+PYwS6PWl\" +\n+        \"7lv0Y077RJnG5IJd1NJHwiJKQPq\/1dNh5DQFBr+vULKKghFO3Wd8l1bunOkjPlbi\" +\n+        \"hS4ZycuAKmIE9q6cLY0uoSAvBn4161opqZsTaubc\/ksNVJPww0eyIquPIH+V2bRe\" +\n+        \"0LxXDzRa9bE2rJCXc1nme0wr4EAe8eDKfHlNsAGJ4q+lgLD17c8CjEBCDqLWUIFC\" +\n+        \"4whnOVhouj54v75Xzb1kAK\/HFaVbcw\/sWx+1hxwZ9pOfp+FoQmWa2oV+zPB95\/EB\" +\n+        \"msz7eZCpLUmI9KseD8tF8coCBj42\/H8aee\/FK0eZEdL9w30fQivL6oefwxj9arvI\" +\n+        \"\/wPkSG4g7F69PjJNEAOmO4eJjR2Fs3H6Xm181YW6hd6elZV8OI1jt994OHMEJrvY\" +\n+        \"tJeqYKoFPbBidzIw\/Pcx2\/wjLa2HvNxaFeFHhPGkR\/st7PWO+UVgyhX2PWGCtzH8\" +\n+        \"xYgxEdhVyN7yceCv4d1\/S6K+K1x+UmQ679QBkvGHpI5HSUSlLAptw5GdQOhfH60f\" +\n+        \"qJoTELxDsW8qynK7k5PLcswiGR34b7KsKaqFQsM+kVf9iMXhBam\/hqzDFUEfnLHj\" +\n+        \"4\/SFCa\/iXPRpa\/0VyUJgzmo5A9IHM2AHyUhW\/jJgJhlkRtcJrnyv4kL3ILAx4Jfa\" +\n+        \"wOLFLHxNYbyikvnCgsAcXyxteh0aWGP1eqiYXfZ8SVpwNfnn9Jxs1IkFtSzqiwpZ\" +\n+        \"gHuSVngcKHHDYFVtdpuMuvqkBGzQs\/kHCYv1D8mAVuuSijvNcKRuSZ6InnWlo5tt\" +\n+        \"9gHsrht9YndssqjJMv7mpp6O8XjAh+arNqrBkkkqPnWzfVnmeQJKcjmAOAArNkVN\" +\n+        \"l1jeQGXjlExNjfBEXlDNhwajM+Vj0IgjL3LqWw6\/o+5EaNkRYXHCNBhNkBkzIMBc\" +\n+        \"OAnqH+fXJ37v5ijZYK0FmGM9XFX2diuUCvz1R8q2CpKU4HcXU9nVhxNkCV7Ccf2w\" +\n+        \"gcAyZs6TUXOwBxvjlGvYGsE\/Qm7JN9GqLHHFeJsIL7O6MYPdp9u44bNzVIbr8zsB\" +\n+        \"7bajCMkukx2LUWwJSaoQmtarqbjlMu12tDG+nF0SBGiZ6xyjb1r5X22Z21diIhUe\" +\n+        \"L\/+cB65LVP1lt83R7nmff1x3LKQcII\/BhnXI3lcwYOdVEFrR0NC2TCn6qtLEriMf\" +\n+        \"3LU6IyiBb2rQPOSaQnQuPFmHhWwxfGSp71qJhWYZvRjPryxDHOWsJpbonOOzlnOS\" +\n+        \"AqwxsihUqx2QnKAY1S8pm74+Dx0BmIfJUmzbLhfo7chBx\/Z87oMlJgBHISCeFez3\" +\n+        \"OZpY56z+GoTvClw6Yxf5KOaYDlzfyAfDJlq+UFFaKRi5kJV9QgJdCVus4+ozlszV\" +\n+        \"x2FTcBmPdfkve6XMVUxWenbPA4\/zoSsuBIdM0ULSyrXrtLH8aDVCdfzKcLyHPECY\" +\n+        \"TyhGZbkcnDGpcK6OO10wPlAf36k9vB+Xo2U\/ImMw\/8\/z\/Vc8lCUeNsRJ6bBGLifX\" +\n+        \"tqi+Ts58U9z\/3LAUD\/uKGDgOi9KR93iaMBH6UeqhPS6s5p69ZG4KQ+by7vUBsvl8\" +\n+        \"KFWiLXXONjlVR3EQInMW0u7A4kXvtLxzmvQZg3TMNo7VprgUjWhjLEjP0uroFF9m\" +\n+        \"YYVRjv5xmBQi2SejEidrztzfuGjDUIoMNiw5zK8H80B8xbTkbGsrGfy6c1UU37+L\" +\n+        \"aXqN9lpX1wdiPuKaXpDq5SdpIUrJvqulFmsGGqU\/Fwr1TLkkO3\/1cxj696xKVGRQ\" +\n+        \"OF1+7jnRudUkRabl8XDJBZlRjWcizi4knpbov\/uH\/Zw3pS+nu+RACMWTXFMN6Ap8\" +\n+        \"saipOJErynAQQD\/g9nWi0SgQNi5TNlRhp9u9YCYHlrjk7BXJeXMGWSL4Gd0TazwC\" +\n+        \"HayTlN6miL5H3kyLI1COcYFl12S2ktCRqCzZ0fxw3tS5lodZm2joaDGvg4wi7AM1\" +\n+        \"76zzn4KCcJMjHrNGLZE\/JiIyrlyL83CVi0gTLg\/RPwoDDo2uwsxb6ZNmSUl\/f4oN\" +\n+        \"HO0bM5VByrafmNcl\/tlg1Bdeqii3ulFvD2ML0D1JTStHI0QH+fVvWFDeOWwUtgid\" +\n+        \"+uky13yQz2P\/P0N4SgSH+nwTAmRF4QaUqdtqTqRmHnaAyjMvBBzbRMKqbuC2uABj\" +\n+        \"kiVPoGYgyz5ABK+S7m5578T+ATSvA0zTHewHVPzhTvuCZbSdEEeI9jRk7dvY7Z1i\" +\n+        \"6xqFL77SM7\/F70xolTFx0vl+qygqSewKYqTKWs8kZ92P+LoPvuieSsBrLGHq9CLX\" +\n+        \"15XJ62uFp+Wn3uS0K\/8vnaFx68F9xEtiAOj8YewyeqokjUuSpJtIt5o\/F\/PYmjYn\" +\n+        \"8nMjeEaPzq2RSFiNFsAUqP2hmurMdSNMQFGnRI7GcrjamJFAm4y6yrUQSA1B0E\/l\" +\n+        \"TH99jAem8w80JZWfPpX654DLpFjMyga5MZvKxK2WZyXcZxLOtHudayaZGhIzNsJx\" +\n+        \"PxFKcAmVS6OnDxHSYBid5tcKNzIfYqJENImlOi9MQyks9zQzfm1CJsQVZ7Xim+f2\" +\n+        \"aKnbazg9d+cCKD63eSLBFJG2uB8SImF3\/4fthZyft2wUvIRvvw75NwLzxjcQoVY\/\" +\n+        \"aj5tdJ6LuWxtWLsVz5CTcFQPnyP98Zw3keWU8fPmckK1IjBhPnPKcSUec0sX8OIe\" +\n+        \"WOnWUKCOpm1zIpKxyVMcWaNCBnvjBNgHlRUJjf7Qv3QYVOchinDVGqYNw8PvZnre\" +\n+        \"0OCUwN3Vzx1cMhPKdskrs4yscxsJR2NCEjElMCMGCSqGSIb3DQEJFTEWBBQRhkQa\" +\n+        \"SZ3piuKFvLRAzBKNNCzkoTCBjTB9MEkGCSqGSIb3DQEFDjA8MCwGCSqGSIb3DQEF\" +\n+        \"DDAfBAjuQzW+wYDvfAICCAACATAwDAYIKoZIhvcNAgoFADAMBggqhkiG9w0CCgUA\" +\n+        \"BDByPl+gyA0f5yrMizs5YCvtJNAL+6BnxQCAk6owqdCCu8Mn2CFD\/5Li6Eammf3G\" +\n+        \"AasECO5DNb7BgO98AgIIAA==\";\n+\n+    \/\/ A.8.  SHA224 PRF and HMAC\n+    static final String A8 =\n+        \"MIIRBwIBAzCCEIUGCSqGSIb3DQEHAaCCEHYEghByMIIQbjCCBloGCSqGSIb3DQEH\" +\n+        \"BqCCBkswggZHAgEAMIIGQAYJKoZIhvcNAQcBMF8GCSqGSIb3DQEFDTBSMDEGCSqG\" +\n+        \"SIb3DQEFDDAkBBChs1p0lxBJoGy52D3uOH\/GAgIIADAMBggqhkiG9w0CCQUAMB0G\" +\n+        \"CWCGSAFlAwQBKgQQe3+TAtS5hkQO4vuMgrV\/fICCBdAxan2fHMY650+NqPDMGHT6\" +\n+        \"GWii9xttNs+4u5MkgOzFLzB0WkRSuo59wH5lYfz3KN9vn8En851nIVTWcO0OkB8d\" +\n+        \"rlPElbIf79QvoMU9pkwwnCDbkCNGUgIr4995ScF9wpS0CeMvYlQzLoNHbNaNt9n0\" +\n+        \"g7TUlgeU9wUR+Wbfu8svR9yaPZ3Jdzt2BC0YYrdNEOJLQ5Gjt5epylnHPOvHG54V\" +\n+        \"5lhSJdZLJ+K6i2OjGYeIriOxUftnZexO7osbM4udC+0\/0Kon7x7e5gd3MmcLTHiR\" +\n+        \"n1wGB7HbPUH\/w595y5HdH+CKJ0nkAwd6qHd6JLUyxl02zD5YHdrwaw\/hH3gHL5Ep\" +\n+        \"mD\/6teb6kG+TCrh1Qs0fHwICr8z175NRHb58TG1Y5dnUA+m9g2\/WRnqzI9ItleOi\" +\n+        \"oeP0QN4poIKxyZRTDWa\/BiDycSlI\/Wwamumz0YY0rLCrS33MQ5nkt5BqwmMfjxYr\" +\n+        \"C9SGMxzA06B9ki1l0N3mhiERlhQ0eU\/yJcYOHrLNR\/jhR1E\/FO+SFjqmIv0d7pQ3\" +\n+        \"C5++HgmTzFlMRl8ZKlWKJqqUSNevjGw5uzysOrH3tgLuMihJAmvZCIzdjHhbS\/rR\" +\n+        \"shcP3aFiMJSkxjDlZELjz0fTGOy1kg5n3WM7MoWggmzR4fY4uti2L1oInyD+FqkA\" +\n+        \"O1USu4nTf1JRXnQjGp6oY2qIr9dT\/\/B5CHnEWZbAms4n714CA2OCEKi+eF7Jjn7y\" +\n+        \"YMS7SWW\/3\/Ho9HhgECoXafDrQBcF3bVn6jytQk+C2k248VAeaVApurIgrr1TafLM\" +\n+        \"\/PEnCGfPF4CDF9Tp+\/Oa0X3gQ20wDrn1KweHuG5nItxCeXI0z1jIJOVjqKuJxhe8\" +\n+        \"d1Mm0MPuHJeE1d5llcQISGzatYLF5myWpK7c5K98tu8B52Ku4Q5jfIGtQGi\/7Hl7\" +\n+        \"POdRN75XcAWcn88QEkGMKMkwTGqVkvHlq6G5q0rCCZdnKyJ21WoEKPvyu3wXEjre\" +\n+        \"dibOk\/A9LmjHgLFoZY0kQK8OYAOVusXOEzUapDDkUHdwHJBZbXTaOXSraaCyOqNu\" +\n+        \"8KlpSCaNQ0xI4hINRSTEhD\/IHhlz3TKpWtvjba3d3A2PNe0Xqn\/viBnS1uxcyL5h\" +\n+        \"5h18Vg3lGoPhXmnkUI1mCCDzE7ZKf3nYVZJYnDaLaiI5vPqPuC90Nl6Ixt97LnPm\" +\n+        \"XeuRut\/UoCcY52FeMrtkLPnIYxuHKvZ9zgELBdaUCB1g7fR7Pp\/uFzF7Fvqsaqtd\" +\n+        \"0tIHyJ8tO4StwA6XgZFHQbLwrPr6pSc9DM2t+nl0yJ5FCezzVC\/QIZq0FJg2T6Np\" +\n+        \"MZ3GgZzlYzwlFMS2drv3wxZl6fVE0sUYHShaWw8kBZxixd8boITSMHKaa4KcDBZ4\" +\n+        \"fmtwAXFe5VQmjJak5Ku6L73VsOJtQqggBB9lf7EgnOPEb3AZ6pOzQfDeJ+FkLCVZ\" +\n+        \"ynzCrio7MeAWDC9DVdADsZO1BxLUI45sbK\/JSM1yAtRcLcs1aDNsce7aVkCw8DfC\" +\n+        \"5YNUTgPS10TUNjUA2+04NkfOj1CuZPXowZdA9GQBzapQZ21WhNqXaNpg6EKg3nBi\" +\n+        \"SMbzreu6EoLE+GS4Q+915FR+\/fI0SesXyz+FsYAYFZXKfuzeB23\/AqXdjd5tLbWq\" +\n+        \"5x9LGgarbaCX2KUCjRIOs\/xkvWvBXyhL9WpFrJx595wvSc2LqP5Vng8okKzgqUWP\" +\n+        \"EIO9dbbI4sktRY0wBqp\/tggHwzvuv0GTF0puEhydNLNb3T4N4zIVe\/t46t666Z7q\" +\n+        \"JyCPtvG52izyNh04ERNAyzXJctVIKkp4MnUANUaCX32mbRiFobqyNa6WtoBVO1EZ\" +\n+        \"nCIbGMxrGJM6KQ\/sMvDA2NsfQ2Tu\/qexWtpvqSkLH34t53ve2v3bDlt0\/pW914M5\" +\n+        \"Y2LCzBe2fT7pvgt0QPX0BRokvk9w8Cm\/qAmXRslWg+7TTMwsHvSJndcb4S+8hjhi\" +\n+        \"pkKWA77Dk0N+znKFu7qkeSIhbYtiRcJbW9nmaq4rUKgwggoMBgkqhkiG9w0BBwGg\" +\n+        \"ggn9BIIJ+TCCCfUwggnxBgsqhkiG9w0BDAoBAqCCCbkwggm1MF8GCSqGSIb3DQEF\" +\n+        \"DTBSMDEGCSqGSIb3DQEFDDAkBBAbd6pT8MxNjuVgT\/s9SA6FAgIIADAMBggqhkiG\" +\n+        \"9w0CCQUAMB0GCWCGSAFlAwQBKgQQ\/oTTtdzRsmLFcN09hTVuIQSCCVDHRkd4aevn\" +\n+        \"G3WhnQu8OyzSIRKcylF1p26\/LpN67qdlMTwg9tXk0IfOMODoMkKjqb6IevPGeqC4\" +\n+        \"mkZ\/XMpVDLTyYuJkgDyFp8dRuKIfhEUeQrfx1J3QZCZIGB8Tf0sbCrmAd+Rmi0kO\" +\n+        \"4Ki+fYmIHPO40V9LZoZZI+pbLL\/GC7SFsmC3xNSn8hPsyNuBteX9KAJ5P05vHYnC\" +\n+        \"Uzec9BBASx8eT4HgdsYUE57WgiWT8cIgou+zDIJRiv0muTMAz+1GEFD29DyXMc3z\" +\n+        \"puIYlR3WP4WdrdKMAC2bCjbETt3uZdEF7n\/yH7QLHLXptBSSEEtz62EVbFJtggrJ\" +\n+        \"7QWyNw8v+CVm+DR5Yc+Inw60ZeJSyLmTMKXfAmvHCVeGpzOggL5I6PkgtFPSSiqN\" +\n+        \"5bq1RUNo++QSgySGi82AWRESBE9tYebGnMk1ecfIPT4wQa6\/xR8CVUkEr1oe311W\" +\n+        \"4B5BKQXNjbMP0Hv5gZfOlVqSd2PQTqXaa6w9II+56nu5BQ5E6DytCVmSYOO6AfmS\" +\n+        \"0XqGbaBNzoDx7NeHY9K0hnztGkqxpyaAnGHj0+0e1oqK86fjDawCPZEm6o+Pf9NC\" +\n+        \"tvpeGpV6fB7YgKgKuybHRIxrQAp\/Q1MRDBa4AZgYkqvjvnIG2rLr6Ry8m\/ls\/yGe\" +\n+        \"\/hPL9PMamn\/O++zjMufiefoXANXaK0aP7773cCkXr+pC7puA6PPfYXSBrGLbvxZS\" +\n+        \"sXdVUyPRCx0kTpg1zKTnz\/S3PZDLD+VlQ5evsiSMcDZirCbuUW1P0oXIF3W+\/OUD\" +\n+        \"SqMR\/GQnO9tCnUo2\/2nRJU1ZW2l3I2tHlhkRYqzEFIRJWBkSnNYccfoZQ7Rlp3Bh\" +\n+        \"kdI3hCN5c2BL8GGD67IRbTpN+Q7EObZOgvuq6tTc06QrOcF6vL63UQ3axaYqDT0U\" +\n+        \"6RJIxQZtc+MG5nbb2bJQlA0gt4PeMKaTUnjDhu8s5A9iUv9tlgbAMfjQ74Jr8IUa\" +\n+        \"TlLdEPSk6LNbwWW1dxmu\/0LwchPujEVgoylIUXum6AGy+snUmvSITfnd4xkZIrCk\" +\n+        \"WSJcLFsMTvmzl+Gz4n5bpcKb5rA6SU8Urg\/\/2GtyankmYybbGdmIE5oYcc41KBgk\" +\n+        \"40s8MKTA7u078T+WnzJZIqhbyWwouEXLvWiqHo7WKufA\/spCNC8hlXx6SreYcvRO\" +\n+        \"OuI57kagquU5\/+f8Nagn9VyGLnzHQE5daQxjK\/zMloKaXNP\/e8tqei4Yx7QPWLDf\" +\n+        \"Cp\/67GI8sU\/D45QUa9Rp7oU+vx7erkCjlP+DLMg98new64jkAHiOcAwzkKY23kSY\" +\n+        \"ZvKNJb7Fbk\/5YLpZFrPM8KtM4t0C9GCvF\/hoMB7Z82wQ2JZEAhdd2bqkCveY\/GhI\" +\n+        \"rYsRroa7ETjedx3OU5GOFt\/+AKW22ybKdb6217lTphf1mszI7BIjwyxwz5\/HzUBL\" +\n+        \"deKvZjzO6anfA6kmWRWDFfxtTuYi8EoqGi7mNmQb5e7kfo2KnkjTsfYWxzvPpVI9\" +\n+        \"yjqWN769ECw30CLJB96piEnBT24yXwm6VYMb69Edyq2vAWvBeJB1YBxqqaBrnQ\/U\" +\n+        \"Uz3hxsgroskoebzTeds4vXxsnE5lFpaCZ8V\/85ugSmtm2nt6JVi2aRZ+X+UdkYD0\" +\n+        \"p4wEXhSLZcWZemZdc3r5pUMZJJsZsx75lIO4ePoyLeD745RmdO2GtSLAlTED\/6dm\" +\n+        \"b6GM5fybLIBjycLU\/Ko5KES9RLpkTYjM+1j1KG4tMOfbCP9std5Y\/yPTDgSu3rHt\" +\n+        \"RGO2005fbz0Zw6GqBxYTBlEzNuNm1BrKdE5ZCm7bQCQGqC8fjaDa4XMIIl8JpsKq\" +\n+        \"HhwsrV+gWcvOpLVmgfMnoTICucK2hCN1PUNjflH58yAQ\/A60s+A9H5vuXNVrQvt0\" +\n+        \"59A8quND7DCfr3KLap4R38Rw1izRBBimWI7sbIdRki5XhcjLDHjGQovtT6WbzPUQ\" +\n+        \"M11NHtdMHxYx22cHuT8Q48lGVEkLGrKF+XZEakaOERTrUHjme2PCsZbviEAbx8sv\" +\n+        \"1H8\/awbkki822Z64D\/\/hiUC7NR4NqAtGRiIs8u8RmetOoxXw4H7HYKJ+L8kVBwyL\" +\n+        \"liiAHt5IwPAOUrExDFkicalohi8Kcnq\/GQSERd4DJv6VtkzeVnyzrAbzwLCLQGG6\" +\n+        \"hVQIClYbAkjt2Gk27otOvPThWNhX0XdxM86HI+AxDv6\/JDx8QqauRWslU9RGP4q1\" +\n+        \"DKhckD3qodddH268LyLR2Pmtwk6e\/Zim4W8HI\/FE4i29JzuTClg4gf7cb7PpL78U\" +\n+        \"E9fzpD\/3f4F5tzyem83zntCgiEPek0LmsXI1u6gaW8yOefC5THynBGMWnn3GFRPL\" +\n+        \"WSqBpA6qXy+Mbq4ZvL9jDgflf38ek7v3U31\/VAkO4LI3NRrc6\/Lnk\/7pA+UkCa89\" +\n+        \"UUuXHRyTJf\/pkCatH1ozsGKEeb+o3I0hcIeEkol3w6krfJDA8sB+PUS0Ty19jMk8\" +\n+        \"xyeXgKiHi4xFNWWqUqDI6NMVtUUBiS9OZKclov3zw3DRrHGJXiegRCiHhylZRPnS\" +\n+        \"cLiSB7UhXt1zwAXczp7UI35jHLb4vJI6qZjtoil8qItJ19LuFVKykhq8YSnRBrsA\" +\n+        \"43KlDhVmthvko1Ray1urepZsQoml3n5rcZ+gI4KVavRSdrHnITJ3ejiaVRW6jAi2\" +\n+        \"MwsYVMDXhipu+aiJO3Epffn5J0vH+6ZxBWqnxfJcXRyP87kVqOweDLzWBZOss7tD\" +\n+        \"ocIoTc94TyhA+4fSuo6vJtTGMCuD1Pu7AY+4RTvgqKbji0pXaNQkFXEO14AXPLJa\" +\n+        \"jP2Mf0SsrjQlNynRDOjw\/iAYSj90Xvs14kpXgNUW8EIoSDnSvTYoa91uY+IAAknE\" +\n+        \"fNH8qLRIxaQ++Pz\/3WRlpqLJZUblMQrrfgTPirQKarkY20eecbSBYARq\/uIWd3LY\" +\n+        \"JFSjQFvvw15EGW+pMcjCXNF2u2hz5nqzu8faJjbHuR1Sz8cGh\/0KJR+02JH96LXq\" +\n+        \"v9m4o+Xm2pQ08hweroKWZpYYMHkV0JiZ4neSa5QlqaQVD\/u26KbSjsl1eSBI5mBn\" +\n+        \"c+Q+N8qTsmFCQUE5nnUxftKJuLfDdoyo+bLnXQC8tXGF0CEKExoP8nsEx\/YvIr0H\" +\n+        \"huG5EjJL+30zYg88gAWr2Ui2ECSO1OQ4RtgEJJPyS03znl0SNGvFbvke6G0HZPIw\" +\n+        \"o3hNwVY6DYjX+\/WajApCFtOUq39MWCz\/rjElMCMGCSqGSIb3DQEJFTEWBBT8muXa\" +\n+        \"5vJFzMUDkXw8nPa4lA8tNTB5MGkwSQYJKoZIhvcNAQUOMDwwLAYJKoZIhvcNAQUM\" +\n+        \"MB8ECKNphYwlt+s9AgIIAAIBHDAMBggqhkiG9w0CCAUAMAwGCCqGSIb3DQIIBQAE\" +\n+        \"HCjYF9vCKIoIek1JFN6CIyulPiprFFB1o5vOBycECKNphYwlt+s9AgIIAA==\";\n+\n+    static String password = \"1234\";\n+\n+    public static void main(String[] args) throws Exception {\n+        KeyStore ks;\n+        FileOutputStream fos;\n+        FileInputStream fis;\n+\n+        ks = KeyStore.getInstance(\"PKCS12\");\n+        ks.load(new ByteArrayInputStream(Base64.getDecoder().decode(A1)),\n+                password.toCharArray());\n+\n+        fos = new FileOutputStream(\"pbmac1KeyStore.p12\");\n+        ks.store(fos, password.toCharArray());\n+        fos.close();\n+\n+        \/\/ read keystore we just wrote\n+        fis = new FileInputStream(\"pbmac1KeyStore.p12\");\n+        ks.load(fis, password.toCharArray());\n+        fis.close();\n+        System.out.println(\"A.1 pass\");\n+\n+        ks = KeyStore.getInstance(\"PKCS12\");\n+        ks.load(new ByteArrayInputStream(Base64.getDecoder().decode(A2)),\n+                password.toCharArray());\n+\n+        fos = new FileOutputStream(\"pbmac1KeyStore.p12\");\n+        ks.store(fos, password.toCharArray());\n+        fos.close();\n+\n+        \/\/ read keystore we just wrote\n+        fis = new FileInputStream(\"pbmac1KeyStore.p12\");\n+        ks.load(fis, password.toCharArray());\n+        fis.close();\n+        System.out.println(\"A.2 pass\");\n+\n+        ks = KeyStore.getInstance(\"PKCS12\");\n+        ks.load(new ByteArrayInputStream(Base64.getDecoder().decode(A3)),\n+                password.toCharArray());\n+\n+        fos = new FileOutputStream(\"pbmac1KeyStore.p12\");\n+        ks.store(fos, password.toCharArray());\n+        fos.close();\n+\n+        \/\/ read keystore we just wrote\n+        fis = new FileInputStream(\"pbmac1KeyStore.p12\");\n+        ks.load(fis, password.toCharArray());\n+        fis.close();\n+        System.out.println(\"A.3 pass\");\n+\n+        try {\n+            ks = KeyStore.getInstance(\"PKCS12\");\n+            ks.load(new ByteArrayInputStream(Base64.getDecoder().decode(A4)),\n+                    password.toCharArray());\n+            throw new Exception(\"The expected exception was not thrown.\");\n+        } catch (IOException e) {\n+            System.out.println(\"A.4 pass\");\n+        }\n+\n+        try {\n+            ks = KeyStore.getInstance(\"PKCS12\");\n+            ks.load(new ByteArrayInputStream(Base64.getDecoder().decode(A5)),\n+                    password.toCharArray());\n+            throw new Exception(\"The expected exception was not thrown.\");\n+\n+        } catch (IOException e) {\n+            System.out.println(\"A.5 pass\");\n+        }\n+\n+        try {\n+            ks = KeyStore.getInstance(\"PKCS12\");\n+            ks.load(new ByteArrayInputStream(Base64.getDecoder().decode(A6)),\n+                    password.toCharArray());\n+            throw new Exception(\"The expected exception was not thrown.\");\n+        } catch (IOException e) {\n+            System.out.println(\"A.6 pass\");\n+        }\n+\n+        ks = KeyStore.getInstance(\"PKCS12\");\n+        ks.load(new ByteArrayInputStream(Base64.getDecoder().decode(A7)),\n+                \"changeit\".toCharArray());\n+\n+        fos = new FileOutputStream(\"pbmac1KeyStore.p12\");\n+        ks.store(fos, password.toCharArray());\n+        fos.close();\n+\n+        \/\/ read keystore we just wrote\n+        fis = new FileInputStream(\"pbmac1KeyStore.p12\");\n+        ks.load(fis, password.toCharArray());\n+        fis.close();\n+        System.out.println(\"A.7 pass\");\n+\n+        ks = KeyStore.getInstance(\"PKCS12\");\n+        ks.load(new ByteArrayInputStream(Base64.getDecoder().decode(A8)),\n+                \"changeit\".toCharArray());\n+\n+        fos = new FileOutputStream(\"pbmac1KeyStore.p12\");\n+        ks.store(fos, password.toCharArray());\n+        fos.close();\n+\n+        \/\/ read keystore we just wrote\n+        fis = new FileInputStream(\"pbmac1KeyStore.p12\");\n+        ks.load(fis, password.toCharArray());\n+        fis.close();\n+        System.out.println(\"A.8 pass\");\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/pkcs12\/PBMAC1Encoding.java","additions":701,"deletions":0,"binary":false,"changes":701,"status":"added"}]}