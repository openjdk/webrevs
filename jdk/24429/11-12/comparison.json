{"files":[{"patch":"@@ -35,0 +35,1 @@\n+import sun.security.util.PBKDF2Parameters;\n@@ -230,1 +231,15 @@\n-        var kdfParams = new PBKDF2Parameters(kdf);\n+        if (!pkcs5PBKDF2_OID.equals(kdf.data.getOID())) {\n+            throw new IOException(\"PBE parameter parsing error: \"\n+                + \"expecting the object identifier for PBKDF2\");\n+        }\n+        if (kdf.tag != DerValue.tag_Sequence) {\n+            throw new IOException(\"PBE parameter parsing error: \"\n+                + \"not an ASN.1 SEQUENCE tag\");\n+        }\n+        DerValue pBKDF2_params = kdf.data.getDerValue();\n+        if (pBKDF2_params.tag != DerValue.tag_Sequence) {\n+            throw new IOException(\"PBKDF2 parameter parsing error: \"\n+                + \"not an ASN.1 SEQUENCE tag\");\n+        }\n+\n+        var kdfParams = new PBKDF2Parameters(pBKDF2_params);\n@@ -292,21 +307,2 @@\n-\n-        DerOutputStream keyDerivationFunc = new DerOutputStream();\n-        keyDerivationFunc.putOID(pkcs5PBKDF2_OID);\n-\n-        DerOutputStream pBKDF2_params = new DerOutputStream();\n-        pBKDF2_params.putOctetString(salt); \/\/ choice: 'specified OCTET STRING'\n-        pBKDF2_params.putInteger(iCount);\n-\n-        if (keysize > 0) {\n-            pBKDF2_params.putInteger(keysize \/ 8); \/\/ derived key length (in octets)\n-        }\n-\n-        DerOutputStream prf = new DerOutputStream();\n-        \/\/ algorithm is id-hmacWith<MD>\n-        prf.putOID(kdfAlgo_OID);\n-        \/\/ parameters is 'NULL'\n-        prf.putNull();\n-        pBKDF2_params.write(DerValue.tag_Sequence, prf);\n-\n-        keyDerivationFunc.write(DerValue.tag_Sequence, pBKDF2_params);\n-        pBES2_params.write(DerValue.tag_Sequence, keyDerivationFunc);\n+        pBES2_params.write(DerValue.tag_Sequence,\n+                PBKDF2Parameters.encode(salt, iCount, keysize, kdfAlgo_OID));\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/PBES2Parameters.java","additions":18,"deletions":22,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-final class PBKDF2KeyImpl implements javax.crypto.interfaces.PBEKey {\n+public final class PBKDF2KeyImpl implements javax.crypto.interfaces.PBEKey {\n@@ -70,1 +70,1 @@\n-    private transient Cleaner.Cleanable cleaner;\n+    private final transient Cleaner.Cleanable cleaner;\n@@ -228,7 +228,0 @@\n-    public void destroy() { \n-        if (cleaner != null) {\n-            cleaner.clean();\n-            cleaner = null;\n-        }   \n-    }   \n-\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/PBKDF2KeyImpl.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -29,6 +29,1 @@\n-import java.security.MessageDigest;\n-import java.security.NoSuchAlgorithmException;\n-import java.security.InvalidAlgorithmParameterException;\n-import java.security.UnrecoverableKeyException;\n-import java.security.InvalidKeyException;\n-import java.security.spec.AlgorithmParameterSpec;\n+import java.security.*;\n@@ -36,0 +31,1 @@\n+import static java.util.Locale.ENGLISH;\n@@ -41,1 +37,0 @@\n-import javax.security.auth.DestroyFailedException;\n@@ -49,1 +44,1 @@\n- * A MacData type, as defined in PKCS#12.\n+ * The MacData type, as defined in PKCS#12.\n@@ -52,0 +47,19 @@\n+ *\n+ * The ASN.1 definition is as follows:\n+ *\n+ * <pre>\n+ *\n+ * MacData ::= SEQUENCE {\n+ *     mac        DigestInfo,\n+ *     macSalt    OCTET STRING,\n+ *     iterations INTEGER DEFAULT 1\n+ *      -- Note: The default is for historical reasons and its use is\n+ *      -- deprecated.\n+ * }\n+ *\n+ * DigestInfo ::= SEQUENCE {\n+ *     digestAlgorithm DigestAlgorithmIdentifier,\n+ *     digest OCTET STRING\n+ * }\n+ *\n+ * <\/pre>\n@@ -57,2 +71,1 @@\n-    private final String digestAlgorithmName;\n-    private String macAlgorithm = null;\n+    private final String macAlgorithm;\n@@ -62,4 +75,3 @@\n-    private String kdfHmac;\n-    private String hmac;\n-    private int keyLength;\n-    private boolean pbmac1Keystore = false;\n+    private final int keyLength;\n+    private final String kdfHmac;\n+    private final String hmac;\n@@ -85,1 +97,1 @@\n-        this.digestAlgorithmName = digestAlgorithmId.getName();\n+        String digestAlgorithmName = digestAlgorithmId.getName();\n@@ -90,1 +102,1 @@\n-        if (this.digestAlgorithmName.equals(\"PBMAC1\")) {\n+        if (digestAlgorithmName.equals(\"PBMAC1\")) {\n@@ -93,2 +105,2 @@\n-            algParams = new PBMAC1Parameters(\n-                    digestAlgorithmId.getEncodedParams());\n+            algParams = new PBMAC1Parameters(digestAlgorithmId\n+                    .getEncodedParams());\n@@ -99,0 +111,6 @@\n+            this.keyLength = algParams.getKdfParams().getKeyLength();\n+\n+            \/\/ Implementations MUST NOT accept params that omit keyLength.\n+            if (this.keyLength == -1) {\n+                throw new IOException(\"error: missing keyLength field\");\n+            }\n@@ -100,1 +118,1 @@\n-            this.macAlgorithm = \"PBEWith\" + this.kdfHmac + \"And\" + this.hmac;\n+            this.macAlgorithm = \"pbewith\" + this.kdfHmac + \"and\" + this.hmac;\n@@ -102,0 +120,3 @@\n+            this.kdfHmac = null;\n+            this.hmac = null;\n+            this.keyLength = -1;\n@@ -109,58 +130,2 @@\n-            this.macAlgorithm = \"HmacPBE\"\n-                    + this.digestAlgorithmName.replace(\"-\", \"\");\n-        }\n-    }\n-\n-    MacData(String algName, byte[] digest, AlgorithmParameterSpec params,\n-            String kdfHmac, String hmac, int keyLength)\n-            throws NoSuchAlgorithmException {\n-        AlgorithmId algid;\n-\n-        if (algName == null) {\n-           throw new NullPointerException(\"the algName parameter \" +\n-                                               \"must be non-null\");\n-        }\n-        if (algName.equals(\"PBMAC1\")) {\n-            this.pbmac1Keystore = true;\n-        }\n-        algid = AlgorithmId.get(algName);\n-\n-        this.digestAlgorithmName = algid.getName();\n-\n-        if (digest == null) {\n-            throw new NullPointerException(\"the digest \" +\n-                                           \"parameter must be non-null\");\n-        } else if (digest.length == 0) {\n-            throw new IllegalArgumentException(\"the digest \" +\n-                                                \"parameter must not be empty\");\n-        } else {\n-            this.digest = digest.clone();\n-        }\n-\n-        if (!(params instanceof PBEParameterSpec p)) {\n-            throw new IllegalArgumentException(\"unsupported parameter spec\");\n-        }\n-\n-        if (this.pbmac1Keystore) {\n-            this.macSalt = p.getSalt();\n-            this.iterations = p.getIterationCount();\n-            this.kdfHmac = kdfHmac;\n-            this.hmac = hmac;\n-            this.keyLength = keyLength;\n-        } else {\n-            this.macSalt = p.getSalt();\n-            this.iterations = p.getIterationCount();\n-            this.kdfHmac = null;\n-            this.hmac = null;\n-            this.keyLength = 0;\n-        }\n-    }\n-\n-    \/*\n-     * Destroy the key obtained from getPBEKey().\n-     *\/\n-    static void destroyPBEKey(SecretKey key) {\n-        try {\n-            key.destroy();\n-        } catch (DestroyFailedException e) {\n-            \/\/ Accept this\n+            this.macAlgorithm = \"hmacpbe\"\n+                    + digestAlgorithmName.replace(\"-\", \"\");\n@@ -172,1 +137,1 @@\n-            String kdfHmac, String hmac)\n+            String kdfHmac, String hmac, int keyLength)\n@@ -180,1 +145,1 @@\n-        if (macAlgorithm.startsWith(\"PBEWith\")) {\n+        if (macAlgorithm.startsWith(\"pbewith\")) {\n@@ -182,1 +147,1 @@\n-            int keyLength = m.getMacLength()*8;\n+            int len = keyLength == 0 ? m.getMacLength()*8 : keyLength;\n@@ -185,1 +150,1 @@\n-                    params.getIterationCount(), keyLength);\n+                    params.getIterationCount(), len);\n@@ -187,1 +152,1 @@\n-                    params.getSalt(), params.getIterationCount(), keyLength));\n+                    params.getSalt(), params.getIterationCount(), len));\n@@ -198,1 +163,1 @@\n-            if (macAlgorithm.startsWith(\"PBEWith\")) {\n+            if (macAlgorithm.startsWith(\"pbewith\")) {\n@@ -204,1 +169,1 @@\n-            destroyPBEKey(pbeKey);\n+            sun.security.util.KeyUtil.destroySecretKeys(pbeKey);\n@@ -210,2 +175,2 @@\n-    void processMacData(PBEParameterSpec params, char[] password,\n-            byte[] data, String macAlgorithm) throws InvalidKeySpecException,\n+    void processMacData(char[] password, byte[] data)\n+            throws InvalidKeySpecException,\n@@ -217,2 +182,3 @@\n-        m = getMac(macAlgorithm, password, params, data, this.kdfHmac,\n-                this.hmac);\n+        m = getMac(this.macAlgorithm, password,\n+                new PBEParameterSpec(this.macSalt, this.iterations),\n+                data, this.kdfHmac, this.hmac, this.keyLength);\n@@ -244,1 +210,0 @@\n-        final MacData macData;\n@@ -251,1 +216,2 @@\n-        if (macAlgorithm.startsWith(\"PBEWith\")) {\n+        macAlgorithm = macAlgorithm.toLowerCase(ENGLISH);\n+        if (macAlgorithm.startsWith(\"pbewith\")) {\n@@ -257,1 +223,1 @@\n-        } else if (macAlgorithm.startsWith(\"HmacPBE\")) {\n+        } else if (macAlgorithm.startsWith(\"hmacpbe\")) {\n@@ -262,1 +228,2 @@\n-            throw new ParsingException(\"unexpected algorithm\");\n+            throw new ParsingException(\"unexpected algorithm '\"\n+                    +macAlgorithm+ \"'\");\n@@ -268,1 +235,1 @@\n-            m = getMac(macAlgorithm, passwd, params, data, kdfHmac, hmac);\n+            m = getMac(macAlgorithm, passwd, params, data, kdfHmac, hmac, 0);\n@@ -270,1 +237,0 @@\n-            keyLength = m.getMacLength()*8;\n@@ -272,3 +238,0 @@\n-            \/\/ encode as MacData\n-            macData = new MacData(algName, macResult, params,\n-                    kdfHmac, hmac, keyLength);\n@@ -276,1 +239,2 @@\n-            bytes.write(macData.getEncoded());\n+            bytes.write(encode(algName, macResult, params, kdfHmac, hmac,\n+                    m.getMacLength()));\n@@ -300,1 +264,1 @@\n-     * @exception IOException if error occurs when constructing its\n+     * @exception NoSuchAlgorithmException if error occurs when constructing its\n@@ -303,76 +267,5 @@\n-    byte[] getEncoded() throws NoSuchAlgorithmException, IOException {\n-        if (this.pbmac1Keystore) {\n-            ObjectIdentifier pkcs5PBKDF2_OID =\n-                    ObjectIdentifier.of(KnownOIDs.PBKDF2WithHmacSHA1);\n-\n-            byte[] not_used = { 'N', 'O', 'T', ' ', 'U', 'S', 'E', 'D' };\n-\n-            DerOutputStream out = new DerOutputStream();\n-            DerOutputStream tmp0 = new DerOutputStream();\n-            DerOutputStream tmp1 = new DerOutputStream();\n-            DerOutputStream tmp2 = new DerOutputStream();\n-            DerOutputStream tmp3 = new DerOutputStream();\n-            DerOutputStream tmp4 = new DerOutputStream();\n-            DerOutputStream hmac = new DerOutputStream();\n-            DerOutputStream kdfHmac = new DerOutputStream();\n-\n-            \/\/ encode kdfHmac algorithm\n-            kdfHmac.putOID(ObjectIdentifier.of(KnownOIDs\n-                    .findMatch(this.kdfHmac)));\n-            kdfHmac.putNull();\n-\n-            \/\/ encode Hmac algorithm\n-            hmac.putOID(ObjectIdentifier.of(KnownOIDs.findMatch(this.hmac)));\n-            hmac.putNull();\n-\n-            DerOutputStream pBKDF2_params = new DerOutputStream();\n-\n-            pBKDF2_params.putOctetString(this.macSalt); \/\/ choice: 'specified OCTET STRING'\n-\n-            \/\/ encode iterations\n-            pBKDF2_params.putInteger(this.iterations);\n-\n-            \/\/ encode derived key length\n-            if (this.keyLength > 0) {\n-                pBKDF2_params.putInteger(this.keyLength \/ 8); \/\/ derived key length (in octets)\n-            }\n-            pBKDF2_params.write(DerValue.tag_Sequence, kdfHmac);\n-            tmp3.putOID(pkcs5PBKDF2_OID);\n-            tmp3.write(DerValue.tag_Sequence, pBKDF2_params);\n-            tmp4.write(DerValue.tag_Sequence, tmp3);\n-            tmp4.write(DerValue.tag_Sequence, hmac);\n-\n-            tmp1.putOID(ObjectIdentifier.of(KnownOIDs .findMatch(\"PBMAC1\")));\n-\n-            tmp1.write(DerValue.tag_Sequence, tmp4);\n-            tmp2.write(DerValue.tag_Sequence, tmp1);\n-            tmp2.putOctetString(this.digest);\n-            tmp0.write(DerValue.tag_Sequence, tmp2);\n-            tmp0.putOctetString(not_used);\n-            tmp0.putInteger(1);\n-            out.write(DerValue.tag_Sequence, tmp0);\n-            return out.toByteArray();\n-        }\n-\n-        DerOutputStream out = new DerOutputStream();\n-        DerOutputStream tmp = new DerOutputStream();\n-\n-        DerOutputStream tmp2 = new DerOutputStream();\n-        \/\/ encode encryption algorithm\n-        AlgorithmId algid = AlgorithmId.get(this.digestAlgorithmName);\n-        algid.encode(tmp2);\n-\n-        \/\/ encode digest data\n-        tmp2.putOctetString(this.digest);\n-\n-        tmp.write(DerValue.tag_Sequence, tmp2);\n-\n-        \/\/ encode salt\n-        tmp.putOctetString(this.macSalt);\n-\n-        \/\/ encode iterations\n-        tmp.putInteger(this.iterations);\n-\n-        \/\/ wrap everything into a SEQUENCE\n-        out.write(DerValue.tag_Sequence, tmp);\n-        return out.toByteArray();\n+    static byte[] encode(String algName, byte[] digest, PBEParameterSpec p,\n+            String kdfHmac, String hmac, int keyLength)\n+            throws NoSuchAlgorithmException {\n+        return PBMAC1Parameters.encode(algName, p.getSalt(),\n+                p.getIterationCount(), keyLength, kdfHmac, hmac, digest);\n@@ -381,3 +274,3 @@\n-    public static String parseKdfHmac(String text) {\n-        int index1 = text.indexOf(\"With\") + 4;\n-        int index2 = text.indexOf(\"And\");\n+    private static String parseKdfHmac(String text) {\n+        int index1 = text.indexOf(\"with\") + 4;\n+        int index2 = text.indexOf(\"and\");\n@@ -393,2 +286,2 @@\n-    public static String parseHmac(String text) {\n-        int index1 = text.indexOf(\"And\") + 3;\n+    private static String parseHmac(String text) {\n+        int index1 = text.indexOf(\"and\") + 3;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs12\/MacData.java","additions":73,"deletions":180,"binary":false,"changes":253,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.security.NoSuchAlgorithmException;\n@@ -30,0 +31,1 @@\n+import sun.security.x509.AlgorithmId;\n@@ -63,0 +65,3 @@\n+    static final ObjectIdentifier pkcs5PBKDF2_OID =\n+            ObjectIdentifier.of(KnownOIDs.PBKDF2WithHmacSHA1);\n+\n@@ -66,4 +71,1 @@\n-    \/\/ length of key generated by the kdf\n-    private final int keyLength;\n-\n-    public PBMAC1Parameters(byte[] encoded) throws IOException {\n+    PBMAC1Parameters(byte[] encoded) throws IOException {\n@@ -98,1 +100,0 @@\n-        this.kdfParams = new PBKDF2Parameters(kdf);\n@@ -100,5 +101,39 @@\n-        \/\/ Key length must be present even though it is not used.\n-        keyLength = kdfParams.getKeyLength();\n-        if (keyLength == -1) {\n-            throw new IOException(\"PBMAC1 parameter parsing \"\n-                    + \"error: missing keyLength field\");\n+        if (!pkcs5PBKDF2_OID.equals(kdf.data.getOID())) {\n+            throw new IOException(\"PBKDF2 parameter parsing error: \"\n+                + \"expecting the object identifier for PBKDF2\");\n+        }\n+        if (kdf.tag != DerValue.tag_Sequence) {\n+            throw new IOException(\"PBKDF2 parameter parsing error: \"\n+                + \"not an ASN.1 SEQUENCE tag\");\n+        }\n+        DerValue pBKDF2_params = kdf.data.getDerValue();\n+        if (pBKDF2_params.tag != DerValue.tag_Sequence) {\n+            throw new IOException(\"PBKDF2 parameter parsing error: \"\n+                + \"not an ASN.1 SEQUENCE tag\");\n+        }\n+\n+        this.kdfParams = new PBKDF2Parameters(pBKDF2_params);\n+    }\n+\n+    static byte[] encode(String algName, byte[] salt, int iterationCount, int keyLength,\n+            String kdfHmac, String hmac, byte[] digest) throws NoSuchAlgorithmException {\n+        if (algName.equals(\"PBMAC1\")) {\n+            return new DerOutputStream().write(DerValue.tag_Sequence, new DerOutputStream()\n+                    .write(DerValue.tag_Sequence, new DerOutputStream()\n+                            .write(DerValue.tag_Sequence, new DerOutputStream()\n+                                    .putOID(ObjectIdentifier.of(KnownOIDs.PBMAC1))\n+                                    .write(DerValue.tag_Sequence, new DerOutputStream()\n+                                            .write(DerValue.tag_Sequence, PBKDF2Parameters.encode(salt, iterationCount, keyLength, kdfHmac))\n+                                            .write(DerValue.tag_Sequence, new DerOutputStream()\n+                                                    .putOID(ObjectIdentifier.of(KnownOIDs.findMatch(hmac)))\n+                                                    .putNull())))\n+                            .putOctetString(digest))\n+                    .putOctetString(new byte[]{ 'N', 'O', 'T', ' ', 'U', 'S', 'E', 'D' })\n+                    .putInteger(1)).toByteArray();\n+        } else {\n+            return new DerOutputStream()\n+                    .write(DerValue.tag_Sequence, new DerOutputStream()\n+                        .write(DerValue.tag_Sequence, new DerOutputStream()\n+                                .write(AlgorithmId.get(algName)).putOctetString(digest))\n+                        .putOctetString(salt)\n+                        .putInteger(iterationCount)).toByteArray();\n@@ -108,1 +143,1 @@\n-    public PBKDF2Parameters getKdfParams() {\n+    PBKDF2Parameters getKdfParams() {\n@@ -112,1 +147,1 @@\n-    public String getHmac() {\n+    String getHmac() {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs12\/PBMAC1Parameters.java","additions":47,"deletions":12,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -2085,1 +2085,0 @@\n-                    PBEParameterSpec params = new PBEParameterSpec(salt, ic);\n@@ -2087,2 +2086,1 @@\n-                        macData.processMacData(params, pass, authSafeData,\n-                                macData.getMacAlgorithm());\n+                        macData.processMacData(pass, authSafeData);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs12\/PKCS12KeyStore.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+import com.sun.crypto.provider.PBKDF2KeyImpl;\n@@ -472,0 +473,2 @@\n+                } else if (k instanceof PBKDF2KeyImpl p2k) {\n+                    p2k.clear();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/KeyUtil.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -73,3 +73,0 @@\n-    public static final ObjectIdentifier pkcs5PBKDF2_OID =\n-            ObjectIdentifier.of(KnownOIDs.PBKDF2WithHmacSHA1);\n-\n@@ -81,1 +78,1 @@\n-    private int keyLength = -1;\n+    private final int keyLength;\n@@ -83,1 +80,1 @@\n-    private String prfAlgo = \"HmacSHA1\";\n+    private String prfAlgo;\n@@ -85,1 +82,9 @@\n-    public PBKDF2Parameters(DerValue keyDerivationFunc) throws IOException {\n+    \/**\n+     * Initialize PBKDF2Parameters from a DER encoded\n+     * parameter block.\n+     * \n+     * @param keyDerivationFunc the DER encoding of the parameter block\n+     *      \n+     * @throws IOException for parsing errors in the input stream\n+     *\/\n+    public PBKDF2Parameters(DerValue pBKDF2_params) throws IOException {\n@@ -87,13 +92,0 @@\n-        if (!pkcs5PBKDF2_OID.equals(keyDerivationFunc.data.getOID())) {\n-            throw new IOException(\"PBKDF2 parameter parsing error: \"\n-                + \"expecting the object identifier for PBKDF2\");\n-        }\n-        if (keyDerivationFunc.tag != DerValue.tag_Sequence) {\n-            throw new IOException(\"PBKDF2 parameter parsing error: \"\n-                + \"not an ASN.1 SEQUENCE tag\");\n-        }\n-        DerValue pBKDF2_params = keyDerivationFunc.data.getDerValue();\n-        if (pBKDF2_params.tag != DerValue.tag_Sequence) {\n-            throw new IOException(\"PBKDF2 parameter parsing error: \"\n-                + \"not an ASN.1 SEQUENCE tag\");\n-        }\n@@ -115,0 +107,2 @@\n+        } else {\n+            keyLength = -1;\n@@ -138,0 +132,2 @@\n+        } else {\n+            prfAlgo = \"HmacSHA1\";\n@@ -141,0 +137,21 @@\n+    public static byte[] encode(byte[] salt, int iterationCount,\n+            int keyLength, String kdfHmac) {\n+        ObjectIdentifier kdfAlgo_OID =\n+               ObjectIdentifier.of(KnownOIDs.findMatch(kdfHmac));\n+        return PBKDF2Parameters.encode(salt, iterationCount, keyLength,\n+                kdfAlgo_OID);\n+    }\n+\n+    public static byte[] encode(byte[] salt, int iterationCount,\n+            int keyLength, ObjectIdentifier kdfAlgo_OID) {\n+        return new DerOutputStream()\n+                .putOID(ObjectIdentifier.of(KnownOIDs.PBKDF2WithHmacSHA1))\n+                .write(DerValue.tag_Sequence, new DerOutputStream()\n+                        .putOctetString(salt)\n+                        .putInteger(iterationCount)\n+                        .putInteger(keyLength)\n+                        .write(DerValue.tag_Sequence, new DerOutputStream()\n+                                .putOID(kdfAlgo_OID)\n+                                .putNull())).toByteArray();\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/PBKDF2Parameters.java","additions":36,"deletions":19,"binary":false,"changes":55,"status":"modified"}]}