{"files":[{"patch":"@@ -74,0 +74,3 @@\n+    private String prfAlgo;\n+    private String hmacAlgo;\n+\n@@ -81,1 +84,1 @@\n-    protected void engineInit(AlgorithmParameterSpec paramSpec)\n+    protected void Init(AlgorithmParameterSpec paramSpec)\n@@ -91,1 +94,1 @@\n-    public void engineInit(byte[] encoded) throws IOException {\n+    public void Init(byte[] encoded) throws IOException {\n@@ -117,1 +120,1 @@\n-        String hmacAlgo = o.stdName();\n+        this.hmacAlgo = o.stdName();\n@@ -121,3 +124,3 @@\n-        String prfAlgo = kdfParams.getPrfAlgo();\n-        salt = kdfParams.getSalt();\n-        iCount = kdfParams.getIterationCount();\n+        this.prfAlgo = kdfParams.getPrfAlgo();\n+        this.salt = kdfParams.getSalt();\n+        this.iCount = kdfParams.getIterationCount();\n@@ -132,1 +135,2 @@\n-        pbmac1AlgorithmName = \"PBMAC1With\" + prfAlgo + \"And\" + hmacAlgo;\n+        pbmac1AlgorithmName = \"PBMAC1With\" + this.prfAlgo + \"And\"\n+                + this.hmacAlgo;\n@@ -135,1 +139,1 @@\n-    protected void engineInit(byte[] encoded, String decodingMethod)\n+    protected void Init(byte[] encoded, String decodingMethod)\n@@ -137,13 +141,1 @@\n-        engineInit(encoded);\n-    }\n-\n-    protected <T extends AlgorithmParameterSpec>\n-            T engineGetParameterSpec(Class<T> paramSpec)\n-        throws InvalidParameterSpecException {\n-        if (paramSpec.isAssignableFrom(PBEParameterSpec.class)) {\n-            return paramSpec.cast(\n-                new PBEParameterSpec(salt, iCount));\n-        } else {\n-            throw new InvalidParameterSpecException\n-                (\"Inappropriate parameter specification\");\n-        }\n+        Init(encoded);\n@@ -152,1 +144,1 @@\n-    protected byte[] engineGetEncoded() throws IOException {\n+    protected byte[] getEncoded() throws IOException {\n@@ -184,1 +176,1 @@\n-    protected byte[] engineGetEncoded(String encodingMethod)\n+    protected byte[] getEncoded(String encodingMethod)\n@@ -186,1 +178,1 @@\n-        return engineGetEncoded();\n+        return getEncoded();\n@@ -196,0 +188,6 @@\n+    public String getPrf() {\n+        return this.prfAlgo;\n+    }\n+    public String getHmac() {\n+        return this.hmacAlgo;\n+    }\n@@ -197,1 +195,1 @@\n-        return salt;\n+        return this.salt;\n@@ -200,1 +198,1 @@\n-        return iCount;\n+        return this.iCount;\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/PBMAC1Parameters.java","additions":24,"deletions":26,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -33,2 +33,0 @@\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n@@ -58,0 +56,1 @@\n+    private String macAlgorithm = null;\n@@ -96,1 +95,1 @@\n-            algParams.engineInit(digestAlgorithmId.getEncodedParams());\n+            algParams.Init(digestAlgorithmId.getEncodedParams());\n@@ -101,3 +100,3 @@\n-            String ps = algParams.engineToString();\n-            this.kdfHmac = parseKdfHmac(ps);\n-            this.Hmac = parseHmac(ps);\n+            this.kdfHmac = algParams.getPrf();\n+            this.Hmac = algParams.getHmac();\n+            this.macAlgorithm = \"PBEWith\" + this.kdfHmac + \"And\" + this.Hmac;\n@@ -111,0 +110,2 @@\n+            this.macAlgorithm = \"HmacPBE\"\n+                    + this.digestAlgorithmName.replace(\"-\", \"\");\n@@ -173,25 +174,0 @@\n-    \/**\n-     * Retries an action with password \"\\0\" if \"\" fails.\n-     * @param <T> the return type\n-     *\/\n-    @FunctionalInterface\n-    private interface RetryWithZero<T> {\n-\n-        T tryOnce(char[] password) throws Exception;\n-\n-        static <S> S run(RetryWithZero<S> f, char[] password) throws Exception {\n-            try {\n-                return f.tryOnce(password);\n-            } catch (Exception e) {\n-                if (password.length == 0) {\n-                    \/\/ Retry using an empty password with a NUL terminator.\n-                    if (debug != null) {\n-                        debug.println(\"Retry with a NUL password\");\n-                    }\n-                    return f.tryOnce(new char[1]);\n-                }\n-                throw e;\n-            }\n-        }\n-    }\n-\n@@ -216,13 +192,12 @@\n-        RetryWithZero.run(pass -> {\n-            SecretKey pbeKey = skf.generateSecret(new PBEKeySpec(pass,\n-                    ((PBEParameterSpec)params).getSalt(),\n-                    ((PBEParameterSpec)params).getIterationCount(),\n-                    Hmac.equals(\"HmacSHA512\") ? 64*8 : 32*8));\n-            Mac m = Mac.getInstance(Hmac);\n-            try {\n-                m.init(pbeKey);\n-            } finally {\n-                destroyPBEKey(pbeKey);\n-            }\n-            m.update(data);\n-            byte[] macResult = m.doFinal();\n+        SecretKey pbeKey = skf.generateSecret(new PBEKeySpec(password,\n+                ((PBEParameterSpec)params).getSalt(),\n+                ((PBEParameterSpec)params).getIterationCount(),\n+                Hmac.equals(\"HmacSHA512\") ? 64*8 : 32*8));\n+        Mac m = Mac.getInstance(Hmac);\n+        try {\n+            m.init(pbeKey);\n+        } finally {\n+            destroyPBEKey(pbeKey);\n+        }\n+        m.update(data);\n+        byte[] macResult = m.doFinal();\n@@ -230,5 +205,5 @@\n-            if (debug != null) {\n-                debug.println(\"Checking keystore integrity \" +\n-                        \"(\" + m.getAlgorithm() + \" iterations: \"\n-                        + macData.getIterations() + \")\");\n-            }\n+        if (debug != null) {\n+            debug.println(\"Checking keystore integrity \" +\n+                    \"(\" + m.getAlgorithm() + \" iterations: \"\n+                    + macData.getIterations() + \")\");\n+        }\n@@ -236,6 +211,4 @@\n-            if (!MessageDigest.isEqual(macData.getDigest(), macResult)) {\n-                throw new UnrecoverableKeyException(\"Failed PKCS12\" +\n-                        \" integrity checking\");\n-            }\n-            return (Void) null;\n-        }, password);\n+        if (!MessageDigest.isEqual(macData.getDigest(), macResult)) {\n+            throw new UnrecoverableKeyException(\"Failed PKCS12\" +\n+                    \" integrity checking\");\n+        }\n@@ -250,4 +223,4 @@\n-    public static byte[] calculateMac(char[] passwd, byte[] data, boolean newKeystore,\n-            String macAlgorithm, int macIterationCount, byte[] salt)\n-        throws IOException, NoSuchAlgorithmException\n-    {\n+    public static byte[] calculateMac(char[] passwd, byte[] data,\n+            boolean newKeystore, String macAlgorithm, int macIterationCount,\n+            byte[] salt)\n+        throws IOException, NoSuchAlgorithmException {\n@@ -270,0 +243,1 @@\n+            \/\/ existing keystore\n@@ -318,0 +292,4 @@\n+    String getMacAlgorithm() {\n+        return this.macAlgorithm;\n+    }\n+\n@@ -430,15 +408,8 @@\n-        final String word1 = \"With\";\n-        final String word2 = \"And\";\n-\n-        String regex1 = Pattern.quote(word1) + \"(.*?)\" + Pattern.quote(word2);\n-        Pattern pattern1 = Pattern.compile(regex1);\n-        Matcher matcher1 = pattern1.matcher(text);\n-\n-        String regex2 = Pattern.quote(word1) + \"(.*?)$\";\n-        Pattern pattern2 = Pattern.compile(regex2);\n-        Matcher matcher2 = pattern2.matcher(text);\n-\n-        if (matcher1.find()) {\n-            return matcher1.group(1);\n-        } else if (matcher2.find()) {\n-                return matcher2.group(1);\n+        int index1 = text.indexOf(\"With\") + 4;\n+        int index2 = text.indexOf(\"And\");\n+        if (index1 == 3) { \/\/ -1 + 4\n+            return null;\n+        } else if (index2 == -1) {\n+            return text.substring(index1);\n+        } else {\n+            return text.substring(index1, index2);\n@@ -446,1 +417,0 @@\n-        return null;\n@@ -450,9 +420,2 @@\n-        final String word2 = \"And\";\n-\n-        String regex = Pattern.quote(word2) + \"(.*?)$\";\n-        Pattern pattern = Pattern.compile(regex);\n-        Matcher matcher = pattern.matcher(text);\n-\n-        if (matcher.find()) {\n-            return matcher.group(1);\n-        } else {\n+        int index1 = text.indexOf(\"And\") + 3;;\n+        if (index1 == 2) { \/\/ -1 + 3\n@@ -460,0 +423,2 @@\n+        } else {\n+            return text.substring(index1);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs12\/MacData.java","additions":49,"deletions":84,"binary":false,"changes":133,"status":"modified"},{"patch":"@@ -2085,10 +2085,1 @@\n-                    String algName =\n-                            macData.getDigestAlgName().toUpperCase(Locale.ENGLISH);\n-                    if (algName.equals(\"PBMAC1\")) {\n-                        macAlgorithm = \"PBEWith\" + macData.getKdfHmac()\n-                        + \"And\" + macData.getHmac();\n-                    } else {\n-                        \/\/ Change SHA-1 to SHA1\n-                        algName = algName.replace(\"-\", \"\");\n-                        macAlgorithm = \"HmacPBE\" + algName;\n-                    }\n+                    macAlgorithm = macData.getMacAlgorithm();\n@@ -2097,2 +2088,5 @@\n-                    macData.processMacData(params, macData, password, authSafeData,\n-                            macAlgorithm);\n+                    RetryWithZero.run(pass -> {\n+                        macData.processMacData(params, macData, pass,\n+                                authSafeData, macAlgorithm);\n+                        return (Void) null;\n+                    }, password);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs12\/PKCS12KeyStore.java","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"}]}