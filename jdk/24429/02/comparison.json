{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -230,1 +230,5 @@\n-        String kdfAlgo = parseKDF(kdf);\n+        var kdfParams = new PBKDF2Parameters(kdf);\n+        String kdfAlgo = kdfParams.getKdfAlgo();\n+        salt = kdfParams.getSalt();\n+        iCount = kdfParams.getIterationCount();\n+        keysize = kdfParams.getKeyLength();\n@@ -241,59 +245,0 @@\n-    private String parseKDF(DerValue keyDerivationFunc) throws IOException {\n-\n-        if (!pkcs5PBKDF2_OID.equals(keyDerivationFunc.data.getOID())) {\n-            throw new IOException(\"PBE parameter parsing error: \"\n-                + \"expecting the object identifier for PBKDF2\");\n-        }\n-        if (keyDerivationFunc.tag != DerValue.tag_Sequence) {\n-            throw new IOException(\"PBE parameter parsing error: \"\n-                + \"not an ASN.1 SEQUENCE tag\");\n-        }\n-        DerValue pBKDF2_params = keyDerivationFunc.data.getDerValue();\n-        if (pBKDF2_params.tag != DerValue.tag_Sequence) {\n-            throw new IOException(\"PBE parameter parsing error: \"\n-                + \"not an ASN.1 SEQUENCE tag\");\n-        }\n-        DerValue specified = pBKDF2_params.data.getDerValue();\n-        \/\/ the 'specified' ASN.1 CHOICE for 'salt' is supported\n-        if (specified.tag == DerValue.tag_OctetString) {\n-            salt = specified.getOctetString();\n-        } else {\n-            \/\/ the 'otherSource' ASN.1 CHOICE for 'salt' is not supported\n-            throw new IOException(\"PBE parameter parsing error: \"\n-                + \"not an ASN.1 OCTET STRING tag\");\n-        }\n-        iCount = pBKDF2_params.data.getInteger();\n-\n-        \/\/ keyLength INTEGER (1..MAX) OPTIONAL,\n-        var ksDer = pBKDF2_params.data.getOptional(DerValue.tag_Integer);\n-        if (ksDer.isPresent()) {\n-            keysize = ksDer.get().getInteger() * 8; \/\/ keysize (in bits)\n-        }\n-\n-        \/\/ prf AlgorithmIdentifier {{PBKDF2-PRFs}} DEFAULT algid-hmacWithSHA1\n-        String kdfAlgo;\n-        var prfDer = pBKDF2_params.data.getOptional(DerValue.tag_Sequence);\n-        if (prfDer.isPresent()) {\n-            DerValue prf = prfDer.get();\n-            kdfAlgo_OID = prf.data.getOID();\n-            KnownOIDs o = KnownOIDs.findMatch(kdfAlgo_OID.toString());\n-            if (o == null || (!o.stdName().equals(\"HmacSHA1\") &&\n-                    !o.stdName().equals(\"HmacSHA224\") &&\n-                    !o.stdName().equals(\"HmacSHA256\") &&\n-                    !o.stdName().equals(\"HmacSHA384\") &&\n-                    !o.stdName().equals(\"HmacSHA512\") &&\n-                    !o.stdName().equals(\"HmacSHA512\/224\") &&\n-                    !o.stdName().equals(\"HmacSHA512\/256\"))) {\n-                throw new IOException(\"PBE parameter parsing error: \"\n-                        + \"expecting the object identifier for a HmacSHA key \"\n-                        + \"derivation function\");\n-            }\n-            kdfAlgo = o.stdName();\n-            prf.data.getOptional(DerValue.tag_Null);\n-            prf.data.atEnd();\n-        } else {\n-            kdfAlgo = \"HmacSHA1\";\n-        }\n-        return kdfAlgo;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/PBES2Parameters.java","additions":6,"deletions":61,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -0,0 +1,208 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.crypto.provider;\n+\n+import java.io.IOException;\n+import java.security.AlgorithmParametersSpi;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.InvalidParameterSpecException;\n+import javax.crypto.spec.PBEParameterSpec;\n+\n+import sun.security.util.*;\n+\n+\/**\n+ * This class implements the parameter set used with password-based\n+ * mac scheme 1 (PBMAC1), which is defined in PKCS#5 as follows:\n+ *\n+ * <pre>\n+ * -- PBMAC1\n+ *\n+ * PBMAC1Algorithms ALGORITHM-IDENTIFIER ::=\n+ *   { {PBMAC1-params IDENTIFIED BY id-PBMAC1}, ...}\n+ *\n+ * id-PBMAC1 OBJECT IDENTIFIER ::= {pkcs-5 14}\n+ *\n+ * PBMAC1-params ::= SEQUENCE {\n+ *   keyDerivationFunc AlgorithmIdentifier {{PBMAC1-KDFs}},\n+ *   messageAuthScheme AlgorithmIdentifier {{PBMAC1-MACs}} }\n+ *\n+ * PBMAC1-KDFs ALGORITHM-IDENTIFIER ::=\n+ *   { {PBKDF2-params IDENTIFIED BY id-PBKDF2}, ... }\n+ *\n+ * PBMAC1-MACs ALGORITHM-IDENTIFIER ::= { ... }\n+ *\n+ * -- PBKDF2\n+ *\n+ * {@link PBKDF2Parameters}\n+ *\n+ * <\/pre>\n+ *\n+ * @since 26\n+ *\/\n+abstract class PBMAC1Parameters extends AlgorithmParametersSpi {\n+\n+    \/\/ the PBMAC1 algorithm name\n+    private String pbmac1AlgorithmName = null;\n+\n+    private byte[] salt = null;\n+\n+    \/\/ Iteration count\n+    private int iCount = 0;\n+\n+    \/\/ the key derivation function (default is HmacSHA1)\n+    private final ObjectIdentifier kdfAlgo_OID =\n+            ObjectIdentifier.of(KnownOIDs.HmacSHA1);\n+\n+    \/\/ length of key generated by the kdf\n+    private int keyLength = -1;\n+\n+    protected void engineInit(AlgorithmParameterSpec paramSpec)\n+        throws InvalidParameterSpecException {\n+        if (!(paramSpec instanceof PBEParameterSpec)) {\n+            throw new InvalidParameterSpecException\n+                    (\"Inappropriate parameter specification\");\n+        }\n+        salt = ((PBEParameterSpec)paramSpec).getSalt().clone();\n+        iCount = ((PBEParameterSpec)paramSpec).getIterationCount();\n+    }\n+\n+    protected void engineInit(byte[] encoded)\n+        throws IOException\n+    {\n+        DerValue pBMAC1_params = new DerValue(encoded);\n+        if (pBMAC1_params.tag != DerValue.tag_Sequence) {\n+            throw new IOException(\"PBMAC1 parameter parsing error: \"\n+                    + \"not an ASN.1 SEQUENCE tag\");\n+        }\n+        DerValue[] Info = (new DerInputStream(pBMAC1_params.toByteArray()))\n+                .getSequence(2);\n+        if (Info.length != 2) {\n+            throw new IOException(\"PBMAC1 parameter parsing error: \"\n+                + \"expected length not 2\");\n+        }\n+        ObjectIdentifier OID = Info[1].data.getOID();\n+        KnownOIDs o = KnownOIDs.findMatch(OID.toString());\n+        if (o == null || (!o.stdName().equals(\"HmacSHA1\") &&\n+                !o.stdName().equals(\"HmacSHA224\") &&\n+                !o.stdName().equals(\"HmacSHA256\") &&\n+                !o.stdName().equals(\"HmacSHA384\") &&\n+                !o.stdName().equals(\"HmacSHA512\") &&\n+                !o.stdName().equals(\"HmacSHA512\/224\") &&\n+                !o.stdName().equals(\"HmacSHA512\/256\"))) {\n+            throw new IOException(\"PBMAC1 parameter parsing error: \"\n+                    + \"expecting the object identifier for a HmacSHA key \"\n+                    + \"derivation function\");\n+        }\n+        \/\/ Hmac function used to compute the MAC\n+        String hmacAlgo = o.stdName();\n+\n+        DerValue kdf = pBMAC1_params.data.getDerValue();\n+        var kdfParams = new PBKDF2Parameters(kdf);\n+        String kdfAlgo = kdfParams.getKdfAlgo();\n+        salt = kdfParams.getSalt();\n+        iCount = kdfParams.getIterationCount();\n+\n+        \/\/ Key length must be present even though it is not used.\n+        keyLength = kdfParams.getKeyLength();\n+        if (keyLength == -1) {\n+            throw new IOException(\"PBMAC1 parameter parsing \"\n+                    + \"error: missing keyLength field\");\n+        }\n+\n+        pbmac1AlgorithmName = \"PBMAC1With\" + kdfAlgo + \"And\" + hmacAlgo;\n+    }\n+\n+    protected void engineInit(byte[] encoded, String decodingMethod)\n+        throws IOException\n+    {\n+        engineInit(encoded);\n+    }\n+\n+    protected <T extends AlgorithmParameterSpec>\n+            T engineGetParameterSpec(Class<T> paramSpec)\n+        throws InvalidParameterSpecException\n+    {\n+        if (paramSpec.isAssignableFrom(PBEParameterSpec.class)) {\n+            return paramSpec.cast(\n+                new PBEParameterSpec(salt, iCount));\n+        } else {\n+            throw new InvalidParameterSpecException\n+                (\"Inappropriate parameter specification\");\n+        }\n+    }\n+\n+    protected byte[] engineGetEncoded() throws IOException {\n+        DerOutputStream out = new DerOutputStream();\n+\n+        DerOutputStream pBMAC1_params = new DerOutputStream();\n+\n+        DerOutputStream keyDerivationFunc = new DerOutputStream();\n+        keyDerivationFunc.putOID(\n+                sun.security.util.PBKDF2Parameters.pkcs5PBKDF2_OID);\n+\n+        DerOutputStream pBKDF2_params = new DerOutputStream();\n+        pBKDF2_params.putOctetString(salt); \/\/ choice: 'specified OCTET STRING'\n+        pBKDF2_params.putInteger(iCount);\n+\n+        if (keyLength > 0) {\n+            pBKDF2_params.putInteger(keyLength \/ 8); \/\/ derived key length (in octets)\n+        }\n+\n+        DerOutputStream prf = new DerOutputStream();\n+        \/\/ algorithm is id-hmacWith<MD>\n+        prf.putOID(kdfAlgo_OID);\n+        \/\/ parameters is 'NULL'\n+        prf.putNull();\n+        pBKDF2_params.write(DerValue.tag_Sequence, prf);\n+\n+        keyDerivationFunc.write(DerValue.tag_Sequence, pBKDF2_params);\n+        pBMAC1_params.write(DerValue.tag_Sequence, keyDerivationFunc);\n+\n+        out.write(DerValue.tag_Sequence, pBMAC1_params);\n+\n+        return out.toByteArray();\n+    }\n+\n+    protected byte[] engineGetEncoded(String encodingMethod)\n+        throws IOException\n+    {\n+        return engineGetEncoded();\n+    }\n+\n+    \/*\n+     * Returns a formatted string describing the parameters.\n+     *\/\n+    protected String engineToString() {\n+        return pbmac1AlgorithmName;\n+    }\n+\n+    public static final class General extends PBMAC1Parameters {\n+        public General() throws NoSuchAlgorithmException {\n+            super();\n+        }\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/PBMAC1Parameters.java","additions":208,"deletions":0,"binary":false,"changes":208,"status":"added"},{"patch":"@@ -547,0 +547,4 @@\n+        psA(\"AlgorithmParameters\", \"PBMAC1\",\n+                \"com.sun.crypto.provider.PBMAC1Parameters$General\",\n+                null);\n+\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/SunJCE.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,9 @@\n-import java.io.*;\n-import java.security.*;\n+import java.io.IOException;\n+import java.security.AlgorithmParameters;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.InvalidParameterSpecException;\n+import java.util.Objects;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.crypto.spec.PBEParameterSpec;\n@@ -31,4 +38,0 @@\n-import sun.security.util.DerInputStream;\n-import sun.security.util.DerOutputStream;\n-import sun.security.util.DerValue;\n-import sun.security.x509.AlgorithmId;\n@@ -36,0 +39,2 @@\n+import sun.security.util.*;\n+import sun.security.x509.AlgorithmId;\n@@ -47,1 +52,1 @@\n-    private AlgorithmParameters digestAlgorithmParams;\n+    private final AlgorithmParameters digestAlgorithmParams;\n@@ -49,2 +54,8 @@\n-    private final byte[] macSalt;\n-    private final int iterations;\n+    private byte[] macSalt;\n+    private byte[] extraSalt;\n+    private int iterations;\n+    private int extraIterations = -1;\n+    private String kdfHmac;\n+    private String Hmac;\n+    private int keyLength;\n+    private boolean pbmac1Keystore = false;\n@@ -75,0 +86,1 @@\n+\n@@ -78,2 +90,28 @@\n-        \/\/ Get the salt.\n-        this.macSalt = macData[1].getOctetString();\n+        if (digestInfo[0].tag != DerValue.tag_Sequence) {\n+            throw new IOException(\"algid parse error, not a sequence\");\n+        }\n+        if (digestAlgorithmName.equals(\"PBMAC1\")) {\n+            PBEParameterSpec pbeSpec;\n+\n+            try {\n+                pbeSpec =\n+                        digestAlgorithmParams.getParameterSpec(\n+                        PBEParameterSpec.class);\n+            } catch (InvalidParameterSpecException ipse) {\n+                throw new IOException(\n+                        \"Invalid PBE algorithm parameters\");\n+            }\n+            iterations = pbeSpec.getIterationCount();\n+            macSalt = pbeSpec.getSalt();\n+            String ps = digestAlgorithmParams.toString();\n+            kdfHmac = getKdfHmac(ps);\n+            if (!(kdfHmac.equals(\"HmacSHA512\") ||\n+                    kdfHmac.equals(\"HmacSHA256\"))) {\n+                throw new IllegalArgumentException(\"unsupported PBMAC1 Hmac\");\n+            }\n+\n+            Hmac = kdfHmac;\n+        }\n+\n+        \/\/ Get the old salt.\n+        extraSalt = macData[1].getOctetString();\n@@ -81,1 +119,1 @@\n-        \/\/ Iterations is optional. The default value is 1.\n+        \/\/ Old iterations are optional. The default value is 1.\n@@ -83,1 +121,1 @@\n-            this.iterations = macData[2].getInteger();\n+            extraIterations = macData[2].getInteger();\n@@ -85,1 +123,5 @@\n-            this.iterations = 1;\n+            extraIterations = 1;\n+        }\n+        if (!digestAlgorithmName.equals(\"PBMAC1\")) {\n+            macSalt = extraSalt;\n+            iterations = extraIterations;\n@@ -89,1 +131,3 @@\n-    MacData(String algName, byte[] digest, byte[] salt, int iterations)\n+    MacData(String algName, byte[] digest, AlgorithmParameterSpec params,\n+            boolean writePBMAC1, String kdfHmac, int keyLength,\n+            byte[] extraSalt, int extraIterationCount)\n@@ -92,1 +136,3 @@\n-        if (algName == null)\n+        AlgorithmId algid;\n+\n+        if (algName == null) {\n@@ -95,0 +141,7 @@\n+        }\n+        if (writePBMAC1) {\n+            pbmac1Keystore = true;\n+            algid = AlgorithmId.get(\"PBMAC1\");\n+        } else {\n+            algid = AlgorithmId.get(algName);\n+        }\n@@ -96,1 +149,0 @@\n-        AlgorithmId algid = AlgorithmId.get(algName);\n@@ -110,2 +162,19 @@\n-        this.macSalt = salt;\n-        this.iterations = iterations;\n+        if (!(params instanceof PBEParameterSpec p)) {\n+            throw new IllegalArgumentException(\"unsupported parameter spec\");\n+        }\n+\n+        if (pbmac1Keystore) {\n+            this.macSalt = p.getSalt();\n+            this.iterations = p.getIterationCount();\n+            this.kdfHmac = kdfHmac;\n+            this.Hmac = kdfHmac;\n+            this.keyLength = keyLength;\n+            this.extraSalt = extraSalt;\n+            this.extraIterations = extraIterationCount;\n+        } else {\n+            this.macSalt = p.getSalt();\n+            this.iterations = p.getIterationCount();\n+            this.kdfHmac = null;\n+            this.Hmac = null;\n+            this.keyLength = 0;\n+        }\n@@ -116,1 +185,0 @@\n-\n@@ -135,0 +203,12 @@\n+    String getKdfHmac() {\n+        return kdfHmac;\n+    }\n+\n+    byte[] getExtraSalt() {\n+        return extraSalt;\n+    }\n+\n+    int getExtraIterations() {\n+        return extraIterations;\n+    }\n+\n@@ -141,1 +221,2 @@\n-    public byte[] getEncoded() throws NoSuchAlgorithmException\n+    public byte[] getEncoded() throws NoSuchAlgorithmException,\n+            IOException\n@@ -143,0 +224,60 @@\n+        if (pbmac1Keystore) {\n+            \/\/digestAlgorithmName = \"PBMAC1\";\n+            ObjectIdentifier pkcs5PBKDF2_OID =\n+                    ObjectIdentifier.of(KnownOIDs.PBKDF2WithHmacSHA1);\n+\n+            byte[] not_used = { 'N', 'O', 'T', ' ', 'U', 'S', 'E', 'D' };\n+\n+            DerOutputStream out = new DerOutputStream();\n+            DerOutputStream tmp0 = new DerOutputStream();\n+            DerOutputStream tmp1 = new DerOutputStream();\n+            DerOutputStream tmp2 = new DerOutputStream();\n+            DerOutputStream tmp3 = new DerOutputStream();\n+            DerOutputStream tmp4 = new DerOutputStream();\n+            DerOutputStream Hmac = new DerOutputStream();\n+            DerOutputStream kdfHmac = new DerOutputStream();\n+\n+            \/\/ encode kdfHmac algorithm\n+            kdfHmac.putOID(ObjectIdentifier.of(KnownOIDs\n+                    .findMatch(this.kdfHmac)));\n+            kdfHmac.putNull();\n+\n+            \/\/ encode Hmac algorithm\n+            Hmac.putOID(ObjectIdentifier.of(KnownOIDs.findMatch(this.Hmac)));\n+            Hmac.putNull();\n+\n+            DerOutputStream pBKDF2_params = new DerOutputStream();\n+\n+            pBKDF2_params.putOctetString(macSalt); \/\/ choice: 'specified OCTET STRING'\n+\n+            \/\/ encode iterations\n+            pBKDF2_params.putInteger(iterations);\n+\n+            \/\/ encode derived key length\n+            if (keyLength > 0) {\n+                pBKDF2_params.putInteger(keyLength \/ 8); \/\/ derived key length (in octets)\n+            }\n+            pBKDF2_params.write(DerValue.tag_Sequence, kdfHmac);\n+            tmp3.putOID(pkcs5PBKDF2_OID);\n+            tmp3.write(DerValue.tag_Sequence, pBKDF2_params);\n+            tmp4.write(DerValue.tag_Sequence, tmp3);\n+            tmp4.write(DerValue.tag_Sequence, Hmac);\n+\n+            tmp1.putOID(ObjectIdentifier.of(KnownOIDs .findMatch(\"PBMAC1\")));\n+\n+            tmp1.write(DerValue.tag_Sequence, tmp4);\n+            tmp2.write(DerValue.tag_Sequence, tmp1);\n+            tmp2.putOctetString(digest);\n+            tmp0.write(DerValue.tag_Sequence, tmp2);\n+            tmp0.putOctetString(Objects.requireNonNullElse(extraSalt, not_used));\n+            if (extraIterations != -1) {\n+                tmp0.putInteger(extraIterations);\n+            } else {\n+                tmp0.putInteger(1);\n+            }\n+            out.write(DerValue.tag_Sequence, tmp0);\n+            encoded = out.toByteArray();\n+\n+            return encoded.clone();\n+        }\n+\n@@ -172,0 +313,14 @@\n+    public String getKdfHmac(String text) {\n+        final String word1 = \"With\";\n+        final String word2 = \"And\";\n+\n+        String regex = Pattern.quote(word1) + \"(.*?)\" + Pattern.quote(word2);\n+        Pattern pattern = Pattern.compile(regex);\n+        Matcher matcher = pattern.matcher(text);\n+\n+        if (matcher.find()) {\n+            return matcher.group(1);\n+        } else {\n+            return null;\n+        }\n+    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs12\/MacData.java","additions":177,"deletions":22,"binary":false,"changes":199,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,13 +29,1 @@\n-import java.security.MessageDigest;\n-import java.security.NoSuchAlgorithmException;\n-import java.security.Key;\n-import java.security.KeyFactory;\n-import java.security.KeyStore;\n-import java.security.KeyStoreSpi;\n-import java.security.KeyStoreException;\n-import java.security.PKCS12Attribute;\n-import java.security.PrivateKey;\n-import java.security.UnrecoverableEntryException;\n-import java.security.UnrecoverableKeyException;\n-import java.security.SecureRandom;\n-import java.security.Security;\n+import java.security.*;\n@@ -43,0 +31,1 @@\n+import java.security.cert.CertificateException;\n@@ -45,1 +34,0 @@\n-import java.security.cert.CertificateException;\n@@ -51,10 +39,0 @@\n-\n-import static java.nio.charset.StandardCharsets.UTF_8;\n-\n-import java.security.AlgorithmParameters;\n-import java.security.InvalidAlgorithmParameterException;\n-import javax.crypto.spec.PBEParameterSpec;\n-import javax.crypto.spec.PBEKeySpec;\n-import javax.crypto.spec.SecretKeySpec;\n-import javax.crypto.SecretKeyFactory;\n-import javax.crypto.SecretKey;\n@@ -63,0 +41,5 @@\n+import javax.crypto.SecretKey;\n+import javax.crypto.SecretKeyFactory;\n+import javax.crypto.spec.PBEKeySpec;\n+import javax.crypto.spec.PBEParameterSpec;\n+import javax.crypto.spec.SecretKeySpec;\n@@ -67,2 +50,0 @@\n-import sun.security.tools.KeyStoreUtil;\n-import sun.security.util.*;\n@@ -70,1 +51,0 @@\n-import sun.security.x509.AlgorithmId;\n@@ -73,0 +53,3 @@\n+import sun.security.tools.KeyStoreUtil;\n+import sun.security.util.*;\n+import sun.security.x509.AlgorithmId;\n@@ -75,0 +58,2 @@\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n@@ -191,0 +176,1 @@\n+    private String pbmac1Hmac = null;\n@@ -192,0 +178,3 @@\n+    private int macSaltLength = -1;\n+    private byte[] extraSalt = null;\n+    private int extraIterationCount = -1;\n@@ -805,1 +794,2 @@\n-        byte[] salt = new byte[SALT_LEN];\n+        int len = (this.macSaltLength == -1) ? SALT_LEN : this.macSaltLength;\n+        byte[] salt = new byte[len];\n@@ -1490,1 +1480,1 @@\n-        throws IOException\n+        throws IOException, NoSuchAlgorithmException\n@@ -1492,2 +1482,23 @@\n-        byte[] mData;\n-        String algName = macAlgorithm.substring(7);\n+        final byte[] mData;\n+        final PBEParameterSpec params;\n+        final String algName;\n+        final MacData macData;\n+        final String kdfHmac;\n+        boolean writePBMAC1 = false;\n+\n+        if (macAlgorithm.equals(\"PBMAC1\") ||\n+                defaultMacAlgorithm().startsWith(\"PBEWith\")) {\n+            if (defaultMacAlgorithm().equals(\"PBEWithHmacSHA512\")) {\n+                kdfHmac = \"HmacSHA512\";\n+            } else if (defaultMacAlgorithm().equals(\"PBEWithHmacSHA256\")) {\n+                kdfHmac = \"HmacSHA256\";\n+            } else {\n+                \/\/ Use value currently associated with this keystore.\n+                kdfHmac = pbmac1Hmac;\n+            }\n+            algName = \"PBMAC1\";\n+            writePBMAC1 = true;\n+        } else {\n+            algName = macAlgorithm.substring(7);\n+            kdfHmac = macAlgorithm;\n+        }\n@@ -1495,0 +1506,4 @@\n+        params = new PBEParameterSpec(getSalt(), macIterationCount);\n+\n+        var skf = SecretKeyFactory.getInstance(kdfHmac.equals(\"HmacSHA512\") ?\n+                \"PBKDF2WithHmacSHA512\" : \"PBKDF2WithHmacSHA256\");\n@@ -1496,8 +1511,6 @@\n-            \/\/ Generate a random salt.\n-            byte[] salt = getSalt();\n-\n-            \/\/ generate MAC (MAC key is generated within JCE)\n-            Mac m = Mac.getInstance(macAlgorithm);\n-            PBEParameterSpec params =\n-                        new PBEParameterSpec(salt, macIterationCount);\n-            SecretKey key = getPBEKey(passwd);\n+            int keyLength = kdfHmac.equals(\"HmacSHA512\") ? 64*8 : 32*8;\n+\n+            SecretKey pbeKey = skf.generateSecret(new PBEKeySpec(passwd,\n+                    params.getSalt(), macIterationCount, keyLength));\n+\n+            Mac m = Mac.getInstance(kdfHmac);\n@@ -1505,1 +1518,1 @@\n-                m.init(key, params);\n+                m.init(pbeKey);\n@@ -1507,1 +1520,1 @@\n-                destroyPBEKey(key);\n+                destroyPBEKey(pbeKey);\n@@ -1513,2 +1526,2 @@\n-            MacData macData = new MacData(algName, macResult, salt,\n-                    macIterationCount);\n+            macData = new MacData(algName, macResult, params, writePBMAC1,\n+                    kdfHmac, keyLength, extraSalt, extraIterationCount);\n@@ -1932,0 +1945,45 @@\n+    private void processMacData(AlgorithmParameterSpec params,\n+            MacData macData, char[] password, byte[] data, String macAlgorithm)\n+            throws  Exception {\n+        String kdfHmac;\n+\n+        if (macAlgorithm.equals(\"PBEWithHmacSHA256\")) {\n+            kdfHmac = \"HmacSHA256\";\n+        } else if (macAlgorithm.equals(\"PBEWithHmacSHA512\")) {\n+            kdfHmac = \"HmacSHA512\";\n+        } else {\n+            kdfHmac = macAlgorithm;\n+        }\n+\n+        var skf = SecretKeyFactory.getInstance(\n+                macAlgorithm.contains(\"HmacSHA512\") ?\n+                \"PBKDF2WithHmacSHA512\" : \"PBKDF2WithHmacSHA256\");\n+\n+        RetryWithZero.run(pass -> {\n+            SecretKey pbeKey = skf.generateSecret(new PBEKeySpec(pass,\n+                    ((PBEParameterSpec)params).getSalt(),\n+                    ((PBEParameterSpec)params).getIterationCount(),\n+                    kdfHmac.equals(\"HmacSHA512\") ? 64*8 : 32*8));\n+            Mac m = Mac.getInstance(kdfHmac);\n+            try {\n+                m.init(pbeKey);\n+            } finally {\n+                destroyPBEKey(pbeKey);\n+            }\n+            m.update(data);\n+            byte[] macResult = m.doFinal();\n+\n+            if (debug != null) {\n+                debug.println(\"Checking keystore integrity \" +\n+                        \"(\" + m.getAlgorithm() + \" iterations: \"\n+                        + macData.getIterations() + \")\");\n+            }\n+\n+            if (!MessageDigest.isEqual(macData.getDigest(), macResult)) {\n+                throw new UnrecoverableKeyException(\"Failed PKCS12\" +\n+                        \" integrity checking\");\n+            }\n+            return (Void) null;\n+        }, password);\n+    }\n+\n@@ -2140,0 +2198,15 @@\n+                    if (algName.equals(\"PBMAC1\")) {\n+                        byte[] salt = macData.getSalt();\n+\n+                        String pbmac1KdfHmac = macData.getKdfHmac();\n+                        pbmac1Hmac = pbmac1KdfHmac;\n+                        macIterationCount = ic;\n+                        macAlgorithm = algName;\n+                        macSaltLength = salt.length;\n+                        extraSalt = macData.getExtraSalt();\n+                        extraIterationCount = macData.getExtraIterations();\n+                        PBEParameterSpec params =\n+                                new PBEParameterSpec(salt, ic);\n+                        processMacData(params, macData, password, authSafeData,\n+                                \"PBEWith\" + pbmac1KdfHmac);\n+                    } else {\n@@ -2141,25 +2214,4 @@\n-                    \/\/ Change SHA-1 to SHA1\n-                    algName = algName.replace(\"-\", \"\");\n-\n-                    macAlgorithm = \"HmacPBE\" + algName;\n-                    macIterationCount = ic;\n-\n-                    \/\/ generate MAC (MAC key is created within JCE)\n-                    Mac m = Mac.getInstance(macAlgorithm);\n-                    PBEParameterSpec params =\n-                            new PBEParameterSpec(macData.getSalt(), ic);\n-\n-                    RetryWithZero.run(pass -> {\n-                        SecretKey key = getPBEKey(pass);\n-                        try {\n-                            m.init(key, params);\n-                        } finally {\n-                            destroyPBEKey(key);\n-                        }\n-                        m.update(authSafeData);\n-                        byte[] macResult = m.doFinal();\n-\n-                        if (debug != null) {\n-                            debug.println(\"Checking keystore integrity \" +\n-                                    \"(\" + m.getAlgorithm() + \" iterations: \" + ic + \")\");\n-                        }\n+                        \/\/ Change SHA-1 to SHA1\n+                        algName = algName.replace(\"-\", \"\");\n+                        macAlgorithm = \"HmacPBE\" + algName;\n+                        macIterationCount = ic;\n@@ -2167,6 +2219,5 @@\n-                        if (!MessageDigest.isEqual(macData.getDigest(), macResult)) {\n-                            throw new UnrecoverableKeyException(\"Failed PKCS12\" +\n-                                    \" integrity checking\");\n-                        }\n-                        return (Void) null;\n-                    }, password);\n+                        PBEParameterSpec params =\n+                                new PBEParameterSpec(macData.getSalt(), ic);\n+                        processMacData(params, macData, password, authSafeData,\n+                                macAlgorithm);\n+                    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs12\/PKCS12KeyStore.java","additions":126,"deletions":75,"binary":false,"changes":201,"status":"modified"},{"patch":"@@ -213,0 +213,1 @@\n+    PBMAC1(\"1.2.840.113549.1.5.14\"),\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/KnownOIDs.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,180 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package sun.security.util;\n+\n+import java.io.IOException;\n+\n+\/**\n+ * This class implements the parameter set used with password-based\n+ * key derivation function 2 (PBKDF2), which is defined in PKCS#5 as follows:\n+ *\n+ * <pre>\n+ *\n+ * PBKDF2Algorithms ALGORITHM-IDENTIFIER ::=\n+ *   { {PBKDF2-params IDENTIFIED BY id-PBKDF2}, ...}\n+ *\n+ * id-PBKDF2 OBJECT IDENTIFIER ::= {pkcs-5 12}\n+ *\n+ * PBKDF2-params ::= SEQUENCE {\n+ *     salt CHOICE {\n+ *       specified OCTET STRING,\n+ *       otherSource AlgorithmIdentifier {{PBKDF2-SaltSources}}\n+ *     },\n+ *     iterationCount INTEGER (1..MAX),\n+ *     keyLength INTEGER (1..MAX) OPTIONAL,\n+ *     prf AlgorithmIdentifier {{PBKDF2-PRFs}} DEFAULT algid-hmacWithSHA1\n+ * }\n+ *\n+ * PBKDF2-SaltSources ALGORITHM-IDENTIFIER ::= { ... }\n+ *\n+ * PBKDF2-PRFs ALGORITHM-IDENTIFIER ::= {\n+ *     {NULL IDENTIFIED BY id-hmacWithSHA1} |\n+ *     {NULL IDENTIFIED BY id-hmacWithSHA224} |\n+ *     {NULL IDENTIFIED BY id-hmacWithSHA256} |\n+ *     {NULL IDENTIFIED BY id-hmacWithSHA384} |\n+ *     {NULL IDENTIFIED BY id-hmacWithSHA512}, ... }\n+ *\n+ * algid-hmacWithSHA1 AlgorithmIdentifier {{PBKDF2-PRFs}} ::=\n+ *     {algorithm id-hmacWithSHA1, parameters NULL : NULL}\n+ *\n+ * id-hmacWithSHA1 OBJECT IDENTIFIER ::= {digestAlgorithm 7}\n+ *\n+ * For more information, see\n+ * <a href=\"https:\/\/tools.ietf.org\/html\/rfc8018\">RFC 8018:\n+ * PKCS #5: Password-Based Cryptography Specification<\/a>.\n+ *\n+ * <\/pre>\n+ *\/\n+final public class PBKDF2Parameters {\n+\n+    public static final ObjectIdentifier pkcs5PBKDF2_OID =\n+            ObjectIdentifier.of(KnownOIDs.PBKDF2WithHmacSHA1);\n+\n+    private final byte[] salt;\n+\n+    private final int iterationCount;\n+\n+    \/\/ keyLength in bits, or -1 if not present\n+    private int keyLength = -1;\n+\n+    \/\/ the pseudorandom function (default is HmacSHA1)\n+    private ObjectIdentifier kdfAlgo_OID =\n+            ObjectIdentifier.of(KnownOIDs.HmacSHA1);\n+\n+    private String kdfAlgo = \"HmacSHA1\";\n+\n+    public PBKDF2Parameters(DerValue keyDerivationFunc) throws IOException {\n+\n+        if (!pkcs5PBKDF2_OID.equals(keyDerivationFunc.data.getOID())) {\n+            throw new IOException(\"PBKDF2 parameter parsing error: \"\n+                + \"expecting the object identifier for PBKDF2\");\n+        }\n+        if (keyDerivationFunc.tag != DerValue.tag_Sequence) {\n+            throw new IOException(\"PBKDF2 parameter parsing error: \"\n+                + \"not an ASN.1 SEQUENCE tag\");\n+        }\n+        DerValue pBKDF2_params = keyDerivationFunc.data.getDerValue();\n+        if (pBKDF2_params.tag != DerValue.tag_Sequence) {\n+            throw new IOException(\"PBKDF2 parameter parsing error: \"\n+                + \"not an ASN.1 SEQUENCE tag\");\n+        }\n+        DerValue specified = pBKDF2_params.data.getDerValue();\n+        \/\/ the 'specified' ASN.1 CHOICE for 'salt' is supported\n+        if (specified.tag == DerValue.tag_OctetString) {\n+            salt = specified.getOctetString();\n+        } else {\n+            \/\/ the 'otherSource' ASN.1 CHOICE for 'salt' is not supported\n+            throw new IOException(\"PBKDF2 parameter parsing error: \"\n+                + \"not an ASN.1 OCTET STRING tag\");\n+        }\n+        iterationCount = pBKDF2_params.data.getInteger();\n+\n+        \/\/ keyLength INTEGER (1..MAX) OPTIONAL,\n+        var ksDer = pBKDF2_params.data.getOptional(DerValue.tag_Integer);\n+        if (ksDer.isPresent()) {\n+            keyLength = ksDer.get().getInteger() * 8; \/\/ keyLength (in bits)\n+        }\n+\n+        \/\/ prf AlgorithmIdentifier {{PBKDF2-PRFs}} DEFAULT algid-hmacWithSHA1\n+        var prfDer = pBKDF2_params.data.getOptional(DerValue.tag_Sequence);\n+        if (prfDer.isPresent()) {\n+            DerValue prf = prfDer.get();\n+            kdfAlgo_OID = prf.data.getOID();\n+            KnownOIDs o = KnownOIDs.findMatch(kdfAlgo_OID.toString());\n+            if (o == null || (!o.stdName().equals(\"HmacSHA1\") &&\n+                    !o.stdName().equals(\"HmacSHA224\") &&\n+                    !o.stdName().equals(\"HmacSHA256\") &&\n+                    !o.stdName().equals(\"HmacSHA384\") &&\n+                    !o.stdName().equals(\"HmacSHA512\") &&\n+                    !o.stdName().equals(\"HmacSHA512\/224\") &&\n+                    !o.stdName().equals(\"HmacSHA512\/256\"))) {\n+                throw new IOException(\"PBKDF2 parameter parsing error: \"\n+                        + \"expecting the object identifier for a HmacSHA \"\n+                        + \"pseudorandom function\");\n+            }\n+            kdfAlgo = o.stdName();\n+            prf.data.getOptional(DerValue.tag_Null);\n+            prf.data.atEnd();\n+        }\n+    }\n+\n+    \/**\n+     * Returns the salt.\n+     *\n+     * @return the salt. Returns a new array\n+     * each time this method is called.\n+     *\/\n+    public byte[] getSalt() {\n+        return this.salt.clone();\n+    }\n+\n+    \/**\n+     * Returns the iteration count.\n+     *\n+     * @return the iteration count\n+     *\/\n+    public int getIterationCount() {\n+        return this.iterationCount;\n+    }\n+\n+    \/**\n+     * Returns size of key generated by PBKDF2, or -1 if not found\/set.\n+     *\n+     * @return size of key generated by PBKDF2, or -1 if not found\/set\n+     *\/\n+    public int getKeyLength() {\n+        return this.keyLength;\n+    }\n+\n+    \/**\n+     * Returns name of Hmac.\n+     *\n+     * @return name of Hmac\n+     *\/\n+    public String getKdfAlgo() {\n+        return this.kdfAlgo;\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/PBKDF2Parameters.java","additions":180,"deletions":0,"binary":false,"changes":180,"status":"added"},{"patch":"@@ -0,0 +1,467 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8343232\n+ * @summary PKCS#12 KeyStore support for RFC 9579: Use of Password-Based Message Authentication Code 1 (PBMAC1)\n+ *\/\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.security.KeyStore;\n+import java.util.Base64;\n+\n+public class PBMAC1Encoding {\n+    \/\/ A.1.  Valid PKCS #12 File with SHA-256 HMAC and PRF\n+    static final String A1 =\n+        \"MIIKigIBAzCCCgUGCSqGSIb3DQEHAaCCCfYEggnyMIIJ7jCCBGIGCSqGSIb3DQEH\" +\n+        \"BqCCBFMwggRPAgEAMIIESAYJKoZIhvcNAQcBMFcGCSqGSIb3DQEFDTBKMCkGCSqG\" +\n+        \"SIb3DQEFDDAcBAg9pxXxY2yscwICCAAwDAYIKoZIhvcNAgkFADAdBglghkgBZQME\" +\n+        \"ASoEEK7yYaFQDi1pYwWzm9F\/fs+AggPgFIT2XapyaFgDppdvLkdvaF3HXw+zjzKb\" +\n+        \"7xFC76DtVPhVTWVHD+kIss+jsj+XyvMwY0aCuAhAG\/Dig+vzWomnsqB5ssw5\/kTb\" +\n+        \"+TMQ5PXLkNeoBmB6ArKeGc\/QmCBQvQG\/a6b+nXSWmxNpP+71772dmWmB8gcSJ0kF\" +\n+        \"Fj75NrIbmNiDMCb71Q8gOzBMFf6BpXf\/3xWAJtxyic+tSNETfOJa8zTZb0+lV0w9\" +\n+        \"5eUmDrPUpuxEVbb0KJtIc63gRkcfrPtDd6Ii4Zzbzj2Evr4\/S4hnrQBsiryVzJWy\" +\n+        \"IEjaD0y6+DmG0JwMgRuGi1wBoGowi37GMrDCOyOZWC4n5wHLtYyhR6JaElxbrhxP\" +\n+        \"H46z2USLKmZoF+YgEQgYcSBXMgP0t36+XQocFWYi2N5niy02TnctwF430FYsQlhJ\" +\n+        \"Suma4I33E808dJuMv8T\/soF66HsD4Zj46hOf4nWmas7IaoSAbGKXgIa7KhGRJvij\" +\n+        \"xM3WOX0aqNi\/8bhnxSA7fCmIy\/7opyx5UYJFWGBSmHP1pBHBVmx7Ad8SAsB9MSsh\" +\n+        \"nbGjGiUk4h0QcOi29\/M9WwFlo4urePyI8PK2qtVAmpD3rTLlsmgzguZ69L0Q\/CFU\" +\n+        \"fbtqsMF0bgEuh8cfivd1DYFABEt1gypuwCUtCqQ7AXK2nQqOjsQCxVz9i9K8NDeD\" +\n+        \"aau98VAl0To2sk3\/VR\/QUq0PRwU1jPN5BzUevhE7SOy\/ImuJKwpGqqFljYdrQmj5\" +\n+        \"jDe+LmYH9QGVRlfN8zuU+48FY8CAoeBeHn5AAPml0PYPVUnt3\/jQN1+v+CahNVI+\" +\n+        \"La8q1Nen+j1R44aa2I3y\/pUgtzXRwK+tPrxTQbG030EU51LYJn8amPWmn3w75ZIA\" +\n+        \"MJrXWeKj44de7u4zdUsEBVC2uM44rIHM8MFjyYAwYsey0rcp0emsaxzar+7ZA67r\" +\n+        \"lDoXvvS3NqsnTXHcn3T9tkPRoee6L7Dh3x4Od96lcRwgdYT5BwyH7e34ld4VTUmJ\" +\n+        \"bDEq7Ijvn4JKrwQJh1RCC+Z\/ObfkC42xAm7G010u3g08xB0Qujpdg4a7VcuWrywF\" +\n+        \"c7hLNquuaF4qoDaVwYXHH3iuX6YlJ\/3siTKbYCVXPEZOAMBP9lF\/OU76UMJBQNfU\" +\n+        \"0xjDx+3AhUVgnGuCsmYlK6ETDp8qOZKGyV0KrNSGtqLx3uMhd7PETeW+ML3tDQ\/0\" +\n+        \"X9fMkcZHi4C2fXnoHV\/qa2dGhBj4jjQ0Xh1poU6mxGn2Mebe2hDsBZkkBpnn7pK4\" +\n+        \"wP\/VqXdQTwqEuvzGHLVFsCuADe40ZFBmtBrf70wG7ZkO8SUZ8Zz1IX3+S024g7yj\" +\n+        \"QRev\/6x6TtkwggWEBgkqhkiG9w0BBwGgggV1BIIFcTCCBW0wggVpBgsqhkiG9w0B\" +\n+        \"DAoBAqCCBTEwggUtMFcGCSqGSIb3DQEFDTBKMCkGCSqGSIb3DQEFDDAcBAhTxzw+\" +\n+        \"VptrYAICCAAwDAYIKoZIhvcNAgkFADAdBglghkgBZQMEASoEEK9nSqc1I2t4tMVG\" +\n+        \"bWHpdtQEggTQzCwI7j34gCTvfj6nuOSndAjShGv7mN2j7WMV0pslTpq2b9Bn3vn1\" +\n+        \"Y0JMvL4E7sLrUzNU02pdOcfCnEpMFccNv2sQrLp1mOCKxu8OjSqHZLoKVL0ROVsZ\" +\n+        \"8dMECLLigDlPKRiSyLErl14tErX4\/zbkUaWMROO28kFbTbubQ8YoHlRUwsKW1xLg\" +\n+        \"vfi0gRkG\/zHXRfQHjX\/8NStv7hXlehn7\/Gy2EKPsRFhadm\/iUHAfmCMkMgHTU248\" +\n+        \"JER9+nsXltd59H+IeDpj\/kbxZ+YvHow9XUZKu828d3MQnUpLZ1BfJGhMBPVwbVUD\" +\n+        \"A40CiQBVdCoGtPJyalL28xoS3H0ILFCnwQOr6u0HwleNJPGHq78HUyH6Hwxnh0b0\" +\n+        \"5o163r6wTFZn5cMOxpbs\/Ttd+3TrxmrYpd2XnuRme3cnaYJ0ILvpc\/8eLLR7SKjD\" +\n+        \"T4JhZ0h\/CfcV2WWvhpQugkY0pWrZ+EIMneB1dZB96mJVLxOi148OeSgi0PsxZMNi\" +\n+        \"YM33rTpwQT5WqOsEyDwUQpne5b8Kkt\/s7EN0LJNnPyJJRL1LcqOdr6j+6YqRtPa7\" +\n+        \"a9oWJqMcuTP+bqzGRJh+3HDlFBw2Yzp9iadv4KmB2MzhStLUoi2MSjvnnkkd5Led\" +\n+        \"sshAd6WbKfF7kLAHQHT4Ai6dMEO4EKkEVF9JBtxCR4JEn6C98Lpg+Lk+rfY7gHOf\" +\n+        \"ZxtgGURwgXRY3aLUrdT55ZKgk3ExVKPzi5EhdpAau7JKhpOwyKozAp\/OKWMNrz6h\" +\n+        \"obu2Mbn1B+IA60psYHHxynBgsJHv7WQmbYh8HyGfHgVvaA8pZCYqxxjpLjSJrR8B\" +\n+        \"Bu9H9xkTh7KlhxgreXYv19uAYbUd95kcox9izad6VPnovgFSb+Omdy6PJACPj6hF\" +\n+        \"W6PJbucP0YPpO0VtWtQdZZ3df1P0hZ7qvKwOPFA+gKZSckgqASfygiP9V3Zc8jIi\" +\n+        \"wjNzoDM2QT+UUJKiiGYXJUEOO9hxzFHlGj759DcNRhpgl5AgR57ofISD9yBuCAJY\" +\n+        \"PQ\/aZHPFuRTrcVG3RaIbCAS73nEznKyFaLOXfzyfyaSmyhsH253tnyL1MejC+2bR\" +\n+        \"Eko\/yldgFUxvU5JI+Q3KJ6Awj+PnduHXx71E4UwSuu2xXYMpxnQwI6rroQpZBX82\" +\n+        \"HhqgcLV83P8lpzQwPdHjH5zkoxmWdC0+jU\/tcQfNXYpJdyoaX7tDmVclLhwl9ps\/\" +\n+        \"O841pIsNLJWXwvxG6B+3LN\/kw4QjwN194PopiOD7+oDm5mhttO78CrBrRxHMD\/0Q\" +\n+        \"qniZjKzSZepxlZq+J792u8vtMnuzzChxu0Bf3PhIXcJNcVhwUtr0yKe\/N+NvC0tm\" +\n+        \"p8wyik\/BlndxN9eKbdTOi2wIi64h2QG8nOk66wQ\/PSIJYwZl6eDNEQSzH\/1mGCfU\" +\n+        \"QnUT17UC\/p+Qgenf6Auap2GWlvsJrB7u\/pytz65rtjt\/ouo6Ih6EwWqwVVpGXZD0\" +\n+        \"7gVWH0Ke\/Vr6aPGNvkLcmftPuDZsn9jiig3guhdeyRVf10Ox369kKWcG75q77hxE\" +\n+        \"IzSzDyUlBNbnom9SIjut3r+qVYmWONatC6q\/4D0I42Lnjd3dEyZx7jmH3g\/S2ASM\" +\n+        \"FzWr9pvXc61dsYOkdZ4PYa9XPUZxXFagZsoS3F1sU799+IJVU0tC0MExJTAjBgkq\" +\n+        \"hkiG9w0BCRUxFgQUwWO5DorvVWYF3BWUmAw0rUEajScwfDBtMEkGCSqGSIb3DQEF\" +\n+        \"DjA8MCwGCSqGSIb3DQEFDDAfBAhvRzw4sC4xcwICCAACASAwDAYIKoZIhvcNAgkF\" +\n+        \"ADAMBggqhkiG9w0CCQUABCB6pW2FOdcCNj87zS64NUXG36K5aXDnFHctIk5Bf4kG\" +\n+        \"3QQITk9UIFVTRUQCAQE=\";\n+\n+    \/\/ A.2.  Valid PKCS #12 File with SHA-256 HMAC and SHA-512 PRF\n+    static final String A2 =\n+        \"MIIKigIBAzCCCgUGCSqGSIb3DQEHAaCCCfYEggnyMIIJ7jCCBGIGCSqGSIb3DQEH\" +\n+        \"BqCCBFMwggRPAgEAMIIESAYJKoZIhvcNAQcBMFcGCSqGSIb3DQEFDTBKMCkGCSqG\" +\n+        \"SIb3DQEFDDAcBAi4j6UBBY2iOgICCAAwDAYIKoZIhvcNAgkFADAdBglghkgBZQME\" +\n+        \"ASoEEFpHSS5zrk\/9pkDo1JRbtE6AggPgtbMLGoFd5KLpVXMdcxLrT129L7\/vCr0B\" +\n+        \"0I2tnhPPA7aFtRjjuGbwooCMQwxw9qzuCX1eH4xK2LUw6Gbd2H47WimSOWJMaiUb\" +\n+        \"wy4alIWELYufe74kXPmKPCyH92lN1hqu8s0EGhIl7nBhWbFzow1+qpIc9\/lpujJo\" +\n+        \"wodSY+pNBD8oBeoU1m6DgOjgc62apL7m0nwavDUqEt7HAqtTBxKxu\/3lpb1q8nbl\" +\n+        \"XLTqROax5feXErf+GQAqs24hUJIPg3O1eCMDVzH0h5pgZyRN9ZSIP0HC1i+d1lnb\" +\n+        \"JwHyrAhZv8GMdAVKaXHETbq8zTpxT3UE\/LmH1gyZGOG2B21D2dvNDKa712sHOS\/t\" +\n+        \"3XkFngHDLx+a9pVftt6p7Nh6jqI581tb7fyc7HBV9VUc\/+xGgPgHZouaZw+I3PUz\" +\n+        \"fjHboyLQer22ndBz+l1\/S2GhhZ4xLXg4l0ozkgn7DX92S\/UlbmcZam1apjGwkGY\/\" +\n+        \"7ktA8BarNW211mJF+Z+hci+BeDiM7eyEguLCYRdH+\/UBiUuYjG1hi5Ki3+42pRZD\" +\n+        \"FZkTHGOrcG6qE2KJDsENj+RkGiylG98v7flm4iWFVAB78AlAogT38Bod40evR7Ok\" +\n+        \"c48sOIW05eCH\/GLSO0MHKcttYUQNMqIDiG1TLzP1czFghhG97AxiTzYkKLx2cYfs\" +\n+        \"pgg5PE9drq1fNzBZMUmC2bSwRhGRb5PDu6meD8uqvjxoIIZQAEV53xmD63umlUH1\" +\n+        \"jhVXfcWSmhU\/+vV\/IWStZgQbwhF7DmH2q6S8itCkz7J7Byp5xcDiUOZ5Gpf9RJnk\" +\n+        \"DTZoOYM5iA8kte6KCwA+jnmCgstI5EbRbnsNcjNvAT3q\/X776VdmnehW0VeL+6k4\" +\n+        \"z+GvQkr+D2sxPpldIb5hrb+1rcp9nOQgtpBnbXaT16Lc1HdTNe5kx4ScujXOWwfd\" +\n+        \"Iy6bR6H0QFq2SLKAAC0qw4E8h1j3WPxll9e0FXNtoRKdsRuX3jzyqDBrQ6oGskkL\" +\n+        \"wnyMtVjSX+3c9xbFc4vyJPFMPwb3Ng3syjUDrOpU5RxaMEAWt4josadWKEeyIC2F\" +\n+        \"wrS1dzFn\/5wv1g7E7xWq+nLq4zdppsyYOljzNUbhOEtJ2lhme3NJ45fxnxXmrPku\" +\n+        \"gBda1lLf29inVuzuTjwtLjQwGk+usHJm9R\/K0hTaSNRgepXnjY0cIgS+0gEY1\/BW\" +\n+        \"k3+Y4GE2JXds2cQToe5rCSYH3QG0QTyUAGvwX6hAlhrRRgUG3vxtYSixQ3UUuwzs\" +\n+        \"eQW2SUFLl1611lJ7cQwFSPyr0sL0p81vdxWiigwjkfPtgljZ2QpmzR5rX2xiqItH\" +\n+        \"Dy4E+iVigIYwggWEBgkqhkiG9w0BBwGgggV1BIIFcTCCBW0wggVpBgsqhkiG9w0B\" +\n+        \"DAoBAqCCBTEwggUtMFcGCSqGSIb3DQEFDTBKMCkGCSqGSIb3DQEFDDAcBAhDiwsh\" +\n+        \"4wt3aAICCAAwDAYIKoZIhvcNAgkFADAdBglghkgBZQMEASoEELNFnEpJT65wsXwd\" +\n+        \"fZ1g56cEggTQRo04bP\/fWfPPZrTEczq1qO1HHV86j76Sgxau2WQ9OQAG998HFtNq\" +\n+        \"NxO8R66en6QFhqpWCI73tSJD+oA29qOsT+Xt2bR2z5+K7D4QoiXuLa3gXv62VkjB\" +\n+        \"0DLCHAS7Mu+hkp5OKCpXCS7fo0OnAiQjM4EluAsiwwLrHu7z1E16UwpmlgKQnaC1\" +\n+        \"S44fV9znS9TxofRTnuCq1lupdn2qQjSydOU6inQeKLBflKRiLrJHOobaFmjWwp1U\" +\n+        \"OQAMuZrALhHyIbOFXMPYk3mmU\/1UPuRGcbcV5v2Ut2UME+WYExXSCOYR3\/R4UfVk\" +\n+        \"IfEzeRPFs2slJMIDS2fmMyFkEEElBckhKO9IzhQV3koeKUBdM066ufyax\/uIyXPm\" +\n+        \"MiB9fAqbQQ4jkQTT80bKkBAP1Bvyg2L8BssstR5iCoZgWnfA9Uz4RI5GbRqbCz7H\" +\n+        \"iSkuOIowEqOox3IWbXty5VdWBXNjZBHpbE0CyMLSH\/4QdGVw8R0DiCAC0mmaMaZq\" +\n+        \"32yrBR32E472N+2KaicvX31MwB\/LkZN46c34TGanL5LJZx0DR6ITjdNgP8TlSSrp\" +\n+        \"7y2mqi7VbKp\/C\/28Cj5r+m++Gk6EOUpLHsZ2d2hthrr7xqoPzUAEkkyYWedHJaoQ\" +\n+        \"TkoIisZb0MGlXb9thjQ8Ee429ekfjv7CQfSDS6KTE\/+mhuJ33mPz1ZcIacHjdHhE\" +\n+        \"6rbrKhjSrLbgmrGa8i7ezd89T4EONu0wkG9KW0wM2cn5Gb12PF6rxjTfzypG7a50\" +\n+        \"yc1IJ2Wrm0B7gGuYpVoCeIohr7IlxPYdeQGRO\/SlzTd0xYaJVm9FzJaMNK0ZqnZo\" +\n+        \"QMEPaeq8PC3kMjpa8eAiHXk9K3DWdOWYviGVCPVYIZK6Cpwe+EwfXs+2hZgZlYzc\" +\n+        \"vpUWg60md1PD4UsyLQagaj37ubR6K4C4mzlhFx5NovV\/C\/KD+LgekMbjCtwEQeWy\" +\n+        \"agev2l9KUEz73\/BT4TgQFM5K2qZpVamwmsOmldPpekGPiUCu5YxYg\/y4jUKvAqj1\" +\n+        \"S9t4wUAScCJx8OvXUfgpmS2+mhFPBiFps0M4O3nWG91Q6mKMqbNHPUcFDn9P7cUh\" +\n+        \"s1xu3NRLyJ+QIfVfba3YBTV8A6WBYEmL9lxf1uL1WS2Bx6+Crh0keyNUPo9cRjpx\" +\n+        \"1oj\/xkInoc2HQODEkvuK9DD7VrLr7sDhfmJvr1mUfJMQ5\/THk7Z+E+NAuMdMtkM2\" +\n+        \"yKXxghZAbBrQkU3mIW150i7PsjlUw0o0\/LJvQwJIsh6yeJDHY8mby9mIdeP3LQAF\" +\n+        \"clYKzNwmgwbdtmVAXmQxLuhmEpXfstIzkBrNJzChzb2onNSfa+r5L6XEHNHl7wCw\" +\n+        \"TuuV\/JWldNuYXLfVfuv3msfSjSWkv6aRtRWIvmOv0Qba2o05LlwFMd1PzKM5uN4D\" +\n+        \"DYtsS9A6yQOXEsvUkWcLOJnCs8SkJRdXhJTxdmzeBqM1JttKwLbgGMbpjbxlg3ns\" +\n+        \"N+Z+sEFox+2ZWOglgnBHj0mCZOiAC8wqUu+sxsLT4WndaPWKVqoRQChvDaZaNOaN\" +\n+        \"qHciF9HPUcfZow+fH8TnSHneiQcDe6XcMhSaQ2MtpY8\/jrgNKguZt22yH9gw\/VpT\" +\n+        \"3\/QOB7FBgKFIEbvUaf3nVjFIlryIheg+LeiBd2isoMNNXaBwcg2YXukxJTAjBgkq\" +\n+        \"hkiG9w0BCRUxFgQUwWO5DorvVWYF3BWUmAw0rUEajScwfDBtMEkGCSqGSIb3DQEF\" +\n+        \"DjA8MCwGCSqGSIb3DQEFDDAfBAgUr2yP+\/DBrgICCAACASAwDAYIKoZIhvcNAgsF\" +\n+        \"ADAMBggqhkiG9w0CCQUABCA5zFL93jw8ItGlcbHKhqkNwbgpp6layuOuxSju4\/Vd\" +\n+        \"6QQITk9UIFVTRUQCAQE=\";\n+\n+    \/\/ A.3.  Valid PKCS #12 File with SHA-512 HMAC and PRF\n+    static final String A3 =\n+        \"MIIKrAIBAzCCCgUGCSqGSIb3DQEHAaCCCfYEggnyMIIJ7jCCBGIGCSqGSIb3DQEH\" +\n+        \"BqCCBFMwggRPAgEAMIIESAYJKoZIhvcNAQcBMFcGCSqGSIb3DQEFDTBKMCkGCSqG\" +\n+        \"SIb3DQEFDDAcBAisrqL8obSBaQICCAAwDAYIKoZIhvcNAgkFADAdBglghkgBZQME\" +\n+        \"ASoEECjXYYca0pwsgn1Imb9WqFGAggPgT7RcF5YzEJANZU9G3tSdpCHnyWatTlhm\" +\n+        \"iCEcBGgwI5gz0+GoX+JCojgYY4g+KxeqznyCu+6GeD00T4Em7SWme9nzAfBFzng0\" +\n+        \"3lYCSnahSEKfgHerbzAtq9kgXkclPVk0Liy92\/buf0Mqotjjs\/5o78AqP86Pwbj8\" +\n+        \"xYNuXOU1ivO0JiW2c2HefKYvUvMYlOh99LCoZPLHPkaaZ4scAwDjFeTICU8oowVk\" +\n+        \"LKvslrg1pHbfmXHMFJ4yqub37hRtj2CoJNy4+UA2hBYlBi9WnuAJIsjv0qS3kpLe\" +\n+        \"4+J2DGe31GNG8pD01XD0l69OlailK1ykh4ap2u0KeD2z357+trCFbpWMMXQcSUCO\" +\n+        \"OcVjxYqgv\/l1++9huOHoPSt224x4wZfJ7cO2zbAAx\/K2CPhdvi4CBaDHADsRq\/c8\" +\n+        \"SAi+LX5SCocGT51zL5KQD6pnr2ExaVum+U8a3nMPPMv9R2MfFUksYNGgFvS+lcZf\" +\n+        \"R3qk\/G9iXtSgray0mwRA8pWzoXl43vc9HJuuCU+ryOc\/h36NChhQ9ltivUNaiUc2\" +\n+        \"b9AAQSrZD8Z7KtxjbH3noS+gjDtimDB0Uh199zaCwQ95y463zdYsNCESm1OT979o\" +\n+        \"Y+81BWFMFM\/Hog5s7Ynhoi2E9+ZlyLK2UeKwvWjGzvcdPvxHR+5l\/h6PyWROlpaZ\" +\n+        \"zmzZBm+NKmbXtMD2AEa5+Q32ZqJQhijXZyIji3NS65y81j\/a1ZrvU0lOVKA+MSPN\" +\n+        \"KU27\/eKZuF1LEL6qaazTUmpznLLdaVQy5aZ1qz5dyCziKcuHIclhh+RCblHU6XdE\" +\n+        \"6pUTZSRQQiGUIkPUTnU9SFlZc7VwvxgeynLyXPCSzOKNWYGajy1LxDvv28uhMgNd\" +\n+        \"WF51bNkl1QYl0fNunGO7YFt4wk+g7CQ\/Yu2w4P7S3ZLMw0g4eYclcvyIMt4vxXfp\" +\n+        \"VTKIPyzMqLr+0dp1eCPm8fIdaBZUhMUC\/OVqLwgnPNY9cXCrn2R1cGKo5LtvtjbH\" +\n+        \"2skz\/D5DIOErfZSBJ8LE3De4j8MAjOeC8ia8LaM4PNfW\/noQP1LBsZtTDTqEy01N\" +\n+        \"Z5uliIocyQzlyWChErJv\/Wxh+zBpbk1iXc2Owmh2GKjx0VSe7XbiqdoKkONUNUIE\" +\n+        \"siseASiU\/oXdJYUnBYVEUDJ1HPz7qnKiFhSgxNJZnoPfzbbx1hEzV+wxQqNnWIqQ\" +\n+        \"U0s7Jt22wDBzPBHGao2tnGRLuBZWVePJGbsxThGKwrf3vYsNJTxme5KJiaxcPMwE\" +\n+        \"r+ln2AqVOzzXHXgIxv\/dvK0Qa7pH3AvGzcFjQChTRipgqiRrLor0\/\/8580h+Ly2l\" +\n+        \"IFo7bCuztmcwggWEBgkqhkiG9w0BBwGgggV1BIIFcTCCBW0wggVpBgsqhkiG9w0B\" +\n+        \"DAoBAqCCBTEwggUtMFcGCSqGSIb3DQEFDTBKMCkGCSqGSIb3DQEFDDAcBAi1c7S5\" +\n+        \"IEG77wICCAAwDAYIKoZIhvcNAgkFADAdBglghkgBZQMEASoEEN6rzRtIdYxqOnY+\" +\n+        \"aDS3AFYEggTQNdwUoZDXCryOFBUI\/z71vfoyAxlnwJLRHNXQUlI7w0KkH22aNnSm\" +\n+        \"xiaXHoCP1HgcmsYORS7p\/ITi\/9atCHqnGR4zHmePNhoMpNHFehdjlUUWgt004vUJ\" +\n+        \"5ZwTdXweM+K4We6CfWA\/tyvsyGNAsuunel+8243Zsv0mGLKpjA+ZyALt51s0knmX\" +\n+        \"OD2DW49FckImUVnNC5LmvEIAmVC\/ZNycryZQI+2EBkJKe+BC3834GexJnSwtUBg3\" +\n+        \"Xg33ZV7X66kw8tK1Ws5zND5GQAJyIu47mnjZkIWQBY+XbWowrBZ8uXIQuxMZC0p8\" +\n+        \"u62oIAtZaVQoVTR1LyR\/7PISFW6ApwtbTn6uQxsb16qF8lEM0S1+x0AfJY6Zm11t\" +\n+        \"yCqbb2tYZF+X34MoUkR\/IYC\/KCq\/KJdpnd8Yqgfrwjg8dR2WGIxbp2GBHq6BK\/DI\" +\n+        \"ehOLMcLcsOuP0DEXppfcelMOGNIs+4h4KsjWiHVDMPsqLdozBdm6FLGcno3lY5FO\" +\n+        \"+avVrlElAOB+9evgaBbD2lSrEMoOjAoD090tgXXwYBEnWnIpdk+56cf5IpshrLBA\" +\n+        \"\/+H13LBLes+X1o5dd0Mu+3abp5RtAv7zLPRRtXkDYJPzgNcTvJ2Wxw2C+zrAclzZ\" +\n+        \"7IRdcLESUa4CsN01aEvQgOtkCNVjSCtkJGP0FstsWM4hP7lfSB7P2tDL+ugy6GvB\" +\n+        \"X1sz9fMC7QMAFL98nDm\/yqcnejG1BcQXZho8n0svSfbcVByGlPZGMuI9t25+0B2M\" +\n+        \"TAx0f6zoD8+fFmhcVgS6MQPybGKFawckYl0zulsePqs+G4voIW17owGKsRiv06Jm\" +\n+        \"ZSwd3KoGmjM49ADzuG9yrQ5PSa0nhVk1tybNape4HNYHrAmmN0ILlN+E0Bs\/Edz4\" +\n+        \"ntYZuoc\/Z35tCgm79dV4\/Vl6HUZ1JrLsLrEWCByVytwVFyf3\/MwTWdf+Ac+XzBuC\" +\n+        \"yEMqPlvnPWswdnaid35pxios79fPl1Hr0\/Q6+DoA5GyYq8SFdP7EYLrGMGa5GJ+x\" +\n+        \"5nS7z6U4UmZ2sXuKYHnuhB0zi6Y04a+fhT71x02eTeC7aPlEB319UqysujJVJnso\" +\n+        \"bkcwOu\/Jj0Is9YeFd693dB44xeZuYyvlwoD19lqcim0TSa2Tw7D1W\/yu47dKrVP2\" +\n+        \"VKxRqomuAQOpoZiuSfq1\/7ysrV8U4hIlIU2vnrSVJ8EtPQKsoBW5l70dQGwXyxBk\" +\n+        \"BUTHqfJ4LG\/kPGRMOtUzgqFw2DjJtbym1q1MZgp2ycMon4vp7DeQLGs2XfEANB+Y\" +\n+        \"nRwtjpevqAnIuK6K3Y02LY4FXTNQpC37Xb04bmdIQAcE0MaoP4\/hY87aS82PQ68g\" +\n+        \"3bI79uKo4we2g+WaEJlEzQ7147ZzV2wbDq89W69x1MWTfaDwlEtd4UaacYchAv7B\" +\n+        \"TVaaVFiRAUywWaHGePpZG2WV1feH\/zd+temxWR9qMFgBZySg1jipBPVciwl0LqlW\" +\n+        \"s\/raIBYmLmAaMMgM3759UkNVznDoFHrY4z2EADXp0RHHVzJS1x+yYvp\/9I+AcW55\" +\n+        \"oN0UP\/3uQ6eyz\/ix22sovQwhMJ8rmgR6CfyRPKmXu1RPK3puNv7mbFTfTXpYN2vX\" +\n+        \"vhEZReXY8hJF\/9o4G3UrJ1F0MgUHMCG86cw1z0bhPSaXVoufOnx\/fRoxJTAjBgkq\" +\n+        \"hkiG9w0BCRUxFgQUwWO5DorvVWYF3BWUmAw0rUEajScwgZ0wgY0wSQYJKoZIhvcN\" +\n+        \"AQUOMDwwLAYJKoZIhvcNAQUMMB8ECFDaXOUaOcUPAgIIAAIBQDAMBggqhkiG9w0C\" +\n+        \"CwUAMAwGCCqGSIb3DQILBQAEQHIAM8C9OAsHUCj9CmOJioqf7YwD4O\/b3UiZ3Wqo\" +\n+        \"F6OmQIRDc68SdkZJ6024l4nWlnhTE7a4lb2Tru4k3NOTa1oECE5PVCBVU0VEAgEB\";\n+\n+    \/\/ Invalid PKCS #12 File with Incorrect Iteration Count\n+    static final String A4 =\n+        \"MIIKiwIBAzCCCgUGCSqGSIb3DQEHAaCCCfYEggnyMIIJ7jCCBGIGCSqGSIb3DQEH\" +\n+        \"BqCCBFMwggRPAgEAMIIESAYJKoZIhvcNAQcBMFcGCSqGSIb3DQEFDTBKMCkGCSqG\" +\n+        \"SIb3DQEFDDAcBAg9pxXxY2yscwICCAAwDAYIKoZIhvcNAgkFADAdBglghkgBZQME\" +\n+        \"ASoEEK7yYaFQDi1pYwWzm9F\/fs+AggPgFIT2XapyaFgDppdvLkdvaF3HXw+zjzKb\" +\n+        \"7xFC76DtVPhVTWVHD+kIss+jsj+XyvMwY0aCuAhAG\/Dig+vzWomnsqB5ssw5\/kTb\" +\n+        \"+TMQ5PXLkNeoBmB6ArKeGc\/QmCBQvQG\/a6b+nXSWmxNpP+71772dmWmB8gcSJ0kF\" +\n+        \"Fj75NrIbmNiDMCb71Q8gOzBMFf6BpXf\/3xWAJtxyic+tSNETfOJa8zTZb0+lV0w9\" +\n+        \"5eUmDrPUpuxEVbb0KJtIc63gRkcfrPtDd6Ii4Zzbzj2Evr4\/S4hnrQBsiryVzJWy\" +\n+        \"IEjaD0y6+DmG0JwMgRuGi1wBoGowi37GMrDCOyOZWC4n5wHLtYyhR6JaElxbrhxP\" +\n+        \"H46z2USLKmZoF+YgEQgYcSBXMgP0t36+XQocFWYi2N5niy02TnctwF430FYsQlhJ\" +\n+        \"Suma4I33E808dJuMv8T\/soF66HsD4Zj46hOf4nWmas7IaoSAbGKXgIa7KhGRJvij\" +\n+        \"xM3WOX0aqNi\/8bhnxSA7fCmIy\/7opyx5UYJFWGBSmHP1pBHBVmx7Ad8SAsB9MSsh\" +\n+        \"nbGjGiUk4h0QcOi29\/M9WwFlo4urePyI8PK2qtVAmpD3rTLlsmgzguZ69L0Q\/CFU\" +\n+        \"fbtqsMF0bgEuh8cfivd1DYFABEt1gypuwCUtCqQ7AXK2nQqOjsQCxVz9i9K8NDeD\" +\n+        \"aau98VAl0To2sk3\/VR\/QUq0PRwU1jPN5BzUevhE7SOy\/ImuJKwpGqqFljYdrQmj5\" +\n+        \"jDe+LmYH9QGVRlfN8zuU+48FY8CAoeBeHn5AAPml0PYPVUnt3\/jQN1+v+CahNVI+\" +\n+        \"La8q1Nen+j1R44aa2I3y\/pUgtzXRwK+tPrxTQbG030EU51LYJn8amPWmn3w75ZIA\" +\n+        \"MJrXWeKj44de7u4zdUsEBVC2uM44rIHM8MFjyYAwYsey0rcp0emsaxzar+7ZA67r\" +\n+        \"lDoXvvS3NqsnTXHcn3T9tkPRoee6L7Dh3x4Od96lcRwgdYT5BwyH7e34ld4VTUmJ\" +\n+        \"bDEq7Ijvn4JKrwQJh1RCC+Z\/ObfkC42xAm7G010u3g08xB0Qujpdg4a7VcuWrywF\" +\n+        \"c7hLNquuaF4qoDaVwYXHH3iuX6YlJ\/3siTKbYCVXPEZOAMBP9lF\/OU76UMJBQNfU\" +\n+        \"0xjDx+3AhUVgnGuCsmYlK6ETDp8qOZKGyV0KrNSGtqLx3uMhd7PETeW+ML3tDQ\/0\" +\n+        \"X9fMkcZHi4C2fXnoHV\/qa2dGhBj4jjQ0Xh1poU6mxGn2Mebe2hDsBZkkBpnn7pK4\" +\n+        \"wP\/VqXdQTwqEuvzGHLVFsCuADe40ZFBmtBrf70wG7ZkO8SUZ8Zz1IX3+S024g7yj\" +\n+        \"QRev\/6x6TtkwggWEBgkqhkiG9w0BBwGgggV1BIIFcTCCBW0wggVpBgsqhkiG9w0B\" +\n+        \"DAoBAqCCBTEwggUtMFcGCSqGSIb3DQEFDTBKMCkGCSqGSIb3DQEFDDAcBAhTxzw+\" +\n+        \"VptrYAICCAAwDAYIKoZIhvcNAgkFADAdBglghkgBZQMEASoEEK9nSqc1I2t4tMVG\" +\n+        \"bWHpdtQEggTQzCwI7j34gCTvfj6nuOSndAjShGv7mN2j7WMV0pslTpq2b9Bn3vn1\" +\n+        \"Y0JMvL4E7sLrUzNU02pdOcfCnEpMFccNv2sQrLp1mOCKxu8OjSqHZLoKVL0ROVsZ\" +\n+        \"8dMECLLigDlPKRiSyLErl14tErX4\/zbkUaWMROO28kFbTbubQ8YoHlRUwsKW1xLg\" +\n+        \"vfi0gRkG\/zHXRfQHjX\/8NStv7hXlehn7\/Gy2EKPsRFhadm\/iUHAfmCMkMgHTU248\" +\n+        \"JER9+nsXltd59H+IeDpj\/kbxZ+YvHow9XUZKu828d3MQnUpLZ1BfJGhMBPVwbVUD\" +\n+        \"A40CiQBVdCoGtPJyalL28xoS3H0ILFCnwQOr6u0HwleNJPGHq78HUyH6Hwxnh0b0\" +\n+        \"5o163r6wTFZn5cMOxpbs\/Ttd+3TrxmrYpd2XnuRme3cnaYJ0ILvpc\/8eLLR7SKjD\" +\n+        \"T4JhZ0h\/CfcV2WWvhpQugkY0pWrZ+EIMneB1dZB96mJVLxOi148OeSgi0PsxZMNi\" +\n+        \"YM33rTpwQT5WqOsEyDwUQpne5b8Kkt\/s7EN0LJNnPyJJRL1LcqOdr6j+6YqRtPa7\" +\n+        \"a9oWJqMcuTP+bqzGRJh+3HDlFBw2Yzp9iadv4KmB2MzhStLUoi2MSjvnnkkd5Led\" +\n+        \"sshAd6WbKfF7kLAHQHT4Ai6dMEO4EKkEVF9JBtxCR4JEn6C98Lpg+Lk+rfY7gHOf\" +\n+        \"ZxtgGURwgXRY3aLUrdT55ZKgk3ExVKPzi5EhdpAau7JKhpOwyKozAp\/OKWMNrz6h\" +\n+        \"obu2Mbn1B+IA60psYHHxynBgsJHv7WQmbYh8HyGfHgVvaA8pZCYqxxjpLjSJrR8B\" +\n+        \"Bu9H9xkTh7KlhxgreXYv19uAYbUd95kcox9izad6VPnovgFSb+Omdy6PJACPj6hF\" +\n+        \"W6PJbucP0YPpO0VtWtQdZZ3df1P0hZ7qvKwOPFA+gKZSckgqASfygiP9V3Zc8jIi\" +\n+        \"wjNzoDM2QT+UUJKiiGYXJUEOO9hxzFHlGj759DcNRhpgl5AgR57ofISD9yBuCAJY\" +\n+        \"PQ\/aZHPFuRTrcVG3RaIbCAS73nEznKyFaLOXfzyfyaSmyhsH253tnyL1MejC+2bR\" +\n+        \"Eko\/yldgFUxvU5JI+Q3KJ6Awj+PnduHXx71E4UwSuu2xXYMpxnQwI6rroQpZBX82\" +\n+        \"HhqgcLV83P8lpzQwPdHjH5zkoxmWdC0+jU\/tcQfNXYpJdyoaX7tDmVclLhwl9ps\/\" +\n+        \"O841pIsNLJWXwvxG6B+3LN\/kw4QjwN194PopiOD7+oDm5mhttO78CrBrRxHMD\/0Q\" +\n+        \"qniZjKzSZepxlZq+J792u8vtMnuzzChxu0Bf3PhIXcJNcVhwUtr0yKe\/N+NvC0tm\" +\n+        \"p8wyik\/BlndxN9eKbdTOi2wIi64h2QG8nOk66wQ\/PSIJYwZl6eDNEQSzH\/1mGCfU\" +\n+        \"QnUT17UC\/p+Qgenf6Auap2GWlvsJrB7u\/pytz65rtjt\/ouo6Ih6EwWqwVVpGXZD0\" +\n+        \"7gVWH0Ke\/Vr6aPGNvkLcmftPuDZsn9jiig3guhdeyRVf10Ox369kKWcG75q77hxE\" +\n+        \"IzSzDyUlBNbnom9SIjut3r+qVYmWONatC6q\/4D0I42Lnjd3dEyZx7jmH3g\/S2ASM\" +\n+        \"FzWr9pvXc61dsYOkdZ4PYa9XPUZxXFagZsoS3F1sU799+IJVU0tC0MExJTAjBgkq\" +\n+        \"hkiG9w0BCRUxFgQUwWO5DorvVWYF3BWUmAw0rUEajScwfTBtMEkGCSqGSIb3DQEF\" +\n+        \"DjA8MCwGCSqGSIb3DQEFDDAfBAhvRzw4sC4xcwICCAECASAwDAYIKoZIhvcNAgkF\" +\n+        \"ADAMBggqhkiG9w0CCQUABCB6pW2FOdcCNj87zS64NUXG36K5aXDnFHctIk5Bf4kG\" +\n+        \"3QQITk9UIFVTRUQCAggA\";\n+\n+    \/\/ A.5. Invalid PKCS #12 File with Incorrect Salt\n+    static final String A5 =\n+        \"MIIKigIBAzCCCgUGCSqGSIb3DQEHAaCCCfYEggnyMIIJ7jCCBGIGCSqGSIb3DQEH\" +\n+        \"BqCCBFMwggRPAgEAMIIESAYJKoZIhvcNAQcBMFcGCSqGSIb3DQEFDTBKMCkGCSqG\" +\n+        \"SIb3DQEFDDAcBAg9pxXxY2yscwICCAAwDAYIKoZIhvcNAgkFADAdBglghkgBZQME\" +\n+        \"ASoEEK7yYaFQDi1pYwWzm9F\/fs+AggPgFIT2XapyaFgDppdvLkdvaF3HXw+zjzKb\" +\n+        \"7xFC76DtVPhVTWVHD+kIss+jsj+XyvMwY0aCuAhAG\/Dig+vzWomnsqB5ssw5\/kTb\" +\n+        \"+TMQ5PXLkNeoBmB6ArKeGc\/QmCBQvQG\/a6b+nXSWmxNpP+71772dmWmB8gcSJ0kF\" +\n+        \"Fj75NrIbmNiDMCb71Q8gOzBMFf6BpXf\/3xWAJtxyic+tSNETfOJa8zTZb0+lV0w9\" +\n+        \"5eUmDrPUpuxEVbb0KJtIc63gRkcfrPtDd6Ii4Zzbzj2Evr4\/S4hnrQBsiryVzJWy\" +\n+        \"IEjaD0y6+DmG0JwMgRuGi1wBoGowi37GMrDCOyOZWC4n5wHLtYyhR6JaElxbrhxP\" +\n+        \"H46z2USLKmZoF+YgEQgYcSBXMgP0t36+XQocFWYi2N5niy02TnctwF430FYsQlhJ\" +\n+        \"Suma4I33E808dJuMv8T\/soF66HsD4Zj46hOf4nWmas7IaoSAbGKXgIa7KhGRJvij\" +\n+        \"xM3WOX0aqNi\/8bhnxSA7fCmIy\/7opyx5UYJFWGBSmHP1pBHBVmx7Ad8SAsB9MSsh\" +\n+        \"nbGjGiUk4h0QcOi29\/M9WwFlo4urePyI8PK2qtVAmpD3rTLlsmgzguZ69L0Q\/CFU\" +\n+        \"fbtqsMF0bgEuh8cfivd1DYFABEt1gypuwCUtCqQ7AXK2nQqOjsQCxVz9i9K8NDeD\" +\n+        \"aau98VAl0To2sk3\/VR\/QUq0PRwU1jPN5BzUevhE7SOy\/ImuJKwpGqqFljYdrQmj5\" +\n+        \"jDe+LmYH9QGVRlfN8zuU+48FY8CAoeBeHn5AAPml0PYPVUnt3\/jQN1+v+CahNVI+\" +\n+        \"La8q1Nen+j1R44aa2I3y\/pUgtzXRwK+tPrxTQbG030EU51LYJn8amPWmn3w75ZIA\" +\n+        \"MJrXWeKj44de7u4zdUsEBVC2uM44rIHM8MFjyYAwYsey0rcp0emsaxzar+7ZA67r\" +\n+        \"lDoXvvS3NqsnTXHcn3T9tkPRoee6L7Dh3x4Od96lcRwgdYT5BwyH7e34ld4VTUmJ\" +\n+        \"bDEq7Ijvn4JKrwQJh1RCC+Z\/ObfkC42xAm7G010u3g08xB0Qujpdg4a7VcuWrywF\" +\n+        \"c7hLNquuaF4qoDaVwYXHH3iuX6YlJ\/3siTKbYCVXPEZOAMBP9lF\/OU76UMJBQNfU\" +\n+        \"0xjDx+3AhUVgnGuCsmYlK6ETDp8qOZKGyV0KrNSGtqLx3uMhd7PETeW+ML3tDQ\/0\" +\n+        \"X9fMkcZHi4C2fXnoHV\/qa2dGhBj4jjQ0Xh1poU6mxGn2Mebe2hDsBZkkBpnn7pK4\" +\n+        \"wP\/VqXdQTwqEuvzGHLVFsCuADe40ZFBmtBrf70wG7ZkO8SUZ8Zz1IX3+S024g7yj\" +\n+        \"QRev\/6x6TtkwggWEBgkqhkiG9w0BBwGgggV1BIIFcTCCBW0wggVpBgsqhkiG9w0B\" +\n+        \"DAoBAqCCBTEwggUtMFcGCSqGSIb3DQEFDTBKMCkGCSqGSIb3DQEFDDAcBAhTxzw+\" +\n+        \"VptrYAICCAAwDAYIKoZIhvcNAgkFADAdBglghkgBZQMEASoEEK9nSqc1I2t4tMVG\" +\n+        \"bWHpdtQEggTQzCwI7j34gCTvfj6nuOSndAjShGv7mN2j7WMV0pslTpq2b9Bn3vn1\" +\n+        \"Y0JMvL4E7sLrUzNU02pdOcfCnEpMFccNv2sQrLp1mOCKxu8OjSqHZLoKVL0ROVsZ\" +\n+        \"8dMECLLigDlPKRiSyLErl14tErX4\/zbkUaWMROO28kFbTbubQ8YoHlRUwsKW1xLg\" +\n+        \"vfi0gRkG\/zHXRfQHjX\/8NStv7hXlehn7\/Gy2EKPsRFhadm\/iUHAfmCMkMgHTU248\" +\n+        \"JER9+nsXltd59H+IeDpj\/kbxZ+YvHow9XUZKu828d3MQnUpLZ1BfJGhMBPVwbVUD\" +\n+        \"A40CiQBVdCoGtPJyalL28xoS3H0ILFCnwQOr6u0HwleNJPGHq78HUyH6Hwxnh0b0\" +\n+        \"5o163r6wTFZn5cMOxpbs\/Ttd+3TrxmrYpd2XnuRme3cnaYJ0ILvpc\/8eLLR7SKjD\" +\n+        \"T4JhZ0h\/CfcV2WWvhpQugkY0pWrZ+EIMneB1dZB96mJVLxOi148OeSgi0PsxZMNi\" +\n+        \"YM33rTpwQT5WqOsEyDwUQpne5b8Kkt\/s7EN0LJNnPyJJRL1LcqOdr6j+6YqRtPa7\" +\n+        \"a9oWJqMcuTP+bqzGRJh+3HDlFBw2Yzp9iadv4KmB2MzhStLUoi2MSjvnnkkd5Led\" +\n+        \"sshAd6WbKfF7kLAHQHT4Ai6dMEO4EKkEVF9JBtxCR4JEn6C98Lpg+Lk+rfY7gHOf\" +\n+        \"ZxtgGURwgXRY3aLUrdT55ZKgk3ExVKPzi5EhdpAau7JKhpOwyKozAp\/OKWMNrz6h\" +\n+        \"obu2Mbn1B+IA60psYHHxynBgsJHv7WQmbYh8HyGfHgVvaA8pZCYqxxjpLjSJrR8B\" +\n+        \"Bu9H9xkTh7KlhxgreXYv19uAYbUd95kcox9izad6VPnovgFSb+Omdy6PJACPj6hF\" +\n+        \"W6PJbucP0YPpO0VtWtQdZZ3df1P0hZ7qvKwOPFA+gKZSckgqASfygiP9V3Zc8jIi\" +\n+        \"wjNzoDM2QT+UUJKiiGYXJUEOO9hxzFHlGj759DcNRhpgl5AgR57ofISD9yBuCAJY\" +\n+        \"PQ\/aZHPFuRTrcVG3RaIbCAS73nEznKyFaLOXfzyfyaSmyhsH253tnyL1MejC+2bR\" +\n+        \"Eko\/yldgFUxvU5JI+Q3KJ6Awj+PnduHXx71E4UwSuu2xXYMpxnQwI6rroQpZBX82\" +\n+        \"HhqgcLV83P8lpzQwPdHjH5zkoxmWdC0+jU\/tcQfNXYpJdyoaX7tDmVclLhwl9ps\/\" +\n+        \"O841pIsNLJWXwvxG6B+3LN\/kw4QjwN194PopiOD7+oDm5mhttO78CrBrRxHMD\/0Q\" +\n+        \"qniZjKzSZepxlZq+J792u8vtMnuzzChxu0Bf3PhIXcJNcVhwUtr0yKe\/N+NvC0tm\" +\n+        \"p8wyik\/BlndxN9eKbdTOi2wIi64h2QG8nOk66wQ\/PSIJYwZl6eDNEQSzH\/1mGCfU\" +\n+        \"QnUT17UC\/p+Qgenf6Auap2GWlvsJrB7u\/pytz65rtjt\/ouo6Ih6EwWqwVVpGXZD0\" +\n+        \"7gVWH0Ke\/Vr6aPGNvkLcmftPuDZsn9jiig3guhdeyRVf10Ox369kKWcG75q77hxE\" +\n+        \"IzSzDyUlBNbnom9SIjut3r+qVYmWONatC6q\/4D0I42Lnjd3dEyZx7jmH3g\/S2ASM\" +\n+        \"FzWr9pvXc61dsYOkdZ4PYa9XPUZxXFagZsoS3F1sU799+IJVU0tC0MExJTAjBgkq\" +\n+        \"hkiG9w0BCRUxFgQUwWO5DorvVWYF3BWUmAw0rUEajScwfDBtMEkGCSqGSIb3DQEF\" +\n+        \"DjA8MCwGCSqGSIb3DQEFDDAfBAhOT1QgVVNFRAICCAACASAwDAYIKoZIhvcNAgkF\" +\n+        \"ADAMBggqhkiG9w0CCQUABCB6pW2FOdcCNj87zS64NUXG36K5aXDnFHctIk5Bf4kG\" +\n+        \"3QQIb0c8OLAuMXMCAQE=\";\n+\n+    \/\/ A.6.  Invalid PKCS #12 File with Missing Key Length\n+    static final String A6 =\n+        \"MIIKiAIBAzCCCgUGCSqGSIb3DQEHAaCCCfYEggnyMIIJ7jCCBGIGCSqGSIb3DQEH\" +\n+        \"BqCCBFMwggRPAgEAMIIESAYJKoZIhvcNAQcBMFcGCSqGSIb3DQEFDTBKMCkGCSqG\" +\n+        \"SIb3DQEFDDAcBAg9pxXxY2yscwICCAAwDAYIKoZIhvcNAgkFADAdBglghkgBZQME\" +\n+        \"ASoEEK7yYaFQDi1pYwWzm9F\/fs+AggPgFIT2XapyaFgDppdvLkdvaF3HXw+zjzKb\" +\n+        \"7xFC76DtVPhVTWVHD+kIss+jsj+XyvMwY0aCuAhAG\/Dig+vzWomnsqB5ssw5\/kTb\" +\n+        \"+TMQ5PXLkNeoBmB6ArKeGc\/QmCBQvQG\/a6b+nXSWmxNpP+71772dmWmB8gcSJ0kF\" +\n+        \"Fj75NrIbmNiDMCb71Q8gOzBMFf6BpXf\/3xWAJtxyic+tSNETfOJa8zTZb0+lV0w9\" +\n+        \"5eUmDrPUpuxEVbb0KJtIc63gRkcfrPtDd6Ii4Zzbzj2Evr4\/S4hnrQBsiryVzJWy\" +\n+        \"IEjaD0y6+DmG0JwMgRuGi1wBoGowi37GMrDCOyOZWC4n5wHLtYyhR6JaElxbrhxP\" +\n+        \"H46z2USLKmZoF+YgEQgYcSBXMgP0t36+XQocFWYi2N5niy02TnctwF430FYsQlhJ\" +\n+        \"Suma4I33E808dJuMv8T\/soF66HsD4Zj46hOf4nWmas7IaoSAbGKXgIa7KhGRJvij\" +\n+        \"xM3WOX0aqNi\/8bhnxSA7fCmIy\/7opyx5UYJFWGBSmHP1pBHBVmx7Ad8SAsB9MSsh\" +\n+        \"nbGjGiUk4h0QcOi29\/M9WwFlo4urePyI8PK2qtVAmpD3rTLlsmgzguZ69L0Q\/CFU\" +\n+        \"fbtqsMF0bgEuh8cfivd1DYFABEt1gypuwCUtCqQ7AXK2nQqOjsQCxVz9i9K8NDeD\" +\n+        \"aau98VAl0To2sk3\/VR\/QUq0PRwU1jPN5BzUevhE7SOy\/ImuJKwpGqqFljYdrQmj5\" +\n+        \"jDe+LmYH9QGVRlfN8zuU+48FY8CAoeBeHn5AAPml0PYPVUnt3\/jQN1+v+CahNVI+\" +\n+        \"La8q1Nen+j1R44aa2I3y\/pUgtzXRwK+tPrxTQbG030EU51LYJn8amPWmn3w75ZIA\" +\n+        \"MJrXWeKj44de7u4zdUsEBVC2uM44rIHM8MFjyYAwYsey0rcp0emsaxzar+7ZA67r\" +\n+        \"lDoXvvS3NqsnTXHcn3T9tkPRoee6L7Dh3x4Od96lcRwgdYT5BwyH7e34ld4VTUmJ\" +\n+        \"bDEq7Ijvn4JKrwQJh1RCC+Z\/ObfkC42xAm7G010u3g08xB0Qujpdg4a7VcuWrywF\" +\n+        \"c7hLNquuaF4qoDaVwYXHH3iuX6YlJ\/3siTKbYCVXPEZOAMBP9lF\/OU76UMJBQNfU\" +\n+        \"0xjDx+3AhUVgnGuCsmYlK6ETDp8qOZKGyV0KrNSGtqLx3uMhd7PETeW+ML3tDQ\/0\" +\n+        \"X9fMkcZHi4C2fXnoHV\/qa2dGhBj4jjQ0Xh1poU6mxGn2Mebe2hDsBZkkBpnn7pK4\" +\n+        \"wP\/VqXdQTwqEuvzGHLVFsCuADe40ZFBmtBrf70wG7ZkO8SUZ8Zz1IX3+S024g7yj\" +\n+        \"QRev\/6x6TtkwggWEBgkqhkiG9w0BBwGgggV1BIIFcTCCBW0wggVpBgsqhkiG9w0B\" +\n+        \"DAoBAqCCBTEwggUtMFcGCSqGSIb3DQEFDTBKMCkGCSqGSIb3DQEFDDAcBAhTxzw+\" +\n+        \"VptrYAICCAAwDAYIKoZIhvcNAgkFADAdBglghkgBZQMEASoEEK9nSqc1I2t4tMVG\" +\n+        \"bWHpdtQEggTQzCwI7j34gCTvfj6nuOSndAjShGv7mN2j7WMV0pslTpq2b9Bn3vn1\" +\n+        \"Y0JMvL4E7sLrUzNU02pdOcfCnEpMFccNv2sQrLp1mOCKxu8OjSqHZLoKVL0ROVsZ\" +\n+        \"8dMECLLigDlPKRiSyLErl14tErX4\/zbkUaWMROO28kFbTbubQ8YoHlRUwsKW1xLg\" +\n+        \"vfi0gRkG\/zHXRfQHjX\/8NStv7hXlehn7\/Gy2EKPsRFhadm\/iUHAfmCMkMgHTU248\" +\n+        \"JER9+nsXltd59H+IeDpj\/kbxZ+YvHow9XUZKu828d3MQnUpLZ1BfJGhMBPVwbVUD\" +\n+        \"A40CiQBVdCoGtPJyalL28xoS3H0ILFCnwQOr6u0HwleNJPGHq78HUyH6Hwxnh0b0\" +\n+        \"5o163r6wTFZn5cMOxpbs\/Ttd+3TrxmrYpd2XnuRme3cnaYJ0ILvpc\/8eLLR7SKjD\" +\n+        \"T4JhZ0h\/CfcV2WWvhpQugkY0pWrZ+EIMneB1dZB96mJVLxOi148OeSgi0PsxZMNi\" +\n+        \"YM33rTpwQT5WqOsEyDwUQpne5b8Kkt\/s7EN0LJNnPyJJRL1LcqOdr6j+6YqRtPa7\" +\n+        \"a9oWJqMcuTP+bqzGRJh+3HDlFBw2Yzp9iadv4KmB2MzhStLUoi2MSjvnnkkd5Led\" +\n+        \"sshAd6WbKfF7kLAHQHT4Ai6dMEO4EKkEVF9JBtxCR4JEn6C98Lpg+Lk+rfY7gHOf\" +\n+        \"ZxtgGURwgXRY3aLUrdT55ZKgk3ExVKPzi5EhdpAau7JKhpOwyKozAp\/OKWMNrz6h\" +\n+        \"obu2Mbn1B+IA60psYHHxynBgsJHv7WQmbYh8HyGfHgVvaA8pZCYqxxjpLjSJrR8B\" +\n+        \"Bu9H9xkTh7KlhxgreXYv19uAYbUd95kcox9izad6VPnovgFSb+Omdy6PJACPj6hF\" +\n+        \"W6PJbucP0YPpO0VtWtQdZZ3df1P0hZ7qvKwOPFA+gKZSckgqASfygiP9V3Zc8jIi\" +\n+        \"wjNzoDM2QT+UUJKiiGYXJUEOO9hxzFHlGj759DcNRhpgl5AgR57ofISD9yBuCAJY\" +\n+        \"PQ\/aZHPFuRTrcVG3RaIbCAS73nEznKyFaLOXfzyfyaSmyhsH253tnyL1MejC+2bR\" +\n+        \"Eko\/yldgFUxvU5JI+Q3KJ6Awj+PnduHXx71E4UwSuu2xXYMpxnQwI6rroQpZBX82\" +\n+        \"HhqgcLV83P8lpzQwPdHjH5zkoxmWdC0+jU\/tcQfNXYpJdyoaX7tDmVclLhwl9ps\/\" +\n+        \"O841pIsNLJWXwvxG6B+3LN\/kw4QjwN194PopiOD7+oDm5mhttO78CrBrRxHMD\/0Q\" +\n+        \"qniZjKzSZepxlZq+J792u8vtMnuzzChxu0Bf3PhIXcJNcVhwUtr0yKe\/N+NvC0tm\" +\n+        \"p8wyik\/BlndxN9eKbdTOi2wIi64h2QG8nOk66wQ\/PSIJYwZl6eDNEQSzH\/1mGCfU\" +\n+        \"QnUT17UC\/p+Qgenf6Auap2GWlvsJrB7u\/pytz65rtjt\/ouo6Ih6EwWqwVVpGXZD0\" +\n+        \"7gVWH0Ke\/Vr6aPGNvkLcmftPuDZsn9jiig3guhdeyRVf10Ox369kKWcG75q77hxE\" +\n+        \"IzSzDyUlBNbnom9SIjut3r+qVYmWONatC6q\/4D0I42Lnjd3dEyZx7jmH3g\/S2ASM\" +\n+        \"FzWr9pvXc61dsYOkdZ4PYa9XPUZxXFagZsoS3F1sU799+IJVU0tC0MExJTAjBgkq\" +\n+        \"hkiG9w0BCRUxFgQUwWO5DorvVWYF3BWUmAw0rUEajScwejBqMEYGCSqGSIb3DQEF\" +\n+        \"DjA5MCkGCSqGSIb3DQEFDDAcBAhvRzw4sC4xcwICCAAwDAYIKoZIhvcNAgkFADAM\" +\n+        \"BggqhkiG9w0CCQUABCB6pW2FOdcCNj87zS64NUXG36K5aXDnFHctIk5Bf4kG3QQI\" +\n+        \"b0c8OLAuMXMCAggA\";\n+\n+    static String password = \"1234\";\n+\n+    public static void main(String[] args) throws Exception {\n+        KeyStore ks;\n+        FileOutputStream fos;\n+        FileInputStream fis;\n+\n+        ks = KeyStore.getInstance(\"PKCS12\");\n+        ks.load(new ByteArrayInputStream(Base64.getDecoder().decode(A1)),\n+                password.toCharArray());\n+\n+        fos = new FileOutputStream(\"pbmac1KeyStore.p12\");\n+        ks.store(fos, password.toCharArray());\n+        fos.close();\n+\n+        \/\/ read keystore we just wrote\n+        fis = new FileInputStream(\"pbmac1KeyStore.p12\");\n+        ks.load(fis, password.toCharArray());\n+        fis.close();\n+        System.out.println(\"A.1 pass\");\n+\n+        \/\/ Unsupported: key length must be same as Hmac output length.\n+        try {\n+            ks = KeyStore.getInstance(\"PKCS12\");\n+            ks.load(new ByteArrayInputStream(Base64.getDecoder().decode(A2)),\n+                    password.toCharArray());\n+        } catch (IOException e) {\n+            System.out.println(\"A.2 pass\");\n+        }\n+\n+        ks = KeyStore.getInstance(\"PKCS12\");\n+        ks.load(new ByteArrayInputStream(Base64.getDecoder().decode(A3)),\n+                password.toCharArray());\n+\n+        fos = new FileOutputStream(\"pbmac1KeyStore.p12\");\n+        ks.store(fos, password.toCharArray());\n+        fos.close();\n+\n+        \/\/ read keystore we just wrote\n+        fis = new FileInputStream(\"pbmac1KeyStore.p12\");\n+        ks.load(fis, password.toCharArray());\n+        fis.close();\n+        System.out.println(\"A.3 pass\");\n+\n+        try {\n+            ks = KeyStore.getInstance(\"PKCS12\");\n+            ks.load(new ByteArrayInputStream(Base64.getDecoder().decode(A4)),\n+                    password.toCharArray());\n+        } catch (IOException e) {\n+            System.out.println(\"A.4 pass\");\n+        }\n+\n+        try {\n+            ks = KeyStore.getInstance(\"PKCS12\");\n+            ks.load(new ByteArrayInputStream(Base64.getDecoder().decode(A5)),\n+                    password.toCharArray());\n+\n+        } catch (IOException e) {\n+            System.out.println(\"A.5 pass\");\n+        }\n+\n+        try {\n+            ks = KeyStore.getInstance(\"PKCS12\");\n+            ks.load(new ByteArrayInputStream(Base64.getDecoder().decode(A6)),\n+                    password.toCharArray());\n+        } catch (IOException e) {\n+            System.out.println(\"A.6 pass\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/pkcs12\/PBMAC1Encoding.java","additions":467,"deletions":0,"binary":false,"changes":467,"status":"added"}]}