{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,0 @@\n-#include \"runtime\/perfData.inline.hpp\"\n@@ -389,3 +388,0 @@\n-    \/\/ Hopefully the performance counters are allocated on distinct\n-    \/\/ cache lines to avoid false sharing on MP systems ...\n-    OM_PERFDATA_OP(Inflations, inc());\n@@ -879,3 +875,0 @@\n-        \/\/ Hopefully the performance counters are allocated on distinct\n-        \/\/ cache lines to avoid false sharing on MP systems ...\n-        OM_PERFDATA_OP(Inflations, inc());\n@@ -920,3 +913,0 @@\n-    \/\/ Hopefully the performance counters are allocated on distinct\n-    \/\/ cache lines to avoid false sharing on MP systems ...\n-    OM_PERFDATA_OP(Inflations, inc());\n","filename":"src\/hotspot\/share\/runtime\/lightweightSynchronizer.cpp","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -53,1 +53,0 @@\n-#include \"runtime\/perfData.hpp\"\n@@ -606,2 +605,0 @@\n-\n-  OM_PERFDATA_OP(ContendedLockAttempts, inc());\n@@ -935,8 +932,0 @@\n-    \/\/ Keep a tally of the # of futile wakeups.\n-    \/\/ Note that the counter is not protected by a lock or updated by atomics.\n-    \/\/ That is by design - we trade \"lossy\" counters which are exposed to\n-    \/\/ races during updates for a lower probe effect.\n-    \/\/ This PerfData object can be used in parallel with a safepoint.\n-    \/\/ See the work around in PerfDataManager::destroy().\n-    OM_PERFDATA_OP(FutileWakeups, inc());\n-\n@@ -1063,8 +1052,0 @@\n-\n-    \/\/ Keep a tally of the # of futile wakeups.\n-    \/\/ Note that the counter is not protected by a lock or updated by atomics.\n-    \/\/ That is by design - we trade \"lossy\" counters which are exposed to\n-    \/\/ races during updates for a lower probe effect.\n-    \/\/ This PerfData object can be used in parallel with a safepoint.\n-    \/\/ See the work around in PerfDataManager::destroy().\n-    OM_PERFDATA_OP(FutileWakeups, inc());\n@@ -1546,3 +1527,0 @@\n-\n-  \/\/ Maintain stats and report events to JVMTI\n-  OM_PERFDATA_OP(Parks, inc());\n@@ -1972,1 +1950,0 @@\n-  OM_PERFDATA_OP(Notifications, inc(1));\n@@ -1991,1 +1968,0 @@\n-  int tally = 0;\n@@ -1993,1 +1969,0 @@\n-    tally++;\n@@ -1996,2 +1971,0 @@\n-\n-  OM_PERFDATA_OP(Notifications, inc(tally));\n@@ -2439,8 +2412,0 @@\n-\/\/ PerfData support\n-PerfCounter * ObjectMonitor::_sync_ContendedLockAttempts       = nullptr;\n-PerfCounter * ObjectMonitor::_sync_FutileWakeups               = nullptr;\n-PerfCounter * ObjectMonitor::_sync_Parks                       = nullptr;\n-PerfCounter * ObjectMonitor::_sync_Notifications               = nullptr;\n-PerfCounter * ObjectMonitor::_sync_Inflations                  = nullptr;\n-PerfCounter * ObjectMonitor::_sync_Deflations                  = nullptr;\n-PerfLongVariable * ObjectMonitor::_sync_MonExtant              = nullptr;\n@@ -2463,23 +2428,0 @@\n-  if (UsePerfData) {\n-    EXCEPTION_MARK;\n-#define NEWPERFCOUNTER(n)                                                \\\n-  {                                                                      \\\n-    n = PerfDataManager::create_counter(SUN_RT, #n, PerfData::U_Events,  \\\n-                                        CHECK);                          \\\n-  }\n-#define NEWPERFVARIABLE(n)                                                \\\n-  {                                                                       \\\n-    n = PerfDataManager::create_variable(SUN_RT, #n, PerfData::U_Events,  \\\n-                                         CHECK);                          \\\n-  }\n-    NEWPERFCOUNTER(_sync_Inflations);\n-    NEWPERFCOUNTER(_sync_Deflations);\n-    NEWPERFCOUNTER(_sync_ContendedLockAttempts);\n-    NEWPERFCOUNTER(_sync_FutileWakeups);\n-    NEWPERFCOUNTER(_sync_Parks);\n-    NEWPERFCOUNTER(_sync_Notifications);\n-    NEWPERFVARIABLE(_sync_MonExtant);\n-#undef NEWPERFCOUNTER\n-#undef NEWPERFVARIABLE\n-  }\n-\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.cpp","additions":0,"deletions":58,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-#include \"runtime\/perfDataTypes.hpp\"\n@@ -205,20 +204,0 @@\n-  \/\/ Only perform a PerfData operation if the PerfData object has been\n-  \/\/ allocated and if the PerfDataManager has not freed the PerfData\n-  \/\/ objects which can happen at normal VM shutdown.\n-  \/\/\n-  #define OM_PERFDATA_OP(f, op_str)                 \\\n-    do {                                            \\\n-      if (ObjectMonitor::_sync_ ## f != nullptr &&  \\\n-          PerfDataManager::has_PerfData()) {        \\\n-        ObjectMonitor::_sync_ ## f->op_str;         \\\n-      }                                             \\\n-    } while (0)\n-\n-  static PerfCounter * _sync_ContendedLockAttempts;\n-  static PerfCounter * _sync_FutileWakeups;\n-  static PerfCounter * _sync_Parks;\n-  static PerfCounter * _sync_Notifications;\n-  static PerfCounter * _sync_Inflations;\n-  static PerfCounter * _sync_Deflations;\n-  static PerfLongVariable * _sync_MonExtant;\n-\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.hpp","additions":0,"deletions":21,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -52,1 +52,0 @@\n-#include \"runtime\/perfData.hpp\"\n@@ -375,1 +374,0 @@\n-      int free_count = 0;\n@@ -378,1 +376,0 @@\n-        ++free_count;\n@@ -380,1 +377,0 @@\n-      OM_PERFDATA_OP(Notifications, inc(free_count));\n@@ -1586,3 +1582,0 @@\n-      \/\/ Hopefully the performance counters are allocated on distinct cache lines\n-      \/\/ to avoid false sharing on MP systems ...\n-      OM_PERFDATA_OP(Inflations, inc());\n@@ -1628,3 +1621,0 @@\n-    \/\/ Hopefully the performance counters are allocated on distinct\n-    \/\/ cache lines to avoid false sharing on MP systems ...\n-    OM_PERFDATA_OP(Inflations, inc());\n@@ -1858,3 +1848,0 @@\n-  OM_PERFDATA_OP(MonExtant, set_value(_in_use_list.count()));\n-  OM_PERFDATA_OP(Deflations, inc(deflated_count));\n-\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":0,"deletions":13,"binary":false,"changes":13,"status":"modified"}]}