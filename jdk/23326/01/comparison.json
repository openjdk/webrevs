{"files":[{"patch":"@@ -42,1 +42,0 @@\n-#include \"runtime\/perfData.inline.hpp\"\n@@ -387,3 +386,0 @@\n-    \/\/ Hopefully the performance counters are allocated on distinct\n-    \/\/ cache lines to avoid false sharing on MP systems ...\n-    OM_PERFDATA_OP(Inflations, inc());\n@@ -877,3 +873,0 @@\n-        \/\/ Hopefully the performance counters are allocated on distinct\n-        \/\/ cache lines to avoid false sharing on MP systems ...\n-        OM_PERFDATA_OP(Inflations, inc());\n@@ -918,3 +911,0 @@\n-    \/\/ Hopefully the performance counters are allocated on distinct\n-    \/\/ cache lines to avoid false sharing on MP systems ...\n-    OM_PERFDATA_OP(Inflations, inc());\n","filename":"src\/hotspot\/share\/runtime\/lightweightSynchronizer.cpp","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -52,1 +52,0 @@\n-#include \"runtime\/perfData.hpp\"\n@@ -615,2 +614,0 @@\n-\n-  OM_PERFDATA_OP(ContendedLockAttempts, inc());\n@@ -944,8 +941,0 @@\n-    \/\/ Keep a tally of the # of futile wakeups.\n-    \/\/ Note that the counter is not protected by a lock or updated by atomics.\n-    \/\/ That is by design - we trade \"lossy\" counters which are exposed to\n-    \/\/ races during updates for a lower probe effect.\n-    \/\/ We are in safepoint safe state, so shutdown can remove the counter\n-    \/\/ under our feet. Make sure we make this access safely.\n-    OM_PERFDATA_SAFE_OP(FutileWakeups, inc());\n-\n@@ -1072,6 +1061,0 @@\n-\n-    \/\/ Keep a tally of the # of futile wakeups.\n-    \/\/ Note that the counter is not protected by a lock or updated by atomics.\n-    \/\/ That is by design - we trade \"lossy\" counters which are exposed to\n-    \/\/ races during updates for a lower probe effect.\n-    OM_PERFDATA_OP(FutileWakeups, inc());\n@@ -1553,3 +1536,0 @@\n-\n-  \/\/ Maintain stats and report events to JVMTI\n-  OM_PERFDATA_OP(Parks, inc());\n@@ -2001,1 +1981,0 @@\n-  OM_PERFDATA_OP(Notifications, inc(1));\n@@ -2020,1 +1999,0 @@\n-  int tally = 0;\n@@ -2022,1 +2000,0 @@\n-    tally++;\n@@ -2025,2 +2002,0 @@\n-\n-  OM_PERFDATA_OP(Notifications, inc(tally));\n@@ -2468,8 +2443,0 @@\n-\/\/ PerfData support\n-PerfCounter * ObjectMonitor::_sync_ContendedLockAttempts       = nullptr;\n-PerfCounter * ObjectMonitor::_sync_FutileWakeups               = nullptr;\n-PerfCounter * ObjectMonitor::_sync_Parks                       = nullptr;\n-PerfCounter * ObjectMonitor::_sync_Notifications               = nullptr;\n-PerfCounter * ObjectMonitor::_sync_Inflations                  = nullptr;\n-PerfCounter * ObjectMonitor::_sync_Deflations                  = nullptr;\n-PerfLongVariable * ObjectMonitor::_sync_MonExtant              = nullptr;\n@@ -2492,23 +2459,0 @@\n-  if (UsePerfData) {\n-    EXCEPTION_MARK;\n-#define NEWPERFCOUNTER(n)                                                \\\n-  {                                                                      \\\n-    n = PerfDataManager::create_counter(SUN_RT, #n, PerfData::U_Events,  \\\n-                                        CHECK);                          \\\n-  }\n-#define NEWPERFVARIABLE(n)                                                \\\n-  {                                                                       \\\n-    n = PerfDataManager::create_variable(SUN_RT, #n, PerfData::U_Events,  \\\n-                                         CHECK);                          \\\n-  }\n-    NEWPERFCOUNTER(_sync_Inflations);\n-    NEWPERFCOUNTER(_sync_Deflations);\n-    NEWPERFCOUNTER(_sync_ContendedLockAttempts);\n-    NEWPERFCOUNTER(_sync_FutileWakeups);\n-    NEWPERFCOUNTER(_sync_Parks);\n-    NEWPERFCOUNTER(_sync_Notifications);\n-    NEWPERFVARIABLE(_sync_MonExtant);\n-#undef NEWPERFCOUNTER\n-#undef NEWPERFVARIABLE\n-  }\n-\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.cpp","additions":0,"deletions":56,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-#include \"runtime\/perfDataTypes.hpp\"\n@@ -205,38 +204,0 @@\n-  \/\/ Only perform a PerfData operation if the PerfData object has been\n-  \/\/ allocated and if the PerfDataManager has not freed the PerfData\n-  \/\/ objects which can happen at normal VM shutdown. This operation is\n-  \/\/ only safe when thread is not in safepoint-safe code, i.e. PerfDataManager\n-  \/\/ could not reach the safepoint and free the counter while we are using it.\n-  \/\/ If this is not guaranteed, use OM_PERFDATA_SAFE_OP instead.\n-  #define OM_PERFDATA_OP(f, op_str)                 \\\n-    do {                                            \\\n-      if (ObjectMonitor::_sync_ ## f != nullptr) {  \\\n-        if (PerfDataManager::has_PerfData()) {      \\\n-          ObjectMonitor::_sync_ ## f->op_str;       \\\n-        }                                           \\\n-      }                                             \\\n-    } while (0)\n-\n-  \/\/ Only perform a PerfData operation if the PerfData object has been\n-  \/\/ allocated and if the PerfDataManager has not freed the PerfData\n-  \/\/ objects which can happen at normal VM shutdown. Additionally, we\n-  \/\/ enter the critical section to resolve the race against PerfDataManager\n-  \/\/ entering the safepoint and deleting the counter during shutdown.\n-  #define OM_PERFDATA_SAFE_OP(f, op_str)            \\\n-    do {                                            \\\n-      if (ObjectMonitor::_sync_ ## f != nullptr) {  \\\n-        GlobalCounter::CriticalSection cs(Thread::current()); \\\n-        if (PerfDataManager::has_PerfData()) {      \\\n-          ObjectMonitor::_sync_ ## f->op_str;       \\\n-        }                                           \\\n-      }                                             \\\n-    } while (0)\n-\n-  static PerfCounter * _sync_ContendedLockAttempts;\n-  static PerfCounter * _sync_FutileWakeups;\n-  static PerfCounter * _sync_Parks;\n-  static PerfCounter * _sync_Notifications;\n-  static PerfCounter * _sync_Inflations;\n-  static PerfCounter * _sync_Deflations;\n-  static PerfLongVariable * _sync_MonExtant;\n-\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.hpp","additions":0,"deletions":39,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -51,1 +51,0 @@\n-#include \"runtime\/perfData.hpp\"\n@@ -375,1 +374,0 @@\n-      int free_count = 0;\n@@ -378,1 +376,0 @@\n-        ++free_count;\n@@ -380,1 +377,0 @@\n-      OM_PERFDATA_OP(Notifications, inc(free_count));\n@@ -1586,3 +1582,0 @@\n-      \/\/ Hopefully the performance counters are allocated on distinct cache lines\n-      \/\/ to avoid false sharing on MP systems ...\n-      OM_PERFDATA_OP(Inflations, inc());\n@@ -1628,3 +1621,0 @@\n-    \/\/ Hopefully the performance counters are allocated on distinct\n-    \/\/ cache lines to avoid false sharing on MP systems ...\n-    OM_PERFDATA_OP(Inflations, inc());\n@@ -1858,3 +1848,0 @@\n-  OM_PERFDATA_OP(MonExtant, set_value(_in_use_list.count()));\n-  OM_PERFDATA_OP(Deflations, inc(deflated_count));\n-\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":0,"deletions":13,"binary":false,"changes":13,"status":"modified"}]}