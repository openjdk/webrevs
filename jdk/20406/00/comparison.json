{"files":[{"patch":"@@ -330,1 +330,1 @@\n-    CodeBuffer cb(blob->content_begin(), (address)C->output()->scratch_locs_memory() - blob->content_begin());\n+    CodeBuffer cb(blob->content_begin(), checked_cast<CodeBuffer::csize_t>((address)C->output()->scratch_locs_memory() - blob->content_begin()));\n","filename":"src\/hotspot\/share\/gc\/z\/c2\/zBarrierSetC2.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -149,1 +149,1 @@\n-    FLAG_SET_ERGO_IF_DEFAULT(MaxTenuringThreshold, ZTenuringThreshold);\n+    FLAG_SET_ERGO_IF_DEFAULT(MaxTenuringThreshold, (uint)ZTenuringThreshold);\n","filename":"src\/hotspot\/share\/gc\/z\/zArguments.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,1 +64,1 @@\n-  : ZArrayIteratorImpl<T, Parallel>(array->is_empty() ? nullptr : array->adr_at(0), array->length()) {}\n+  : ZArrayIteratorImpl<T, Parallel>(array->is_empty() ? nullptr : array->adr_at(0), (size_t)array->length()) {}\n","filename":"src\/hotspot\/share\/gc\/z\/zArray.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -294,1 +294,1 @@\n-    const uintptr_t base = (uintptr_t)referent_addr - java_lang_ref_Reference::referent_offset();\n+    const uintptr_t base = (uintptr_t)referent_addr - (size_t)java_lang_ref_Reference::referent_offset();\n","filename":"src\/hotspot\/share\/gc\/z\/zBarrier.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -82,1 +82,1 @@\n-  const uintptr_t new_color = *(int*)ZPointerStoreGoodMaskLowOrderBitsAddr;\n+  const uintptr_t new_color = *ZPointerStoreGoodMaskLowOrderBitsAddr;\n","filename":"src\/hotspot\/share\/gc\/z\/zBarrierSetNMethod.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-  return os::processor_count();\n+  return (uint32_t)os::processor_count();\n","filename":"src\/hotspot\/share\/gc\/z\/zCPU.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-  return clamp<uint>(ceil(gc_workers), 1, ZYoungGCThreads);\n+  return clamp<uint>((uint)ceil(gc_workers), 1, ZYoungGCThreads);\n@@ -429,1 +429,1 @@\n-  const size_t used_threshold = soft_max_capacity * used_threshold_percent;\n+  const size_t used_threshold = (size_t)(soft_max_capacity * used_threshold_percent);\n@@ -500,1 +500,1 @@\n-  const int lookahead = stats._heap._total_collections - stats._old_stats._general._total_collections_at_start;\n+  const uint lookahead = stats._heap._total_collections - stats._old_stats._general._total_collections_at_start;\n@@ -506,1 +506,1 @@\n-  log_debug(gc, director)(\"Rule Major: Allocation Rate, ExtraYoungGCTime: %.3fs, OldGCTime: %.3fs, Lookahead: %d, ExtraYoungGCTimeForLookahead: %.3fs\",\n+  log_debug(gc, director)(\"Rule Major: Allocation Rate, ExtraYoungGCTime: %.3fs, OldGCTime: %.3fs, Lookahead: %u, ExtraYoungGCTimeForLookahead: %.3fs\",\n@@ -568,1 +568,1 @@\n-  const size_t used_increase_threshold = stats._heap._soft_max_heap_size * 0.10; \/\/ 10%\n+  const size_t used_increase_threshold = (size_t)(stats._heap._soft_max_heap_size * 0.10); \/\/ 10%\n","filename":"src\/hotspot\/share\/gc\/z\/zDirector.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-  return _end - _start;\n+  return (size_t)(_end - _start);\n","filename":"src\/hotspot\/share\/gc\/z\/zForwardingAllocator.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -302,1 +302,1 @@\n-ssize_t ZGeneration::freed() const {\n+size_t ZGeneration::freed() const {\n@@ -451,1 +451,1 @@\n-    ZStatSample(ZSamplerJavaThreads, Threads::number_of_threads());\n+    ZStatSample(ZSamplerJavaThreads, (uint64_t)Threads::number_of_threads());\n","filename":"src\/hotspot\/share\/gc\/z\/zGeneration.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -125,1 +125,1 @@\n-  ssize_t freed() const;\n+  size_t freed() const;\n","filename":"src\/hotspot\/share\/gc\/z\/zGeneration.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -207,1 +207,1 @@\n-      return HeapAccess<AS_NO_KEEPALIVE | ON_UNKNOWN_OOP_REF>::oop_load_at(_base, _base->field_offset(p));\n+      return HeapAccess<AS_NO_KEEPALIVE | ON_UNKNOWN_OOP_REF>::oop_load_at(_base, (ptrdiff_t)_base->field_offset(p));\n@@ -450,1 +450,1 @@\n-  const int stride = MIN2<int>(length - start, ObjArrayMarkingStride);\n+  const int stride = MIN2<int>(length - start, (int)ObjArrayMarkingStride);\n","filename":"src\/hotspot\/share\/gc\/z\/zHeapIterator.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,1 @@\n-  const size_t unclamped = MaxHeapSize * 0.03125;\n+  const size_t unclamped = (size_t)(MaxHeapSize * 0.03125);\n@@ -49,1 +49,1 @@\n-    ZPageSizeMediumShift        = log2i_exact(ZPageSizeMedium);\n+    ZPageSizeMediumShift        = (size_t)log2i_exact(ZPageSizeMedium);\n@@ -71,1 +71,1 @@\n-  return ceil(os::initial_active_processor_count() * cpu_share_in_percent \/ 100.0);\n+  return (uint)ceil(os::initial_active_processor_count() * cpu_share_in_percent \/ 100.0);\n@@ -75,1 +75,1 @@\n-  return (MaxHeapSize * (heap_share_in_percent \/ 100.0)) \/ ZPageSizeSmall;\n+  return (uint)(MaxHeapSize * (heap_share_in_percent \/ 100.0) \/ ZPageSizeSmall);\n@@ -104,1 +104,1 @@\n-  return MaxHeapSize * (ZFragmentationLimit \/ 100);\n+  return (size_t)(MaxHeapSize * (ZFragmentationLimit \/ 100));\n@@ -108,1 +108,1 @@\n-  return MaxHeapSize * (ZYoungCompactionLimit \/ 100);\n+  return (size_t)(MaxHeapSize * (ZYoungCompactionLimit \/ 100));\n","filename":"src\/hotspot\/share\/gc\/z\/zHeuristics.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,1 @@\n-    return (volatile int*)(align_up(_mem, ZCacheLineSize) + index * ZCacheLineSize);\n+    return (volatile int*)(align_up(_mem, ZCacheLineSize) + (size_t)index * ZCacheLineSize);\n@@ -139,1 +139,1 @@\n-    return sizeof(int) * claim_level_end_index(ClaimLevels);\n+    return sizeof(int) * (size_t)claim_level_end_index(ClaimLevels);\n","filename":"src\/hotspot\/share\/gc\/z\/zIndexDistributor.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,1 @@\n-    _segment_shift(exact_log2(segment_size())) {}\n+    _segment_shift(log2i_exact(segment_size())) {}\n@@ -133,1 +133,1 @@\n-    _segment_shift = exact_log2(segment_size());\n+    _segment_shift = log2i_exact(segment_size());\n","filename":"src\/hotspot\/share\/gc\/z\/zLiveMap.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,1 @@\n-  size_t            _segment_shift;\n+  int               _segment_shift;\n","filename":"src\/hotspot\/share\/gc\/z\/zLiveMap.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n-  return ZMarkStripeShift + exact_log2(nstripes);\n+  return ZMarkStripeShift + (size_t)log2i_exact(nstripes);\n","filename":"src\/hotspot\/share\/gc\/z\/zMarkCache.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -89,1 +89,1 @@\n-    index = spillover_worker_id * spillover_chunk;\n+    index = (size_t)(spillover_worker_id * spillover_chunk);\n","filename":"src\/hotspot\/share\/gc\/z\/zMarkStack.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,1 @@\n-    _start_ms = TimeHelper::counter_to_millis(now.value());\n+    _start_ms = (uint64_t)TimeHelper::counter_to_millis(now.value());\n@@ -50,1 +50,1 @@\n-    const uint64_t now_ms = TimeHelper::counter_to_millis(now.value());\n+    const uint64_t now_ms = (uint64_t)TimeHelper::counter_to_millis(now.value());\n@@ -52,1 +52,1 @@\n-    const int64_t timeout_ms = next_ms - now_ms;\n+    const int64_t timeout_ms = (int64_t)(next_ms - now_ms);\n@@ -60,1 +60,1 @@\n-        const uint64_t overslept = -timeout_ms;\n+        const uint64_t overslept = (uint64_t)-timeout_ms;\n","filename":"src\/hotspot\/share\/gc\/z\/zMetronome.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -305,2 +305,2 @@\n-  \/\/ color is stored at low order bits of int; implicit conversion to uintptr_t is fine\n-  return bs_nm->guard_value(nm);\n+  \/\/ color is stored at low order bits of int; conversion to uintptr_t is fine\n+  return (uintptr_t)bs_nm->guard_value(nm);\n","filename":"src\/hotspot\/share\/gc\/z\/zNMethod.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -147,3 +147,3 @@\n-  const size_t shrink_threshold = _size * 0.30;\n-  const size_t prune_threshold = _size * 0.65;\n-  const size_t grow_threshold = _size * 0.70;\n+  const size_t shrink_threshold = (size_t)(_size * 0.30);\n+  const size_t prune_threshold = (size_t)(_size * 0.65);\n+  const size_t grow_threshold = (size_t)(_size * 0.70);\n","filename":"src\/hotspot\/share\/gc\/z\/zNMethodTable.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -79,2 +79,2 @@\n-  const size_t base_offset_in_bytes = arrayOopDesc::base_offset_in_bytes(element_type);\n-  const size_t process_start_offset_in_bytes = align_up(base_offset_in_bytes, BytesPerWord);\n+  const size_t base_offset_in_bytes = (size_t)arrayOopDesc::base_offset_in_bytes(element_type);\n+  const size_t process_start_offset_in_bytes = align_up(base_offset_in_bytes, (size_t)BytesPerWord);\n","filename":"src\/hotspot\/share\/gc\/z\/zObjArrayAllocator.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-    return ZObjectAlignmentSmallShift;\n+    return (size_t)ZObjectAlignmentSmallShift;\n@@ -89,1 +89,1 @@\n-    return ZObjectAlignmentMediumShift;\n+    return (size_t)ZObjectAlignmentMediumShift;\n@@ -92,1 +92,1 @@\n-    return ZObjectAlignmentLargeShift;\n+    return (size_t)ZObjectAlignmentLargeShift;\n@@ -103,1 +103,1 @@\n-    return ZObjectAlignmentSmall;\n+    return (size_t)ZObjectAlignmentSmall;\n@@ -106,1 +106,1 @@\n-    return ZObjectAlignmentMedium;\n+    return (size_t)ZObjectAlignmentMedium;\n@@ -109,1 +109,1 @@\n-    return ZObjectAlignmentLarge;\n+    return (size_t)ZObjectAlignmentLarge;\n","filename":"src\/hotspot\/share\/gc\/z\/zPage.inline.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -311,1 +311,1 @@\n-  const uint64_t now = os::elapsedTime();\n+  const uint64_t now = (uint64_t)os::elapsedTime();\n@@ -332,1 +332,1 @@\n-  _last_commit = ceil(os::elapsedTime());\n+  _last_commit = (uint64_t)ceil(os::elapsedTime());\n","filename":"src\/hotspot\/share\/gc\/z\/zPageCache.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -72,1 +72,1 @@\n-    ZPage* const page = _table->at(index);\n+    ZPage* const page = _table->at(size_t(index));\n","filename":"src\/hotspot\/share\/gc\/z\/zPageTable.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -87,1 +87,1 @@\n-      _nforwardings(selector->selected_small()->length() + selector->selected_medium()->length()),\n+      _nforwardings((size_t)selector->selected_small()->length() + (size_t)selector->selected_medium()->length()),\n@@ -116,1 +116,1 @@\n-      install_small(forwarding, _medium->length() + page_index);\n+      install_small(forwarding, (size_t)_medium->length() + page_index);\n","filename":"src\/hotspot\/share\/gc\/z\/zRelocationSet.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,1 @@\n-    _page_fragmentation_limit(page_size * (fragmentation_limit \/ 100)),\n+    _page_fragmentation_limit((size_t)(page_size * (fragmentation_limit \/ 100))),\n@@ -75,1 +75,1 @@\n-  const size_t partition_size_shift = exact_log2(partition_size);\n+  const int partition_size_shift = log2i_exact(partition_size);\n@@ -138,1 +138,1 @@\n-    const int to = ceil((double)(from_live_bytes) \/ (double)(_page_size - _object_size_limit));\n+    const int to = (int)ceil(from_live_bytes \/ (double)(_page_size - _object_size_limit));\n","filename":"src\/hotspot\/share\/gc\/z\/zRelocationSetSelector.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -253,8 +253,8 @@\n-            TimeHelper::counter_to_millis(history.avg_10_seconds()),\n-            TimeHelper::counter_to_millis(history.max_10_seconds()),\n-            TimeHelper::counter_to_millis(history.avg_10_minutes()),\n-            TimeHelper::counter_to_millis(history.max_10_minutes()),\n-            TimeHelper::counter_to_millis(history.avg_10_hours()),\n-            TimeHelper::counter_to_millis(history.max_10_hours()),\n-            TimeHelper::counter_to_millis(history.avg_total()),\n-            TimeHelper::counter_to_millis(history.max_total()));\n+            TimeHelper::counter_to_millis((jlong)history.avg_10_seconds()),\n+            TimeHelper::counter_to_millis((jlong)history.max_10_seconds()),\n+            TimeHelper::counter_to_millis((jlong)history.avg_10_minutes()),\n+            TimeHelper::counter_to_millis((jlong)history.max_10_minutes()),\n+            TimeHelper::counter_to_millis((jlong)history.avg_10_hours()),\n+            TimeHelper::counter_to_millis((jlong)history.max_10_hours()),\n+            TimeHelper::counter_to_millis((jlong)history.avg_total()),\n+            TimeHelper::counter_to_millis((jlong)history.max_total()));\n@@ -680,1 +680,1 @@\n-  ZStatSample(_sampler, duration.value());\n+  ZStatDurationSample(_sampler, duration);\n@@ -721,1 +721,1 @@\n-  ZStatSample(_sampler, duration.value());\n+  ZStatDurationSample(_sampler, duration);\n@@ -769,1 +769,1 @@\n-  ZStatSample(_sampler, duration.value());\n+  ZStatDurationSample(_sampler, duration);\n@@ -801,1 +801,1 @@\n-  ZStatSample(_sampler, duration.value());\n+  ZStatDurationSample(_sampler, duration);\n@@ -838,1 +838,1 @@\n-  ZStatSample(_sampler, duration.value());\n+  ZStatDurationSample(_sampler, duration);\n@@ -865,1 +865,1 @@\n-  ZStatSample(_sampler, duration.value());\n+  ZStatDurationSample(_sampler, duration);\n@@ -917,0 +917,4 @@\n+void ZStatDurationSample(const ZStatSampler& sampler, const Tickspan& duration) {\n+  ZStatSample(sampler, (uint64_t)duration.value());\n+}\n+\n@@ -1039,1 +1043,1 @@\n-  const uint64_t now = os::elapsedTime();\n+  const uint64_t now = (uint64_t)os::elapsedTime();\n@@ -1849,1 +1853,1 @@\n-  return _reclaimed_bytes.davg();\n+  return (size_t)_reclaimed_bytes.davg();\n","filename":"src\/hotspot\/share\/gc\/z\/zStat.cpp","additions":21,"deletions":17,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -348,0 +348,1 @@\n+void ZStatDurationSample(const ZStatSampler& sampler, const Tickspan& duration);\n","filename":"src\/hotspot\/share\/gc\/z\/zStat.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -82,1 +82,1 @@\n-  for (int i = current(); i < (int)_buffer_length; ++i) {\n+  for (size_t i = current(); i < _buffer_length; ++i) {\n@@ -144,1 +144,1 @@\n-void ZStoreBarrierBuffer::on_new_phase_relocate(int i) {\n+void ZStoreBarrierBuffer::on_new_phase_relocate(size_t i) {\n@@ -163,1 +163,1 @@\n-void ZStoreBarrierBuffer::on_new_phase_remember(int i) {\n+void ZStoreBarrierBuffer::on_new_phase_remember(size_t i) {\n@@ -200,1 +200,1 @@\n-void ZStoreBarrierBuffer::on_new_phase_mark(int i) {\n+void ZStoreBarrierBuffer::on_new_phase_mark(size_t i) {\n@@ -232,1 +232,1 @@\n-  for (int i = current(); i < (int)_buffer_length; ++i) {\n+  for (size_t i = current(); i < _buffer_length; ++i) {\n@@ -262,2 +262,2 @@\n-  for (int i = current(); i < (int)_buffer_length; ++i) {\n-    st->print_cr(\" [%2d]: base: \" PTR_FORMAT \" p: \" PTR_FORMAT \" prev: \" PTR_FORMAT,\n+  for (size_t i = current(); i < _buffer_length; ++i) {\n+    st->print_cr(\" [%2zu]: base: \" PTR_FORMAT \" p: \" PTR_FORMAT \" prev: \" PTR_FORMAT,\n@@ -279,1 +279,1 @@\n-  for (int i = current(); i < (int)_buffer_length; ++i) {\n+  for (size_t i = current(); i < _buffer_length; ++i) {\n@@ -299,1 +299,1 @@\n-    for (int i = buffer->current(); i < (int)_buffer_length; ++i) {\n+    for (size_t i = buffer->current(); i < _buffer_length; ++i) {\n","filename":"src\/hotspot\/share\/gc\/z\/zStoreBarrierBuffer.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,3 +62,3 @@\n-  void on_new_phase_relocate(int i);\n-  void on_new_phase_remember(int i);\n-  void on_new_phase_mark(int i);\n+  void on_new_phase_relocate(size_t i);\n+  void on_new_phase_remember(size_t i);\n+  void on_new_phase_mark(size_t i);\n@@ -71,1 +71,1 @@\n-  intptr_t current() const;\n+  size_t current() const;\n","filename":"src\/hotspot\/share\/gc\/z\/zStoreBarrierBuffer.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-inline intptr_t ZStoreBarrierBuffer::current() const {\n+inline size_t ZStoreBarrierBuffer::current() const {\n","filename":"src\/hotspot\/share\/gc\/z\/zStoreBarrierBuffer.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -88,1 +88,1 @@\n-  return align_up<size_t>(_page_allocator->max_capacity() * ZAsyncUnmappingLimit \/ 100.0, ZGranuleSize);\n+  return align_up((size_t)(_page_allocator->max_capacity() * ZAsyncUnmappingLimit \/ 100.0), ZGranuleSize);\n","filename":"src\/hotspot\/share\/gc\/z\/zUnmapper.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -586,1 +586,1 @@\n-    for (int i = buffer->current(); i < (int)ZStoreBarrierBuffer::_buffer_length; ++i) {\n+    for (size_t i = buffer->current(); i < ZStoreBarrierBuffer::_buffer_length; ++i) {\n","filename":"src\/hotspot\/share\/gc\/z\/zVerify.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}