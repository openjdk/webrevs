{"files":[{"patch":"@@ -183,1 +183,1 @@\n-    public static Map<String, ?> readOnlyJarFSEnv(String releaseVersion) {\n+    public Map<String, ?> readOnlyJarFSEnv(String releaseVersion) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/file\/FSInfo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -564,2 +564,0 @@\n-            \/\/ Common parameters for opening ZIP\/JAR file systems in Javac.\n-            Map<String, ?> env = FSInfo.readOnlyJarFSEnv(multiReleaseValue);\n@@ -569,0 +567,1 @@\n+                Map<String, ?> env = fsInfo.readOnlyJarFSEnv(multiReleaseValue);\n@@ -578,1 +577,2 @@\n-                \/\/ However Javac should never attempt to write back to archives either way.\n+                \/\/ However, Javac should never attempt to write back to archives either way.\n+                Map<String, ?> env = fsInfo.readOnlyJarFSEnv(null);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/file\/JavacFileManager.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1387,1 +1387,1 @@\n-                    try (FileSystem fs = jarFSProvider.newFileSystem(p, FSInfo.readOnlyJarFSEnv(releaseVersion))) {\n+                    try (FileSystem fs = jarFSProvider.newFileSystem(p, fsInfo.readOnlyJarFSEnv(releaseVersion))) {\n@@ -1463,1 +1463,1 @@\n-                            fs = jarFSProvider.newFileSystem(p, FSInfo.readOnlyJarFSEnv(null));\n+                            fs = jarFSProvider.newFileSystem(p, fsInfo.readOnlyJarFSEnv(null));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/file\/Locations.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import com.sun.tools.javac.util.Context;\n@@ -59,0 +60,2 @@\n+    private final FSInfo fsInfo = FSInfo.instance(new Context());\n+\n@@ -67,5 +70,1 @@\n-        try (FileSystem fs = FileSystems.newFileSystem(ctSym, FSInfo.readOnlyJarFSEnv(null))) {\n-            \/\/ Check that the file system is read only (not true if not a zip file system).\n-            if (!fs.isReadOnly()) {\n-                throw new AssertionError(\"Expected read-only file system\");\n-            }\n+        try (var fs = fsInfo.getJarFSProvider().newFileSystem(ctSym, fsInfo.readOnlyJarFSEnv(null))) {\n","filename":"test\/langtools\/tools\/javac\/platform\/VerifyCTSymClassFiles.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"}]}