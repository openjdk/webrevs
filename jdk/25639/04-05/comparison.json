{"files":[{"patch":"@@ -65,0 +65,1 @@\n+import com.sun.tools.javac.util.Assert;\n@@ -261,1 +262,1 @@\n-                        assert fs.isReadOnly();\n+                        Assert.check(fs.isReadOnly());\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/platform\/JDKPlatformProvider.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -38,3 +38,0 @@\n-import com.sun.tools.javac.file.FSInfo;\n-import com.sun.tools.javac.util.Context;\n-\n@@ -51,0 +48,1 @@\n+import java.util.Map;\n@@ -60,2 +58,0 @@\n-    private final FSInfo fsInfo = FSInfo.instance(new Context());\n-\n@@ -70,1 +66,6 @@\n-        try (var fs = fsInfo.getJarFSProvider().newFileSystem(ctSym, fsInfo.readOnlyJarFSEnv(null))) {\n+        Map<String, ?> env = Map.of(\"accessMode\", \"readOnly\");\n+        try (FileSystem fs = FileSystems.newFileSystem(ctSym, env)) {\n+            \/\/ Check that the file system is read only (not true if not a zip file system).\n+            if (!fs.isReadOnly()) {\n+                throw new AssertionError(\"Expected read-only file system\");\n+            }\n","filename":"test\/langtools\/tools\/javac\/platform\/VerifyCTSymClassFiles.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"}]}