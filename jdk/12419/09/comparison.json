{"files":[{"patch":"@@ -423,1 +423,1 @@\n-    FileMapInfo::fail_continue(\"Dynamic archive cannot be used: static archive header checksum verification failed.\");\n+    log_warning(cds)(\"Dynamic archive cannot be used: static archive header checksum verification failed.\");\n@@ -430,1 +430,1 @@\n-      FileMapInfo::fail_continue(\"Dynamic archive cannot be used: static archive region #%d checksum verification failed.\", i);\n+      log_warning(cds)(\"Dynamic archive cannot be used: static archive region #%d checksum verification failed.\", i);\n","filename":"src\/hotspot\/share\/cds\/dynamicArchive.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -106,38 +106,0 @@\n-\n-\/\/ Complain and continue.  Recoverable errors during the reading of the\n-\/\/ archive file may continue (with sharing disabled).\n-\/\/\n-\/\/ If we continue, then disable shared spaces and close the file.\n-\n-void FileMapInfo::fail_continue(const char *msg, ...) {\n-  va_list ap;\n-  va_start(ap, msg);\n-  fail_continue_impl(LogLevel::Info, msg, ap);\n-  va_end(ap);\n-}\n-\n-void FileMapInfo::fail_continue(LogLevelType level, const char *msg, ...) {\n-  va_list ap;\n-  va_start(ap, msg);\n-  fail_continue_impl(level, msg, ap);\n-  va_end(ap);\n-}\n-\n-void FileMapInfo::fail_continue_impl(LogLevelType level, const char *msg, va_list ap) {\n-  if (PrintSharedArchiveAndExit && _validating_shared_path_table) {\n-    \/\/ If we are doing PrintSharedArchiveAndExit and some of the classpath entries\n-    \/\/ do not validate, we can still continue \"limping\" to validate the remaining\n-    \/\/ entries. No need to quit.\n-    tty->print(\"[\");\n-    tty->vprint(msg, ap);\n-    tty->print_cr(\"]\");\n-  } else {\n-    if (RequireSharedSpaces) {\n-      fail_exit(msg, ap);\n-    } else {\n-      LogMessage(cds) lm;\n-      lm.vwrite(level, msg, ap);\n-    }\n-  }\n-}\n-\n@@ -467,1 +429,1 @@\n-    FileMapInfo::fail_continue(\"Required classpath entry does not exist: %s\", name);\n+    log_warning(cds)(\"Required classpath entry does not exist: %s\", name);\n@@ -471,1 +433,1 @@\n-      FileMapInfo::fail_continue(\"directory is not empty: %s\", name);\n+      log_warning(cds)(\"directory is not empty: %s\", name);\n@@ -478,1 +440,1 @@\n-      FileMapInfo::fail_continue(_timestamp != st.st_mtime ?\n+      log_warning(cds)(_timestamp != st.st_mtime ?\n@@ -483,1 +445,1 @@\n-      FileMapInfo::fail_continue(\"%s %s\", bad_jar_msg, name);\n+      log_warning(cds)(\"%s %s\", bad_jar_msg, name);\n@@ -1138,1 +1100,5 @@\n-      fail_continue(LogLevel::Warning, \"%s%s\", mismatch_msg, hint_msg);\n+      if (RequireSharedSpaces) {\n+        fail_stop(\"%s%s\", mismatch_msg, hint_msg);\n+      } else {\n+        log_warning(cds)(\"%s%s\", mismatch_msg, hint_msg);\n+      }\n@@ -1216,1 +1182,1 @@\n-      FileMapInfo::fail_continue(\"Specified shared archive not found (%s)\", _archive_name);\n+      log_info(cds)(\"Specified shared archive not found (%s)\", _archive_name);\n@@ -1232,1 +1198,1 @@\n-      FileMapInfo::fail_continue(\"Unable to read generic CDS file map header from shared archive\");\n+      log_warning(cds)(\"Unable to read generic CDS file map header from shared archive\");\n@@ -1238,1 +1204,1 @@\n-      FileMapInfo::fail_continue(\"The shared archive file has a bad magic number: %#x\", gen_header._magic);\n+      log_warning(cds)(\"The shared archive file has a bad magic number: %#x\", gen_header._magic);\n@@ -1243,1 +1209,1 @@\n-      FileMapInfo::fail_continue(\"Cannot handle shared archive file version 0x%x. Must be at least 0x%x.\",\n+      log_warning(cds)(\"Cannot handle shared archive file version 0x%x. Must be at least 0x%x.\",\n@@ -1249,1 +1215,1 @@\n-      FileMapInfo::fail_continue(\"The shared archive file version 0x%x does not match the required version 0x%x.\",\n+      log_warning(cds)(\"The shared archive file version 0x%x does not match the required version 0x%x.\",\n@@ -1255,1 +1221,1 @@\n-      FileMapInfo::fail_continue(\"Archive file header larger than archive file\");\n+      log_warning(cds)(\"Archive file header larger than archive file\");\n@@ -1265,1 +1231,1 @@\n-      FileMapInfo::fail_continue(\"Unable to read actual CDS file map header from shared archive\");\n+      log_warning(cds)(\"Unable to read actual CDS file map header from shared archive\");\n@@ -1300,1 +1266,1 @@\n-        FileMapInfo::fail_continue(\"Header checksum verification failed.\");\n+        log_warning(cds)(\"Header checksum verification failed.\");\n@@ -1313,1 +1279,1 @@\n-      FileMapInfo::fail_continue(\"base_archive_name offset\/size overflow: \" UINT32_FORMAT \"\/\" UINT32_FORMAT,\n+      log_warning(cds)(\"base_archive_name offset\/size overflow: \" UINT32_FORMAT \"\/\" UINT32_FORMAT,\n@@ -1319,1 +1285,1 @@\n-        FileMapInfo::fail_continue(\"static shared archive must have zero _base_archive_name_offset\");\n+        log_warning(cds)(\"static shared archive must have zero _base_archive_name_offset\");\n@@ -1323,1 +1289,1 @@\n-        FileMapInfo::fail_continue(\"static shared archive must have zero _base_archive_name_size\");\n+        log_warning(cds)(\"static shared archive must have zero _base_archive_name_size\");\n@@ -1331,1 +1297,1 @@\n-        FileMapInfo::fail_continue(\"Invalid base_archive_name offset\/size: \" UINT32_FORMAT \"\/\" UINT32_FORMAT,\n+        log_warning(cds)(\"Invalid base_archive_name offset\/size: \" UINT32_FORMAT \"\/\" UINT32_FORMAT,\n@@ -1337,1 +1303,1 @@\n-          FileMapInfo::fail_continue(\"Invalid base_archive_name offset\/size (out of range): \"\n+          log_warning(cds)(\"Invalid base_archive_name offset\/size (out of range): \"\n@@ -1344,1 +1310,1 @@\n-          FileMapInfo::fail_continue(\"Base archive name is damaged\");\n+          log_warning(cds)(\"Base archive name is damaged\");\n@@ -1348,1 +1314,1 @@\n-          FileMapInfo::fail_continue(\"Base archive %s does not exist\", name);\n+          log_warning(cds)(\"Base archive %s does not exist\", name);\n@@ -1398,1 +1364,1 @@\n-    fail_continue(\"Unable to read the file header.\");\n+    log_warning(cds)(\"Unable to read the file header.\");\n@@ -1405,1 +1371,1 @@\n-      FileMapInfo::fail_continue(\"Not a base shared archive: %s\", _full_path);\n+      log_warning(cds)(\"Not a base shared archive: %s\", _full_path);\n@@ -1410,1 +1376,1 @@\n-      FileMapInfo::fail_continue(\"Not a top shared archive: %s\", _full_path);\n+      log_warning(cds)(\"Not a top shared archive: %s\", _full_path);\n@@ -1420,1 +1386,1 @@\n-    fail_continue(\"Failed to read file header from the top archive file\\n\");\n+    log_warning(cds)(\"Failed to read file header from the top archive file\\n\");\n@@ -1427,1 +1393,1 @@\n-    fail_continue(\"The shared archive file has the wrong version.\");\n+    log_warning(cds)(\"The shared archive file has the wrong version.\");\n@@ -1433,1 +1399,1 @@\n-      FileMapInfo::fail_continue(\"common app classpath prefix len < 0\");\n+      log_warning(cds)(\"common app classpath prefix len < 0\");\n@@ -1446,1 +1412,1 @@\n-      FileMapInfo::fail_continue(\"The shared archive file has an incorrect header size.\");\n+      log_warning(cds)(\"The shared archive file has an incorrect header size.\");\n@@ -1454,1 +1420,1 @@\n-    FileMapInfo::fail_continue(\"JVM version identifier is corrupted.\");\n+    log_warning(cds)(\"JVM version identifier is corrupted.\");\n@@ -1463,1 +1429,1 @@\n-    FileMapInfo::fail_continue(\"The shared archive file was created by a different\"\n+    log_warning(cds)(\"The shared archive file was created by a different\"\n@@ -1475,1 +1441,1 @@\n-      fail_continue(\"The shared archive file has been truncated.\");\n+      log_warning(cds)(\"The shared archive file has been truncated.\");\n@@ -1498,1 +1464,1 @@\n-      fail_continue(\"Specified shared archive not found (%s)\", _full_path);\n+      log_info(cds)(\"Specified shared archive not found (%s)\", _full_path);\n@@ -1500,1 +1466,1 @@\n-      fail_continue(\"Failed to open shared archive file (%s)\",\n+      log_warning(cds)(\"Failed to open shared archive file (%s)\",\n@@ -1608,1 +1574,1 @@\n-    FileMapInfo::fail_continue(\"Checksum verification failed.\");\n+    log_warning(cds)(\"Checksum verification failed.\");\n@@ -2598,3 +2564,2 @@\n-\/\/ information (version, boot classpath, etc.).  If initialization\n-\/\/ fails, shared spaces are disabled and the file is closed. [See\n-\/\/ fail_continue.]\n+\/\/ information (version, boot classpath, etc.). If initialization\n+\/\/ fails, shared spaces are disabled and the file is closed.\n@@ -2615,1 +2580,1 @@\n-    FileMapInfo::fail_continue(\"CDS is disabled because early JVMTI ClassFileLoadHook is in use.\");\n+    log_info(cds)(\"CDS is disabled because early JVMTI ClassFileLoadHook is in use.\");\n@@ -2620,1 +2585,1 @@\n-    FileMapInfo::fail_continue(\"The shared archive file cannot be used with an exploded module build.\");\n+    log_info(cds)(\"The shared archive file cannot be used with an exploded module build.\");\n@@ -2626,1 +2591,1 @@\n-      FileMapInfo::fail_continue(\"Initialize static archive failed.\");\n+      log_info(cds)(\"Initialize static archive failed.\");\n@@ -2629,1 +2594,1 @@\n-      FileMapInfo::fail_continue(\"Initialize dynamic archive failed.\");\n+      log_info(cds)(\"Initialize dynamic archive failed.\");\n@@ -2666,1 +2631,1 @@\n-    FileMapInfo::fail_continue(\"The shared archive file's ObjectAlignmentInBytes of %d\"\n+    log_info(cds)(\"The shared archive file's ObjectAlignmentInBytes of %d\"\n@@ -2672,1 +2637,1 @@\n-    FileMapInfo::fail_continue(\"The shared archive file's CompactStrings setting (%s)\"\n+    log_info(cds)(\"The shared archive file's CompactStrings setting (%s)\"\n@@ -2692,1 +2657,1 @@\n-    FileMapInfo::fail_continue(\"The shared archive file's BytecodeVerificationLocal setting (%s)\"\n+    log_info(cds)(\"The shared archive file's BytecodeVerificationLocal setting (%s)\"\n@@ -2704,1 +2669,1 @@\n-    FileMapInfo::fail_continue(\"The shared archive file was created with less restrictive \"\n+    log_info(cds)(\"The shared archive file was created with less restrictive \"\n@@ -2716,1 +2681,1 @@\n-    FileMapInfo::fail_continue(\"The setting of the AllowArchivingWithJavaAgent is different \"\n+    log_warning(cds)(\"The setting of the AllowArchivingWithJavaAgent is different \"\n@@ -2729,1 +2694,1 @@\n-    FileMapInfo::fail_continue(\"Unable to use shared archive.\\nThe saved state of UseCompressedOops and UseCompressedClassPointers is \"\n+    log_info(cds)(\"Unable to use shared archive.\\nThe saved state of UseCompressedOops and UseCompressedClassPointers is \"\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":49,"deletions":84,"binary":false,"changes":133,"status":"modified"},{"patch":"@@ -487,3 +487,0 @@\n-  static void fail_continue(const char *msg, ...) ATTRIBUTE_PRINTF(1, 2);\n-  static void fail_continue(LogLevelType level, const char *msg, ...) ATTRIBUTE_PRINTF(2, 3);\n-  static void fail_continue_impl(LogLevelType level, const char *msg, va_list ap) ATTRIBUTE_PRINTF(2, 0);\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -950,1 +950,1 @@\n-    FileMapInfo::fail_continue(\"Unable to map shared spaces\");\n+    log_info(cds)(\"Unable to map shared spaces\");\n@@ -953,0 +953,2 @@\n+    } else if (RequireSharedSpaces) {\n+      FileMapInfo::fail_stop(\"Unable to map shared spaces\");\n@@ -956,0 +958,2 @@\n+  \/\/ If mapping failed and -XShare:on, the vm should exit\n+  bool has_failed = false;\n@@ -957,0 +961,1 @@\n+    has_failed = true;\n@@ -960,0 +965,1 @@\n+    has_failed = true;\n@@ -962,0 +968,3 @@\n+  if (RequireSharedSpaces && has_failed) {\n+      FileMapInfo::fail_stop(\"Unable to map shared spaces\");\n+  }\n@@ -987,0 +996,3 @@\n+    if (RequireSharedSpaces) {\n+      FileMapInfo::fail_stop(\"Failed to initialize dynamic archive\");\n+    }\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-\n+        opts.addPrefix(\"-Xlog:cds\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/ArchiveDoesNotExist.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-        OutputAnalyzer out = CDSTestUtils.runWithArchive(loadCompactStringsArgument);\n+        OutputAnalyzer out = CDSTestUtils.runWithArchive(\"-Xlog:cds\", loadCompactStringsArgument);\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/CdsDifferentCompactStrings.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-        OutputAnalyzer out = CDSTestUtils.runWithArchive(loadAlignmentArgument);\n+        OutputAnalyzer out = CDSTestUtils.runWithArchive(\"-Xlog:cds\", loadAlignmentArgument);\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/CdsDifferentObjectAlignment.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -117,1 +117,1 @@\n-      .ifNoMappingFailure(output -> check(output, 1, true, lastCheckMsg, \"[Timestamp mismatch]\"));\n+      .ifNoMappingFailure(output -> check(output, 1, true, lastCheckMsg, \"Timestamp mismatch\"));\n@@ -131,1 +131,1 @@\n-      .ifNoMappingFailure(output -> check(output, 1, true, lastCheckMsg, \"[Required classpath entry does not exist: \" + appJar + \"]\"));\n+      .ifNoMappingFailure(output -> check(output, 1, true, lastCheckMsg, \"Required classpath entry does not exist: \" + appJar));\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/PrintSharedArchiveAndExit.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -224,0 +224,1 @@\n+                           \"-Xlog:cds\",\n@@ -304,0 +305,1 @@\n+                           \"-Xlog:cds\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/VerifierTest.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}