{"files":[{"patch":"@@ -468,5 +468,10 @@\n-    \/\/ We can skip marks on a freshly-allocated object in Eden.\n-    \/\/ Keep this code in sync with new_deferred_store_barrier() in runtime.cpp.\n-    \/\/ That routine informs GC to take appropriate compensating steps,\n-    \/\/ upon a slow-path allocation, so as to make this card-mark\n-    \/\/ elision safe.\n+    \/\/ We use card marks to track old to young references in Generational Shenandoah;\n+    \/\/ see flag ShenandoahCardBarrier above.\n+    \/\/ Objects are always allocated in the young generation and initialized\n+    \/\/ before they are promoted. There's always a safepoint (e.g. at final mark)\n+    \/\/ before an object is promoted from young to old. Promotion entails dirtying of\n+    \/\/ the cards backing promoted objects, so they will be guaranteed to be scanned\n+    \/\/ at the next remembered set scan of the old generation.\n+    \/\/ Thus, we can safely skip card-marking of initializing stores on a\n+    \/\/ freshly-allocated object. If any of the assumptions above change in\n+    \/\/ the future, this code will need to be re-examined.\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahBarrierSetC2.cpp","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"}]}