{"files":[{"patch":"@@ -423,2 +423,3 @@\n-         * All unregistered super classes and interfaces of the named class must already be loaded\n-         * by this class loader instance.\n+         * All super classes and interfaces of the named class must have already been loaded:\n+         * either defined by this class loader (unregistered ones) or loaded, possibly indirectly,\n+         * by the system class loader (registered ones).\n@@ -433,5 +434,15 @@\n-            \/\/ While executing this VM may invoke loadClass() to load supers and interfaces of\n-            \/\/ this unregistered class. This should only happen for registered supers and\n-            \/\/ interfaces because all unregistered ones should have already been loaded by this\n-            \/\/ class loader. Thus it is safe to delegate their loading to system class loader\n-            \/\/ (our parent) - this is what the default implementation of loadClass() will do.\n+            \/\/ 'defineClass()' may cause loading of supertypes of this unregistered class.\n+            \/\/\n+            \/\/ For any supertype S named SN the following is ensured by the order of classes in the\n+            \/\/ classlist:\n+            \/\/ - if S is an unregistered class it must have already been defined by this class\n+            \/\/   loader and thus will be found by 'this.findLoadedClass(SN)',\n+            \/\/ - if S is not an unregistered class S must have already been loaded by the system\n+            \/\/   class loader (as an initiating loader) and thus can be found by delegating to it by\n+            \/\/   calling 'this.getParent().loadClass(SN, false)'.\n+            \/\/ See the implementation of 'ClassLoader.loadClass()' for details.\n+            \/\/\n+            \/\/ Therefore, we should resolve all supertypes to the expected ones as specified by the\n+            \/\/ \"super:\" and \"interfaces:\" attributes in the classlist. This invariant is validated\n+            \/\/ by the C++ function 'ClassListParser::load_class_from_source()'.\n+            assert getParent() == getSystemClassLoader();\n@@ -440,7 +451,0 @@\n-\n-        @Override\n-        protected Class<?> findClass(String name) throws ClassNotFoundException {\n-            \/\/ Unregistered classes should be found in load(...), registered classes should be\n-            \/\/ handeled by parent loaders\n-            throw new ClassNotFoundException(name);\n-        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/CDS.java","additions":18,"deletions":14,"binary":false,"changes":32,"status":"modified"}]}