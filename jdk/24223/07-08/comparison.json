{"files":[{"patch":"@@ -507,0 +507,16 @@\n+\/\/ If an unregistered class U is specified to have a registered supertype S1\n+\/\/ named SN but an unregistered class S2 also named SN has already been loaded\n+\/\/ S2 will be incorrectly used as the supertype of U instead of S1 due to\n+\/\/ limitations in the loading mechanism of unregistered classes.\n+void ClassListParser::check_supertype_overshadowing(int supertype_id, const InstanceKlass* supertype, TRAPS) {\n+  const InstanceKlass* overshadower = SystemDictionaryShared::get_unregistered_class(supertype->name());\n+  if (overshadower == nullptr || overshadower == supertype) {\n+    return;\n+  }\n+  assert(!supertype->is_shared_unregistered_class(), \"unregistered supertype cannot be overshadowed\");\n+  ResourceMark rm;\n+  THROW_MSG(vmSymbols::java_lang_UnsupportedOperationException(),\n+            err_msg(\"%s (id %d) has super-type %s (id %d) overshadowed by another class with the same name\",\n+                    _class_name, _id, supertype->external_name(), supertype_id));\n+}\n+\n@@ -533,0 +549,4 @@\n+  check_supertype_overshadowing(_super, specified_super, CHECK_NULL);\n+  for (int i = 0; i < _interfaces->length(); i++) {\n+    check_supertype_overshadowing(_interfaces->at(i), specified_interfaces.at(i), CHECK_NULL);\n+  }\n","filename":"src\/hotspot\/share\/cds\/classListParser.cpp","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -141,0 +141,1 @@\n+  void check_supertype_overshadowing(int supertype_id, const InstanceKlass* supertype, TRAPS);\n","filename":"src\/hotspot\/share\/cds\/classListParser.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -38,1 +38,2 @@\n-InstanceKlass* UnregisteredClasses::_UnregisteredClassLoader_klass = nullptr;\n+static InstanceKlass* _UnregisteredClassLoader_klass;\n+static InstanceKlass* _UnregisteredClassLoader_Source_klass;\n@@ -42,11 +43,2 @@\n-  if (_UnregisteredClassLoader_klass == nullptr) {\n-    \/\/ no need for synchronization as this function is called single-threaded.\n-    Symbol* klass_name = SymbolTable::new_symbol(\"jdk\/internal\/misc\/CDS$UnregisteredClassLoader\");\n-    Klass* k = SystemDictionary::resolve_or_fail(klass_name, true, CHECK);\n-    _UnregisteredClassLoader_klass = InstanceKlass::cast(k);\n-\n-    precond(_unregistered_class_loader.is_empty());\n-    HandleMark hm(THREAD);\n-    const Handle cl = JavaCalls::construct_new_instance(UnregisteredClassLoader_klass(),\n-                                                        vmSymbols::void_method_signature(), CHECK);\n-    _unregistered_class_loader = OopHandle(Universe::vm_global(), cl());\n+  if (_UnregisteredClassLoader_klass != nullptr) {\n+    return;\n@@ -54,0 +46,18 @@\n+\n+  Symbol* klass_name;\n+  Klass* k;\n+\n+  \/\/ no need for synchronization as this function is called single-threaded.\n+  klass_name = SymbolTable::new_symbol(\"jdk\/internal\/misc\/CDS$UnregisteredClassLoader\");\n+  k = SystemDictionary::resolve_or_fail(klass_name, true, CHECK);\n+  _UnregisteredClassLoader_klass = InstanceKlass::cast(k);\n+\n+  klass_name = SymbolTable::new_symbol(\"jdk\/internal\/misc\/CDS$UnregisteredClassLoader$Source\");\n+  k = SystemDictionary::resolve_or_fail(klass_name, true, CHECK);\n+  _UnregisteredClassLoader_Source_klass = InstanceKlass::cast(k);\n+\n+  precond(_unregistered_class_loader.is_empty());\n+  HandleMark hm(THREAD);\n+  const Handle cl = JavaCalls::construct_new_instance(_UnregisteredClassLoader_klass,\n+                                                      vmSymbols::void_method_signature(), CHECK);\n+  _unregistered_class_loader = OopHandle(Universe::vm_global(), cl());\n@@ -79,1 +89,1 @@\n-                          UnregisteredClassLoader_klass(),\n+                          _UnregisteredClassLoader_klass,\n@@ -89,0 +99,8 @@\n+\n+bool UnregisteredClasses::check_for_exclusion(const InstanceKlass* k) {\n+  if (_UnregisteredClassLoader_klass == nullptr) {\n+    return false; \/\/ Uninitialized\n+  }\n+  return k == _UnregisteredClassLoader_klass ||\n+         k->implements_interface(_UnregisteredClassLoader_Source_klass);\n+}\n","filename":"src\/hotspot\/share\/cds\/unregisteredClasses.cpp","additions":31,"deletions":13,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -38,7 +38,2 @@\n-  static InstanceKlass* UnregisteredClassLoader_klass() {\n-    return _UnregisteredClassLoader_klass;\n-  }\n-\n-private:\n-  \/\/ Don't put this in vmClasses as it's used only with CDS dumping.\n-  static InstanceKlass* _UnregisteredClassLoader_klass;\n+  \/\/ Returns true if the class is loaded internally for dumping unregistered classes.\n+  static bool check_for_exclusion(const InstanceKlass* k);\n","filename":"src\/hotspot\/share\/cds\/unregisteredClasses.hpp","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -352,0 +352,6 @@\n+  if (UnregisteredClasses::check_for_exclusion(k)) {\n+    ResourceMark rm;\n+    log_info(cds)(\"Skipping %s: used only when dumping CDS archive\", k->name()->as_C_string());\n+    return true;\n+  }\n+\n@@ -370,6 +376,0 @@\n-  if (k == UnregisteredClasses::UnregisteredClassLoader_klass()) {\n-    ResourceMark rm;\n-    log_info(cds)(\"Skipping %s: used only when dumping CDS archive\", k->name()->as_C_string());\n-    return true;\n-  }\n-\n@@ -494,0 +494,9 @@\n+InstanceKlass* SystemDictionaryShared::get_unregistered_class(Symbol* name) {\n+  assert(CDSConfig::is_dumping_archive() || ClassListWriter::is_enabled(), \"sanity\");\n+  if (_unregistered_classes_table == nullptr) {\n+    return nullptr;\n+  }\n+  InstanceKlass** k = _unregistered_classes_table->get(name);\n+  return k != nullptr ? *k : nullptr;\n+}\n+\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":15,"deletions":6,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -285,0 +285,1 @@\n+  static InstanceKlass* get_unregistered_class(Symbol* name);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,62 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import jdk.test.lib.process.OutputAnalyzer;\n-\n-\/**\n- * @test\n- * @summary Tests that if a class is listed as unregistered it will be archived\n- * as such even if it is on classpath (i.e. it will not be loaded by the app\n- * loader).\n- *\n- * @requires vm.cds\n- * @requires vm.cds.custom.loaders\n- * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n- * @compile test-classes\/ClassFromClasspathApp.java test-classes\/CustomLoadee3.java test-classes\/CustomLoadee3Child.java\n- * @run main ClassFromClasspath\n- *\/\n-public class ClassFromClasspath {\n-    public static void main(String[] args) throws Exception {\n-        final String appJar = JarBuilder.build(\"app\", \"ClassFromClasspathApp\", \"CustomLoadee3\", \"CustomLoadee3Child\");\n-\n-        final String classlist[] = new String[] {\n-            \"java\/lang\/Object id: 0\",\n-            \"CustomLoadee3 id: 1\",\n-            \"CustomLoadee3 id: 2 super: 0 source: \" + appJar,\n-            \"CustomLoadee3Child id: 3 super: 2 source: \" + appJar\n-        };\n-        \/\/ Note: if you get a HotSpot crash here in a debug build it is probably because of an\n-        \/\/ assertion in HotSpot CDS code that performs the same check as this test\n-        TestCommon.testDump(appJar, classlist, \"-Xlog:cds+class=debug\")\n-            .shouldContain(\"app   CustomLoadee3\\n\")\n-            .shouldContain(\"unreg CustomLoadee3\\n\")\n-            .shouldContain(\"unreg CustomLoadee3Child\\n\");\n-\n-        final OutputAnalyzer out = TestCommon.exec(appJar, \"-Xlog:class+load\", \"ClassFromClasspathApp\");\n-        TestCommon.checkExec(\n-            out,\n-            \"CustomLoadee3 source: shared objects file\",\n-            \"CustomLoadee3Child source: shared objects file\"\n-        );\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/customLoader\/ClassFromClasspath.java","additions":0,"deletions":62,"binary":false,"changes":62,"status":"deleted"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+\/**\n+ * @test id=unreg\n+ * @summary Tests that if a super class is listed as unregistered it is archived\n+ * as such even if a class with the same name has also been loaded from the\n+ * classpath.\n+ *\n+ * @requires vm.cds\n+ * @requires vm.cds.custom.loaders\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @compile test-classes\/RegUnregSuperApp.java test-classes\/CustomLoadee3.java test-classes\/CustomLoadee3Child.java\n+ * @run main RegUnregSuperTest unreg\n+ *\/\n+\n+\/**\n+ * @test id=reg\n+ * @summary If an unregistered class U is specified to have a registered\n+ * supertype S1 named SN but an unregistered class S2 also named SN has already\n+ * been loaded S2 will be incorrectly used as the supertype of U instead of S1\n+ * due to limitations in the loading mechanism of unregistered classes. For this\n+ * reason U should not be loaded at all and an appropriate warning should be\n+ * printed.\n+ *\n+ * @requires vm.cds\n+ * @requires vm.cds.custom.loaders\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @compile test-classes\/RegUnregSuperApp.java test-classes\/CustomLoadee3.java test-classes\/CustomLoadee3Child.java\n+ * @run main RegUnregSuperTest reg\n+ *\/\n+\n+public class RegUnregSuperTest {\n+    public static void main(String[] args) throws Exception {\n+        final String variant = args[0];\n+\n+        final String appJar = JarBuilder.build(\n+            \"app\", \"RegUnregSuperApp\", \"DirectClassLoader\", \"CustomLoadee3\", \"CustomLoadee3Child\"\n+        );\n+        OutputAnalyzer out;\n+\n+        final String classlist[] = new String[] {\n+            \"java\/lang\/Object id: 0\",\n+            \"CustomLoadee3 id: 1\",\n+            \"CustomLoadee3 id: 2 super: 0 source: \" + appJar,\n+            \"CustomLoadee3Child id: 3 super: \" + (\"reg\".equals(variant) ? \"1\" : \"2\") + \" source: \" + appJar\n+        };\n+        out = TestCommon.testDump(appJar, classlist, \"-Xlog:cds+class=debug\");\n+        out.shouldContain(\"app   CustomLoadee3\\n\");\n+        out.shouldContain(\"unreg CustomLoadee3\\n\");\n+        if (\"reg\".equals(variant)) {\n+            out.shouldNotContain(\"unreg CustomLoadee3Child\\n\");\n+            out.shouldContain(\"CustomLoadee3Child (id 3) has super-type CustomLoadee3 (id 1) overshadowed by another class with the same name\");\n+        } else {\n+            out.shouldContain(\"unreg CustomLoadee3Child\\n\");\n+            out.shouldNotContain(\"[warning]\");\n+        }\n+\n+        out = TestCommon.exec(appJar, \"-Xlog:class+load\", \"RegUnregSuperApp\", variant);\n+        TestCommon.checkExec(\n+            out,\n+            \"CustomLoadee3Child source: \" + (\"reg\".equals(variant) ? \"file:\" : \"shared objects file\")\n+        );\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/customLoader\/RegUnregSuperTest.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -1,50 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.nio.file.Path;\n-import java.nio.file.FileSystems;\n-import java.net.URL;\n-import java.net.URLClassLoader;\n-\n-\/**\n- * See ..\/ClassFromClasspathTest.java for details.\n- *\/\n-public class ClassFromClasspathApp {\n-    public static void main(String args[]) throws Exception {\n-        Path app = FileSystems.getDefault().getPath(\"app.jar\");\n-        URL[] urls = new URL[] { app.toUri().toURL() };\n-        URLClassLoader cl = new URLClassLoader(urls, \/* parent = *\/ null);\n-\n-        Class<?> cls = cl.loadClass(\"CustomLoadee3Child\");\n-        ClassLoader realCl = cls.getClassLoader();\n-        if (realCl != cl) {\n-            throw new RuntimeException(cls + \" has wrong loader: expected \" + cl + \", got \" + realCl);\n-        }\n-\n-        Class<?> superCls = cls.getSuperclass();\n-        ClassLoader superCl = superCls.getClassLoader();\n-        if (superCl != cl) {\n-            throw new RuntimeException(superCls + \" has wrong loader: expected \" + cl + \", got \" + superCl);\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/customLoader\/test-classes\/ClassFromClasspathApp.java","additions":0,"deletions":50,"binary":false,"changes":50,"status":"deleted"},{"patch":"@@ -0,0 +1,108 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.nio.file.FileSystems;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.util.Set;\n+\n+class DirectClassLoader extends URLClassLoader {\n+    private final Set<String> directlyLoadedNames;\n+\n+    public DirectClassLoader(URL url, String... directlyLoadedNames) {\n+        super(new URL[] { url });\n+        this.directlyLoadedNames = Set.of(directlyLoadedNames);\n+    }\n+\n+    @Override\n+    public Class<?> loadClass(String name) throws ClassNotFoundException {\n+        synchronized (getClassLoadingLock(name)) {\n+            Class<?> c = findLoadedClass(name);\n+            if (c == null) {\n+                if (directlyLoadedNames.contains(name)) {\n+                    c = findClass(name);\n+                } else {\n+                    c = super.loadClass(name);\n+                }\n+            }\n+            return c;\n+        }\n+    }\n+}\n+\n+\/**\n+ * See ..\/RegUnregSuperTest.java for details.\n+ *\/\n+public class RegUnregSuperApp {\n+    private static final URL APP_JAR;\n+    static {\n+        final URL appJar;\n+        try {\n+            appJar = FileSystems.getDefault().getPath(\"app.jar\").toUri().toURL();\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+        APP_JAR = appJar;\n+    }\n+\n+    public static void main(String args[]) throws Exception {\n+        switch (args[0]) {\n+            case \"reg\" -> loadWithRegisteredSuper();\n+            case \"unreg\" -> loadWithUnregisteredSuper();\n+            default -> throw new IllegalArgumentException(\"Unknown variant: \" + args[0]);\n+        }\n+    }\n+\n+    private static void loadWithRegisteredSuper() throws Exception {\n+        \/\/ Load unregistered super\n+        final var unregisteredBaseCl = new DirectClassLoader(APP_JAR, \"CustomLoadee3\");\n+        Class<?> unregisteredBase = unregisteredBaseCl.loadClass(\"CustomLoadee3\");\n+        checkClassLoader(unregisteredBase, unregisteredBaseCl);\n+\n+        \/\/ Load unregistered child with REGISTERED super\n+        final var registeredBaseCl = new DirectClassLoader(APP_JAR, \"CustomLoadee3Child\");\n+        Class<?> unregisteredChild = registeredBaseCl.loadClass(\"CustomLoadee3Child\");\n+        checkClassLoader(unregisteredChild, registeredBaseCl);\n+        checkClassLoader(unregisteredChild.getSuperclass(), ClassLoader.getSystemClassLoader());\n+    }\n+\n+    private static void loadWithUnregisteredSuper() throws Exception {\n+        \/\/ Load registered super\n+        final var systemCl = ClassLoader.getSystemClassLoader();\n+        Class<?> registeredBase = systemCl.loadClass(\"CustomLoadee3\");\n+        checkClassLoader(registeredBase, systemCl);\n+\n+        \/\/ Load unregistered child with UNREGISTERED super\n+        final var unregisteredBaseCl = new DirectClassLoader(APP_JAR, \"CustomLoadee3\", \"CustomLoadee3Child\");\n+        Class<?> unregisteredChild = unregisteredBaseCl.loadClass(\"CustomLoadee3Child\");\n+        checkClassLoader(unregisteredChild, unregisteredBaseCl);\n+        checkClassLoader(unregisteredChild.getSuperclass(), unregisteredBaseCl);\n+    }\n+\n+    private static void checkClassLoader(Class<?> c, ClassLoader cl) {\n+        ClassLoader realCl = c.getClassLoader();\n+        if (realCl != cl) {\n+           throw new RuntimeException(c + \" has wrong loader: expected \" + cl + \", got \" + realCl);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/customLoader\/test-classes\/RegUnregSuperApp.java","additions":108,"deletions":0,"binary":false,"changes":108,"status":"added"}]}