{"files":[{"patch":"@@ -53,0 +53,1 @@\n+import java.awt.Window;\n@@ -259,1 +260,4 @@\n-        ColorModel model = getColorModel(Transparency.OPAQUE);\n+        int transparency = Transparency.OPAQUE;\n+        if (target instanceof Window window && !window.isOpaque())\n+            transparency = Transparency.TRANSLUCENT;\n+        ColorModel model = getColorModel(transparency);\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/java2d\/metal\/MTLGraphicsConfig.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import java.awt.Window;\n@@ -260,1 +261,4 @@\n-        ColorModel model = getColorModel(Transparency.OPAQUE);\n+        int transparency = Transparency.OPAQUE;\n+        if (target instanceof Window window && !window.isOpaque())\n+            transparency = Transparency.TRANSLUCENT;\n+        ColorModel model = getColorModel(transparency);\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/java2d\/opengl\/CGLGraphicsConfig.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import java.awt.Window;\n@@ -403,1 +404,4 @@\n-        ColorModel model = getColorModel(Transparency.OPAQUE);\n+        int transparency = Transparency.OPAQUE;\n+        if (target instanceof Window window && !window.isOpaque())\n+            transparency = Transparency.TRANSLUCENT;\n+        ColorModel model = getColorModel(transparency);\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11GraphicsConfig.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import java.awt.Window;\n@@ -243,1 +244,4 @@\n-        ColorModel model = getColorModel(Transparency.OPAQUE);\n+        int transparency = Transparency.OPAQUE;\n+        if (target instanceof Window window && !window.isOpaque())\n+            transparency = Transparency.TRANSLUCENT;\n+        ColorModel model = getColorModel(transparency);\n","filename":"src\/java.desktop\/unix\/classes\/sun\/java2d\/opengl\/GLXGraphicsConfig.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import java.awt.Window;\n@@ -261,1 +262,4 @@\n-        ColorModel model = getColorModel(Transparency.OPAQUE);\n+        int transparency = Transparency.OPAQUE;\n+        if (target instanceof Window window && !window.isOpaque())\n+            transparency = Transparency.TRANSLUCENT;\n+        ColorModel model = getColorModel(transparency);\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/Win32GraphicsConfig.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,164 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+   @bug 8303904\n+   @summary when \"swing.volatileImageBufferEnabled\" is \"false\" translucent windows repaint as opaque\n+*\/\n+\n+import javax.swing.*;\n+import javax.swing.border.EmptyBorder;\n+import javax.swing.plaf.PanelUI;\n+import java.awt.*;\n+import java.awt.geom.RoundRectangle2D;\n+import java.awt.image.*;\n+import java.util.List;\n+import java.util.Arrays;\n+import java.util.Hashtable;\n+import java.util.Objects;\n+\n+public class bug8303904 extends JDialog {\n+    static bug8303904 dialog;\n+    static boolean testCompleted = false;\n+    static boolean testFailed = false;\n+\n+    public static void main(String[] args) {\n+        System.setProperty(\"swing.volatileImageBufferEnabled\", \"false\");\n+\n+        SwingUtilities.invokeLater(() -> {\n+            JFrame whiteBackgroundFrame = new JFrame();\n+            whiteBackgroundFrame.setUndecorated(true);\n+            whiteBackgroundFrame.getContentPane().setBackground(Color.white);\n+\n+            dialog = new bug8303904();\n+            dialog.pack();\n+            dialog.setLocationRelativeTo(null);\n+\n+            whiteBackgroundFrame.setBounds(dialog.getBounds());\n+            whiteBackgroundFrame.setVisible(true);\n+\n+            dialog.setVisible(true);\n+            dialog.toFront();\n+        });\n+\n+        while (dialog == null || !dialog.isShowing()) {\n+            try {\n+                Thread.sleep(5);\n+            } catch (InterruptedException e) {}\n+        }\n+\n+        SwingUtilities.invokeLater(new Runnable() {\n+            int ctr = 0;\n+            @Override\n+            public void run() {\n+                if (ctr++ < 10_000) {\n+                    SwingUtilities.invokeLater(this);\n+                    return;\n+                }\n+\n+                try {\n+                    \/\/ these methods test the same thing in different ways. The second one (testPixelColor)\n+                    \/\/ is the more important integration-type test. If the first test passes\n+                    \/\/ and the second test fails: that may indicate we're not waiting long enough\n+                    \/\/ during setup and the pixels just aren't ready for the Robot to grab yet.\n+\n+                    testImageTransparency();\n+                    testPixelColor();\n+                } finally {\n+                    testCompleted = true;\n+                }\n+            }\n+\n+            \/**\n+             * This tests the transparency of {@link Component#createImage(int, int)}\n+             *\/\n+            private void testImageTransparency() {\n+                System.out.println(\"dialog.getGraphicsConfiguration() = \" + dialog.getGraphicsConfiguration());\n+                System.out.println(\"dialog.getBackground().getAlpha() = \" + dialog.getBackground().getAlpha());\n+                System.out.println(\"dialog.isOpaque = \" + dialog.isOpaque());\n+                BufferedImage img = (BufferedImage) dialog.createImage(300, 300);\n+                System.out.println(\"dialog.createImage produced \" + img);\n+                if (img.getTransparency() != Transparency.TRANSLUCENT) {\n+                    System.err.println(\"dialog.createImage(..) should return a translucent image\");\n+                    testFailed = true;\n+                }\n+            }\n+\n+            \/**\n+             * This uses a Robot to grab the actual pixel color.\n+             *\/\n+            private void testPixelColor() {\n+                Robot robot = null;\n+                try {\n+                    robot = new Robot();\n+                    Point p = dialog.getContentPane().getLocationOnScreen();\n+                    Color c = robot.getPixelColor(p.x + 7, p.y + 7);\n+                    if (c.getRed() < 200 || c.getGreen() < 200 || c.getBlue() < 200) {\n+                        System.err.println(\"The top-left corner of the dialog should be near white, but it was \" + c);\n+                        testFailed = true;\n+                    }\n+                } catch (AWTException e) {\n+                    e.printStackTrace();\n+                    testFailed = true;\n+                }\n+            }\n+        });\n+\n+\n+        while (!testCompleted) {\n+            try {\n+                Thread.sleep(50);\n+            } catch (InterruptedException e) {}\n+        }\n+\n+        if (testFailed)\n+            System.exit(1);\n+    }\n+\n+    JTextPane instructions = new JTextPane();\n+\n+    public bug8303904() {\n+        instructions.setText(\"Instructions\\n\\nLook at this window. This test passes if the window does NOT have a black border.\");\n+        instructions.setBorder(new EmptyBorder(10,10,10,10));\n+        instructions.setOpaque(false);\n+        instructions.setEditable(false);\n+\n+        setUndecorated(true);\n+        JPanel p = new JPanel();\n+        p.setOpaque(false);\n+        p.setBorder(new EmptyBorder(10,10,10,10));\n+        p.setUI(new PanelUI() {\n+            @Override\n+            public void paint(Graphics g, JComponent c) {\n+                Graphics2D g2 = (Graphics2D) g;\n+                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n+                g2.setColor(new Color(220, 180, 0, 200));\n+                g2.fill(new RoundRectangle2D.Double(5, 5,c.getWidth()-10,c.getHeight()-10,20,20));\n+            }\n+        });\n+        p.setLayout(new BorderLayout());\n+        p.add(instructions, BorderLayout.NORTH);\n+        getContentPane().add(p);\n+        setBackground(new Color(0,0,0,0));\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/javax\/swing\/RepaintManager\/8303904\/bug8303904.java","additions":164,"deletions":0,"binary":false,"changes":164,"status":"added"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+   @bug 8303904\n+   @summary this tests bug8303904 with the OpenGL pipeline\n+*\/\n+\n+public class bug8303904_OGL {\n+\n+    public static void main(String[] args) {\n+        \/\/ a capital \"T\" in \"True\" should add \"OpenGL pipeline enabled [..]\" log output\n+        System.setProperty(\"sun.java2d.opengl\", \"True\");\n+        bug8303904.main(args);\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/javax\/swing\/RepaintManager\/8303904\/bug8303904_OGL.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"}]}