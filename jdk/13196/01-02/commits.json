[{"commit":{"message":"8303904: comment cleanup"},"files":[{"filename":"test\/jdk\/javax\/swing\/RepaintManager\/8303904\/TestVolatileBufferOpacityAndTransform.java"}],"sha":"ee0d8b1e61cf53548d9e3223e3a2afbf917d9ee3"},{"commit":{"message":"8303904: designing around imagined edge cases\n\nI don't know if these will ever come up in the real world, but since this is critical infrastructure I want to be careful. (A Swing app may become unusable if this code fails.)\n\nConcern A:\nIn the event our AffineTransform is a rotation or a flip:\nNow we'll use the c.createImage(virtualWidth, virtualHeight), which means we fall back to the code we've been using for over a decade.\n\nConcern B:\nIn the event our AffineTransform scales to zero, we'll at least make the image 1x1."},"files":[{"filename":"src\/java.desktop\/share\/classes\/javax\/swing\/RepaintManager.java"}],"sha":"a8b33f599296eb428236b61cea1f1667eacbe40c"},{"commit":{"message":"8303904: minor cleanup"},"files":[{"filename":"src\/java.desktop\/share\/classes\/javax\/swing\/BackingStoreMultiResolutionImage.java"}],"sha":"7dd4a4ec04de105319dae88c166de79e7389d766"},{"commit":{"message":"8303904: minor cleanup"},"files":[{"filename":"src\/java.desktop\/share\/classes\/javax\/swing\/BackingStoreMultiResolutionImage.java"},{"filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JViewport.java"}],"sha":"25cd03af77989d0ef3ae531bee620a681e72d4f1"},{"commit":{"message":"8303904: minor cleanup\n\nThis makes this method ALWAYS return a BackingStoreMultiResolutionImage, even if the scaled size is the same as the virtual size. (Just because making this method return a BufferedImage OR a BackingStoreMultiResolutionImage seems like an unnecessary level of abstraction; and that could turn into a potential point of confusion for future devs.)"},"files":[{"filename":"src\/java.desktop\/share\/classes\/javax\/swing\/RepaintManager.java"}],"sha":"83640b84834e4242d7ef48541aaac2eda1a9b350"},{"commit":{"message":"8303904: use BackingStoreMultiResolutionImage\n\nIt's functionally the same thing; this is just reusing code (and it avoids the hacky fake image involving getScaledInstance)."},"files":[{"filename":"src\/java.desktop\/share\/classes\/javax\/swing\/RepaintManager.java"}],"sha":"b70735f91344da28a94af01c4c9d84d71d7aa0a7"},{"commit":{"message":"Revert \"8303904: support rotated GraphicsConfiguration\"\n\nThis reverts commit 55b1a708cdc8608824d04974ad96b62fd50149d3."},"files":[{"filename":"src\/java.desktop\/share\/classes\/javax\/swing\/RepaintManager.java"}],"sha":"a66f3d92f86226c0876ec20a60f6c14440f8d007"},{"commit":{"message":"Revert \"8303904: fixing AffineTransform fields\"\n\nThis reverts commit 2d32aaf0e670a9967877e5a4bf4c0ec1079bb070."},"files":[{"filename":"src\/java.desktop\/share\/classes\/javax\/swing\/RepaintManager.java"}],"sha":"c8db27964ad64cd93a72f8c9194dc95bda3341fc"},{"commit":{"message":"8303904: refactor BackingStoreMultiResolutionImage\n\nConvert this private a private internal class to its own package private class"},"files":[{"filename":"src\/java.desktop\/share\/classes\/javax\/swing\/BackingStoreMultiResolutionImage.java"},{"filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JViewport.java"}],"sha":"3f27cc5861b3f5abc303fb4476dc38f7cab0b13d"},{"commit":{"message":"8303904: code cleanup\n\nRemoving old changes that don't apply, & updating copyright year."},"files":[{"filename":"src\/java.desktop\/macosx\/classes\/sun\/java2d\/metal\/MTLGraphicsConfig.java"},{"filename":"src\/java.desktop\/macosx\/classes\/sun\/java2d\/opengl\/CGLGraphicsConfig.java"},{"filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11GraphicsConfig.java"},{"filename":"src\/java.desktop\/unix\/classes\/sun\/java2d\/opengl\/GLXGraphicsConfig.java"},{"filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/Win32GraphicsConfig.java"},{"filename":"test\/jdk\/javax\/swing\/RepaintManager\/8303904\/TestVolatileBufferOpacityAndTransform_OGL.java"}],"sha":"2961db08b6a3bd52fb4019a28811569e0798a6d5"},{"commit":{"message":"8303904: rewrite tests as automated\n\nAlso now they iterate over more configurations: they'll test every available monitor with an opaque and translucent window. I tested using my laptop monitor (200%), an external monitor (200%), and another external monitor (100%)"},"files":[{"filename":"test\/jdk\/javax\/swing\/RepaintManager\/8303904\/TestVolatileBufferOpacityAndTransform.java"},{"filename":"test\/jdk\/javax\/swing\/RepaintManager\/8303904\/TestVolatileBufferOpacityAndTransform_OGL.java"},{"filename":"test\/jdk\/javax\/swing\/RepaintManager\/8303904\/bug8303904.java"},{"filename":"test\/jdk\/javax\/swing\/RepaintManager\/8303904\/bug8303904_OGL.java"}],"sha":"312d4da58cea38672de724f7050c8d63c3074d4f"},{"commit":{"message":"8303904: fixing AffineTransform fields"},"files":[{"filename":"src\/java.desktop\/share\/classes\/javax\/swing\/RepaintManager.java"}],"sha":"2d32aaf0e670a9967877e5a4bf4c0ec1079bb070"},{"commit":{"message":"8303904: support rotated GraphicsConfiguration\n\nIn my setup: monitors only vary in resolution (scaleX, scaleY). But I've seen some old OpenJDK tickets that (I think?) allude to GraphicsConfigurations with AffineTransforms that include rotation.\n\nThis should support rotation as long as it comes in increments of 90 degrees."},"files":[{"filename":"src\/java.desktop\/share\/classes\/javax\/swing\/RepaintManager.java"}],"sha":"55b1a708cdc8608824d04974ad96b62fd50149d3"},{"commit":{"message":"8303904: move MultiResolutionImage logic to RepaintManager\n\nThis is in response to:\nhttps:\/\/github.com\/openjdk\/jdk\/pull\/23430\/files#r2089555453"},"files":[{"filename":"src\/java.desktop\/share\/classes\/javax\/swing\/RepaintManager.java"}],"sha":"66d951f932cee600f0706ead7040048889848f5d"},{"commit":{"message":"Merge branch 'master' into JDK-8303904"},"files":[{"filename":"src\/java.desktop\/macosx\/classes\/sun\/java2d\/metal\/MTLGraphicsConfig.java"},{"filename":"src\/java.desktop\/macosx\/classes\/sun\/java2d\/opengl\/CGLGraphicsConfig.java"},{"filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JViewport.java"},{"filename":"src\/java.desktop\/share\/classes\/javax\/swing\/RepaintManager.java"},{"filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11GraphicsConfig.java"},{"filename":"src\/java.desktop\/unix\/classes\/sun\/java2d\/opengl\/GLXGraphicsConfig.java"},{"filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/Win32GraphicsConfig.java"}],"sha":"23afaae5b7cd84bab5bcb62030b10670ece3b73f"},{"commit":{"message":"8303904: avoid System.exit(1)\n\nmrserb recommended against this in a separate PR\n\nhttps:\/\/github.com\/openjdk\/jdk\/pull\/13408#discussion_r1162182212"},"files":[{"filename":"test\/jdk\/javax\/swing\/RepaintManager\/8303904\/bug8303904.java"}],"sha":"ffc8ff44dea69b673a9322ff13f10af8bf62aac1"},{"commit":{"message":"8303904: fixing compiler `cannot find symbol` errors"},"files":[{"filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11GraphicsConfig.java"},{"filename":"src\/java.desktop\/unix\/classes\/sun\/java2d\/opengl\/GLXGraphicsConfig.java"},{"filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/Win32GraphicsConfig.java"}],"sha":"4284d4cdd50dbd79fdefe8fe10a265d03f6cb51c"},{"commit":{"message":"8303904: cleaning up comment"},"files":[{"filename":"test\/jdk\/javax\/swing\/RepaintManager\/8303904\/bug8303904.java"}],"sha":"c17fab5e21b49bc4ca7832d29ee78d2e4c876eb6"},{"commit":{"message":"8303904: apply same solution to other GraphicsConfigurations\n\nI don't have my setup configured to test these, but I confirmed they all appear to support translucency in their getColorModel(int) method."},"files":[{"filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11GraphicsConfig.java"},{"filename":"src\/java.desktop\/unix\/classes\/sun\/java2d\/opengl\/GLXGraphicsConfig.java"},{"filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/Win32GraphicsConfig.java"}],"sha":"581594afc8567ee53a3afeafbab19fa5af1c1be3"},{"commit":{"message":"8303904: resolve failing bug8308904_OGL test on Mac\n\nThis is the same solution previously applied to the MTLGraphicsConfig"},"files":[{"filename":"src\/java.desktop\/macosx\/classes\/sun\/java2d\/opengl\/CGLGraphicsConfig.java"}],"sha":"5b0a52ba457a97c0ed9d1a6b8bf0988eb52ecd7f"},{"commit":{"message":"8303904: adding failing unit test for OpenGL on Mac\n\nI started to notice some intermittent failures in the Robot test, so now I'm having it wait a few beats on the event dispatch thread before grabbing the pixel color.\n\nAlso I'm adding a more abstract check-the-translucency-of-the-BufferedImage output. If this `testImageTransparency` passes and `testPixelColor` fails: that's a red flag that maybe the screen isn't ready when the Robot grabs the pixel."},"files":[{"filename":"test\/jdk\/javax\/swing\/RepaintManager\/8303904\/bug8303904.java"},{"filename":"test\/jdk\/javax\/swing\/RepaintManager\/8303904\/bug8303904_OGL.java"}],"sha":"90947b23d0dce467acd200d528f7cbf407ebe8f0"},{"commit":{"message":"8303904: updating instruction text to reflect narrowed focus of this branch"},"files":[{"filename":"test\/jdk\/javax\/swing\/RepaintManager\/8303904\/bug8303904.java"}],"sha":"65f7bd51ef46f8e30ef31430b9cb3edc6ff9176a"},{"commit":{"message":"8303904: rolling back prev createAcceleratedImage commit\n\nI predict once I start a code review about 8308904 that if we want to address the resolution of createAcceleratedImage: that can be a separate ticket. This change feels much more invasive to me; I wouldn't be surprised if some existing code out there is already casting the return value of createAcceleratedImage(..) as a BufferedImage."},"files":[{"filename":"src\/java.desktop\/macosx\/classes\/sun\/java2d\/metal\/MTLGraphicsConfig.java"}],"sha":"4e41d1b4b4df663e74f459694251216543be09c1"},{"commit":{"message":"8303904: change createAcceleratedImage to return a potentially high-res image\n\nThis is part of the original write-up, but it might deserve to be split up into its own ticket."},"files":[{"filename":"src\/java.desktop\/macosx\/classes\/sun\/java2d\/metal\/MTLGraphicsConfig.java"}],"sha":"90735b7c01c66268776998c1b6aedc3250427002"},{"commit":{"message":"8303904: use Transparency.TRANSLUCENT for non-opaque windows"},"files":[{"filename":"src\/java.desktop\/macosx\/classes\/sun\/java2d\/metal\/MTLGraphicsConfig.java"}],"sha":"dfea46659baf8fb77fb1be6b0c79380dd96c6be5"},{"commit":{"message":"8303904: Add failing unit test"},"files":[{"filename":"test\/jdk\/javax\/swing\/RepaintManager\/8303904\/bug8303904.java"}],"sha":"b1ccd88794c4160417a5c167f9d1b8f55cb9b0fb"},{"commit":{"message":"Merge pull request #4 from openjdk\/master\n\nUpdating mickleness\/jdk from openjdk\/jdk"},"files":[{"filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JViewport.java"},{"filename":"src\/java.desktop\/share\/classes\/javax\/swing\/RepaintManager.java"},{"filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11GraphicsConfig.java"},{"filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/Win32GraphicsConfig.java"}],"sha":"69481fc38f4021224ec4a8d1a75b275a89dfa832"},{"commit":{"message":"Merge pull request #3 from openjdk\/master\n\nMerge from openjdk\/jdk"},"files":[],"sha":"57346a421446d51192ceada277626ba1ae92d8d7"},{"commit":{"message":"Merge pull request #2 from openjdk\/master\n\nMerge openjdk\/jdk"},"files":[],"sha":"333c87c2107262532815db6978c5e8f59c5a967e"},{"commit":{"message":"Merge pull request #1 from openjdk\/master\n\nMerge openjdk\/jdk into mickleness\/jdk"},"files":[{"filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JViewport.java"},{"filename":"src\/java.desktop\/share\/classes\/javax\/swing\/RepaintManager.java"},{"filename":"src\/java.desktop\/unix\/classes\/sun\/java2d\/opengl\/GLXGraphicsConfig.java"}],"sha":"5dbf0a67ad41a53e03f02c41b1b6364fc3a633ee"}]