{"files":[{"patch":"@@ -28,1 +28,3 @@\n- * @summary Verifies if JProgressBar border is painted even though border\n+ * @library ..\/regtesthelpers\n+ * @build Util\n+ * @summary Verifies JProgressBar border is not painted when border\n@@ -33,6 +35,0 @@\n-import java.awt.Color;\n-import java.awt.FlowLayout;\n-import java.awt.Point;\n-import java.awt.Rectangle;\n-import java.awt.Robot;\n-import java.awt.image.BufferedImage;\n@@ -40,0 +36,2 @@\n+import java.awt.Graphics;\n+import java.awt.image.BufferedImage;\n@@ -41,2 +39,1 @@\n-import javax.swing.JFrame;\n-import javax.swing.JPanel;\n+import javax.swing.JComponent;\n@@ -48,1 +45,1 @@\n-public class TestProgressBarBorder {\n+import static java.awt.image.BufferedImage.TYPE_INT_RGB;\n@@ -50,1 +47,1 @@\n-    private static JFrame frame;\n+public class TestProgressBarBorder {\n@@ -52,2 +49,3 @@\n-    private static volatile Point pt;\n-    private static volatile boolean passed;\n+    private static volatile boolean isImgSame;\n+    private static BufferedImage borderPaintedImg;\n+    private static BufferedImage borderNotPaintedImg;\n@@ -58,4 +56,1 @@\n-            if (laf.getName().contains(\"Nimbus\") || laf.getName().contains(\"GTK\")) {\n-                System.out.println(\"Testing LAF: \" + laf.getName());\n-                SwingUtilities.invokeAndWait(() -> setLookAndFeel(laf));\n-            } else {\n+            if (!laf.getName().contains(\"Nimbus\") && !laf.getName().contains(\"GTK\")) {\n@@ -64,44 +59,16 @@\n-            Robot robot = new Robot();\n-            robot.setAutoDelay(100);\n-            try {\n-                SwingUtilities.invokeAndWait(() -> {\n-                    createAndShowUI();\n-                });\n-\n-                robot.waitForIdle();\n-                robot.delay(1000);\n-\n-                SwingUtilities.invokeAndWait(() -> {\n-                    pt = progressBar.getLocationOnScreen();\n-                });\n-\n-                BufferedImage borderPaintedImg =\n-                        robot.createScreenCapture(new Rectangle(pt.x, pt.y,\n-                                progressBar.getWidth(), progressBar.getHeight()));\n-\n-                progressBar.setBorderPainted(false);\n-                robot.waitForIdle();\n-                robot.delay(500);\n-\n-                BufferedImage borderNotPaintedImg =\n-                        robot.createScreenCapture(new Rectangle(pt.x, pt.y,\n-                                progressBar.getWidth(), progressBar.getHeight()));\n-\n-                robot.delay(500);\n-\n-                SwingUtilities.invokeAndWait(() -> {\n-                    passed = compareImage(borderPaintedImg, borderNotPaintedImg);\n-                });\n-\n-                if (!passed) {\n-                    ImageIO.write(borderPaintedImg, \"png\", new File(\"borderPaintedImg.png\"));\n-                    ImageIO.write(borderNotPaintedImg, \"png\", new File(\"borderNotPaintedImg.png\"));\n-                    throw new RuntimeException(\"JProgressBar border is painted although \" +\n-                            \"border painting is set to false\");\n-                }\n-            } finally {\n-                SwingUtilities.invokeAndWait(() -> {\n-                    if (frame != null) {\n-                        frame.dispose();\n-                    }\n-                });\n+            System.out.println(\"Testing LAF: \" + laf.getName());\n+            SwingUtilities.invokeAndWait(() -> {\n+                setLookAndFeel(laf);\n+                createAndShowUI();\n+            });\n+\n+            borderPaintedImg = paintToImage(progressBar);\n+            progressBar.setBorderPainted(false);\n+            borderNotPaintedImg = paintToImage(progressBar);\n+            isImgSame = Util.compareBufferedImages(borderPaintedImg, borderNotPaintedImg);\n+\n+            if (isImgSame) {\n+                ImageIO.write(borderPaintedImg, \"png\", new File(\"borderPaintedImg.png\"));\n+                ImageIO.write(borderNotPaintedImg, \"png\", new File(\"borderNotPaintedImg.png\"));\n+                throw new RuntimeException(\"JProgressBar border is painted when border\\n\" +\n+                        \" painting is set to false\");\n@@ -124,3 +91,2 @@\n-        frame = new JFrame(\"Test JProgressBar Border\");\n-        JPanel p = new JPanel(new FlowLayout());\n-        progressBar  = new JProgressBar();\n+        progressBar = new JProgressBar();\n+        progressBar.setSize(100,50);\n@@ -131,6 +97,0 @@\n-        p.add(progressBar);\n-        frame.add(p);\n-        frame.setSize(200, 100);\n-        frame.setLocationRelativeTo(null);\n-        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n-        frame.setVisible(true);\n@@ -139,20 +99,7 @@\n-    \/*\n-    * Compare JProgressBar border painted and border not painted image and\n-    * if both images width and height are equal but pixel's RGB values are\n-    * not equal, method returns true; false otherwise.\n-    *\/\n-\n-    private static boolean compareImage(BufferedImage img1, BufferedImage img2) {\n-        if (img1.getWidth() == img2.getWidth()\n-                && img1.getHeight() == img2.getHeight()) {\n-            for (int x = 0; x < img1.getWidth(); ++x) {\n-                for (int y = 0; y < img1.getHeight(); ++y) {\n-                    if (img1.getRGB(x, y) != img2.getRGB(x, y)) {\n-                        return true;\n-                    }\n-                }\n-            }\n-            return false;\n-        } else {\n-            return false;\n-        }\n+    private static BufferedImage paintToImage(JComponent content) {\n+        BufferedImage im = new BufferedImage(content.getWidth(), content.getHeight(),\n+                TYPE_INT_RGB);\n+        Graphics g = im.getGraphics();\n+        content.paint(g);\n+        g.dispose();\n+        return im;\n","filename":"test\/jdk\/javax\/swing\/JProgressBar\/TestProgressBarBorder.java","additions":37,"deletions":90,"binary":false,"changes":127,"status":"modified"}]}