{"files":[{"patch":"@@ -218,3 +218,6 @@\n-        context.getPainter().paintProgressBarBackground(context,\n-                          g, 0, 0, c.getWidth(), c.getHeight(),\n-                          progressBar.getOrientation());\n+\n+        if (((JProgressBar) c).isBorderPainted()) {\n+            context.getPainter().paintProgressBarBackground(context,\n+                    g, 0, 0, c.getWidth(), c.getHeight(),\n+                    progressBar.getOrientation());\n+        }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/synth\/SynthProgressBarUI.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,107 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8224261\n+ * @key headful\n+ * @library ..\/regtesthelpers\n+ * @build Util\n+ * @summary Verifies JProgressBar border is not painted when border\n+ *          painting is set to false\n+ * @run main TestProgressBarBorder\n+ *\/\n+\n+import java.io.File;\n+import java.awt.Graphics;\n+import java.awt.image.BufferedImage;\n+import javax.imageio.ImageIO;\n+import javax.swing.JComponent;\n+import javax.swing.JProgressBar;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UnsupportedLookAndFeelException;\n+\n+import static java.awt.image.BufferedImage.TYPE_INT_RGB;\n+\n+public class TestProgressBarBorder {\n+    private static JProgressBar progressBar;\n+    private static volatile boolean isImgEqual;\n+    private static BufferedImage borderPaintedImg;\n+    private static BufferedImage borderNotPaintedImg;\n+\n+    public static void main(String[] args) throws Exception {\n+        for (UIManager.LookAndFeelInfo laf :\n+                UIManager.getInstalledLookAndFeels()) {\n+            if (!laf.getName().contains(\"Nimbus\") && !laf.getName().contains(\"GTK\")) {\n+                continue;\n+            }\n+            System.out.println(\"Testing LAF: \" + laf.getName());\n+            SwingUtilities.invokeAndWait(() -> {\n+                setLookAndFeel(laf);\n+                createAndShowUI();\n+            });\n+\n+            borderPaintedImg = paintToImage(progressBar);\n+            progressBar.setBorderPainted(false);\n+            borderNotPaintedImg = paintToImage(progressBar);\n+            isImgEqual = Util.compareBufferedImages(borderPaintedImg, borderNotPaintedImg);\n+\n+            if (isImgEqual) {\n+                ImageIO.write(borderPaintedImg, \"png\", new File(\"borderPaintedImg.png\"));\n+                ImageIO.write(borderNotPaintedImg, \"png\", new File(\"borderNotPaintedImg.png\"));\n+                throw new RuntimeException(\"JProgressBar border is painted when border\\n\" +\n+                        \" painting is set to false\");\n+            }\n+        }\n+    }\n+\n+    private static void setLookAndFeel(UIManager.LookAndFeelInfo laf) {\n+        try {\n+            UIManager.setLookAndFeel(laf.getClassName());\n+        } catch (UnsupportedLookAndFeelException ignored) {\n+            System.out.println(\"Unsupported LAF: \" + laf.getClassName());\n+        } catch (ClassNotFoundException | InstantiationException\n+                 | IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private static void createAndShowUI() {\n+        progressBar = new JProgressBar();\n+        progressBar.setSize(100, 50);\n+        \/\/ set initial value\n+        progressBar.setValue(0);\n+        progressBar.setBorderPainted(true);\n+        progressBar.setStringPainted(true);\n+    }\n+\n+    private static BufferedImage paintToImage(JComponent content) {\n+        BufferedImage im = new BufferedImage(content.getWidth(), content.getHeight(),\n+                TYPE_INT_RGB);\n+        Graphics g = im.getGraphics();\n+        content.paint(g);\n+        g.dispose();\n+        return im;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JProgressBar\/TestProgressBarBorder.java","additions":107,"deletions":0,"binary":false,"changes":107,"status":"added"}]}