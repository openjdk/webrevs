{"files":[{"patch":"@@ -120,1 +120,0 @@\n-runtime\/Thread\/TestAlwaysPreTouchStacks.java 8335167 macosx-aarch64\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n- * @test id=preTouch\n+ * @test id=preTouchTest\n@@ -48,10 +48,0 @@\n-\/*\n- * @test id=noPreTouch\n- * @summary Test that only touched committed memory is reported as thread stack usage.\n- * @requires os.family != \"aix\"\n- * @library \/test\/lib\n- * @modules java.base\/jdk.internal.misc\n- *          java.management\n- * @run driver TestAlwaysPreTouchStacks noPreTouch\n- *\/\n-\n@@ -61,1 +51,1 @@\n-    final static int MB = 1024*1024;\n+    final static int MB = 1024 * 1024;\n@@ -85,0 +75,70 @@\n+    private static class ReservedCommitted {\n+     public long reserved, committed;\n+     public ReservedCommitted(long r, long c) {\n+      reserved = r;\n+      committed = c;\n+     }\n+    }\n+\n+    private static ReservedCommitted runPreTouchTest(boolean preTouch) throws Exception {\n+      long reserved = 0L, committed = 0L;\n+      ArrayList<String> vmArgs = new ArrayList<>();\n+      Collections.addAll(vmArgs,\n+              \"-XX:+UnlockDiagnosticVMOptions\",\n+              \"-Xmx100M\",\n+              \"-XX:NativeMemoryTracking=summary\", \"-XX:+PrintNMTStatistics\");\n+      if (preTouch){\n+          vmArgs.add(\"-XX:+AlwaysPreTouchStacks\");\n+      }\n+      if (System.getProperty(\"os.name\").contains(\"Linux\")) {\n+          vmArgs.add(\"-XX:-UseMadvPopulateWrite\");\n+      }\n+      Collections.addAll(vmArgs, \"TestAlwaysPreTouchStacks\", \"test\");\n+      ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(vmArgs);\n+      OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+\n+      output.shouldHaveExitValue(0);\n+\n+      for (int i = 0; i < numThreads; i++) {\n+          output.shouldContain(\"Alive: \" + i);\n+      }\n+\n+      \/\/ If using -XX:+AlwaysPreTouchStacks, we want to see, in the final NMT printout,\n+      \/\/ a committed thread stack size very close to reserved stack size. Like this:\n+      \/\/ -                    Thread (reserved=10332400KB, committed=10284360KB)\n+      \/\/                      (thread #10021)\n+      \/\/                      (stack: reserved=10301560KB, committed=10253520KB)   <<<<\n+      \/\/\n+      \/\/ ... without -XX:+AlwaysPreTouchStacks, the committed\/reserved ratio for thread stacks should be\n+      \/\/ a lot lower, e.g.:\n+      \/\/ -                    Thread (reserved=10332400KB, committed=331828KB)\n+      \/\/                      (thread #10021)\n+      \/\/                      (stack: reserved=10301560KB, committed=300988KB)  <<<\n+\n+      output.shouldMatch(\"- *Thread.*reserved.*committed\");\n+      output.reportDiagnosticSummary();\n+      Pattern pat = Pattern.compile(\".*stack: reserved=(\\\\d+), committed=(\\\\d+).*\");\n+      boolean foundLine = false;\n+      for (String line : output.asLines()) {\n+        Matcher m = pat.matcher(line);\n+        if (m.matches()) {\n+          reserved = Long.parseLong(m.group(1));\n+          committed = Long.parseLong(m.group(2));\n+          System.out.println(\">>>>> \" + line + \": \" + reserved + \" - \" + committed);\n+          \/\/ Added sanity tests: we expect our test threads to be still alive when NMT prints its final\n+          \/\/ report, so their stacks should dominate the NMT-reported total stack size.\n+          long max_reserved = memoryCeilingMB * 3 * MB;\n+          long min_reserved = memoryCeilingMB * MB;\n+          if (reserved >= max_reserved || reserved < min_reserved) {\n+              throw new RuntimeException(\"Total reserved stack sizes outside of our expectations (\" + reserved +\n+                                          \", expected \" + min_reserved + \"..\" + max_reserved + \")\");\n+          }\n+          foundLine = true;\n+          break;\n+        }\n+      }\n+      if (!foundLine) {\n+          throw new RuntimeException(\"Did not find expected NMT output\");\n+      }\n+      return new ReservedCommitted(reserved, committed);\n+    }\n@@ -106,77 +166,15 @@\n-            boolean preTouch;\n-            if (args.length == 1 && args[0].equals(\"noPreTouch\")){\n-                preTouch = false;\n-            } else if (args.length == 1 && args[0].equals(\"preTouch\")){\n-                preTouch = true;\n-            } else {\n-                throw new RuntimeException(\"Invalid test input. Must be 'preTouch' or 'noPreTouch'.\");\n-            }\n-            ArrayList<String> vmArgs = new ArrayList<>();\n-            Collections.addAll(vmArgs,\n-                    \"-XX:+UnlockDiagnosticVMOptions\",\n-                    \"-Xmx100M\",\n-                    \"-XX:NativeMemoryTracking=summary\", \"-XX:+PrintNMTStatistics\");\n-            if (preTouch){\n-                vmArgs.add(\"-XX:+AlwaysPreTouchStacks\");\n-            }\n-            if (System.getProperty(\"os.name\").contains(\"Linux\")) {\n-                vmArgs.add(\"-XX:-UseMadvPopulateWrite\");\n-            }\n-            Collections.addAll(vmArgs, \"TestAlwaysPreTouchStacks\", \"test\");\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(vmArgs);\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n-            output.reportDiagnosticSummary();\n-\n-            output.shouldHaveExitValue(0);\n-\n-            for (int i = 0; i < numThreads; i++) {\n-                output.shouldContain(\"Alive: \" + i);\n-            }\n-\n-            \/\/ If using -XX:+AlwaysPreTouchStacks, we want to see, in the final NMT printout,\n-            \/\/ a committed thread stack size very close to reserved stack size. Like this:\n-            \/\/ -                    Thread (reserved=10332400KB, committed=10284360KB)\n-            \/\/                      (thread #10021)\n-            \/\/                      (stack: reserved=10301560KB, committed=10253520KB)   <<<<\n-            \/\/\n-            \/\/ ... without -XX:+AlwaysPreTouchStacks, the committed\/reserved ratio for thread stacks should be\n-            \/\/ a lot lower, e.g.:\n-            \/\/ -                    Thread (reserved=10332400KB, committed=331828KB)\n-            \/\/                      (thread #10021)\n-            \/\/                      (stack: reserved=10301560KB, committed=300988KB)  <<<\n-\n-            output.shouldMatch(\"- *Thread.*reserved.*committed\");\n-            Pattern pat = Pattern.compile(\".*stack: reserved=(\\\\d+), committed=(\\\\d+).*\");\n-            boolean foundLine = false;\n-            for (String line : output.asLines()) {\n-                Matcher m = pat.matcher(line);\n-                if (m.matches()) {\n-                    long reserved = Long.parseLong(m.group(1));\n-                    long committed = Long.parseLong(m.group(2));\n-                    System.out.println(\">>>>> \" + line + \": \" + reserved + \" - \" + committed);\n-                    \/\/ This is a bit fuzzy: even with PreTouch we don't commit the full range of what NMT counts\n-                    \/\/ as thread stack. But without pre-touching, the thread stacks would be committed to about 1\/5th\n-                    \/\/ of their reserved size. Requiring them to be committed for over 3\/4th shows that pretouch is\n-                    \/\/ really working.\n-                    if (preTouch && (double)committed < ((double)reserved * 0.75)) {\n-                        throw new RuntimeException(\"Expected a higher ratio between stack committed and reserved.\");\n-                    } else if (!preTouch && (double)committed > ((double)reserved * 0.50)){\n-                        throw new RuntimeException(\"Expected a lower ratio between stack committed and reserved.\");\n-                    }\n-                    \/\/ Added sanity tests: we expect our test threads to be still alive when NMT prints its final\n-                    \/\/ report, so their stacks should dominate the NMT-reported total stack size.\n-                    long max_reserved = memoryCeilingMB * 3 * MB;\n-                    long min_reserved = memoryCeilingMB * MB;\n-                    if (reserved >= max_reserved || reserved < min_reserved) {\n-                        throw new RuntimeException(\"Total reserved stack sizes outside of our expectations (\" + reserved +\n-                                                   \", expected \" + min_reserved + \"..\" + max_reserved + \")\");\n-                    }\n-                    foundLine = true;\n-                    break;\n-                }\n-            }\n-            if (!foundLine) {\n-                throw new RuntimeException(\"Did not find expected NMT output\");\n-            }\n-        }\n-\n+          ReservedCommitted pretouch_result = runPreTouchTest(true);\n+          ReservedCommitted no_pretouch_result = runPreTouchTest(false);\n+          if (pretouch_result.reserved == 0 || no_pretouch_result.reserved == 0) {\n+            throw new RuntimeException(\"Could not run with PreTouch flag.\");\n+          }\n+          double ratio_with = ((double)pretouch_result.committed) \/ pretouch_result.reserved;\n+          double ratio_without = ((double)no_pretouch_result.committed) \/ no_pretouch_result.reserved;\n+          System.out.println(\"ratio with PreTouch: \" + ratio_with + \" w\/out: \" + ratio_without);\n+          if (ratio_without > 0.50) {\n+            throw new RuntimeException(\"Expected a lower ratio between stack committed and reserved.\");\n+          }\n+          if (ratio_with < ratio_without) {\n+            throw new RuntimeException(\"Expected a higher ratio between stack committed and reserved.\");\n+          }\n+      }\n","filename":"test\/hotspot\/jtreg\/runtime\/Thread\/TestAlwaysPreTouchStacks.java","additions":87,"deletions":89,"binary":false,"changes":176,"status":"modified"}]}