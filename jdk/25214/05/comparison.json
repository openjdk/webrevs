{"files":[{"patch":"@@ -2447,1 +2447,1 @@\n-  _g1h->print_heap_before_gc();\n+  _g1h->print_before_gc();\n@@ -2461,1 +2461,1 @@\n-  _g1h->print_heap_after_gc();\n+  _g1h->print_after_gc();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -667,1 +667,1 @@\n-  heap->print_heap_before_gc();\n+  heap->print_before_gc();\n@@ -1170,1 +1170,1 @@\n-  heap->print_heap_after_gc();\n+  heap->print_after_gc();\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -356,1 +356,1 @@\n-  heap->print_heap_before_gc();\n+  heap->print_before_gc();\n@@ -591,1 +591,1 @@\n-  heap->print_heap_after_gc();\n+  heap->print_after_gc();\n","filename":"src\/hotspot\/share\/gc\/parallel\/psScavenge.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -407,1 +407,1 @@\n-  print_heap_before_gc();\n+  print_before_gc();\n@@ -443,1 +443,1 @@\n-  print_heap_after_gc();\n+  print_after_gc();\n@@ -639,1 +639,1 @@\n-  print_heap_before_gc();\n+  print_before_gc();\n@@ -699,1 +699,1 @@\n-  print_heap_after_gc();\n+  print_after_gc();\n","filename":"src\/hotspot\/share\/gc\/serial\/serialHeap.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -70,4 +70,1 @@\n-class GCMessage : public FormatBuffer<1024> {\n- public:\n-  bool is_before;\n-};\n+class GCLogMessage : public FormatBuffer<512> {};\n@@ -76,2 +73,1 @@\n-void EventLogBase<GCMessage>::print(outputStream* st, GCMessage& m) {\n-  st->print_cr(\"GC heap %s\", m.is_before ? \"before\" : \"after\");\n+void EventLogBase<GCLogMessage>::print(outputStream* st, GCLogMessage& m) {\n@@ -81,3 +77,3 @@\n-class GCHeapLog : public EventLogBase<GCMessage> {\n- private:\n-  void log_heap(CollectedHeap* heap, bool before);\n+class GCLog : public EventLogBase<GCLogMessage> {\n+ protected:\n+  virtual void log_usage(const CollectedHeap* heap, outputStream* st) const = 0;\n@@ -86,1 +82,1 @@\n-  GCHeapLog() : EventLogBase<GCMessage>(\"GC Heap History\", \"gc\") {}\n+  GCLog(const char* name, const char* handle) : EventLogBase<GCLogMessage>(name, handle) {}\n@@ -88,6 +84,1 @@\n-  void log_heap_before(CollectedHeap* heap) {\n-    log_heap(heap, true);\n-  }\n-  void log_heap_after(CollectedHeap* heap) {\n-    log_heap(heap, false);\n-  }\n+  void log_gc(const CollectedHeap* heap, GCWhen::Type when);\n@@ -96,1 +87,1 @@\n-void GCHeapLog::log_heap(CollectedHeap* heap, bool before) {\n+void GCLog::log_gc(const CollectedHeap* heap, GCWhen::Type when) {\n@@ -104,1 +95,1 @@\n-  _records[index].thread = nullptr; \/\/ Its the GC thread so it's not that interesting.\n+  _records[index].thread = nullptr; \/\/ It's the GC thread so it's not that interesting.\n@@ -106,1 +97,0 @@\n-  _records[index].data.is_before = before;\n@@ -109,5 +99,1 @@\n-  st.print_cr(\"{Heap %s GC invocations=%u (full %u):\",\n-                 before ? \"before\" : \"after\",\n-                 heap->total_collections(),\n-                 heap->total_full_collections());\n-\n+  st.print(\"{\");\n@@ -115,0 +101,1 @@\n+    heap->print_invocation_on(&st, _handle, when);\n@@ -116,2 +103,1 @@\n-    heap->print_heap_on(&st);\n-    MetaspaceUtils::print_on(&st);\n+    log_usage(heap, &st);\n@@ -119,1 +105,0 @@\n-\n@@ -123,0 +108,20 @@\n+class GCHeapLog : public GCLog {\n+ private:\n+  void log_usage(const CollectedHeap* heap, outputStream* st) const override {\n+    heap->print_heap_on(st);\n+  }\n+\n+ public:\n+  GCHeapLog() : GCLog(\"GC Heap Usage History\", \"heap\") {}\n+};\n+\n+class GCMetaspaceLog : public GCLog {\n+ private:\n+  void log_usage(const CollectedHeap* heap, outputStream* st) const override {\n+    MetaspaceUtils::print_on(st);\n+  }\n+\n+ public:\n+  GCMetaspaceLog() : GCLog(\"Metaspace Usage History\", \"metaspace\") {}\n+};\n+\n@@ -166,5 +171,3 @@\n-void CollectedHeap::print_heap_before_gc() {\n-  LogTarget(Debug, gc, heap) lt;\n-  if (lt.is_enabled()) {\n-    LogStream ls(lt);\n-    ls.print_cr(\"Heap before GC invocations=%u (full %u):\", total_collections(), total_full_collections());\n+void CollectedHeap::print_invocation_on(outputStream* st, const char* type, GCWhen::Type when) const {\n+  st->print_cr(\"%s %s invocations=%u (full %u):\", type, GCWhen::to_string(when), total_collections(), total_full_collections());\n+}\n@@ -172,0 +175,6 @@\n+void CollectedHeap::print_relative_to_gc(GCWhen::Type when) const {\n+  \/\/ Print heap information\n+  LogTarget(Debug, gc, heap) lt_heap;\n+  if (lt_heap.is_enabled()) {\n+    LogStream ls(lt_heap);\n+    print_invocation_on(&ls, \"Heap\", when);\n@@ -174,1 +183,0 @@\n-    MetaspaceUtils::print_on(&ls);\n@@ -177,2 +185,2 @@\n-  if (_gc_heap_log != nullptr) {\n-    _gc_heap_log->log_heap_before(this);\n+  if (_heap_log != nullptr) {\n+    _heap_log->log_gc(this, when);\n@@ -180,1 +188,0 @@\n-}\n@@ -182,8 +189,6 @@\n-void CollectedHeap::print_heap_after_gc() {\n-  LogTarget(Debug, gc, heap) lt;\n-  if (lt.is_enabled()) {\n-    LogStream ls(lt);\n-    ls.print_cr(\"Heap after GC invocations=%u (full %u):\", total_collections(), total_full_collections());\n-\n-    StreamIndentor si(&ls, 1);\n-    print_heap_on(&ls);\n+  \/\/ Print metaspace information\n+  LogTarget(Debug, gc, metaspace) lt_metaspace;\n+  if (lt_metaspace.is_enabled()) {\n+    LogStream ls(lt_metaspace);\n+    print_invocation_on(&ls, \"Metaspace\", when);\n+    StreamIndentor indentor(&ls, 1);\n@@ -193,2 +198,2 @@\n-  if (_gc_heap_log != nullptr) {\n-    _gc_heap_log->log_heap_after(this);\n+  if (_metaspace_log != nullptr) {\n+    _metaspace_log->log_gc(this, when);\n@@ -198,0 +203,8 @@\n+void CollectedHeap::print_before_gc() const {\n+  print_relative_to_gc(GCWhen::BeforeGC);\n+}\n+\n+void CollectedHeap::print_after_gc() const {\n+  print_relative_to_gc(GCWhen::AfterGC);\n+}\n+\n@@ -304,1 +317,2 @@\n-    _gc_heap_log = new GCHeapLog();\n+    _metaspace_log = new GCMetaspaceLog();\n+    _heap_log = new GCHeapLog();\n@@ -306,1 +320,2 @@\n-    _gc_heap_log = nullptr;\n+    _metaspace_log = nullptr;\n+    _heap_log = nullptr;\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":63,"deletions":48,"binary":false,"changes":111,"status":"modified"},{"patch":"@@ -49,1 +49,0 @@\n-class GCHeapLog;\n@@ -54,0 +53,1 @@\n+class GCHeapLog;\n@@ -55,0 +55,1 @@\n+class GCMetaspaceLog;\n@@ -97,1 +98,2 @@\n-  GCHeapLog* _gc_heap_log;\n+  GCHeapLog*      _heap_log;\n+  GCMetaspaceLog* _metaspace_log;\n@@ -423,0 +425,2 @@\n+  void print_relative_to_gc(GCWhen::Type when) const;\n+\n@@ -438,0 +442,2 @@\n+  void print_invocation_on(outputStream* st, const char* type, GCWhen::Type when) const;\n+\n@@ -457,2 +463,2 @@\n-  void print_heap_before_gc();\n-  void print_heap_after_gc();\n+  void print_before_gc() const;\n+  void print_after_gc() const;\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -704,1 +704,1 @@\n-  ZCollectedHeap::heap()->print_heap_before_gc();\n+  ZCollectedHeap::heap()->print_before_gc();\n@@ -719,1 +719,1 @@\n-  ZCollectedHeap::heap()->print_heap_after_gc();\n+  ZCollectedHeap::heap()->print_after_gc();\n","filename":"src\/hotspot\/share\/gc\/z\/zStat.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -61,0 +61,2 @@\n+  MetaspaceUtils::print_on(output());\n+\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceDCmd.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -483,1 +483,1 @@\n-  Log(gc, heap, exit) log;\n+  Log(gc, exit) log;\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -416,1 +416,0 @@\n-  MetaspaceUtils::print_on(output());\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1206,1 +1206,0 @@\n-      MetaspaceUtils::print_on(st);\n@@ -1223,0 +1222,1 @@\n+    MetaspaceUtils::print_on(st);\n@@ -1394,3 +1394,3 @@\n-  \/\/ Take heap lock over both heap and GC printing so that information is\n-  \/\/ consistent.\n-  {\n+  \/\/ Take heap lock over heap, GC and metaspace printing so that information\n+  \/\/ is consistent.\n+  if (Universe::is_fully_initialized()) {\n@@ -1401,2 +1401,1 @@\n-    if (Universe::is_fully_initialized()) {\n-      GCLogPrecious::print_on_error(st);\n+    GCLogPrecious::print_on_error(st);\n@@ -1404,0 +1403,1 @@\n+    {\n@@ -1407,1 +1407,0 @@\n-      MetaspaceUtils::print_on(st);\n@@ -1413,3 +1412,2 @@\n-    if (Universe::is_fully_initialized()) {\n-      Universe::heap()->print_gc_on(st);\n-      st->cr();\n+    Universe::heap()->print_gc_on(st);\n+    st->cr();\n@@ -1417,4 +1415,2 @@\n-      st->print_cr(\"Polling page: \" PTR_FORMAT, p2i(SafepointMechanism::get_polling_page()));\n-      st->cr();\n-    }\n-  }\n+    st->print_cr(\"Polling page: \" PTR_FORMAT, p2i(SafepointMechanism::get_polling_page()));\n+    st->cr();\n@@ -1422,1 +1418,1 @@\n-  \/\/ STEP(\"printing metaspace information\")\n+    \/\/ STEP(\"printing metaspace information\")\n@@ -1424,1 +1420,0 @@\n-  if (Universe::is_fully_initialized()) {\n@@ -1426,0 +1421,1 @@\n+    MetaspaceUtils::print_on(st);\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":12,"deletions":16,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -63,1 +63,2 @@\n-            Pattern.compile(\"GC Heap History \\\\([0-9]* events\\\\):\"),\n+            Pattern.compile(\"GC Heap Usage History \\\\([0-9]* events\\\\):\"),\n+            Pattern.compile(\"Metaspace Usage History \\\\([0-9]* events\\\\):\"),\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/ShowEventsOnCrashTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,9 @@\n-        output.shouldContain(\"Metaspace\");\n+\n+        \/\/ All GCs have different strategies for printing similar information,\n+        \/\/ which makes it hard to grep for anything substantial. However, all\n+        \/\/ GCs print the string \"used\", so lets check for that to see if the\n+        \/\/ jcmd printed something at all.\n+        output.shouldContain(\"used\");\n+\n+        output.shouldNotContain(\"Unknown diagnostic command\");\n+        output.shouldHaveExitValue(0);\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/gc\/HeapInfoTest.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,1 +55,2 @@\n-        output.stdoutShouldMatch(buildHeaderPattern(\"GC Heap History\"));\n+        output.stdoutShouldMatch(buildHeaderPattern(\"GC Heap Usage History\"));\n+        output.stdoutShouldMatch(buildHeaderPattern(\"Metaspace Usage History\"));\n@@ -67,1 +68,2 @@\n-        output.stdoutShouldNotMatch(buildHeaderPattern(\"GC Heap History\"));\n+        output.stdoutShouldNotMatch(buildHeaderPattern(\"GC Heap Usage History\"));\n+        output.stdoutShouldNotMatch(buildHeaderPattern(\"Metaspace Usage History\"));\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/vm\/EventsTest.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"}]}