{"files":[{"patch":"@@ -2111,5 +2111,1 @@\n-  \/\/ We keep track of the resulting Nodes from every \"VTransformNode::apply\" call.\n-  \/\/ Since \"apply\" is called on defs before uses, this allows us to find the\n-  \/\/ generated def (input) nodes when we are generating the use nodes in \"apply\".\n-  int length = _vtnodes.length();\n-  GrowableArray<Node*> vtnode_idx_to_transformed_node(length, length, nullptr);\n+  VTransformApplyState apply_state(_vloop_analyzer, _vtnodes.length());\n@@ -2119,2 +2115,1 @@\n-    VTransformApplyResult result = vtn->apply(_vloop_analyzer,\n-                                              vtnode_idx_to_transformed_node);\n+    VTransformApplyResult result = vtn->apply(apply_state);\n@@ -2123,1 +2118,1 @@\n-    vtnode_idx_to_transformed_node.at_put(vtn->_idx, result.node());\n+    apply_state.set_transformed_node(vtn, result.node());\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -700,3 +700,8 @@\n-Node* VTransformNode::find_transformed_input(int i, const GrowableArray<Node*>& vnode_idx_to_transformed_node) const {\n-  Node* n = vnode_idx_to_transformed_node.at(in_req(i)->_idx);\n-  assert(n != nullptr, \"must find input IR node\");\n+void VTransformApplyState::set_transformed_node(VTransformNode* vtn, Node* n) {\n+  assert(_vtnode_idx_to_transformed_node.at(vtn->_idx) == nullptr, \"only set once\");\n+  _vtnode_idx_to_transformed_node.at_put(vtn->_idx, n);\n+}\n+\n+Node* VTransformApplyState::transformed_node(const VTransformNode* vtn) const {\n+  Node* n = _vtnode_idx_to_transformed_node.at(vtn->_idx);\n+  assert(n != nullptr, \"must find IR node for vtnode\");\n@@ -706,2 +711,1 @@\n-VTransformApplyResult VTransformScalarNode::apply(const VLoopAnalyzer& vloop_analyzer,\n-                                                  const GrowableArray<Node*>& vnode_idx_to_transformed_node) const {\n+VTransformApplyResult VTransformScalarNode::apply(VTransformApplyState& apply_state) const {\n@@ -712,3 +716,2 @@\n-VTransformApplyResult VTransformReplicateNode::apply(const VLoopAnalyzer& vloop_analyzer,\n-                                                     const GrowableArray<Node*>& vnode_idx_to_transformed_node) const {\n-  Node* val = find_transformed_input(1, vnode_idx_to_transformed_node);\n+VTransformApplyResult VTransformReplicateNode::apply(VTransformApplyState& apply_state) const {\n+  Node* val = apply_state.transformed_node(in_req(1));\n@@ -716,1 +719,1 @@\n-  register_new_node_from_vectorization(vloop_analyzer, vn, val);\n+  register_new_node_from_vectorization(apply_state, vn, val);\n@@ -720,3 +723,2 @@\n-VTransformApplyResult VTransformConvI2LNode::apply(const VLoopAnalyzer& vloop_analyzer,\n-                                                   const GrowableArray<Node*>& vnode_idx_to_transformed_node) const {\n-  Node* val = find_transformed_input(1, vnode_idx_to_transformed_node);\n+VTransformApplyResult VTransformConvI2LNode::apply(VTransformApplyState& apply_state) const {\n+  Node* val = apply_state.transformed_node(in_req(1));\n@@ -724,1 +726,1 @@\n-  register_new_node_from_vectorization(vloop_analyzer, n, val);\n+  register_new_node_from_vectorization(apply_state, n, val);\n@@ -728,4 +730,3 @@\n-VTransformApplyResult VTransformShiftCountNode::apply(const VLoopAnalyzer& vloop_analyzer,\n-                                                      const GrowableArray<Node*>& vnode_idx_to_transformed_node) const {\n-  PhaseIdealLoop* phase = vloop_analyzer.vloop().phase();\n-  Node* shift_count_in = find_transformed_input(1, vnode_idx_to_transformed_node);\n+VTransformApplyResult VTransformShiftCountNode::apply(VTransformApplyState& apply_state) const {\n+  PhaseIdealLoop* phase = apply_state.phase();\n+  Node* shift_count_in = apply_state.transformed_node(in_req(1));\n@@ -737,1 +738,1 @@\n-  register_new_node_from_vectorization(vloop_analyzer, shift_count_masked, shift_count_in);\n+  register_new_node_from_vectorization(apply_state, shift_count_masked, shift_count_in);\n@@ -740,1 +741,1 @@\n-  register_new_node_from_vectorization(vloop_analyzer, vn, shift_count_in);\n+  register_new_node_from_vectorization(apply_state, vn, shift_count_in);\n@@ -745,4 +746,3 @@\n-VTransformApplyResult VTransformPopulateIndexNode::apply(const VLoopAnalyzer& vloop_analyzer,\n-                                                         const GrowableArray<Node*>& vnode_idx_to_transformed_node) const {\n-  PhaseIdealLoop* phase = vloop_analyzer.vloop().phase();\n-  Node* val = find_transformed_input(1, vnode_idx_to_transformed_node);\n+VTransformApplyResult VTransformPopulateIndexNode::apply(VTransformApplyState& apply_state) const {\n+  PhaseIdealLoop* phase = apply_state.phase();\n+  Node* val = apply_state.transformed_node(in_req(1));\n@@ -753,1 +753,1 @@\n-  register_new_node_from_vectorization(vloop_analyzer, vn, val);\n+  register_new_node_from_vectorization(apply_state, vn, val);\n@@ -757,2 +757,1 @@\n-VTransformApplyResult VTransformElementWiseVectorNode::apply(const VLoopAnalyzer& vloop_analyzer,\n-                                                             const GrowableArray<Node*>& vnode_idx_to_transformed_node) const {\n+VTransformApplyResult VTransformElementWiseVectorNode::apply(VTransformApplyState& apply_state) const {\n@@ -762,1 +761,1 @@\n-  BasicType bt = vloop_analyzer.types().velt_basic_type(first);\n+  BasicType bt = apply_state.vloop_analyzer().types().velt_basic_type(first);\n@@ -772,3 +771,3 @@\n-  Node* in1 =                find_transformed_input(1, vnode_idx_to_transformed_node);\n-  Node* in2 = (req() >= 3) ? find_transformed_input(2, vnode_idx_to_transformed_node) : nullptr;\n-  Node* in3 = (req() >= 4) ? find_transformed_input(3, vnode_idx_to_transformed_node) : nullptr;\n+  Node* in1 =                apply_state.transformed_node(in_req(1));\n+  Node* in2 = (req() >= 3) ? apply_state.transformed_node(in_req(2)) : nullptr;\n+  Node* in3 = (req() >= 4) ? apply_state.transformed_node(in_req(3)) : nullptr;\n@@ -794,1 +793,1 @@\n-    register_new_node_from_vectorization(vloop_analyzer, long_vn, first);\n+    register_new_node_from_vectorization(apply_state, long_vn, first);\n@@ -812,1 +811,1 @@\n-  register_new_node_from_vectorization_and_replace_scalar_nodes(vloop_analyzer, vn);\n+  register_new_node_from_vectorization_and_replace_scalar_nodes(apply_state, vn);\n@@ -816,2 +815,1 @@\n-VTransformApplyResult VTransformBoolVectorNode::apply(const VLoopAnalyzer& vloop_analyzer,\n-                                                      const GrowableArray<Node*>& vnode_idx_to_transformed_node) const {\n+VTransformApplyResult VTransformBoolVectorNode::apply(VTransformApplyState& apply_state) const {\n@@ -820,1 +818,1 @@\n-  BasicType bt = vloop_analyzer.types().velt_basic_type(first);\n+  BasicType bt = apply_state.vloop_analyzer().types().velt_basic_type(first);\n@@ -827,2 +825,2 @@\n-  Node* cmp_in1 = vtn_cmp->find_transformed_input(1, vnode_idx_to_transformed_node);\n-  Node* cmp_in2 = vtn_cmp->find_transformed_input(2, vnode_idx_to_transformed_node);\n+  Node* cmp_in1 = apply_state.transformed_node(vtn_cmp->in_req(1));\n+  Node* cmp_in2 = apply_state.transformed_node(vtn_cmp->in_req(2));\n@@ -831,1 +829,1 @@\n-  PhaseIdealLoop* phase = vloop_analyzer.vloop().phase();\n+  PhaseIdealLoop* phase = apply_state.phase();\n@@ -835,1 +833,1 @@\n-  register_new_node_from_vectorization_and_replace_scalar_nodes(vloop_analyzer, vn);\n+  register_new_node_from_vectorization_and_replace_scalar_nodes(apply_state, vn);\n@@ -839,2 +837,1 @@\n-VTransformApplyResult VTransformReductionVectorNode::apply(const VLoopAnalyzer& vloop_analyzer,\n-                                                           const GrowableArray<Node*>& vnode_idx_to_transformed_node) const {\n+VTransformApplyResult VTransformReductionVectorNode::apply(VTransformApplyState& apply_state) const {\n@@ -846,2 +843,2 @@\n-  Node* init = find_transformed_input(1, vnode_idx_to_transformed_node);\n-  Node* vec  = find_transformed_input(2, vnode_idx_to_transformed_node);\n+  Node* init = apply_state.transformed_node(in_req(1));\n+  Node* vec  = apply_state.transformed_node(in_req(2));\n@@ -850,1 +847,1 @@\n-  register_new_node_from_vectorization_and_replace_scalar_nodes(vloop_analyzer, vn);\n+  register_new_node_from_vectorization_and_replace_scalar_nodes(apply_state, vn);\n@@ -854,2 +851,1 @@\n-VTransformApplyResult VTransformLoadVectorNode::apply(const VLoopAnalyzer& vloop_analyzer,\n-                                                      const GrowableArray<Node*>& vnode_idx_to_transformed_node) const {\n+VTransformApplyResult VTransformLoadVectorNode::apply(VTransformApplyState& apply_state) const {\n@@ -863,1 +859,1 @@\n-  BasicType bt = vloop_analyzer.types().velt_basic_type(first);\n+  BasicType bt = apply_state.vloop_analyzer().types().velt_basic_type(first);\n@@ -868,1 +864,1 @@\n-  const VPointer& load_p = vpointer(vloop_analyzer);\n+  const VPointer& load_p = vpointer(apply_state.vloop_analyzer());\n@@ -870,1 +866,1 @@\n-    VPointer store_p(mem->as_Mem(), vloop_analyzer.vloop());\n+    VPointer store_p(mem->as_Mem(), apply_state.vloop());\n@@ -881,1 +877,1 @@\n-  register_new_node_from_vectorization_and_replace_scalar_nodes(vloop_analyzer, vn);\n+  register_new_node_from_vectorization_and_replace_scalar_nodes(apply_state, vn);\n@@ -885,2 +881,1 @@\n-VTransformApplyResult VTransformStoreVectorNode::apply(const VLoopAnalyzer& vloop_analyzer,\n-                                                       const GrowableArray<Node*>& vnode_idx_to_transformed_node) const {\n+VTransformApplyResult VTransformStoreVectorNode::apply(VTransformApplyState& apply_state) const {\n@@ -895,1 +890,1 @@\n-  Node* value = find_transformed_input(MemNode::ValueIn, vnode_idx_to_transformed_node);\n+  Node* value = apply_state.transformed_node(in_req(MemNode::ValueIn));\n@@ -898,1 +893,1 @@\n-  register_new_node_from_vectorization_and_replace_scalar_nodes(vloop_analyzer, vn);\n+  register_new_node_from_vectorization_and_replace_scalar_nodes(apply_state, vn);\n@@ -902,2 +897,2 @@\n-void VTransformVectorNode::register_new_node_from_vectorization_and_replace_scalar_nodes(const VLoopAnalyzer& vloop_analyzer, Node* vn) const {\n-  PhaseIdealLoop* phase = vloop_analyzer.vloop().phase();\n+void VTransformVectorNode::register_new_node_from_vectorization_and_replace_scalar_nodes(VTransformApplyState& apply_state, Node* vn) const {\n+  PhaseIdealLoop* phase = apply_state.phase();\n@@ -906,1 +901,1 @@\n-  register_new_node_from_vectorization(vloop_analyzer, vn, first);\n+  register_new_node_from_vectorization(apply_state, vn, first);\n@@ -914,2 +909,2 @@\n-void VTransformNode::register_new_node_from_vectorization(const VLoopAnalyzer& vloop_analyzer, Node* vn, Node* old_node) const {\n-  PhaseIdealLoop* phase = vloop_analyzer.vloop().phase();\n+void VTransformNode::register_new_node_from_vectorization(VTransformApplyState& apply_state, Node* vn, Node* old_node) const {\n+  PhaseIdealLoop* phase = apply_state.phase();\n","filename":"src\/hotspot\/share\/opto\/vtransform.cpp","additions":54,"deletions":59,"binary":false,"changes":113,"status":"modified"},{"patch":"@@ -263,0 +263,27 @@\n+\/\/ Keeps track of the state during \"VTransform::apply\"\n+\/\/ -> keep track of the already transformed nodes\n+class VTransformApplyState : public StackObj {\n+private:\n+  const VLoopAnalyzer& _vloop_analyzer;\n+\n+  \/\/ We keep track of the resulting Nodes from every \"VTransformNode::apply\" call.\n+  \/\/ Since \"apply\" is called on defs before uses, this allows us to find the\n+  \/\/ generated def (input) nodes when we are generating the use nodes in \"apply\".\n+  GrowableArray<Node*> _vtnode_idx_to_transformed_node;\n+\n+\n+public:\n+  VTransformApplyState(const VLoopAnalyzer& vloop_analyzer, int num_vtnodes) :\n+    _vloop_analyzer(vloop_analyzer),\n+    _vtnode_idx_to_transformed_node(num_vtnodes, num_vtnodes, nullptr)\n+  {\n+  }\n+\n+  const VLoop& vloop() const { return _vloop_analyzer.vloop(); }\n+  PhaseIdealLoop* phase() const { return vloop().phase(); }\n+  const VLoopAnalyzer& vloop_analyzer() const { return _vloop_analyzer; }\n+\n+  void set_transformed_node(VTransformNode* vtn, Node* n);\n+  Node* transformed_node(const VTransformNode* vtn) const;\n+};\n+\n@@ -413,2 +440,1 @@\n-  virtual VTransformApplyResult apply(const VLoopAnalyzer& vloop_analyzer,\n-                                      const GrowableArray<Node*>& vnode_idx_to_transformed_node) const = 0;\n+  virtual VTransformApplyResult apply(VTransformApplyState& apply_state) const = 0;\n@@ -418,1 +444,1 @@\n-  void register_new_node_from_vectorization(const VLoopAnalyzer& vloop_analyzer, Node* vn, Node* old_node) const;\n+  void register_new_node_from_vectorization(VTransformApplyState& apply_state, Node* vn, Node* old_node) const;\n@@ -438,2 +464,1 @@\n-  virtual VTransformApplyResult apply(const VLoopAnalyzer& vloop_analyzer,\n-                                      const GrowableArray<Node*>& vnode_idx_to_transformed_node) const override;\n+  virtual VTransformApplyResult apply(VTransformApplyState& apply_state) const override;\n@@ -465,2 +490,1 @@\n-  virtual VTransformApplyResult apply(const VLoopAnalyzer& vloop_analyzer,\n-                                      const GrowableArray<Node*>& vnode_idx_to_transformed_node) const override;\n+  virtual VTransformApplyResult apply(VTransformApplyState& apply_state) const override;\n@@ -475,2 +499,1 @@\n-  virtual VTransformApplyResult apply(const VLoopAnalyzer& vloop_analyzer,\n-                                      const GrowableArray<Node*>& vnode_idx_to_transformed_node) const override;\n+  virtual VTransformApplyResult apply(VTransformApplyState& apply_state) const override;\n@@ -490,2 +513,1 @@\n-  virtual VTransformApplyResult apply(const VLoopAnalyzer& vloop_analyzer,\n-                                      const GrowableArray<Node*>& vnode_idx_to_transformed_node) const override;\n+  virtual VTransformApplyResult apply(VTransformApplyState& apply_state) const override;\n@@ -504,2 +526,1 @@\n-  virtual VTransformApplyResult apply(const VLoopAnalyzer& vloop_analyzer,\n-                                      const GrowableArray<Node*>& vnode_idx_to_transformed_node) const override;\n+  virtual VTransformApplyResult apply(VTransformApplyState& apply_state) const override;\n@@ -526,1 +547,1 @@\n-  void register_new_node_from_vectorization_and_replace_scalar_nodes(const VLoopAnalyzer& vloop_analyzer, Node* vn) const;\n+  void register_new_node_from_vectorization_and_replace_scalar_nodes(VTransformApplyState& apply_state, Node* vn) const;\n@@ -536,2 +557,1 @@\n-  virtual VTransformApplyResult apply(const VLoopAnalyzer& vloop_analyzer,\n-                                      const GrowableArray<Node*>& vnode_idx_to_transformed_node) const override;\n+  virtual VTransformApplyResult apply(VTransformApplyState& apply_state) const override;\n@@ -557,2 +577,1 @@\n-  virtual VTransformApplyResult apply(const VLoopAnalyzer& vloop_analyzer,\n-                                      const GrowableArray<Node*>& vnode_idx_to_transformed_node) const override;\n+  virtual VTransformApplyResult apply(VTransformApplyState& apply_state) const override;\n@@ -568,2 +587,1 @@\n-  virtual VTransformApplyResult apply(const VLoopAnalyzer& vloop_analyzer,\n-                                      const GrowableArray<Node*>& vnode_idx_to_transformed_node) const override;\n+  virtual VTransformApplyResult apply(VTransformApplyState& apply_state) const override;\n@@ -595,2 +613,1 @@\n-  virtual VTransformApplyResult apply(const VLoopAnalyzer& vloop_analyzer,\n-                                      const GrowableArray<Node*>& vnode_idx_to_transformed_node) const override;\n+  virtual VTransformApplyResult apply(VTransformApplyState& apply_state) const override;\n@@ -607,2 +624,1 @@\n-  virtual VTransformApplyResult apply(const VLoopAnalyzer& vloop_analyzer,\n-                                      const GrowableArray<Node*>& vnode_idx_to_transformed_node) const override;\n+  virtual VTransformApplyResult apply(VTransformApplyState& apply_state) const override;\n","filename":"src\/hotspot\/share\/opto\/vtransform.hpp","additions":40,"deletions":24,"binary":false,"changes":64,"status":"modified"}]}