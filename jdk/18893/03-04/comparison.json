{"files":[{"patch":"@@ -1835,1 +1835,1 @@\n-  emit_operand(reg, dst, 1);\n+  emit_operand(reg, dst, 0);\n@@ -4462,0 +4462,1 @@\n+  InstructionMark im(this);\n@@ -4578,0 +4579,1 @@\n+  InstructionMark im(this);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3574,0 +3574,1 @@\n+  assert(((dst->encoding() < 16 && src1->encoding() < 16) || VM_Version::supports_avx512vlbw()),\"XMM register should be 0-15\");\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -961,2 +961,2 @@\n-  void ALWAYSINLINE js(Label& L, bool maybe_short = true) { jcc(Assembler::positive, L, maybe_short); }\n-  void ALWAYSINLINE jns(Label& L, bool maybe_short = true) { jcc(Assembler::negative, L, maybe_short); }\n+  void ALWAYSINLINE js(Label& L, bool maybe_short = true) { jcc(Assembler::negative, L, maybe_short); }\n+  void ALWAYSINLINE jns(Label& L, bool maybe_short = true) { jcc(Assembler::positive, L, maybe_short); }\n@@ -995,2 +995,2 @@\n-  void ALWAYSINLINE js_b(Label& L) { jccb(Assembler::positive, L); }\n-  void ALWAYSINLINE jns_b(Label& L) { jccb(Assembler::negative, L); }\n+  void ALWAYSINLINE js_b(Label& L) { jccb(Assembler::negative, L); }\n+  void ALWAYSINLINE jns_b(Label& L) { jccb(Assembler::positive, L); }\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}