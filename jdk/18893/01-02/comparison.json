{"files":[{"patch":"@@ -4492,7 +4492,3 @@\n-void C2_MacroAssembler::arrays_equals(bool is_array_equ, Register ary1,\n-                                      Register ary2, Register limit,\n-                                      Register result, Register chr,\n-                                      XMMRegister vec1, XMMRegister vec2,\n-                                      bool is_char, KRegister mask,\n-                                      bool expand_ary2) {\n-  \/\/ for expand_ary2, limit is the (smaller) size of the second array.\n+void C2_MacroAssembler::arrays_equals(bool is_array_equ, Register ary1, Register ary2,\n+                                      Register limit, Register result, Register chr,\n+                                      XMMRegister vec1, XMMRegister vec2, bool is_char, KRegister mask) {\n@@ -4502,3 +4498,0 @@\n-  assert((!expand_ary2) || ((expand_ary2) && (UseAVX == 2)),\n-         \"Expansion only implemented for AVX2\");\n-\n@@ -4543,1 +4536,1 @@\n-    Label COMPARE_WIDE_VECTORS, COMPARE_WIDE_VECTORS_16, COMPARE_TAIL, COMPARE_TAIL_16;\n+    Label COMPARE_WIDE_VECTORS, COMPARE_TAIL;\n@@ -4548,1 +4541,1 @@\n-    jcc(Assembler::zero, COMPARE_TAIL_16);\n+    jcc(Assembler::zero, COMPARE_TAIL);\n@@ -4550,2 +4543,1 @@\n-    lea(ary1, Address(ary1, limit,\n-                      expand_ary2 ? Address::times_2 : Address::times_1));\n+    lea(ary1, Address(ary1, limit, Address::times_1));\n@@ -4594,8 +4586,2 @@\n-    vmovdqu(vec1, Address(ary1, limit,\n-                          expand_ary2 ? Address::times_2 : Address::times_1));\n-    if (expand_ary2) {\n-      vpmovzxbw(vec2, Address(ary2, limit, Address::times_1),\n-                Assembler::AVX_256bit);\n-    } else {\n-      vmovdqu(vec2, Address(ary2, limit, Address::times_1));\n-    }\n+    vmovdqu(vec1, Address(ary1, limit, Address::times_1));\n+    vmovdqu(vec2, Address(ary2, limit, Address::times_1));\n@@ -4606,1 +4592,1 @@\n-    addptr(limit, expand_ary2 ? 16 : 32);\n+    addptr(limit, 32);\n@@ -4612,9 +4598,2 @@\n-    vmovdqu(vec1,\n-            Address(ary1, result,\n-                    expand_ary2 ? Address::times_2 : Address::times_1, -32));\n-    if (expand_ary2) {\n-      vpmovzxbw(vec2, Address(ary2, result, Address::times_1, -16),\n-                Assembler::AVX_256bit);\n-    } else {\n-      vmovdqu(vec2, Address(ary2, result, Address::times_1, -32));\n-    }\n+    vmovdqu(vec1, Address(ary1, result, Address::times_1, -32));\n+    vmovdqu(vec2, Address(ary2, result, Address::times_1, -32));\n@@ -4624,30 +4603,2 @@\n-    jcc(Assembler::notZero, FALSE_LABEL);\n-    jmp(TRUE_LABEL);\n-\n-    bind(COMPARE_TAIL_16); \/\/ limit is zero\n-    movl(limit, result);\n-\n-    \/\/ Compare 16-byte chunks\n-    andl(result, 0x0000000f);  \/\/   tail count (in bytes)\n-    andl(limit, 0xfffffff0);   \/\/ vector count (in bytes)\n-    jcc(Assembler::zero, COMPARE_TAIL);\n-\n-    lea(ary1, Address(ary1, limit, expand_ary2 ? Address::times_2 : Address::times_1));\n-    lea(ary2, Address(ary2, limit, Address::times_1));\n-    negptr(limit);\n-\n-    bind(COMPARE_WIDE_VECTORS_16);\n-    movdqu(vec1, Address(ary1, limit,\n-                         expand_ary2 ? Address::times_2 : Address::times_1));\n-    if (expand_ary2) {\n-      vpmovzxbw(vec2, Address(ary2, limit, Address::times_1),\n-                Assembler::AVX_128bit);\n-    } else {\n-      movdqu(vec2, Address(ary2, limit, Address::times_1));\n-    }\n-    vpxor(vec1, vec2);\n-\n-    vptest(vec1, vec1);\n-    jcc(Assembler::notZero, FALSE_LABEL);\n-    addptr(limit, expand_ary2 ? 8 : 16);\n-    jcc(Assembler::notZero, COMPARE_WIDE_VECTORS_16);\n+    jccb(Assembler::notZero, FALSE_LABEL);\n+    jmpb(TRUE_LABEL);\n@@ -4698,7 +4649,2 @@\n-  if (expand_ary2) {\n-    testl(result, result);\n-    jccb(Assembler::zero, TRUE_LABEL);\n-  } else {\n-    andl(limit, 0xfffffffc); \/\/ vector count (in bytes)\n-    jccb(Assembler::zero, COMPARE_CHAR);\n-  }\n+  andl(limit, 0xfffffffc); \/\/ vector count (in bytes)\n+  jccb(Assembler::zero, COMPARE_CHAR);\n@@ -4706,1 +4652,1 @@\n-  lea(ary1, Address(ary1, limit, expand_ary2 ? Address::times_2 : Address::times_1));\n+  lea(ary1, Address(ary1, limit, Address::times_1));\n@@ -4711,16 +4657,5 @@\n-  if (expand_ary2) {\n-    \/\/ There are no \"vector\" operations for bytes to shorts\n-    movzbl(chr, Address(ary2, limit, Address::times_1));\n-    cmpw(Address(ary1, limit, Address::times_2), chr);\n-    jccb(Assembler::notEqual, FALSE_LABEL);\n-    addptr(limit, 1);\n-    jcc(Assembler::notZero, COMPARE_VECTORS);\n-    jmp(TRUE_LABEL);\n-  } else {\n-    movl(chr, Address(ary1, limit,\n-                      expand_ary2 ? Address::times_2 : Address::times_1));\n-    cmpl(chr, Address(ary2, limit, Address::times_1));\n-    jccb(Assembler::notEqual, FALSE_LABEL);\n-    addptr(limit, 4);\n-    jcc(Assembler::notZero, COMPARE_VECTORS);\n-  }\n+  movl(chr, Address(ary1, limit, Address::times_1));\n+  cmpl(chr, Address(ary2, limit, Address::times_1));\n+  jccb(Assembler::notEqual, FALSE_LABEL);\n+  addptr(limit, 4);\n+  jcc(Assembler::notZero, COMPARE_VECTORS);\n@@ -4740,1 +4675,1 @@\n-    lea(ary1, Address(ary1, expand_ary2 ? 4 : 2));\n+    lea(ary1, Address(ary1, 2));\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":22,"deletions":87,"binary":false,"changes":109,"status":"modified"},{"patch":"@@ -292,1 +292,0 @@\n-\n@@ -296,2 +295,1 @@\n-                     XMMRegister vec1, XMMRegister vec2, bool is_char,\n-                     KRegister mask = knoreg, bool expand_ary2 = false);\n+                     XMMRegister vec1, XMMRegister vec2, bool is_char, KRegister mask = knoreg);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"}]}