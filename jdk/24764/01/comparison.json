{"files":[{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4115484 4164672 4167893\n+ * @summary Ensures that KeyEvent has right keyChar for modifier and action keys.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual CharUndefinedTest\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Frame;\n+import java.awt.TextField;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.KeyListener;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class CharUndefinedTest extends Frame implements KeyListener {\n+\n+    static String INSTRUCTIONS = \"\"\"\n+            Click on the text field inside the window named \"Check KeyChar values\".\n+            Of any of the keys mentioned in this list that exist on your keyboard\n+            press each of the listed keys once and also press them in two-key combinations such as\n+            Control-Shift or Alt-Control.\n+            The list of keys is: \"Control, Shift, Meta, Alt, Command, Option\".\n+            After that press all function keys from F1 to F12 once,\n+            Insert, Home, End, PageUp, PageDown and four arrow keys.\n+            Check the log area below. If there are no messages starting with word \"ERROR\"\n+            press \"Pass\" otherwise press \"Fail\".\n+            \"\"\";\n+\n+    public CharUndefinedTest() {\n+        super(\"Check KeyChar values\");\n+        setLayout(new BorderLayout());\n+        TextField tf = new TextField(30);\n+        tf.addKeyListener(this);\n+        add(tf, BorderLayout.CENTER);\n+        pack();\n+        tf.requestFocus();\n+    }\n+\n+    public void keyPressed(KeyEvent e) {\n+        if (e.getKeyChar() != KeyEvent.CHAR_UNDEFINED) {\n+            PassFailJFrame.log(\"ERROR: KeyPressed: keyChar = \" + e.getKeyChar() +\n+                    \" keyCode = \" + e.getKeyCode() + \" \" + e.getKeyText(e.getKeyCode()));\n+        }\n+    }\n+\n+    public void keyTyped(KeyEvent e) {\n+        if (e.getKeyChar() != KeyEvent.CHAR_UNDEFINED) {\n+            PassFailJFrame.log(\"ERROR: KeyTyped: keyChar = \" + e.getKeyChar() +\n+                    \" keyCode = \" + e.getKeyCode() + \" \" + e.getKeyText(e.getKeyCode()));\n+        }\n+    }\n+\n+    public void keyReleased(KeyEvent e) {\n+        if (e.getKeyChar() != KeyEvent.CHAR_UNDEFINED) {\n+            PassFailJFrame.log(\"ERROR: KeyReleased: keyChar = \" + e.getKeyChar() +\n+                    \" keyCode = \" + e.getKeyCode() + \" \" + e.getKeyText(e.getKeyCode()));\n+        }\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(45)\n+                .logArea(10)\n+                .testUI(CharUndefinedTest::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/CharUndefinedTest.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4218892 4191924 4199284\n+ * @summary Unable to enter some chars via european keyboard layout(s)\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ExtendedKeysTest\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Frame;\n+import java.awt.TextArea;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class ExtendedKeysTest extends Frame {\n+    static String INSTRUCTIONS = \"\"\"\n+            This test requires Swiss German input. If the Swiss German input\n+            can not be installed or configured press \"Pass\" to skip testing.\n+            Click on the text area inside the window named \"Check input\".\n+            Switch to Swiss German input and press key with \"\\\\\" on it\n+            (usually this key is above or to the left of the main \"Enter\" key).\n+            If you see a dollar sign press \"Pass\".\n+            If you see any other character or question mark press \"Fail\".\n+            \"\"\";\n+\n+    public ExtendedKeysTest() {\n+        super(\"Check input\");\n+        setLayout(new BorderLayout());\n+        add(new TextArea(20, 20), \"Center\");\n+        pack();\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(45)\n+                .logArea(10)\n+                .testUI(ExtendedKeysTest::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/ExtendedKeysTest.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4093998\n+ * @summary keyDown not called on subclasses of Component\n+ * @key headful\n+ * @run main KeyDownCaptureTest\n+ *\/\n+\n+import java.awt.AWTException;\n+import java.awt.BorderLayout;\n+import java.awt.Canvas;\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.KeyListener;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+public class KeyDownCaptureTest extends Frame implements KeyListener {\n+    static AtomicBoolean passed = new AtomicBoolean(false);\n+\n+    public KeyDownCaptureTest() {\n+        super(\"Key Down Capture Test\");\n+    }\n+\n+    public void initUI() {\n+        setLayout (new BorderLayout());\n+        setSize(200, 200);\n+        setLocationRelativeTo(null);\n+        Canvas canvas = new Canvas();\n+        canvas.setBackground(Color.RED);\n+        canvas.addKeyListener(this);\n+        add(canvas, BorderLayout.CENTER);\n+        setVisible(true);\n+    }\n+\n+    public void middle(Point p) {\n+        Point loc = getLocationOnScreen();\n+        Dimension size = getSize();\n+        p.setLocation(loc.x + (size.width \/ 2), loc.y + (size.height \/ 2));\n+    }\n+\n+    @Override\n+    public void keyTyped(KeyEvent ignore) {}\n+\n+    @Override\n+    public void keyPressed(KeyEvent e) {\n+        passed.set(true);\n+    }\n+\n+    @Override\n+    public void keyReleased(KeyEvent ignore) {}\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException, AWTException {\n+        KeyDownCaptureTest test = new KeyDownCaptureTest();\n+        try {\n+            EventQueue.invokeAndWait((test::initUI));\n+            Robot robot = new Robot();\n+            robot.setAutoDelay(50);\n+            robot.delay(500);\n+            robot.waitForIdle();\n+            Point target = new Point();\n+            EventQueue.invokeAndWait(() -> {\n+                test.middle(target);\n+            });\n+            robot.mouseMove(target.x, target.y);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.keyPress(KeyEvent.VK_SPACE);\n+            robot.keyRelease(KeyEvent.VK_SPACE);\n+            robot.delay(100);\n+            robot.waitForIdle();\n+            if (!passed.get()) {\n+                throw new RuntimeException(\"KeyPressed has not arrived to canvas\");\n+            }\n+        } finally {\n+            if (test != null) {\n+                EventQueue.invokeAndWait(test::dispose);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/KeyDownCaptureTest.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"},{"patch":"@@ -0,0 +1,124 @@\n+\/*\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4397557\n+ * @summary Check that focused lightweight component gets key events\n+ *          even if mouse is outside of it or on top of heavyweight component\n+ * @key headful\n+ * @run main KeyEventToLightweight\n+ *\/\n+\n+import java.awt.AWTException;\n+import java.awt.Button;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyAdapter;\n+import java.awt.event.KeyEvent;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import javax.swing.JButton;\n+\n+public class KeyEventToLightweight extends Frame {\n+    JButton lwbutton = new JButton(\"Select Me\");\n+    Button hwbutton = new Button(\"Heavyweight\");\n+\n+    AtomicBoolean aTyped = new AtomicBoolean(false);\n+    AtomicBoolean bTyped = new AtomicBoolean(false);\n+    AtomicBoolean cTyped = new AtomicBoolean(false);\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException, AWTException {\n+        KeyEventToLightweight test = new KeyEventToLightweight();\n+        try {\n+            EventQueue.invokeAndWait(test::initUI);\n+            test.performTest();\n+        } finally {\n+            EventQueue.invokeAndWait(test::dispose);\n+        }\n+    }\n+\n+    public void initUI() {\n+        this.setLayout(new FlowLayout());\n+        add(lwbutton);\n+        add(hwbutton);\n+        setSize(200, 200);\n+        setLocationRelativeTo(null);\n+        lwbutton.addKeyListener(new KeyAdapter() {\n+            public void keyPressed(KeyEvent e) {\n+                if (e.getKeyCode() == KeyEvent.VK_A) {\n+                    aTyped.set(true);\n+                } else if (e.getKeyCode() == KeyEvent.VK_B) {\n+                    bTyped.set(true);\n+                } else if (e.getKeyCode() == KeyEvent.VK_C) {\n+                    cTyped.set(true);\n+                }\n+            }\n+        });\n+        setVisible(true);\n+    }\n+\n+    public void middleOf(Component c, Point p) {\n+        Point loc = c.getLocationOnScreen();\n+        Dimension size = c.getSize();\n+        p.setLocation(loc.x + (size.width \/ 2), loc.y + (size.height \/ 2));\n+    }\n+\n+    public void performTest() throws AWTException {\n+        Robot robot = new Robot();\n+        robot.setAutoDelay(50);\n+        robot.delay(500);\n+        robot.waitForIdle();\n+        Point target = new Point();\n+        middleOf(lwbutton, target);\n+        robot.mouseMove(target.x, target.y);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.waitForIdle();\n+        robot.delay(500);\n+        robot.keyPress(KeyEvent.VK_A);\n+        robot.keyRelease(KeyEvent.VK_A);\n+        robot.waitForIdle();\n+        robot.mouseMove(target.x - 200, target.y);\n+        robot.keyPress(KeyEvent.VK_B);\n+        robot.keyRelease(KeyEvent.VK_B);\n+        robot.waitForIdle();\n+        robot.delay(500);\n+        middleOf(hwbutton, target);\n+        robot.mouseMove(target.x, target.y);\n+        robot.keyPress(KeyEvent.VK_C);\n+        robot.keyRelease(KeyEvent.VK_C);\n+        if (!aTyped.get() || !bTyped.get() || !cTyped.get()) {\n+            throw new RuntimeException(\"Key event was not delivered, case 1: \"\n+                    + aTyped.get() + \", case 2: \" + bTyped.get() + \", case 3: \"\n+                    + cTyped.get());\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/KeyEventToLightweight.java","additions":124,"deletions":0,"binary":false,"changes":124,"status":"added"},{"patch":"@@ -0,0 +1,134 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4193779 4174399\n+ * @summary Ensures that KeyEvents have the right modifiers set\n+ * @library \/java\/awt\/regtesthelpers \/test\/lib\n+ * @build PassFailJFrame jdk.test.lib.Platform\n+ * @run main\/manual KeyModifiers\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Frame;\n+import java.awt.TextField;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.KeyListener;\n+import java.lang.reflect.InvocationTargetException;\n+\n+import jdk.test.lib.Platform;\n+\n+\n+public class KeyModifiers extends Frame implements KeyListener {\n+    public KeyModifiers() {\n+        super(\"Check KeyChar values\");\n+        setLayout(new BorderLayout());\n+        TextField tf = new TextField(30);\n+        tf.addKeyListener(this);\n+        add(tf, BorderLayout.CENTER);\n+        pack();\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+\n+        String keys;\n+        if (Platform.isWindows()) {\n+            keys = \"\\\"Shift-n\\\", \\\"Alt-n\\\"\\n\";\n+        } else if (Platform.isOSX()) {\n+            keys = \"\\\"Shift-n\\\", \\\"Alt-n\\\", \\\"Command-n\\\"\\n\";\n+        } else {\n+            keys = \"\\\"Shift-n\\\", \\\"Alt-n\\\", \\\"Meta-n\\\"\\n\";\n+        }\n+\n+        String INSTRUCTIONS1 = \"\"\"\n+                Click on the text field in the window named \"Check KeyChar values\"\n+                and type the following key combinations:\n+                \"\"\";\n+        String INSTRUCTIONS2 = \"\"\"\n+                After each combination check that the KeyPressed and KeyTyped modifiers\n+                are correctly displayed. If modifiers are correct press \"Pass\",\n+                otherwise press \"Fail\".\n+                \"\"\";\n+        PassFailJFrame.builder()\n+                .title(\"KeyModifiers Test Instructions\")\n+                .instructions(INSTRUCTIONS1 + keys + INSTRUCTIONS2)\n+                .columns(45)\n+                .logArea(10)\n+                .testUI(KeyModifiers::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public void keyPressed(KeyEvent evt) {\n+        int kc = evt.getKeyCode();\n+\n+        if (kc == KeyEvent.VK_CONTROL) {\n+            return;\n+        }\n+\n+        if ((kc == KeyEvent.VK_SHIFT) || (kc == KeyEvent.VK_META) ||\n+                (kc == KeyEvent.VK_ALT) || (kc == KeyEvent.VK_ALT_GRAPH)) {\n+            PassFailJFrame.log(\"Key pressed= \" + KeyEvent.getKeyText(kc) +\n+                    \"   modifiers = \" + InputEvent.getModifiersExText(evt.getModifiersEx()));\n+        } else {\n+            PassFailJFrame.log(\"Key pressed = \" + evt.getKeyChar() +\n+                    \"   modifiers = \" + InputEvent.getModifiersExText(evt.getModifiersEx()));\n+        }\n+    }\n+\n+    public void keyTyped(KeyEvent evt) {\n+        int kc = evt.getKeyCode();\n+\n+        if (kc == KeyEvent.VK_CONTROL) {\n+            return;\n+        }\n+\n+        if ((kc == KeyEvent.VK_SHIFT) || (kc == KeyEvent.VK_META) ||\n+                (kc == KeyEvent.VK_ALT) || (kc == KeyEvent.VK_ALT_GRAPH)) {\n+            PassFailJFrame.log(\"Key typed = \" + KeyEvent.getKeyText(kc) +\n+                    \"   modifiers = \" + InputEvent.getModifiersExText(evt.getModifiersEx()));\n+        } else {\n+            PassFailJFrame.log(\"Key typed = \" + evt.getKeyChar() +\n+                    \"   modifiers = \" + InputEvent.getModifiersExText(evt.getModifiersEx()));\n+        }\n+    }\n+\n+    public void keyReleased(KeyEvent evt) {\n+        int kc = evt.getKeyCode();\n+\n+        if (kc == KeyEvent.VK_CONTROL)\n+            return;\n+\n+        if ((kc == KeyEvent.VK_SHIFT) || (kc == KeyEvent.VK_META) ||\n+                (kc == KeyEvent.VK_ALT) || (kc == KeyEvent.VK_ALT_GRAPH)) {\n+            PassFailJFrame.log(\"Key = released \" + KeyEvent.getKeyText(kc) +\n+                    \"   modifiers = \" + InputEvent.getModifiersExText(evt.getModifiersEx()));\n+        } else {\n+            PassFailJFrame.log(\"Key released = \" + evt.getKeyChar() +\n+                    \"   modifiers = \" + InputEvent.getModifiersExText(evt.getModifiersEx()));\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/KeyModifiers.java","additions":134,"deletions":0,"binary":false,"changes":134,"status":"added"}]}