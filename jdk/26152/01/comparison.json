{"files":[{"patch":"@@ -177,0 +177,1 @@\n+  case Interpreter::java_lang_math_sinh:\n","filename":"src\/hotspot\/cpu\/arm\/templateInterpreterGenerator_arm.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1092,0 +1092,1 @@\n+    case Interpreter::java_lang_math_sinh : \/* run interpreted *\/ break;\n","filename":"src\/hotspot\/cpu\/ppc\/templateInterpreterGenerator_ppc.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1242,0 +1242,1 @@\n+    case Interpreter::java_lang_math_sinh : \/* run interpreted *\/ break;\n","filename":"src\/hotspot\/cpu\/s390\/templateInterpreterGenerator_s390.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -723,2 +723,2 @@\n-      x->id() == vmIntrinsics::_dlog10 || x->id() == vmIntrinsics::_dtanh ||\n-      x->id() == vmIntrinsics::_dcbrt\n+      x->id() == vmIntrinsics::_dlog10 || x->id() == vmIntrinsics::_dsinh ||\n+      x->id() == vmIntrinsics::_dtanh || x->id() == vmIntrinsics::_dcbrt\n@@ -838,0 +838,6 @@\n+    case vmIntrinsics::_dsinh:\n+      assert(StubRoutines::dsinh() != nullptr, \"sinh intrinsic not found\");\n+      if (StubRoutines::dsinh() != nullptr) {\n+        __ call_runtime_leaf(StubRoutines::dsinh(), getThreadTemp(), result_reg, cc->args());\n+      }\n+      break;\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRGenerator_x86.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -3692,0 +3692,3 @@\n+    if (vmIntrinsics::is_intrinsic_available(vmIntrinsics::_dsinh)) {\n+      StubRoutines::_dsinh = generate_libmSinh(); \/\/ from stubGenerator_x86_64_sinh.cpp\n+    }\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -558,0 +558,1 @@\n+  address generate_libmSinh();\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,525 @@\n+\/*\n+ * Copyright (c) 2025, Intel Corporation. All rights reserved.\n+ * Intel Math Library (LIBM) Source Code\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"macroAssembler_x86.hpp\"\n+#include \"stubGenerator_x86_64.hpp\"\n+\n+\/******************************************************************************\/\n+\/\/                     ALGORITHM DESCRIPTION\n+\/\/                     ---------------------\n+\/\/\n+\/\/ sinh(x)=(exp(x)-exp(-x))\/2\n+\/\/\n+\/\/ Let |x|=xH+xL (upper 26 bits, lower 27 bits)\n+\/\/ log2(e) rounded to 26 bits (high part) plus a double precision low part is\n+\/\/         L2EH+L2EL (upper 26, lower 53 bits)\n+\/\/\n+\/\/ Let xH*L2EH=k+f+r`, where (k+f)*2^7=int(xH*L2EH*2^7),\n+\/\/                             f=0.b1 b2 ... b7, k integer\n+\/\/ 2^f is approximated as Tp[f]+Dp[f], and 2^{-f} as Tn[f]+Dn[f]\n+\/\/ Tp stores the high 53 bits, Dp stores (2^f-Tp[f]) rounded to double precision\n+\/\/\n+\/\/ e^|x|=2^{k+f}*2^r, r=r`+xL*L2EH+|x|*L2EL, |r|<2^{-8}+2^{-14},\n+\/\/                      for |x| in [23\/64,3*2^7)\n+\/\/ e^{-|x|}=2^{-k-f}*2^{-r}\n+\/\/\n+\/\/ e^|x| is approximated as 2^k*Tp+2^k*Tp*c1*r(1+c2*r+..+c5*r^4)+2^k*Dp=\n+\/\/                          =2^k*Tp+2^k*Tp*P15+2^k*Dp\n+\/\/ e^{-|x|} approximated as 2^{-k}*Tn-2^{-k}*Tn*c1*r(1-c2*r+..+c5*r^4)+2^{-k}*Dn\n+\/\/\n+\/\/ For |x| in [1\/8, 3*2^7), sinh(x) is formed as\n+\/\/     RN(2^k*Tp-2^{-k}*Tn)+2^k*Tp*P15-2^{-k}*Tn*P`15-2^{-k}*TnL-2^{-k}*Dn+2^k*Dp\n+\/\/\n+\/\/ For x in (3*2^7, 3*2^8), sign(x)*(e^|x|)\/2 is returned, and\n+\/\/ the result is checked for overflow.\n+\/\/\n+\/\/ For |x|<23\/64, a Taylor polynomial expansion is used (degree 13)\n+\/\/ To reduce rounding errors, the p3*x^3 term is computed as\n+\/\/    (p3*xh^3)_high+[(p3*xl*(3*x*xh+xl^2))+(p3*xh^3)_low],\n+\/\/ where x=xh+xl, (xh are the leading 17 bits of x), and\n+\/\/    (p3*xh^3)_high=RN(x+p3*xh^3)-x\n+\/\/\n+\/\/ Error bound:\n+\/\/  0.51 ulp\n+\/\/\n+\/\/ Special cases:\n+\/\/  sinh(NaN) = quiet NaN, and raise invalid exception\n+\/\/  sinh(+\/-INF) = +\/-INF\n+\/\/  sinh(+\/-0) = +\/-0\n+\/******************************************************************************\/\n+\n+ATTRIBUTE_ALIGNED(8) static const juint _HALFMASK[] =\n+{\n+    0xF8000000UL, 0x7FFFFFFFUL\n+};\n+\n+ATTRIBUTE_ALIGNED(16) static const juint _MASK3[] =\n+{\n+    0x00000000UL, 0xFFFFFFF0UL, 0x00000000UL, 0xFFFFFFF0UL\n+};\n+\n+ATTRIBUTE_ALIGNED(16) static const juint _L2E[] =\n+{\n+    0x60000000UL, 0x40671547UL, 0xF85DDF44UL, 0x3EC4AE0BUL\n+};\n+\n+ATTRIBUTE_ALIGNED(16) static const juint _Shifter[] =\n+{\n+    0x00000000UL, 0x43380000UL, 0x00000000UL, 0xC3380000UL\n+};\n+\n+ATTRIBUTE_ALIGNED(16) static const juint _cv[] =\n+{\n+    0xD704A0C0UL, 0x3E3C6B08UL, 0xD704A0C0UL, 0xBE3C6B08UL, 0xFEFA39EFUL,\n+    0x3F662E42UL, 0xFEFA39EFUL, 0xBF662E42UL, 0x7F907D8BUL, 0x3D9F8445UL,\n+    0x7F907D8BUL, 0x3D9F8445UL, 0xFFAC83B4UL, 0x3ED47FD3UL, 0xFFAC83B4UL,\n+    0x3ED47FD3UL, 0xFEFA39EFUL, 0x3F762E42UL, 0xFEFA39EFUL, 0x3F762E42UL\n+};\n+\n+ATTRIBUTE_ALIGNED(16) static const juint _pv[] =\n+{\n+    0x13A86D08UL, 0x3DE61246UL, 0xA556C732UL, 0x3EC71DE3UL, 0x11111111UL,\n+    0x3F811111UL, 0x55555555UL, 0x3FC55555UL, 0x67F544E1UL, 0x3E5AE645UL,\n+    0x1A01A019UL, 0x3F2A01A0UL\n+};\n+\n+ATTRIBUTE_ALIGNED(16) static const juint _T2f[] =\n+{\n+    0x00000000UL, 0x3FF00000UL, 0x00000000UL, 0x00000000UL, 0xA9FB3335UL, 0x3FF0163DUL,\n+    0x9AB8CDB7UL, 0x3C9B6129UL, 0x3E778061UL, 0x3FF02C9AUL, 0x535B085DUL, 0xBC719083UL,\n+    0xE86E7F85UL, 0x3FF04315UL, 0x1977C96EUL, 0xBC90A31CUL, 0xD3158574UL, 0x3FF059B0UL,\n+    0xA475B465UL, 0x3C8D73E2UL, 0x29DDF6DEUL, 0x3FF0706BUL, 0xE2B13C27UL, 0xBC8C91DFUL,\n+    0x18759BC8UL, 0x3FF08745UL, 0x4BB284FFUL, 0x3C6186BEUL, 0xCAC6F383UL, 0x3FF09E3EUL,\n+    0x18316136UL, 0x3C914878UL, 0x6CF9890FUL, 0x3FF0B558UL, 0x4ADC610BUL, 0x3C98A62EUL,\n+    0x2B7247F7UL, 0x3FF0CC92UL, 0x16E24F71UL, 0x3C901EDCUL, 0x32D3D1A2UL, 0x3FF0E3ECUL,\n+    0x27C57B52UL, 0x3C403A17UL, 0xAFFED31BUL, 0x3FF0FB66UL, 0xC44EBD7BUL, 0xBC6B9BEDUL,\n+    0xD0125B51UL, 0x3FF11301UL, 0x39449B3AUL, 0xBC96C510UL, 0xC06C31CCUL, 0x3FF12ABDUL,\n+    0xB36CA5C7UL, 0xBC51B514UL, 0xAEA92DE0UL, 0x3FF1429AUL, 0x9AF1369EUL, 0xBC932FBFUL,\n+    0xC8A58E51UL, 0x3FF15A98UL, 0xB9EEAB0AUL, 0x3C82406AUL, 0x3C7D517BUL, 0x3FF172B8UL,\n+    0xB9D78A76UL, 0xBC819041UL, 0x388C8DEAUL, 0x3FF18AF9UL, 0xD1970F6CUL, 0xBC911023UL,\n+    0xEB6FCB75UL, 0x3FF1A35BUL, 0x7B4968E4UL, 0x3C8E5B4CUL, 0x84045CD4UL, 0x3FF1BBE0UL,\n+    0x352EF607UL, 0xBC995386UL, 0x3168B9AAUL, 0x3FF1D487UL, 0x00A2643CUL, 0x3C9E016EUL,\n+    0x22FCD91DUL, 0x3FF1ED50UL, 0x027BB78CUL, 0xBC91DF98UL, 0x88628CD6UL, 0x3FF2063BUL,\n+    0x814A8495UL, 0x3C8DC775UL, 0x917DDC96UL, 0x3FF21F49UL, 0x9494A5EEUL, 0x3C82A97EUL,\n+    0x6E756238UL, 0x3FF2387AUL, 0xB6C70573UL, 0x3C99B07EUL, 0x4FB2A63FUL, 0x3FF251CEUL,\n+    0xBEF4F4A4UL, 0x3C8AC155UL, 0x65E27CDDUL, 0x3FF26B45UL, 0x9940E9D9UL, 0x3C82BD33UL,\n+    0xE1F56381UL, 0x3FF284DFUL, 0x8C3F0D7EUL, 0xBC9A4C3AUL, 0xF51FDEE1UL, 0x3FF29E9DUL,\n+    0xAFAD1255UL, 0x3C8612E8UL, 0xD0DAD990UL, 0x3FF2B87FUL, 0xD6381AA4UL, 0xBC410ADCUL,\n+    0xA6E4030BUL, 0x3FF2D285UL, 0x54DB41D5UL, 0x3C900247UL, 0xA93E2F56UL, 0x3FF2ECAFUL,\n+    0x45D52383UL, 0x3C71CA0FUL, 0x0A31B715UL, 0x3FF306FEUL, 0xD23182E4UL, 0x3C86F46AUL,\n+    0xFC4CD831UL, 0x3FF32170UL, 0x8E18047CUL, 0x3C8A9CE7UL, 0xB26416FFUL, 0x3FF33C08UL,\n+    0x843659A6UL, 0x3C932721UL, 0x5F929FF1UL, 0x3FF356C5UL, 0x5C4E4628UL, 0xBC8B5CEEUL,\n+    0x373AA9CBUL, 0x3FF371A7UL, 0xBF42EAE2UL, 0xBC963AEAUL, 0x6D05D866UL, 0x3FF38CAEUL,\n+    0x3C9904BDUL, 0xBC9E958DUL, 0x34E59FF7UL, 0x3FF3A7DBUL, 0xD661F5E3UL, 0xBC75E436UL,\n+    0xC313A8E5UL, 0x3FF3C32DUL, 0x375D29C3UL, 0xBC9EFFF8UL, 0x4C123422UL, 0x3FF3DEA6UL,\n+    0x11F09EBCUL, 0x3C8ADA09UL, 0x04AC801CUL, 0x3FF3FA45UL, 0xF956F9F3UL, 0xBC97D023UL,\n+    0x21F72E2AUL, 0x3FF4160AUL, 0x1C309278UL, 0xBC5EF369UL, 0xD950A897UL, 0x3FF431F5UL,\n+    0xE35F7999UL, 0xBC81C7DDUL, 0x6061892DUL, 0x3FF44E08UL, 0x04EF80D0UL, 0x3C489B7AUL,\n+    0xED1D0057UL, 0x3FF46A41UL, 0xD1648A76UL, 0x3C9C944BUL, 0xB5C13CD0UL, 0x3FF486A2UL,\n+    0xB69062F0UL, 0x3C73C1A3UL, 0xF0D7D3DEUL, 0x3FF4A32AUL, 0xF3D1BE56UL, 0x3C99CB62UL,\n+    0xD5362A27UL, 0x3FF4BFDAUL, 0xAFEC42E2UL, 0x3C7D4397UL, 0x99FDDD0DUL, 0x3FF4DCB2UL,\n+    0xBC6A7833UL, 0x3C98ECDBUL, 0x769D2CA7UL, 0x3FF4F9B2UL, 0xD25957E3UL, 0xBC94B309UL,\n+    0xA2CF6642UL, 0x3FF516DAUL, 0x69BD93EFUL, 0xBC8F7685UL, 0x569D4F82UL, 0x3FF5342BUL,\n+    0x1DB13CADUL, 0xBC807ABEUL, 0xCA5D920FUL, 0x3FF551A4UL, 0xEFEDE59BUL, 0xBC8D689CUL,\n+    0x36B527DAUL, 0x3FF56F47UL, 0x011D93ADUL, 0x3C99BB2CUL, 0xD497C7FDUL, 0x3FF58D12UL,\n+    0x5B9A1DE8UL, 0x3C8295E1UL, 0xDD485429UL, 0x3FF5AB07UL, 0x054647ADUL, 0x3C96324CUL,\n+    0x8A5946B7UL, 0x3FF5C926UL, 0x816986A2UL, 0x3C3C4B1BUL, 0x15AD2148UL, 0x3FF5E76FUL,\n+    0x3080E65EUL, 0x3C9BA6F9UL, 0xB976DC09UL, 0x3FF605E1UL, 0x9B56DE47UL, 0xBC93E242UL,\n+    0xB03A5585UL, 0x3FF6247EUL, 0x7E40B497UL, 0xBC9383C1UL, 0x34CCC320UL, 0x3FF64346UL,\n+    0x759D8933UL, 0xBC8C483CUL, 0x82552225UL, 0x3FF66238UL, 0x87591C34UL, 0xBC9BB609UL,\n+    0xD44CA973UL, 0x3FF68155UL, 0x44F73E65UL, 0x3C6038AEUL, 0x667F3BCDUL, 0x3FF6A09EUL,\n+    0x13B26456UL, 0xBC9BDD34UL, 0x750BDABFUL, 0x3FF6C012UL, 0x67FF0B0DUL, 0xBC728956UL,\n+    0x3C651A2FUL, 0x3FF6DFB2UL, 0x683C88ABUL, 0xBC6BBE3AUL, 0xF9519484UL, 0x3FF6FF7DUL,\n+    0x25860EF6UL, 0xBC883C0FUL, 0xE8EC5F74UL, 0x3FF71F75UL, 0x86887A99UL, 0xBC816E47UL,\n+    0x48A58174UL, 0x3FF73F9AUL, 0x6C65D53CUL, 0xBC90A8D9UL, 0x564267C9UL, 0x3FF75FEBUL,\n+    0x57316DD3UL, 0xBC902459UL, 0x4FDE5D3FUL, 0x3FF78069UL, 0x0A02162DUL, 0x3C9866B8UL,\n+    0x73EB0187UL, 0x3FF7A114UL, 0xEE04992FUL, 0xBC841577UL, 0x0130C132UL, 0x3FF7C1EDUL,\n+    0xD1164DD6UL, 0x3C9F124CUL, 0x36CF4E62UL, 0x3FF7E2F3UL, 0xBA15797EUL, 0x3C705D02UL,\n+    0x543E1A12UL, 0x3FF80427UL, 0x626D972BUL, 0xBC927C86UL, 0x994CCE13UL, 0x3FF82589UL,\n+    0xD41532D8UL, 0xBC9D4C1DUL, 0x4623C7ADUL, 0x3FF8471AUL, 0xA341CDFBUL, 0xBC88D684UL,\n+    0x9B4492EDUL, 0x3FF868D9UL, 0x9BD4F6BAUL, 0xBC9FC6F8UL, 0xD98A6699UL, 0x3FF88AC7UL,\n+    0xF37CB53AUL, 0x3C9994C2UL, 0x422AA0DBUL, 0x3FF8ACE5UL, 0x56864B27UL, 0x3C96E9F1UL,\n+    0x16B5448CUL, 0x3FF8CF32UL, 0x32E9E3AAUL, 0xBC70D55EUL, 0x99157736UL, 0x3FF8F1AEUL,\n+    0xA2E3976CUL, 0x3C85CC13UL, 0x0B91FFC6UL, 0x3FF9145BUL, 0x2E582524UL, 0xBC9DD679UL,\n+    0xB0CDC5E5UL, 0x3FF93737UL, 0x81B57EBCUL, 0xBC675FC7UL, 0xCBC8520FUL, 0x3FF95A44UL,\n+    0x96A5F039UL, 0xBC764B7CUL, 0x9FDE4E50UL, 0x3FF97D82UL, 0x7C1B85D1UL, 0xBC9D185BUL,\n+    0x70CA07BAUL, 0x3FF9A0F1UL, 0x91CEE632UL, 0xBC9173BDUL, 0x82A3F090UL, 0x3FF9C491UL,\n+    0xB071F2BEUL, 0x3C7C7C46UL, 0x19E32323UL, 0x3FF9E863UL, 0x78E64C6EUL, 0x3C7824CAUL,\n+    0x7B5DE565UL, 0x3FFA0C66UL, 0x5D1CD533UL, 0xBC935949UL, 0xEC4A2D33UL, 0x3FFA309BUL,\n+    0x7DDC36ABUL, 0x3C96305CUL, 0xB23E255DUL, 0x3FFA5503UL, 0xDB8D41E1UL, 0xBC9D2F6EUL,\n+    0x1330B358UL, 0x3FFA799EUL, 0xCAC563C7UL, 0x3C9BCB7EUL, 0x5579FDBFUL, 0x3FFA9E6BUL,\n+    0x0EF7FD31UL, 0x3C90FAC9UL, 0xBFD3F37AUL, 0x3FFAC36BUL, 0xCAE76CD0UL, 0xBC8F9234UL,\n+    0x995AD3ADUL, 0x3FFAE89FUL, 0x345DCC81UL, 0x3C97A1CDUL, 0x298DB666UL, 0x3FFB0E07UL,\n+    0x4C80E425UL, 0xBC9BDEF5UL, 0xB84F15FBUL, 0x3FFB33A2UL, 0x3084D708UL, 0xBC62805EUL,\n+    0x8DE5593AUL, 0x3FFB5972UL, 0xBBBA6DE3UL, 0xBC9C71DFUL, 0xF2FB5E47UL, 0x3FFB7F76UL,\n+    0x7E54AC3BUL, 0xBC75584FUL, 0x30A1064AUL, 0x3FFBA5B0UL, 0x0E54292EUL, 0xBC9EFCD3UL,\n+    0x904BC1D2UL, 0x3FFBCC1EUL, 0x7A2D9E84UL, 0x3C823DD0UL, 0x5BD71E09UL, 0x3FFBF2C2UL,\n+    0x3F6B9C73UL, 0xBC9EFDCAUL, 0xDD85529CUL, 0x3FFC199BUL, 0x895048DDUL, 0x3C811065UL,\n+    0x5FFFD07AUL, 0x3FFC40ABUL, 0xE083C60AUL, 0x3C9B4537UL, 0x2E57D14BUL, 0x3FFC67F1UL,\n+    0xFF483CADUL, 0x3C92884DUL, 0x9406E7B5UL, 0x3FFC8F6DUL, 0x48805C44UL, 0x3C71ACBCUL,\n+    0xDCEF9069UL, 0x3FFCB720UL, 0xD1E949DCUL, 0x3C7503CBUL, 0x555DC3FAUL, 0x3FFCDF0BUL,\n+    0x53829D72UL, 0xBC8DD83BUL, 0x4A07897CUL, 0x3FFD072DUL, 0x43797A9CUL, 0xBC9CBC37UL,\n+    0x080D89F2UL, 0x3FFD2F87UL, 0x719D8578UL, 0xBC9D487BUL, 0xDCFBA487UL, 0x3FFD5818UL,\n+    0xD75B3707UL, 0x3C82ED02UL, 0x16C98398UL, 0x3FFD80E3UL, 0x8BEDDFE8UL, 0xBC911EC1UL,\n+    0x03DB3285UL, 0x3FFDA9E6UL, 0x696DB532UL, 0x3C9C2300UL, 0xF301B460UL, 0x3FFDD321UL,\n+    0x78F018C3UL, 0x3C92DA57UL, 0x337B9B5FUL, 0x3FFDFC97UL, 0x4F184B5CUL, 0xBC91A5CDUL,\n+    0x14F5A129UL, 0x3FFE2646UL, 0x817A1496UL, 0xBC97B627UL, 0xE78B3FF6UL, 0x3FFE502EUL,\n+    0x80A9CC8FUL, 0x3C839E89UL, 0xFBC74C83UL, 0x3FFE7A51UL, 0xCA0C8DE2UL, 0x3C92D522UL,\n+    0xA2A490DAUL, 0x3FFEA4AFUL, 0x179C2893UL, 0xBC9E9C23UL, 0x2D8E67F1UL, 0x3FFECF48UL,\n+    0xB411AD8CUL, 0xBC9C93F3UL, 0xEE615A27UL, 0x3FFEFA1BUL, 0x86A4B6B0UL, 0x3C9DC7F4UL,\n+    0x376BBA97UL, 0x3FFF252BUL, 0xBF0D8E43UL, 0x3C93A1A5UL, 0x5B6E4540UL, 0x3FFF5076UL,\n+    0x2DD8A18BUL, 0x3C99D3E1UL, 0xAD9CBE14UL, 0x3FFF7BFDUL, 0xD006350AUL, 0xBC9DBB12UL,\n+    0x819E90D8UL, 0x3FFFA7C1UL, 0xF3A5931EUL, 0x3C874853UL, 0x2B8F71F1UL, 0x3FFFD3C2UL,\n+    0x966579E7UL, 0x3C62EB74UL\n+};\n+\n+ATTRIBUTE_ALIGNED(16) static const juint _T2_neg_f[] =\n+{\n+    0x00000000UL, 0x3FF00000UL, 0x00000000UL, 0x00000000UL, 0x2B8F71F1UL, 0x3FEFD3C2UL,\n+    0x966579E7UL, 0x3C52EB74UL, 0x819E90D8UL, 0x3FEFA7C1UL, 0xF3A5931EUL, 0x3C774853UL,\n+    0xAD9CBE14UL, 0x3FEF7BFDUL, 0xD006350AUL, 0xBC8DBB12UL, 0x5B6E4540UL, 0x3FEF5076UL,\n+    0x2DD8A18BUL, 0x3C89D3E1UL, 0x376BBA97UL, 0x3FEF252BUL, 0xBF0D8E43UL, 0x3C83A1A5UL,\n+    0xEE615A27UL, 0x3FEEFA1BUL, 0x86A4B6B0UL, 0x3C8DC7F4UL, 0x2D8E67F1UL, 0x3FEECF48UL,\n+    0xB411AD8CUL, 0xBC8C93F3UL, 0xA2A490DAUL, 0x3FEEA4AFUL, 0x179C2893UL, 0xBC8E9C23UL,\n+    0xFBC74C83UL, 0x3FEE7A51UL, 0xCA0C8DE2UL, 0x3C82D522UL, 0xE78B3FF6UL, 0x3FEE502EUL,\n+    0x80A9CC8FUL, 0x3C739E89UL, 0x14F5A129UL, 0x3FEE2646UL, 0x817A1496UL, 0xBC87B627UL,\n+    0x337B9B5FUL, 0x3FEDFC97UL, 0x4F184B5CUL, 0xBC81A5CDUL, 0xF301B460UL, 0x3FEDD321UL,\n+    0x78F018C3UL, 0x3C82DA57UL, 0x03DB3285UL, 0x3FEDA9E6UL, 0x696DB532UL, 0x3C8C2300UL,\n+    0x16C98398UL, 0x3FED80E3UL, 0x8BEDDFE8UL, 0xBC811EC1UL, 0xDCFBA487UL, 0x3FED5818UL,\n+    0xD75B3707UL, 0x3C72ED02UL, 0x080D89F2UL, 0x3FED2F87UL, 0x719D8578UL, 0xBC8D487BUL,\n+    0x4A07897CUL, 0x3FED072DUL, 0x43797A9CUL, 0xBC8CBC37UL, 0x555DC3FAUL, 0x3FECDF0BUL,\n+    0x53829D72UL, 0xBC7DD83BUL, 0xDCEF9069UL, 0x3FECB720UL, 0xD1E949DCUL, 0x3C6503CBUL,\n+    0x9406E7B5UL, 0x3FEC8F6DUL, 0x48805C44UL, 0x3C61ACBCUL, 0x2E57D14BUL, 0x3FEC67F1UL,\n+    0xFF483CADUL, 0x3C82884DUL, 0x5FFFD07AUL, 0x3FEC40ABUL, 0xE083C60AUL, 0x3C8B4537UL,\n+    0xDD85529CUL, 0x3FEC199BUL, 0x895048DDUL, 0x3C711065UL, 0x5BD71E09UL, 0x3FEBF2C2UL,\n+    0x3F6B9C73UL, 0xBC8EFDCAUL, 0x904BC1D2UL, 0x3FEBCC1EUL, 0x7A2D9E84UL, 0x3C723DD0UL,\n+    0x30A1064AUL, 0x3FEBA5B0UL, 0x0E54292EUL, 0xBC8EFCD3UL, 0xF2FB5E47UL, 0x3FEB7F76UL,\n+    0x7E54AC3BUL, 0xBC65584FUL, 0x8DE5593AUL, 0x3FEB5972UL, 0xBBBA6DE3UL, 0xBC8C71DFUL,\n+    0xB84F15FBUL, 0x3FEB33A2UL, 0x3084D708UL, 0xBC52805EUL, 0x298DB666UL, 0x3FEB0E07UL,\n+    0x4C80E425UL, 0xBC8BDEF5UL, 0x995AD3ADUL, 0x3FEAE89FUL, 0x345DCC81UL, 0x3C87A1CDUL,\n+    0xBFD3F37AUL, 0x3FEAC36BUL, 0xCAE76CD0UL, 0xBC7F9234UL, 0x5579FDBFUL, 0x3FEA9E6BUL,\n+    0x0EF7FD31UL, 0x3C80FAC9UL, 0x1330B358UL, 0x3FEA799EUL, 0xCAC563C7UL, 0x3C8BCB7EUL,\n+    0xB23E255DUL, 0x3FEA5503UL, 0xDB8D41E1UL, 0xBC8D2F6EUL, 0xEC4A2D33UL, 0x3FEA309BUL,\n+    0x7DDC36ABUL, 0x3C86305CUL, 0x7B5DE565UL, 0x3FEA0C66UL, 0x5D1CD533UL, 0xBC835949UL,\n+    0x19E32323UL, 0x3FE9E863UL, 0x78E64C6EUL, 0x3C6824CAUL, 0x82A3F090UL, 0x3FE9C491UL,\n+    0xB071F2BEUL, 0x3C6C7C46UL, 0x70CA07BAUL, 0x3FE9A0F1UL, 0x91CEE632UL, 0xBC8173BDUL,\n+    0x9FDE4E50UL, 0x3FE97D82UL, 0x7C1B85D1UL, 0xBC8D185BUL, 0xCBC8520FUL, 0x3FE95A44UL,\n+    0x96A5F039UL, 0xBC664B7CUL, 0xB0CDC5E5UL, 0x3FE93737UL, 0x81B57EBCUL, 0xBC575FC7UL,\n+    0x0B91FFC6UL, 0x3FE9145BUL, 0x2E582524UL, 0xBC8DD679UL, 0x99157736UL, 0x3FE8F1AEUL,\n+    0xA2E3976CUL, 0x3C75CC13UL, 0x16B5448CUL, 0x3FE8CF32UL, 0x32E9E3AAUL, 0xBC60D55EUL,\n+    0x422AA0DBUL, 0x3FE8ACE5UL, 0x56864B27UL, 0x3C86E9F1UL, 0xD98A6699UL, 0x3FE88AC7UL,\n+    0xF37CB53AUL, 0x3C8994C2UL, 0x9B4492EDUL, 0x3FE868D9UL, 0x9BD4F6BAUL, 0xBC8FC6F8UL,\n+    0x4623C7ADUL, 0x3FE8471AUL, 0xA341CDFBUL, 0xBC78D684UL, 0x994CCE13UL, 0x3FE82589UL,\n+    0xD41532D8UL, 0xBC8D4C1DUL, 0x543E1A12UL, 0x3FE80427UL, 0x626D972BUL, 0xBC827C86UL,\n+    0x36CF4E62UL, 0x3FE7E2F3UL, 0xBA15797EUL, 0x3C605D02UL, 0x0130C132UL, 0x3FE7C1EDUL,\n+    0xD1164DD6UL, 0x3C8F124CUL, 0x73EB0187UL, 0x3FE7A114UL, 0xEE04992FUL, 0xBC741577UL,\n+    0x4FDE5D3FUL, 0x3FE78069UL, 0x0A02162DUL, 0x3C8866B8UL, 0x564267C9UL, 0x3FE75FEBUL,\n+    0x57316DD3UL, 0xBC802459UL, 0x48A58174UL, 0x3FE73F9AUL, 0x6C65D53CUL, 0xBC80A8D9UL,\n+    0xE8EC5F74UL, 0x3FE71F75UL, 0x86887A99UL, 0xBC716E47UL, 0xF9519484UL, 0x3FE6FF7DUL,\n+    0x25860EF6UL, 0xBC783C0FUL, 0x3C651A2FUL, 0x3FE6DFB2UL, 0x683C88ABUL, 0xBC5BBE3AUL,\n+    0x750BDABFUL, 0x3FE6C012UL, 0x67FF0B0DUL, 0xBC628956UL, 0x667F3BCDUL, 0x3FE6A09EUL,\n+    0x13B26456UL, 0xBC8BDD34UL, 0xD44CA973UL, 0x3FE68155UL, 0x44F73E65UL, 0x3C5038AEUL,\n+    0x82552225UL, 0x3FE66238UL, 0x87591C34UL, 0xBC8BB609UL, 0x34CCC320UL, 0x3FE64346UL,\n+    0x759D8933UL, 0xBC7C483CUL, 0xB03A5585UL, 0x3FE6247EUL, 0x7E40B497UL, 0xBC8383C1UL,\n+    0xB976DC09UL, 0x3FE605E1UL, 0x9B56DE47UL, 0xBC83E242UL, 0x15AD2148UL, 0x3FE5E76FUL,\n+    0x3080E65EUL, 0x3C8BA6F9UL, 0x8A5946B7UL, 0x3FE5C926UL, 0x816986A2UL, 0x3C2C4B1BUL,\n+    0xDD485429UL, 0x3FE5AB07UL, 0x054647ADUL, 0x3C86324CUL, 0xD497C7FDUL, 0x3FE58D12UL,\n+    0x5B9A1DE8UL, 0x3C7295E1UL, 0x36B527DAUL, 0x3FE56F47UL, 0x011D93ADUL, 0x3C89BB2CUL,\n+    0xCA5D920FUL, 0x3FE551A4UL, 0xEFEDE59BUL, 0xBC7D689CUL, 0x569D4F82UL, 0x3FE5342BUL,\n+    0x1DB13CADUL, 0xBC707ABEUL, 0xA2CF6642UL, 0x3FE516DAUL, 0x69BD93EFUL, 0xBC7F7685UL,\n+    0x769D2CA7UL, 0x3FE4F9B2UL, 0xD25957E3UL, 0xBC84B309UL, 0x99FDDD0DUL, 0x3FE4DCB2UL,\n+    0xBC6A7833UL, 0x3C88ECDBUL, 0xD5362A27UL, 0x3FE4BFDAUL, 0xAFEC42E2UL, 0x3C6D4397UL,\n+    0xF0D7D3DEUL, 0x3FE4A32AUL, 0xF3D1BE56UL, 0x3C89CB62UL, 0xB5C13CD0UL, 0x3FE486A2UL,\n+    0xB69062F0UL, 0x3C63C1A3UL, 0xED1D0057UL, 0x3FE46A41UL, 0xD1648A76UL, 0x3C8C944BUL,\n+    0x6061892DUL, 0x3FE44E08UL, 0x04EF80D0UL, 0x3C389B7AUL, 0xD950A897UL, 0x3FE431F5UL,\n+    0xE35F7999UL, 0xBC71C7DDUL, 0x21F72E2AUL, 0x3FE4160AUL, 0x1C309278UL, 0xBC4EF369UL,\n+    0x04AC801CUL, 0x3FE3FA45UL, 0xF956F9F3UL, 0xBC87D023UL, 0x4C123422UL, 0x3FE3DEA6UL,\n+    0x11F09EBCUL, 0x3C7ADA09UL, 0xC313A8E5UL, 0x3FE3C32DUL, 0x375D29C3UL, 0xBC8EFFF8UL,\n+    0x34E59FF7UL, 0x3FE3A7DBUL, 0xD661F5E3UL, 0xBC65E436UL, 0x6D05D866UL, 0x3FE38CAEUL,\n+    0x3C9904BDUL, 0xBC8E958DUL, 0x373AA9CBUL, 0x3FE371A7UL, 0xBF42EAE2UL, 0xBC863AEAUL,\n+    0x5F929FF1UL, 0x3FE356C5UL, 0x5C4E4628UL, 0xBC7B5CEEUL, 0xB26416FFUL, 0x3FE33C08UL,\n+    0x843659A6UL, 0x3C832721UL, 0xFC4CD831UL, 0x3FE32170UL, 0x8E18047CUL, 0x3C7A9CE7UL,\n+    0x0A31B715UL, 0x3FE306FEUL, 0xD23182E4UL, 0x3C76F46AUL, 0xA93E2F56UL, 0x3FE2ECAFUL,\n+    0x45D52383UL, 0x3C61CA0FUL, 0xA6E4030BUL, 0x3FE2D285UL, 0x54DB41D5UL, 0x3C800247UL,\n+    0xD0DAD990UL, 0x3FE2B87FUL, 0xD6381AA4UL, 0xBC310ADCUL, 0xF51FDEE1UL, 0x3FE29E9DUL,\n+    0xAFAD1255UL, 0x3C7612E8UL, 0xE1F56381UL, 0x3FE284DFUL, 0x8C3F0D7EUL, 0xBC8A4C3AUL,\n+    0x65E27CDDUL, 0x3FE26B45UL, 0x9940E9D9UL, 0x3C72BD33UL, 0x4FB2A63FUL, 0x3FE251CEUL,\n+    0xBEF4F4A4UL, 0x3C7AC155UL, 0x6E756238UL, 0x3FE2387AUL, 0xB6C70573UL, 0x3C89B07EUL,\n+    0x917DDC96UL, 0x3FE21F49UL, 0x9494A5EEUL, 0x3C72A97EUL, 0x88628CD6UL, 0x3FE2063BUL,\n+    0x814A8495UL, 0x3C7DC775UL, 0x22FCD91DUL, 0x3FE1ED50UL, 0x027BB78CUL, 0xBC81DF98UL,\n+    0x3168B9AAUL, 0x3FE1D487UL, 0x00A2643CUL, 0x3C8E016EUL, 0x84045CD4UL, 0x3FE1BBE0UL,\n+    0x352EF607UL, 0xBC895386UL, 0xEB6FCB75UL, 0x3FE1A35BUL, 0x7B4968E4UL, 0x3C7E5B4CUL,\n+    0x388C8DEAUL, 0x3FE18AF9UL, 0xD1970F6CUL, 0xBC811023UL, 0x3C7D517BUL, 0x3FE172B8UL,\n+    0xB9D78A76UL, 0xBC719041UL, 0xC8A58E51UL, 0x3FE15A98UL, 0xB9EEAB0AUL, 0x3C72406AUL,\n+    0xAEA92DE0UL, 0x3FE1429AUL, 0x9AF1369EUL, 0xBC832FBFUL, 0xC06C31CCUL, 0x3FE12ABDUL,\n+    0xB36CA5C7UL, 0xBC41B514UL, 0xD0125B51UL, 0x3FE11301UL, 0x39449B3AUL, 0xBC86C510UL,\n+    0xAFFED31BUL, 0x3FE0FB66UL, 0xC44EBD7BUL, 0xBC5B9BEDUL, 0x32D3D1A2UL, 0x3FE0E3ECUL,\n+    0x27C57B52UL, 0x3C303A17UL, 0x2B7247F7UL, 0x3FE0CC92UL, 0x16E24F71UL, 0x3C801EDCUL,\n+    0x6CF9890FUL, 0x3FE0B558UL, 0x4ADC610BUL, 0x3C88A62EUL, 0xCAC6F383UL, 0x3FE09E3EUL,\n+    0x18316136UL, 0x3C814878UL, 0x18759BC8UL, 0x3FE08745UL, 0x4BB284FFUL, 0x3C5186BEUL,\n+    0x29DDF6DEUL, 0x3FE0706BUL, 0xE2B13C27UL, 0xBC7C91DFUL, 0xD3158574UL, 0x3FE059B0UL,\n+    0xA475B465UL, 0x3C7D73E2UL, 0xE86E7F85UL, 0x3FE04315UL, 0x1977C96EUL, 0xBC80A31CUL,\n+    0x3E778061UL, 0x3FE02C9AUL, 0x535B085DUL, 0xBC619083UL, 0xA9FB3335UL, 0x3FE0163DUL,\n+    0x9AB8CDB7UL, 0x3C8B6129UL\n+};\n+\n+#define __ _masm->\n+\n+address StubGenerator::generate_libmSinh() {\n+  StubGenStubId stub_id = StubGenStubId::dsinh_id;\n+  StubCodeMark mark(this, stub_id);\n+  address start = __ pc();\n+\n+  Label L_2TAG_PACKET_0_0_2, L_2TAG_PACKET_1_0_2, L_2TAG_PACKET_3_0_2, L_2TAG_PACKET_4_0_2;\n+  Label L_2TAG_PACKET_5_0_2, L_2TAG_PACKET_6_0_2;\n+  Label B1_2, B1_5;\n+\n+  address HALFMASK     = (address)_HALFMASK;\n+  address MASK3        = (address)_MASK3;\n+  address L2E          = (address)_L2E;\n+  address Shifter      = (address)_Shifter;\n+  address cv           = (address)_cv;\n+  address pv           = (address)_pv;\n+  address T2f          = (address) _T2f;\n+  address T2_neg_f     = (address) _T2_neg_f;\n+\n+  __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n+\n+  __ bind(B1_2);\n+  __ xorpd(xmm4, xmm4);\n+  __ movl(rax, 32768);\n+  __ pinsrw(xmm4, rax, 3);\n+  __ pextrw(rcx, xmm0, 3);\n+  __ andnpd(xmm4, xmm0);\n+  __ pshufd(xmm5, xmm4, 68);\n+  __ movl(rdx, 32768);\n+  __ andl(rdx, rcx);\n+  __ andl(rcx, 32767);\n+  __ subl(rcx, 16343);\n+  __ cmpl(rcx, 177);\n+  __ jcc(Assembler::aboveEqual, L_2TAG_PACKET_0_0_2); \/\/ Branch only if |x| is not in [23\/64, 3*2^8)\n+  __ movsd(xmm3, ExternalAddress(HALFMASK), r11 \/*rscratch*\/);\n+  __ movsd(xmm1, ExternalAddress(L2E), r11 \/*rscratch*\/);\n+  __ movsd(xmm2, ExternalAddress(L2E + 8), r11 \/*rscratch*\/);\n+  __ movsd(xmm6, ExternalAddress(Shifter), r11 \/*rscratch*\/);\n+  __ andpd(xmm3, xmm0);\n+  __ subsd(xmm4, xmm3);\n+  __ mulsd(xmm3, xmm1);\n+  __ mulsd(xmm2, xmm5);\n+  __ cvtsd2siq(rax, xmm3);\n+  __ shll(rdx, 3);\n+  __ orl(rax, rdx);\n+  __ movq(xmm7, xmm3);\n+  __ addsd(xmm3, xmm6);\n+  __ mulsd(xmm1, xmm4);\n+  __ xorpd(xmm5, xmm5);\n+  __ subsd(xmm3, xmm6);\n+  __ movapd(xmm4, ExternalAddress(cv), r11 \/*rscratch*\/);\n+  __ addsd(xmm2, xmm1);\n+  __ movapd(xmm6, ExternalAddress(cv + 16), r11 \/*rscratch*\/);\n+  __ subsd(xmm7, xmm3);\n+  __ movl(rdx, 32704);\n+  __ pinsrw(xmm5, rdx, 3);\n+  __ movapd(xmm1, ExternalAddress(cv + 32), r11 \/*rscratch*\/);\n+  __ addsd(xmm2, xmm7);\n+  __ movl(rdx, 127);\n+  __ andl(rdx, rax);\n+  __ addl(rdx, rdx);\n+  __ shrl(rax, 3);\n+  __ andl(rax, 65520);\n+  __ addl(rax, 16352);\n+  __ xorpd(xmm0, xmm0);\n+  __ cmpl(rcx, 161);\n+  __ jcc(Assembler::aboveEqual, L_2TAG_PACKET_1_0_2); \/\/ Branch only if |x| is not in [23\/64, 3*2^7)\n+  __ pshufd(xmm5, xmm5, 68);\n+  __ pinsrw(xmm0, rax, 3);\n+  __ pshufd(xmm0, xmm0, 68);\n+  __ psubw(xmm5, xmm0);\n+  __ lea(r8, ExternalAddress(T2f));\n+  __ mulpd(xmm0, Address(r8, rdx, Address::times_8));\n+  __ lea(r8, ExternalAddress(T2_neg_f));\n+  __ mulpd(xmm5, Address(r8, rdx, Address::times_8));\n+  __ pshufd(xmm3, xmm2, 68);\n+  __ movapd(xmm7, ExternalAddress(cv + 48), r11 \/*rscratch*\/);\n+  __ pshufd(xmm2, xmm2, 68);\n+  __ mulpd(xmm3, xmm3);\n+  __ mulpd(xmm4, xmm2);\n+  __ mulpd(xmm6, xmm2);\n+  __ mulpd(xmm2, ExternalAddress(cv + 64), r11 \/*rscratch*\/);\n+  __ mulpd(xmm1, xmm3);\n+  __ mulpd(xmm7, xmm3);\n+  __ mulpd(xmm4, xmm3);\n+  __ mulpd(xmm1, xmm3);\n+  __ addpd(xmm6, xmm7);\n+  __ movq(xmm7, xmm0);\n+  __ addpd(xmm4, xmm1);\n+  __ shufpd(xmm7, xmm5, 0);\n+  __ subpd(xmm0, xmm5);\n+  __ mulpd(xmm2, xmm7);\n+  __ addpd(xmm4, xmm6);\n+  __ subsd(xmm7, xmm0);\n+  __ mulpd(xmm4, xmm2);\n+  __ pshufd(xmm6, xmm0, 238);\n+  __ subsd(xmm7, xmm5);\n+  __ addpd(xmm4, xmm2);\n+  __ addsd(xmm7, xmm6);\n+  __ pshufd(xmm2, xmm4, 238);\n+  __ addsd(xmm2, xmm7);\n+  __ addsd(xmm2, xmm4);\n+  __ addsd(xmm0, xmm2);\n+  __ jmp(B1_5);\n+\n+  __ bind(L_2TAG_PACKET_1_0_2);\n+  __ subl(rax, 16352);\n+  __ movl(rcx, rax);\n+  __ andl(rax, 32752);\n+  __ shrl(rax, 1);\n+  __ andl(rax, 65520);\n+  __ subl(rcx, rax);\n+  __ addl(rax, 16352);\n+  __ pinsrw(xmm0, rax, 3);\n+  __ pshufd(xmm0, xmm0, 68);\n+  __ lea(r8, ExternalAddress(T2f));\n+  __ mulpd(xmm0, Address(r8, rdx, Address::times_8));\n+  __ pshufd(xmm3, xmm2, 68);\n+  __ movsd(xmm7, ExternalAddress(cv + 48), r11 \/*rscratch*\/);\n+  __ mulsd(xmm3, xmm3);\n+  __ mulsd(xmm4, xmm2);\n+  __ mulsd(xmm6, xmm2);\n+  __ mulsd(xmm2, ExternalAddress(cv + 64), r11 \/*rscratch*\/);\n+  __ mulsd(xmm1, xmm3);\n+  __ mulsd(xmm7, xmm3);\n+  __ mulsd(xmm4, xmm3);\n+  __ addl(rcx, 16368);\n+  __ pinsrw(xmm5, rcx, 3);\n+  __ mulsd(xmm1, xmm3);\n+  __ addsd(xmm6, xmm7);\n+  __ addsd(xmm4, xmm1);\n+  __ mulsd(xmm2, xmm0);\n+  __ addsd(xmm4, xmm6);\n+  __ mulsd(xmm4, xmm2);\n+  __ pshufd(xmm6, xmm0, 238);\n+  __ addsd(xmm4, xmm6);\n+  __ addsd(xmm2, xmm4);\n+  __ addsd(xmm0, xmm2);\n+  __ mulsd(xmm0, xmm5);\n+  __ jmp(B1_5);\n+\n+  __ bind(L_2TAG_PACKET_0_0_2);\n+  __ addl(rcx, 16343);\n+  __ cmpl(rcx, 16343);\n+  __ jcc(Assembler::above, L_2TAG_PACKET_3_0_2); \/\/ Branch only if |x| > 23\/64\n+  __ cmpl(rcx, 15856);\n+  __ jcc(Assembler::below, L_2TAG_PACKET_4_0_2); \/\/ Branch only if |x| < 2^-32\n+  __ movapd(xmm1, ExternalAddress(pv), r11 \/*rscratch*\/);\n+  __ pshufd(xmm6, xmm0, 68);\n+  __ mulpd(xmm5, xmm5);\n+  __ movapd(xmm2, ExternalAddress(pv + 16), r11 \/*rscratch*\/);\n+  __ pshufd(xmm7, xmm0, 68);\n+  __ movapd(xmm3, ExternalAddress(pv + 32), r11 \/*rscratch*\/);\n+  __ pshufd(xmm4, xmm0, 68);\n+  __ andpd(xmm6, ExternalAddress(MASK3), r11 \/*rscratch*\/);\n+  __ mulpd(xmm1, xmm5);\n+  __ mulsd(xmm2, xmm5);\n+  __ subpd(xmm4, xmm6);\n+  __ mulpd(xmm7, xmm5);\n+  __ addpd(xmm1, xmm3);\n+  __ pshufd(xmm3, xmm6, 68);\n+  __ mulpd(xmm5, xmm5);\n+  __ mulsd(xmm2, xmm7);\n+  __ mulpd(xmm1, xmm7);\n+  __ pshufd(xmm7, xmm0, 68);\n+  __ mulsd(xmm6, xmm6);\n+  __ addsd(xmm7, xmm7);\n+  __ mulsd(xmm4, xmm4);\n+  __ mulpd(xmm1, xmm5);\n+  __ addsd(xmm7, xmm0);\n+  __ mulsd(xmm6, xmm3);\n+  __ mulsd(xmm7, xmm3);\n+  __ pshufd(xmm3, xmm1, 238);\n+  __ mulsd(xmm1, xmm5);\n+  __ pshufd(xmm5, xmm4, 238);\n+  __ addsd(xmm3, xmm2);\n+  __ pshufd(xmm2, xmm2, 238);\n+  __ addsd(xmm7, xmm4);\n+  __ movq(xmm4, xmm0);\n+  __ mulsd(xmm6, xmm2);\n+  __ mulsd(xmm7, xmm5);\n+  __ addsd(xmm0, xmm6);\n+  __ mulsd(xmm7, xmm2);\n+  __ subsd(xmm4, xmm0);\n+  __ addsd(xmm1, xmm7);\n+  __ addsd(xmm6, xmm4);\n+  __ addsd(xmm1, xmm3);\n+  __ addsd(xmm1, xmm6);\n+  __ addsd(xmm0, xmm1);\n+  __ jmp(B1_5);\n+\n+  __ bind(L_2TAG_PACKET_4_0_2);\n+  __ cmpl(rcx, 16);\n+  __ jcc(Assembler::aboveEqual, L_2TAG_PACKET_5_0_2); \/\/ Branch only if |x| is not denormalized\n+  __ movq(xmm1, xmm0);\n+  __ mulsd(xmm1, xmm1);\n+  __ jmp(B1_5);\n+\n+  __ bind(L_2TAG_PACKET_5_0_2);\n+  __ xorpd(xmm2, xmm2);\n+  __ movl(rcx, 17392);\n+  __ pinsrw(xmm2, rcx, 3);\n+  __ xorpd(xmm3, xmm3);\n+  __ movl(rdx, 15344);\n+  __ pinsrw(xmm3, rdx, 3);\n+  __ mulsd(xmm2, xmm0);\n+  __ addsd(xmm0, xmm2);\n+  __ mulsd(xmm0, xmm3);\n+  __ jmp(B1_5);\n+\n+  __ bind(L_2TAG_PACKET_3_0_2);\n+  __ cmpl(rcx, 32752);\n+  __ jcc(Assembler::aboveEqual, L_2TAG_PACKET_6_0_2); \/\/ Branch only if |x| is INF or NaN\n+  __ xorpd(xmm0, xmm0);\n+  __ movl(rax, 32736);\n+  __ pinsrw(xmm0, rax, 3);\n+  __ orl(rax, rdx);\n+  __ pinsrw(xmm1, rax, 3);\n+  __ mulsd(xmm0, xmm1);\n+  __ jmp(B1_5);\n+\n+  __ bind(L_2TAG_PACKET_6_0_2);\n+  __ xorpd(xmm1, xmm1);\n+  __ movl(rax, 32768);\n+  __ pinsrw(xmm1, rax, 3);\n+  __ andnpd(xmm1, xmm0);\n+  __ mulsd(xmm0, xmm1);\n+\n+  __ bind(B1_5);\n+  __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ ret(0);\n+\n+  return start;\n+}\n+\n+#undef __\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_sinh.cpp","additions":525,"deletions":0,"binary":false,"changes":525,"status":"added"},{"patch":"@@ -467,0 +467,7 @@\n+  } else if (kind == Interpreter::java_lang_math_sinh) {\n+    if (StubRoutines::dsinh() != nullptr) {\n+      __ movdbl(xmm0, Address(rsp, wordSize));\n+      __ call(RuntimeAddress(CAST_FROM_FN_PTR(address, StubRoutines::dsinh())));\n+    } else {\n+      return nullptr; \/\/ Fallback to default implementation\n+    }\n","filename":"src\/hotspot\/cpu\/x86\/templateInterpreterGenerator_x86_64.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -169,0 +169,1 @@\n+  case vmIntrinsics::_dsinh:\n","filename":"src\/hotspot\/share\/c1\/c1_Compiler.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -3299,0 +3299,1 @@\n+  case vmIntrinsics::_dsinh         : \/\/ fall through\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2870,0 +2870,1 @@\n+  case vmIntrinsics::_dsinh:          \/\/ fall through\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -367,0 +367,1 @@\n+  FUNCTION_CASE(entry, StubRoutines::dsinh());\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -94,0 +94,1 @@\n+  case vmIntrinsics::_dsinh:\n@@ -147,0 +148,1 @@\n+  case vmIntrinsics::_dsinh:\n@@ -317,0 +319,1 @@\n+  case vmIntrinsics::_dsinh:\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -138,1 +138,2 @@\n-  do_name(round_name, \"round\")  do_name(tanh_name,\"tanh\")       do_name(cbrt_name,\"cbrt\")                                                               \\\n+  do_name(round_name, \"round\")  do_name(sinh_name,\"sinh\")       do_name(tanh_name,\"tanh\")                               \\\n+  do_name(cbrt_name,\"cbrt\")                                                                                             \\\n@@ -164,0 +165,1 @@\n+  do_intrinsic(_dsinh,                    java_lang_Math,         sinh_name,  double_double_signature,           F_S)   \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -140,0 +140,1 @@\n+      case vmIntrinsics::_dsinh:             return java_lang_math_sinh;\n@@ -202,0 +203,1 @@\n+  case java_lang_math_sinh        : return vmIntrinsics::_dsinh;\n@@ -307,0 +309,1 @@\n+    case java_lang_math_sinh    : tty->print(\"java_lang_math_sinh\"    ); break;\n","filename":"src\/hotspot\/share\/interpreter\/abstractInterpreter.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -75,0 +75,1 @@\n+    java_lang_math_sinh,                                        \/\/ implementation of java.lang.Math.sinh  (x)\n@@ -155,0 +156,1 @@\n+      case vmIntrinsics::_dsinh : \/\/ fall thru\n","filename":"src\/hotspot\/share\/interpreter\/abstractInterpreter.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -196,0 +196,1 @@\n+  method_entry(java_lang_math_sinh )\n@@ -457,0 +458,1 @@\n+  case Interpreter::java_lang_math_sinh    : \/\/ fall thru\n","filename":"src\/hotspot\/share\/interpreter\/templateInterpreterGenerator.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+    method_entry(java_lang_math_sinh  );\n@@ -99,0 +100,1 @@\n+  case Interpreter::java_lang_math_sinh    : \/\/ fall thru\n","filename":"src\/hotspot\/share\/interpreter\/zero\/zeroInterpreterGenerator.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -127,0 +127,1 @@\n+    static address dsinh;\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -147,0 +147,1 @@\n+address CompilerToVM::Data::dsinh;\n@@ -290,0 +291,1 @@\n+  SET_TRIGFUNC_OR_NULL(dsinh);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVMInit.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -144,0 +144,1 @@\n+  static_field(CompilerToVM::Data,             dsinh,                                  address)                                      \\\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -618,0 +618,1 @@\n+  case vmIntrinsics::_dsinh:\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -247,0 +247,1 @@\n+  case vmIntrinsics::_dsinh:\n@@ -1892,0 +1893,3 @@\n+  case vmIntrinsics::_dsinh:\n+    return StubRoutines::dsinh() != nullptr ?\n+      runtime_math(OptoRuntime::Math_D_D_Type(), StubRoutines::dsinh(), \"dsinh\") : false;\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -610,0 +610,2 @@\n+  do_stub(initial, dsinh)                                               \\\n+  do_entry(initial, dsinh, dsinh, dsinh)                                \\\n","filename":"src\/hotspot\/share\/runtime\/stubDeclarations.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2675,0 +2675,1 @@\n+    @IntrinsicCandidate\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Math.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,164 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang;\n+\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.annotations.OperationsPerInvocation;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.RunnerException;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+\n+import java.util.Random;\n+\n+public class SinhPerf {\n+\n+    @Warmup(iterations = 3, time = 5, timeUnit = TimeUnit.MILLISECONDS)\n+    @Measurement(iterations = 4, time = 5, timeUnit = TimeUnit.MILLISECONDS)\n+    @Fork(2)\n+    @BenchmarkMode(Mode.Throughput)\n+    @State(Scope.Thread)\n+    @OutputTimeUnit(TimeUnit.MILLISECONDS)\n+    public static class SinhPerfRanges {\n+        public static int sinhInputCount = 2048;\n+\n+        @Param({\"0\", \"1\", \"2\", \"3\", \"4\"})\n+        public int sinhRangeIndex;\n+\n+        public double [] sinhPosRandInputs;\n+        public double [] sinhNegRandInputs;\n+        public int       sinhInputIndex = 0;\n+        public double    sinhRangeInputs[][] = { {0.0, 0x1.0P-28},\n+                                                 {0x1.0P-28, 22.0},\n+                                                 {22.0, Math.log(Double.MAX_VALUE)},\n+                                                 {Math.log(Double.MAX_VALUE), Double.longBitsToDouble(0x408633CE8FB9F87DL)},\n+                                                 {Double.longBitsToDouble(0x408633CE8FB9F87DL), Double.MAX_VALUE} };\n+\n+        @Setup\n+        public void setupValues() {\n+            Random random = new Random(1023);\n+\n+            \/\/ Fill the positive and negative sinh vectors with random values\n+            sinhPosRandInputs = new double[sinhInputCount];\n+            sinhNegRandInputs = new double[sinhInputCount];\n+\n+            for (int i = 0; i < sinhInputCount; i++) {\n+                double sinhLowerBound = sinhRangeInputs[sinhRangeIndex][0];\n+                double sinhUpperBound = sinhRangeInputs[sinhRangeIndex][1];\n+                sinhPosRandInputs[i] = random.nextDouble(sinhLowerBound, sinhUpperBound);\n+                sinhNegRandInputs[i] = random.nextDouble(-sinhUpperBound, -sinhLowerBound);\n+            }\n+        }\n+\n+        @Benchmark\n+        @OperationsPerInvocation(2048)\n+        public double  sinhPosRangeDouble() {\n+            double res = 0.0;\n+            for (int i = 0; i < sinhInputCount; i++) {\n+                res += Math.sinh(sinhPosRandInputs[i]);\n+            }\n+            return res;\n+        }\n+\n+        @Benchmark\n+        @OperationsPerInvocation(2048)\n+        public double  sinhNegRangeDouble() {\n+            double res = 0.0;\n+            for (int i = 0; i < sinhInputCount; i++) {\n+                res += Math.sinh(sinhNegRandInputs[i]);\n+            }\n+            return res;\n+        }\n+    }\n+\n+    @Warmup(iterations = 3, time = 5, timeUnit = TimeUnit.SECONDS)\n+    @Measurement(iterations = 4, time = 5, timeUnit = TimeUnit.SECONDS)\n+    @Fork(2)\n+    @BenchmarkMode(Mode.Throughput)\n+    @State(Scope.Thread)\n+    @OutputTimeUnit(TimeUnit.MILLISECONDS)\n+    public static class SinhPerfConstant {\n+        public static final double constDoubleTiny  = 0x1.0P-30;\n+        public static final double constDoubleSmall = 0x1.0P-27;\n+        public static final double constDouble21    = 21.0;\n+        public static final double constDouble23    = 23.0;\n+        public static final double constDoubleLarge = Math.log(Double.MAX_VALUE) + 0.5;\n+        public static final double constDoubleOverflow = 0x1.0P10;\n+\n+        @Benchmark\n+        public double  sinhConstDoubleTiny() {\n+            return  Math.sinh(constDoubleTiny);\n+        }\n+\n+        @Benchmark\n+        public double  sinhConstDoubleSmall() {\n+            return  Math.sinh(constDoubleSmall);\n+        }\n+\n+        @Benchmark\n+        public double  sinhConstDouble21() {\n+            return  Math.sinh(constDouble21);\n+        }\n+\n+        @Benchmark\n+        public double  sinhConstDouble23() {\n+            return  Math.sinh(constDouble23);\n+        }\n+\n+        @Benchmark\n+        public double  sinhConstDoubleLarge() {\n+            return  Math.sinh(constDoubleLarge);\n+        }\n+\n+        @Benchmark\n+        public double  sinhConstDoubleOverflow() {\n+            return  Math.sinh(constDoubleOverflow);\n+        }\n+    }\n+\n+    public static void main(String[] args) throws RunnerException {\n+        Options opt = new OptionsBuilder()\n+                .include(SinhPerfRanges.class.getSimpleName())\n+                .build();\n+\n+        new Runner(opt).run();\n+\n+        opt = new OptionsBuilder()\n+                .include(SinhPerfConstant.class.getSimpleName())\n+                .build();\n+\n+        new Runner(opt).run();\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/SinhPerf.java","additions":164,"deletions":0,"binary":false,"changes":164,"status":"added"}]}