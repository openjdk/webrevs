{"files":[{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 2025 SAP SE. All rights reserved.\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.internal.util;\n+\n+import jdk.jfr.internal.settings.CPUThrottleSetting;\n+\n+\/**\n+ * A rate or fixed period, see {@link jdk.jfr.internal.Rate}\n+ *\/\n+public record TimespanRate(double rate, long periodNanos, boolean isRate) {\n+\n+    public static final TimespanRate OFF = new TimespanRate(0, 0, false);\n+\n+    \/**\n+     * Parses the rate string. Supports\n+     *\n+     * <ul>\n+     *  <li>off<\/li>\n+     *  <li>time value like \"1ms\"<\/li>\n+     *  <li>rate value like \"10\/s\"<\/li>\n+     * <\/ul>\n+     *\/\n+    public static TimespanRate of(String text) {\n+        if (text.equals(\"off\")) {\n+            return OFF;\n+        }\n+        boolean isPeriod = !text.contains(\"\/\");\n+        if (isPeriod) {\n+            var period = ValueParser.parseTimespanWithInfinity(text, Long.MAX_VALUE);\n+            if (period == Long.MAX_VALUE) {\n+                return null;\n+            }\n+            if (period == 0) {\n+                return OFF;\n+            }\n+            return new TimespanRate(0, period, false);\n+        }\n+        Rate r = Rate.of(text);\n+        if (r == null) {\n+            return null;\n+        }\n+        return new TimespanRate(r.perSecond(), 0, true);\n+    }\n+\n+    public static TimespanRate selectHigherResolution(TimespanRate a, TimespanRate b) {\n+        if (a.isRate && b.isRate) {\n+            return a.rate() > b.rate() ? a : b;\n+        }\n+        if (!a.isRate && !b.isRate) {\n+            return a.periodNanos() < b.periodNanos() ? a : b;\n+        }\n+        if (a.isRate) {\n+            double bRate = Runtime.getRuntime().availableProcessors() * (1_000_000_000.0 \/ b.periodNanos());\n+            return new TimespanRate(Math.max(a.rate(), bRate), 0, true);\n+        }\n+        double aRate = Runtime.getRuntime().availableProcessors() * (1_000_000_000.0 \/ a.periodNanos());\n+        return new TimespanRate(Math.max(aRate, b.rate()), 0, true);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        if (isRate) {\n+            return toRateString();\n+        }\n+        return toPeriodString();\n+    }\n+\n+    private String toRateString() {\n+        \/\/ idea: try to use the smallest unit possible where the rate is still an integer\n+        \/\/ start with seconds, then try minutes, hours, etc.\n+        assert isRate;\n+        if (rate == 0) {\n+            return \"0\/s\";\n+        }\n+        for (TimespanUnit unit : TimespanUnit.values()) {\n+            double value = rate \/ unit.nanos * 1_000_000_000.0;\n+            if (value % 1 == 0) {\n+                return String.format(\"%d\/%s\", (long)value, unit.text);\n+            }\n+        }\n+        \/\/ fallback to days if no smaller unit is found\n+        return String.format(\"%d\/%s\", (long)(rate \/ TimespanUnit.DAYS.nanos * 1_000_000_000.0), TimespanUnit.DAYS.text);\n+    }\n+\n+    private String toPeriodString() {\n+        assert !isRate;\n+        if (periodNanos == 0) {\n+            return \"0ms\";\n+        }\n+        return String.format(\"%dns\", periodNanos);\n+    }\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/util\/TimespanRate.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"}]}