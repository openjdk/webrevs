{"files":[{"patch":"@@ -169,2 +169,4 @@\n-  double _rate;\n-  u8 _period_nanos;\n+  union {\n+    double _rate;\n+    u8 _period_nanos;\n+  };\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrCPUTimeThreadSampler.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-import jdk.jfr.internal.util.TimespanRateOrPeriod;\n+import jdk.jfr.internal.util.TimespanRate;\n@@ -63,1 +63,1 @@\n-    private TimespanRateOrPeriod cpuRate;\n+    private TimespanRate cpuRate;\n@@ -203,1 +203,1 @@\n-    public void setCPUThrottle(TimespanRateOrPeriod rate) {\n+    public void setCPUThrottle(TimespanRate rate) {\n@@ -205,1 +205,0 @@\n-            System.out.println(\"Setting CPU throttle for \" + getName() + \" to \" + rate);\n@@ -208,1 +207,0 @@\n-                System.out.println(\"enabled\");\n@@ -279,1 +277,1 @@\n-                TimespanRateOrPeriod r = enabled ? cpuRate : TimespanRateOrPeriod.OFF;\n+                TimespanRate r = enabled ? cpuRate : TimespanRate.OFF;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/PlatformEventType.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-import jdk.jfr.internal.util.TimespanRateOrPeriod;\n+import jdk.jfr.internal.util.TimespanRate;\n@@ -61,1 +61,1 @@\n-        TimespanRateOrPeriod max = null;\n+        TimespanRate highestRate = null;\n@@ -63,1 +63,1 @@\n-            TimespanRateOrPeriod rate = TimespanRateOrPeriod.of(value);\n+            TimespanRate rate = TimespanRate.of(value);\n@@ -65,2 +65,2 @@\n-                if (max == null) {\n-                    max = rate;\n+                if (highestRate == null) {\n+                    highestRate = rate;\n@@ -68,1 +68,1 @@\n-                    max = TimespanRateOrPeriod.max(max, rate);\n+                    highestRate = TimespanRate.selectHigherResolution(highestRate, rate);\n@@ -72,2 +72,1 @@\n-        \/\/ \"off\" is not supported\n-        return Objects.requireNonNullElse(max.toString(), DEFAULT_VALUE);\n+        return Objects.requireNonNullElse(highestRate.toString(), DEFAULT_VALUE);\n@@ -78,1 +77,1 @@\n-        TimespanRateOrPeriod rate = TimespanRateOrPeriod.of(value);\n+        TimespanRate rate = TimespanRate.of(value);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/settings\/CPUThrottleSetting.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -1,105 +0,0 @@\n-\/*\n- * Copyright (c) 2025 SAP SE. All rights reserved.\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.jfr.internal.util;\n-\n-import jdk.jfr.internal.settings.CPUThrottleSetting;\n-\n-\/**\n- * A rate or fixed period, see {@link jdk.jfr.internal.Rate}\n- *\/\n-public record TimespanRateOrPeriod(double rate, long periodNanos, boolean isRate) {\n-\n-    public static final TimespanRateOrPeriod OFF = new TimespanRateOrPeriod(0, 0, false);\n-\n-    public static TimespanRateOrPeriod of(String text) {\n-        if (text.equals(\"off\")) {\n-            return OFF;\n-        }\n-        boolean isPeriod = !text.contains(\"\/\");\n-        if (isPeriod) {\n-            var period = ValueParser.parseTimespanWithInfinity(text, Long.MAX_VALUE);\n-            if (period == Long.MAX_VALUE) {\n-                return null;\n-            }\n-            if (period == 0) {\n-                return OFF;\n-            }\n-            return new TimespanRateOrPeriod(0, period, false);\n-        }\n-        Rate r = Rate.of(text);\n-        if (r == null) {\n-            return null;\n-        }\n-        return new TimespanRateOrPeriod(r.perSecond(), 0, true);\n-    }\n-\n-    public static TimespanRateOrPeriod max(TimespanRateOrPeriod a, TimespanRateOrPeriod b) {\n-        if (a.isRate && b.isRate) {\n-            return a.rate() > b.rate() ? a : b;\n-        }\n-        if (!a.isRate && !b.isRate) {\n-            return a.periodNanos() < b.periodNanos() ? a : b;\n-        }\n-        if (a.isRate) {\n-            double bRate = Runtime.getRuntime().availableProcessors() \/ b.periodNanos() * 1_000_000_000.0;\n-            return new TimespanRateOrPeriod(Math.max(a.rate(), bRate), 0, true);\n-        }\n-        return max(b, a); \/\/ swap to use the same logic\n-    }\n-\n-    @Override\n-    public String toString() {\n-        if (isRate) {\n-            return toRateString();\n-        }\n-        return toPeriodString();\n-    }\n-\n-    private String toRateString() {\n-        \/\/ idea: try to use the smallest unit possible where the rate is still an integer\n-        \/\/ start with seconds, then try minutes, hours, etc.\n-        assert isRate;\n-        if (rate == 0) {\n-            return \"0\/s\";\n-        }\n-        for (TimespanUnit unit : TimespanUnit.values()) {\n-            double value = rate \/ unit.nanos * 1_000_000_000.0;\n-            if (value % 1 == 0) {\n-                return String.format(\"%d\/%s\", (long)value, unit.text);\n-            }\n-        }\n-        \/\/ fallback to days if no smaller unit is found\n-        return String.format(\"%d\/%s\", (long)(rate \/ TimespanUnit.DAYS.nanos * 1_000_000_000.0), TimespanUnit.DAYS.text);\n-    }\n-\n-    private String toPeriodString() {\n-        assert !isRate;\n-        if (periodNanos == 0) {\n-            return \"0ms\";\n-        }\n-        return String.format(\"%dns\", periodNanos);\n-    }\n-}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/util\/TimespanRateOrPeriod.java","additions":0,"deletions":105,"binary":false,"changes":105,"status":"deleted"}]}