{"files":[{"patch":"@@ -1620,0 +1620,3 @@\n+  void cc20_set_qr_registers(FloatRegister (&vectorSet)[4],\n+          const FloatRegister (&stateVectors)[16], int idx1, int idx2,\n+          int idx3, int idx4);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -117,0 +117,30 @@\n+\n+\/**\n+ * Set the FloatRegisters for a 4-vector register set.  These will be used\n+ * during various quarter round transformations (adds, xors and left-rotations).\n+ * This method itself does not result in the output of any assembly\n+ * instructions.  It just organizes the vectors so they can be in columnar or\n+ * diagonal alignments.\n+ *\n+ * @param vectorSet a 4-vector array to be altered into a new alignment\n+ * @param stateVectors the 16-vector array that represents the current\n+ *        working state.  The indices of this array match up with the\n+ *        organization of the ChaCha20 state per RFC 7539 (e.g. stateVectors[12]\n+ *        would contain the vector that holds the 32-bit counter, etc.)\n+ * @param idx1 the index of the stateVectors array to be assigned to the\n+ *        first vectorSet element.\n+ * @param idx2 the index of the stateVectors array to be assigned to the\n+ *        second vectorSet element.\n+ * @param idx3 the index of the stateVectors array to be assigned to the\n+ *        third vectorSet element.\n+ * @param idx4 the index of the stateVectors array to be assigned to the\n+ *        fourth vectorSet element.\n+ *\/\n+void MacroAssembler::cc20_set_qr_registers(FloatRegister (&vectorSet)[4],\n+    const FloatRegister (&stateVectors)[16], int idx1, int idx2,\n+    int idx3, int idx4) {\n+  vectorSet[0] = stateVectors[idx1];\n+  vectorSet[1] = stateVectors[idx2];\n+  vectorSet[2] = stateVectors[idx3];\n+  vectorSet[3] = stateVectors[idx4];\n+}\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64_chacha.cpp","additions":30,"deletions":0,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -4515,3 +4515,3 @@\n-    bSet[0] = v16; bSet[1] = v17; bSet[2] = v18; bSet[3] = v19;\n-    cSet[0] = v20; cSet[1] = v21; cSet[2] = v22; cSet[3] = v23;\n-    dSet[0] = v24; dSet[1] = v25; dSet[2] = v26; dSet[3] = v27;\n+    __ cc20_set_qr_registers(bSet, workSt, 4, 5, 6, 7);\n+    __ cc20_set_qr_registers(cSet, workSt, 8, 9, 10, 11);\n+    __ cc20_set_qr_registers(dSet, workSt, 12, 13, 14, 15);\n@@ -4540,3 +4540,3 @@\n-    bSet[0] = v17; bSet[1] = v18; bSet[2] = v19; bSet[3] = v16;\n-    cSet[0] = v22; cSet[1] = v23; cSet[2] = v20; cSet[3] = v21;\n-    dSet[0] = v27; dSet[1] = v24; dSet[2] = v25; dSet[3] = v26;\n+    __ cc20_set_qr_registers(bSet, workSt, 5, 6, 7, 4);\n+    __ cc20_set_qr_registers(cSet, workSt, 10, 11, 8, 9);\n+    __ cc20_set_qr_registers(dSet, workSt, 15, 12, 13, 14);\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}