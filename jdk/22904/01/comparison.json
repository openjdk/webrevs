{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,4 @@\n- * following standard {@code AlgorithmParameters} algorithms:\n+ * following standard {@code AlgorithmParameters} algorithms. For the \"EC\"\n+ * algorithm, implementations must support the curves in parentheses. For the\n+ * \"RSASSA-PSS\" algorithm, implementations must support the parameters in\n+ * parentheses.\n@@ -54,0 +57,1 @@\n+ * <li>{@code ChaCha20-Poly1305}<\/li>\n@@ -57,0 +61,3 @@\n+ * <li>{@code EC} (secp256r1, secp384r1)<\/li>\n+ * <li>{@code RSASSA-PSS} (MGF1 mask generation function and SHA-256 or SHA-384\n+ *     hash algorithms)<\/li>\n","filename":"src\/java.base\/share\/classes\/java\/security\/AlgorithmParameters.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -75,0 +75,1 @@\n+ * <li>{@code EC}<\/li>\n@@ -76,0 +77,2 @@\n+ * <li>{@code RSASSA-PSS}<\/li>\n+ * <li>{@code X25519}<\/li>\n","filename":"src\/java.base\/share\/classes\/java\/security\/KeyFactory.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -116,2 +116,3 @@\n- * following standard {@code KeyPairGenerator} algorithms and keysizes in\n- * parentheses:\n+ * following standard {@code KeyPairGenerator} algorithms. For the \"EC\"\n+ * algorithm, implementations must support the curves in parentheses. For other\n+ * algorithms, implementations must support the key sizes in parentheses.\n@@ -119,1 +120,1 @@\n- * <li>{@code DiffieHellman} (1024, 2048, 4096)<\/li>\n+ * <li>{@code DiffieHellman} (1024, 2048, 3072, 4096)<\/li>\n@@ -121,1 +122,4 @@\n- * <li>{@code RSA} (1024, 2048, 4096)<\/li>\n+ * <li>{@code EC} (secp256r1, secp384r1)<\/li>\n+ * <li>{@code RSA} (1024, 2048, 3072, 4096)<\/li>\n+ * <li>{@code RSASSA-PSS} (2048, 3072, 4096)<\/li>\n+ * <li>{@code X25519}<\/li>\n","filename":"src\/java.base\/share\/classes\/java\/security\/KeyPairGenerator.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -90,0 +90,1 @@\n+ * <li>{@code SHA-384}<\/li>\n","filename":"src\/java.base\/share\/classes\/java\/security\/MessageDigest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -103,1 +103,4 @@\n- * following standard {@code Signature} algorithms:\n+ * following standard {@code Signature} algorithms. For the \"RSASSA-PSS\"\n+ * algorithm, implementations must support the parameters in parentheses. For\n+ * the \"SHA256withECDSA\" and \"SHA384withECDSA\" algorithms, implementations must\n+ * support the curves in parentheses.\n@@ -105,0 +108,2 @@\n+ * <li>{@code RSASSA-PSS} (MGF1 mask generation function and SHA-256 or SHA-384\n+ *      hash algorithms)<\/li>\n@@ -107,0 +112,2 @@\n+ * <li>{@code SHA256withECDSA} (secp256r1 curve)<\/li>\n+ * <li>{@code SHA384withECDSA} (secp384r1 curve)<\/li>\n@@ -109,0 +116,1 @@\n+ * <li>{@code SHA384withRSA}<\/li>\n","filename":"src\/java.base\/share\/classes\/java\/security\/Signature.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -151,1 +151,2 @@\n- * <li>{@code AES\/GCM\/NoPadding} (128)<\/li>\n+ * <li>{@code AES\/GCM\/NoPadding} (128, 256)<\/li>\n+ * <li>(@code ChaCha20-Poly1305}<\/li>\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/Cipher.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -60,1 +60,2 @@\n- * following standard {@code KeyAgreement} algorithm:\n+ * following standard {@code KeyAgreement} algorithms. For the \"ECDH\"\n+ * algorithm, implementations must support the curves in parentheses.\n@@ -63,0 +64,2 @@\n+ * <li>{@code ECDH} (secp256r1, secp384r1)<\/li>\n+ * <li>{@code X25519}<\/li>\n@@ -64,1 +67,1 @@\n- * This algorithm is described in the <a href=\n+ * These algorithms are described in the <a href=\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KeyAgreement.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -99,1 +99,2 @@\n- * <li>{@code AES} (128)<\/li>\n+ * <li>{@code AES} (128, 256)<\/li>\n+ * <li>{@code ChaCha20}<\/li>\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KeyGenerator.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n- * following standard {@code SSLContext} protocol:\n+ * following standard {@code SSLContext} protocols:\n@@ -45,0 +45,1 @@\n+ * <li>{@code TLSv1.3}<\/li>\n@@ -46,1 +47,1 @@\n- * This protocol is described in the <a href=\n+ * These protocols are described in the <a href=\n","filename":"src\/java.base\/share\/classes\/javax\/net\/ssl\/SSLContext.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}