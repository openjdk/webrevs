{"files":[{"patch":"@@ -5286,1 +5286,1 @@\n-                                                    XMMRegister xtmp, BasicType bt, int vec_enc) {\n+                                                    XMMRegister xtmp, XMMRegister xtmp1, BasicType bt, int vec_enc) {\n@@ -5291,1 +5291,1 @@\n-    shlq(rtmp, 5);\n+    shlq(rtmp, 5);  \/\/ for 32 bit rows (8 ints)\n@@ -5305,1 +5305,1 @@\n-    vblendvps(dst, dst, xtmp, permv, vec_enc);\n+    vblendvps(dst, dst, xtmp, permv, vec_enc, false, xtmp1);\n@@ -5309,1 +5309,1 @@\n-    shlq(rtmp, 5);\n+    shlq(rtmp, 5); \/\/ for 64 bit rows (4 longs)\n@@ -5331,1 +5331,1 @@\n-    vblendvps(dst, dst, permv, xtmp, vec_enc);\n+    vblendvps(dst, dst, permv, xtmp, vec_enc, false, xtmp1);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -394,2 +394,3 @@\n-  void vector_compress_expand_avx2(int opcode, XMMRegister dst, XMMRegister src, XMMRegister mask, Register rtmp,\n-                                   Register rscratch, XMMRegister permv, XMMRegister xtmp, BasicType bt, int vec_enc);\n+  void vector_compress_expand_avx2(int opcode, XMMRegister dst, XMMRegister src, XMMRegister mask,\n+                                   Register rtmp, Register rscratch, XMMRegister permv, XMMRegister xtmp,\n+                                   XMMRegister xtmp1, BasicType bt, int vec_enc);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1018,1 +1018,1 @@\n-    \/\/ Loop to generate 16 x 4 int expand permute index table. A row is accessed\n+    \/\/ Loop to generate 16 x 4 long expand permute index table. A row is accessed\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -9163,1 +9163,1 @@\n-  predicate(!VM_Version::supports_avx512vl() && Matcher::vector_length_in_bytes(n) <= 32);\n+  predicate(!EnableX86ECoreOpts && !VM_Version::supports_avx512vl() && Matcher::vector_length_in_bytes(n) <= 32);\n@@ -9173,1 +9173,18 @@\n-                                   $rscratch$$Register, $perm$$XMMRegister, $xtmp$$XMMRegister, bt, vlen_enc);\n+                                   $rscratch$$Register, $perm$$XMMRegister, $xtmp$$XMMRegister, xnoreg, bt, vlen_enc);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+instruct vcompress_reg_avx_ecore(vec dst, vec src, vec mask, rRegI rtmp, rRegL rscratch, vec perm, vec xtmp, vec xtmp1, rFlagsReg cr) %{\n+  predicate(EnableX86ECoreOpts && !VM_Version::supports_avx512vl() && Matcher::vector_length_in_bytes(n) <= 32);\n+  match(Set dst (CompressV src mask));\n+  match(Set dst (ExpandV src mask));\n+  effect(TEMP_DEF dst, TEMP perm, TEMP xtmp, TEMP xtmp1, TEMP rtmp, TEMP rscratch, KILL cr);\n+  format %{ \"vector_compress $dst, $src, $mask \\t!using $xtmp, $rtmp, $rscratch and $perm as TEMP\" %}\n+  ins_encode %{\n+    int opcode = this->ideal_Opcode();\n+    int vlen_enc = vector_length_encoding(this);\n+    BasicType bt  = Matcher::vector_element_basic_type(this);\n+    __ vector_compress_expand_avx2(opcode, $dst$$XMMRegister, $src$$XMMRegister, $mask$$XMMRegister, $rtmp$$Register,\n+                                   $rscratch$$Register, $perm$$XMMRegister, $xtmp$$XMMRegister, $xtmp1$$XMMRegister,\n+                                   bt, vlen_enc);\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":19,"deletions":2,"binary":false,"changes":21,"status":"modified"}]}