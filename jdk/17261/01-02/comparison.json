{"files":[{"patch":"@@ -5301,2 +5301,4 @@\n-    \/\/ Blend the results with zero vector using permute vector as mask, its\n-    \/\/ non-participating lanes holds a -1 value.\n+    \/\/ Blend the result with zero vector using permute mask, each row of\n+    \/\/ permute table contains either a valid permute index or a -1 (default)\n+    \/\/ value, this can potentially be used as a blending mask after\n+    \/\/ compressing\/expanding the source vector lanes.\n@@ -5325,2 +5327,4 @@\n-    \/\/ Blend the results with zero vector using permute vector as mask, its\n-    \/\/ non-participating lanes holds a -1 value.\n+    \/\/ Blend the result with zero vector using permute mask, each row of\n+    \/\/ permute table contains either a valid permute index or a -1 (default)\n+    \/\/ value, this can potentially be used as a blending mask after\n+    \/\/ compressing\/expanding the source vector lanes.\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -488,1 +488,0 @@\n-\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -959,0 +959,3 @@\n+    \/\/ Loop to generate 256 x 8 int compression permute index table where each\n+    \/\/ row holds either a valid permute index corresponding to set bit position\n+    \/\/ or a -1 (default) value.\n@@ -974,0 +977,3 @@\n+    \/\/ Loop to generate 16 x 4 long compression permute index table where each\n+    \/\/ row holds either a valid permute index corresponding to set bit position\n+    \/\/ or a -1 (default) value.\n@@ -996,0 +1002,3 @@\n+    \/\/ Loop to generate 256 x 8 int expand permute index table where each\n+    \/\/ row either places a valid permute index (starting from least significant\n+    \/\/ lane) into columns corresponding to set bit position or a -1 (default) value.\n@@ -1009,0 +1018,3 @@\n+    \/\/ Loop to generate 16 x 4 long expand permute index table where each\n+    \/\/ row either places a valid permute index (starting from least significant\n+    \/\/ lane) into columns corresponding to set bit position or a -1 (default) value.\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -86,0 +86,28 @@\n+    @Benchmark\n+    public void fuzzyFilterIntColumn() {\n+       int i = 0;\n+       int j = 0;\n+       long maskctr = 1;\n+       int endIndex = ispecies.loopBound(size);\n+       for (; i < endIndex; i += ispecies.length()) {\n+           IntVector vec = IntVector.fromArray(ispecies, intinCol, i);\n+           VectorMask<Integer> pred = VectorMask.fromLong(ispecies, maskctr++);\n+           vec.compress(pred).intoArray(intoutCol, j);\n+           j += pred.trueCount();\n+       }\n+   }\n+\n+   @Benchmark\n+   public void fuzzyFilterLongColumn() {\n+       int i = 0;\n+       int j = 0;\n+       long maskctr = 1;\n+       int endIndex = lspecies.loopBound(size);\n+       for (; i < endIndex; i += lspecies.length()) {\n+           LongVector vec = LongVector.fromArray(lspecies, longinCol, i);\n+           VectorMask<Long> pred = VectorMask.fromLong(lspecies, maskctr++);\n+           vec.compress(pred).intoArray(longoutCol, j);\n+           j += pred.trueCount();\n+       }\n+   }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/ColumnFilterBenchmark.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"}]}