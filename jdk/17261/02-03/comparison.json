{"files":[{"patch":"@@ -959,2 +959,3 @@\n-    \/\/ Loop to generate 256 x 8 int compression permute index table where each\n-    \/\/ row holds either a valid permute index corresponding to set bit position\n+    \/\/ Loop to generate 256 x 8 int compression permute index table. A row is\n+    \/\/ accessed using 8 bit index computed using vector mask. An entry in\n+    \/\/ the row holds either a valid permute index corresponding to set bit position\n@@ -962,2 +963,1 @@\n-    for (int i = 0; i < 256; i++) {\n-      int tmp = i;\n+    for (int mask = 0; mask < 256; mask++) {\n@@ -966,1 +966,1 @@\n-        if (tmp & (1 << j)) {\n+        if (mask & (1 << j)) {\n@@ -977,2 +977,3 @@\n-    \/\/ Loop to generate 16 x 4 long compression permute index table where each\n-    \/\/ row holds either a valid permute index corresponding to set bit position\n+    \/\/ Loop to generate 16 x 4 long compression permute index table. A row is\n+    \/\/ accessed using 4 bit index computed using vector mask. An entry in\n+    \/\/ the row holds either a valid permute index corresponding to set bit position\n@@ -980,2 +981,1 @@\n-    for (int i = 0; i < 16; i++) {\n-      int tmp = i;\n+    for (int mask = 0; mask < 16; mask++) {\n@@ -984,1 +984,1 @@\n-        if (tmp & (1 << j)) {\n+        if (mask & (1 << j)) {\n@@ -1002,5 +1002,5 @@\n-    \/\/ Loop to generate 256 x 8 int expand permute index table where each\n-    \/\/ row either places a valid permute index (starting from least significant\n-    \/\/ lane) into columns corresponding to set bit position or a -1 (default) value.\n-    for (int i = 0; i < 256; i++) {\n-      int tmp = i;\n+    \/\/ Loop to generate 256 x 8 int expand permute index table. A row is accessed\n+    \/\/ using 8 bit index computed using vector mask. An entry in the row holds either\n+    \/\/ a valid permute index (starting from least significant lane) placed at poisition\n+    \/\/ corresponding to set bit position or a -1 (default) value.\n+    for (int mask = 0; mask < 256; mask++) {\n@@ -1009,1 +1009,1 @@\n-        if (tmp & (1 << j)) {\n+        if (mask & (1 << j)) {\n@@ -1018,5 +1018,5 @@\n-    \/\/ Loop to generate 16 x 4 long expand permute index table where each\n-    \/\/ row either places a valid permute index (starting from least significant\n-    \/\/ lane) into columns corresponding to set bit position or a -1 (default) value.\n-    for (int i = 0; i < 16; i++) {\n-      int tmp = i;\n+    \/\/ Loop to generate 16 x 4 int expand permute index table. A row is accessed\n+    \/\/ using 4 bit index computed using vector mask. An entry in the row holds either\n+    \/\/ a valid permute index (starting from least significant lane) placed at poisition\n+    \/\/ corresponding to set bit position or a -1 (default) value.\n+    for (int mask = 0; mask < 16; mask++) {\n@@ -1025,1 +1025,1 @@\n-        if (tmp & (1 << j)) {\n+        if (mask & (1 << j)) {\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"}]}