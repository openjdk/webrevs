{"files":[{"patch":"@@ -257,1 +257,1 @@\n-    public static final String SADD_VB = VECTOR_PREFIX + \"SADD_VB\" + POSTFIX;\n+    public static final String SATURATING_ADD_VB = VECTOR_PREFIX + \"SATURATING_ADD_VB\" + POSTFIX;\n@@ -259,1 +259,1 @@\n-        vectorNode(SADD_VB, \"SaturatingAddV\", TYPE_BYTE);\n+        vectorNode(SATURATING_ADD_VB, \"SaturatingAddV\", TYPE_BYTE);\n@@ -262,1 +262,1 @@\n-    public static final String SADD_VS = VECTOR_PREFIX + \"SADD_VS\" + POSTFIX;\n+    public static final String SATURATING_ADD_VS = VECTOR_PREFIX + \"SATURATING_ADD_VS\" + POSTFIX;\n@@ -264,1 +264,1 @@\n-        vectorNode(SADD_VS, \"SaturatingAddV\", TYPE_SHORT);\n+        vectorNode(SATURATING_ADD_VS, \"SaturatingAddV\", TYPE_SHORT);\n@@ -267,1 +267,1 @@\n-    public static final String SADD_VI = VECTOR_PREFIX + \"SADD_VI\" + POSTFIX;\n+    public static final String SATURATING_ADD_VI = VECTOR_PREFIX + \"SATURATING_ADD_VI\" + POSTFIX;\n@@ -269,1 +269,1 @@\n-        vectorNode(SADD_VI, \"SaturatingAddV\", TYPE_INT);\n+        vectorNode(SATURATING_ADD_VI, \"SaturatingAddV\", TYPE_INT);\n@@ -272,1 +272,1 @@\n-    public static final String SADD_VL = VECTOR_PREFIX + \"SADD_VL\" + POSTFIX;\n+    public static final String SATURATING_ADD_VL = VECTOR_PREFIX + \"SATURATING_ADD_VL\" + POSTFIX;\n@@ -274,1 +274,1 @@\n-        vectorNode(SADD_VL, \"SaturatingAddV\", TYPE_LONG);\n+        vectorNode(SATURATING_ADD_VL, \"SaturatingAddV\", TYPE_LONG);\n@@ -277,1 +277,1 @@\n-    public static final String SSUB_VB = VECTOR_PREFIX + \"SSUB_VB\" + POSTFIX;\n+    public static final String SATURATING_SUB_VB = VECTOR_PREFIX + \"SATURATING_SUB_VB\" + POSTFIX;\n@@ -279,1 +279,1 @@\n-        vectorNode(SSUB_VB, \"SaturatingSubV\", TYPE_BYTE);\n+        vectorNode(SATURATING_SUB_VB, \"SaturatingSubV\", TYPE_BYTE);\n@@ -282,1 +282,1 @@\n-    public static final String SSUB_VS = VECTOR_PREFIX + \"SSUB_VS\" + POSTFIX;\n+    public static final String SATURATING_SUB_VS = VECTOR_PREFIX + \"SATURATING_SUB_VS\" + POSTFIX;\n@@ -284,1 +284,1 @@\n-        vectorNode(SSUB_VS, \"SaturatingSubV\", TYPE_SHORT);\n+        vectorNode(SATURATING_SUB_VS, \"SaturatingSubV\", TYPE_SHORT);\n@@ -287,1 +287,1 @@\n-    public static final String SSUB_VI = VECTOR_PREFIX + \"SSUB_VI\" + POSTFIX;\n+    public static final String SATURATING_SUB_VI = VECTOR_PREFIX + \"SATURATING_SUB_VI\" + POSTFIX;\n@@ -289,1 +289,1 @@\n-        vectorNode(SSUB_VI, \"SaturatingSubV\", TYPE_INT);\n+        vectorNode(SATURATING_SUB_VI, \"SaturatingSubV\", TYPE_INT);\n@@ -292,1 +292,1 @@\n-    public static final String SSUB_VL = VECTOR_PREFIX + \"SSUB_VL\" + POSTFIX;\n+    public static final String SATURATING_SUB_VL = VECTOR_PREFIX + \"SATURATING_SUB_VL\" + POSTFIX;\n@@ -294,1 +294,1 @@\n-        vectorNode(SSUB_VL, \"SaturatingSubV\", TYPE_LONG);\n+        vectorNode(SATURATING_SUB_VL, \"SaturatingSubV\", TYPE_LONG);\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-* @bug 8342677\n+* @bug 8338021 8342677\n@@ -37,0 +37,1 @@\n+import java.util.Random;\n@@ -68,0 +69,60 @@\n+    public void setup_delimiting_byte_inputs() {\n+        \/\/ Saturating add\n+        byte_in1[COUNT - 1] = Byte.MAX_VALUE;\n+        byte_in2[COUNT - 1] = 100;\n+        \/\/ Saturating sub\n+        byte_in1[COUNT - 2] = Byte.MIN_VALUE;\n+        byte_in2[COUNT - 2] = 100;\n+        \/\/ Saturating unsigned add\n+        byte_in1[COUNT - 3] = -1;\n+        byte_in2[COUNT - 3] = 100;\n+        \/\/ Saturating unsigned sub\n+        byte_in1[COUNT - 4] = 0;\n+        byte_in2[COUNT - 4] = 100;\n+    }\n+\n+    public void setup_delimiting_short_inputs() {\n+        \/\/ Saturating add\n+        short_in1[COUNT - 1] = Short.MAX_VALUE;\n+        short_in2[COUNT - 1] = 100;\n+        \/\/ Saturating sub\n+        short_in1[COUNT - 2] = Short.MIN_VALUE;\n+        short_in2[COUNT - 2] = 100;\n+        \/\/ Saturating unsigned add\n+        short_in1[COUNT - 3] = -1;\n+        short_in2[COUNT - 3] = 100;\n+        \/\/ Saturating unsigned sub\n+        short_in1[COUNT - 4] = 0;\n+        short_in2[COUNT - 4] = 100;\n+    }\n+\n+    public void setup_delimiting_int_inputs() {\n+        \/\/ Saturating add\n+        int_in1[COUNT - 1] = Integer.MAX_VALUE;\n+        int_in2[COUNT - 1] = 100;\n+        \/\/ Saturating sub\n+        int_in1[COUNT - 2] = Integer.MIN_VALUE;\n+        int_in2[COUNT - 2] = 100;\n+        \/\/ Saturating unsigned add\n+        int_in1[COUNT - 3] = -1;\n+        int_in2[COUNT - 3] = 100;\n+        \/\/ Saturating unsigned sub\n+        int_in1[COUNT - 4] = 0;\n+        int_in2[COUNT - 4] = 100;\n+    }\n+\n+    public void setup_delimiting_long_inputs() {\n+        \/\/ Saturating add\n+        long_in1[COUNT - 1] = Long.MAX_VALUE;\n+        long_in2[COUNT - 1] = 100;\n+        \/\/ Saturating sub\n+        long_in1[COUNT - 2] = Long.MIN_VALUE;\n+        long_in2[COUNT - 2] = 100;\n+        \/\/ Saturating unsigned add\n+        long_in1[COUNT - 3] =  -1L;\n+        long_in2[COUNT - 3] = 100;\n+        \/\/ Saturating unsigned sub\n+        long_in1[COUNT - 4] = 0;\n+        long_in2[COUNT - 4] = 100;\n+    }\n+\n@@ -69,0 +130,1 @@\n+        Random r = jdk.test.lib.Utils.getRandomInstance();\n@@ -78,1 +140,1 @@\n-        IntStream.range(0, COUNT).forEach(\n+        IntStream.range(0, COUNT-4).forEach(\n@@ -80,19 +142,8 @@\n-                if ((i & 1) == 0) {\n-                    long_in1[i] = Long.MAX_VALUE;\n-                    long_in2[i] = i;\n-                    int_in1[i]  = Integer.MAX_VALUE;\n-                    int_in2[i]  = i;\n-                    short_in1[i] = Short.MAX_VALUE;\n-                    short_in2[i] = (short)i;\n-                    byte_in1[i]  = Byte.MAX_VALUE;\n-                    byte_in2[i]  = (byte)i;\n-                } else {\n-                    long_in1[i] = Long.MIN_VALUE;\n-                    long_in2[i] = -i;\n-                    int_in1[i]  = Integer.MIN_VALUE;\n-                    int_in2[i]  = -i;\n-                    short_in1[i] = Short.MIN_VALUE;\n-                    short_in2[i] = (short)-i;\n-                    byte_in1[i]  = Byte.MIN_VALUE;\n-                    byte_in2[i]  = (byte)-i;\n-                }\n+                long_in1[i] = r.nextLong(Long.MIN_VALUE, Long.MAX_VALUE);\n+                long_in2[i] = r.nextLong(Long.MIN_VALUE, Long.MAX_VALUE);\n+                int_in1[i] = r.nextInt(Integer.MIN_VALUE, Integer.MAX_VALUE);\n+                int_in2[i] = r.nextInt(Integer.MIN_VALUE, Integer.MAX_VALUE);\n+                short_in1[i] = (short)r.nextInt(Short.MIN_VALUE, Short.MAX_VALUE);\n+                short_in2[i] = (short)r.nextInt(Short.MIN_VALUE, Short.MAX_VALUE);\n+                byte_in1[i] = (byte)r.nextInt(Byte.MIN_VALUE, Byte.MAX_VALUE);\n+                byte_in2[i] = (byte)r.nextInt(Byte.MIN_VALUE, Byte.MAX_VALUE);\n@@ -101,0 +152,6 @@\n+\n+        setup_delimiting_byte_inputs();\n+        setup_delimiting_short_inputs();\n+        setup_delimiting_int_inputs();\n+        setup_delimiting_long_inputs();\n+\n@@ -108,1 +165,1 @@\n-    @IR(counts = {IRNode.SADD_VB, \" >0 \"}, applyIfCPUFeature = {\"avx\", \"true\"})\n+    @IR(counts = {IRNode.SATURATING_ADD_VB, \" >0 \"}, applyIfCPUFeature = {\"avx\", \"true\"})\n@@ -131,1 +188,1 @@\n-    @IR(counts = {IRNode.SADD_VS, \" >0 \"}, applyIfCPUFeature = {\"avx\", \"true\"})\n+    @IR(counts = {IRNode.SATURATING_ADD_VS, \" >0 \"}, applyIfCPUFeature = {\"avx\", \"true\"})\n@@ -154,1 +211,1 @@\n-    @IR(counts = {IRNode.SADD_VI, \" >0 \"}, applyIfCPUFeature = {\"avx\", \"true\"})\n+    @IR(counts = {IRNode.SATURATING_ADD_VI, \" >0 \"}, applyIfCPUFeature = {\"avx\", \"true\"})\n@@ -177,1 +234,1 @@\n-    @IR(counts = {IRNode.SADD_VL, \" >0 \"}, applyIfCPUFeature = {\"avx\", \"true\"})\n+    @IR(counts = {IRNode.SATURATING_ADD_VL, \" >0 \"}, applyIfCPUFeature = {\"avx\", \"true\"})\n@@ -200,1 +257,3 @@\n-    @IR(counts = {IRNode.SADD_VB, \" >0 \" , \"unsigned_vector_node\", \" >0 \"}, phase = {CompilePhase.BEFORE_MATCHING}, applyIfCPUFeature = {\"avx\", \"true\"})\n+    @IR(counts = {IRNode.SATURATING_ADD_VB, \" >0 \" , \"unsigned_vector_node\", \" >0 \"},\n+        phase = {CompilePhase.BEFORE_MATCHING},\n+        applyIfCPUFeature = {\"avx\", \"true\"})\n@@ -223,1 +282,3 @@\n-    @IR(counts = {IRNode.SADD_VS, \" >0 \", \"unsigned_vector_node\", \" >0 \"}, phase = {CompilePhase.BEFORE_MATCHING}, applyIfCPUFeature = {\"avx\", \"true\"})\n+    @IR(counts = {IRNode.SATURATING_ADD_VS, \" >0 \", \"unsigned_vector_node\", \" >0 \"},\n+        phase = {CompilePhase.BEFORE_MATCHING},\n+        applyIfCPUFeature = {\"avx\", \"true\"})\n@@ -246,1 +307,3 @@\n-    @IR(counts = {IRNode.SADD_VI, \" >0 \", \"unsigned_vector_node\", \" >0 \"}, phase = {CompilePhase.BEFORE_MATCHING}, applyIfCPUFeature = {\"avx\", \"true\"})\n+    @IR(counts = {IRNode.SATURATING_ADD_VI, \" >0 \", \"unsigned_vector_node\", \" >0 \"},\n+        phase = {CompilePhase.BEFORE_MATCHING},\n+        applyIfCPUFeature = {\"avx\", \"true\"})\n@@ -269,1 +332,3 @@\n-    @IR(counts = {IRNode.SADD_VL, \" >0 \", \"unsigned_vector_node\", \" >0 \"}, phase = {CompilePhase.BEFORE_MATCHING}, applyIfCPUFeature = {\"avx\", \"true\"})\n+    @IR(counts = {IRNode.SATURATING_ADD_VL, \" >0 \", \"unsigned_vector_node\", \" >0 \"},\n+        phase = {CompilePhase.BEFORE_MATCHING},\n+        applyIfCPUFeature = {\"avx\", \"true\"})\n@@ -292,1 +357,1 @@\n-    @IR(counts = {IRNode.SSUB_VB, \" >0 \"}, phase = {CompilePhase.BEFORE_MATCHING}, applyIfCPUFeature = {\"avx\", \"true\"})\n+    @IR(counts = {IRNode.SATURATING_SUB_VB, \" >0 \"}, applyIfCPUFeature = {\"avx\", \"true\"})\n@@ -315,1 +380,1 @@\n-    @IR(counts = {IRNode.SSUB_VS, \" >0 \"}, applyIfCPUFeature = {\"avx\", \"true\"})\n+    @IR(counts = {IRNode.SATURATING_SUB_VS, \" >0 \"}, applyIfCPUFeature = {\"avx\", \"true\"})\n@@ -338,1 +403,1 @@\n-    @IR(counts = {IRNode.SSUB_VI, \" >0 \"}, applyIfCPUFeature = {\"avx\", \"true\"})\n+    @IR(counts = {IRNode.SATURATING_SUB_VI, \" >0 \"}, applyIfCPUFeature = {\"avx\", \"true\"})\n@@ -361,1 +426,1 @@\n-    @IR(counts = {IRNode.SSUB_VL, \" >0 \"}, applyIfCPUFeature = {\"avx\", \"true\"})\n+    @IR(counts = {IRNode.SATURATING_SUB_VL, \" >0 \"}, applyIfCPUFeature = {\"avx\", \"true\"})\n@@ -384,1 +449,3 @@\n-    @IR(counts = {IRNode.SSUB_VB, \" >0 \" , \"unsigned_vector_node\", \" >0 \"}, phase = {CompilePhase.BEFORE_MATCHING}, applyIfCPUFeature = {\"avx\", \"true\"})\n+    @IR(counts = {IRNode.SATURATING_SUB_VB, \" >0 \" , \"unsigned_vector_node\", \" >0 \"},\n+        phase = {CompilePhase.BEFORE_MATCHING},\n+        applyIfCPUFeature = {\"avx\", \"true\"})\n@@ -407,1 +474,3 @@\n-    @IR(counts = {IRNode.SSUB_VS, \" >0 \", \"unsigned_vector_node\", \" >0 \"}, phase = {CompilePhase.BEFORE_MATCHING}, applyIfCPUFeature = {\"avx\", \"true\"})\n+    @IR(counts = {IRNode.SATURATING_SUB_VS, \" >0 \", \"unsigned_vector_node\", \" >0 \"},\n+        phase = {CompilePhase.BEFORE_MATCHING},\n+        applyIfCPUFeature = {\"avx\", \"true\"})\n@@ -430,1 +499,3 @@\n-    @IR(counts = {IRNode.SSUB_VI, \" >0 \", \"unsigned_vector_node\", \" >0 \"}, phase = {CompilePhase.BEFORE_MATCHING}, applyIfCPUFeature = {\"avx\", \"true\"})\n+    @IR(counts = {IRNode.SATURATING_SUB_VI, \" >0 \", \"unsigned_vector_node\", \" >0 \"},\n+        phase = {CompilePhase.BEFORE_MATCHING},\n+        applyIfCPUFeature = {\"avx\", \"true\"})\n@@ -453,1 +524,3 @@\n-    @IR(counts = {IRNode.SSUB_VL, \" >0 \", \"unsigned_vector_node\", \" >0 \"}, phase = {CompilePhase.BEFORE_MATCHING}, applyIfCPUFeature = {\"avx\", \"true\"})\n+    @IR(counts = {IRNode.SATURATING_SUB_VL, \" >0 \", \"unsigned_vector_node\", \" >0 \"},\n+        phase = {CompilePhase.BEFORE_MATCHING},\n+        applyIfCPUFeature = {\"avx\", \"true\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorSaturatedOperationsTest.java","additions":110,"deletions":37,"binary":false,"changes":147,"status":"modified"}]}