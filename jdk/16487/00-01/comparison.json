{"files":[{"patch":"@@ -42,7 +42,0 @@\n-    \/**\n-     * Create an instance with no buffer\n-     *\/\n-    public AEADBufferedStream() {\n-        buf = null;\n-        count = 0;\n-    }\n@@ -55,2 +48,1 @@\n-        buf = new byte[len];\n-        count = 0;\n+        super(len);\n@@ -67,1 +59,1 @@\n-    public synchronized byte[] toByteArray() {\n+    public byte[] toByteArray() {\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/AEADBufferedStream.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -651,1 +651,1 @@\n-            throw new RuntimeException(exc);\n+            throw new ProviderException(exc);\n@@ -682,1 +682,1 @@\n-            throw new RuntimeException(ke);\n+            throw new ProviderException(ke);\n@@ -699,1 +699,2 @@\n-     *\/    @Override\n+     *\/\n+    @Override\n@@ -702,1 +703,6 @@\n-        return bufferCrypt(input, output, true);\n+        try {\n+            return bufferCrypt(input, output, true);\n+        } catch (AEADBadTagException e) {\n+            \/\/ exception is never thrown by update ops\n+            return 0;\n+        }\n@@ -787,1 +793,1 @@\n-        throws ShortBufferException {\n+        throws ShortBufferException, AEADBadTagException {\n@@ -796,1 +802,1 @@\n-        boolean isUpdate) throws ShortBufferException {\n+        boolean isUpdate) throws ShortBufferException, AEADBadTagException {\n@@ -840,1 +846,2 @@\n-                        total = engine.doUpdate(inArray, inOfs, inLen, outArray, outOfs);\n+                        total = engine.doUpdate(inArray, inOfs, inLen, outArray,\n+                            outOfs);\n@@ -842,1 +849,2 @@\n-                        total = engine.doFinal(inArray, inOfs, inLen, outArray, outOfs);\n+                        total = engine.doFinal(inArray, inOfs, inLen, outArray,\n+                            outOfs);\n@@ -844,1 +852,1 @@\n-                } catch (BadPaddingException | KeyException e) {\n+                } catch (KeyException e) {\n@@ -857,5 +865,1 @@\n-                    try {\n-                        outArray = engineDoFinal(inArray, inOfs, inLen);\n-                    } catch (BadPaddingException e) {\n-                        throw new ProviderException(e);\n-                    }\n+                    outArray = engineDoFinal(inArray, inOfs, inLen);\n@@ -876,1 +880,1 @@\n-            } catch (BadPaddingException | KeyException e) {\n+            } catch (KeyException e) {\n@@ -1377,2 +1381,4 @@\n-        int doUpdate(ByteBuffer input, ByteBuffer output) throws ShortBufferException, KeyException;\n-        int doFinal(ByteBuffer input, ByteBuffer output) throws ShortBufferException, KeyException, AEADBadTagException;\n+        int doUpdate(ByteBuffer input, ByteBuffer output) throws\n+            ShortBufferException, KeyException;\n+        int doFinal(ByteBuffer input, ByteBuffer output) throws\n+            ShortBufferException, KeyException, AEADBadTagException;\n@@ -1423,7 +1429,7 @@\n-        public int doUpdate(ByteBuffer input, ByteBuffer output) throws ShortBufferException, KeyException {\n-            byte[] in = new byte[input.remaining()];\n-            input.get(in);\n-            byte[] out = new byte[in.length];\n-            doUpdate(in, 0, in.length, out, out.length);\n-            output.put(out);\n-            return out.length;\n+        public int doUpdate(ByteBuffer input, ByteBuffer output) throws\n+            ShortBufferException, KeyException {\n+            byte[] data = new byte[input.remaining()];\n+            input.get(data);\n+            doUpdate(data, 0, data.length, data, 0);\n+            output.put(data);\n+            return data.length;\n@@ -1502,7 +1508,7 @@\n-        public int doUpdate(ByteBuffer input, ByteBuffer output) throws ShortBufferException, KeyException {\n-            byte[] in = new byte[input.remaining()];\n-            input.get(in);\n-            byte[] out = new byte[in.length];\n-            doUpdate(in, 0, in.length, out, 0);\n-            output.put(out);\n-            return out.length;\n+        public int doUpdate(ByteBuffer input, ByteBuffer output) throws\n+            ShortBufferException, KeyException {\n+            byte[] data = new byte[input.remaining()];\n+            input.get(data);\n+            doUpdate(data, 0, data.length, data, 0);\n+            output.put(data);\n+            return data.length;\n@@ -1512,7 +1518,8 @@\n-        public int doFinal(ByteBuffer input, ByteBuffer output) throws ShortBufferException, KeyException {\n-            byte[] in = new byte[input.remaining()];\n-            input.get(in);\n-            byte[] out = new byte[in.length + TAG_LENGTH];\n-            doFinal(in, 0, in.length, out, 0);\n-            output.put(out);\n-            return out.length;\n+        public int doFinal(ByteBuffer input, ByteBuffer output) throws\n+            ShortBufferException, KeyException {\n+            int len = input.remaining();\n+            byte[] data = new byte[len + TAG_LENGTH];\n+            input.get(data, 0, len);\n+            doFinal(data, 0, len, data, 0);\n+            output.put(data);\n+            return data.length;\n@@ -1651,2 +1658,2 @@\n-            if (ctLen == 0) {\n-                throw new AEADBadTagException(\"Tag mismatch\");\n+            if (ctLen < TAG_LENGTH) {\n+                throw new AEADBadTagException(\"Input too short - need tag\");\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/ChaCha20Cipher.java","additions":47,"deletions":40,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -250,1 +250,1 @@\n-            iv == null ? createIv(random) : iv.clone());\n+            iv == null ? createIv(random) : iv);  \/\/ iv.clone() not necessary\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/GaloisCounterMode.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,1 +41,3 @@\n-    AlgorithmParameterSpec getNewSpec() {\n+    public static final int IV_MODULO = 16;\n+\n+    public AlgorithmParameterSpec getNewSpec() {\n@@ -43,1 +45,1 @@\n-        return new GCMParameterSpec(96, iv, iv_index, 12);\n+        return new GCMParameterSpec(128, iv, iv_index, IV_MODULO);\n","filename":"test\/micro\/org\/openjdk\/bench\/javax\/crypto\/full\/AESGCMBench.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -42,1 +42,3 @@\n-    AlgorithmParameterSpec getNewSpec() {\n+    public static final int IV_MODULO = 16;\n+\n+    public AlgorithmParameterSpec getNewSpec() {\n@@ -44,1 +46,1 @@\n-        return new GCMParameterSpec(96, iv, iv_index, 12);\n+        return new GCMParameterSpec(128, iv, iv_index, IV_MODULO);\n","filename":"test\/micro\/org\/openjdk\/bench\/javax\/crypto\/full\/AESGCMByteBuffer.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -51,2 +51,1 @@\n-    static final int IV_BUFFER_SIZE = 24;\n-    public static final int IV_MODULO = 12;\n+    static final int IV_BUFFER_SIZE = 36;\n@@ -55,1 +54,1 @@\n-    int updateLen = 0;\n+    private int updateLen = 0;\n@@ -58,3 +57,4 @@\n-    byte[] encryptedData, in, out;\n-    SecretKeySpec ks;\n-    AlgorithmParameterSpec spec;\n+    private byte[] encryptedData, in, out;\n+    private SecretKeySpec ks;\n+    \/\/ Used for decryption to avoid repeated getParameter() calls\n+    private AlgorithmParameterSpec spec;\n@@ -93,2 +93,1 @@\n-        decryptCipher.init(Cipher.DECRYPT_MODE, ks,\n-            encryptCipher.getParameters(). getParameterSpec(spec.getClass()));\n+        decryptCipher.init(Cipher.DECRYPT_MODE, ks, spec);\n@@ -121,3 +120,1 @@\n-        decryptCipher.init(Cipher.DECRYPT_MODE, ks,\n-            encryptCipher.getParameters().\n-                getParameterSpec(spec.getClass()));\n+        decryptCipher.init(Cipher.DECRYPT_MODE, ks, spec);\n@@ -129,3 +126,1 @@\n-        decryptCipher.init(Cipher.DECRYPT_MODE, ks,\n-            encryptCipher.getParameters().\n-                getParameterSpec(spec.getClass()));\n+        decryptCipher.init(Cipher.DECRYPT_MODE, ks, spec);\n","filename":"test\/micro\/org\/openjdk\/bench\/javax\/crypto\/full\/BenchBase.java","additions":9,"deletions":14,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -54,2 +54,1 @@\n-    static final int IV_BUFFER_SIZE = 24;\n-    public static final int IV_MODULO = 12;\n+    static final int IV_BUFFER_SIZE = 36;\n@@ -58,1 +57,1 @@\n-    int updateLen = 0;\n+    private int updateLen = 0;\n@@ -61,3 +60,4 @@\n-    ByteBuffer encryptedData, in, out;\n-    SecretKeySpec ks;\n-    AlgorithmParameterSpec spec;\n+    private ByteBuffer encryptedData, in, out;\n+    private SecretKeySpec ks;\n+    \/\/ Used for decryption to avoid repeated getParameter() calls\n+    private AlgorithmParameterSpec spec;\n@@ -96,2 +96,1 @@\n-        decryptCipher.init(Cipher.DECRYPT_MODE, ks,\n-            encryptCipher.getParameters(). getParameterSpec(spec.getClass()));\n+        decryptCipher.init(Cipher.DECRYPT_MODE, ks, spec);\n@@ -142,2 +141,1 @@\n-        decryptCipher.init(Cipher.DECRYPT_MODE, ks,\n-            encryptCipher.getParameters().getParameterSpec(spec.getClass()));\n+        decryptCipher.init(Cipher.DECRYPT_MODE, ks, spec);\n@@ -151,2 +149,1 @@\n-        decryptCipher.init(Cipher.DECRYPT_MODE, ks,\n-            encryptCipher.getParameters().getParameterSpec(spec.getClass()));\n+        decryptCipher.init(Cipher.DECRYPT_MODE, ks, spec);\n","filename":"test\/micro\/org\/openjdk\/bench\/javax\/crypto\/full\/ByteBufferBase.java","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -38,1 +38,3 @@\n-    AlgorithmParameterSpec getNewSpec() {\n+    public static final int IV_MODULO = 12;\n+\n+    public AlgorithmParameterSpec getNewSpec() {\n@@ -40,1 +42,1 @@\n-        return new IvParameterSpec(iv, iv_index, 12);\n+        return new IvParameterSpec(iv, iv_index, IV_MODULO);\n","filename":"test\/micro\/org\/openjdk\/bench\/javax\/crypto\/full\/CC20P1305Bench.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -39,1 +39,3 @@\n-    AlgorithmParameterSpec getNewSpec() {\n+    public static final int IV_MODULO = 12;\n+\n+    public AlgorithmParameterSpec getNewSpec() {\n@@ -41,1 +43,1 @@\n-        return new IvParameterSpec(iv, iv_index, 12);\n+        return new IvParameterSpec(iv, iv_index, IV_MODULO);\n","filename":"test\/micro\/org\/openjdk\/bench\/javax\/crypto\/full\/CC20P1305ByteBuffer.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -46,5 +46,0 @@\n-    AlgorithmParameterSpec getNewSpec() {\n-        iv_index = (iv_index + 1) % IV_MODULO;\n-        return new GCMParameterSpec(96, iv, iv_index, 12);\n-    }\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/javax\/crypto\/small\/AESGCMBench.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -46,5 +46,0 @@\n-    AlgorithmParameterSpec getNewSpec() {\n-        iv_index = (iv_index + 1) % IV_MODULO;\n-        return new GCMParameterSpec(96, iv, iv_index, 12);\n-    }\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/javax\/crypto\/small\/AESGCMByteBuffer.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -43,5 +43,0 @@\n-    AlgorithmParameterSpec getNewSpec() {\n-        iv_index = (iv_index + 1) % IV_MODULO;\n-        return new IvParameterSpec(iv, iv_index, 12);\n-    }\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/javax\/crypto\/small\/CC20P1305Bench.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -43,5 +43,0 @@\n-    AlgorithmParameterSpec getNewSpec() {\n-        iv_index = (iv_index + 1) % IV_MODULO;\n-        return new IvParameterSpec(iv, iv_index, 12);\n-    }\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/javax\/crypto\/small\/CC20P1305ByteBuffer.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"}]}