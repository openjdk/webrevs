{"files":[{"patch":"@@ -270,9 +270,1 @@\n-    \/\/ create heap dump before OnOutOfMemoryError commands are executed\n-    if (HeapDumpOnOutOfMemoryError) {\n-      tty->print_cr(\"java.lang.OutOfMemoryError: %s\", message);\n-      HeapDumper::dump_heap_from_oome();\n-    }\n-\n-    if (OnOutOfMemoryError && OnOutOfMemoryError[0]) {\n-      VMError::report_java_out_of_memory(message);\n-    }\n+    VMError::report_java_out_of_memory(message, HeapDumpOnOutOfMemoryError);\n","filename":"src\/hotspot\/share\/utilities\/debug.cpp","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -63,0 +63,1 @@\n+#include \"services\/heapDumper.hpp\"\n@@ -1914,1 +1915,3 @@\n-  VM_ReportJavaOutOfMemory(const char* message) { _message = message; }\n+  VM_ReportJavaOutOfMemory(const char* message, bool dumpHeap) {\n+     _message = message;\n+  }\n@@ -1946,1 +1949,4 @@\n-void VMError::report_java_out_of_memory(const char* message) {\n+void VMError::report_java_out_of_memory(const char* message, bool dumpHeap) {\n+  if(dumpHeap) {\n+    HeapDumper::dump_heap_from_oome();\n+  }\n@@ -1949,1 +1955,1 @@\n-    VM_ReportJavaOutOfMemory op(message);\n+    VM_ReportJavaOutOfMemory op(message, dumpHeap);\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -193,1 +193,1 @@\n-  static void report_java_out_of_memory(const char* message);\n+  static void report_java_out_of_memory(const char* message, bool dumpHeap);\n","filename":"src\/hotspot\/share\/utilities\/vmError.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test TestHeapDumpOnOutOfMemoryAndCrashOnOutOfMemory\n+ * @summary Test verifies call to -XX:HeapDumpOnOutOfMemoryError and\n+ *          CrashOnOutOfMemoryError handled in a single safepoint operation\n+ * @library \/test\/lib\n+ * @requires vm.flagless\n+ * @run driver TestHeapDumpOnOutOfMemoryAndCrashOnOutOfMemory\n+ *\/\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class TestHeapDumpOnOutOfMemoryAndCrashOnOutOfMemory {\n+\n+    public static void main(String[] args) throws Exception {\n+        if (args.length == 1) {\n+            try {\n+                Object[] oa = new Object[Integer.MAX_VALUE];\n+                for(int i = 0; i < oa.length; i++) {\n+                    oa[i] = new Object[Integer.MAX_VALUE];\n+                }\n+                throw new Error(\"OOME not triggered\");\n+            } catch (OutOfMemoryError err) {\n+                return;\n+            }\n+        }\n+        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+HeapDumpOnOutOfMemoryError\",\n+                  \"-XX:+CrashOnOutOfMemoryError\",\n+                  \"-Xlog:gc\",\n+                  TestHeapDumpOnOutOfMemoryError.class.getName());\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        int exitValue = output.getExitValue();\n+        if(0 != exitValue) {\n+          \/\/expecting a non zero value, as it could be due to HeapDumpOnOutOfMemory or CrashOnOutOfMemory\n+          output.stdoutShouldNotBeEmpty();\n+          output.shouldNotContain(\"[info][gc] GC\");\n+          System.out.println(\"PASSED\");\n+        } else {\n+          throw new Error(\"Expected to get non zero exit value\");\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/TestHeapDumpOnOutOfMemoryAndCrashOnOutOfMemory.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"}]}