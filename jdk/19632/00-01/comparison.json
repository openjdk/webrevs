{"files":[{"patch":"@@ -28,0 +28,3 @@\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteOrder;\n@@ -33,2 +36,0 @@\n-import static sun.security.provider.ByteArrayAccess.b2lLittle;\n-import static sun.security.provider.ByteArrayAccess.l2bLittle;\n@@ -70,2 +71,2 @@\n-    \/\/ The following two arrays are allocated to size WIDTH bytes, but we only\n-    \/\/ ever use the first blockSize bytes of them (for bytes <-> long conversions)\n+    \/\/ The following array is allocated to size WIDTH bytes, but we only\n+    \/\/ ever use the first blockSize bytes it (for bytes <-> long conversions)\n@@ -73,1 +74,4 @@\n-    private long[] longBuf = new long[DM*DM];\n+\n+    static final VarHandle asLittleEndian\n+            = MethodHandles.byteArrayViewVarHandle(long[].class,\n+            ByteOrder.LITTLE_ENDIAN).withInvokeExactBehavior();\n@@ -98,1 +102,0 @@\n-        b2lLittle(b, ofs, longBuf, 0, blockSize);\n@@ -100,1 +103,2 @@\n-            state[i] ^= longBuf[i];\n+            state[i] ^= (long) asLittleEndian.get(b, ofs);\n+            ofs += 8;\n@@ -120,1 +124,4 @@\n-            l2bLittle(state, 0, out, ofs, availableBytes);\n+            for (int i = 0; i < availableBytes \/ 8 ; i++) {\n+                asLittleEndian.set(out, ofs, state[i]);\n+                ofs += 8;\n+            }\n@@ -122,1 +129,0 @@\n-            ofs += availableBytes;\n@@ -126,2 +132,14 @@\n-        l2bLittle(state, 0, byteState, 0, numLongs * 8);\n-        System.arraycopy(byteState, 0, out, ofs, numBytes);\n+\n+        if (numLongs == numBytes * 8) {\n+            for (int i = 0; i < numLongs; i++) {\n+                asLittleEndian.set(out, ofs, state[i]);\n+                ofs += 8;\n+            }\n+        } else {\n+            int o = 0;\n+            for (int i = 0; i < numLongs; i++) {\n+                asLittleEndian.set(byteState, o, state[i]);\n+                o += 8;\n+            }\n+            System.arraycopy(byteState, 0, out, ofs, numBytes);\n+        }\n@@ -280,0 +298,1 @@\n+        copy.byteState = copy.byteState.clone();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/SHA3.java","additions":30,"deletions":11,"binary":false,"changes":41,"status":"modified"}]}