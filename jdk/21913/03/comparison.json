{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,4 @@\n- * @run driver DeterministicDump\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI DeterministicDump\n@@ -33,0 +36,1 @@\n+import jdk.test.lib.cds.CDSArchiveUtils;\n@@ -36,0 +40,2 @@\n+import java.io.BufferedReader;\n+import java.io.File;\n@@ -37,0 +43,1 @@\n+import java.io.FileReader;\n@@ -38,0 +45,1 @@\n+import java.util.ArrayDeque;\n@@ -41,0 +49,7 @@\n+\n+    static long HEADER_SIZE;      \/\/ Size of header in bytes\n+    static int HEADER_LEN = 106;  \/\/ Number of lines in CDS map file header\n+    static int LINE_OFFSET = 22;  \/\/ Offset from address to first word of data\n+    static int NUM_LINES = 5;     \/\/ Number of lines to be printed\n+    static int WORD_LEN = 16 + 1; \/\/ Length of word in map file\n+\n@@ -63,0 +78,2 @@\n+        File baseArchiveFile = new File(baseArchive + \".jsa\");\n+        HEADER_SIZE = CDSArchiveUtils.fileHeaderSize(baseArchiveFile);\n@@ -66,1 +83,1 @@\n-        compare(baseArchive, baseArchive2);\n+        compare(baseArchive, baseArchive2, baseArchiveFile);\n@@ -73,1 +90,1 @@\n-        compare(baseArchive, relocatedArchive);\n+        compare(baseArchive, relocatedArchive, baseArchiveFile);\n@@ -90,1 +107,1 @@\n-        return archiveName;\n+        return logName;\n@@ -93,1 +110,1 @@\n-    static void compare(String file0, String file1) throws Exception {\n+    static void compare(String file0, String file1, File archiveFile) throws Exception {\n@@ -96,2 +113,2 @@\n-        try (FileInputStream in0 = new FileInputStream(file0);\n-             FileInputStream in1 = new FileInputStream(file1)) {\n+        try (FileInputStream in0 = new FileInputStream(file0 + \".jsa\");\n+             FileInputStream in1 = new FileInputStream(file1 + \".jsa\")) {\n@@ -114,1 +131,6 @@\n-                        throw new RuntimeException(\"File content different at byte #\" + (total + i) + \", b0 = \" + b0 + \", b1 = \" + b1);\n+                        \/\/ The checksums are stored in the header so it should be skipped\n+                        \/\/ since we want to see the first meaningful diff between the archives\n+                        if (total + i > HEADER_SIZE) {\n+                            print_diff(file0 + \".map\", file1 + \".map\", archiveFile, total + i);\n+                            throw new RuntimeException(\"File content different at byte #\" + (total + i) + \", b0 = \" + b0 + \", b1 = \" + b1);\n+                        }\n@@ -134,0 +156,111 @@\n+\n+    \/\/ CDS map file doesn't print the alignment bytes so they need to be considered\n+    \/\/ when mapping the byte number in the archive to the word in the map file\n+    static int archiveByteToMapWord(File archiveFile, int location) throws Exception {\n+        int totalSize = 0;\n+        int word = location;\n+\n+        long len = HEADER_SIZE;\n+        long aligned = CDSArchiveUtils.fileHeaderSizeAligned(archiveFile);\n+        for (int i = 0; i < CDSArchiveUtils.num_regions(); i++) {\n+            if (i != 0) {\n+                len = CDSArchiveUtils.usedRegionSize(archiveFile, i);\n+                aligned = CDSArchiveUtils.usedRegionSizeAligned(archiveFile, i);\n+            }\n+            totalSize += len;\n+            if (location > totalSize) {\n+                word -= (aligned - len - 16);\n+            }\n+        }\n+        return word\/8;\n+    }\n+\n+    \/\/ Read the mapfile and print out the lines associated with the location\n+    static void print_diff(String mapName0, String mapName1, File archiveFile, int location) throws Exception {\n+        FileReader f0 = new FileReader(mapName0);\n+        BufferedReader b0 = new BufferedReader(f0);\n+\n+        FileReader f1 = new FileReader(mapName1);\n+        BufferedReader b1 = new BufferedReader(f1);\n+\n+        int word = archiveByteToMapWord(archiveFile, location);\n+        int wordOffset = word % 4; \/\/ Each line in the map file prints four words\n+        String region = \"\";\n+\n+        \/\/ Skip header text and go to first line\n+        for (int i = 0; i < HEADER_LEN; i++) {\n+            b0.readLine();\n+            b1.readLine();\n+        }\n+\n+        int line_num = HEADER_LEN;\n+        String s0 = \"\";\n+        String s1 = \"\";\n+        int count = 0;\n+\n+        \/\/ Store lines before and including the diff\n+        ArrayDeque<String> prefix0 = new ArrayDeque<String>();\n+        ArrayDeque<String> prefix1 = new ArrayDeque<String>();\n+\n+        \/\/ A line may contain 1-4 words so we iterate by word\n+        do {\n+            s0 = b0.readLine();\n+            s1 = b1.readLine();\n+            line_num++;\n+\n+            if (prefix0.size() >= NUM_LINES \/ 2 + 1) {\n+                prefix0.removeFirst();\n+                prefix1.removeFirst();\n+            }\n+            prefix0.addLast(s0);\n+            prefix1.addLast(s1);\n+\n+            \/\/ Skip lines with headers when counting words e.g.\n+            \/\/ [rw region          0x0000000800000000 - 0x00000008005a1f88   5906312 bytes]\n+            \/\/ or\n+            \/\/ 0x0000000800000b28: @@ TypeArrayU1       16\n+            if (!s0.contains(\": @@\") && !s0.contains(\"bytes]\")) {\n+                int words = (s0.length() - LINE_OFFSET - 70) \/ 8;\n+                count += words;\n+            } else if (s0.contains(\"bytes]\")) {\n+                region = s0;\n+            }\n+        } while (count < word);\n+\n+        \/\/ Print the diff with the region name above it\n+        System.out.println(\"[First diff: map file #1 (\" + mapName0 + \")]\");\n+        System.out.println(region);\n+        String diff0 = print_diff_helper(b0, wordOffset, prefix0);\n+\n+        System.out.println(\"\\n[First diff: map file #2 (\" + mapName1 + \")]\");\n+        System.out.println(region);\n+        String diff1 = print_diff_helper(b1, wordOffset, prefix1);\n+\n+        System.out.printf(\"\\nByte #%d at line #%d word #%d:\\n\", location, line_num, wordOffset);\n+        System.out.printf(\"%s: %s\\n%s: %s\\n\", mapName0, diff0, mapName1, diff1);\n+\n+        f0.close();\n+        f1.close();\n+    }\n+\n+    static String print_diff_helper(BufferedReader b, int wordOffset, ArrayDeque<String> prefix) throws Exception {\n+        int start = LINE_OFFSET + WORD_LEN * wordOffset;\n+        int end = start + WORD_LEN;\n+        String line = prefix.getLast();\n+        String diff = line.substring(start, end);\n+\n+        \/\/ Print previous lines\n+        for (String s : prefix) {\n+            if (s.equals(line)) {\n+                System.out.println(\">\" + s);\n+            } else {\n+                System.out.println(\" \" + s);\n+            }\n+        }\n+\n+        \/\/ Print extra lines\n+        for (int i = 0; i < NUM_LINES \/ 2; i++) {\n+            System.out.println(\" \" + b.readLine());\n+        }\n+        return diff;\n+    }\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/DeterministicDump.java","additions":142,"deletions":9,"binary":false,"changes":151,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -148,0 +148,1 @@\n+    public static int num_regions()                 { return num_regions;                 }\n@@ -498,1 +499,1 @@\n-    public static long usedRegionSizeAligned(File archiveFile, int region) throws Exception {\n+    public static long usedRegionSize(File archiveFile, int region) throws Exception {\n@@ -500,1 +501,6 @@\n-        long used = readInt(archiveFile, offset, sizetSize);\n+        return readInt(archiveFile, offset, sizetSize);\n+    }\n+\n+    \/\/ used region size\n+    public static long usedRegionSizeAligned(File archiveFile, int region) throws Exception {\n+        long used = usedRegionSize(archiveFile, region);\n","filename":"test\/lib\/jdk\/test\/lib\/cds\/CDSArchiveUtils.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"}]}