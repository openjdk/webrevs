{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -83,1 +83,1 @@\n-        compare(baseArchive, baseArchive2);\n+        compare(baseArchive, baseArchive2, baseArchiveFile);\n@@ -90,1 +90,1 @@\n-        compare(baseArchive, relocatedArchive);\n+        compare(baseArchive, relocatedArchive, baseArchiveFile);\n@@ -110,1 +110,1 @@\n-    static void compare(String file0, String file1) throws Exception {\n+    static void compare(String file0, String file1, File archiveFile) throws Exception {\n@@ -134,1 +134,1 @@\n-                            print_diff(file0 + \".map\", file1 + \".map\", total + i);\n+                            print_diff(file0 + \".map\", file1 + \".map\", archiveFile, total + i);\n@@ -157,0 +157,21 @@\n+    \/\/ CDS map file doesn't print the alignment bytes so they need to be considered\n+    \/\/ when mapping the byte number in the archive to the word in the map file\n+    static int archiveByteToMapWord(File archiveFile, int location) throws Exception {\n+        int totalSize = 0;\n+        int word = location;\n+\n+        long len = HEADER_SIZE;\n+        long aligned = CDSArchiveUtils.fileHeaderSizeAligned(archiveFile);\n+        for (int i = 0; i < CDSArchiveUtils.num_regions(); i++) {\n+            if (i != 0) {\n+                len = CDSArchiveUtils.usedRegionSize(archiveFile, i);\n+                aligned = CDSArchiveUtils.usedRegionSizeAligned(archiveFile, i);\n+            }\n+            totalSize += len;\n+            if (location > totalSize) {\n+                word -= (aligned - len - 16);\n+            }\n+        }\n+        return word\/8;\n+    }\n+\n@@ -158,1 +179,1 @@\n-    static void print_diff(String mapName0, String mapName1, int location) throws Exception {\n+    static void print_diff(String mapName0, String mapName1, File archiveFile, int location) throws Exception {\n@@ -165,4 +186,2 @@\n-        int line_num = HEADER_LEN;\n-        int word = location \/ 8;\n-        int word_offset = word % 4; \/\/ Each line in the map file prints four words\n-\n+        int word = archiveByteToMapWord(archiveFile, location);\n+        int wordOffset = word % 4; \/\/ Each line in the map file prints four words\n@@ -177,0 +196,1 @@\n+        int line_num = HEADER_LEN;\n@@ -213,1 +233,1 @@\n-        String diff_f0 = print_diff_helper(b0, word_offset, prefix0);\n+        String diff0 = print_diff_helper(b0, wordOffset, prefix0);\n@@ -217,1 +237,1 @@\n-        String diff_f1 = print_diff_helper(b1, word_offset, prefix1);\n+        String diff1 = print_diff_helper(b1, wordOffset, prefix1);\n@@ -219,2 +239,2 @@\n-        System.out.printf(\"\\nByte #%d at line #%d word #%d:\\n\", location, line_num, word_offset);\n-        System.out.printf(\"%s: %s\\n%s: %s\\n\", mapName0, diff_f0, mapName1, diff_f1);\n+        System.out.printf(\"\\nByte #%d at line #%d word #%d:\\n\", location, line_num, wordOffset);\n+        System.out.printf(\"%s: %s\\n%s: %s\\n\", mapName0, diff0, mapName1, diff1);\n@@ -226,2 +246,2 @@\n-    static String print_diff_helper(BufferedReader b, int word_offset, ArrayDeque<String> prefix) throws Exception {\n-        int start = LINE_OFFSET + WORD_LEN * word_offset;\n+    static String print_diff_helper(BufferedReader b, int wordOffset, ArrayDeque<String> prefix) throws Exception {\n+        int start = LINE_OFFSET + WORD_LEN * wordOffset;\n@@ -234,1 +254,5 @@\n-            System.out.println(s);\n+            if (s.equals(line)) {\n+                System.out.println(\">\" + s);\n+            } else {\n+                System.out.println(\" \" + s);\n+            }\n@@ -239,1 +263,1 @@\n-            System.out.println(b.readLine());\n+            System.out.println(\" \" + b.readLine());\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/DeterministicDump.java","additions":42,"deletions":18,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -148,0 +148,1 @@\n+    public static int num_regions()                 { return num_regions;                 }\n@@ -497,0 +498,6 @@\n+    \/\/ used region size\n+    public static long usedRegionSize(File archiveFile, int region) throws Exception {\n+        long offset = spOffset + cdsFileMapRegionSize * region + spUsedOffset;\n+        return readInt(archiveFile, offset, sizetSize);\n+    }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/cds\/CDSArchiveUtils.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}