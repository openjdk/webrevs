{"files":[{"patch":"@@ -6223,2 +6223,3 @@\n-  expand %{\n-    cmovI_regU_ndd(dst, cop, cr, src1, src2);\n+  format %{ \"ecmovl$cop $dst, $src1, $src2\\t# unsigned, int ndd\" %}\n+  ins_encode %{\n+    __ ecmovl((Assembler::Condition)($cop$$cmpcode), $dst$$Register, $src1$$Register, $src2$$Register);\n@@ -6226,0 +6227,1 @@\n+  ins_pipe(pipe_cmov_reg);\n@@ -6355,2 +6357,3 @@\n-  expand %{\n-    cmovI_rReg_rReg_memU_ndd(dst, cop, cr, src1, src2);\n+  format %{ \"ecmovl$cop $dst, $src1, $src2\\t# unsigned, int ndd\" %}\n+  ins_encode %{\n+    __ ecmovl((Assembler::Condition)($cop$$cmpcode), $dst$$Register, $src1$$Register, $src2$$Address);\n@@ -6358,0 +6361,1 @@\n+  ins_pipe(pipe_cmov_mem);\n@@ -6430,2 +6434,3 @@\n-  expand %{\n-    cmovN_regU_ndd(dst, cop, cr, src1, src2);\n+  format %{ \"ecmovl$cop $dst, $src1, $src2\\t# unsigned, compressed ptr ndd\" %}\n+  ins_encode %{\n+    __ ecmovl((Assembler::Condition)($cop$$cmpcode), $dst$$Register, $src1$$Register, $src2$$Register);\n@@ -6433,0 +6438,1 @@\n+  ins_pipe(pipe_cmov_reg);\n@@ -6513,1 +6519,1 @@\n-  ins_cost(200); \/\/ XXX\n+  ins_cost(200);\n@@ -6518,1 +6524,1 @@\n-  ins_pipe(pipe_cmov_reg); \/\/ XXX\n+  ins_pipe(pipe_cmov_reg);\n@@ -6532,2 +6538,3 @@\n-  expand %{\n-    cmovP_regU_ndd(dst, cop, cr, src1, src2);\n+  format %{ \"ecmovq$cop $dst, $src1, $src2\\t# unsigned, ptr ndd\" %}\n+  ins_encode %{\n+    __ ecmovq((Assembler::Condition)($cop$$cmpcode), $dst$$Register, $src1$$Register, $src2$$Register);\n@@ -6535,0 +6542,1 @@\n+  ins_pipe(pipe_cmov_reg);\n@@ -6693,1 +6701,1 @@\n-  ins_cost(200); \/\/ XXX\n+  ins_cost(200);\n@@ -6698,1 +6706,1 @@\n-  ins_pipe(pipe_cmov_reg); \/\/ XXX\n+  ins_pipe(pipe_cmov_reg);\n@@ -6729,2 +6737,3 @@\n-  expand %{\n-    cmovL_regU_ndd(dst, cop, cr, src1, src2);\n+  format %{ \"ecmovq$cop $dst, $src1, $src2\\t# unsigned, long ndd\" %}\n+  ins_encode %{\n+    __ ecmovq((Assembler::Condition)($cop$$cmpcode), $dst$$Register, $src1$$Register, $src2$$Register);\n@@ -6732,0 +6741,1 @@\n+  ins_pipe(pipe_cmov_reg);\n@@ -6820,1 +6830,1 @@\n-  ins_cost(200); \/\/ XXX\n+  ins_cost(200);\n@@ -6825,1 +6835,1 @@\n-  ins_pipe(pipe_cmov_mem); \/\/ XXX\n+  ins_pipe(pipe_cmov_mem);\n@@ -6833,2 +6843,3 @@\n-  expand %{\n-    cmovL_rReg_rReg_memU_ndd(dst, cop, cr, src1, src2);\n+  format %{ \"ecmovq$cop $dst, $src1, $src2\\t# unsigned, long ndd\" %}\n+  ins_encode %{\n+    __ ecmovq((Assembler::Condition)($cop$$cmpcode), $dst$$Register, $src1$$Register, $src2$$Address);\n@@ -6836,0 +6847,1 @@\n+  ins_pipe(pipe_cmov_mem);\n@@ -10366,0 +10378,1 @@\n+\/*\n@@ -10378,1 +10391,1 @@\n-%}\n+%}*\/\n@@ -11025,0 +11038,11 @@\n+instruct orL_rReg_castP2X_ndd(rRegL dst, any_RegP src1, any_RegP src2, rFlagsReg cr) %{\n+  match(Set dst (OrL src1 (CastP2X src2)));\n+  effect(KILL cr);\n+  flag(PD::Flag_sets_sign_flag, PD::Flag_sets_zero_flag, PD::Flag_sets_parity_flag, PD::Flag_clears_overflow_flag, PD::Flag_clears_carry_flag);\n+\n+  format %{ \"eorq     $dst, $src1, $src2\\t# long ndd\" %}\n+  ins_encode %{\n+    __ eorq($dst$$Register, $src1$$Register, $src2$$Register, false);\n+  %}\n+  ins_pipe(ialu_reg_reg);\n+%}\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":43,"deletions":19,"binary":false,"changes":62,"status":"modified"}]}