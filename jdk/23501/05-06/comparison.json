{"files":[{"patch":"@@ -6230,1 +6230,1 @@\n-  predicate(n->in(1)->in(1)->as_Bool()->_test._test == BoolTest::ne);\n+  predicate(!UseAPX && n->in(1)->in(1)->as_Bool()->_test._test == BoolTest::ne);\n@@ -6243,0 +6243,14 @@\n+instruct cmovI_regUCF2_ne_ndd(cmpOpUCF2 cop, rFlagsRegUCF cr, rRegI dst, rRegI src1, rRegI src2) %{\n+  predicate(UseAPX && n->in(1)->in(1)->as_Bool()->_test._test == BoolTest::ne);\n+  match(Set dst (CMoveI (Binary cop cr) (Binary src1 src2)));\n+\n+  ins_cost(200); \/\/ XXX\n+  format %{ \"ecmovpl  $dst, $src1, $src2\\n\\t\"\n+            \"ecmovnel $dst, $src1, $src2\" %}\n+  ins_encode %{\n+    __ ecmovl(Assembler::parity, $dst$$Register, $src1$$Register, $src2$$Register);\n+    __ ecmovl(Assembler::notEqual, $dst$$Register, $src1$$Register, $src2$$Register);\n+  %}\n+  ins_pipe(pipe_cmov_reg);\n+%}\n+\n@@ -6246,1 +6260,1 @@\n-  predicate(n->in(1)->in(1)->as_Bool()->_test._test == BoolTest::eq);\n+  predicate(!UseAPX && n->in(1)->in(1)->as_Bool()->_test._test == BoolTest::eq);\n@@ -6259,0 +6273,14 @@\n+instruct cmovI_regUCF2_eq_ndd(cmpOpUCF2 cop, rFlagsRegUCF cr, rRegI dst, rRegI src1, rRegI src2) %{\n+  predicate(UseAPX && n->in(1)->in(1)->as_Bool()->_test._test == BoolTest::eq);\n+  match(Set dst (CMoveI (Binary cop cr) (Binary src1 src2)));\n+\n+  ins_cost(200); \/\/ XXX\n+  format %{ \"ecmovpl  $dst, $src1, $src2\\n\\t\"\n+            \"ecmovnel $dst, $src1, $src2\" %}\n+  ins_encode %{\n+    __ ecmovl(Assembler::parity, $dst$$Register, $src1$$Register, $src2$$Register);\n+    __ ecmovl(Assembler::notEqual, $dst$$Register, $src1$$Register, $src2$$Register);\n+  %}\n+  ins_pipe(pipe_cmov_reg);\n+%}\n+\n@@ -6510,1 +6538,1 @@\n-  predicate(n->in(1)->in(1)->as_Bool()->_test._test == BoolTest::ne);\n+  predicate(!UseAPX && n->in(1)->in(1)->as_Bool()->_test._test == BoolTest::ne);\n@@ -6523,0 +6551,14 @@\n+instruct cmovP_regUCF2_ne_ndd(cmpOpUCF2 cop, rFlagsRegUCF cr, rRegP dst, rRegP src1, rRegP src2) %{\n+  predicate(UseAPX && n->in(1)->in(1)->as_Bool()->_test._test == BoolTest::ne);\n+  match(Set dst (CMoveP (Binary cop cr) (Binary src1 src2)));\n+\n+  ins_cost(200); \/\/ XXX\n+  format %{ \"ecmovpq  $dst, $src1, $src2\\n\\t\"\n+            \"ecmovneq $dst, $src1, $src2\" %}\n+  ins_encode %{\n+    __ ecmovq(Assembler::parity, $dst$$Register, $src1$$Register, $src2$$Register);\n+    __ ecmovq(Assembler::notEqual, $dst$$Register, $src1$$Register, $src2$$Register);\n+  %}\n+  ins_pipe(pipe_cmov_reg);\n+%}\n+\n@@ -6526,1 +6568,1 @@\n-  predicate(n->in(1)->in(1)->as_Bool()->_test._test == BoolTest::eq);\n+  predicate(!UseAPX && n->in(1)->in(1)->as_Bool()->_test._test == BoolTest::eq);\n@@ -6539,0 +6581,14 @@\n+instruct cmovP_regUCF2_eq_ndd(cmpOpUCF2 cop, rFlagsRegUCF cr, rRegP dst, rRegP src1, rRegP src2) %{\n+  predicate(UseAPX && n->in(1)->in(1)->as_Bool()->_test._test == BoolTest::eq);\n+  match(Set dst (CMoveP (Binary cop cr) (Binary src1 src2)));\n+\n+  ins_cost(200); \/\/ XXX\n+  format %{ \"ecmovpq  $dst, $src1, $src2\\n\\t\"\n+            \"ecmovneq $dst, $src1, $src2\" %}\n+  ins_encode %{\n+    __ ecmovq(Assembler::parity, $dst$$Register, $src1$$Register, $src2$$Register);\n+    __ ecmovq(Assembler::notEqual, $dst$$Register, $src1$$Register, $src2$$Register);\n+  %}\n+  ins_pipe(pipe_cmov_reg);\n+%}\n+\n@@ -6679,1 +6735,1 @@\n-  predicate(n->in(1)->in(1)->as_Bool()->_test._test == BoolTest::ne);\n+  predicate(!UseAPX && n->in(1)->in(1)->as_Bool()->_test._test == BoolTest::ne);\n@@ -6692,0 +6748,14 @@\n+instruct cmovL_regUCF2_ne_ndd(cmpOpUCF2 cop, rFlagsRegUCF cr, rRegL dst, rRegL src1, rRegL src2) %{\n+  predicate(UseAPX && n->in(1)->in(1)->as_Bool()->_test._test == BoolTest::ne);\n+  match(Set dst (CMoveL (Binary cop cr) (Binary src1 src2)));\n+\n+  ins_cost(200); \/\/ XXX\n+  format %{ \"ecmovpq  $dst, $src1, $src2\\n\\t\"\n+            \"ecmovneq $dst, $src1, $src2\" %}\n+  ins_encode %{\n+    __ ecmovq(Assembler::parity, $dst$$Register, $src1$$Register, $src2$$Register);\n+    __ ecmovq(Assembler::notEqual, $dst$$Register, $src1$$Register, $src2$$Register);\n+  %}\n+  ins_pipe(pipe_cmov_reg);\n+%}\n+\n@@ -6695,1 +6765,1 @@\n-  predicate(n->in(1)->in(1)->as_Bool()->_test._test == BoolTest::eq);\n+  predicate(!UseAPX && n->in(1)->in(1)->as_Bool()->_test._test == BoolTest::eq);\n@@ -6708,0 +6778,15 @@\n+instruct cmovL_regUCF2_eq_ndd(cmpOpUCF2 cop, rFlagsRegUCF cr, rRegL dst, rRegL src1, rRegL src2) %{\n+  predicate(UseAPX && n->in(1)->in(1)->as_Bool()->_test._test == BoolTest::eq);\n+  match(Set dst (CMoveL (Binary cop cr) (Binary src1 src2)));\n+\n+  ins_cost(200); \/\/ XXX\n+  format %{ \"ecmovpq  $dst, $src1, $src2\\n\\t\"\n+            \"ecmovneq $dst, $src1, $src2\" %}\n+  ins_encode %{\n+    __ ecmovq(Assembler::parity, $dst$$Register, $src1$$Register, $src2$$Register);\n+    __ ecmovq(Assembler::notEqual, $dst$$Register, $src1$$Register, $src2$$Register);\n+  %}\n+  ins_pipe(pipe_cmov_reg);\n+%}\n+\n+\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":91,"deletions":6,"binary":false,"changes":97,"status":"modified"}]}