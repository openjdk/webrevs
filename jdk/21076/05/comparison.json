{"files":[{"patch":"@@ -36,11 +36,23 @@\n- * zero-argument constructor and some number of associated charset\n- * implementation classes.  Charset providers may be installed in an instance\n- * of the Java platform as extensions.  Providers may also be made available by\n- * adding them to the application class path or by some other\n- * platform-specific means.  Charset providers are looked up via the current\n- * thread's {@link java.lang.Thread#getContextClassLoader() context class\n- * loader}.\n- *\n- * <p> A charset provider identifies itself with a provider-configuration file\n- * named {@code java.nio.charset.spi.CharsetProvider} in the resource\n- * directory {@code META-INF\/services}.  The file should contain a list of\n+ * zero-argument constructor and some number of associated {@code Charset}\n+ * implementation classes.  Charset providers are deployed by adding them to either\n+ * the application module path or the application class path. In order to be looked\n+ * up, charset providers must be visible to the {@link ClassLoader#getSystemClassLoader() system\n+ * class loader}. See {@link java.util.ServiceLoader##developing-service-providers\n+ * Deploying Service Providers} for further detail on deploying a charset\n+ * provider as a module or on the class path.\n+ *\n+ * <p> For a charset provider deployed in a module, the <i>provides<\/i>\n+ * directive must be specified in the module declaration. The provides directive\n+ * specifies both the service and the service provider. In this case, the service\n+ * is {@code java.nio.charset.spi.CharsetProvider}.\n+ *\n+ * <p> As an example, a charset provider deployed as a module might specify the\n+ * following directive:\n+ * <pre>{@code\n+ *     provides java.nio.charset.spi.CharsetProvider with com.example.ExternalCharsetProvider;\n+ * }<\/pre>\n+ *\n+ * <p> For a charset provider deployed on the class path, it identifies itself\n+ * with a provider-configuration file named {@code\n+ * java.nio.charset.spi.CharsetProvider} in the resource directory\n+ * {@code META-INF\/services}.  The file should contain a list of\n","filename":"src\/java.base\/share\/classes\/java\/nio\/charset\/spi\/CharsetProvider.java","additions":23,"deletions":11,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8340404\n+ * @summary Check that a CharsetProvider SPI can be deployed as a module\n+ * @build provider\/*\n+ * @run main\/othervm CharsetProviderAsModuleTest\n+ *\/\n+\n+import java.nio.charset.Charset;\n+\n+public class CharsetProviderAsModuleTest {\n+\n+    \/\/ Basic test ensures that our BAZ charset is loaded via the BazProvider\n+    public static void main(String[] args) {\n+        var cs = Charset.availableCharsets();\n+        Charset bazCs;\n+        \/\/ check provider is providing BAZ via charsets()\n+        if (!cs.containsKey(\"BAZ\")) {\n+            throw new RuntimeException(\"SPI BazProvider did not provide BAZ Charset\");\n+        } else {\n+            bazCs = cs.get(\"BAZ\");\n+            \/\/ check provider is in a named module\n+            if (!bazCs.getClass().getModule().isNamed()) {\n+                throw new RuntimeException(\"BazProvider is not a named module\");\n+            }\n+            var aliases = bazCs.aliases();\n+            \/\/ check BAZ cs aliases were loaded correctly\n+            if (!aliases.contains(\"BAZ-1\") || !aliases.contains(\"BAZ-2\")) {\n+                throw new RuntimeException(\"BAZ Charset did not provide correct aliases\");\n+            }\n+            \/\/ check provider implements charsetForName()\n+            if (!bazCs.equals(Charset.forName(\"BAZ\"))) {\n+                throw new RuntimeException(\"SPI BazProvider provides bad charsetForName()\");\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/nio\/charset\/spi\/CharsetProviderAsModuleTest.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -23,3 +23,2 @@\n-\n-module panama_jni_def_module {\n-    exports org.openjdk.jni.def;\n+module provider {\n+    provides java.nio.charset.spi.CharsetProvider with spi.BazProvider;\n","filename":"test\/jdk\/java\/nio\/charset\/spi\/provider\/module-info.java","additions":2,"deletions":3,"binary":false,"changes":5,"previous_filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/panama_jni_def_module\/module-info.java","status":"copied"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package spi;\n+\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+import java.nio.charset.CharsetEncoder;\n+import java.nio.charset.spi.CharsetProvider;\n+import java.util.Collections;\n+import java.util.Iterator;\n+\n+\/\/ Provides some simple BAZ related attributes to our provider\n+public class BazProvider extends CharsetProvider {\n+\n+    @Override\n+    public Iterator charsets() {\n+        return Collections.singleton(new BazCharset()).iterator();\n+    }\n+\n+    @Override\n+    public Charset charsetForName(String charsetName) {\n+        if (charsetName.equals(\"BAZ\")) {\n+            return new BazCharset();\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public static class BazCharset extends Charset {\n+\n+        public BazCharset() {\n+            super(\"BAZ\", new String[] { \"BAZ-1\", \"BAZ-2\" });\n+        }\n+\n+        \/\/ Overrides to satisfy Charset\n+        @Override\n+        public boolean contains(Charset cs) {\n+            return false;\n+        }\n+\n+        @Override\n+        public CharsetDecoder newDecoder() {\n+            return null;\n+        }\n+\n+        @Override\n+        public CharsetEncoder newEncoder() {\n+            return null;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/nio\/charset\/spi\/provider\/spi\/BazProvider.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"}]}