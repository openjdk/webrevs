{"files":[{"patch":"@@ -2275,1 +2275,1 @@\n-  for (uint i = 1; i < pack->size(); i++) {\n+  for (uint i = 0; i < pack->size(); i++) {\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+    static final int[] GOLDEN_M;\n@@ -74,0 +75,1 @@\n+        GOLDEN_M = testm(new int[ITER]);\n@@ -83,1 +85,1 @@\n-                 \"testi\", \"testj\", \"testk\", \"testl\"})\n+                 \"testi\", \"testj\", \"testk\", \"testl\", \"testm\"})\n@@ -98,0 +100,1 @@\n+        compare(testm(new int[ITER]), GOLDEN_M, \"testm\");\n@@ -302,0 +305,13 @@\n+    @Test\n+    @IR(counts = {IRNode.MUL_ADD_S2I, \"> 0\"},\n+        applyIfCPUFeatureOr = {\"sse2\", \"true\", \"asimd\", \"true\"})\n+    @IR(counts = {IRNode.MUL_ADD_VS2VI, \"= 0\"})\n+    public static int[] testm(int[] out) {\n+        for (int i = 0; i < ITER-4; i+=4) {\n+            \/\/ Unrolled, with some swaps that prevent vectorization.\n+            out[i+0] += ((sArr1[2*i+0] * sArr2[2*i+1]) + (sArr1[2*i+1] * sArr2[2*i+0])); \/\/ bad\n+            out[i+1] += ((sArr1[2*i+2] * sArr2[2*i+2]) + (sArr1[2*i+3] * sArr2[2*i+3])); \/\/ ok\n+            \/\/ 2-element gap\n+        }\n+        return out;\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestMulAddS2I.java","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"}]}