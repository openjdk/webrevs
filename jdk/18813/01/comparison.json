{"files":[{"patch":"@@ -2355,1 +2355,2 @@\n-  if (ABS(cl->stride_con()) == 1 ||\n+  if (cl->stride_con() == 1 ||\n+      cl->stride_con() == -1 ||\n@@ -2965,1 +2966,4 @@\n-  jlong scaled_iters_long = ((jlong)LoopStripMiningIter) * ABS(stride);\n+  \/\/ For a min int stride, LoopStripMiningIter * stride overflows the int range for all values of LoopStripMiningIter\n+  \/\/ except 0 or 1. Those values are handled early on in this method and causes the method to return. So for a min int\n+  \/\/ stride, the method is guaranteed to return at the next check below.\n+  jlong scaled_iters_long = ((jlong)LoopStripMiningIter) * ABS((jlong)stride);\n@@ -2967,1 +2971,6 @@\n-  int short_scaled_iters = LoopStripMiningIterShortLoop* ABS(stride);\n+  if ((jlong)scaled_iters != scaled_iters_long) {\n+    \/\/ Remove outer loop and safepoint (too few iterations)\n+    remove_outer_loop_and_safepoint(igvn);\n+    return;\n+  }\n+  jlong short_scaled_iters = LoopStripMiningIterShortLoop * ABS(stride);\n@@ -2971,2 +2980,2 @@\n-  if ((jlong)scaled_iters != scaled_iters_long || iter_estimate <= short_scaled_iters) {\n-    \/\/ Remove outer loop and safepoint (too few iterations)\n+  if (iter_estimate <= short_scaled_iters) {\n+    \/\/ Remove outer loop and safepoint: loop executes less than LoopStripMiningIterShortLoop\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":14,"deletions":5,"binary":false,"changes":19,"status":"modified"}]}