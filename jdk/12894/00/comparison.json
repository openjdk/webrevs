{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,2 +53,1 @@\n-            Thread zero = new Thread (\"ZERO\") {\n-                    public void run () {\n+            Thread zero = TestScaffold.newThread (() -> {\n@@ -57,0 +56,1 @@\n+                }, \"ZERO\");\n@@ -58,5 +58,1 @@\n-                    }\n-                };\n-\n-            Thread one = new Thread (\"ONE\") {\n-                    public void run () {\n+            Thread one = TestScaffold.newThread (() -> {\n@@ -69,2 +65,1 @@\n-                    }\n-                };\n+                }, \"ONE\");\n@@ -72,2 +67,1 @@\n-            Thread two = new Thread (\"TWO\") {\n-                public void run () {\n+            Thread two = TestScaffold.newThread (() -> {\n@@ -79,2 +73,1 @@\n-                }\n-            };\n+                }, \"TWO\");\n","filename":"test\/jdk\/com\/sun\/jdi\/ClassesByName2Test.java","additions":7,"deletions":14,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,2 +77,2 @@\n-        new Thread(obj1, \"jj1\").start();\n-        new Thread(obj2, \"jj2\").start();\n+        TestScaffold.newThread(obj1, \"jj1\").start();\n+        TestScaffold.newThread(obj2, \"jj2\").start();\n","filename":"test\/jdk\/com\/sun\/jdi\/DeferredStepTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -846,12 +846,9 @@\n-            inflatorThread = new Thread(\"Lock Inflator (test thread)\") {\n-                @Override\n-                public void run() {\n-                    synchronized (inflatedLock) {\n-                        inflatedLockIsPermanentlyInflated = true;\n-                        inflatedLock.notify(); \/\/ main thread\n-                        while (true) {\n-                            try {\n-                                \/\/ calling wait() on a monitor will cause inflation into a heavy monitor\n-                                inflatedLock.wait();\n-                            } catch (InterruptedException e) { \/* ignored *\/ }\n-                        }\n+            inflatorThread = TestScaffold.newThread(() -> {\n+                synchronized (inflatedLock) {\n+                    inflatedLockIsPermanentlyInflated = true;\n+                    inflatedLock.notify(); \/\/ main thread\n+                    while (true) {\n+                        try {\n+                            \/\/ calling wait() on a monitor will cause inflation into a heavy monitor\n+                            inflatedLock.wait();\n+                        } catch (InterruptedException e) { \/* ignored *\/ }\n@@ -860,1 +857,1 @@\n-            };\n+                }, \"Lock Inflator (test thread)\");\n","filename":"test\/jdk\/com\/sun\/jdi\/EATests.java","additions":10,"deletions":13,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import java.util.concurrent.ThreadFactory;\n@@ -967,0 +968,2 @@\n+    private static ThreadFactory threadFactory = r -> new Thread(r);\n+\n@@ -977,0 +980,1 @@\n+            threadFactory = r -> newVirtualThread(r);\n@@ -979,1 +983,1 @@\n-            Thread vthread = startVirtualThread(() -> {\n+            Thread vthread = newVirtualThread(() -> {\n@@ -990,0 +994,1 @@\n+            vthread.start();\n@@ -1027,1 +1032,2 @@\n-    static Thread startVirtualThread(Runnable task) {\n+    \/\/ Need to use reflection while virtual threads --enable-preview feature\n+    private static Thread newVirtualThread(Runnable task) {\n@@ -1031,1 +1037,1 @@\n-            java.lang.reflect.Method start = clazz.getMethod(\"start\", Runnable.class);\n+            java.lang.reflect.Method start = clazz.getMethod(\"unstarted\", Runnable.class);\n@@ -1039,0 +1045,10 @@\n+\n+    public static Thread newThread(Runnable task) {\n+        return threadFactory.newThread(task);\n+    }\n+\n+    public static Thread newThread(Runnable task, String name) {\n+        Thread t = newThread(task);\n+        t.setName(name);\n+        return t;\n+    }\n","filename":"test\/jdk\/com\/sun\/jdi\/TestScaffold.java","additions":20,"deletions":4,"binary":false,"changes":24,"status":"modified"}]}