{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,2 +53,1 @@\n-            Thread zero = new Thread (\"ZERO\") {\n-                    public void run () {\n+            Thread zero = TestScaffold.newThread (() -> {\n@@ -57,0 +56,1 @@\n+                }, \"ZERO\");\n@@ -58,5 +58,1 @@\n-                    }\n-                };\n-\n-            Thread one = new Thread (\"ONE\") {\n-                    public void run () {\n+            Thread one = TestScaffold.newThread (() -> {\n@@ -69,2 +65,1 @@\n-                    }\n-                };\n+                }, \"ONE\");\n@@ -72,2 +67,1 @@\n-            Thread two = new Thread (\"TWO\") {\n-                public void run () {\n+            Thread two = TestScaffold.newThread (() -> {\n@@ -79,2 +73,1 @@\n-                }\n-            };\n+                }, \"TWO\");\n","filename":"test\/jdk\/com\/sun\/jdi\/ClassesByName2Test.java","additions":7,"deletions":14,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,2 +77,2 @@\n-        new Thread(obj1, \"jj1\").start();\n-        new Thread(obj2, \"jj2\").start();\n+        TestScaffold.newThread(obj1, \"jj1\").start();\n+        TestScaffold.newThread(obj2, \"jj2\").start();\n","filename":"test\/jdk\/com\/sun\/jdi\/DeferredStepTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -846,12 +846,9 @@\n-            inflatorThread = new Thread(\"Lock Inflator (test thread)\") {\n-                @Override\n-                public void run() {\n-                    synchronized (inflatedLock) {\n-                        inflatedLockIsPermanentlyInflated = true;\n-                        inflatedLock.notify(); \/\/ main thread\n-                        while (true) {\n-                            try {\n-                                \/\/ calling wait() on a monitor will cause inflation into a heavy monitor\n-                                inflatedLock.wait();\n-                            } catch (InterruptedException e) { \/* ignored *\/ }\n-                        }\n+            inflatorThread = TestScaffold.newThread(() -> {\n+                synchronized (inflatedLock) {\n+                    inflatedLockIsPermanentlyInflated = true;\n+                    inflatedLock.notify(); \/\/ main thread\n+                    while (true) {\n+                        try {\n+                            \/\/ calling wait() on a monitor will cause inflation into a heavy monitor\n+                            inflatedLock.wait();\n+                        } catch (InterruptedException e) { \/* ignored *\/ }\n@@ -860,1 +857,1 @@\n-            };\n+                }, \"Lock Inflator (test thread)\");\n","filename":"test\/jdk\/com\/sun\/jdi\/EATests.java","additions":10,"deletions":13,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,1 @@\n-        Interruptor interruptorThread = new Interruptor(Thread.currentThread());\n+        Thread interruptorThread = TestScaffold.newThread(new Interruptor(Thread.currentThread()));\n@@ -78,1 +78,1 @@\n-class Interruptor extends Thread {\n+class Interruptor implements Runnable {\n","filename":"test\/jdk\/com\/sun\/jdi\/InterruptHangTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,1 @@\n-class InvokeHangTarg extends Thread {\n+class InvokeHangTarg implements Runnable {\n@@ -57,2 +57,2 @@\n-        InvokeHangTarg t1 = new InvokeHangTarg(name1);\n-        InvokeHangTarg t2 = new InvokeHangTarg(name2);\n+        Thread t1 = TestScaffold.newThread(new InvokeHangTarg(), name1);\n+        Thread t2 = TestScaffold.newThread(new InvokeHangTarg(), name2);\n@@ -84,4 +84,0 @@\n-    public InvokeHangTarg(String name) {\n-        super(name);\n-    }\n-\n@@ -89,1 +85,1 @@\n-        if (getName().equals(name1)) {\n+        if (Thread.currentThread().getName().equals(name1)) {\n","filename":"test\/jdk\/com\/sun\/jdi\/InvokeHangTest.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,1 @@\n-            sleeper xx = new sleeper();\n+            Thread xx = TestScaffold.newThread(new Sleeper());\n@@ -46,1 +46,1 @@\n-            while(sleeper.started == 0) {\n+            while(Sleeper.started == 0) {\n@@ -58,1 +58,1 @@\n-class sleeper extends Thread {\n+class Sleeper implements Runnable {\n","filename":"test\/jdk\/com\/sun\/jdi\/JdbLockTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,3 +51,6 @@\n-        MyThread myThread1 = test.new MyThread(\"MYTHREAD-1\");\n-        MyThread myThread2 = test.new MyThread(\"MYTHREAD-2\");\n-        MyThread myThread3 = test.new MyThread(\"MYTHREAD-3\");\n+        MyTask myTask1 = test.new MyTask();\n+        MyTask myTask2 = test.new MyTask();\n+        MyTask myTask3 = test.new MyTask();\n+        Thread myThread1 = TestScaffold.newThread(myTask1, \"MYTHREAD-1\");\n+        Thread myThread2 = TestScaffold.newThread(myTask2, \"MYTHREAD-2\");\n+        Thread myThread3 = TestScaffold.newThread(myTask3, \"MYTHREAD-3\");\n@@ -60,1 +63,1 @@\n-            while (!myThread1.started || !myThread2.started || !myThread3.started) {\n+            while (!myTask1.started || !myTask2.started || ! myTask3.started) {\n@@ -86,1 +89,1 @@\n-    class MyThread extends Thread {\n+    class MyTask implements Runnable {\n@@ -89,4 +92,0 @@\n-        public MyThread(String name) {\n-            super(name);\n-        }\n-\n@@ -115,2 +114,2 @@\n-    private static final String DEBUGGEE_THREAD_CLASS = JdbStopThreadidTestTarg.class.getName() + \"$MyThread\";\n-    private static Pattern threadidPattern = Pattern.compile(\"MyThread\\\\)(\\\\S+)\\\\s+MYTHREAD-2\");\n+    private static final String DEBUGGEE_THREAD_CLASS = JdbStopThreadidTestTarg.class.getName() + \"$MyTask\";\n+    private static Pattern threadidPattern = Pattern.compile(\"Thread\\\\)(\\\\S+)\\\\s+MYTHREAD-2\");\n@@ -139,1 +138,1 @@\n-        jdb.command(JdbCommand.cont().waitForPrompt(\"Breakpoint hit: \\\"thread=MYTHREAD-2\\\", \\\\S+MyThread.brkMethod\", true));\n+        jdb.command(JdbCommand.cont().waitForPrompt(\"Breakpoint hit: \\\"thread=MYTHREAD-2\\\", \\\\S+MyTask.brkMethod\", true));\n","filename":"test\/jdk\/com\/sun\/jdi\/JdbStopThreadidTest.java","additions":12,"deletions":13,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,1 +64,1 @@\n-        myThread t1 = new myThread();\n+        Thread t1 = TestScaffold.newThread(new MyTask());\n@@ -99,1 +99,1 @@\n-class myThread extends Thread {\n+class MyTask implements Runnable {\n","filename":"test\/jdk\/com\/sun\/jdi\/MonitorEventTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -104,1 +104,1 @@\n-    class HarassThread extends Thread {\n+    class HarassThread implements Runnable {\n@@ -189,1 +189,1 @@\n-        (new HarassThread()).start();\n+        TestScaffold.newThread(new HarassThread()).start();\n","filename":"test\/jdk\/com\/sun\/jdi\/PopAsynchronousTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-class ResumeOneThreadTarg extends Thread {\n+class ResumeOneThreadTarg implements Runnable {\n@@ -44,4 +44,0 @@\n-    public ResumeOneThreadTarg(String name) {\n-        super(name);\n-    }\n-\n@@ -50,2 +46,2 @@\n-        ResumeOneThreadTarg t1 = new ResumeOneThreadTarg(name1);\n-        ResumeOneThreadTarg t2 = new ResumeOneThreadTarg(name2);\n+        Thread t1 = TestScaffold.newThread(new ResumeOneThreadTarg(), name1);\n+        Thread t2 = TestScaffold.newThread(new ResumeOneThreadTarg(), name2);\n@@ -62,1 +58,1 @@\n-        if (getName().equals(name1)) {\n+        if (Thread.currentThread().getName().equals(name1)) {\n","filename":"test\/jdk\/com\/sun\/jdi\/ResumeOneThreadTest.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,1 @@\n-class SimulResumerTarg extends Thread {\n+class SimulResumerTarg implements Runnable {\n@@ -53,2 +53,2 @@\n-        SimulResumerTarg t1 = new SimulResumerTarg(name1);\n-        SimulResumerTarg t2 = new SimulResumerTarg(name2);\n+        Thread t1 = TestScaffold.newThread(new SimulResumerTarg(), name1);\n+        Thread t2 = TestScaffold.newThread(new SimulResumerTarg(), name2);\n@@ -60,4 +60,0 @@\n-    public SimulResumerTarg(String name) {\n-        super(name);\n-    }\n-\n@@ -65,1 +61,1 @@\n-        if (getName().equals(name1)) {\n+        if (Thread.currentThread().getName().equals(name1)) {\n","filename":"test\/jdk\/com\/sun\/jdi\/SimulResumerTest.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import java.util.concurrent.ThreadFactory;\n@@ -967,0 +968,2 @@\n+    private static ThreadFactory threadFactory = r -> new Thread(r);\n+\n@@ -977,0 +980,1 @@\n+            threadFactory = r -> newVirtualThread(r);\n@@ -979,1 +983,1 @@\n-            Thread vthread = startVirtualThread(() -> {\n+            Thread vthread = newVirtualThread(() -> {\n@@ -990,0 +994,1 @@\n+            vthread.start();\n@@ -1027,1 +1032,2 @@\n-    static Thread startVirtualThread(Runnable task) {\n+    \/\/ Need to use reflection while virtual threads --enable-preview feature\n+    private static Thread newVirtualThread(Runnable task) {\n@@ -1031,2 +1037,2 @@\n-            java.lang.reflect.Method start = clazz.getMethod(\"start\", Runnable.class);\n-            return (Thread) start.invoke(builder, task);\n+            java.lang.reflect.Method unstarted = clazz.getMethod(\"unstarted\", Runnable.class);\n+            return (Thread) unstarted.invoke(builder, task);\n@@ -1039,0 +1045,10 @@\n+\n+    public static Thread newThread(Runnable task) {\n+        return threadFactory.newThread(task);\n+    }\n+\n+    public static Thread newThread(Runnable task, String name) {\n+        Thread t = newThread(task);\n+        t.setName(name);\n+        return t;\n+    }\n","filename":"test\/jdk\/com\/sun\/jdi\/TestScaffold.java","additions":21,"deletions":5,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,1 @@\n-class TwoThreadsTarg extends Thread {\n+class TwoThreadsTarg implements Runnable {\n@@ -53,2 +53,2 @@\n-        TwoThreadsTarg t1 = new TwoThreadsTarg(name1);\n-        TwoThreadsTarg t2 = new TwoThreadsTarg(name2);\n+        Thread t1 = TestScaffold.newThread(new TwoThreadsTarg(), name1);\n+        Thread t2 = TestScaffold.newThread(new TwoThreadsTarg(), name2);\n@@ -60,3 +60,0 @@\n-    public TwoThreadsTarg(String name) {\n-        super(name);\n-    }\n@@ -65,1 +62,1 @@\n-        if (getName().equals(name1)) {\n+        if (Thread.currentThread().getName().equals(name1)) {\n","filename":"test\/jdk\/com\/sun\/jdi\/TwoThreadsTest.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"}]}