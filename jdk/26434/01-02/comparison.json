{"files":[{"patch":"@@ -33,1 +33,1 @@\n-  do_arch_blob(preuniverse, 32)                                         \\\n+  do_arch_blob(preuniverse, 0)                                          \\\n","filename":"src\/hotspot\/cpu\/aarch64\/stubDeclarations_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -11657,6 +11657,1 @@\n-    \/\/ Initialize runtime addresses needed by AOTCodeAddressTable.\n-    \/\/ Note, they are not stubs and not located in CodeCache.\n-    if (UseCRC32Intrinsics || UseCRC32CIntrinsics) {\n-      \/\/ set table address before stub generation which use it\n-      StubRoutines::_crc_table_addr = (address)StubRoutines::aarch64::_crc_table;\n-    }\n+    \/\/ preuniverse stubs are not needed for aarch64\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -74,0 +74,4 @@\n+\n+address StubRoutines::crc_table_addr()    { return (address)StubRoutines::aarch64::_crc_table; }\n+address StubRoutines::crc32c_table_addr() { ShouldNotCallThis(); return nullptr; }\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/stubRoutines_aarch64.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+ friend class StubRoutines;\n","filename":"src\/hotspot\/cpu\/aarch64\/stubRoutines_aarch64.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,0 +39,3 @@\n+\n+address StubRoutines::crc_table_addr()    { ShouldNotCallThis(); return nullptr; }\n+address StubRoutines::crc32c_table_addr() { ShouldNotCallThis(); return nullptr; }\n","filename":"src\/hotspot\/cpu\/arm\/stubRoutines_arm.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-  do_arch_blob(preuniverse, 32)                                         \\\n+  do_arch_blob(preuniverse, 0)                                          \\\n","filename":"src\/hotspot\/cpu\/ppc\/stubDeclarations_ppc.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4963,8 +4963,1 @@\n-    \/\/ Initialize runtime addresses needed by AOTCodeAddressTable.\n-    \/\/ Note, they are not stubs and not located in CodeCache.\n-    if (UseCRC32Intrinsics) {\n-      StubRoutines::_crc_table_addr = StubRoutines::ppc::generate_crc_constants(REVERSE_CRC32_POLY);\n-    }\n-    if (UseCRC32CIntrinsics) {\n-      StubRoutines::_crc32c_table_addr = StubRoutines::ppc::generate_crc_constants(REVERSE_CRC32C_POLY);\n-    }\n+    \/\/ preuniverse stubs are not needed for ppc\n","filename":"src\/hotspot\/cpu\/ppc\/stubGenerator_ppc.cpp","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+  friend class StubRoutines;\n","filename":"src\/hotspot\/cpu\/ppc\/stubRoutines_ppc.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -77,0 +77,16 @@\n+static address _crc_table_addr    = nullptr;\n+static address _crc32c_table_addr = nullptr;\n+\n+address StubRoutines::crc_table_addr() {\n+  if (_crc_table_addr == nullptr) {\n+    _crc_table_addr = StubRoutines::ppc::generate_crc_constants(REVERSE_CRC32_POLY);\n+  }\n+  return _crc_table_addr;\n+}\n+address StubRoutines::crc32c_table_addr() {\n+  if (_crc32c_table_addr == nullptr) {\n+    _crc32c_table_addr = StubRoutines::ppc::generate_crc_constants(REVERSE_CRC32C_POLY);\n+  }\n+  return _crc32c_table_addr;\n+}\n+\n","filename":"src\/hotspot\/cpu\/ppc\/stubRoutines_ppc_64.cpp","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-  do_arch_blob(preuniverse, 32)                                         \\\n+  do_arch_blob(preuniverse, 0)                                          \\\n","filename":"src\/hotspot\/cpu\/riscv\/stubDeclarations_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6664,6 +6664,1 @@\n-    \/\/ Initialize runtime addresses needed by AOTCodeAddressTable.\n-    \/\/ Note, they are not stubs and not located in CodeCache.\n-    if (UseCRC32Intrinsics) {\n-      \/\/ set table address before stub generation which use it\n-      StubRoutines::_crc_table_addr = (address)StubRoutines::riscv::_crc_table;\n-    }\n+    \/\/ preuniverse stubs are not needed for riscv\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -55,0 +55,4 @@\n+\n+address StubRoutines::crc_table_addr()    { return (address)StubRoutines::riscv::_crc_table; }\n+address StubRoutines::crc32c_table_addr() { ShouldNotCallThis(); return nullptr; }\n+\n","filename":"src\/hotspot\/cpu\/riscv\/stubRoutines_riscv.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+ friend class StubRoutines;\n","filename":"src\/hotspot\/cpu\/riscv\/stubRoutines_riscv.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-  do_arch_blob(preuniverse, 32)                                         \\\n+  do_arch_blob(preuniverse, 0)                                          \\\n","filename":"src\/hotspot\/cpu\/s390\/stubDeclarations_s390.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3287,8 +3287,1 @@\n-    \/\/ Initialize runtime addresses needed by AOTCodeAddressTable.\n-    \/\/ Note, they are not stubs and not located in CodeCache.\n-    if (UseCRC32Intrinsics) {\n-      StubRoutines::_crc_table_addr    = (address)StubRoutines::zarch::_crc_table;\n-    }\n-    if (UseCRC32CIntrinsics) {\n-      StubRoutines::_crc32c_table_addr = (address)StubRoutines::zarch::_crc32c_table;\n-    }\n+    \/\/ preuniverse stubs are not needed for s390\n","filename":"src\/hotspot\/cpu\/s390\/stubGenerator_s390.cpp","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -81,0 +81,3 @@\n+address StubRoutines::crc_table_addr()    { return (address)StubRoutines::zarch::_crc_table; }\n+address StubRoutines::crc32c_table_addr() { return (address)StubRoutines::zarch::_crc32c_table; }\n+\n@@ -83,1 +86,1 @@\n-  generate_load_absolute_address(masm, table, StubRoutines::_crc_table_addr, table_contents);\n+  generate_load_absolute_address(masm, table, StubRoutines::crc_table_addr(), table_contents);\n@@ -88,1 +91,1 @@\n-  generate_load_absolute_address(masm, table, StubRoutines::_crc32c_table_addr, table_contents);\n+  generate_load_absolute_address(masm, table, StubRoutines::crc32c_table_addr(), table_contents);\n","filename":"src\/hotspot\/cpu\/s390\/stubRoutines_s390.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -65,0 +65,1 @@\n+ friend class StubRoutines;\n","filename":"src\/hotspot\/cpu\/s390\/stubRoutines_s390.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -4054,13 +4054,1 @@\n-  StubRoutines::_fence_entry = generate_orderaccess_fence();\n-\n-  \/\/ Initialize runtime addresses needed by AOTCodeAddressTable.\n-  \/\/ Note, they are not stubs and not located in CodeCache.\n-  if (UseCRC32Intrinsics) {\n-    \/\/ set table address before stub generation which use it\n-    StubRoutines::_crc_table_addr = (address)StubRoutines::x86::_crc_table;\n-  }\n-  if (UseCRC32CIntrinsics) {\n-    bool supports_clmul = VM_Version::supports_clmul();\n-    StubRoutines::x86::generate_CRC32C_table(supports_clmul);\n-    StubRoutines::_crc32c_table_addr = (address)StubRoutines::x86::_crc32c_table;\n-  }\n+  StubRoutines::_fence_entry                = generate_orderaccess_fence();\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":1,"deletions":13,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -48,0 +48,11 @@\n+address StubRoutines::crc_table_addr() {\n+  return (address)StubRoutines::x86::_crc_table;\n+}\n+address StubRoutines::crc32c_table_addr() {\n+  if (StubRoutines::x86::_crc32c_table == nullptr) {\n+    bool supports_clmul = VM_Version::supports_clmul();\n+    StubRoutines::x86::generate_CRC32C_table(supports_clmul);\n+  }\n+  return (address)StubRoutines::x86::_crc32c_table;\n+}\n+\n@@ -294,1 +305,1 @@\n-juint *StubRoutines::x86::_crc32c_table;\n+juint* StubRoutines::x86::_crc32c_table = nullptr;\n","filename":"src\/hotspot\/cpu\/x86\/stubRoutines_x86.cpp","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+ friend class StubRoutines;\n","filename":"src\/hotspot\/cpu\/x86\/stubRoutines_x86.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-  do_arch_blob(preuniverse, 32)                                         \\\n+  do_arch_blob(preuniverse, 0)                                          \\\n","filename":"src\/hotspot\/cpu\/zero\/stubDeclarations_zero.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,2 @@\n-\/\/ zero has no arch-specific stubs nor any associated entries\n+address StubRoutines::crc_table_addr()    { ShouldNotCallThis(); return nullptr; }\n+address StubRoutines::crc32c_table_addr() { ShouldNotCallThis(); return nullptr; }\n","filename":"src\/hotspot\/cpu\/zero\/stubRoutines_zero.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -420,2 +420,0 @@\n-  static_field(StubRoutines,                _crc_table_addr,                                  address)                               \\\n-  static_field(StubRoutines,                _crc32c_table_addr,                               address)                               \\\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -654,1 +654,0 @@\n-  do_entry(initial, updateBytesCRC32, crc_table_addr, crc_table_addr)   \\\n@@ -658,2 +657,0 @@\n-  do_entry(initial, updateBytesCRC32C, crc32c_table_addr,               \\\n-           crc32c_table_addr)                                           \\\n","filename":"src\/hotspot\/share\/runtime\/stubDeclarations.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -307,0 +307,3 @@\n+  static address crc_table_addr();\n+  static address crc32c_table_addr();\n+\n","filename":"src\/hotspot\/share\/runtime\/stubRoutines.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}