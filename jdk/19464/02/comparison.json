{"files":[{"patch":"@@ -571,1 +571,1 @@\n-    QuickSort::sort(archived_modules->data(), n, (_sort_Fn)compare_module_by_name, true);\n+    QuickSort::sort(archived_modules->data(), n, compare_module_by_name);\n","filename":"src\/hotspot\/share\/classfile\/moduleEntry.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -303,1 +303,2 @@\n-    QuickSort::sort(archived_packages->data(), n, (_sort_Fn)compare_package_by_name, true);\n+    \/\/ Always allocate in the same order to produce deterministic archive.\n+    QuickSort::sort(archived_packages->data(), n, compare_package_by_name);\n","filename":"src\/hotspot\/share\/classfile\/packageEntry.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -607,1 +607,1 @@\n-      QuickSort::sort(filtered, num, diff_entries_by_size, false);\n+      QuickSort::sort(filtered, num, diff_entries_by_size);\n","filename":"src\/hotspot\/share\/compiler\/compilationMemoryStatistic.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -386,1 +386,1 @@\n-  QuickSort::sort(_collection_set_regions, _collection_set_cur_length, compare_region_idx, true);\n+  QuickSort::sort(_collection_set_regions, _collection_set_cur_length, compare_region_idx);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -362,2 +362,1 @@\n-                    compare_cards,\n-                    false);\n+                    compare_cards);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1DirtyCardQueue.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-  QuickSort::sort<RegionData>(data, (int)size, compare_by_garbage, false);\n+  QuickSort::sort(data, size, compare_by_garbage);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -325,1 +325,1 @@\n-  QuickSort::sort(suggestions, nsuggestions, sc, false);\n+  QuickSort::sort(suggestions, nsuggestions, sc);\n","filename":"src\/hotspot\/share\/logging\/logSelection.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1736,1 +1736,1 @@\n-      QuickSort::sort(methods->data(), length, func, \/*idempotent=*\/false);\n+      QuickSort::sort(methods->data(), length, func);\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-#include \"runtime\/globals.hpp\"\n@@ -31,0 +30,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -36,4 +36,2 @@\n-  static void swap(T* array, size_t x, size_t y) {\n-    T tmp = array[x];\n-    array[x] = array[y];\n-    array[y] = tmp;\n+  static void swap_elements(T* array, size_t x, size_t y) {\n+    swap(array[x], array[y]);\n@@ -43,3 +41,1 @@\n-  \/\/ We swap in these three values at the right place in the array. This\n-  \/\/ means that this method not only returns the index of the pivot\n-  \/\/ element. It also alters the array so that:\n+  \/\/ We swap these three values as needed so that\n@@ -47,1 +43,3 @@\n-  \/\/ A side effect of this is that arrays of length <= 3 are sorted.\n+  \/\/ As a result, the first and last elements are placed in the proper\n+  \/\/ partition, and arrays of length <= 3 are sorted.\n+  \/\/ The middle index is returned, designating that element as the pivot.\n@@ -56,1 +54,1 @@\n-      swap(array, 0, middle_index);\n+      swap_elements(array, 0, middle_index);\n@@ -59,1 +57,1 @@\n-      swap(array, 0, last_index);\n+      swap_elements(array, 0, last_index);\n@@ -62,1 +60,1 @@\n-      swap(array, middle_index, last_index);\n+      swap_elements(array, middle_index, last_index);\n@@ -65,1 +63,1 @@\n-    \/\/ of the fist, last and middle values. Use this as pivot.\n+    \/\/ of the first, last and middle values. Use this as pivot.\n@@ -69,1 +67,1 @@\n-  template<bool idempotent, class T, class C>\n+  template<class T, class C>\n@@ -77,1 +75,1 @@\n-        assert(left_index < length, \"reached end of partition\");\n+        assert(left_index < (length - 1), \"reached end of partition\");\n@@ -82,1 +80,0 @@\n-\n@@ -84,3 +81,1 @@\n-        if (!idempotent || comparator(array[left_index], array[right_index]) != 0) {\n-          swap(array, left_index, right_index);\n-        }\n+        swap_elements(array, left_index, right_index);\n@@ -91,3 +86,0 @@\n-\n-    ShouldNotReachHere();\n-    return 0;\n@@ -96,2 +88,3 @@\n-  template<bool idempotent, class T, class C>\n-  static void inner_sort(T* array, size_t length, C comparator) {\n+ public:\n+  template<class T, class C>\n+  static void sort(T* array, size_t length, C comparator) {\n@@ -106,1 +99,1 @@\n-    size_t split = partition<idempotent>(array, pivot, length, comparator);\n+    size_t split = partition(array, pivot, length, comparator);\n@@ -108,18 +101,2 @@\n-    inner_sort<idempotent>(array, first_part_length, comparator);\n-    inner_sort<idempotent>(&array[first_part_length], length - first_part_length, comparator);\n-  }\n-\n- public:\n-  \/\/ The idempotent parameter prevents the sort from\n-  \/\/ reordering a previous valid sort by not swapping\n-  \/\/ fields that compare as equal. This requires extra\n-  \/\/ calls to the comparator, so the performance\n-  \/\/ impact depends on the comparator.\n-  template<class T, class C>\n-  static void sort(T* array, size_t length, C comparator, bool idempotent) {\n-    \/\/ Switch \"idempotent\" from function parameter to template parameter\n-    if (idempotent) {\n-      inner_sort<true>(array, length, comparator);\n-    } else {\n-      inner_sort<false>(array, length, comparator);\n-    }\n+    sort(array, first_part_length, comparator);\n+    sort(&array[first_part_length], length - first_part_length, comparator);\n@@ -129,1 +106,0 @@\n-\n","filename":"src\/hotspot\/share\/utilities\/quickSort.hpp","additions":21,"deletions":45,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -464,1 +464,1 @@\n-      QuickSort::sort(to_release, nrelease, PointerCompare(), false);\n+      QuickSort::sort(to_release, nrelease, PointerCompare());\n","filename":"test\/hotspot\/gtest\/gc\/shared\/test_oopStorage.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,2 +51,2 @@\n-static bool sort_and_compare(int* arrayToSort, int* expectedResult, size_t length, C comparator, bool idempotent = false) {\n-  QuickSort::sort(arrayToSort, length, comparator, idempotent);\n+static bool sort_and_compare(int* arrayToSort, int* expectedResult, size_t length, C comparator) {\n+  QuickSort::sort(arrayToSort, length, comparator);\n@@ -56,12 +56,0 @@\n-static int test_even_odd_comparator(int a, int b) {\n-  bool a_is_odd = ((a % 2) == 1);\n-  bool b_is_odd = ((b % 2) == 1);\n-  if (a_is_odd == b_is_odd) {\n-    return 0;\n-  }\n-  if (a_is_odd) {\n-    return -1;\n-  }\n-  return 1;\n-}\n-\n@@ -129,44 +117,0 @@\n-  {\n-    int test_array[] = {2,8,1,4};\n-    int expected_array[] = {1,4,2,8};\n-    EXPECT_TRUE(sort_and_compare(test_array, expected_array, 4, test_even_odd_comparator));\n-  }\n-}\n-\n-TEST(QuickSort, idempotent) {\n-  {\n-    \/\/ An array of lenght 3 is only sorted by find_pivot. Make sure that it is idempotent.\n-    int test_array[] = {1, 4, 8};\n-    int expected_array[] = {1, 4, 8};\n-    EXPECT_TRUE(sort_and_compare(test_array, expected_array, 3, test_even_odd_comparator, true));\n-  }\n-  {\n-    int test_array[] = {1, 7, 9, 4, 8, 2};\n-    int expected_array[] = {1, 7, 9, 4, 8, 2};\n-    EXPECT_TRUE(sort_and_compare(test_array, expected_array, 6, test_even_odd_comparator, true));\n-  }\n-  {\n-    int test_array[] = {1, 9, 7, 4, 2, 8};\n-    int expected_array[] = {1, 9, 7, 4, 2, 8};\n-    EXPECT_TRUE(sort_and_compare(test_array, expected_array, 6, test_even_odd_comparator, true));\n-  }\n-  {\n-    int test_array[] = {7, 9, 1, 2, 8, 4};\n-    int expected_array[] = {7, 9, 1, 2, 8, 4};\n-    EXPECT_TRUE(sort_and_compare(test_array, expected_array, 6, test_even_odd_comparator, true));\n-  }\n-  {\n-    int test_array[] = {7, 1, 9, 2, 4, 8};\n-    int expected_array[] = {7, 1, 9, 2, 4, 8};\n-    EXPECT_TRUE(sort_and_compare(test_array, expected_array, 6, test_even_odd_comparator, true));\n-  }\n-  {\n-    int test_array[] = {9, 1, 7, 4, 8, 2};\n-    int expected_array[] = {9, 1, 7, 4, 8, 2};\n-    EXPECT_TRUE(sort_and_compare(test_array, expected_array, 6, test_even_odd_comparator, true));\n-  }\n-  {\n-    int test_array[] = {9, 7, 1, 4, 2, 8};\n-    int expected_array[] = {9, 7, 1, 4, 2, 8};\n-    EXPECT_TRUE(sort_and_compare(test_array, expected_array, 6, test_even_odd_comparator, true));\n-  }\n@@ -189,12 +133,0 @@\n-\n-    \/\/ Make sure sorting is idempotent.\n-    \/\/ Both test_array and expected_array are sorted by the test_comparator.\n-    \/\/ Now sort them once with the test_even_odd_comparator. Then sort the\n-    \/\/ test_array one more time with test_even_odd_comparator and verify that\n-    \/\/ it is idempotent.\n-    QuickSort::sort(expected_array, length, test_even_odd_comparator, true);\n-    QuickSort::sort(test_array, length, test_even_odd_comparator, true);\n-    EXPECT_TRUE(compare_arrays(test_array, expected_array, length));\n-    QuickSort::sort(test_array, length, test_even_odd_comparator, true);\n-    EXPECT_TRUE(compare_arrays(test_array, expected_array, length));\n-\n","filename":"test\/hotspot\/gtest\/utilities\/test_quicksort.cpp","additions":2,"deletions":70,"binary":false,"changes":72,"status":"modified"}]}