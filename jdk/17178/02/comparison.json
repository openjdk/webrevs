{"files":[{"patch":"@@ -2217,4 +2217,0 @@\n-#if INCLUDE_CDS\n-      MetaspaceShared::disable_optimized_module_handling();\n-      log_info(cds)(\"optimized module handling: disabled because bootclasspath was appended\");\n-#endif\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -67,0 +67,5 @@\n+        \/\/ -Xbootclasspath\/a or -javaagent with Boot-Class-Path attribute\n+        String append = VM.getSavedProperty(\"jdk.boot.class.path.append\");\n+        URLClassPath bootUcp = (append != null && !append.isEmpty())\n+                ? new URLClassPath(append, true)\n+                : null;\n@@ -68,1 +73,0 @@\n-            \/\/ assert VM.getSavedProperty(\"jdk.boot.class.path.append\") == null\n@@ -70,0 +74,1 @@\n+            BOOT_LOADER.setClassPath(bootUcp);\n@@ -74,6 +79,1 @@\n-            \/\/ -Xbootclasspath\/a or -javaagent with Boot-Class-Path attribute\n-            String append = VM.getSavedProperty(\"jdk.boot.class.path.append\");\n-            URLClassPath ucp = (append != null && !append.isEmpty())\n-                    ? new URLClassPath(append, true)\n-                    : null;\n-            BOOT_LOADER = new BootClassLoader(ucp);\n+            BOOT_LOADER = new BootClassLoader(bootUcp);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/loader\/ClassLoaders.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -309,1 +309,1 @@\n-        tty(\"10. run with CDS on,  with main\/test jars on classpath also with -Xbootclasspath\/a:  should not pass\");\n+        tty(\"10. run with CDS on,  with main\/test jars on classpath also with -Xbootclasspath\/a:  should pass\");\n@@ -317,1 +317,0 @@\n-                   .shouldContain(OPTIMIZE_DISABLED)\n@@ -321,0 +320,43 @@\n+\n+        \/\/ Dump an archive with -Xbootclasspath\/a\n+        output = TestCommon.createArchive(\n+                                testJar.toString(),\n+                                appClasses,\n+                                \"-Xbootclasspath\/a:\" + mainJar.toString());\n+        TestCommon.checkDump(output);\n+        tty(\"11. run with CDS on,  with test jar on classpath and with main jar on -Xbootclasspath\/a:  should pass\");\n+        TestCommon.run(\"-Xlog:cds\",\n+                       \"-cp\", testJar.toString(),\n+                       \"-Xbootclasspath\/a:\" + mainJar.toString(),\n+                       MAIN_CLASS)\n+            .assertNormalExit(out -> {\n+                out.shouldNotContain(CLASS_FOUND_MESSAGE)\n+                   .shouldNotContain(CLASS_NOT_FOUND_MESSAGE)\n+                   .shouldContain(OPTIMIZE_ENABLED);\n+            });\n+        tty(\"12. run with CDS on,  with main jar on classpath and with test jar on -Xbootclasspath\/a:  should not pass due to class paths mismatch\");\n+        TestCommon.run(\"-Xlog:cds\",\n+                       \"-cp\", mainJar.toString(),\n+                       \"-Xbootclasspath\/a:\" + testJar.toString(),\n+                       MAIN_CLASS)\n+            .assertAbnormalExit(out -> {\n+                out.shouldNotContain(CLASS_FOUND_MESSAGE)\n+                   .shouldNotContain(CLASS_NOT_FOUND_MESSAGE)\n+                   .shouldNotContain(OPTIMIZE_ENABLED)\n+                   .shouldContain(MAP_FAILED);\n+            });\n+        \/\/ Dump an archive with only -Xbootclasspath\/a\n+        output = TestCommon.createArchive(\n+                                null,\n+                                appClasses,\n+                                \"-Xbootclasspath\/a:\" + mainJar.toString());\n+        TestCommon.checkDump(output);\n+        tty(\"13. run with CDS on,  with the same -Xbootclasspath\/a as dump time and adding a -cp with test.jar:  should pass\");\n+        TestCommon.run(\"-Xlog:cds,class+load\",\n+                       \"-cp\", testJar.toString(),\n+                       \"-Xbootclasspath\/a:\" + mainJar.toString(),\n+                       MAIN_CLASS)\n+            .assertNormalExit(out -> {\n+                out.shouldMatch(MAIN_FROM_CDS)\n+                   .shouldContain(OPTIMIZE_ENABLED);\n+            });\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/modulepath\/OptimizeModuleHandlingTest.java","additions":44,"deletions":2,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -50,1 +50,2 @@\n-            \"-subgraph java\/lang\/module\/ResolvedModule jdk.internal.module.ArchivedModuleGraph\",\n+            \"-subgraph java\/lang\/module\/Configuration java.lang.module.Configuration\",\n+            \"-subgraph java\/lang\/ModuleLayer java.lang.ModuleLayer\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/serviceability\/ReplaceCriticalClassesForSubgraphs.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}