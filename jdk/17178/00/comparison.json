{"files":[{"patch":"@@ -2217,4 +2217,0 @@\n-#if INCLUDE_CDS\n-      MetaspaceShared::disable_optimized_module_handling();\n-      log_info(cds)(\"optimized module handling: disabled because bootclasspath was appended\");\n-#endif\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -67,0 +67,5 @@\n+        \/\/ -Xbootclasspath\/a or -javaagent with Boot-Class-Path attribute\n+        String append = VM.getSavedProperty(\"jdk.boot.class.path.append\");\n+        URLClassPath bootAppendUcp = (append != null && !append.isEmpty())\n+                ? new URLClassPath(append, true)\n+                : null;\n@@ -71,0 +76,1 @@\n+            BOOT_LOADER.setClassPath(bootAppendUcp);\n@@ -74,6 +80,1 @@\n-            \/\/ -Xbootclasspath\/a or -javaagent with Boot-Class-Path attribute\n-            String append = VM.getSavedProperty(\"jdk.boot.class.path.append\");\n-            URLClassPath ucp = (append != null && !append.isEmpty())\n-                    ? new URLClassPath(append, true)\n-                    : null;\n-            BOOT_LOADER = new BootClassLoader(ucp);\n+            BOOT_LOADER = new BootClassLoader(bootAppendUcp);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/loader\/ClassLoaders.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -309,1 +309,1 @@\n-        tty(\"10. run with CDS on,  with main\/test jars on classpath also with -Xbootclasspath\/a:  should not pass\");\n+        tty(\"10. run with CDS on,  with main\/test jars on classpath also with -Xbootclasspath\/a:  should pass\");\n@@ -317,1 +317,28 @@\n-                   .shouldContain(OPTIMIZE_DISABLED)\n+                   .shouldNotContain(OPTIMIZE_ENABLED)\n+                   .shouldContain(MAP_FAILED);\n+            });\n+\n+        \/\/ Dump an archive with -Xbootclasspath\/a\n+        output = TestCommon.createArchive(\n+                                testJar.toString(),\n+                                appClasses,\n+                                \"-Xbootclasspath\/a:\" + mainJar.toString());\n+        TestCommon.checkDump(output);\n+        tty(\"11. run with CDS on,  with test jar on classpath and with main jar on -Xbootclasspath\/a:  should pass\");\n+        TestCommon.run(\"-Xlog:cds\",\n+                       \"-cp\", testJar.toString(),\n+                       \"-Xbootclasspath\/a:\" + mainJar.toString(),\n+                       MAIN_CLASS)\n+            .assertNormalExit(out -> {\n+                out.shouldNotContain(CLASS_FOUND_MESSAGE)\n+                   .shouldNotContain(CLASS_NOT_FOUND_MESSAGE)\n+                   .shouldContain(OPTIMIZE_ENABLED);\n+            });\n+        tty(\"12. run with CDS on,  with main jar on classpath and with test jar on -Xbootclasspath\/a:  should not pass due to class paths mismatch\");\n+        TestCommon.run(\"-Xlog:cds\",\n+                       \"-cp\", mainJar.toString(),\n+                       \"-Xbootclasspath\/a:\" + testJar.toString(),\n+                       MAIN_CLASS)\n+            .assertAbnormalExit(out -> {\n+                out.shouldNotContain(CLASS_FOUND_MESSAGE)\n+                   .shouldNotContain(CLASS_NOT_FOUND_MESSAGE)\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/modulepath\/OptimizeModuleHandlingTest.java","additions":29,"deletions":2,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -193,1 +193,0 @@\n-                            out.shouldContain(subgraphInit);\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/serviceability\/ReplaceCriticalClasses.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}