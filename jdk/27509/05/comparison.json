{"files":[{"patch":"@@ -93,1 +93,7 @@\n-        xml.writeDTD(\"plist PUBLIC \\\"-\/\/Apple\/\/DTD PLIST 1.0\/\/EN\\\" \\\"https:\/\/www.apple.com\/DTDs\/PropertyList-1.0.dtd\\\"\");\n+        try {\n+            xml.writeDTD(\"<!DOCTYPE plist PUBLIC \\\"-\/\/Apple\/\/DTD PLIST 1.0\/\/EN\\\" \\\"https:\/\/www.apple.com\/DTDs\/PropertyList-1.0.dtd\\\">\");\n+        } catch (UnsupportedOperationException ex) {\n+            \/\/ Silently ignore.\n+            \/\/ This would normally be thrown by com.sun.xml.internal.stream.writers.XMLDOMWriterImpl.writeDTD()\n+            \/\/ or (presumably) any other DOM tree-backed XML stream writer implementation.\n+        }\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/util\/PListWriter.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import static jdk.jpackage.internal.util.function.ExceptionBox.rethrowUnchecked;\n+\n@@ -46,0 +48,1 @@\n+import javax.xml.transform.dom.DOMResult;\n@@ -66,2 +69,1 @@\n-    public static void createXml(Path dstFile, XmlConsumer xmlConsumer) throws\n-            IOException {\n+    public static void createXml(Path dstFile, XmlConsumer xmlConsumer) throws IOException {\n@@ -81,3 +83,22 @@\n-            throw new IOException(ex);\n-        } catch (IOException ex) {\n-            throw ex;\n+            throw rethrowUnchecked(ex);\n+        }\n+    }\n+\n+    public static void createXml(Node root, XmlConsumer xmlConsumer) throws IOException {\n+        createXml(new DOMResult(root), xmlConsumer);\n+    }\n+\n+    public static DOMResult createXml(XmlConsumer xmlConsumer) throws IOException {\n+        var dom = new DOMResult(initDocumentBuilder().newDocument());\n+        createXml(dom, xmlConsumer);\n+        return dom;\n+    }\n+\n+    public static void createXml(DOMResult dom, XmlConsumer xmlConsumer) throws IOException {\n+        try {\n+            var xml = XMLOutputFactory.newInstance().createXMLStreamWriter(dom);\n+            xmlConsumer.accept(xml);\n+            xml.flush();\n+            xml.close();\n+        } catch (XMLStreamException ex) {\n+            throw rethrowUnchecked(ex);\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/util\/XmlUtils.java","additions":26,"deletions":5,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -0,0 +1,128 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.test;\n+\n+import static java.util.Map.entry;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import jdk.jpackage.internal.util.PListReader;\n+import jdk.jpackage.internal.util.XmlUtils;\n+import org.junit.jupiter.api.Test;\n+import org.w3c.dom.Node;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+public class MacHelperTest {\n+\n+    @Test\n+    public void test_flatMapPList() {\n+        var props = MacHelper.flatMapPList(new PListReader(createXml(\n+                \"<key>AppName<\/key>\",\n+                \"<string>Hello<\/string>\",\n+                \"<key>AppVersion<\/key>\",\n+                \"<real>1.0<\/real>\",\n+                \"<key>UserData<\/key>\",\n+                \"<dict>\",\n+                \"  <key>Foo<\/key>\",\n+                \"  <array>\",\n+                \"    <string>Str<\/string>\",\n+                \"    <array>\",\n+                \"      <string>Another Str<\/string>\",\n+                \"      <true\/>\",\n+                \"      <false\/>\",\n+                \"    <\/array>\",\n+                \"  <\/array>\",\n+                \"<\/dict>\",\n+                \"<key>Checksum<\/key>\",\n+                \"<data>7841ff0076cdde93bdca02cfd332748c40620ce4<\/data>\",\n+                \"<key>Plugins<\/key>\",\n+                \"<array>\",\n+                \"  <dict>\",\n+                \"    <key>PluginName<\/key>\",\n+                \"    <string>Foo<\/string>\",\n+                \"    <key>Priority<\/key>\",\n+                \"    <integer>13<\/integer>\",\n+                \"    <key>History<\/key>\",\n+                \"    <array>\",\n+                \"      <string>New File<\/string>\",\n+                \"      <string>Another New File<\/string>\",\n+                \"    <\/array>\",\n+                \"  <\/dict>\",\n+                \"  <dict>\",\n+                \"    <key>PluginName<\/key>\",\n+                \"    <string>Bar<\/string>\",\n+                \"    <key>Priority<\/key>\",\n+                \"    <real>23<\/real>\",\n+                \"    <key>History<\/key>\",\n+                \"    <array\/>\",\n+                \"  <\/dict>\",\n+                \"  <dict\/>\",\n+                \"<\/array>\"\n+        )));\n+\n+        assertEquals(Map.ofEntries(\n+                entry(\"\/AppName\", \"Hello\"),\n+                entry(\"\/AppVersion\", \"1.0\"),\n+                entry(\"\/UserData\/Foo[0]\", \"Str\"),\n+                entry(\"\/UserData\/Foo[1][0]\", \"Another Str\"),\n+                entry(\"\/UserData\/Foo[1][1]\", \"true\"),\n+                entry(\"\/UserData\/Foo[1][2]\", \"false\"),\n+                entry(\"\/Checksum\", \"7841ff0076cdde93bdca02cfd332748c40620ce4\"),\n+                entry(\"\/Plugins[0]\/PluginName\", \"Foo\"),\n+                entry(\"\/Plugins[0]\/Priority\", \"13\"),\n+                entry(\"\/Plugins[0]\/History[0]\", \"New File\"),\n+                entry(\"\/Plugins[0]\/History[1]\", \"Another New File\"),\n+                entry(\"\/Plugins[1]\/PluginName\", \"Bar\"),\n+                entry(\"\/Plugins[1]\/Priority\", \"23\"),\n+                entry(\"\/Plugins[1]\/History[]\", \"\"),\n+                entry(\"\/Plugins[2]{}\", \"\")\n+        ), props);\n+    }\n+\n+    private static String createPListXml(String ...xml) {\n+        final List<String> content = new ArrayList<>();\n+        content.add(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\");\n+        content.add(\"<plist version=\\\"1.0\\\">\");\n+        content.add(\"<dict>\");\n+        content.addAll(List.of(xml));\n+        content.add(\"<\/dict>\");\n+        content.add(\"<\/plist>\");\n+        return String.join(\"\", content.toArray(String[]::new));\n+    }\n+\n+    private static Node createXml(String ...xml) {\n+        try {\n+            return XmlUtils.initDocumentBuilder().parse(new InputSource(new StringReader(createPListXml(xml))));\n+        } catch (IOException ex) {\n+            throw new UncheckedIOException(ex);\n+        } catch (SAXException ex) {\n+            throw new RuntimeException(ex);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/tools\/jpackage\/helpers-test\/jdk\/jpackage\/test\/MacHelperTest.java","additions":128,"deletions":0,"binary":false,"changes":128,"status":"added"},{"patch":"@@ -316,1 +316,1 @@\n-            cmd.addArguments(\"--runtime-image\", fakeRuntimeDir);\n+            cmd.setArgumentValue(\"--runtime-image\", fakeRuntimeDir);\n@@ -366,0 +366,23 @@\n+    public static Path createInputRuntimeImage() throws IOException {\n+\n+        final Path runtimeImageDir;\n+\n+        if (JPackageCommand.DEFAULT_RUNTIME_IMAGE != null) {\n+            runtimeImageDir = JPackageCommand.DEFAULT_RUNTIME_IMAGE;\n+        } else {\n+            runtimeImageDir = TKit.createTempDirectory(\"runtime-image\").resolve(\"data\");\n+\n+            new Executor().setToolProvider(JavaTool.JLINK)\n+                    .dumpOutput()\n+                    .addArguments(\n+                            \"--output\", runtimeImageDir.toString(),\n+                            \"--add-modules\", \"java.desktop\",\n+                            \"--strip-debug\",\n+                            \"--no-header-files\",\n+                            \"--no-man-pages\")\n+                    .execute();\n+        }\n+\n+        return runtimeImageDir;\n+    }\n+\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JPackageCommand.java","additions":24,"deletions":1,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -26,0 +26,10 @@\n+import static jdk.jpackage.internal.util.PListWriter.writeArray;\n+import static jdk.jpackage.internal.util.PListWriter.writeBoolean;\n+import static jdk.jpackage.internal.util.PListWriter.writeBooleanOptional;\n+import static jdk.jpackage.internal.util.PListWriter.writeDict;\n+import static jdk.jpackage.internal.util.PListWriter.writeKey;\n+import static jdk.jpackage.internal.util.PListWriter.writeString;\n+import static jdk.jpackage.internal.util.PListWriter.writeStringArray;\n+import static jdk.jpackage.internal.util.PListWriter.writeStringOptional;\n+import static jdk.jpackage.internal.util.XmlUtils.toXmlConsumer;\n+import static jdk.jpackage.internal.util.function.ThrowingRunnable.toRunnable;\n@@ -29,0 +39,2 @@\n+import java.io.UncheckedIOException;\n+import java.lang.constant.ClassDesc;\n@@ -34,0 +46,2 @@\n+import java.util.Collections;\n+import java.util.HashMap;\n@@ -35,0 +49,1 @@\n+import java.util.Map;\n@@ -38,0 +53,1 @@\n+import java.util.Properties;\n@@ -39,0 +55,2 @@\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n@@ -42,0 +60,1 @@\n+import javax.xml.stream.XMLStreamWriter;\n@@ -146,0 +165,4 @@\n+    public static PListReader readPListFromEmbeddedRuntime(Path appImage) {\n+        return readPList(appImage.resolve(\"Contents\/runtime\/Contents\/Info.plist\"));\n+    }\n+\n@@ -163,0 +186,46 @@\n+    public static Map<String, String> flatMapPList(PListReader plistReader) {\n+        return Collections.unmodifiableMap(expandPListDist(new HashMap<>(), \"\", plistReader.toMap(true)));\n+    }\n+\n+    private static Map<String, String> expandPListDist(Map<String, String> accumulator, String root, Map<String, Object> plistDict) {\n+        Objects.requireNonNull(accumulator);\n+        Objects.requireNonNull(plistDict);\n+        Objects.requireNonNull(root);\n+        for (var e : plistDict.entrySet()) {\n+            collectPListProperty(accumulator, root + \"\/\" + e.getKey(), e.getValue());\n+        }\n+        return accumulator;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static void collectPListProperty(Map<String, String> accumulator, String key, Object value) {\n+        Objects.requireNonNull(accumulator);\n+        Objects.requireNonNull(key);\n+        Objects.requireNonNull(value);\n+        switch (value) {\n+            case PListReader.Raw raw -> {\n+                accumulator.put(key, raw.value());\n+            }\n+            case List<?> array -> {\n+                if (array.isEmpty()) {\n+                    accumulator.put(key + \"[]\", \"\");\n+                } else {\n+                    for (int i = 0; i != array.size(); i++) {\n+                        collectPListProperty(accumulator, String.format(\"%s[%d]\", key, i), array.get(i));\n+                    }\n+                }\n+            }\n+            case Map<?, ?> map -> {\n+                if (map.isEmpty()) {\n+                    accumulator.put(key + \"{}\", \"\");\n+                } else {\n+                    expandPListDist(accumulator, key, (Map<String, Object>)map);\n+                }\n+            }\n+            default -> {\n+                throw new IllegalArgumentException(String.format(\n+                        \"Unexpected value type [%s] of property [%s]\", value.getClass(), key));\n+            }\n+        }\n+    }\n+\n@@ -189,0 +258,77 @@\n+    public static void writeFaPListFragment(JPackageCommand cmd, XMLStreamWriter xml) {\n+        toRunnable(() -> {\n+            var allProps = Stream.of(cmd.getAllArgumentValues(\"--file-associations\")).map(Path::of).map(propFile -> {\n+                try (var propFileReader = Files.newBufferedReader(propFile)) {\n+                    var props = new Properties();\n+                    props.load(propFileReader);\n+                    return props;\n+                } catch (IOException ex) {\n+                    throw new UncheckedIOException(ex);\n+                }\n+            }).toList();\n+\n+            if (!allProps.isEmpty()) {\n+                var bundleId = getPackageId(cmd);\n+\n+                Function<Properties, String> contentType = fa -> {\n+                    return String.format(\"%s.%s\", bundleId, Objects.requireNonNull(fa.getProperty(\"extension\")));\n+                };\n+\n+                Function<Properties, Optional<String>> icon = fa -> {\n+                    return Optional.ofNullable(fa.getProperty(\"icon\")).map(Path::of).map(Path::getFileName).map(Path::toString);\n+                };\n+\n+                BiFunction<Properties, String, Optional<Boolean>> asBoolean = (fa, key) -> {\n+                    return Optional.ofNullable(fa.getProperty(key)).map(Boolean::parseBoolean);\n+                };\n+\n+                BiFunction<Properties, String, List<String>> asList = (fa, key) -> {\n+                    return Optional.ofNullable(fa.getProperty(key)).map(str -> {\n+                        return List.of(str.split(\"[ ,]+\"));\n+                    }).orElseGet(List::of);\n+                };\n+\n+                writeKey(xml, \"CFBundleDocumentTypes\");\n+                writeArray(xml, toXmlConsumer(() -> {\n+                    for (var fa : allProps) {\n+                        writeDict(xml, toXmlConsumer(() -> {\n+                            writeStringArray(xml, \"LSItemContentTypes\", List.of(contentType.apply(fa)));\n+                            writeStringOptional(xml, \"CFBundleTypeName\", Optional.ofNullable(fa.getProperty(\"description\")));\n+                            writeString(xml, \"LSHandlerRank\", Optional.ofNullable(fa.getProperty(\"mac.LSHandlerRank\")).orElse(\"Owner\"));\n+                            writeString(xml, \"CFBundleTypeRole\", Optional.ofNullable(fa.getProperty(\"mac.CFBundleTypeRole\")).orElse(\"Editor\"));\n+                            writeStringOptional(xml, \"NSPersistentStoreTypeKey\", Optional.ofNullable(fa.getProperty(\"mac.NSPersistentStoreTypeKey\")));\n+                            writeStringOptional(xml, \"NSDocumentClass\", Optional.ofNullable(fa.getProperty(\"mac.NSDocumentClass\")));\n+                            writeBoolean(xml, \"LSIsAppleDefaultForType\", true);\n+                            writeBooleanOptional(xml, \"LSTypeIsPackage\", asBoolean.apply(fa, \"mac.LSTypeIsPackage\"));\n+                            writeBooleanOptional(xml, \"LSSupportsOpeningDocumentsInPlace\", asBoolean.apply(fa, \"mac.LSSupportsOpeningDocumentsInPlace\"));\n+                            writeBooleanOptional(xml, \"UISupportsDocumentBrowser\", asBoolean.apply(fa, \"mac.UISupportsDocumentBrowser\"));\n+                            writeStringOptional(xml, \"CFBundleTypeIconFile\", icon.apply(fa));\n+                        }));\n+                    }\n+                }));\n+\n+                writeKey(xml, \"UTExportedTypeDeclarations\");\n+                writeArray(xml, toXmlConsumer(() -> {\n+                    for (var fa : allProps) {\n+                        writeDict(xml, toXmlConsumer(() -> {\n+                            writeString(xml, \"UTTypeIdentifier\", contentType.apply(fa));\n+                            writeStringOptional(xml, \"UTTypeDescription\", Optional.ofNullable(fa.getProperty(\"description\")));\n+                            if (fa.containsKey(\"mac.UTTypeConformsTo\")) {\n+                                writeStringArray(xml, \"UTTypeConformsTo\", asList.apply(fa, \"mac.UTTypeConformsTo\"));\n+                            } else {\n+                                writeStringArray(xml, \"UTTypeConformsTo\", List.of(\"public.data\"));\n+                            }\n+                            writeStringOptional(xml, \"UTTypeIconFile\", icon.apply(fa));\n+                            writeKey(xml, \"UTTypeTagSpecification\");\n+                            writeDict(xml, toXmlConsumer(() -> {\n+                                writeStringArray(xml, \"public.filename-extension\", List.of(fa.getProperty(\"extension\")));\n+                                writeStringArray(xml, \"public.mime-type\", List.of(fa.getProperty(\"mime-type\")));\n+                                writeStringArray(xml, \"NSExportableTypes\", asList.apply(fa, \"mac.NSExportableTypes\"));\n+                            }));\n+                        }));\n+                    }\n+                }));\n+            }\n+        }).run();\n+    }\n+\n@@ -378,1 +524,6 @@\n-                return JavaAppDesc.parse(className).packageName();\n+                var packageName = ClassDesc.of(className).packageName();\n+                if (packageName.isEmpty()) {\n+                    return className;\n+                } else {\n+                    return packageName;\n+                }\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/MacHelper.java","additions":152,"deletions":1,"binary":false,"changes":153,"status":"modified"},{"patch":"@@ -0,0 +1,373 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import static java.util.Map.entry;\n+import static jdk.jpackage.internal.util.PListWriter.writeDict;\n+import static jdk.jpackage.internal.util.PListWriter.writePList;\n+import static jdk.jpackage.internal.util.PListWriter.writeString;\n+import static jdk.jpackage.internal.util.XmlUtils.createXml;\n+import static jdk.jpackage.internal.util.XmlUtils.toXmlConsumer;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.function.BiConsumer;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamWriter;\n+import jdk.jpackage.internal.util.PListReader;\n+import jdk.jpackage.internal.util.function.ThrowingBiConsumer;\n+import jdk.jpackage.internal.util.function.ThrowingConsumer;\n+import jdk.jpackage.test.Annotations.ParameterSupplier;\n+import jdk.jpackage.test.Annotations.Test;\n+import jdk.jpackage.test.JPackageCommand;\n+import jdk.jpackage.test.JPackageStringBundle;\n+import jdk.jpackage.test.MacHelper;\n+import jdk.jpackage.test.PackageTest;\n+import jdk.jpackage.test.PackageType;\n+import jdk.jpackage.test.RunnablePackageTest.Action;\n+import jdk.jpackage.test.TKit;\n+\n+\/**\n+ * Test --resource-dir with custom \"Info.plist\" for the top-level bundle\n+ * and \"Runtime-Info.plist\" for the embedded runtime bundle\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary jpackage with --type image --resource-dir \"Info.plist\" and \"Runtime-Info.plist\"\n+ * @library \/test\/jdk\/tools\/jpackage\/helpers\n+ * @key jpackagePlatformPackage\n+ * @build jdk.jpackage.test.*\n+ * @build CustomInfoPListTest\n+ * @requires (os.family == \"mac\")\n+ * @requires (jpackage.test.SQETest == null)\n+ * @run main\/othervm\/timeout=1440 -Xmx512m jdk.jpackage.test.Main\n+ *  --jpt-run=CustomInfoPListTest\n+ *\/\n+public class CustomInfoPListTest {\n+\n+    @Test\n+    @ParameterSupplier(\"customPLists\")\n+    public void testAppImage(TestConfig cfg) throws Throwable {\n+        var cmd = cfg.init(JPackageCommand.helloAppImage());\n+        var verifier = cfg.createPListFilesVerifier(cmd.executePrerequisiteActions());\n+        cmd.executeAndAssertHelloAppImageCreated();\n+        verifier.accept(cmd);\n+    }\n+\n+    @Test\n+    @ParameterSupplier(\"customPLists\")\n+    public void testNativePackage(TestConfig cfg) {\n+        List<ThrowingConsumer<JPackageCommand>> verifier = new ArrayList<>();\n+        new PackageTest().configureHelloApp().addInitializer(cmd -> {\n+            cfg.init(cmd.setFakeRuntime());\n+        }).addRunOnceInitializer(() -> {\n+            verifier.add(cfg.createPListFilesVerifier(JPackageCommand.helloAppImage().executePrerequisiteActions()));\n+        }).addInstallVerifier(cmd -> {\n+            verifier.get(0).accept(cmd);\n+        }).run(Action.CREATE_AND_UNPACK);\n+    }\n+\n+    @Test\n+    public void testRuntime() {\n+        final Path runtimeImage[] = new Path[1];\n+\n+        var cfg = new TestConfig(Set.of(CustomPListType.RUNTIME));\n+\n+        new PackageTest().addRunOnceInitializer(() -> {\n+            runtimeImage[0] = JPackageCommand.createInputRuntimeImage();\n+        }).addInitializer(cmd -> {\n+            cmd.ignoreDefaultRuntime(true)\n+                    .removeArgumentWithValue(\"--input\")\n+                    .setArgumentValue(\"--runtime-image\", runtimeImage[0]);\n+            cfg.init(cmd);\n+        }).addInstallVerifier(cmd -> {\n+            cfg.createPListFilesVerifier(cmd).accept(cmd);\n+        }).run(Action.CREATE_AND_UNPACK);\n+    }\n+\n+    public static Collection<Object[]> customPLists() {\n+        return Stream.of(\n+                Set.of(CustomPListType.APP),\n+                Set.of(CustomPListType.APP_WITH_FA),\n+                Set.of(CustomPListType.EMBEDDED_RUNTIME),\n+                Set.of(CustomPListType.APP, CustomPListType.EMBEDDED_RUNTIME)\n+        ).map(TestConfig::new).map(cfg -> {\n+            return new Object[] { cfg };\n+        }).toList();\n+    }\n+\n+    private static List<String> toStringList(PListReader plistReader) {\n+        return MacHelper.flatMapPList(plistReader).entrySet().stream().sorted(Comparator.comparing(Map.Entry::getKey)).map(e -> {\n+            return String.format(\"%s: %s\", e.getKey(), e.getValue());\n+        }).toList();\n+    }\n+\n+\n+    public record TestConfig(Set<CustomPListType> customPLists) {\n+\n+        public TestConfig {\n+            Objects.requireNonNull(customPLists);\n+            if (customPLists.isEmpty()) {\n+                throw new IllegalArgumentException();\n+            }\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return customPLists.stream()\n+                    .sorted(Comparator.comparing(CustomPListType::role))\n+                    .map(CustomPListType::toString)\n+                    .collect(Collectors.joining(\"+\"));\n+        }\n+\n+        JPackageCommand init(JPackageCommand cmd) throws IOException {\n+            if (customPLists.contains(CustomPListType.APP_WITH_FA)) {\n+                final Path propFile = TKit.createTempFile(\"fa.properties\");\n+                var map = Map.ofEntries(\n+                        entry(\"mime-type\", \"application\/x-jpackage-foo\"),\n+                        entry(\"extension\", \"foo\"),\n+                        entry(\"description\", \"bar\")\n+                );\n+                TKit.createPropertiesFile(propFile, map);\n+                cmd.setArgumentValue(\"--file-associations\", propFile);\n+            }\n+\n+            cmd.setArgumentValue(\"--resource-dir\", TKit.createTempDirectory(\"resources\"));\n+            for (var customPList : customPLists) {\n+                customPList.createInputPListFile(cmd);\n+            }\n+            return cmd;\n+        }\n+\n+        ThrowingConsumer<JPackageCommand> createPListFilesVerifier(JPackageCommand cmd) throws IOException {\n+            ThrowingConsumer<JPackageCommand> defaultVerifier = otherCmd -> {\n+                for (var customPList : customPLists) {\n+                    customPList.verifyPListFile(otherCmd);\n+                }\n+            };\n+\n+            var defaultPListFiles = CustomPListType.defaultRoles(customPLists);\n+\n+            if (defaultPListFiles.isEmpty()) {\n+                return defaultVerifier;\n+            } else {\n+                var vanillaCmd = new JPackageCommand().setFakeRuntime()\n+                        .addArguments(cmd.getAllArguments())\n+                        .setPackageType(PackageType.IMAGE)\n+                        .removeArgumentWithValue(\"--resource-dir\")\n+                        .setArgumentValue(\"--dest\", TKit.createTempDirectory(\"vanilla\"));\n+                vanillaCmd.executeIgnoreExitCode().assertExitCodeIsZero();\n+\n+                return otherCmd -> {\n+                    defaultVerifier.accept(otherCmd);\n+                    for (var defaultPListFile : defaultPListFiles) {\n+                        final var expectedPListPath = defaultPListFile.path(vanillaCmd);\n+                        final var expectedPList = MacHelper.readPList(expectedPListPath);\n+\n+                        final var actualPListPath = defaultPListFile.path(otherCmd);\n+                        final var actualPList = MacHelper.readPList(actualPListPath);\n+\n+                        var expected = toStringList(expectedPList);\n+                        var actual = toStringList(actualPList);\n+\n+                        TKit.assertStringListEquals(expected, actual, String.format(\n+                                \"Check contents of [%s] and [%s] plist files are the same\", expectedPListPath, actualPListPath));\n+                    }\n+                };\n+            }\n+        }\n+    }\n+\n+\n+    private enum PListRole {\n+        MAIN,\n+        EMBEDDED_RUNTIME,\n+        ;\n+\n+        Path path(JPackageCommand cmd) {\n+            final Path bundleRoot;\n+            if (cmd.isRuntime() || this == EMBEDDED_RUNTIME) {\n+                bundleRoot = cmd.appRuntimeDirectory();\n+            } else {\n+                bundleRoot = cmd.appLayout().contentDirectory().getParent();\n+            }\n+            return bundleRoot.resolve(\"Contents\/Info.plist\");\n+        }\n+    }\n+\n+\n+    private enum CustomPListType {\n+        APP(\n+                CustomPListFactory.PLIST_INPUT::writeAppPlist,\n+                CustomPListFactory.PLIST_OUTPUT::writeAppPlist,\n+                \"Info.plist\"),\n+\n+        APP_WITH_FA(APP),\n+\n+        EMBEDDED_RUNTIME(\n+                CustomPListFactory.PLIST_INPUT::writeEmbeddedRuntimePlist,\n+                CustomPListFactory.PLIST_OUTPUT::writeEmbeddedRuntimePlist,\n+                \"Runtime-Info.plist\"),\n+\n+        RUNTIME(\n+                CustomPListFactory.PLIST_INPUT::writeRuntimePlist,\n+                CustomPListFactory.PLIST_OUTPUT::writeRuntimePlist,\n+                \"Info.plist\"),\n+        ;\n+\n+        private CustomPListType(\n+                ThrowingBiConsumer<JPackageCommand, XMLStreamWriter> inputPlistWriter,\n+                ThrowingBiConsumer<JPackageCommand, XMLStreamWriter> outputPlistWriter,\n+                String outputPlistFilename) {\n+            this.inputPlistWriter = ThrowingBiConsumer.toBiConsumer(inputPlistWriter);\n+            this.outputPlistWriter = ThrowingBiConsumer.toBiConsumer(outputPlistWriter);\n+            this.outputPlistFilename = outputPlistFilename;\n+        }\n+\n+        private CustomPListType(CustomPListType other) {\n+            this.inputPlistWriter = other.inputPlistWriter;\n+            this.outputPlistWriter = other.outputPlistWriter;\n+            this.outputPlistFilename = other.outputPlistFilename;\n+        }\n+\n+        void createInputPListFile(JPackageCommand cmd) throws IOException {\n+            createXml(Path.of(cmd.getArgumentValue(\"--resource-dir\")).resolve(outputPlistFilename), xml -> {\n+                inputPlistWriter.accept(cmd, xml);\n+            });\n+        }\n+\n+        void verifyPListFile(JPackageCommand cmd) throws IOException {\n+            final var expectedPList = new PListReader(createXml(xml -> {\n+                    outputPlistWriter.accept(cmd, xml);\n+                }).getNode());\n+\n+            final var actualPListPath = role().path(cmd);\n+            final var actualPList = MacHelper.readPList(actualPListPath);\n+\n+            var expected = toStringList(expectedPList);\n+            var actual = toStringList(actualPList);\n+\n+            TKit.assertStringListEquals(expected, actual, String.format(\"Check contents of [%s] plist file is as expected\", actualPListPath));\n+        }\n+\n+        PListRole role() {\n+            if (this == EMBEDDED_RUNTIME) {\n+                return PListRole.EMBEDDED_RUNTIME;\n+            } else {\n+                return PListRole.MAIN;\n+            }\n+        }\n+\n+        static Set<PListRole> defaultRoles(Collection<CustomPListType> customPLists) {\n+            var result = new HashSet<>(Set.of(PListRole.values()));\n+            customPLists.stream().<PListRole>mapMulti((customPList, acc) -> {\n+                if (customPList == CustomPListType.RUNTIME) {\n+                    List.of(PListRole.values()).forEach(acc::accept);\n+                } else {\n+                    acc.accept(customPList.role());\n+                }\n+            }).forEach(result::remove);\n+            return Collections.unmodifiableSet(result);\n+        }\n+\n+        private final BiConsumer<JPackageCommand, XMLStreamWriter> inputPlistWriter;\n+        private final BiConsumer<JPackageCommand, XMLStreamWriter> outputPlistWriter;\n+        private final String outputPlistFilename;\n+    }\n+\n+\n+    private enum CustomPListFactory {\n+        PLIST_INPUT,\n+        PLIST_OUTPUT,\n+        ;\n+\n+        private void writeAppPlist(JPackageCommand cmd, XMLStreamWriter xml) throws XMLStreamException, IOException {\n+            writePList(xml, toXmlConsumer(() -> {\n+                writeDict(xml, toXmlConsumer(() -> {\n+                    writeString(xml, \"CustomAppProperty\", \"App\");\n+                    writeString(xml, \"CFBundleExecutable\", value(\"DEPLOY_LAUNCHER_NAME\", cmd.name()));\n+                    writeString(xml, \"CFBundleIconFile\", value(\"DEPLOY_ICON_FILE\", cmd.name() + \".icns\"));\n+                    writeString(xml, \"CFBundleIdentifier\", value(\"DEPLOY_BUNDLE_IDENTIFIER\", \"Hello\"));\n+                    writeString(xml, \"CFBundleName\", value(\"DEPLOY_BUNDLE_NAME\", cmd.name()));\n+                    writeString(xml, \"CFBundleShortVersionString\", value(\"DEPLOY_BUNDLE_SHORT_VERSION\", cmd.version()));\n+                    writeString(xml, \"LSApplicationCategoryType\", value(\"DEPLOY_APP_CATEGORY\", \"public.app-category.utilities\"));\n+                    writeString(xml, \"CFBundleVersion\", value(\"DEPLOY_BUNDLE_CFBUNDLE_VERSION\", cmd.version()));\n+                    writeString(xml, \"NSHumanReadableCopyright\", value(\"DEPLOY_BUNDLE_COPYRIGHT\",\n+                            JPackageStringBundle.MAIN.cannedFormattedString(\"param.copyright.default\", new Date()).getValue()));\n+                    if (cmd.hasArgument(\"--file-associations\")) {\n+                        if (this == PLIST_INPUT) {\n+                            xml.writeCharacters(\"DEPLOY_FILE_ASSOCIATIONS\");\n+                        } else {\n+                            MacHelper.writeFaPListFragment(cmd, xml);\n+                        }\n+                    }\n+                }));\n+            }));\n+        }\n+\n+        void writeEmbeddedRuntimePlist(JPackageCommand cmd, XMLStreamWriter xml) throws XMLStreamException, IOException {\n+            writePList(xml, toXmlConsumer(() -> {\n+                writeDict(xml, toXmlConsumer(() -> {\n+                    writeString(xml, \"CustomEmbeddedRuntimeProperty\", \"Embedded runtime\");\n+                    writeString(xml, \"CFBundleIdentifier\", value(\"CF_BUNDLE_IDENTIFIER\", \"Hello\"));\n+                    writeString(xml, \"CFBundleName\", value(\"CF_BUNDLE_NAME\", cmd.name()));\n+                    writeString(xml, \"CFBundleShortVersionString\", value(\"CF_BUNDLE_SHORT_VERSION_STRING\", cmd.version()));\n+                    writeString(xml, \"CFBundleVersion\", value(\"CF_BUNDLE_VERSION\", cmd.version()));\n+                }));\n+            }));\n+        }\n+\n+        void writeRuntimePlist(JPackageCommand cmd, XMLStreamWriter xml) throws XMLStreamException, IOException {\n+            writePList(xml, toXmlConsumer(() -> {\n+                writeDict(xml, toXmlConsumer(() -> {\n+                    writeString(xml, \"CustomRuntimeProperty\", \"Runtime\");\n+                    writeString(xml, \"CFBundleIdentifier\", value(\"CF_BUNDLE_IDENTIFIER\", cmd.name()));\n+                    writeString(xml, \"CFBundleName\", value(\"CF_BUNDLE_NAME\", cmd.name()));\n+                    writeString(xml, \"CFBundleShortVersionString\", value(\"CF_BUNDLE_SHORT_VERSION_STRING\", cmd.version()));\n+                    writeString(xml, \"CFBundleVersion\", value(\"CF_BUNDLE_VERSION\", cmd.version()));\n+                    writeString(xml, \"CustomInfoPListFA\", \"DEPLOY_FILE_ASSOCIATIONS\");\n+                }));\n+            }));\n+        }\n+\n+        private String value(String input, String output) {\n+            if (this == PLIST_INPUT) {\n+                return input;\n+            } else {\n+                return output;\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/CustomInfoPListTest.java","additions":373,"deletions":0,"binary":false,"changes":373,"status":"added"},{"patch":"@@ -25,0 +25,7 @@\n+import static jdk.jpackage.internal.util.PListWriter.writeDict;\n+import static jdk.jpackage.internal.util.PListWriter.writePList;\n+import static jdk.jpackage.internal.util.XmlUtils.createXml;\n+import static jdk.jpackage.internal.util.XmlUtils.toXmlConsumer;\n+import static jdk.jpackage.test.MacHelper.flatMapPList;\n+import static jdk.jpackage.test.MacHelper.readPListFromAppImage;\n+import static jdk.jpackage.test.MacHelper.writeFaPListFragment;\n@@ -27,1 +34,1 @@\n-import java.util.List;\n+import java.util.Comparator;\n@@ -29,0 +36,2 @@\n+import java.util.function.Function;\n+import java.util.stream.Stream;\n@@ -32,1 +41,0 @@\n-import jdk.jpackage.test.MacHelper;\n@@ -55,1 +63,1 @@\n-        final Path propFile = TKit.workDir().resolve(\"fa.properties\");\n+        final Path propFile = TKit.createTempFile(\"fa.properties\");\n@@ -70,1 +78,1 @@\n-        JPackageCommand cmd = JPackageCommand.helloAppImage();\n+        final var cmd = JPackageCommand.helloAppImage().setFakeRuntime();\n@@ -74,41 +82,3 @@\n-        Path appImage = cmd.outputBundle();\n-        verifyPList(appImage);\n-    }\n-\n-    private static void checkStringValue(PListReader plist, String key, String value) {\n-        String result = plist.queryValue(key);\n-        TKit.assertEquals(value, result, String.format(\n-                \"Check value of %s plist key\", key));\n-    }\n-\n-    private static void checkBoolValue(PListReader plist, String key, boolean value) {\n-        boolean result = plist.queryBoolValue(key);\n-        TKit.assertEquals(value, result, String.format(\n-                \"Check value of %s plist key\", key));\n-    }\n-\n-    private static void checkArrayValue(PListReader plist, String key,\n-            List<String> values) {\n-        List<String> result = plist.queryStringArrayValue(key);\n-        TKit.assertStringListEquals(values, result, String.format(\n-                \"Check value of %s plist key\", key));\n-    }\n-\n-    private static void verifyPList(Path appImage) throws Exception {\n-        final var rootPlist = MacHelper.readPListFromAppImage(appImage);\n-\n-        TKit.traceFileContents(appImage.resolve(\"Contents\/Info.plist\"), \"Info.plist\");\n-\n-        var plist = rootPlist.queryArrayValue(\"CFBundleDocumentTypes\", false).findFirst().map(PListReader.class::cast).orElseThrow();\n-\n-        checkStringValue(plist, \"CFBundleTypeRole\", \"Viewer\");\n-        checkStringValue(plist, \"LSHandlerRank\", \"Default\");\n-        checkStringValue(plist, \"NSDocumentClass\", \"SomeClass\");\n-\n-        checkBoolValue(plist, \"LSTypeIsPackage\", true);\n-        checkBoolValue(plist, \"LSSupportsOpeningDocumentsInPlace\", false);\n-        checkBoolValue(plist, \"UISupportsDocumentBrowser\", false);\n-\n-        plist = rootPlist.queryArrayValue(\"UTExportedTypeDeclarations\", false).findFirst().map(PListReader.class::cast).orElseThrow();\n-\n-        checkArrayValue(plist, \"UTTypeConformsTo\", List.of(\"public.image\", \"public.data\"));\n+        Function<Map.Entry<String, String>, String> toString = e -> {\n+            return String.format(\"%s => %s\", e.getKey(), e.getValue());\n+        };\n@@ -116,1 +86,3 @@\n-        plist = plist.queryDictValue(\"UTTypeTagSpecification\");\n+        final var actualFaProperties = flatMapPList(readPListFromAppImage(cmd.outputBundle())).entrySet().stream().filter(e -> {\n+            return Stream.of(\"\/CFBundleDocumentTypes\", \"\/UTExportedTypeDeclarations\").anyMatch(e.getKey()::startsWith);\n+        }).sorted(Comparator.comparing(Map.Entry::getKey)).map(toString).toList();\n@@ -118,1 +90,7 @@\n-        checkArrayValue(plist, \"NSExportableTypes\", List.of(\"public.png\", \"public.jpg\"));\n+        final var expectedFaProperties = flatMapPList(new PListReader(createXml(xml -> {\n+            writePList(xml, toXmlConsumer(() -> {\n+                writeDict(xml, toXmlConsumer(() -> {\n+                    writeFaPListFragment(cmd, xml);\n+                }));\n+            }));\n+        }).getNode())).entrySet().stream().sorted(Comparator.comparing(Map.Entry::getKey)).map(toString).toList();\n@@ -120,0 +98,1 @@\n+        TKit.assertStringListEquals(expectedFaProperties, actualFaProperties, \"Check fa properties in the Info.plist file as expected\");\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/MacFileAssociationsTest.java","additions":26,"deletions":47,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+\n@@ -32,1 +33,0 @@\n-import jdk.jpackage.test.JavaTool;\n@@ -97,23 +97,0 @@\n-    private static Path createInputRuntimeImage() throws IOException {\n-\n-        final Path runtimeImageDir;\n-\n-        if (JPackageCommand.DEFAULT_RUNTIME_IMAGE != null) {\n-            runtimeImageDir = JPackageCommand.DEFAULT_RUNTIME_IMAGE;\n-        } else {\n-            runtimeImageDir = TKit.createTempDirectory(\"runtime-image\").resolve(\"data\");\n-\n-            new Executor().setToolProvider(JavaTool.JLINK)\n-                    .dumpOutput()\n-                    .addArguments(\n-                            \"--output\", runtimeImageDir.toString(),\n-                            \"--add-modules\", \"java.desktop\",\n-                            \"--strip-debug\",\n-                            \"--no-header-files\",\n-                            \"--no-man-pages\")\n-                    .execute();\n-        }\n-\n-        return runtimeImageDir;\n-    }\n-\n@@ -122,1 +99,1 @@\n-        final var runtimeImage = createInputRuntimeImage();\n+        final var runtimeImage = JPackageCommand.createInputRuntimeImage();\n@@ -181,1 +158,1 @@\n-                        inputRuntime[0] = createInputRuntimeImage();\n+                        inputRuntime[0] = JPackageCommand.createInputRuntimeImage();\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningRuntimeImagePackageTest.java","additions":3,"deletions":26,"binary":false,"changes":29,"status":"modified"}]}