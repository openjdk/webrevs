{"files":[{"patch":"@@ -93,1 +93,2 @@\n-        xml.writeDTD(\"plist PUBLIC \\\"-\/\/Apple\/\/DTD PLIST 1.0\/\/EN\\\" \\\"https:\/\/www.apple.com\/DTDs\/PropertyList-1.0.dtd\\\"\");\n+        xml.writeStartDocument();\n+        xml.writeDTD(\"<!DOCTYPE plist PUBLIC \\\"-\/\/Apple\/\/DTD PLIST 1.0\/\/EN\\\" \\\"https:\/\/www.apple.com\/DTDs\/PropertyList-1.0.dtd\\\">\");\n@@ -98,0 +99,1 @@\n+        xml.writeEndDocument();\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/util\/PListWriter.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -131,0 +131,4 @@\n+    public static PListReader readPListFromEmbeddedRuntime(Path appImage) {\n+        return readPList(appImage.resolve(\"Contents\/runtime\/Contents\/Info.plist\"));\n+    }\n+\n@@ -174,0 +178,23 @@\n+    public static Path createInputRuntimeImage() throws IOException {\n+\n+        final Path runtimeImageDir;\n+\n+        if (JPackageCommand.DEFAULT_RUNTIME_IMAGE != null) {\n+            runtimeImageDir = JPackageCommand.DEFAULT_RUNTIME_IMAGE;\n+        } else {\n+            runtimeImageDir = TKit.createTempDirectory(\"runtime-image\").resolve(\"data\");\n+\n+            new Executor().setToolProvider(JavaTool.JLINK)\n+                    .dumpOutput()\n+                    .addArguments(\n+                            \"--output\", runtimeImageDir.toString(),\n+                            \"--add-modules\", \"java.desktop\",\n+                            \"--strip-debug\",\n+                            \"--no-header-files\",\n+                            \"--no-man-pages\")\n+                    .execute();\n+        }\n+\n+        return runtimeImageDir;\n+    }\n+\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/MacHelper.java","additions":27,"deletions":0,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -0,0 +1,150 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+ \/**\n+ * Test --resource-dir with custom \"Info.plist\" for the top-level bundle\n+ * and \"Runtime-Info.plist\" for the embedded runtime bundle\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary jpackage with --type image --resource-dir \"Info.plist\" and \"Runtime-Info.plist\"\n+ * @library \/test\/jdk\/tools\/jpackage\/helpers\n+ * @key jpackagePlatformPackage\n+ * @build jdk.jpackage.test.*\n+ * @build CustomInfoPListTest\n+ * @requires (os.family == \"mac\")\n+ * @run main\/othervm\/timeout=1440 -Xmx512m jdk.jpackage.test.Main\n+ *  --jpt-run=CustomInfoPListTest\n+ *\/\n+\n+import jdk.jpackage.test.TKit;\n+import jdk.jpackage.test.MacHelper;\n+import jdk.jpackage.test.JPackageCommand;\n+import jdk.jpackage.test.PackageType;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.concurrent.Executor;\n+\n+import javax.xml.stream.XMLOutputFactory;\n+\n+import jdk.jpackage.test.Annotations.Test;\n+\n+import static jdk.jpackage.internal.util.PListWriter.writePList;\n+import static jdk.jpackage.internal.util.PListWriter.writeDict;\n+import static jdk.jpackage.internal.util.PListWriter.writeString;\n+import static jdk.jpackage.internal.util.XmlUtils.toXmlConsumer;\n+import static jdk.jpackage.internal.util.function.ThrowingSupplier.toSupplier;\n+\n+public class CustomInfoPListTest {\n+\n+    private static final String BUNDLE_NAME_APP = \"CustomAppName\";\n+    private static final String BUNDLE_NAME_EMBEDDED_RUNTIME = \"CustomEmbeddedRuntimeName\";\n+    private static final String BUNDLE_NAME_RUNTIME = \"CustomRuntimeName\";\n+\n+    \/\/ We do not need full Info.plist for testing\n+    private static String getInfoPListXML(String bundleName) {\n+        return toSupplier(() -> {\n+            var buf = new StringWriter();\n+            var xml = XMLOutputFactory.newInstance().createXMLStreamWriter(buf);\n+            writePList(xml, toXmlConsumer(() -> {\n+                writeDict(xml, toXmlConsumer(() -> {\n+                    writeString(xml, \"CFBundleName\", bundleName);\n+                    writeString(xml, \"CFBundleIdentifier\", \"CustomInfoPListTest\");\n+                    writeString(xml, \"CFBundleVersion\", \"1.0\");\n+                }));\n+            }));\n+            xml.flush();\n+            xml.close();\n+            return buf.toString();\n+        }).get();\n+    }\n+\n+    private static String getResourceDirWithCustomInfoPList(\n+                String bundleName, boolean includeRuntimePList) {\n+        final Path resources = TKit.createTempDirectory(\"resources\");\n+        try {\n+            Files.writeString(resources.resolve(\"Info.plist\"),\n+                    getInfoPListXML(bundleName));\n+            if (includeRuntimePList) {\n+                Files.writeString(resources.resolve(\"Runtime-Info.plist\"),\n+                        getInfoPListXML(BUNDLE_NAME_EMBEDDED_RUNTIME));\n+            }\n+        } catch (IOException ex) {\n+            throw new UncheckedIOException(ex);\n+        }\n+\n+        return resources.toString();\n+    }\n+\n+    @Test\n+    public void testApp() {\n+        JPackageCommand cmd = JPackageCommand.helloAppImage()\n+                .addArguments(\"--resource-dir\",\n+                        getResourceDirWithCustomInfoPList(BUNDLE_NAME_APP, true));\n+\n+        cmd.executeAndAssertHelloAppImageCreated();\n+\n+        var appPList = MacHelper.readPListFromAppImage(cmd.outputBundle());\n+        TKit.assertEquals(BUNDLE_NAME_APP, appPList.queryValue(\"CFBundleName\"), String.format(\n+                \"Check value of %s plist key\", \"CFBundleName\"));\n+\n+        var runtimePList = MacHelper.readPListFromEmbeddedRuntime(cmd.outputBundle());\n+        TKit.assertEquals(BUNDLE_NAME_EMBEDDED_RUNTIME, runtimePList.queryValue(\"CFBundleName\"), String.format(\n+                \"Check value of %s plist key\", \"CFBundleName\"));\n+    }\n+\n+    @Test\n+    public void testRuntime() throws IOException {\n+        final var runtimeImage = MacHelper.createInputRuntimeImage();\n+\n+        final var runtimeBundleWorkDir = TKit.createTempDirectory(\"runtime-bundle\");\n+\n+        final var unpackadeRuntimeBundleDir = runtimeBundleWorkDir.resolve(\"unpacked\");\n+\n+        var cmd = new JPackageCommand()\n+                .useToolProvider(true)\n+                .ignoreDefaultRuntime(true)\n+                .dumpOutput(true)\n+                .setPackageType(PackageType.MAC_DMG)\n+                .setArgumentValue(\"--name\", \"foo\")\n+                .addArguments(\"--runtime-image\", runtimeImage)\n+                .addArguments(\"--resource-dir\",\n+                    getResourceDirWithCustomInfoPList(BUNDLE_NAME_RUNTIME, false))\n+                .addArguments(\"--dest\", runtimeBundleWorkDir);\n+\n+        cmd.execute();\n+\n+        MacHelper.withExplodedDmg(cmd, dmgImage -> {\n+            if (dmgImage.endsWith(cmd.name() + \".jdk\")) {\n+                var runtimePList = MacHelper.readPListFromAppImage(dmgImage);\n+                TKit.assertEquals(BUNDLE_NAME_RUNTIME, runtimePList.queryValue(\"CFBundleName\"),\n+                        String.format(\"Check value of %s plist key\", \"CFBundleName\"));\n+            }\n+        });\n+    }\n+}\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/CustomInfoPListTest.java","additions":150,"deletions":0,"binary":false,"changes":150,"status":"added"},{"patch":"@@ -97,23 +97,0 @@\n-    private static Path createInputRuntimeImage() throws IOException {\n-\n-        final Path runtimeImageDir;\n-\n-        if (JPackageCommand.DEFAULT_RUNTIME_IMAGE != null) {\n-            runtimeImageDir = JPackageCommand.DEFAULT_RUNTIME_IMAGE;\n-        } else {\n-            runtimeImageDir = TKit.createTempDirectory(\"runtime-image\").resolve(\"data\");\n-\n-            new Executor().setToolProvider(JavaTool.JLINK)\n-                    .dumpOutput()\n-                    .addArguments(\n-                            \"--output\", runtimeImageDir.toString(),\n-                            \"--add-modules\", \"java.desktop\",\n-                            \"--strip-debug\",\n-                            \"--no-header-files\",\n-                            \"--no-man-pages\")\n-                    .execute();\n-        }\n-\n-        return runtimeImageDir;\n-    }\n-\n@@ -122,1 +99,1 @@\n-        final var runtimeImage = createInputRuntimeImage();\n+        final var runtimeImage = MacHelper.createInputRuntimeImage();\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningRuntimeImagePackageTest.java","additions":1,"deletions":24,"binary":false,"changes":25,"status":"modified"}]}