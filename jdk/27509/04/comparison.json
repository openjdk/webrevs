{"files":[{"patch":"@@ -93,1 +93,1 @@\n-        xml.writeDTD(\"plist PUBLIC \\\"-\/\/Apple\/\/DTD PLIST 1.0\/\/EN\\\" \\\"https:\/\/www.apple.com\/DTDs\/PropertyList-1.0.dtd\\\"\");\n+        xml.writeDTD(\"<!DOCTYPE plist PUBLIC \\\"-\/\/Apple\/\/DTD PLIST 1.0\/\/EN\\\" \\\"https:\/\/www.apple.com\/DTDs\/PropertyList-1.0.dtd\\\">\");\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/util\/PListWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -366,0 +366,23 @@\n+    public static Path createInputRuntimeImage() throws IOException {\n+\n+        final Path runtimeImageDir;\n+\n+        if (JPackageCommand.DEFAULT_RUNTIME_IMAGE != null) {\n+            runtimeImageDir = JPackageCommand.DEFAULT_RUNTIME_IMAGE;\n+        } else {\n+            runtimeImageDir = TKit.createTempDirectory(\"runtime-image\").resolve(\"data\");\n+\n+            new Executor().setToolProvider(JavaTool.JLINK)\n+                    .dumpOutput()\n+                    .addArguments(\n+                            \"--output\", runtimeImageDir.toString(),\n+                            \"--add-modules\", \"java.desktop\",\n+                            \"--strip-debug\",\n+                            \"--no-header-files\",\n+                            \"--no-man-pages\")\n+                    .execute();\n+        }\n+\n+        return runtimeImageDir;\n+    }\n+\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JPackageCommand.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -146,0 +146,4 @@\n+    public static PListReader readPListFromEmbeddedRuntime(Path appImage) {\n+        return readPList(appImage.resolve(\"Contents\/runtime\/Contents\/Info.plist\"));\n+    }\n+\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/MacHelper.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,257 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+ \/**\n+ * Test --resource-dir with custom \"Info.plist\" for the top-level bundle\n+ * and \"Runtime-Info.plist\" for the embedded runtime bundle\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary jpackage with --type image --resource-dir \"Info.plist\" and \"Runtime-Info.plist\"\n+ * @library \/test\/jdk\/tools\/jpackage\/helpers\n+ * @key jpackagePlatformPackage\n+ * @build jdk.jpackage.test.*\n+ * @build CustomInfoPListTest\n+ * @requires (os.family == \"mac\")\n+ * @requires (jpackage.test.SQETest == null)\n+ * @run main\/othervm\/timeout=1440 -Xmx512m jdk.jpackage.test.Main\n+ *  --jpt-run=CustomInfoPListTest\n+ *\/\n+\n+import jdk.jpackage.test.TKit;\n+import jdk.jpackage.test.MacHelper;\n+import jdk.jpackage.test.JPackageCommand;\n+import jdk.jpackage.test.JPackageStringBundle;\n+import jdk.jpackage.test.PackageType;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import java.util.Optional;\n+import java.util.concurrent.Executor;\n+\n+import javax.xml.stream.XMLOutputFactory;\n+\n+import jdk.jpackage.test.Annotations.Test;\n+import jdk.jpackage.test.Annotations.Parameter;\n+\n+import jdk.jpackage.internal.util.XmlUtils;\n+import jdk.jpackage.internal.util.PListReader;\n+\n+import static jdk.jpackage.internal.util.PListWriter.writePList;\n+import static jdk.jpackage.internal.util.PListWriter.writeDict;\n+import static jdk.jpackage.internal.util.PListWriter.writeString;\n+import static jdk.jpackage.internal.util.XmlUtils.toXmlConsumer;\n+\n+public class CustomInfoPListTest {\n+\n+    private static final String APP_PLIST_KEY = \"CustomAppPList\";\n+    private static final String EMBEDDED_RUNTIME_PLIST_KEY = \"CustomEmbeddedRuntimePList\";\n+    private static final String RUNTIME_PLIST_KEY = \"CustomRuntimePList\";\n+\n+    private static final Map<String, String> appKeyValue = new HashMap<>();\n+    private static final Map<String, String> embeddedRuntimeKeyValue = new HashMap<>();\n+    private static final Map<String, String> runtimeKeyValue = new HashMap<>();\n+\n+    private static final List<String> faKeysAndValues = new ArrayList<>();\n+\n+    static {\n+        appKeyValue.put(\"CFBundleExecutable\", \"AppCustomInfoPListTest\");\n+        appKeyValue.put(\"CFBundleIconFile\", \"AppCustomInfoPListTest.icns\");\n+        appKeyValue.put(\"CFBundleIdentifier\", \"Hello\");\n+        appKeyValue.put(\"CFBundleName\", \"AppCustomInfoPListTest\");\n+        appKeyValue.put(\"CFBundleShortVersionString\", \"1.0\");\n+        appKeyValue.put(\"LSApplicationCategoryType\", \"public.app-category.utilities\");\n+        appKeyValue.put(\"CFBundleVersion\", \"1.0\");\n+        appKeyValue.put(\"NSHumanReadableCopyright\", JPackageStringBundle.MAIN.cannedFormattedString(\n+                \"param.copyright.default\", new Date()).getValue());\n+\n+        embeddedRuntimeKeyValue.put(\"CFBundleIdentifier\", \"Hello\");\n+        embeddedRuntimeKeyValue.put(\"CFBundleName\", \"AppCustomInfoPListTest\");\n+        embeddedRuntimeKeyValue.put(\"CFBundleShortVersionString\", \"1.0\");\n+        embeddedRuntimeKeyValue.put(\"CFBundleVersion\", \"1.0\");\n+\n+        runtimeKeyValue.put(\"CFBundleIdentifier\", \"foo\");\n+        runtimeKeyValue.put(\"CFBundleName\", \"foo\");\n+        runtimeKeyValue.put(\"CFBundleShortVersionString\", \"1.0\");\n+        runtimeKeyValue.put(\"CFBundleVersion\", \"1.0\");\n+\n+        faKeysAndValues.add(\"CFBundleDocumentTypes\");\n+        faKeysAndValues.add(\"LSItemContentTypes\");\n+        faKeysAndValues.add(\"Hello.foo\");\n+        faKeysAndValues.add(\"UTTypeDescription\");\n+        faKeysAndValues.add(\"CFBundleTypeName\");\n+        faKeysAndValues.add(\"bar\");\n+    }\n+\n+    \/\/ We do not need full and valid Info.plist for testing\n+    private static void createInfoPListFile(String key, Path plistFile) {\n+        try {\n+            XmlUtils.createXml(plistFile, xml -> {\n+                writePList(xml, toXmlConsumer(() -> {\n+                    writeDict(xml, toXmlConsumer(() -> {\n+                        writeString(xml, \"CustomInfoPListTestKey\", key);\n+                        if (key.equals(APP_PLIST_KEY)) {\n+                            \/\/ Application\n+                            writeString(xml, \"CFBundleExecutable\", \"DEPLOY_LAUNCHER_NAME\");\n+                            writeString(xml, \"CFBundleIconFile\", \"DEPLOY_ICON_FILE\");\n+                            writeString(xml, \"CFBundleIdentifier\", \"DEPLOY_BUNDLE_IDENTIFIER\");\n+                            writeString(xml, \"CFBundleName\", \"DEPLOY_BUNDLE_NAME\");\n+                            writeString(xml, \"CFBundleShortVersionString\", \"DEPLOY_BUNDLE_SHORT_VERSION\");\n+                            writeString(xml, \"LSApplicationCategoryType\", \"DEPLOY_APP_CATEGORY\");\n+                            writeString(xml, \"CFBundleVersion\", \"DEPLOY_BUNDLE_CFBUNDLE_VERSION\");\n+                            writeString(xml, \"NSHumanReadableCopyright\", \"DEPLOY_BUNDLE_COPYRIGHT\");\n+                            writeString(xml, \"CustomInfoPListFA\", \"DEPLOY_FILE_ASSOCIATIONS\");\n+                        } else if (key.equals(EMBEDDED_RUNTIME_PLIST_KEY) || key.equals(RUNTIME_PLIST_KEY)) {\n+                            \/\/ Embedded runtime and runtime\n+                            writeString(xml, \"CFBundleIdentifier\", \"CF_BUNDLE_IDENTIFIER\");\n+                            writeString(xml, \"CFBundleName\", \"CF_BUNDLE_NAME\");\n+                            writeString(xml, \"CFBundleShortVersionString\", \"CF_BUNDLE_SHORT_VERSION_STRING\");\n+                            writeString(xml, \"CFBundleVersion\", \"CF_BUNDLE_VERSION\");\n+                        }\n+                    }));\n+                }));\n+            });\n+        } catch (IOException ex) {\n+            throw new UncheckedIOException(ex);\n+        }\n+    }\n+\n+    private static String getResourceDirWithCustomInfoPList(\n+                String key, boolean includeMainPList, boolean includeRuntimePList) {\n+        final Path resources = TKit.createTempDirectory(\"resources\");\n+        if (includeMainPList) {\n+            createInfoPListFile(key, resources.resolve(\"Info.plist\"));\n+        }\n+        if (includeRuntimePList) {\n+            createInfoPListFile(EMBEDDED_RUNTIME_PLIST_KEY, resources.resolve(\"Runtime-Info.plist\"));\n+        }\n+        return resources.toString();\n+    }\n+\n+    private static void validateInfoPListFileKey(PListReader plistFile, Optional<String> key) {\n+        if (key.isPresent()) {\n+            TKit.assertEquals(key.get(), plistFile.queryValue(\"CustomInfoPListTestKey\"), String.format(\n+                    \"Check value of %s plist key\", \"CustomInfoPListTestKey\"));\n+        } else {\n+            boolean exceptionThrown = false;\n+            try {\n+                plistFile.queryValue(\"CustomInfoPListTestKey\");\n+            } catch (NoSuchElementException ex) {\n+                exceptionThrown = true;\n+            }\n+            TKit.assertTrue(exceptionThrown, \"NoSuchElementException exception not thrown\");\n+        }\n+    }\n+\n+    private static void validateInfoPList(PListReader plistFile, Map<String, String> values) {\n+        values.forEach((key, value) -> {\n+            TKit.assertEquals(value, plistFile.queryValue(key), String.format(\n+                    \"Check value of %s plist key\", key));\n+        });\n+    }\n+\n+    \/\/ For FA check that main keys and values are present\n+    private static void validateInfoPListFA(PListReader plistFile, List<String> values) {\n+        String faXml = plistFile.queryValue(\"CustomInfoPListFA\");\n+        values.forEach(value -> {\n+            TKit.assertTrue(faXml.contains(value), String.format(\n+                \"Check FA key\/value is present [%s]\", value));\n+        });\n+    }\n+\n+    @Test\n+    @Parameter({\"TRUE\", \"FALSE\"})\n+    @Parameter({\"FALSE\", \"TRUE\"})\n+    @Parameter({\"TRUE\", \"TRUE\"})\n+    public void testApp(boolean includeMainPList, boolean includeRuntimePList) {\n+        final Path propFile = TKit.workDir().resolve(\"fa.properties\");\n+        TKit.createPropertiesFile(propFile, Map.of(\n+                \"mime-type\", \"application\/x-jpackage-foo\",\n+                \"extension\", \"foo\",\n+                \"description\", \"bar\"\n+            ));\n+\n+        JPackageCommand cmd = JPackageCommand.helloAppImage()\n+                .addArguments(\"--resource-dir\",\n+                        getResourceDirWithCustomInfoPList(APP_PLIST_KEY,\n+                                includeMainPList, includeRuntimePList))\n+                .addArguments(\"--file-associations\", propFile);\n+\n+        cmd.executeAndAssertHelloAppImageCreated();\n+\n+        var appPList = MacHelper.readPListFromAppImage(cmd.outputBundle());\n+        if (includeMainPList) {\n+            validateInfoPListFileKey(appPList, Optional.of(APP_PLIST_KEY));\n+            validateInfoPList(appPList, appKeyValue);\n+            validateInfoPListFA(appPList, faKeysAndValues);\n+        } else {\n+            validateInfoPListFileKey(appPList, Optional.empty());\n+        }\n+\n+        var runtimePList = MacHelper.readPListFromEmbeddedRuntime(cmd.outputBundle());\n+        if (includeRuntimePList) {\n+            validateInfoPListFileKey(runtimePList, Optional.of(EMBEDDED_RUNTIME_PLIST_KEY));\n+            validateInfoPList(runtimePList, embeddedRuntimeKeyValue);\n+        } else {\n+            validateInfoPListFileKey(runtimePList, Optional.empty());\n+        }\n+    }\n+\n+    @Test\n+    public void testRuntime() throws IOException {\n+        final var runtimeImage = JPackageCommand.createInputRuntimeImage();\n+\n+        final var runtimeBundleWorkDir = TKit.createTempDirectory(\"runtime-bundle\");\n+\n+        var cmd = new JPackageCommand()\n+                .useToolProvider(true)\n+                .ignoreDefaultRuntime(true)\n+                .dumpOutput(true)\n+                .setPackageType(PackageType.MAC_DMG)\n+                .setArgumentValue(\"--name\", \"foo\")\n+                .addArguments(\"--runtime-image\", runtimeImage)\n+                .addArguments(\"--resource-dir\",\n+                    getResourceDirWithCustomInfoPList(RUNTIME_PLIST_KEY, true, false))\n+                .addArguments(\"--dest\", runtimeBundleWorkDir);\n+\n+        cmd.execute();\n+\n+        MacHelper.withExplodedDmg(cmd, dmgImage -> {\n+            if (dmgImage.endsWith(cmd.appInstallationDirectory().getFileName())) {\n+                var runtimePList = MacHelper.readPListFromAppImage(dmgImage);\n+                validateInfoPListFileKey(runtimePList, Optional.of(RUNTIME_PLIST_KEY));\n+                validateInfoPList(runtimePList, runtimeKeyValue);\n+            }\n+        });\n+    }\n+}\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/CustomInfoPListTest.java","additions":257,"deletions":0,"binary":false,"changes":257,"status":"added"},{"patch":"@@ -28,0 +28,1 @@\n+\n@@ -97,23 +98,0 @@\n-    private static Path createInputRuntimeImage() throws IOException {\n-\n-        final Path runtimeImageDir;\n-\n-        if (JPackageCommand.DEFAULT_RUNTIME_IMAGE != null) {\n-            runtimeImageDir = JPackageCommand.DEFAULT_RUNTIME_IMAGE;\n-        } else {\n-            runtimeImageDir = TKit.createTempDirectory(\"runtime-image\").resolve(\"data\");\n-\n-            new Executor().setToolProvider(JavaTool.JLINK)\n-                    .dumpOutput()\n-                    .addArguments(\n-                            \"--output\", runtimeImageDir.toString(),\n-                            \"--add-modules\", \"java.desktop\",\n-                            \"--strip-debug\",\n-                            \"--no-header-files\",\n-                            \"--no-man-pages\")\n-                    .execute();\n-        }\n-\n-        return runtimeImageDir;\n-    }\n-\n@@ -122,1 +100,1 @@\n-        final var runtimeImage = createInputRuntimeImage();\n+        final var runtimeImage = JPackageCommand.createInputRuntimeImage();\n@@ -181,1 +159,1 @@\n-                        inputRuntime[0] = createInputRuntimeImage();\n+                        inputRuntime[0] = JPackageCommand.createInputRuntimeImage();\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningRuntimeImagePackageTest.java","additions":3,"deletions":25,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -117,1 +117,1 @@\n-        return init(RuntimePackageTest::createInputRuntimeImage);\n+        return init(JPackageCommand::createInputRuntimeImage);\n@@ -176,23 +176,0 @@\n-    private static Path createInputRuntimeImage() throws IOException {\n-\n-        final Path runtimeImageDir;\n-\n-        if (JPackageCommand.DEFAULT_RUNTIME_IMAGE != null) {\n-            runtimeImageDir = JPackageCommand.DEFAULT_RUNTIME_IMAGE;\n-        } else {\n-            runtimeImageDir = TKit.createTempDirectory(\"runtime-image\").resolve(\"data\");\n-\n-            new Executor().setToolProvider(JavaTool.JLINK)\n-                    .dumpOutput()\n-                    .addArguments(\n-                            \"--output\", runtimeImageDir.toString(),\n-                            \"--add-modules\", \"java.desktop\",\n-                            \"--strip-debug\",\n-                            \"--no-header-files\",\n-                            \"--no-man-pages\")\n-                    .execute();\n-        }\n-\n-        return runtimeImageDir;\n-    }\n-\n@@ -201,1 +178,1 @@\n-        final var runtimeImage = createInputRuntimeImage();\n+        final var runtimeImage = JPackageCommand.createInputRuntimeImage();\n","filename":"test\/jdk\/tools\/jpackage\/share\/RuntimePackageTest.java","additions":2,"deletions":25,"binary":false,"changes":27,"status":"modified"}]}