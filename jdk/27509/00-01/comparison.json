{"files":[{"patch":"@@ -93,1 +93,0 @@\n-        xml.writeStartDocument();\n@@ -99,1 +98,0 @@\n-        xml.writeEndDocument();\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/util\/PListWriter.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -366,0 +366,23 @@\n+    public static Path createInputRuntimeImage() throws IOException {\n+\n+        final Path runtimeImageDir;\n+\n+        if (JPackageCommand.DEFAULT_RUNTIME_IMAGE != null) {\n+            runtimeImageDir = JPackageCommand.DEFAULT_RUNTIME_IMAGE;\n+        } else {\n+            runtimeImageDir = TKit.createTempDirectory(\"runtime-image\").resolve(\"data\");\n+\n+            new Executor().setToolProvider(JavaTool.JLINK)\n+                    .dumpOutput()\n+                    .addArguments(\n+                            \"--output\", runtimeImageDir.toString(),\n+                            \"--add-modules\", \"java.desktop\",\n+                            \"--strip-debug\",\n+                            \"--no-header-files\",\n+                            \"--no-man-pages\")\n+                    .execute();\n+        }\n+\n+        return runtimeImageDir;\n+    }\n+\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JPackageCommand.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -178,23 +178,0 @@\n-    public static Path createInputRuntimeImage() throws IOException {\n-\n-        final Path runtimeImageDir;\n-\n-        if (JPackageCommand.DEFAULT_RUNTIME_IMAGE != null) {\n-            runtimeImageDir = JPackageCommand.DEFAULT_RUNTIME_IMAGE;\n-        } else {\n-            runtimeImageDir = TKit.createTempDirectory(\"runtime-image\").resolve(\"data\");\n-\n-            new Executor().setToolProvider(JavaTool.JLINK)\n-                    .dumpOutput()\n-                    .addArguments(\n-                            \"--output\", runtimeImageDir.toString(),\n-                            \"--add-modules\", \"java.desktop\",\n-                            \"--strip-debug\",\n-                            \"--no-header-files\",\n-                            \"--no-man-pages\")\n-                    .execute();\n-        }\n-\n-        return runtimeImageDir;\n-    }\n-\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/MacHelper.java","additions":0,"deletions":23,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+ * @requires (jpackage.test.SQETest == null)\n@@ -44,0 +45,1 @@\n+import jdk.jpackage.test.JPackageStringBundle;\n@@ -51,0 +53,5 @@\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import java.util.Optional;\n@@ -56,0 +63,4 @@\n+import jdk.jpackage.test.Annotations.Parameter;\n+\n+import jdk.jpackage.internal.util.XmlUtils;\n+import jdk.jpackage.internal.util.PListReader;\n@@ -61,1 +72,0 @@\n-import static jdk.jpackage.internal.util.function.ThrowingSupplier.toSupplier;\n@@ -65,20 +75,30 @@\n-    private static final String BUNDLE_NAME_APP = \"CustomAppName\";\n-    private static final String BUNDLE_NAME_EMBEDDED_RUNTIME = \"CustomEmbeddedRuntimeName\";\n-    private static final String BUNDLE_NAME_RUNTIME = \"CustomRuntimeName\";\n-\n-    \/\/ We do not need full Info.plist for testing\n-    private static String getInfoPListXML(String bundleName) {\n-        return toSupplier(() -> {\n-            var buf = new StringWriter();\n-            var xml = XMLOutputFactory.newInstance().createXMLStreamWriter(buf);\n-            writePList(xml, toXmlConsumer(() -> {\n-                writeDict(xml, toXmlConsumer(() -> {\n-                    writeString(xml, \"CFBundleName\", bundleName);\n-                    writeString(xml, \"CFBundleIdentifier\", \"CustomInfoPListTest\");\n-                    writeString(xml, \"CFBundleVersion\", \"1.0\");\n-                }));\n-            }));\n-            xml.flush();\n-            xml.close();\n-            return buf.toString();\n-        }).get();\n+    private static final String APP_PLIST_KEY = \"CustomAppPList\";\n+    private static final String EMBEDDED_RUNTIME_PLIST_KEY = \"CustomEmbeddedRuntimePList\";\n+    private static final String RUNTIME_PLIST_KEY = \"CustomRuntimePList\";\n+\n+    private static final Map<String, String> appKeyValue = new HashMap<>();\n+    private static final Map<String, String> embeddedRuntimeKeyValue = new HashMap<>();\n+    private static final Map<String, String> runtimeKeyValue = new HashMap<>();\n+\n+    static {\n+        appKeyValue.put(\"CFBundleExecutable\", \"AppCustomInfoPListTest\");\n+        appKeyValue.put(\"CFBundleIconFile\", \"AppCustomInfoPListTest.icns\");\n+        appKeyValue.put(\"CFBundleIdentifier\", \"Hello\");\n+        appKeyValue.put(\"CFBundleName\", \"AppCustomInfoPListTest\");\n+        appKeyValue.put(\"CFBundleShortVersionString\", \"1.0\");\n+        appKeyValue.put(\"LSApplicationCategoryType\", \"public.app-category.utilities\");\n+        appKeyValue.put(\"CFBundleVersion\", \"1.0\");\n+        appKeyValue.put(\"NSHumanReadableCopyright\", JPackageStringBundle.MAIN.cannedFormattedString(\n+                \"param.copyright.default\", new Date()).getValue());\n+        appKeyValue.put(\"UTTypeIdentifier\", \"Hello.foo\");\n+        appKeyValue.put(\"UTTypeDescription\", \"bar\");\n+\n+        embeddedRuntimeKeyValue.put(\"CFBundleIdentifier\", \"Hello\");\n+        embeddedRuntimeKeyValue.put(\"CFBundleName\", \"AppCustomInfoPListTest\");\n+        embeddedRuntimeKeyValue.put(\"CFBundleShortVersionString\", \"1.0\");\n+        embeddedRuntimeKeyValue.put(\"CFBundleVersion\", \"1.0\");\n+\n+        runtimeKeyValue.put(\"CFBundleIdentifier\", \"foo\");\n+        runtimeKeyValue.put(\"CFBundleName\", \"foo\");\n+        runtimeKeyValue.put(\"CFBundleShortVersionString\", \"1.0\");\n+        runtimeKeyValue.put(\"CFBundleVersion\", \"1.0\");\n@@ -87,3 +107,2 @@\n-    private static String getResourceDirWithCustomInfoPList(\n-                String bundleName, boolean includeRuntimePList) {\n-        final Path resources = TKit.createTempDirectory(\"resources\");\n+    \/\/ We do not need full and valid Info.plist for testing\n+    private static void createInfoPListFile(String key, Path plistFile) {\n@@ -91,6 +110,25 @@\n-            Files.writeString(resources.resolve(\"Info.plist\"),\n-                    getInfoPListXML(bundleName));\n-            if (includeRuntimePList) {\n-                Files.writeString(resources.resolve(\"Runtime-Info.plist\"),\n-                        getInfoPListXML(BUNDLE_NAME_EMBEDDED_RUNTIME));\n-            }\n+            XmlUtils.createXml(plistFile, xml -> {\n+                writePList(xml, toXmlConsumer(() -> {\n+                    writeDict(xml, toXmlConsumer(() -> {\n+                        writeString(xml, \"CustomInfoPListTestKey\", key);\n+                        if (key.equals(APP_PLIST_KEY)) {\n+                            \/\/ Application\n+                            writeString(xml, \"CFBundleExecutable\", \"DEPLOY_LAUNCHER_NAME\");\n+                            writeString(xml, \"CFBundleIconFile\", \"DEPLOY_ICON_FILE\");\n+                            writeString(xml, \"CFBundleIdentifier\", \"DEPLOY_BUNDLE_IDENTIFIER\");\n+                            writeString(xml, \"CFBundleName\", \"DEPLOY_BUNDLE_NAME\");\n+                            writeString(xml, \"CFBundleShortVersionString\", \"DEPLOY_BUNDLE_SHORT_VERSION\");\n+                            writeString(xml, \"LSApplicationCategoryType\", \"DEPLOY_APP_CATEGORY\");\n+                            writeString(xml, \"CFBundleVersion\", \"DEPLOY_BUNDLE_CFBUNDLE_VERSION\");\n+                            writeString(xml, \"NSHumanReadableCopyright\", \"DEPLOY_BUNDLE_COPYRIGHT\");\n+                            writeString(xml, \"CustomInfoPListFA\", \"DEPLOY_FILE_ASSOCIATIONS\");\n+                        } else if (key.equals(EMBEDDED_RUNTIME_PLIST_KEY) || key.equals(RUNTIME_PLIST_KEY)) {\n+                            \/\/ Embedded runtime and runtime\n+                            writeString(xml, \"CFBundleIdentifier\", \"CF_BUNDLE_IDENTIFIER\");\n+                            writeString(xml, \"CFBundleName\", \"CF_BUNDLE_NAME\");\n+                            writeString(xml, \"CFBundleShortVersionString\", \"CF_BUNDLE_SHORT_VERSION_STRING\");\n+                            writeString(xml, \"CFBundleVersion\", \"CF_BUNDLE_VERSION\");\n+                        }\n+                    }));\n+                }));\n+            });\n@@ -100,0 +138,1 @@\n+    }\n@@ -101,0 +140,9 @@\n+    private static String getResourceDirWithCustomInfoPList(\n+                String key, boolean includeMainPList, boolean includeRuntimePList) {\n+        final Path resources = TKit.createTempDirectory(\"resources\");\n+        if (includeMainPList) {\n+            createInfoPListFile(key, resources.resolve(\"Info.plist\"));\n+        }\n+        if (includeRuntimePList) {\n+            createInfoPListFile(EMBEDDED_RUNTIME_PLIST_KEY, resources.resolve(\"Runtime-Info.plist\"));\n+        }\n@@ -104,0 +152,22 @@\n+    private static void validateInfoPListFileKey(PListReader plistFile, Optional<String> key) {\n+        if (key.isPresent()) {\n+            TKit.assertEquals(key.get(), plistFile.queryValue(\"CustomInfoPListTestKey\"), String.format(\n+                    \"Check value of %s plist key\", \"CustomInfoPListTestKey\"));\n+        } else {\n+            boolean exceptionThrown = false;\n+            try {\n+                plistFile.queryValue(\"CustomInfoPListTestKey\");\n+            } catch (NoSuchElementException ex) {\n+                exceptionThrown = true;\n+            }\n+            TKit.assertTrue(exceptionThrown, \"NoSuchElementException exception not thrown\");\n+        }\n+    }\n+\n+    private static void validateInfoPList(PListReader plistFile, Map<String, String> values) {\n+        values.forEach((key, value) -> {\n+            TKit.assertEquals(value, plistFile.queryValue(key), String.format(\n+                    \"Check value of %s plist key\", key));\n+        });\n+    }\n+\n@@ -105,1 +175,11 @@\n-    public void testApp() {\n+    @Parameter({\"TRUE\", \"FALSE\"})\n+    @Parameter({\"FALSE\", \"TRUE\"})\n+    @Parameter({\"TRUE\", \"TRUE\"})\n+    public void testApp(boolean includeMainPList, boolean includeRuntimePList) {\n+        final Path propFile = TKit.workDir().resolve(\"fa.properties\");\n+        TKit.createPropertiesFile(propFile, Map.of(\n+                \"mime-type\", \"application\/x-jpackage-foo\",\n+                \"extension\", \"foo\",\n+                \"description\", \"bar\"\n+            ));\n+\n@@ -108,1 +188,3 @@\n-                        getResourceDirWithCustomInfoPList(BUNDLE_NAME_APP, true));\n+                        getResourceDirWithCustomInfoPList(APP_PLIST_KEY,\n+                                includeMainPList, includeRuntimePList))\n+                .addArguments(\"--file-associations\", propFile);\n@@ -113,2 +195,6 @@\n-        TKit.assertEquals(BUNDLE_NAME_APP, appPList.queryValue(\"CFBundleName\"), String.format(\n-                \"Check value of %s plist key\", \"CFBundleName\"));\n+        if (includeMainPList) {\n+            validateInfoPListFileKey(appPList, Optional.of(APP_PLIST_KEY));\n+            validateInfoPList(appPList, appKeyValue);\n+        } else {\n+            validateInfoPListFileKey(appPList, Optional.empty());\n+        }\n@@ -117,2 +203,6 @@\n-        TKit.assertEquals(BUNDLE_NAME_EMBEDDED_RUNTIME, runtimePList.queryValue(\"CFBundleName\"), String.format(\n-                \"Check value of %s plist key\", \"CFBundleName\"));\n+        if (includeRuntimePList) {\n+            validateInfoPListFileKey(runtimePList, Optional.of(EMBEDDED_RUNTIME_PLIST_KEY));\n+            validateInfoPList(runtimePList, embeddedRuntimeKeyValue);\n+        } else {\n+            validateInfoPListFileKey(runtimePList, Optional.empty());\n+        }\n@@ -123,1 +213,1 @@\n-        final var runtimeImage = MacHelper.createInputRuntimeImage();\n+        final var runtimeImage = JPackageCommand.createInputRuntimeImage();\n@@ -127,2 +217,0 @@\n-        final var unpackadeRuntimeBundleDir = runtimeBundleWorkDir.resolve(\"unpacked\");\n-\n@@ -137,1 +225,1 @@\n-                    getResourceDirWithCustomInfoPList(BUNDLE_NAME_RUNTIME, false))\n+                    getResourceDirWithCustomInfoPList(RUNTIME_PLIST_KEY, true, false))\n@@ -143,1 +231,1 @@\n-            if (dmgImage.endsWith(cmd.name() + \".jdk\")) {\n+            if (dmgImage.endsWith(cmd.appInstallationDirectory().getFileName())) {\n@@ -145,2 +233,2 @@\n-                TKit.assertEquals(BUNDLE_NAME_RUNTIME, runtimePList.queryValue(\"CFBundleName\"),\n-                        String.format(\"Check value of %s plist key\", \"CFBundleName\"));\n+                validateInfoPListFileKey(runtimePList, Optional.of(RUNTIME_PLIST_KEY));\n+                validateInfoPList(runtimePList, runtimeKeyValue);\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/CustomInfoPListTest.java","additions":131,"deletions":43,"binary":false,"changes":174,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+\n+import base.SigningBase;\n@@ -99,1 +101,1 @@\n-        final var runtimeImage = MacHelper.createInputRuntimeImage();\n+        final var runtimeImage = JPackageCommand.createInputRuntimeImage();\n@@ -158,1 +160,1 @@\n-                        inputRuntime[0] = createInputRuntimeImage();\n+                        inputRuntime[0] = JPackageCommand.createInputRuntimeImage();\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningRuntimeImagePackageTest.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -117,1 +117,1 @@\n-        return init(RuntimePackageTest::createInputRuntimeImage);\n+        return init(JPackageCommand::createInputRuntimeImage);\n@@ -176,23 +176,0 @@\n-    private static Path createInputRuntimeImage() throws IOException {\n-\n-        final Path runtimeImageDir;\n-\n-        if (JPackageCommand.DEFAULT_RUNTIME_IMAGE != null) {\n-            runtimeImageDir = JPackageCommand.DEFAULT_RUNTIME_IMAGE;\n-        } else {\n-            runtimeImageDir = TKit.createTempDirectory(\"runtime-image\").resolve(\"data\");\n-\n-            new Executor().setToolProvider(JavaTool.JLINK)\n-                    .dumpOutput()\n-                    .addArguments(\n-                            \"--output\", runtimeImageDir.toString(),\n-                            \"--add-modules\", \"java.desktop\",\n-                            \"--strip-debug\",\n-                            \"--no-header-files\",\n-                            \"--no-man-pages\")\n-                    .execute();\n-        }\n-\n-        return runtimeImageDir;\n-    }\n-\n@@ -201,1 +178,1 @@\n-        final var runtimeImage = createInputRuntimeImage();\n+        final var runtimeImage = JPackageCommand.createInputRuntimeImage();\n","filename":"test\/jdk\/tools\/jpackage\/share\/RuntimePackageTest.java","additions":2,"deletions":25,"binary":false,"changes":27,"status":"modified"}]}