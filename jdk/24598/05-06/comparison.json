{"files":[{"patch":"@@ -28,1 +28,1 @@\n- * @run junit CloneTest\n+ * @run junit\/othervm --add-opens=java.base\/java.text=ALL-UNNAMED CloneTest\n@@ -31,0 +31,1 @@\n+import org.junit.jupiter.api.BeforeAll;\n@@ -33,0 +34,1 @@\n+import java.lang.reflect.Field;\n@@ -39,1 +41,1 @@\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -42,0 +44,13 @@\n+    private static Field DIGIT_LIST_FIELD;\n+    private static Class<?> DIGIT_LIST_CLASS;\n+\n+    @BeforeAll\n+    static void setup() throws Exception {\n+        DIGIT_LIST_FIELD = DecimalFormat.class.getDeclaredField(\"digitList\");\n+        DIGIT_LIST_FIELD.setAccessible(true);\n+\n+        DecimalFormat df = new DecimalFormat();\n+        Object digitList = DIGIT_LIST_FIELD.get(df);\n+\n+        DIGIT_LIST_CLASS = digitList.getClass();\n+    }\n@@ -48,0 +63,49 @@\n+    @Test\n+    public void testClone() throws Exception {\n+        DecimalFormat df = new DecimalFormat(\"#\");\n+        assertCloneValidity(df);\n+    }\n+\n+    @Test\n+    public void testCloneAfterInit() throws Exception {\n+        DecimalFormat df = new DecimalFormat(\"#\");\n+\n+        \/\/ This initial use of the formatter initialises its internal state, which could\n+        \/\/ subsequently be shared across clones. This is key to reproducing this specific\n+        \/\/ issue.\n+        String _ = df.format(Math.PI);\n+        assertCloneValidity(df);\n+    }\n+\n+    private static void assertCloneValidity(DecimalFormat df) throws Exception {\n+        DecimalFormat dfClone = (DecimalFormat) df.clone();\n+\n+        Object digits = valFromDigitList(df, \"digits\");\n+        assertNotSame(digits, valFromDigitList(dfClone, \"digits\"));\n+\n+\n+        Object data = valFromDigitList(df, \"data\");\n+        if (data != null) {\n+            assertNotSame(data, valFromDigitList(dfClone, \"data\"));\n+        }\n+\n+        Object tempBuilder = valFromDigitList(df, \"tempBuilder\");\n+        if (tempBuilder != null) {\n+            assertNotSame(data, valFromDigitList(dfClone, \"data\"));\n+        }\n+\n+        assertEquals(DIGIT_LIST_FIELD.get(df), DIGIT_LIST_FIELD.get(dfClone));\n+    }\n+\n+    private static Object valFromDigitList(DecimalFormat df, String fieldName) {\n+        try {\n+            Object digitList = DIGIT_LIST_FIELD.get(df);\n+            Field field = DIGIT_LIST_CLASS.getDeclaredField(fieldName);\n+            field.setAccessible(true);\n+\n+            return field.get(digitList);\n+        } catch (ReflectiveOperationException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/text\/Format\/DecimalFormat\/CloneTest.java","additions":66,"deletions":2,"binary":false,"changes":68,"status":"modified"}]}