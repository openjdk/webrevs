{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -728,0 +728,1 @@\n+            other.data = null;\n","filename":"src\/java.base\/share\/classes\/java\/text\/DigitList.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8354522\n+ * @summary Check for cloning interference\n+ * @run junit CloneTest\n+ *\/\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.math.BigDecimal;\n+import java.text.DecimalFormat;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class CloneTest {\n+    \/\/ Specifically tests that when DecimalFormat is cloned after use with\n+    \/\/ a long double\/BigDecimal, clones will be independent. This is not an\n+    \/\/ exhaustive test.\n+    @Test\n+    public void testCloneIndependence() {\n+        AtomicInteger mismatchCount = new AtomicInteger(0);\n+        DecimalFormat df = new DecimalFormat(\"#\");\n+        String _ = df.format(Math.PI); \/\/ initial use of formatter\n+        try (var ex = Executors.newThreadPerTaskExecutor(Thread.ofPlatform().factory())) {\n+            for (int i = 0; i < 50; i++) {\n+                \/\/ each thread gets its own clone of df\n+                DecimalFormat threadDf = (DecimalFormat) df.clone();\n+                Runnable task = () -> {\n+                    for (int j = 0; j < 1000000; j++) {\n+                        String dfString = threadDf.format(BigDecimal.valueOf(j));\n+                        String str1 = String.valueOf(j);\n+                        if (!str1.equals(dfString)) {\n+                            System.err.println(\"mismatch: str = \" + str1 + \" dfString = \" + dfString);\n+                            mismatchCount.incrementAndGet();\n+                            break;\n+                        }\n+                    }\n+                };\n+                ex.execute(task);\n+            }\n+        }\n+        assertEquals(0, mismatchCount.get());\n+    }\n+}\n","filename":"test\/jdk\/java\/text\/Format\/DecimalFormat\/CloneTest.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"}]}