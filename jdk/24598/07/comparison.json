{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -728,0 +728,5 @@\n+\n+            \/\/ data and tempBuilder do not need to be copied because they do\n+            \/\/ not carry significant information. They will be recreated on demand.\n+            \/\/ Setting them to null is needed to avoid sharing across clones.\n+            other.data = null;\n@@ -729,0 +734,1 @@\n+\n","filename":"src\/java.base\/share\/classes\/java\/text\/DigitList.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,169 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8354522\n+ * @summary Check for cloning interference\n+ * @library \/test\/lib\n+ * @run junit\/othervm --add-opens=java.base\/java.text=ALL-UNNAMED CloneTest\n+ *\/\n+\n+import jtreg.SkippedException;\n+import org.junit.jupiter.api.Test;\n+\n+import java.lang.reflect.Field;\n+import java.math.BigDecimal;\n+import java.text.DecimalFormat;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class CloneTest {\n+\n+    \/\/ Note: this is a white-box test that may fail if the implementation is changed\n+    @Test\n+    public void testClone() {\n+        DecimalFormat df = new DecimalFormat(\"#\");\n+        new CloneTester(df).testClone();\n+    }\n+\n+    \/\/ Note: this is a white-box test that may fail if the implementation is changed\n+    @Test\n+    public void testCloneAfterInit() {\n+        DecimalFormat df = new DecimalFormat(\"#\");\n+\n+        \/\/ This initial use of the formatter initialises its internal state, which could\n+        \/\/ subsequently be shared across clones. This is key to reproducing this specific\n+        \/\/ issue.\n+        String _ = df.format(Math.PI);\n+        new CloneTester(df).testClone();\n+    }\n+\n+    private static class CloneTester {\n+        private final Field digitListField;\n+        private final Class<?> digitListClass;\n+        private final DecimalFormat original;\n+\n+        public CloneTester(DecimalFormat original) {\n+            this.original = original;\n+            try {\n+                digitListField = DecimalFormat.class.getDeclaredField(\"digitList\");\n+                digitListField.setAccessible(true);\n+\n+                DecimalFormat df = new DecimalFormat();\n+                Object digitList = digitListField.get(df);\n+\n+                digitListClass = digitList.getClass();\n+            } catch (NoSuchFieldException e) {\n+                throw new RuntimeException(e);\n+            } catch (ReflectiveOperationException e) {\n+                throw new SkippedException(\"reflective access in white-box test failed\", e);\n+            }\n+        }\n+\n+        public void testClone() {\n+            try {\n+                DecimalFormat dfClone = (DecimalFormat) original.clone();\n+\n+                Object digits = valFromDigitList(original, \"digits\");\n+                assertNotSame(digits, valFromDigitList(dfClone, \"digits\"));\n+\n+\n+                Object data = valFromDigitList(original, \"data\");\n+                if (data != null) {\n+                    assertNotSame(data, valFromDigitList(dfClone, \"data\"));\n+                }\n+\n+                Object tempBuilder = valFromDigitList(original, \"tempBuilder\");\n+                if (tempBuilder != null) {\n+                    assertNotSame(data, valFromDigitList(dfClone, \"data\"));\n+                }\n+\n+                assertEquals(digitListField.get(original), digitListField.get(dfClone));\n+            } catch (ReflectiveOperationException e) {\n+                throw new SkippedException(\"reflective access in white-box test failed\", e);\n+            }\n+        }\n+\n+        private Object valFromDigitList(DecimalFormat df, String fieldName) throws ReflectiveOperationException {\n+            Object digitList = digitListField.get(df);\n+            Field field = digitListClass.getDeclaredField(fieldName);\n+            field.setAccessible(true);\n+\n+            return field.get(digitList);\n+        }\n+    }\n+\n+    \/\/ Tests that when DecimalFormat is cloned after use with\n+    \/\/ a long double\/BigDecimal, clones will be independent. This is not an\n+    \/\/ exhaustive test. This tests for the issue of the same DigitList.data\n+    \/\/ array being reused across clones of DecimalFormat.\n+\n+    @Test\n+    public void testCloneIndependence() {\n+        AtomicInteger mismatchCount = new AtomicInteger(0);\n+        DecimalFormat df = new DecimalFormat(\"#\");\n+        CountDownLatch startSignal = new CountDownLatch(1);\n+\n+        \/\/ This initial use of the formatter initialises its internal state, which could\n+        \/\/ subsequently be shared across clones. This is key to reproducing this specific\n+        \/\/ issue.\n+        String _ = df.format(Math.PI);\n+\n+        try (var ex = Executors.newThreadPerTaskExecutor(Thread.ofPlatform().factory())) {\n+            for (int i = 0; i < 5; i++) {\n+                final int finalI = i;\n+                \/\/ Each thread gets its own clone of df\n+                DecimalFormat threadDf = (DecimalFormat) df.clone();\n+                Runnable task = () -> {\n+                    try {\n+                        startSignal.await();\n+                        for (int j = 0; j < 1_000; j++) {\n+                            if (mismatchCount.get() > 0) {\n+                                \/\/ Exit early if mismatch has already occurred\n+                                break;\n+                            }\n+\n+                            int value = finalI * j;\n+                            String dfString = threadDf.format(BigDecimal.valueOf(value));\n+                            String str = String.valueOf(value);\n+                            if (!str.equals(dfString)) {\n+                                mismatchCount.getAndIncrement();\n+                                System.err.println(\"mismatch: str = \" + str + \" dfString = \" + dfString);\n+                                break;\n+                            }\n+                        }\n+                    } catch (InterruptedException e) {\n+                        throw new RuntimeException(e);\n+                    }\n+                };\n+                ex.execute(task);\n+            }\n+            startSignal.countDown(); \/\/ let all tasks start working at the same time\n+        }\n+        assertEquals(0, mismatchCount.get());\n+    }\n+}\n","filename":"test\/jdk\/java\/text\/Format\/DecimalFormat\/CloneTest.java","additions":169,"deletions":0,"binary":false,"changes":169,"status":"added"}]}