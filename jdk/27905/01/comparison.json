{"files":[{"patch":"@@ -529,1 +529,1 @@\n-    public BufferedImage copyArea(SunGraphics2D sg2d, int x, int y, int w, int h, BufferedImage dstImage) {\n+    public synchronized BufferedImage copyArea(SunGraphics2D sg2d, int x, int y, int w, int h, BufferedImage dstImage) {\n@@ -544,1 +544,1 @@\n-    public boolean xorSurfacePixels(SunGraphics2D sg2d, BufferedImage srcPixels, int x, int y, int w, int h, int colorXOR) {\n+    public synchronized boolean xorSurfacePixels(SunGraphics2D sg2d, BufferedImage srcPixels, int x, int y, int w, int h, int colorXOR) {\n@@ -556,1 +556,1 @@\n-    public void clearRect(BufferedImage bim, int w, int h) {\n+    public synchronized void clearRect(BufferedImage bim, int w, int h) {\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/java2d\/OSXOffScreenSurfaceData.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -200,5 +200,0 @@\n-    @Override\n-    public void invalidate() {\n-        \/\/ always valid\n-    }\n-\n@@ -991,1 +986,1 @@\n-    public void doLine(CRenderer renderer, SunGraphics2D sg2d, float x1, float y1, float x2, float y2) {\n+    public synchronized void doLine(CRenderer renderer, SunGraphics2D sg2d, float x1, float y1, float x2, float y2) {\n@@ -997,1 +992,1 @@\n-    public void doRect(CRenderer renderer, SunGraphics2D sg2d, float x, float y, float width, float height, boolean isfill) {\n+    public synchronized void doRect(CRenderer renderer, SunGraphics2D sg2d, float x, float y, float width, float height, boolean isfill) {\n@@ -1007,1 +1002,1 @@\n-    public void doRoundRect(CRenderer renderer, SunGraphics2D sg2d, float x, float y, float width, float height, float arcW, float arcH, boolean isfill) {\n+    public synchronized void doRoundRect(CRenderer renderer, SunGraphics2D sg2d, float x, float y, float width, float height, float arcW, float arcH, boolean isfill) {\n@@ -1017,1 +1012,1 @@\n-    public void doOval(CRenderer renderer, SunGraphics2D sg2d, float x, float y, float width, float height, boolean isfill) {\n+    public synchronized void doOval(CRenderer renderer, SunGraphics2D sg2d, float x, float y, float width, float height, boolean isfill) {\n@@ -1027,1 +1022,1 @@\n-    public void doArc(CRenderer renderer, SunGraphics2D sg2d, float x, float y, float width, float height, float startAngle, float arcAngle, int type, boolean isfill) {\n+    public synchronized void doArc(CRenderer renderer, SunGraphics2D sg2d, float x, float y, float width, float height, float startAngle, float arcAngle, int type, boolean isfill) {\n@@ -1038,1 +1033,1 @@\n-    public void doPolygon(CRenderer renderer, SunGraphics2D sg2d, int[] xpoints, int[] ypoints, int npoints, boolean ispolygon, boolean isfill) {\n+    public synchronized void doPolygon(CRenderer renderer, SunGraphics2D sg2d, int[] xpoints, int[] ypoints, int npoints, boolean ispolygon, boolean isfill) {\n@@ -1071,1 +1066,1 @@\n-    public void drawfillShape(CRenderer renderer, SunGraphics2D sg2d, GeneralPath gp, boolean isfill, boolean shouldApplyOffset) {\n+    public synchronized void drawfillShape(CRenderer renderer, SunGraphics2D sg2d, GeneralPath gp, boolean isfill, boolean shouldApplyOffset) {\n@@ -1096,1 +1091,1 @@\n-    public void blitImage(CRenderer renderer, SunGraphics2D sg2d, SurfaceData img, boolean fliph, boolean flipv, int sx, int sy, int sw, int sh, int dx, int dy, int dw, int dh, Color bgColor) {\n+    public synchronized void blitImage(CRenderer renderer, SunGraphics2D sg2d, SurfaceData img, boolean fliph, boolean flipv, int sx, int sy, int sw, int sh, int dx, int dy, int dw, int dh, Color bgColor) {\n@@ -1119,1 +1114,1 @@\n-    public void drawString(CTextPipe renderer, SunGraphics2D sg2d, long nativeStrikePtr, String str, double x, double y) {\n+    public synchronized void drawString(CTextPipe renderer, SunGraphics2D sg2d, long nativeStrikePtr, String str, double x, double y) {\n@@ -1128,1 +1123,1 @@\n-    public void drawGlyphs(CTextPipe renderer, SunGraphics2D sg2d, long nativeStrikePtr, GlyphVector gv, float x, float y) {\n+    public synchronized void drawGlyphs(CTextPipe renderer, SunGraphics2D sg2d, long nativeStrikePtr, GlyphVector gv, float x, float y) {\n@@ -1134,1 +1129,1 @@\n-    public void drawUnicodes(CTextPipe renderer, SunGraphics2D sg2d, long nativeStrikePtr, char[] unicodes, int offset, int length, float x, float y) {\n+    public synchronized void drawUnicodes(CTextPipe renderer, SunGraphics2D sg2d, long nativeStrikePtr, char[] unicodes, int offset, int length, float x, float y) {\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/java2d\/OSXSurfaceData.java","additions":11,"deletions":16,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -824,1 +824,1 @@\n-                Graphics2D delegate = new SunGraphics2D(sd, Color.black, Color.white, defaultFont);\n+                SunGraphics2D delegate = new SunGraphics2D(sd, Color.black, Color.white, defaultFont);\n@@ -833,2 +833,5 @@\n-                delegate.dispose();\n-                delegate = null;\n+                synchronized (sd) {\n+                    sd.invalidate();\n+                    delegate.dispose();\n+                    delegate = null;\n+                }\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/CPrinterJob.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/*\n+  @test\n+  @bug 8370141\n+  @summary  Test no crash printing to Graphics after job is ended.\n+  @key headful printer\n+  @run main PrintJobAfterEndTest\n+*\/\n+\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.JobAttributes;\n+import java.awt.JobAttributes.DialogType;\n+import java.awt.JobAttributes.DestinationType;\n+import java.awt.PageAttributes;\n+import java.awt.PrintJob;\n+import java.awt.Toolkit;\n+import java.util.concurrent.CountDownLatch;\n+\n+public class PrintJobAfterEndTest {\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        JobAttributes jobAttributes = new JobAttributes();\n+        jobAttributes.setDialog(DialogType.NONE);\n+        jobAttributes.setDestination(DestinationType.FILE);\n+        jobAttributes.setFileName(\"out.prn\");\n+\n+        PageAttributes pageAttributes = new PageAttributes();\n+\n+        Frame f = new Frame();\n+        Toolkit tk = f.getToolkit();\n+\n+        for (int i = 0; i < 500; i++) {\n+            PrintJob job = tk.getPrintJob(f, \"Print Crash Test\", jobAttributes, pageAttributes);\n+            if (job != null) {\n+                Graphics g = job.getGraphics();\n+                CountDownLatch latch = new CountDownLatch(1);\n+\n+                Thread endThread = new Thread(() -> {\n+                    try {\n+                        latch.await();\n+                        job.end();\n+                    } catch (Throwable t) {\n+                        t.printStackTrace();\n+                    }\n+                });\n+\n+                Thread drawThread = new Thread(() -> {\n+                    try {\n+                        latch.await();\n+                        g.clearRect(10, 10, 100, 100);\n+                        g.drawRect(0, 300, 200, 400);\n+                        g.fillRect(0, 300, 200, 400);\n+                        g.drawLine(0, 100, 200, 100);\n+                        g.drawString(\"Hello\", 200, 200);\n+                        g.drawOval(200, 200, 200, 200);\n+                        int[] pts = new int[] { 10, 200, 100 };\n+                        g.drawPolyline(pts, pts, pts.length);\n+                        g.drawPolygon(pts, pts, pts.length);\n+                        g.fillPolygon(pts, pts, pts.length);\n+                    } catch (Throwable t) {\n+                        t.printStackTrace();\n+                    }\n+                });\n+\n+                if ( i % 2 == 0) {\n+                    drawThread.start();\n+                    endThread.start();\n+                } else {\n+                    endThread.start();\n+                    drawThread.start();\n+                }\n+                latch.countDown();\n+\n+                endThread.join();\n+                drawThread.join();\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/PrintJob\/PrintJobAfterEndTest.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"},{"patch":"@@ -0,0 +1,127 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @key printer\n+ * @bug 8370141\n+ * @summary No crash when printing after job completed.\n+ * @run main PrintAfterEndTest\n+ *\/\n+\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.print.Pageable;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+import javax.print.attribute.HashPrintRequestAttributeSet;\n+import javax.print.attribute.standard.Destination;\n+import java.io.File;\n+import java.util.concurrent.CountDownLatch;\n+\n+public class PrintAfterEndTest implements Printable {\n+\n+    volatile Graphics peekgraphics;\n+    volatile Graphics pathgraphics;\n+\n+    public static void main(String args[]) throws Exception {\n+\n+        for (int i = 0; i < 500; i++) {\n+            PrintAfterEndTest paet = new PrintAfterEndTest();\n+            paet.print();\n+        }\n+    }\n+\n+    void print() throws Exception {\n+        PrinterJob pjob = PrinterJob.getPrinterJob();\n+        if (pjob == null || pjob.getPrintService() == null) {\n+            System.out.println(\"Unable to create a PrintJob\");\n+            return;\n+        }\n+\n+        CountDownLatch latch = new CountDownLatch(1);\n+        HashPrintRequestAttributeSet aset = new HashPrintRequestAttributeSet();\n+        File file = new File(\"out.prn\");\n+        Destination destination = new Destination(file.toURI());\n+        aset.add(destination);\n+        pjob.setPrintable(this);\n+        pjob.print(aset);\n+\n+        DrawRunnable tpeek = new DrawRunnable(peekgraphics, latch);\n+        DrawRunnable tpath = new DrawRunnable(pathgraphics, latch);\n+        tpeek.start();\n+        tpath.start();\n+        latch.countDown();\n+        tpeek.join();\n+        tpath.join();\n+   }\n+\n+    static class DrawRunnable extends Thread {\n+\n+        Graphics g;\n+        CountDownLatch latch;\n+        DrawRunnable(Graphics g, CountDownLatch latch) {\n+            this.g = g;\n+            this.latch = latch;\n+        }\n+\n+        public void run() {\n+            if (g == null) {\n+                return;\n+            }\n+            try {\n+                latch.await();\n+                g.clearRect(10, 10, 100, 100);\n+                g.drawRect(0, 300, 200, 400);\n+                g.fillRect(0, 300, 200, 400);\n+                g.drawLine(0, 100, 200, 100);\n+                g.drawString(\"Hello\", 200, 200);\n+                g.drawOval(200, 200, 200, 200);\n+                int[] pts = new int[] { 10, 200, 100 };\n+                g.drawPolyline(pts, pts, pts.length);\n+                g.drawPolygon(pts, pts, pts.length);\n+                g.fillPolygon(pts, pts, pts.length);\n+                g.dispose();\n+            } catch (Throwable t) {\n+            }\n+        }\n+    }\n+\n+    public int print(Graphics g, PageFormat pf, int pageIndex) {\n+        if (pageIndex > 0) {\n+            return NO_SUCH_PAGE;\n+        }\n+        if (peekgraphics == null) {\n+            peekgraphics = g.create();\n+        } else if (pathgraphics == null) {\n+            pathgraphics = g.create();\n+        }\n+        Graphics2D g2d = (Graphics2D)g;\n+        g2d.translate(pf.getImageableX(),  pf.getImageableY());\n+        g.drawString(\"random string\", 100,20);\n+        return PAGE_EXISTS;\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/PrintAfterEndTest.java","additions":127,"deletions":0,"binary":false,"changes":127,"status":"added"}]}