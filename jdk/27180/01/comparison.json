{"files":[{"patch":"@@ -40,1 +40,1 @@\n-FORBID_C_FUNCTION(char* strndup(const char*, size_t), \"don't use\");\n+FORBID_C_FUNCTION(char* strndup(const char*, size_t), noexcept, \"don't use\");\n@@ -45,2 +45,2 @@\n-FORBID_C_FUNCTION(int posix_memalign(void**, size_t, size_t), \"don't use\");\n-FORBID_C_FUNCTION(void* aligned_alloc(size_t, size_t), \"don't use\");\n+FORBID_C_FUNCTION(int posix_memalign(void**, size_t, size_t), noexcept, \"don't use\");\n+FORBID_C_FUNCTION(void* aligned_alloc(size_t, size_t), noexcept, \"don't use\");\n@@ -52,1 +52,1 @@\n-FORBID_C_FUNCTION(char* realpath(const char*, char*), \"use os::realpath\");\n+FORBID_C_FUNCTION(char* realpath(const char*, char*), noexcept, \"use os::realpath\");\n@@ -56,1 +56,1 @@\n-FORBID_C_FUNCTION(char* get_current_dir_name(), \"use os::get_current_directory\");\n+FORBID_C_FUNCTION(char* get_current_dir_name(), noexcept, \"use os::get_current_directory\");\n@@ -59,1 +59,1 @@\n-FORBID_C_FUNCTION(char* getwd(char*), \"use os::get_current_directory\");\n+FORBID_C_FUNCTION(char* getwd(char*), noexcept, \"use os::get_current_directory\");\n@@ -62,1 +62,1 @@\n-FORBID_C_FUNCTION(void* reallocf(void*, size_t), \"use os::realloc\");\n+FORBID_C_FUNCTION(void* reallocf(void*, size_t), \/* not noexcept *\/, \"use os::realloc\");\n","filename":"src\/hotspot\/os\/posix\/forbiddenFunctions_posix.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -32,0 +32,2 @@\n+\/\/ NOTE: The Windows C standard library doesn't declare functions \"noexcept\".\n+\n@@ -33,1 +35,1 @@\n-FORBID_IMPORTED_C_FUNCTION(char* _fullpath(char*, const char*, size_t), \"use os::realpath\");\n+FORBID_IMPORTED_C_FUNCTION(char* _fullpath(char*, const char*, size_t), \/* not noexcept *\/, \"use os::realpath\");\n@@ -36,1 +38,1 @@\n-FORBID_C_FUNCTION(int _snprintf(char*, size_t, const char*, ...), \"use os::snprintf\");\n+FORBID_C_FUNCTION(int _snprintf(char*, size_t, const char*, ...), \/* not noexcept *\/, \"use os::snprintf\");\n","filename":"src\/hotspot\/os\/windows\/forbiddenFunctions_windows.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-\/\/ FORBID_C_FUNCTION(Signature, Alternative)\n+\/\/ FORBID_C_FUNCTION(Signature, Noexcept, Alternative)\n@@ -91,0 +91,1 @@\n+\/\/ - Noexcept: either the token `noexcept` or nothing. See below.\n@@ -96,0 +97,12 @@\n+\/\/ The Noexcept argument is used to deal with differences among the standard\n+\/\/ libraries of various platforms.  For example, the C standard library on\n+\/\/ Linux declares many functions `noexcept`. Windows and BSD C standard\n+\/\/ libraries don't include exception specifications at all. This matters\n+\/\/ because some compilers reject (some) differences between declarations that\n+\/\/ differ in the exception specification. clang complains if the first\n+\/\/ declaration is not noexcept while some later declaration is, but not the\n+\/\/ reverse. gcc doesn't seem to care. (Maybe that's a gcc bug?) So if the\n+\/\/ forbidding declaration differs from the platform's library then we may get\n+\/\/ errors building with clang (but not gcc), depending on the difference and\n+\/\/ the include order.\n+\/\/\n@@ -105,2 +118,15 @@\n-#define FORBID_C_FUNCTION(Signature, Alternative) \\\n-  extern \"C\" { [[deprecated(Alternative)]] Signature; }\n+#define FORBID_C_FUNCTION(Signature, Noexcept, Alternative)     \\\n+  extern \"C\" {                                                  \\\n+    [[deprecated(Alternative)]]                                 \\\n+    Signature                                                   \\\n+    \/* 2-step pasting to avoid expansion of FFCN => nothing. *\/ \\\n+    PASTE_TOKENS(                                               \\\n+      FORBIDDEN_FUNCTION_,                                      \\\n+      PASTE_TOKENS(COND_NOEXCEPT_, Noexcept))                   \\\n+    ;                                                           \\\n+  }\n+\n+\/\/ Both Linux and AIX C libraries declare functions noexcept.\n+\/\/ Neither BSD nor Windows C libraries declare functions noexcept.\n+#define FORBIDDEN_FUNCTION_COND_NOEXCEPT_noexcept NOT_WINDOWS(NOT_BSD(noexcept))\n+#define FORBIDDEN_FUNCTION_COND_NOEXCEPT_\n@@ -120,2 +146,2 @@\n-#define FORBID_IMPORTED_C_FUNCTION(Signature, Alternative) \\\n-  FORBID_C_FUNCTION(FORBIDDEN_FUNCTION_IMPORT_SPEC Signature, Alternative)\n+#define FORBID_IMPORTED_C_FUNCTION(Signature, Noexcept, Alternative) \\\n+  FORBID_C_FUNCTION(FORBIDDEN_FUNCTION_IMPORT_SPEC Signature, Noexcept, Alternative)\n@@ -123,2 +149,2 @@\n-#define FORBID_NORETURN_C_FUNCTION(Signature, Alternative) \\\n-  FORBID_C_FUNCTION(FORBIDDEN_FUNCTION_NORETURN_ATTRIBUTE Signature, Alternative)\n+#define FORBID_NORETURN_C_FUNCTION(Signature, Noexcept, Alternative) \\\n+  FORBID_C_FUNCTION(FORBIDDEN_FUNCTION_NORETURN_ATTRIBUTE Signature, Noexcept, Alternative)\n@@ -126,2 +152,2 @@\n-#define FORBID_IMPORTED_NORETURN_C_FUNCTION(Signature, Alternative) \\\n-  FORBID_NORETURN_C_FUNCTION(FORBIDDEN_FUNCTION_IMPORT_SPEC Signature, Alternative)\n+#define FORBID_IMPORTED_NORETURN_C_FUNCTION(Signature, Noexcept, Alternative) \\\n+  FORBID_NORETURN_C_FUNCTION(FORBIDDEN_FUNCTION_IMPORT_SPEC Signature, Noexcept, Alternative)\n","filename":"src\/hotspot\/share\/utilities\/compilerWarnings.hpp","additions":35,"deletions":9,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -41,9 +41,0 @@\n-\/\/ Workaround for noexcept functions in glibc when using clang.\n-\/\/ clang errors if declaration without exception specification preceeds\n-\/\/ noexcept declaration, but not the other way around.\n-#ifdef __clang__\n-#include <stdio.h>\n-#include <string.h>\n-#include <wchar.h>\n-#endif\n-\n@@ -61,2 +52,2 @@\n-FORBID_IMPORTED_NORETURN_C_FUNCTION(void exit(int), \"use os::exit\")\n-FORBID_IMPORTED_NORETURN_C_FUNCTION(void _Exit(int), \"use os::exit\")\n+FORBID_IMPORTED_NORETURN_C_FUNCTION(void exit(int), noexcept, \"use os::exit\")\n+FORBID_IMPORTED_NORETURN_C_FUNCTION(void _Exit(int), noexcept, \"use os::exit\")\n@@ -65,1 +56,1 @@\n-FORBID_IMPORTED_NORETURN_C_FUNCTION(void _exit(int), \"use os::exit\")\n+FORBID_IMPORTED_NORETURN_C_FUNCTION(void _exit(int), \/* not noexcept *\/, \"use os::exit\")\n@@ -67,2 +58,2 @@\n-FORBID_IMPORTED_C_FUNCTION(char* strerror(int), \"use os::strerror\");\n-FORBID_IMPORTED_C_FUNCTION(char* strtok(char*, const char*), \"use strtok_r\");\n+FORBID_IMPORTED_C_FUNCTION(char* strerror(int), noexcept, \"use os::strerror\");\n+FORBID_IMPORTED_C_FUNCTION(char* strtok(char*, const char*), noexcept, \"use strtok_r\");\n@@ -70,2 +61,5 @@\n-FORBID_C_FUNCTION(int sprintf(char*, const char*, ...), \"use os::snprintf\");\n-FORBID_C_FUNCTION(int snprintf(char*, size_t, const char*, ...), \"use os::snprintf\");\n+\/\/ AIX declarations for sprintf and snprintf are not noexcept, which is\n+\/\/ inconsistent with most other system header declarations, including being\n+\/\/ inconsistent with vsprintf and fsnprintf.\n+FORBID_C_FUNCTION(int sprintf(char*, const char*, ...), NOT_AIX(noexcept), \"use os::snprintf\");\n+FORBID_C_FUNCTION(int snprintf(char*, size_t, const char*, ...), NOT_AIX(noexcept), \"use os::snprintf\");\n@@ -75,2 +69,2 @@\n-FORBID_C_FUNCTION(int vsprintf(char*, const char*, va_list), \"use os::vsnprintf\");\n-FORBID_C_FUNCTION(int vsnprintf(char*, size_t, const char*, va_list), \"use os::vsnprintf\");\n+FORBID_C_FUNCTION(int vsprintf(char*, const char*, va_list), noexcept, \"use os::vsnprintf\");\n+FORBID_C_FUNCTION(int vsnprintf(char*, size_t, const char*, va_list), noexcept, \"use os::vsnprintf\");\n@@ -82,6 +76,6 @@\n-FORBID_IMPORTED_C_FUNCTION(void* malloc(size_t size), \"use os::malloc\");\n-FORBID_IMPORTED_C_FUNCTION(void free(void *ptr), \"use os::free\");\n-FORBID_IMPORTED_C_FUNCTION(void* calloc(size_t nmemb, size_t size), \"use os::malloc and zero out manually\");\n-FORBID_IMPORTED_C_FUNCTION(void* realloc(void *ptr, size_t size), \"use os::realloc\");\n-FORBID_IMPORTED_C_FUNCTION(char* strdup(const char *s), \"use os::strdup\");\n-FORBID_IMPORTED_C_FUNCTION(wchar_t* wcsdup(const wchar_t *s), \"don't use\");\n+FORBID_IMPORTED_C_FUNCTION(void* malloc(size_t size), noexcept, \"use os::malloc\");\n+FORBID_IMPORTED_C_FUNCTION(void free(void *ptr), noexcept, \"use os::free\");\n+FORBID_IMPORTED_C_FUNCTION(void* calloc(size_t nmemb, size_t size), noexcept, \"use os::malloc and zero out manually\");\n+FORBID_IMPORTED_C_FUNCTION(void* realloc(void *ptr, size_t size), noexcept, \"use os::realloc\");\n+FORBID_IMPORTED_C_FUNCTION(char* strdup(const char *s), noexcept, \"use os::strdup\");\n+FORBID_IMPORTED_C_FUNCTION(wchar_t* wcsdup(const wchar_t *s), noexcept, \"don't use\");\n","filename":"src\/hotspot\/share\/utilities\/forbiddenFunctions.hpp","additions":18,"deletions":24,"binary":false,"changes":42,"status":"modified"}]}