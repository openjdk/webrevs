{"files":[{"patch":"@@ -925,19 +925,19 @@\n-  if (!CompilationModeFlag::disable_intermediate()) {\n-    \/\/ Check if the method can be compiled. If it cannot be compiled with C1, continue profiling\n-    \/\/ in the interpreter and then compile with C2 (the transition function will request that,\n-    \/\/ see common() ). If the method cannot be compiled with C2 but still can with C1, compile it with\n-    \/\/ pure C1.\n-    if ((bci == InvocationEntryBci && !can_be_compiled(mh, level))) {\n-      if (level == CompLevel_full_optimization && can_be_compiled(mh, CompLevel_simple)) {\n-        compile(mh, bci, CompLevel_simple, THREAD);\n-      }\n-      return;\n-    }\n-    if ((bci != InvocationEntryBci && !can_be_osr_compiled(mh, level))) {\n-      if (level == CompLevel_full_optimization && can_be_osr_compiled(mh, CompLevel_simple)) {\n-        nmethod* osr_nm = mh->lookup_osr_nmethod_for(bci, CompLevel_simple, false);\n-        if (osr_nm != nullptr && osr_nm->comp_level() > CompLevel_simple) {\n-          \/\/ Invalidate the existing OSR nmethod so that a compile at CompLevel_simple is permitted.\n-          osr_nm->make_not_entrant(nmethod::InvalidationReason::OSR_INVALIDATION_FOR_COMPILING_WITH_C1);\n-        }\n-        compile(mh, bci, CompLevel_simple, THREAD);\n+  \/\/ Check if the method can be compiled. Additional logic for TieredCompilation:\n+  \/\/ If it cannot be compiled with C1, continue profiling in the interpreter\n+  \/\/ and then compile with C2 (the transition function will request that,\n+  \/\/ see common() ). If the method cannot be compiled with C2 but still can with C1, compile it with\n+  \/\/ pure C1.\n+  if ((bci == InvocationEntryBci && !can_be_compiled(mh, level))) {\n+    if (!CompilationModeFlag::disable_intermediate() &&\n+        level == CompLevel_full_optimization && can_be_compiled(mh, CompLevel_simple)) {\n+      compile(mh, bci, CompLevel_simple, THREAD);\n+    }\n+    return;\n+  }\n+  if ((bci != InvocationEntryBci && !can_be_osr_compiled(mh, level))) {\n+    if (!CompilationModeFlag::disable_intermediate() &&\n+        level == CompLevel_full_optimization && can_be_osr_compiled(mh, CompLevel_simple)) {\n+      nmethod* osr_nm = mh->lookup_osr_nmethod_for(bci, CompLevel_simple, false);\n+      if (osr_nm != nullptr && osr_nm->comp_level() > CompLevel_simple) {\n+        \/\/ Invalidate the existing OSR nmethod so that a compile at CompLevel_simple is permitted.\n+        osr_nm->make_not_entrant(nmethod::InvalidationReason::OSR_INVALIDATION_FOR_COMPILING_WITH_C1);\n@@ -945,1 +945,1 @@\n-      return;\n+      compile(mh, bci, CompLevel_simple, THREAD);\n@@ -947,0 +947,1 @@\n+    return;\n","filename":"src\/hotspot\/share\/compiler\/compilationPolicy.cpp","additions":21,"deletions":20,"binary":false,"changes":41,"status":"modified"}]}