{"files":[{"patch":"@@ -0,0 +1,121 @@\n+\/*\n+ * Copyright (c) 2025, Google LLC. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8366118\n+ * @summary Check that a huge method is not compiled under -XX:+DontCompileHugeMethods.\n+ * @library \/test\/lib\n+ * @run main compiler.runtime.TestDontCompileHugeMethods\n+ *\/\n+package compiler.runtime;\n+\n+import jdk.test.lib.JDKToolLauncher;\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+public class TestDontCompileHugeMethods {\n+\n+    private static final String HUGE_SWITCH_CLASS_NAME = \"HugeSwitch\";\n+\n+    private static void generateClass(Writer writer) throws IOException {\n+        writer.write(\"\"\"\n+            public class HugeSwitch {\n+              private static int hugeSwitch(int x) {\n+                switch (x) {\n+            \"\"\");\n+        for (int i = 0; i < 2000; i++) {\n+            writer.write(\"      case \" + i + \": return \" + i + \" + 1;\\n\");\n+        }\n+        writer.write(\"\"\"\n+                  default:\n+                    return 0;\n+                }\n+              }\n+              private static int shortMethod(int x) {\n+                if (x % 3 == 0) {\n+                  return x - 1;\n+                }\n+                return x + 1;\n+              }\n+              public static void main(String[] args) {\n+                int val = 0;\n+                for (int i = 0; i < 100000; i++) {\n+                  val += hugeSwitch(shortMethod(i));\n+                }\n+                System.out.println(val);\n+              }\n+            }\n+            \"\"\");\n+    }\n+\n+    private static void compileClass(Path workDir, Path sourceFile) throws Exception {\n+        JDKToolLauncher javac = JDKToolLauncher.create(\"javac\").addToolArg(\"-d\")\n+            .addToolArg(workDir.toAbsolutePath().toString()).addToolArg(\"-cp\")\n+            .addToolArg(Utils.TEST_CLASS_PATH).addToolArg(sourceFile.toAbsolutePath().toString());\n+\n+        OutputAnalyzer output = ProcessTools.executeProcess(javac.getCommand());\n+        output.shouldHaveExitValue(0);\n+    }\n+\n+    private static void generateAndCompileClass(Path workDir) throws Exception {\n+        Path sourceFile = workDir.resolve(HUGE_SWITCH_CLASS_NAME + \".java\");\n+        try (Writer writer = Files.newBufferedWriter(sourceFile)) {\n+            generateClass(writer);\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+        compileClass(workDir, sourceFile);\n+    }\n+\n+    private static void runTest(Path workDir, String[] jvmArgs) throws Exception {\n+        ArrayList<String> command = new ArrayList<>();\n+        command.add(\"-XX:+PrintCompilation\");\n+        command.addAll(Arrays.asList(jvmArgs));\n+        command.add(\"-cp\");\n+        command.add(workDir.toAbsolutePath().toString());\n+        command.add(HUGE_SWITCH_CLASS_NAME);\n+        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(command);\n+        OutputAnalyzer analyzer = new OutputAnalyzer(pb.start());\n+        analyzer.shouldHaveExitValue(0);\n+        analyzer.shouldContain(\"   HugeSwitch::shortMethod (\");\n+        analyzer.shouldNotContain(\"   HugeSwitch::hugeSwitch (\");\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        Path workDir = Paths.get(\"\");\n+        generateAndCompileClass(workDir);\n+\n+        runTest(workDir, new String[0]);\n+        runTest(workDir, new String[] {\"-XX:-TieredCompilation\"});\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/runtime\/TestDontCompileHugeMethods.java","additions":121,"deletions":0,"binary":false,"changes":121,"status":"added"}]}