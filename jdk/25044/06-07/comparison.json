{"files":[{"patch":"@@ -41,2 +41,0 @@\n-import java.io.File;\n-import java.io.IOException;\n@@ -44,2 +42,0 @@\n-import java.nio.file.*;\n-import java.nio.file.attribute.BasicFileAttributes;\n@@ -51,1 +47,0 @@\n-import java.util.concurrent.atomic.AtomicInteger;\n@@ -55,2 +50,2 @@\n- * This compares the ImageIO rendering of a gif with the ToolkitImage\n- * rendering.\n+ * This compares the last frame of ImageIO's rendering of a gif with the\n+ * ToolkitImage's rendering.\n@@ -59,1 +54,0 @@\n- * However this does have its own main method that inspects a folder of gifs.\n@@ -64,44 +58,1 @@\n-     * This inspects a folder and calls {@link #run(URL)} for each gif file.\n-     *\/\n-    public static void main(String[] args) throws Exception {\n-        AtomicInteger successCtr = new AtomicInteger();\n-        AtomicInteger failureCtr = new AtomicInteger();\n-        File dir = new File(args[0]);\n-        Files.walkFileTree(dir.toPath(), new FileVisitor<>() {\n-            @Override\n-            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) {\n-                return FileVisitResult.CONTINUE;\n-            }\n-\n-            @Override\n-            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) {\n-                String s = file.toString();\n-                if (s.endsWith(\".gif\")) {\n-                    try {\n-                        run(file.toFile().toURI().toURL());\n-                        successCtr.incrementAndGet();\n-                    } catch (Throwable t) {\n-                        failureCtr.incrementAndGet();\n-                        t.printStackTrace();\n-                    }\n-                }\n-                return FileVisitResult.CONTINUE;\n-            }\n-\n-            @Override\n-            public FileVisitResult visitFileFailed(Path file, IOException exc) {\n-                return FileVisitResult.CONTINUE;\n-            }\n-\n-            @Override\n-            public FileVisitResult postVisitDirectory(Path dir, IOException exc) {\n-                return FileVisitResult.CONTINUE;\n-            }\n-        });\n-\n-        System.out.println(\"Done. Successes = \" + successCtr.get() +\n-                \" Failures = \" + failureCtr.get());\n-    }\n-\n-    \/**\n-     * This iterates over every frame a gif and throws an Error \/ Exception\n+     * This inspects the last frame of a gif and throws an Error \/ Exception\n@@ -124,39 +75,35 @@\n-        for (int a = 0; a < ioModel.frames.size(); a++) {\n-            BufferedImage ioImg = ioModel.getFrame(a);\n-            BufferedImage awtImage = awtModel.getFrame(a);\n-\n-            \/\/ We could make this method much faster if we only iterated\n-            \/\/ through the gif file once (for each model). But this\n-            \/\/ slow implementation is probably more readable for developers.\n-\n-            lastImage = awtImage;\n-\n-            if (!(ioImg.getWidth() == awtImage.getWidth() &&\n-                    ioImg.getHeight() == awtImage.getHeight()))\n-                throw new Error(\"These images are not the same size: \" +\n-                        ioImg.getWidth() + \"x\" + ioImg.getHeight() + \" vs \" +\n-                        awtImage.getWidth() + \"x\" + awtImage.getHeight());\n-\n-            for (int y = 0; y < ioImg.getHeight(); y++) {\n-                for (int x = 0; x < ioImg.getWidth(); x++) {\n-                    int argb1 = ioImg.getRGB(x, y);\n-                    int argb2 = awtImage.getRGB(x, y);\n-\n-                    int alpha1 = (argb1 & 0xff000000) >> 24;\n-                    int alpha2 = (argb2 & 0xff000000) >> 24;\n-                    if (alpha1 == 0 && alpha2 == 0) {\n-                        continue;\n-                    } else if (alpha1 == 0 || alpha2 == 0) {\n-                        throw new Error(\"pixels at (\" + x + \", \" + y +\n-                                \") have different opacities: \" +\n-                                Integer.toUnsignedString(argb1, 16) + \" vs \" +\n-                                Integer.toUnsignedString(argb2, 16));\n-                    }\n-                    int rgb1 = argb1 & 0xffffff;\n-                    int rgb2 = argb2 & 0xffffff;\n-                    if (rgb1 != rgb2) {\n-                        throw new Error(\"pixels at (\" + x + \", \" + y +\n-                                \") have different opaque RGB values: \" +\n-                                Integer.toUnsignedString(rgb1, 16) + \" vs \" +\n-                                Integer.toUnsignedString(rgb2, 16));\n-                    }\n+\n+        int a = ioModel.frames.size() - 1;\n+        BufferedImage ioImg = ioModel.getFrame(a);\n+        BufferedImage awtImage = awtModel.getFrame(a);\n+\n+        lastImage = awtImage;\n+\n+        if (!(ioImg.getWidth() == awtImage.getWidth() &&\n+                ioImg.getHeight() == awtImage.getHeight()))\n+            throw new Error(\"These images are not the same size: \" +\n+                    ioImg.getWidth() + \"x\" + ioImg.getHeight() + \" vs \" +\n+                    awtImage.getWidth() + \"x\" + awtImage.getHeight());\n+\n+        for (int y = 0; y < ioImg.getHeight(); y++) {\n+            for (int x = 0; x < ioImg.getWidth(); x++) {\n+                int argb1 = ioImg.getRGB(x, y);\n+                int argb2 = awtImage.getRGB(x, y);\n+\n+                int alpha1 = (argb1 & 0xff000000) >> 24;\n+                int alpha2 = (argb2 & 0xff000000) >> 24;\n+                if (alpha1 == 0 && alpha2 == 0) {\n+                    continue;\n+                } else if (alpha1 == 0 || alpha2 == 0) {\n+                    throw new Error(\"pixels at (\" + x + \", \" + y +\n+                            \") have different opacities: \" +\n+                            Integer.toUnsignedString(argb1, 16) + \" vs \" +\n+                            Integer.toUnsignedString(argb2, 16));\n+                }\n+                int rgb1 = argb1 & 0xffffff;\n+                int rgb2 = argb2 & 0xffffff;\n+                if (rgb1 != rgb2) {\n+                    throw new Error(\"pixels at (\" + x + \", \" + y +\n+                            \") have different opaque RGB values: \" +\n+                            Integer.toUnsignedString(rgb1, 16) + \" vs \" +\n+                            Integer.toUnsignedString(rgb2, 16));\n@@ -166,1 +113,1 @@\n-        System.out.println(\"Passed (\" + ioModel.frames.size() + \" frames)\");\n+        System.out.println(\"Passed\");\n","filename":"test\/jdk\/sun\/awt\/image\/gif\/GifComparison.java","additions":39,"deletions":92,"binary":false,"changes":131,"status":"modified"}]}