{"files":[{"patch":"@@ -51,1 +51,2 @@\n-    public enum Disposal {none, doNotDispose, restoreToBackgroundColor, restoreToPrevious};\n+    public enum Disposal {none, doNotDispose, restoreToBackgroundColor,\n+        restoreToPrevious};\n@@ -61,1 +62,2 @@\n-    public record FrameDescription(Disposal disposal, boolean isFirstTableIndexTransparent) {}\n+    public record FrameDescription(Disposal disposal, boolean\n+            isFirstTableIndexTransparent) {}\n@@ -64,2 +66,2 @@\n-     * This creates a sample gif image based on a series of FrameDescriptions, and the\n-     * calls {@link GifComparison#run(URL)}\n+     * This creates a sample gif image based on a series of FrameDescriptions,\n+     * and the calls {@link GifComparison#run(URL)}\n@@ -67,1 +69,2 @@\n-    public static void test(FrameDescription... frameDescriptions) throws Throwable {\n+    public static void test(FrameDescription... frameDescriptions)\n+            throws Throwable {\n@@ -76,1 +79,2 @@\n-    private static File createTestFile(FrameDescription... frameDescriptions) throws IOException {\n+    private static File createTestFile(FrameDescription... frameDescriptions)\n+            throws IOException {\n@@ -85,1 +89,2 @@\n-        ImageWriter gifWriter = ImageIO.getImageWritersByFormatName(\"GIF\").next();\n+        ImageWriter gifWriter = ImageIO.getImageWritersByFormatName(\"GIF\").\n+                next();\n@@ -88,1 +93,2 @@\n-        IIOMetadata streamMetadata = gifWriter.getDefaultStreamMetadata(wparam);\n+        IIOMetadata streamMetadata = gifWriter.\n+                getDefaultStreamMetadata(wparam);\n@@ -93,1 +99,2 @@\n-        ImageTypeSpecifier s = ImageTypeSpecifier.createFromBufferedImageType(BufferedImage.TYPE_BYTE_INDEXED);\n+        ImageTypeSpecifier s = ImageTypeSpecifier.createFromBufferedImageType(\n+                BufferedImage.TYPE_BYTE_INDEXED);\n@@ -119,2 +126,4 @@\n-            int transparentPixel = frameDescription.isFirstTableIndexTransparent ? 0 : icm.getMapSize() - 1;\n-            IIOMetadata frameMetadata = gifWriter.getDefaultImageMetadata(ImageTypeSpecifier.createFromRenderedImage(bi), wparam);\n+            int transparentPixel = frameDescription.isFirstTableIndexTransparent\n+                    ? 0 : icm.getMapSize() - 1;\n+            IIOMetadata frameMetadata = gifWriter.getDefaultImageMetadata(\n+                    ImageTypeSpecifier.createFromRenderedImage(bi), wparam);\n@@ -122,2 +131,4 @@\n-            IIOMetadataNode gce = new IIOMetadataNode(\"GraphicControlExtension\");\n-            gce.setAttribute(\"disposalMethod\", frameDescription.disposal.name());\n+            IIOMetadataNode gce = new IIOMetadataNode(\n+                    \"GraphicControlExtension\");\n+            gce.setAttribute(\"disposalMethod\",\n+                    frameDescription.disposal.name());\n@@ -127,1 +138,2 @@\n-            gce.setAttribute(\"transparentColorIndex\", Integer.toString(transparentPixel));\n+            gce.setAttribute(\"transparentColorIndex\",\n+                    Integer.toString(transparentPixel));\n@@ -140,1 +152,2 @@\n-    private static IndexColorModel createIndexColorModel(Color[] colors, int transparentIndex) {\n+    private static IndexColorModel createIndexColorModel(Color[] colors,\n+                                                 int transparentIndex) {\n@@ -150,1 +163,2 @@\n-        return new IndexColorModel(bits, colors.length, r, g, b, transparentIndex);\n+        return new IndexColorModel(bits, colors.length, r, g, b,\n+                transparentIndex);\n","filename":"test\/jdk\/sun\/awt\/image\/gif\/GifBuilder.java","additions":30,"deletions":16,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -123,1 +123,2 @@\n-    record Frame(int x, int y, int w, int h, String disposalMethod, int transparentColorIndex) {}\n+    record Frame(int x, int y, int w, int h, String disposalMethod,\n+                 int transparentColorIndex) {}\n@@ -145,1 +146,2 @@\n-        IIOMetadataNode globalRoot = (IIOMetadataNode) metadata.getAsTree(metadata.getNativeMetadataFormatName());\n+        IIOMetadataNode globalRoot = (IIOMetadataNode) metadata.getAsTree(\n+                metadata.getNativeMetadataFormatName());\n@@ -147,1 +149,2 @@\n-        NodeList globalScreenDescriptor = globalRoot.getElementsByTagName(\"LogicalScreenDescriptor\");\n+        NodeList globalScreenDescriptor = globalRoot.getElementsByTagName(\n+                \"LogicalScreenDescriptor\");\n@@ -149,1 +152,2 @@\n-            IIOMetadataNode screenDescriptor = (IIOMetadataNode) globalScreenDescriptor.item(0);\n+            IIOMetadataNode screenDescriptor = (IIOMetadataNode)\n+                    globalScreenDescriptor.item(0);\n@@ -152,2 +156,4 @@\n-                width = Integer.parseInt(screenDescriptor.getAttribute(\"logicalScreenWidth\"));\n-                height = Integer.parseInt(screenDescriptor.getAttribute(\"logicalScreenHeight\"));\n+                width = Integer.parseInt(\n+                        screenDescriptor.getAttribute(\"logicalScreenWidth\"));\n+                height = Integer.parseInt(\n+                        screenDescriptor.getAttribute(\"logicalScreenHeight\"));\n@@ -157,1 +163,2 @@\n-        NodeList globalColorTable = globalRoot.getElementsByTagName(\"GlobalColorTable\");\n+        NodeList globalColorTable = globalRoot.getElementsByTagName(\n+                \"GlobalColorTable\");\n@@ -159,1 +166,2 @@\n-            IIOMetadataNode colorTable = (IIOMetadataNode) globalColorTable.item(0);\n+            IIOMetadataNode colorTable = (IIOMetadataNode)\n+                    globalColorTable.item(0);\n@@ -162,2 +170,4 @@\n-                String bgIndex = colorTable.getAttribute(\"backgroundColorIndex\");\n-                IIOMetadataNode colorEntry = (IIOMetadataNode) colorTable.getFirstChild();\n+                String bgIndex = colorTable.getAttribute(\n+                        \"backgroundColorIndex\");\n+                IIOMetadataNode colorEntry = (IIOMetadataNode)\n+                        colorTable.getFirstChild();\n@@ -166,3 +176,6 @@\n-                        int red = Integer.parseInt(colorEntry.getAttribute(\"red\"));\n-                        int green = Integer.parseInt(colorEntry.getAttribute(\"green\"));\n-                        int blue = Integer.parseInt(colorEntry.getAttribute(\"blue\"));\n+                        int red = Integer.parseInt(colorEntry.getAttribute(\n+                                \"red\"));\n+                        int green = Integer.parseInt(colorEntry.getAttribute(\n+                                \"green\"));\n+                        int blue = Integer.parseInt(colorEntry.getAttribute(\n+                                \"blue\"));\n@@ -182,2 +195,5 @@\n-            IIOMetadataNode root = (IIOMetadataNode) reader.getImageMetadata(frameIndex).getAsTree(\"javax_imageio_gif_image_1.0\");\n-            IIOMetadataNode gce = (IIOMetadataNode) root.getElementsByTagName(\"GraphicControlExtension\").item(0);\n+            IIOMetadataNode root = (IIOMetadataNode) reader.\n+                    getImageMetadata(frameIndex).\n+                    getAsTree(\"javax_imageio_gif_image_1.0\");\n+            IIOMetadataNode gce = (IIOMetadataNode) root.\n+                    getElementsByTagName(\"GraphicControlExtension\").item(0);\n@@ -186,2 +202,4 @@\n-            if (\"TRUE\".equalsIgnoreCase(gce.getAttribute(\"transparentColorFlag\"))) {\n-                transparentColorIndex = Integer.parseInt(gce.getAttribute(\"transparentColorIndex\"));\n+            if (\"TRUE\".equalsIgnoreCase(gce.getAttribute(\n+                    \"transparentColorFlag\"))) {\n+                transparentColorIndex = Integer.parseInt(gce.getAttribute(\n+                        \"transparentColorIndex\"));\n@@ -197,1 +215,2 @@\n-            for (int nodeIndex = 0; nodeIndex < children.getLength(); nodeIndex++) {\n+            for (int nodeIndex = 0; nodeIndex < children.getLength();\n+                 nodeIndex++) {\n@@ -203,4 +222,8 @@\n-                    frameX = Integer.parseInt(map.getNamedItem(\"imageLeftPosition\").getNodeValue());\n-                    frameY = Integer.parseInt(map.getNamedItem(\"imageTopPosition\").getNodeValue());\n-                    frameWidth = Integer.parseInt(map.getNamedItem(\"imageWidth\").getNodeValue());\n-                    frameHeight = Integer.parseInt(map.getNamedItem(\"imageHeight\").getNodeValue());\n+                    frameX = Integer.parseInt(map.getNamedItem(\n+                            \"imageLeftPosition\").getNodeValue());\n+                    frameY = Integer.parseInt(map.getNamedItem(\n+                            \"imageTopPosition\").getNodeValue());\n+                    frameWidth = Integer.parseInt(map.getNamedItem(\n+                            \"imageWidth\").getNodeValue());\n+                    frameHeight = Integer.parseInt(map.getNamedItem(\n+                            \"imageHeight\").getNodeValue());\n@@ -221,1 +244,2 @@\n-            BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);\n+            BufferedImage image = new BufferedImage(width, height,\n+                    BufferedImage.TYPE_INT_ARGB);\n@@ -326,1 +350,3 @@\n-            public void setPixels(int x, int y, int w, int h, ColorModel model, byte[] pixels, int off, int scansize) {\n+            public void setPixels(int x, int y, int w, int h,\n+                                  ColorModel model, byte[] pixels, int off,\n+                                  int scansize) {\n@@ -353,1 +379,3 @@\n-            public void setPixels(int x, int y, int w, int h, ColorModel model, int[] pixels, int off, int scansize) {}\n+            public void setPixels(int x, int y, int w, int h,\n+                                  ColorModel model, int[] pixels, int off,\n+                                  int scansize) {}\n","filename":"test\/jdk\/sun\/awt\/image\/gif\/GifComparison.java","additions":53,"deletions":25,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -34,3 +34,6 @@\n-                new GifBuilder.FrameDescription(GifBuilder.Disposal.restoreToBackgroundColor, false),\n-                new GifBuilder.FrameDescription(GifBuilder.Disposal.doNotDispose, false),\n-                new GifBuilder.FrameDescription(GifBuilder.Disposal.doNotDispose, false) );\n+                new GifBuilder.FrameDescription(\n+                        GifBuilder.Disposal.restoreToBackgroundColor, false),\n+                new GifBuilder.FrameDescription(\n+                        GifBuilder.Disposal.doNotDispose, false),\n+                new GifBuilder.FrameDescription(\n+                        GifBuilder.Disposal.doNotDispose, false) );\n","filename":"test\/jdk\/sun\/awt\/image\/gif\/GifEmptyBackgroundTest.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"}]}