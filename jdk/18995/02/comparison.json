{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,2 @@\n- * @library ..\/..\/regtesthelpers\n- * @build   Util\n+ * @library \/java\/awt\/regtesthelpers \/test\/lib\n+ * @build   Util jdk.test.lib.Platform\n@@ -44,2 +44,14 @@\n-import java.awt.*;\n-import java.awt.event.*;\n+import java.awt.AWTEvent;\n+import java.awt.AWTException;\n+import java.awt.Button;\n+import java.awt.Component;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Robot;\n+import java.awt.Toolkit;\n+import java.awt.event.AWTEventListener;\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.FocusListener;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.WindowEvent;\n@@ -49,1 +61,5 @@\n-import javax.swing.*;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n+\n+import jdk.test.lib.Platform;\n@@ -75,1 +91,1 @@\n-    public static void main(String[] args) {\n+    public static void main(String[] args) throws Exception {\n@@ -84,0 +100,1 @@\n+            robot.setAutoDelay(50);\n@@ -93,1 +110,1 @@\n-        f0.setBounds(0, 100, 400, 200);\n+        f0.setBounds(100, 100, 400, 200);\n@@ -96,1 +113,1 @@\n-        f1.setBounds(0, 400, 400, 200);\n+        f1.setBounds(100, 400, 400, 200);\n@@ -99,1 +116,1 @@\n-        f2.setBounds(0, 400, 400, 200);\n+        f2.setBounds(100, 400, 400, 200);\n@@ -118,0 +135,1 @@\n+        robot.delay(500);\n@@ -155,1 +173,1 @@\n-    public static void test(Component compToClick) {\n+    public static void test(Component compToClick) throws Exception {\n@@ -159,1 +177,0 @@\n-        robot.delay(50);\n@@ -161,1 +178,1 @@\n-        robot.delay(50);\n+        robot.waitForIdle();\n@@ -164,1 +181,0 @@\n-        robot.delay(50);\n@@ -166,1 +182,1 @@\n-        robot.delay(50);\n+        robot.waitForIdle();\n@@ -169,1 +185,0 @@\n-        robot.delay(50);\n@@ -171,0 +186,1 @@\n+        robot.waitForIdle();\n@@ -172,1 +188,0 @@\n-        robot.delay(50);\n@@ -175,2 +190,6 @@\n-        robot.delay(50);\n-        Util.clickOnTitle(f0, robot);\n+        robot.waitForIdle();\n+        SwingUtilities.invokeAndWait(f0::toFront);\n+\n+        if (!Platform.isOnWayland()) {\n+            Util.clickOnTitle(f0, robot);\n+        }\n","filename":"test\/jdk\/java\/awt\/Focus\/6981400\/Test1.java","additions":38,"deletions":19,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,2 @@\n-  @library   ..\/..\/regtesthelpers\n-  @build     Util\n+  @library \/java\/awt\/regtesthelpers \/test\/lib\n+  @build   Util jdk.test.lib.Platform\n@@ -34,2 +34,16 @@\n-import java.awt.*;\n-import java.awt.event.*;\n+import java.awt.AWTEvent;\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.KeyboardFocusManager;\n+import java.awt.Robot;\n+import java.awt.Toolkit;\n+import java.awt.Window;\n+import java.awt.event.AWTEventListener;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.WindowEvent;\n+\n+import jdk.test.lib.Platform;\n@@ -47,1 +61,1 @@\n-    public static void main(String[] args) {\n+    public static void main(String[] args) throws Exception {\n@@ -71,1 +85,1 @@\n-    public void start() {\n+    public void start() throws Exception {\n@@ -102,1 +116,6 @@\n-        Util.clickOnTitle(owner, robot);\n+        EventQueue.invokeAndWait(owner::toFront);\n+\n+        if (!Platform.isOnWayland()) {\n+            Util.clickOnTitle(owner, robot);\n+        }\n+\n@@ -120,0 +139,1 @@\n+        robot.delay(500);\n@@ -122,1 +142,1 @@\n-    void clickOnCheckFocus(Component c) {\n+    void clickOnCheckFocus(Component c) throws Exception {\n@@ -124,1 +144,4 @@\n-            Util.clickOnTitle((Frame)c, robot);\n+            EventQueue.invokeAndWait(() -> ((Frame) c).toFront());\n+            if (!Platform.isOnWayland()) {\n+                Util.clickOnTitle((Frame) c, robot);\n+            }\n","filename":"test\/jdk\/java\/awt\/Focus\/ActualFocusedWindowTest\/ActualFocusedWindowBlockingTest.java","additions":33,"deletions":10,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,2 @@\n-  test\n+  @test\n+  @key headful\n@@ -28,2 +29,1 @@\n-  @key headful\n-  @run main AutomaticAppletTest\n+  @run main ModalDialogInFocusEventTest\n@@ -71,0 +71,2 @@\n+    static boolean isOnWayland;\n+\n@@ -212,12 +214,15 @@\n-        System.out.println(\"click on title of \" + frame.getName());\n-        int[] point = new int[2];\n-        EventQueue.invokeAndWait(() -> {\n-            Point location = frame.getLocationOnScreen();\n-            Insets insets = frame.getInsets();\n-            int width = frame.getWidth();\n-            point[0] = location.x + width \/ 2;\n-            point[1] = location.y + insets.top \/ 2;\n-        });\n-        robot.mouseMove(point[0], point[1]);\n-        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n-        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        EventQueue.invokeAndWait(frame::toFront);\n+        if (!isOnWayland) {\n+            System.out.println(\"click on title of \" + frame.getName());\n+            int[] point = new int[2];\n+            EventQueue.invokeAndWait(() -> {\n+                Point location = frame.getLocationOnScreen();\n+                Insets insets = frame.getInsets();\n+                int width = frame.getWidth();\n+                point[0] = location.x + width \/ 2;\n+                point[1] = location.y + insets.top \/ 2;\n+            });\n+            robot.mouseMove(point[0], point[1]);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        }\n@@ -347,0 +352,1 @@\n+        isOnWayland = System.getenv(\"WAYLAND_DISPLAY\") != null;\n","filename":"test\/jdk\/java\/awt\/Focus\/ModalDialogInFocusEventTest.java","additions":22,"deletions":16,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,3 +24,23 @@\n-\n-import java.awt.*;\n-import java.awt.event.*;\n+import java.awt.Button;\n+import java.awt.Checkbox;\n+import java.awt.Choice;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Label;\n+import java.awt.List;\n+import java.awt.Panel;\n+import java.awt.Robot;\n+import java.awt.Scrollbar;\n+import java.awt.TextArea;\n+import java.awt.TextField;\n+import java.awt.event.HierarchyBoundsListener;\n+import java.awt.event.HierarchyEvent;\n+import java.awt.event.InputEvent;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n@@ -29,1 +49,2 @@\n-import java.io.*;\n+\n+import jdk.test.lib.Platform;\n@@ -40,1 +61,2 @@\n- * @build FrameBorderCounter\n+ * @library \/test\/lib\n+ * @build FrameBorderCounter jdk.test.lib.Platform\n@@ -140,1 +162,1 @@\n-        robot.mousePress(InputEvent.BUTTON1_MASK);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n@@ -142,1 +164,1 @@\n-        robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n@@ -180,15 +202,0 @@\n-        int x = (int) frame.getLocationOnScreen().x;\n-        int y = (int) frame.getLocationOnScreen().y;\n-        int w = frame.getSize().width;\n-        int h = frame.getSize().height;\n-\n-        robot.mouseMove(x + w + BORDER_SHIFT, y + h \/ 2);\n-        robot.delay(delay);\n-        robot.mousePress(InputEvent.BUTTON1_MASK);\n-        robot.delay(delay);\n-        for (int i = 0; i < 20; i++) {\n-            robot.mouseMove(x + w + i + BORDER_SHIFT, y + h \/ 2);\n-            robot.delay(50);\n-        }\n-        robot.delay(delay);\n-        robot.mouseRelease(InputEvent.BUTTON1_MASK);\n@@ -196,5 +203,28 @@\n-        if (! resizeTriggered) {\n-            synchronized (resizeLock) {\n-                try {\n-                    resizeLock.wait(delay * 10);\n-                } catch (Exception e) {\n+        int x;\n+        int y;\n+        int w;\n+        int h;\n+\n+        if (!Platform.isOnWayland()) {\n+            x = frame.getLocationOnScreen().x;\n+            y = frame.getLocationOnScreen().y;\n+            w = frame.getSize().width;\n+            h = frame.getSize().height;\n+\n+            robot.mouseMove(x + w + BORDER_SHIFT, y + h \/ 2);\n+            robot.delay(delay);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.delay(delay);\n+            for (int i = 0; i < 20; i++) {\n+                robot.mouseMove(x + w + i + BORDER_SHIFT, y + h \/ 2);\n+                robot.delay(50);\n+            }\n+            robot.delay(delay);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+            if (!resizeTriggered) {\n+                synchronized (resizeLock) {\n+                    try {\n+                        resizeLock.wait(delay * 10);\n+                    } catch (Exception e) {\n+                    }\n@@ -203,1 +233,0 @@\n-        }\n@@ -205,5 +234,10 @@\n-        for (int i = 0; i < components.length; i++) {\n-            if (! ancestorResized[i]) {\n-                System.err.println(\"FAIL: Frame resized using mouse action. \" +\n-                                   \"Ancestor resized event did not occur for \" +\n-                                   components[i].getClass());\n+            for (int i = 0; i < components.length; i++) {\n+                if (!ancestorResized[i]) {\n+                    System.err.println(\"FAIL: Frame resized using mouse action. \" +\n+                            \"Ancestor resized event did not occur for \" +\n+                            components[i].getClass());\n+                    passed = false;\n+                }\n+            }\n+            if (moveCount > 0) {\n+                System.err.println(\"FAIL: Ancestor moved event occurred when Frame resized using mouse\");\n@@ -212,4 +246,2 @@\n-        }\n-        if (moveCount > 0) {\n-            System.err.println(\"FAIL: Ancestor moved event occured when Frame resized using mouse\");\n-            passed = false;\n+\n+            resetValues();\n@@ -218,1 +250,0 @@\n-        resetValues();\n@@ -253,14 +284,0 @@\n-        x = (int) frame.getLocationOnScreen().x;\n-        y = (int) frame.getLocationOnScreen().y;\n-        w = frame.getSize().width;\n-        h = frame.getSize().height;\n-\n-        \/\/Click on the dummy frame so that the test frame loses focus. This is to workaround\n-        \/\/a bug in Linux AS.\n-        robot.mouseMove((int) dummy.getLocationOnScreen().x + dummy.getSize().width \/ 2,\n-                        (int) dummy.getLocationOnScreen().y + dummy.getSize().height \/ 2);\n-        robot.delay(delay);\n-        robot.mousePress(InputEvent.BUTTON1_MASK);\n-        robot.delay(delay);\n-        robot.mouseRelease(InputEvent.BUTTON1_MASK);\n-        robot.delay(delay);\n@@ -268,16 +285,33 @@\n-        robot.mouseMove(x + w \/ 2, y + 10);\n-        robot.delay(delay);\n-        robot.mousePress(InputEvent.BUTTON1_MASK);\n-        robot.delay(delay);\n-        for (int i = 1; i <= 20; i++) {\n-            robot.mouseMove(x + w \/ 2 + i, y + 10);\n-            robot.delay(50);\n-        }\n-        robot.delay(delay);\n-        robot.mouseRelease(InputEvent.BUTTON1_MASK);\n-\n-        if (! moveTriggered) {\n-            synchronized (moveLock) {\n-                try {\n-                    moveLock.wait(delay * 10);\n-                } catch (Exception e) {\n+        if (!Platform.isOnWayland()) {\n+            x = frame.getLocationOnScreen().x;\n+            y = frame.getLocationOnScreen().y;\n+            w = frame.getSize().width;\n+            h = frame.getSize().height;\n+\n+            \/\/Click on the dummy frame so that the test frame loses focus. This is to workaround\n+            \/\/a bug in Linux AS.\n+            robot.mouseMove((int) dummy.getLocationOnScreen().x + dummy.getSize().width \/ 2,\n+                            (int) dummy.getLocationOnScreen().y + dummy.getSize().height \/ 2);\n+            robot.delay(delay);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.delay(delay);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.delay(delay);\n+\n+            robot.mouseMove(x + w \/ 2, y + 10);\n+            robot.delay(delay);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.delay(delay);\n+            for (int i = 1; i <= 20; i++) {\n+                robot.mouseMove(x + w \/ 2 + i, y + 10);\n+                robot.delay(50);\n+            }\n+            robot.delay(delay);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+            if (! moveTriggered) {\n+                synchronized (moveLock) {\n+                    try {\n+                        moveLock.wait(delay * 10);\n+                    } catch (Exception e) {\n+                    }\n@@ -286,1 +320,0 @@\n-        }\n@@ -288,4 +321,9 @@\n-        for (int i = 0; i < components.length; i++) {\n-            if (! ancestorMoved[i]) {\n-                System.err.println(\"FAIL: Frame moved using mouse action. \" +\n-                                   \"Ancestor moved event did not occur for \" + components[i].getClass());\n+            for (int i = 0; i < components.length; i++) {\n+                if (! ancestorMoved[i]) {\n+                    System.err.println(\"FAIL: Frame moved using mouse action. \" +\n+                                       \"Ancestor moved event did not occur for \" + components[i].getClass());\n+                    passed = false;\n+                }\n+            }\n+            if (resizeCount > 0) {\n+                System.err.println(\"FAIL: Ancestor resized event occured when Frame moved using mouse\");\n@@ -295,4 +333,0 @@\n-        if (resizeCount > 0) {\n-            System.err.println(\"FAIL: Ancestor resized event occured when Frame moved using mouse\");\n-            passed = false;\n-        }\n@@ -453,1 +487,1 @@\n-    public static void main(String args[]) throws InterruptedException {\n+    public static void main(String[] args) throws InterruptedException {\n","filename":"test\/jdk\/java\/awt\/Mixing\/AWT_Mixing\/HierarchyBoundsListenerMixingTest.java","additions":113,"deletions":79,"binary":false,"changes":192,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -476,0 +476,9 @@\n+\n+    \/**\n+     * Checks if the current system is running on Wayland display server on Linux.\n+     *\n+     * @return {@code true} if the system is running on Wayland display server\n+     *\/\n+    public static boolean isOnWayland() {\n+        return System.getenv(\"WAYLAND_DISPLAY\") != null;\n+    }\n","filename":"test\/lib\/jdk\/test\/lib\/Platform.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"}]}