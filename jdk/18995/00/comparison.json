{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,2 +44,14 @@\n-import java.awt.*;\n-import java.awt.event.*;\n+import java.awt.AWTEvent;\n+import java.awt.AWTException;\n+import java.awt.Button;\n+import java.awt.Component;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Robot;\n+import java.awt.Toolkit;\n+import java.awt.event.AWTEventListener;\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.FocusListener;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.WindowEvent;\n@@ -49,1 +61,3 @@\n-import javax.swing.*;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+\n@@ -84,0 +98,1 @@\n+            robot.setAutoDelay(50);\n@@ -93,1 +108,1 @@\n-        f0.setBounds(0, 100, 400, 200);\n+        f0.setBounds(100, 100, 400, 200);\n@@ -96,1 +111,1 @@\n-        f1.setBounds(0, 400, 400, 200);\n+        f1.setBounds(100, 400, 400, 200);\n@@ -99,1 +114,1 @@\n-        f2.setBounds(0, 400, 400, 200);\n+        f2.setBounds(100, 400, 400, 200);\n@@ -118,0 +133,1 @@\n+        robot.delay(500);\n@@ -159,1 +175,0 @@\n-        robot.delay(50);\n@@ -161,1 +176,0 @@\n-        robot.delay(50);\n@@ -164,1 +178,0 @@\n-        robot.delay(50);\n@@ -166,1 +179,0 @@\n-        robot.delay(50);\n@@ -169,1 +181,0 @@\n-        robot.delay(50);\n@@ -172,1 +183,0 @@\n-        robot.delay(50);\n@@ -175,2 +185,5 @@\n-        robot.delay(50);\n-        Util.clickOnTitle(f0, robot);\n+        if (Util.isOnWayland()) {\n+            Util.clickOnComp(f0, robot);\n+        } else {\n+            Util.clickOnTitle(f0, robot);\n+        }\n","filename":"test\/jdk\/java\/awt\/Focus\/6981400\/Test1.java","additions":28,"deletions":15,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,2 +34,14 @@\n-import java.awt.*;\n-import java.awt.event.*;\n+import java.awt.AWTEvent;\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.KeyboardFocusManager;\n+import java.awt.Robot;\n+import java.awt.Toolkit;\n+import java.awt.Window;\n+import java.awt.event.AWTEventListener;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.WindowEvent;\n+\n@@ -102,1 +114,6 @@\n-        Util.clickOnTitle(owner, robot);\n+        if (Util.isOnWayland()) {\n+            Util.clickOnComp(owner, robot);\n+        } else {\n+            Util.clickOnTitle(owner, robot);\n+        }\n+\n@@ -120,0 +137,1 @@\n+        robot.delay(500);\n@@ -123,1 +141,1 @@\n-        if (c instanceof Frame) {\n+        if (c instanceof Frame && !Util.isOnWayland()) {\n","filename":"test\/jdk\/java\/awt\/Focus\/ActualFocusedWindowTest\/ActualFocusedWindowBlockingTest.java","additions":23,"deletions":5,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n-  test\n+  @test\n@@ -29,1 +29,1 @@\n-  @run main AutomaticAppletTest\n+  @run main ModalDialogInFocusEventTest\n@@ -71,0 +71,2 @@\n+    static boolean isOnWayland;\n+\n@@ -212,12 +214,16 @@\n-        System.out.println(\"click on title of \" + frame.getName());\n-        int[] point = new int[2];\n-        EventQueue.invokeAndWait(() -> {\n-            Point location = frame.getLocationOnScreen();\n-            Insets insets = frame.getInsets();\n-            int width = frame.getWidth();\n-            point[0] = location.x + width \/ 2;\n-            point[1] = location.y + insets.top \/ 2;\n-        });\n-        robot.mouseMove(point[0], point[1]);\n-        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n-        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        if (isOnWayland) {\n+            EventQueue.invokeAndWait(frame::toFront);\n+        } else {\n+            System.out.println(\"click on title of \" + frame.getName());\n+            int[] point = new int[2];\n+            EventQueue.invokeAndWait(() -> {\n+                Point location = frame.getLocationOnScreen();\n+                Insets insets = frame.getInsets();\n+                int width = frame.getWidth();\n+                point[0] = location.x + width \/ 2;\n+                point[1] = location.y + insets.top \/ 2;\n+            });\n+            robot.mouseMove(point[0], point[1]);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        }\n@@ -347,0 +353,1 @@\n+        isOnWayland = System.getenv(\"WAYLAND_DISPLAY\") != null;\n","filename":"test\/jdk\/java\/awt\/Focus\/ModalDialogInFocusEventTest.java","additions":22,"deletions":15,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,3 +24,23 @@\n-\n-import java.awt.*;\n-import java.awt.event.*;\n+import java.awt.Button;\n+import java.awt.Checkbox;\n+import java.awt.Choice;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Label;\n+import java.awt.List;\n+import java.awt.Panel;\n+import java.awt.Robot;\n+import java.awt.Scrollbar;\n+import java.awt.TextArea;\n+import java.awt.TextField;\n+import java.awt.event.HierarchyBoundsListener;\n+import java.awt.event.HierarchyEvent;\n+import java.awt.event.InputEvent;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n@@ -29,1 +49,0 @@\n-import java.io.*;\n@@ -140,1 +159,1 @@\n-        robot.mousePress(InputEvent.BUTTON1_MASK);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n@@ -142,1 +161,1 @@\n-        robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n@@ -180,4 +199,0 @@\n-        int x = (int) frame.getLocationOnScreen().x;\n-        int y = (int) frame.getLocationOnScreen().y;\n-        int w = frame.getSize().width;\n-        int h = frame.getSize().height;\n@@ -185,16 +200,28 @@\n-        robot.mouseMove(x + w + BORDER_SHIFT, y + h \/ 2);\n-        robot.delay(delay);\n-        robot.mousePress(InputEvent.BUTTON1_MASK);\n-        robot.delay(delay);\n-        for (int i = 0; i < 20; i++) {\n-            robot.mouseMove(x + w + i + BORDER_SHIFT, y + h \/ 2);\n-            robot.delay(50);\n-        }\n-        robot.delay(delay);\n-        robot.mouseRelease(InputEvent.BUTTON1_MASK);\n-\n-        if (! resizeTriggered) {\n-            synchronized (resizeLock) {\n-                try {\n-                    resizeLock.wait(delay * 10);\n-                } catch (Exception e) {\n+        int x;\n+        int y;\n+        int w;\n+        int h;\n+\n+        if (!isOnWayland) {\n+            x = frame.getLocationOnScreen().x;\n+            y = frame.getLocationOnScreen().y;\n+            w = frame.getSize().width;\n+            h = frame.getSize().height;\n+\n+            robot.mouseMove(x + w + BORDER_SHIFT, y + h \/ 2);\n+            robot.delay(delay);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.delay(delay);\n+            for (int i = 0; i < 20; i++) {\n+                robot.mouseMove(x + w + i + BORDER_SHIFT, y + h \/ 2);\n+                robot.delay(50);\n+            }\n+            robot.delay(delay);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+            if (!resizeTriggered) {\n+                synchronized (resizeLock) {\n+                    try {\n+                        resizeLock.wait(delay * 10);\n+                    } catch (Exception e) {\n+                    }\n@@ -203,1 +230,0 @@\n-        }\n@@ -205,5 +231,10 @@\n-        for (int i = 0; i < components.length; i++) {\n-            if (! ancestorResized[i]) {\n-                System.err.println(\"FAIL: Frame resized using mouse action. \" +\n-                                   \"Ancestor resized event did not occur for \" +\n-                                   components[i].getClass());\n+            for (int i = 0; i < components.length; i++) {\n+                if (!ancestorResized[i]) {\n+                    System.err.println(\"FAIL: Frame resized using mouse action. \" +\n+                            \"Ancestor resized event did not occur for \" +\n+                            components[i].getClass());\n+                    passed = false;\n+                }\n+            }\n+            if (moveCount > 0) {\n+                System.err.println(\"FAIL: Ancestor moved event occurred when Frame resized using mouse\");\n@@ -212,4 +243,2 @@\n-        }\n-        if (moveCount > 0) {\n-            System.err.println(\"FAIL: Ancestor moved event occured when Frame resized using mouse\");\n-            passed = false;\n+\n+            resetValues();\n@@ -218,1 +247,0 @@\n-        resetValues();\n@@ -253,25 +281,0 @@\n-        x = (int) frame.getLocationOnScreen().x;\n-        y = (int) frame.getLocationOnScreen().y;\n-        w = frame.getSize().width;\n-        h = frame.getSize().height;\n-\n-        \/\/Click on the dummy frame so that the test frame loses focus. This is to workaround\n-        \/\/a bug in Linux AS.\n-        robot.mouseMove((int) dummy.getLocationOnScreen().x + dummy.getSize().width \/ 2,\n-                        (int) dummy.getLocationOnScreen().y + dummy.getSize().height \/ 2);\n-        robot.delay(delay);\n-        robot.mousePress(InputEvent.BUTTON1_MASK);\n-        robot.delay(delay);\n-        robot.mouseRelease(InputEvent.BUTTON1_MASK);\n-        robot.delay(delay);\n-\n-        robot.mouseMove(x + w \/ 2, y + 10);\n-        robot.delay(delay);\n-        robot.mousePress(InputEvent.BUTTON1_MASK);\n-        robot.delay(delay);\n-        for (int i = 1; i <= 20; i++) {\n-            robot.mouseMove(x + w \/ 2 + i, y + 10);\n-            robot.delay(50);\n-        }\n-        robot.delay(delay);\n-        robot.mouseRelease(InputEvent.BUTTON1_MASK);\n@@ -279,5 +282,33 @@\n-        if (! moveTriggered) {\n-            synchronized (moveLock) {\n-                try {\n-                    moveLock.wait(delay * 10);\n-                } catch (Exception e) {\n+        if (!isOnWayland) {\n+            x = frame.getLocationOnScreen().x;\n+            y = frame.getLocationOnScreen().y;\n+            w = frame.getSize().width;\n+            h = frame.getSize().height;\n+\n+            \/\/Click on the dummy frame so that the test frame loses focus. This is to workaround\n+            \/\/a bug in Linux AS.\n+            robot.mouseMove((int) dummy.getLocationOnScreen().x + dummy.getSize().width \/ 2,\n+                            (int) dummy.getLocationOnScreen().y + dummy.getSize().height \/ 2);\n+            robot.delay(delay);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.delay(delay);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.delay(delay);\n+\n+            robot.mouseMove(x + w \/ 2, y + 10);\n+            robot.delay(delay);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.delay(delay);\n+            for (int i = 1; i <= 20; i++) {\n+                robot.mouseMove(x + w \/ 2 + i, y + 10);\n+                robot.delay(50);\n+            }\n+            robot.delay(delay);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+            if (! moveTriggered) {\n+                synchronized (moveLock) {\n+                    try {\n+                        moveLock.wait(delay * 10);\n+                    } catch (Exception e) {\n+                    }\n@@ -286,1 +317,0 @@\n-        }\n@@ -288,4 +318,9 @@\n-        for (int i = 0; i < components.length; i++) {\n-            if (! ancestorMoved[i]) {\n-                System.err.println(\"FAIL: Frame moved using mouse action. \" +\n-                                   \"Ancestor moved event did not occur for \" + components[i].getClass());\n+            for (int i = 0; i < components.length; i++) {\n+                if (! ancestorMoved[i]) {\n+                    System.err.println(\"FAIL: Frame moved using mouse action. \" +\n+                                       \"Ancestor moved event did not occur for \" + components[i].getClass());\n+                    passed = false;\n+                }\n+            }\n+            if (resizeCount > 0) {\n+                System.err.println(\"FAIL: Ancestor resized event occured when Frame moved using mouse\");\n@@ -295,4 +330,0 @@\n-        if (resizeCount > 0) {\n-            System.err.println(\"FAIL: Ancestor resized event occured when Frame moved using mouse\");\n-            passed = false;\n-        }\n@@ -448,0 +479,1 @@\n+    private static boolean isOnWayland;\n@@ -453,1 +485,2 @@\n-    public static void main(String args[]) throws InterruptedException {\n+    public static void main(String[] args) throws InterruptedException {\n+        isOnWayland = System.getenv(\"WAYLAND_DISPLAY\") != null;\n","filename":"test\/jdk\/java\/awt\/Mixing\/AWT_Mixing\/HierarchyBoundsListenerMixingTest.java","additions":111,"deletions":78,"binary":false,"changes":189,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -666,0 +666,9 @@\n+    \/**\n+     * Checks if the current system is running on Wayland display server on Linux.\n+     *\n+     * @return {@code true} if the system is running on Wayland display server\n+     *\/\n+    public static boolean isOnWayland() {\n+        return System.getenv(\"WAYLAND_DISPLAY\") != null;\n+    }\n+\n","filename":"test\/jdk\/java\/awt\/regtesthelpers\/Util.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"}]}