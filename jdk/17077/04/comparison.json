{"files":[{"patch":"@@ -61,1 +61,1 @@\n-G1ConcurrentRefineThreadControl::G1ConcurrentRefineThreadControl() :\n+G1ConcurrentRefineThreadControl::G1ConcurrentRefineThreadControl(uint max_num_threads) :\n@@ -63,2 +63,1 @@\n-  _threads(nullptr),\n-  _max_num_threads(0)\n+  _threads(max_num_threads)\n@@ -68,4 +67,3 @@\n-  if (_threads != nullptr) {\n-    for (uint i = 0; i < _max_num_threads; i++) {\n-      G1ConcurrentRefineThread* t = _threads[i];\n-      if (t == nullptr) {\n+  for (uint i = 0; i < max_num_threads(); i++) {\n+    G1ConcurrentRefineThread* t = _threads.at(i);\n+    if (t == nullptr) {\n@@ -73,7 +71,2 @@\n-        for (uint j = i + 1; j < _max_num_threads; ++j) {\n-          assert(_threads[j] == nullptr, \"invariant\");\n-        }\n-#endif \/\/ ASSERT\n-        break;\n-      } else {\n-        delete t;\n+      for (uint j = i + 1; j < max_num_threads(); ++j) {\n+        assert(_threads.at(j) == nullptr, \"invariant\");\n@@ -81,0 +74,4 @@\n+#endif \/\/ ASSERT\n+      break;\n+    } else {\n+      delete t;\n@@ -82,1 +79,0 @@\n-    FREE_C_HEAP_ARRAY(G1ConcurrentRefineThread*, _threads);\n@@ -86,1 +82,1 @@\n-jint G1ConcurrentRefineThreadControl::initialize(G1ConcurrentRefine* cr, uint max_num_threads) {\n+jint G1ConcurrentRefineThreadControl::initialize(G1ConcurrentRefine* cr) {\n@@ -89,4 +85,0 @@\n-  _max_num_threads = max_num_threads;\n-\n-  if (max_num_threads > 0) {\n-    _threads = NEW_C_HEAP_ARRAY(G1ConcurrentRefineThread*, max_num_threads, mtGC);\n@@ -94,2 +86,3 @@\n-    _threads[0] = create_refinement_thread(0, true);\n-    if (_threads[0] == nullptr) {\n+  if (max_num_threads() > 0) {\n+    _threads.append(create_refinement_thread(0, true));\n+    if (_threads.at(0) == nullptr) {\n@@ -101,2 +94,2 @@\n-      for (uint i = 1; i < max_num_threads; ++i) {\n-        _threads[i] = nullptr;\n+      for (uint i = 1; i < max_num_threads(); ++i) {\n+        _threads.append(nullptr);\n@@ -105,3 +98,3 @@\n-      for (uint i = 1; i < max_num_threads; ++i) {\n-        _threads[i] = create_refinement_thread(i, true);\n-        if (_threads[i] == nullptr) {\n+      for (uint i = 1; i < max_num_threads(); ++i) {\n+        _threads.append(create_refinement_thread(i, true));\n+        if (_threads.at(i) == nullptr) {\n@@ -120,2 +113,1 @@\n-  assert(_threads != nullptr, \"No threads\");\n-  assert(Thread::current() == _threads[0], \"Not primary thread\");\n+  assert(Thread::current() == _threads.at(0), \"Not primary thread\");\n@@ -126,2 +118,2 @@\n-  assert(worker_id < _max_num_threads, \"precondition\");\n-  G1ConcurrentRefineThread* thread_to_activate = _threads[worker_id];\n+  assert(worker_id < max_num_threads(), \"precondition\");\n+  G1ConcurrentRefineThread* thread_to_activate = _threads.at(worker_id);\n@@ -133,1 +125,1 @@\n-    _threads[worker_id] = thread_to_activate;\n+    _threads.at(worker_id) = thread_to_activate;\n@@ -140,3 +132,3 @@\n-  for (uint i = 0; i < _max_num_threads; i++) {\n-    if (_threads[i] != nullptr) {\n-      tc->do_thread(_threads[i]);\n+  for (uint i = 0; i < max_num_threads(); i++) {\n+    if (_threads.at(i) != nullptr) {\n+      tc->do_thread(_threads.at(i));\n@@ -148,3 +140,3 @@\n-  for (uint i = 0; i < _max_num_threads; i++) {\n-    if (_threads[i] != nullptr) {\n-      _threads[i]->stop();\n+  for (uint i = 0; i < max_num_threads(); i++) {\n+    if (_threads.at(i) != nullptr) {\n+      _threads.at(i)->stop();\n@@ -173,1 +165,1 @@\n-  _thread_control(),\n+  _thread_control(G1ConcRefinementThreads),\n@@ -178,1 +170,1 @@\n-  return _thread_control.initialize(this, G1ConcRefinementThreads);\n+  return _thread_control.initialize(this);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefine.cpp","additions":32,"deletions":40,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"utilities\/growableArray.hpp\"\n@@ -46,2 +47,1 @@\n-  G1ConcurrentRefineThread** _threads;\n-  uint _max_num_threads;\n+  GrowableArrayCHeap<G1ConcurrentRefineThread*, mtGC> _threads;\n@@ -56,1 +56,1 @@\n-  G1ConcurrentRefineThreadControl();\n+  G1ConcurrentRefineThreadControl(uint max_num_threads);\n@@ -59,1 +59,1 @@\n-  jint initialize(G1ConcurrentRefine* cr, uint max_num_threads);\n+  jint initialize(G1ConcurrentRefine* cr);\n@@ -63,1 +63,1 @@\n-  uint max_num_threads() const { return _max_num_threads; }\n+  uint max_num_threads() const { return _threads.capacity(); }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefine.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}