{"files":[{"patch":"@@ -67,11 +67,15 @@\n-  for (uint i = 0; i < max_num_threads(); i++) {\n-    G1ConcurrentRefineThread* t = _threads.at(i);\n-    if (t == nullptr) {\n-#ifdef ASSERT\n-      for (uint j = i + 1; j < max_num_threads(); ++j) {\n-        assert(_threads.at(j) == nullptr, \"invariant\");\n-      }\n-#endif \/\/ ASSERT\n-      break;\n-    } else {\n-      delete t;\n+  while (_threads.is_nonempty()) {\n+    delete _threads.pop();\n+  }\n+}\n+\n+bool G1ConcurrentRefineThreadControl::ensure_threads_created(uint worker_id, bool initializing) {\n+  assert(worker_id < max_num_threads(), \"precondition\");\n+\n+  while ((uint)_threads.length() <= worker_id) {\n+    G1ConcurrentRefineThread* rt = create_refinement_thread(_threads.length(), initializing);\n+    _threads.push(rt);\n+\n+    if (rt == nullptr) {\n+      _threads.pop();\n+      return false;\n@@ -80,0 +84,2 @@\n+\n+  return true;\n@@ -87,1 +93,1 @@\n-    _threads.append(create_refinement_thread(0, true));\n+    _threads.push(create_refinement_thread(0, true));\n@@ -93,11 +99,4 @@\n-    if (UseDynamicNumberOfGCThreads) {\n-      for (uint i = 1; i < max_num_threads(); ++i) {\n-        _threads.append(nullptr);\n-      }\n-    } else {\n-      for (uint i = 1; i < max_num_threads(); ++i) {\n-        _threads.append(create_refinement_thread(i, true));\n-        if (_threads.at(i) == nullptr) {\n-          vm_shutdown_during_initialization(\"Could not allocate refinement threads.\");\n-          return JNI_ENOMEM;\n-        }\n+    if (!UseDynamicNumberOfGCThreads) {\n+      if (!ensure_threads_created(max_num_threads() - 1, true)) {\n+        vm_shutdown_during_initialization(\"Could not allocate refinement threads\");\n+        return JNI_ENOMEM;\n@@ -118,8 +117,3 @@\n-  assert(worker_id < max_num_threads(), \"precondition\");\n-  G1ConcurrentRefineThread* thread_to_activate = _threads.at(worker_id);\n-  if (thread_to_activate == nullptr) {\n-    thread_to_activate = create_refinement_thread(worker_id, false);\n-    if (thread_to_activate == nullptr) {\n-      return false;\n-    }\n-    _threads.at(worker_id) = thread_to_activate;\n+  if (ensure_threads_created(worker_id, false)) {\n+    _threads.at(worker_id)->activate();\n+    return true;\n@@ -127,2 +121,2 @@\n-  thread_to_activate->activate();\n-  return true;\n+\n+  return false;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefine.cpp","additions":27,"deletions":33,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -74,0 +74,3 @@\n+\n+private:\n+  bool ensure_threads_created(uint worker_id, bool initializing);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefine.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}