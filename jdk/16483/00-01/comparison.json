{"files":[{"patch":"@@ -31,1 +31,0 @@\n-import java.net.URLConnection;\n@@ -43,1 +42,0 @@\n-import sun.net.www.protocol.file.FileURLConnection;\n@@ -135,3 +133,0 @@\n-            Path path = null;\n-            Exception pathError = null;\n-\n@@ -143,1 +138,27 @@\n-            \/\/ Try to interpret propFile as a Path (local)\n+            \/\/ Try to interpret propFile as a path\n+            Exception error;\n+            if ((error = loadExtraFromPath(propFile, mode)) == null) {\n+                return;\n+            }\n+\n+            \/\/ Try to interpret propFile as a file URL\n+            URI uri = new URI(propFile);\n+            if (\"file\".equalsIgnoreCase(uri.getScheme()) &&\n+                    (error = loadExtraFromFileUrl(uri, mode)) == null) {\n+                return;\n+            }\n+\n+            \/\/ Try to interpret propFile as a URL\n+            URL url;\n+            try {\n+                url = uri.toURL();\n+            } catch (IllegalArgumentException ignore) {\n+                \/\/ URL has no scheme: previous error is more accurate\n+                throw error;\n+            }\n+            loadFromUrl(url, mode);\n+        }\n+\n+        private static Exception loadExtraFromPath(String propFile,\n+                LoadingMode mode) throws Exception {\n+            Path path;\n@@ -147,1 +168,1 @@\n-                    pathError = new FileNotFoundException(propFile);\n+                    return new FileNotFoundException(propFile);\n@@ -150,1 +171,1 @@\n-                pathError = e;\n+                return e;\n@@ -152,0 +173,3 @@\n+            loadFromPath(path, mode);\n+            return null;\n+        }\n@@ -153,12 +177,8 @@\n-            if (pathError == null) {\n-                loadFromPath(path, mode);\n-            } else {\n-                \/\/ Try to interpret propFile as a URL (local or remote)\n-                URL url;\n-                try {\n-                    url = new URI(propFile).toURL();\n-                } catch (IllegalArgumentException ignore) {\n-                    \/\/ URL has no scheme: pathError is more accurate\n-                    throw pathError;\n-                }\n-                loadFromUrl(url, mode);\n+\n+        private static Exception loadExtraFromFileUrl(URI uri, LoadingMode mode)\n+                throws Exception {\n+            Path path;\n+            try {\n+                path = Path.of(uri);\n+            } catch (Exception e) {\n+                return e;\n@@ -166,0 +186,2 @@\n+            loadFromPath(path, mode);\n+            return null;\n@@ -240,11 +262,5 @@\n-            URLConnection connection = url.openConnection();\n-            if (connection instanceof FileURLConnection fileConnection) {\n-                \/\/ A local file URL can be interpreted as a Path\n-                loadFromPath(fileConnection.getFile().toPath(), mode);\n-            } else {\n-                try (InputStream is = connection.getInputStream()) {\n-                    reset(mode);\n-                    debugLoad(true, url);\n-                    props.load(is);\n-                    debugLoad(false, url);\n-                }\n+            try (InputStream is = url.openStream()) {\n+                reset(mode);\n+                debugLoad(true, url);\n+                props.load(is);\n+                debugLoad(false, url);\n","filename":"src\/java.base\/share\/classes\/java\/security\/Security.java","additions":47,"deletions":31,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -138,4 +138,0 @@\n-    public File getFile() {\n-        return file;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/file\/FileURLConnection.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"}]}