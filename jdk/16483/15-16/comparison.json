{"files":[{"patch":"@@ -114,0 +114,4 @@\n+        static boolean isInclude(String key) {\n+            return \"include\".equals(key);\n+        }\n+\n@@ -218,1 +222,1 @@\n-                                \"include\".equals(strKey)) {\n+                                isInclude(strKey)) {\n@@ -895,0 +899,3 @@\n+        if (SecPropLoader.isInclude(key)) {\n+            return;\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/security\/Security.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.util.function.UnaryOperator;\n@@ -55,1 +56,1 @@\n-        return expand(value, false, true);\n+        return expand(value, false);\n@@ -60,1 +61,1 @@\n-        return expand(value, encodeURL, true);\n+        return expand(value, encodeURL, System::getProperty);\n@@ -68,1 +69,1 @@\n-            return expand(value, false, false);\n+            return expand(value, false, key -> System.getProperty(key, \"\"));\n@@ -78,1 +79,1 @@\n-            boolean strict) throws ExpandException {\n+            UnaryOperator<String> propertiesGetter) throws ExpandException {\n@@ -124,1 +125,1 @@\n-                    String val = System.getProperty(prop);\n+                    String val = propertiesGetter.apply(prop);\n@@ -139,1 +140,1 @@\n-                    } else if (strict) {\n+                    } else {\n@@ -141,1 +142,2 @@\n-                                \"unable to expand property \" + prop);\n+                                             \"unable to expand property \" +\n+                                             prop);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/PropertyExpander.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -90,0 +90,1 @@\n+            assertTestSecuritySetPropertyShouldNotInclude();\n@@ -328,0 +329,28 @@\n+    static final String SECURITY_SET_PROP_FILE_PATH =\n+            \"testSecuritySetPropertyShouldNotInclude.propsFilePath\";\n+\n+    static void testSecuritySetPropertyShouldNotInclude(Executor ex,\n+            FilesManager filesMgr) throws Exception {\n+        PropsFile masterFile = filesMgr.newMasterFile();\n+        PropsFile file0 = filesMgr.newFile(\"file0.properties\");\n+\n+        ex.addSystemProp(SECURITY_SET_PROP_FILE_PATH, file0.path.toString());\n+        ex.setMasterFile(masterFile);\n+        ex.assertSuccess();\n+    }\n+\n+    static void assertTestSecuritySetPropertyShouldNotInclude() {\n+        \/\/ This check is executed by the launched JVM.\n+        String propsFilePath = System.getProperty(SECURITY_SET_PROP_FILE_PATH);\n+        if (propsFilePath != null) {\n+            String name = Path.of(propsFilePath).getFileName().toString();\n+            Security.setProperty(\"include\", propsFilePath);\n+            if (FilesManager.APPLIED_PROP_VALUE.equals(\n+                    Security.getProperty(name))) {\n+                throw new RuntimeException(\"Security.setProperty\" +\n+                        \"(\\\"include\\\", \\\"\" + propsFilePath + \"\\\") \" +\n+                        \"has issued a file inclusion\");\n+            }\n+        }\n+    }\n+\n@@ -764,0 +793,4 @@\n+    void addSystemProp(String key, String value) {\n+        systemProps.put(key, value);\n+    }\n+\n@@ -765,1 +798,1 @@\n-        systemProps.put(JAVA_SEC_PROPS, (overrideAll ? \"=\" : \"\") + extraFile);\n+        addSystemProp(JAVA_SEC_PROPS, (overrideAll ? \"=\" : \"\") + extraFile);\n","filename":"test\/jdk\/java\/security\/Security\/ConfigFileTest.java","additions":34,"deletions":1,"binary":false,"changes":35,"status":"modified"}]}