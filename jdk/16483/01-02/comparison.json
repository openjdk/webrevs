{"files":[{"patch":"@@ -28,1 +28,3 @@\n-import java.io.*;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n@@ -34,1 +36,11 @@\n-import java.util.*;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.HashSet;\n+import java.util.Hashtable;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n@@ -38,0 +50,1 @@\n+import jdk.internal.access.SharedSecrets;\n@@ -40,1 +53,0 @@\n-import jdk.internal.access.SharedSecrets;\n@@ -42,0 +54,3 @@\n+import sun.security.jca.GetInstance;\n+import sun.security.jca.ProviderList;\n+import sun.security.jca.Providers;\n@@ -45,2 +60,0 @@\n-import sun.security.jca.*;\n-\n","filename":"src\/java.base\/share\/classes\/java\/security\/Security.java","additions":18,"deletions":5,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -428,0 +428,1 @@\n+            oa.shouldContain(\"finished processing \" + include.propsFile.path);\n@@ -512,1 +513,1 @@\n-        httpServer.createContext(\"\/\", this::handeRequest);\n+        httpServer.createContext(\"\/\", this::handleRequest);\n@@ -543,1 +544,1 @@\n-    private void handeRequest(HttpExchange x) throws IOException {\n+    private void handleRequest(HttpExchange x) throws IOException {\n@@ -751,1 +752,17 @@\n-        PropsFile lastFile = null;\n+\n+        \/\/ Ensure every file was processed by checking a unique property used as\n+        \/\/ a flag. Each file defines <fileName>=applied.\n+        \/\/\n+        \/\/ For example:\n+        \/\/\n+        \/\/   file0\n+        \/\/   ---------------\n+        \/\/   file0=applied\n+        \/\/   include file1\n+        \/\/\n+        \/\/   file1\n+        \/\/   ---------------\n+        \/\/   file1=applied\n+        \/\/\n+        \/\/ The assertion would be file0 == applied AND file1 == applied.\n+        \/\/\n@@ -754,1 +771,0 @@\n-            lastFile = extraPropsFile.getLastFile();\n@@ -757,0 +773,2 @@\n+            \/\/ When overriding with an extra file, check that neither\n+            \/\/ the master file nor its includes are visible.\n@@ -763,3 +781,19 @@\n-        if (lastFile == null) {\n-            lastFile = masterPropsFile.getLastFile();\n-        }\n+\n+        \/\/ Ensure the last included file overwrote a fixed property. Each file\n+        \/\/ defines last-file=<fileName>.\n+        \/\/\n+        \/\/ For example:\n+        \/\/\n+        \/\/   file0\n+        \/\/   ---------------\n+        \/\/   last-file=file0\n+        \/\/   include file1\n+        \/\/\n+        \/\/   file1\n+        \/\/   ---------------\n+        \/\/   last-file=file1\n+        \/\/\n+        \/\/ The assertion would be last-file == file1.\n+        \/\/\n+        PropsFile lastFile = (extraPropsFile == null ?\n+                masterPropsFile : extraPropsFile).getLastFile();\n","filename":"test\/jdk\/java\/security\/Security\/ConfigFileTest.java","additions":41,"deletions":7,"binary":false,"changes":48,"status":"modified"}]}