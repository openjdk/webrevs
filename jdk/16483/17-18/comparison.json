{"files":[{"patch":"@@ -83,1 +83,11 @@\n-    private static Properties props;\n+    private static final Properties props = new Properties() {\n+        @Override\n+        public synchronized Object put(Object key, Object val) {\n+            if (key instanceof String strKey && val instanceof String strVal &&\n+                    SecPropLoader.isInclude(strKey)) {\n+                SecPropLoader.loadInclude(strVal);\n+                return null;\n+            }\n+            return super.put(key, val);\n+        }\n+    };\n@@ -118,0 +128,9 @@\n+        static void checkReservedKey(String key)\n+                throws IllegalArgumentException {\n+            if (isInclude(key)) {\n+                throw new IllegalArgumentException(\"Key '\" + key +\n+                        \"' is reserved and cannot be used as a \" +\n+                        \"Security property name.\");\n+            }\n+        }\n+\n@@ -121,1 +140,1 @@\n-                        \"security\", \"java.security\"), LoadingMode.OVERRIDE);\n+                        \"security\", \"java.security\"), LoadingMode.APPEND);\n@@ -213,1 +232,1 @@\n-                if (sdebug != null && props != null) {\n+                if (sdebug != null) {\n@@ -217,12 +236,1 @@\n-                props = new Properties() {\n-                    @Override\n-                    public synchronized Object put(Object key, Object val) {\n-                        if (key instanceof String strKey &&\n-                                val instanceof String strVal &&\n-                                isInclude(strKey)) {\n-                            loadInclude(strVal);\n-                            return null;\n-                        }\n-                        return super.put(key, val);\n-                    }\n-                };\n+                props.clear();\n@@ -232,1 +240,1 @@\n-        private static void loadInclude(String propFile) {\n+        static void loadInclude(String propFile) {\n@@ -859,0 +867,2 @@\n+     * @throws  IllegalArgumentException if key is reserved and cannot be\n+     *          used as a Security property name.\n@@ -864,6 +874,2 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(new SecurityPermission(\"getProperty.\"+\n-                                                      key));\n-        }\n+        SecPropLoader.checkReservedKey(key);\n+        check(\"getProperty.\" + key);\n@@ -901,4 +907,1 @@\n-        if (SecPropLoader.isInclude(key)) {\n-            throw new IllegalArgumentException(\"Key '\" + key + \"' is reserved\" +\n-                    \" and cannot be used as a Security property name.\");\n-        }\n+        SecPropLoader.checkReservedKey(key);\n","filename":"src\/java.base\/share\/classes\/java\/security\/Security.java","additions":29,"deletions":26,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-            throw new RuntimeException(\"unexpected expansion error: when \" +\n+            throw new AssertionError(\"unexpected expansion error: when \" +\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/PropertyExpander.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,7 +32,7 @@\n-# The special \"include\" property can be defined one or multiple times in\n-# this file with a filesystem path value. The effect of each definition\n-# is to include a referred security properties file inline, adding all\n-# its properties. Security properties defined before an include statement\n-# may be overridden by properties in the included file, if their names\n-# match. Conversely, properties defined after an include statement may\n-# override properties in the included file.\n+# The special \"include\" property can be defined one or multiple times with\n+# a filesystem path value. The effect of each definition is to include a\n+# referred security properties file inline, adding all its properties.\n+# Security properties defined before an include statement may be overridden\n+# by properties in the included file, if their names match. Conversely,\n+# properties defined after an include statement may override properties in\n+# the included file.\n","filename":"src\/java.base\/share\/conf\/security\/java.security","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -352,2 +352,1 @@\n-                        \"expected to throw an IllegalArgumentException \" +\n-                        \"exception.\");\n+                        \"expected to throw IllegalArgumentException.\");\n@@ -360,0 +359,5 @@\n+            try {\n+                Security.getProperty(\"include\");\n+                throw new RuntimeException(\"Security.getProperty(\\\"include\\\")\" +\n+                        \" was expected to throw IllegalArgumentException.\");\n+            } catch (IllegalArgumentException expected) {}\n","filename":"test\/jdk\/java\/security\/Security\/ConfigFileTest.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"}]}