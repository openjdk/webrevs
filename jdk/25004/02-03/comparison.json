{"files":[{"patch":"@@ -686,1 +686,1 @@\n-     * Any direct {@link List#subList(int, int) subList} or {@link List#reversed()} views\n+     * Any {@link List#subList(int, int) subList} or {@link List#reversed()} views\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StableValue.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,1 +50,0 @@\n-import jdk.internal.util.NullableKeyValueHolder;\n@@ -517,1 +516,1 @@\n-        private boolean allowNulls() {\n+        boolean allowNulls() {\n@@ -884,1 +883,1 @@\n-            return StableUtil.renderElements(this, \"StableList\", delegates);\n+            return StableUtil.renderElements(this, \"StableCollection\", delegates);\n@@ -915,0 +914,5 @@\n+            @Override\n+            boolean allowNulls() {\n+                return true;\n+            }\n+\n@@ -1660,1 +1664,1 @@\n-                return StableUtil.renderMappings(this, \"StableSet\", delegateEntrySet, false);\n+                return StableUtil.renderMappings(this, \"StableCollection\", delegateEntrySet, false);\n@@ -1690,2 +1694,2 @@\n-                    return new NullableKeyValueHolder<>(k, inner.getValue().orElseSet(new Supplier<V>() {\n-                        @Override public V get() { return outer.outer.mapper.apply(k); }}));\n+                    return new StableEntry<>(k, inner.getValue(), new Supplier<V>() {\n+                        @Override public V get() { return outer.outer.mapper.apply(k); }});\n@@ -1701,2 +1705,2 @@\n-                                    action.accept(new NullableKeyValueHolder<>(k, inner.getValue().orElseSet(new Supplier<V>() {\n-                                        @Override public V get() { return outer.outer.mapper.apply(k); }})));\n+                                    action.accept(new StableEntry<>(k, inner.getValue(), new Supplier<V>() {\n+                                        @Override public V get() { return outer.outer.mapper.apply(k); }}));\n@@ -1709,1 +1713,1 @@\n-                static private <K, V> LazyMapIterator<K, V> of(StableMapEntrySet<K, V> outer) {\n+                private static  <K, V> LazyMapIterator<K, V> of(StableMapEntrySet<K, V> outer) {\n@@ -1716,0 +1720,18 @@\n+        private record StableEntry<K, V>(K getKey, \/\/ trick\n+                                         StableValueImpl<V> stableValue,\n+                                         Supplier<? extends V> supplier) implements Map.Entry<K, V> {\n+\n+            @Override public V setValue(V value) { throw uoe(); }\n+            @Override public V getValue() { return stableValue.orElseSet(supplier); }\n+            @Override public int hashCode() { return hash(getKey()) ^ hash(getValue()); }\n+            @Override public String toString() { return getKey() + \"=\" + stableValue.toString(); }\n+            @Override public boolean equals(Object o) {\n+                return o instanceof Map.Entry<?, ?> e\n+                        && Objects.equals(getKey(), e.getKey())\n+                        \/\/ Invoke `getValue()` as late as possible to avoid evaluation\n+                        && Objects.equals(getValue(), e.getValue());\n+            }\n+\n+            private int hash(Object obj) { return (obj == null) ? 0 : obj.hashCode(); }\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/ImmutableCollections.java","additions":31,"deletions":9,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -70,1 +70,0 @@\n-        final StableValueImpl<R> delegate;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/lang\/stable\/StableEnumFunction.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-    \/\/ Used to indicate a holder value is `null` (see field `value` below)\n+    \/\/ Used to indicate a holder value is `null` (see field `contents` below)\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/lang\/stable\/StableValueImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -318,0 +318,17 @@\n+    @Test\n+    void indexOfNullInViews() {\n+        final int size = 5;\n+        final int middle = 2;\n+        viewOperations().forEach(op0 -> {\n+            viewOperations().forEach( op1 -> {\n+                viewOperations().forEach(op2 -> {\n+                    var list = StableValue.list(size, x -> x == middle ? null : x);;\n+                    var view1 = op0.apply(list);\n+                    var view2 = op1.apply(view1);\n+                    var view3 = op2.apply(view2);\n+                    assertEquals(middle, view3.indexOf(null));\n+                });\n+            });\n+        });\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/StableValue\/StableListTest.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -251,0 +251,31 @@\n+    @Test\n+    void stableEntry() {\n+        var map = newMap();\n+        var entry = map.entrySet().stream()\n+                .filter(e -> e.getKey().equals(KEY))\n+                .findAny()\n+                .orElseThrow();\n+\n+        assertEquals(KEY + \"=.unset\", entry.toString());\n+        var otherDifferent = Map.entry(-1, -1);\n+        assertNotEquals(entry, otherDifferent);\n+        assertEquals(KEY + \"=.unset\", entry.toString());\n+        var otherEqual = Map.entry(KEY, KEY);\n+        assertEquals(entry, otherEqual);\n+        assertEquals(KEY + \"=\" + KEY, entry.toString());\n+        assertEquals(entry.hashCode(), otherEqual.hashCode());\n+    }\n+\n+    @Test\n+    void stableForEachEntry() {\n+        var map = newMap();\n+        \/\/ Only touch the key.\n+        map.entrySet().iterator().forEachRemaining(Map.Entry::getKey);\n+        map.entrySet().iterator()\n+                .forEachRemaining(e -> assertTrue(e.toString().contains(\".unset\")));\n+        \/\/ Only touch the value.\n+        map.entrySet().iterator().forEachRemaining(Map.Entry::getValue);\n+        map.entrySet().iterator()\n+                .forEachRemaining(e -> assertFalse(e.toString().contains(\".unset\")));\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/StableValue\/StableMapTest.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"modified"}]}