{"files":[{"patch":"@@ -28,0 +28,1 @@\n+ * @modules java.base\/java.util.concurrent:open\n@@ -32,0 +33,1 @@\n+import java.util.concurrent.BlockingQueue;\n@@ -33,0 +35,1 @@\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n@@ -36,0 +39,1 @@\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -38,0 +42,14 @@\n+    static final BlockingQueue<Runnable> delayerQueue;\n+    static {\n+        try {\n+            var delayerClass = Class.forName(\"java.util.concurrent.CompletableFuture$Delayer\",\n+                                             true,\n+                                             CompletableFuture.class.getClassLoader());\n+            var delayerField = delayerClass.getDeclaredField(\"delayer\");\n+            delayerField.setAccessible(true);\n+            delayerQueue = ((ScheduledThreadPoolExecutor)delayerField.get(null)).getQueue();\n+        } catch (Throwable t) {\n+            throw new ExceptionInInitializerError(t);\n+        }\n+    }\n+\n@@ -42,7 +60,8 @@\n-    void testOrTimeoutWithCompleteExceptionallyDoesNotLeak() {\n-        var count = 0L;\n-        while (count++ < 2_000_000) {\n-            new CompletableFuture<>()\n-            .orTimeout(12, TimeUnit.HOURS)\n-            .completeExceptionally(new RuntimeException(\"This is fine\"));\n-        }\n+    void testOrTimeoutWithCompleteExceptionallyDoesNotLeak() throws InterruptedException {\n+        assertTrue(delayerQueue.peek() == null);\n+        var future = new CompletableFuture<>().orTimeout(12, TimeUnit.HOURS);\n+        assertTrue(delayerQueue.peek() != null);\n+        future.completeExceptionally(new RuntimeException(\"This is fine\"));\n+        while (delayerQueue.peek() != null) {\n+            Thread.sleep(100);\n+        };\n@@ -55,7 +74,8 @@\n-    void testCompleteOnTimeoutWithCompleteExceptionallyDoesNotLeak() {\n-        var count = 0L;\n-        while (count++ < 2_000_000) {\n-            new CompletableFuture<>()\n-            .completeOnTimeout(null, 12, TimeUnit.HOURS)\n-            .completeExceptionally(new RuntimeException(\"This is fine\"));\n-        }\n+    void testCompleteOnTimeoutWithCompleteExceptionallyDoesNotLeak() throws InterruptedException {\n+        assertTrue(delayerQueue.peek() == null);\n+        var future = new CompletableFuture<>().completeOnTimeout(null, 12, TimeUnit.HOURS);\n+        assertTrue(delayerQueue.peek() != null);\n+        future.completeExceptionally(new RuntimeException(\"This is fine\"));\n+        while (delayerQueue.peek() != null) {\n+            Thread.sleep(100);\n+        };\n","filename":"test\/jdk\/java\/util\/concurrent\/CompletableFuture\/CompletableFutureOrTimeoutExceptionallyTest.java","additions":34,"deletions":14,"binary":false,"changes":48,"status":"modified"}]}