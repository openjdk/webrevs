{"files":[{"patch":"@@ -42,0 +42,1 @@\n+import java.awt.Component;\n@@ -43,0 +44,1 @@\n+import java.awt.IllegalComponentStateException;\n@@ -46,0 +48,3 @@\n+import java.util.concurrent.FutureTask;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n@@ -67,2 +72,0 @@\n-            robot.waitForIdle();\n-            robot.delay(500);\n@@ -70,3 +73,0 @@\n-\n-            robot.waitForIdle();\n-            robot.delay(500);\n@@ -79,0 +79,26 @@\n+    public static void waitTillShown(final Component component, long msTimeout)\n+            throws InterruptedException, TimeoutException {\n+        long startTime = System.currentTimeMillis();\n+\n+        while (true) {\n+            try {\n+                Thread.sleep(50);\n+                component.getLocationOnScreen();\n+                break;\n+            } catch (IllegalComponentStateException e) {\n+                if (System.currentTimeMillis() - startTime > msTimeout) {\n+                    throw new TimeoutException(\"Component not shown within the specified timeout\");\n+                }\n+            }\n+        }\n+    }\n+\n+    static Point waitAndGetLocationOnEDT(Component component) throws Exception {\n+        waitTillShown(component, 500);\n+        robot.waitForIdle();\n+\n+        FutureTask<Point> task = new FutureTask<>(component::getLocationOnScreen);\n+        SwingUtilities.invokeLater(task);\n+        return task.get(500, TimeUnit.MILLISECONDS);\n+    }\n+\n@@ -80,1 +106,1 @@\n-        Point frameLocation = frame.getLocationOnScreen();\n+        Point frameLocation = waitAndGetLocationOnEDT(frame);\n@@ -87,4 +113,1 @@\n-        robot.waitForIdle();\n-        robot.delay(100);\n-\n-        Point menuLocation = menuWithFocusableItem.getLocationOnScreen();\n+        Point menuLocation = waitAndGetLocationOnEDT(menuWithFocusableItem);\n@@ -92,0 +115,2 @@\n+\n+        \/\/ give popup some time to disappear (in case of failure)\n@@ -95,7 +120,5 @@\n-        SwingUtilities.invokeAndWait(() -> {\n-            boolean visible = popupMenu.isVisible();\n-            popupMenu.setVisible(false);\n-            if (!visible) {\n-                throw new RuntimeException(\"Popup is not visible\");\n-            }\n-        });\n+        try {\n+            waitTillShown(popupMenu, 500);\n+        } catch (TimeoutException e) {\n+            throw new RuntimeException(\"The popupMenu disappeared when it shouldn't have.\");\n+        }\n@@ -105,1 +128,1 @@\n-        Point frameLocation = frame.getLocationOnScreen();\n+        Point frameLocation = waitAndGetLocationOnEDT(frame);\n@@ -112,4 +135,1 @@\n-        robot.waitForIdle();\n-        robot.delay(100);\n-\n-        Point menuLocation = menuWithFocusableItem.getLocationOnScreen();\n+        Point menuLocation = waitAndGetLocationOnEDT(menuWithFocusableItem);\n@@ -120,1 +140,1 @@\n-        menuLocation = menuWithNonFocusableItem.getLocationOnScreen();\n+        menuLocation = waitAndGetLocationOnEDT(menuWithNonFocusableItem);\n@@ -122,0 +142,2 @@\n+\n+        \/\/ give popup some time to disappear (in case of failure)\n@@ -125,7 +147,5 @@\n-        SwingUtilities.invokeAndWait(() -> {\n-            boolean visible = popupMenu.isVisible();\n-            popupMenu.setVisible(false);\n-            if (!visible) {\n-                throw new RuntimeException(\"Popup is not visible\");\n-            }\n-        });\n+        try {\n+            waitTillShown(popupMenu, 500);\n+        } catch (TimeoutException e) {\n+            throw new RuntimeException(\"The popupMenu disappeared when it shouldn't have.\");\n+        }\n","filename":"test\/jdk\/javax\/swing\/JPopupMenu\/NestedFocusablePopupTest.java","additions":50,"deletions":30,"binary":false,"changes":80,"status":"modified"}]}