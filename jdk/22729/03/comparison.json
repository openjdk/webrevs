{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,0 @@\n-import java.util.Arrays;\n@@ -524,0 +523,14 @@\n+    private static boolean containsWaylandWindowFocusListener(Window window) {\n+        if (window == null) {\n+            return false;\n+        }\n+\n+        for (WindowFocusListener focusListener : window.getWindowFocusListeners()) {\n+            if (focusListener == waylandWindowFocusListener) {\n+                return true;\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n@@ -533,1 +546,1 @@\n-                    \/\/ and the popup window itself.\n+                    \/\/ and the popup window itself or its children.\n@@ -536,1 +549,1 @@\n-                        if (window == oppositeWindow.getParent() ) {\n+                        if (containsWaylandWindowFocusListener(oppositeWindow.getOwner())) {\n@@ -540,0 +553,9 @@\n+\n+                        Window owner = window.getOwner();\n+                        while (owner != null) {\n+                            if (owner == oppositeWindow) {\n+                                return;\n+                            }\n+                            owner = owner.getOwner();\n+                        }\n+\n@@ -560,4 +582,1 @@\n-        if (!Arrays\n-                .asList(window.getWindowFocusListeners())\n-                .contains(waylandWindowFocusListener)\n-        ) {\n+        if (!containsWaylandWindowFocusListener(window)) {\n@@ -565,0 +584,3 @@\n+            for (Window ownedWindow : window.getOwnedWindows()) {\n+                addWaylandWindowFocusListenerToWindow(ownedWindow);\n+            }\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/UNIXToolkit.java","additions":30,"deletions":8,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n-  * @bug 8319103\n+  * @bug 8319103 8342096\n@@ -29,2 +29,2 @@\n-  * @library \/java\/awt\/regtesthelpers\n-  * @build PassFailJFrame\n+  * @library \/java\/awt\/regtesthelpers \/test\/lib\n+  * @build PassFailJFrame jtreg.SkippedException\n@@ -38,0 +38,2 @@\n+import javax.swing.JMenu;\n+import javax.swing.JMenuItem;\n@@ -43,0 +45,2 @@\n+import jtreg.SkippedException;\n+\n@@ -50,2 +54,3 @@\n-            If the JTextField popup with \"Some text\" is not showing on the screen,\n-            click Fail.\n+            A menu should appear next to the window. If you move the cursor over\n+            the first menu, the JTextField popup should appear on the screen.\n+            If it doesn't, click Fail.\n@@ -57,1 +62,1 @@\n-            on the screen.\n+            on the screen, move the mouse pointer over the menu.\n@@ -60,1 +65,8 @@\n-            If the popup has disappeared, click Pass, otherwise click Fail.\n+            If the popup does not disappear, click Fail.\n+\n+            Open the menu again, move the mouse cursor over the following:\n+            \"Focusable 1\" -> \"Focusable 2\" -> \"Editor Focusable 2\"\n+            Move the mouse to the focusable system window\n+            (keeping the \"Editor Focusable 2\" JTextField open) and click on it.\n+\n+            If the popup does not disappear, click Fail, otherwise click Pass.\n@@ -65,2 +77,1 @@\n-            \/\/test is valid only when running on Wayland.\n-            return;\n+            throw new SkippedException(\"XWayland only test\");\n@@ -72,1 +83,0 @@\n-                .rows(20)\n@@ -79,0 +89,9 @@\n+    static JMenu getMenuWithMenuItem(boolean isSubmenuItemFocusable, String text) {\n+        JMenu menu = new JMenu(text);\n+        menu.add(isSubmenuItemFocusable\n+                ? new JTextField(\"Editor \" + text, 11)\n+                : new JMenuItem(\"Menu item\" + text)\n+        );\n+        return menu;\n+    }\n+\n@@ -86,2 +105,10 @@\n-            JTextField textField = new JTextField(\"Some text\", 10);\n-            popupMenu.add(textField);\n+\n+            JMenu menu1 = new JMenu(\"Menu 1\");\n+            menu1.add(new JTextField(\"Some text\", 10));\n+            JMenu menu2 = new JMenu(\"Menu 2\");\n+            menu2.add(new JTextField(\"Some text\", 10));\n+\n+            popupMenu.add(getMenuWithMenuItem(true, \"Focusable 1\"));\n+            popupMenu.add(getMenuWithMenuItem(true, \"Focusable 2\"));\n+            popupMenu.add(getMenuWithMenuItem(false, \"Non-Focusable 1\"));\n+            popupMenu.add(getMenuWithMenuItem(false, \"Non-Focusable 2\"));\n","filename":"test\/jdk\/javax\/swing\/JPopupMenu\/FocusablePopupDismissTest.java","additions":40,"deletions":13,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -0,0 +1,184 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary tests if nested menu is displayed on Wayland\n+ * @requires (os.family == \"linux\")\n+ * @key headful\n+ * @bug 8342096\n+ * @library \/test\/lib\n+ * @build jtreg.SkippedException\n+ * @run main NestedFocusablePopupTest\n+ *\/\n+\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuItem;\n+import javax.swing.JPanel;\n+import javax.swing.JPopupMenu;\n+import javax.swing.SwingUtilities;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.IllegalComponentStateException;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.util.concurrent.FutureTask;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import jtreg.SkippedException;\n+\n+public class NestedFocusablePopupTest {\n+\n+    static volatile JMenu menuWithFocusableItem;\n+    static volatile JMenu menuWithNonFocusableItem;\n+    static volatile JPopupMenu popupMenu;\n+    static volatile JFrame frame;\n+    static volatile Robot robot;\n+\n+    public static void main(String[] args) throws Exception {\n+        if (System.getenv(\"WAYLAND_DISPLAY\") == null) {\n+            throw new SkippedException(\"XWayland only test\");\n+        }\n+\n+        robot = new Robot();\n+        robot.setAutoDelay(50);\n+\n+        try {\n+            SwingUtilities.invokeAndWait(NestedFocusablePopupTest::initAndShowGui);\n+            test0();\n+            test1();\n+        } finally {\n+            SwingUtilities.invokeAndWait(frame::dispose);\n+        }\n+    }\n+\n+    public static void waitTillShown(final Component component, long msTimeout)\n+            throws InterruptedException, TimeoutException {\n+        long startTime = System.currentTimeMillis();\n+\n+        while (true) {\n+            try {\n+                Thread.sleep(50);\n+                component.getLocationOnScreen();\n+                break;\n+            } catch (IllegalComponentStateException e) {\n+                if (System.currentTimeMillis() - startTime > msTimeout) {\n+                    throw new TimeoutException(\"Component not shown within the specified timeout\");\n+                }\n+            }\n+        }\n+    }\n+\n+    static Point waitAndGetLocationOnEDT(Component component) throws Exception {\n+        waitTillShown(component, 500);\n+        robot.waitForIdle();\n+\n+        FutureTask<Point> task = new FutureTask<>(component::getLocationOnScreen);\n+        SwingUtilities.invokeLater(task);\n+        return task.get(500, TimeUnit.MILLISECONDS);\n+    }\n+\n+    static void test0() throws Exception {\n+        Point frameLocation = waitAndGetLocationOnEDT(frame);\n+        robot.mouseMove(frameLocation.x + frame.getWidth() \/ 2,\n+                frameLocation.y + frame.getHeight() \/ 2);\n+\n+        robot.mousePress(InputEvent.BUTTON3_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON3_DOWN_MASK);\n+\n+        Point menuLocation = waitAndGetLocationOnEDT(menuWithFocusableItem);\n+        robot.mouseMove(menuLocation.x + 5, menuLocation.y + 5);\n+\n+        \/\/ give popup some time to disappear (in case of failure)\n+        robot.waitForIdle();\n+        robot.delay(200);\n+\n+        try {\n+            waitTillShown(popupMenu, 500);\n+        } catch (TimeoutException e) {\n+            throw new RuntimeException(\"The popupMenu disappeared when it shouldn't have.\");\n+        }\n+    }\n+\n+    static void test1() throws Exception {\n+        Point frameLocation = waitAndGetLocationOnEDT(frame);\n+        robot.mouseMove(frameLocation.x + frame.getWidth() \/ 2,\n+                frameLocation.y + frame.getHeight() \/ 2);\n+\n+        robot.mousePress(InputEvent.BUTTON3_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON3_DOWN_MASK);\n+\n+        Point menuLocation = waitAndGetLocationOnEDT(menuWithFocusableItem);\n+        robot.mouseMove(menuLocation.x + 5, menuLocation.y + 5);\n+        robot.waitForIdle();\n+        robot.delay(200);\n+\n+        menuLocation = waitAndGetLocationOnEDT(menuWithNonFocusableItem);\n+        robot.mouseMove(menuLocation.x + 5, menuLocation.y + 5);\n+\n+        \/\/ give popup some time to disappear (in case of failure)\n+        robot.waitForIdle();\n+        robot.delay(200);\n+\n+        try {\n+            waitTillShown(popupMenu, 500);\n+        } catch (TimeoutException e) {\n+            throw new RuntimeException(\"The popupMenu disappeared when it shouldn't have.\");\n+        }\n+    }\n+\n+    static JMenu getMenuWithMenuItem(boolean isSubmenuItemFocusable, String text) {\n+        JMenu menu = new JMenu(text);\n+        menu.add(isSubmenuItemFocusable\n+                ? new JButton(text)\n+                : new JMenuItem(text)\n+        );\n+        return menu;\n+    }\n+\n+    private static void initAndShowGui() {\n+        frame = new JFrame(\"NestedFocusablePopupTest\");\n+        JPanel panel = new JPanel();\n+        panel.setPreferredSize(new Dimension(200, 180));\n+\n+\n+        popupMenu = new JPopupMenu();\n+        menuWithFocusableItem =\n+                getMenuWithMenuItem(true, \"focusable subitem\");\n+        menuWithNonFocusableItem =\n+                getMenuWithMenuItem(false, \"non-focusable subitem\");\n+\n+        popupMenu.add(menuWithFocusableItem);\n+        popupMenu.add(menuWithNonFocusableItem);\n+\n+        panel.setComponentPopupMenu(popupMenu);\n+        frame.add(panel);\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JPopupMenu\/NestedFocusablePopupTest.java","additions":184,"deletions":0,"binary":false,"changes":184,"status":"added"}]}