{"files":[{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2012, 2024 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2025 SAP SE. All rights reserved.\n@@ -257,0 +257,12 @@\n+      \/\/ SIGTRAP-based nmethod entry barriers.\n+      else if (sig == SIGTRAP && TrapBasedNMethodEntryBarriers &&\n+               nativeInstruction_at(pc)->is_sigtrap_nmethod_entry_barrier() &&\n+               CodeCache::contains((void*) pc)) {\n+        if (TraceTraps) {\n+          tty->print_cr(\"trap: nmethod entry barrier at \" INTPTR_FORMAT \" (SIGTRAP)\", p2i(pc));\n+        }\n+        stub = StubRoutines::method_entry_barrier();\n+        uc->uc_mcontext.jmp_context.lr = (uintptr_t)(pc + BytesPerInstWord); \/\/ emulate call by setting LR\n+        goto run_stub;\n+      }\n+\n@@ -285,0 +297,1 @@\n+        goto run_stub;\n@@ -299,11 +312,0 @@\n-      \/\/ SIGTRAP-based nmethod entry barriers.\n-      else if (sig == SIGTRAP && TrapBasedNMethodEntryBarriers &&\n-               nativeInstruction_at(pc)->is_sigtrap_nmethod_entry_barrier() &&\n-               CodeCache::contains((void*) pc)) {\n-        if (TraceTraps) {\n-          tty->print_cr(\"trap: nmethod entry barrier at \" INTPTR_FORMAT \" (SIGTRAP)\", p2i(pc));\n-        }\n-        stub = StubRoutines::method_entry_barrier();\n-        uc->uc_mcontext.jmp_context.lr = (uintptr_t)(pc + BytesPerInstWord); \/\/ emulate call by setting LR\n-      }\n-\n","filename":"src\/hotspot\/os_cpu\/aix_ppc\/os_aix_ppc.cpp","additions":14,"deletions":12,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2012, 2024 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2025 SAP SE. All rights reserved.\n@@ -289,0 +289,11 @@\n+      \/\/ SIGTRAP-based nmethod entry barriers.\n+      else if (sig == SIGTRAP && TrapBasedNMethodEntryBarriers &&\n+               nativeInstruction_at(pc)->is_sigtrap_nmethod_entry_barrier() &&\n+               CodeCache::contains((void*) pc)) {\n+        if (TraceTraps) {\n+          tty->print_cr(\"trap: nmethod entry barrier at \" INTPTR_FORMAT \" (SIGTRAP)\", p2i(pc));\n+        }\n+        stub = StubRoutines::method_entry_barrier();\n+        uc->uc_mcontext.regs->link = (uintptr_t)(pc + BytesPerInstWord); \/\/ emulate call by setting LR\n+      }\n+\n@@ -328,11 +339,0 @@\n-      \/\/ SIGTRAP-based nmethod entry barriers.\n-      else if (sig == SIGTRAP && TrapBasedNMethodEntryBarriers &&\n-               nativeInstruction_at(pc)->is_sigtrap_nmethod_entry_barrier() &&\n-               CodeCache::contains((void*) pc)) {\n-        if (TraceTraps) {\n-          tty->print_cr(\"trap: nmethod entry barrier at \" INTPTR_FORMAT \" (SIGTRAP)\", p2i(pc));\n-        }\n-        stub = StubRoutines::method_entry_barrier();\n-        uc->uc_mcontext.regs->link = (uintptr_t)(pc + BytesPerInstWord); \/\/ emulate call by setting LR\n-      }\n-\n","filename":"src\/hotspot\/os_cpu\/linux_ppc\/os_linux_ppc.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"}]}