{"files":[{"patch":"@@ -67,4 +67,4 @@\n-    const char* pretty()         { return _pretty; }\n-    uint64_t feature_bit()       { return _linux_feature_bit; }\n-    bool feature_string()        { return _feature_string; }\n-    int64_t value()              { return _value; }\n+    const char* pretty()          { return _pretty; }\n+    uint64_t feature_bit()        { return _linux_feature_bit; }\n+    bool feature_string()         { return _feature_string; }\n+    int64_t value()               { return _value; }\n@@ -73,29 +73,0 @@\n-\n-   protected:\n-    bool deps_all_enabled(RVFeatureValue* dep0, ...) {\n-      assert(dep0 != nullptr, \"must not\");\n-\n-      va_list va;\n-      va_start(va, dep0);\n-      RVFeatureValue* next = dep0;\n-      bool enabled = true;\n-      while (next != nullptr && enabled) {\n-        enabled = next->enabled();\n-        next = va_arg(va, RVFeatureValue*);\n-      }\n-      va_end(va);\n-      return enabled;\n-    }\n-\n-    void deps_string(stringStream& ss, RVFeatureValue* dep0, ...) {\n-      assert(dep0 != nullptr, \"must not\");\n-      ss.print(\"%s (%s)\", dep0->pretty(), dep0->enabled() ? \"enabled\" : \"disabled\");\n-\n-      va_list va;\n-      va_start(va, dep0);\n-      RVFeatureValue* next = nullptr;\n-      while ((next = va_arg(va, RVFeatureValue*)) != nullptr) {\n-        ss.print(\", %s (%s)\", next->pretty(), next->enabled() ? \"enabled\" : \"disabled\");\n-      }\n-      va_end(va);\n-    }\n@@ -120,0 +91,1 @@\n+      DEBUG_ONLY(verify_deps(dep0, ##__VA_ARGS__));                                                         \\\n@@ -121,1 +93,1 @@\n-        if (this->deps_all_enabled(dep0, ##__VA_ARGS__)) {                                                  \\\n+        if (deps_all_enabled(dep0, ##__VA_ARGS__)) {                                                        \\\n@@ -152,0 +124,1 @@\n+\n@@ -157,0 +130,5 @@\n+    int dependent_index() {\n+      \/\/ Use _cpu_feature_index as dependent_index, it can be used to check for example v is declared\n+      \/\/ before Zvfh in RV_EXT_FEATURE_FLAGS.\n+      return _cpu_feature_index;\n+    }\n@@ -168,0 +146,51 @@\n+\n+   protected:\n+    bool deps_all_enabled(RVExtFeatureValue* dep0, ...) {\n+      assert(dep0 != nullptr, \"must not\");\n+\n+      va_list va;\n+      va_start(va, dep0);\n+      RVExtFeatureValue* next = dep0;\n+      bool enabled = true;\n+      while (next != nullptr && enabled) {\n+        enabled = next->enabled();\n+        next = va_arg(va, RVExtFeatureValue*);\n+      }\n+      va_end(va);\n+      return enabled;\n+    }\n+\n+    void deps_string(stringStream& ss, RVExtFeatureValue* dep0, ...) {\n+      assert(dep0 != nullptr, \"must not\");\n+      ss.print(\"%s (%s)\", dep0->pretty(), dep0->enabled() ? \"enabled\" : \"disabled\");\n+\n+      va_list va;\n+      va_start(va, dep0);\n+      RVExtFeatureValue* next = nullptr;\n+      while ((next = va_arg(va, RVExtFeatureValue*)) != nullptr) {\n+        ss.print(\", %s (%s)\", next->pretty(), next->enabled() ? \"enabled\" : \"disabled\");\n+      }\n+      va_end(va);\n+    }\n+\n+#ifndef PRODUCT\n+    void verify_deps(RVExtFeatureValue* dep0, ...) {\n+      assert(dep0 != nullptr, \"must not\");\n+      assert(dependent_index() >= 0, \"must\");\n+\n+      va_list va;\n+      va_start(va, dep0);\n+      RVExtFeatureValue* next = dep0;\n+      while (next != nullptr) {\n+        assert(next->dependent_index() >= 0, \"must\");\n+        \/\/ We only need to check depenency relationship for extension flags.\n+        \/\/ The dependant ones must be declared before this, for example, v must be declared\n+        \/\/ before Zvfh in RV_EXT_FEATURE_FLAGS. The reason is in setup_cpu_available_features\n+        \/\/ we need to make sure v is `update_flag`ed before Zvfh, so Zvfh is `update_flag`ed\n+        \/\/ based on v.\n+        assert(dependent_index() > next->dependent_index(), \"Invalid\");\n+        next = va_arg(va, RVExtFeatureValue*);\n+      }\n+      va_end(va);\n+    }\n+#endif \/\/ PRODUCT\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.hpp","additions":63,"deletions":34,"binary":false,"changes":97,"status":"modified"}]}