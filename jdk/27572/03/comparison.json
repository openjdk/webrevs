{"files":[{"patch":"@@ -67,4 +67,4 @@\n-    const char* pretty()         { return _pretty; }\n-    uint64_t feature_bit()       { return _linux_feature_bit; }\n-    bool feature_string()        { return _feature_string; }\n-    int64_t value()              { return _value; }\n+    const char* pretty()          { return _pretty; }\n+    uint64_t feature_bit()        { return _linux_feature_bit; }\n+    bool feature_string()         { return _feature_string; }\n+    int64_t value()               { return _value; }\n@@ -73,29 +73,0 @@\n-\n-   protected:\n-    bool deps_all_enabled(RVFeatureValue* dep0, ...) {\n-      assert(dep0 != nullptr, \"must not\");\n-\n-      va_list va;\n-      va_start(va, dep0);\n-      RVFeatureValue* next = dep0;\n-      bool enabled = true;\n-      while (next != nullptr && enabled) {\n-        enabled = next->enabled();\n-        next = va_arg(va, RVFeatureValue*);\n-      }\n-      va_end(va);\n-      return enabled;\n-    }\n-\n-    void deps_string(stringStream& ss, RVFeatureValue* dep0, ...) {\n-      assert(dep0 != nullptr, \"must not\");\n-      ss.print(\"%s (%s)\", dep0->pretty(), dep0->enabled() ? \"enabled\" : \"disabled\");\n-\n-      va_list va;\n-      va_start(va, dep0);\n-      RVFeatureValue* next = nullptr;\n-      while ((next = va_arg(va, RVFeatureValue*)) != nullptr) {\n-        ss.print(\", %s (%s)\", next->pretty(), next->enabled() ? \"enabled\" : \"disabled\");\n-      }\n-      va_end(va);\n-    }\n@@ -120,0 +91,1 @@\n+      DEBUG_ONLY(verify_deps(dep0, ##__VA_ARGS__));                                                         \\\n@@ -121,1 +93,1 @@\n-        if (this->deps_all_enabled(dep0, ##__VA_ARGS__)) {                                                  \\\n+        if (deps_all_enabled(dep0, ##__VA_ARGS__)) {                                                        \\\n@@ -152,0 +124,1 @@\n+\n@@ -157,0 +130,4 @@\n+    int cpu_feature_index() {\n+      \/\/ Can be used to check, for example, v is declared before Zvfh in RV_EXT_FEATURE_FLAGS.\n+      return _cpu_feature_index;\n+    }\n@@ -168,0 +145,51 @@\n+\n+   protected:\n+    bool deps_all_enabled(RVExtFeatureValue* dep0, ...) {\n+      assert(dep0 != nullptr, \"must not\");\n+\n+      va_list va;\n+      va_start(va, dep0);\n+      RVExtFeatureValue* next = dep0;\n+      bool enabled = true;\n+      while (next != nullptr && enabled) {\n+        enabled = next->enabled();\n+        next = va_arg(va, RVExtFeatureValue*);\n+      }\n+      va_end(va);\n+      return enabled;\n+    }\n+\n+    void deps_string(stringStream& ss, RVExtFeatureValue* dep0, ...) {\n+      assert(dep0 != nullptr, \"must not\");\n+      ss.print(\"%s (%s)\", dep0->pretty(), dep0->enabled() ? \"enabled\" : \"disabled\");\n+\n+      va_list va;\n+      va_start(va, dep0);\n+      RVExtFeatureValue* next = nullptr;\n+      while ((next = va_arg(va, RVExtFeatureValue*)) != nullptr) {\n+        ss.print(\", %s (%s)\", next->pretty(), next->enabled() ? \"enabled\" : \"disabled\");\n+      }\n+      va_end(va);\n+    }\n+\n+#ifndef PRODUCT\n+    void verify_deps(RVExtFeatureValue* dep0, ...) {\n+      assert(dep0 != nullptr, \"must not\");\n+      assert(cpu_feature_index() >= 0, \"must\");\n+\n+      va_list va;\n+      va_start(va, dep0);\n+      RVExtFeatureValue* next = dep0;\n+      while (next != nullptr) {\n+        assert(next->cpu_feature_index() >= 0, \"must\");\n+        \/\/ We only need to check depenency relationship for extension flags.\n+        \/\/ The dependant ones must be declared before this, for example, v must be declared\n+        \/\/ before Zvfh in RV_EXT_FEATURE_FLAGS. The reason is in setup_cpu_available_features\n+        \/\/ we need to make sure v is `update_flag`ed before Zvfh, so Zvfh is `update_flag`ed\n+        \/\/ based on v.\n+        assert(cpu_feature_index() > next->cpu_feature_index(), \"Invalid\");\n+        next = va_arg(va, RVExtFeatureValue*);\n+      }\n+      va_end(va);\n+    }\n+#endif \/\/ PRODUCT\n@@ -285,0 +313,2 @@\n+  \/* Manufactory JEDEC id encoded, ISA vol 2 3.1.2.. *\/                                        \\\n+  decl(mvendorid         ,  RV_NO_FLAG_BIT,  false,  NO_UPDATE_DEFAULT)                        \\\n@@ -291,2 +321,0 @@\n-  \/* Manufactory JEDEC id encoded, ISA vol 2 3.1.2.. *\/                                        \\\n-  decl(mvendorid         ,  RV_NO_FLAG_BIT,  false,  NO_UPDATE_DEFAULT)                        \\\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.hpp","additions":64,"deletions":36,"binary":false,"changes":100,"status":"modified"},{"patch":"@@ -170,9 +170,2 @@\n-  if (is_valid(RISCV_HWPROBE_KEY_MVENDORID)) {\n-    VM_Version::mvendorid.enable_feature(query[RISCV_HWPROBE_KEY_MVENDORID].value);\n-  }\n-  if (is_valid(RISCV_HWPROBE_KEY_MARCHID)) {\n-    VM_Version::marchid.enable_feature(query[RISCV_HWPROBE_KEY_MARCHID].value);\n-  }\n-  if (is_valid(RISCV_HWPROBE_KEY_MIMPID)) {\n-    VM_Version::mimpid.enable_feature(query[RISCV_HWPROBE_KEY_MIMPID].value);\n-  }\n+  \/\/ ====== extensions ======\n+  \/\/\n@@ -180,0 +173,1 @@\n+    VM_Version::ext_a.enable_feature();\n@@ -182,5 +176,0 @@\n-    VM_Version::ext_a.enable_feature();\n-  }\n-  if (is_set(RISCV_HWPROBE_KEY_IMA_EXT_0, RISCV_HWPROBE_IMA_FD)) {\n-    VM_Version::ext_f.enable_feature();\n-    VM_Version::ext_d.enable_feature();\n@@ -191,0 +180,4 @@\n+  if (is_set(RISCV_HWPROBE_KEY_IMA_EXT_0, RISCV_HWPROBE_IMA_FD)) {\n+    VM_Version::ext_d.enable_feature();\n+    VM_Version::ext_f.enable_feature();\n+  }\n@@ -205,0 +198,6 @@\n+\n+#ifndef PRODUCT\n+  if (is_set(RISCV_HWPROBE_KEY_IMA_EXT_0, RISCV_HWPROBE_EXT_ZACAS)) {\n+    VM_Version::ext_Zacas.enable_feature();\n+  }\n+#endif\n@@ -211,0 +210,5 @@\n+#ifndef PRODUCT\n+  if (is_set(RISCV_HWPROBE_KEY_IMA_EXT_0, RISCV_HWPROBE_EXT_ZBKB)) {\n+    VM_Version::ext_Zbkb.enable_feature();\n+  }\n+#endif\n@@ -215,5 +219,2 @@\n-  if (is_set(RISCV_HWPROBE_KEY_IMA_EXT_0, RISCV_HWPROBE_EXT_ZICBOZ)) {\n-    VM_Version::ext_Zicboz.enable_feature();\n-  }\n-  if (is_set(RISCV_HWPROBE_KEY_IMA_EXT_0, RISCV_HWPROBE_EXT_ZBKB)) {\n-    VM_Version::ext_Zbkb.enable_feature();\n+  if (is_set(RISCV_HWPROBE_KEY_IMA_EXT_0, RISCV_HWPROBE_EXT_ZFA)) {\n+    VM_Version::ext_Zfa.enable_feature();\n@@ -229,0 +230,12 @@\n+  if (is_set(RISCV_HWPROBE_KEY_IMA_EXT_0, RISCV_HWPROBE_EXT_ZICBOZ)) {\n+    VM_Version::ext_Zicboz.enable_feature();\n+  }\n+  \/\/ Currently tests shows that cmove using Zicond instructions will bring\n+  \/\/ performance regression, but to get a test coverage all the time, will\n+  \/\/ still prefer to enabling it in debug version.\n+  if (is_set(RISCV_HWPROBE_KEY_IMA_EXT_0, RISCV_HWPROBE_EXT_ZICOND)) {\n+    VM_Version::ext_Zicond.enable_feature();\n+  }\n+  if (is_set(RISCV_HWPROBE_KEY_IMA_EXT_0, RISCV_HWPROBE_EXT_ZTSO)) {\n+    VM_Version::ext_Ztso.enable_feature();\n+  }\n@@ -232,2 +245,0 @@\n-#endif\n-#ifndef PRODUCT\n@@ -238,0 +249,3 @@\n+  if (is_set(RISCV_HWPROBE_KEY_IMA_EXT_0, RISCV_HWPROBE_EXT_ZVFH)) {\n+    VM_Version::ext_Zvfh.enable_feature();\n+  }\n@@ -246,11 +260,5 @@\n-  if (is_set(RISCV_HWPROBE_KEY_IMA_EXT_0, RISCV_HWPROBE_EXT_ZVFH)) {\n-    VM_Version::ext_Zvfh.enable_feature();\n-  }\n-#ifndef PRODUCT\n-  if (is_set(RISCV_HWPROBE_KEY_IMA_EXT_0, RISCV_HWPROBE_EXT_ZFA)) {\n-    VM_Version::ext_Zfa.enable_feature();\n-  }\n-#endif\n-#ifndef PRODUCT\n-  if (is_set(RISCV_HWPROBE_KEY_IMA_EXT_0, RISCV_HWPROBE_EXT_ZTSO)) {\n-    VM_Version::ext_Ztso.enable_feature();\n+\n+  \/\/ ====== non-extensions ======\n+  \/\/\n+  if (is_valid(RISCV_HWPROBE_KEY_MARCHID)) {\n+    VM_Version::marchid.enable_feature(query[RISCV_HWPROBE_KEY_MARCHID].value);\n@@ -258,4 +266,2 @@\n-#endif\n-#ifndef PRODUCT\n-  if (is_set(RISCV_HWPROBE_KEY_IMA_EXT_0, RISCV_HWPROBE_EXT_ZACAS)) {\n-    VM_Version::ext_Zacas.enable_feature();\n+  if (is_valid(RISCV_HWPROBE_KEY_MIMPID)) {\n+    VM_Version::mimpid.enable_feature(query[RISCV_HWPROBE_KEY_MIMPID].value);\n@@ -263,5 +269,2 @@\n-  \/\/ Currently tests shows that cmove using Zicond instructions will bring\n-  \/\/ performance regression, but to get a test coverage all the time, will\n-  \/\/ still prefer to enabling it in debug version.\n-  if (is_set(RISCV_HWPROBE_KEY_IMA_EXT_0, RISCV_HWPROBE_EXT_ZICOND)) {\n-    VM_Version::ext_Zicond.enable_feature();\n+  if (is_valid(RISCV_HWPROBE_KEY_MVENDORID)) {\n+    VM_Version::mvendorid.enable_feature(query[RISCV_HWPROBE_KEY_MVENDORID].value);\n@@ -269,1 +272,0 @@\n-#endif\n@@ -280,1 +282,0 @@\n-\n","filename":"src\/hotspot\/os_cpu\/linux_riscv\/riscv_hwprobe.cpp","additions":44,"deletions":43,"binary":false,"changes":87,"status":"modified"}]}