{"files":[{"patch":"@@ -67,4 +67,7 @@\n-    const char* pretty()         { return _pretty; }\n-    uint64_t feature_bit()       { return _linux_feature_bit; }\n-    bool feature_string()        { return _feature_string; }\n-    int64_t value()              { return _value; }\n+    const char* pretty()          { return _pretty; }\n+    uint64_t feature_bit()        { return _linux_feature_bit; }\n+    bool feature_string()         { return _feature_string; }\n+    int64_t value()               { return _value; }\n+    \/\/ For non-ext flags, they don't have dependency relationship among each other,\n+    \/\/ in this situation, just return the default value -1.\n+    virtual int dependent_index() { return -1; }\n@@ -102,0 +105,20 @@\n+\n+    void verify_deps(RVFeatureValue* dep0, ...) {\n+      assert(dep0 != nullptr, \"must not\");\n+      assert(dependent_index() >= 0, \"must\");\n+\n+      va_list va;\n+      va_start(va, dep0);\n+      RVFeatureValue* next = dep0;\n+      while (next != nullptr) {\n+        assert(next->dependent_index() >= 0, \"must\");\n+        \/\/ We only need to check depenency relationship for extension flags.\n+        \/\/ The dependant ones must be declared before this, for example, v must be declared\n+        \/\/ before Zvfh in RV_EXT_FEATURE_FLAGS. The reason is in setup_cpu_available_features\n+        \/\/ we need to make sure v is `update_flag`ed before Zvfh, so Zvfh is `update_flag`ed\n+        \/\/ based on v.\n+        assert(dependent_index() > next->dependent_index(), \"Invalid\");\n+        next = va_arg(va, RVFeatureValue*);\n+      }\n+      va_end(va);\n+    }\n@@ -120,0 +143,1 @@\n+      verify_deps(dep0, ##__VA_ARGS__);                                                                     \\\n@@ -121,1 +145,1 @@\n-        if (this->deps_all_enabled(dep0, ##__VA_ARGS__)) {                                                  \\\n+        if (deps_all_enabled(dep0, ##__VA_ARGS__)) {                                                        \\\n@@ -157,0 +181,5 @@\n+    int dependent_index() {\n+      \/\/ Use _cpu_feature_index as dependent_index, it can be used to check for example v is declared\n+      \/\/ before Zvfh in RV_EXT_FEATURE_FLAGS.\n+      return _cpu_feature_index;\n+    }\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.hpp","additions":34,"deletions":5,"binary":false,"changes":39,"status":"modified"}]}