{"files":[{"patch":"@@ -351,1 +351,7 @@\n-        return new StatelessOp<>(this, StreamShape.DOUBLE_VALUE,\n+        Spliterator.OfDouble spliterator = this.spliterator();\n+        long size = spliterator.getExactSizeIfKnown();\n+\n+        if (size > 1000) {\n+            return this.parallel().filter(predicate);\n+        } else {\n+            return new StatelessOp<Double>(this, StreamShape.DOUBLE_VALUE,\n@@ -353,7 +359,7 @@\n-            @Override\n-            Sink<Double> opWrapSink(int flags, Sink<Double> sink) {\n-                return new Sink.ChainedDouble<>(sink) {\n-                    @Override\n-                    public void begin(long size) {\n-                        downstream.begin(-1);\n-                    }\n+                @Override\n+                Sink<Double> opWrapSink(int flags, Sink<Double> sink) {\n+                    return new Sink.ChainedDouble<Double>(sink) {\n+                        @Override\n+                        public void begin(long size) {\n+                            downstream.begin(-1);\n+                        }\n@@ -361,8 +367,10 @@\n-                    @Override\n-                    public void accept(double t) {\n-                        if (predicate.test(t))\n-                            downstream.accept(t);\n-                    }\n-                };\n-            }\n-        };\n+                        @Override\n+                        public void accept(double t) {\n+                            if (predicate.test(t)) {\n+                                downstream.accept(t);\n+                            }\n+                        }\n+                    };\n+                }\n+            };\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/DoublePipeline.java","additions":24,"deletions":16,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -383,9 +383,0 @@\n-        return new StatelessOp<>(this, StreamShape.INT_VALUE,\n-                StreamOpFlag.NOT_SIZED) {\n-            @Override\n-            Sink<Integer> opWrapSink(int flags, Sink<Integer> sink) {\n-                return new Sink.ChainedInt<>(sink) {\n-                    @Override\n-                    public void begin(long size) {\n-                        downstream.begin(-1);\n-                    }\n@@ -393,8 +384,20 @@\n-                    @Override\n-                    public void accept(int t) {\n-                        if (predicate.test(t))\n-                            downstream.accept(t);\n-                    }\n-                };\n-            }\n-        };\n+        Spliterator.OfInt spliterator = this.spliterator();\n+        long size = spliterator.getExactSizeIfKnown();\n+\n+        if (size > 1000) {\n+            return this.parallel().filter(predicate);\n+        } else {\n+            return new StatelessOp<Integer>(this, StreamShape.INT_VALUE,\n+                StreamOpFlag.NOT_SIZED) {\n+                @Override\n+                Sink<Integer> opWrapSink(int flags, Sink<Integer> sink) {\n+                    return new Sink.ChainedInt<Integer>(sink) {\n+                        @Override\n+                        public void accept(int t) {\n+                            if (predicate.test(t))\n+                                downstream.accept(t);\n+                        }\n+                    };\n+                }\n+            };\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/IntPipeline.java","additions":20,"deletions":17,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -366,1 +366,7 @@\n-        return new StatelessOp<>(this, StreamShape.LONG_VALUE,\n+        Spliterator.OfLong spliterator = this.spliterator();\n+        long size = spliterator.getExactSizeIfKnown();\n+\n+        if (size > 1000) {\n+            return this.parallel().filter(predicate);\n+        } else {\n+            return new StatelessOp<Long>(this, StreamShape.LONG_VALUE,\n@@ -368,7 +374,7 @@\n-            @Override\n-            Sink<Long> opWrapSink(int flags, Sink<Long> sink) {\n-                return new Sink.ChainedLong<>(sink) {\n-                    @Override\n-                    public void begin(long size) {\n-                        downstream.begin(-1);\n-                    }\n+                @Override\n+                Sink<Long> opWrapSink(int flags, Sink<Long> sink) {\n+                    return new Sink.ChainedLong<Long>(sink) {\n+                        @Override\n+                        public void begin(long size) {\n+                            downstream.begin(-1);\n+                        }\n@@ -376,8 +382,10 @@\n-                    @Override\n-                    public void accept(long t) {\n-                        if (predicate.test(t))\n-                            downstream.accept(t);\n-                    }\n-                };\n-            }\n-        };\n+                        @Override\n+                        public void accept(long t) {\n+                            if (predicate.test(t)) {\n+                                downstream.accept(t);\n+                            }\n+                        }\n+                    };\n+                }\n+            };\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/LongPipeline.java","additions":24,"deletions":16,"binary":false,"changes":40,"status":"modified"}]}