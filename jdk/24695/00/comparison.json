{"files":[{"patch":"@@ -583,1 +583,1 @@\n-  \/\/ numbered\n+  \/\/ non-numbered\n@@ -586,1 +586,1 @@\n-  \/\/ non-numbered\n+  \/\/ numbered\n@@ -590,0 +590,1 @@\n+  {\"jdk.module.addopens\", true},               \/\/ --add-opens\n","filename":"src\/hotspot\/share\/classfile\/modules.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -335,1 +335,0 @@\n-        matches_property_suffix(property_suffix, ADDOPENS, ADDOPENS_LEN) ||\n@@ -346,0 +345,1 @@\n+          matches_property_suffix(property_suffix, ADDOPENS, ADDOPENS_LEN) ||\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -145,2 +145,1 @@\n-               getProperty(\"jdk.module.addreads.0\") == null &&    \/\/ --add-reads\n-               getProperty(\"jdk.module.addopens.0\") == null;      \/\/ --add-opens\n+               getProperty(\"jdk.module.addreads.0\") == null;      \/\/ --add-reads\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModuleBootstrap.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -42,0 +42,4 @@\n+        new Option(\"--add-opens\",\n+                   \"jdk.module.addopens\",\n+                   \"java.base\/java.util.concurrent.regex=ALL-UNNAMED\",\n+                   \"java.base\/sun.security.x509=ALL-UNNAMED\"),\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/ExactOptionMatch.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,158 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8352003\n+ * @summary Test handling of the --add-opens option.\n+ * @requires vm.cds.write.archived.java.heap\n+ * @requires vm.flagless\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI AddopensOption\n+ *\/\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.whitebox.code.Compiler;\n+\n+public class AddopensOption {\n+\n+    public static void main(String[] args) throws Exception {\n+        final String moduleOption = \"jdk.httpserver\/sun.net.httpserver.simpleserver.Main\";\n+        final String addOpensNio = \"java.base\/java.nio=ALL-UNNAMED\";\n+        final String addOpensTimeFormat = \"java.base\/java.time.format=ALL-UNNAMED\";\n+        final String loggingOption = \"-Xlog:cds=debug,cds+module=debug,cds+heap=info,module=trace\";\n+        final String versionPattern = \"java.[0-9][0-9].*\";\n+        final String subgraphCannotBeUsed = \"subgraph jdk.internal.module.ArchivedBootLayer cannot be used because full module graph is disabled\";\n+        final String warningIncubator = \"WARNING: Using incubator modules: jdk.incubator.vector\";\n+        String archiveName = TestCommon.getNewArchiveName(\"addopens-option\");\n+        TestCommon.setCurrentArchiveName(archiveName);\n+\n+        \/\/ dump a base archive with --add-opens jdk.jconsole -m jdk.httpserver\n+        OutputAnalyzer oa = TestCommon.dumpBaseArchive(\n+            archiveName,\n+            loggingOption,\n+            \"--add-opens\", addOpensTimeFormat,\n+            \"-m\", moduleOption,\n+            \"-version\");\n+        oa.shouldHaveExitValue(0);\n+\n+        \/\/ same modules specified during runtime\n+        oa = TestCommon.execCommon(\n+            loggingOption,\n+            \"--add-opens\", addOpensTimeFormat,\n+            \"-m\", moduleOption,\n+            \"-version\");\n+        oa.shouldHaveExitValue(0)\n+          \/\/ version of the jdk.httpserver module, e.g. java 22-ea\n+          .shouldMatch(versionPattern)\n+          \/\/.shouldMatch(\"cds,module.*Restored from archive: entry.0x.*name jdk.jconsole\")\n+          .shouldMatch(\"cds,module.*Restored from archive: entry.0x.*name jdk.httpserver\");\n+\n+        \/\/ different --add-opens specified during runtime\n+        oa = TestCommon.execCommon(\n+            loggingOption,\n+            \"--add-opens\", addOpensNio,\n+            \"-m\", moduleOption,\n+            \"-version\");\n+        oa.shouldHaveExitValue(0)\n+          .shouldContain(\"Mismatched values for property jdk.module.addopens\")\n+          .shouldContain(\"runtime java.base\/java.nio=ALL-UNNAMED dump time java.base\/java.time.format=ALL-UNNAMED\")\n+          .shouldContain(subgraphCannotBeUsed);\n+\n+        \/\/ no module specified during runtime\n+        oa = TestCommon.execCommon(\n+            loggingOption,\n+            \"-version\");\n+        oa.shouldHaveExitValue(0)\n+          .shouldContain(\"jdk.httpserver specified during dump time but not during runtime\")\n+          .shouldContain(subgraphCannotBeUsed);\n+\n+        \/\/ dump an archive without the --add-opens option\n+        archiveName = TestCommon.getNewArchiveName(\"no-addopens-option\");\n+        TestCommon.setCurrentArchiveName(archiveName);\n+        oa = TestCommon.dumpBaseArchive(\n+            archiveName,\n+            loggingOption,\n+            \"-m\", moduleOption,\n+            \"-version\");\n+        oa.shouldHaveExitValue(0);\n+\n+        \/\/ run with --add-opens option\n+        oa = TestCommon.execCommon(\n+            loggingOption,\n+            \"--add-opens\", addOpensTimeFormat,\n+            \"-m\", moduleOption,\n+            \"-version\");\n+        oa.shouldHaveExitValue(0)\n+          .shouldContain(\"java.base\/java.time.format=ALL-UNNAMED specified during runtime but not during dump time\")\n+          \/\/ version of the jdk.httpserver module, e.g. java 22-ea\n+          .shouldMatch(versionPattern)\n+          .shouldContain(subgraphCannotBeUsed);\n+\n+        \/\/ dump an archive with -add-opens java.base\/java.nio=ALL-UNNAMED\n+        archiveName = TestCommon.getNewArchiveName(\"addopens-java-nio\");\n+        TestCommon.setCurrentArchiveName(archiveName);\n+        oa = TestCommon.dumpBaseArchive(\n+            archiveName,\n+            loggingOption,\n+            \"--add-opens\", addOpensNio,\n+            \"-m\", moduleOption,\n+            \"-version\");\n+        oa.shouldHaveExitValue(0)\n+          .shouldContain(\"Full module graph = enabled\");\n+\n+        \/\/ run with the same --add-opens\n+        oa = TestCommon.execCommon(\n+            loggingOption,\n+            \"--add-opens\", addOpensNio,\n+            \"-m\", moduleOption,\n+            \"-version\");\n+        oa.shouldContain(\"optimized module handling: enabled\")\n+          .shouldHaveExitValue(0);\n+\n+        \/\/ dump an archive with multiple --add-modules args\n+        archiveName = TestCommon.getNewArchiveName(\"muti-addopens\");\n+        TestCommon.setCurrentArchiveName(archiveName);\n+        oa = TestCommon.dumpBaseArchive(\n+            archiveName,\n+            loggingOption,\n+            \"--add-opens\", addOpensNio,\n+            \"--add-opens\", addOpensTimeFormat,\n+            \"-m\", moduleOption,\n+            \"-version\");\n+        oa.shouldHaveExitValue(0);\n+\n+        \/\/ run with the same multiple --add-modules args with a duplicate --add-opens entry\n+        oa = TestCommon.execCommon(\n+            loggingOption,\n+            \"--add-opens\", addOpensTimeFormat,\n+            \"--add-opens\", addOpensNio,\n+            \"--add-opens\", addOpensTimeFormat,\n+            \"-m\", moduleOption,\n+            \"-version\");\n+        oa.shouldHaveExitValue(0)\n+          .shouldMatch(\"cds,module.*Restored from archive: entry.0x.*name jdk.compiler\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/addopens\/AddopensOption.java","additions":158,"deletions":0,"binary":false,"changes":158,"status":"added"}]}