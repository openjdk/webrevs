{"files":[{"patch":"@@ -59,2 +59,5 @@\n-            \/\/ wait for key to be signalled - the timeout is long to allow for\n-            \/\/ polling implementations\n+            \/\/ Wait for all events to be signalled - the timeout is long to\n+            \/\/ allow for polling implementations. Since we specifically want to\n+            \/\/ test the maximum number of events buffered for a single\n+            \/\/ WatchKey#pollEvents call, we need to poll on the WatchService\n+            \/\/ repeatedly until all (not just some) events have been signalled.\n@@ -62,2 +65,4 @@\n-            WatchKey signalledKey = watcher.poll(15, TimeUnit.SECONDS);\n-            if (key != signalledKey) {\n+            WatchKey signalledKey;\n+            do {\n+              signalledKey = watcher.poll(10, TimeUnit.SECONDS);\n+              if (signalledKey != null && signalledKey != key) {\n@@ -65,1 +70,2 @@\n-            }\n+              }\n+            } while (signalledKey != null);\n@@ -71,1 +77,2 @@\n-                    throw new RuntimeException(\"Expected a single event\");\n+                    throw new RuntimeException(\n+                        \"Expected overflow event, got: \" + toString(events));\n@@ -74,1 +81,2 @@\n-                    throw new RuntimeException(\"Expected overflow event\");\n+                    throw new RuntimeException(\n+                        \"Expected overflow event, got: \" + toString(events));\n@@ -86,4 +94,1 @@\n-                        \"Expected events on: \" + entries + \", got: \" +\n-                            events.stream()\n-                                .map(LotsOfEntries::toString)\n-                                .collect(Collectors.toList()));\n+                        \"Expected events on: \" + entries + \", got: \" + toString(events));\n@@ -95,0 +100,6 @@\n+    static String toString(List<WatchEvent<?>> events) {\n+        return events.stream()\n+            .map(LotsOfEntries::toString)\n+            .collect(Collectors.joining(\", \"));\n+    }\n+\n","filename":"test\/jdk\/java\/nio\/file\/WatchService\/LotsOfEntries.java","additions":22,"deletions":11,"binary":false,"changes":33,"status":"modified"}]}