{"files":[{"patch":"@@ -102,9 +102,11 @@\n- * In the reference implementation, the maximum size of the list of events\n- * returned by {@link WatchKey#pollEvents() WatchKey.pollEvents} is controlled\n- * by the system property {@code jdk.nio.file.WatchService.maxEventsPerPoll}.\n- * If this property is not set or cannot be parsed as an integer, then the\n- * maximum event list size will be set to 512; if the property is parsed as a\n- * non-positive integer, then the maximum event size will be {@code 1} (unity).\n- * If more events occur than the maximum size of the event list, the pending\n- * events are cleared and replaced with a single\n- * {@link StandardWatchEventKinds#OVERFLOW OVERFLOW} event.\n+ * The JDK's {@code WatchService} implementations buffer up to 512 pending\n+ * events for each registered watchable object. If this limit is exceeded,\n+ * pending events are discarded and the special\n+ * {@link StandardWatchEventKind#OVERFLOW OVERFLOW} event is queued. This\n+ * special event is the trigger to re-examine the state of the object, e.g.\n+ * scan a watched directory to get an updated list of the files in the\n+ * directory. The limit for the pending events can be changed from its default\n+ * with the system property {@code jdk.nio.file.WatchService.maxEventsPerPoll}\n+ * set to a value that parses as a positive integer. This may be useful in\n+ * environments where there is a high volume of changes and where the impact\n+ * of discarded events is high.\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/WatchService.java","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -45,1 +45,0 @@\n-    @SuppressWarnings(\"removal\")\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/fs\/AbstractWatchKey.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}