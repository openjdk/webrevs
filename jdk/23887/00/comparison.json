{"files":[{"patch":"@@ -44,1 +44,2 @@\n-  static uintptr_t alloc(size_t size);\n+  template <typename T>\n+  static uintptr_t alloc();\n","filename":"src\/hotspot\/share\/gc\/z\/zValue.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include \"utilities\/powerOfTwo.hpp\"\n@@ -46,2 +47,13 @@\n-uintptr_t ZValueStorage<S>::alloc(size_t size) {\n-  assert(size <= Offset, \"Allocation too large\");\n+template <typename T>\n+uintptr_t ZValueStorage<S>::alloc() {\n+  constexpr size_t size = sizeof(T);\n+  constexpr size_t alignment = alignof(T);\n+\n+  \/\/ Check type requirements\n+  static_assert(size <= Offset, \"Allocation too large\");\n+  static_assert(alignment <= Offset, \"Alignment too large\");\n+  static_assert(is_power_of_2(alignment), \"Only power of 2 alignment supported\");\n+\n+  \/\/ Check storage requirements\n+  assert(S::alignment() <= Offset, \"Alignment too large\");\n+  assert(is_power_of_2(S::alignment()), \"Only power of 2 alignment supported\");\n@@ -50,1 +62,2 @@\n-  const uintptr_t addr = align_up(_top, S::alignment());\n+  const size_t addr_alignment = MAX2(S::alignment(), alignment);\n+  const uintptr_t addr = align_up(_top, addr_alignment);\n@@ -65,1 +78,1 @@\n-  return alloc(size);\n+  return alloc<T>();\n@@ -127,1 +140,1 @@\n-  : _addr(S::alloc(sizeof(T))) {\n+  : _addr(S::template alloc<T>()) {\n@@ -137,1 +150,1 @@\n-  : _addr(S::alloc(sizeof(T))) {\n+  : _addr(S::template alloc<T>()) {\n","filename":"src\/hotspot\/share\/gc\/z\/zValue.inline.hpp","additions":19,"deletions":6,"binary":false,"changes":25,"status":"modified"}]}