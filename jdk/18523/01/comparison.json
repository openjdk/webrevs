{"files":[{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Dialog;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Point;\n+\n+\/*\n+ * @test\n+ * @bug 4340727\n+ * @summary Tests that undecorated property is set correctly\n+ *          when Frames and Dialogs are mixed.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual FrameDialogMixedTest\n+ *\/\n+\n+public class FrameDialogMixedTest {\n+    private static final int SIZE = 100;\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+            When the test starts, a RED UNDECORATED Frame is seen.\n+            Click on \"Create Dialog\" button, you should see a GREEN UNDECORATED Dialog.\n+            If both the frame and the dialog are undecorated press PASS otherwise FAIL.\"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                      .title(\"Undecorated Frame & Dialog Test Instructions\")\n+                      .instructions(INSTRUCTIONS)\n+                      .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                      .columns(40)\n+                      .testUI(FrameDialogMixedTest::createUI)\n+                      .build()\n+                      .awaitAndCheck();\n+    }\n+\n+    private static Frame createUI() {\n+        Frame frame = new Frame(\"Undecorated Frame\");\n+        frame.setSize(SIZE, SIZE);\n+        frame.setBackground(Color.RED);\n+        frame.setUndecorated(true);\n+        frame.setLayout(new FlowLayout(FlowLayout.CENTER));\n+\n+        Button button = new Button(\"Create Dialog\");\n+        button.addActionListener(e -> {\n+            Dialog dialog = new Dialog(frame);\n+            Point frameLoc = frame.getLocationOnScreen();\n+            dialog.setBounds(frameLoc.x + frame.getSize().width + 5,\n+                             frameLoc.y,\n+                             SIZE, SIZE);\n+            dialog.setBackground(Color.GREEN);\n+            dialog.setUndecorated(true);\n+            dialog.setVisible(true);\n+        });\n+\n+        frame.add(button);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Frame\/FrameDialogMixedTest.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"patch":"@@ -0,0 +1,129 @@\n+\/*\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.GraphicsEnvironment;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.Toolkit;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.stream.Stream;\n+import javax.imageio.ImageIO;\n+\n+import jtreg.SkippedException;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4862945\n+ * @summary Undecorated frames miss certain mwm functions in the mwm hints.\n+ * @library \/test\/lib\n+ * @build jtreg.SkippedException\n+ * @run main MaximizeUndecoratedTest\n+ *\/\n+\n+public class MaximizeUndecoratedTest {\n+    private static final int SIZE = 300;\n+    private static final int OFFSET = 2;\n+\n+    private static Frame frame;\n+    private static Robot robot;\n+\n+    private static volatile Dimension screenSize;\n+    private static volatile Rectangle maxBounds;\n+\n+    public static void main(String[] args) throws Exception {\n+        if (!Toolkit.getDefaultToolkit()\n+                    .isFrameStateSupported(Frame.MAXIMIZED_BOTH)) {\n+            throw new SkippedException(\"Test is not applicable as\"\n+                    + \" the Window manager does not support MAXIMIZATION\");\n+        }\n+\n+        try {\n+            robot = new Robot();\n+\n+            EventQueue.invokeAndWait(MaximizeUndecoratedTest::createUI);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            EventQueue.invokeAndWait(() -> {\n+                screenSize = Toolkit.getDefaultToolkit().getScreenSize();\n+                maxBounds = GraphicsEnvironment.getLocalGraphicsEnvironment()\n+                                               .getMaximumWindowBounds();\n+                System.out.println(\"Maximum Window Bounds: \" + maxBounds);\n+                frame.setExtendedState(Frame.MAXIMIZED_BOTH);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(500);\n+\n+            \/\/ Colors sampled at top-left, top-right, bottom-right & bottom-left\n+            \/\/ corners of maximized frame.\n+            Point[] points = new Point[] {\n+                    new Point(maxBounds.x + OFFSET, maxBounds.y + OFFSET),\n+                    new Point(maxBounds.width - OFFSET, maxBounds.y + OFFSET),\n+                    new Point(maxBounds.width - OFFSET, maxBounds.height - OFFSET),\n+                    new Point(maxBounds.x + OFFSET, maxBounds.height - OFFSET)\n+            };\n+\n+            if (!Stream.of(points)\n+                       .map(p -> robot.getPixelColor(p.x, p.y))\n+                       .allMatch(c -> c.equals(Color.GREEN))) {\n+                saveScreenCapture();\n+                throw new RuntimeException(\"Test Failed !! Frame not maximized.\");\n+            }\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.setExtendedState(Frame.NORMAL);\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void createUI() {\n+        frame = new Frame(\"Test Maximization of Frame\");\n+        frame.setSize(SIZE, SIZE);\n+        frame.setBackground(Color.GREEN);\n+        frame.setResizable(true);\n+        frame.setUndecorated(true);\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+\n+    private static void saveScreenCapture() {\n+        BufferedImage image = robot.createScreenCapture(new Rectangle(new Point(),\n+                                                                      screenSize));\n+        try {\n+            ImageIO.write(image, \"png\", new File(\"MaximizedFrame.png\"));\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Frame\/MaximizeUndecoratedTest.java","additions":129,"deletions":0,"binary":false,"changes":129,"status":"added"},{"patch":"@@ -0,0 +1,139 @@\n+\/*\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.Toolkit;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import javax.imageio.ImageIO;\n+\n+import jtreg.SkippedException;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 6251941\n+ * @summary Undecorated frames should be minimizable.\n+ * @library \/test\/lib\n+ * @build jtreg.SkippedException\n+ * @run main MinimizeUndecoratedTest\n+ *\/\n+\n+public class MinimizeUndecoratedTest {\n+    private static final int SIZE = 300;\n+    private static final CountDownLatch isMinimized = new CountDownLatch(1);\n+\n+    private static Frame frame;\n+    private static Robot robot;\n+\n+    private static volatile Point frameLoc;\n+\n+    public static void main(String[] args) throws Exception {\n+        if (!Toolkit.getDefaultToolkit()\n+                    .isFrameStateSupported(Frame.ICONIFIED)) {\n+            throw new SkippedException(\"Test is not applicable as\"\n+                    + \" the Window manager does not support MINIMIZATION\");\n+        }\n+\n+        try {\n+            robot = new Robot();\n+            EventQueue.invokeAndWait(MinimizeUndecoratedTest::createUI);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            EventQueue.invokeAndWait(() -> frameLoc = frame.getLocationOnScreen());\n+\n+            Color beforeColor = robot.getPixelColor(frameLoc.x + SIZE \/ 2,\n+                                                    frameLoc.y + SIZE \/ 2);\n+\n+            EventQueue.invokeAndWait(() -> frame.setExtendedState(Frame.ICONIFIED));\n+            robot.waitForIdle();\n+            robot.delay(500);\n+\n+            if (isMinimized.await(8, TimeUnit.SECONDS)) {\n+                EventQueue.invokeAndWait(() -> System.out.println(\"Frame state: \"\n+                                               + frame.getExtendedState()));\n+                Color afterColor = robot.getPixelColor(frameLoc.x + SIZE \/ 2,\n+                                                       frameLoc.y + SIZE \/ 2);\n+\n+                if (beforeColor.equals(afterColor)) {\n+                    saveScreenCapture();\n+                    throw new RuntimeException(\"Color before & after minimization : \"\n+                            + beforeColor + \" vs \" + afterColor + \"\\n\"\n+                            + \"Test Failed !! Frame not minimized.\");\n+                }\n+            } else {\n+                throw new RuntimeException(\"Window iconified event not received.\");\n+            }\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.setExtendedState(Frame.NORMAL);\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void createUI() {\n+        frame = new Frame(\"Test Minimization of Frame\");\n+        frame.setSize(SIZE, SIZE);\n+        frame.setBackground(Color.GREEN);\n+        frame.setResizable(true);\n+        frame.setUndecorated(true);\n+        frame.addWindowStateListener(new WindowAdapter() {\n+            @Override\n+            public void windowStateChanged(WindowEvent e) {\n+                if (e.getNewState() == Frame.ICONIFIED) {\n+                    System.out.println(\"Window iconified event received.\");\n+                    isMinimized.countDown();\n+                }\n+            }\n+        });\n+\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+\n+    private static void saveScreenCapture() {\n+        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();\n+        BufferedImage image = robot.createScreenCapture(new Rectangle(new Point(),\n+                                                                      screenSize));\n+        try {\n+            ImageIO.write(image, \"png\", new File(\"MinimizedFrame.png\"));\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Frame\/MinimizeUndecoratedTest.java","additions":139,"deletions":0,"binary":false,"changes":139,"status":"added"}]}