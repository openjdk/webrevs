{"files":[{"patch":"@@ -219,1 +219,1 @@\n-    DISABLED_WARNINGS := rawtypes unchecked deprecation this-escape, \\\n+    DISABLED_WARNINGS := rawtypes unchecked deprecation this-escape dangling-doc-comments, \\\n","filename":"make\/CompileDemos.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,1 +58,1 @@\n-    DISABLED_WARNINGS := options, \\\n+    DISABLED_WARNINGS := dangling-doc-comments options, \\\n","filename":"make\/CompileToolsJdk.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,0 +46,1 @@\n+    DISABLED_WARNINGS := dangling-doc-comments, \\\n","filename":"make\/GenerateLinkOptData.gmk","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-# DISABLED_WARNINGS_java +=\n+DISABLED_WARNINGS_java += dangling-doc-comments\n","filename":"make\/modules\/java.base\/Java.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n-DISABLED_WARNINGS_java += lossy-conversions this-escape\n+DISABLED_WARNINGS_java += dangling-doc-comments lossy-conversions this-escape\n","filename":"make\/modules\/java.desktop\/Java.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n-DISABLED_WARNINGS_java += this-escape\n+DISABLED_WARNINGS_java += dangling-doc-comments this-escape\n","filename":"make\/modules\/java.management\/Java.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n-DISABLED_WARNINGS_java += this-escape\n+DISABLED_WARNINGS_java += dangling-doc-comments this-escape\n","filename":"make\/modules\/java.naming\/Java.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n-DISABLED_WARNINGS_java += this-escape\n+DISABLED_WARNINGS_java += dangling-doc-comments this-escape\n","filename":"make\/modules\/java.security.jgss\/Java.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n-DISABLED_WARNINGS_java += this-escape\n+DISABLED_WARNINGS_java += dangling-doc-comments this-escape\n","filename":"make\/modules\/java.security.sasl\/Java.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n-DISABLED_WARNINGS_java += this-escape\n+DISABLED_WARNINGS_java += dangling-doc-comments this-escape\n","filename":"make\/modules\/java.sql.rowset\/Java.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n-DISABLED_WARNINGS_java += this-escape\n+DISABLED_WARNINGS_java += dangling-doc-comments this-escape\n","filename":"make\/modules\/java.sql\/Java.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n-DISABLED_WARNINGS_java += this-escape\n+DISABLED_WARNINGS_java += dangling-doc-comments this-escape\n","filename":"make\/modules\/java.xml.crypto\/Java.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n-DISABLED_WARNINGS_java += lossy-conversions this-escape\n+DISABLED_WARNINGS_java += dangling-doc-comments lossy-conversions this-escape\n","filename":"make\/modules\/java.xml\/Java.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n-DISABLED_WARNINGS_java += this-escape\n+DISABLED_WARNINGS_java += dangling-doc-comments\n","filename":"make\/modules\/jdk.accessibility\/Java.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"make\/modules\/java.security.sasl\/Java.gmk","status":"copied"},{"patch":"@@ -30,0 +30,2 @@\n+DISABLED_WARNINGS_java += dangling-doc-comments\n+\n","filename":"make\/modules\/jdk.compiler\/Java.gmk","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n-DISABLED_WARNINGS_java += this-escape\n+DISABLED_WARNINGS_java += dangling-doc-comments\n","filename":"make\/modules\/jdk.crypto.cryptoki\/Java.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"make\/modules\/java.security.sasl\/Java.gmk","status":"copied"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n-    fallthrough this-escape\n+    dangling-doc-comments fallthrough this-escape\n","filename":"make\/modules\/jdk.hotspot.agent\/Java.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n-DISABLED_WARNINGS_java += this-escape\n+DISABLED_WARNINGS_java += dangling-doc-comments this-escape\n","filename":"make\/modules\/jdk.internal.le\/Java.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n-DISABLED_WARNINGS_java += this-escape\n+DISABLED_WARNINGS_java += dangling-doc-comments this-escape\n","filename":"make\/modules\/jdk.internal.vm.ci\/Java.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n-DISABLED_WARNINGS_java += this-escape\n+DISABLED_WARNINGS_java += dangling-doc-comments this-escape\n","filename":"make\/modules\/jdk.jdi\/Java.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n-DISABLED_WARNINGS_java += exports\n+DISABLED_WARNINGS_java += dangling-doc-comments exports\n","filename":"make\/modules\/jdk.jfr\/Java.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,2 @@\n+DISABLED_WARNINGS_java += dangling-doc-comments\n+\n","filename":"make\/modules\/jdk.jshell\/Java.gmk","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n-DISABLED_WARNINGS_java += this-escape\n+DISABLED_WARNINGS_java += dangling-doc-comments\n","filename":"make\/modules\/jdk.security.auth\/Java.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"make\/modules\/java.security.sasl\/Java.gmk","status":"copied"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,2 @@\n-DISABLED_WARNINGS_java += this-escape\n+DISABLED_WARNINGS_java += dangling-doc-comments\n+\n","filename":"make\/modules\/jdk.zipfs\/Java.gmk","additions":3,"deletions":2,"binary":false,"changes":5,"previous_filename":"make\/modules\/java.security.sasl\/Java.gmk","status":"copied"},{"patch":"@@ -67,1 +67,1 @@\n-    DISABLED_WARNINGS := try deprecation rawtypes unchecked serial cast removal preview, \\\n+    DISABLED_WARNINGS := try deprecation rawtypes unchecked serial cast removal preview dangling-doc-comments, \\\n","filename":"make\/test\/BuildTestLib.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1062,0 +1062,5 @@\n+            @Override\n+            public JCDiagnostic.DiagnosticPosition getPos() {\n+                return null;\n+            }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/api\/JavacTrees.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,0 +55,4 @@\n+    \/** The Lint to use when {@link #immediate(Lint)} is used,\n+     * instead of {@link #setPos(DiagnosticPosition)}. *\/\n+    private Lint immediateLint;\n+\n@@ -59,0 +63,1 @@\n+        immediateLint = Lint.instance(context);\n@@ -66,1 +71,1 @@\n-        void report();\n+        void report(Lint lint);\n@@ -80,1 +85,1 @@\n-            logger.report();\n+            logger.report(immediateLint);\n@@ -92,1 +97,1 @@\n-    public void flush(DiagnosticPosition pos) {\n+    public void flush(DiagnosticPosition pos, Lint lint) {\n@@ -96,1 +101,1 @@\n-                lintLogger.report();\n+                lintLogger.report(lint);\n@@ -115,1 +120,2 @@\n-    public DiagnosticPosition immediate() {\n+    public DiagnosticPosition immediate(Lint lint) {\n+        immediateLint = lint;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/DeferredLintHandler.java","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -183,0 +183,6 @@\n+        \/**\n+         * Warn about\"dangling\" documentation comments,\n+         * not attached to any declaration.\n+         *\/\n+        DANGLING_DOC_COMMENTS(\"dangling-doc-comments\"),\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Lint.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -257,1 +257,1 @@\n-                            : deferredLintHandler.immediate();\n+                            : deferredLintHandler.immediate(lint);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Annotate.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -982,1 +982,1 @@\n-            deferredLintHandler.flush(tree.pos());\n+            deferredLintHandler.flush(tree.pos(), lint);\n@@ -1283,1 +1283,1 @@\n-            deferredLintHandler.flush(tree.pos());\n+            deferredLintHandler.flush(tree.pos(), lint);\n@@ -5326,1 +5326,1 @@\n-            deferredLintHandler.flush(env.tree.pos());\n+            deferredLintHandler.flush(env.tree.pos(), lint);\n@@ -5501,1 +5501,1 @@\n-                deferredLintHandler.flush(env.tree);\n+                deferredLintHandler.flush(env.tree, env.info.lint);\n@@ -5551,1 +5551,1 @@\n-            deferredLintHandler.flush(tree.pos());\n+            deferredLintHandler.flush(tree.pos(), lint);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -676,1 +676,1 @@\n-            deferredLintHandler.report(() -> {\n+            deferredLintHandler.report(_l -> {\n@@ -1353,1 +1353,1 @@\n-            deferredLintHandler.report(() -> {\n+            deferredLintHandler.report(_l -> {\n@@ -3812,1 +3812,1 @@\n-            deferredLintHandler.report(() -> warnDeprecated(pos.get(), s));\n+            deferredLintHandler.report(_l -> warnDeprecated(pos.get(), s));\n@@ -3818,1 +3818,1 @@\n-            deferredLintHandler.report(() -> {\n+            deferredLintHandler.report(_l -> {\n@@ -3837,1 +3837,1 @@\n-                    deferredLintHandler.report(() -> warnPreviewAPI(pos, Warnings.IsPreview(s)));\n+                    deferredLintHandler.report(_l -> warnPreviewAPI(pos, Warnings.IsPreview(s)));\n@@ -3840,1 +3840,1 @@\n-                    deferredLintHandler.report(() -> warnPreviewAPI(pos, Warnings.IsPreviewReflective(s)));\n+                    deferredLintHandler.report(_l -> warnPreviewAPI(pos, Warnings.IsPreviewReflective(s)));\n@@ -3849,1 +3849,1 @@\n-                deferredLintHandler.report(() -> warnDeclaredUsingPreview(pos, s));\n+                deferredLintHandler.report(_l -> warnDeclaredUsingPreview(pos, s));\n@@ -3856,1 +3856,1 @@\n-            deferredLintHandler.report(() -> warnRestrictedAPI(pos, s));\n+            deferredLintHandler.report(_l -> warnRestrictedAPI(pos, s));\n@@ -4105,1 +4105,1 @@\n-                deferredLintHandler.report(() -> warnDivZero(pos));\n+                deferredLintHandler.report(_l -> warnDivZero(pos));\n@@ -4118,1 +4118,1 @@\n-            deferredLintHandler.report(() -> {\n+            deferredLintHandler.report(_l -> {\n@@ -4322,1 +4322,1 @@\n-                            deferredLintHandler.report(() -> {\n+                            deferredLintHandler.report(_l -> {\n@@ -4677,1 +4677,1 @@\n-            deferredLintHandler.report(() -> {\n+            deferredLintHandler.report(_l -> {\n@@ -4687,1 +4687,1 @@\n-            deferredLintHandler.report(() -> {\n+            deferredLintHandler.report(_l -> {\n@@ -4696,1 +4696,1 @@\n-            deferredLintHandler.report(() -> {\n+            deferredLintHandler.report(_l -> {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -374,1 +374,1 @@\n-            DiagnosticPosition prevLintPos = deferredLintHandler.immediate();\n+            DiagnosticPosition prevLintPos = deferredLintHandler.immediate(lint);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TypeEnter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,0 +37,2 @@\n+import com.sun.tools.javac.tree.EndPosTable;\n+import com.sun.tools.javac.tree.JCTree;\n@@ -1421,0 +1423,2 @@\n+        DiagnosticPosition pos;\n+\n@@ -1442,0 +1446,6 @@\n+            this.pos = new SimpleDiagnosticPosition(pos) {\n+                @Override\n+                public int getEndPosition(EndPosTable endPosTable) {\n+                    return endPos;\n+                }\n+            };\n@@ -1453,0 +1463,4 @@\n+        public DiagnosticPosition getPos() {\n+            return pos;\n+        }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavaTokenizer.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -114,0 +114,6 @@\n+    \/** A map associating \"other nearby documentation comments\"\n+     *  with the preferred documentation comment for a declaration. *\/\n+    protected Map<Comment, List<Comment>> danglingComments = new HashMap<>();\n+    \/** Handler for deferred diagnostics. *\/\n+    protected final DeferredLintHandler deferredLintHandler;\n+\n@@ -184,0 +190,1 @@\n+        this.deferredLintHandler = fac.deferredLintHandler;\n@@ -208,0 +215,1 @@\n+        this.deferredLintHandler = parser.deferredLintHandler;\n@@ -554,0 +562,53 @@\n+    \/** Record nearby documentation comments against the\n+     *  primary documentation comment for a declaration.\n+     *\n+     *  Dangling documentation comments are handled as follows.\n+     *  1. {@code Scanner} adds all doc comments to a queue of\n+     *     recent doc comments. The queue is flushed whenever\n+     *     it is known that the recent doc comments should be\n+     *     ignored and should not cause any warnings.\n+     *  2. The primary documentation comment is the one obtained\n+     *     from the first token of any declaration.\n+     *     (using {@code token.getDocComment()}.\n+     *  3. At the end of the \"signature\" of the declaration\n+     *     (that is, before any initialization or body for the\n+     *     declaration) any other \"recent\" comments are saved\n+     *     in a map using the primary comment as a key,\n+     *     using this method, {@code saveDanglingComments}.\n+     *  4. When the tree node for the declaration is finally\n+     *     available, and the primary comment, if any,\n+     *     is \"attached\", (in {@link #attach}) any related\n+     *     dangling comments are also attached to the tree node\n+     *     by registering them using the {@link #deferredLintHandler}.\n+     *  5. (Later) Warnings may be genereated for the dangling\n+     *     comments, subject to the {@code -Xlint} and\n+     *     {@code @SuppressWarnings}.\n+     *\n+     *  @param dc the primary documentation comment\n+     *\/\n+    private void saveDanglingDocComments(Comment dc) {\n+        var recentComments = S.getDocComments();\n+\n+        switch (recentComments.size()) {\n+            case 0:\n+                \/\/ no recent comments\n+                return;\n+\n+            case 1:\n+                if (recentComments.peek() == dc) {\n+                    \/\/ no other recent comments\n+                    recentComments.remove();\n+                    return;\n+                }\n+        }\n+\n+        var lb = new ListBuffer<Comment>();\n+        while (!recentComments.isEmpty()) {\n+            var c = recentComments.remove();\n+            if (c != dc) {\n+                lb.add(c);\n+            }\n+        }\n+        danglingComments.put(dc, lb.toList());\n+    }\n+\n@@ -556,0 +617,4 @@\n+     *  If there are any related \"dangling comments\", register\n+     *  diagnostics to be handled later, when @SuppressWarnings\n+     *  can be taken into account.\n+     *\n@@ -561,1 +626,0 @@\n-\/\/          System.out.println(\"doc comment = \");System.out.println(dc);\/\/DEBUG\n@@ -564,0 +628,47 @@\n+        reportDanglingComments(tree, dc);\n+    }\n+\n+    \/** Reports all dangling comments associated with the\n+     *  primary comment for a declaration against the position\n+     *  of the tree node for a declaration.\n+     *\n+     * @param tree the tree node for the declaration\n+     * @param dc the primary comment for the declaration\n+     *\/\n+    void reportDanglingComments(JCTree tree, Comment dc) {\n+        var list = danglingComments.remove(dc);\n+        if (list != null) {\n+            var prevPos = deferredLintHandler.setPos(tree);\n+            try {\n+                list.forEach(this::reportDanglingDocComment);\n+            } finally {\n+                deferredLintHandler.setPos(prevPos);\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Reports an individual dangling comment using the {@link #deferredLintHandler}.\n+     * The comment may or not may generate an actual diagnostic, depending on\n+     * the settings for {@code -Xlint} and\/or {@code @SuppressWarnings}.\n+     *\n+     * @param c the comment\n+     *\/\n+    void reportDanglingDocComment(Comment c) {\n+        var pos = c.getPos();\n+        if (pos != null) {\n+            deferredLintHandler.report(lint -> {\n+                if (lint.isEnabled(Lint.LintCategory.DANGLING_DOC_COMMENTS)) {\n+                    log.warning(Lint.LintCategory.DANGLING_DOC_COMMENTS,\n+                            pos, Warnings.DanglingDocComment);\n+                }\n+            });\n+        }\n+    }\n+\n+    \/**\n+     * Ignores any recent documentation comments found by the scanner,\n+     * such as those that cannot be associated with a nearby declaration.\n+     *\/\n+    private void ignoreDanglingComments() {\n+        S.getDocComments().clear();\n@@ -2702,0 +2813,1 @@\n+            ignoreDanglingComments(); \/\/ ignore any comments from before the '{'\n@@ -2754,0 +2866,1 @@\n+        ignoreDanglingComments();   \/\/ ignore any comments from before the '{'\n@@ -2785,0 +2898,1 @@\n+            ignoreDanglingComments();  \/\/ ignore comments not consumed by the statement\n@@ -2856,1 +2970,1 @@\n-                return localVariableDeclarations(mods, t);\n+                return localVariableDeclarations(mods, t, dc);\n@@ -2942,0 +3056,1 @@\n+        dc = token.docComment();\n@@ -2943,1 +3058,0 @@\n-            dc = token.docComment();\n@@ -2956,1 +3070,1 @@\n-                return localVariableDeclarations(mods, t);\n+                return localVariableDeclarations(mods, t, dc);\n@@ -2967,1 +3081,5 @@\n-        private List<JCStatement> localVariableDeclarations(JCModifiers mods, JCExpression type) {\n+        private List<JCStatement> localVariableDeclarations(JCModifiers mods, JCExpression type, Comment dc) {\n+            if (dc != null) {\n+                \/\/ ignore a well-placed doc comment, but save any misplaced ones\n+                saveDanglingDocComments(dc);\n+            }\n@@ -2995,0 +3113,1 @@\n+        ignoreDanglingComments(); \/\/ ignore comments before statement\n@@ -3725,0 +3844,2 @@\n+        saveDanglingDocComments(dc);\n+\n@@ -4297,0 +4418,3 @@\n+\n+        saveDanglingDocComments(dc);\n+\n@@ -4319,0 +4443,3 @@\n+\n+        saveDanglingDocComments(dc);\n+\n@@ -4378,0 +4505,3 @@\n+\n+        saveDanglingDocComments(dc);\n+\n@@ -4423,0 +4553,2 @@\n+        saveDanglingDocComments(dc);\n+\n@@ -4550,0 +4682,3 @@\n+\n+        saveDanglingDocComments(dc);\n+\n@@ -4552,0 +4687,1 @@\n+\n@@ -4656,0 +4792,1 @@\n+                ignoreDanglingComments();   \/\/ no declaration with which dangling comments can be associated\n@@ -4933,0 +5070,3 @@\n+\n+            saveDanglingDocComments(dc);\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":145,"deletions":5,"binary":false,"changes":150,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+import java.util.Queue;\n+\n@@ -92,0 +94,12 @@\n+\n+    \/**\n+     * Returns a queue for the documentation comments encountered\n+     * in a compilation unit.\n+     *\n+     * Comments may be added to this queue by the implementation;\n+     * clients may remove them from the queue as they are analyzed.\n+     *\n+     * Note: all comments may also be associated with the following\n+     * token.\n+     *\/\n+    Queue<Comment> getDocComments();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/Lexer.java","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,2 @@\n+import com.sun.tools.javac.code.DeferredLintHandler;\n+import com.sun.tools.javac.code.Lint;\n@@ -71,0 +73,1 @@\n+    final DeferredLintHandler deferredLintHandler;\n@@ -86,0 +89,1 @@\n+        this.deferredLintHandler = DeferredLintHandler.instance(context);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/ParserFactory.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import java.util.ArrayDeque;\n@@ -31,0 +32,1 @@\n+import java.util.Queue;\n@@ -61,0 +63,5 @@\n+    \/** Queue of recently seen documentation comments.\n+     *  It is assumed the queue will typically be small.\n+     *\/\n+    private final Queue<Comment> docComments = new ArrayDeque<>();\n+\n@@ -118,0 +125,9 @@\n+            if (token.comments != null) {\n+                for (var c : token.comments) {\n+                    switch (c.getStyle()) {\n+                        case JAVADOC -> {\n+                            docComments.add(c);\n+                        }\n+                    }\n+                }\n+            }\n@@ -132,0 +148,5 @@\n+    @Override\n+    public Queue<Comment> getDocComments() {\n+        return docComments;\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/Scanner.java","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -283,0 +283,1 @@\n+        JCDiagnostic.DiagnosticPosition getPos();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/Tokens.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+import java.util.Queue;\n@@ -149,0 +150,5 @@\n+        @Override\n+        public Queue<Tokens.Comment> getDocComments() {\n+            return S.getDocComments();\n+        }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/VirtualParser.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1885,0 +1885,3 @@\n+compiler.warn.dangling.doc.comment=\\\n+    documentation comment is not attached to any declaration\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -192,0 +192,3 @@\n+javac.opt.Xlint.desc.dangling-doc-comments=\\\n+    Warn about dangling documentation comments, not attached to any declaration.\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/javac.properties","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -221,0 +221,5 @@\n+            @Override\n+            public JCDiagnostic.DiagnosticPosition getPos() {\n+                return null;\n+            }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/DocTreeMaker.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -156,0 +156,2 @@\n+ * <tr><th scope=\"row\">{@code dangling-doc-comments} <td>issues related to \"dangling\" documentation comments,\n+ *                                                       not attached to a declaration\n","filename":"src\/jdk.compiler\/share\/classes\/module-info.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -711,0 +711,3 @@\n+\\f[V]dangling-doc-comments\\f[R]: Warns about extra or misplaced\n+documentation comments near the beginning of a declaration.\n+.IP \\[bu] 2\n","filename":"src\/jdk.compiler\/share\/man\/javac.1","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -135,1 +135,0 @@\n-        @Override\n@@ -137,0 +136,1 @@\n+        @Override\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/tool\/JavadocMemberEnter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-.\\\" Copyright (c) 1994, 2023, Oracle and\/or its affiliates. All rights reserved.\n+.\\\" Copyright (c) 1994, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -99,0 +99,16 @@\n+.SS Documentation Comments\n+.PP\n+The \\f[V]javadoc\\f[R] tool uses the documentation comment, if any, that\n+immediately precedes the beginning of the declaration, whether that is\n+an annotation, modifier, or the name being declared.\n+If there are multiple documentation comments before the declaration,\n+only the last one (closest to the declaration) will be used.\n+If there are any documentation comments after the beginning of the\n+declaration, they will be ignored.\n+To check for any extra or misplaced documentation comments, compile your\n+source code with the \\f[V]javac\\f[R] option \\f[V]-Xlint\\f[R], or more\n+specifically, \\f[V]-Xlint:dangling-doc-comments\\f[R].\n+Within a source file, you may use suppress any warnings generated by\n+these options by using\n+\\f[V]\\[at]SuppressWarnings(\\[dq]dangling-doc-comments\\[dq])\\f[R] on a\n+suitable enclosing declaration.\n@@ -113,2 +129,2 @@\n-see \\f[B]Conformance requirements\\f[R]\n-[https:\/\/www.w3.org\/TR\/html5\/infrastructure.html#conformance-requirements]\n+see \\f[B]Conformance requirements for authors\\f[R]\n+[https:\/\/html.spec.whatwg.org\/multipage\/introduction.html#conformance-requirements-for-authors]\n@@ -515,2 +531,4 @@\n-This command inserts the following line in the head of every generated\n-page:\n+This command inserts the following line, containing a\n+\\f[B]\\f[VB]meta\\f[B] element\\f[R]\n+[https:\/\/html.spec.whatwg.org\/multipage\/semantics.html#the-meta-element]\n+in the head of every generated page:\n@@ -523,4 +541,0 @@\n-.PP\n-The \\f[V]meta\\f[R] tag is described in the \\f[B]HTML standard (4197265\n-and 4137321), HTML Document Representation\\f[R]\n-[http:\/\/www.w3.org\/TR\/REC-html40\/charset.html#h-5.2.2].\n@@ -726,2 +740,2 @@\n-the \\f[B]URL Memo: Uniform Resource Locators\\f[R]\n-[http:\/\/www.ietf.org\/rfc\/rfc1738.txt].\n+the \\f[B]RFC 1738: Uniform Resource Locators (URL)\\f[R]\n+[https:\/\/www.rfc-editor.org\/info\/rfc1738].\n","filename":"src\/jdk.javadoc\/share\/man\/javadoc.1","additions":25,"deletions":11,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-\/**\n+\/*\n","filename":"test\/langtools\/tools\/javac\/OverrideChecks\/6199153\/T6199153.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,7 @@\n+DanglingDocCommentsClass.java:8:1: compiler.warn.dangling.doc.comment\n+DanglingDocCommentsClass.java:11:1: compiler.warn.dangling.doc.comment\n+DanglingDocCommentsClass.java:12:8: compiler.warn.dangling.doc.comment\n+DanglingDocCommentsClass.java:12:69: compiler.warn.dangling.doc.comment\n+DanglingDocCommentsClass.java:13:5: compiler.warn.dangling.doc.comment\n+DanglingDocCommentsClass.java:17:5: compiler.warn.dangling.doc.comment\n+6 warnings\n","filename":"test\/langtools\/tools\/javac\/danglingDocComments\/DanglingDocCommentsClass.enabled.out","additions":7,"deletions":0,"binary":false,"changes":7,"status":"added"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @compile -Xlint:dangling-doc-comments DanglingDocCommentsClass.java\n+ * @compile\/ref=empty.out -XDrawDiagnostics DanglingDocCommentsClass.java\n+ * @compile\/ref=DanglingDocCommentsClass.enabled.out -XDrawDiagnostics -Xlint:dangling-doc-comments DanglingDocCommentsClass.java\n+ *\/\n+\n+\/** Bad\/Extra Class Comment. *\/\n+\/** Good Class Comment. *\/\n+@Deprecated\n+\/** Misplaced: after anno. *\/\n+public \/** Misplaced: after mods. *\/ class DanglingDocCommentsClass \/** Misplaced: after ident *\/ {\n+    \/** Bad\/Extra Field Comment. *\/\n+    \/** Good Field Comment. *\/\n+    public int i;\n+\n+    \/** Bad\/Extra Method Comment. *\/\n+    \/** Good Method Comment. *\/\n+    public void m1() { }\n+\n+    @SuppressWarnings(\"dangling-doc-comments\")\n+    \/** Bad\/misplaced\/suppressed comment. *\/\n+    public void m2() { }\n+\n+    public void m3(boolean b) {\n+        \/****************\n+         * Box comment  *\n+         ***************\/\n+        if (b) return;\n+    }\n+\n+    public void m4a() {\n+        \/** Not a doc comment. *\/\n+        System.out.println();\n+        \/** Not a doc comment; not dangling for m4b *\/\n+    }\n+\n+    \/** Good comment for m4b; no dangling comments. *\/\n+    public void m4b() { }\n+\n+    \/** Comment ignored here: does not affect decls in block *\/\n+    static {\n+        \/** Good comment. *\/\n+        int i = 0;\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/danglingDocComments\/DanglingDocCommentsClass.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -0,0 +1,8 @@\n+DanglingDocCommentsEnum.java:8:1: compiler.warn.dangling.doc.comment\n+DanglingDocCommentsEnum.java:11:1: compiler.warn.dangling.doc.comment\n+DanglingDocCommentsEnum.java:12:8: compiler.warn.dangling.doc.comment\n+DanglingDocCommentsEnum.java:12:67: compiler.warn.dangling.doc.comment\n+DanglingDocCommentsEnum.java:14:5: compiler.warn.dangling.doc.comment\n+DanglingDocCommentsEnum.java:20:5: compiler.warn.dangling.doc.comment\n+DanglingDocCommentsEnum.java:26:5: compiler.warn.dangling.doc.comment\n+7 warnings\n","filename":"test\/langtools\/tools\/javac\/danglingDocComments\/DanglingDocCommentsEnum.enabled.out","additions":8,"deletions":0,"binary":false,"changes":8,"status":"added"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @compile -Xlint:dangling-doc-comments DanglingDocCommentsEnum.java\n+ * @compile\/ref=empty.out -XDrawDiagnostics DanglingDocCommentsEnum.java\n+ * @compile\/ref=DanglingDocCommentsEnum.enabled.out -XDrawDiagnostics -Xlint:dangling-doc-comments DanglingDocCommentsEnum.java\n+ *\/\n+\n+\/** Bad\/Extra Enum Comment. *\/\n+\/** Good Enum Comment. *\/\n+@Deprecated\n+\/** Misplaced: after anno. *\/\n+public \/** Misplaced: after mods. *\/ enum DanglingDocCommentsEnum \/** Misplaced: after ident *\/\n+{\n+    \/** Bad\/Extra enum-member Comment. *\/\n+    \/**\n+     * Good enum-member Comment.\n+     *\/\n+    E1;\n+\n+    \/** Bad\/Extra Field Comment. *\/\n+    \/**\n+     * Good Field Comment.\n+     *\/\n+    public int i;\n+\n+    \/** Bad\/Extra Method Comment. *\/\n+    \/**\n+     * Good Method Comment.\n+     *\/\n+    public void m1() {\n+    }\n+\n+    @SuppressWarnings(\"dangling-doc-comments\")\n+    \/** Bad\/misplaced\/suppressed comment. *\/\n+    public void m2() {\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/danglingDocComments\/DanglingDocCommentsEnum.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"","filename":"test\/langtools\/tools\/javac\/danglingDocComments\/empty.out","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/langtools\/tools\/javac\/processing\/warnings\/LintProcessing\/empty.out","status":"copied"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-\/**\n+\/*\n@@ -28,1 +28,1 @@\n- * @compile -Xlint -Werror DeprecatedDocComment3.java\n+ * @compile -Xlint:-dangling-doc-comments -Werror DeprecatedDocComment3.java\n","filename":"test\/langtools\/tools\/javac\/depDocComment\/DeprecatedDocComment3.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.warn.dangling.doc.comment\n+\/\/ options: -Xlint:dangling-doc-comments\n+\n+\/** Comment 1. *\/\n+\/** Comment 2. *\/\n+class DanglingDocCommentWarning { }\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/DanglingDocCommentWarning\/DanglingDocCommentWarning.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -1,1 +1,1 @@\n-\/**\n+\/*\n","filename":"test\/langtools\/tools\/javac\/platform\/PreviewAPIsWithRelease.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n- * @compile\/ref=DepAnn.out -XDrawDiagnostics -Xlint:all DepAnn.java\n+ * @compile\/ref=DepAnn.out -XDrawDiagnostics -Xlint:all,-dangling-doc-comments DepAnn.java\n","filename":"test\/langtools\/tools\/javac\/warnings\/DepAnn.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-\/**\n+\/*\n","filename":"test\/langtools\/tools\/javac\/warnings\/Deprecation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-\/**\n+\/*\n","filename":"test\/langtools\/tools\/javac\/warnings\/NestedDeprecation\/NestedDeprecation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-\/**\n+\/*\n","filename":"test\/langtools\/tools\/javac\/warnings\/Unchecked.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-\/**\n+\/*\n","filename":"test\/langtools\/tools\/javac\/warnings\/VerifyLintDescriptions.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-\/**\n+\/*\n","filename":"test\/langtools\/tools\/javac\/warnings\/suppress\/T6480588.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}