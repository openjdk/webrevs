{"files":[{"patch":"@@ -776,14 +776,0 @@\n-\/\/ Stress testing. Dedicated threads revert optimizations based on escape analysis concurrently to\n-\/\/ the running java application.  Configured with vm options DeoptimizeObjectsALot*.\n-class DeoptimizeObjectsALotThread : public JavaThread {\n-\n-  static void deopt_objs_alot_thread_entry(JavaThread* thread, TRAPS);\n-  void deoptimize_objects_alot_loop_single();\n-  void deoptimize_objects_alot_loop_all();\n-\n-public:\n-  DeoptimizeObjectsALotThread() : JavaThread(&deopt_objs_alot_thread_entry) { }\n-\n-  bool is_hidden_from_external_view() const      { return true; }\n-};\n-\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,16 @@\n+#if defined(ASSERT) && COMPILER2_OR_JVMCI\n+\/\/ Stress testing. Dedicated threads revert optimizations based on escape analysis concurrently to\n+\/\/ the running java application.  Configured with vm options DeoptimizeObjectsALot*.\n+class DeoptimizeObjectsALotThread : public JavaThread {\n+\n+  static void deopt_objs_alot_thread_entry(JavaThread* thread, TRAPS);\n+  void deoptimize_objects_alot_loop_single();\n+  void deoptimize_objects_alot_loop_all();\n+\n+public:\n+  DeoptimizeObjectsALotThread() : JavaThread(&deopt_objs_alot_thread_entry) { }\n+\n+  bool is_hidden_from_external_view() const      { return true; }\n+};\n+#endif\n+\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.hpp","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1264,0 +1264,2 @@\n+        DEBUG_ONLY(COMPILER2_OR_JVMCI_PRESENT(                            \\\n+          declare_type(DeoptimizeObjectsALotThread, JavaThread)))         \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+package sun.jvm.hotspot.runtime;\n+\n+import java.io.*;\n+\n+import sun.jvm.hotspot.debugger.Address;\n+\n+public class DeoptimizeObjectsALotThread extends JavaThread {\n+\n+  public DeoptimizeObjectsALotThread (Address addr) {\n+    super(addr);\n+  }\n+\n+  public boolean isJavaThread() { return false; }\n+  public boolean isHiddenFromExternalView() { return true; }\n+\n+  public boolean isDeoptimizeObjectsALotThread() { return true; }\n+\n+}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/runtime\/DeoptimizeObjectsALotThread.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -92,0 +92,1 @@\n+  public boolean   isDeoptimizeObjectsALotThread() { return false; }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/runtime\/Thread.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -158,0 +158,1 @@\n+        virtualConstructor.addMapping(\"DeoptimizeObjectsALotThread\", DeoptimizeObjectsALotThread.class);\n@@ -166,2 +167,2 @@\n-      StringDedupThread, AttachListenerThread and ServiceThread.\n-      The latter seven subclasses of the former. Most operations\n+      StringDedupThread, AttachListenerThread, DeoptimizeObjectsALotThread and\n+      ServiceThread. The latter seven subclasses of the former. Most operations\n@@ -198,1 +199,1 @@\n-            \" StringDedupThread, NotificationThread, ServiceThread or JvmtiAgentThread)\", e);\n+            \" DeoptimizeObjectsALotThread, StringDedupThread, NotificationThread, ServiceThread or JvmtiAgentThread)\", e);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/runtime\/Threads.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"}]}