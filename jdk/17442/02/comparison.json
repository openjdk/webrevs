{"files":[{"patch":"@@ -1584,0 +1584,58 @@\n+\n+class AggregateTask : public WorkerTask {\n+private:\n+  static constexpr size_t num_regions_in_stripe = 4;\n+  uint _num_workers;\n+\n+  static void account_for_obj(HeapWord* obj_start, size_t obj_size) {\n+    ParallelCompactData& data = PSParallelCompact::summary_data();\n+    data.add_obj(obj_start, obj_size);\n+  }\n+\n+  static void process_range(HeapWord* const start, HeapWord* const end) {\n+    const ParMarkBitMap* const bitmap = PSParallelCompact::mark_bitmap();\n+    HeapWord* cur_addr = start;\n+\n+    do {\n+      HeapWord* obj_start = bitmap->find_obj_beg(cur_addr, end);\n+      if (obj_start >= end) {\n+        return;\n+      }\n+      \/\/ Found an obj-start in this range\n+      size_t obj_size = cast_to_oop(obj_start)->size();\n+      account_for_obj(obj_start, obj_size);\n+      cur_addr = obj_start + obj_size;\n+    } while (cur_addr < end);\n+  }\n+\n+public:\n+  explicit AggregateTask(ParallelScavengeHeap* heap) :\n+    WorkerTask(\"AggregateLivenessInfoTask\"),\n+    _num_workers(heap->workers().active_workers())\n+    {}\n+\n+  void work(uint worker_id) override {\n+    PSYoungGen* young_gen = ParallelScavengeHeap::young_gen();\n+    MutableSpace* space_arr[] = {\n+      ParallelScavengeHeap::old_gen()->object_space(),\n+      young_gen->eden_space(),\n+      young_gen->from_space(),\n+      young_gen->to_space(),\n+    };\n+\n+    size_t stripe_len_in_words = num_regions_in_stripe * ParallelCompactData::RegionSize;\n+    size_t slice_len_in_words = stripe_len_in_words * _num_workers;\n+\n+    for (MutableSpace* space : space_arr) {\n+      HeapWord* start = space->bottom() + worker_id * stripe_len_in_words;\n+      HeapWord* top = space->top();\n+      for (\/* empty *\/; start < top; start += slice_len_in_words) {\n+        HeapWord* stripe_l = start;\n+        HeapWord* stripe_r = MIN2(start + stripe_len_in_words, top);\n+\n+        process_range(stripe_l, stripe_r);\n+      }\n+    }\n+  }\n+};\n+\n@@ -1588,0 +1646,7 @@\n+  {\n+    GCTraceTime(Debug, gc, phases) tm(\"Aggregate Liveness Info\", &_gc_timer);\n+    ParallelScavengeHeap* heap = ParallelScavengeHeap::heap();\n+    AggregateTask task{heap};\n+    heap->workers().run_task(&task);\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":65,"deletions":0,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -311,1 +311,0 @@\n-    \/\/ These are atomic.\n@@ -313,0 +312,2 @@\n+\n+    \/\/ These are atomic.\n@@ -411,1 +412,0 @@\n-  void add_obj(oop p, size_t len) { add_obj(cast_from_oop<HeapWord*>(p), len); }\n@@ -576,1 +576,1 @@\n-  Atomic::add(&_dc_and_los, static_cast<region_sz_t>(words));\n+  _dc_and_los += static_cast<region_sz_t>(words);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -103,1 +103,0 @@\n-    _summary_data.add_obj(obj, obj_size);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.inline.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}