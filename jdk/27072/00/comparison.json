{"files":[{"patch":"@@ -36,0 +36,1 @@\n+import jdk.jfr.internal.query.Function.FunctionFactory;\n@@ -140,0 +141,2 @@\n+    public FunctionFactory functionFactory;\n+\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/query\/Field.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,4 @@\n+    interface FunctionFactory {\n+        Function newFunction();\n+    }\n+\n@@ -42,1 +46,1 @@\n-    public static Function create(Field field) {\n+    public static FunctionFactory createFactory(Field field) {\n@@ -46,1 +50,1 @@\n-            return new FirstNonNull();\n+            return () -> new FirstNonNull();\n@@ -49,1 +53,1 @@\n-            return new Container(new ArrayList<>());\n+            return () -> new Container(new ArrayList<>());\n@@ -53,1 +57,1 @@\n-            return new Container(new LinkedHashSet<>());\n+            return () -> new Container(new LinkedHashSet<>());\n@@ -58,1 +62,1 @@\n-                return new TimeDifference();\n+                return () -> new TimeDifference();\n@@ -60,1 +64,1 @@\n-                return new Difference();\n+                return () -> new Difference();\n@@ -66,1 +70,1 @@\n-                return new TimespanFunction(new StandardDeviation());\n+                return () -> new TimespanFunction(new StandardDeviation());\n@@ -68,1 +72,1 @@\n-                return new StandardDeviation();\n+                return () -> new StandardDeviation();\n@@ -74,1 +78,1 @@\n-                return new TimespanFunction(new Median());\n+                return () -> new TimespanFunction(new Median());\n@@ -76,1 +80,1 @@\n-                return new Median();\n+                return () -> new Median();\n@@ -86,1 +90,0 @@\n-\n@@ -95,1 +98,1 @@\n-            return new Maximum();\n+            return () -> new Maximum();\n@@ -98,1 +101,1 @@\n-            return new Minimum();\n+            return () -> new Minimum();\n@@ -102,1 +105,1 @@\n-                return new SumDuration();\n+                return () -> new SumDuration();\n@@ -105,1 +108,1 @@\n-                return new SumDouble();\n+                return () -> new SumDouble();\n@@ -108,1 +111,1 @@\n-                return new SumLong();\n+                return () -> new SumLong();\n@@ -113,1 +116,1 @@\n-            return new First();\n+            return () -> new First();\n@@ -116,1 +119,1 @@\n-            return new LastBatch(field);\n+            return () -> new LastBatch(field);\n@@ -119,1 +122,1 @@\n-            return new Last();\n+            return () -> new Last();\n@@ -123,1 +126,1 @@\n-                return new AverageDuration();\n+                return () -> new AverageDuration();\n@@ -125,1 +128,1 @@\n-                return new Average();\n+                return () -> new Average();\n@@ -129,1 +132,1 @@\n-            return new Count();\n+            return () -> new Count();\n@@ -132,1 +135,1 @@\n-            return new Unique();\n+            return () -> new Unique();\n@@ -134,1 +137,1 @@\n-        return new Null();\n+        return () -> new Null();\n@@ -510,2 +513,1 @@\n-    private static Function createPercentile(Field field, double percentile) {\n-        Percentile p = new Percentile(percentile);\n+    private static FunctionFactory createPercentile(Field field, double percentile) {\n@@ -513,1 +515,1 @@\n-            return new TimespanFunction(p);\n+            return () -> new TimespanFunction(new Percentile(percentile));\n@@ -515,1 +517,1 @@\n-            return p;\n+            return () -> new Percentile(percentile);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/query\/Function.java","additions":31,"deletions":29,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -125,0 +125,3 @@\n+        for (Field field : fields) {\n+            field.functionFactory = Function.createFactory(field);\n+        }\n@@ -171,1 +174,1 @@\n-            functions[i] = Function.create(fields.get(i));\n+            functions[i] = fields.get(i).functionFactory.newFunction();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/query\/Histogram.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}