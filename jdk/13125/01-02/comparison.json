{"files":[{"patch":"@@ -282,1 +282,0 @@\n-#define init_defaults_definition(name, type, dvalue, compiler) this->name##Option = dvalue;\n@@ -284,0 +283,1 @@\n+#define init_defaults_definition(name, type, dvalue, compiler) this->name##Option = dvalue;\n@@ -287,0 +287,1 @@\n+#undef init_defaults_definition\n@@ -299,0 +300,6 @@\n+\n+#define free_string_flags(name, type, dvalue, cc_flag) if (_modified[name##Index]) os::free(const_cast<char*>(name##Option));\n+  compilerdirectives_common_string_flags(free_string_flags)\n+  compilerdirectives_c2_string_flags(free_string_flags)\n+  compilerdirectives_c1_string_flags(free_string_flags)\n+#undef free_string_flags\n@@ -402,0 +409,1 @@\n+#undef init_default_cc\n@@ -580,3 +588,15 @@\n-    compilerdirectives_common_flags(copy_members_definition)\n-    compilerdirectives_c2_flags(copy_members_definition)\n-    compilerdirectives_c1_flags(copy_members_definition)\n+    compilerdirectives_common_other_flags(copy_members_definition)\n+    compilerdirectives_c2_other_flags(copy_members_definition)\n+    compilerdirectives_c1_other_flags(copy_members_definition)\n+  #undef copy_members_definition\n+\n+#define copy_string_members_definition(name, type, dvalue, cc_flag)          \\\n+  if (src->_modified[name##Index]) {                                         \\\n+    set->name##Option = os::strdup_check_oom(src->name##Option, mtCompiler); \\\n+  } else {                                                                   \\\n+    set->name##Option = src->name##Option;                                   \\\n+  }\n+  compilerdirectives_common_string_flags(copy_string_members_definition)\n+  compilerdirectives_c2_string_flags(copy_string_members_definition)\n+  compilerdirectives_c1_string_flags(copy_string_members_definition)\n+#undef copy_string_members_definition\n","filename":"src\/hotspot\/share\/compiler\/compilerDirectives.cpp","additions":24,"deletions":4,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-  #define compilerdirectives_common_flags(cflags) \\\n+  #define compilerdirectives_common_other_flags(cflags) \\\n@@ -53,2 +53,0 @@\n-    cflags(DisableIntrinsic,        ccstrlist, DisableIntrinsic, DisableIntrinsic) \\\n-    cflags(ControlIntrinsic,        ccstrlist, ControlIntrinsic, ControlIntrinsic) \\\n@@ -56,0 +54,6 @@\n+#define compilerdirectives_common_string_flags(cflags)                           \\\n+  cflags(DisableIntrinsic,        ccstrlist, DisableIntrinsic, DisableIntrinsic) \\\n+  cflags(ControlIntrinsic,        ccstrlist, ControlIntrinsic, ControlIntrinsic)\n+#define compilerdirectives_common_flags(cflags) \\\n+  compilerdirectives_common_other_flags(cflags) \\\n+  compilerdirectives_common_string_flags(cflags)\n@@ -58,1 +62,2 @@\n-  #define compilerdirectives_c1_flags(cflags)\n+  #define compilerdirectives_c1_other_flags(cflags)\n+  #define compilerdirectives_c1_string_flags(cflags)\n@@ -60,1 +65,2 @@\n-  #define compilerdirectives_c1_flags(cflags)\n+  #define compilerdirectives_c1_other_flags(cflags)\n+  #define compilerdirectives_c1_string_flags(cflags)\n@@ -63,0 +69,4 @@\n+#define compilerdirectives_c1_flags(cflags) \\\n+  compilerdirectives_c1_other_flags(cflags) \\\n+  compilerdirectives_c1_string_flags(cflags)\n+\n@@ -64,1 +74,1 @@\n-  #define compilerdirectives_c2_flags(cflags) \\\n+  #define compilerdirectives_c2_other_flags(cflags) \\\n@@ -72,1 +82,0 @@\n-NOT_PRODUCT(cflags(PrintIdealPhase,     ccstrlist, \"\", PrintIdealPhase)) \\\n@@ -80,0 +89,2 @@\n+#define compilerdirectives_c2_string_flags(cflags) \\\n+NOT_PRODUCT(cflags(PrintIdealPhase,     ccstrlist, \"\", PrintIdealPhase))\n@@ -81,1 +92,2 @@\n-  #define compilerdirectives_c2_flags(cflags)\n+  #define compilerdirectives_c2_other_flags(cflags)\n+  #define compilerdirectives_c2_string_flags(cflags)\n@@ -84,0 +96,4 @@\n+#define compilerdirectives_c2_flags(cflags) \\\n+  compilerdirectives_c2_other_flags(cflags) \\\n+  compilerdirectives_c2_string_flags(cflags)\n+\n@@ -140,0 +156,1 @@\n+#undef enum_of_flags\n@@ -150,0 +167,1 @@\n+#undef flag_store_definition\n@@ -153,3 +171,22 @@\n-  compilerdirectives_common_flags(set_function_definition)\n-  compilerdirectives_c2_flags(set_function_definition)\n-  compilerdirectives_c1_flags(set_function_definition)\n+  compilerdirectives_common_other_flags(set_function_definition)\n+  compilerdirectives_c2_other_flags(set_function_definition)\n+  compilerdirectives_c1_other_flags(set_function_definition)\n+#undef set_function_definition\n+\n+\/\/ Casting to get the same function signature for all setters. Used from parser.\n+\/\/\n+\/\/ IMPORTANT: Takes ownership, will use os::free. Ensure the memory was dynamically allocated on the\n+\/\/            C heap.\n+#define set_string_function_definition(name, type, dvalue, cc_flag) \\\n+void set_##name(void* value) {                                      \\\n+  if (_modified[name##Index]) {                                     \\\n+    os::free(const_cast<char*>(name##Option));                      \\\n+  }                                                                 \\\n+  type val = *(type*)value;                                         \\\n+  name##Option = val;                                               \\\n+  _modified[name##Index] = true;                                    \\\n+}\n+  compilerdirectives_common_string_flags(set_string_function_definition)\n+  compilerdirectives_c2_string_flags(set_string_function_definition)\n+  compilerdirectives_c1_string_flags(set_string_function_definition)\n+#undef set_string_function_definition\n@@ -174,0 +211,1 @@\n+#undef print_function_definition\n","filename":"src\/hotspot\/share\/compiler\/compilerDirectives.hpp","additions":49,"deletions":11,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -321,3 +321,1 @@\n-        (set->*test)((void *)&s);\n-\n-        bool valid = true;\n+        (set->*test)((void *)&s);  \/\/ Takes ownership.\n@@ -328,2 +326,1 @@\n-          valid = validator.is_valid();\n-          if (!valid) {\n+          if (!validator.is_valid()) {\n@@ -331,0 +328,1 @@\n+            return false;\n@@ -335,2 +333,1 @@\n-          valid = validator.is_valid();\n-          if (!valid) {\n+          if (!validator.is_valid()) {\n@@ -338,0 +335,1 @@\n+            return false;\n@@ -343,2 +341,1 @@\n-          valid = validator.is_valid();\n-          if (!valid) {\n+          if (!validator.is_valid()) {\n@@ -346,2 +343,1 @@\n-          } else {\n-            set->set_ideal_phase_mask(mask);\n+            return false;\n@@ -349,5 +345,1 @@\n-        }\n-\n-        FREE_C_HEAP_ARRAY(char, s);\n-        if (!valid) {\n-          return false;\n+          set->set_ideal_phase_mask(mask);\n","filename":"src\/hotspot\/share\/compiler\/directivesParser.cpp","additions":8,"deletions":16,"binary":false,"changes":24,"status":"modified"}]}