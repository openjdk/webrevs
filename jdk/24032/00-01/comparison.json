{"files":[{"patch":"@@ -348,1 +348,1 @@\n-            if (!body.isEmpty() && !Character.isWhitespace(body.charAt(0))) {\n+            if (!body.isEmpty() && body.charAt(0) != '\\n') {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/DocPretty.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -992,1 +992,0 @@\n-            boolean normalizeTags = !annos.contains(\"@NormalizeTags(false)\");\n@@ -997,1 +996,1 @@\n-            String normRaw = normalize(raw, isLineComment, normalizeTags);\n+            String normRaw = normalize(raw, isLineComment);\n@@ -1017,4 +1016,0 @@\n-         * Maintain contents of inline tags unless {@code normalizeTags} is\n-         * {@code false}. This should normally be {@code true}, but should be\n-         * set to {@code false} when there is syntactically invalid content\n-         * that might resemble an inline tag, but which is not so.\n@@ -1023,1 +1018,0 @@\n-         * @param normalizeTags whether to normalize inline tags\n@@ -1026,16 +1020,5 @@\n-        String normalize(String s, boolean isLineComment, boolean normalizeTags) {\n-            String s2 = (isLineComment ? s : s.stripIndent().trim())\n-                    .replaceFirst(\"\\\\.\\\\s*\\\\n *@(?![@*])\", \".\\n@\"); \/\/ Between block tags\n-            StringBuilder sb = new StringBuilder();\n-            Pattern p = Pattern.compile(\"(?i)\\\\{@([a-z][a-z0-9.:-]*)( )?\");\n-            Matcher m = p.matcher(s2);\n-            int start = 0;\n-            if (normalizeTags) {\n-                while (m.find(start)) {\n-                    sb.append(normalizeFragment(s2.substring(start, m.start())));\n-                    sb.append(m.group().trim());\n-                    start = copyLiteral(s2, m.end(), sb);\n-                }\n-            }\n-            sb.append(normalizeFragment(s2.substring(start)));\n-            return sb.toString()\n+        String normalize(String s, boolean isLineComment) {\n+            \/\/ See comment in MarkdownTest for explanation of dummy and Override\n+            return (isLineComment ? s : s.stripIndent().trim())\n+                    .replaceFirst(\"\\\\.\\\\s*\\\\n *@(?![@*])\", \".\\n@\")  \/\/ Between block tags\n+                    .replaceAll(\"\\n[ \\t]+@(?!([@*]|(dummy|Override)))\", \"\\n@\")\n@@ -1045,29 +1028,0 @@\n-\n-        \/\/ See comment in MarkdownTest for explanation of dummy and Override\n-        String normalizeFragment(String s) {\n-            return s.replaceAll(\"\\n[ \\t]+@(?!([@*]|(dummy|Override)))\", \"\\n@\");\n-        }\n-\n-        int copyLiteral(String s, int start, StringBuilder sb) {\n-            int depth = 0;\n-            for (int i = start; i < s.length(); i++) {\n-                char ch = s.charAt(i);\n-                if (i == start && !Character.isWhitespace(ch) && ch != '}') {\n-                    sb.append(' ');\n-                }\n-                switch (ch) {\n-                    case '{' ->\n-                        depth++;\n-\n-                    case '}' -> {\n-                        depth--;\n-                        if (depth < 0) {\n-                            sb.append(ch);\n-                            return i + 1;\n-                        }\n-                    }\n-                }\n-                sb.append(ch);\n-            }\n-            return s.length();\n-        }\n@@ -1076,1 +1030,0 @@\n-\n","filename":"test\/langtools\/tools\/javac\/doctree\/DocCommentTester.java","additions":6,"deletions":53,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -245,1 +245,0 @@\n-    @NormalizeTags(false) \/\/ see DocCommentTester.PrettyChecker\n","filename":"test\/langtools\/tools\/javac\/doctree\/IndexTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}