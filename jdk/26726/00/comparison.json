{"files":[{"patch":"@@ -96,6 +96,0 @@\n-\n-  void  clear()                 { _len = 0; }\n-  void  trunc_to(int length)    {\n-    assert(length <= _len,\"cannot increase length\");\n-    _len = length;\n-  }\n@@ -192,5 +186,0 @@\n-  E pop() {\n-    assert(_len > 0, \"empty list\");\n-    return _data[--_len];\n-  }\n-\n@@ -250,53 +239,0 @@\n-  \/\/ Order preserving remove operations.\n-\n-  void remove(const E& elem) {\n-    \/\/ Assuming that element does exist.\n-    bool removed = remove_if_existing(elem);\n-    if (removed) return;\n-    ShouldNotReachHere();\n-  }\n-\n-  bool remove_if_existing(const E& elem) {\n-    \/\/ Returns TRUE if elem is removed.\n-    for (int i = 0; i < _len; i++) {\n-      if (_data[i] == elem) {\n-        remove_at(i);\n-        return true;\n-      }\n-    }\n-    return false;\n-  }\n-\n-  void remove_at(int index) {\n-    assert(0 <= index && index < _len, \"illegal index %d for length %d\", index, _len);\n-    for (int j = index + 1; j < _len; j++) {\n-      _data[j-1] = _data[j];\n-    }\n-    _len--;\n-  }\n-\n-  \/\/ Remove all elements up to the index (exclusive). The order is preserved.\n-  void remove_till(int idx) {\n-    remove_range(0, idx);\n-  }\n-\n-  \/\/ Remove all elements in the range [start - end). The order is preserved.\n-  void remove_range(int start, int end) {\n-    assert(0 <= start, \"illegal start index %d\", start);\n-    assert(start < end && end <= _len, \"erase called with invalid range (%d, %d) for length %d\", start, end, _len);\n-\n-    for (int i = start, j = end; j < length(); i++, j++) {\n-      at_put(i, at(j));\n-    }\n-    trunc_to(length() - (end - start));\n-  }\n-\n-  \/\/ The order is changed.\n-  void delete_at(int index) {\n-    assert(0 <= index && index < _len, \"illegal index %d for length %d\", index, _len);\n-    if (index < --_len) {\n-      \/\/ Replace removed element with last one.\n-      _data[index] = _data[_len];\n-    }\n-  }\n-\n@@ -430,0 +366,5 @@\n+  E pop() {\n+    assert(this->_len > 0, \"empty list\");\n+    return this->_data[--this->_len];\n+  }\n+\n@@ -517,0 +458,61 @@\n+  void trunc_to(int length) {\n+    assert(length <= this->_len,\"cannot increase length\");\n+    this->_len = length;\n+  }\n+\n+  \/\/ Order preserving remove operations.\n+\n+  void remove_at(int index) {\n+    assert(0 <= index && index < this->_len,\n+           \"illegal index %d for length %d\", index, this->_len);\n+    for (int j = index + 1; j < this->_len; j++) {\n+      this->_data[j-1] = this->_data[j];\n+    }\n+    this->_len--;\n+  }\n+\n+  void remove(const E& elem) {\n+    \/\/ Assuming that element does exist.\n+    bool removed = this->remove_if_existing(elem);\n+    if (removed) return;\n+    ShouldNotReachHere();\n+  }\n+\n+  bool remove_if_existing(const E& elem) {\n+    \/\/ Returns TRUE if elem is removed.\n+    for (int i = 0; i < this->_len; i++) {\n+      if (this->_data[i] == elem) {\n+        this->remove_at(i);\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n+\n+  \/\/ Remove all elements up to the index (exclusive). The order is preserved.\n+  void remove_till(int idx) {\n+    remove_range(0, idx);\n+  }\n+\n+  \/\/ Remove all elements in the range [start - end). The order is preserved.\n+  void remove_range(int start, int end) {\n+    assert(0 <= start, \"illegal start index %d\", start);\n+    assert(start < end && end <= this->_len,\n+           \"erase called with invalid range (%d, %d) for length %d\",\n+           start, end, this->_len);\n+\n+    for (int i = start, j = end; j < this->length(); i++, j++) {\n+      this->at_put(i, this->at(j));\n+    }\n+    this->_len -= (end - start);\n+  }\n+\n+  \/\/ Replaces the designated element with the last element and shrinks by 1.\n+  void delete_at(int index) {\n+    assert(0 <= index && index < this->_len, \"illegal index %d for length %d\", index, this->_len);\n+    if (index < --this->_len) {\n+      \/\/ Replace removed element with last one.\n+      this->_data[index] = this->_data[this->_len];\n+    }\n+  }\n+\n@@ -520,0 +522,1 @@\n+  void clear() { this->_len = 0; }\n","filename":"src\/hotspot\/share\/utilities\/growableArray.hpp","additions":67,"deletions":64,"binary":false,"changes":131,"status":"modified"},{"patch":"@@ -130,0 +130,1 @@\n+        int ri = reversed.length();\n@@ -131,1 +132,1 @@\n-          ASSERT_EQ(e, reversed.pop());\n+          ASSERT_EQ(e, reversed.at(--ri));\n@@ -133,0 +134,1 @@\n+        ASSERT_EQ(ri, 0);\n","filename":"test\/hotspot\/gtest\/gc\/z\/test_zArray.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}