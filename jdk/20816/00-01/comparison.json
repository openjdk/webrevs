{"files":[{"patch":"@@ -97,1 +97,1 @@\n-    private static class VirtualThreadSchedulerImpl extends BaseVirtualThreadSchedulerImpl {\n+    private static final class VirtualThreadSchedulerImpl extends BaseVirtualThreadSchedulerImpl {\n@@ -121,1 +121,7 @@\n-                case ForkJoinPool pool -> pool.setParallelism(size);\n+                case ForkJoinPool pool -> {\n+                    pool.setParallelism(size);\n+                    if (pool.getPoolSize() < size) {\n+                        \/\/ FJ worker thread creation is on-demand\n+                        Thread.startVirtualThread(() -> { });\n+                    }\n+                }\n@@ -159,1 +165,1 @@\n-    private static class BoundVirtualThreadSchedulerImpl extends BaseVirtualThreadSchedulerImpl {\n+    private static final class BoundVirtualThreadSchedulerImpl extends BaseVirtualThreadSchedulerImpl {\n","filename":"src\/jdk.management\/share\/classes\/com\/sun\/management\/internal\/VirtualThreadSchedulerImpls.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.util.concurrent.ForkJoinPool;\n@@ -33,2 +34,2 @@\n- * Management interface for the JDK's default {@linkplain Thread##virtual-threads virtual\n- * thread} scheduler.\n+ * Management interface for the JDK's {@linkplain Thread##virtual-threads virtual thread}\n+ * scheduler.\n@@ -55,1 +56,1 @@\n-     * @see java.util.concurrent.ForkJoinPool#getParallelism()\n+     * @see ForkJoinPool#getParallelism()\n@@ -62,0 +63,11 @@\n+     * <p> Increasing the target parallelism allows the scheduler to use more threads as\n+     * carrier threads if required. Decreasing the target parallelism reduces the number\n+     * of threads that the scheduler may use as carrier threads. If virtual threads are\n+     * mounting and unmounting frequently then any downward adjustment will likely come\n+     * into effect quickly.\n+     *\n+     * @implNote The JDK's virtual thread scheduler is a {@link ForkJoinPool}. Target\n+     * parallelism defaults to the number of {@linkplain Runtime#availableProcessors()\n+     * available processors}. The minimum target parallelism is 1, the maximum target\n+     * parallelism is 32767.\n+     *\n@@ -68,1 +80,1 @@\n-     * @see java.util.concurrent.ForkJoinPool#setParallelism(int)\n+     * @see ForkJoinPool#setParallelism(int)\n@@ -73,1 +85,1 @@\n-     * {@return the current number of platform threads in the scheduler's pool;\n+     * {@return the current number of platform threads used by the scheduler;\n@@ -76,2 +88,6 @@\n-     * @apiNote The number of threads may be greater than the scheduler's target\n-     * parallelism.\n+     * The thread count includes threads that are currently used as carrier threads and\n+     * threads that are <em>idle<\/em>. The thread count may be greater than the\n+     * scheduler's target parallelism.\n+     *\n+     * @implNote The JDK's virtual thread scheduler is a {@link ForkJoinPool}. The\n+     * thread count is the number of worker threads.\n","filename":"src\/jdk.management\/share\/classes\/jdk\/management\/VirtualThreadSchedulerMXBean.java","additions":23,"deletions":7,"binary":false,"changes":30,"status":"modified"}]}