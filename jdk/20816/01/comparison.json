{"files":[{"patch":"@@ -68,0 +68,1 @@\n+import java.util.concurrent.Executor;\n@@ -2757,0 +2758,4 @@\n+            public Executor virtualThreadDefaultScheduler() {\n+                return VirtualThread.defaultScheduler();\n+            }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -145,0 +145,8 @@\n+\n+    \/**\n+     * Returns the default scheduler.\n+     *\/\n+    static Executor defaultScheduler() {\n+        return DEFAULT_SCHEDULER;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/VirtualThread.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+import java.util.concurrent.Executor;\n@@ -583,0 +584,5 @@\n+    \/**\n+     * Returns the virtual thread default scheduler.\n+     *\/\n+    Executor virtualThreadDefaultScheduler();\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -175,0 +175,1 @@\n+        jdk.management,\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,0 +44,1 @@\n+import jdk.management.VirtualThreadSchedulerMXBean;\n@@ -166,0 +167,35 @@\n+        \/**\n+         * VirtualThreadSchedulerMXBean.\n+         *\/\n+        initMBeanList.add(new PlatformComponent<VirtualThreadSchedulerMXBean>() {\n+            private final Set<Class<? extends VirtualThreadSchedulerMXBean>> mbeanInterfaces =\n+                    Set.of(VirtualThreadSchedulerMXBean.class);\n+            private final Set<String> mbeanInterfaceNames =\n+                    Set.of(VirtualThreadSchedulerMXBean.class.getName());\n+            private VirtualThreadSchedulerMXBean impl;\n+\n+            @Override\n+            public Set<Class<? extends VirtualThreadSchedulerMXBean>> mbeanInterfaces() {\n+                return mbeanInterfaces;\n+            }\n+\n+            @Override\n+            public Set<String> mbeanInterfaceNames() {\n+                return mbeanInterfaceNames;\n+            }\n+\n+            @Override\n+            public String getObjectNamePattern() {\n+                return \"jdk.management:type=VirtualThreadScheduler\";\n+            }\n+\n+            @Override\n+            public Map<String, VirtualThreadSchedulerMXBean> nameToMBeanMap() {\n+                VirtualThreadSchedulerMXBean impl = this.impl;\n+                if (impl == null) {\n+                    this.impl = impl = VirtualThreadSchedulerImpls.create();\n+                }\n+                return Map.of(\"jdk.management:type=VirtualThreadScheduler\", impl);\n+            }\n+        });\n+\n","filename":"src\/jdk.management\/share\/classes\/com\/sun\/management\/internal\/PlatformMBeanProviderImpl.java","additions":37,"deletions":1,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -0,0 +1,191 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.management.internal;\n+\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ForkJoinPool;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import javax.management.ObjectName;\n+import jdk.management.VirtualThreadSchedulerMXBean;\n+import jdk.internal.access.JavaLangAccess;\n+import jdk.internal.access.SharedSecrets;\n+import jdk.internal.vm.ContinuationSupport;\n+import sun.management.Util;\n+\n+\/**\n+ * Provides the implementation of the management interface for the JDK's default virtual\n+ * thread scheduler.\n+ *\/\n+public class VirtualThreadSchedulerImpls {\n+    private VirtualThreadSchedulerImpls() {\n+    }\n+\n+    public static VirtualThreadSchedulerMXBean create() {\n+        if (ContinuationSupport.isSupported()) {\n+            return new VirtualThreadSchedulerImpl();\n+        } else {\n+            return new BoundVirtualThreadSchedulerImpl();\n+        }\n+    }\n+\n+    \/**\n+     * Base implementation of VirtualThreadSchedulerMXBean.\n+     *\/\n+    private abstract static class BaseVirtualThreadSchedulerImpl\n+            implements VirtualThreadSchedulerMXBean {\n+\n+        abstract void implSetParallelism(int size);\n+\n+        @Override\n+        public final void setParallelism(int size) {\n+            Util.checkControlAccess();\n+            implSetParallelism(size);\n+        }\n+\n+        @Override\n+        public final ObjectName getObjectName() {\n+            return Util.newObjectName(\"jdk.management:type=VirtualThreadScheduler\");\n+        }\n+\n+        @Override\n+        public String toString() {\n+            var sb = new StringBuilder(\"[parallelism=\");\n+            sb.append(getParallelism());\n+            append(sb, \"threads\", getThreadCount());\n+            append(sb, \"carriers\", getCarrierThreadCount());\n+            append(sb, \"queued-vthreads\", getQueuedVirtualThreadCount());\n+            sb.append(']');\n+            return sb.toString();\n+        }\n+\n+        private void append(StringBuilder sb, String name, long value) {\n+            sb.append(\", \").append(name).append('=');\n+            if (value >= 0) {\n+                sb.append(value);\n+            } else {\n+                sb.append(\"<unavailable>\");\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Implementation of VirtualThreadSchedulerMXBean when virtual threads are\n+     * implemented with continuations + scheduler.\n+     *\/\n+    private static final class VirtualThreadSchedulerImpl extends BaseVirtualThreadSchedulerImpl {\n+        \/**\n+         * Holder class for scheduler.\n+         *\/\n+        private static class Scheduler {\n+            private static final Executor scheduler =\n+                SharedSecrets.getJavaLangAccess().virtualThreadDefaultScheduler();\n+            static Executor instance() {\n+                return scheduler;\n+            }\n+        }\n+\n+        @Override\n+        public int getParallelism() {\n+            return switch (Scheduler.instance()) {\n+                case ForkJoinPool pool -> pool.getParallelism();\n+                case ThreadPoolExecutor pool -> pool.getMaximumPoolSize();\n+                default -> -1;\n+            };\n+        }\n+\n+        @Override\n+        void implSetParallelism(int size) {\n+            switch (Scheduler.instance()) {\n+                case ForkJoinPool pool -> {\n+                    pool.setParallelism(size);\n+                    if (pool.getPoolSize() < size) {\n+                        \/\/ FJ worker thread creation is on-demand\n+                        Thread.startVirtualThread(() -> { });\n+                    }\n+                }\n+                case ThreadPoolExecutor pool -> pool.setMaximumPoolSize(size);\n+                default -> throw new UnsupportedOperationException();\n+            }\n+        }\n+\n+        @Override\n+        public int getThreadCount() {\n+            return switch (Scheduler.instance()) {\n+                case ForkJoinPool pool -> pool.getPoolSize();\n+                case ThreadPoolExecutor pool -> pool.getPoolSize();\n+                default -> -1;\n+            };\n+        }\n+\n+        @Override\n+        public int getCarrierThreadCount() {\n+            return switch (Scheduler.instance()) {\n+                case ForkJoinPool pool -> pool.getActiveThreadCount();\n+                case ThreadPoolExecutor pool -> pool.getActiveCount();\n+                default -> -1;\n+            };\n+        }\n+\n+        @Override\n+        public long getQueuedVirtualThreadCount() {\n+            return switch (Scheduler.instance()) {\n+                case ForkJoinPool pool -> pool.getQueuedTaskCount() + pool.getQueuedSubmissionCount();\n+                case ThreadPoolExecutor pool -> pool.getQueue().size();\n+                default -> -1L;\n+            };\n+        }\n+    }\n+\n+    \/**\n+     * Implementation of VirtualThreadSchedulerMXBean when virtual threads are backed\n+     * by platform threads.\n+     *\/\n+    private static final class BoundVirtualThreadSchedulerImpl extends BaseVirtualThreadSchedulerImpl {\n+        @Override\n+        public int getParallelism() {\n+            return Integer.MAX_VALUE;\n+        }\n+\n+        @Override\n+        void implSetParallelism(int size) {\n+            throw new UnsupportedOperationException();\n+        }\n+\n+        @Override\n+        public int getThreadCount() {\n+            return -1;\n+        }\n+\n+        @Override\n+        public int getCarrierThreadCount() {\n+            return -1;\n+        }\n+\n+        @Override\n+        public long getQueuedVirtualThreadCount() {\n+            return -1L;\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"src\/jdk.management\/share\/classes\/com\/sun\/management\/internal\/VirtualThreadSchedulerImpls.java","additions":191,"deletions":0,"binary":false,"changes":191,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,3 +27,2 @@\n- * This package contains the JDK's extension to\n- * the standard implementation of the\n- * {@link java.lang.management} API and also defines the management\n+ * This package contains JDK extensions to the standard implementation of\n+ * the {@link java.lang.management} API and also defines the management\n","filename":"src\/jdk.management\/share\/classes\/com\/sun\/management\/package-info.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,108 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.management;\n+\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.PlatformManagedObject;\n+import java.util.concurrent.ForkJoinPool;\n+import javax.management.MBeanServer;\n+import javax.management.ObjectName;\n+\n+\/**\n+ * Management interface for the JDK's {@linkplain Thread##virtual-threads virtual thread}\n+ * scheduler.\n+ *\n+ * <p> {@code VirtualThreadSchedulerMXBean} supports monitoring of the virtual thread\n+ * scheduler's target parallelism and the {@linkplain Thread##platform-threads platform\n+ * threads} used by the virtual thread scheduler as <em>carrier threads<\/em>. It also\n+ * supports dynamically changing the scheduler's target parallelism.\n+ *\n+ * <p> The management interface is registered with the platform {@link MBeanServer\n+ * MBeanServer}. The {@link ObjectName ObjectName} that uniquely identifies the management\n+ * interface within the {@code MBeanServer} is: \"jdk.management:type=VirtualThreadScheduler\".\n+ *\n+ * <p> Direct access to the MXBean interface can be obtained with\n+ * {@link ManagementFactory#getPlatformMXBean(Class)}.\n+ *\n+ * @since 24\n+ *\/\n+public interface VirtualThreadSchedulerMXBean extends PlatformManagedObject {\n+\n+    \/**\n+     * {@return the scheduler's target parallelism}\n+     *\n+     * @see ForkJoinPool#getParallelism()\n+     *\/\n+    int getParallelism();\n+\n+    \/**\n+     * Sets the scheduler's target parallelism.\n+     *\n+     * <p> Increasing the target parallelism allows the scheduler to use more threads as\n+     * carrier threads if required. Decreasing the target parallelism reduces the number\n+     * of threads that the scheduler may use as carrier threads. If virtual threads are\n+     * mounting and unmounting frequently then any downward adjustment will likely come\n+     * into effect quickly.\n+     *\n+     * @implNote The JDK's virtual thread scheduler is a {@link ForkJoinPool}. Target\n+     * parallelism defaults to the number of {@linkplain Runtime#availableProcessors()\n+     * available processors}. The minimum target parallelism is 1, the maximum target\n+     * parallelism is 32767.\n+     *\n+     * @param size the target parallelism level\n+     * @throws IllegalArgumentException if size is less than the minimum, or\n+     *         greater than the maximum, supported by the scheduler\n+     * @throws UnsupportedOperationException if changing the target\n+     *         parallelism is not suppored by the scheduler\n+     *\n+     * @see ForkJoinPool#setParallelism(int)\n+     *\/\n+    void setParallelism(int size);\n+\n+    \/**\n+     * {@return the current number of platform threads used by the scheduler;\n+     * {@code -1} if not known}\n+     *\n+     * The thread count includes threads that are currently used as carrier threads and\n+     * threads that are <em>idle<\/em>. The thread count may be greater than the\n+     * scheduler's target parallelism.\n+     *\n+     * @implNote The JDK's virtual thread scheduler is a {@link ForkJoinPool}. The\n+     * thread count is the number of worker threads.\n+     *\/\n+    int getThreadCount();\n+\n+    \/**\n+     * {@return an estimate of the number of platform threads currently used by\n+     * the scheduler as carriers for virtual threads; {@code -1} if not known}\n+     *\/\n+    int getCarrierThreadCount();\n+\n+    \/**\n+     * {@return an estimate of the number of virtual threads that are queued to\n+     * the scheduler to start or continue execution; {@code -1} if not known}\n+     *\/\n+    long getQueuedVirtualThreadCount();\n+}\n\\ No newline at end of file\n","filename":"src\/jdk.management\/share\/classes\/jdk\/management\/VirtualThreadSchedulerMXBean.java","additions":108,"deletions":0,"binary":false,"changes":108,"status":"added"},{"patch":"@@ -0,0 +1,33 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * This package contains JDK extensions to the standard implementation of the\n+ * {@link java.lang.management} API.\n+ *\n+ * @since 24\n+ *\/\n+\n+package jdk.management;\n\\ No newline at end of file\n","filename":"src\/jdk.management\/share\/classes\/jdk\/management\/package-info.java","additions":33,"deletions":0,"binary":false,"changes":33,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,2 @@\n+import java.lang.management.ManagementFactory;\n+\n@@ -29,0 +31,7 @@\n+ * <p> This module contains the JDK's extensions to the standard implementation\n+ * of the {@link java.lang.management} API and also defines the management\n+ * interfaces for some other components of the platform.\n+ *\n+ * <p> All platform MBeans are registered in the <em>platform MBeanServer<\/em>\n+ * which can be obtained with {@link ManagementFactory#getPlatformMBeanServer}.\n+ *\n@@ -36,0 +45,1 @@\n+    exports jdk.management;\n","filename":"src\/jdk.management\/share\/classes\/module-info.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @modules java.base\/java.lang:+open\n+ * @modules jdk.management\n@@ -36,1 +36,1 @@\n- * @modules java.base\/java.lang:+open\n+ * @modules jdk.management\n@@ -45,1 +45,1 @@\n-import jdk.test.lib.thread.VThreadRunner;\n+import jdk.test.lib.thread.VThreadRunner;   \/\/ ensureParallelism requires jdk.management\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/GetThreadState\/GetThreadStateTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @modules java.base\/java.lang:+open\n+ * @modules jdk.management\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/VThreadEventTest\/VThreadEventTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -265,0 +265,1 @@\n+    jdk\/management \\\n@@ -290,0 +291,1 @@\n+    jdk\/management\/VirtualThreadSchedulerMXBean \\\n","filename":"test\/jdk\/TEST.groups","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @modules jdk.jfr java.base\/java.lang:+open\n+ * @modules jdk.jfr java.base\/java.lang:+open jdk.management\n@@ -53,1 +53,1 @@\n-import jdk.test.lib.thread.VThreadRunner;\n+import jdk.test.lib.thread.VThreadRunner;   \/\/ ensureParallelism requires jdk.management\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/JfrEvents.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @modules java.base\/java.lang:+open\n+ * @modules java.base\/java.lang:+open jdk.management\n@@ -46,1 +46,1 @@\n-import jdk.test.lib.thread.VThreadRunner;\n+import jdk.test.lib.thread.VThreadRunner;   \/\/ ensureParallelism requires jdk.management\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/MonitorEnterExit.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @modules java.base\/java.lang:+open\n+ * @modules java.base\/java.lang:+open jdk.management\n@@ -49,2 +49,1 @@\n-import jdk.test.lib.thread.VThreadRunner;\n-import jdk.test.lib.thread.VThreadRunner;\n+import jdk.test.lib.thread.VThreadRunner;   \/\/ ensureParallelism requires jdk.management\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/MonitorWaitNotify.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @modules java.base\/java.lang:+open\n+ * @modules java.base\/java.lang:+open jdk.management\n@@ -36,1 +36,1 @@\n- * @modules java.base\/java.lang:+open\n+ * @modules java.base\/java.lang:+open jdk.management\n@@ -65,1 +65,1 @@\n-import jdk.test.lib.thread.VThreadRunner;\n+import jdk.test.lib.thread.VThreadRunner;   \/\/ ensureParallelism requires jdk.management\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/ThreadAPI.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @modules java.base\/java.lang:+open java.base\/jdk.internal.event\n+ * @modules java.base\/java.lang:+open java.base\/jdk.internal.event jdk.management\n@@ -39,1 +39,1 @@\n-import jdk.test.lib.thread.VThreadRunner;\n+import jdk.test.lib.thread.VThreadRunner;   \/\/ ensureParallelism requires jdk.management\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/VirtualThreadPinnedEventThrows.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @modules java.base\/java.lang:+open\n+ * @modules jdk.management\n@@ -37,1 +37,1 @@\n- * @modules java.base\/java.lang:+open\n+ * @modules jdk.management\n@@ -45,1 +45,1 @@\n-import jdk.test.lib.thread.VThreadRunner;\n+import jdk.test.lib.thread.VThreadRunner;   \/\/ ensureParallelism requires jdk.management\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/stress\/GetStackTraceALotWhenBlocking.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @modules java.base\/java.lang:+open\n+ * @modules jdk.management\n@@ -37,1 +37,1 @@\n- * @modules java.base\/java.lang:+open\n+ * @modules jdk.management\n@@ -45,1 +45,1 @@\n-import jdk.test.lib.thread.VThreadRunner;\n+import jdk.test.lib.thread.VThreadRunner;   \/\/ ensureParallelism requires jdk.management\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/stress\/GetStackTraceALotWhenPinned.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @modules java.base\/java.lang:+open java.management\n+ * @modules java.management jdk.management\n@@ -39,1 +39,1 @@\n- * @modules java.base\/java.lang:+open java.management\n+ * @modules java.management jdk.management\n@@ -51,1 +51,1 @@\n-import jdk.test.lib.thread.VThreadRunner;\n+import jdk.test.lib.thread.VThreadRunner;   \/\/ ensureParallelism requires jdk.management\n","filename":"test\/jdk\/java\/lang\/management\/ThreadMXBean\/VirtualThreadDeadlocks.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,133 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8338890\n+ * @summary Basic test for jdk.management.VirtualThreadSchedulerMXBean\n+ * @requires vm.continuations\n+ * @modules jdk.management\n+ * @library \/test\/lib\n+ * @run junit\/othervm --enable-native-access=ALL-UNNAMED VirtualThreadSchedulerMXBeanTest\n+ *\/\n+\n+import java.lang.management.ManagementFactory;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.Executors;\n+import java.util.stream.Stream;\n+import javax.management.MBeanServer;\n+import jdk.management.VirtualThreadSchedulerMXBean;\n+\n+import jdk.test.lib.thread.VThreadRunner;\n+import jdk.test.lib.thread.VThreadPinner;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class VirtualThreadSchedulerMXBeanTest {\n+\n+    \/**\n+     * VirtualThreadSchedulerMXBean objects to test.\n+     *\/\n+    private static Stream<VirtualThreadSchedulerMXBean> managedBeans() throws Exception {\n+        var bean1 = ManagementFactory.getPlatformMXBean(VirtualThreadSchedulerMXBean.class);\n+\n+        MBeanServer server = ManagementFactory.getPlatformMBeanServer();\n+        var bean2 = ManagementFactory.newPlatformMXBeanProxy(server,\n+                \"jdk.management:type=VirtualThreadScheduler\",\n+                VirtualThreadSchedulerMXBean.class);\n+\n+        return Stream.of(bean1, bean2);\n+    }\n+\n+    \/**\n+     * Test parallelism.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"managedBeans\")\n+    void testParallelism(VirtualThreadSchedulerMXBean bean) {\n+        int parallelism = bean.getParallelism();\n+        assertTrue(parallelism > 0);\n+        bean.setParallelism(parallelism + 1);\n+        try {\n+            assertEquals(parallelism + 1, bean.getParallelism());\n+        } finally {\n+            \/\/ restore\n+            bean.setParallelism(parallelism);\n+        }\n+    }\n+\n+    \/**\n+     * Test getThreadCount and getCarrierThreadCount.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"managedBeans\")\n+    void testThreadCounts(VirtualThreadSchedulerMXBean bean) {\n+        \/\/ run test in virtual thread\n+        VThreadRunner.run(() -> {\n+            assertTrue(bean.getThreadCount() > 0);\n+            assertTrue(bean.getCarrierThreadCount() > 0);\n+        });\n+    }\n+\n+    \/**\n+     * Test getQueuedVirtualThreadCount.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"managedBeans\")\n+    void testQueuedVirtualThreadCount(VirtualThreadSchedulerMXBean bean) throws Exception {\n+        \/\/ skip if virtual thread\n+        if (Thread.currentThread().isVirtual()) {\n+            return;\n+        }\n+        int parallelism = bean.getParallelism();\n+        try (var executor = Executors.newVirtualThreadPerTaskExecutor()) {\n+            var ready = new CountDownLatch(parallelism);\n+            var done = new CountDownLatch(1);\n+            try {\n+\n+                \/\/ start virtual threads to pin all carriers\n+                for (int i = 0; i < parallelism; i++) {\n+                    executor.submit(() -> {\n+                        VThreadPinner.runPinned(() -> {\n+                            ready.countDown();\n+                            done.await();\n+                        });\n+                        return null;\n+                    });\n+                }\n+                ready.await();\n+\n+                \/\/ start 5 virtual threads, their tasks will be queued to exeucte\n+                for (int i = 0; i < 5; i++) {\n+                    Thread.startVirtualThread(() -> { });\n+                }\n+                assertTrue(bean.getQueuedVirtualThreadCount() >= 5);\n+\n+            } finally {\n+                done.countDown();\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/jdk\/management\/VirtualThreadSchedulerMXBean\/VirtualThreadSchedulerMXBeanTest.java","additions":133,"deletions":0,"binary":false,"changes":133,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n-import java.lang.reflect.Field;\n+import java.lang.management.ManagementFactory;\n@@ -28,1 +28,0 @@\n-import java.util.concurrent.ForkJoinPool;\n@@ -30,0 +29,1 @@\n+import jdk.management.VirtualThreadSchedulerMXBean;\n@@ -136,14 +136,0 @@\n-    \/**\n-     * Returns the virtual thread scheduler.\n-     *\/\n-    private static ForkJoinPool defaultScheduler() {\n-        try {\n-            var clazz = Class.forName(\"java.lang.VirtualThread\");\n-            var field = clazz.getDeclaredField(\"DEFAULT_SCHEDULER\");\n-            field.setAccessible(true);\n-            return (ForkJoinPool) field.get(null);\n-        } catch (Exception e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n@@ -152,0 +138,4 @@\n+     *\n+     * <p> Tests using this method should use \"{@code @modules jdk.management}\" to help\n+     * test selection.\n+     *\n@@ -155,1 +145,4 @@\n-        return defaultScheduler().setParallelism(size);\n+        var bean = ManagementFactory.getPlatformMXBean(VirtualThreadSchedulerMXBean.class);\n+        int parallelism = bean.getParallelism();\n+        bean.setParallelism(size);\n+        return parallelism;\n@@ -162,0 +155,4 @@\n+     *\n+     * <p> Tests using this method should use \"{@code @modules jdk.management}\" to help\n+     * test selection.\n+     *\n@@ -165,2 +162,2 @@\n-        ForkJoinPool pool = defaultScheduler();\n-        int parallelism = pool.getParallelism();\n+        var bean = ManagementFactory.getPlatformMXBean(VirtualThreadSchedulerMXBean.class);\n+        int parallelism = bean.getParallelism();\n@@ -168,1 +165,1 @@\n-            pool.setParallelism(size);\n+            bean.setParallelism(size);\n","filename":"test\/lib\/jdk\/test\/lib\/thread\/VThreadRunner.java","additions":18,"deletions":21,"binary":false,"changes":39,"status":"modified"}]}