{"files":[{"patch":"@@ -76,3 +76,3 @@\n-            append(sb, \"threads\", getThreadCount());\n-            append(sb, \"carriers\", getCarrierThreadCount());\n-            append(sb, \"queued-vthreads\", getQueuedVirtualThreadCount());\n+            append(sb, \"size\", getPoolSize());\n+            append(sb, \"mounted\", getMountedVirtualThreadCount());\n+            append(sb, \"queued\", getQueuedVirtualThreadCount());\n@@ -134,1 +134,1 @@\n-        public int getThreadCount() {\n+        public int getPoolSize() {\n@@ -143,1 +143,1 @@\n-        public int getCarrierThreadCount() {\n+        public int getMountedVirtualThreadCount() {\n@@ -177,1 +177,1 @@\n-        public int getThreadCount() {\n+        public int getPoolSize() {\n@@ -182,1 +182,1 @@\n-        public int getCarrierThreadCount() {\n+        public int getMountedVirtualThreadCount() {\n","filename":"src\/jdk.management\/share\/classes\/com\/sun\/management\/internal\/VirtualThreadSchedulerImpls.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -38,3 +38,3 @@\n- * scheduler's target parallelism and the {@linkplain Thread##platform-threads platform\n- * threads} used by the virtual thread scheduler as <em>carrier threads<\/em>. It also\n- * supports dynamically changing the scheduler's target parallelism.\n+ * scheduler's target parallelism, the {@linkplain Thread##platform-threads platform threads}\n+ * used by the scheduler, and the number of virtual threads queued to the scheduler. It\n+ * also supports dynamically changing the scheduler's target parallelism.\n@@ -63,5 +63,6 @@\n-     * <p> Increasing the target parallelism allows the scheduler to use more threads as\n-     * carrier threads if required. Decreasing the target parallelism reduces the number\n-     * of threads that the scheduler may use as carrier threads. If virtual threads are\n-     * mounting and unmounting frequently then any downward adjustment will likely come\n-     * into effect quickly.\n+     * <p> Increasing the target parallelism allows the scheduler to use more platform\n+     * threads to <i>carry<\/i> virtual threads if required. Decreasing the target parallelism\n+     * reduces the number of threads that the scheduler may use to carry virtual threads.\n+     *\n+     * @apiNote If virtual threads are mounting and unmounting frequently then downward\n+     * adjustment of the target parallelism will likely come into effect quickly.\n@@ -85,2 +86,2 @@\n-     * {@return the current number of platform threads used by the scheduler;\n-     * {@code -1} if not known}\n+     * {@return the current number of platform threads that the scheduler has started\n+     * but have not terminated; {@code -1} if not known}\n@@ -88,3 +89,3 @@\n-     * The thread count includes threads that are currently used as carrier threads and\n-     * threads that are <em>idle<\/em>. The thread count may be greater than the\n-     * scheduler's target parallelism.\n+     * <p> The count includes the platform threads that are currently <i>carrying<\/i>\n+     * virtual threads and the platform threads that are not currently carrying virtual\n+     * threads. The thread count may be greater than the scheduler's target parallelism.\n@@ -92,2 +93,2 @@\n-     * @implNote The JDK's virtual thread scheduler is a {@link ForkJoinPool}. The\n-     * thread count is the number of worker threads.\n+     * @implNote The JDK's virtual thread scheduler is a {@link ForkJoinPool}. The pool\n+     * size is the {@linkplain ForkJoinPool#getPoolSize() number of worker threads}.\n@@ -95,1 +96,1 @@\n-    int getThreadCount();\n+    int getPoolSize();\n@@ -98,2 +99,7 @@\n-     * {@return an estimate of the number of platform threads currently used by\n-     * the scheduler as carriers for virtual threads; {@code -1} if not known}\n+     * {@return an estimate of the number of virtual threads that are currently\n+     * <i>mounted<\/i> by the scheduler; {@code -1} if not known}\n+     *\n+     * <p> The number of mounted virtual threads is equal to the number of platform\n+     * threads carrying virtual threads.\n+     *\n+     * @implNote This method may overestimate the number of virtual threads that are mounted.\n@@ -101,1 +107,1 @@\n-    int getCarrierThreadCount();\n+    int getMountedVirtualThreadCount();\n@@ -106,0 +112,3 @@\n+     *\n+     * @implNote This method may overestimate the number of virtual threads that are\n+     * queued to execute.\n","filename":"src\/jdk.management\/share\/classes\/jdk\/management\/VirtualThreadSchedulerMXBean.java","additions":28,"deletions":19,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-     * Test getThreadCount and getCarrierThreadCount.\n+     * Test getPoolSize.\n@@ -86,1 +86,1 @@\n-    void testThreadCounts(VirtualThreadSchedulerMXBean bean) {\n+    void testPoolSize(VirtualThreadSchedulerMXBean bean) {\n@@ -89,2 +89,13 @@\n-            assertTrue(bean.getThreadCount() > 0);\n-            assertTrue(bean.getCarrierThreadCount() > 0);\n+            assertTrue(bean.getPoolSize() > 0);\n+        });\n+    }\n+\n+    \/**\n+     * Test getMountedVirtualThreadCount.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"managedBeans\")\n+    void testMountedVirtualThreadCount(VirtualThreadSchedulerMXBean bean) {\n+        \/\/ run test in virtual thread\n+        VThreadRunner.run(() -> {\n+            assertTrue(bean.getMountedVirtualThreadCount() > 0);\n","filename":"test\/jdk\/jdk\/management\/VirtualThreadSchedulerMXBean\/VirtualThreadSchedulerMXBeanTest.java","additions":15,"deletions":4,"binary":false,"changes":19,"status":"modified"}]}