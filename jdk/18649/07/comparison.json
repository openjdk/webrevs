{"files":[{"patch":"@@ -479,9 +479,0 @@\n-  # Setup some hard coded includes\n-  ALWAYS_CFLAGS_JDK=\" \\\n-      -I\\$(SUPPORT_OUTPUTDIR)\/modules_include\/java.base \\\n-      -I\\$(SUPPORT_OUTPUTDIR)\/modules_include\/java.base\/\\$(OPENJDK_TARGET_OS_INCLUDE_SUBDIR) \\\n-      -I${TOPDIR}\/src\/java.base\/share\/native\/libjava \\\n-      -I${TOPDIR}\/src\/java.base\/$OPENJDK_TARGET_OS_TYPE\/native\/libjava \\\n-      -I${TOPDIR}\/src\/hotspot\/share\/include \\\n-      -I${TOPDIR}\/src\/hotspot\/os\/${HOTSPOT_TARGET_OS_TYPE}\/include\"\n-\n@@ -874,1 +865,1 @@\n-  CFLAGS_JDK_COMMON=\"$ALWAYS_CFLAGS_JDK $ALWAYS_DEFINES_JDK $TOOLCHAIN_CFLAGS_JDK \\\n+  CFLAGS_JDK_COMMON=\"$ALWAYS_DEFINES_JDK $TOOLCHAIN_CFLAGS_JDK \\\n","filename":"make\/autoconf\/flags-cflags.m4","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -34,5 +34,0 @@\n-\n-  # The target dir matches the name of VM variant\n-  TARGET_JVM_VARIANT_PATH=$JVM_VARIANT_MAIN\n-\n-  # On some platforms (mac) the linker warns about non existing -L dirs.\n@@ -42,4 +37,0 @@\n-\n-  # When building a buildjdk, it's always only the server variant\n-  BUILD_JVM_VARIANT_PATH=server\n-\n@@ -48,2 +39,0 @@\n-  LDFLAGS_TESTEXE=\"${TARGET_LDFLAGS_JDK_LIBPATH}\"\n-  AC_SUBST(LDFLAGS_TESTEXE)\n@@ -158,1 +147,1 @@\n-  LDFLAGS_CXX_JDK=\"$BASIC_LDFLAGS_ONLYCXX $BASIC_LDFLAGS_ONLYCXX_JDK_ONLY $DEBUGLEVEL_LDFLAGS_JDK_ONLY\"\n+  LDFLAGS_CXX_JDK=\"$DEBUGLEVEL_LDFLAGS_JDK_ONLY\"\n@@ -200,8 +189,0 @@\n-  # JVM_VARIANT_PATH depends on if this is build or target...\n-  if test \"x$TOOLCHAIN_TYPE\" = xmicrosoft; then\n-    $1_LDFLAGS_JDK_LIBPATH=\"-libpath:\\$(SUPPORT_OUTPUTDIR)\/modules_libs\/java.base\"\n-  else\n-    $1_LDFLAGS_JDK_LIBPATH=\"-L\\$(SUPPORT_OUTPUTDIR)\/modules_libs\/java.base \\\n-        -L\\$(SUPPORT_OUTPUTDIR)\/modules_libs\/java.base\/${$1_JVM_VARIANT_PATH}\"\n-  fi\n-\n@@ -212,2 +193,1 @@\n-      ${$1_LDFLAGS_JDK_LIBPATH} $SHARED_LIBRARY_FLAGS \\\n-      $REPRODUCIBLE_LDFLAGS $FILE_MACRO_LDFLAGS\"\n+      $SHARED_LIBRARY_FLAGS $REPRODUCIBLE_LDFLAGS $FILE_MACRO_LDFLAGS\"\n","filename":"make\/autoconf\/flags-ldflags.m4","additions":2,"deletions":22,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -132,6 +132,0 @@\n-  BASIC_JDKLIB_LIBS=\"\"\n-  BASIC_JDKLIB_LIBS_TARGET=\"\"\n-  if test \"x$TOOLCHAIN_TYPE\" != xmicrosoft; then\n-    BASIC_JDKLIB_LIBS=\"-ljava -ljvm\"\n-  fi\n-\n@@ -173,1 +167,0 @@\n-  JDKLIB_LIBS=\"$BASIC_JDKLIB_LIBS\"\n@@ -175,1 +168,1 @@\n-  OPENJDK_BUILD_JDKLIB_LIBS=\"$BASIC_JDKLIB_LIBS\"\n+  OPENJDK_BUILD_JDKLIB_LIBS=\"\"\n@@ -178,1 +171,0 @@\n-  AC_SUBST(JDKLIB_LIBS)\n","filename":"make\/autoconf\/libraries.m4","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -558,1 +558,0 @@\n-JDKLIB_LIBS := @JDKLIB_LIBS@\n@@ -574,3 +573,0 @@\n-# Compiler and linker flags used when building native tests\n-LDFLAGS_TESTEXE := @LDFLAGS_TESTEXE@\n-\n","filename":"make\/autoconf\/spec.gmk.template","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -79,2 +79,9 @@\n-# Process a dir description such as \"java.base:headers\" into a set of proper absolute paths.\n-ProcessDir = \\\n+HOTSPOT_INCLUDE_DIR := $(TOPDIR)\/src\/hotspot\/share\/include \\\n+    $(TOPDIR)\/src\/hotspot\/os\/$(HOTSPOT_TARGET_OS_TYPE)\/include\n+\n+# Preprocess a source dir destination. Pass on absolute paths unchanged. Expand\n+# description such as \"java.base:headers\" into a set of proper absolute paths,\n+# by looking in $MODULE\/[shared|$OS|$OSTYPE]\/native.\n+# Treat *:libjvm as a special case, and replace it with the proper hotspot\n+# include directories.\n+ProcessSrcDir = \\\n@@ -82,1 +89,6 @@\n-    $(call FindSrcDirsForComponent, $(firstword $(subst :, , $1)), $(lastword $(subst :, , $1))) \\\n+    $(if $(filter %:libjvm, $1), \\\n+      $(HOTSPOT_INCLUDE_DIR) \\\n+    , \\\n+      $(call FindSrcDirsForComponent, $(firstword $(subst :, , $1)), \\\n+          $(lastword $(subst :, , $1))) \\\n+    ) \\\n@@ -87,1 +99,5 @@\n-      $(call FindSrcDirsForComponent, $(MODULE), $1) \\\n+      $(if $(filter libjvm, $1), \\\n+        $(HOTSPOT_INCLUDE_DIR) \\\n+      , \\\n+        $(call FindSrcDirsForComponent, $(MODULE), $1) \\\n+      ) \\\n@@ -91,0 +107,127 @@\n+# Create a proper LIBPATH for the given library. Sets result in $1_$2_LIBPATH.\n+# $1: The name of the rule (namespace)\n+# $2: The safe namespace of the library\n+define ResolveLibPath\n+  # Determine proper LIBPATH. This is quite messy due to historical reasons,\n+  # and because we need to have special treatment for \"gtest:\" and \":jvm\".\n+  ifneq ($$($1_$2_MODULE), gtest)\n+    ifneq ($$($1_$2_NAME), jvm)\n+      # This is the common case\n+      ifeq ($$(call isTargetOs, windows), true)\n+        $1_$2_LIBPATH := $$(SUPPORT_OUTPUTDIR)\/native\/$$($1_$2_MODULE)\/lib$$($1_$2_NAME)\n+      else\n+        ifeq ($(STATIC_LIBS), true)\n+          $1_$2_LIBPATH := $$(SUPPORT_OUTPUTDIR)\/native\/$$($1_$2_MODULE)\/lib$$($1_$2_NAME)\/static\n+        else\n+          $1_$2_LIBPATH := $$(SUPPORT_OUTPUTDIR)\/modules_libs\/$$($1_$2_MODULE)\n+        endif\n+      endif\n+    else\n+      # Special treatment for hotspot\n+      ifeq ($(CREATING_BUILDJDK), true)\n+        # When building a buildjdk, it's always only the server variant\n+        $1_$2_JVM_VARIANT_PATH := server\n+      else\n+        $1_$2_JVM_VARIANT_PATH := $(JVM_VARIANT_MAIN)\n+      endif\n+      ifeq ($$(call isTargetOs, windows), true)\n+        ifeq ($(STATIC_LIBS), true)\n+          $1_$2_LIBPATH := $$(HOTSPOT_OUTPUTDIR)\/variant-$$($1_$2_JVM_VARIANT_PATH)\/libjvm\/objs\/static\n+        else\n+          $1_$2_LIBPATH := $$(SUPPORT_OUTPUTDIR)\/modules_libs\/$$($1_$2_MODULE)\n+        endif\n+      else\n+        ifeq ($(STATIC_LIBS), true)\n+          $1_$2_LIBPATH := $$(HOTSPOT_OUTPUTDIR)\/variant-$$($1_$2_JVM_VARIANT_PATH)\/libjvm\/objs\/static\n+        else\n+          $1_$2_LIBPATH := $$(SUPPORT_OUTPUTDIR)\/modules_libs\/$$($1_$2_MODULE)\/$$($1_$2_JVM_VARIANT_PATH)\n+        endif\n+      endif\n+    endif\n+  else\n+    # Special treatment for virtual module \"gtest\"\n+    ifeq ($$($1_$2_NAME), jvm)\n+      ifeq ($$(call isTargetOs, windows), true)\n+        ifeq ($(STATIC_LIBS), true)\n+          $1_$2_LIBPATH := $$(JVM_OUTPUTDIR)\/gtest\/objs\/static\n+        else\n+          $1_$2_LIBPATH := $$(JVM_OUTPUTDIR)\/gtest\/objs\n+        endif\n+      else\n+        ifeq ($(STATIC_LIBS), true)\n+          $1_$2_LIBPATH := $$(JVM_OUTPUTDIR)\/gtest\/objs\/static\n+        else\n+          $1_$2_LIBPATH := $$(JVM_OUTPUTDIR)\/gtest\n+        endif\n+      endif\n+    else ifeq ($$($1_$2_NAME), gtest)\n+      $1_$2_LIBPATH := $$(JVM_OUTPUTDIR)\/libgtest\n+      ifeq ($(STATIC_LIBS), true)\n+        $1_$2_LIBPATH := $$(JVM_OUTPUTDIR)\/libgtest\/objs\/static\n+      else\n+        $1_$2_LIBPATH := $$(JVM_OUTPUTDIR)\/libgtest\n+      endif\n+    endif\n+  endif\n+endef\n+\n+# Process a JDK library designation such as \"java.desktop:jawt\" into the needed\n+# additions to EXTRA_LINK_DEPS, LDFLAGS, LIBS and EXTRA_HEADER_DIRS.\n+# $1: The name of the rule (namespace)\n+# $2: The safe namespace of the library\n+# $3: The actual string given to represent the library\n+define AddJdkLibrary\n+  $1_$2_NAME := $$(strip $$(lastword $$(subst :, , $3)))\n+  $1_$2_MODULE := $$(strip $$(patsubst %$$($1_$2_NAME), %, $3))\n+\n+  ifeq ($$(filter lib%, $$($1_$2_NAME)),)\n+    $$(error Library name $$($1_$2_NAME) missing lib prefix in $1)\n+  endif\n+  $1_$2_NAME := $$(strip $$(patsubst lib%, %, $$($1_$2_NAME)))\n+\n+  ifeq ($$($1_$2_MODULE),)\n+    $1_$2_MODULE := $$(MODULE)\n+  else\n+    $1_$2_MODULE := $$(strip $$(patsubst %:, %, $$($1_$2_MODULE)))\n+  endif\n+\n+  # Determine if the library in question is static.\n+  ifeq ($(STATIC_BUILD), true)\n+     $1_$2_STATIC_LIBRARY := true\n+  endif\n+  # Ideally, we should not hardcode these\n+  ifeq ($(call isTargetOs, aix)+$$($1_$2_MODULE):$$($1_$2_NAME), true+java.base:jli)\n+     $1_$2_STATIC_LIBRARY := true\n+  endif\n+  ifeq ($$($1_$2_MODULE):$$($1_$2_NAME), gtest:gtest)\n+     $1_$2_STATIC_LIBRARY := true\n+  endif\n+\n+  # Setup $1_$2_LIBPATH.\n+  $$(eval $$(call ResolveLibPath,$1,$2))\n+\n+  $1_EXTRA_HEADER_DIRS += $$($1_$2_MODULE):lib$$($1_$2_NAME)\n+\n+  ifneq ($(STATIC_LIBS), true)\n+    ifeq ($$(call isTargetOs, windows), true)\n+      ifeq ($$(filter -libpath:$$($1_$2_LIBPATH), $$($1_LDFLAGS)), )\n+        $1_LDFLAGS += -libpath:$$($1_$2_LIBPATH)\n+      endif\n+      $1_LIBS += $$($1_$2_NAME)$(STATIC_LIBRARY_SUFFIX)\n+      $1_$2_LIBFILE := $(LIBRARY_PREFIX)$$($1_$2_NAME)$(STATIC_LIBRARY_SUFFIX)\n+    else\n+      ifeq ($$(filter -L$$($1_$2_LIBPATH), $$($1_LDFLAGS)), )\n+        $1_LDFLAGS += -L$$($1_$2_LIBPATH)\n+      endif\n+      $1_LIBS += -l$$($1_$2_NAME)\n+      ifeq ($$($1_$2_STATIC_LIBRARY), true)\n+        $1_$2_LIBFILE := $(LIBRARY_PREFIX)$$($1_$2_NAME)$(STATIC_LIBRARY_SUFFIX)\n+      else\n+        $1_$2_LIBFILE := $(LIBRARY_PREFIX)$$($1_$2_NAME)$(SHARED_LIBRARY_SUFFIX)\n+      endif\n+    endif\n+\n+    $1_EXTRA_LINK_DEPS += $$($1_$2_LIBPATH)\/$$($1_$2_LIBFILE)\n+  endif\n+endef\n+\n@@ -112,3 +255,5 @@\n-#   EXTRA_RCFLAGS -- additional RCFLAGS to append.\n-#   EXTRA_HEADER_DIRS -- additional directories to look for headers in\n-#   EXTRA_SRC -- additional directories to look for source in\n+#   SRC -- this is passed on after preprocessing. The preprocessing will pass on\n+#     absolute paths unchanged, but relative paths will be expanded to include\n+#     all directories with this name in $MODULE\/[shared|$OS|$OSTYPE]\/native.\n+#   EXTRA_SRC -- additional directories to look for source in. This is processed\n+#     like SRC.\n@@ -117,0 +262,6 @@\n+#   EXTRA_HEADER_DIRS -- additional directories to look for headers in. This can\n+#     be specified either as an absolute path, or relative directory names which\n+#     are preprocessed like SRC, or in the format <module>:<directory>, which\n+#     will be processed like SRC but for the given module. The names\n+#     \"java.base:libjvm\" and \"gtest:libjvm\" symbolise virtual libraries that\n+#     will be replaced with proper values for hotspot.\n@@ -119,4 +270,7 @@\n-#   SRC -- this is passed on, but preprocessed to accept source dir designations\n-#   RC_FILEDESC -- override the default FILEDESC for Windows version.rc\n-#     such as \"java.base:headers\".\n-#   JDK_LIBS -- libraries generated by the JDK build system to link against\n+#   JDK_LIBS -- libraries generated by the JDK build system to link against.\n+#     These take the form <module>:<basename>. For the current module, the\n+#     module name and colon can be omitted. The basename should be specified\n+#     as the source directory, e.g. \"libjava\". The gtest module is a virtual\n+#     module that will be replaced with correct values for gtest. When\n+#     specifying JDK_LIBS, suitable values for EXTRA_LINK_DEPS, LDFLAGS, LIBS\n+#     and EXTRA_HEADER_DIRS will be added.\n@@ -125,0 +279,2 @@\n+#   EXTRA_RCFLAGS -- additional RCFLAGS to append.\n+#   RC_FILEDESC -- override the default FILEDESC for Windows version.rc\n@@ -186,1 +342,1 @@\n-    $1_SRC := $$(foreach dir, $$($1_SRC), $$(call ProcessDir, $$(dir)))\n+    $1_SRC := $$(foreach dir, $$($1_SRC), $$(call ProcessSrcDir, $$(dir)))\n@@ -189,1 +345,1 @@\n-    $1_SRC += $$(foreach dir, $$($1_EXTRA_SRC), $$(call ProcessDir, $$(dir)))\n+    $1_SRC += $$(foreach dir, $$($1_EXTRA_SRC), $$(call ProcessSrcDir, $$(dir)))\n@@ -227,2 +383,3 @@\n-  # Prepend JDK libs before external libs\n-  $1_LIBS := $$($1_JDK_LIBS) $$($1_LIBS)\n+  $$(foreach lib, $$($1_JDK_LIBS), \\\n+    $$(eval $$(call AddJdkLibrary,$1,$$(subst :,_,$$(lib)),$$(lib))) \\\n+  )\n@@ -230,5 +387,9 @@\n-  ifneq ($$($1_EXTRA_HEADER_DIRS), )\n-    $1_PROCESSED_EXTRA_HEADER_DIRS := $$(foreach dir, $$($1_EXTRA_HEADER_DIRS), \\\n-        $$(call ProcessDir, $$(dir)))\n-    $1_EXTRA_HEADER_FLAGS := $$(addprefix -I, $$($1_PROCESSED_EXTRA_HEADER_DIRS))\n-  endif\n+  # Add the include path for jni.h to all native compilations\n+  $1_EXTRA_HEADER_DIRS += \\\n+      $(SUPPORT_OUTPUTDIR)\/modules_include\/java.base \\\n+      java.base:include \\\n+      #\n+\n+  $1_PROCESSED_EXTRA_HEADER_DIRS := $$(foreach dir, $$($1_EXTRA_HEADER_DIRS), \\\n+      $$(call ProcessSrcDir, $$(dir)))\n+  $1_EXTRA_HEADER_FLAGS := $$(addprefix -I, $$($1_PROCESSED_EXTRA_HEADER_DIRS))\n","filename":"make\/common\/JdkNativeCompilation.gmk","additions":181,"deletions":20,"binary":false,"changes":201,"status":"modified"},{"patch":"@@ -87,0 +87,1 @@\n+#   EXTRA_LINK_DEPS List of extra dependencies to be added to the link stage\n","filename":"make\/common\/NativeCompilation.gmk","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -72,1 +72,0 @@\n-    $1_LDFLAGS := $(LDFLAGS_TESTEXE)\n@@ -106,0 +105,3 @@\n+        EXTRA_HEADER_DIRS := \\\n+            java.base:libjava \\\n+            java.base:libjvm, \\\n@@ -112,1 +114,1 @@\n-        LDFLAGS := $$($1_LDFLAGS) $$($1_LDFLAGS_$$(name)), \\\n+        LDFLAGS := $$($1_LDFLAGS_$$(name)), \\\n@@ -117,0 +119,1 @@\n+        JDK_LIBS := $$($1_JDK_LIBS_$$(name)), \\\n","filename":"make\/common\/TestFilesCompilation.gmk","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -125,2 +125,0 @@\n-  $1_WINDOWS_JLI_LIB := $(call FindStaticLib, java.base, jli, \/libjli)\n-\n@@ -151,0 +149,1 @@\n+      EXTRA_HEADER_DIRS := java.base:libjvm, \\\n@@ -153,9 +152,4 @@\n-      LDFLAGS_linux := $$(call SET_EXECUTABLE_ORIGIN,\/..\/lib) \\\n-          -L$(call FindLibDirForModule, java.base), \\\n-      LDFLAGS_macosx := $$(call SET_EXECUTABLE_ORIGIN,\/..\/lib) \\\n-          -L$(call FindLibDirForModule, java.base), \\\n-      LDFLAGS_aix := -L$(SUPPORT_OUTPUTDIR)\/native\/java.base, \\\n-      JDK_LIBS_unix := -ljli, \\\n-      JDK_LIBS_windows := \\\n-          $(SUPPORT_OUTPUTDIR)\/native\/java.base\/libjava\/java.lib \\\n-          $$($1_WINDOWS_JLI_LIB), \\\n+      LDFLAGS_linux := $$(call SET_EXECUTABLE_ORIGIN,\/..\/lib), \\\n+      LDFLAGS_macosx := $$(call SET_EXECUTABLE_ORIGIN,\/..\/lib), \\\n+      JDK_LIBS := java.base:libjli, \\\n+      JDK_LIBS_windows := java.base:libjava, \\\n@@ -181,9 +175,0 @@\n-  ifeq ($(call isTargetOs, aix), true)\n-    $$(BUILD_LAUNCHER_$1): $(call FindStaticLib, java.base, jli)\n-  endif\n-\n-  ifeq ($(call isTargetOs, windows), true)\n-    $$(BUILD_LAUNCHER_$1): $(call FindStaticLib, java.base, java, \/libjava) \\\n-        $$($1_WINDOWS_JLI_LIB)\n-  endif\n-\n","filename":"make\/common\/modules\/LauncherCommon.gmk","additions":5,"deletions":20,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -27,11 +27,0 @@\n-\n-################################################################################\n-\n-# Absolute paths to lib files on windows for use in LIBS. Should figure out a more\n-# elegant solution to this.\n-WIN_JAVA_LIB := $(SUPPORT_OUTPUTDIR)\/native\/java.base\/libjava\/java.lib\n-\n-# Put the libraries here.\n-INSTALL_LIBRARIES_HERE := $(call FindLibDirForModule, $(MODULE))\n-\n-################################################################################\n","filename":"make\/common\/modules\/LibCommon.gmk","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-  $1_TARGET_DEPS := $$($1_ALL_OBJS) $$($1_VARDEPS_FILE)\n+  $1_TARGET_DEPS := $$($1_ALL_OBJS) $$($1_EXTRA_LINK_DEPS) $$($1_VARDEPS_FILE)\n@@ -144,1 +144,1 @@\n-  $1_TARGET_DEPS := $$($1_ALL_OBJS) $$($1_VARDEPS_FILE)\n+  $1_TARGET_DEPS := $$($1_ALL_OBJS) $$($1_EXTRA_LINK_DEPS) $$($1_VARDEPS_FILE)\n","filename":"make\/common\/native\/Link.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,1 +46,4 @@\n-  $$($1_TARGET): $$($1_ALL_OBJS) $$($1_RES) $$($1_VARDEPS_FILE)\n+  $1_TARGET_DEPS :=  $$($1_ALL_OBJS) $$($1_RES) $$($1_EXTRA_LINK_DEPS) \\\n+      $$($1_VARDEPS_FILE)\n+\n+  $$($1_TARGET): $$($1_TARGET_DEPS)\n@@ -90,1 +93,1 @@\n-      $$($1_VARDEPS_FILE)\n+      $$($1_EXTRA_LINK_DEPS) $$($1_VARDEPS_FILE)\n","filename":"make\/common\/native\/LinkMicrosoft.gmk","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -113,3 +113,1 @@\n-    LDFLAGS_unix := -L$(JVM_OUTPUTDIR)\/libgtest, \\\n-    JDK_LIBS_unix := -lgtest, \\\n-    JDK_LIBS_windows := $(JVM_OUTPUTDIR)\/libgtest\/gtest.lib, \\\n+    JDK_LIBS := gtest:libgtest, \\\n@@ -154,3 +152,2 @@\n-    LDFLAGS_unix := -L$(JVM_OUTPUTDIR)\/gtest $(call SET_SHARED_LIBRARY_ORIGIN), \\\n-    JDK_LIBS_unix := -ljvm, \\\n-    JDK_LIBS_windows := $(JVM_OUTPUTDIR)\/gtest\/objs\/jvm.lib, \\\n+    LDFLAGS_unix := $(call SET_SHARED_LIBRARY_ORIGIN), \\\n+    JDK_LIBS := gtest:libjvm, \\\n@@ -161,2 +158,0 @@\n-$(BUILD_GTEST_LAUNCHER): $(BUILD_GTEST_LIBJVM)\n-\n","filename":"make\/hotspot\/lib\/CompileGtest.gmk","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -56,2 +56,1 @@\n-    JDK_LIBS_unix := -ljava -ljvm, \\\n-    JDK_LIBS_windows := $(WIN_JAVA_LIB) jvm.lib, \\\n+    JDK_LIBS := libjava libjvm, \\\n@@ -67,2 +66,0 @@\n-$(BUILD_LIBNET): $(BUILD_LIBJAVA)\n-\n@@ -81,4 +78,2 @@\n-        libnet, \\\n-    JDK_LIBS_unix := -ljava -lnet, \\\n-    JDK_LIBS_windows := $(WIN_JAVA_LIB) jvm.lib \\\n-        $(SUPPORT_OUTPUTDIR)\/native\/$(MODULE)\/libnet\/net.lib, \\\n+        libjvm, \\\n+    JDK_LIBS := libjava libnet, \\\n@@ -95,2 +90,0 @@\n-$(BUILD_LIBNIO): $(BUILD_LIBNET)\n-\n@@ -106,2 +99,1 @@\n-      LDFLAGS := -L$(SUPPORT_OUTPUTDIR)\/modules_libs\/java.base,\\\n-      JDK_LIBS := $(JDKLIB_LIBS), \\\n+      JDK_LIBS := libjava, \\\n@@ -114,2 +106,0 @@\n-  $(BUILD_LIBOSXSECURITY): $(BUILD_LIBJAVA)\n-\n@@ -207,0 +197,1 @@\n+      EXTRA_HEADER_DIRS := java.base:libjava, \\\n","filename":"make\/modules\/java.base\/Lib.gmk","additions":5,"deletions":14,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -38,2 +38,2 @@\n-    JDK_LIBS_unix := -ljvm, \\\n-    JDK_LIBS_windows := jvm.lib, \\\n+    EXTRA_HEADER_DIRS := libjava, \\\n+    JDK_LIBS := libjvm, \\\n@@ -61,3 +61,1 @@\n-    LDFLAGS_macosx := -L$(SUPPORT_OUTPUTDIR)\/native\/$(MODULE)\/, \\\n-    JDK_LIBS_unix := -ljvm, \\\n-    JDK_LIBS_windows := jvm.lib, \\\n+    JDK_LIBS := libjvm, \\\n@@ -75,2 +73,0 @@\n-$(BUILD_LIBJAVA): $(BUILD_LIBVERIFY)\n-\n@@ -99,2 +95,1 @@\n-    JDK_LIBS_unix := -ljava -ljvm, \\\n-    JDK_LIBS_windows := $(WIN_JAVA_LIB) jvm.lib, \\\n+    JDK_LIBS := libjava libjvm, \\\n@@ -104,2 +99,0 @@\n-$(BUILD_LIBZIP): $(BUILD_LIBJAVA)\n-\n@@ -116,0 +109,1 @@\n+    EXTRA_HEADER_DIRS := libjava, \\\n@@ -118,2 +112,1 @@\n-    JDK_LIBS_unix := -ljvm, \\\n-    JDK_LIBS_windows := jvm.lib, \\\n+    JDK_LIBS := libjvm, \\\n@@ -123,2 +116,0 @@\n-$(BUILD_LIBJIMAGE): $(BUILD_LIBJAVA)\n-\n@@ -176,0 +167,1 @@\n+    EXTRA_HEADER_DIRS := libjvm, \\\n","filename":"make\/modules\/java.base\/lib\/CoreLibraries.gmk","additions":7,"deletions":15,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -63,0 +63,1 @@\n+      EXTRA_HEADER_DIRS := java.base:libjava, \\\n@@ -67,2 +68,0 @@\n-      JDK_LIBS_unix := -ljava -ljvm, \\\n-      JDK_LIBS_windows := $(WIN_JAVA_LIB), \\\n@@ -80,2 +79,0 @@\n-  $(BUILD_LIBJSOUND): $(call FindLib, java.base, java)\n-\n@@ -97,1 +94,1 @@\n-      JDK_LIBS_macosx := -ljava, \\\n+      JDK_LIBS := java.base:libjava, \\\n@@ -112,2 +109,0 @@\n-  $(BUILD_LIBOSXAPP): $(call FindLib, java.base, java)\n-\n@@ -123,1 +118,1 @@\n-      EXTRA_HEADER_DIRS := libosxapp, \\\n+      EXTRA_HEADER_DIRS := java.base:libjava, \\\n@@ -125,2 +120,1 @@\n-      LDFLAGS := -L$(SUPPORT_OUTPUTDIR)\/modules_libs\/java.desktop, \\\n-      JDK_LIBS_macosx := $(JDKLIB_LIBS) -losxapp, \\\n+      JDK_LIBS := libosxapp, \\\n@@ -135,4 +129,0 @@\n-\n-  $(BUILD_LIBOSX): $(call FindLib, java.desktop, osxapp)\n-\n-  $(BUILD_LIBOSX): $(call FindLib, java.base, java)\n","filename":"make\/modules\/java.desktop\/Lib.gmk","additions":4,"deletions":14,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -26,2 +26,0 @@\n-WIN_AWT_LIB := $(SUPPORT_OUTPUTDIR)\/native\/$(MODULE)\/libawt\/awt.lib\n-\n@@ -48,0 +46,1 @@\n+    EXTRA_HEADER_DIRS := java.base:libjava, \\\n@@ -53,1 +52,0 @@\n-    JDK_LIBS := $(JDKLIB_LIBS), \\\n@@ -57,2 +55,0 @@\n-$(BUILD_LIBMLIB_IMAGE): $(call FindLib, java.base, java)\n-\n@@ -102,1 +98,0 @@\n-    java.base:libjava \\\n@@ -141,1 +136,0 @@\n-    LDFLAGS_macosx := -L$(INSTALL_LIBRARIES_HERE), \\\n@@ -146,3 +140,1 @@\n-    JDK_LIBS_unix := -ljava -ljvm, \\\n-    JDK_LIBS_macosx := -lmlib_image, \\\n-    JDK_LIBS_windows := $(WIN_JAVA_LIB) jvm.lib, \\\n+    JDK_LIBS := java.base:libjava java.base:libjvm, \\\n@@ -166,6 +158,0 @@\n-$(BUILD_LIBAWT): $(call FindLib, java.base, java)\n-\n-ifeq ($(call isTargetOs, macosx), true)\n-  $(BUILD_LIBAWT): $(BUILD_LIBMLIB_IMAGE)\n-endif\n-\n@@ -195,0 +181,1 @@\n+      java.base:libjvm \\\n@@ -254,2 +241,1 @@\n-      LDFLAGS := -L$(INSTALL_LIBRARIES_HERE), \\\n-      JDK_LIBS_unix := -lawt -ljava -ljvm, \\\n+      JDK_LIBS := libawt java.base:libjava, \\\n@@ -262,4 +248,0 @@\n-  $(BUILD_LIBAWT_XAWT): $(call FindLib, java.base, java)\n-\n-  $(BUILD_LIBAWT_XAWT): $(BUILD_LIBAWT)\n-\n@@ -299,1 +281,2 @@\n-        libawt\/java2d, \\\n+        libawt\/java2d \\\n+        java.base:libjvm, \\\n@@ -304,3 +287,1 @@\n-    LDFLAGS_unix := -L$(INSTALL_LIBRARIES_HERE), \\\n-    JDK_LIBS_unix := -lawt -ljava -ljvm, \\\n-    JDK_LIBS_windows := $(WIN_AWT_LIB) $(WIN_JAVA_LIB), \\\n+    JDK_LIBS := libawt java.base:libjava, \\\n@@ -312,2 +293,0 @@\n-$(BUILD_LIBLCMS): $(BUILD_LIBAWT)\n-\n@@ -342,2 +321,1 @@\n-    JDK_LIBS := $(JDKLIB_LIBS), \\\n-    JDK_LIBS_windows := $(WIN_JAVA_LIB) jvm.lib, \\\n+    JDK_LIBS := java.base:libjava, \\\n@@ -347,2 +325,0 @@\n-$(BUILD_LIBJAVAJPEG): $(call FindLib, java.base, java)\n-\n@@ -369,0 +345,1 @@\n+      java.base:libjvm \\\n@@ -389,2 +366,1 @@\n-      LDFLAGS_unix := -L$(INSTALL_LIBRARIES_HERE), \\\n-      JDK_LIBS_unix := -lawt -ljava -ljvm, \\\n+      JDK_LIBS := libawt java.base:libjava, \\\n@@ -395,2 +371,0 @@\n-  $(BUILD_LIBAWT_HEADLESS): $(BUILD_LIBAWT)\n-\n@@ -470,1 +444,0 @@\n-    libharfbuzz \\\n@@ -484,7 +457,1 @@\n-\n-  ifeq ($(call isTargetOs, windows), true)\n-    LIBFONTMANAGER_JDK_LIBS += \\\n-        $(SUPPORT_OUTPUTDIR)\/native\/$(MODULE)\/libfreetype\/freetype.lib\n-  else\n-    LIBFONTMANAGER_JDK_LIBS += -lfreetype\n-  endif\n+  LIBFONTMANAGER_JDK_LIBS += libfreetype\n@@ -536,1 +503,0 @@\n-    LDFLAGS_unix := -L$(INSTALL_LIBRARIES_HERE), \\\n@@ -538,4 +504,2 @@\n-    JDK_LIBS := $(LIBFONTMANAGER_JDK_LIBS), \\\n-    JDK_LIBS_unix := -lawt -ljava -ljvm, \\\n-    JDK_LIBS_macosx := -lawt_lwawt, \\\n-    JDK_LIBS_windows := $(WIN_AWT_LIB) $(WIN_JAVA_LIB), \\\n+    JDK_LIBS := libawt java.base:libjava $(LIBFONTMANAGER_JDK_LIBS), \\\n+    JDK_LIBS_macosx := libawt_lwawt, \\\n@@ -551,10 +515,0 @@\n-$(BUILD_LIBFONTMANAGER): $(BUILD_LIBAWT)\n-\n-ifeq ($(call isTargetOs, macosx), true)\n-  $(BUILD_LIBFONTMANAGER): $(call FindLib, $(MODULE), awt_lwawt)\n-endif\n-\n-ifeq ($(FREETYPE_TO_USE), bundled)\n-  $(BUILD_LIBFONTMANAGER): $(BUILD_LIBFREETYPE)\n-endif\n-\n@@ -569,0 +523,1 @@\n+    java.base:libjava \\\n@@ -579,1 +534,1 @@\n-      java.base:libjava \\\n+      java.base:libjvm \\\n@@ -601,1 +556,1 @@\n-  LIBJAWT_JDK_LIBS_unix := -lawt\n+  LIBJAWT_JDK_LIBS_unix := libawt\n@@ -603,1 +558,1 @@\n-    LIBJAWT_JDK_LIBS_unix += -lawt_xawt\n+    LIBJAWT_JDK_LIBS_unix += libawt_xawt\n@@ -605,1 +560,1 @@\n-    LIBJAWT_JDK_LIBS_unix += -lawt_headless\n+    LIBJAWT_JDK_LIBS_unix += libawt_headless\n@@ -619,1 +574,0 @@\n-    LDFLAGS_unix := -L$(INSTALL_LIBRARIES_HERE), \\\n@@ -621,3 +575,3 @@\n-    JDK_LIBS_unix := $(LIBJAWT_JDK_LIBS_unix) $(JDKLIB_LIBS), \\\n-    JDK_LIBS_macosx := -lawt_lwawt, \\\n-    JDK_LIBS_windows := $(WIN_AWT_LIB), \\\n+    JDK_LIBS_unix := $(LIBJAWT_JDK_LIBS_unix), \\\n+    JDK_LIBS_windows := libawt, \\\n+    JDK_LIBS_macosx := libawt_lwawt, \\\n@@ -628,12 +582,0 @@\n-ifeq ($(call isTargetOs, windows), true)\n-  $(BUILD_LIBJAWT): $(BUILD_LIBAWT)\n-else ifeq ($(call isTargetOs, macosx), true)\n-   $(BUILD_LIBJAWT): $(call FindLib, $(MODULE), awt_lwawt)\n-else\n-  ifeq ($(ENABLE_HEADLESS_ONLY), false)\n-    $(BUILD_LIBJAWT): $(BUILD_LIBAWT_XAWT)\n-  else\n-    $(BUILD_LIBJAWT): $(call FindLib, $(MODULE), awt_headless)\n-  endif\n-endif\n-\n@@ -666,0 +608,1 @@\n+      java.base:libjvm \\\n@@ -761,1 +704,0 @@\n-      LDFLAGS_macosx := -L$(INSTALL_LIBRARIES_HERE), \\\n@@ -763,3 +705,2 @@\n-      JDK_LIBS := $(JDKLIB_LIBS), \\\n-      JDK_LIBS_macosx := -losxapp, \\\n-      JDK_LIBS_windows := $(WIN_JAVA_LIB) jvm.lib, \\\n+      JDK_LIBS_windows := java.base:libjava, \\\n+      JDK_LIBS_macosx := libosxapp, \\\n@@ -780,4 +721,0 @@\n-\n-  ifeq ($(call isTargetOs, macosx), true)\n-    $(BUILD_LIBSPLASHSCREEN): $(call FindLib, $(MODULE), osxapp)\n-  endif\n@@ -806,1 +743,1 @@\n-      libosxapp \\\n+      java.base:libjvm \\\n@@ -836,2 +773,1 @@\n-      LDFLAGS := -L$(INSTALL_LIBRARIES_HERE), \\\n-      JDK_LIBS_macosx := -lawt -ljava -ljvm -lmlib_image -losxapp, \\\n+      JDK_LIBS := libawt java.base:libjava libosxapp, \\\n@@ -854,8 +790,0 @@\n-  $(BUILD_LIBAWT_LWAWT): $(BUILD_LIBAWT)\n-\n-  $(BUILD_LIBAWT_LWAWT): $(BUILD_LIBMLIB_IMAGE)\n-\n-  $(BUILD_LIBAWT_LWAWT): $(call FindLib, $(MODULE), osxapp)\n-\n-  $(BUILD_LIBAWT_LWAWT): $(call FindLib, java.base, java)\n-\n@@ -870,1 +798,1 @@\n-  SHADERS_LIB := $(INSTALL_LIBRARIES_HERE)\/shaders.metallib\n+  SHADERS_LIB := $(call FindLibDirForModule, $(MODULE))\/shaders.metallib\n@@ -896,2 +824,1 @@\n-          libawt_lwawt\/awt \\\n-          libosxapp, \\\n+          libawt_lwawt\/awt, \\\n@@ -902,2 +829,1 @@\n-      LDFLAGS := -L$(INSTALL_LIBRARIES_HERE), \\\n-      JDK_LIBS_macosx := -lawt -lawt_lwawt -ljava -ljvm -losxapp, \\\n+      JDK_LIBS := java.base:libjava libosxapp, \\\n@@ -915,6 +841,0 @@\n-\n-  $(BUILD_LIBOSXUI): $(BUILD_LIBAWT)\n-\n-  $(BUILD_LIBOSXUI): $(call FindLib, $(MODULE), osxapp)\n-\n-  $(BUILD_LIBOSXUI): $(BUILD_LIBAWT_LWAWT)\n","filename":"make\/modules\/java.desktop\/lib\/Awt2dLibraries.gmk","additions":29,"deletions":109,"binary":false,"changes":138,"status":"modified"},{"patch":"@@ -39,8 +39,1 @@\n-    EXTRA_HEADER_DIRS := java.base:libjli, \\\n-    LDFLAGS_linux := -L$(call FindLibDirForModule, java.base), \\\n-    LDFLAGS_macosx := -L$(call FindLibDirForModule, java.base), \\\n-    LDFLAGS_aix := -L$(SUPPORT_OUTPUTDIR)\/native\/java.base, \\\n-    JDK_LIBS := $(JDKLIB_LIBS), \\\n-    JDK_LIBS_unix := -ljli, \\\n-    JDK_LIBS_windows := $(WIN_JAVA_LIB) \\\n-        $(SUPPORT_OUTPUTDIR)\/native\/java.base\/libjli\/jli.lib jvm.lib, \\\n+    JDK_LIBS := java.base:libjava java.base:libjli java.base:libjvm, \\\n@@ -57,7 +50,0 @@\n-ifeq ($(call isTargetOs, aix), true)\n-  $(BUILD_LIBINSTRUMENT): $(call FindStaticLib, java.base, jli)\n-else\n-  $(BUILD_LIBINSTRUMENT): $(call FindLib, java.base, jli)\n-endif\n-$(BUILD_LIBINSTRUMENT): $(call FindLib, java.base, java)\n-\n","filename":"make\/modules\/java.instrument\/Lib.gmk","additions":1,"deletions":15,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -40,2 +40,1 @@\n-    JDK_LIBS := $(JDKLIB_LIBS), \\\n-    JDK_LIBS_windows := $(WIN_JAVA_LIB) jvm.lib, \\\n+    JDK_LIBS := java.base:libjava java.base:libjvm, \\\n@@ -46,2 +45,0 @@\n-$(BUILD_LIBMANAGEMENT): $(call FindLib, java.base, java)\n-\n","filename":"make\/modules\/java.management\/Lib.gmk","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -41,4 +41,1 @@\n-    JDK_LIBS_unix := -ljvm, \\\n-    JDK_LIBS_linux := -ljava, \\\n-    JDK_LIBS_aix := -ljava, \\\n-    JDK_LIBS_windows := $(WIN_JAVA_LIB) jvm.lib, \\\n+    JDK_LIBS := java.base:libjava java.base:libjvm, \\\n@@ -51,2 +48,0 @@\n-$(BUILD_LIBPREFS): $(call FindLib, java.base, java)\n-\n","filename":"make\/modules\/java.prefs\/Lib.gmk","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+    EXTRA_HEADER_DIRS := java.base:libjava, \\\n@@ -35,2 +36,1 @@\n-    JDK_LIBS_unix := -ljvm, \\\n-    JDK_LIBS_windows := jvm.lib, \\\n+    JDK_LIBS := java.base:libjvm, \\\n@@ -39,2 +39,0 @@\n-$(BUILD_LIBRMI): $(call FindLib, java.base, java)\n-\n","filename":"make\/modules\/java.rmi\/Lib.gmk","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+    EXTRA_HEADER_DIRS := java.base:libjava, \\\n@@ -50,1 +51,3 @@\n-      EXTRA_HEADER_DIRS := libj2gss, \\\n+      EXTRA_HEADER_DIRS := \\\n+          libj2gss \\\n+          java.base:libjava, \\\n@@ -66,0 +69,1 @@\n+        EXTRA_HEADER_DIRS := java.base:libjava, \\\n@@ -82,0 +86,1 @@\n+        EXTRA_HEADER_DIRS := java.base:libjava, \\\n","filename":"make\/modules\/java.security.jgss\/Lib.gmk","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -35,1 +35,3 @@\n-    EXTRA_HEADER_DIRS := libj2pcsc\/MUSCLE, \\\n+    EXTRA_HEADER_DIRS := \\\n+        libj2pcsc\/MUSCLE \\\n+        java.base:libjava, \\\n","filename":"make\/modules\/java.smartcardio\/Lib.gmk","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-        JDK_LIBS_windows := $(SUPPORT_OUTPUTDIR)\/native\/java.desktop\/libjawt\/jawt.lib, \\\n+        JDK_LIBS := java.desktop:libjawt, \\\n@@ -59,2 +59,0 @@\n-    $$(BUILD_LIBJAVAACCESSBRIDGE$1): $(call FindStaticLib, java.desktop, jawt, \/libjawt)\n-\n","filename":"make\/modules\/jdk.accessibility\/Lib.gmk","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -44,2 +44,1 @@\n-    JDK_LIBS := $(JDKLIB_LIBS), \\\n-    JDK_LIBS_windows := $(WIN_JAVA_LIB), \\\n+    JDK_LIBS := java.base:libjava, \\\n@@ -49,2 +48,0 @@\n-$(BUILD_LIBATTACH): $(call FindLib, java.base, java)\n-\n","filename":"make\/modules\/jdk.attach\/Lib.gmk","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+    EXTRA_HEADER_DIRS := java.base:libjava, \\\n","filename":"make\/modules\/jdk.crypto.cryptoki\/Lib.gmk","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+      EXTRA_HEADER_DIRS := java.base:libjava, \\\n","filename":"make\/modules\/jdk.crypto.mscapi\/Lib.gmk","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -60,0 +60,1 @@\n+    EXTRA_HEADER_DIRS := java.base:libjvm, \\\n@@ -69,2 +70,1 @@\n-    JDK_LIBS_unix := -ljava, \\\n-    JDK_LIBS_windows := $(WIN_JAVA_LIB), \\\n+    JDK_LIBS := java.base:libjava, \\\n","filename":"make\/modules\/jdk.hotspot.agent\/Lib.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,0 +37,3 @@\n+      EXTRA_HEADER_DIRS := \\\n+          java.base:libjava \\\n+          java.base:libjvm, \\\n@@ -38,1 +41,0 @@\n-      JDK_LIBS := $(JDKLIB_LIBS), \\\n","filename":"make\/modules\/jdk.internal.le\/Lib.gmk","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-      JDK_LIBS := $(JDKLIB_LIBS), \\\n","filename":"make\/modules\/jdk.jdi\/Lib.gmk","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -43,2 +43,0 @@\n-$(BUILD_LIBDT_SOCKET): $(call FindLib, java.base, java)\n-\n@@ -64,2 +62,3 @@\n-        libjdwp\/export, \\\n-    JDK_LIBS := $(JDKLIB_LIBS), \\\n+        libjdwp\/export \\\n+        java.base:libjava \\\n+        java.base:libjvm, \\\n@@ -71,2 +70,0 @@\n-$(BUILD_LIBJDWP): $(call FindLib, java.base, java)\n-\n","filename":"make\/modules\/jdk.jdwp.agent\/Lib.gmk","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -35,2 +35,1 @@\n-    JDK_LIBS := $(JDKLIB_LIBS), \\\n-    JDK_LIBS_windows := $(WIN_JAVA_LIB), \\\n+    JDK_LIBS := java.base:libjava, \\\n@@ -40,2 +39,0 @@\n-$(BUILD_LIBMANAGEMENT_AGENT): $(call FindLib, java.base, java)\n-\n","filename":"make\/modules\/jdk.management.agent\/Lib.gmk","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -49,2 +49,1 @@\n-    JDK_LIBS := $(JDKLIB_LIBS), \\\n-    JDK_LIBS_windows := $(WIN_JAVA_LIB) jvm.lib, \\\n+    JDK_LIBS := java.base:libjava java.base:libjvm, \\\n@@ -55,2 +54,0 @@\n-$(BUILD_LIBMANAGEMENT_EXT): $(call FindLib, java.base, java)\n-\n","filename":"make\/modules\/jdk.management\/Lib.gmk","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -35,3 +35,2 @@\n-    JDK_LIBS_unix := -ljava, \\\n-    JDK_LIBS_linux := -ljvm, \\\n-    JDK_LIBS_windows := $(WIN_JAVA_LIB) jvm.lib, \\\n+    EXTRA_HEADER_DIRS := java.base:libjvm, \\\n+    JDK_LIBS := java.base:libjava, \\\n@@ -41,2 +40,0 @@\n-$(BUILD_LIBEXTNET): $(call FindLib, java.base, java)\n-\n","filename":"make\/modules\/jdk.net\/Lib.gmk","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -38,1 +38,2 @@\n-          java.base:libnet \\\n+          java.base:libjvm \\\n+          java.base:libnio \\\n@@ -40,1 +41,1 @@\n-      JDK_LIBS_unix := -ljava -ljvm -lnet -lnio, \\\n+      JDK_LIBS := java.base:libjava java.base:libnet, \\\n@@ -45,2 +46,0 @@\n-\n-  $(BUILD_LIBSCTP): $(call FindLib, java.base, nio)\n","filename":"make\/modules\/jdk.sctp\/Lib.gmk","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+    EXTRA_HEADER_DIRS := java.base:libjava, \\\n@@ -38,2 +39,0 @@\n-$(BUILD_LIBJAAS): $(call FindLib, java.base, java)\n-\n","filename":"make\/modules\/jdk.security.auth\/Lib.gmk","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -845,3 +845,5 @@\n-  BUILD_HOTSPOT_JTREG_EXECUTABLES_LIBS_exeinvoke := -ljvm -lpthread\n-  BUILD_HOTSPOT_JTREG_EXECUTABLES_LIBS_exestack-gap := -ljvm -lpthread\n-  BUILD_HOTSPOT_JTREG_EXECUTABLES_LIBS_exestack-tls := -ljvm\n+  BUILD_HOTSPOT_JTREG_EXECUTABLES_JDK_LIBS_exeinvoke := java.base:libjvm\n+  BUILD_HOTSPOT_JTREG_EXECUTABLES_JDK_LIBS_exestack-gap := java.base:libjvm\n+  BUILD_HOTSPOT_JTREG_EXECUTABLES_JDK_LIBS_exestack-tls := java.base:libjvm\n+  BUILD_HOTSPOT_JTREG_EXECUTABLES_LIBS_exeinvoke := -lpthread\n+  BUILD_HOTSPOT_JTREG_EXECUTABLES_LIBS_exestack-gap := -lpthread\n@@ -862,1 +864,3 @@\n-BUILD_HOTSPOT_JTREG_EXECUTABLES_LIBS_exesigtest := -ljvm\n+BUILD_HOTSPOT_JTREG_EXECUTABLES_JDK_LIBS_exesigtest := java.base:libjvm\n+BUILD_HOTSPOT_JTREG_LIBRARIES_JDK_LIBS_libatExit := java.base:libjvm\n+BUILD_HOTSPOT_JTREG_EXECUTABLES_JDK_LIBS_exedaemonDestroy := java.base:libjvm\n@@ -867,3 +871,1 @@\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libatExit := jvm.lib\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libnativeStack := jvm.lib\n-  BUILD_HOTSPOT_JTREG_EXECUTABLES_LIBS_exedaemonDestroy := jvm.lib\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_JDK_LIBS_libnativeStack := java.base:libjvm\n@@ -871,1 +873,0 @@\n-  BUILD_HOTSPOT_JTREG_EXECUTABLES_LIBS_exedaemonDestroy := -ljvm\n@@ -1506,1 +1507,0 @@\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libatExit += -ljvm\n@@ -1510,1 +1510,2 @@\n-  BUILD_HOTSPOT_JTREG_EXECUTABLES_LIBS_exeGetCreatedJavaVMs := -ljvm -lpthread\n+  BUILD_HOTSPOT_JTREG_EXECUTABLES_LIBS_exeGetCreatedJavaVMs := -lpthread\n+  BUILD_HOTSPOT_JTREG_EXECUTABLES_JDK_LIBS_exeGetCreatedJavaVMs := java.base:libjvm\n","filename":"make\/test\/JtregNativeHotspot.gmk","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -56,0 +56,9 @@\n+BUILD_JDK_JTREG_EXECUTABLES_JDK_LIBS_exeJliLaunchTest := java.base:libjli\n+BUILD_JDK_JTREG_EXECUTABLES_JDK_LIBS_exeCallerAccessTest := java.base:libjvm\n+BUILD_JDK_JTREG_EXECUTABLES_JDK_LIBS_exeNullCallerTest := java.base:libjvm\n+\n+BUILD_JDK_JTREG_LIBRARIES_JDK_LIBS_libstringPlatformChars := java.base:libjava\n+BUILD_JDK_JTREG_LIBRARIES_JDK_LIBS_libTracePinnedThreads := java.base:libjvm\n+BUILD_JDK_JTREG_LIBRARIES_JDK_LIBS_libNewDirectByteBuffer := java.base:libjava\n+BUILD_JDK_JTREG_LIBRARIES_JDK_LIBS_libGetXSpace := java.base:libjava\n+\n@@ -62,6 +71,1 @@\n-  WIN_LIB_JAVA := $(SUPPORT_OUTPUTDIR)\/native\/java.base\/libjava\/java.lib\n-  BUILD_JDK_JTREG_LIBRARIES_LIBS_libstringPlatformChars := $(WIN_LIB_JAVA)\n-  WIN_LIB_JLI := $(SUPPORT_OUTPUTDIR)\/native\/java.base\/libjli\/jli.lib\n-  BUILD_JDK_JTREG_EXECUTABLES_LIBS_exeJliLaunchTest := $(WIN_LIB_JLI)\n-  BUILD_JDK_JTREG_EXECUTABLES_LIBS_exeCallerAccessTest := jvm.lib\n-  BUILD_JDK_JTREG_EXECUTABLES_LIBS_exeNullCallerTest := $(LIBCXX) jvm.lib\n+  BUILD_JDK_JTREG_EXECUTABLES_LIBS_exeNullCallerTest := $(LIBCXX)\n@@ -70,3 +74,0 @@\n-  BUILD_JDK_JTREG_LIBRARIES_LIBS_libTracePinnedThreads := jvm.lib\n-  BUILD_JDK_JTREG_LIBRARIES_LIBS_libNewDirectByteBuffer := $(WIN_LIB_JAVA)\n-  BUILD_JDK_JTREG_LIBRARIES_LIBS_libGetXSpace := $(WIN_LIB_JAVA)\n@@ -74,4 +75,1 @@\n-  BUILD_JDK_JTREG_LIBRARIES_LIBS_libstringPlatformChars := -ljava\n-  BUILD_JDK_JTREG_LIBRARIES_LIBS_libDirectIO := -ljava\n-  BUILD_JDK_JTREG_LIBRARIES_LIBS_libNewDirectByteBuffer := -ljava\n-  BUILD_JDK_JTREG_LIBRARIES_LIBS_libGetXSpace := -ljava\n+  BUILD_JDK_JTREG_LIBRARIES_JDK_LIBS_libDirectIO := java.base:libjava\n@@ -87,1 +85,1 @@\n-  BUILD_JDK_JTREG_LIBRARIES_LIBS_libExplicitAttach := -ljvm\n+  BUILD_JDK_JTREG_LIBRARIES_JDK_LIBS_libExplicitAttach := java.base:libjvm\n@@ -90,1 +88,0 @@\n-  BUILD_JDK_JTREG_LIBRARIES_LIBS_libTracePinnedThreads := -ljvm\n@@ -93,1 +90,1 @@\n-    BUILD_JDK_JTREG_LIBRARIES_LIBS_libInheritedChannel := -ljava\n+    BUILD_JDK_JTREG_LIBRARIES_JDK_LIBS_libInheritedChannel := java.base:libjava\n@@ -96,6 +93,1 @@\n-  BUILD_JDK_JTREG_EXECUTABLES_LIBS_exeJliLaunchTest := -ljli\n-  ifeq ($(call isTargetOs, aix), true)\n-    BUILD_JDK_JTREG_EXECUTABLES_LDFLAGS_exeJliLaunchTest := -L$(SUPPORT_OUTPUTDIR)\/native\/java.base\n-  endif\n-  BUILD_JDK_JTREG_EXECUTABLES_LIBS_exeCallerAccessTest := -ljvm\n-  BUILD_JDK_JTREG_EXECUTABLES_LIBS_exeNullCallerTest := $(LIBCXX) -ljvm\n+  BUILD_JDK_JTREG_EXECUTABLES_LIBS_exeNullCallerTest := $(LIBCXX)\n@@ -108,1 +100,1 @@\n-  BUILD_JDK_JTREG_EXECUTABLES_LIBS_exeJniInvocationTest := -ljli\n+  BUILD_JDK_JTREG_EXECUTABLES_JDK_LIBS_exeJniInvocationTest := java.base:libjli\n","filename":"make\/test\/JtregNativeJdk.gmk","additions":15,"deletions":23,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -51,5 +51,1 @@\n-ifeq ($(call isTargetOs, windows), true)\n-    BUILD_LIBTEST_JTREG_EXECUTABLES_LIBS_exejvm-test-launcher := jvm.lib\n-else\n-    BUILD_LIBTEST_JTREG_EXECUTABLES_LIBS_exejvm-test-launcher := -ljvm\n-endif\n+BUILD_LIBTEST_JTREG_EXECUTABLES_JDK_LIBS_exejvm-test-launcher := java.base:libjvm\n","filename":"make\/test\/JtregNativeLibTest.gmk","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"}]}