{"files":[{"patch":"@@ -833,1 +833,1 @@\n-        long offset = (long) Unsafe.ARRAY_BYTE_BASE_OFFSET + index;\n+        long offset = Unsafe.ARRAY_BYTE_BASE_OFFSET + index;\n@@ -843,1 +843,1 @@\n-        long offset  = (long) Unsafe.ARRAY_BYTE_BASE_OFFSET + index;\n+        long offset = Unsafe.ARRAY_BYTE_BASE_OFFSET + index;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringLatin1.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -199,1 +199,1 @@\n-        int aoffset = UNSAFE.arrayBaseOffset(arrayClass);\n+        int aoffset = (int) UNSAFE.arrayBaseOffset(arrayClass);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandles.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6385,1 +6385,1 @@\n-    private static final int ABASE = U.arrayBaseOffset(Node[].class);\n+    private static final long ABASE = U.arrayBaseOffset(Node[].class);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ConcurrentHashMap.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -225,1 +225,1 @@\n-            int alignLength\n+            long alignLength\n@@ -227,1 +227,1 @@\n-            for (int alignEnd = off + alignLength; off < alignEnd; off++) {\n+            for (long alignEnd = off + alignLength; off < alignEnd; off++) {\n@@ -241,2 +241,2 @@\n-                    firstHalf = UNSAFE.getInt(b, (long)Unsafe.ARRAY_BYTE_BASE_OFFSET + off);\n-                    secondHalf = UNSAFE.getInt(b, (long)Unsafe.ARRAY_BYTE_BASE_OFFSET + off\n+                    firstHalf = UNSAFE.getInt(b, Unsafe.ARRAY_BYTE_BASE_OFFSET + off);\n+                    secondHalf = UNSAFE.getInt(b, Unsafe.ARRAY_BYTE_BASE_OFFSET + off\n@@ -245,1 +245,1 @@\n-                    long value = UNSAFE.getLong(b, (long)Unsafe.ARRAY_BYTE_BASE_OFFSET + off);\n+                    long value = UNSAFE.getLong(b, Unsafe.ARRAY_BYTE_BASE_OFFSET + off);\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/CRC32C.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -177,1 +177,1 @@\n-                UNSAFE.getShortUnaligned(b, off + (long) Unsafe.ARRAY_BYTE_BASE_OFFSET, false));\n+                UNSAFE.getShortUnaligned(b, off + Unsafe.ARRAY_BYTE_BASE_OFFSET, false));\n@@ -188,1 +188,1 @@\n-                UNSAFE.getIntUnaligned(b, off + (long) Unsafe.ARRAY_BYTE_BASE_OFFSET, false));\n+                UNSAFE.getIntUnaligned(b, off + Unsafe.ARRAY_BYTE_BASE_OFFSET, false));\n@@ -198,1 +198,1 @@\n-        return UNSAFE.getLongUnaligned(b, off + (long) Unsafe.ARRAY_BYTE_BASE_OFFSET, false);\n+        return UNSAFE.getLongUnaligned(b, off + Unsafe.ARRAY_BYTE_BASE_OFFSET, false);\n@@ -209,1 +209,1 @@\n-        return UNSAFE.getIntUnaligned(b, off + (long) Unsafe.ARRAY_BYTE_BASE_OFFSET, false);\n+        return UNSAFE.getIntUnaligned(b, off + Unsafe.ARRAY_BYTE_BASE_OFFSET, false);\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipUtils.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -389,1 +389,1 @@\n-        return UNSAFE.getCharUnaligned(code.array, (long) Unsafe.ARRAY_BYTE_BASE_OFFSET + bci, true);\n+        return UNSAFE.getCharUnaligned(code.array, Unsafe.ARRAY_BYTE_BASE_OFFSET + bci, true);\n@@ -393,1 +393,1 @@\n-        return UNSAFE.getShortUnaligned(code.array, (long) Unsafe.ARRAY_BYTE_BASE_OFFSET + bci, true);\n+        return UNSAFE.getShortUnaligned(code.array, Unsafe.ARRAY_BYTE_BASE_OFFSET + bci, true);\n@@ -398,1 +398,1 @@\n-        return UNSAFE.getIntUnaligned(code.array, (long) Unsafe.ARRAY_BYTE_BASE_OFFSET + bci, true);\n+        return UNSAFE.getIntUnaligned(code.array, Unsafe.ARRAY_BYTE_BASE_OFFSET + bci, true);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/RawBytecodeHelper.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-        return nioAccess.newHeapByteBuffer(baseByte, (int)offset - Utils.BaseAndScale.BYTE.base(), (int) byteSize(), null);\n+        return nioAccess.newHeapByteBuffer(baseByte, (int)(offset - Utils.BaseAndScale.BYTE.base()), (int) byteSize(), null);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/HeapMemorySegmentImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -301,1 +301,1 @@\n-    public record BaseAndScale(int base, long scale) {\n+    public record BaseAndScale(long base, long scale) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/Utils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1046,0 +1046,3 @@\n+     * <p>\n+     * The static type is @code long} to emphasize that long arithmetic should\n+     * always be used for offset calculations to avoid overflows.\n@@ -1047,1 +1050,1 @@\n-    public static final int INVALID_FIELD_OFFSET = -1;\n+    public static final long INVALID_FIELD_OFFSET = -1;\n@@ -1175,0 +1178,4 @@\n+     * <p>\n+     * The return value is in the range of a {@code int}.  The return type is\n+     * {@code long} to emphasize that long arithmetic should always be used\n+     * for offset calculations to avoid overflows.\n@@ -1179,1 +1186,1 @@\n-    public int arrayBaseOffset(Class<?> arrayClass) {\n+    public long arrayBaseOffset(Class<?> arrayClass) {\n@@ -1189,1 +1196,1 @@\n-    public static final int ARRAY_BOOLEAN_BASE_OFFSET\n+    public static final long ARRAY_BOOLEAN_BASE_OFFSET\n@@ -1193,1 +1200,1 @@\n-    public static final int ARRAY_BYTE_BASE_OFFSET\n+    public static final long ARRAY_BYTE_BASE_OFFSET\n@@ -1197,1 +1204,1 @@\n-    public static final int ARRAY_SHORT_BASE_OFFSET\n+    public static final long ARRAY_SHORT_BASE_OFFSET\n@@ -1201,1 +1208,1 @@\n-    public static final int ARRAY_CHAR_BASE_OFFSET\n+    public static final long ARRAY_CHAR_BASE_OFFSET\n@@ -1205,1 +1212,1 @@\n-    public static final int ARRAY_INT_BASE_OFFSET\n+    public static final long ARRAY_INT_BASE_OFFSET\n@@ -1209,1 +1216,1 @@\n-    public static final int ARRAY_LONG_BASE_OFFSET\n+    public static final long ARRAY_LONG_BASE_OFFSET\n@@ -1213,1 +1220,1 @@\n-    public static final int ARRAY_FLOAT_BASE_OFFSET\n+    public static final long ARRAY_FLOAT_BASE_OFFSET\n@@ -1217,1 +1224,1 @@\n-    public static final int ARRAY_DOUBLE_BASE_OFFSET\n+    public static final long ARRAY_DOUBLE_BASE_OFFSET\n@@ -1221,1 +1228,1 @@\n-    public static final int ARRAY_OBJECT_BASE_OFFSET\n+    public static final long ARRAY_OBJECT_BASE_OFFSET\n@@ -1230,0 +1237,3 @@\n+     * <p>\n+     * The computation of the actual memory offset should always use {@code\n+     * long} arithmetic to avoid overflows.\n@@ -3843,1 +3853,1 @@\n-    private native int arrayBaseOffset0(Class<?> arrayClass);\n+    private native int arrayBaseOffset0(Class<?> arrayClass); \/\/ public version returns long to promote correct arithmetic\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/Unsafe.java","additions":22,"deletions":12,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -460,2 +460,2 @@\n-            int aOffset = Unsafe.ARRAY_BOOLEAN_BASE_OFFSET + aFromIndex;\n-            int bOffset = Unsafe.ARRAY_BOOLEAN_BASE_OFFSET + bFromIndex;\n+            long aOffset = Unsafe.ARRAY_BOOLEAN_BASE_OFFSET + aFromIndex;\n+            long bOffset = Unsafe.ARRAY_BOOLEAN_BASE_OFFSET + bFromIndex;\n@@ -553,2 +553,2 @@\n-            int aOffset = Unsafe.ARRAY_BYTE_BASE_OFFSET + aFromIndex;\n-            int bOffset = Unsafe.ARRAY_BYTE_BASE_OFFSET + bFromIndex;\n+            long aOffset = Unsafe.ARRAY_BYTE_BASE_OFFSET + aFromIndex;\n+            long bOffset = Unsafe.ARRAY_BYTE_BASE_OFFSET + bFromIndex;\n@@ -602,2 +602,2 @@\n-            int aOffset = Unsafe.ARRAY_CHAR_BASE_OFFSET + (aFromIndex << LOG2_ARRAY_CHAR_INDEX_SCALE);\n-            int bOffset = Unsafe.ARRAY_CHAR_BASE_OFFSET + (bFromIndex << LOG2_ARRAY_CHAR_INDEX_SCALE);\n+            long aOffset = Unsafe.ARRAY_CHAR_BASE_OFFSET + (aFromIndex << LOG2_ARRAY_CHAR_INDEX_SCALE);\n+            long bOffset = Unsafe.ARRAY_CHAR_BASE_OFFSET + (bFromIndex << LOG2_ARRAY_CHAR_INDEX_SCALE);\n@@ -651,2 +651,2 @@\n-            int aOffset = Unsafe.ARRAY_SHORT_BASE_OFFSET + (aFromIndex << LOG2_ARRAY_SHORT_INDEX_SCALE);\n-            int bOffset = Unsafe.ARRAY_SHORT_BASE_OFFSET + (bFromIndex << LOG2_ARRAY_SHORT_INDEX_SCALE);\n+            long aOffset = Unsafe.ARRAY_SHORT_BASE_OFFSET + (aFromIndex << LOG2_ARRAY_SHORT_INDEX_SCALE);\n+            long bOffset = Unsafe.ARRAY_SHORT_BASE_OFFSET + (bFromIndex << LOG2_ARRAY_SHORT_INDEX_SCALE);\n@@ -700,2 +700,2 @@\n-            int aOffset = Unsafe.ARRAY_INT_BASE_OFFSET + (aFromIndex << LOG2_ARRAY_INT_INDEX_SCALE);\n-            int bOffset = Unsafe.ARRAY_INT_BASE_OFFSET + (bFromIndex << LOG2_ARRAY_INT_INDEX_SCALE);\n+            long aOffset = Unsafe.ARRAY_INT_BASE_OFFSET + (aFromIndex << LOG2_ARRAY_INT_INDEX_SCALE);\n+            long bOffset = Unsafe.ARRAY_INT_BASE_OFFSET + (bFromIndex << LOG2_ARRAY_INT_INDEX_SCALE);\n@@ -732,2 +732,2 @@\n-                int aOffset = Unsafe.ARRAY_FLOAT_BASE_OFFSET + (aFromIndex << LOG2_ARRAY_FLOAT_INDEX_SCALE);\n-                int bOffset = Unsafe.ARRAY_FLOAT_BASE_OFFSET + (bFromIndex << LOG2_ARRAY_FLOAT_INDEX_SCALE);\n+                long aOffset = Unsafe.ARRAY_FLOAT_BASE_OFFSET + (aFromIndex << LOG2_ARRAY_FLOAT_INDEX_SCALE);\n+                long bOffset = Unsafe.ARRAY_FLOAT_BASE_OFFSET + (bFromIndex << LOG2_ARRAY_FLOAT_INDEX_SCALE);\n@@ -790,2 +790,2 @@\n-        int aOffset = Unsafe.ARRAY_LONG_BASE_OFFSET + (aFromIndex << LOG2_ARRAY_LONG_INDEX_SCALE);\n-        int bOffset = Unsafe.ARRAY_LONG_BASE_OFFSET + (bFromIndex << LOG2_ARRAY_LONG_INDEX_SCALE);\n+        long aOffset = Unsafe.ARRAY_LONG_BASE_OFFSET + (aFromIndex << LOG2_ARRAY_LONG_INDEX_SCALE);\n+        long bOffset = Unsafe.ARRAY_LONG_BASE_OFFSET + (bFromIndex << LOG2_ARRAY_LONG_INDEX_SCALE);\n@@ -816,2 +816,2 @@\n-            int aOffset = Unsafe.ARRAY_DOUBLE_BASE_OFFSET + (aFromIndex << LOG2_ARRAY_DOUBLE_INDEX_SCALE);\n-            int bOffset = Unsafe.ARRAY_DOUBLE_BASE_OFFSET + (bFromIndex << LOG2_ARRAY_DOUBLE_INDEX_SCALE);\n+            long aOffset = Unsafe.ARRAY_DOUBLE_BASE_OFFSET + (aFromIndex << LOG2_ARRAY_DOUBLE_INDEX_SCALE);\n+            long bOffset = Unsafe.ARRAY_DOUBLE_BASE_OFFSET + (bFromIndex << LOG2_ARRAY_DOUBLE_INDEX_SCALE);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/ArraysSupport.java","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -185,1 +185,1 @@\n-                long off = dst.arrayOffset() + pos + (long) Unsafe.ARRAY_BYTE_BASE_OFFSET;\n+                long off = dst.arrayOffset() + pos + Unsafe.ARRAY_BYTE_BASE_OFFSET;\n@@ -244,1 +244,1 @@\n-                    long off = src.arrayOffset() + pos + (long) Unsafe.ARRAY_BYTE_BASE_OFFSET;\n+                    long off = src.arrayOffset() + pos + Unsafe.ARRAY_BYTE_BASE_OFFSET;\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixUserDefinedFileAttributeView.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4104,1 +4104,1 @@\n-        return (long) Unsafe.ARRAY_BYTE_BASE_OFFSET + index;\n+        return Unsafe.ARRAY_BYTE_BASE_OFFSET + index;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3624,1 +3624,1 @@\n-        return (long) Unsafe.ARRAY_BYTE_BASE_OFFSET + index;\n+        return Unsafe.ARRAY_BYTE_BASE_OFFSET + index;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3574,1 +3574,1 @@\n-        return (long) Unsafe.ARRAY_BYTE_BASE_OFFSET + index;\n+        return Unsafe.ARRAY_BYTE_BASE_OFFSET + index;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3742,1 +3742,1 @@\n-        return (long) Unsafe.ARRAY_BYTE_BASE_OFFSET + index;\n+        return Unsafe.ARRAY_BYTE_BASE_OFFSET + index;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3677,1 +3677,1 @@\n-        return (long) Unsafe.ARRAY_BYTE_BASE_OFFSET + index;\n+        return Unsafe.ARRAY_BYTE_BASE_OFFSET + index;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4095,1 +4095,1 @@\n-        return (long) Unsafe.ARRAY_BYTE_BASE_OFFSET + index;\n+        return Unsafe.ARRAY_BYTE_BASE_OFFSET + index;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5313,1 +5313,1 @@\n-        return (long) Unsafe.ARRAY_BYTE_BASE_OFFSET + index;\n+        return Unsafe.ARRAY_BYTE_BASE_OFFSET + index;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -866,1 +866,1 @@\n-    public static final int INVALID_FIELD_OFFSET = jdk.internal.misc.Unsafe.INVALID_FIELD_OFFSET;\n+    public static final int INVALID_FIELD_OFFSET = (int) jdk.internal.misc.Unsafe.INVALID_FIELD_OFFSET;\n@@ -997,1 +997,1 @@\n-        return theInternalUnsafe.arrayBaseOffset(arrayClass);\n+        return (int) theInternalUnsafe.arrayBaseOffset(arrayClass);\n@@ -1005,1 +1005,1 @@\n-    public static final int ARRAY_BOOLEAN_BASE_OFFSET = jdk.internal.misc.Unsafe.ARRAY_BOOLEAN_BASE_OFFSET;\n+    public static final int ARRAY_BOOLEAN_BASE_OFFSET = (int) jdk.internal.misc.Unsafe.ARRAY_BOOLEAN_BASE_OFFSET;\n@@ -1012,1 +1012,1 @@\n-    public static final int ARRAY_BYTE_BASE_OFFSET = jdk.internal.misc.Unsafe.ARRAY_BYTE_BASE_OFFSET;\n+    public static final int ARRAY_BYTE_BASE_OFFSET = (int) jdk.internal.misc.Unsafe.ARRAY_BYTE_BASE_OFFSET;\n@@ -1019,1 +1019,1 @@\n-    public static final int ARRAY_SHORT_BASE_OFFSET = jdk.internal.misc.Unsafe.ARRAY_SHORT_BASE_OFFSET;\n+    public static final int ARRAY_SHORT_BASE_OFFSET = (int) jdk.internal.misc.Unsafe.ARRAY_SHORT_BASE_OFFSET;\n@@ -1026,1 +1026,1 @@\n-    public static final int ARRAY_CHAR_BASE_OFFSET = jdk.internal.misc.Unsafe.ARRAY_CHAR_BASE_OFFSET;\n+    public static final int ARRAY_CHAR_BASE_OFFSET = (int) jdk.internal.misc.Unsafe.ARRAY_CHAR_BASE_OFFSET;\n@@ -1033,1 +1033,1 @@\n-    public static final int ARRAY_INT_BASE_OFFSET = jdk.internal.misc.Unsafe.ARRAY_INT_BASE_OFFSET;\n+    public static final int ARRAY_INT_BASE_OFFSET = (int) jdk.internal.misc.Unsafe.ARRAY_INT_BASE_OFFSET;\n@@ -1040,1 +1040,1 @@\n-    public static final int ARRAY_LONG_BASE_OFFSET = jdk.internal.misc.Unsafe.ARRAY_LONG_BASE_OFFSET;\n+    public static final int ARRAY_LONG_BASE_OFFSET = (int) jdk.internal.misc.Unsafe.ARRAY_LONG_BASE_OFFSET;\n@@ -1047,1 +1047,1 @@\n-    public static final int ARRAY_FLOAT_BASE_OFFSET = jdk.internal.misc.Unsafe.ARRAY_FLOAT_BASE_OFFSET;\n+    public static final int ARRAY_FLOAT_BASE_OFFSET = (int) jdk.internal.misc.Unsafe.ARRAY_FLOAT_BASE_OFFSET;\n@@ -1054,1 +1054,1 @@\n-    public static final int ARRAY_DOUBLE_BASE_OFFSET = jdk.internal.misc.Unsafe.ARRAY_DOUBLE_BASE_OFFSET;\n+    public static final int ARRAY_DOUBLE_BASE_OFFSET = (int) jdk.internal.misc.Unsafe.ARRAY_DOUBLE_BASE_OFFSET;\n@@ -1061,1 +1061,1 @@\n-    public static final int ARRAY_OBJECT_BASE_OFFSET = jdk.internal.misc.Unsafe.ARRAY_OBJECT_BASE_OFFSET;\n+    public static final int ARRAY_OBJECT_BASE_OFFSET = (int) jdk.internal.misc.Unsafe.ARRAY_OBJECT_BASE_OFFSET;\n","filename":"src\/jdk.unsupported\/share\/classes\/sun\/misc\/Unsafe.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-    static int array_long_base_offset;\n+    static long array_long_base_offset;\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/Test6968348.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-  private static final int BASE;\n+  private static final long BASE;\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/cr8004867\/TestIntUnsafeCAS.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-  private static final int BASE;\n+  private static final long BASE;\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/cr8004867\/TestIntUnsafeOrdered.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-  private static final int BASE;\n+  private static final long BASE;\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/cr8004867\/TestIntUnsafeVolatile.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -159,1 +159,1 @@\n-            int adr = UNSAFE.ARRAY_BYTE_BASE_OFFSET + 42 + i;\n+            long adr = UNSAFE.ARRAY_BYTE_BASE_OFFSET + 42 + i;\n@@ -174,1 +174,1 @@\n-            int adr = UNSAFE.ARRAY_BYTE_BASE_OFFSET + 42 + i;\n+            long adr = UNSAFE.ARRAY_BYTE_BASE_OFFSET + 42 + i;\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestMovingLoadBeforeStore.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-    static final int obj_header_size = U.ARRAY_OBJECT_BASE_OFFSET;\n+    static final int obj_header_size = (int) U.ARRAY_OBJECT_BASE_OFFSET;\n","filename":"test\/hotspot\/jtreg\/compiler\/runtime\/Test8010927.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    static int ARRAY_OFFSET;\n+    static long ARRAY_OFFSET;\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/JdkInternalMiscUnsafeAccessTestBoolean.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    static int ARRAY_OFFSET;\n+    static long ARRAY_OFFSET;\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/JdkInternalMiscUnsafeAccessTestByte.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    static int ARRAY_OFFSET;\n+    static long ARRAY_OFFSET;\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/JdkInternalMiscUnsafeAccessTestChar.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    static int ARRAY_OFFSET;\n+    static long ARRAY_OFFSET;\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/JdkInternalMiscUnsafeAccessTestDouble.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    static int ARRAY_OFFSET;\n+    static long ARRAY_OFFSET;\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/JdkInternalMiscUnsafeAccessTestFloat.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    static int ARRAY_OFFSET;\n+    static long ARRAY_OFFSET;\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/JdkInternalMiscUnsafeAccessTestInt.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    static int ARRAY_OFFSET;\n+    static long ARRAY_OFFSET;\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/JdkInternalMiscUnsafeAccessTestLong.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    static int ARRAY_OFFSET;\n+    static long ARRAY_OFFSET;\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/JdkInternalMiscUnsafeAccessTestObject.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    static int ARRAY_OFFSET;\n+    static long ARRAY_OFFSET;\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/JdkInternalMiscUnsafeAccessTestShort.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    static int ARRAY_OFFSET;\n+    static long ARRAY_OFFSET;\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/SunMiscUnsafeAccessTestBoolean.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    static int ARRAY_OFFSET;\n+    static long ARRAY_OFFSET;\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/SunMiscUnsafeAccessTestByte.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    static int ARRAY_OFFSET;\n+    static long ARRAY_OFFSET;\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/SunMiscUnsafeAccessTestChar.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    static int ARRAY_OFFSET;\n+    static long ARRAY_OFFSET;\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/SunMiscUnsafeAccessTestDouble.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    static int ARRAY_OFFSET;\n+    static long ARRAY_OFFSET;\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/SunMiscUnsafeAccessTestFloat.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    static int ARRAY_OFFSET;\n+    static long ARRAY_OFFSET;\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/SunMiscUnsafeAccessTestInt.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    static int ARRAY_OFFSET;\n+    static long ARRAY_OFFSET;\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/SunMiscUnsafeAccessTestLong.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    static int ARRAY_OFFSET;\n+    static long ARRAY_OFFSET;\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/SunMiscUnsafeAccessTestObject.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    static int ARRAY_OFFSET;\n+    static long ARRAY_OFFSET;\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/SunMiscUnsafeAccessTestShort.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-    static int ARRAY_OFFSET;\n+    static long ARRAY_OFFSET;\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/X-UnsafeAccessTest.java.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -141,1 +141,1 @@\n-        public static final int ARRAY_LENGTH = CHUNK_SIZE - Unsafe.ARRAY_BYTE_BASE_OFFSET;\n+        public static final int ARRAY_LENGTH = CHUNK_SIZE - (int) Unsafe.ARRAY_BYTE_BASE_OFFSET;\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestMaxMinHeapFreeRatioFlags.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -257,1 +257,1 @@\n-        public static final int ARRAY_LENGTH = CHUNK_SIZE - Unsafe.ARRAY_BYTE_BASE_OFFSET;\n+        public static final int ARRAY_LENGTH = CHUNK_SIZE - (int) Unsafe.ARRAY_BYTE_BASE_OFFSET;\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestTargetSurvivorRatioFlag.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -113,2 +113,2 @@\n-    static final int  INT_ARRAY_OFFSET;\n-    static final int  LONG_ARRAY_OFFSET;\n+    static final long INT_ARRAY_OFFSET;\n+    static final long LONG_ARRAY_OFFSET;\n@@ -154,1 +154,1 @@\n-        int expected_objary_offset = narrowOops ? INT_ARRAY_OFFSET : LONG_ARRAY_OFFSET;\n+        long expected_objary_offset = narrowOops ? INT_ARRAY_OFFSET : LONG_ARRAY_OFFSET;\n","filename":"test\/hotspot\/jtreg\/runtime\/FieldLayout\/BaseOffsets.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-        \/\/ Unsafe.INVALID_FIELD_OFFSET is a static final int field,\n+        \/\/ Unsafe.INVALID_FIELD_OFFSET is a static final long field,\n@@ -45,1 +45,1 @@\n-        assertEquals(field.getType(), int.class);\n+        assertEquals(field.getType(), long.class);\n","filename":"test\/hotspot\/jtreg\/runtime\/Unsafe\/GetField.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -150,1 +150,1 @@\n-                int destOffset = Unsafe.ARRAY_BYTE_BASE_OFFSET;\n+                long destOffset = Unsafe.ARRAY_BYTE_BASE_OFFSET;\n","filename":"test\/hotspot\/jtreg\/runtime\/Unsafe\/InternalErrorTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-    final int UNSAFE_INT_OFFSET = unsafe.arrayBaseOffset(int[].class);\n+    final long UNSAFE_INT_OFFSET = unsafe.arrayBaseOffset(int[].class);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/BulkOps.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,2 +60,2 @@\n-    static final int UNSAFE_BYTE_BASE = unsafe.arrayBaseOffset(byte[].class);\n-    static final int UNSAFE_INT_BASE = unsafe.arrayBaseOffset(int[].class);\n+    static final long UNSAFE_BYTE_BASE = unsafe.arrayBaseOffset(byte[].class);\n+    static final long UNSAFE_INT_BASE = unsafe.arrayBaseOffset(int[].class);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverNonConstantHeap.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-    static final int BYTE_ARR_OFFSET = Utils.unsafe.arrayBaseOffset(byte[].class);\n+    static final long BYTE_ARR_OFFSET = Utils.unsafe.arrayBaseOffset(byte[].class);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/xor\/GetArrayUnsafeXorOpImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}