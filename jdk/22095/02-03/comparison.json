{"files":[{"patch":"@@ -199,1 +199,1 @@\n-        int aoffset = UNSAFE.arrayBaseOffset(arrayClass);\n+        int aoffset = (int) UNSAFE.arrayBaseOffset(arrayClass);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandles.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6385,1 +6385,1 @@\n-    private static final int ABASE = U.arrayBaseOffset(Node[].class);\n+    private static final long ABASE = U.arrayBaseOffset(Node[].class);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ConcurrentHashMap.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1046,0 +1046,3 @@\n+     * <p>\n+     * The static type is @code long} to emphasize that long arithmetic should\n+     * always be used for offset calculations to avoid overflows.\n@@ -1047,1 +1050,1 @@\n-    public static final int INVALID_FIELD_OFFSET = -1;\n+    public static final long INVALID_FIELD_OFFSET = -1;\n@@ -1175,0 +1178,4 @@\n+     * <p>\n+     * The return value is in the range of a {@code int}.  The return type is\n+     * {@code long} to emphasize that long arithmetic should always be used\n+     * for offset calculations to avoid overflows.\n@@ -1179,1 +1186,1 @@\n-    public int arrayBaseOffset(Class<?> arrayClass) {\n+    public long arrayBaseOffset(Class<?> arrayClass) {\n@@ -1230,0 +1237,3 @@\n+     * <p>\n+     * The computation of the actual memory offset should always use {@code\n+     * long} arithmetic to avoid overflows.\n@@ -3843,1 +3853,1 @@\n-    private native int arrayBaseOffset0(Class<?> arrayClass);\n+    private native int arrayBaseOffset0(Class<?> arrayClass); \/\/ public version returns long to promote correct arithmetic\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/Unsafe.java","additions":13,"deletions":3,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -866,1 +866,1 @@\n-    public static final int INVALID_FIELD_OFFSET = jdk.internal.misc.Unsafe.INVALID_FIELD_OFFSET;\n+    public static final int INVALID_FIELD_OFFSET = (int) jdk.internal.misc.Unsafe.INVALID_FIELD_OFFSET;\n@@ -997,1 +997,1 @@\n-        return theInternalUnsafe.arrayBaseOffset(arrayClass);\n+        return (int) theInternalUnsafe.arrayBaseOffset(arrayClass);\n","filename":"src\/jdk.unsupported\/share\/classes\/sun\/misc\/Unsafe.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-    static int array_long_base_offset;\n+    static long array_long_base_offset;\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/Test6968348.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-  private static final int BASE;\n+  private static final long BASE;\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/cr8004867\/TestIntUnsafeCAS.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-  private static final int BASE;\n+  private static final long BASE;\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/cr8004867\/TestIntUnsafeOrdered.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-  private static final int BASE;\n+  private static final long BASE;\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/cr8004867\/TestIntUnsafeVolatile.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    static int ARRAY_OFFSET;\n+    static long ARRAY_OFFSET;\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/JdkInternalMiscUnsafeAccessTestBoolean.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    static int ARRAY_OFFSET;\n+    static long ARRAY_OFFSET;\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/JdkInternalMiscUnsafeAccessTestByte.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    static int ARRAY_OFFSET;\n+    static long ARRAY_OFFSET;\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/JdkInternalMiscUnsafeAccessTestChar.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    static int ARRAY_OFFSET;\n+    static long ARRAY_OFFSET;\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/JdkInternalMiscUnsafeAccessTestDouble.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    static int ARRAY_OFFSET;\n+    static long ARRAY_OFFSET;\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/JdkInternalMiscUnsafeAccessTestFloat.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    static int ARRAY_OFFSET;\n+    static long ARRAY_OFFSET;\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/JdkInternalMiscUnsafeAccessTestInt.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    static int ARRAY_OFFSET;\n+    static long ARRAY_OFFSET;\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/JdkInternalMiscUnsafeAccessTestLong.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    static int ARRAY_OFFSET;\n+    static long ARRAY_OFFSET;\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/JdkInternalMiscUnsafeAccessTestObject.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    static int ARRAY_OFFSET;\n+    static long ARRAY_OFFSET;\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/JdkInternalMiscUnsafeAccessTestShort.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    static int ARRAY_OFFSET;\n+    static long ARRAY_OFFSET;\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/SunMiscUnsafeAccessTestBoolean.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    static int ARRAY_OFFSET;\n+    static long ARRAY_OFFSET;\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/SunMiscUnsafeAccessTestByte.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    static int ARRAY_OFFSET;\n+    static long ARRAY_OFFSET;\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/SunMiscUnsafeAccessTestChar.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    static int ARRAY_OFFSET;\n+    static long ARRAY_OFFSET;\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/SunMiscUnsafeAccessTestDouble.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    static int ARRAY_OFFSET;\n+    static long ARRAY_OFFSET;\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/SunMiscUnsafeAccessTestFloat.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    static int ARRAY_OFFSET;\n+    static long ARRAY_OFFSET;\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/SunMiscUnsafeAccessTestInt.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    static int ARRAY_OFFSET;\n+    static long ARRAY_OFFSET;\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/SunMiscUnsafeAccessTestLong.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    static int ARRAY_OFFSET;\n+    static long ARRAY_OFFSET;\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/SunMiscUnsafeAccessTestObject.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    static int ARRAY_OFFSET;\n+    static long ARRAY_OFFSET;\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/SunMiscUnsafeAccessTestShort.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-    static int ARRAY_OFFSET;\n+    static long ARRAY_OFFSET;\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/X-UnsafeAccessTest.java.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -113,2 +113,2 @@\n-    static final int  INT_ARRAY_OFFSET;\n-    static final int  LONG_ARRAY_OFFSET;\n+    static final long INT_ARRAY_OFFSET;\n+    static final long LONG_ARRAY_OFFSET;\n@@ -154,1 +154,1 @@\n-        int expected_objary_offset = narrowOops ? INT_ARRAY_OFFSET : LONG_ARRAY_OFFSET;\n+        long expected_objary_offset = narrowOops ? INT_ARRAY_OFFSET : LONG_ARRAY_OFFSET;\n","filename":"test\/hotspot\/jtreg\/runtime\/FieldLayout\/BaseOffsets.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-        \/\/ Unsafe.INVALID_FIELD_OFFSET is a static final int field,\n+        \/\/ Unsafe.INVALID_FIELD_OFFSET is a static final long field,\n@@ -45,1 +45,1 @@\n-        assertEquals(field.getType(), int.class);\n+        assertEquals(field.getType(), long.class);\n","filename":"test\/hotspot\/jtreg\/runtime\/Unsafe\/GetField.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-    final int UNSAFE_INT_OFFSET = unsafe.arrayBaseOffset(int[].class);\n+    final long UNSAFE_INT_OFFSET = unsafe.arrayBaseOffset(int[].class);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/BulkOps.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,2 +60,2 @@\n-    static final int UNSAFE_BYTE_BASE = unsafe.arrayBaseOffset(byte[].class);\n-    static final int UNSAFE_INT_BASE = unsafe.arrayBaseOffset(int[].class);\n+    static final long UNSAFE_BYTE_BASE = unsafe.arrayBaseOffset(byte[].class);\n+    static final long UNSAFE_INT_BASE = unsafe.arrayBaseOffset(int[].class);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverNonConstantHeap.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-    static final int BYTE_ARR_OFFSET = Utils.unsafe.arrayBaseOffset(byte[].class);\n+    static final long BYTE_ARR_OFFSET = Utils.unsafe.arrayBaseOffset(byte[].class);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/xor\/GetArrayUnsafeXorOpImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}