{"files":[{"patch":"@@ -690,0 +690,16 @@\n+     * Consistent with the usage of the {@code @Override} annotation, if an\n+     * interface declares a method override-equivalent to a {@code\n+     * public} method on {@code java.lang.Object}, this method treats\n+     * any such interface methods as overriding the corresponding {@code\n+     * Object} method:\n+     *\n+     * <blockquote><pre>\n+     * interface I {\n+     *   String toString();\n+     * }\n+     * ...\n+     * assert elements.overrides(elementForItoString,\n+     *                           elementForObjecttoString,\n+     *                           elements.getTypeElement(\"I\"));\n+     * <\/pre><\/blockquote>\n+     *\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/Elements.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,113 @@\n+\/*\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8302019\n+ * @summary Test basic operation of Elements.overrides\n+ * @library \/tools\/javac\/lib\n+ * @build   JavacTestingAbstractProcessor TestOverrides\n+ * @compile -processor TestOverrides -proc:only TestOverrides.java\n+ *\/\n+\n+import java.util.*;\n+import java.util.function.*;\n+import javax.annotation.processing.*;\n+import javax.lang.model.element.*;\n+import javax.lang.model.util.*;\n+\n+\/**\n+ * Test basic workings of Elements.overrides\n+ *\/\n+public class TestOverrides extends JavacTestingAbstractProcessor {\n+    public boolean process(Set<? extends TypeElement> annotations,\n+                           RoundEnvironment roundEnv) {\n+        if (!roundEnv.processingOver()) {\n+            checkObjectOverrides();\n+        }\n+        return true;\n+    }\n+\n+    private void checkObjectOverrides() {\n+        boolean elementSeen = false;\n+\n+        TypeElement objectElt = elements.getTypeElement(\"java.lang.Object\");\n+\n+        TypeElement objectInterfaceElt = elements.getTypeElement(\"ObjectInterface\");\n+        for (var method : ElementFilter.methodsIn(objectInterfaceElt.getEnclosedElements())) {\n+            elementSeen = true;\n+            Name methodName = method.getSimpleName();\n+            boolean expectedOverrideResult = method.getAnnotation(OverrideExpected.class).value();\n+            if (expectedOverrideResult !=\n+                elements.overrides(method, findMethod(methodName, objectElt), objectInterfaceElt ) ) {\n+                throw new RuntimeException(\"Unexpected overrding relation found for \" + method);\n+            }\n+\n+            if (!elementSeen) {\n+                throw new RuntimeException(\"No elements seen.\");\n+            }\n+        }\n+    }\n+\n+    ExecutableElement findMethod(Name name, TypeElement typeElt) {\n+        for (var method : ElementFilter.methodsIn(typeElt.getEnclosedElements())) {\n+            if (method.getSimpleName().equals(name)) {\n+                return method;\n+            }\n+        }\n+        return null;\n+    }\n+\n+}\n+\n+@interface OverrideExpected {\n+    boolean value() default true;\n+}\n+\n+\/**\n+ * Interface that has methods override-equivalent to methods on\n+ * java.lang.Object.\n+ *\/\n+interface ObjectInterface {\n+    @Override\n+    @OverrideExpected\n+    boolean equals(Object obj);\n+\n+    @Override\n+    @OverrideExpected\n+    int hashCode();\n+\n+    @Override\n+    @OverrideExpected\n+    String toString();\n+\n+    @OverrideExpected(value=false) \/\/ protected, not public method\n+    Object clone();\n+\n+    @OverrideExpected(value=false) \/\/ protected, not public method\n+    void finalize();\n+\n+    \/\/ Final methods on Object (getClass, wait, notify[all]) rejected\n+    \/\/ if declared in an interface.\n+}\n+\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/util\/elements\/TestOverrides.java","additions":113,"deletions":0,"binary":false,"changes":113,"status":"added"}]}