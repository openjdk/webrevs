{"files":[{"patch":"@@ -2444,1 +2444,1 @@\n-                             Matcher::vector_element_basic_type(this, $vsrc), Matcher::vector_length(this));\n+                             Matcher::vector_element_basic_type(this, $vsrc), Matcher::vector_length(this, $vsrc));\n@@ -2458,1 +2458,1 @@\n-                             Matcher::vector_element_basic_type(this, $vsrc), Matcher::vector_length(this),\n+                             Matcher::vector_element_basic_type(this, $vsrc), Matcher::vector_length(this, $vsrc),\n@@ -2473,1 +2473,1 @@\n-                             Matcher::vector_element_basic_type(this, $vsrc), Matcher::vector_length(this));\n+                             Matcher::vector_element_basic_type(this, $vsrc), Matcher::vector_length(this, $vsrc));\n@@ -2487,1 +2487,1 @@\n-                             Matcher::vector_element_basic_type(this, $vsrc), Matcher::vector_length(this),\n+                             Matcher::vector_element_basic_type(this, $vsrc), Matcher::vector_length(this, $vsrc),\n@@ -2493,1 +2493,6 @@\n-instruct reduce_mulF(fRegF dst, fRegF fsrc, vReg vsrc,\n+\/\/ Floating-point addition and multiplication are non-associative, so\n+\/\/ AddReductionVF\/D and MulReductionVF\/D require strict ordering\n+\/\/ in auto-vectorization. Vector API can generate AddReductionVF\/D\n+\/\/ and MulReductionVF\/VD without strict ordering, which can benefit\n+\/\/ some platforms.\n+instruct reduce_mulF_unordered(fRegF dst, fRegF fsrc, vReg vsrc,\n@@ -2495,0 +2500,1 @@\n+  predicate(!n->as_Reduction()->requires_strict_order());\n@@ -2497,1 +2503,1 @@\n-  format %{ \"reduce_mulF $dst, $fsrc, $vsrc\\t\" %}\n+  format %{ \"reduce_mulF_unordered $dst, $fsrc, $vsrc\\t\" %}\n@@ -2502,1 +2508,1 @@\n-                       Matcher::vector_element_basic_type(this, $vsrc), Matcher::vector_length(this));\n+                       Matcher::vector_element_basic_type(this, $vsrc), Matcher::vector_length(this, $vsrc));\n@@ -2507,1 +2513,1 @@\n-instruct reduce_mulF_masked(fRegF dst, fRegF fsrc, vReg vsrc,\n+instruct reduce_mulF_masked_unordered(fRegF dst, fRegF fsrc, vReg vsrc,\n@@ -2509,0 +2515,1 @@\n+  predicate(!n->as_Reduction()->requires_strict_order());\n@@ -2511,1 +2518,1 @@\n-  format %{ \"reduce_mulF_masked $dst, $fsrc, $vsrc, $v0\\t\" %}\n+  format %{ \"reduce_mulF_masked_unordered $dst, $fsrc, $vsrc, $v0\\t\" %}\n@@ -2516,1 +2523,1 @@\n-                       Matcher::vector_element_basic_type(this, $vsrc), Matcher::vector_length(this),\n+                       Matcher::vector_element_basic_type(this, $vsrc), Matcher::vector_length(this, $vsrc),\n@@ -2522,1 +2529,1 @@\n-instruct reduce_mulD(fRegD dst, fRegD fsrc, vReg vsrc,\n+instruct reduce_mulD_unordered(fRegD dst, fRegD fsrc, vReg vsrc,\n@@ -2524,0 +2531,1 @@\n+  predicate(!n->as_Reduction()->requires_strict_order());\n@@ -2526,1 +2534,1 @@\n-  format %{ \"reduce_mulD $dst, $fsrc, $vsrc\\t\" %}\n+  format %{ \"reduce_mulD_unordered $dst, $fsrc, $vsrc\\t\" %}\n@@ -2531,1 +2539,1 @@\n-                       Matcher::vector_element_basic_type(this, $vsrc), Matcher::vector_length(this));\n+                       Matcher::vector_element_basic_type(this, $vsrc), Matcher::vector_length(this, $vsrc));\n@@ -2536,1 +2544,1 @@\n-instruct reduce_mulD_masked(fRegD dst, fRegD fsrc, vReg vsrc,\n+instruct reduce_mulD_masked_unordered(fRegD dst, fRegD fsrc, vReg vsrc,\n@@ -2538,0 +2546,1 @@\n+  predicate(!n->as_Reduction()->requires_strict_order());\n@@ -2540,1 +2549,1 @@\n-  format %{ \"reduce_mulD_masked $dst, $fsrc, $vsrc, $v0\\t\" %}\n+  format %{ \"reduce_mulD_masked_unordered $dst, $fsrc, $vsrc, $v0\\t\" %}\n@@ -2545,1 +2554,1 @@\n-                       Matcher::vector_element_basic_type(this, $vsrc), Matcher::vector_length(this),\n+                       Matcher::vector_element_basic_type(this, $vsrc), Matcher::vector_length(this, $vsrc),\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":25,"deletions":16,"binary":false,"changes":41,"status":"modified"}]}