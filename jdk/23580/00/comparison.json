{"files":[{"patch":"@@ -2957,0 +2957,80 @@\n+void C2_MacroAssembler::reduce_mul_integer_v(Register dst, Register src1, VectorRegister src2,\n+                                             VectorRegister vtmp1, VectorRegister vtmp2,\n+                                             BasicType bt, uint vector_length, VectorMask vm) {\n+  assert(bt == T_BYTE || bt == T_SHORT || bt == T_INT || bt == T_LONG, \"unsupported element type\");\n+  uint len = vector_length\/type2aelembytes(bt);\n+  vsetvli_helper(bt, len);\n+\n+  len \/= 2;\n+  if (vm != Assembler::unmasked) {\n+    vmv_v_i(vtmp1, 1);\n+    vmerge_vvm(vtmp2, vtmp1, src2); \/\/ vm == v0\n+    vslidedown_vi(vtmp1, vtmp2, len);\n+\n+    vsetvli_helper(bt, len);\n+    vmul_vv(vtmp1, vtmp1, vtmp2);\n+  } else {\n+    vslidedown_vi(vtmp1, src2, len);\n+\n+    vsetvli_helper(bt, len);\n+    vmul_vv(vtmp1, vtmp1, src2);\n+  }\n+\n+  while (len > 1) {\n+    len \/= 2;\n+    vslidedown_vi(vtmp2, vtmp1, len);\n+    vsetvli_helper(bt, len);\n+    vmul_vv(vtmp1, vtmp1, vtmp2);\n+  }\n+\n+  vmv_x_s(dst, vtmp1);\n+  if (bt == T_INT) {\n+    mulw(dst, dst, src1);\n+  } else {\n+    mul(dst, dst, src1);\n+  }\n+}\n+\n+void C2_MacroAssembler::reduce_mul_fp_v(FloatRegister dst, FloatRegister src1, VectorRegister src2,\n+                                        VectorRegister vtmp1, VectorRegister vtmp2,\n+                                        BasicType bt, uint vector_length, VectorMask vm) {\n+  assert(bt == T_FLOAT || bt == T_DOUBLE, \"unsupported element type\");\n+  uint len = vector_length\/type2aelembytes(bt);\n+  vsetvli_helper(bt, len);\n+\n+  len \/= 2;\n+  if (vm != Assembler::unmasked) {\n+    if (bt == T_FLOAT) {\n+      lui(t0, 0x3f800000); \/\/ 1.0f\n+    } else {\n+      lui(t0, 0x3ff00000); \/\/ 1.0d\n+      slli(t0, t0, 32);\n+    }\n+    vmv_v_x(vtmp1, t0);\n+    vmerge_vvm(vtmp2, vtmp1, src2); \/\/ vm == v0\n+    vslidedown_vi(vtmp1, vtmp2, len);\n+\n+    vsetvli_helper(bt, len);\n+    vfmul_vv(vtmp1, vtmp1, vtmp2);\n+  } else {\n+    vslidedown_vi(vtmp1, src2, len);\n+\n+    vsetvli_helper(bt, len);\n+    vfmul_vv(vtmp1, vtmp1, src2);\n+  }\n+\n+  while (len > 1) {\n+    len \/= 2;\n+    vslidedown_vi(vtmp2, vtmp1, len);\n+    vsetvli_helper(bt, len);\n+    vfmul_vv(vtmp1, vtmp1, vtmp2);\n+  }\n+\n+  vfmv_f_s(dst, vtmp1);\n+  if (bt == T_FLOAT) {\n+    fmul_s(dst, dst, src1);\n+  } else {\n+    fmul_d(dst, dst, src1);\n+  }\n+}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":80,"deletions":0,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -242,0 +242,8 @@\n+  void reduce_mul_integer_v(Register dst, Register src1, VectorRegister src2,\n+                            VectorRegister vtmp1, VectorRegister vtmp2, BasicType bt,\n+                            uint vector_length, VectorMask vm = Assembler::unmasked);\n+\n+  void reduce_mul_fp_v(FloatRegister dst, FloatRegister src1, VectorRegister src2,\n+                       VectorRegister vtmp1, VectorRegister vtmp2, BasicType bt,\n+                       uint vector_length, VectorMask vm = Assembler::unmasked);\n+\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.hpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -102,0 +102,7 @@\n+      case Op_MulReductionVI:\n+      case Op_MulReductionVL:\n+      case Op_MulReductionVF:\n+      case Op_MulReductionVD:\n+        if (vlen < 4) {\n+          return false;\n+        }\n@@ -2423,0 +2430,127 @@\n+\n+\/\/ ------------------------------ Vector reduction mul -------------------------\n+\n+instruct reduce_mulI(iRegINoSp dst, iRegIorL2I isrc, vReg vsrc,\n+                     vReg tmp1, vReg tmp2) %{\n+  match(Set dst (MulReductionVI isrc vsrc));\n+  effect(TEMP_DEF dst, TEMP tmp1, TEMP tmp2);\n+  format %{ \"reduce_mulI $dst, $isrc, $vsrc\\t\" %}\n+\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this, $vsrc);\n+    uint length_in_bytes = Matcher::vector_length_in_bytes(this, $vsrc);\n+    __ reduce_mul_integer_v($dst$$Register, $isrc$$Register, as_VectorRegister($vsrc$$reg),\n+                            as_VectorRegister($tmp1$$reg), as_VectorRegister($tmp2$$reg), bt, length_in_bytes);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct reduce_mulI_masked(iRegINoSp dst, iRegIorL2I isrc, vReg vsrc,\n+                            vRegMask_V0 v0, vReg tmp1, vReg tmp2) %{\n+  match(Set dst (MulReductionVI (Binary isrc vsrc) v0));\n+  effect(TEMP_DEF dst, TEMP tmp1, TEMP tmp2);\n+  format %{ \"reduce_mulI_masked $dst, $isrc, $vsrc, $v0\\t\" %}\n+\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this, $vsrc);\n+    uint length_in_bytes = Matcher::vector_length_in_bytes(this, $vsrc);\n+    __ reduce_mul_integer_v($dst$$Register, $isrc$$Register, as_VectorRegister($vsrc$$reg),\n+                            as_VectorRegister($tmp1$$reg), as_VectorRegister($tmp2$$reg),\n+                            bt, length_in_bytes, Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct reduce_mulL(iRegLNoSp dst, iRegLNoSp isrc, vReg vsrc,\n+                     vReg tmp1, vReg tmp2) %{\n+  match(Set dst (MulReductionVL isrc vsrc));\n+  effect(TEMP_DEF dst, TEMP tmp1, TEMP tmp2);\n+  format %{ \"reduce_mulL $dst, $isrc, $vsrc\\t\" %}\n+\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this, $vsrc);\n+    uint length_in_bytes = Matcher::vector_length_in_bytes(this, $vsrc);\n+    __ reduce_mul_integer_v($dst$$Register, $isrc$$Register, as_VectorRegister($vsrc$$reg),\n+                            as_VectorRegister($tmp1$$reg), as_VectorRegister($tmp2$$reg), bt, length_in_bytes);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct reduce_mulL_masked(iRegLNoSp dst, iRegLNoSp isrc, vReg vsrc,\n+                            vRegMask_V0 v0, vReg tmp1, vReg tmp2) %{\n+  match(Set dst (MulReductionVL (Binary isrc vsrc) v0));\n+  effect(TEMP_DEF dst, TEMP tmp1, TEMP tmp2);\n+  format %{ \"reduce_mulL_masked $dst, $isrc, $vsrc, $v0\\t\" %}\n+\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this, $vsrc);\n+    uint length_in_bytes = Matcher::vector_length_in_bytes(this, $vsrc);\n+    __ reduce_mul_integer_v($dst$$Register, $isrc$$Register, as_VectorRegister($vsrc$$reg),\n+                            as_VectorRegister($tmp1$$reg), as_VectorRegister($tmp2$$reg),\n+                            bt, length_in_bytes, Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct reduce_mulF(fRegF dst, fRegF fsrc, vReg vsrc,\n+                     vReg tmp1, vReg tmp2) %{\n+  match(Set dst (MulReductionVF fsrc vsrc));\n+  effect(TEMP_DEF dst, TEMP tmp1, TEMP tmp2);\n+  format %{ \"reduce_mulF $dst, $fsrc, $vsrc\\t\" %}\n+\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this, $vsrc);\n+    uint length_in_bytes = Matcher::vector_length_in_bytes(this, $vsrc);\n+    __ reduce_mul_fp_v($dst$$FloatRegister, $fsrc$$FloatRegister, as_VectorRegister($vsrc$$reg),\n+                       as_VectorRegister($tmp1$$reg), as_VectorRegister($tmp2$$reg), bt, length_in_bytes);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct reduce_mulF_masked(fRegF dst, fRegF fsrc, vReg vsrc,\n+                            vRegMask_V0 v0, vReg tmp1, vReg tmp2) %{\n+  match(Set dst (MulReductionVF (Binary fsrc vsrc) v0));\n+  effect(TEMP_DEF dst, TEMP tmp1, TEMP tmp2);\n+  format %{ \"reduce_mulF_masked $dst, $fsrc, $vsrc, $v0\\t\" %}\n+\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this, $vsrc);\n+    uint length_in_bytes = Matcher::vector_length_in_bytes(this, $vsrc);\n+    __ reduce_mul_fp_v($dst$$FloatRegister, $fsrc$$FloatRegister, as_VectorRegister($vsrc$$reg),\n+                       as_VectorRegister($tmp1$$reg), as_VectorRegister($tmp2$$reg),\n+                       bt, length_in_bytes, Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct reduce_mulD(fRegD dst, fRegD fsrc, vReg vsrc,\n+                     vReg tmp1, vReg tmp2) %{\n+  match(Set dst (MulReductionVD fsrc vsrc));\n+  effect(TEMP_DEF dst, TEMP tmp1, TEMP tmp2);\n+  format %{ \"reduce_mulD $dst, $fsrc, $vsrc\\t\" %}\n+\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this, $vsrc);\n+    uint length_in_bytes = Matcher::vector_length_in_bytes(this, $vsrc);\n+    __ reduce_mul_fp_v($dst$$FloatRegister, $fsrc$$FloatRegister, as_VectorRegister($vsrc$$reg),\n+                       as_VectorRegister($tmp1$$reg), as_VectorRegister($tmp2$$reg), bt, length_in_bytes);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct reduce_mulD_masked(fRegD dst, fRegD fsrc, vReg vsrc,\n+                            vRegMask_V0 v0, vReg tmp1, vReg tmp2) %{\n+  match(Set dst (MulReductionVD (Binary fsrc vsrc) v0));\n+  effect(TEMP_DEF dst, TEMP tmp1, TEMP tmp2);\n+  format %{ \"reduce_mulD_masked $dst, $fsrc, $vsrc, $v0\\t\" %}\n+\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this, $vsrc);\n+    uint length_in_bytes = Matcher::vector_length_in_bytes(this, $vsrc);\n+    __ reduce_mul_fp_v($dst$$FloatRegister, $fsrc$$FloatRegister, as_VectorRegister($vsrc$$reg),\n+                       as_VectorRegister($tmp1$$reg), as_VectorRegister($tmp2$$reg),\n+                       bt, length_in_bytes, Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":134,"deletions":0,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -91,0 +91,4 @@\n+    @IR(applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        applyIfPlatform = {\"riscv64\", \"true\"},\n+        applyIfCPUFeature = {\"rvv\", \"true\"},\n+        counts = {IRNode.MUL_REDUCTION_VD, \">= 1\"})\n@@ -104,0 +108,4 @@\n+    @IR(applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        applyIfPlatform = {\"riscv64\", \"true\"},\n+        applyIfCPUFeature = {\"rvv\", \"true\"},\n+        counts = {IRNode.MUL_REDUCTION_VD, \">= 1\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/ProdRed_Double.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -89,0 +89,4 @@\n+    @IR(applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        applyIfPlatform = {\"riscv64\", \"true\"},\n+        applyIfCPUFeature = {\"rvv\", \"true\"},\n+        counts = {IRNode.MUL_REDUCTION_VF, \">= 1\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/ProdRed_Float.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -88,0 +88,4 @@\n+    @IR(applyIfPlatform = {\"riscv64\", \"true\"},\n+        applyIfCPUFeature = {\"rvv\", \"true\"},\n+        applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        counts = {IRNode.MUL_REDUCTION_VI, \">= 1\", IRNode.MUL_REDUCTION_VI, \"<= 2\"}) \/\/ one for main-loop, one for vector-post-loop\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/ProdRed_Int.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -222,0 +222,4 @@\n+    @IR(applyIfPlatform = {\"riscv64\", \"true\"},\n+        applyIfCPUFeature = {\"rvv\", \"true\"},\n+        applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        counts = {IRNode.MUL_REDUCTION_VI, \">= 1\", IRNode.MUL_REDUCTION_VI, \"<= 2\"}) \/\/ one for main-loop, one for vector-post-loop\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/RedTest_int.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -229,0 +229,4 @@\n+    @IR(applyIfPlatform = {\"riscv64\", \"true\"},\n+        applyIfCPUFeature = {\"rvv\", \"true\"},\n+        applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        counts = {IRNode.MUL_REDUCTION_VL, \">= 1\", IRNode.MUL_REDUCTION_VL, \"<= 2\"}) \/\/ one for main-loop, one for vector-post-loop\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/RedTest_long.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}