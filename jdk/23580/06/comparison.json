{"files":[{"patch":"@@ -2957,0 +2957,39 @@\n+void C2_MacroAssembler::reduce_mul_integral_v(Register dst, Register src1, VectorRegister src2,\n+                                              VectorRegister vtmp1, VectorRegister vtmp2,\n+                                              BasicType bt, uint vector_length, VectorMask vm) {\n+  assert(bt == T_BYTE || bt == T_SHORT || bt == T_INT || bt == T_LONG, \"unsupported element type\");\n+  vsetvli_helper(bt, vector_length);\n+\n+  vector_length \/= 2;\n+  if (vm != Assembler::unmasked) {\n+    \/\/ This behaviour is consistent with spec requirements of vector API, for `reduceLanes`:\n+    \/\/  If no elements are selected, an operation-specific identity value is returned.\n+    \/\/    If the operation is MUL, then the identity value is one.\n+    vmv_v_i(vtmp1, 1);\n+    vmerge_vvm(vtmp2, vtmp1, src2); \/\/ vm == v0\n+    vslidedown_vi(vtmp1, vtmp2, vector_length);\n+\n+    vsetvli_helper(bt, vector_length);\n+    vmul_vv(vtmp1, vtmp1, vtmp2);\n+  } else {\n+    vslidedown_vi(vtmp1, src2, vector_length);\n+\n+    vsetvli_helper(bt, vector_length);\n+    vmul_vv(vtmp1, vtmp1, src2);\n+  }\n+\n+  while (vector_length > 1) {\n+    vector_length \/= 2;\n+    vslidedown_vi(vtmp2, vtmp1, vector_length);\n+    vsetvli_helper(bt, vector_length);\n+    vmul_vv(vtmp1, vtmp1, vtmp2);\n+  }\n+\n+  vmv_x_s(dst, vtmp1);\n+  if (bt == T_INT) {\n+    mulw(dst, dst, src1);\n+  } else {\n+    mul(dst, dst, src1);\n+  }\n+}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":39,"deletions":0,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -242,0 +242,4 @@\n+  void reduce_mul_integral_v(Register dst, Register src1, VectorRegister src2,\n+                             VectorRegister vtmp1, VectorRegister vtmp2, BasicType bt,\n+                             uint vector_length, VectorMask vm = Assembler::unmasked);\n+\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -5,0 +5,1 @@\n+\/\/ Copyright (c) 2023, 2025, Rivos Inc. All rights reserved.\n@@ -102,0 +103,6 @@\n+      case Op_MulReductionVI:\n+      case Op_MulReductionVL:\n+        \/\/ When vlen < 4, our log2(vlen) implementation does not help to gain performance improvement.\n+        if (vlen < 4) {\n+          return false;\n+        }\n@@ -2423,0 +2430,61 @@\n+\n+\/\/ ------------------------------ Vector reduction mul -------------------------\n+\n+instruct reduce_mulI(iRegINoSp dst, iRegIorL2I isrc, vReg vsrc,\n+                     vReg tmp1, vReg tmp2) %{\n+  match(Set dst (MulReductionVI isrc vsrc));\n+  effect(TEMP_DEF dst, TEMP tmp1, TEMP tmp2);\n+  format %{ \"reduce_mulI $dst, $isrc, $vsrc\\t\" %}\n+\n+  ins_encode %{\n+    __ reduce_mul_integral_v($dst$$Register, $isrc$$Register, as_VectorRegister($vsrc$$reg),\n+                             as_VectorRegister($tmp1$$reg), as_VectorRegister($tmp2$$reg),\n+                             Matcher::vector_element_basic_type(this, $vsrc), Matcher::vector_length(this, $vsrc));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct reduce_mulI_masked(iRegINoSp dst, iRegIorL2I isrc, vReg vsrc,\n+                            vRegMask_V0 v0, vReg tmp1, vReg tmp2) %{\n+  match(Set dst (MulReductionVI (Binary isrc vsrc) v0));\n+  effect(TEMP_DEF dst, TEMP tmp1, TEMP tmp2);\n+  format %{ \"reduce_mulI_masked $dst, $isrc, $vsrc, $v0\\t\" %}\n+\n+  ins_encode %{\n+    __ reduce_mul_integral_v($dst$$Register, $isrc$$Register, as_VectorRegister($vsrc$$reg),\n+                             as_VectorRegister($tmp1$$reg), as_VectorRegister($tmp2$$reg),\n+                             Matcher::vector_element_basic_type(this, $vsrc), Matcher::vector_length(this, $vsrc),\n+                             Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct reduce_mulL(iRegLNoSp dst, iRegL isrc, vReg vsrc,\n+                     vReg tmp1, vReg tmp2) %{\n+  match(Set dst (MulReductionVL isrc vsrc));\n+  effect(TEMP_DEF dst, TEMP tmp1, TEMP tmp2);\n+  format %{ \"reduce_mulL $dst, $isrc, $vsrc\\t\" %}\n+\n+  ins_encode %{\n+    __ reduce_mul_integral_v($dst$$Register, $isrc$$Register, as_VectorRegister($vsrc$$reg),\n+                             as_VectorRegister($tmp1$$reg), as_VectorRegister($tmp2$$reg),\n+                             Matcher::vector_element_basic_type(this, $vsrc), Matcher::vector_length(this, $vsrc));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct reduce_mulL_masked(iRegLNoSp dst, iRegL isrc, vReg vsrc,\n+                            vRegMask_V0 v0, vReg tmp1, vReg tmp2) %{\n+  match(Set dst (MulReductionVL (Binary isrc vsrc) v0));\n+  effect(TEMP_DEF dst, TEMP tmp1, TEMP tmp2);\n+  format %{ \"reduce_mulL_masked $dst, $isrc, $vsrc, $v0\\t\" %}\n+\n+  ins_encode %{\n+    __ reduce_mul_integral_v($dst$$Register, $isrc$$Register, as_VectorRegister($vsrc$$reg),\n+                             as_VectorRegister($tmp1$$reg), as_VectorRegister($tmp2$$reg),\n+                             Matcher::vector_element_basic_type(this, $vsrc), Matcher::vector_length(this, $vsrc),\n+                             Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":68,"deletions":0,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -88,0 +88,4 @@\n+    @IR(applyIfPlatform = {\"riscv64\", \"true\"},\n+        applyIfCPUFeature = {\"rvv\", \"true\"},\n+        applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        counts = {IRNode.MUL_REDUCTION_VI, \">= 1\", IRNode.MUL_REDUCTION_VI, \"<= 2\"}) \/\/ one for main-loop, one for vector-post-loop\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/ProdRed_Int.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -222,0 +222,4 @@\n+    @IR(applyIfPlatform = {\"riscv64\", \"true\"},\n+        applyIfCPUFeature = {\"rvv\", \"true\"},\n+        applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        counts = {IRNode.MUL_REDUCTION_VI, \">= 1\", IRNode.MUL_REDUCTION_VI, \"<= 2\"}) \/\/ one for main-loop, one for vector-post-loop\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/RedTest_int.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -229,0 +229,4 @@\n+    @IR(applyIfPlatform = {\"riscv64\", \"true\"},\n+        applyIfCPUFeature = {\"rvv\", \"true\"},\n+        applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        counts = {IRNode.MUL_REDUCTION_VL, \">= 1\", IRNode.MUL_REDUCTION_VL, \"<= 2\"}) \/\/ one for main-loop, one for vector-post-loop\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/RedTest_long.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}