{"files":[{"patch":"@@ -149,1 +149,1 @@\n-If a user wants to provide multiple flag combinations for a single test, he or she has the option to provide different scenarios. A scenario based flag will always have precedence over other user defined flags. More information about scenarios can be found in the Javadocs of [Scenario](.\/Scenario.java).\n+If a user wants to provide multiple flag combinations for a single test, he or she has the option to provide different scenarios. A scenario based flag will always have precedence over other user defined flags. More information about scenarios can be found in the Javadocs of [Scenario](.\/Scenario.java). If a user wants to test all combinations of multiple sets of flags, they can use `TestFramework.addCrossProductScenarios()`.\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/README.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+import java.util.concurrent.atomic.AtomicInteger;\n@@ -49,0 +50,1 @@\n+import java.util.stream.Stream;\n@@ -335,0 +337,66 @@\n+    \/**\n+     * Add the cross-product (cartesian product) of sets of flags as Scenarios. Unlike when when constructing\n+     * scenarios directly a string can contain multiple flags separated with a space. This allows grouping\n+     * flags that have to be specified togeher. Further, an empty string in a set stands in for \"no flag\".\n+     * <p>\n+     * Example:\n+     * <pre>\n+     *     addCrossProductScenarios(Set.of(\"\", \"-Xint\", \"-Xbatch -XX:-TieredCompilation\"),\n+     *                              Set.of(\"-XX:+UseNewCode\", \"-XX:UseNewCode2\"))\n+     * <\/pre>\n+     *   produces the following Scenarios\n+     * <pre>\n+     *     Scenario(0, \"-XX:+UseNewCode\")\n+     *     Scenario(1, \"-XX:+UseNewCode2\")\n+     *     Scenario(2, \"-Xint\", \"-XX:+UseNewCode\")\n+     *     Scenario(3, \"-Xint\", \"-XX:+UseNewCode2\")\n+     *     Scenario(4, \"-Xbatch -XX:-TieredCompilation\", \"-XX:+UseNewCode\")\n+     *     Scenario(5, \"-Xbatch -XX:-TieredCompilation\", \"-XX:+UseNewCode2\")\n+     * <\/pre>\n+     *\n+     * @param sets sets of flags to generate the cross product for.\n+     * @return the same framework instance.\n+     *\/\n+    @SafeVarargs\n+    final public TestFramework addCrossProductScenarios(Set<String>... flagSets) {\n+        TestFormat.checkAndReport(flagSets != null &&\n+                                  Arrays.stream(flagSets).noneMatch(Objects::isNull) &&\n+                                  Arrays.stream(flagSets).flatMap(Set::stream).noneMatch(Objects::isNull),\n+                                  \"Flags must not be null\");\n+        if (flagSets.length == 0) {\n+            return this;\n+        }\n+\n+        int initIdx = 0;\n+        if (this.scenarioIndices != null && !this.scenarioIndices.isEmpty()) {\n+            initIdx = this.scenarioIndices.stream().max(Comparator.comparingInt(Integer::intValue)).get() + 1;\n+        }\n+        AtomicInteger idx = new AtomicInteger(initIdx);\n+\n+        Stream<List<String>> crossProduct = Arrays.stream(flagSets)\n+            .reduce(\n+                Stream.of(Collections.<String>emptyList()),\n+                (acc, set) ->\n+                    acc.flatMap(list ->\n+                        set.stream().map(element -> {\n+                            List<String> newList = new ArrayList<>(list);\n+                            newList.add(element);\n+                            return newList;\n+                        })\n+                    ),\n+                (a, b) -> Stream.concat(a, b));\n+\n+        Scenario[] newScenarios = crossProduct\n+                .map(flags -> new Scenario(\n+                        idx.getAndIncrement(),\n+                        flags.stream() \/\/ Process flags\n+                             .map(s -> Set.of(s.split(\"[ ]\"))) \/\/ Split muliple flags in the same string into separate strings\n+                             .flatMap(Collection::stream)\n+                             .filter(s -> !s.isEmpty()) \/\/ Remove empty string flags\n+                             .distinct()\n+                             .collect(Collectors.toList())\n+                             .toArray(new String[0])))\n+                .collect(Collectors.toList()).toArray(new Scenario[0]);\n+        return addScenarios(newScenarios);\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/TestFramework.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -30,4 +30,1 @@\n- * @run driver compiler.vectorization.TestFloatConversionsVector nCOH_nAV\n- * @run driver compiler.vectorization.TestFloatConversionsVector nCOH_yAV\n- * @run driver compiler.vectorization.TestFloatConversionsVector yCOH_nAV\n- * @run driver compiler.vectorization.TestFloatConversionsVector yCOH_yAV\n+ * @run driver compiler.vectorization.TestFloatConversionsVector\n@@ -38,0 +35,2 @@\n+import java.util.Set;\n+\n@@ -52,7 +51,2 @@\n-        switch (args[0]) {\n-            case \"nCOH_nAV\" -> { framework.addFlags(\"-XX:-UseCompactObjectHeaders\", \"-XX:-AlignVector\"); }\n-            case \"nCOH_yAV\" -> { framework.addFlags(\"-XX:-UseCompactObjectHeaders\", \"-XX:+AlignVector\"); }\n-            case \"yCOH_nAV\" -> { framework.addFlags(\"-XX:+UseCompactObjectHeaders\", \"-XX:-AlignVector\"); }\n-            case \"yCOH_yAV\" -> { framework.addFlags(\"-XX:+UseCompactObjectHeaders\", \"-XX:+AlignVector\"); }\n-            default -> { throw new RuntimeException(\"Test argument not recognized: \" + args[0]); }\n-        };\n+        framework.addCrossProductScenarios(Set.of(\"-XX:-UseCompactObjectHeaders\", \"-XX:+UseCompactObjectHeaders\"),\n+                                           Set.of(\"-XX:-AlignVector\", \"-XX:+AlignVector\"));\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestFloatConversionsVector.java","additions":5,"deletions":11,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,165 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package ir_framework.tests;\n+\n+import java.util.Set;\n+\n+import compiler.lib.ir_framework.*;\n+import compiler.lib.ir_framework.shared.TestRunException;\n+import compiler.lib.ir_framework.shared.TestFormatException;\n+import jdk.test.lib.Asserts;\n+\n+\/*\n+ * @test\n+ * @requires vm.debug == true & vm.compMode != \"Xint\" & vm.compiler2.enabled & vm.flagless\n+ * @summary Test cross product scenarios with the framework.\n+ * @library \/test\/lib \/testlibrary_tests \/\n+ * @run driver ir_framework.tests.TestScenariosCrossProduct\n+ *\/\n+\n+public class TestScenariosCrossProduct {\n+    static void hasNFailures(String s, int count) {\n+        if (!s.matches(\"The following scenarios have failed: (#[0-9](, )?){\" + count + \"}. Please check stderr for more information.\")) {\n+            throw new RuntimeException(\"Expected \" + count + \" failures in \\\"\" + s + \"\\\"\");\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        \/\/ Test argument handling\n+        try {\n+            TestFramework t = new TestFramework();\n+            t.addCrossProductScenarios(null);\n+            Asserts.fail(\"Should not have thrown exception\");\n+        } catch (TestFormatException e) {}\n+        try {\n+            TestFramework t = new TestFramework();\n+            t.addCrossProductScenarios(Set.of(\"foo\", \"bar\"), null);\n+            Asserts.fail(\"Should not have thrown exception\");\n+        } catch (TestFormatException e) {}\n+        try {\n+            TestFramework t = new TestFramework();\n+            t.addCrossProductScenarios(Set.of(\"blub\"), Set.of(\"foo\", null));\n+            Asserts.fail(\"Should not have thrown exception\");\n+        } catch (NullPointerException e) {} \/\/ Set.of prevents null elements\n+        try {\n+            TestFramework t = new TestFramework();\n+            t.addCrossProductScenarios();\n+        } catch (TestFormatException e) {\n+            Asserts.fail(\"Should not have thrown exception\");\n+        }\n+\n+\n+        \/\/ Single set should test all flags in the set by themselves.\n+        try {\n+            TestFramework t1 = new TestFramework();\n+            t1.addCrossProductScenarios(Set.of(\"-XX:TLABRefillWasteFraction=51\",\n+                                               \"-XX:TLABRefillWasteFraction=53\",\n+                                               \"-XX:TLABRefillWasteFraction=64\"));\n+            t1.start();\n+            Asserts.fail(\"Should have thrown exception\");\n+        } catch (TestRunException e) {\n+            hasNFailures(e.getMessage(), 3);\n+        }\n+\n+        \/\/ The cross product of a set with one element and a set with three elements is three sets.\n+        try {\n+            TestFramework t2 = new TestFramework();\n+            t2.addCrossProductScenarios(Set.of(\"-XX:TLABRefillWasteFraction=53\"),\n+                                        Set.of(\"-XX:+UseNewCode\", \"-XX:+UseNewCode2\", \"-XX:+UseNewCode3\"));\n+            t2.start();\n+            Asserts.fail(\"Should have thrown exception\");\n+        } catch (TestRunException e) {\n+            hasNFailures(e.getMessage(), 3);\n+        }\n+\n+        \/\/ The cross product of two sets with two elements is four sets.\n+        try {\n+            TestFramework t3 = new TestFramework();\n+            t3.addCrossProductScenarios(Set.of(\"-XX:TLABRefillWasteFraction=53\", \"-XX:TLABRefillWasteFraction=64\"),\n+                                        Set.of(\"-XX:+UseNewCode\", \"-XX:-UseNewCode\"));\n+            t3.start();\n+            Asserts.fail(\"Should have thrown exception\");\n+        } catch (TestRunException e) {\n+            hasNFailures(e.getMessage(), 4);\n+        }\n+\n+        \/\/ Test with a pair of flags.\n+        try {\n+            TestFramework t4 = new TestFramework();\n+            t4.addCrossProductScenarios(Set.of(\"-XX:TLABRefillWasteFraction=50 -XX:+UseNewCode\", \"-XX:TLABRefillWasteFraction=40\"),\n+                                        Set.of(\"-XX:+UseNewCode2\"));\n+            t4.start();\n+            Asserts.fail(\"Should have thrown exception\");\n+        } catch (TestRunException e) {\n+            hasNFailures(e.getMessage(), 1);\n+        }\n+\n+        \/\/ Test with an empty string. All 6 scenarios fail because 64 is the default value for TLABRefillWasteFraction.\n+        try {\n+            TestFramework t5 = new TestFramework();\n+            t5.addCrossProductScenarios(Set.of(\"\", \"-XX:TLABRefillWasteFraction=51\", \"-XX:TLABRefillWasteFraction=53\"),\n+                                        Set.of(\"-XX:+UseNewCode\", \"-XX:+UseNewCode2\"));\n+            t5.start();\n+            Asserts.fail(\"Should have thrown exception\");\n+        } catch (TestRunException e) {\n+            hasNFailures(e.getMessage(), 6);\n+        }\n+\n+        try {\n+            TestFramework t6 = new TestFramework();\n+            t6.addScenarios(new Scenario(0, \"-XX:TLABRefillWasteFraction=50\", \"-XX:+UseNewCode\")); \/\/ failPair\n+            t6.addCrossProductScenarios(Set.of(\"-XX:TLABRefillWasteFraction=51\", \"-XX:TLABRefillWasteFraction=53\"),\n+                                        Set.of(\"-XX:+UseNewCode\", \"-XX:+UseNewCode2\"));\n+            try {\n+                t6.addScenarios(new Scenario(4, \"-XX:+UseNewCode3\")); \/\/ fails because index 4 is already used\n+            Asserts.fail(\"Should have thrown exception\");\n+            } catch (TestFormatException e) {}\n+            t6.addScenarios(new Scenario(5, \"-XX:+UseNewCode3\")); \/\/ fail default\n+            t6.start();\n+            Asserts.fail(\"Should have thrown exception\");\n+        } catch (TestRunException e) {\n+            hasNFailures(e.getMessage(), 6);\n+        }\n+    }\n+\n+    @Test\n+    @IR(applyIf = {\"TLABRefillWasteFraction\", \"64\"}, counts = {IRNode.CALL, \"1\"})\n+    public void failDefault() {\n+    }\n+\n+    @Test\n+    @IR(applyIf = {\"TLABRefillWasteFraction\", \"51\"}, counts = {IRNode.CALL, \"1\"})\n+    public void fail1() {\n+    }\n+\n+    @Test\n+    @IR(applyIf = {\"TLABRefillWasteFraction\", \"53\"}, counts = {IRNode.CALL, \"1\"})\n+    public void fail2() {\n+    }\n+\n+    @Test\n+    @IR(applyIfAnd = {\"TLABRefillWasteFraction\", \"50\", \"UseNewCode\", \"true\"}, counts = {IRNode.CALL, \"1\"})\n+    public void failPair() {\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestScenariosCrossProduct.java","additions":165,"deletions":0,"binary":false,"changes":165,"status":"added"}]}