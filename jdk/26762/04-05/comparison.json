{"files":[{"patch":"@@ -362,2 +362,8 @@\n-        TestFormat.checkAndReport(flagSets != null && Arrays.stream(flagSets).noneMatch(Objects::isNull),\n-                \"Flags must not be null\");\n+        TestFormat.checkAndReport(flagSets != null &&\n+                                  Arrays.stream(flagSets).noneMatch(Objects::isNull) &&\n+                                  Arrays.stream(flagSets).flatMap(Set::stream).noneMatch(Objects::isNull),\n+                                  \"Flags must not be null\");\n+        if (flagSets.length == 0) {\n+            return this;\n+        }\n+\n@@ -370,1 +376,14 @@\n-        Scenario[] newScenarios = crossProductHelper(0, flagSets)\n+        Stream<List<String>> crossProduct = Arrays.stream(flagSets)\n+            .reduce(\n+                Stream.of(Collections.<String>emptyList()),\n+                (acc, set) ->\n+                    acc.flatMap(list ->\n+                        set.stream().map(element -> {\n+                            List<String> newList = new ArrayList<>(list);\n+                            newList.add(element);\n+                            return newList;\n+                        })\n+                    ),\n+                (a, b) -> Stream.concat(a, b));\n+\n+        Scenario[] newScenarios = crossProduct\n@@ -374,5 +393,6 @@\n-                                .filter(s -> !s.isEmpty()) \/\/ Remove empty flags\n-                                .map(s -> Set.of(s.split(\"[ ]\"))) \/\/ Split muliple flags in the same string into separate strings\n-                                .flatMap(Collection::stream)\n-                                .collect(Collectors.toList())\n-                                .toArray(new String[0])))\n+                             .map(s -> Set.of(s.split(\"[ ]\"))) \/\/ Split muliple flags in the same string into separate strings\n+                             .flatMap(Collection::stream)\n+                             .filter(s -> !s.isEmpty()) \/\/ Remove empty string flags\n+                             .distinct()\n+                             .collect(Collectors.toList())\n+                             .toArray(new String[0])))\n@@ -383,15 +403,0 @@\n-    @SafeVarargs\n-    private static Stream<Set<String>> crossProductHelper(int idx, Set<String>... sets) {\n-        if (idx == sets.length) {\n-            Set<String> empty = Set.of();\n-            return Set.of(empty).stream();\n-        }\n-        return sets[idx].stream()\n-                .flatMap(setElement -> crossProductHelper(idx + 1, sets)\n-                        .map(set -> {\n-                            Set<String> newSet = new HashSet<>(set);\n-                            newSet.add(setElement);\n-                            return newSet;\n-                        }));\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/TestFramework.java","additions":28,"deletions":23,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import compiler.lib.ir_framework.shared.TestFormatException;\n@@ -48,0 +49,24 @@\n+        \/\/ Test argument handling\n+        try {\n+            TestFramework t = new TestFramework();\n+            t.addCrossProductScenarios(null);\n+            Asserts.fail(\"Should not have thrown exception\");\n+        } catch (TestFormatException e) {}\n+        try {\n+            TestFramework t = new TestFramework();\n+            t.addCrossProductScenarios(Set.of(\"foo\", \"bar\"), null);\n+            Asserts.fail(\"Should not have thrown exception\");\n+        } catch (TestFormatException e) {}\n+        try {\n+            TestFramework t = new TestFramework();\n+            t.addCrossProductScenarios(Set.of(\"blub\"), Set.of(\"foo\", null));\n+            Asserts.fail(\"Should not have thrown exception\");\n+        } catch (NullPointerException e) {} \/\/ Set.of prevents null elements\n+        try {\n+            TestFramework t = new TestFramework();\n+            t.addCrossProductScenarios();\n+        } catch (TestFormatException e) {\n+            Asserts.fail(\"Should not have thrown exception\");\n+        }\n+\n+\n@@ -82,0 +107,1 @@\n+        \/\/ Test with a pair of flags.\n@@ -102,0 +128,16 @@\n+\n+        try {\n+            TestFramework t6 = new TestFramework();\n+            t6.addScenarios(new Scenario(0, \"-XX:TLABRefillWasteFraction=50\", \"-XX:+UseNewCode\")); \/\/ failPair\n+            t6.addCrossProductScenarios(Set.of(\"-XX:TLABRefillWasteFraction=51\", \"-XX:TLABRefillWasteFraction=53\"),\n+                                        Set.of(\"-XX:+UseNewCode\", \"-XX:+UseNewCode2\"));\n+            try {\n+                t6.addScenarios(new Scenario(4, \"-XX:+UseNewCode3\")); \/\/ fails because index 4 is already used\n+            Asserts.fail(\"Should have thrown exception\");\n+            } catch (TestFormatException e) {}\n+            t6.addScenarios(new Scenario(5, \"-XX:+UseNewCode3\")); \/\/ fail default\n+            t6.start();\n+            Asserts.fail(\"Should have thrown exception\");\n+        } catch (TestRunException e) {\n+            hasNFailures(e.getMessage(), 6);\n+        }\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestScenariosCrossProduct.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"modified"}]}