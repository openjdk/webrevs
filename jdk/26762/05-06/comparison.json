{"files":[{"patch":"@@ -378,6 +378,6 @@\n-                Stream.of(Collections.<String>emptyList()),\n-                (acc, set) ->\n-                    acc.flatMap(list ->\n-                        set.stream().map(element -> {\n-                            List<String> newList = new ArrayList<>(list);\n-                            newList.add(element);\n+                Stream.of(Collections.<String>emptyList()), \/\/ Initialize Stream<List<String>> acc with a Stream containing an empty list of Strings.\n+                (acc, set) ->  \/\/ (Stream<List<String>>, Stream<List<String>>) -> Stream<List<String>>\n+                    acc.flatMap(lAcc -> \/\/ For each List<String>> lAcc in acc...\n+                        set.stream().map(flag -> { \/\/ ...and each flag in the current set...\n+                            List<String> newList = new ArrayList<>(lAcc); \/\/ ...create a new list containing lAcc...\n+                            newList.add(flag); \/\/ ...and append the flag.\n@@ -385,3 +385,3 @@\n-                        })\n-                    ),\n-                (a, b) -> Stream.concat(a, b));\n+                        }) \/\/ This results in one List<List<String>> for each lAcc...\n+                    ), \/\/ ...that get flattend into one big List<List<String>>.\n+                (a, b) -> Stream.concat(a, b)); \/\/ combiner; if any reduction steps are executed in parallel, just concat two streams.\n@@ -390,10 +390,10 @@\n-                .map(flags -> new Scenario(\n-                        idx.getAndIncrement(),\n-                        flags.stream() \/\/ Process flags\n-                             .map(s -> Set.of(s.split(\"[ ]\"))) \/\/ Split muliple flags in the same string into separate strings\n-                             .flatMap(Collection::stream)\n-                             .filter(s -> !s.isEmpty()) \/\/ Remove empty string flags\n-                             .distinct()\n-                             .collect(Collectors.toList())\n-                             .toArray(new String[0])))\n-                .collect(Collectors.toList()).toArray(new Scenario[0]);\n+            .map(flags -> new Scenario( \/\/ For each List<String> flags in crossProduct create a new Scenario.\n+                idx.getAndIncrement(),\n+                flags.stream() \/\/ Process flags\n+                     .map(s -> Set.of(s.split(\"[ ]\"))) \/\/ Split muliple flags in the same string into separate strings.\n+                     .flatMap(Collection::stream) \/\/ Flatten the Stream<List<String>> into Stream<String>>.\n+                     .filter(s -> !s.isEmpty()) \/\/ Remove empty string flags.\n+                     .distinct()\n+                     .collect(Collectors.toList())\n+                     .toArray(new String[0])))\n+            .collect(Collectors.toList()).toArray(new Scenario[0]);\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/TestFramework.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-            Asserts.fail(\"Should not have thrown exception\");\n+            Asserts.fail(\"Should have thrown exception\");\n@@ -58,1 +58,1 @@\n-            Asserts.fail(\"Should not have thrown exception\");\n+            Asserts.fail(\"Should have thrown exception\");\n@@ -63,1 +63,1 @@\n-            Asserts.fail(\"Should not have thrown exception\");\n+            Asserts.fail(\"Should have thrown exception\");\n@@ -72,1 +72,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestScenariosCrossProduct.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"}]}