{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+import java.util.List;\n@@ -370,3 +371,3 @@\n-        AllocatableValue[] args = cc.getArguments();\n-        for (int i = 0; i < args.length; i++) {\n-            emitLoad(args[i], prim[i]);\n+        List<AllocatableValue> args = cc.getArguments();\n+        for (int i = 0; i < args.size(); i++) {\n+            emitLoad(args.get(i), prim[i]);\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.code.test\/src\/jdk\/vm\/ci\/code\/test\/aarch64\/AArch64TestAssembler.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.util.List;\n@@ -498,1 +499,1 @@\n-        AllocatableValue[] args = cc.getArguments();\n+        List<AllocatableValue> args = cc.getArguments();\n@@ -501,2 +502,2 @@\n-        for (int i = args.length - 1; i >= 0; i--) {\n-            emitLoad(args[i], prim[i]);\n+        for (int i = args.size() - 1; i >= 0; i--) {\n+            emitLoad(args.get(i), prim[i]);\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.code.test\/src\/jdk\/vm\/ci\/code\/test\/amd64\/AMD64TestAssembler.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+import java.util.List;\n@@ -230,3 +231,3 @@\n-        AllocatableValue[] args = cc.getArguments();\n-        for (int i = 0; i < args.length; i++) {\n-            emitLoad(args[i], prim[i]);\n+        List<AllocatableValue> args = cc.getArguments();\n+        for (int i = 0; i < args.size(); i++) {\n+            emitLoad(args.get(i), prim[i]);\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.code.test\/src\/jdk\/vm\/ci\/code\/test\/riscv64\/RISCV64TestAssembler.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"}]}