{"files":[{"patch":"@@ -81,0 +81,1 @@\n+            byte[] key = null;\n@@ -83,1 +84,1 @@\n-                byte[] key = params.ExtractAndExpand(dh, kem_context);\n+                key = params.ExtractAndExpand(dh, kem_context);\n@@ -89,0 +90,6 @@\n+            } finally {\n+                \/\/ `key` has been cloned into the `SecretKeySpec` within the\n+                \/\/ returned `KEM.Encapsulated`, so it can now be cleared.\n+                if (key != null) {\n+                    Arrays.fill(key, (byte)0);\n+                }\n@@ -101,0 +108,1 @@\n+            byte[] key = null;\n@@ -106,1 +114,1 @@\n-                byte[] key = params.ExtractAndExpand(dh, kem_context);\n+                key = params.ExtractAndExpand(dh, kem_context);\n@@ -112,0 +120,4 @@\n+            } finally {\n+                if (key != null) {\n+                    Arrays.fill(key, (byte)0);\n+                }\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/DHKEM.java","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import jdk.internal.access.SharedSecrets;\n+\n@@ -126,2 +128,6 @@\n-        return new SecretKeySpec(engineDeriveData(derivationSpec), alg);\n-\n+        var data = engineDeriveData(derivationSpec);\n+        try {\n+            return new SecretKeySpec(data, alg);\n+        } finally {\n+            Arrays.fill(data, (byte)0);\n+        }\n@@ -349,1 +355,1 @@\n-        SecretKey pseudoRandomKey = new SecretKeySpec(prk, hmacAlgName);\n+        SecretKeySpec pseudoRandomKey = new SecretKeySpec(prk, hmacAlgName);\n@@ -385,0 +391,3 @@\n+        } finally {\n+            SharedSecrets.getJavaxCryptoSpecAccess()\n+                    .clearSecretKeySpec(pseudoRandomKey);\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/HKDFKeyDerivation.java","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -236,0 +236,1 @@\n+            md.reset();\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/HmacCore.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -630,0 +630,1 @@\n+        Arrays.fill(mac, (byte)0);\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/Mac.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+import java.util.Arrays;\n@@ -262,1 +263,6 @@\n-        return new SecretKeySpec(engineGenerateSecret(), algorithm);\n+        byte[] bytes = engineGenerateSecret();\n+        try {\n+            return new SecretKeySpec(bytes, algorithm);\n+        } finally {\n+            Arrays.fill(bytes, (byte)0);\n+        }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ec\/ECDHKeyAgreement.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import java.util.Arrays;\n@@ -48,1 +49,1 @@\n-    private byte[] privateKey;\n+    private XECPrivateKey privateKey;\n@@ -104,1 +105,1 @@\n-        XECPrivateKey privateKey = (XECPrivateKey) key;\n+        privateKey = (XECPrivateKey) key;\n@@ -110,1 +111,1 @@\n-        this.privateKey = privateKey.getScalar().orElseThrow(\n+        byte[] tmp = privateKey.getScalar().orElseThrow(\n@@ -113,0 +114,1 @@\n+        Arrays.fill(tmp, (byte)0);\n@@ -147,0 +149,1 @@\n+        byte[] scalar = this.privateKey.getScalar().get();\n@@ -148,1 +151,1 @@\n-            this.privateKey,\n+            scalar,\n@@ -150,0 +153,1 @@\n+        Arrays.fill(scalar, (byte)0);\n@@ -216,1 +220,6 @@\n-        return new SecretKeySpec(engineGenerateSecret(), algorithm);\n+        byte[] bytes = engineGenerateSecret();\n+        try {\n+            return new SecretKeySpec(bytes, algorithm);\n+        } finally {\n+            Arrays.fill(bytes, (byte)0);\n+        }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ec\/XDHKeyAgreement.java","additions":14,"deletions":5,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.util.Arrays;\n@@ -109,0 +110,1 @@\n+        var kClone = k.clone();\n@@ -111,1 +113,1 @@\n-                    new XECOperations(params).computePublic(k.clone()));\n+                    new XECOperations(params).computePublic(kClone));\n@@ -115,0 +117,2 @@\n+        } finally {\n+            Arrays.fill(kClone, (byte)0);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ec\/XDHPrivateKeyImpl.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,0 +47,1 @@\n+import java.util.Arrays;\n@@ -95,1 +96,1 @@\n-    private byte[] privateKey;\n+    private EdECPrivateKey privateKey;\n@@ -144,1 +145,6 @@\n-        EdECPrivateKey edKey = (EdECPrivateKey) privateKey;\n+        this.privateKey = (EdECPrivateKey) privateKey;\n+\n+        initImpl(this.privateKey.getParams());\n+        byte[] tmp = this.privateKey.getBytes().orElseThrow(\n+                () -> new InvalidKeyException(\"No private key value\"));\n+        Arrays.fill(tmp, (byte)0);\n@@ -146,3 +152,0 @@\n-        initImpl(edKey.getParams());\n-        this.privateKey = edKey.getBytes().orElseThrow(\n-        () -> new InvalidKeyException(\"No private key value\"));\n@@ -202,4 +205,8 @@\n-        byte[] result = ops.sign(this.sigParams, this.privateKey,\n-            message.getMessage());\n-        message = null;\n-        return result;\n+        byte[] bytes = this.privateKey.getBytes().get();\n+        try {\n+            return ops.sign(this.sigParams, bytes,\n+                    message.getMessage());\n+        } finally {\n+            Arrays.fill(bytes, (byte)0);\n+            message = null;\n+        }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ec\/ed\/EdDSASignature.java","additions":17,"deletions":10,"binary":false,"changes":27,"status":"modified"}]}