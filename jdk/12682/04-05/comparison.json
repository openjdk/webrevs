{"files":[{"patch":"@@ -1755,8 +1755,0 @@\n-}\n-\n-\/\/ Copy mask register\n-void C2_MacroAssembler::rvv_set_v0_mask(VectorRegister src) {\n-  if (src != v0) {\n-    vsetvli(t0, x0, Assembler::e8);\n-    vmand_mm(v0, src, src);\n-  }\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -140,4 +140,6 @@\n-  void spill_copy_vector_stack_to_stack(int src_offset, int dst_offset, int vec_reg_size_in_bytes) {\n-    assert(vec_reg_size_in_bytes % 16 == 0, \"unexpected vector reg size\");\n-    unspill(v0, src_offset);\n-    spill(v0, dst_offset);\n+  void spill_copy_vector_stack_to_stack(int src_offset, int dst_offset, int vector_length_in_bytes) {\n+    assert(vector_length_in_bytes % 16 == 0, \"unexpected vector reg size\");\n+    for (int i = 0; i < vector_length_in_bytes \/ 8; i++) {\n+      unspill(t0, true, src_offset + (i * 8));\n+      spill(t0, true, dst_offset + (i * 8));\n+    }\n@@ -204,2 +206,0 @@\n- void rvv_set_v0_mask(VectorRegister src);\n-\n@@ -209,1 +209,2 @@\n- void spill_mask(VectorRegister v, int offset, SEW sew = Assembler::e8){\n+ void spill_vmask(VectorRegister v, int offset){\n+   rvv_vsetvli(T_BYTE, MaxVectorSize >> 3);\n@@ -211,1 +212,0 @@\n-   vsetivli(t1, MaxVectorSize >> 3, sew);\n@@ -215,1 +215,2 @@\n- void unspill_mask(VectorRegister v, int offset, SEW sew = Assembler::e8){\n+ void unspill_vmask(VectorRegister v, int offset){\n+   rvv_vsetvli(T_BYTE, MaxVectorSize >> 3);\n@@ -217,1 +218,0 @@\n-   vsetivli(t1, MaxVectorSize >> 3, sew);\n@@ -221,5 +221,7 @@\n- void spill_copy_mask_stack_to_stack(int src_offset, int dst_offset, int vec_reg_size_in_bytes){\n-   assert(vec_reg_size_in_bytes % 16 == 0, \"unexpected vector reg size\");\n-   unspill_mask(v0, src_offset);\n-   spill_mask(v0, dst_offset);\n- }\n+  void spill_copy_vmask_stack_to_stack(int src_offset, int dst_offset, int vector_length_in_bytes) {\n+    assert(vector_length_in_bytes % 4 == 0, \"unexpected vector mask reg size\");\n+    for (int i = 0; i < vector_length_in_bytes \/ 4; i++) {\n+      unspill(t0, false, src_offset + (i * 4));\n+      spill(t0, false, dst_offset + (i * 4));\n+    }\n+  }\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.hpp","additions":17,"deletions":15,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -833,1 +833,2 @@\n-\/\/ Class for all RVV vector registers\n+\/\/ Class for RVV vector registers\n+\/\/ v0, v31 is used as RVV mask registers.\n@@ -863,1 +864,2 @@\n-    V29, V29_H, V29_J, V29_K\n+    V29, V29_H, V29_J, V29_K,\n+    V30, V30_H, V30_J, V30_K\n@@ -914,6 +916,11 @@\n-\/\/ Class for all RVV predicate registers.\n-\/\/ We use v30 as well as v31 as mask registers, two mask registers are used to\n-\/\/ handle the case where the input parameters are two mask registers.\n-\/\/ Since v0 is used as a temporary register in spill_copy_vector_stack_to_stack,\n-\/\/ we do not set v0 as a mask register here but put the mask value into v0\n-\/\/ before using the RVV instruction for mask operation.\n+\/\/ Class for RVV v0 mask register\n+\/\/ https:\/\/github.com\/riscv\/riscv-v-spec\/blob\/master\/v-spec.adoc#53-vector-masking\n+\/\/ The mask value used to control execution of a masked vector\n+\/\/ instruction is always supplied by vector register v0.\n+reg_class vectmask_reg_v0 (\n+    V0\n+);\n+\n+\/\/ Class for RVV mask registers\n+\/\/ We need two vmask to do the vector mask logical ops,\n+\/\/ so define v31 as mask register too.\n@@ -921,1 +928,1 @@\n-    V30,\n+    V0,\n@@ -1572,1 +1579,1 @@\n-      int vector_reg_size_in_bytes = Matcher::scalable_vector_reg_size(T_BYTE);\n+      int vmask_size_in_bytes = Matcher::scalable_predicate_reg_slots() * 32 \/ 8;\n@@ -1575,2 +1582,2 @@\n-        __ spill_copy_mask_stack_to_stack(src_offset, dst_offset,\n-                                            vector_reg_size_in_bytes);\n+        __ spill_copy_vmask_stack_to_stack(src_offset, dst_offset,\n+                                           vmask_size_in_bytes);\n@@ -1578,2 +1585,2 @@\n-        \/\/ vpr to stack\n-        __ spill_mask(as_VectorRegister(Matcher::_regEncode[src_lo]), ra_->reg2offset(dst_lo));\n+        \/\/ vmask to stack\n+        __ spill_vmask(as_VectorRegister(Matcher::_regEncode[src_lo]), ra_->reg2offset(dst_lo));\n@@ -1581,2 +1588,2 @@\n-        \/\/ stack to vpr\n-        __ unspill_mask(as_VectorRegister(Matcher::_regEncode[dst_lo]), ra_->reg2offset(src_lo));\n+        \/\/ stack to vmask\n+        __ unspill_vmask(as_VectorRegister(Matcher::_regEncode[dst_lo]), ra_->reg2offset(src_lo));\n@@ -1584,1 +1591,1 @@\n-        \/\/ vpr to vpr\n+        \/\/ vmask to vmask\n@@ -3569,0 +3576,10 @@\n+operand vRegMask_V0()\n+%{\n+  constraint(ALLOC_IN_RC(vectmask_reg_v0));\n+  match(RegVectMask);\n+  match(vRegMask);\n+  op_cost(0);\n+  format %{ %}\n+  interface(REG_INTER);\n+%}\n+\n@@ -3573,0 +3590,1 @@\n+  match(vRegMask_V0);\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":35,"deletions":17,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -125,1 +125,1 @@\n-instruct vloadmask(vRegMask dst, vReg src, rFlagsReg cr) %{\n+instruct vloadmask(vRegMask dst, vReg src) %{\n@@ -127,1 +127,1 @@\n-  format %{ \"vloadmask $dst, $src\\t# KILL cr\" %}\n+  format %{ \"vloadmask $dst, $src\" %}\n@@ -129,2 +129,1 @@\n-    BasicType bt = Matcher::vector_element_basic_type(this, $src);\n-    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this, $src));\n+    __ vsetvli(t0, x0, Assembler::e8);\n@@ -136,1 +135,1 @@\n-instruct vloadmask_masked(vRegMask dst, vReg src, vRegMask vmask, rFlagsReg cr) %{\n+instruct vloadmask_masked(vRegMask dst, vReg src, vRegMask_V0 vmask) %{\n@@ -138,1 +137,1 @@\n-  format %{ \"vloadmask_masked $dst, $src, $vmask\\t# KILL cr\" %}\n+  format %{ \"vloadmask_masked $dst, $src, $vmask\" %}\n@@ -140,3 +139,1 @@\n-    __ rvv_set_v0_mask(as_VectorRegister($vmask$$reg));\n-    BasicType bt = Matcher::vector_element_basic_type(this, $src);\n-    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this, $src));\n+    __ vsetvli(t0, x0, Assembler::e8);\n@@ -150,1 +147,1 @@\n-instruct vstoremask(vReg dst, vRegMask src, immI size) %{\n+instruct vstoremask(vReg dst, vRegMask_V0 src, immI size) %{\n@@ -154,4 +151,2 @@\n-    Assembler::SEW sew = __ elembytes_to_sew((int)$size$$constant);\n-    __ vsetvli(t0, x0, sew);\n-    __ vmv_v_i(as_VectorRegister($dst$$reg), 0);\n-    __ rvv_set_v0_mask(as_VectorRegister($src$$reg));\n+    __ vsetvli(t0, x0, Assembler::e8);\n+    __ vmv_v_x(as_VectorRegister($dst$$reg), x0);\n@@ -165,1 +160,1 @@\n-instruct vmaskcmp(vRegMask dst, vReg src1, vReg src2, immI cond, rFlagsReg cr) %{\n+instruct vmaskcmp(vRegMask dst, vReg src1, vReg src2, immI cond) %{\n@@ -167,2 +162,1 @@\n-  effect(KILL cr);\n-  format %{ \"vmaskcmp_rvv $dst, $src1, $src2, $cond\\t# KILL cr\" %}\n+  format %{ \"vmaskcmp_rvv $dst, $src1, $src2, $cond\" %}\n@@ -170,2 +164,2 @@\n-    BasicType bt = Matcher::vector_element_basic_type(this, $src1);\n-    uint length_in_bytes = Matcher::vector_length_in_bytes(this, $src1);\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n@@ -178,1 +172,1 @@\n-instruct vmaskcmp_masked(vRegMask dst, vReg src1, vReg src2, immI cond, vRegMask vmask, rFlagsReg cr) %{\n+instruct vmaskcmp_masked(vRegMask dst, vReg src1, vReg src2, immI cond, vRegMask_V0 vmask, vReg tmp) %{\n@@ -180,2 +174,2 @@\n-  effect(KILL cr);\n-  format %{ \"vmaskcmp_rvv_masked $dst, $src1, $src2, $vmask, $cond\\t# KILL cr\" %}\n+  effect(TEMP tmp);\n+  format %{ \"vmaskcmp_rvv_masked $dst, $src1, $src2, $vmask, $tmp, $cond\" %}\n@@ -183,4 +177,3 @@\n-    __ rvv_set_v0_mask(as_VectorRegister($vmask$$reg));\n-    BasicType bt = Matcher::vector_element_basic_type(this, $src1);\n-    uint length_in_bytes = Matcher::vector_length_in_bytes(this, $src1);\n-    __ rvv_compare(as_VectorRegister($dst$$reg), bt, length_in_bytes, as_VectorRegister($src1$$reg),\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n+    __ rvv_compare(as_VectorRegister($tmp$$reg), bt, length_in_bytes, as_VectorRegister($src1$$reg),\n@@ -188,0 +181,1 @@\n+    __ vmv1r_v(as_VectorRegister($dst$$reg), as_VectorRegister($tmp$$reg));\n@@ -354,1 +348,1 @@\n-instruct vadd_masked(vReg dst_src1, vReg src2, vRegMask vmask) %{\n+instruct vadd_masked(vReg dst_src1, vReg src2, vRegMask_V0 vmask) %{\n@@ -360,1 +354,0 @@\n-    __ rvv_set_v0_mask(as_VectorRegister($vmask$$reg));\n@@ -368,1 +361,1 @@\n-instruct vaddS_masked(vReg dst_src1, vReg src2, vRegMask vmask) %{\n+instruct vaddS_masked(vReg dst_src1, vReg src2, vRegMask_V0 vmask) %{\n@@ -373,1 +366,0 @@\n-    __ rvv_set_v0_mask(as_VectorRegister($vmask$$reg));\n@@ -382,1 +374,1 @@\n-instruct vaddI_masked(vReg dst_src1, vReg src2, vRegMask vmask) %{\n+instruct vaddI_masked(vReg dst_src1, vReg src2, vRegMask_V0 vmask) %{\n@@ -387,1 +379,0 @@\n-    __ rvv_set_v0_mask(as_VectorRegister($vmask$$reg));\n@@ -396,1 +387,1 @@\n-instruct vaddL_masked(vReg dst_src1, vReg src2, vRegMask vmask) %{\n+instruct vaddL_masked(vReg dst_src1, vReg src2, vRegMask_V0 vmask) %{\n@@ -401,1 +392,0 @@\n-    __ rvv_set_v0_mask(as_VectorRegister($vmask$$reg));\n@@ -410,1 +400,1 @@\n-instruct vaddF_masked(vReg dst_src1, vReg src2, vRegMask vmask) %{\n+instruct vaddF_masked(vReg dst_src1, vReg src2, vRegMask_V0 vmask) %{\n@@ -415,1 +405,0 @@\n-    __ rvv_set_v0_mask(as_VectorRegister($vmask$$reg));\n@@ -424,1 +413,1 @@\n-instruct vaddD_masked(vReg dst_src1, vReg src2, vRegMask vmask) %{\n+instruct vaddD_masked(vReg dst_src1, vReg src2, vRegMask_V0 vmask) %{\n@@ -429,1 +418,0 @@\n-    __ rvv_set_v0_mask(as_VectorRegister($vmask$$reg));\n@@ -513,1 +501,1 @@\n-instruct vdivF_masked(vReg dst_src1, vReg src2, vRegMask vmask) %{\n+instruct vdivF_masked(vReg dst_src1, vReg src2, vRegMask_V0 vmask) %{\n@@ -518,1 +506,0 @@\n-    __ rvv_set_v0_mask(as_VectorRegister($vmask$$reg));\n@@ -527,1 +514,1 @@\n-instruct vdivD_masked(vReg dst_src1, vReg src2, vRegMask vmask) %{\n+instruct vdivD_masked(vReg dst_src1, vReg src2, vRegMask_V0 vmask) %{\n@@ -532,1 +519,0 @@\n-    __ rvv_set_v0_mask(as_VectorRegister($vmask$$reg));\n@@ -943,1 +929,1 @@\n-instruct vmulB_masked(vReg dst_src1, vReg src2, vRegMask vmask) %{\n+instruct vmulB_masked(vReg dst_src1, vReg src2, vRegMask_V0 vmask) %{\n@@ -948,1 +934,0 @@\n-    __ rvv_set_v0_mask(as_VectorRegister($vmask$$reg));\n@@ -956,1 +941,1 @@\n-instruct vmulS_masked(vReg dst_src1, vReg src2, vRegMask vmask) %{\n+instruct vmulS_masked(vReg dst_src1, vReg src2, vRegMask_V0 vmask) %{\n@@ -961,1 +946,0 @@\n-    __ rvv_set_v0_mask(as_VectorRegister($vmask$$reg));\n@@ -969,1 +953,1 @@\n-instruct vmulI_masked(vReg dst_src1, vReg src2, vRegMask vmask) %{\n+instruct vmulI_masked(vReg dst_src1, vReg src2, vRegMask_V0 vmask) %{\n@@ -974,1 +958,0 @@\n-    __ rvv_set_v0_mask(as_VectorRegister($vmask$$reg));\n@@ -982,1 +965,1 @@\n-instruct vmulL_masked(vReg dst_src1, vReg src2, vRegMask vmask) %{\n+instruct vmulL_masked(vReg dst_src1, vReg src2, vRegMask_V0 vmask) %{\n@@ -987,1 +970,0 @@\n-    __ rvv_set_v0_mask(as_VectorRegister($vmask$$reg));\n@@ -995,1 +977,1 @@\n-instruct vmulF_masked(vReg dst_src1, vReg src2, vRegMask vmask) %{\n+instruct vmulF_masked(vReg dst_src1, vReg src2, vRegMask_V0 vmask) %{\n@@ -1000,1 +982,0 @@\n-    __ rvv_set_v0_mask(as_VectorRegister($vmask$$reg));\n@@ -1008,1 +989,1 @@\n-instruct vmulD_masked(vReg dst_src1, vReg src2, vRegMask vmask) %{\n+instruct vmulD_masked(vReg dst_src1, vReg src2, vRegMask_V0 vmask) %{\n@@ -1013,1 +994,0 @@\n-    __ rvv_set_v0_mask(as_VectorRegister($vmask$$reg));\n@@ -2094,1 +2074,1 @@\n-instruct vsubB_masked(vReg dst_src1, vReg src2, vRegMask vmask) %{\n+instruct vsubB_masked(vReg dst_src1, vReg src2, vRegMask_V0 vmask) %{\n@@ -2099,1 +2079,0 @@\n-    __ rvv_set_v0_mask(as_VectorRegister($vmask$$reg));\n@@ -2107,1 +2086,1 @@\n-instruct vsubS_masked(vReg dst_src1, vReg src2, vRegMask vmask) %{\n+instruct vsubS_masked(vReg dst_src1, vReg src2, vRegMask_V0 vmask) %{\n@@ -2112,1 +2091,0 @@\n-    __ rvv_set_v0_mask(as_VectorRegister($vmask$$reg));\n@@ -2120,1 +2098,1 @@\n-instruct vsubI_masked(vReg dst_src1, vReg src2, vRegMask vmask) %{\n+instruct vsubI_masked(vReg dst_src1, vReg src2, vRegMask_V0 vmask) %{\n@@ -2125,1 +2103,0 @@\n-    __ rvv_set_v0_mask(as_VectorRegister($vmask$$reg));\n@@ -2133,1 +2110,1 @@\n-instruct vsubL_masked(vReg dst_src1, vReg src2, vRegMask vmask) %{\n+instruct vsubL_masked(vReg dst_src1, vReg src2, vRegMask_V0 vmask) %{\n@@ -2138,1 +2115,0 @@\n-    __ rvv_set_v0_mask(as_VectorRegister($vmask$$reg));\n@@ -2146,1 +2122,1 @@\n-instruct vsubF_masked(vReg dst_src1, vReg src2, vRegMask vmask) %{\n+instruct vsubF_masked(vReg dst_src1, vReg src2, vRegMask_V0 vmask) %{\n@@ -2151,1 +2127,0 @@\n-    __ rvv_set_v0_mask(as_VectorRegister($vmask$$reg));\n@@ -2159,1 +2134,1 @@\n-instruct vsubD_masked(vReg dst_src1, vReg src2, vRegMask vmask) %{\n+instruct vsubD_masked(vReg dst_src1, vReg src2, vRegMask_V0 vmask) %{\n@@ -2164,1 +2139,0 @@\n-    __ rvv_set_v0_mask(as_VectorRegister($vmask$$reg));\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":40,"deletions":66,"binary":false,"changes":106,"status":"modified"}]}