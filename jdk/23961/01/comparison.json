{"files":[{"patch":"@@ -79,4 +79,8 @@\n-  size_t count = Atomic::add(&_count, 1u);\n-  if (count > max()) {\n-    Atomic::inc(&_max);\n-  }\n+  size_t count = Atomic::add(&_count, 1u, memory_order_relaxed);\n+  size_t old_max;\n+  do {\n+    old_max = Atomic::load(&_max);\n+    if (count <= old_max) {\n+      break;\n+    }\n+  } while (Atomic::cmpxchg(&_max, old_max, count, memory_order_relaxed) != old_max);\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+  MonitorList() : _head(nullptr), _count(0), _max(0) {};\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+#include \"classfile\/vmClasses.hpp\"\n@@ -25,0 +26,3 @@\n+#include \"memory\/universe.hpp\"\n+#include \"runtime\/interfaceSupport.inline.hpp\"\n+#include \"runtime\/objectMonitor.hpp\"\n@@ -27,0 +31,1 @@\n+#include \"threadHelper.inline.hpp\"\n@@ -69,0 +74,34 @@\n+\n+TEST_VM(SynchronizerTest, monitorListStats) {\n+  JavaThread* THREAD = JavaThread::current();\n+  ThreadInVMfromNative invm(THREAD);\n+  ResourceMark rm(THREAD);\n+\n+  \/\/ Something to reference in OM. It makes no difference which oop it is,\n+  \/\/ as long as it is correct.\n+  oop obj = vmClasses::Byte_klass()->allocate_instance(THREAD);\n+\n+  HandleMark hm(THREAD);\n+  Handle h_obj(THREAD, obj);\n+\n+  \/\/ Test various combinations of thread counts, including single-threaded test.\n+  static const int MIN_THREADS = 1;\n+  static const int MAX_THREADS = 16;\n+  static const int OM_PER_THREAD = 1000;\n+\n+  for (int threads = MIN_THREADS; threads <= MAX_THREADS; threads *= 2) {\n+    MonitorList list;\n+\n+    auto work = [&](Thread*, int) {\n+      for (int c = 0; c < OM_PER_THREAD; c++) {\n+        list.add(new ObjectMonitor(h_obj()));\n+      }\n+    };\n+    TestThreadGroup<decltype(work)> workers{work, threads};\n+    workers.doit();\n+    workers.join();\n+\n+    EXPECT_EQ(list.count(), (size_t)(threads*OM_PER_THREAD));\n+    EXPECT_EQ(list.max(), (size_t)(threads*OM_PER_THREAD));\n+  }\n+}\n","filename":"test\/hotspot\/gtest\/runtime\/test_synchronizer.cpp","additions":39,"deletions":0,"binary":false,"changes":39,"status":"modified"}]}