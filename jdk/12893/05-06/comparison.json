{"files":[{"patch":"@@ -199,2 +199,2 @@\n-    \/** UTF-8 validation level, e.g., {@link Convert#UTF8_STRICT}. *\/\n-    int utf8validation;\n+    \/** UTF-8 validation level *\/\n+    Convert.Validation utf8validation;\n@@ -679,1 +679,1 @@\n-            sigString = Convert.utf2string(signature, sigp, siglimit - sigp, Convert.UTF8_LAX);\n+            sigString = Convert.utf2string(signature, sigp, siglimit - sigp, Convert.Validation.NONE);\n@@ -2715,1 +2715,1 @@\n-        utf8validation = majorVersion < V48.major ? Convert.UTF8_PREJDK14 : Convert.UTF8_STRICT;\n+        utf8validation = majorVersion < V48.major ? Convert.Validation.PREJDK14 : Convert.Validation.STRICT;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -164,1 +164,1 @@\n-                return Convert.utf2string(buf, 0, buf.length, Convert.UTF8_STRICT);\n+                return Convert.utf2string(buf, 0, buf.length, Convert.Validation.STRICT);\n@@ -166,1 +166,1 @@\n-            (buf, offset, len) -> Convert.utf2string(buf, offset, len, Convert.UTF8_STRICT);\n+            (buf, offset, len) -> Convert.utf2string(buf, offset, len, Convert.Validation.STRICT);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ModuleNameReader.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-    private final int utf8validation;\n+    private final Convert.Validation utf8validation;\n@@ -98,1 +98,1 @@\n-        this.utf8validation = reader != null ? reader.utf8validation : Convert.UTF8_LAX;\n+        this.utf8validation = reader != null ? reader.utf8validation : Convert.Validation.NONE;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/PoolReader.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -278,1 +278,1 @@\n-        return names.fromUtf(elems, 0, length, Convert.UTF8_STRICT);\n+        return names.fromUtf(elems, 0, length, Convert.Validation.STRICT);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/ByteBuffer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,17 +56,0 @@\n-    \/**\n-     * Do minimum validation of UTF-8, i.e., just enough to decode something\/anything.\n-     * When this value is used, {@link InvalidUtfException} is never thrown.\n-     *\/\n-    public static final int UTF8_LAX = 0;\n-\n-    \/**\n-     * Do validation of UTF-8 corresponding to pre-1.4, i.e., validate strictly except\n-     * allow longer-than-necessary encodings (e.g., three bytes instead of two).\n-     *\/\n-    public static final int UTF8_PREJDK14 = 1;\n-\n-    \/**\n-     * Do strict validation of UTF-8. At this level, each character has only one valid encoding.\n-     *\/\n-    public static final int UTF8_STRICT = 2;\n-\n@@ -122,1 +105,1 @@\n-     *  Note: there is no point in calling this method with no-op validation {@link #UTF8_LAX}.\n+     *  Note: there is no point in calling this method with {@link Validation#NONE}.\n@@ -126,2 +109,2 @@\n-     *  @param validation Level of validation (e.g., {@link #UTF8_STRICT})\n-     *  @throws InvalidUtfException if {@code validation} is greater than {@link #UTF8_LAX}\n+     *  @param validation Level of validation\n+     *  @throws InvalidUtfException if {@code validation} is not {@link Validation#NONE}\n@@ -130,1 +113,1 @@\n-    public static void utfValidate(byte[] buf, int off, int len, int validation) throws InvalidUtfException {\n+    public static void utfValidate(byte[] buf, int off, int len, Validation validation) throws InvalidUtfException {\n@@ -144,1 +127,1 @@\n-     *  @param validation Level of validation (e.g., {@link #UTF8_STRICT})\n+     *  @param validation Level of validation\n@@ -147,1 +130,1 @@\n-     *  @throws InvalidUtfException if {@code validation} is greater than {@link #UTF8_LAX}\n+     *  @throws InvalidUtfException if {@code validation} is not {@link Validation#NONE}\n@@ -150,1 +133,1 @@\n-    public static int utf2chars(byte[] src, int soff, char[] dst, int doff, int len, int validation)\n+    public static int utf2chars(byte[] src, int soff, char[] dst, int doff, int len, Validation validation)\n@@ -161,1 +144,1 @@\n-                    else if (validation == UTF8_LAX)\n+                    else if (validation.allowAnything())\n@@ -165,1 +148,1 @@\n-                    if (validation >= UTF8_PREJDK14 && (value2 & 0xc0) != 0x80)\n+                    if (!validation.allowAnything() && (value2 & 0xc0) != 0x80)\n@@ -168,1 +151,1 @@\n-                    if (validation >= UTF8_STRICT && value != 0 && (value & ~0x7f) == 0)\n+                    if (!validation.allowLongEncoding() && (value & ~0x7f) == 0 && value != 0)\n@@ -176,1 +159,1 @@\n-                    } else if (validation == UTF8_LAX) {\n+                    } else if (validation.allowAnything()) {\n@@ -181,2 +164,1 @@\n-                    if (validation >= UTF8_PREJDK14\n-                      && ((value2 & 0xc0) != 0x80 || (value3 & 0xc0) != 0x80))\n+                    if (!validation.allowAnything() && ((value2 & 0xc0) != 0x80 || (value3 & 0xc0) != 0x80))\n@@ -185,1 +167,1 @@\n-                    if (validation >= UTF8_STRICT && (value & ~0x7ff) == 0)\n+                    if (!validation.allowLongEncoding() && (value & ~0x7ff) == 0)\n@@ -187,1 +169,1 @@\n-                } else if (validation == UTF8_LAX)\n+                } else if (validation.allowAnything())\n@@ -191,1 +173,1 @@\n-            } else if (validation >= UTF8_PREJDK14 && value == 0)\n+            } else if (!validation.allowSingleByteNul() && value == 0)\n@@ -204,1 +186,1 @@\n-     *  @param validation Level of validation (e.g., {@link #UTF8_STRICT})\n+     *  @param validation Level of validation\n@@ -206,1 +188,1 @@\n-     *  @throws InvalidUtfException if {@code validation} is greater than {@link #UTF8_LAX}\n+     *  @throws InvalidUtfException if {@code validation} is not {@link Validation#NONE}\n@@ -209,1 +191,1 @@\n-    public static char[] utf2chars(byte[] src, int sindex, int len, int validation)\n+    public static char[] utf2chars(byte[] src, int sindex, int len, Validation validation)\n@@ -224,2 +206,2 @@\n-     *  @param validation Level of validation (e.g., {@link #UTF8_STRICT})\n-     *  @throws InvalidUtfException if {@code validation} is greater than {@link #UTF8_LAX}\n+     *  @param validation Level of validation\n+     *  @throws InvalidUtfException if {@code validation} is not {@link Validation#NONE}\n@@ -228,1 +210,1 @@\n-    public static String utf2string(byte[] src, int sindex, int len, int validation)\n+    public static String utf2string(byte[] src, int sindex, int len, Validation validation)\n@@ -422,0 +404,56 @@\n+\n+    \/**\n+     * Modified UTF-8 decoding validation levels.\n+     *\/\n+    public enum Validation {\n+\n+        \/**\n+         * Do zero validation of UTF-8, i.e., always decode something without error.\n+         * When this is used, {@link InvalidUtfException} is never thrown.\n+         *\/\n+        NONE(true, true, true),\n+\n+        \/**\n+         * Do validation in accordance with the pre-JDK 1.4 Java class file format,\n+         * which allows (a) the NUL character {@code &#92;u0000} to be encoded as a single byte\n+         * and (b) longer-than-necessary encodings (e.g., three bytes instead of two).\n+         *\/\n+        PREJDK14(true, true, false),\n+\n+        \/**\n+         * Do strict validation. At this level, each character has only one valid encoding.\n+         *\/\n+        STRICT(false, false, false);\n+\n+        private final boolean allowSingleByteNul;\n+        private final boolean allowLongEncoding;\n+        private final boolean allowAnything;\n+\n+        private Validation(boolean allowSingleByteNul, boolean allowLongEncoding, boolean allowAnything) {\n+            this.allowSingleByteNul = allowSingleByteNul;\n+            this.allowLongEncoding = allowLongEncoding;\n+            this.allowAnything = allowAnything;\n+        }\n+\n+        \/**\n+         * Whether to allow the NUL character {@code &#92;u0000} to be encoded as a single byte.\n+         * Modified UTF-8 specifies that it be encoded in two bytes.\n+         *\/\n+        public boolean allowSingleByteNul() {\n+            return allowSingleByteNul;\n+        }\n+\n+        \/**\n+         * Whether to allow characters to be encoded using more bytes than required.\n+         *\/\n+        public boolean allowLongEncoding() {\n+            return allowLongEncoding;\n+        }\n+\n+        \/**\n+         * Whether to allow anything, including truncated characters and bogus flag bits.\n+         *\/\n+        public boolean allowAnything() {\n+            return allowAnything;\n+        }\n+    }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Convert.java","additions":77,"deletions":39,"binary":false,"changes":116,"status":"modified"},{"patch":"@@ -91,1 +91,1 @@\n-            return table.fromUtf(bs, 0, bs.length, Convert.UTF8_LAX);\n+            return table.fromUtf(bs, 0, bs.length, Convert.Validation.NONE);\n@@ -107,1 +107,1 @@\n-            return table.fromUtf(bs, 0, bs.length, Convert.UTF8_LAX);\n+            return table.fromUtf(bs, 0, bs.length, Convert.Validation.NONE);\n@@ -161,1 +161,1 @@\n-            return table.fromUtf(getByteArray(), getByteOffset() + start, end - start, Convert.UTF8_LAX);\n+            return table.fromUtf(getByteArray(), getByteOffset() + start, end - start, Convert.Validation.NONE);\n@@ -172,1 +172,1 @@\n-            return Convert.utf2string(getByteArray(), getByteOffset(), getByteLength(), Convert.UTF8_LAX);\n+            return Convert.utf2string(getByteArray(), getByteOffset(), getByteLength(), Convert.Validation.NONE);\n@@ -248,1 +248,1 @@\n-            return fromUtf(cs, 0, cs.length, Convert.UTF8_STRICT);\n+            return fromUtf(cs, 0, cs.length, Convert.Validation.STRICT);\n@@ -255,1 +255,1 @@\n-        public abstract Name fromUtf(byte[] cs, int start, int len, int validation)\n+        public abstract Name fromUtf(byte[] cs, int start, int len, Convert.Validation validation)\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Name.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -428,1 +428,1 @@\n-    public Name fromUtf(byte[] cs, int start, int len, int validation) throws InvalidUtfException {\n+    public Name fromUtf(byte[] cs, int start, int len, Convert.Validation validation) throws InvalidUtfException {\n@@ -434,1 +434,1 @@\n-            return table.fromUtf(cs, start, len, Convert.UTF8_LAX);\n+            return table.fromUtf(cs, start, len, Convert.Validation.NONE);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Names.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -122,2 +122,2 @@\n-    public Name fromUtf(byte[] cs, int start, int len, int validation) throws InvalidUtfException {\n-        if (validation > Convert.UTF8_LAX)\n+    public Name fromUtf(byte[] cs, int start, int len, Convert.Validation validation) throws InvalidUtfException {\n+        if (validation != Convert.Validation.NONE)\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/SharedNameTable.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -88,2 +88,2 @@\n-    public Name fromUtf(byte[] cs, int start, int len, int validation) throws InvalidUtfException {\n-        if (validation > Convert.UTF8_LAX)\n+    public Name fromUtf(byte[] cs, int start, int len, Convert.Validation validation) throws InvalidUtfException {\n+        if (validation != Convert.Validation.NONE)\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/UnsharedNameTable.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}