{"files":[{"patch":"@@ -109,0 +109,1 @@\n+        V48(48, 0),   \/\/ JDK 1.4\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassFile.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -660,1 +660,1 @@\n-            sigString = Convert.utf2string(signature, sigp, siglimit - sigp);\n+            sigString = Convert.utf2string(signature, sigp, siglimit - sigp, majorVersion < V48.major);\n@@ -768,1 +768,1 @@\n-            return names.fromUtf(buf, off, len);\n+            return names.fromUtf(buf, off, len, majorVersion < V48.major);\n@@ -1128,1 +1128,1 @@\n-                        Name moduleName = poolReader.peekModuleName(nextChar(), names::fromUtf);\n+                        Name moduleName = poolReader.peekModuleName(nextChar(), ClassReader.this::readName);\n@@ -1224,1 +1224,2 @@\n-                    return names.fromUtf(ClassFile.internalize(arr, offset, length));\n+                    byte[] buf = ClassFile.internalize(arr, offset, length);\n+                    return names.fromUtf(buf, 0, buf.length, majorVersion < V48.major);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -163,3 +163,5 @@\n-                (buf, offset, len) ->\n-                    Convert.utf2string(ClassFile.internalize(buf, offset, len)) :\n-                Convert::utf2string;\n+            (buf, offset, len) -> {\n+                buf = ClassFile.internalize(buf, offset, len);\n+                return Convert.utf2string(buf, 0, buf.length, false);\n+            } :\n+            (buf, offset, len) -> Convert.utf2string(buf, offset, len, false);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ModuleNameReader.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -77,0 +77,1 @@\n+    private final boolean lenientUtf8;\n@@ -93,0 +94,1 @@\n+        this.lenientUtf8 = reader != null && reader.majorVersion < ClassFile.Version.V48.major;\n@@ -226,1 +228,1 @@\n-                return names.fromUtf(poolbuf.elems, offset + 2, len);\n+                return names.fromUtf(poolbuf.elems, offset + 2, len, lenientUtf8);\n@@ -230,1 +232,1 @@\n-                Name name = names.fromUtf(getName(index).map(ClassFile::internalize));\n+                Name name = internalize(getName(index));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/PoolReader.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -278,1 +278,1 @@\n-        return names.fromUtf(elems, 0, length);\n+        return names.fromUtf(elems, 0, length, false);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/ByteBuffer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -105,0 +105,5 @@\n+     *  @param buf        Buffer containing data\n+     *  @param off        Data starting offset\n+     *  @param len        Data length\n+     *  @param lenient    Whether to allow longer-than-necessary encodings\n+     *                    (for obsolete classfile versions &lt; 48)\n@@ -107,2 +112,2 @@\n-    public static void utfValidate(byte[] buf, int off, int len) throws InvalidUtfException {\n-        utf2chars(buf, off, null, 0, len);\n+    public static void utfValidate(byte[] buf, int off, int len, boolean lenient) throws InvalidUtfException {\n+        utf2chars(buf, off, null, 0, len, lenient);\n@@ -121,0 +126,2 @@\n+     *  @param lenient    Whether to allow longer-than-necessary encodings\n+     *                    (for obsolete classfile versions &lt; 48)\n@@ -124,1 +131,2 @@\n-    public static int utf2chars(byte[] src, int soff, char[] dst, int doff, int len) throws InvalidUtfException {\n+    public static int utf2chars(byte[] src, int soff, char[] dst, int doff, int len, boolean lenient)\n+      throws InvalidUtfException {\n@@ -137,1 +145,1 @@\n-                    if (value != 0 && (value & ~0x7f) == 0)\n+                    if (!lenient && value != 0 && (value & ~0x7f) == 0)\n@@ -147,1 +155,1 @@\n-                    if ((value & ~0x7ff) == 0)\n+                    if (!lenient && (value & ~0x7ff) == 0)\n@@ -164,0 +172,2 @@\n+     *  @param lenient    Whether to allow longer-than-necessary encodings\n+     *                    (for obsolete classfile versions &lt; 48)\n@@ -167,1 +177,2 @@\n-    public static char[] utf2chars(byte[] src, int sindex, int len) throws InvalidUtfException {\n+    public static char[] utf2chars(byte[] src, int sindex, int len, boolean lenient)\n+      throws InvalidUtfException {\n@@ -169,1 +180,3 @@\n-        int len1 = utf2chars(src, sindex, dst, 0, len);\n+        int len1 = utf2chars(src, sindex, dst, 0, len, lenient);\n+        if (len1 == len)\n+            return dst;\n@@ -175,9 +188,0 @@\n-    \/** Decode characters encoded in Modified UTF-8 encoding.\n-     *  as an array of characters.\n-     *  @param src        The array holding the bytes.\n-     *  @throws InvalidUtfException if invalid Modified UTF-8 is encountered\n-     *\/\n-    public static char[] utf2chars(byte[] src) throws InvalidUtfException {\n-        return utf2chars(src, 0, src.length);\n-    }\n-\n@@ -188,0 +192,2 @@\n+     *  @param lenient    Whether to allow longer-than-necessary encodings\n+     *                    (for obsolete classfile versions &lt; 48)\n@@ -190,1 +196,2 @@\n-    public static String utf2string(byte[] src, int sindex, int len) throws InvalidUtfException {\n+    public static String utf2string(byte[] src, int sindex, int len, boolean lenient)\n+      throws InvalidUtfException {\n@@ -192,1 +199,1 @@\n-        int len1 = utf2chars(src, sindex, dst, 0, len);\n+        int len1 = utf2chars(src, sindex, dst, 0, len, lenient);\n@@ -196,9 +203,0 @@\n-    \/** Return all bytes of a given array in Utf8 representation\n-     *  as a string.\n-     *  @param src        The array holding the bytes.\n-     *  @throws InvalidUtfException if invalid Modified UTF-8 is encountered\n-     *\/\n-    public static String utf2string(byte[] src) throws InvalidUtfException {\n-        return utf2string(src, 0, src.length);\n-    }\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Convert.java","additions":25,"deletions":27,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -91,1 +91,1 @@\n-            return table.fromUtf(bs, 0, bs.length);\n+            return table.fromUtf(bs, 0, bs.length, false);\n@@ -107,1 +107,1 @@\n-            return table.fromUtf(bs, 0, bs.length);\n+            return table.fromUtf(bs, 0, bs.length, false);\n@@ -161,1 +161,1 @@\n-            return table.fromUtf(getByteArray(), getByteOffset() + start, end - start);\n+            return table.fromUtf(getByteArray(), getByteOffset() + start, end - start, false);\n@@ -172,1 +172,1 @@\n-            return Convert.utf2string(getByteArray(), getByteOffset(), getByteLength());\n+            return Convert.utf2string(getByteArray(), getByteOffset(), getByteLength(), false);\n@@ -248,1 +248,1 @@\n-            return fromUtf(cs, 0, cs.length);\n+            return fromUtf(cs, 0, cs.length, false);\n@@ -255,1 +255,2 @@\n-        public abstract Name fromUtf(byte[] cs, int start, int len) throws InvalidUtfException;\n+        public abstract Name fromUtf(byte[] cs, int start, int len, boolean lenient)\n+            throws InvalidUtfException;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Name.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -427,2 +427,2 @@\n-    public Name fromUtf(byte[] cs, int start, int len) throws InvalidUtfException {\n-        return table.fromUtf(cs, start, len);\n+    public Name fromUtf(byte[] cs, int start, int len, boolean lenient) throws InvalidUtfException {\n+        return table.fromUtf(cs, start, len, lenient);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Names.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -122,2 +122,2 @@\n-    public Name fromUtf(byte[] cs, int start, int len) throws InvalidUtfException {\n-        Convert.utfValidate(cs, start, len);\n+    public Name fromUtf(byte[] cs, int start, int len, boolean lenient) throws InvalidUtfException {\n+        Convert.utfValidate(cs, start, len, lenient);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/SharedNameTable.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -88,2 +88,2 @@\n-    public Name fromUtf(byte[] cs, int start, int len) throws InvalidUtfException {\n-        Convert.utfValidate(cs, start, len);\n+    public Name fromUtf(byte[] cs, int start, int len, boolean lenient) throws InvalidUtfException {\n+        Convert.utfValidate(cs, start, len, lenient);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/UnsharedNameTable.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}