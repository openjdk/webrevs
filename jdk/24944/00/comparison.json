{"files":[{"patch":"@@ -779,1 +779,1 @@\n-void G1CollectedHeap::prepare_for_mutator_after_full_collection() {\n+void G1CollectedHeap::prepare_for_mutator_after_full_collection(size_t allocation_word_size) {\n@@ -784,1 +784,1 @@\n-  resize_heap_if_necessary();\n+  resize_heap_if_necessary(allocation_word_size);\n@@ -834,1 +834,2 @@\n-                                         bool do_maximal_compaction) {\n+                                         bool do_maximal_compaction,\n+                                         size_t allocation_word_size) {\n@@ -846,1 +847,1 @@\n-  collector.complete_collection();\n+  collector.complete_collection(allocation_word_size);\n@@ -858,1 +859,2 @@\n-                     false \/* do_maximal_compaction *\/);\n+                     false \/* do_maximal_compaction *\/,\n+                     size_t(0) \/* allocation_word_size*\/);\n@@ -865,1 +867,2 @@\n-                                    false \/* do_maximal_compaction *\/);\n+                                    false \/* do_maximal_compaction *\/,\n+                                    size_t(0) \/* allocation_word_size *\/);\n@@ -872,1 +875,1 @@\n-void G1CollectedHeap::resize_heap_if_necessary() {\n+void G1CollectedHeap::resize_heap_if_necessary(size_t allocation_word_size) {\n@@ -876,1 +879,1 @@\n-  size_t resize_amount = _heap_sizing_policy->full_collection_resize_amount(should_expand);\n+  size_t resize_amount = _heap_sizing_policy->full_collection_resize_amount(should_expand, allocation_word_size);\n@@ -920,2 +923,3 @@\n-    *gc_succeeded = do_full_collection(maximal_compaction \/* clear_all_soft_refs *\/ ,\n-                                       maximal_compaction \/* do_maximal_compaction *\/);\n+    *gc_succeeded = do_full_collection(maximal_compaction \/* clear_all_soft_refs *\/,\n+                                       maximal_compaction \/* do_maximal_compaction *\/,\n+                                       word_size \/* allocation_word_size *\/);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":14,"deletions":10,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -483,0 +483,2 @@\n+  \/\/ - if allocation_word_size is set, then this allocation size will\n+  \/\/    be accounted for in case shrinking of the heap happens.\n@@ -486,1 +488,2 @@\n-                          bool do_maximal_compaction);\n+                          bool do_maximal_compaction,\n+                          size_t allocation_word_size);\n@@ -504,1 +507,1 @@\n-  void prepare_for_mutator_after_full_collection();\n+  void prepare_for_mutator_after_full_collection(size_t allocation_word_size);\n@@ -563,1 +566,1 @@\n-  void resize_heap_if_necessary();\n+  void resize_heap_if_necessary(size_t allocation_word_size);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1464,1 +1464,1 @@\n-    _g1h->resize_heap_if_necessary();\n+    _g1h->resize_heap_if_necessary(size_t(0) \/* allocation_word_size *\/);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -231,1 +231,1 @@\n-void G1FullCollector::complete_collection() {\n+void G1FullCollector::complete_collection(size_t allocation_word_size) {\n@@ -245,1 +245,1 @@\n-  _heap->prepare_for_mutator_after_full_collection();\n+  _heap->prepare_for_mutator_after_full_collection(allocation_word_size);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -110,1 +110,1 @@\n-  void complete_collection();\n+  void complete_collection(size_t allocation_word_size);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -223,1 +223,1 @@\n-size_t G1HeapSizingPolicy::full_collection_resize_amount(bool& expand) {\n+size_t G1HeapSizingPolicy::full_collection_resize_amount(bool& expand, size_t allocation_word_size) {\n@@ -227,8 +227,14 @@\n-  const size_t used_after_gc = capacity_after_gc -\n-                               _g1h->unused_committed_regions_in_bytes() -\n-                               \/\/ Discount space used by current Eden to establish a\n-                               \/\/ situation during Remark similar to at the end of full\n-                               \/\/ GC where eden is empty. During Remark there can be an\n-                               \/\/ arbitrary number of eden regions which would skew the\n-                               \/\/ results.\n-                               _g1h->eden_regions_count() * G1HeapRegion::GrainBytes;\n+  size_t used_after_gc = capacity_after_gc -\n+                         _g1h->unused_committed_regions_in_bytes() -\n+                         \/\/ Discount space used by current Eden to establish a\n+                         \/\/ situation during Remark similar to at the end of full\n+                         \/\/ GC where eden is empty. During Remark there can be an\n+                         \/\/ arbitrary number of eden regions which would skew the\n+                         \/\/ results.\n+                         _g1h->eden_regions_count() * G1HeapRegion::GrainBytes;\n+  \/\/ If the full collection was triggered by an allocation failure, we should account\n+  \/\/ for the bytes required for this allocation under used_after_gc. This prevents\n+  \/\/ unnecessary shrinking that would be followed by an expand call to satisfy the\n+  \/\/ allocation.\n+  size_t allocation_bytes = allocation_word_size * HeapWordSize;\n+  used_after_gc += allocation_bytes;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapSizingPolicy.cpp","additions":15,"deletions":9,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,1 +61,1 @@\n-  size_t full_collection_resize_amount(bool& expand);\n+  size_t full_collection_resize_amount(bool& expand, size_t allocation_word_size);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapSizingPolicy.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -54,1 +54,2 @@\n-                                          false \/* do_maximal_compaction *\/);\n+                                          false \/* do_maximal_compaction *\/,\n+                                          size_t(0) \/* allocation_word_size *\/);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1VMOperations.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}