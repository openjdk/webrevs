{"files":[{"patch":"@@ -298,0 +298,3 @@\n+\n+  const int concat_argument_upper_bound = 100;\n+  int arguments_appended = 0;\n@@ -306,0 +309,1 @@\n+      arguments_appended += other->num_arguments();\n@@ -308,0 +312,6 @@\n+      arguments_appended++;\n+    }\n+    \/\/ Check if this concatenation would result in an excessive number\n+    \/\/ of arguments and bail out in that case.\n+    if (concat_argument_upper_bound < arguments_appended) {\n+      return nullptr;\n@@ -683,1 +693,1 @@\n-            if (merged->validate_control_flow() && merged->validate_mem_flow()) {\n+            if (merged != nullptr && merged->validate_control_flow() && merged->validate_mem_flow()) {\n","filename":"src\/hotspot\/share\/opto\/stringopts.cpp","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8357105\n+ * @summary Test that repeated stacked string concatenations do not\n+ *          consume too many compilation resources.\n+ * @requires vm.compiler2.enabled\n+ * @run main\/othervm -XX:-OptoScheduling compiler.stringopts.TestStackedConcatsMany\n+ * @run main\/othervm -XX:-TieredCompilation -Xcomp -XX:-OptoScheduling\n+ *                   -XX:CompileOnly=compiler.stringopts.TestStackedConcatsMany::f\n+ *                   compiler.stringopts.TestStackedConcatsMany\n+ *\/\n+\n+package compiler.stringopts;\n+\n+public class TestStackedConcatsMany {\n+\n+    public static void main (String... args) {\n+        new StringBuilder(); \/\/ Trigger loading of the StringBuilder class.\n+        String s = f(); \/\/ warmup call\n+        s = f();\n+        String z = \"xy\";\n+        for (int i = 0; i < 24; i++) {\n+            z = z + z;\n+        }\n+        if (!(s.equals(z))) {\n+            throw new RuntimeException(\"wrong result.\");\n+        }\n+    }\n+\n+    static String f() {\n+        String s = \"xy\";\n+        s = new StringBuilder().append(s).append(s).toString();\n+        s = new StringBuilder().append(s).append(s).toString();\n+\n+        s = new StringBuilder().append(s).append(s).toString();\n+        s = new StringBuilder().append(s).append(s).toString();\n+\n+        s = new StringBuilder().append(s).append(s).toString();\n+        s = new StringBuilder().append(s).append(s).toString();\n+\n+        s = new StringBuilder().append(s).append(s).toString();\n+        s = new StringBuilder().append(s).append(s).toString();\n+\n+        s = new StringBuilder().append(s).append(s).toString();\n+        s = new StringBuilder().append(s).append(s).toString();\n+\n+        s = new StringBuilder().append(s).append(s).toString();\n+        s = new StringBuilder().append(s).append(s).toString();\n+\n+        s = new StringBuilder().append(s).append(s).toString();\n+        s = new StringBuilder().append(s).append(s).toString();\n+\n+        s = new StringBuilder().append(s).append(s).toString();\n+        s = new StringBuilder().append(s).append(s).toString();\n+\n+        s = new StringBuilder().append(s).append(s).toString();\n+        s = new StringBuilder().append(s).append(s).toString();\n+\n+        s = new StringBuilder().append(s).append(s).toString();\n+        s = new StringBuilder().append(s).append(s).toString();\n+\n+        s = new StringBuilder().append(s).append(s).toString();\n+        s = new StringBuilder().append(s).append(s).toString();\n+\n+        s = new StringBuilder().append(s).append(s).toString();\n+        s = new StringBuilder().append(s).append(s).toString();\n+\n+        return s;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/stringopts\/TestStackedConcatsMany.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"}]}