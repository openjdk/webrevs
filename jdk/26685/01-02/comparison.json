{"files":[{"patch":"@@ -56,0 +56,2 @@\n+  static constexpr uint STACKED_CONCAT_UPPER_BOUND = 256; \/\/ argument limit for a merged concat.\n+\n@@ -299,2 +301,1 @@\n-  const int concat_argument_upper_bound = 100;\n-  int arguments_appended = 0;\n+  uint arguments_appended = 0;\n@@ -314,3 +315,4 @@\n-    \/\/ Check if this concatenation would result in an excessive number\n-    \/\/ of arguments and bail out in that case.\n-    if (concat_argument_upper_bound < arguments_appended) {\n+    \/\/ Check if this concatenation would result in an excessive number of arguments\n+    \/\/ -- leading to high memory use, compilation time, and later, a large number of IR nodes\n+    \/\/ -- and bail out in that case.\n+    if (STACKED_CONCAT_UPPER_BOUND < arguments_appended) {\n","filename":"src\/hotspot\/share\/opto\/stringopts.cpp","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @library \/test\/lib \/\n@@ -36,0 +37,2 @@\n+\/\/ The test uses -XX:-OptoScheduling to avoid the assert \"too many D-U pinch points\" on aarch64.\n+\n@@ -38,0 +41,2 @@\n+import jdk.test.lib.Asserts;\n+\n@@ -42,2 +47,1 @@\n-        String s = f(); \/\/ warmup call\n-        s = f();\n+        String s = f();\n@@ -48,3 +52,1 @@\n-        if (!(s.equals(z))) {\n-            throw new RuntimeException(\"wrong result.\");\n-        }\n+        Asserts.assertEQ(s, z);\n","filename":"test\/hotspot\/jtreg\/compiler\/stringopts\/TestStackedConcatsMany.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"}]}