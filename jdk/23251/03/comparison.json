{"files":[{"patch":"@@ -44,0 +44,1 @@\n+import java.util.stream.Stream;\n@@ -618,0 +619,3 @@\n+     * @apiNote Consider using {@link #availableIDs(int)} which returns\n+     * a stream of the available time zone IDs according to the given offset.\n+     *\n@@ -623,0 +627,1 @@\n+     * @see #availableIDs(int)\n@@ -629,2 +634,6 @@\n-     * Gets all the available IDs supported.\n-     * @return an array of IDs.\n+     * {@return an array of the available IDs supported}\n+     *\n+     * @apiNote Consider using {@link #availableIDs()} which returns\n+     * a stream of the available time zone IDs.\n+     *\n+     * @see #availableIDs()\n@@ -636,0 +645,31 @@\n+    \/**\n+     * Gets the available IDs according to the given time zone offset in milliseconds.\n+     *\n+     * @implNote Unlike {@link #getAvailableIDs(int)}, this method does\n+     * not create a copy of the {@code TimeZone} IDs array.\n+     *\n+     * @param rawOffset the given time zone GMT offset in milliseconds.\n+     * @return a stream of IDs, where the time zone for that ID has\n+     * the specified GMT offset. For example, \"America\/Phoenix\" and \"America\/Denver\"\n+     * both have GMT-07:00, but differ in daylight saving behavior.\n+     * @see #getRawOffset()\n+     * @see #getAvailableIDs(int)\n+     * @since 25\n+     *\/\n+    public static Stream<String> availableIDs(int rawOffset) {\n+        return ZoneInfo.availableIDs(rawOffset);\n+    }\n+\n+    \/**\n+     * {@return a stream of the available IDs supported}\n+     *\n+     * @implNote Unlike {@link #getAvailableIDs()}, this method does\n+     * not create a copy of the {@code TimeZone} IDs array.\n+     *\n+     * @since 25\n+     * @see #getAvailableIDs()\n+     *\/\n+    public static Stream<String> availableIDs() {\n+        return ZoneInfo.availableIDs();\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/TimeZone.java","additions":42,"deletions":2,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+import java.util.stream.Stream;\n@@ -565,0 +566,21 @@\n+    \/**\n+     * Gets all available IDs supported in the Java run-time.\n+     *\n+     * @return a stream of time zone IDs.\n+     *\/\n+    public static Stream<String> availableIDs() {\n+        return ZoneInfoFile.zoneIds();\n+    }\n+\n+    \/**\n+     * Gets all available IDs that have the same value as the\n+     * specified raw GMT offset.\n+     *\n+     * @param rawOffset the GMT offset in milliseconds. This\n+     * value should not include any daylight saving time.\n+     * @return a stream of time zone IDs.\n+     *\/\n+    public static Stream<String> availableIDs(int rawOffset) {\n+        return ZoneInfoFile.zoneIds(rawOffset);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/util\/calendar\/ZoneInfo.java","additions":23,"deletions":1,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,0 +48,1 @@\n+import java.util.stream.Stream;\n@@ -62,1 +63,1 @@\n-     * @return a set of time zone IDs.\n+     * @return an array of time zone IDs.\n@@ -95,1 +96,1 @@\n-        String[] list = ids.toArray(new String[ids.size()]);\n+        String[] list = ids.toArray(new String[0]);\n@@ -100,0 +101,24 @@\n+    \/**\n+     * Gets all available IDs supported in the Java run-time.\n+     *\n+     * @return a stream of time zone IDs.\n+     *\/\n+    public static Stream<String> zoneIds() {\n+        return Stream.concat(Arrays.stream(regions),\n+                ZoneId.SHORT_IDS.keySet().stream());\n+    }\n+\n+    \/**\n+     * Gets all available IDs that have the same value as the\n+     * specified raw GMT offset.\n+     *\n+     * @param rawOffset  the GMT offset in milliseconds. This\n+     *                   value should not include any daylight saving time.\n+     * @return a stream of time zone IDs.\n+     *\/\n+    public static Stream<String> zoneIds(int rawOffset) {\n+        return zoneIds()\n+                .filter(id -> getZoneInfo(id).getRawOffset() == rawOffset)\n+                .sorted(); \/\/ Sort the IDs, see getZoneIds(int)\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/util\/calendar\/ZoneInfoFile.java","additions":28,"deletions":3,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-            Arrays.stream(ZoneInfoFile.getZoneIds())\n+                ZoneInfoFile.zoneIds()\n","filename":"src\/java.base\/share\/classes\/sun\/util\/cldr\/CLDRTimeZoneNameProviderImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- *      8190748 8216969 8174269 8347841\n+ *      8190748 8216969 8174269 8347841 8347955\n@@ -94,1 +94,1 @@\n-        String[] ids = Arrays.stream(TimeZone.getAvailableIDs())\n+        String[] ids = TimeZone.availableIDs()\n","filename":"test\/jdk\/java\/text\/Format\/DateFormat\/DateFormatTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * 4973919 4980088 4965624 5013094 5006864 8152077 8347841\n+ * 4973919 4980088 4965624 5013094 5006864 8152077 8347841 8347955\n@@ -46,1 +46,0 @@\n-import java.util.Arrays;\n@@ -81,1 +80,1 @@\n-        String[] ids = Arrays.stream(TimeZone.getAvailableIDs())\n+        String[] ids = TimeZone.availableIDs()\n","filename":"test\/jdk\/java\/util\/Calendar\/CalendarRegression.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 4052440 8003267 8062588 8210406 8174269 8327434 8347841\n+ * @bug 4052440 8003267 8062588 8210406 8174269 8327434 8347841 8347955\n@@ -77,1 +77,1 @@\n-        String[] ids = Arrays.stream(TimeZone.getAvailableIDs())\n+        String[] ids = TimeZone.availableIDs()\n","filename":"test\/jdk\/java\/util\/PluggableLocale\/TimeZoneNameProviderTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8347955\n+ * @summary Ensure underlying element equality of available tz ID methods\n+ * @run junit AvailableIDsTest\n+ *\/\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.TimeZone;\n+\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+\n+public class AvailableIDsTest {\n+\n+    \/\/ Validate the equality of the array and stream of available IDs\n+    @Test\n+    public void streamEqualsArrayTest() {\n+        String[] tzs = TimeZone.getAvailableIDs();\n+        assertArrayEquals(tzs, TimeZone.availableIDs().toArray(String[]::new),\n+                \"availableIDs() and getAvailableIDs() do not have the same elements\");\n+    }\n+\n+    \/\/ Validate the equality of the array and stream of available IDs\n+    \/\/ when passed an offset. Tests various offsets.\n+    @ParameterizedTest\n+    @ValueSource(ints = {21600000, 25200000, 28800000}) \/\/ 6:00, 7:00, 8:00\n+    public void streamEqualsArrayWithOffsetTest(int offset) {\n+        String[] tzs = TimeZone.getAvailableIDs(offset);\n+        assertArrayEquals(tzs, TimeZone.availableIDs(offset).toArray(String[]::new),\n+                \"availableIDs(int) and getAvailableIDs(int) do not have the same elements\");\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/TimeZone\/AvailableIDsTest.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 5097350 8347841\n+ * @bug 5097350 8347841 8347955\n@@ -36,1 +36,1 @@\n-        String[] tzids = Arrays.stream(TimeZone.getAvailableIDs())\n+        String[] tzids = TimeZone.availableIDs()\n","filename":"test\/jdk\/java\/util\/TimeZone\/Bug5097350.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- *      8077685 8151876 8166875 8169191 8170316 8176044 8174269 8347841\n+ *      8077685 8151876 8166875 8169191 8170316 8176044 8174269 8347841 8347955\n@@ -49,1 +49,1 @@\n-    static String[] timezones = Arrays.stream(TimeZone.getAvailableIDs())\n+    static String[] timezones = TimeZone.availableIDs()\n","filename":"test\/jdk\/java\/util\/TimeZone\/Bug6329116.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 6772689 8347841\n+ * @bug 6772689 8347841 8347955\n@@ -32,1 +32,0 @@\n-import java.util.Arrays;\n@@ -49,1 +48,1 @@\n-        String[] tzids = Arrays.stream(TimeZone.getAvailableIDs())\n+        String[] tzids = TimeZone.availableIDs()\n","filename":"test\/jdk\/java\/util\/TimeZone\/Bug6772689.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/util\/TimeZone\/CLDRDisplayNamesTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 6936350 8347841\n+ * @bug 6936350 8347841 8347955\n@@ -38,1 +38,1 @@\n-    private static final String[] ZONES = Arrays.stream(TimeZone.getAvailableIDs())\n+    private static final String[] ZONES = TimeZone.availableIDs()\n","filename":"test\/jdk\/java\/util\/TimeZone\/DaylightTimeTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 4509255 5055567 6176318 7090844 8347841\n+ * @bug 4509255 5055567 6176318 7090844 8347841 8347955\n@@ -44,1 +44,1 @@\n-        String[] tzs = Arrays.stream(TimeZone.getAvailableIDs())\n+        String[] tzs = TimeZone.availableIDs()\n@@ -47,1 +47,1 @@\n-        String[] tzs2 = Arrays.stream(TimeZone.getAvailableIDs())\n+        String[] tzs2 = TimeZone.availableIDs()\n@@ -92,1 +92,1 @@\n-            tzs = Arrays.stream(TimeZone.getAvailableIDs(offset))\n+            tzs = TimeZone.availableIDs(offset)\n@@ -95,1 +95,1 @@\n-            tzs2 = Arrays.stream(TimeZone.getAvailableIDs(offset))\n+            tzs2 = TimeZone.availableIDs(offset)\n","filename":"test\/jdk\/java\/util\/TimeZone\/IDTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 6851214 8347841\n+ * @bug 6851214 8347841 8347955\n@@ -38,1 +38,1 @@\n-    String[] TimeZoneIds = Arrays.stream(TimeZone.getAvailableIDs())\n+    String[] TimeZoneIds = TimeZone.availableIDs()\n","filename":"test\/jdk\/java\/util\/TimeZone\/ListTimeZones.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 4640234 4946057 4938151 4873691 5023181 8347841\n+ * @bug 4640234 4946057 4938151 4873691 5023181 8347841 8347955\n@@ -46,1 +46,0 @@\n-import java.util.Arrays;\n@@ -89,1 +88,1 @@\n-            String[] timezones = Arrays.stream(TimeZone.getAvailableIDs())\n+            String[] timezones = TimeZone.availableIDs()\n","filename":"test\/jdk\/sun\/util\/resources\/TimeZone\/Bug4640234.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"}]}