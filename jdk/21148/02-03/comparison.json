{"files":[{"patch":"@@ -687,1 +687,1 @@\n-  ciMethod* root_m = resolve_invoke(caller, actual_recv, check_access, true \/* allow_abstract *\/);\n+  ciMethod* root_m = resolve_invoke_helper(caller, actual_recv, check_access, true \/* allow_abstract *\/, thread);\n@@ -796,1 +796,1 @@\n-\/\/ ciMethod::resolve_invoke\n+\/\/ ciMethod::resolve_invoke_helper\n@@ -800,1 +800,1 @@\n-ciMethod* ciMethod::resolve_invoke(ciKlass* caller, ciKlass* exact_receiver, bool check_access, bool allow_abstract) {\n+ciMethod* ciMethod::resolve_invoke_helper(ciKlass* caller, ciKlass* exact_receiver, bool check_access, bool allow_abstract, CompilerThread* thread) {\n@@ -833,1 +833,1 @@\n-    result = CURRENT_ENV->get_method(m);\n+    result = CURRENT_THREAD_ENV->get_method(m);\n@@ -843,0 +843,10 @@\n+\/\/ ------------------------------------------------------------------\n+\/\/ ciMethod::resolve_invoke\n+\/\/\n+\/\/ Given a known receiver klass, find the target for the call.\n+\/\/ Return null if the call has no target or the target is abstract.\n+ciMethod* ciMethod::resolve_invoke(ciKlass* caller, ciKlass* exact_receiver, bool check_access, bool allow_abstract) {\n+  VM_ENTRY_MARK;\n+  return resolve_invoke_helper(caller, exact_receiver, check_access, allow_abstract, thread);\n+}\n+\n","filename":"src\/hotspot\/share\/ci\/ciMethod.cpp","additions":14,"deletions":4,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -301,0 +301,1 @@\n+  ciMethod* resolve_invoke_helper(ciKlass* caller, ciKlass* exact_receiver, bool check_access, bool allow_abstract, CompilerThread* thread);\n","filename":"src\/hotspot\/share\/ci\/ciMethod.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}