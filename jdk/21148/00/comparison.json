{"files":[{"patch":"@@ -2124,1 +2124,1 @@\n-    assert(!target->can_be_statically_bound() || target->equals(cha_monomorphic_target), \"\");\n+    assert(!target->can_be_statically_bound() || target->equals_ignore_version(cha_monomorphic_target), \"\");\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -784,0 +784,1 @@\n+#ifdef ASSERT\n@@ -788,2 +789,7 @@\n-\/\/ into account.\n-bool ciMethod::equals(const ciMethod* m) const {\n+\/\/ into account.  Does not support deleted methods.\n+\/\/\n+\/\/ Usage note: this is not a general-purpose API, but is only used for a C1\n+\/\/ assert comparing two non-private methods, which means they cannot be\n+\/\/ deleted.  To make this a general-purpose API, the compilers would need to\n+\/\/ deal gracefully with added\/deleted methods.\n+bool ciMethod::equals_ignore_version(const ciMethod* m) const {\n@@ -794,0 +800,2 @@\n+  guarantee(!m1->is_private() && !m1->is_deleted(), \"see usage note\");\n+  guarantee(!m2->is_private() && !m2->is_deleted(), \"see usage note\");\n@@ -796,0 +804,4 @@\n+  guarantee(m1 != nullptr, \"get_new_method saw deleted method?\");\n+  guarantee(m2 != nullptr, \"get_new_method saw deleted method?\");\n+  guarantee((m1 == m2) == (m1->name() == m2->name() && m1->signature() == m2->signature()),\n+         \"compare invariants failed\");\n@@ -798,0 +810,1 @@\n+#endif\n","filename":"src\/hotspot\/share\/ci\/ciMethod.cpp","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -369,1 +369,3 @@\n-  bool equals(const ciMethod* m) const;\n+#ifdef ASSERT\n+  bool equals_ignore_version(const ciMethod* m) const;\n+#endif\n","filename":"src\/hotspot\/share\/ci\/ciMethod.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}