{"files":[{"patch":"@@ -581,1 +581,0 @@\n-, _bailout_msg(nullptr)\n@@ -610,1 +609,3 @@\n-    _env->record_method_not_compilable(bailout_msg());\n+    if (strcmp(bailout_msg(), ciEnv::old_method_reason()) != 0) {\n+      _env->record_method_not_compilable(bailout_msg());\n+    }\n@@ -652,1 +653,1 @@\n-    _bailout_msg = msg;\n+    _env->record_failure(msg);\n","filename":"src\/hotspot\/share\/c1\/c1_Compilation.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -88,1 +88,0 @@\n-  const char*        _bailout_msg;\n@@ -216,2 +215,2 @@\n-  bool bailed_out() const                        { return _bailout_msg != nullptr; }\n-  const char* bailout_msg() const                { return _bailout_msg; }\n+  bool bailed_out() const                        { return _env->failing(); }\n+  const char* bailout_msg() const                { return _env->failure_reason(); }\n","filename":"src\/hotspot\/share\/c1\/c1_Compilation.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2066,0 +2066,2 @@\n+      } else {\n+        CHECK_BAILOUT();\n@@ -2124,1 +2126,1 @@\n-    assert(!target->can_be_statically_bound() || target->equals(cha_monomorphic_target), \"\");\n+    assert(!target->can_be_statically_bound() || target == cha_monomorphic_target, \"\");\n@@ -2135,0 +2137,2 @@\n+  } else {\n+    CHECK_BAILOUT();\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1207,0 +1207,7 @@\n+    if (_failure_reason.get() == reason) {\n+      \/\/ Already set to same storage, so we cannot free the\n+      \/\/ memory with clear() below.  This is expected for C1,\n+      \/\/ which uses the ciEnv to store the failure reason.\n+      return;\n+    }\n+\n","filename":"src\/hotspot\/share\/ci\/ciEnv.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -322,0 +322,2 @@\n+  static const char* old_method_reason() { return \"method is old\"; }\n+\n","filename":"src\/hotspot\/share\/ci\/ciEnv.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -745,0 +745,7 @@\n+\n+  \/\/ Redefinition support.\n+  if (this->is_old() || root_m->is_old() || target->is_old()) {\n+    CURRENT_THREAD_ENV->record_failure(ciEnv::old_method_reason());\n+    return nullptr;\n+  }\n+\n@@ -784,16 +791,0 @@\n-\/\/ ------------------------------------------------------------------\n-\/\/ ciMethod::equals\n-\/\/\n-\/\/ Returns true if the methods are the same, taking redefined methods\n-\/\/ into account.\n-bool ciMethod::equals(const ciMethod* m) const {\n-  if (this == m) return true;\n-  VM_ENTRY_MARK;\n-  Method* m1 = this->get_Method();\n-  Method* m2 = m->get_Method();\n-  if (m1->is_old()) m1 = m1->get_new_method();\n-  if (m2->is_old()) m2 = m2->get_new_method();\n-  return m1 == m2;\n-}\n-\n-\n@@ -838,0 +829,6 @@\n+    \/\/ Redefinition support.\n+    if (this->is_old() || m->is_old()) {\n+      CURRENT_THREAD_ENV->record_failure(ciEnv::old_method_reason());\n+      return nullptr;\n+    }\n+\n@@ -1498,0 +1495,7 @@\n+\/\/ ciMethod::is_old\n+\/\/\n+\/\/ Return true for redefined methods\n+bool ciMethod::is_old() const {\n+  ASSERT_IN_VM;\n+  return get_Method()->is_old();\n+}\n","filename":"src\/hotspot\/share\/ci\/ciMethod.cpp","additions":20,"deletions":16,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -363,0 +363,1 @@\n+  bool is_old() const;\n@@ -368,2 +369,0 @@\n-  bool equals(const ciMethod* m) const;\n-\n","filename":"src\/hotspot\/share\/ci\/ciMethod.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -570,1 +570,1 @@\n-    assert(false, \"no progress\");\n+    assert(C->failing_internal(), \"no progress\");\n@@ -937,0 +937,1 @@\n+    if (kit.failing()) return nullptr;\n@@ -941,0 +942,1 @@\n+    if (kit.failing()) return nullptr;\n@@ -1014,0 +1016,3 @@\n+\n+  if (C->failing()) return nullptr;\n+\n@@ -1145,0 +1150,1 @@\n+          if (C->failing()) return nullptr;\n","filename":"src\/hotspot\/share\/opto\/callGenerator.cpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1203,0 +1203,1 @@\n+    if (phase->C->failing()) return nullptr;\n","filename":"src\/hotspot\/share\/opto\/callnode.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -799,0 +799,6 @@\n+      \/\/ Some failure reasons should not prevent retry\n+#ifdef ASSERT\n+      if (failure_is_artificial()) return;\n+#endif\n+      if (strcmp(failure_reason(), ciEnv::old_method_reason()) == 0) return;\n+      \/\/ Everything else marks the root method as not-compilable\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -149,0 +149,1 @@\n+        if (failing()) return nullptr;\n@@ -238,0 +239,1 @@\n+            if (failing()) return nullptr;\n@@ -276,1 +278,1 @@\n-            }\n+            } else if (failing()) return nullptr;\n@@ -315,0 +317,2 @@\n+    if (failing()) return nullptr;\n+\n@@ -340,2 +344,3 @@\n-        if (cha_monomorphic_target != nullptr &&\n-            cha_monomorphic_target->holder() != env()->Object_klass()) { \/\/ subtype check against Object is useless\n+        if (cha_monomorphic_target == nullptr) {\n+          if (failing()) return nullptr;\n+        } else if (cha_monomorphic_target->holder() != env()->Object_klass()) { \/\/ subtype check against Object is useless\n@@ -348,0 +353,2 @@\n+          if (failing()) return nullptr;\n+\n@@ -595,0 +602,1 @@\n+    if (failing()) return;\n@@ -643,0 +651,2 @@\n+  if (failing()) return;\n+\n@@ -689,0 +699,1 @@\n+    if (failing()) return;\n@@ -1119,0 +1130,2 @@\n+  } else if (failing()) {\n+    return nullptr;\n@@ -1188,0 +1201,2 @@\n+  if (failing()) return nullptr;\n+\n@@ -1196,1 +1211,1 @@\n-    }\n+    } else if (failing()) return nullptr;\n","filename":"src\/hotspot\/share\/opto\/doCall.cpp","additions":19,"deletions":4,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -1030,0 +1030,1 @@\n+      if (failing()) return;\n","filename":"src\/hotspot\/share\/opto\/parse1.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1048,0 +1048,1 @@\n+      if (C->failing()) return;\n","filename":"src\/hotspot\/share\/opto\/phaseX.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}