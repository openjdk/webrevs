{"files":[{"patch":"@@ -685,3 +685,1 @@\n-  VM_ENTRY_MARK;\n-\n-  ciMethod* root_m = resolve_invoke_helper(caller, actual_recv, check_access, true \/* allow_abstract *\/, thread);\n+  ciMethod* root_m = resolve_invoke(caller, actual_recv, check_access, true \/* allow_abstract *\/);\n@@ -693,5 +691,0 @@\n-  \/\/ Redefinition support.\n-  if (this->is_old() || root_m->is_old()) {\n-    return nullptr;\n-  }\n-\n@@ -723,0 +716,2 @@\n+  VM_ENTRY_MARK;\n+\n@@ -796,1 +791,1 @@\n-\/\/ ciMethod::resolve_invoke_helper\n+\/\/ ciMethod::resolve_invoke\n@@ -800,1 +795,1 @@\n-ciMethod* ciMethod::resolve_invoke_helper(ciKlass* caller, ciKlass* exact_receiver, bool check_access, bool allow_abstract, CompilerThread* thread) {\n+ciMethod* ciMethod::resolve_invoke(ciKlass* caller, ciKlass* exact_receiver, bool check_access, bool allow_abstract) {\n@@ -802,1 +797,1 @@\n-  ASSERT_IN_VM;\n+  VM_ENTRY_MARK;\n@@ -833,0 +828,5 @@\n+    \/\/ Redefinition support.\n+    if (this->is_old() || m->is_old()) {\n+      return nullptr;\n+    }\n+\n@@ -840,2 +840,0 @@\n-  return result;\n-}\n@@ -843,8 +841,1 @@\n-\/\/ ------------------------------------------------------------------\n-\/\/ ciMethod::resolve_invoke\n-\/\/\n-\/\/ Given a known receiver klass, find the target for the call.\n-\/\/ Return null if the call has no target or the target is abstract.\n-ciMethod* ciMethod::resolve_invoke(ciKlass* caller, ciKlass* exact_receiver, bool check_access, bool allow_abstract) {\n-  VM_ENTRY_MARK;\n-  return resolve_invoke_helper(caller, exact_receiver, check_access, allow_abstract, thread);\n+  return result;\n","filename":"src\/hotspot\/share\/ci\/ciMethod.cpp","additions":12,"deletions":21,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -301,1 +301,0 @@\n-  ciMethod* resolve_invoke_helper(ciKlass* caller, ciKlass* exact_receiver, bool check_access, bool allow_abstract, CompilerThread* thread);\n","filename":"src\/hotspot\/share\/ci\/ciMethod.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}