{"files":[{"patch":"@@ -2124,1 +2124,1 @@\n-    assert(!target->can_be_statically_bound() || target->equals_ignore_version(cha_monomorphic_target), \"\");\n+    assert(!target->can_be_statically_bound() || target == cha_monomorphic_target, \"\");\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -691,0 +691,5 @@\n+  \/\/ Redefinition support.\n+  if (this->get_Method()->is_old() || root_m->get_Method()->is_old()) {\n+    return nullptr;\n+  }\n+\n@@ -745,0 +750,6 @@\n+\n+  \/\/ Redefinition support.\n+  if (this->get_Method()->is_old() || root_m->get_Method()->is_old() || target->is_old()) {\n+    return nullptr;\n+  }\n+\n@@ -784,29 +795,0 @@\n-#ifdef ASSERT\n-\/\/ ------------------------------------------------------------------\n-\/\/ ciMethod::equals\n-\/\/\n-\/\/ Returns true if the methods are the same, taking redefined methods\n-\/\/ into account.  Does not support deleted methods.\n-\/\/\n-\/\/ Usage note: this is not a general-purpose API, but is only used for a C1\n-\/\/ assert comparing two non-private methods, which means they cannot be\n-\/\/ deleted.  To make this a general-purpose API, the compilers would need to\n-\/\/ deal gracefully with added\/deleted methods.\n-bool ciMethod::equals_ignore_version(const ciMethod* m) const {\n-  if (this == m) return true;\n-  VM_ENTRY_MARK;\n-  Method* m1 = this->get_Method();\n-  Method* m2 = m->get_Method();\n-  guarantee(!m1->is_private() && !m1->is_deleted(), \"see usage note\");\n-  guarantee(!m2->is_private() && !m2->is_deleted(), \"see usage note\");\n-  if (m1->is_old()) m1 = m1->get_new_method();\n-  if (m2->is_old()) m2 = m2->get_new_method();\n-  guarantee(m1 != nullptr, \"get_new_method saw deleted method?\");\n-  guarantee(m2 != nullptr, \"get_new_method saw deleted method?\");\n-  guarantee((m1 == m2) == (m1->name() == m2->name() && m1->signature() == m2->signature()),\n-         \"compare invariants failed\");\n-  return m1 == m2;\n-}\n-#endif\n-\n-\n","filename":"src\/hotspot\/share\/ci\/ciMethod.cpp","additions":11,"deletions":29,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -369,4 +369,0 @@\n-#ifdef ASSERT\n-  bool equals_ignore_version(const ciMethod* m) const;\n-#endif\n-\n","filename":"src\/hotspot\/share\/ci\/ciMethod.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"}]}