{"files":[{"patch":"@@ -581,1 +581,0 @@\n-, _bailout_msg(nullptr)\n@@ -610,1 +609,3 @@\n-    _env->record_method_not_compilable(bailout_msg());\n+    if (strcmp(bailout_msg(), ciEnv::old_method_reason()) != 0) {\n+      _env->record_method_not_compilable(bailout_msg());\n+    }\n@@ -652,1 +653,1 @@\n-    _bailout_msg = msg;\n+    _env->record_failure(msg);\n","filename":"src\/hotspot\/share\/c1\/c1_Compilation.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -88,1 +88,0 @@\n-  const char*        _bailout_msg;\n@@ -216,2 +215,2 @@\n-  bool bailed_out() const                        { return _bailout_msg != nullptr; }\n-  const char* bailout_msg() const                { return _bailout_msg; }\n+  bool bailed_out() const                        { return _env->failing(); }\n+  const char* bailout_msg() const                { return _env->failure_reason(); }\n","filename":"src\/hotspot\/share\/c1\/c1_Compilation.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2124,1 +2124,1 @@\n-    assert(!target->can_be_statically_bound() || target->equals(cha_monomorphic_target), \"\");\n+    assert(!target->can_be_statically_bound() || target == cha_monomorphic_target, \"\");\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -322,0 +322,2 @@\n+  static const char* old_method_reason() { return \"method is old\"; }\n+\n","filename":"src\/hotspot\/share\/ci\/ciEnv.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -745,0 +745,7 @@\n+\n+  \/\/ Redefinition support.\n+  if (this->is_old() || root_m->is_old() || target->is_old()) {\n+    CURRENT_THREAD_ENV->record_failure(ciEnv::old_method_reason());\n+    return nullptr;\n+  }\n+\n@@ -784,16 +791,0 @@\n-\/\/ ------------------------------------------------------------------\n-\/\/ ciMethod::equals\n-\/\/\n-\/\/ Returns true if the methods are the same, taking redefined methods\n-\/\/ into account.\n-bool ciMethod::equals(const ciMethod* m) const {\n-  if (this == m) return true;\n-  VM_ENTRY_MARK;\n-  Method* m1 = this->get_Method();\n-  Method* m2 = m->get_Method();\n-  if (m1->is_old()) m1 = m1->get_new_method();\n-  if (m2->is_old()) m2 = m2->get_new_method();\n-  return m1 == m2;\n-}\n-\n-\n@@ -838,0 +829,6 @@\n+    \/\/ Redefinition support.\n+    if (this->is_old() || m->is_old()) {\n+      CURRENT_THREAD_ENV->record_failure(ciEnv::old_method_reason());\n+      return nullptr;\n+    }\n+\n@@ -845,0 +842,1 @@\n+\n@@ -1499,0 +1497,7 @@\n+\/\/ ciMethod::is_old\n+\/\/\n+\/\/ Return true for redefined methods\n+bool ciMethod::is_old() const {\n+  ASSERT_IN_VM;\n+  return get_Method()->is_old();\n+}\n","filename":"src\/hotspot\/share\/ci\/ciMethod.cpp","additions":21,"deletions":16,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -364,0 +364,1 @@\n+  bool is_old() const;\n@@ -369,2 +370,0 @@\n-  bool equals(const ciMethod* m) const;\n-\n","filename":"src\/hotspot\/share\/ci\/ciMethod.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -934,0 +934,1 @@\n+    if (kit.failing()) return nullptr;\n@@ -938,0 +939,1 @@\n+    if (kit.failing()) return nullptr;\n","filename":"src\/hotspot\/share\/opto\/callGenerator.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -799,3 +799,5 @@\n-      stringStream ss;\n-      ss.print(\"method parse failed: %s\", failure_reason());\n-      record_method_not_compilable(ss.as_string());\n+      if (strcmp(failure_reason(), ciEnv::old_method_reason()) != 0) {\n+        stringStream ss;\n+        ss.print(\"method parse failed: %s\", failure_reason());\n+        record_method_not_compilable(ss.as_string());\n+      }\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -595,0 +595,1 @@\n+    if (failing()) return;\n@@ -1119,0 +1120,2 @@\n+  } else if (failing()) {\n+    return nullptr;\n@@ -1188,0 +1191,2 @@\n+  if (failing()) return nullptr;\n+\n","filename":"src\/hotspot\/share\/opto\/doCall.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}