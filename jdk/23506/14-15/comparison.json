{"files":[{"patch":"@@ -410,1 +410,1 @@\n-\/\/ We perform such conversions incrementally during iGVN by transforming left most nodes first and work up to the root\n+\/\/ We perform such conversions incrementally during IGVN by transforming left most nodes first and work up to the root\n@@ -417,1 +417,1 @@\n-\/\/ Due to the iterative nature of iGVN, MulNode transformed from first few AddNode terms may be further transformed into\n+\/\/ Due to the iterative nature of IGVN, MulNode transformed from first few AddNode terms may be further transformed into\n@@ -422,4 +422,4 @@\n-\/\/     - (1) Simple addition: a + a\n-\/\/     - (2) Simple lshift: a << CON\n-\/\/     - (3) Simple multiplication: CON * a\n-\/\/     - (4) Power-of-two addition: (a << CON1) + (a << CON2)\n+\/\/     - (1) Simple addition:       LHS = a + a\n+\/\/     - (2) Simple lshift:         LHS = a << CON\n+\/\/     - (3) Simple multiplication: LHS = CON * a\n+\/\/     - (4) Power-of-two addition: LHS = (a << CON1) + (a << CON2)\n@@ -437,2 +437,2 @@\n-  Node* in1 = in(1);\n-  Node* in2 = in(2);\n+  Node* lhs = in(1);\n+  Node* rhs = in(2);\n@@ -440,2 +440,2 @@\n-  \/\/ (1) Simple addition pattern (e.g., a + a)\n-  Multiplication mul = find_simple_addition_pattern(in1, bt);\n+  \/\/ (1) Simple addition pattern (e.g., lhs = a + a)\n+  Multiplication mul = find_simple_addition_pattern(lhs, bt);\n@@ -443,3 +443,3 @@\n-  \/\/ (2) Simple lshift pattern (e.g., a << CON)\n-  if (!is_valid_multiplication(mul, in2)) {\n-    mul = find_simple_lshift_pattern(in1, bt);\n+  \/\/ (2) Simple lshift pattern (e.g., lhs = a << CON)\n+  if (!mul.is_valid_with(rhs)) {\n+    mul = find_simple_lshift_pattern(lhs, bt);\n@@ -448,3 +448,3 @@\n-  \/\/ (3) Simple multiplication pattern (e.g., CON * a)\n-  if (!is_valid_multiplication(mul, in2)) {\n-    mul = find_simple_multiplication_pattern(in1, bt);\n+  \/\/ (3) Simple multiplication pattern (e.g., lhs = CON * a)\n+  if (!mul.is_valid_with(rhs)) {\n+    mul = find_simple_multiplication_pattern(lhs, bt);\n@@ -453,1 +453,1 @@\n-  \/\/ (4) Power-of-two addition pattern (e.g., (a << CON1) + (a << CON2))\n+  \/\/ (4) Power-of-two addition pattern (e.g., lhs = (a << CON1) + (a << CON2))\n@@ -456,2 +456,2 @@\n-  if (!is_valid_multiplication(mul, in2)) {\n-    mul = find_power_of_two_addition_pattern(in1, bt);\n+  if (!mul.is_valid_with(rhs)) {\n+    mul = find_power_of_two_addition_pattern(lhs, bt);\n@@ -461,1 +461,1 @@\n-  if (!is_valid_multiplication(mul, in2)) {\n+  if (!mul.is_valid_with(rhs)) {\n@@ -471,1 +471,1 @@\n-\/\/ Try to match `a + a`. On success, return a struct with `.valid = true`, `variable = a`, and `multiplier = 2`.\n+\/\/ Try to match `n = a + a`. On success, return a struct with `.valid = true`, `variable = a`, and `multiplier = 2`.\n@@ -478,1 +478,1 @@\n-  return Multiplication{};\n+  return Multiplication::make_invalid();\n@@ -481,1 +481,1 @@\n-\/\/ Try to match `a << CON`. On success, return a struct with `.valid = true`, `variable = a`, and\n+\/\/ Try to match `n = a << CON`. On success, return a struct with `.valid = true`, `variable = a`, and\n@@ -494,1 +494,1 @@\n-  return Multiplication{};\n+  return Multiplication::make_invalid();\n@@ -497,1 +497,1 @@\n-\/\/ Try to match `CON * a`. On success, return a struct with `.valid = true`, `variable = a`, and `multiplier = CON`.\n+\/\/ Try to match `n = CON * a`. On success, return a struct with `.valid = true`, `variable = a`, and `multiplier = CON`.\n@@ -519,1 +519,1 @@\n-  return Multiplication{};\n+  return Multiplication::make_invalid();\n@@ -522,1 +522,1 @@\n-\/\/ Try to match `(a << CON1) + (a << CON2)`. On success, return a struct with `.valid = true`, `variable = a`, and\n+\/\/ Try to match `n = (a << CON1) + (a << CON2)`. On success, return a struct with `.valid = true`, `variable = a`, and\n@@ -554,1 +554,1 @@\n-  return Multiplication{};\n+  return Multiplication::make_invalid();\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":28,"deletions":28,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -50,1 +50,0 @@\n-  };\n@@ -52,3 +51,8 @@\n-  inline static bool is_valid_multiplication(const Multiplication& mul, const Node* variable) {\n-    return mul.valid && mul.variable == variable;\n-  }\n+    static Multiplication make_invalid() {\n+      return Multiplication{false, nullptr, 0};\n+    }\n+\n+    bool is_valid_with(const Node* variable) const {\n+      return valid && this->variable == variable;\n+    }\n+  };\n","filename":"src\/hotspot\/share\/opto\/addnode.hpp","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"}]}