{"files":[{"patch":"@@ -447,3 +447,7 @@\n-  Node* con = (bt == T_INT)\n-              ? static_cast<Node *>(phase->intcon(java_add(static_cast<jint>(mul.multiplier()), 1))) \/\/ Overflow at max_jint\n-              : static_cast<Node *>(phase->longcon(java_add(mul.multiplier(), static_cast<jlong>(1))));\n+  Node* con;\n+  if (bt == T_INT) {\n+    con = phase->intcon(java_add(static_cast<jint>(mul.multiplier()), 1));\n+  } else {\n+    con = phase->longcon(java_add(mul.multiplier(), static_cast<jlong>(1)));\n+  }\n+\n@@ -494,1 +498,1 @@\n-    return {n->in(1), 2};\n+    return Multiplication(n->in(1), 2);\n@@ -509,1 +513,1 @@\n-      return {n->in(1), java_shift_left(1, con->get_int(), bt)};\n+      return Multiplication(n->in(1), java_shift_left(1, con->get_int(), bt));\n@@ -517,3 +521,2 @@\n-\/\/ Match `n` for patterns:\n-\/\/     - (1) CON * a\n-\/\/     - (2) a * CON\n+\/\/ Match `n` for patterns: a * CON\n+\/\/ Note that `CON` will always be the second input node of a Mul node canonicalized by Ideal().\n@@ -521,5 +524,1 @@\n-  \/\/ This optimization technically only produces MulNode(CON, a), but we might as match MulNode(a, CON), too.\n-  if (n->Opcode() == Op_Mul(bt) && (n->in(1)->is_Con() || n->in(2)->is_Con())) {\n-    \/\/ Pattern (1)\n-    Node* con = n->in(1);\n-    Node* base = n->in(2);\n+  assert(!(n->Opcode() == Op_Mul(bt) && n->in(1)->is_Con()), \"mul node not canonicalized\");\n@@ -527,5 +526,3 @@\n-    \/\/ Pattern (2)\n-    if (!con->is_Con()) {\n-      \/\/ swap ConNode to lhs for easier matching\n-      swap(con, base);\n-    }\n+  if (n->Opcode() == Op_Mul(bt) && n->in(2)->is_Con()) {\n+    Node* con = n->in(2);\n+    Node* base = n->in(1);\n@@ -534,1 +531,1 @@\n-      return {base, con->get_integer_as_long(bt)};\n+      return Multiplication(base, con->get_integer_as_long(bt));\n@@ -564,1 +561,1 @@\n-      return {lhs.variable(), java_add(lhs.multiplier(), static_cast<jlong>(1))};\n+      return Multiplication(lhs.variable(), java_add(lhs.multiplier(), static_cast<jlong>(1)));\n@@ -569,1 +566,1 @@\n-      return {rhs.variable(), java_add(rhs.multiplier(), static_cast<jlong>(1))};\n+      return Multiplication(rhs.variable(), java_add(rhs.multiplier(), static_cast<jlong>(1)));\n@@ -576,1 +573,1 @@\n-  return Multiplication::make_invalid();\n+  return make_invalid();\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":19,"deletions":22,"binary":false,"changes":41,"status":"modified"}]}