{"files":[{"patch":"@@ -460,1 +460,1 @@\n-    *multiplier = bt == java_shift_left(1, con->get_int(), bt);\n+    *multiplier = java_shift_left(1, con->get_int(), bt);\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+import compiler.lib.generators.Generators;\n+import compiler.lib.generators.RestrictableGenerator;\n@@ -35,1 +37,1 @@\n- * @bug 8325495\n+ * @bug 8325495 8347555\n@@ -291,0 +293,43 @@\n+\n+    \/\/ --- random tests ---\n+    private static final int CON1_I, CON2_I, CON3_I, CON4_I;\n+    private static final long CON1_L, CON2_L, CON3_L, CON4_L;\n+\n+    static {\n+        RestrictableGenerator<Integer> genI = Generators.G.powerOfTwoInts(16);\n+        CON1_I = genI.next();\n+        CON2_I = genI.next();\n+        CON3_I = genI.next();\n+        CON4_I = genI.next();\n+\n+        RestrictableGenerator<Long> genL = Generators.G.powerOfTwoLongs(16);\n+        CON1_L = genL.next();\n+        CON2_L = genL.next();\n+        CON3_L = genL.next();\n+        CON4_L = genL.next();\n+    }\n+\n+    @Run(test = {\n+            \"randomPowerOfTwoAddition\",\n+            \"randomPowerOfTwoAdditionL\"\n+    })\n+    private void runRandomPowerOfTwoAddition() {\n+        for (int a : new int[] { 0, 1, Integer.MIN_VALUE, Integer.MAX_VALUE, RNG.nextInt() }) {\n+            Asserts.assertEQ(a * (CON1_I + CON2_I + CON3_I + CON4_I), randomPowerOfTwoAddition(a));\n+        }\n+\n+        for (long a : new long[] { 0, 1, Long.MIN_VALUE, Long.MAX_VALUE, RNG.nextLong() }) {\n+            Asserts.assertEQ(a * (CON1_L + CON2_L + CON3_L + CON4_L), randomPowerOfTwoAdditionL(a));\n+        }\n+    }\n+\n+    \/\/ We can't do IR verification but only check for correctness for a better confidence.\n+    @Test\n+    private static int randomPowerOfTwoAddition(int a) {\n+        return a * CON1_I + a * CON2_I + a * CON3_I + a * CON4_I;\n+    }\n+\n+    @Test\n+    private static long randomPowerOfTwoAdditionL(long a) {\n+        return a * CON1_L + a * CON2_L + a * CON3_L + a * CON4_L;\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestSerialAdditions.java","additions":46,"deletions":1,"binary":false,"changes":47,"status":"modified"}]}