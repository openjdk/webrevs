{"files":[{"patch":"@@ -0,0 +1,202 @@\n+\/*\n+ * Copyright (c) 2025, Red Hat and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.vm.compiler;\n+\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+\/**\n+ * Tests speed of adding a series of additions of the same operand.\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 4, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 4, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Fork(value = 3)\n+public class SerialAdditions {\n+    private int a = 0xBADB0BA;\n+    private long b = 0x900dba51l;\n+\n+    @Benchmark\n+    public int addIntsTo02() {\n+        return a + a; \/\/ baseline, still a + a\n+    }\n+\n+    @Benchmark\n+    public int addIntsTo04() {\n+        return a + a + a + a; \/\/ a*4 => a<<2\n+    }\n+\n+    @Benchmark\n+    public int addIntsTo05() {\n+        return a + a + a + a + a; \/\/ a*5 => (a<<2) + a\n+    }\n+\n+    @Benchmark\n+    public int addIntsTo06() {\n+        return a + a + a + a + a + a; \/\/ a*6 => (a<<1) + (a<<2)\n+    }\n+\n+    @Benchmark\n+    public int addIntsTo08() {\n+        return a + a + a + a + a + a + a + a; \/\/ a*8 => a<<3\n+    }\n+\n+    @Benchmark\n+    public int addIntsTo16() {\n+        return a + a + a + a + a + a + a + a + a + a \/\/\n+                + a + a + a + a + a + a; \/\/ a*16 => a<<4\n+    }\n+\n+    @Benchmark\n+    public int addIntsTo23() {\n+        return a + a + a + a + a + a + a + a + a + a \/\/\n+                + a + a + a + a + a + a + a + a + a + a \/\/\n+                + a + a + a; \/\/ a*23\n+    }\n+\n+    @Benchmark\n+    public int addIntsTo32() {\n+        return a + a + a + a + a + a + a + a + a + a \/\/\n+                + a + a + a + a + a + a + a + a + a + a \/\/\n+                + a + a + a + a + a + a + a + a + a + a \/\/\n+                + a + a; \/\/ a*32 => a<<5\n+    }\n+\n+    @Benchmark\n+    public int addIntsTo42() {\n+        return a + a + a + a + a + a + a + a + a + a \/\/\n+                + a + a + a + a + a + a + a + a + a + a \/\/\n+                + a + a + a + a + a + a + a + a + a + a \/\/\n+                + a + a + a + a + a + a + a + a + a + a \/\/\n+                + a + a; \/\/ a*42\n+    }\n+\n+    @Benchmark\n+    public int addIntsTo64() {\n+        return a + a + a + a + a + a + a + a + a + a \/\/\n+                + a + a + a + a + a + a + a + a + a + a \/\/\n+                + a + a + a + a + a + a + a + a + a + a \/\/\n+                + a + a + a + a + a + a + a + a + a + a \/\/\n+                + a + a + a + a + a + a + a + a + a + a \/\/\n+                + a + a + a + a + a + a + a + a + a + a \/\/\n+                + a + a + a + a; \/\/ 64 * a => a << 6\n+    }\n+\n+    @Benchmark\n+    public void addIntsMixed(Blackhole blackhole) {\n+        blackhole.consume(addIntsTo02());\n+        blackhole.consume(addIntsTo04());\n+        blackhole.consume(addIntsTo05());\n+        blackhole.consume(addIntsTo06());\n+        blackhole.consume(addIntsTo08());\n+        blackhole.consume(addIntsTo16());\n+        blackhole.consume(addIntsTo23());\n+        blackhole.consume(addIntsTo32());\n+        blackhole.consume(addIntsTo42());\n+        blackhole.consume(addIntsTo64());\n+    }\n+\n+    @Benchmark\n+    public long addLongsTo02() {\n+        return b + b; \/\/ baseline, still a + a\n+    }\n+\n+    @Benchmark\n+    public long addLongsTo04() {\n+        return b + b + b + b; \/\/ a*4 => a<<2\n+    }\n+\n+    @Benchmark\n+    public long addLongsTo05() {\n+        return b + b + b + b + b; \/\/ a*5 => (a<<2) + a\n+    }\n+\n+    @Benchmark\n+    public long addLongsTo06() {\n+        return b + b + b + b + b + b; \/\/ a*6 => (a<<1) + (a<<2)\n+    }\n+\n+    @Benchmark\n+    public long addLongsTo08() {\n+        return b + b + b + b + b + b + b + b; \/\/ a*8 => a<<3\n+    }\n+\n+    @Benchmark\n+    public long addLongsTo16() {\n+        return b + b + b + b + b + b + b + b + b + b \/\/\n+                + b + b + b + b + b + b; \/\/ a*16 => a<<4\n+    }\n+\n+    @Benchmark\n+    public long addLongsTo23() {\n+        return b + b + b + b + b + b + b + b + b + b \/\/\n+                + b + b + b + b + b + b + b + b + b + b \/\/\n+                + b + b + b; \/\/ a*23\n+    }\n+\n+    @Benchmark\n+    public long addLongsTo32() {\n+        return b + b + b + b + b + b + b + b + b + b \/\/\n+                + b + b + b + b + b + b + b + b + b + b \/\/\n+                + b + b + b + b + b + b + b + b + b + b \/\/\n+                + b + b; \/\/ a*32 => a<<5\n+    }\n+\n+    @Benchmark\n+    public long addLongsTo42() {\n+        return b + b + b + b + b + b + b + b + b + b \/\/\n+                + b + b + b + b + b + b + b + b + b + b \/\/\n+                + b + b + b + b + b + b + b + b + b + b \/\/\n+                + b + b + b + b + b + b + b + b + b + b \/\/\n+                + b + b; \/\/ a*42\n+    }\n+\n+    @Benchmark\n+    public long addLongsTo64() {\n+        return b + b + b + b + b + b + b + b + b + b \/\/\n+                + b + b + b + b + b + b + b + b + b + b \/\/\n+                + b + b + b + b + b + b + b + b + b + b \/\/\n+                + b + b + b + b + b + b + b + b + b + b \/\/\n+                + b + b + b + b + b + b + b + b + b + b \/\/\n+                + b + b + b + b + b + b + b + b + b + b \/\/\n+                + b + b + b + b; \/\/ 64 * a => a << 6\n+    }\n+\n+    @Benchmark\n+    public void addLongsMixed(Blackhole blackhole) {\n+        blackhole.consume(addLongsTo02());\n+        blackhole.consume(addLongsTo04());\n+        blackhole.consume(addLongsTo05());\n+        blackhole.consume(addLongsTo06());\n+        blackhole.consume(addLongsTo08());\n+        blackhole.consume(addLongsTo16());\n+        blackhole.consume(addLongsTo23());\n+        blackhole.consume(addLongsTo32());\n+        blackhole.consume(addLongsTo42());\n+        blackhole.consume(addLongsTo64());\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/SerialAdditions.java","additions":202,"deletions":0,"binary":false,"changes":202,"status":"added"}]}