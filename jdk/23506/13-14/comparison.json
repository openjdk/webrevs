{"files":[{"patch":"@@ -408,2 +408,21 @@\n-\/\/ a side effect. On success, a new MulNode is returned.\n-\/\/ Note a more generalized pattern (a*b) + (a*c) into a*(b + c) is handled by AddNode::IdealIL().\n+\/\/ a side effect (see below). On success, a new MulNode is returned.\n+\/\/\n+\/\/ We perform such conversions incrementally during iGVN by transforming left most nodes first and work up to the root\n+\/\/ of the expression. In other words, we convert, at each iteration:\n+\/\/        a + a + a + ... + a\n+\/\/     => 2*a + a + ... + a\n+\/\/     => 3*a + ... + a\n+\/\/     => n*a\n+\/\/\n+\/\/ Due to the iterative nature of iGVN, MulNode transformed from first few AddNode terms may be further transformed into\n+\/\/ power-of-2 pattern. (e.g., 2 * a => a << 1, 3 * a => (a << 2) + a). We can't guarantee we'll always pick up\n+\/\/ transformed power-of-2 patterns when term `a` is complex.\n+\/\/\n+\/\/ Therefore, when matching the LHS `a * CON`, we match with best efforts by looking for the following patterns:\n+\/\/     - (1) Simple addition: a + a\n+\/\/     - (2) Simple lshift: a << CON\n+\/\/     - (3) Simple multiplication: CON * a\n+\/\/     - (4) Power-of-two addition: (a << CON1) + (a << CON2)\n+\/\/\n+\/\/ Note this also converts, for example, original expression `(a*3) + a` into `4*a` and `(a<<2) + a` into `5*a`. A more\n+\/\/ generalized pattern `(a*b) + (a*c)` into `a*(b + c)` is handled by AddNode::IdealIL().\n@@ -421,1 +440,1 @@\n-  \/\/ Pattern 1: Simple addition pattern (e.g., a + a)\n+  \/\/ (1) Simple addition pattern (e.g., a + a)\n@@ -424,1 +443,1 @@\n-  \/\/ Pattern 2: Simple lshift pattern (e.g., a << CON)\n+  \/\/ (2) Simple lshift pattern (e.g., a << CON)\n@@ -429,1 +448,1 @@\n-  \/\/ Pattern 3: Simple multiplication pattern (e.g., CON * a)\n+  \/\/ (3) Simple multiplication pattern (e.g., CON * a)\n@@ -434,1 +453,1 @@\n-  \/\/ Pattern 4: Power-of-two addition pattern (e.g., (a << CON1) + (a << CON2))\n+  \/\/ (4) Power-of-two addition pattern (e.g., (a << CON1) + (a << CON2))\n@@ -454,1 +473,1 @@\n-AddNode::Multiplication AddNode::find_simple_addition_pattern(Node* n, BasicType bt) {\n+AddNode::Multiplication AddNode::find_simple_addition_pattern(const Node* n, BasicType bt) {\n@@ -466,1 +485,1 @@\n-AddNode::Multiplication AddNode::find_simple_lshift_pattern(Node* n, BasicType bt) {\n+AddNode::Multiplication AddNode::find_simple_lshift_pattern(const Node* n, BasicType bt) {\n@@ -482,1 +501,1 @@\n-AddNode::Multiplication AddNode::find_simple_multiplication_pattern(Node* n, BasicType bt) {\n+AddNode::Multiplication AddNode::find_simple_multiplication_pattern(const Node* n, BasicType bt) {\n@@ -511,1 +530,1 @@\n-AddNode::Multiplication AddNode::find_power_of_two_addition_pattern(Node* n, BasicType bt) {\n+AddNode::Multiplication AddNode::find_power_of_two_addition_pattern(const Node* n, BasicType bt) {\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":29,"deletions":10,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-  inline static bool is_valid_multiplication(const Multiplication& mul, Node* variable) {\n+  inline static bool is_valid_multiplication(const Multiplication& mul, const Node* variable) {\n@@ -57,5 +57,4 @@\n-  static Multiplication find_simple_addition_pattern(Node* n, BasicType bt);\n-  static Multiplication find_simple_lshift_pattern(Node* n, BasicType bt);\n-  static Multiplication find_simple_multiplication_pattern(Node* n, BasicType bt);\n-public:\n-  static Multiplication find_power_of_two_addition_pattern(Node* n, BasicType bt);\n+  static Multiplication find_simple_addition_pattern(const Node* n, BasicType bt);\n+  static Multiplication find_simple_lshift_pattern(const Node* n, BasicType bt);\n+  static Multiplication find_simple_multiplication_pattern(const Node* n, BasicType bt);\n+  static Multiplication find_power_of_two_addition_pattern(const Node* n, BasicType bt);\n@@ -63,0 +62,1 @@\n+ public:\n","filename":"src\/hotspot\/share\/opto\/addnode.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -267,6 +267,0 @@\n-\n-#ifdef ASSERT\n-      \/\/ JDK-8347555: ensure Ideal() generated power-of-2 patterns are expected by the serial addition optimization.\n-      assert(AddNode::find_power_of_two_addition_pattern(res, T_INT).valid, \"unexpected power-of-2 pattern\");\n-#endif\n-\n@@ -510,5 +504,0 @@\n-#ifdef ASSERT\n-      \/\/ JDK-8347555: ensure Ideal() generated power-of-2 patterns are expected by the serial addition optimization.\n-      assert(AddNode::find_power_of_two_addition_pattern(res, T_LONG).valid, \"unexpected power-of-2 pattern\");\n-#endif\n-\n","filename":"src\/hotspot\/share\/opto\/mulnode.cpp","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"}]}