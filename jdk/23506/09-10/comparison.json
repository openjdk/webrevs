{"files":[{"patch":"@@ -449,1 +449,1 @@\n-  return MulNode::make(con, in2, bt);\n+  return MulNode::make(con, mul.variable, bt);\n@@ -485,1 +485,1 @@\n-    \/\/ Assume pattern (1)\n+    \/\/ Pattern (1)\n@@ -489,1 +489,1 @@\n-    \/\/ swap ConNode to lhs for easier matching\n+    \/\/ Pattern (2)\n@@ -491,1 +491,1 @@\n-      \/\/ Swap for pattern (2)\n+      \/\/ swap ConNode to lhs for easier matching\n@@ -509,2 +509,2 @@\n-\/\/ given that lhs is different from rhs.\n-\/\/ Note that one of the term of the addition could simply be `a` (i.e., a << 0).\n+\/\/     - (4) AddNode(a, a)\n+\/\/ Note that one or both of the term of the addition could simply be `a` (i.e., a << 0) as in pattern (4).\n@@ -530,0 +530,3 @@\n+\n+    \/\/ Pattern (4), which is equivalent to a simple addition pattern\n+    return find_simple_addition_pattern(n, bt);\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -269,2 +269,2 @@\n-      \/\/ JDK-8347555: ensure we Ideal() generated power-of-2 patterns expected by the serial addition optimization.\n-      assert(AddNode::find_power_of_two_addition_pattern(res, T_INT).valid, \"\");\n+      \/\/ JDK-8347555: ensure Ideal() generated power-of-2 patterns are expected by the serial addition optimization.\n+      assert(AddNode::find_power_of_two_addition_pattern(res, T_INT).valid, \"unexpected power-of-2 pattern\");\n","filename":"src\/hotspot\/share\/opto\/mulnode.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}