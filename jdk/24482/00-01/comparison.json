{"files":[{"patch":"@@ -2753,1 +2753,0 @@\n-\n@@ -2760,11 +2759,0 @@\n-    \/\/ Calculate potentially longest base path and check if we have enough\n-    \/\/ allocated statically.\n-    const size_t total_length =\n-                      (HeapDumpPath == nullptr ? 0 : strlen(HeapDumpPath)) +\n-                      strlen(os::file_separator()) + max_digit_chars +\n-                      strlen(dump_file_name) + 1;\n-    if (total_length > sizeof(base_path)) {\n-      warning(\"Cannot create heap dump file.  HeapDumpPath is too long.\");\n-      return;\n-    }\n-\n@@ -2772,2 +2760,2 @@\n-    const char *path_src = (HeapDumpPath && HeapDumpPath[0] != '\\0') ? HeapDumpPath : dump_file_name;\n-    if (!Arguments::copy_expand_pid(path_src, strlen(path_src), base_path, JVM_MAXPATHLEN)) {\n+    const char *path_src = (HeapDumpPath != nullptr && HeapDumpPath[0] != '\\0') ? HeapDumpPath : dump_file_name;\n+    if (!Arguments::copy_expand_pid(path_src, strlen(path_src), base_path, JVM_MAXPATHLEN - max_digit_chars)) {\n@@ -2781,1 +2769,1 @@\n-      \/\/ Append a file separator (if needed).\n+      \/\/ Path is a directory.  Append a file separator (if needed).\n@@ -2790,2 +2778,2 @@\n-      \/\/ Path is a directory.  Append the default name, with %p substitution.  Use my_path temporarily.\n-      if (!Arguments::copy_expand_pid(dump_file_name, strlen(dump_file_name), my_path, JVM_MAXPATHLEN)) {\n+      \/\/ Then add the default name, with %p substitution.  Use my_path temporarily.\n+      if (!Arguments::copy_expand_pid(dump_file_name, strlen(dump_file_name), my_path, JVM_MAXPATHLEN - max_digit_chars)) {\n@@ -2793,0 +2781,1 @@\n+        return;\n","filename":"src\/hotspot\/share\/services\/heapDumper.cpp","additions":6,"deletions":17,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -101,1 +101,0 @@\n-\n@@ -113,2 +112,1 @@\n-        Process proc = pb.start();\n-        output = new OutputAnalyzer(proc);\n+        output = new OutputAnalyzer(pb.start());\n@@ -116,2 +114,1 @@\n-        long pid = proc.pid();\n-        String actualHeapdumpFilename = type + \".\" + pid + \".hprof\";\n+        String actualHeapdumpFilename = type + \".\" + output.pid() + \".hprof\";\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/TestHeapDumpOnOutOfMemoryError.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"}]}