{"files":[{"patch":"@@ -323,1 +323,1 @@\n-                        .apply(Files.readAllLines(desktopFile).stream());\n+                        .apply(Files.readAllLines(desktopFile));\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/AdditionalLauncher.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.util.Iterator;\n@@ -723,1 +724,1 @@\n-    public JPackageCommand validateOutput(Consumer<Stream<String>> validator) {\n+    public JPackageCommand validateOutput(Consumer<Iterator<String>> validator) {\n@@ -765,1 +766,3 @@\n-                .reduce(TKit.TextStreamVerifier::andThen).ifPresent(this::validateOutput);\n+                .reduce(TKit.TextStreamVerifier.group(),\n+                        TKit.TextStreamVerifier.Group::add,\n+                        TKit.TextStreamVerifier.Group::add).tryCreate().ifPresent(this::validateOutput);\n@@ -849,1 +852,1 @@\n-            outputValidator.accept(result.getOutput().stream());\n+            outputValidator.accept(result.getOutput().iterator());\n@@ -1302,1 +1305,1 @@\n-    private List<Consumer<Stream<String>>> outputValidators = new ArrayList<>();\n+    private List<Consumer<Iterator<String>>> outputValidators = new ArrayList<>();\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JPackageCommand.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -319,1 +319,1 @@\n-                .apply(Files.readAllLines(serviceUnitFile).stream());\n+                .apply(Files.readAllLines(serviceUnitFile));\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/LauncherAsServiceVerifier.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -430,1 +430,1 @@\n-        .peek(str -> TKit.assertTextStream(\"=\").predicate(String::contains).apply(Stream.of(str)))\n+        .peek(str -> TKit.assertTextStream(\"=\").predicate(String::contains).apply(List.of(str)))\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/LinuxHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -136,3 +136,6 @@\n-        final var verifier = TKit.assertTextStream(\": valid on disk\").predicate(String::endsWith).andThen(TKit.assertTextStream(\": satisfies its Designated Requirement\").predicate(String::endsWith));\n-        verifier.apply(Executor.of(\"\/usr\/bin\/codesign\", \"--verify\", \"--deep\",\n-                \"--strict\", \"--verbose=2\", path.toString()).executeAndGetOutput().stream());\n+        final var verifier = TKit.TextStreamVerifier.group()\n+                .add(TKit.assertTextStream(\": valid on disk\").predicate(String::endsWith))\n+                .add(TKit.assertTextStream(\": satisfies its Designated Requirement\").predicate(String::endsWith))\n+                .create();\n+        verifier.accept(Executor.of(\"\/usr\/bin\/codesign\", \"--verify\", \"--deep\",\n+                \"--strict\", \"--verbose=2\", path.toString()).executeAndGetOutput().iterator());\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/MacSignVerify.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -972,1 +972,1 @@\n-            this.value = value;\n+            this.value = Objects.requireNonNull(value);\n@@ -976,0 +976,9 @@\n+        TextStreamVerifier(TextStreamVerifier other) {\n+            predicate = other.predicate;\n+            label = other.label;\n+            negate = other.negate;\n+            createException = other.createException;\n+            anotherVerifier = other.anotherVerifier;\n+            value = other.value;\n+        }\n+\n@@ -982,1 +991,1 @@\n-            predicate = v;\n+            predicate = Objects.requireNonNull(v);\n@@ -991,10 +1000,0 @@\n-        public TextStreamVerifier andThen(Consumer<? super Stream<String>> anotherVerifier) {\n-            this.anotherVerifier = anotherVerifier;\n-            return this;\n-        }\n-\n-        public TextStreamVerifier andThen(TextStreamVerifier anotherVerifier) {\n-            this.anotherVerifier = anotherVerifier::apply;\n-            return this;\n-        }\n-\n@@ -1002,0 +1001,1 @@\n+            Objects.requireNonNull(v);\n@@ -1010,12 +1010,5 @@\n-        public void apply(Stream<String> lines) {\n-            final String matchedStr;\n-\n-            lines = lines.dropWhile(line -> !predicate.test(line, value));\n-            if (anotherVerifier == null) {\n-                matchedStr = lines.findFirst().orElse(null);\n-            } else {\n-                var tail = lines.toList();\n-                if (tail.isEmpty()) {\n-                    matchedStr = null;\n-                } else {\n-                    matchedStr = tail.get(0);\n+        private String findMatch(Iterator<String> lineIt) {\n+            while (lineIt.hasNext()) {\n+                final var line = lineIt.next();\n+                if (predicate.test(line, value)) {\n+                    return line;\n@@ -1023,1 +1016,0 @@\n-                lines = tail.stream().skip(1);\n@@ -1025,0 +1017,6 @@\n+            return null;\n+        }\n+\n+        public void apply(List<String> lines) {\n+            apply(lines.iterator());\n+        }\n@@ -1026,0 +1024,2 @@\n+        public void apply(Iterator<String> lineIt) {\n+            final String matchedStr = findMatch(lineIt);\n@@ -1052,1 +1052,32 @@\n-                anotherVerifier.accept(lines);\n+                anotherVerifier.accept(lineIt);\n+            }\n+        }\n+\n+        public static TextStreamVerifier.Group group() {\n+            return new TextStreamVerifier.Group();\n+        }\n+\n+        public static final class Group {\n+            public Group add(TextStreamVerifier verifier) {\n+                if (verifier.anotherVerifier != null) {\n+                    throw new IllegalArgumentException();\n+                }\n+                verifiers.add(verifier);\n+                return this;\n+            }\n+\n+            public Group add(Group other) {\n+                verifiers.addAll(other.verifiers);\n+                return this;\n+            }\n+\n+            public boolean isEmpty() {\n+                return verifiers.isEmpty();\n+            }\n+\n+            public Optional<Consumer<Iterator<String>>> tryCreate() {\n+                if (isEmpty()) {\n+                    return Optional.empty();\n+                } else {\n+                    return Optional.of(create());\n+                }\n@@ -1054,0 +1085,21 @@\n+\n+            public Consumer<Iterator<String>> create() {\n+                if (verifiers.isEmpty()) {\n+                    throw new IllegalStateException();\n+                }\n+\n+                if (verifiers.size() == 1) {\n+                    return verifiers.getFirst()::apply;\n+                }\n+\n+                final var head = new TextStreamVerifier(verifiers.getFirst());\n+                var prev = head;\n+                for (var verifier : verifiers.subList(1, verifiers.size())) {\n+                    verifier = new TextStreamVerifier(verifier);\n+                    prev.anotherVerifier = verifier::apply;\n+                    prev = verifier;\n+                }\n+                return head::apply;\n+            }\n+\n+            private final List<TextStreamVerifier> verifiers = new ArrayList<>();\n@@ -1060,1 +1112,1 @@\n-        private Consumer<? super Stream<String>> anotherVerifier;\n+        private Consumer<? super Iterator<String>> anotherVerifier;\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/TKit.java","additions":79,"deletions":27,"binary":false,"changes":106,"status":"modified"},{"patch":"@@ -179,1 +179,1 @@\n-                    .apply(Files.readAllLines(desktopFile).stream());\n+                    .apply(Files.readAllLines(desktopFile));\n","filename":"test\/jdk\/tools\/jpackage\/linux\/ShortcutHintTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-            .apply(Stream.of(actualEnvVarValue));\n+            .apply(List.of(actualEnvVarValue));\n","filename":"test\/jdk\/tools\/jpackage\/share\/AppLauncherEnvTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -117,2 +117,2 @@\n-        TKit.assertTextStream(\"jpackage.app-version=\" + appVersion).apply(output.stream());\n-        TKit.assertTextStream(\"jpackage.app-path=\").apply(output.stream());\n+        TKit.assertTextStream(\"jpackage.app-version=\" + appVersion).apply(output);\n+        TKit.assertTextStream(\"jpackage.app-path=\").apply(output);\n@@ -224,1 +224,1 @@\n-                    .apply(nonVerboseOutput.stream());\n+                    .apply(nonVerboseOutput);\n@@ -229,1 +229,1 @@\n-                    .apply(verboseOutput[0].stream());\n+                    .apply(verboseOutput[0]);\n","filename":"test\/jdk\/tools\/jpackage\/share\/BasicTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import jdk.jpackage.test.Annotations.Parameter;\n@@ -647,0 +648,38 @@\n+    @Test(ifOS = MACOS)\n+    @Parameter({\"MAC_PKG\", \"--mac-signing-key-user-name\", \"false\"})\n+    @Parameter({\"MAC_DMG\", \"--mac-signing-key-user-name\", \"false\"})\n+    @Parameter({\"IMAGE\", \"--mac-signing-key-user-name\", \"false\"})\n+    @Parameter({\"MAC_PKG\", \"--mac-app-image-sign-identity\", \"true\"})\n+    @Parameter({\"MAC_DMG\", \"--mac-app-image-sign-identity\", \"true\"})\n+    @Parameter({\"IMAGE\", \"--mac-app-image-sign-identity\", \"true\"})\n+    @Parameter({\"MAC_PKG\", \"--mac-installer-sign-identity\", \"true\"})\n+    public static void testMacSigningIdentityValidation(PackageType type, String option, boolean passThroughOption) {\n+\n+        final var signingId = \"foo\";\n+\n+        final List<CannedFormattedString> errorMessages = new ArrayList<>();\n+        errorMessages.add(JPackageStringBundle.MAIN.cannedFormattedString(\n+                \"error.cert.not.found\", \"Developer ID Application: \" + signingId, \"\"));\n+        errorMessages.addAll(Stream.of(\n+                \"error.explicit-sign-no-cert\",\n+                \"error.explicit-sign-no-cert.advice\"\n+        ).map(JPackageStringBundle.MAIN::cannedFormattedString).toList());\n+\n+        final var cmd = JPackageCommand.helloAppImage()\n+                .ignoreDefaultVerbose(true)\n+                .addArguments(\"--mac-sign\")\n+                .addArguments(option, signingId)\n+                .setPackageType(type);\n+\n+        if (passThroughOption) {\n+            errorMessages.stream()\n+                    .map(CannedFormattedString::getValue)\n+                    .map(TKit::assertTextStream)\n+                    .map(TKit.TextStreamVerifier::negate).forEach(cmd::validateOutput);\n+        } else {\n+            cmd.validateOutput(errorMessages.toArray(CannedFormattedString[]::new));\n+        }\n+\n+        cmd.execute(1);\n+    }\n+\n@@ -735,1 +774,1 @@\n-        \/\/ Ignore external runtime as it will interfer\n+        \/\/ Ignore external runtime as it will interfere\n","filename":"test\/jdk\/tools\/jpackage\/share\/ErrorTest.java","additions":40,"deletions":1,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -194,1 +194,1 @@\n-                verifier.apply(result.getOutput().stream());\n+                verifier.apply(result.getOutput());\n@@ -202,1 +202,1 @@\n-                    verifier.apply(result.getOutput().stream());\n+                    verifier.apply(result.getOutput());\n","filename":"test\/jdk\/tools\/jpackage\/share\/IconTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -132,1 +132,1 @@\n-                TKit.assertTextStream(s).label(\"mods\").apply(mods.stream());\n+                TKit.assertTextStream(s).label(\"mods\").apply(mods);\n@@ -137,1 +137,1 @@\n-                TKit.assertTextStream(s).label(\"mods\").negate().apply(mods.stream());\n+                TKit.assertTextStream(s).label(\"mods\").negate().apply(mods);\n","filename":"test\/jdk\/tools\/jpackage\/share\/JLinkOptionsTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -85,2 +85,2 @@\n-        TKit.assertTextStream(WARNING1).apply(output.stream());\n-        TKit.assertTextStream(WARNING2).apply(output.stream());\n+        TKit.assertTextStream(WARNING1).apply(output);\n+        TKit.assertTextStream(WARNING2).apply(output);\n","filename":"test\/jdk\/tools\/jpackage\/share\/JavaOptionsEqualsTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-            TKit.assertTextStream(expect).apply(output.stream());\n+            TKit.assertTextStream(expect).apply(output);\n","filename":"test\/jdk\/tools\/jpackage\/share\/JavaOptionsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -251,1 +251,1 @@\n-                        nonExistingMainClass)).apply(output.stream());\n+                        nonExistingMainClass)).apply(output);\n","filename":"test\/jdk\/tools\/jpackage\/share\/MainClassTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -123,1 +123,1 @@\n-    private final static Predicate<String> createToolCommandLinePredicate(String wixToolName) {\n+    private static final Predicate<String> createToolCommandLinePredicate(String wixToolName) {\n@@ -201,1 +201,1 @@\n-                TKit.assertTextStream(expected).apply(wixCmdline.stream());\n+                TKit.assertTextStream(expected).apply(wixCmdline);\n@@ -206,1 +206,1 @@\n-                        .apply(result.getOutput().stream());\n+                        .apply(result.getOutput());\n@@ -216,1 +216,1 @@\n-                            v.createCmdOutputVerifier(wixSrcDir).apply(wixCmdline.stream());\n+                            v.createCmdOutputVerifier(wixSrcDir).apply(wixCmdline);\n@@ -221,1 +221,1 @@\n-                        v.apply(wixCmdline.stream());\n+                        v.apply(wixCmdline);\n@@ -227,1 +227,1 @@\n-                                    wixSrcDir).apply(result.getOutput().stream()));\n+                                    wixSrcDir).apply(result.getOutput()));\n@@ -254,6 +254,6 @@\n-    final private WixFileInitializer[] wxlFileInitializers;\n-    final private String[] expectedCultures;\n-    final private String expectedErrorMessage;\n-    final private String userLanguage;\n-    final private String userCountry;\n-    final private boolean enableWixUIExtension;\n+    private final WixFileInitializer[] wxlFileInitializers;\n+    private final String[] expectedCultures;\n+    private final String expectedErrorMessage;\n+    private final String userLanguage;\n+    private final String userCountry;\n+    private final boolean enableWixUIExtension;\n","filename":"test\/jdk\/tools\/jpackage\/windows\/WinL10nTest.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -68,2 +68,4 @@\n-                TKit.assertTextStream(\"Doing action: LaunchConditions\").predicate(String::endsWith)\n-                    .andThen(TKit.assertTextStream(\"Not supported on this version of Windows\").predicate(String::endsWith)).apply(lines);\n+                TKit.TextStreamVerifier.group()\n+                        .add(TKit.assertTextStream(\"Doing action: LaunchConditions\").predicate(String::endsWith))\n+                        .add(TKit.assertTextStream(\"Not supported on this version of Windows\").predicate(String::endsWith))\n+                        .create().accept(lines.iterator());\n","filename":"test\/jdk\/tools\/jpackage\/windows\/WinOSConditionTest.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -98,1 +98,1 @@\n-                            result.getOutput().stream()));\n+                            result.getOutput().stream()).iterator());\n@@ -100,1 +100,1 @@\n-                    .apply(result.getOutput().stream());\n+                    .apply(result.getOutput());\n","filename":"test\/jdk\/tools\/jpackage\/windows\/WinResourceTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -130,1 +130,1 @@\n-                    .apply(output.stream());\n+                    .apply(output);\n@@ -135,1 +135,1 @@\n-                    .apply(output.stream());\n+                    .apply(output);\n@@ -142,1 +142,1 @@\n-                    .apply(output.stream());\n+                    .apply(output);\n","filename":"test\/jdk\/tools\/jpackage\/windows\/WinScriptTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}