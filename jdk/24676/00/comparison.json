{"files":[{"patch":"@@ -490,1 +490,1 @@\n-  _terminator(_max_num_tasks, _task_queues),\n+  _terminator(_max_num_tasks, _task_queues, TERMINATION_EVENT_NAME(\"Concurrent Marking\")),\n@@ -1010,1 +1010,2 @@\n-      WorkerTask(\"Concurrent Mark\"), _cm(cm) { }\n+      WorkerTask(\"Concurrent Mark\"), _cm(cm) {\n+  }\n@@ -1835,0 +1836,1 @@\n+  const char* _original_termination_event_name;\n@@ -1858,1 +1860,6 @@\n-    _cm->terminator()->reset_for_reuse(active_workers);\n+    _original_termination_event_name = _cm->terminator()->termination_event_name();\n+    _cm->terminator()->reset_for_reuse(active_workers, TERMINATION_EVENT_NAME(\"Par Remark\"));\n+  }\n+\n+  ~G1CMRemarkTask() {\n+    _cm->terminator()->set_termination_event_name(_original_termination_event_name);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-    _terminator(collector->workers(), collector->array_queue_set()) {\n+    _terminator(collector->workers(), collector->array_queue_set(), TERMINATION_EVENT_NAME(\"Parallel Marking\")) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCMarkTask.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -554,1 +554,0 @@\n-    EventGCPhaseParallel event;\n@@ -559,1 +558,0 @@\n-    event.commit(GCId::current(), pss->worker_id(), G1GCPhaseTimes::phase_name(G1GCPhaseTimes::Termination));\n@@ -668,3 +666,2 @@\n-    _terminator(num_workers, _task_queues),\n-    _pinned_regions_recorded(false)\n-  { }\n+    _terminator(num_workers, _task_queues, G1GCPhaseTimes::phase_name(G1GCPhaseTimes::Termination)),\n+    _pinned_regions_recorded(false) {}\n@@ -952,1 +949,1 @@\n-      _terminator(max_workers, &task_queues),\n+      _terminator(max_workers, &task_queues, G1GCPhaseTimes::phase_name(G1GCPhaseTimes::Termination)),\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungCollector.cpp","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1231,1 +1231,1 @@\n-      _terminator(active_workers, ParCompactionManager::marking_stacks()),\n+      _terminator(active_workers, ParCompactionManager::marking_stacks(), TERMINATION_EVENT_NAME(\"MarkFromRootsTask\")),\n@@ -1261,0 +1261,1 @@\n+\n@@ -1269,1 +1270,1 @@\n-      _terminator(_max_workers, ParCompactionManager::marking_stacks()) {}\n+      _terminator(_max_workers, ParCompactionManager::marking_stacks(), TERMINATION_EVENT_NAME(\"ParallelCompactRefProcProxyTask\")) {}\n@@ -1795,1 +1796,1 @@\n-      _terminator(active_workers, ParCompactionManager::region_task_queues()) {\n+      _terminator(active_workers, ParCompactionManager::region_task_queues(), TERMINATION_EVENT_NAME(\"FillDensePrefixAndCompactionTask\")) {\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -207,1 +207,1 @@\n-      _terminator(max_workers, ParCompactionManager::marking_stacks()) {}\n+      _terminator(max_workers, ParCompactionManager::marking_stacks(), TERMINATION_EVENT_NAME(\"ParallelScavengeRefProcProxyTask\")) {}\n@@ -262,1 +262,1 @@\n-    _terminator(active_workers, PSPromotionManager::vm_thread_promotion_manager()->stack_array_depth()) {\n+    _terminator(active_workers, PSPromotionManager::vm_thread_promotion_manager()->stack_array_depth(), TERMINATION_EVENT_NAME(\"ScavengeRootsTask\")) {\n","filename":"src\/hotspot\/share\/gc\/parallel\/psScavenge.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,0 +33,5 @@\n+#include \"jfr\/jfrEvents.hpp\"\n+#include \"workerThread.hpp\"\n+\n+#define TERMINATION_EVENT_NAME_PREFIX_ASSERT(name) \\\n+assert(name == nullptr || strncmp(name, TERMINATION_EVENT_NAME_PREFIX, strlen(TERMINATION_EVENT_NAME_PREFIX)) == 0, \"Must be\")\n@@ -70,1 +75,1 @@\n-TaskTerminator::TaskTerminator(uint n_threads, TaskQueueSetSuper* queue_set) :\n+TaskTerminator::TaskTerminator(uint n_threads, TaskQueueSetSuper* queue_set, const char* termination_event_name) :\n@@ -73,0 +78,1 @@\n+  _termination_event_name(termination_event_name),\n@@ -75,1 +81,3 @@\n-  _spin_master(nullptr) { }\n+  _spin_master(nullptr) {\n+  TERMINATION_EVENT_NAME_PREFIX_ASSERT(termination_event_name);\n+}\n@@ -105,0 +113,15 @@\n+void TaskTerminator::reset_for_reuse(uint n_threads, const char* termination_event_name) {\n+  TERMINATION_EVENT_NAME_PREFIX_ASSERT(termination_event_name);\n+  reset_for_reuse(n_threads);\n+  _termination_event_name = termination_event_name;\n+}\n+\n+const char* TaskTerminator::termination_event_name() {\n+  return _termination_event_name;\n+}\n+\n+void TaskTerminator::set_termination_event_name(const char* termination_event_name) {\n+  TERMINATION_EVENT_NAME_PREFIX_ASSERT(termination_event_name);\n+  _termination_event_name = termination_event_name;\n+}\n+\n@@ -131,0 +154,16 @@\n+class TaskTerminationTracker :public StackObj {\n+  TaskTerminator* const _terminator;\n+  uint const _worker_id;\n+  EventGCPhaseParallel _event;\n+public:\n+  TaskTerminationTracker(TaskTerminator* task_terminator, uint worker_id):\n+  _terminator(task_terminator),\n+  _worker_id(worker_id) { }\n+\n+  ~TaskTerminationTracker() {\n+    if (_terminator->_termination_event_name != nullptr && _event.should_commit()) {\n+      _event.commit(GCId::current(), _terminator->_n_threads > 1 ? _worker_id : 0, _terminator->_termination_event_name);\n+    }\n+  }\n+};\n+\n@@ -135,0 +174,1 @@\n+  TaskTerminationTracker termination_tracker(this, WorkerThread::worker_id());\n@@ -205,0 +245,1 @@\n+#undef TERMINATION_EVENT_NAME_PREFIX_ASSERT\n","filename":"src\/hotspot\/share\/gc\/shared\/taskTerminator.cpp","additions":43,"deletions":2,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -36,0 +36,5 @@\n+#define TERMINATION_EVENT_NAME_PREFIX \"Termination\"\n+#define TERMINATION_EVENT_NAME(task_name) \"\" TERMINATION_EVENT_NAME_PREFIX \":\" task_name \"\"\n+\n+class TaskTerminationTracker;\n+\n@@ -55,0 +60,1 @@\n+  friend class TaskTerminationTracker;\n@@ -74,0 +80,1 @@\n+  const char* _termination_event_name;\n@@ -97,1 +104,1 @@\n-  TaskTerminator(uint n_threads, TaskQueueSetSuper* queue_set);\n+  TaskTerminator(uint n_threads, TaskQueueSetSuper* queue_set, const char* termination_event_name = nullptr);\n@@ -121,0 +128,6 @@\n+  \/\/ Same as above but task name is set to new task name.\n+  void reset_for_reuse(uint n_threads, const char* termination_event_name);\n+  \/\/ Get termination event name\n+  const char* termination_event_name();\n+  \/\/ Set termination event name\n+  void set_termination_event_name(const char* termination_event_name);\n","filename":"src\/hotspot\/share\/gc\/shared\/taskTerminator.hpp","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"gc\/shared\/taskTerminator.hpp\"\n@@ -38,0 +39,1 @@\n+class TaskTerminator;\n","filename":"src\/hotspot\/share\/gc\/shared\/workerThread.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -224,0 +224,1 @@\n+  TaskTerminator terminator(nworkers, task_queues(), TERMINATION_EVENT_NAME(\"Shenandoah Concurrent Mark\"));\n@@ -227,1 +228,0 @@\n-        TaskTerminator terminator(nworkers, task_queues());\n@@ -233,1 +233,0 @@\n-        TaskTerminator terminator(nworkers, task_queues());\n@@ -239,1 +238,0 @@\n-        TaskTerminator terminator(nworkers, task_queues());\n@@ -245,1 +243,0 @@\n-        TaskTerminator terminator(nworkers, task_queues());\n@@ -270,0 +267,1 @@\n+    terminator.reset_for_reuse();\n@@ -301,1 +299,1 @@\n-  TaskTerminator terminator(nworkers, task_queues());\n+  TaskTerminator terminator(nworkers, task_queues(), TERMINATION_EVENT_NAME(\"Shenandoah Final Mark\"));\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentMark.cpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"}]}