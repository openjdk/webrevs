{"files":[{"patch":"@@ -490,1 +490,1 @@\n-  _terminator(_max_num_tasks, _task_queues),\n+  _terminator(_max_num_tasks, _task_queues, TERMINATION_EVENT_NAME(\"Concurrent Marking\")),\n@@ -1835,0 +1835,1 @@\n+  TaskTerminatorReuseMark _ttmr;\n@@ -1857,3 +1858,2 @@\n-    WorkerTask(\"Par Remark\"), _cm(cm) {\n-    _cm->terminator()->reset_for_reuse(active_workers);\n-  }\n+    WorkerTask(\"Par Remark\"), _cm(cm),\n+    _ttmr(cm->terminator(), active_workers, TERMINATION_EVENT_NAME(\"Par Remark\")) {}\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-    _terminator(collector->workers(), collector->array_queue_set()) {\n+    _terminator(collector->workers(), collector->array_queue_set(), TERMINATION_EVENT_NAME(\"Parallel Marking\")) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCMarkTask.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -556,1 +556,0 @@\n-    EventGCPhaseParallel event;\n@@ -561,1 +560,0 @@\n-    event.commit(GCId::current(), pss->worker_id(), G1GCPhaseTimes::phase_name(G1GCPhaseTimes::Termination));\n@@ -670,1 +668,1 @@\n-    _terminator(num_workers, _task_queues),\n+    _terminator(num_workers, _task_queues, G1GCPhaseTimes::phase_name(G1GCPhaseTimes::Termination)),\n@@ -943,1 +941,1 @@\n-      _terminator(max_workers, &task_queues),\n+      _terminator(max_workers, &task_queues, G1GCPhaseTimes::phase_name(G1GCPhaseTimes::Termination)),\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungCollector.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1232,1 +1232,1 @@\n-      _terminator(active_workers, ParCompactionManager::marking_stacks()),\n+      _terminator(active_workers, ParCompactionManager::marking_stacks(), TERMINATION_EVENT_NAME(\"Mark\")),\n@@ -1270,1 +1270,1 @@\n-      _terminator(_max_workers, ParCompactionManager::marking_stacks()) {}\n+      _terminator(_max_workers, ParCompactionManager::marking_stacks(), TERMINATION_EVENT_NAME(\"Reference Processing\")) {}\n@@ -1796,1 +1796,1 @@\n-      _terminator(active_workers, ParCompactionManager::region_task_queues()) {\n+      _terminator(active_workers, ParCompactionManager::region_task_queues(), TERMINATION_EVENT_NAME(\"Par Compact\")) {\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -206,1 +206,1 @@\n-      _terminator(max_workers, ParCompactionManager::marking_stacks()) {}\n+      _terminator(max_workers, ParCompactionManager::marking_stacks(), TERMINATION_EVENT_NAME(\"Reference Processing\")) {}\n@@ -261,1 +261,1 @@\n-    _terminator(active_workers, PSPromotionManager::vm_thread_promotion_manager()->stack_array_depth()) {\n+    _terminator(active_workers, PSPromotionManager::vm_thread_promotion_manager()->stack_array_depth(), TERMINATION_EVENT_NAME(\"Scavenge\")) {\n","filename":"src\/hotspot\/share\/gc\/parallel\/psScavenge.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"jfr\/jfrEvents.hpp\"\n@@ -33,0 +34,1 @@\n+#include \"workerThread.hpp\"\n@@ -70,1 +72,1 @@\n-TaskTerminator::TaskTerminator(uint n_threads, TaskQueueSetSuper* queue_set) :\n+TaskTerminator::TaskTerminator(uint n_threads, TaskQueueSetSuper* queue_set, const char* termination_event_name) :\n@@ -73,0 +75,1 @@\n+  _termination_event_name(termination_event_name),\n@@ -105,0 +108,8 @@\n+const char* TaskTerminator::termination_event_name() {\n+  return _termination_event_name;\n+}\n+\n+void TaskTerminator::set_termination_event_name(const char* termination_event_name) {\n+  _termination_event_name = termination_event_name;\n+}\n+\n@@ -131,0 +142,16 @@\n+class TaskTerminationTracker :public StackObj {\n+  TaskTerminator* const _terminator;\n+  uint const _worker_id;\n+  EventGCPhaseParallel _event;\n+public:\n+  TaskTerminationTracker(TaskTerminator* task_terminator, uint worker_id):\n+  _terminator(task_terminator),\n+  _worker_id(worker_id) { }\n+\n+  ~TaskTerminationTracker() {\n+    if (_event.should_commit()) {\n+      _event.commit(GCId::current(), _terminator->threads() > 1 ? _worker_id : 0, _terminator->termination_event_name());\n+    }\n+  }\n+};\n+\n@@ -135,0 +162,1 @@\n+  TaskTerminationTracker termination_tracker(this, WorkerThread::worker_id());\n","filename":"src\/hotspot\/share\/gc\/shared\/taskTerminator.cpp","additions":29,"deletions":1,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -36,0 +36,5 @@\n+#define TERMINATION_EVENT_NAME_PREFIX \"Termination\"\n+#define TERMINATION_EVENT_NAME(name) \"\" TERMINATION_EVENT_NAME_PREFIX \": \" name \"\"\n+\n+class TaskTerminationTracker;\n+\n@@ -74,0 +79,1 @@\n+  const char* _termination_event_name;\n@@ -97,1 +103,1 @@\n-  TaskTerminator(uint n_threads, TaskQueueSetSuper* queue_set);\n+  TaskTerminator(uint n_threads, TaskQueueSetSuper* queue_set, const char* termination_event_name = TERMINATION_EVENT_NAME_PREFIX);\n@@ -121,0 +127,26 @@\n+\n+  \/\/ Get termination event name\n+  const char* termination_event_name();\n+  \/\/ Set termination event name\n+  void set_termination_event_name(const char* termination_event_name);\n+\n+  uint threads() {\n+    return _n_threads;\n+  }\n+};\n+\n+class TaskTerminatorReuseMark : public StackObj {\n+private:\n+  TaskTerminator* const _terminator;\n+  const char* _original_event_name;\n+\n+public:\n+  TaskTerminatorReuseMark(TaskTerminator* terminator, uint active_workers, const char* event_name) :\n+    _terminator(terminator) {\n+    _terminator->reset_for_reuse(active_workers);\n+    _original_event_name = _terminator->termination_event_name();\n+    _terminator->set_termination_event_name(event_name);\n+  };\n+  ~TaskTerminatorReuseMark() {\n+    _terminator->set_termination_event_name(_original_event_name);\n+  }\n","filename":"src\/hotspot\/share\/gc\/shared\/taskTerminator.hpp","additions":33,"deletions":1,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"gc\/shared\/taskTerminator.hpp\"\n@@ -38,0 +39,1 @@\n+class TaskTerminator;\n","filename":"src\/hotspot\/share\/gc\/shared\/workerThread.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -224,0 +224,1 @@\n+  TaskTerminator terminator(nworkers, task_queues(), TERMINATION_EVENT_NAME(\"Concurrent Mark\"));\n@@ -227,1 +228,0 @@\n-        TaskTerminator terminator(nworkers, task_queues());\n@@ -233,1 +233,0 @@\n-        TaskTerminator terminator(nworkers, task_queues());\n@@ -239,1 +238,0 @@\n-        TaskTerminator terminator(nworkers, task_queues());\n@@ -245,1 +243,0 @@\n-        TaskTerminator terminator(nworkers, task_queues());\n@@ -270,0 +267,1 @@\n+    terminator.reset_for_reuse();\n@@ -301,1 +299,1 @@\n-  TaskTerminator terminator(nworkers, task_queues());\n+  TaskTerminator terminator(nworkers, task_queues(), TERMINATION_EVENT_NAME(\"Final Mark\"));\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentMark.cpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"}]}