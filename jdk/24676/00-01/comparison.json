{"files":[{"patch":"@@ -1010,2 +1010,1 @@\n-      WorkerTask(\"Concurrent Mark\"), _cm(cm) {\n-  }\n+      WorkerTask(\"Concurrent Mark\"), _cm(cm) { }\n@@ -1836,1 +1835,1 @@\n-  const char* _original_termination_event_name;\n+  TaskTerminatorReuseMark _ttmr;\n@@ -1859,8 +1858,2 @@\n-    WorkerTask(\"Par Remark\"), _cm(cm) {\n-    _original_termination_event_name = _cm->terminator()->termination_event_name();\n-    _cm->terminator()->reset_for_reuse(active_workers, TERMINATION_EVENT_NAME(\"Par Remark\"));\n-  }\n-\n-  ~G1CMRemarkTask() {\n-    _cm->terminator()->set_termination_event_name(_original_termination_event_name);\n-  }\n+    WorkerTask(\"Par Remark\"), _cm(cm),\n+    _ttmr(cm->terminator(), active_workers, TERMINATION_EVENT_NAME(\"Par Remark\")) {}\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -667,1 +667,2 @@\n-    _pinned_regions_recorded(false) {}\n+    _pinned_regions_recorded(false)\n+  { }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungCollector.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1231,1 +1231,1 @@\n-      _terminator(active_workers, ParCompactionManager::marking_stacks(), TERMINATION_EVENT_NAME(\"MarkFromRootsTask\")),\n+      _terminator(active_workers, ParCompactionManager::marking_stacks(), TERMINATION_EVENT_NAME(\"Mark\")),\n@@ -1261,1 +1261,0 @@\n-\n@@ -1270,1 +1269,1 @@\n-      _terminator(_max_workers, ParCompactionManager::marking_stacks(), TERMINATION_EVENT_NAME(\"ParallelCompactRefProcProxyTask\")) {}\n+      _terminator(_max_workers, ParCompactionManager::marking_stacks(), TERMINATION_EVENT_NAME(\"Reference Processing\")) {}\n@@ -1796,1 +1795,1 @@\n-      _terminator(active_workers, ParCompactionManager::region_task_queues(), TERMINATION_EVENT_NAME(\"FillDensePrefixAndCompactionTask\")) {\n+      _terminator(active_workers, ParCompactionManager::region_task_queues(), TERMINATION_EVENT_NAME(\"Par Compact\")) {\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -207,1 +207,1 @@\n-      _terminator(max_workers, ParCompactionManager::marking_stacks(), TERMINATION_EVENT_NAME(\"ParallelScavengeRefProcProxyTask\")) {}\n+      _terminator(max_workers, ParCompactionManager::marking_stacks(), TERMINATION_EVENT_NAME(\"Reference Processing\")) {}\n@@ -262,1 +262,1 @@\n-    _terminator(active_workers, PSPromotionManager::vm_thread_promotion_manager()->stack_array_depth(), TERMINATION_EVENT_NAME(\"ScavengeRootsTask\")) {\n+    _terminator(active_workers, PSPromotionManager::vm_thread_promotion_manager()->stack_array_depth(), TERMINATION_EVENT_NAME(\"Scavenge\")) {\n","filename":"src\/hotspot\/share\/gc\/parallel\/psScavenge.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"jfr\/jfrEvents.hpp\"\n@@ -33,1 +34,0 @@\n-#include \"jfr\/jfrEvents.hpp\"\n@@ -36,3 +36,0 @@\n-#define TERMINATION_EVENT_NAME_PREFIX_ASSERT(name) \\\n-assert(name == nullptr || strncmp(name, TERMINATION_EVENT_NAME_PREFIX, strlen(TERMINATION_EVENT_NAME_PREFIX)) == 0, \"Must be\")\n-\n@@ -81,3 +78,1 @@\n-  _spin_master(nullptr) {\n-  TERMINATION_EVENT_NAME_PREFIX_ASSERT(termination_event_name);\n-}\n+  _spin_master(nullptr) { }\n@@ -113,6 +108,0 @@\n-void TaskTerminator::reset_for_reuse(uint n_threads, const char* termination_event_name) {\n-  TERMINATION_EVENT_NAME_PREFIX_ASSERT(termination_event_name);\n-  reset_for_reuse(n_threads);\n-  _termination_event_name = termination_event_name;\n-}\n-\n@@ -124,1 +113,0 @@\n-  TERMINATION_EVENT_NAME_PREFIX_ASSERT(termination_event_name);\n@@ -164,2 +152,2 @@\n-    if (_terminator->_termination_event_name != nullptr && _event.should_commit()) {\n-      _event.commit(GCId::current(), _terminator->_n_threads > 1 ? _worker_id : 0, _terminator->_termination_event_name);\n+    if (_event.should_commit()) {\n+      _event.commit(GCId::current(), _terminator->threads() > 1 ? _worker_id : 0, _terminator->termination_event_name());\n@@ -245,1 +233,0 @@\n-#undef TERMINATION_EVENT_NAME_PREFIX_ASSERT\n","filename":"src\/hotspot\/share\/gc\/shared\/taskTerminator.cpp","additions":4,"deletions":17,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-#define TERMINATION_EVENT_NAME(task_name) \"\" TERMINATION_EVENT_NAME_PREFIX \":\" task_name \"\"\n+#define TERMINATION_EVENT_NAME(name) \"\" TERMINATION_EVENT_NAME_PREFIX \": \" name \"\"\n@@ -60,1 +60,0 @@\n-  friend class TaskTerminationTracker;\n@@ -104,1 +103,1 @@\n-  TaskTerminator(uint n_threads, TaskQueueSetSuper* queue_set, const char* termination_event_name = nullptr);\n+  TaskTerminator(uint n_threads, TaskQueueSetSuper* queue_set, const char* termination_event_name = TERMINATION_EVENT_NAME_PREFIX);\n@@ -128,2 +127,1 @@\n-  \/\/ Same as above but task name is set to new task name.\n-  void reset_for_reuse(uint n_threads, const char* termination_event_name);\n+\n@@ -134,0 +132,21 @@\n+\n+  uint threads() {\n+    return _n_threads;\n+  }\n+};\n+\n+class TaskTerminatorReuseMark : public StackObj {\n+private:\n+  TaskTerminator* const _terminator;\n+  const char* _original_event_name;\n+\n+public:\n+  TaskTerminatorReuseMark(TaskTerminator* terminator, uint active_workers, const char* event_name) :\n+    _terminator(terminator) {\n+    _terminator->reset_for_reuse(active_workers);\n+    _original_event_name = _terminator->termination_event_name();\n+    _terminator->set_termination_event_name(event_name);\n+  };\n+  ~TaskTerminatorReuseMark() {\n+    _terminator->set_termination_event_name(_original_event_name);\n+  }\n","filename":"src\/hotspot\/share\/gc\/shared\/taskTerminator.hpp","additions":24,"deletions":5,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -224,1 +224,1 @@\n-  TaskTerminator terminator(nworkers, task_queues(), TERMINATION_EVENT_NAME(\"Shenandoah Concurrent Mark\"));\n+  TaskTerminator terminator(nworkers, task_queues(), TERMINATION_EVENT_NAME(\"Concurrent Mark\"));\n@@ -299,1 +299,1 @@\n-  TaskTerminator terminator(nworkers, task_queues(), TERMINATION_EVENT_NAME(\"Shenandoah Final Mark\"));\n+  TaskTerminator terminator(nworkers, task_queues(), TERMINATION_EVENT_NAME(\"Final Mark\"));\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentMark.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}