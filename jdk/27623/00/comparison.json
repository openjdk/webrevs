{"files":[{"patch":"@@ -44,1 +44,0 @@\n-import jdk.internal.misc.ThreadTracker;\n@@ -1397,11 +1396,1 @@\n-    private static class ThreadTrackHolder {\n-        static final ThreadTracker TRACKER = new ThreadTracker();\n-    }\n-\n-    private static Object tryBeginLookup() {\n-        return ThreadTrackHolder.TRACKER.tryBegin();\n-    }\n-\n-    private static void endLookup(Object key) {\n-        ThreadTrackHolder.TRACKER.end(key);\n-    }\n+    private static final ScopedValue<Boolean> IN_LOOKUP = ScopedValue.newInstance();\n@@ -1410,2 +1399,1 @@\n-        Object key = tryBeginLookup();\n-        if (key == null) {\n+        if (IN_LOOKUP.isBound()) {\n@@ -1414,1 +1402,1 @@\n-        try {\n+        return ScopedValue.where(IN_LOOKUP, true).call(() -> {\n@@ -1426,3 +1414,1 @@\n-        } finally {\n-            endLookup(key);\n-        }\n+        });\n","filename":"src\/java.base\/share\/classes\/java\/net\/URL.java","additions":4,"deletions":18,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -80,0 +80,1 @@\n+        viaCircularProvider(\"circular\", CIRCULAR);\n@@ -102,0 +103,6 @@\n+    static final Consumer<Result> CIRCULAR = r -> {\n+        if (r.exitValue == 0 ||\n+                !r.output.contains(\"Circular loading of URL stream handler providers detected\")) {\n+            throw new RuntimeException(\"exitValue: \" + r.exitValue + \", output:[\" + r.output + \"]\");\n+        }\n+    };\n@@ -128,0 +135,10 @@\n+    static void viaCircularProvider(\n+            String protocol, Consumer<Result> resultChecker, String... sysProps)\n+            throws Exception {\n+        viaProviderWithTemplate(\n+                protocol,\n+                resultChecker,\n+                TEST_SRC.resolve(\"circular.provider.template\"),\n+                sysProps);\n+    }\n+\n","filename":"test\/jdk\/java\/net\/spi\/URLStreamHandlerProvider\/Basic.java","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package $package;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.net.URLStreamHandler;\n+import java.net.spi.URLStreamHandlerProvider;\n+\n+public final class Provider extends URLStreamHandlerProvider {\n+\n+    private static final String PROTOCOL = \"$protocol\";\n+\n+    @Override\n+    public URLStreamHandler createURLStreamHandler(String protocol) {\n+        try {\n+            \/\/ Trigger circular lookup\n+            URI.create(\"bogus:\/\/path\/to\/nothing\").toURL();\n+        } catch (Exception exception) {\n+            throw new RuntimeException(exception);\n+        }\n+        throw new AssertionError(\"Should not have reached here!\");\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/net\/spi\/URLStreamHandlerProvider\/circular.provider.template","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"}]}