{"files":[{"patch":"@@ -51,2 +51,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -2042,1 +2040,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -2045,8 +2042,1 @@\n-            PrivilegedAction<Boolean> a = new PrivilegedAction<Boolean>() {\n-                @Override\n-                public Boolean run() {\n-                    return Boolean.\n-                        getBoolean(\"sun.imageio.bmp.enableLinkedProfiles\");\n-                }\n-            };\n-            isLinkedProfileAllowed = AccessController.doPrivileged(a);\n+            isLinkedProfileAllowed = Boolean.getBoolean(\"sun.imageio.bmp.enableLinkedProfiles\");\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/bmp\/BMPImageReader.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-    @SuppressWarnings({\"removal\", \"restricted\"})\n+    @SuppressWarnings(\"restricted\")\n@@ -95,8 +95,1 @@\n-        java.security.AccessController.doPrivileged(\n-            new java.security.PrivilegedAction<Void>() {\n-                @Override\n-                public Void run() {\n-                    System.loadLibrary(\"javajpeg\");\n-                    return null;\n-                }\n-            });\n+        System.loadLibrary(\"javajpeg\");\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/jpeg\/JPEGImageReader.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -178,1 +178,1 @@\n-    @SuppressWarnings({\"removal\", \"restricted\"})\n+    @SuppressWarnings(\"restricted\")\n@@ -180,8 +180,1 @@\n-        java.security.AccessController.doPrivileged(\n-            new java.security.PrivilegedAction<Void>() {\n-                @Override\n-                public Void run() {\n-                    System.loadLibrary(\"javajpeg\");\n-                    return null;\n-                }\n-            });\n+        System.loadLibrary(\"javajpeg\");\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/jpeg\/JPEGImageWriter.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -31,2 +31,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -89,15 +87,12 @@\n-                AccessController.doPrivileged((PrivilegedAction<Object>) () -> {\n-                    \/* The thread must be a member of a thread group\n-                     * which will not get GCed before VM exit.\n-                     * Make its parent the top-level thread group.\n-                     *\/\n-                    ThreadGroup tg = ThreadGroupUtils.getRootThreadGroup();\n-                    streamCloser = new Thread(tg, streamCloserRunnable,\n-                                              \"StreamCloser\", 0, false);\n-                    \/* Set context class loader to null in order to avoid\n-                     * keeping a strong reference to an application classloader.\n-                     *\/\n-                    streamCloser.setContextClassLoader(null);\n-                    Runtime.getRuntime().addShutdownHook(streamCloser);\n-                    return null;\n-                });\n+                \/* The thread must be a member of a thread group\n+                 * which will not get GCed before VM exit.\n+                 * Make its parent the top-level thread group.\n+                 *\/\n+                ThreadGroup tg = ThreadGroupUtils.getRootThreadGroup();\n+                streamCloser = new Thread(tg, streamCloserRunnable,\n+                                          \"StreamCloser\", 0, false);\n+                \/* Set context class loader to null in order to avoid\n+                 * keeping a strong reference to an application classloader.\n+                 *\/\n+                streamCloser.setContextClassLoader(null);\n+                Runtime.getRuntime().addShutdownHook(streamCloser);\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/stream\/StreamCloser.java","additions":12,"deletions":17,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -63,2 +63,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -509,1 +507,1 @@\n-    private static class Privileged implements PrivilegedAction<Object> {\n+    private static class ThemeGetter {\n@@ -513,2 +511,0 @@\n-        private int type;\n-        private Object arg;\n@@ -516,8 +512,1 @@\n-        @SuppressWarnings(\"removal\")\n-        public Object doPrivileged(int type, Object arg) {\n-            this.type = type;\n-            this.arg = arg;\n-            return AccessController.doPrivileged(this);\n-        }\n-\n-        public Object run() {\n+        public Object getThemeItem(int type, Object arg) {\n@@ -621,1 +610,1 @@\n-        return (URL)new Privileged().doPrivileged(Privileged.GET_THEME_DIR, themeName);\n+        return (URL)new ThemeGetter().getThemeItem(ThemeGetter.GET_THEME_DIR, themeName);\n@@ -625,1 +614,1 @@\n-        return (String)new Privileged().doPrivileged(Privileged.GET_USER_THEME, null);\n+        return (String)new ThemeGetter().getThemeItem(ThemeGetter.GET_USER_THEME, null);\n@@ -676,1 +665,1 @@\n-                    image = (Image)new Privileged().doPrivileged(Privileged.GET_IMAGE, url);\n+                    image = (Image)new ThemeGetter().getThemeItem(ThemeGetter.GET_IMAGE, url);\n@@ -1590,12 +1579,5 @@\n-        @SuppressWarnings(\"removal\")\n-        InputStream inputStream =\n-            AccessController.doPrivileged(new PrivilegedAction<InputStream>() {\n-                public InputStream run() {\n-                    try {\n-                        return new BufferedInputStream(xmlFile.openStream());\n-                    } catch (IOException ex) {\n-                        return null;\n-                    }\n-                }\n-            });\n-\n+        InputStream inputStream = null;\n+        try {\n+            inputStream = new BufferedInputStream(xmlFile.openStream());\n+        } catch (IOException ex) {\n+        }\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/java\/swing\/plaf\/gtk\/Metacity.java","additions":10,"deletions":28,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-import java.security.AccessController;\n@@ -58,4 +57,1 @@\n-    @SuppressWarnings(\"removal\")\n-    private static final boolean JAR_SOUNDBANK_ENABLED =\n-            AccessController.doPrivileged(\n-                    new GetBooleanAction(\"jdk.sound.jarsoundbank\"));\n+    private static final boolean JAR_SOUNDBANK_ENABLED = Boolean.getBoolean(\"jdk.sound.jarsoundbank\");\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/media\/sound\/JARSoundbankReader.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -173,3 +171,1 @@\n-        @SuppressWarnings(\"removal\")\n-        String value = AccessController.doPrivileged(\n-                (PrivilegedAction<String>) () -> System.getProperty(name));\n+        String value = System.getProperty(name);\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/media\/sound\/JDK13Services.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,2 +32,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -44,1 +42,1 @@\n- * SecurityManager.doPrivileged().\n+ * SecurityManager\n@@ -77,1 +75,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -79,3 +76,1 @@\n-        final String customFile = AccessController.doPrivileged(\n-                (PrivilegedAction<String>) () -> System.getProperty(\n-                        \"javax.sound.config.file\"));\n+        final String customFile = System.getProperty(\"javax.sound.config.file\");\n@@ -87,8 +82,5 @@\n-        AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            final String home = System.getProperty(\"java.home\");\n-            if (home == null) {\n-                throw new Error(\"Can't find java.home ??\");\n-            }\n-            loadPropertiesImpl(properties, home, \"conf\", \"sound.properties\");\n-            return null;\n-        });\n+        final String home = System.getProperty(\"java.home\");\n+        if (home == null) {\n+            throw new Error(\"Can't find java.home ??\");\n+        }\n+        loadPropertiesImpl(properties, home, \"conf\", \"sound.properties\");\n@@ -127,1 +119,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -130,21 +121,1 @@\n-        \/\/ ServiceLoader creates \"lazy\" iterator instance, but it ensures that\n-        \/\/ next\/hasNext run with permissions that are restricted by whatever\n-        \/\/ creates the ServiceLoader instance, so it requires to be called from\n-        \/\/ privileged section\n-        final PrivilegedAction<Iterator<T>> psAction =\n-                new PrivilegedAction<Iterator<T>>() {\n-                    @Override\n-                    public Iterator<T> run() {\n-                        return ServiceLoader.load(providerClass).iterator();\n-                    }\n-                };\n-        final Iterator<T> ps = AccessController.doPrivileged(psAction);\n-\n-        \/\/ the iterator's hasNext() method looks through classpath for\n-        \/\/ the provider class names, so it requires read permissions\n-        PrivilegedAction<Boolean> hasNextAction = new PrivilegedAction<Boolean>() {\n-            @Override\n-            public Boolean run() {\n-                return ps.hasNext();\n-            }\n-        };\n+        final Iterator<T> ps = ServiceLoader.load(providerClass).iterator();\n@@ -152,1 +123,1 @@\n-        while (AccessController.doPrivileged(hasNextAction)) {\n+        while (ps.hasNext()) {\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/media\/sound\/JSSecurityManager.java","additions":9,"deletions":38,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -77,1 +75,1 @@\n-    @SuppressWarnings({\"removal\", \"restricted\"})\n+    @SuppressWarnings(\"restricted\")\n@@ -82,4 +80,1 @@\n-            AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-                System.loadLibrary(libName);\n-                return null;\n-            });\n+            System.loadLibrary(libName);\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/media\/sound\/Platform.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.security.AccessController;\n@@ -69,3 +68,1 @@\n-        @SuppressWarnings(\"removal\")\n-        String javaVersion = AccessController.doPrivileged(\n-                new GetPropertyAction(\"java.version\"));\n+        String javaVersion = System.getProperty(\"java.version\");\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/media\/sound\/Printer.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -39,2 +39,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -637,0 +635,4 @@\n+   static interface RunnableAction<T> {\n+        T run();\n+   }\n+\n@@ -643,1 +645,1 @@\n-            List<PrivilegedAction<InputStream>> actions = new ArrayList<>();\n+            List<RunnableAction<InputStream>> actions = new ArrayList<>();\n@@ -645,1 +647,1 @@\n-            actions.add(new PrivilegedAction<InputStream>() {\n+            actions.add(new RunnableAction<InputStream>() {\n@@ -681,1 +683,1 @@\n-            actions.add(new PrivilegedAction<InputStream>() {\n+            actions.add(new RunnableAction<InputStream>() {\n@@ -715,1 +717,1 @@\n-            actions.add(new PrivilegedAction<InputStream>() {\n+            actions.add(new RunnableAction<InputStream>() {\n@@ -732,1 +734,1 @@\n-            actions.add(new PrivilegedAction<InputStream>() {\n+            actions.add(new RunnableAction<InputStream>() {\n@@ -752,1 +754,1 @@\n-            for (PrivilegedAction<InputStream> action : actions) {\n+            for (RunnableAction<InputStream> action : actions) {\n@@ -754,2 +756,1 @@\n-                    @SuppressWarnings(\"removal\")\n-                    InputStream is = AccessController.doPrivileged(action);\n+                    InputStream is = action.run();\n@@ -781,3 +782,2 @@\n-                @SuppressWarnings(\"removal\")\n-                OutputStream out = AccessController\n-                        .doPrivileged((PrivilegedAction<OutputStream>) () -> {\n+                OutputStream out =\n+                        ((RunnableAction<OutputStream>) () -> {\n@@ -801,1 +801,1 @@\n-                        });\n+                        }).run();\n@@ -900,1 +900,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -902,17 +901,11 @@\n-        return AccessController\n-                .doPrivileged((PrivilegedAction<Properties>) () -> {\n-                    Properties p = new Properties();\n-                    String notePath = \"\/com\/sun\/media\/sound\/softsynthesizer\";\n-                    try {\n-                        Preferences prefroot = Preferences.userRoot();\n-                        if (prefroot.nodeExists(notePath)) {\n-                            Preferences prefs = prefroot.node(notePath);\n-                            String[] prefs_keys = prefs.keys();\n-                            for (String prefs_key : prefs_keys) {\n-                                String val = prefs.get(prefs_key, null);\n-                                if (val != null) {\n-                                    p.setProperty(prefs_key, val);\n-                                }\n-                            }\n-                        }\n-                    } catch (final BackingStoreException ignored) {\n+        Properties p = new Properties();\n+        String notePath = \"\/com\/sun\/media\/sound\/softsynthesizer\";\n+        try {\n+            Preferences prefroot = Preferences.userRoot();\n+            if (prefroot.nodeExists(notePath)) {\n+                Preferences prefs = prefroot.node(notePath);\n+                String[] prefs_keys = prefs.keys();\n+                for (String prefs_key : prefs_keys) {\n+                    String val = prefs.get(prefs_key, null);\n+                    if (val != null) {\n+                        p.setProperty(prefs_key, val);\n@@ -920,2 +913,5 @@\n-                    return p;\n-                });\n+                }\n+            }\n+        } catch (final BackingStoreException ignored) {\n+        }\n+        return p;\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/media\/sound\/SoftSynthesizer.java","additions":30,"deletions":34,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -168,1 +168,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -170,2 +169,1 @@\n-        GetPropertyAction a = new GetPropertyAction(\"java.io.tmpdir\");\n-        return AccessController.doPrivileged(a);\n+        return System.getProperty(\"java.io.tmpdir\");\n","filename":"src\/java.desktop\/share\/classes\/javax\/imageio\/ImageIO.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,2 +31,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -401,1 +399,0 @@\n-            final String className = formatClassName;\n@@ -404,3 +401,1 @@\n-            PrivilegedAction<Class<?>> pa = () -> { return getMetadataFormatClass(className); };\n-            @SuppressWarnings(\"removal\")\n-            Class<?> cls = AccessController.doPrivileged(pa);\n+            Class<?> cls =  getMetadataFormatClass(formatClassName);\n","filename":"src\/java.desktop\/share\/classes\/javax\/imageio\/metadata\/IIOMetadata.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-import java.security.PrivilegedAction;\n-import java.security.AccessController;\n@@ -200,1 +198,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -202,23 +199,8 @@\n-        \/*\n-          We need to load installed providers\n-          in the privileged mode in order to\n-          be able read corresponding jar files even if\n-          file read capability is restricted (like the\n-          applet context case).\n-         *\/\n-        PrivilegedAction<Object> doRegistration =\n-            new PrivilegedAction<Object>() {\n-                public Object run() {\n-                    Iterator<Class<?>> categories = getCategories();\n-                    while (categories.hasNext()) {\n-                        @SuppressWarnings(\"unchecked\")\n-                        Class<IIOServiceProvider> c = (Class<IIOServiceProvider>)categories.next();\n-                        for (IIOServiceProvider p : ServiceLoader.loadInstalled(c)) {\n-                            registerServiceProvider(p);\n-                        }\n-                    }\n-                    return this;\n-                }\n-            };\n-\n-        AccessController.doPrivileged(doRegistration);\n+        Iterator<Class<?>> categories = getCategories();\n+        while (categories.hasNext()) {\n+            @SuppressWarnings(\"unchecked\")\n+            Class<IIOServiceProvider> c = (Class<IIOServiceProvider>)categories.next();\n+            for (IIOServiceProvider p : ServiceLoader.loadInstalled(c)) {\n+                registerServiceProvider(p);\n+            }\n+        }\n","filename":"src\/java.desktop\/share\/classes\/javax\/imageio\/spi\/IIORegistry.java","additions":8,"deletions":26,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -587,4 +585,1 @@\n-            final String className = formatClassName;\n-            PrivilegedAction<Class<?>> pa = () -> { return getMetadataFormatClass(className); };\n-            @SuppressWarnings(\"removal\")\n-            Class<?> cls = AccessController.doPrivileged(pa);\n+            Class<?> cls = getMetadataFormatClass(formatClassName);\n","filename":"src\/java.desktop\/share\/classes\/javax\/imageio\/spi\/ImageReaderWriterSpi.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,3 +28,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -734,2 +731,0 @@\n-    @SuppressWarnings(\"removal\")\n-    final Map<Class<?>, AccessControlContext> accMap = new HashMap<>();\n@@ -751,1 +746,0 @@\n-        accMap.put(provider.getClass(), AccessController.getContext());\n@@ -776,1 +770,0 @@\n-            accMap.remove(provider.getClass());\n@@ -818,1 +811,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -825,9 +817,2 @@\n-            if (provider instanceof RegisterableService) {\n-                RegisterableService rs = (RegisterableService)provider;\n-                AccessControlContext acc = accMap.get(provider.getClass());\n-                if (acc != null || System.getSecurityManager() == null) {\n-                    AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-                    rs.onDeregistration(registry, category);\n-                        return null;\n-                    }, acc);\n-                }\n+            if (provider instanceof RegisterableService rs) {\n+                rs.onDeregistration(registry, category);\n@@ -837,1 +822,0 @@\n-        accMap.clear();\n","filename":"src\/java.desktop\/share\/classes\/javax\/imageio\/spi\/ServiceRegistry.java","additions":2,"deletions":18,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -413,4 +413,1 @@\n-    @SuppressWarnings(\"removal\")\n-    public static final String hostEncoding =\n-            java.security.AccessController.doPrivileged(\n-                  new sun.security.action.GetPropertyAction(\"file.encoding\"));\n+    public static final String hostEncoding = System.getProperty(\"file.encoding\");\n","filename":"src\/java.desktop\/share\/classes\/javax\/print\/DocFlavor.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -338,1 +338,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -347,24 +346,4 @@\n-            try {\n-                java.security.AccessController.doPrivileged(\n-                     new java.security.PrivilegedExceptionAction<Object>() {\n-                        public Object run() {\n-                            Iterator<PrintServiceLookup> iterator =\n-                                ServiceLoader.load(PrintServiceLookup.class).\n-                                iterator();\n-                            ArrayList<PrintServiceLookup> los = getListOfLookupServices();\n-                            while (iterator.hasNext()) {\n-                                try {\n-                                    los.add(iterator.next());\n-                                }  catch (ServiceConfigurationError err) {\n-                                    \/* In the applet case, we continue *\/\n-                                    if (System.getSecurityManager() != null) {\n-                                        err.printStackTrace();\n-                                    } else {\n-                                        throw err;\n-                                    }\n-                                }\n-                            }\n-                            return null;\n-                        }\n-                });\n-            } catch (java.security.PrivilegedActionException e) {\n+            Iterator<PrintServiceLookup> iterator = ServiceLoader.load(PrintServiceLookup.class).iterator();\n+            ArrayList<PrintServiceLookup> los = getListOfLookupServices();\n+            while (iterator.hasNext()) {\n+                los.add(iterator.next());\n@@ -372,1 +351,0 @@\n-\n","filename":"src\/java.desktop\/share\/classes\/javax\/print\/PrintServiceLookup.java","additions":4,"deletions":26,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -186,1 +186,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -190,33 +189,14 @@\n-          ArrayList<StreamPrintServiceFactory> listOfFactories = getListOfFactories();\n-            if (listOfFactories != null) {\n-                return listOfFactories;\n-            } else {\n-                listOfFactories = initListOfFactories();\n-            }\n-\n-            try {\n-                java.security.AccessController.doPrivileged(\n-                     new java.security.PrivilegedExceptionAction<Object>() {\n-                        public Object run() {\n-                            Iterator<StreamPrintServiceFactory> iterator =\n-                                ServiceLoader.load\n-                                (StreamPrintServiceFactory.class).iterator();\n-                            ArrayList<StreamPrintServiceFactory> lof = getListOfFactories();\n-                            while (iterator.hasNext()) {\n-                                try {\n-                                    lof.add(iterator.next());\n-                                }  catch (ServiceConfigurationError err) {\n-                                     \/* In the applet case, we continue *\/\n-                                    if (System.getSecurityManager() != null) {\n-                                        err.printStackTrace();\n-                                    } else {\n-                                        throw err;\n-                                    }\n-                                }\n-                            }\n-                            return null;\n-                        }\n-                });\n-            } catch (java.security.PrivilegedActionException e) {\n-            }\n-            return listOfFactories;\n+              ArrayList<StreamPrintServiceFactory> listOfFactories = getListOfFactories();\n+              if (listOfFactories != null) {\n+                  return listOfFactories;\n+              } else {\n+                  listOfFactories = initListOfFactories();\n+              }\n+\n+              Iterator<StreamPrintServiceFactory> iterator =\n+                  ServiceLoader.load(StreamPrintServiceFactory.class).iterator();\n+              ArrayList<StreamPrintServiceFactory> lof = getListOfFactories();\n+              while (iterator.hasNext()) {\n+                  lof.add(iterator.next());\n+              }\n+              return listOfFactories;\n","filename":"src\/java.desktop\/share\/classes\/javax\/print\/StreamPrintServiceFactory.java","additions":14,"deletions":34,"binary":false,"changes":48,"status":"modified"}]}