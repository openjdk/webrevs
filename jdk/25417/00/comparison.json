{"files":[{"patch":"@@ -1158,5 +1158,1 @@\n-                Type enclosingType = getEnclosingType();\n-                while (enclosingType.hasTag(TYPEVAR)) {\n-                    enclosingType = enclosingType.getUpperBound();\n-                }\n-                allparams_field = getTypeArguments().prependList(enclosingType.allparams());\n+                allparams_field = getTypeArguments().prependList(getEnclosingType().allparams());\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Type.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,62 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8343580\n- * @summary Type error with inner classes of generic classes in functions generic by outer\n- * @compile T8343580.java\n- *\/\n-\n-class T8343580 {\n-   static abstract class Getters<T> {\n-      abstract class Getter {\n-         abstract T get();\n-      }\n-   }\n-\n-   static class Usage1<T, G extends Getters<T>> {\n-      public T test(G.Getter getter) {\n-         return getter.get();\n-      }\n-   }\n-\n-   static class Usage2<T, U extends Getters<T>, G extends U> {\n-      public T test(G.Getter getter) {\n-         return getter.get();\n-      }\n-   }\n-\n-   static class Usage3<T, U extends T, G extends Getters<T>> {\n-      public T test(G.Getter getter) {\n-         return getter.get();\n-      }\n-   }\n-\n-   class G2<K> extends Getters<K> {}\n-   static class Usage4<M, L extends G2<M>> {\n-      M test(L.Getter getter) {\n-         return getter.get();\n-      }\n-   }\n-}\n","filename":"test\/langtools\/tools\/javac\/T8343580.java","additions":0,"deletions":62,"binary":false,"changes":62,"status":"deleted"}]}