{"files":[{"patch":"@@ -353,0 +353,1 @@\n+    SETBCR_OPCODE = (31u << OPCODE_SHIFT | 416u << 1),\n@@ -1783,0 +1784,2 @@\n+  inline void setbcr(Register d, int biint);\n+  inline void setbcr(Register d, ConditionRegister cr, Condition cc);\n","filename":"src\/hotspot\/cpu\/ppc\/assembler_ppc.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -422,0 +422,5 @@\n+inline void Assembler::setbcr(Register d, int biint)\n+                                                  { emit_int32(SETBCR_OPCODE | rt(d) | bi(biint)); }\n+inline void Assembler::setbcr(Register d, ConditionRegister cr, Condition cc) {\n+  setbcr(d, bi0(cr, cc));\n+}\n","filename":"src\/hotspot\/cpu\/ppc\/assembler_ppc.inline.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2386,3 +2386,1 @@\n-  neg(R0, result);\n-  orr(result, result, R0);\n-  srdi(result, result, 63);\n+  normalize_bool(result, R0, true);\n@@ -2398,3 +2396,1 @@\n-  neg(R0, linear_result);\n-  orr(linear_result, linear_result, R0);\n-  srdi(linear_result, linear_result, 63);\n+  normalize_bool(linear_result, R0, true);\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.cpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -181,0 +181,2 @@\n+  \/\/ Branch-free implementation to convert !=0 to 1.\n+  void inline normalize_bool(Register dst, Register temp, bool use_64bit);\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -267,0 +267,22 @@\n+\/\/ Branch-free implementation to convert !=0 to 1\n+\/\/ Set register dst to 1 if dst is non-zero. Use setbcr instruction on Power10.\n+inline void MacroAssembler::normalize_bool(Register dst, Register temp, bool is_64bit) {\n+\n+  if (VM_Version::has_brw()) {\n+    if (is_64bit) {\n+      cmpdi(CCR0, dst, 0);\n+    } else {\n+      cmpwi(CCR0, dst, 0);\n+    }\n+    setbcr(dst, CCR0, Assembler::equal);\n+  } else {\n+    neg(temp, dst);\n+    orr(temp, dst, temp);\n+    if (is_64bit) {\n+      srdi(dst, temp, 63);\n+    } else {\n+      srwi(dst, temp, 31);\n+    }\n+  }\n+}\n+\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.inline.hpp","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2475,5 +2475,1 @@\n-      Label skip_modify;\n-      __ cmpwi(CCR0, R3_RET, 0);\n-      __ beq(CCR0, skip_modify);\n-      __ li(R3_RET, 1);\n-      __ bind(skip_modify);\n+      __ normalize_bool(R3_RET, R0, false);\n","filename":"src\/hotspot\/cpu\/ppc\/sharedRuntime_ppc.cpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -375,3 +375,1 @@\n-    __ neg(R0, R3_RET);\n-    __ orr(R0, R3_RET, R0);\n-    __ srwi(R3_RET, R0, 31);\n+    __ normalize_bool(R3_RET, R0, false);\n","filename":"src\/hotspot\/cpu\/ppc\/templateInterpreterGenerator_ppc.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"}]}