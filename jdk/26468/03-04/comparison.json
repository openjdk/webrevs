{"files":[{"patch":"@@ -31,0 +31,3 @@\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+import jdk.jfr.consumer.EventStream;\n@@ -49,2 +52,3 @@\n-        \"-Xmx32m\",\n-        \"-XX:StartFlightRecording:path-to-gc-roots=true,dumponexit=true,filename=oom.jfr\",\n+        \"-Xmx64m\",\n+        \"-XX:TLABSize=2k\",\n+        \"-XX:StartFlightRecording:dumponexit=true,filename=oom.jfr\",\n@@ -64,1 +68,1 @@\n-        var args = new ArrayList<String>(DEFAULT_LEAKER_ARGS);\n+        List<String> args = new ArrayList<>(DEFAULT_LEAKER_ARGS);\n@@ -68,6 +72,0 @@\n-        var p = ProcessTools.createTestJavaProcessBuilder(args).start();\n-        p.waitFor();\n-        var output = new OutputAnalyzer(p);\n-        if (!output.contains(\"java.lang.OutOfMemoryError\")) {\n-            throw new RuntimeException(\"OutOfMemoryError did not happen.\");\n-        }\n@@ -75,5 +73,7 @@\n-        \/\/ Check recording file, and load all of events\n-        var jfrFileName = shouldCrash ? String.format(\"hs_err_pid%d.jfr\", p.pid()) : \"oom.jfr\";\n-        var jfrPath = Path.of(jfrFileName);\n-        Asserts.assertTrue(Files.exists(jfrPath), \"No jfr recording file \" + jfrFileName + \" exists\");\n-        var events = RecordingFile.readAllEvents(jfrPath);\n+        while (true) {\n+            Process p = ProcessTools.createTestJavaProcessBuilder(args).start();\n+            p.waitFor();\n+            OutputAnalyzer output = new OutputAnalyzer(p);\n+            if (!output.contains(\"java.lang.OutOfMemoryError\")) {\n+                throw new RuntimeException(\"OutOfMemoryError did not happen.\");\n+            }\n@@ -81,9 +81,4 @@\n-        \/\/ Check shutdown reason\n-        var shutdownEvent = events.stream()\n-                                  .filter(e -> e.getEventType().getName().equals(\"jdk.Shutdown\"))\n-                                  .findAny()\n-                                  .get();\n-        String shutdownReason = shouldCrash\n-            ? \"VM Error\"\n-            : \"No remaining non-daemon Java threads\";\n-        Asserts.assertEquals(shutdownReason, shutdownEvent.getString(\"reason\"));\n+            \/\/ Check recording file\n+            String jfrFileName = shouldCrash ? String.format(\"hs_err_pid%d.jfr\", p.pid()) : \"oom.jfr\";\n+            Path jfrPath = Path.of(jfrFileName);\n+            Asserts.assertTrue(Files.exists(jfrPath), \"No jfr recording file \" + jfrFileName + \" exists\");\n@@ -91,8 +86,10 @@\n-        \/\/ Check dump reason\n-        if (shouldCrash) {\n-            var dumpReasonEvent = events.stream()\n-                                        .filter(e -> e.getEventType().getName().equals(\"jdk.DumpReason\"))\n-                                        .findAny()\n-                                        .get();\n-            Asserts.assertEquals(\"Out of Memory\", dumpReasonEvent.getString(\"reason\"));\n-        }\n+            \/\/ Check events\n+            AtomicLong oldObjects = new AtomicLong();\n+            AtomicReference<String> shutdownReason = new AtomicReference<>();\n+            AtomicReference<String> dumpReason = new AtomicReference<>();\n+            try (EventStream stream = EventStream.openFile(jfrPath)) {\n+                stream.onEvent(\"jdk.OldObjectSample\", e -> oldObjects.incrementAndGet());\n+                stream.onEvent(\"jdk.Shutdown\", e -> shutdownReason.set(e.getString(\"reason\")));\n+                stream.onEvent(\"jdk.DumpReason\", e -> dumpReason.set(e.getString(\"reason\")));\n+                stream.start();\n+            }\n@@ -100,5 +97,19 @@\n-        \/\/ Check OldObjectSample events\n-        var numEvents = events.stream()\n-                              .filter(e -> e.getEventType().getName().equals(\"jdk.OldObjectSample\"))\n-                              .count();\n-        Asserts.assertGreaterThan(numEvents, 0L);\n+            \/\/ Check OldObjectSample events\n+            if (oldObjects.get() > 0L) {\n+                \/\/ Check shutdown reason\n+                String expectedShutdownReason = shouldCrash\n+                    ? \"VM Error\"\n+                    : \"No remaining non-daemon Java threads\";\n+                Asserts.assertEquals(expectedShutdownReason, shutdownReason.get());\n+\n+                \/\/ Check dump reason - it would appear on emergency dump only\n+                if (shouldCrash) {\n+                    Asserts.assertEquals(\"Out of Memory\", dumpReason.get());\n+                }\n+\n+                \/\/ Passed this test\n+                return;\n+            }\n+\n+            System.out.println(\"Could not find OldObjectSample events. Retrying.\");\n+        }\n","filename":"test\/jdk\/jdk\/jfr\/event\/oldobject\/TestEmergencyDumpAtOOM.java","additions":47,"deletions":36,"binary":false,"changes":83,"status":"modified"}]}