{"files":[{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, NTT DATA.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.event.oldobject;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import jdk.jfr.consumer.RecordingFile;\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+\/**\n+* @test\n+* @bug 8364090\n+* @summary Tests Dump reason and OldObjectSample events at OOME.\n+* @requires vm.flagless\n+* @requires vm.hasJFR\n+* @library \/test\/lib\n+* @run main\/othervm jdk.jfr.event.oldobject.TestEmergencyDumpAtOOM\n+*\/\n+public class TestEmergencyDumpAtOOM {\n+\n+    public static List<String> DEFAULT_LEAKER_ARGS = List.of(\n+        \"-Xmx32m\",\n+        \"-XX:StartFlightRecording:path-to-gc-roots=true,dumponexit=true,filename=oom.jfr\",\n+        Leaker.class.getName()\n+    );\n+\n+    public static class Leaker {\n+        public static void main(String... args) {\n+            List<byte[]> list = new ArrayList<>();\n+            while (true) {\n+                list.add(new byte[1024]);\n+            }\n+        }\n+    }\n+\n+    private static void test(boolean shouldCrash) throws Exception {\n+        var args = new ArrayList<String>(DEFAULT_LEAKER_ARGS);\n+        if (shouldCrash) {\n+            args.add(0, \"-XX:+CrashOnOutOfMemoryError\");\n+        }\n+        var p = ProcessTools.createTestJavaProcessBuilder(args).start();\n+        p.waitFor();\n+        var output = new OutputAnalyzer(p);\n+        if (!output.contains(\"java.lang.OutOfMemoryError\")) {\n+            throw new RuntimeException(\"OutOfMemoryError did not happen.\");\n+        }\n+\n+        \/\/ Check recording file, and load all of events\n+        var jfrFileName = shouldCrash ? String.format(\"hs_err_pid%d.jfr\", p.pid()) : \"oom.jfr\";\n+        var jfrPath = Path.of(jfrFileName);\n+        Asserts.assertTrue(Files.exists(jfrPath), \"No jfr recording file \" + jfrFileName + \" exists\");\n+        var events = RecordingFile.readAllEvents(jfrPath);\n+\n+        \/\/ Check shutdown reason\n+        var shutdownEvent = events.stream()\n+                                  .filter(e -> e.getEventType().getName().equals(\"jdk.Shutdown\"))\n+                                  .findAny()\n+                                  .get();\n+        String shutdownReason = shouldCrash\n+            ? \"VM Error\"\n+            : \"No remaining non-daemon Java threads\";\n+        Asserts.assertEquals(shutdownReason, shutdownEvent.getString(\"reason\"));\n+\n+        \/\/ Check dump reason\n+        if (shouldCrash) {\n+            var dumpReasonEvent = events.stream()\n+                                        .filter(e -> e.getEventType().getName().equals(\"jdk.DumpReason\"))\n+                                        .findAny()\n+                                        .get();\n+            Asserts.assertEquals(\"Out of Memory\", dumpReasonEvent.getString(\"reason\"));\n+        }\n+\n+        \/\/ Check OldObjectSample events\n+        var numEvents = events.stream()\n+                              .filter(e -> e.getEventType().getName().equals(\"jdk.OldObjectSample\"))\n+                              .count();\n+        Asserts.assertGreaterThan(numEvents, 0L);\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        test(true);\n+        test(false);\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/event\/oldobject\/TestEmergencyDumpAtOOM.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"}]}