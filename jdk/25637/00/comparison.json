{"files":[{"patch":"@@ -1302,1 +1302,3 @@\n-    <Field type=\"Tickspan\" name=\"average\" label=\"Average\" description=\"An approximation of the wall-clock time it took for the method to execute\" \/>\n+    <Field type=\"Tickspan\" name=\"minimum\" label=\"Minimum\" description=\"An approximation of the minimum wall-clock time it took for the method to execute\" \/>\n+    <Field type=\"Tickspan\" name=\"average\" label=\"Average\" description=\"An approximation of the average wall-clock time it took for the method to execute\" \/>\n+    <Field type=\"Tickspan\" name=\"maximum\" label=\"Maximum\" description=\"An approximation of the maximum wall-clock time it took for the method to execute\" \/>\n","filename":"src\/hotspot\/share\/jfr\/metadata\/metadata.xml","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -45,0 +45,4 @@\n+    @Label(\"Minimum Time\")\n+    @Timespan(Timespan.TICKS)\n+    public long minimum;\n+\n@@ -49,1 +53,5 @@\n-    public static void commit(long start, long method, long invocations, long average) {\n+    @Label(\"Maximum Time\")\n+    @Timespan(Timespan.TICKS)\n+    public long maximum;\n+\n+    public static void commit(long start, long method, long invocations, long minimum, long average, long maximum) {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/MethodTimingEvent.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -451,1 +451,1 @@\n-table = \"COLUMN 'Timed Method', 'Invocations', 'Average Time'\n+table = \"COLUMN 'Timed Method', 'Invocations', 'Min. Tim', 'Max. Time', 'Average Time'\n@@ -453,1 +453,1 @@\n-         SELECT LAST_BATCH(method) AS M, LAST_BATCH(invocations), LAST_BATCH(average)\n+         SELECT LAST_BATCH(method) AS M, LAST_BATCH(invocations), LAST_BATCH(minimum), LAST_BATCH(maximum), LAST_BATCH(average)\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/query\/view.ini","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -149,0 +149,1 @@\n+        OBJECT.updateMinMax(duration);\n@@ -156,0 +157,1 @@\n+            entry.updateMinMax(duration);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tracing\/PlatformTracer.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,1 +64,6 @@\n-                MethodTimingEvent.commit(timestamp, methodId, invocations, average);\n+                long min = tm.minimum().get();\n+                if (min == Long.MAX_VALUE) {\n+                    min = Long.MIN_VALUE; \/\/ Signals that the value is missing\n+                }\n+                long max = tm.maximum().get();\n+                MethodTimingEvent.commit(timestamp, methodId, invocations, min, average, max);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tracing\/TimedClass.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-record TimedMethod(AtomicLong invocations, AtomicLong time, Method method, AtomicBoolean published) {\n+record TimedMethod(AtomicLong invocations, AtomicLong time, AtomicLong minimum, AtomicLong maximum, Method method, AtomicBoolean published) {\n@@ -38,1 +38,26 @@\n-        this(new AtomicLong(), new AtomicLong(), method, new AtomicBoolean());\n+        this(new AtomicLong(), new AtomicLong(), new AtomicLong(Long.MAX_VALUE), new AtomicLong(Long.MIN_VALUE), method, new AtomicBoolean());\n+    }\n+\n+    public void updateMinMax(long duration) {\n+        if (duration > maximum.getPlain()) {\n+            while (true) {\n+                long max = maximum.get();\n+                if (duration <= max) {\n+                    return;\n+                }\n+                if (maximum.weakCompareAndSetVolatile(max, duration)) {\n+                    return;\n+                }\n+            }\n+        }\n+        if (duration < minimum.getPlain()) {\n+            while (true) {\n+                long min = minimum.get();\n+                if (duration >= min) {\n+                    return;\n+                }\n+                if (minimum.weakCompareAndSetVolatile(min, duration)) {\n+                    return;\n+                }\n+            }\n+        }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tracing\/TimedMethod.java","additions":27,"deletions":2,"binary":false,"changes":29,"status":"modified"}]}