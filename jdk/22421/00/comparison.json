{"files":[{"patch":"@@ -47,2 +47,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -186,1 +184,1 @@\n-        PrivilegedAction<String> act = () -> System.getProperty(\n+        String prop = System.getProperty(\n@@ -188,2 +186,0 @@\n-        @SuppressWarnings(\"removal\")\n-        String prop = AccessController.doPrivileged(act);\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/Connection.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,4 +28,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n@@ -44,3 +40,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private final AccessControlContext acc = AccessController.getContext();\n-\n@@ -53,1 +46,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -64,6 +56,1 @@\n-            try {\n-                PrivilegedExceptionAction<Object> pa = () -> Obj.decodeObject(attrs);\n-                obj = AccessController.doPrivileged(pa, acc);\n-            } catch (PrivilegedActionException e) {\n-                throw (NamingException)e.getException();\n-            }\n+            obj = Obj.decodeObject(attrs);\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/LdapBindingEnumeration.java","additions":2,"deletions":15,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,2 +35,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -223,1 +221,1 @@\n-            getMechsAllowedToSendCredentials();\n+            System.getProperty(ALLOWED_MECHS_SP);\n@@ -2709,7 +2707,0 @@\n-    \/\/ Load 'mechsAllowedToSendCredentials' system property value\n-    @SuppressWarnings(\"removal\")\n-    private static String getMechsAllowedToSendCredentials() {\n-        PrivilegedAction<String> pa = () -> System.getProperty(ALLOWED_MECHS_SP);\n-        return System.getSecurityManager() == null ? pa.run() : AccessController.doPrivileged(pa);\n-    }\n-\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/LdapCtx.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -35,1 +33,0 @@\n-import sun.security.util.SecurityConstants;\n@@ -53,1 +50,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -55,17 +51,3 @@\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm == null) {\n-            providers = ServiceLoader.load(\n-                    LdapDnsProvider.class,\n-                    ClassLoader.getSystemClassLoader());\n-        } else {\n-            final PrivilegedAction<ServiceLoader<LdapDnsProvider>> pa =\n-                    () -> ServiceLoader.load(\n-                            LdapDnsProvider.class,\n-                            ClassLoader.getSystemClassLoader());\n-\n-            providers = AccessController.doPrivileged(\n-                pa,\n-                null,\n-                new RuntimePermission(\"ldapDnsProvider\"),\n-                SecurityConstants.GET_CLASSLOADER_PERMISSION);\n-        }\n+        providers = ServiceLoader.load(\n+                LdapDnsProvider.class,\n+                ClassLoader.getSystemClassLoader());\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/LdapDnsProviderService.java","additions":4,"deletions":22,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,2 +37,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -63,1 +61,1 @@\n-        \"all\".equalsIgnoreCase(getProperty(DEBUG, null));\n+        \"all\".equalsIgnoreCase(System.getProperty(DEBUG));\n@@ -66,1 +64,1 @@\n-        \"fine\".equalsIgnoreCase(getProperty(DEBUG, null));\n+        \"fine\".equalsIgnoreCase(System.getProperty(DEBUG));\n@@ -123,1 +121,1 @@\n-        maxSize = getInteger(MAX_POOL_SIZE, DEFAULT_MAX_POOL_SIZE);\n+        maxSize = Integer.getInteger(MAX_POOL_SIZE, DEFAULT_MAX_POOL_SIZE);\n@@ -125,1 +123,1 @@\n-        prefSize = getInteger(PREF_POOL_SIZE, DEFAULT_PREF_POOL_SIZE);\n+        prefSize = Integer.getInteger(PREF_POOL_SIZE, DEFAULT_PREF_POOL_SIZE);\n@@ -127,1 +125,1 @@\n-        initSize = getInteger(INIT_POOL_SIZE, DEFAULT_INIT_POOL_SIZE);\n+        initSize = Integer.getInteger(INIT_POOL_SIZE, DEFAULT_INIT_POOL_SIZE);\n@@ -129,1 +127,1 @@\n-        idleTimeout = getLong(POOL_TIMEOUT, DEFAULT_TIMEOUT);\n+        idleTimeout = Long.getLong(POOL_TIMEOUT, DEFAULT_TIMEOUT);\n@@ -132,1 +130,1 @@\n-        String str = getProperty(POOL_AUTH, DEFAULT_AUTH_MECHS);\n+        String str = System.getProperty(POOL_AUTH, DEFAULT_AUTH_MECHS);\n@@ -150,1 +148,1 @@\n-        str= getProperty(POOL_PROTOCOL, DEFAULT_PROTOCOLS);\n+        str = System.getProperty(POOL_PROTOCOL, DEFAULT_PROTOCOLS);\n@@ -174,1 +172,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -177,11 +174,7 @@\n-        PrivilegedAction<Void> pa = new PrivilegedAction<Void>() {\n-            public Void run() {\n-                Thread t = InnocuousThread.newSystemThread(\n-                        \"LDAP PoolCleaner\",\n-                        new PoolCleaner(idleTimeout, pools));\n-                assert t.getContextClassLoader() == null;\n-                t.setDaemon(true);\n-                t.start();\n-                return null;\n-            }};\n-        AccessController.doPrivileged(pa);\n+        Thread t = InnocuousThread.newSystemThread(\n+                \"LDAP PoolCleaner\",\n+                new PoolCleaner(idleTimeout, pools));\n+        assert t.getContextClassLoader() == null;\n+        t.setDaemon(true);\n+        t.start();\n+\n@@ -402,18 +395,0 @@\n-\n-    @SuppressWarnings(\"removal\")\n-    private static final String getProperty(final String propName, final String defVal) {\n-        PrivilegedAction<String> pa = () -> System.getProperty(propName, defVal);\n-        return AccessController.doPrivileged(pa);\n-    }\n-\n-    @SuppressWarnings(\"removal\")\n-    private static final int getInteger(final String propName, final int defVal) {\n-        PrivilegedAction<Integer> pa = () -> Integer.getInteger(propName, defVal);\n-        return AccessController.doPrivileged(pa);\n-    }\n-\n-    @SuppressWarnings(\"removal\")\n-    private static final long getLong(final String propName, final long defVal) {\n-        PrivilegedAction<Long> pa = () -> Long.getLong(propName, defVal);\n-        return AccessController.doPrivileged(pa);\n-    }\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/LdapPoolManager.java","additions":16,"deletions":41,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,4 +28,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n@@ -48,3 +44,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private final AccessControlContext acc = AccessController.getContext();\n-\n@@ -64,1 +57,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -124,6 +116,1 @@\n-                try {\n-                    PrivilegedExceptionAction<Object> pea = () -> Obj.decodeObject(attrs);\n-                    obj = AccessController.doPrivileged(pea, acc);\n-                } catch (PrivilegedActionException e) {\n-                    throw (NamingException)e.getException();\n-                }\n+                obj = Obj.decodeObject(attrs);\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/LdapSearchEnumeration.java","additions":2,"deletions":15,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,2 +32,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -76,2 +74,0 @@\n-        PrivilegedAction<String> action = () ->\n-                System.getProperty(PARSE_MODE_PROP, DEFAULT_PARSE_MODE.toString());\n@@ -80,2 +76,1 @@\n-            @SuppressWarnings(\"removal\")\n-            String mode = AccessController.doPrivileged(action);\n+            String mode = System.getProperty(PARSE_MODE_PROP, DEFAULT_PARSE_MODE.toString());\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/LdapURL.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -35,1 +33,0 @@\n-import java.util.ServiceConfigurationError;\n@@ -184,1 +181,1 @@\n-                StartTlsResponse.class, getContextClassLoader());\n+                StartTlsResponse.class, Thread.currentThread().getContextClassLoader());\n@@ -187,1 +184,1 @@\n-        while (resp == null && privilegedHasNext(iter)) {\n+        while (resp == null && iter.hasNext()) {\n@@ -219,15 +216,0 @@\n-    \/*\n-     * Acquire the class loader associated with this thread.\n-     *\/\n-    @SuppressWarnings(\"removal\")\n-    private final ClassLoader getContextClassLoader() {\n-        PrivilegedAction<ClassLoader> pa = Thread.currentThread()::getContextClassLoader;\n-        return AccessController.doPrivileged(pa);\n-    }\n-\n-    @SuppressWarnings(\"removal\")\n-    private static final boolean privilegedHasNext(final Iterator<StartTlsResponse> iter) {\n-        PrivilegedAction<Boolean> pa = iter::hasNext;\n-        return AccessController.doPrivileged(pa);\n-    }\n-\n","filename":"src\/java.naming\/share\/classes\/javax\/naming\/ldap\/StartTlsRequest.java","additions":3,"deletions":21,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -56,5 +56,0 @@\n-    \/\/ The {@code RuntimePermission(\"ldapDnsProvider\")} is\n-    \/\/ necessary to subclass and instantiate the {@code LdapDnsProvider} class.\n-    private static final RuntimePermission DNSPROVIDER_PERMISSION =\n-            new RuntimePermission(\"ldapDnsProvider\");\n-\n@@ -65,14 +60,0 @@\n-        this(checkPermission());\n-    }\n-\n-    private LdapDnsProvider(Void unused) {\n-        \/\/ nothing to do.\n-    }\n-\n-    private static Void checkPermission() {\n-        @SuppressWarnings(\"removal\")\n-        final SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(DNSPROVIDER_PERMISSION);\n-        }\n-        return null;\n","filename":"src\/java.naming\/share\/classes\/javax\/naming\/ldap\/spi\/LdapDnsProvider.java","additions":0,"deletions":19,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -474,1 +472,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -495,10 +492,2 @@\n-            if (System.getSecurityManager() == null) {\n-                loader = Thread.currentThread().getContextClassLoader();\n-                if (loader == null) loader = ClassLoader.getSystemClassLoader();\n-            } else {\n-                PrivilegedAction<ClassLoader> pa = () -> {\n-                    ClassLoader cl = Thread.currentThread().getContextClassLoader();\n-                    return (cl == null) ? ClassLoader.getSystemClassLoader() : cl;\n-                };\n-                loader = AccessController.doPrivileged(pa);\n-            }\n+            loader = Thread.currentThread().getContextClassLoader();\n+            if (loader == null) loader = ClassLoader.getSystemClassLoader();\n@@ -573,6 +562,0 @@\n-\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager security = System.getSecurityManager();\n-            if (security != null) {\n-                security.checkSetFactory();\n-            }\n","filename":"src\/java.naming\/share\/classes\/javax\/naming\/spi\/NamingManager.java","additions":2,"deletions":19,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -72,1 +72,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -77,4 +76,3 @@\n-        PrivilegedAction<Void> pa = () -> {\n-            HashMap<String, String> attrs = new HashMap<>(2);\n-            attrs.put(\"LDAPSchema\", \"RFC2587\");\n-            attrs.put(\"ImplementedIn\", \"Software\");\n+        HashMap<String, String> attrs = new HashMap<>(2);\n+        attrs.put(\"LDAPSchema\", \"RFC2587\");\n+        attrs.put(\"ImplementedIn\", \"Software\");\n@@ -82,10 +80,7 @@\n-            \/*\n-             * CertStore\n-             * attrs: LDAPSchema, ImplementedIn\n-             *\/\n-            putService(new ProviderService(p, \"CertStore\",\n-                       \"LDAP\", \"sun.security.provider.certpath.ldap.LDAPCertStore\",\n-                       null, attrs));\n-            return null;\n-        };\n-        AccessController.doPrivileged(pa);\n+        \/*\n+         * CertStore\n+         * attrs: LDAPSchema, ImplementedIn\n+         *\/\n+        putService(new ProviderService(p, \"CertStore\",\n+                \"LDAP\", \"sun.security.provider.certpath.ldap.LDAPCertStore\",\n+                null, attrs));\n","filename":"src\/java.naming\/share\/classes\/sun\/security\/provider\/certpath\/ldap\/JdkLDAP.java","additions":11,"deletions":16,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -139,6 +139,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            security.checkConnect(serverName, port);\n-        }\n-\n","filename":"src\/java.naming\/share\/classes\/sun\/security\/provider\/certpath\/ldap\/LDAPCertStore.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -100,3 +100,1 @@\n-        @SuppressWarnings(\"removal\")\n-        String s = AccessController.doPrivileged(\n-            (PrivilegedAction<String>) () -> System.getProperty(PROP_LIFETIME));\n+        String s = System.getProperty(PROP_LIFETIME);\n@@ -175,3 +173,2 @@\n-        @SuppressWarnings(\"removal\")\n-        boolean disableAppResourceFiles = AccessController.doPrivileged(\n-            (PrivilegedAction<Boolean>) () -> Boolean.getBoolean(PROP_DISABLE_APP_RESOURCE_FILES));\n+        boolean disableAppResourceFiles =\n+                Boolean.getBoolean(PROP_DISABLE_APP_RESOURCE_FILES);\n","filename":"src\/java.naming\/share\/classes\/sun\/security\/provider\/certpath\/ldap\/LDAPCertStoreImpl.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,2 +32,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedExceptionAction;\n@@ -55,1 +53,0 @@\n-        PrivilegedExceptionAction<DatagramSocket> action = () -> new DatagramSocket(0);\n@@ -58,2 +55,1 @@\n-            @SuppressWarnings({\"deprecated\", \"removal\"})\n-            DatagramSocket ds = AccessController.doPrivileged(action);\n+            DatagramSocket ds = new DatagramSocket(0);\n","filename":"src\/jdk.naming.dns\/share\/classes\/com\/sun\/jndi\/dns\/DNSDatagramChannelFactory.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -93,3 +93,2 @@\n-        return !filterNameServers(\n-                    ResolverConfiguration.open().nameservers(), true\n-                ).isEmpty();\n+        return !ResolverConfiguration\n+                .open().nameservers().isEmpty();\n@@ -148,2 +147,2 @@\n-                List<String> platformServers = filterNameServers(\n-                    ResolverConfiguration.open().nameservers(), false);\n+                List<String> platformServers =\n+                        ResolverConfiguration.open().nameservers();\n@@ -219,38 +218,0 @@\n-\n-    \/**\n-     * Removes any DNS server that's not permitted to access\n-     * @param input the input server[:port] list, must not be null\n-     * @param oneIsEnough return output once there exists one ok\n-     * @return the filtered list, all non-permitted input removed\n-     *\/\n-    private static List<String> filterNameServers(List<String> input, boolean oneIsEnough) {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security == null || input == null || input.isEmpty()) {\n-            return input;\n-        } else {\n-            List<String> output = new ArrayList<>();\n-            for (String platformServer: input) {\n-                int colon = platformServer.indexOf(':',\n-                        platformServer.indexOf(']') + 1);\n-\n-                int p = (colon < 0)\n-                    ? DEFAULT_PORT\n-                    : Integer.parseInt(\n-                        platformServer.substring(colon + 1));\n-                String s = (colon < 0)\n-                    ? platformServer\n-                    : platformServer.substring(0, colon);\n-                try {\n-                    security.checkConnect(s, p);\n-                    output.add(platformServer);\n-                    if (oneIsEnough) {\n-                        return output;\n-                    }\n-                } catch (SecurityException se) {\n-                    continue;\n-                }\n-            }\n-            return output;\n-        }\n-    }\n","filename":"src\/jdk.naming.dns\/share\/classes\/com\/sun\/jndi\/dns\/DnsContextFactory.java","additions":5,"deletions":44,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,2 +32,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -68,2 +66,0 @@\n-        PrivilegedAction<String> action = () ->\n-                System.getProperty(PARSE_MODE_PROP, DEFAULT_PARSE_MODE.toString());\n@@ -72,2 +68,2 @@\n-            @SuppressWarnings(\"removal\")\n-            String mode = AccessController.doPrivileged(action);\n+            String mode = System.getProperty(\n+                    PARSE_MODE_PROP, DEFAULT_PARSE_MODE.toString());\n","filename":"src\/jdk.naming.dns\/share\/classes\/com\/sun\/jndi\/dns\/DnsUrl.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -61,5 +61,0 @@\n-    \/\/ Environment property that, if set, indicates that a security\n-    \/\/ manager should be installed (if none is already in place).\n-    public static final String SECURITY_MGR =\n-            \"java.naming.rmi.security.manager\";\n-\n@@ -80,3 +75,0 @@\n-        if (environment.get(SECURITY_MGR) != null) {\n-            installSecurityMgr();\n-        }\n@@ -298,3 +290,0 @@\n-        if (propName.equals(SECURITY_MGR)) {\n-            installSecurityMgr();\n-        }\n@@ -415,13 +404,0 @@\n-    \/**\n-     * Attempts to install a security manager if none is currently in\n-     * place.\n-     *\/\n-    @SuppressWarnings(\"removal\")\n-    private static void installSecurityMgr() {\n-\n-        try {\n-            System.setSecurityManager(new SecurityManager());\n-        } catch (Exception e) {\n-        }\n-    }\n-\n","filename":"src\/jdk.naming.rmi\/share\/classes\/com\/sun\/jndi\/rmi\/registry\/RegistryContext.java","additions":0,"deletions":24,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -60,2 +58,0 @@\n-        PrivilegedAction<String> action = () ->\n-                System.getProperty(PARSE_MODE_PROP, DEFAULT_PARSE_MODE.toString());\n@@ -64,2 +60,1 @@\n-            @SuppressWarnings(\"removal\")\n-            String mode = AccessController.doPrivileged(action);\n+            String mode = System.getProperty(PARSE_MODE_PROP, DEFAULT_PARSE_MODE.toString());\n","filename":"src\/jdk.naming.rmi\/share\/classes\/com\/sun\/jndi\/url\/rmi\/rmiURLContext.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"}]}