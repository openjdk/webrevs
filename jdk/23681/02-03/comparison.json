{"files":[{"patch":"@@ -46,1 +46,1 @@\n-        this.localSupportedSignAlgs = new ArrayList<>(\n+        this.localSupportedCertSignAlgs = new ArrayList<>(\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/PostHandshakeContext.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-import static sun.security.ssl.SignatureScheme.HANDSHAKE_SCOPE;\n+import static sun.security.ssl.SignatureScheme.CERTIFICATE_SCOPE;\n@@ -444,6 +444,6 @@\n-        \/\/ Make sure that the server handshake context's localSupportedSignAlgs\n-        \/\/ field is populated.  This is particularly important when\n-        \/\/ client authentication was used in an initial session, and it is\n-        \/\/ now being resumed.\n-        if (shc.localSupportedSignAlgs == null) {\n-            shc.localSupportedSignAlgs =\n+        \/\/ Make sure that the server handshake context's\n+        \/\/ localSupportedCertSignAlgs field is populated.  This is particularly\n+        \/\/ important when client authentication was used in an initial session,\n+        \/\/ and it is now being resumed.\n+        if (shc.localSupportedCertSignAlgs == null) {\n+            shc.localSupportedCertSignAlgs =\n@@ -451,1 +451,1 @@\n-                            shc, HANDSHAKE_SCOPE);\n+                            shc, CERTIFICATE_SCOPE);\n@@ -473,1 +473,1 @@\n-                !shc.localSupportedSignAlgs.containsAll(sessionSigAlgs)) {\n+                !shc.localSupportedCertSignAlgs.containsAll(sessionSigAlgs)) {\n@@ -667,1 +667,1 @@\n-            if (!chc.localSupportedSignAlgs.containsAll(sessionSigAlgs)) {\n+            if (!chc.localSupportedCertSignAlgs.containsAll(sessionSigAlgs)) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/PreSharedKeyExtension.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"}]}