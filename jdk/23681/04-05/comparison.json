{"files":[{"patch":"@@ -33,1 +33,0 @@\n-import java.util.stream.Collectors;\n@@ -278,5 +277,2 @@\n-    boolean permits(String algorithm, Set<SSLCryptoScope> scopes) {\n-        return tlsDisabledAlgConstraints.permits(algorithm,\n-                scopes.stream()\n-                .map(SSLCryptoScope::name)\n-                .collect(Collectors.toSet()));\n+    boolean permits(String algorithm, Set<SSLScope> scopes) {\n+        return tlsDisabledAlgConstraints.permits(algorithm, scopes);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLAlgorithmConstraints.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1,37 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * Scopes defining different parts of TLS protocol.\n- *\/\n-\n-package sun.security.ssl;\n-\n-enum SSLCryptoScope {\n-    \/\/ Handshake scope as in signature_algorithms extension.\n-    HANDSHAKE,\n-    \/\/ Certificate scope as in signature_algorithms_cert extension.\n-    CERTIFICATE;\n-}\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLCryptoScope.java","additions":0,"deletions":37,"binary":false,"changes":37,"status":"deleted"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * Scopes defining different parts of TLS protocol.\n+ *\/\n+\n+package sun.security.ssl;\n+\n+public enum SSLScope {\n+    \/\/ Handshake scope as in signature_algorithms extension.\n+    HANDSHAKE,\n+    \/\/ Certificate scope as in signature_algorithms_cert extension.\n+    CERTIFICATE;\n+\n+    \/\/ Note: the SSLScope is not case-sensitive.\n+    public static SSLScope nameOf(String name) {\n+        for (SSLScope scope : SSLScope.values()) {\n+            if (scope.name().equalsIgnoreCase(name)) {\n+                return scope;\n+            }\n+        }\n+\n+        return null;\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLScope.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -38,1 +38,0 @@\n-import java.util.EnumSet;\n@@ -222,2 +221,2 @@\n-    public static final Set<SSLCryptoScope> HANDSHAKE_SCOPE =\n-            Set.of(SSLCryptoScope.HANDSHAKE);\n+    public static final Set<SSLScope> HANDSHAKE_SCOPE =\n+            Set.of(SSLScope.HANDSHAKE);\n@@ -226,2 +225,2 @@\n-    public static final Set<SSLCryptoScope> CERTIFICATE_SCOPE =\n-            Set.of(SSLCryptoScope.CERTIFICATE);\n+    public static final Set<SSLScope> CERTIFICATE_SCOPE =\n+            Set.of(SSLScope.CERTIFICATE);\n@@ -366,1 +365,1 @@\n-            SSLAlgorithmConstraints constraints, Set<SSLCryptoScope> scopes) {\n+            SSLAlgorithmConstraints constraints, Set<SSLScope> scopes) {\n@@ -379,1 +378,1 @@\n-            HandshakeContext hc, Set<SSLCryptoScope> scopes) {\n+            HandshakeContext hc, Set<SSLScope> scopes) {\n@@ -395,1 +394,1 @@\n-            Set<SSLCryptoScope> scopes) {\n+            Set<SSLScope> scopes) {\n@@ -441,1 +440,1 @@\n-            HandshakeContext hc, int[] algorithmIds, Set<SSLCryptoScope> scopes) {\n+            HandshakeContext hc, int[] algorithmIds, Set<SSLScope> scopes) {\n@@ -455,1 +454,1 @@\n-            Set<SSLCryptoScope> scopes) {\n+            Set<SSLScope> scopes) {\n@@ -487,1 +486,1 @@\n-            Set<SSLCryptoScope> scopes) {\n+            Set<SSLScope> scopes) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SignatureScheme.java","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import sun.security.ssl.SSLScope;\n@@ -50,0 +51,1 @@\n+import java.util.Collections;\n@@ -57,1 +59,0 @@\n-import java.util.TreeMap;\n@@ -91,5 +92,0 @@\n-    \/\/ These should match SSLCryptoScope enums which aren't public so\n-    \/\/ we can't access them here directly.\n-    private static final List<String> VALID_SCOPES = List.of(\n-            \"HANDSHAKE\", \"CERTIFICATE\");\n-\n@@ -111,1 +107,0 @@\n-    private final Map<String, Set<String>> disabledAlgorithmScopes;\n@@ -150,1 +145,0 @@\n-            disabledAlgorithmScopes = getDisabledAlgorithmScopes();\n@@ -153,1 +147,0 @@\n-            disabledAlgorithmScopes = null;\n@@ -184,1 +177,1 @@\n-        if (!cachedCheckAlgorithm(algorithm, null)) {\n+        if (!cachedCheckAlgorithm(algorithm)) {\n@@ -195,0 +188,6 @@\n+    \/\/ Checks if algorithm is disabled for the given TLS scopes.\n+    public boolean permits(String algorithm, Set<SSLScope> scopes) {\n+        List<Constraint> list = algorithmConstraints.getConstraints(algorithm);\n+        return list == null || list.stream().allMatch(c -> c.permits(scopes));\n+    }\n+\n@@ -219,5 +218,0 @@\n-    \/\/ Checks if algorithm is disabled for the given TLS scopes.\n-    public boolean permits(String algorithm, Set<String> scopes) {\n-        return cachedCheckAlgorithm(algorithm, scopes);\n-    }\n-\n@@ -272,1 +266,1 @@\n-                    if (!cachedCheckAlgorithm(curve, null)) {\n+                    if (!cachedCheckAlgorithm(curve)) {\n@@ -449,1 +443,1 @@\n-                        c = new UsageConstraint(algorithm, s);\n+                        c = new UsageConstraint(algorithm, s, propertyName);\n@@ -620,0 +614,11 @@\n+        \/**\n+         * Check if the algorithm constraint permits the given TLS scopes.\n+         *\n+         * @param scopes TLS scopes\n+         * @return 'true' if TLS scopes are allowed,\n+         *         'false' otherwise.\n+         *\/\n+        public boolean permits(Set<SSLScope> scopes) {\n+            return true;\n+        }\n+\n@@ -797,1 +802,1 @@\n-     * variant value in ConstraintsParameters.\n+     * variant value in ConstraintsParameters and against TLS scopes.\n@@ -801,0 +806,1 @@\n+        Set<SSLScope> scopes;\n@@ -802,1 +808,2 @@\n-        UsageConstraint(String algorithm, String[] usages) {\n+        UsageConstraint(\n+                String algorithm, String[] usages, String propertyName) {\n@@ -804,1 +811,34 @@\n-            this.usages = usages;\n+\n+            \/\/ Support TLS scopes only for jdk.tls.disabledAlgorithms property.\n+            if (PROPERTY_TLS_DISABLED_ALGS.equals(propertyName)) {\n+                for (String usage : usages) {\n+                    SSLScope scope = SSLScope.nameOf(usage);\n+\n+                    if (scope != null) {\n+                        if (this.scopes == null) {\n+                            this.scopes = new HashSet<>(usages.length);\n+                        }\n+                        this.scopes.add(scope);\n+                    }  else {\n+                        this.usages = usages;\n+                    }\n+                }\n+\n+                if (this.scopes != null && this.usages != null) {\n+                    throw new IllegalArgumentException(\n+                            \"Can't mix TLS protocol specific constraints\"\n+                            + \" with other usage constraints\");\n+                }\n+\n+            } else {\n+                this.usages = usages;\n+            }\n+        }\n+\n+        @Override\n+        public boolean permits(Set<SSLScope> scopes) {\n+            if (this.scopes == null || scopes == null) {\n+                return true;\n+            }\n+\n+            return Collections.disjoint(this.scopes, scopes);\n@@ -978,2 +1018,1 @@\n-    private boolean cachedCheckAlgorithm(\n-            String algorithm, Set<String> scopes) {\n+    private boolean cachedCheckAlgorithm(String algorithm) {\n@@ -981,1 +1020,0 @@\n-\n@@ -990,5 +1028,1 @@\n-\n-        final String cacheKey = algorithm + \":\" +\n-                (scopes == null ? \"null\" : String.valueOf(scopes.hashCode()));\n-        Boolean result = cache.get(cacheKey);\n-\n+        Boolean result = cache.get(algorithm);\n@@ -998,1 +1032,1 @@\n-\n+        \/\/ We won't check patterns if algorithm check fails.\n@@ -1000,4 +1034,2 @@\n-                && checkDisabledPatterns(algorithm)\n-                && checkAlgorithmTlsScopes(algorithm, scopes);\n-\n-        cache.put(cacheKey, result);\n+                && checkDisabledPatterns(algorithm);\n+        cache.put(algorithm, result);\n@@ -1042,65 +1074,0 @@\n-    private boolean checkAlgorithmTlsScopes(\n-            final String algorithm, Set<String> scopes) {\n-\n-        if (disabledAlgorithmScopes == null || scopes == null) {\n-            return true;\n-        }\n-\n-        Set<String> constraintScopes = disabledAlgorithmScopes.get(algorithm);\n-\n-        if (constraintScopes == null) {\n-            return true;\n-        }\n-\n-        for (String scope : scopes) {\n-            if (constraintScopes.contains(scope.toUpperCase(Locale.ENGLISH))) {\n-                return false;\n-            }\n-        }\n-\n-        return true;\n-    }\n-\n-    private Map<String, Set<String>> getDisabledAlgorithmScopes() {\n-        Map<String, Set<String>> ret = null;\n-        List<String> entriesToRemove = new ArrayList<>(1);\n-\n-        for (String p : disabledAlgorithms) {\n-            String[] arr = p.split(\" \");\n-\n-            if (arr.length > 2 && arr[1].equalsIgnoreCase(\"usage\")) {\n-                boolean tlsUsages = false;\n-                boolean nonTlsUsages = false;\n-                String key = arr[0];\n-\n-                for (int i = 2; i < arr.length; i++) {\n-                    String scope = arr[i].toUpperCase(Locale.ENGLISH);\n-\n-                    if (VALID_SCOPES.contains(scope)) {\n-                        tlsUsages = true;\n-\n-                        if (ret == null) {\n-                            ret = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\n-                        }\n-                        ret.computeIfAbsent(key, _ -> new HashSet<>(1));\n-                        ret.get(key).add(scope);\n-                    } else {\n-                        nonTlsUsages = true;\n-                    }\n-                }\n-\n-                if (tlsUsages) {\n-                    if (nonTlsUsages) {\n-                        throw new IllegalArgumentException(\n-                                \"Can't mix TLS protocol specific constraints\"\n-                                        + \" with other usage constraints\");\n-                    }\n-                    entriesToRemove.add(p);\n-                }\n-            }\n-        }\n-\n-        entriesToRemove.forEach(disabledAlgorithms::remove);\n-        return ret;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/DisabledAlgorithmConstraints.java","additions":65,"deletions":98,"binary":false,"changes":163,"status":"modified"}]}