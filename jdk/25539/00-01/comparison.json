{"files":[{"patch":"@@ -1,176 +0,0 @@\n-\/*\n- * Copyright (c) 2025, NVIDIA CORPORATION & AFFILIATES. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package compiler.c2.irTests;\n-\n-import java.util.Objects;\n-\n-import compiler.lib.generators.*;\n-import compiler.lib.ir_framework.*;\n-import jdk.test.lib.Asserts;\n-\n- \/*\n-  * @test\n-  * @bug 8357726\n-  * @summary C2 fails to recognize the counted loop when induction variable range is changed multiple times\n-  * @library \/test\/lib \/\n-  * @run driver compiler.c2.irTests.TestCountedLoopCastIV\n-  *\/\n-\n-public class TestCountedLoopCastIV {\n-    private static final int LEN = 1024;\n-    private static final Generators random = Generators.G;\n-\n-    private static int[] in = new int[LEN];\n-    private static int[] out = new int[LEN];\n-\n-    static {\n-        for (int i = 0; i < LEN; i++) {\n-            random.fill(random.ints(), in);\n-        }\n-    }\n-\n-    private static void cleanUp() {\n-        for (int i = 0; i < LEN; i++) {\n-            out[i] = 0;\n-        }\n-    }\n-\n-    private static void verify(int[] ref, int[] res, int start,\n-                               int limit, int stride,\n-                               int in_offset, int out_offset) {\n-        for (int i = start; i < limit; i += stride) {\n-            Asserts.assertEquals(ref[i + in_offset], res[i + out_offset]);\n-        }\n-    }\n-\n-    \/\/ Test a counted loop with two explicit range checkes\n-    \/\/ which will create CastIINodes for loop induction variable.\n-    \/\/ In this case, the loop start, limit and stride are\n-    \/\/ all constants.\n-    @Test\n-    @IR(counts = {IRNode.COUNTED_LOOP, \"1\" })\n-    static void test1() {\n-        for (int i = 0; i < LEN; i += 16) {\n-            Objects.checkIndex(i, LEN - 3);\n-            int a = in[i + 3];\n-            Objects.checkIndex(i, LEN - 15);\n-            out[i + 15] = a;\n-        }\n-    }\n-\n-    @Run(test = \"test1\")\n-    public static void runTest1() {\n-        test1();\n-        verify(in, out, 0, LEN, 16, 3, 15);\n-    }\n-\n-    \/\/ Similar to test1, but the loop limit is a variable.\n-    @Test\n-    @IR(counts = {IRNode.COUNTED_LOOP, \"1\" })\n-    static void test2(int limit) {\n-        for (int i = 0; i < limit; i += 16) {\n-            Objects.checkIndex(i, LEN - 3);\n-            int a = in[i + 3];\n-            Objects.checkIndex(i, LEN - 15);\n-            out[i + 15] = a;\n-        }\n-    }\n-\n-    @Run(test = \"test2\")\n-    private void runTest2() {\n-        cleanUp();\n-        test2(100);\n-        verify(in, out, 0, 100, 16, 3, 15);\n-\n-        cleanUp();\n-        test2(500);\n-        verify(in, out, 0, 500, 16, 3, 15);\n-\n-        cleanUp();\n-        test2(LEN);\n-        verify(in, out, 0, LEN, 16, 3, 15);\n-    }\n-\n-    \/\/ Similar to test1 and test2, but the loop is a\n-    \/\/ while loop with a variable start and limit.\n-    @Test\n-    @IR(counts = {IRNode.COUNTED_LOOP, \"1\" })\n-    static void test3(int start, int limit) {\n-        int i = start;\n-        while (i < limit) {\n-            Objects.checkIndex(i, LEN);\n-            int a = in[i];\n-            Objects.checkIndex(i, LEN - 3);\n-            out[i + 3] = a;\n-            i++;\n-        }\n-    }\n-\n-    @Run(test = \"test3\")\n-    private void runTest3() {\n-        cleanUp();\n-        test3(0, 100);\n-        verify(in, out, 0, 100, 1, 0, 3);\n-\n-        cleanUp();\n-        test3(128, 500);\n-        verify(in, out, 128, 500, 1, 0, 3);\n-\n-        cleanUp();\n-        test3(LEN - 128, LEN - 3);\n-        verify(in, out, LEN - 128, LEN - 3, 1, 0, 3);\n-    }\n-\n-    \/\/ Similar to test3, but the type of induction variable\n-    \/\/ is long.\n-    @Test\n-    @IR(counts = {IRNode.COUNTED_LOOP, \"1\" })\n-    static void test4(long start, long limit) {\n-        for (long i = start; i < limit; i++) {\n-            Objects.checkIndex(i, LEN);\n-            int a = in[(int) i];\n-            Objects.checkIndex(i, LEN - 3);\n-            out[(int) i + 3] = a;\n-        }\n-    }\n-\n-    @Run(test = \"test4\")\n-    private void runTest4() {\n-        cleanUp();\n-        test3(0, 100);\n-        verify(in, out, 0, 100, 1, 0, 3);\n-\n-        cleanUp();\n-        test3(128, 500);\n-        verify(in, out, 128, 500, 1, 0, 3);\n-\n-        cleanUp();\n-        test3(LEN - 128, LEN - 3);\n-        verify(in, out, LEN - 128, LEN - 3, 1, 0, 3);\n-    }\n-\n-    public static void main(String[] args) {\n-        TestFramework.runWithFlags(\"-XX:LoopUnrollLimit=0\");\n-    }\n-}\n\\ No newline at end of file\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestCountedLoopCastIV.java","additions":0,"deletions":176,"binary":false,"changes":176,"status":"deleted"},{"patch":"@@ -0,0 +1,192 @@\n+\/*\n+ * Copyright (c) 2025, NVIDIA CORPORATION & AFFILIATES. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.loopopts;\n+\n+import java.util.Arrays;\n+import java.util.Objects;\n+\n+import compiler.lib.generators.*;\n+import compiler.lib.ir_framework.*;\n+import jdk.test.lib.Asserts;\n+\n+ \/*\n+  * @test\n+  * @bug 8357726\n+  * @summary Improve C2 to recognize counted loops with multiple casts in trip counter\n+  * @library \/test\/lib \/\n+  * @run driver compiler.loopopts.TestCountedLoopCastIV  DisableUnroll\n+  * @run driver compiler.loopopts.TestCountedLoopCastIV\n+  *\/\n+\n+public class TestCountedLoopCastIV {\n+    private static final int LEN = 1024;\n+    private static final Generators random = Generators.G;\n+\n+    private static int[] in;\n+    private static int[] out;\n+\n+    static {\n+        in = new int[LEN];\n+        out = new int[LEN];\n+        random.fill(random.ints(), in);\n+    }\n+\n+    private static void cleanUp() {\n+        Arrays.fill(out, 0);\n+    }\n+\n+    private static void verify(int[] ref, int[] res, int start,\n+                               int limit, int stride,\n+                               int in_offset, int out_offset) {\n+        for (int i = start; i < limit; i += stride) {\n+            Asserts.assertEquals(ref[i + in_offset], res[i + out_offset]);\n+        }\n+    }\n+\n+    \/\/ Test a counted loop with two explicit range checkes\n+    \/\/ which will create CastIINodes for loop induction variable.\n+    \/\/ In this case, the loop start, limit and stride are\n+    \/\/ all constants.\n+    \/\/\n+    \/\/ The first IR check with \"-XX:LoopUnrollLimit=0\" makes sure\n+    \/\/ the loop is transformed into exactly one CountedLoopNode,\n+    \/\/ verifying the CastII recognition works correctly.\n+    \/\/\n+    \/\/ The second IR check ensures the optimization works properly\n+    \/\/ with default vm settings.\n+    \/\/\n+    @Test\n+    @IR(counts = {IRNode.COUNTED_LOOP, \"1\" }, applyIf = {\"LoopUnrollLimit\", \"0\"})\n+    @IR(counts = {IRNode.COUNTED_LOOP, \">0\" })\n+    static void test1() {\n+        for (int i = 0; i < LEN; i += 16) {\n+            Objects.checkIndex(i, LEN - 3);\n+            int a = in[i + 3];\n+            Objects.checkIndex(i, LEN - 15);\n+            out[i + 15] = a;\n+        }\n+    }\n+\n+    @Run(test = \"test1\")\n+    public static void runTest1() {\n+        test1();\n+        verify(in, out, 0, LEN, 16, 3, 15);\n+    }\n+\n+    \/\/ Similar to test1, but the loop limit is a variable.\n+    @Test\n+    @IR(counts = {IRNode.COUNTED_LOOP, \"1\" }, applyIf = {\"LoopUnrollLimit\", \"0\"})\n+    @IR(counts = {IRNode.COUNTED_LOOP, \">0\" })\n+    static void test2(int limit) {\n+        for (int i = 0; i < limit; i += 16) {\n+            Objects.checkIndex(i, LEN - 3);\n+            int a = in[i + 3];\n+            Objects.checkIndex(i, LEN - 15);\n+            out[i + 15] = a;\n+        }\n+    }\n+\n+    @Run(test = \"test2\")\n+    private void runTest2() {\n+        cleanUp();\n+        test2(100);\n+        verify(in, out, 0, 100, 16, 3, 15);\n+\n+        cleanUp();\n+        test2(500);\n+        verify(in, out, 0, 500, 16, 3, 15);\n+\n+        cleanUp();\n+        test2(LEN);\n+        verify(in, out, 0, LEN, 16, 3, 15);\n+    }\n+\n+    \/\/ Similar to test1 and test2, but the loop is a\n+    \/\/ while loop with a variable start and limit.\n+    @Test\n+    @IR(counts = {IRNode.COUNTED_LOOP, \"1\" }, applyIf = {\"LoopUnrollLimit\", \"0\"})\n+    @IR(counts = {IRNode.COUNTED_LOOP, \">0\" })\n+    static void test3(int start, int limit) {\n+        int i = start;\n+        while (i < limit) {\n+            Objects.checkIndex(i, LEN);\n+            int a = in[i];\n+            Objects.checkIndex(i, LEN - 3);\n+            out[i + 3] = a;\n+            i++;\n+        }\n+    }\n+\n+    @Run(test = \"test3\")\n+    private void runTest3() {\n+        cleanUp();\n+        test3(0, 100);\n+        verify(in, out, 0, 100, 1, 0, 3);\n+\n+        cleanUp();\n+        test3(128, 500);\n+        verify(in, out, 128, 500, 1, 0, 3);\n+\n+        cleanUp();\n+        test3(LEN - 128, LEN - 3);\n+        verify(in, out, LEN - 128, LEN - 3, 1, 0, 3);\n+    }\n+\n+    \/\/ Similar to test3, but the type of induction variable\n+    \/\/ is long.\n+    @Test\n+    @IR(counts = {IRNode.COUNTED_LOOP, \"1\" }, applyIf = {\"LoopUnrollLimit\", \"0\"})\n+    @IR(counts = {IRNode.COUNTED_LOOP, \">0\" })\n+    static void test4(long start, long limit) {\n+        for (long i = start; i < limit; i++) {\n+            Objects.checkIndex(i, LEN);\n+            int a = in[(int) i];\n+            Objects.checkIndex(i, LEN - 3);\n+            out[(int) i + 3] = a;\n+        }\n+    }\n+\n+    @Run(test = \"test4\")\n+    private void runTest4() {\n+        cleanUp();\n+        test3(0, 100);\n+        verify(in, out, 0, 100, 1, 0, 3);\n+\n+        cleanUp();\n+        test3(128, 500);\n+        verify(in, out, 128, 500, 1, 0, 3);\n+\n+        cleanUp();\n+        test3(LEN - 128, LEN - 3);\n+        verify(in, out, LEN - 128, LEN - 3, 1, 0, 3);\n+    }\n+\n+    public static void main(String[] args) {\n+        if (args != null && args.length > 0 && args[0].equals(\"DisableUnroll\")) {\n+            TestFramework.runWithFlags(\"-XX:LoopUnrollLimit=0\");\n+        } else {\n+            TestFramework.run();\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestCountedLoopCastIV.java","additions":192,"deletions":0,"binary":false,"changes":192,"status":"added"},{"patch":"@@ -29,1 +29,0 @@\n-import java.util.Random;\n@@ -39,1 +38,2 @@\n-    private static final int LEN = 2048;\n+    @Param({\"1024\", \"1536\", \"2048\"})\n+    private int limit;\n@@ -41,0 +41,1 @@\n+    private static final int LEN = 2048;\n@@ -42,1 +43,0 @@\n-    private int limit;\n@@ -52,3 +52,2 @@\n-        Random r = new Random();\n-        start = r.nextInt(LEN >> 2);\n-        limit = r.nextInt(LEN >> 1, LEN - 3);\n+        start = 0;\n+        limit = Math.min(limit, LEN - 4);\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/CountedLoopCastIV.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"}]}