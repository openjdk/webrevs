{"files":[{"patch":"@@ -39,1 +39,1 @@\n- *     of invocations (which is twice that depth just measured).\n+ *     of invocations (which is 200 times that depth just measured).\n@@ -70,1 +70,1 @@\n-                recurse(2 * depth);\n+                recurse(200 * depth);\n","filename":"test\/hotspot\/jtreg\/runtime\/stack\/Stack003.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n- *     of invocations (which is twice that depth just measured).\n+ *     of invocations (which is 200 times that depth just measured).\n@@ -71,1 +71,1 @@\n-                recurse(2 * depth);\n+                recurse(200 * depth);\n","filename":"test\/hotspot\/jtreg\/runtime\/stack\/Stack004.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n- *     of invocations (which is twice that depth just measured).\n+ *     of invocations (which is 200 times that depth just measured).\n@@ -67,1 +67,1 @@\n-                test.recurse(2 * depth);\n+                test.recurse(200 * depth);\n","filename":"test\/hotspot\/jtreg\/runtime\/stack\/Stack005.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n- *     of invocations (which is twice that depth just measured).\n+ *     of invocations (which is 200 times that depth just measured).\n@@ -67,1 +67,1 @@\n-                test.recurse(2 * depth);\n+                test.recurse(200 * depth);\n","filename":"test\/hotspot\/jtreg\/runtime\/stack\/Stack006.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n- *     of invocations (which is 10 times that depth just measured).\n+ *     of invocations (which is 100 times that depth just measured).\n@@ -69,1 +69,1 @@\n-                test.recurse(10 * depth);\n+                test.recurse(100 * depth);\n","filename":"test\/hotspot\/jtreg\/runtime\/stack\/Stack007.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n- *     of invocations (which is twice that depth just measured).\n+ *     of invocations (which is 200 times that depth just measured).\n@@ -81,1 +81,1 @@\n-                invokeRecurse(2 * depth);\n+                invokeRecurse(200 * depth);\n","filename":"test\/hotspot\/jtreg\/runtime\/stack\/Stack008.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n- *     invocations is 10 times that depth seen at the 1st stack\n+ *     invocations is 100 times that depth seen at the 1st stack\n@@ -63,1 +63,1 @@\n-                    recurse(10 * depth);\n+                    recurse(100 * depth);\n","filename":"test\/hotspot\/jtreg\/runtime\/stack\/Stack009.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n- *     of invocations which is 10 times that depth measured before.\n+ *     of invocations which is 100 times that depth measured before.\n","filename":"test\/hotspot\/jtreg\/runtime\/stack\/Stack010.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n- *     of invocations which is 10 times that depth measured before.\n+ *     of invocations which is 100 times that depth measured before.\n@@ -79,1 +79,1 @@\n-            threads[i].depthToTry = 10 * maxDepth;\n+            threads[i].depthToTry = 100 * maxDepth;\n","filename":"test\/hotspot\/jtreg\/runtime\/stack\/Stack013.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n- *     of invocations which is 10 times that depth measured before.\n+ *     of invocations which is 100 times that depth measured before.\n@@ -82,1 +82,1 @@\n-            threads[i].depthToTry = 10 * maxDepth;\n+            threads[i].depthToTry = 100 * maxDepth;\n","filename":"test\/hotspot\/jtreg\/runtime\/stack\/Stack014.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n- *     of invocations which is 10 times that depth measured before.\n+ *     of invocations which is 100 times that depth measured before.\n@@ -58,1 +58,1 @@\n-    final static int RESERVE = 10;\n+    final static int RESERVE = 100;\n","filename":"test\/hotspot\/jtreg\/runtime\/stack\/Stack015.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n- *     of invocations which is 10 times that depth measured before,\n+ *     of invocations which is 100 times that depth measured before,\n@@ -61,1 +61,1 @@\n-    private final static int RESERVE = 10;\n+    private final static int RESERVE = 100;\n","filename":"test\/hotspot\/jtreg\/runtime\/stack\/Stack016.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}