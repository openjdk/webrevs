{"files":[{"patch":"@@ -24,0 +24,1 @@\n+#include \"gc\/shared\/gcArguments.hpp\"\n@@ -29,1 +30,1 @@\n-#include \"gc\/shared\/gcArguments.hpp\"\n+#include \"gc\/z\/zUtils.inline.hpp\"\n@@ -222,1 +223,15 @@\n-  return new ZCollectedHeap();\n+  \/\/ ZCollectedHeap has an alignment greater than or equal to ZCacheLineSize,\n+  \/\/ which may be larger than std::max_align_t. Instead of using operator new,\n+  \/\/ align the storage manually and construct the ZCollectedHeap using operator\n+  \/\/ placement new.\n+\n+  static_assert(alignof(ZCollectedHeap) >= ZCacheLineSize,\n+                \"ZCollectedHeap is no longer ZCacheLineSize aligned\");\n+\n+  \/\/ Allocate aligned storage for ZCollectedHeap\n+  const size_t alignment = alignof(ZCollectedHeap);\n+  const size_t size = sizeof(ZCollectedHeap);\n+  void* const addr = reinterpret_cast<void*>(ZUtils::alloc_aligned_unfreeable(alignment, size));\n+\n+  \/\/ Construct ZCollectedHeap in the aligned storage\n+  return ::new (addr) ZCollectedHeap();\n","filename":"src\/hotspot\/share\/gc\/z\/zArguments.cpp","additions":17,"deletions":2,"binary":false,"changes":19,"status":"modified"}]}