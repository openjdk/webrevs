{"files":[{"patch":"@@ -951,1 +951,4 @@\n-            \/\/ key is equal to the key of the current element\n+            \/\/ internal path bytes equal the internal path bytes of the current\n+            \/\/ element, or whose string representation is equal to that of the\n+            \/\/ current element ignoring case and whose key is equal to the key\n+            \/\/ of the current element\n@@ -953,0 +956,1 @@\n+            String elementName = element.toString();\n@@ -956,9 +960,44 @@\n-                    UnixPath p = path.resolve(entry.getFileName());\n-                    UnixFileAttributes attributes = null;\n-                    try {\n-                        attributes = UnixFileAttributes.get(p, false);\n-                        UnixFileKey key = attributes.fileKey();\n-                        if (key.equals(elementKey)) {\n-                            path = path.resolve(entry);\n-                            found = true;\n-                            break;\n+                    Path name = entry.getFileName();\n+                    if (name.compareTo(element) == 0) {\n+                        found = true;\n+                        path = path.resolve(entry);\n+                        break;\n+                    } else if (name.toString().equalsIgnoreCase(elementName)) {\n+                        UnixPath p = path.resolve(name);\n+                        UnixFileAttributes attributes = null;\n+                        try {\n+                            attributes = UnixFileAttributes.get(p, false);\n+                            UnixFileKey key = attributes.fileKey();\n+                            if (key.equals(elementKey)) {\n+                                found = true;\n+                                path = path.resolve(entry);\n+                                break;\n+                            }\n+                        }catch (UnixException ignore) {\n+                            continue;\n+                        }\n+                    }\n+                }\n+\n+                if (!found) {\n+                    try (DirectoryStream<Path> entries = new UnixDirectoryStream(path, dp, filter)) {\n+                boolean found = false;\n+                for (Path entry : entries) {\n+                    Path name = entry.getFileName();\n+                    if (name.compareTo(element) == 0) {\n+                        found = true;\n+                        path = path.resolve(entry);\n+                        break;\n+                    } else if (name.toString().equalsIgnoreCase(elementName)) {\n+                        UnixPath p = path.resolve(name);\n+                        UnixFileAttributes attributes = null;\n+                        try {\n+                            attributes = UnixFileAttributes.get(p, false);\n+                            UnixFileKey key = attributes.fileKey();\n+                            if (key.equals(elementKey)) {\n+                                found = true;\n+                                path = path.resolve(entry);\n+                                break;\n+                            }\n+                        }catch (UnixException ignore) {\n+                            continue;\n@@ -966,2 +1005,0 @@\n-                    } catch (UnixException ignore) {\n-                        continue;\n@@ -971,1 +1008,0 @@\n-                \/\/ Fallback which should in theory never happen\n@@ -973,0 +1009,1 @@\n+                    \/\/ Fallback which should in theory never happen\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/#UnixPath.java#","additions":50,"deletions":13,"binary":false,"changes":63,"previous_filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixPath.java","status":"copied"},{"patch":"@@ -99,0 +99,1 @@\n+    public static final int ERROR_NETWORK_ACCESS_DENIED = 65;\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsConstants.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -79,14 +79,19 @@\n-        \/\/ not created with last error\n-        if (lastError() == 0)\n-            return new IOException(errorString());\n-\n-        \/\/ handle specific cases\n-        if (lastError() == ERROR_FILE_NOT_FOUND || lastError() == ERROR_PATH_NOT_FOUND)\n-            return new NoSuchFileException(file, other, null);\n-        if (lastError() == ERROR_FILE_EXISTS || lastError() == ERROR_ALREADY_EXISTS)\n-            return new FileAlreadyExistsException(file, other, null);\n-        if (lastError() == ERROR_ACCESS_DENIED)\n-            return new AccessDeniedException(file, other, null);\n-\n-        \/\/ fallback to the more general exception\n-        return new FileSystemException(file, other, errorString());\n+        IOException ex;\n+\n+        switch (lastError()) {\n+            \/\/ not created with last error\n+            case 0 -> ex = new IOException(errorString());\n+\n+            \/\/ handle specific cases\n+            case ERROR_FILE_NOT_FOUND, ERROR_PATH_NOT_FOUND\n+                -> ex = new NoSuchFileException(file, other, null);\n+            case ERROR_FILE_EXISTS, ERROR_ALREADY_EXISTS\n+                -> ex = new FileAlreadyExistsException(file, other, null);\n+            case ERROR_ACCESS_DENIED, ERROR_NETWORK_ACCESS_DENIED, ERROR_PRIVILEGE_NOT_HELD\n+                -> ex = new AccessDeniedException(file, other, null);\n+\n+            \/\/ fallback to the more general exception\n+            default -> ex = new FileSystemException(file, other, errorString());\n+        }\n+\n+        return ex;\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsException.java","additions":20,"deletions":15,"binary":false,"changes":35,"status":"modified"}]}