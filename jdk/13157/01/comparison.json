{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2008, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,2 @@\n+import java.util.Objects;\n+\n@@ -80,0 +82,4 @@\n+        Objects.checkFromIndexSize(off, len, b.length);\n+        if (len == 0) {\n+            return;\n+        }\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/ChunkedOutputStream.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -285,3 +285,1 @@\n-            WriteFinishedEvent e = new WriteFinishedEvent (this);\n-            server.addEvent (e);\n-            closed = true;\n+            close();\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/ExchangeImpl.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2006, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,2 @@\n+import java.util.Objects;\n+\n@@ -44,1 +46,0 @@\n-    private boolean eof = false;\n@@ -61,2 +62,1 @@\n-        eof = (remaining == 0);\n-        if (eof) {\n+        if (remaining == 0) {\n@@ -70,0 +70,4 @@\n+        Objects.checkFromIndexSize(off, len, b.length);\n+        if (len == 0) {\n+            return;\n+        }\n@@ -73,4 +77,0 @@\n-        eof = (remaining == 0);\n-        if (eof) {\n-            throw new StreamClosedException();\n-        }\n@@ -95,1 +95,0 @@\n-        eof = true;\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/FixedLengthOutputStream.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -716,1 +716,8 @@\n-                URI uri = new URI (uriStr);\n+                URI uri;\n+                try {\n+                    uri = new URI (uriStr);\n+                } catch (URISyntaxException e3) {\n+                    reject(Code.HTTP_BAD_REQUEST,\n+                            requestLine, \"URISyntaxException thrown\");\n+                    return;\n+                }\n@@ -752,1 +759,7 @@\n-                        clen = Long.parseLong(headerValue);\n+                        try {\n+                            clen = Long.parseLong(headerValue);\n+                        } catch (NumberFormatException e2) {\n+                            reject(Code.HTTP_BAD_REQUEST,\n+                                    requestLine, \"NumberFormatException thrown\");\n+                            return;\n+                        }\n@@ -837,14 +850,5 @@\n-            } catch (IOException e1) {\n-                logger.log (Level.TRACE, \"ServerImpl.Exchange (1)\", e1);\n-                closeConnection(connection);\n-            } catch (NumberFormatException e2) {\n-                logger.log (Level.TRACE, \"ServerImpl.Exchange (2)\", e2);\n-                reject (Code.HTTP_BAD_REQUEST,\n-                        requestLine, \"NumberFormatException thrown\");\n-            } catch (URISyntaxException e3) {\n-                logger.log (Level.TRACE, \"ServerImpl.Exchange (3)\", e3);\n-                reject (Code.HTTP_BAD_REQUEST,\n-                        requestLine, \"URISyntaxException thrown\");\n-            } catch (Exception e4) {\n-                logger.log (Level.TRACE, \"ServerImpl.Exchange (4)\", e4);\n-                closeConnection(connection);\n+            } catch (Exception e) {\n+                logger.log (Level.TRACE, \"ServerImpl.Exchange\", e);\n+                if (tx == null || !tx.writefinished) {\n+                    closeConnection(connection);\n+                }\n@@ -875,1 +879,1 @@\n-                code, false, \"<h1>\"+code+Code.msg(code)+\"<\/h1>\"+message\n+                code, true, \"<h1>\"+code+Code.msg(code)+\"<\/h1>\"+message\n@@ -877,1 +881,0 @@\n-            closeConnection(connection);\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/ServerImpl.java","additions":21,"deletions":18,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,2 @@\n+import java.util.Objects;\n+\n@@ -58,0 +60,4 @@\n+        Objects.checkFromIndexSize(off, len, b.length);\n+        if (len == 0) {\n+            return;\n+        }\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/UndefLengthOutputStream.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,131 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8219083\n+ * @summary Exceptions thrown from HttpHandler.handle should not close connection\n+ *          if response is completed\n+ * @library \/test\/lib\n+ * @run junit ExceptionKeepAlive\n+ *\/\n+\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n+import jdk.test.lib.net.URIBuilder;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.Proxy;\n+import java.net.URL;\n+import java.util.logging.Handler;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.logging.SimpleFormatter;\n+import java.util.logging.StreamHandler;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class ExceptionKeepAlive\n+{\n+\n+    public static final Logger LOGGER = Logger.getLogger(\"com.sun.net.httpserver\");\n+\n+    @Test\n+    void test() throws IOException, InterruptedException {\n+        HttpServer httpServer = startHttpServer();\n+        int port = httpServer.getAddress().getPort();\n+        try {\n+            URL url = URIBuilder.newBuilder()\n+                .scheme(\"http\")\n+                .loopback()\n+                .port(port)\n+                .path(\"\/firstCall\")\n+                .toURLUnchecked();\n+            HttpURLConnection uc = (HttpURLConnection)url.openConnection(Proxy.NO_PROXY);\n+            int responseCode = uc.getResponseCode();\n+            assertEquals(200, responseCode, \"First request should succeed\");\n+\n+            URL url2 = URIBuilder.newBuilder()\n+                    .scheme(\"http\")\n+                    .loopback()\n+                    .port(port)\n+                    .path(\"\/secondCall\")\n+                    .toURLUnchecked();\n+            HttpURLConnection uc2 = (HttpURLConnection)url2.openConnection(Proxy.NO_PROXY);\n+            responseCode = uc2.getResponseCode();\n+            assertEquals(200, responseCode, \"Second request should reuse connection\");\n+        } finally {\n+            httpServer.stop(0);\n+        }\n+    }\n+\n+    \/**\n+     * Http Server\n+     *\/\n+    HttpServer startHttpServer() throws IOException {\n+        Handler outHandler = new StreamHandler(System.out,\n+                                 new SimpleFormatter());\n+        outHandler.setLevel(Level.FINEST);\n+        LOGGER.setLevel(Level.FINEST);\n+        LOGGER.addHandler(outHandler);\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        HttpServer httpServer = HttpServer.create(new InetSocketAddress(loopback, 0), 0);\n+        httpServer.createContext(\"\/\", new MyHandler());\n+        httpServer.start();\n+        return httpServer;\n+    }\n+\n+    class MyHandler implements HttpHandler {\n+\n+        volatile int port1;\n+        @Override\n+        public void handle(HttpExchange t) throws IOException {\n+            String path = t.getRequestURI().getPath();\n+            if (path.equals(\"\/firstCall\")) {\n+                port1 = t.getRemoteAddress().getPort();\n+                System.out.println(\"First connection on client port = \" + port1);\n+\n+                \/\/ send response\n+                t.sendResponseHeaders(200, -1);\n+                \/\/ response is completed now; throw exception\n+                throw new NumberFormatException();\n+                \/\/ the connection should still be reusable\n+            } else if (path.equals(\"\/secondCall\")) {\n+                int port2 = t.getRemoteAddress().getPort();\n+                System.out.println(\"Second connection on client port = \" + port2);\n+\n+                if (port1 == port2) {\n+                    t.sendResponseHeaders(200, -1);\n+                } else {\n+                    t.sendResponseHeaders(500, -1);\n+                }\n+            }\n+            t.close();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/bugs\/ExceptionKeepAlive.java","additions":131,"deletions":0,"binary":false,"changes":131,"status":"added"},{"patch":"@@ -0,0 +1,114 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8219083\n+ * @summary HttpExchange.getResponseBody write and close should not throw\n+ *          even when response length is zero\n+ * @library \/test\/lib\n+ * @run junit ZeroLengthOutputStream\n+ *\/\n+\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n+import jdk.test.lib.net.URIBuilder;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.Proxy;\n+import java.net.URL;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.logging.Handler;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.logging.SimpleFormatter;\n+import java.util.logging.StreamHandler;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class ZeroLengthOutputStream\n+{\n+\n+    public static final Logger LOGGER = Logger.getLogger(\"com.sun.net.httpserver\");\n+    public volatile boolean closed;\n+    public CountDownLatch cdl = new CountDownLatch(1);\n+\n+    @Test\n+    void test() throws IOException, InterruptedException {\n+        HttpServer httpServer = startHttpServer();\n+        int port = httpServer.getAddress().getPort();\n+        try {\n+            URL url = URIBuilder.newBuilder()\n+                .scheme(\"http\")\n+                .loopback()\n+                .port(port)\n+                .path(\"\/flis\/\")\n+                .toURLUnchecked();\n+            HttpURLConnection uc = (HttpURLConnection)url.openConnection(Proxy.NO_PROXY);\n+            uc.getResponseCode();\n+            cdl.await();\n+            assertTrue(closed, \"OutputStream close did not complete\");\n+        } finally {\n+            httpServer.stop(0);\n+        }\n+    }\n+\n+    \/**\n+     * Http Server\n+     *\/\n+    HttpServer startHttpServer() throws IOException {\n+        Handler outHandler = new StreamHandler(System.out,\n+                                 new SimpleFormatter());\n+        outHandler.setLevel(Level.FINEST);\n+        LOGGER.setLevel(Level.FINEST);\n+        LOGGER.addHandler(outHandler);\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        HttpServer httpServer = HttpServer.create(new InetSocketAddress(loopback, 0), 0);\n+        httpServer.createContext(\"\/flis\/\", new MyHandler());\n+        httpServer.start();\n+        return httpServer;\n+    }\n+\n+    class MyHandler implements HttpHandler {\n+\n+        @Override\n+        public void handle(HttpExchange t) throws IOException {\n+            try {\n+                OutputStream os = t.getResponseBody();\n+                t.sendResponseHeaders(200, -1);\n+                os.write(new byte[0]);\n+                os.close();\n+                System.out.println(\"Output stream closed\");\n+                closed = true;\n+            } finally {\n+                cdl.countDown();\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/bugs\/ZeroLengthOutputStream.java","additions":114,"deletions":0,"binary":false,"changes":114,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -172,1 +172,1 @@\n-                port1 = trans.getLocalAddress().getPort();\n+                port1 = trans.getRemoteAddress().getPort();\n@@ -183,1 +183,1 @@\n-                int port2 = trans.getLocalAddress().getPort();\n+                int port2 = trans.getRemoteAddress().getPort();\n","filename":"test\/jdk\/sun\/net\/www\/http\/KeepAliveCache\/B5045306.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,2 @@\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n@@ -48,0 +50,1 @@\n+import java.nio.charset.StandardCharsets;\n@@ -67,0 +70,1 @@\n+        server.createContext(\"\/\", new NotFoundHandler());\n@@ -237,0 +241,8 @@\n+\n+    static class NotFoundHandler implements HttpHandler {\n+        @Override\n+        public void handle(HttpExchange t) throws IOException {\n+            t.sendResponseHeaders(404, 3);\n+            t.getResponseBody().write(\"abc\".getBytes(StandardCharsets.UTF_8));\n+        }\n+    }\n","filename":"test\/jdk\/sun\/net\/www\/http\/KeepAliveCache\/B8293562.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"}]}