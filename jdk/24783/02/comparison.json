{"files":[{"patch":"@@ -0,0 +1,107 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.vm.compiler;\n+\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.CompilerControl;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Group;\n+import org.openjdk.jmh.annotations.GroupThreads;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OperationsPerInvocation;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+@BenchmarkMode(Mode.Throughput)\n+@State(Scope.Benchmark)\n+@OutputTimeUnit(TimeUnit.MICROSECONDS)\n+@Warmup(iterations = 8, time = 4)\n+@Measurement(iterations = 6, time = 3)\n+public class DMBCheck {\n+\n+  \/\/ The allocations of DoubleDMB$A and DoubleDMB$C\n+  \/\/ will cause aarch64 dmb barrier instructions.\n+  \/\/ The different latency of the dmb ish\/ishst\/ishld modes\n+  \/\/ may make a noticeable difference in the benchmark results.\n+  \/\/ These modes may be set by cpu defaults or XX options.\n+\n+  class A {\n+\n+    final String b = new String(\"Hi there\");\n+  }\n+\n+  class C {\n+\n+    private A a;\n+\n+    public A getA() {\n+      if (a == null) {\n+        a = new A();\n+      }\n+      return a;\n+    }\n+  }\n+\n+  static C c = null;\n+\n+  @Setup\n+  public void setup() {\n+    c = new C();\n+  }\n+\n+  @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+  void action(Blackhole b) throws Exception {\n+    c = new C();\n+\n+    if (c.getA().b == null) {\n+      throw new Exception(\"a should not be null\");\n+    }\n+    b.consume(c);\n+  }\n+\n+  @Benchmark\n+  @Fork(value = 1, jvmArgs = {\n+    \"-XX:+UnlockDiagnosticVMOptions\", \"-XX:+AlwaysMergeDMB\", \"-XX:+IgnoreUnrecognizedVMOptions\"})\n+  public void plusAlwaysMergeDMB(Blackhole b) throws Exception {\n+\n+    action(b);\n+  }\n+\n+  @Benchmark\n+  @Fork(value = 1, jvmArgs = {\n+    \"-XX:+UnlockDiagnosticVMOptions\", \"-XX:-AlwaysMergeDMB\", \"-XX:+IgnoreUnrecognizedVMOptions\"})\n+  public void minusAlwaysMergeDMB(Blackhole b) throws Exception {\n+\n+    action(b);\n+  }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/DMBCheck.java","additions":107,"deletions":0,"binary":false,"changes":107,"status":"added"}]}