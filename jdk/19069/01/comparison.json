{"files":[{"patch":"@@ -244,1 +244,1 @@\n-        if (jrtIndex == null || !jrtIndex.isInJRT(c.classfile) || c.name == names.module_info) {\n+        if (c.name == names.module_info) {\n@@ -260,8 +260,10 @@\n-                    JRTIndex.CtSym ctSym = jrtIndex.getCtSym(packge.flatName());\n-                    Profile minProfile = Profile.DEFAULT;\n-                    if (ctSym.proprietary)\n-                        newFlags |= PROPRIETARY;\n-                    if (ctSym.minProfile != null)\n-                        minProfile = Profile.lookup(ctSym.minProfile);\n-                    if (profile != Profile.DEFAULT && minProfile.value > profile.value) {\n-                        newFlags |= NOT_IN_PROFILE;\n+                    if (jrtIndex != null && jrtIndex.isInJRT(c.classfile)) {\n+                        JRTIndex.CtSym ctSym = jrtIndex.getCtSym(packge.flatName());\n+                        Profile minProfile = Profile.DEFAULT;\n+                        if (ctSym.proprietary)\n+                            newFlags |= PROPRIETARY;\n+                        if (ctSym.minProfile != null)\n+                            minProfile = Profile.lookup(ctSym.minProfile);\n+                        if (profile != Profile.DEFAULT && minProfile.value > profile.value) {\n+                            newFlags |= NOT_IN_PROFILE;\n+                        }\n@@ -271,0 +273,3 @@\n+                } else {\n+                    \/\/ don't accumulate user modules in supplementaryFlags\n+                    return 0;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/ClassFinder.java","additions":14,"deletions":9,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -0,0 +1,127 @@\n+\/*\n+ * Copyright (c) 2024, Alphabet LLC. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8331081\n+ * @summary Verify 'internal proprietary API' diagnostics if --system is configured\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api jdk.compiler\/com.sun.tools.javac.main\n+ *     jdk.compiler\/com.sun.tools.javac.jvm jdk.jdeps\/com.sun.tools.javap\n+ * @build toolbox.ToolBox toolbox.JarTask toolbox.JavacTask toolbox.JavapTask toolbox.TestRunner\n+ * @run main SystemSunProprietary\n+ *\/\n+import toolbox.JavacTask;\n+import toolbox.Task;\n+import toolbox.Task.Expect;\n+import toolbox.TestRunner;\n+import toolbox.ToolBox;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class SystemSunProprietary extends TestRunner {\n+\n+    private final ToolBox tb = new ToolBox();\n+\n+    public SystemSunProprietary() {\n+        super(System.err);\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        new SystemSunProprietary().runTests();\n+    }\n+\n+    @Test\n+    public void testUnsafe(Path base) throws IOException {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(\n+                src,\n+                \"module m { requires jdk.unsupported; }\",\n+                \"package test; public class Test { sun.misc.Unsafe unsafe; } \");\n+        Path classes = base.resolve(\"classes\");\n+        tb.createDirectories(classes);\n+\n+        List<String> log;\n+        List<String> expected =\n+                Arrays.asList(\n+                        \"Test.java:1:43: compiler.warn.sun.proprietary: sun.misc.Unsafe\",\n+                        \"1 warning\");\n+\n+        log =\n+                new JavacTask(tb)\n+                        .options(\"-XDrawDiagnostics\")\n+                        .outdir(classes)\n+                        .files(tb.findJavaFiles(src))\n+                        .run(Expect.SUCCESS)\n+                        .writeAll()\n+                        .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        if (!expected.equals(log)) {\n+            throw new AssertionError(\"Unexpected output: \" + log);\n+        }\n+\n+        log =\n+                new JavacTask(tb)\n+                        .options(\"-XDrawDiagnostics\", \"--system\", System.getProperty(\"java.home\"))\n+                        .outdir(classes)\n+                        .files(tb.findJavaFiles(src))\n+                        .run(Expect.SUCCESS)\n+                        .writeAll()\n+                        .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        if (!expected.equals(log)) {\n+            throw new AssertionError(\"Unexpected output: \" + log);\n+        }\n+\n+        \/\/ Create a valid argument to system that isn't the current java.home\n+        Path originalSystem = Path.of(System.getProperty(\"java.home\"));\n+        Path system = base.resolve(\"system\");\n+        for (String path : List.of(\"release\", \"lib\/modules\", \"lib\/jrt-fs.jar\")) {\n+            Path to = system.resolve(path);\n+            Files.createDirectories(to.getParent());\n+            Files.copy(originalSystem.resolve(path), to);\n+        }\n+\n+        log =\n+                new JavacTask(tb)\n+                        .options(\"-XDrawDiagnostics\", \"--system\", system.toString())\n+                        .outdir(classes)\n+                        .files(tb.findJavaFiles(src))\n+                        .run(Expect.SUCCESS)\n+                        .writeAll()\n+                        .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        if (!expected.equals(log)) {\n+            throw new AssertionError(\"Unexpected output: \" + log);\n+        }\n+    }\n+\n+    protected void runTests() throws Exception {\n+        runTests(m -> new Object[] {Paths.get(m.getName())});\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/options\/system\/SystemSunProprietary.java","additions":127,"deletions":0,"binary":false,"changes":127,"status":"added"}]}