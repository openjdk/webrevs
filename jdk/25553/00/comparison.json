{"files":[{"patch":"@@ -182,1 +182,1 @@\n-JfrJavaArguments::JfrJavaArguments(JavaValue* result) : _result(result), _klass(nullptr), _name(nullptr), _signature(nullptr), _array_length(-1) {\n+JfrJavaArguments::JfrJavaArguments(JavaValue* result) : _result(result), _klass(nullptr), _name(nullptr), _signature(nullptr) {\n@@ -190,2 +190,1 @@\n-  _signature(nullptr),\n-  _array_length(-1) {\n+  _signature(nullptr) {\n@@ -207,2 +206,1 @@\n-  _signature(nullptr),\n-  _array_length(-1) {\n+  _signature(nullptr) {\n@@ -271,9 +269,0 @@\n-int JfrJavaArguments::array_length() const {\n-  return _array_length;\n-}\n-\n-void JfrJavaArguments::set_array_length(int length) {\n-  assert(length >= 0, \"invariant\");\n-  _array_length = length;\n-}\n-\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJavaCall.cpp","additions":3,"deletions":14,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,3 +58,0 @@\n-  int array_length() const;\n-  void set_array_length(int length);\n-\n@@ -120,1 +117,0 @@\n-  int _array_length;\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJavaCall.hpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -181,13 +181,0 @@\n-static void array_construction(JfrJavaArguments* args, JavaValue* result, InstanceKlass* klass, int array_length, TRAPS) {\n-  assert(args != nullptr, \"invariant\");\n-  assert(result != nullptr, \"invariant\");\n-  assert(klass != nullptr, \"invariant\");\n-  assert(klass->is_initialized(), \"invariant\");\n-\n-  Klass* const ak = klass->array_klass(THREAD);\n-  ObjArrayKlass::cast(ak)->initialize(THREAD);\n-  HandleMark hm(THREAD);\n-  objArrayOop arr = ObjArrayKlass::cast(ak)->allocate(array_length, CHECK);\n-  result->set_oop(arr);\n-}\n-\n@@ -203,7 +190,1 @@\n-  const int array_length = args->array_length();\n-\n-  if (array_length >= 0) {\n-    array_construction(args, result, klass, array_length, CHECK);\n-  } else {\n-    object_construction(args, result, klass, THREAD);\n-  }\n+  object_construction(args, result, klass, THREAD);\n@@ -255,9 +236,0 @@\n-jobjectArray JfrJavaSupport::new_string_array(int length, TRAPS) {\n-  DEBUG_ONLY(check_java_thread_in_vm(THREAD));\n-  JavaValue result(T_OBJECT);\n-  JfrJavaArguments args(&result, \"java\/lang\/String\", \"<init>\", \"()V\", CHECK_NULL);\n-  args.set_array_length(length);\n-  new_object_local_ref(&args, THREAD);\n-  return (jobjectArray)args.result()->get_jobject();\n-}\n-\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJavaSupport.cpp","additions":1,"deletions":29,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -72,1 +72,0 @@\n-  static jobjectArray new_string_array(int length, TRAPS);\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJavaSupport.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -110,1 +110,0 @@\n-  assert(klass->is_klass(), \"must be instance class\");\n","filename":"src\/hotspot\/share\/memory\/oopFactory.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}