{"files":[{"patch":"@@ -8260,0 +8260,8 @@\n+void Assembler::eminmaxsh(XMMRegister dst, XMMRegister nds, XMMRegister src, int imm8) {\n+  assert(VM_Version::supports_avx10_2(), \"\");\n+  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n+  attributes.set_is_evex_instruction();\n+  int encode = vex_prefix_and_encode(dst->encoding(), nds->encoding(), src->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3A, &attributes);\n+  emit_int24(0x53, (0xC0 | encode), imm8);\n+}\n+\n@@ -8685,0 +8693,1 @@\n+\n@@ -8774,0 +8783,28 @@\n+void Assembler::evminmaxps(XMMRegister dst, KRegister mask, XMMRegister nds, XMMRegister src, bool merge, int imm8, int vector_len) {\n+  assert(VM_Version::supports_avx10_2(), \"\");\n+  InstructionAttr attributes(vector_len, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ false,\/* uses_vl *\/ true);\n+  attributes.set_is_evex_instruction();\n+  attributes.set_embedded_opmask_register_specifier(mask);\n+  if (merge) {\n+    attributes.reset_is_clear_context();\n+  }\n+  int encode = vex_prefix_and_encode(dst->encoding(), nds->encoding(), src->encoding(), VEX_SIMD_66, VEX_OPCODE_0F_3A, &attributes);\n+  emit_int24(0x52, (0xC0 | encode), imm8);\n+}\n+\n+void Assembler::evminmaxps(XMMRegister dst, KRegister mask, XMMRegister nds, Address src, bool merge, int imm8, int vector_len) {\n+  assert(VM_Version::supports_avx10_2(), \"\");\n+  InstructionMark im(this);\n+  InstructionAttr attributes(vector_len, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ false, \/* uses_vl *\/ true);\n+  attributes.set_is_evex_instruction();\n+  attributes.set_embedded_opmask_register_specifier(mask);\n+  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_FVM, \/* input_size_in_bits *\/ EVEX_NObit);\n+  if (merge) {\n+    attributes.reset_is_clear_context();\n+  }\n+  vex_prefix(src, nds->encoding(), dst->encoding(), VEX_SIMD_66, VEX_OPCODE_0F_3A, &attributes);\n+  emit_int8(0x52);\n+  emit_operand(dst, src, 0);\n+  emit_int8(imm8);\n+}\n+\n@@ -8780,0 +8817,28 @@\n+void Assembler::evminmaxpd(XMMRegister dst, KRegister mask, XMMRegister nds, XMMRegister src, bool merge, int imm8, int vector_len) {\n+  assert(VM_Version::supports_avx10_2(), \"\");\n+  InstructionAttr attributes(vector_len, \/* vex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ false,\/* uses_vl *\/ true);\n+  attributes.set_is_evex_instruction();\n+  attributes.set_embedded_opmask_register_specifier(mask);\n+  if (merge) {\n+    attributes.reset_is_clear_context();\n+  }\n+  int encode = vex_prefix_and_encode(dst->encoding(), nds->encoding(), src->encoding(), VEX_SIMD_66, VEX_OPCODE_0F_3A, &attributes);\n+  emit_int24(0x52, (0xC0 | encode), imm8);\n+}\n+\n+void Assembler::evminmaxpd(XMMRegister dst, KRegister mask, XMMRegister nds, Address src, bool merge, int imm8, int vector_len) {\n+  assert(VM_Version::supports_avx10_2(), \"\");\n+  InstructionMark im(this);\n+  InstructionAttr attributes(vector_len, \/* vex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ false, \/* uses_vl *\/ true);\n+  attributes.set_is_evex_instruction();\n+  attributes.set_embedded_opmask_register_specifier(mask);\n+  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_FVM, \/* input_size_in_bits *\/ EVEX_NObit);\n+  if (merge) {\n+    attributes.reset_is_clear_context();\n+  }\n+  vex_prefix(src, nds->encoding(), dst->encoding(), VEX_SIMD_66, VEX_OPCODE_0F_3A, &attributes);\n+  emit_int8(0x52);\n+  emit_operand(dst, src, 0);\n+  emit_int8(imm8);\n+}\n+\n@@ -13122,0 +13187,8 @@\n+void Assembler::eminmaxss(XMMRegister dst, XMMRegister nds, XMMRegister src, int imm8) {\n+  assert(VM_Version::supports_avx10_2(), \"\");\n+  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n+  attributes.set_is_evex_instruction();\n+  int encode = vex_prefix_and_encode(dst->encoding(), nds->encoding(), src->encoding(), VEX_SIMD_66, VEX_OPCODE_0F_3A, &attributes);\n+  emit_int24(0x53, (0xC0 | encode), imm8);\n+}\n+\n@@ -13130,0 +13203,8 @@\n+void Assembler::eminmaxsd(XMMRegister dst, XMMRegister nds, XMMRegister src, int imm8) {\n+  assert(VM_Version::supports_avx10_2(), \"\");\n+  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n+  attributes.set_is_evex_instruction();\n+  int encode = vex_prefix_and_encode(dst->encoding(), nds->encoding(), src->encoding(), VEX_SIMD_66, VEX_OPCODE_0F_3A, &attributes);\n+  emit_int24(0x53, (0xC0 | encode), imm8);\n+}\n+\n@@ -16529,0 +16610,12 @@\n+void Assembler::evminmaxph(XMMRegister dst, KRegister mask, XMMRegister nds, XMMRegister src, bool merge, int imm8, int vector_len) {\n+  assert(VM_Version::supports_avx10_2(), \"\");\n+  InstructionAttr attributes(vector_len, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ false,\/* uses_vl *\/ true);\n+  attributes.set_is_evex_instruction();\n+  attributes.set_embedded_opmask_register_specifier(mask);\n+  if (merge) {\n+    attributes.reset_is_clear_context();\n+  }\n+  int encode = vex_prefix_and_encode(dst->encoding(), nds->encoding(), src->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3A, &attributes);\n+  emit_int24(0x52, (0xC0 | encode), imm8);\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":93,"deletions":0,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -2747,0 +2747,10 @@\n+\n+  \/\/ AVX10.2 floating point minmax instructions\n+  void eminmaxsh(XMMRegister dst, XMMRegister nds, XMMRegister src, int imm8);\n+  void eminmaxss(XMMRegister dst, XMMRegister nds, XMMRegister src, int imm8);\n+  void eminmaxsd(XMMRegister dst, XMMRegister nds, XMMRegister src, int imm8);\n+  void evminmaxph(XMMRegister dst, KRegister mask, XMMRegister nds, XMMRegister src, bool merge, int imm8, int vector_len);\n+  void evminmaxps(XMMRegister dst, KRegister mask, XMMRegister nds, XMMRegister src, bool merge, int imm8, int vector_len);\n+  void evminmaxps(XMMRegister dst, KRegister mask, XMMRegister nds, Address src, bool merge, int imm8, int vector_len);\n+  void evminmaxpd(XMMRegister dst, KRegister mask, XMMRegister nds, XMMRegister src, bool merge, int imm8, int vector_len);\n+  void evminmaxpd(XMMRegister dst, KRegister mask, XMMRegister nds, Address src, bool merge, int imm8, int vector_len);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1241,0 +1241,12 @@\n+void C2_MacroAssembler::vminmax_fp(int opc, BasicType elem_bt, XMMRegister dst, KRegister mask,\n+                                   XMMRegister src1, XMMRegister src2, int vlen_enc) {\n+  assert(opc == Op_MinV || opc == Op_MinReductionV ||\n+         opc == Op_MaxV || opc == Op_MaxReductionV, \"sanity\");\n+  if (elem_bt == T_FLOAT) {\n+    evminmaxps(dst, mask, src1, src2, true, opc == Op_MinV || opc == Op_MinReductionV ? 0x4 : 0x5, vlen_enc);\n+  } else {\n+    assert(elem_bt == T_DOUBLE, \"\");\n+    evminmaxpd(dst, mask, src1, src2, true, opc == Op_MinV || opc == Op_MinReductionV ? 0x4 : 0x5, vlen_enc);\n+  }\n+}\n+\n@@ -2548,1 +2560,6 @@\n-    vminmax_fp(opcode, T_FLOAT, wdst, wtmp, wsrc, tmp, atmp, btmp, vlen_enc);\n+\n+    if (VM_Version::supports_avx10_2()) {\n+      vminmax_fp(opcode, T_FLOAT, wdst, k0, wtmp, wsrc, vlen_enc);\n+    } else {\n+      vminmax_fp(opcode, T_FLOAT, wdst, wtmp, wsrc, tmp, atmp, btmp, vlen_enc);\n+    }\n@@ -2553,1 +2570,5 @@\n-    vminmax_fp(opcode, T_FLOAT, dst, wdst, dst, tmp, atmp, btmp, Assembler::AVX_128bit);\n+    if (VM_Version::supports_avx10_2()) {\n+      vminmax_fp(opcode, T_FLOAT, dst, k0, wdst, dst, Assembler::AVX_128bit);\n+    } else {\n+      vminmax_fp(opcode, T_FLOAT, dst, wdst, dst, tmp, atmp, btmp, Assembler::AVX_128bit);\n+    }\n@@ -2579,1 +2600,7 @@\n-    vminmax_fp(opcode, T_DOUBLE, wdst, wtmp, wsrc, tmp, atmp, btmp, vlen_enc);\n+\n+    if (VM_Version::supports_avx10_2()) {\n+      vminmax_fp(opcode, T_DOUBLE, wdst, k0, wtmp, wsrc, vlen_enc);\n+    } else {\n+      vminmax_fp(opcode, T_DOUBLE, wdst, wtmp, wsrc, tmp, atmp, btmp, vlen_enc);\n+    }\n+\n@@ -2583,0 +2610,1 @@\n+\n@@ -2584,1 +2612,5 @@\n-    vminmax_fp(opcode, T_DOUBLE, dst, wdst, dst, tmp, atmp, btmp, Assembler::AVX_128bit);\n+    if (VM_Version::supports_avx10_2()) {\n+      vminmax_fp(opcode, T_DOUBLE, dst, k0, wdst, dst, Assembler::AVX_128bit);\n+    } else {\n+      vminmax_fp(opcode, T_DOUBLE, dst, wdst, dst, tmp, atmp, btmp, Assembler::AVX_128bit);\n+    }\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":36,"deletions":4,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -75,0 +75,3 @@\n+  void vminmax_fp(int opc, BasicType elem_bt, XMMRegister dst, KRegister mask,\n+                  XMMRegister src1, XMMRegister src2, int vlen_enc);\n+\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -8857,0 +8857,4 @@\n+    case T_FLOAT:\n+      evminmaxps(dst, mask, nds, src, merge, 0x4, vector_len); break;\n+    case T_DOUBLE:\n+      evminmaxpd(dst, mask, nds, src, merge, 0x4, vector_len); break;\n@@ -8872,0 +8876,4 @@\n+    case T_FLOAT:\n+      evminmaxps(dst, mask, nds, src, merge, 0x5, vector_len); break;\n+    case T_DOUBLE:\n+      evminmaxpd(dst, mask, nds, src, merge, 0x5, vector_len); break;\n@@ -8887,0 +8895,4 @@\n+    case T_FLOAT:\n+      evminmaxps(dst, mask, nds, src, merge, 0x4, vector_len); break;\n+    case T_DOUBLE:\n+      evminmaxpd(dst, mask, nds, src, merge, 0x4, vector_len); break;\n@@ -8902,0 +8914,4 @@\n+    case T_FLOAT:\n+      evminmaxps(dst, mask, nds, src, merge, 0x5, vector_len); break;\n+    case T_DOUBLE:\n+      evminmaxps(dst, mask, nds, src, merge, 0x5, vector_len); break;\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2027,1 +2027,1 @@\n-      if (is_floating_point_type(bt)) {\n+      if (is_floating_point_type(bt) && !VM_Version::supports_avx10_2()) {\n@@ -5296,3 +5296,3 @@\n-instruct minmax_reduction2F(legRegF dst, immF src1, legVec src2, legVec tmp,\n-                            legVec atmp, legVec btmp, legVec xmm_1, rFlagsReg cr) %{\n-  predicate(Matcher::vector_element_basic_type(n->in(2)) == T_FLOAT &&\n+instruct minmax_reduction2F(legRegF dst, immF src1, legVec src2, legVec tmp, legVec atmp,\n+                            legVec btmp, legVec xmm_1, rFlagsReg cr) %{\n+  predicate(!VM_Version::supports_avx10_2() && Matcher::vector_element_basic_type(n->in(2)) == T_FLOAT &&\n@@ -5319,1 +5319,1 @@\n-  predicate(Matcher::vector_element_basic_type(n->in(2)) == T_FLOAT &&\n+  predicate(!VM_Version::supports_avx10_2() && Matcher::vector_element_basic_type(n->in(2)) == T_FLOAT &&\n@@ -5338,3 +5338,3 @@\n-instruct minmax_reduction2F_av(legRegF dst, legVec src, legVec tmp,\n-                               legVec atmp, legVec btmp, legVec xmm_1, rFlagsReg cr) %{\n-  predicate(Matcher::vector_element_basic_type(n->in(2)) == T_FLOAT &&\n+instruct minmax_reduction2F_av(legRegF dst, legVec src, legVec tmp, legVec atmp,\n+                               legVec btmp, legVec xmm_1, rFlagsReg cr) %{\n+  predicate(!VM_Version::supports_avx10_2() && Matcher::vector_element_basic_type(n->in(2)) == T_FLOAT &&\n@@ -5358,3 +5358,3 @@\n-instruct minmax_reductionF_av(legRegF dst, legVec src, legVec tmp,\n-                              legVec atmp, legVec btmp, legVec xmm_0, legVec xmm_1, rFlagsReg cr) %{\n-  predicate(Matcher::vector_element_basic_type(n->in(2)) == T_FLOAT &&\n+instruct minmax_reductionF_av(legRegF dst, legVec src, legVec tmp, legVec atmp, legVec btmp,\n+                              legVec xmm_0, legVec xmm_1, rFlagsReg cr) %{\n+  predicate(!VM_Version::supports_avx10_2() && Matcher::vector_element_basic_type(n->in(2)) == T_FLOAT &&\n@@ -5377,0 +5377,67 @@\n+instruct minmax_reduction2F_avx10(regF dst, immF src1, vec src2, vec xtmp1) %{\n+  predicate(VM_Version::supports_avx10_2() && Matcher::vector_element_basic_type(n->in(2)) == T_FLOAT &&\n+            ((n->Opcode() == Op_MinReductionV && n->in(1)->bottom_type() == TypeF::POS_INF) ||\n+             (n->Opcode() == Op_MaxReductionV && n->in(1)->bottom_type() == TypeF::NEG_INF)) &&\n+            Matcher::vector_length(n->in(2)) == 2);\n+  match(Set dst (MinReductionV src1 src2));\n+  match(Set dst (MaxReductionV src1 src2));\n+  effect(TEMP dst, TEMP xtmp1);\n+  format %{ \"vector_minmax_reduction $dst, $src1, $src2 \\t; using $xtmp1 as TEMP\" %}\n+  ins_encode %{\n+    int opcode = this->ideal_Opcode();\n+    int vlen = Matcher::vector_length(this, $src2);\n+    __ reduceFloatMinMax(opcode, vlen, false, $dst$$XMMRegister, $src2$$XMMRegister,\n+                         xnoreg, xnoreg, xnoreg, $xtmp1$$XMMRegister);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+instruct minmax_reductionF_avx10(regF dst, immF src1, vec src2, vec xtmp1, vec xtmp2) %{\n+  predicate(VM_Version::supports_avx10_2() && Matcher::vector_element_basic_type(n->in(2)) == T_FLOAT &&\n+            ((n->Opcode() == Op_MinReductionV && n->in(1)->bottom_type() == TypeF::POS_INF) ||\n+             (n->Opcode() == Op_MaxReductionV && n->in(1)->bottom_type() == TypeF::NEG_INF)) &&\n+            Matcher::vector_length(n->in(2)) >= 4);\n+  match(Set dst (MinReductionV src1 src2));\n+  match(Set dst (MaxReductionV src1 src2));\n+  effect(TEMP dst, TEMP xtmp1, TEMP xtmp2);\n+  format %{ \"vector_minmax_reduction $dst, $src1, $src2 \\t; using $xtmp1 and $xtmp2 as TEMP\" %}\n+  ins_encode %{\n+    int opcode = this->ideal_Opcode();\n+    int vlen = Matcher::vector_length(this, $src2);\n+    __ reduceFloatMinMax(opcode, vlen, false, $dst$$XMMRegister, $src2$$XMMRegister, xnoreg, xnoreg,\n+                         xnoreg, $xtmp1$$XMMRegister, $xtmp2$$XMMRegister);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+instruct minmax_reduction2F_avx10_av(regF dst, vec src, vec xtmp1) %{\n+  predicate(VM_Version::supports_avx10_2() && Matcher::vector_element_basic_type(n->in(2)) == T_FLOAT &&\n+            Matcher::vector_length(n->in(2)) == 2);\n+  match(Set dst (MinReductionV dst src));\n+  match(Set dst (MaxReductionV dst src));\n+  effect(TEMP dst, TEMP xtmp1);\n+  format %{ \"vector_minmax2F_reduction $dst, $src \\t; using $xtmp1 as TEMP\" %}\n+  ins_encode %{\n+    int opcode = this->ideal_Opcode();\n+    int vlen = Matcher::vector_length(this, $src);\n+    __ reduceFloatMinMax(opcode, vlen, true, $dst$$XMMRegister, $src$$XMMRegister, xnoreg, xnoreg, xnoreg,\n+                         $xtmp1$$XMMRegister);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+instruct minmax_reductionF_avx10_av(regF dst, vec src, vec xtmp1, vec xtmp2) %{\n+  predicate(VM_Version::supports_avx10_2() && Matcher::vector_element_basic_type(n->in(2)) == T_FLOAT &&\n+            Matcher::vector_length(n->in(2)) >= 4);\n+  match(Set dst (MinReductionV dst src));\n+  match(Set dst (MaxReductionV dst src));\n+  effect(TEMP dst, TEMP xtmp1, TEMP xtmp2);\n+  format %{ \"vector_minmax2F_reduction $dst, $src \\t; using $xtmp1 and $xtmp2 as TEMP\" %}\n+  ins_encode %{\n+    int opcode = this->ideal_Opcode();\n+    int vlen = Matcher::vector_length(this, $src);\n+    __ reduceFloatMinMax(opcode, vlen, true, $dst$$XMMRegister, $src$$XMMRegister, xnoreg, xnoreg, xnoreg,\n+                         $xtmp1$$XMMRegister, $xtmp2$$XMMRegister);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n@@ -5379,4 +5446,3 @@\n-instruct minmax_reduction2D(legRegD dst, immD src1, legVec src2,\n-                            legVec tmp1, legVec tmp2, legVec tmp3, legVec tmp4, \/\/ TEMPs\n-                            rFlagsReg cr) %{\n-  predicate(Matcher::vector_element_basic_type(n->in(2)) == T_DOUBLE &&\n+instruct minmax_reduction2D(legRegD dst, immD src1, legVec src2, legVec tmp1, legVec tmp2,\n+                            legVec tmp3, legVec tmp4, rFlagsReg cr) %{\n+  predicate(!VM_Version::supports_avx10_2() && Matcher::vector_element_basic_type(n->in(2)) == T_DOUBLE &&\n@@ -5401,4 +5467,3 @@\n-instruct minmax_reductionD(legRegD dst, immD src1, legVec src2,\n-                           legVec tmp1, legVec tmp2, legVec tmp3, legVec tmp4, legVec tmp5, \/\/ TEMPs\n-                           rFlagsReg cr) %{\n-  predicate(Matcher::vector_element_basic_type(n->in(2)) == T_DOUBLE &&\n+instruct minmax_reductionD(legRegD dst, immD src1, legVec src2, legVec tmp1, legVec tmp2,\n+                           legVec tmp3, legVec tmp4, legVec tmp5, rFlagsReg cr) %{\n+  predicate(!VM_Version::supports_avx10_2() && Matcher::vector_element_basic_type(n->in(2)) == T_DOUBLE &&\n@@ -5424,4 +5489,3 @@\n-instruct minmax_reduction2D_av(legRegD dst, legVec src,\n-                               legVec tmp1, legVec tmp2, legVec tmp3, legVec tmp4, \/\/ TEMPs\n-                               rFlagsReg cr) %{\n-  predicate(Matcher::vector_element_basic_type(n->in(2)) == T_DOUBLE &&\n+instruct minmax_reduction2D_av(legRegD dst, legVec src, legVec tmp1, legVec tmp2,\n+                               legVec tmp3, legVec tmp4, rFlagsReg cr) %{\n+  predicate(!VM_Version::supports_avx10_2() && Matcher::vector_element_basic_type(n->in(2)) == T_DOUBLE &&\n@@ -5444,4 +5508,3 @@\n-instruct minmax_reductionD_av(legRegD dst, legVec src,\n-                              legVec tmp1, legVec tmp2, legVec tmp3, legVec tmp4, legVec tmp5, \/\/ TEMPs\n-                              rFlagsReg cr) %{\n-  predicate(Matcher::vector_element_basic_type(n->in(2)) == T_DOUBLE &&\n+instruct minmax_reductionD_av(legRegD dst, legVec src, legVec tmp1, legVec tmp2, legVec tmp3,\n+                              legVec tmp4, legVec tmp5, rFlagsReg cr) %{\n+  predicate(!VM_Version::supports_avx10_2() && Matcher::vector_element_basic_type(n->in(2)) == T_DOUBLE &&\n@@ -5464,0 +5527,69 @@\n+instruct minmax_reduction2D_avx10(regD dst, immD src1, vec src2, vec xtmp1) %{\n+  predicate(VM_Version::supports_avx10_2() && Matcher::vector_element_basic_type(n->in(2)) == T_DOUBLE &&\n+            ((n->Opcode() == Op_MinReductionV && n->in(1)->bottom_type() == TypeD::POS_INF) ||\n+             (n->Opcode() == Op_MaxReductionV && n->in(1)->bottom_type() == TypeD::NEG_INF)) &&\n+            Matcher::vector_length(n->in(2)) == 2);\n+  match(Set dst (MinReductionV src1 src2));\n+  match(Set dst (MaxReductionV src1 src2));\n+  effect(TEMP dst, TEMP xtmp1);\n+  format %{ \"vector_minmax2D_reduction $dst, $src1, $src2 ; using $xtmp1 as TEMP\" %}\n+  ins_encode %{\n+    int opcode = this->ideal_Opcode();\n+    int vlen = Matcher::vector_length(this, $src2);\n+    __ reduceDoubleMinMax(opcode, vlen, false, $dst$$XMMRegister, $src2$$XMMRegister, xnoreg,\n+                          xnoreg, xnoreg, $xtmp1$$XMMRegister);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+instruct minmax_reductionD_avx10(regD dst, immD src1, vec src2, vec xtmp1, vec xtmp2) %{\n+  predicate(VM_Version::supports_avx10_2() && Matcher::vector_element_basic_type(n->in(2)) == T_DOUBLE &&\n+            ((n->Opcode() == Op_MinReductionV && n->in(1)->bottom_type() == TypeD::POS_INF) ||\n+             (n->Opcode() == Op_MaxReductionV && n->in(1)->bottom_type() == TypeD::NEG_INF)) &&\n+            Matcher::vector_length(n->in(2)) >= 4);\n+  match(Set dst (MinReductionV src1 src2));\n+  match(Set dst (MaxReductionV src1 src2));\n+  effect(TEMP dst, TEMP xtmp1, TEMP xtmp2);\n+  format %{ \"vector_minmaxD_reduction $dst, $src1, $src2 ; using $xtmp1 and $xtmp2 as TEMP\" %}\n+  ins_encode %{\n+    int opcode = this->ideal_Opcode();\n+    int vlen = Matcher::vector_length(this, $src2);\n+    __ reduceDoubleMinMax(opcode, vlen, false, $dst$$XMMRegister, $src2$$XMMRegister, xnoreg, xnoreg,\n+                          xnoreg, $xtmp1$$XMMRegister, $xtmp2$$XMMRegister);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+\n+instruct minmax_reduction2D_av_avx10(regD dst, vec src, vec xtmp1) %{\n+  predicate(VM_Version::supports_avx10_2() && Matcher::vector_element_basic_type(n->in(2)) == T_DOUBLE &&\n+            Matcher::vector_length(n->in(2)) == 2);\n+  match(Set dst (MinReductionV dst src));\n+  match(Set dst (MaxReductionV dst src));\n+  effect(TEMP dst, TEMP xtmp1);\n+  format %{ \"vector_minmax2D_reduction $dst, $src ; using $xtmp1 as TEMP\" %}\n+  ins_encode %{\n+    int opcode = this->ideal_Opcode();\n+    int vlen = Matcher::vector_length(this, $src);\n+    __ reduceDoubleMinMax(opcode, vlen, true, $dst$$XMMRegister, $src$$XMMRegister,\n+                          xnoreg, xnoreg, xnoreg, $xtmp1$$XMMRegister);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+instruct minmax_reductionD_av_avx10(regD dst, vec src, vec xtmp1, vec xtmp2) %{\n+  predicate(VM_Version::supports_avx10_2() && Matcher::vector_element_basic_type(n->in(2)) == T_DOUBLE &&\n+            Matcher::vector_length(n->in(2)) >= 4);\n+  match(Set dst (MinReductionV dst src));\n+  match(Set dst (MaxReductionV dst src));\n+  effect(TEMP dst, TEMP xtmp1, TEMP xtmp2);\n+  format %{ \"vector_minmaxD_reduction $dst, $src ; using $xtmp1 and $xtmp2 as TEMP\" %}\n+  ins_encode %{\n+    int opcode = this->ideal_Opcode();\n+    int vlen = Matcher::vector_length(this, $src);\n+    __ reduceDoubleMinMax(opcode, vlen, true, $dst$$XMMRegister, $src$$XMMRegister,\n+                          xnoreg, xnoreg, xnoreg, $xtmp1$$XMMRegister, $xtmp2$$XMMRegister);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n@@ -6350,0 +6482,16 @@\n+\/\/ Float\/Double vector Min\/Max\n+instruct minmaxFP_avx10_reg(vec dst, vec a, vec b) %{\n+  predicate(VM_Version::supports_avx10_2() &&\n+            is_floating_point_type(Matcher::vector_element_basic_type(n))); \/\/ T_FLOAT, T_DOUBLE\n+  match(Set dst (MinV a b));\n+  match(Set dst (MaxV a b));\n+  format %{ \"vector_minmaxFP  $dst, $a, $b\" %}\n+  ins_encode %{\n+    int vlen_enc = vector_length_encoding(this);\n+    int opcode = this->ideal_Opcode();\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this);\n+    __ vminmax_fp(opcode, elem_bt, $dst$$XMMRegister, k0, $a$$XMMRegister, $b$$XMMRegister, vlen_enc);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n@@ -6352,1 +6500,1 @@\n-  predicate(Matcher::vector_length_in_bytes(n) <= 32 &&\n+  predicate(!VM_Version::supports_avx10_2() && Matcher::vector_length_in_bytes(n) <= 32 &&\n@@ -6374,1 +6522,1 @@\n-  predicate(Matcher::vector_length_in_bytes(n) == 64 &&\n+  predicate(!VM_Version::supports_avx10_2() && Matcher::vector_length_in_bytes(n) == 64 &&\n@@ -10689,0 +10837,13 @@\n+instruct scalar_minmax_HF_avx10_reg(regF dst, regF src1, regF src2)\n+%{\n+  predicate(VM_Version::supports_avx10_2());\n+  match(Set dst (MaxHF src1 src2));\n+  match(Set dst (MinHF src1 src2));\n+  format %{ \"scalar_min_max_fp16 $dst, $src1, $src2\" %}\n+  ins_encode %{\n+    int function = this->ideal_Opcode() == Op_MinHF ? 0x4 : 0x5;\n+    __ eminmaxsh($dst$$XMMRegister, $src1$$XMMRegister, $src2$$XMMRegister, function);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n@@ -10691,0 +10852,1 @@\n+  predicate(!VM_Version::supports_avx10_2());\n@@ -10790,0 +10952,14 @@\n+instruct vector_minmax_HF_avx10_reg(vec dst, vec src1, vec src2)\n+%{\n+  predicate(VM_Version::supports_avx10_2());\n+  match(Set dst (MinVHF src1 src2));\n+  match(Set dst (MaxVHF src1 src2));\n+  format %{ \"vector_min_max_fp16 $dst, $src1, $src2\" %}\n+  ins_encode %{\n+    int vlen_enc = vector_length_encoding(this);\n+    int function =  this->ideal_Opcode() == Op_MinVHF ? 0x4 : 0x5;\n+    __ evminmaxph($dst$$XMMRegister, k0, $src1$$XMMRegister, $src2$$XMMRegister, true, function, vlen_enc);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n@@ -10792,0 +10968,1 @@\n+  predicate(!VM_Version::supports_avx10_2());\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":206,"deletions":29,"binary":false,"changes":235,"status":"modified"},{"patch":"@@ -4453,0 +4453,11 @@\n+\/\/ max = java.lang.Math.max(float a, float b)\n+instruct maxF_avx10_reg(regF dst, regF a, regF b) %{\n+  predicate(VM_Version::supports_avx10_2());\n+  match(Set dst (MaxF a b));\n+  format %{ \"maxF $dst, $a, $b\" %}\n+  ins_encode %{\n+    __ eminmaxss($dst$$XMMRegister, $a$$XMMRegister, $b$$XMMRegister, 0x5);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n@@ -4455,1 +4466,1 @@\n-  predicate(UseAVX > 0 && !VLoopReductions::is_reduction(n));\n+  predicate(!VM_Version::supports_avx10_2() && UseAVX > 0 && !VLoopReductions::is_reduction(n));\n@@ -4466,1 +4477,1 @@\n-  predicate(UseAVX > 0 && VLoopReductions::is_reduction(n));\n+  predicate(!VM_Version::supports_avx10_2() && UseAVX > 0 && VLoopReductions::is_reduction(n));\n@@ -4478,0 +4489,11 @@\n+\/\/ max = java.lang.Math.max(double a, double b)\n+instruct maxD_avx10_reg(regD dst, regD a, regD b) %{\n+  predicate(VM_Version::supports_avx10_2());\n+  match(Set dst (MaxD a b));\n+  format %{ \"maxD $dst, $a, $b\" %}\n+  ins_encode %{\n+    __ eminmaxsd($dst$$XMMRegister, $a$$XMMRegister, $b$$XMMRegister, 0x5);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n@@ -4480,1 +4502,1 @@\n-  predicate(UseAVX > 0 && !VLoopReductions::is_reduction(n));\n+  predicate(!VM_Version::supports_avx10_2() && UseAVX > 0 && !VLoopReductions::is_reduction(n));\n@@ -4491,1 +4513,1 @@\n-  predicate(UseAVX > 0 && VLoopReductions::is_reduction(n));\n+  predicate(!VM_Version::supports_avx10_2() && UseAVX > 0 && VLoopReductions::is_reduction(n));\n@@ -4503,0 +4525,11 @@\n+\/\/ max = java.lang.Math.min(float a, float b)\n+instruct minF_avx10_reg(regF dst, regF a, regF b) %{\n+  predicate(VM_Version::supports_avx10_2());\n+  match(Set dst (MinF a b));\n+  format %{ \"maxF $dst, $a, $b\" %}\n+  ins_encode %{\n+    __ eminmaxss($dst$$XMMRegister, $a$$XMMRegister, $b$$XMMRegister, 0x4);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n@@ -4505,1 +4538,1 @@\n-  predicate(UseAVX > 0 && !VLoopReductions::is_reduction(n));\n+  predicate(!VM_Version::supports_avx10_2() && UseAVX > 0 && !VLoopReductions::is_reduction(n));\n@@ -4516,1 +4549,1 @@\n-  predicate(UseAVX > 0 && VLoopReductions::is_reduction(n));\n+  predicate(!VM_Version::supports_avx10_2() && UseAVX > 0 && VLoopReductions::is_reduction(n));\n@@ -4528,0 +4561,11 @@\n+\/\/ max = java.lang.Math.min(double a, double b)\n+instruct minD_avx10_reg(regD dst, regD a, regD b) %{\n+  predicate(VM_Version::supports_avx10_2());\n+  match(Set dst (MinD a b));\n+  format %{ \"maxD $dst, $a, $b\" %}\n+  ins_encode %{\n+    __ eminmaxsd($dst$$XMMRegister, $a$$XMMRegister, $b$$XMMRegister, 0x4);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n@@ -4530,1 +4574,1 @@\n-  predicate(UseAVX > 0 && !VLoopReductions::is_reduction(n));\n+  predicate(!VM_Version::supports_avx10_2() && UseAVX > 0 && !VLoopReductions::is_reduction(n));\n@@ -4541,1 +4585,1 @@\n-  predicate(UseAVX > 0 && VLoopReductions::is_reduction(n));\n+  predicate(!VM_Version::supports_avx10_2() && UseAVX > 0 && VLoopReductions::is_reduction(n));\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":52,"deletions":8,"binary":false,"changes":60,"status":"modified"}]}