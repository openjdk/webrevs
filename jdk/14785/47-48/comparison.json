{"files":[{"patch":"@@ -816,3 +816,3 @@\n-  \/\/ where pre_iter_C_const, pre_iter_C_invar, and pre_iter_C_init are defined as the number of\n-  \/\/ pre-loop iterations required to align the C_const, init and invar terms individually.\n-  \/\/ Hence, we can rewrite:\n+  \/\/ where pre_iter_C_const, pre_iter_C_invar, and pre_iter_C_init are rationals (rational numbers),\n+  \/\/ and define how many pre-loop iterations (or fractions thereof) are required to align the\n+  \/\/ C_const, init and invar terms individually. Hence, we can rewrite:\n@@ -826,2 +826,6 @@\n-  \/\/ We strengthen the constraints by splitting the equation into 3 equations, where the C_const,\n-  \/\/ init, and invar term are aligned individually:\n+  \/\/ While we can now attribute the (fractional) amount of iterations required for the C_const,\n+  \/\/ invar and init terms, this does not give us a way to align these terms independendly.\n+  \/\/\n+  \/\/ We strengthen the constraints by splitting the equation into 3 equations, and require that\n+  \/\/ pre_iter_C_const, pre_iter_C_invar, and pre_iter_C_init are integers (not just rationals),\n+  \/\/ which means that the C_const, init and invar terms can be aligned independently:\n@@ -836,1 +840,1 @@\n-  \/\/ we can ensure alignment for and init or invar.\n+  \/\/ we can ensure alignment for any runtime value of init or invar.\n","filename":"src\/hotspot\/share\/opto\/vectorization.cpp","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"}]}