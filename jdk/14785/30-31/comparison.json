{"files":[{"patch":"@@ -3880,1 +3880,1 @@\n-  Node* lim0 = pre_opaq->in(1);\n+  Node* old_limit = pre_opaq->in(1);\n@@ -3898,3 +3898,3 @@\n-  \/\/   lim0:     current pre-loop limit\n-  \/\/   lim:      new pre-loop limit\n-  \/\/   N:        difference between lim and lim0\n+  \/\/   old_limit:   current pre-loop limit\n+  \/\/   new_limit:   new pre-loop limit\n+  \/\/   diff_limits: difference between new_limit and old_limit\n@@ -3902,1 +3902,1 @@\n-  \/\/ We want to find N, such that:\n+  \/\/ We want to find diff_limits, such that:\n@@ -3904,1 +3904,1 @@\n-  \/\/   iv = lim = lim0 + N   (exit when iv reaches the new limit)\n+  \/\/   iv = new_limit = old_limit + diff_limits   (exit when iv reaches the new limit)\n@@ -3910,2 +3910,2 @@\n-  \/\/   adr = E + scale * lim\n-  \/\/       = E + scale * lim0 + scale * N\n+  \/\/   adr = E + scale * new_limit\n+  \/\/       = E + scale * old_limit + scale * diff_limits\n@@ -3913,1 +3913,1 @@\n-  \/\/   (E + scale * lim0 + scale * N) % aw = 0\n+  \/\/   (E + scale * old_limit + scale * diff_limits) % aw = 0\n@@ -3924,2 +3924,2 @@\n-  \/\/ Further, if abs(scale) >= aw, then N has no effect on alignment, and we are not\n-  \/\/ able to affect the alignment at all. Hence, we require abs(scale) < aw.\n+  \/\/ Further, if abs(scale) >= aw, then diff_limits has no effect on alignment, and\n+  \/\/ we are not able to affect the alignment at all. Hence, we require abs(scale) < aw.\n@@ -3936,4 +3936,4 @@\n-  \/\/ Case 1: scale > 0 && stride > 0 (i.e. N >= 0)\n-  \/\/   (e + lim0 + N) % V = 0\n-  \/\/   N = (V - (e + lim0)) % V\n-  \/\/   lim = lim0 + (-e - lim0) % V\n+  \/\/ Case 1: scale > 0 && stride > 0 (i.e. diff_limits >= 0)\n+  \/\/   (e + old_limit + diff_limits) % V = 0\n+  \/\/   diff_limits = (V - (e + old_limit)) % V\n+  \/\/   new_limit = old_limit + (-e - old_limit) % V\n@@ -3941,4 +3941,4 @@\n-  \/\/ Case 2: scale < 0 && stride > 0 (i.e. N >= 0)\n-  \/\/   (e - lim0 - N) % V = 0\n-  \/\/   N = (e - lim0) % V\n-  \/\/   lim = lim0 + (+e - lim0) % V\n+  \/\/ Case 2: scale < 0 && stride > 0 (i.e. diff_limits >= 0)\n+  \/\/   (e - old_limit - diff_limits) % V = 0\n+  \/\/   diff_limits = (e - old_limit) % V\n+  \/\/   new_limit = old_limit + (+e - old_limit) % V\n@@ -3946,4 +3946,4 @@\n-  \/\/ Case 3: scale > 0 && stride < 0 (i.e. N <= 0)\n-  \/\/   (e + lim0 - abs(N)) % V = 0\n-  \/\/   abs(N) = (e + lim0) % V\n-  \/\/   lim = lim0 - (+e + lim0) % V\n+  \/\/ Case 3: scale > 0 && stride < 0 (i.e. diff_limits <= 0)\n+  \/\/   (e + old_limit - abs(diff_limits)) % V = 0\n+  \/\/   abs(diff_limits) = (e + old_limit) % V\n+  \/\/   new_limit = old_limit - (+e + old_limit) % V\n@@ -3951,4 +3951,4 @@\n-  \/\/ Case 4: scale < 0 && stride < 0 (i.e. N <= 0)\n-  \/\/   (e - lim0 + abs(N)) % V = 0\n-  \/\/   abs(N) = (lim0 - e) % V\n-  \/\/   lim = lim0 - (-e + lim0) % V\n+  \/\/ Case 4: scale < 0 && stride < 0 (i.e. diff_limits <= 0)\n+  \/\/   (e - old_limit + abs(diff_limits)) % V = 0\n+  \/\/   abs(diff_limits) = (old_limit - e) % V\n+  \/\/   new_limit = old_limit - (-e + old_limit) % V\n@@ -3957,1 +3957,1 @@\n-  \/\/   lim = lim0 +- (pm_e +- lim0) % V\n+  \/\/   new_limit = old_limit +- (pm_e +- old_limit) % V\n@@ -4069,2 +4069,2 @@\n-  \/\/ 3: add \/ subtract lim0\n-  Node* pm_e_pm_lim0 = nullptr;\n+  \/\/ 3: add \/ subtract old_limit\n+  Node* pm_e_pm_old_limit = nullptr;\n@@ -4072,1 +4072,1 @@\n-    pm_e_pm_lim0 = new SubINode(pm_e, lim0);\n+    pm_e_pm_old_limit = new SubINode(pm_e, old_limit);\n@@ -4074,1 +4074,1 @@\n-    pm_e_pm_lim0 = new AddINode(pm_e, lim0);\n+    pm_e_pm_old_limit = new AddINode(pm_e, old_limit);\n@@ -4076,2 +4076,2 @@\n-  _igvn.register_new_node_with_optimizer(pm_e_pm_lim0);\n-  _phase->set_ctrl(pm_e_pm_lim0, pre_ctrl);\n+  _igvn.register_new_node_with_optimizer(pm_e_pm_old_limit);\n+  _phase->set_ctrl(pm_e_pm_old_limit, pre_ctrl);\n@@ -4081,3 +4081,3 @@\n-  Node* pm_e_pm_lim0_mod_V = new AndINode(pm_e_pm_lim0, mask_V);\n-  _igvn.register_new_node_with_optimizer(pm_e_pm_lim0_mod_V);\n-  _phase->set_ctrl(pm_e_pm_lim0_mod_V, pre_ctrl);\n+  Node* pm_e_pm_old_limit_mod_V = new AndINode(pm_e_pm_old_limit, mask_V);\n+  _igvn.register_new_node_with_optimizer(pm_e_pm_old_limit_mod_V);\n+  _phase->set_ctrl(pm_e_pm_old_limit_mod_V, pre_ctrl);\n@@ -4086,1 +4086,1 @@\n-  Node* lim = nullptr;\n+  Node* new_limit = nullptr;\n@@ -4088,1 +4088,1 @@\n-    lim = new SubINode(lim0, pm_e_pm_lim0_mod_V);\n+    new_limit = new SubINode(old_limit, pm_e_pm_old_limit_mod_V);\n@@ -4090,1 +4090,1 @@\n-    lim = new AddINode(lim0, pm_e_pm_lim0_mod_V);\n+    new_limit = new AddINode(old_limit, pm_e_pm_old_limit_mod_V);\n@@ -4092,2 +4092,2 @@\n-  _igvn.register_new_node_with_optimizer(lim);\n-  _phase->set_ctrl(lim, pre_ctrl);\n+  _igvn.register_new_node_with_optimizer(new_limit);\n+  _phase->set_ctrl(new_limit, pre_ctrl);\n@@ -4097,2 +4097,2 @@\n-    (stride > 0) ? (Node*) new MinINode(lim, orig_limit)\n-                 : (Node*) new MaxINode(lim, orig_limit);\n+    (stride > 0) ? (Node*) new MinINode(new_limit, orig_limit)\n+                 : (Node*) new MaxINode(new_limit, orig_limit);\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":44,"deletions":44,"binary":false,"changes":88,"status":"modified"}]}