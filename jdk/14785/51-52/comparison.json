{"files":[{"patch":"@@ -841,4 +841,3 @@\n-  \/\/   0\n-  \/\/   = (  C_const             + C_pre * pre_iter_C_const\n-  \/\/      + C_invar * var_invar + C_pre * pre_iter_C_invar\n-  \/\/      + C_init  * var_init  + C_pre * pre_iter_C_init  ) % aw\n+  \/\/   0 = (  C_const             + C_pre * pre_iter_C_const\n+  \/\/        + C_invar * var_invar + C_pre * pre_iter_C_invar\n+  \/\/        + C_init  * var_init  + C_pre * pre_iter_C_init  ) % aw\n@@ -846,2 +845,2 @@\n-  \/\/   = (  C_const + C_invar * var_invar + C_init * var_init\n-  \/\/      + C_pre * (pre_iter_C_const + pre_iter_C_invar + pre_iter_C_init)) % aw\n+  \/\/     = (  C_const + C_invar * var_invar + C_init * var_init\n+  \/\/        + C_pre * (pre_iter_C_const + pre_iter_C_invar + pre_iter_C_init)) % aw\n@@ -849,2 +848,2 @@\n-  \/\/   = (  C_const + C_invar * var_invar + C_init * var_init\n-  \/\/      + C_pre * pre_iter) % aw\n+  \/\/     = (  C_const + C_invar * var_invar + C_init * var_init\n+  \/\/        + C_pre * pre_iter) % aw\n@@ -1118,1 +1117,1 @@\n-  \/\/ We can still simply simplifiy this solution, with:\n+  \/\/ We can further simplify this solution by introducing integer 0 <= r < q:\n@@ -1193,1 +1192,1 @@\n-void print_icon_or_idx(const Node* n) {\n+void print_con_or_idx(const Node* n) {\n@@ -1227,1 +1226,1 @@\n-    print_icon_or_idx(_init_node);\n+    print_con_or_idx(_init_node);\n@@ -1233,1 +1232,1 @@\n-    print_icon_or_idx(_base);\n+    print_con_or_idx(_base);\n@@ -1235,1 +1234,1 @@\n-    print_icon_or_idx(_invar);\n+    print_con_or_idx(_invar);\n@@ -1300,1 +1299,1 @@\n-  tty->print_cr(\"  EQ(4a): (C_invar(%3d) * var_invar + C_pre(%d) * pre_iter_C_invar) %% aw(%d) = 0  (align invar term individually)\",\n+  tty->print_cr(\"  EQ(4b): (C_invar(%3d) * var_invar + C_pre(%d) * pre_iter_C_invar) %% aw(%d) = 0  (align invar term individually)\",\n@@ -1304,1 +1303,1 @@\n-  tty->print_cr(\"  EQ(4a): (C_init( %3d) * var_init  + C_pre(%d) * pre_iter_C_init ) %% aw(%d) = 0  (align init term individually)\",\n+  tty->print_cr(\"  EQ(4c): (C_init( %3d) * var_init  + C_pre(%d) * pre_iter_C_init ) %% aw(%d) = 0  (align init term individually)\",\n","filename":"src\/hotspot\/share\/opto\/vectorization.cpp","additions":14,"deletions":15,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -422,1 +422,1 @@\n-    \/\/ Note: pre_stride and init are idential for all mem_refs in the loop.\n+    \/\/ Note: pre_stride and init are identical for all mem_refs in the loop.\n@@ -425,1 +425,1 @@\n-    \/\/ for both. The init alignment term is thus triviall identical.\n+    \/\/ for both. The init alignment term is thus trivially identical.\n@@ -459,1 +459,1 @@\n-    \/\/ is an integer a: a * q1 = q1. Thus, it remains to check if there\n+    \/\/ is an integer a: a * q1 = q2. Thus, it remains to check if there\n@@ -484,1 +484,1 @@\n-\/\/ that all vector memory accesses can be aligned. We acheive this alignment by\n+\/\/ that all vector memory accesses can be aligned. We achieve this alignment by\n","filename":"src\/hotspot\/share\/opto\/vectorization.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}