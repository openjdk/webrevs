{"files":[{"patch":"@@ -1651,1 +1651,1 @@\n-  Node* invar             = mem_ref_p.invar();\n+  const Node* invar       = mem_ref_p.invar();\n@@ -2008,1 +2008,1 @@\n-      Node* invar_dependency = invar;\n+      const Node* invar_dependency = invar;\n@@ -3877,0 +3877,2 @@\n+\n+  \/\/ The opaque node for the limit, where we adjust the input\n@@ -3967,6 +3969,6 @@\n-  int aw       = vector_width_in_bytes(align_to_ref);\n-  int stride   = iv_stride();\n-  int scale    = align_to_ref_p.scale_in_bytes();\n-  int offset   = align_to_ref_p.offset_in_bytes();\n-  Node* base   = align_to_ref_p.adr();\n-  Node* invar  = align_to_ref_p.invar();\n+  const int aw       = vector_width_in_bytes(align_to_ref);\n+  const int stride   = iv_stride();\n+  const int scale    = align_to_ref_p.scale_in_bytes();\n+  const int offset   = align_to_ref_p.offset_in_bytes();\n+  Node* base         = align_to_ref_p.adr();\n+  Node* invar        = align_to_ref_p.invar();\n@@ -4011,1 +4013,1 @@\n-  int V = aw \/ abs(scale);\n+  const int V = aw \/ abs(scale);\n@@ -4020,1 +4022,1 @@\n-  bool is_minus = scale * stride > 0;\n+  const bool is_minus = scale * stride > 0;\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -261,1 +261,1 @@\n-  Node* _invar_dependency = nullptr;\n+  Node const* _invar_dependency = nullptr;\n@@ -298,1 +298,1 @@\n-                    Node* invar_dependency,\n+                    const Node* invar_dependency,\n@@ -345,1 +345,1 @@\n-  Node* invar_dependency() const {\n+  const Node* invar_dependency() const {\n","filename":"src\/hotspot\/share\/opto\/superword.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}