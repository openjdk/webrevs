{"files":[{"patch":"@@ -958,1 +958,1 @@\n-      return new AlignmentSolutionConstrained(pre_r, pre_q, _mem_ref, _aw,\n+      return new AlignmentSolutionConstrained(pre_r, pre_q, _mem_ref,\n","filename":"src\/hotspot\/share\/opto\/vectorization.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -276,1 +276,1 @@\n-\/\/   3. Constrained (r, q, mem_ref, alignment_width, scale, invar)\n+\/\/   3. Constrained (r, q, mem_ref, scale, invar)\n@@ -297,3 +297,3 @@\n-  virtual bool is_empty() const       { return false; }\n-  virtual bool is_trivial() const     { return false; }\n-  virtual bool is_constrained() const { return false; }\n+  virtual bool is_empty() const = 0;\n+  virtual bool is_trivial() const = 0;\n+  virtual bool is_constrained() const = 0;\n@@ -325,1 +325,3 @@\n-  virtual bool is_empty() const override final { return true; }\n+  virtual bool is_empty() const override final       { return true; }\n+  virtual bool is_trivial() const override final     { return false; }\n+  virtual bool is_constrained() const override final { return false; }\n@@ -328,2 +330,2 @@\n-  virtual const AlignmentSolution* filter(const AlignmentSolution* other) const {\n-    return new AlignmentSolutionEmpty(\"invalid solution input to filter\");\n+  virtual const AlignmentSolution* filter(const AlignmentSolution* other) const override final {\n+    return new AlignmentSolutionEmpty(\"empty solution input to filter\");\n@@ -333,1 +335,1 @@\n-    tty->print_cr(\"no solution: %s\", reason());\n+    tty->print_cr(\"empty solution: %s\", reason());\n@@ -340,1 +342,3 @@\n-  virtual bool is_trivial() const override final { return true; }\n+  virtual bool is_empty() const override final       { return false; }\n+  virtual bool is_trivial() const override final     { return true; }\n+  virtual bool is_constrained() const override final { return false; }\n@@ -342,1 +346,1 @@\n-  virtual const AlignmentSolution* filter(const AlignmentSolution* other) const {\n+  virtual const AlignmentSolution* filter(const AlignmentSolution* other) const override final {\n@@ -344,1 +348,1 @@\n-      return new AlignmentSolutionEmpty(\"invalid solution input to filter\");\n+      return new AlignmentSolutionEmpty(\"empty solution input to filter\");\n@@ -356,2 +360,2 @@\n-  int _r = 0;\n-  int _q = 1;\n+  const int _r = 0;\n+  const int _q = 1;\n@@ -359,3 +363,2 @@\n-  int _alignment_width = 0; \/\/ TODO necessary???\n-  Node const* _invar_dependency = nullptr;\n-  int _scale_dependency = 0;\n+  const Node* _invar_dependency = nullptr;\n+  const int _scale_dependency = 0;\n@@ -366,1 +369,0 @@\n-                               int alignment_width,\n@@ -372,1 +374,0 @@\n-      _alignment_width(alignment_width),\n@@ -377,6 +378,1 @@\n-    assert(_mem_ref != nullptr &&\n-           _mem_ref->memory_size() <= _alignment_width,\n-           \"must have mem_ref and alignment_width\");\n-    assert(alignment_width > 0 &&\n-           is_power_of_2(alignment_width),\n-           \"alignment_width must be power of 2\");\n+    assert(_mem_ref != nullptr, \"must have mem_ref\");\n@@ -385,2 +381,4 @@\n-  int r() const                         { return _r; }\n-  int q() const                         { return _q; }\n+  virtual bool is_empty() const override final       { return false; }\n+  virtual bool is_trivial() const override final     { return false; }\n+  virtual bool is_constrained() const override final { return true; }\n+\n@@ -388,3 +386,0 @@\n-  int alignment_width() const           { return _alignment_width; }\n-  const Node* invar_dependency() const  { return _invar_dependency; }\n-  int scale_dependency() const          { return _scale_dependency; }\n@@ -392,1 +387,0 @@\n-  virtual bool is_constrained() const override final { return true; }\n@@ -395,1 +389,1 @@\n-  virtual const AlignmentSolution* filter(const AlignmentSolution* other) const {\n+  virtual const AlignmentSolution* filter(const AlignmentSolution* other) const override final {\n@@ -397,1 +391,1 @@\n-      return new AlignmentSolutionEmpty(\"invalid solution input to filter\");\n+      return new AlignmentSolutionEmpty(\"empty solution input to filter\");\n@@ -407,1 +401,1 @@\n-    if (s1->invar_dependency() != s2->invar_dependency()) {\n+    if (s1->_invar_dependency != s2->_invar_dependency) {\n@@ -410,1 +404,1 @@\n-    if (s1->scale_dependency() != s2->scale_dependency()) {\n+    if (s1->_scale_dependency != s2->_scale_dependency) {\n@@ -415,1 +409,1 @@\n-    if (s1->q() > s2->q()) {\n+    if (s1->_q > s2->_q) {\n@@ -418,1 +412,1 @@\n-    assert(s1->q() <= s2->q(), \"s1 is a smaller modulo space than s2\");\n+    assert(s1->_q <= s2->_q, \"s1 is a smaller modulo space than s2\");\n@@ -421,1 +415,1 @@\n-    if (mod(s2->r(), s1->q()) != s1->r()) {\n+    if (mod(s2->_r, s1->_q) != s1->_r) {\n@@ -431,4 +425,4 @@\n-    tty->print(\"pre_r(%d) + m * pre_q(%d), mem_ref[%d] %% alignment_width(%d),\",\n-                r(), q(), mem_ref()->_idx, alignment_width());\n-    tty->print(\" scale = %d, \", scale_dependency());\n-    if (invar_dependency() == nullptr) {\n+    tty->print(\"pre_r(%d) + m * pre_q(%d), mem_ref[%d],\",\n+                _r, _q, mem_ref()->_idx);\n+    tty->print(\" scale = %d, \", _scale_dependency);\n+    if (_invar_dependency == nullptr) {\n@@ -437,1 +431,1 @@\n-      tty->print_cr(\"invar[%d]\", invar_dependency()->_idx);\n+      tty->print_cr(\"invar[%d]\", _invar_dependency->_idx);\n","filename":"src\/hotspot\/share\/opto\/vectorization.hpp","additions":36,"deletions":42,"binary":false,"changes":78,"status":"modified"}]}