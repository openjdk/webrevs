{"files":[{"patch":"@@ -3465,1 +3465,1 @@\n-\/\/ Ensure that the main loop vectors are aligned by adjusting the pre loop limit. We memory align\n+\/\/ Ensure that the main loop vectors are aligned by adjusting the pre loop limit. We memory-align\n@@ -3491,1 +3491,1 @@\n-  \/\/ we know that iv is equals to the pre-loop limit. If we adjust the pre-loop\n+  \/\/ we know that iv is equal to the pre-loop limit. If we adjust the pre-loop\n@@ -3540,1 +3540,1 @@\n-  \/\/ required, then alignment is still preferrable for performance, but not necessary.\n+  \/\/ required, then alignment is still preferable for performance, but not necessary.\n@@ -3557,1 +3557,1 @@\n-  \/\/ Note, (9) allows for periodic solutons of adjust_pre_iter, with periodicity AW.\n+  \/\/ Note, (9) allows for periodic solutions of adjust_pre_iter, with periodicity AW.\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -322,1 +322,1 @@\n-  const char* _reason = nullptr;\n+  const char* _reason;\n@@ -366,5 +366,5 @@\n-  const MemNode* _mem_ref = nullptr;\n-  const int _q = 1;\n-  const int _r = 0;\n-  const Node* _invar = nullptr;\n-  const int _scale = 0;\n+  const MemNode* _mem_ref;\n+  const int _q;\n+  const int _r;\n+  const Node* _invar;\n+  const int _scale;\n@@ -516,1 +516,1 @@\n-\/\/ iterations) which would align its address. The AlignmentSolver finds such a\n+\/\/ iterations) which would align its address. The AlignmentSolver finds such an\n","filename":"src\/hotspot\/share\/opto\/vectorization.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1042,1 +1042,1 @@\n-\/\/ Verify that memory address (adr) is alignemd. The mask specifies the\n+\/\/ Verify that memory address (adr) is aligned. The mask specifies the\n@@ -1056,1 +1056,0 @@\n-public:\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}