{"files":[{"patch":"@@ -31,0 +31,1 @@\n+ * @key randomness\n@@ -44,0 +45,1 @@\n+ * @key randomness\n@@ -47,1 +49,0 @@\n- *                                 -XX:CompileCommand=VectorizeDebug,compiler.loopopts.superword.TestAlignVectorFuzzer::test*,128\n@@ -60,0 +61,1 @@\n+ * @key randomness\n@@ -63,1 +65,0 @@\n- *                                 -XX:CompileCommand=VectorizeDebug,compiler.loopopts.superword.TestAlignVectorFuzzer::test*,128\n@@ -76,0 +77,1 @@\n+ * @key randomness\n@@ -79,1 +81,0 @@\n- *                                 -XX:CompileCommand=VectorizeDebug,compiler.loopopts.superword.TestAlignVectorFuzzer::test*,128\n@@ -96,1 +97,1 @@\n-\n+    static final int ITERATIONS_MAX = 5; \/\/ time allowance may lead to fewer iterations\n@@ -98,1 +99,0 @@\n-    static final int ITERATIONS = 5;\n@@ -558,1 +558,6 @@\n-        for (int i = 1; i <= ITERATIONS; i++) {\n+\n+        long test_time_allowance = System.currentTimeMillis() +\n+                                   Utils.adjustTimeout(Utils.DEFAULT_TEST_TIMEOUT) -\n+                                   20_000; \/\/ somewhat arbitrary margin\n+\n+        for (int i = 1; i <= ITERATIONS_MAX; i++) {\n@@ -563,1 +568,2 @@\n-                System.out.println(\"ITERATION \" + i + \" of \" + ITERATIONS + \". Test \" + name);\n+                System.out.println(\"ITERATION \" + i + \" of \" + ITERATIONS_MAX + \". Test \" + name +\n+                                   \", time allowance: \" + (test_time_allowance - System.currentTimeMillis()));\n@@ -573,0 +579,5 @@\n+\n+                if (System.currentTimeMillis() > test_time_allowance) {\n+                    System.out.println(\"TEST PASSED: hit maximal time allownance during iteration \" + i);\n+                    return;\n+                }\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestAlignVectorFuzzer.java","additions":18,"deletions":7,"binary":false,"changes":25,"status":"modified"}]}