{"files":[{"patch":"@@ -194,1 +194,1 @@\n-    AOTLinkedClassTable* table = AOTLinkedClassTable::get(CDSConfig::is_dumping_static_archive());\n+    AOTLinkedClassTable* table = AOTLinkedClassTable::get();\n@@ -215,10 +215,1 @@\n-    if (ik->in_aot_cache() && CDSConfig::is_dumping_dynamic_archive()) {\n-      if (CDSConfig::is_using_aot_linked_classes()) {\n-        \/\/ This class was recorded as AOT-linked for the base archive,\n-        \/\/ so there's no need to do so again for the dynamic archive.\n-      } else {\n-        list.append(ik);\n-      }\n-    } else {\n-      list.append(ArchiveBuilder::current()->get_buffered_addr(ik));\n-    }\n+    list.append(ArchiveBuilder::current()->get_buffered_addr(ik));\n","filename":"src\/hotspot\/share\/cds\/aotClassLinker.cpp","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -49,2 +49,2 @@\n-void AOTLinkedClassBulkLoader::serialize(SerializeClosure* soc, bool is_static_archive) {\n-  AOTLinkedClassTable::get(is_static_archive)->serialize(soc);\n+void AOTLinkedClassBulkLoader::serialize(SerializeClosure* soc) {\n+  AOTLinkedClassTable::get()->serialize(soc);\n@@ -120,2 +120,2 @@\n-  load_table(AOTLinkedClassTable::for_static_archive(),  class_category, h_loader, CHECK);\n-  load_table(AOTLinkedClassTable::for_dynamic_archive(), class_category, h_loader, CHECK);\n+  AOTLinkedClassTable* table = AOTLinkedClassTable::get();\n+  load_table(table, class_category, h_loader, CHECK);\n@@ -125,3 +125,0 @@\n-  \/\/\n-  \/\/ Only the classes in the static archive can have archived mirrors.\n-  AOTLinkedClassTable* static_table = AOTLinkedClassTable::for_static_archive();\n@@ -134,1 +131,1 @@\n-    init_required_classes_for_loader(h_loader, static_table->boot2(), CHECK);\n+    init_required_classes_for_loader(h_loader, table->boot2(), CHECK);\n@@ -137,1 +134,1 @@\n-    init_required_classes_for_loader(h_loader, static_table->platform(), CHECK);\n+    init_required_classes_for_loader(h_loader, table->platform(), CHECK);\n@@ -140,1 +137,1 @@\n-    init_required_classes_for_loader(h_loader, static_table->app(), CHECK);\n+    init_required_classes_for_loader(h_loader, table->app(), CHECK);\n@@ -336,1 +333,1 @@\n-  init_required_classes_for_loader(Handle(), AOTLinkedClassTable::for_static_archive()->boot(), CHECK);\n+  init_required_classes_for_loader(Handle(), AOTLinkedClassTable::get()->boot(), CHECK);\n@@ -430,2 +427,1 @@\n-    \/\/ Only static archive can have training data.\n-    AOTLinkedClassTable* table = AOTLinkedClassTable::for_static_archive();\n+    AOTLinkedClassTable* table = AOTLinkedClassTable::get();\n","filename":"src\/hotspot\/share\/cds\/aotLinkedClassBulkLoader.cpp","additions":9,"deletions":13,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-  static void serialize(SerializeClosure* soc, bool is_static_archive) NOT_CDS_RETURN;\n+  static void serialize(SerializeClosure* soc) NOT_CDS_RETURN;\n","filename":"src\/hotspot\/share\/cds\/aotLinkedClassBulkLoader.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,2 +30,1 @@\n-AOTLinkedClassTable AOTLinkedClassTable::_for_static_archive;\n-AOTLinkedClassTable AOTLinkedClassTable::_for_dynamic_archive;\n+AOTLinkedClassTable AOTLinkedClassTable::_instance;\n","filename":"src\/hotspot\/share\/cds\/aotLinkedClassTable.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -42,4 +42,1 @@\n-  \/\/ The VM may load up to 2 CDS archives -- static and dynamic. Each\n-  \/\/ archive can have its own AOTLinkedClassTable.\n-  static AOTLinkedClassTable _for_static_archive;\n-  static AOTLinkedClassTable _for_dynamic_archive;\n+  static AOTLinkedClassTable _instance;\n@@ -57,5 +54,2 @@\n-  static AOTLinkedClassTable* for_static_archive()  { return &_for_static_archive; }\n-  static AOTLinkedClassTable* for_dynamic_archive() { return &_for_dynamic_archive; }\n-\n-  static AOTLinkedClassTable* get(bool is_static_archive) {\n-    return is_static_archive ? for_static_archive() : for_dynamic_archive();\n+  static AOTLinkedClassTable* get() {\n+    return &_instance;\n","filename":"src\/hotspot\/share\/cds\/aotLinkedClassTable.hpp","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -504,1 +504,1 @@\n-  AOTLinkedClassBulkLoader::serialize(soc, true);\n+  AOTLinkedClassBulkLoader::serialize(soc);\n@@ -2003,1 +2003,1 @@\n-    ArchiveBuilder::serialize_dynamic_archivable_items(&rc);\n+    DynamicArchive::serialize(&rc);\n","filename":"src\/hotspot\/share\/cds\/aotMetaspace.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"cds\/aotLinkedClassBulkLoader.hpp\"\n@@ -1018,7 +1017,0 @@\n-void ArchiveBuilder::serialize_dynamic_archivable_items(SerializeClosure* soc) {\n-  SymbolTable::serialize_shared_table_header(soc, false);\n-  SystemDictionaryShared::serialize_dictionary_headers(soc, false);\n-  DynamicArchive::serialize_array_klasses(soc);\n-  AOTLinkedClassBulkLoader::serialize(soc, false);\n-}\n-\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -385,1 +385,0 @@\n-  static void serialize_dynamic_archivable_items(SerializeClosure* soc);\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -759,0 +759,6 @@\n+  if (is_dumping_dynamic_archive() && AOTClassLinking) {\n+    assert(FLAG_IS_CMDLINE(AOTClassLinking), \"should not be set ergonomically\");\n+    log_warning(cds)(\"AOTClassLinking is not supported for dynamic CDS archive\");\n+    FLAG_SET_ERGO(AOTClassLinking, false);\n+  }\n+\n@@ -1013,5 +1019,4 @@\n-  if (is_dumping_preimage_static_archive()) {\n-    return false;\n-  } else if (is_dumping_dynamic_archive()) {\n-    return is_using_full_module_graph() && AOTClassLinking;\n-  } else if (is_dumping_static_archive()) {\n+  if (is_dumping_classic_static_archive() || is_dumping_final_static_archive()) {\n+    \/\/ FMG is required to guarantee that all cached boot\/platform\/app classes\n+    \/\/ are visible in the production run, so they can be unconditionally\n+    \/\/ loaded during VM bootstrap.\n","filename":"src\/hotspot\/share\/cds\/cdsConfig.cpp","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -163,1 +163,0 @@\n-      AOTClassLinker::write_to_archive();\n@@ -167,1 +166,1 @@\n-      ArchiveBuilder::serialize_dynamic_archivable_items(&wc);\n+      DynamicArchive::serialize(&wc);\n@@ -417,0 +416,6 @@\n+void DynamicArchive::serialize(SerializeClosure* soc) {\n+  SymbolTable::serialize_shared_table_header(soc, false);\n+  SystemDictionaryShared::serialize_dictionary_headers(soc, false);\n+  soc->do_ptr(&_dynamic_archive_array_klasses);\n+}\n+\n@@ -459,4 +464,0 @@\n-void DynamicArchive::serialize_array_klasses(SerializeClosure* soc) {\n-  soc->do_ptr(&_dynamic_archive_array_klasses);\n-}\n-\n","filename":"src\/hotspot\/share\/cds\/dynamicArchive.cpp","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-  static void serialize_array_klasses(SerializeClosure* soc);\n+  static void serialize(SerializeClosure* soc);\n","filename":"src\/hotspot\/share\/cds\/dynamicArchive.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -870,5 +870,0 @@\n-    if (CDSConfig::is_dumping_dynamic_archive() && ik->in_aot_cache()) {\n-      \/\/ ik is already part of the static archive, so it will never be considered as excluded.\n-      return false;\n-    }\n-\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -537,11 +537,1 @@\n- -runtime\/cds\/appcds\/dynamicArchive\/LambdaContainsOldInf.java \\\n- -runtime\/cds\/appcds\/dynamicArchive\/LambdaCustomLoader.java \\\n- -runtime\/cds\/appcds\/dynamicArchive\/LambdaForOldInfInBaseArchive.java \\\n- -runtime\/cds\/appcds\/dynamicArchive\/LambdaInBaseArchive.java \\\n- -runtime\/cds\/appcds\/dynamicArchive\/LambdasInTwoArchives.java \\\n- -runtime\/cds\/appcds\/dynamicArchive\/ModulePath.java \\\n- -runtime\/cds\/appcds\/dynamicArchive\/NestHostOldInf.java \\\n- -runtime\/cds\/appcds\/dynamicArchive\/OldClassAndInf.java \\\n- -runtime\/cds\/appcds\/dynamicArchive\/OldClassInBaseArchive.java \\\n- -runtime\/cds\/appcds\/dynamicArchive\/OldClassVerifierTrouble.java \\\n- -runtime\/cds\/appcds\/dynamicArchive\/RedefineCallerClassTest.java \\\n+ -runtime\/cds\/appcds\/dynamicArchive \\\n","filename":"test\/hotspot\/jtreg\/TEST.groups","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -43,14 +43,0 @@\n-\/*\n- * @test id=dynamic\n- * @requires vm.cds.supports.aot.class.linking\n- * @library \/test\/jdk\/lib\/testlibrary \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n- * @build InitiatingLoaderTester BadOldClassA BadOldClassB\n- * @build jdk.test.whitebox.WhiteBox BulkLoaderTest SimpleCusty\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar BulkLoaderTestApp.jar BulkLoaderTestApp MyUtil InitiatingLoaderTester\n- *                 BadOldClassA BadOldClassB\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar cust.jar\n- *                 SimpleCusty\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar WhiteBox.jar jdk.test.whitebox.WhiteBox\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:WhiteBox.jar BulkLoaderTest DYNAMIC\n- *\/\n-\n@@ -282,4 +268,0 @@\n-            \/\/ In dynamic dump, the VM loads BadOldClassB and then attempts to\n-            \/\/ link it. This will leave BadOldClassB in a \"failed verification\" state.\n-            \/\/ All refernces to BadOldClassB from the CP should be purged from the CDS\n-            \/\/ archive.\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotClassLinking\/BulkLoaderTest.java","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -76,1 +76,3 @@\n-        test(args, true);\n+        if (!args[0].equals(\"DYNAMIC\")) {\n+            test(args, true);\n+        }\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/resolvedConstants\/ResolvedConstants.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}