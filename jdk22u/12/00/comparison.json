{"files":[{"patch":"@@ -134,0 +134,21 @@\n+        if (_degen_point == _degenerated_evac) {\n+          \/\/ Degeneration under oom-evac protocol allows the mutator LRB to expose\n+          \/\/ references to from-space objects. This is okay, in theory, because we\n+          \/\/ will come to the safepoint here to complete the evacuations and update\n+          \/\/ the references. However, if the from-space reference is written to a\n+          \/\/ region that was EC during final mark or was recycled after final mark\n+          \/\/ it will not have TAMS or UWM updated. Such a region is effectively\n+          \/\/ skipped during update references which can lead to crashes and corruption\n+          \/\/ if the from-space reference is accessed.\n+          if (UseTLAB) {\n+            heap->labs_make_parsable();\n+          }\n+\n+          for (size_t i = 0; i < heap->num_regions(); i++) {\n+            ShenandoahHeapRegion* r = heap->get_region(i);\n+            if (r->is_active() && r->top() > r->get_update_watermark()) {\n+              r->set_update_watermark_at_safepoint(r->top());\n+            }\n+          }\n+        }\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"}]}