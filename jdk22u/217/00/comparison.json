{"files":[{"patch":"@@ -267,0 +267,3 @@\n+\n+      \/\/ Derive MinNewSize from MinHeapSize\n+      MinNewSize = MIN2(scale_by_NewRatio_aligned(MinHeapSize, GenAlignment), initial_young_size);\n","filename":"src\/hotspot\/share\/gc\/shared\/genArguments.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package gc.arguments;\n+\n+\/*\n+ * @test TestParallelGCErgo\n+ * @bug 8272364\n+ * @requires vm.gc.Parallel\n+ * @summary Verify ParallelGC minimum young and old ergonomics are setup correctly\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib\n+ * @library \/\n+ * @run driver gc.arguments.TestParallelGCErgo\n+ *\/\n+\n+import java.util.Arrays;\n+import java.util.ArrayList;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.Platform;\n+\n+public class TestParallelGCErgo {\n+    private static final long HEAPWORD_SIZE = Platform.is64bit() ? 8 : 4;\n+    \/\/ Must be a power of 2\n+    private static final long GEN_ALIGNMENT = 64 * 1024 * HEAPWORD_SIZE;\n+\n+    private static final long MINIMUM_HEAP_SIZE = 256 * 1024 * 1024; \/\/ 256M\n+    private static final long EXPECTED_MIN_YOUNG = alignDown(MINIMUM_HEAP_SIZE \/ 3, GEN_ALIGNMENT);\n+    private static final long EXPECTED_MIN_OLD = MINIMUM_HEAP_SIZE - EXPECTED_MIN_YOUNG;  \/\/ heap size = young size + old size\n+\n+    \/\/ s has to be a power of 2\n+    private static long alignDown(long s, long align) {\n+        return s & (~(align-1));\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        ArrayList<String> flagList = new ArrayList<String>();\n+        flagList.add(\"-XX:+UseParallelGC\");\n+        flagList.add(\"-Xms256m\");\n+        flagList.add(\"-Xmx1g\");\n+        flagList.add(\"-Xlog:gc+heap=trace\");\n+        flagList.add(\"-version\");\n+\n+        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(flagList);\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        output.shouldHaveExitValue(0);\n+\n+        String stdout = output.getStdout();\n+        long minimumHeap = getFlagValue(\"Minimum heap\", stdout);\n+        if (minimumHeap != MINIMUM_HEAP_SIZE) {\n+            throw new RuntimeException(\"Wrong value for minimum heap. Expected \" + MINIMUM_HEAP_SIZE + \" but got \" + minimumHeap);\n+        }\n+\n+        long minimumYoung = getFlagValue(\"Minimum young\", stdout);\n+        if (minimumYoung != EXPECTED_MIN_YOUNG) {\n+            throw new RuntimeException(\"Wrong value for minimum young. Expected \" + EXPECTED_MIN_YOUNG + \" but got \" + minimumYoung);\n+        }\n+\n+        long minimumOld = getFlagValue(\"Minimum old\", stdout);\n+        if (minimumOld != EXPECTED_MIN_OLD) {\n+            throw new RuntimeException(\"Wrong value for minimum old. Expected \" + EXPECTED_MIN_OLD + \" but got \" + minimumOld);\n+        }\n+    }\n+\n+    private static long getFlagValue(String flag, String where) {\n+        Matcher m = Pattern.compile(flag + \" \\\\d+\").matcher(where);\n+        if (!m.find()) {\n+            throw new RuntimeException(\"Could not find value for flag \" + flag + \" in output string\");\n+        }\n+        String match = m.group();\n+        return Long.parseLong(match.substring(match.lastIndexOf(\" \") + 1, match.length()));\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestParallelGCErgo.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"}]}