{"files":[{"patch":"@@ -128,1 +128,2 @@\n-      size_t space_left = max_capacity() - capacity();\n+      size_t uncommitted_space = max_capacity() - capacity();\n+      size_t unused_space = max_capacity() - used();\n@@ -130,0 +131,3 @@\n+      assert(unused_space >= uncommitted_space,\n+             \"Unused (\" SIZE_FORMAT \") >= uncommitted (\" SIZE_FORMAT \")\",\n+             unused_space, uncommitted_space);\n@@ -131,1 +135,1 @@\n-      if (want_space < space_left) {\n+      if (want_space < uncommitted_space) {\n@@ -135,1 +139,1 @@\n-      } else if (size_in_bytes < space_left) {\n+      } else if (size_in_bytes < unused_space) {\n@@ -138,1 +142,1 @@\n-        bool expand = _virtual_space.expand_by(space_left);\n+        bool expand = _virtual_space.expand_by(uncommitted_space);\n","filename":"src\/hotspot\/share\/gc\/epsilon\/epsilonHeap.cpp","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,43 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+package gc.epsilon;\n+\n+\/**\n+ * @test TestEnoughUnusedSpace\n+ * @requires vm.gc.Epsilon\n+ * @summary Epsilon should allocates object successfully if it has enough space.\n+ * @run main\/othervm -Xms64M -Xmx128M -XX:+UnlockExperimentalVMOptions\n+ *                   -XX:+UseEpsilonGC gc.epsilon.TestEnoughUnusedSpace\n+ *\/\n+\n+public class TestEnoughUnusedSpace {\n+    static volatile Object arr;\n+\n+    public static void main(String[] args) {\n+        \/\/ Create an array about 90M. It should be created successfully\n+        \/\/ instead of throwing OOME, because 90M is smaller than 128M.\n+        arr = new byte[90 * 1024 * 1024];\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/gc\/epsilon\/TestEnoughUnusedSpace.java","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"}]}