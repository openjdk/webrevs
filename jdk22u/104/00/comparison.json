{"files":[{"patch":"@@ -44,0 +44,5 @@\n+    \/\/ Call GC after compiling as many methods. This would remove the stale methods.\n+    \/\/ This threshold should balance the GC overhead and the cost of keeping lots\n+    \/\/ of stale methods around.\n+    private static final long GC_METHOD_THRESHOLD = Long.getLong(\"gcMethodThreshold\", 100);\n+\n@@ -46,1 +51,2 @@\n-    private static final AtomicLong METHOD_COUNT = new AtomicLong(0L);\n+    private static final AtomicLong METHOD_COUNT = new AtomicLong();\n+    private static final AtomicLong METHODS_SINCE_LAST_GC = new AtomicLong();\n@@ -86,0 +92,15 @@\n+\n+        \/\/ See if we need to schedule a GC\n+        while (true) {\n+            long current = METHODS_SINCE_LAST_GC.get();\n+            long update = current + methodCount;\n+            if (update >= GC_METHOD_THRESHOLD) {\n+                update = 0;\n+            }\n+            if (METHODS_SINCE_LAST_GC.compareAndSet(current, update)) {\n+                if (update == 0) {\n+                    executor.execute(() -> System.gc());\n+                }\n+                break;\n+            }\n+        }\n","filename":"test\/hotspot\/jtreg\/testlibrary\/ctw\/src\/sun\/hotspot\/tools\/ctw\/Compiler.java","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -295,1 +295,0 @@\n-                \/\/ Stress* are c2-specific stress flags, so IgnoreUnrecognizedVMOptions is needed\n@@ -297,0 +296,3 @@\n+                \/\/ Do not pay extra zapping cost for explicit GC invocations\n+                \"-XX:-ZapUnusedHeapArea\",\n+                \/\/ Stress* are c2-specific stress flags, so IgnoreUnrecognizedVMOptions is needed\n","filename":"test\/hotspot\/jtreg\/testlibrary\/ctw\/src\/sun\/hotspot\/tools\/ctw\/CtwRunner.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}