{"files":[{"patch":"@@ -2943,0 +2943,11 @@\n+  \/\/ Decode the given instruction, checking if it's a 16-bit compressed\n+  \/\/ instruction and return the address of the next instruction.\n+  static address locate_next_instruction(address inst) {\n+    \/\/ Instruction wider than 16 bits has the two least-significant bits set.\n+    if ((0x3 & *inst) == 0x3) {\n+      return inst + instruction_size;\n+    } else {\n+      return inst + compressed_instruction_size;\n+    }\n+  }\n+\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -235,1 +235,1 @@\n-          address next_pc = pc + NativeCall::instruction_size;\n+          address next_pc = Assembler::locate_next_instruction(pc);\n@@ -274,1 +274,1 @@\n-      address next_pc = pc + NativeCall::instruction_size;\n+      address next_pc = Assembler::locate_next_instruction(pc);\n","filename":"src\/hotspot\/os_cpu\/linux_riscv\/os_linux_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}