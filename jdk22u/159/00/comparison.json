{"files":[{"patch":"@@ -795,2 +795,2 @@\n-  jlong stride_con = head->stride_con();\n-  assert(stride_con != 0, \"missed some peephole opt\");\n+  jlong stride_con_long = head->stride_con();\n+  assert(stride_con_long != 0, \"missed some peephole opt\");\n@@ -798,1 +798,1 @@\n-  if (stride_con != (jint)stride_con) {\n+  if (stride_con_long != (jint)stride_con_long || stride_con_long == min_jint) {\n@@ -802,0 +802,1 @@\n+  jint stride_con = checked_cast<jint>(stride_con_long);\n@@ -961,1 +962,1 @@\n-  Node* int_stride = _igvn.intcon(checked_cast<int>(stride_con));\n+  Node* int_stride = _igvn.intcon(stride_con);\n@@ -1056,1 +1057,1 @@\n-  transform_long_range_checks(checked_cast<int>(stride_con), range_checks, outer_phi, inner_iters_actual_int,\n+  transform_long_range_checks(stride_con, range_checks, outer_phi, inner_iters_actual_int,\n@@ -1093,1 +1094,1 @@\n-int PhaseIdealLoop::extract_long_range_checks(const IdealLoopTree* loop, jlong stride_con, int iters_limit, PhiNode* phi,\n+int PhaseIdealLoop::extract_long_range_checks(const IdealLoopTree* loop, jint stride_con, int iters_limit, PhiNode* phi,\n@@ -1109,1 +1110,3 @@\n-            original_iters_limit \/ ABS(scale * stride_con) >= min_iters) {\n+            scale != min_jlong &&\n+            original_iters_limit \/ ABS(scale) >= min_iters * ABS(stride_con)) {\n+          assert(scale == (jint)scale, \"scale should be an int\");\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -1691,2 +1691,2 @@\n-  int extract_long_range_checks(const IdealLoopTree* loop, jlong stride_con, int iters_limit, PhiNode* phi,\n-                                      Node_List &range_checks);\n+  int extract_long_range_checks(const IdealLoopTree* loop, jint stride_con, int iters_limit, PhiNode* phi,\n+                                Node_List &range_checks);\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8324121\n+ * @summary SIGFPE in PhaseIdealLoop::extract_long_range_checks\n+ * @run main\/othervm -Xcomp -XX:CompileCommand=compileonly,TestLargeScaleInLongRCOverflow::test* -XX:-TieredCompilation TestLargeScaleInLongRCOverflow\n+ *\n+ *\/\n+\n+import java.util.Objects;\n+\n+public class TestLargeScaleInLongRCOverflow {\n+\n+    public static void main(String args[]) {\n+        Objects.checkIndex(0, 1);\n+        try {\n+            test1();\n+        } catch (java.lang.IndexOutOfBoundsException e) { }\n+        try {\n+            test2();\n+        } catch (java.lang.IndexOutOfBoundsException e) { }\n+    }\n+\n+    \/\/ SIGFPE in PhaseIdealLoop::extract_long_range_checks\n+    public static void test1() {\n+        for (long i = 1; i < 100; i += 2) {\n+            Objects.checkIndex(Long.MIN_VALUE * i, 10);\n+        }\n+    }\n+\n+    \/\/ \"assert(static_cast<T1>(result) == thing) failed: must be\" in PhaseIdealLoop::transform_long_range_checks\n+    public static void test2() {\n+        for (long i = 1; i < 100; i += 2) {\n+            Objects.checkIndex((Long.MIN_VALUE + 2) * i, 10);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/rangechecks\/TestLargeScaleInLongRCOverflow.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"}]}