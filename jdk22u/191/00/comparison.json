{"files":[{"patch":"@@ -57,1 +57,1 @@\n-  _limit(0), _hit_limit(false),\n+  _limit(0), _hit_limit(false), _limit_in_process(false),\n@@ -467,0 +467,4 @@\n+  if (arena_stat->limit_in_process()) {\n+    return; \/\/ avoid recursion on limit hit\n+  }\n+\n@@ -473,1 +477,0 @@\n-\n@@ -479,0 +482,2 @@\n+      arena_stat->set_limit_in_process(true); \/\/ prevent recursive limit hits\n+\n@@ -517,0 +522,2 @@\n+\n+      arena_stat->set_limit_in_process(false);\n","filename":"src\/hotspot\/share\/compiler\/compilationMemoryStatistic.cpp","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+  bool _limit_in_process;\n@@ -89,0 +90,3 @@\n+  bool   limit_in_process() const     { return _limit_in_process; }\n+  void   set_limit_in_process(bool v) { _limit_in_process = v; }\n+\n","filename":"src\/hotspot\/share\/compiler\/compilationMemoryStatistic.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -61,0 +61,1 @@\n+import java.io.File;\n@@ -126,0 +127,14 @@\n+            \/\/ Make sure we get a non-zero-sized replay file (JDK-8331314)\n+            oa.shouldContain(\"# Compiler replay data is saved as:\");\n+            String replayfile = oa.firstMatch(\"# (\\\\S+replay_pid\\\\d+\\\\.log)\", 1);\n+            if (replayfile == null) {\n+                throw new RuntimeException(\"Found no replay file in output\");\n+            }\n+            File f = new File(replayfile);\n+            if (!f.exists()) {\n+                throw new RuntimeException(\"Replayfile \" + replayfile + \" not found\");\n+            }\n+            if (f.length() == 0) {\n+                throw new RuntimeException(\"Replayfile \" + replayfile + \" has size 0\");\n+            }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/print\/CompileCommandMemLimit.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"}]}