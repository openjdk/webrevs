{"files":[{"patch":"@@ -30,2 +30,1 @@\n-javac.target.version=17\n-javac.source.version=17\n+javac.release.version=21\n","filename":"build\/build.properties","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-    <property file=\"productinfo.properties\" \/>\n+    <property file=\"productinfo.properties\"\/>\n@@ -45,0 +45,3 @@\n+    <property name=\"ws.test.dir\" location=\"${ws.top.dir}\/test\"\/>\n+    <property name=\"ws.doc.dir\" location=\"${ws.top.dir}\/doc\"\/>\n+    <property name=\"ws.mvn.dir\" location=\"${ws.top.dir}\/maven\"\/>\n@@ -46,2 +49,0 @@\n-    <property name=\"ws.doc.dir\" location=\"${ws.src.dir}\/doc\"\/>\n-    <property name=\"ws.test.dir\" location=\"${ws.src.dir}\/test\"\/>\n@@ -50,1 +51,1 @@\n-    <property name=\"build.base.dir\" location=\"${BUILD_DIR}\" \/>\n+    <property name=\"build.base.dir\" location=\"${BUILD_DIR}\"\/>\n@@ -53,1 +54,1 @@\n-    <property name=\"buildprod.dir\" location=\"${BUILD_DIR}\" \/>\n+    <property name=\"buildprod.dir\" location=\"${BUILD_DIR}\"\/>\n@@ -55,1 +56,1 @@\n-        <format  pattern=\"MM-dd-yyyy_hh-mm-aa\" property=\"touch.time\"\/>\n+        <format pattern=\"MM-dd-yyyy_hh-mm-aa\" property=\"touch.time\"\/>\n@@ -57,1 +58,2 @@\n-    <property name=\"buildprod.tmp.dir\" location=\"${java.io.tmpdir}\/${proj.build.product.name}-${proj.build.product.version}-build-${touch.time}\"\/>\n+    <property name=\"buildprod.tmp.dir\"\n+              location=\"${java.io.tmpdir}\/${proj.build.product.name}-${proj.build.product.version}-build-${touch.time}\"\/>\n@@ -84,0 +86,3 @@\n+    <!-- Testing area-->\n+    <property name=\"pom.file\" value=\"${ws.mvn.dir}\/pom.xml\"\/>\n+\n@@ -101,13 +106,16 @@\n-Usage:\n-     ant &lt;TARGET&gt; -D&lt;OPTIONS&gt;\n-\n-where TARGET is:\n-     build (default):        builds all binaries, doc and distributions.\n-     clean:                  removes all generated files and directories.\n-     clean-build:            cleans then builds the project\n-     help:                   prints a usage message (this message).\n-\n-Other values for TARGET are:\n-     devbuild:               produces binaries and javadocs.\n-     javadoc:                produces javadocs.\n-     test:                   runs sanity tests. (not currently available)\n+            Usage:\n+            ant &lt;TARGET&gt; -D&lt;OPTIONS&gt;\n+\n+            where TARGET is:\n+            all                 cleans, tests, and builds if no issues are found.\n+            build (default):    builds all binaries, doc and distributions.\n+            clean:              removes all generated files and directories.\n+            cleanAndBuild:      cleans, then builds the project.\n+            help:               prints a usage message (this message).\n+\n+            Other values for TARGET are:\n+            devbuild:           produces binaries and javadocs.\n+            javadoc:            produces javadocs.\n+            test:               runs tests.\n+            cleanAndTest:       cleans test artifacts, then tests the project.\n+            clean-test:         cleans tests artifacts.\n@@ -121,2 +129,2 @@\n-    <target name=\"clean\" description=\"Remove all generated files.\">\n-        <delete dir=\"${build.base.dir}\" \/>\n+    <target name=\"clean\" description=\"Remove all generated files.\" depends=\"clean-maven\">\n+        <delete dir=\"${build.base.dir}\"\/>\n@@ -130,1 +138,2 @@\n-    <target name=\"prepare\" depends=\"prepare-build-area,prepare-release-area\" description=\"Prepares the build generation areas.\" \/>\n+    <target name=\"prepare\" depends=\"prepare-build-area,prepare-release-area\"\n+            description=\"Prepares the build generation areas.\"\/>\n@@ -133,9 +142,9 @@\n-\t    <!--set up compile class path-->\n-\t    <path id=\"compileClassPath\">\n-\t\t    <pathelement location=\"${buildArea.dir}\/classes\"\/>\n-\t    <\/path>\n-\n-\t    <!--make temp dirs-->\n-\t    <mkdir dir=\"${buildprod.dir}\"\/>\n-\t    <mkdir dir=\"${buildprod.tmp.dir}\"\/>\n-\t    <mkdir dir=\"${buildprod.image.dir}\"\/>\n+        <!--set up compile class path-->\n+        <path id=\"compileClassPath\">\n+            <pathelement location=\"${buildArea.dir}\/classes\"\/>\n+        <\/path>\n+\n+        <!--make temp dirs-->\n+        <mkdir dir=\"${buildprod.dir}\"\/>\n+        <mkdir dir=\"${buildprod.tmp.dir}\"\/>\n+        <mkdir dir=\"${buildprod.image.dir}\"\/>\n@@ -145,2 +154,2 @@\n-    <target name=\"prepare-build-area\" depends=\"prepareGenArea\" >\n-\t    <!--make temp dirs-->\n+    <target name=\"prepare-build-area\" depends=\"prepareGenArea\">\n+        <!--make temp dirs-->\n@@ -154,1 +163,1 @@\n-        <mkdir dir=\"${build.src.dir}\" \/>\n+        <mkdir dir=\"${build.src.dir}\"\/>\n@@ -156,1 +165,1 @@\n-            <fileset dir=\"${ws.src.classes.dir}\/\" includes=\"**\/*\" \/>\n+            <fileset dir=\"${ws.src.classes.dir}\/\" includes=\"**\/*\"\/>\n@@ -163,9 +172,10 @@\n-    <target name=\"prepare-release-area\" depends=\"prepareGenArea\" >\n-\t    <!--make temp dirs-->\n-\t    <mkdir dir=\"${releaseArea.dir}\"\/>\n-\t    <mkdir dir=\"${release.tmp.dir}\"\/>\n-\t    <mkdir dir=\"${release.lib.dir}\"\/>\n-\t    <mkdir dir=\"${release.doc.dir}\"\/>\n-\t    <mkdir dir=\"${release.bin.dir}\"\/>\n-            <copy file=\"${ws.top.dir}\/LICENSE\" todir=\"${releaseArea.dir}\"\/>\n-            <copy file=\"${ws.top.dir}\/README.html\" todir=\"${releaseArea.dir}\"\/>\n+    <target name=\"prepare-release-area\" depends=\"prepareGenArea\">\n+        <!--make temp dirs-->\n+        <mkdir dir=\"${releaseArea.dir}\"\/>\n+        <mkdir dir=\"${release.tmp.dir}\"\/>\n+        <mkdir dir=\"${release.lib.dir}\"\/>\n+        <mkdir dir=\"${release.doc.dir}\"\/>\n+        <mkdir dir=\"${release.bin.dir}\"\/>\n+\n+        <copy file=\"${ws.top.dir}\/LICENSE\" todir=\"${releaseArea.dir}\"\/>\n+        <copy file=\"${ws.top.dir}\/README.html\" todir=\"${releaseArea.dir}\"\/>\n@@ -177,4 +187,4 @@\n-          <or>\n-            <matches pattern=\".*1[789]+.*\" string=\"${ant.java.version}\"\/>\n-            <matches pattern=\".*2\\d.*\" string=\"${ant.java.version}\"\/>\n-          <\/or>\n+            <or>\n+                <matches pattern=\".*2[123456789]+.*\" string=\"${ant.java.version}\"\/>\n+                <matches pattern=\".*3\\d.*\" string=\"${ant.java.version}\"\/>\n+            <\/or>\n@@ -183,3 +193,3 @@\n-.${line.separator}${line.separator}\n-Current java version is ${ant.java.version}\n-The build should be started by java 17 or above\n+            ...${line.separator}${line.separator}\n+            Current Java version is ${ant.java.version}\n+            The build should be started by Java 21 or above\n@@ -215,1 +225,3 @@\n-    <target name=\"build\"  depends=\"-check-java-version?, release\" description=\"Build the asmtools product.\" \/>\n+    <target name=\"all\" description=\"cleans, tests, and builds if no issues are found\" depends=\"clean-test,clean-build\"\/>\n+\n+    <target name=\"build\" depends=\"-check-java-version?, release\" description=\"Build the asmtools product.\"\/>\n@@ -217,1 +229,1 @@\n-    <target name=\"release\" depends=\"devbuild, examples, release-product\"\/>\n+    <target name=\"release\" depends=\"devbuild, examples, release-product, cleanGenArea\"\/>\n@@ -219,1 +231,1 @@\n-    <target name=\"devbuild\"  depends=\"prepare, replace-tokens, jar, javadoc, -create-release-file\"\/>\n+    <target name=\"devbuild\" depends=\"prepare, replace-tokens, jar, javadoc, -create-release-file\"\/>\n@@ -221,1 +233,1 @@\n-    <target name=\"clean-build\"  depends=\"clean, build\" description=\"Clean then build the asmtools product.\" \/>\n+    <target name=\"clean-build\" depends=\"clean, build\" description=\"Clean then build the asmtools product.\"\/>\n@@ -243,4 +255,4 @@\n-SOURCE=\"git:${git.revision}\"\n-VERSION=\"${PRODUCT_VERSION}_${PRODUCT_BUILDNUMBER}\"\n-VERSION_DATE=\"${build.date}\"\n-MILESTONE=\"${PRODUCT_MILESTONE}\"\n+            SOURCE=\"git:${git.revision}\"\n+            VERSION=\"${PRODUCT_VERSION}_${PRODUCT_BUILDNUMBER}\"\n+            VERSION_DATE=\"${build.date}\"\n+            MILESTONE=\"${PRODUCT_MILESTONE}\"\n@@ -271,10 +283,9 @@\n-            target=\"${javac.target.version}\"\n-            source=\"${javac.source.version}\"\n-            srcdir=\"${build.src.classes.dir}\"\n-            destdir=\"${build.classes.dir}\"\n-            debug=\"${javac.debug}\"\n-            verbose=\"${javac.verbose}\"\n-            deprecation=\"${javac.deprecation}\"\n-            encoding=\"UTF8\"\n-            includeantruntime=\"false\"\n-            classpathref=\"compileClassPath\">\n+               release=\"${javac.release.version}\"\n+               srcdir=\"${build.src.classes.dir}\"\n+               destdir=\"${build.classes.dir}\"\n+               debug=\"${javac.debug}\"\n+               verbose=\"${javac.verbose}\"\n+               deprecation=\"${javac.deprecation}\"\n+               encoding=\"UTF8\"\n+               includeantruntime=\"false\"\n+               classpathref=\"compileClassPath\">\n@@ -283,1 +294,1 @@\n-            <fileset dir=\"${build.src.classes.dir}\" excludes=\"**\/*.java\" \/>\n+            <fileset dir=\"${build.src.classes.dir}\" excludes=\"**\/*.java\"\/>\n@@ -293,3 +304,5 @@\n-    <target name=\"release-product\" depends=\"prepare-release-area,prepare-release\" description=\"Bundle the asmtools product.\">\n-\t    <property name=\"bundle.name\" value=\"${proj.build.product.name}-${proj.build.product.version}.zip\"\/>\n-\t    <basename property=\"bundle.prefix\" file=\"${proj.build.product.name}-${proj.build.product.version}\" suffix=\".zip\"\/>\n+    <target name=\"release-product\" depends=\"prepare-release-area,prepare-release\"\n+            description=\"Bundle the asmtools product.\">\n+        <property name=\"bundle.name\" value=\"${proj.build.product.name}-${proj.build.product.version}.zip\"\/>\n+        <basename property=\"bundle.prefix\" file=\"${proj.build.product.name}-${proj.build.product.version}\"\n+                  suffix=\".zip\"\/>\n@@ -297,3 +310,3 @@\n-\t    <zip destfile=\"${release.tmp.dir}\/${bundle.name}\" >\n-\t\t    <zipfileset dir=\"${releaseArea.dir}\" includes=\"**\/*\" prefix=\"${bundle.prefix}\"\/>\n-\t    <\/zip>\n+        <zip destfile=\"${release.tmp.dir}\/${bundle.name}\">\n+            <zipfileset dir=\"${releaseArea.dir}\" includes=\"**\/*\" prefix=\"${bundle.prefix}\"\/>\n+        <\/zip>\n@@ -301,1 +314,1 @@\n-\t    <move file=\"${release.tmp.dir}\/${bundle.name}\" todir=\"${buildprod.image.dir}\"\/>\n+        <move file=\"${release.tmp.dir}\/${bundle.name}\" todir=\"${buildprod.image.dir}\"\/>\n@@ -305,2 +318,2 @@\n-        <mkdir dir=\"${releaseArea.dir}\" \/>\n-        <mkdir dir=\"${release.lib.dir}\" \/>\n+        <mkdir dir=\"${releaseArea.dir}\"\/>\n+        <mkdir dir=\"${release.lib.dir}\"\/>\n@@ -308,1 +321,1 @@\n-            <fileset dir=\"${build.lib.dir}\/\" includes=\"**\/*\"  excludes=\"**\/exclude.jar\" \/>\n+            <fileset dir=\"${build.lib.dir}\/\" includes=\"**\/*\" excludes=\"**\/exclude.jar\"\/>\n@@ -321,1 +334,0 @@\n-                source=\"${javac.source.version}\"\n@@ -329,1 +341,23 @@\n-<\/project>\n+    <target name=\"cleanGenArea\">\n+        <delete dir=\"${buildprod.tmp.dir}\" failonerror=\"false\" deleteonexit=\"true\"\/>\n+    <\/target>\n+\n+    <!--========================================================================-->\n+    <!-- Tests                                                                  -->\n+    <!--========================================================================-->\n+\n+    <target name=\"clean-test\" description=\"cleans test artifacts, then tests the project\" depends=\"clean-maven, test\"\/>\n+\n+    <target name=\"test\" description=\"run maven test\" depends=\"-check-maven?, -check-pom-file?\">\n+        <exec executable=\"mvn\" failonerror=\"false\" resultproperty=\"maven.run.test.exit.code\">\n+            <arg value=\"-f\"\/>\n+            <arg value=\"${pom.file}\"\/>\n+            <arg value=\"test\"\/>\n+        <\/exec>\n+        <condition property=\"maven.run.passed\">\n+            <equals arg1=\"${maven.run.test.exit.code}\" arg2=\"0\"\/>\n+        <\/condition>\n+        <fail message=\"...${line.separator}${line.separator}The test suite has not passed.\"\n+              if=\"maven.run.test.exit.code\"\n+              unless=\"maven.run.passed\"\/>\n+    <\/target>\n@@ -331,0 +365,33 @@\n+    <target name=\"clean-maven\" description=\"cleans test artifacts\">\n+        <delete>\n+            <fileset dir=\"${ws.mvn.dir}\">\n+                <include name=\"src\"\/>\n+                <include name=\"target\"\/>\n+                <include name=\"pom.xml\"\/>\n+            <\/fileset>\n+        <\/delete>\n+    <\/target>\n+\n+    <target name=\"-check-maven?\">\n+        <exec executable=\"mvn\" failonerror=\"false\" resultproperty=\"maven.exit.code\">\n+            <arg value=\"-version\"\/>\n+        <\/exec>\n+        <condition property=\"maven.present\">\n+            <equals arg1=\"${maven.exit.code}\" arg2=\"0\"\/>\n+        <\/condition>\n+        <fail message=\"Maven not found\" if=\"maven.exit.code\" unless=\"maven.present\"\/>\n+    <\/target>\n+\n+    <target name=\"-check-pom-file?\">\n+        <condition property=\"pom.file.exists\">\n+            <available file=\"${pom.file}\"\/>\n+        <\/condition>\n+        <antcall target=\"-create-pom-file\"\/>\n+    <\/target>\n+\n+    <target name=\"-create-pom-file\" unless=\"pom.file.exists\">\n+        <exec executable=\"\/bin\/bash\" failonerror=\"true\">\n+            <arg value=\"${ws.mvn.dir}\/mvngen.sh\"\/>\n+        <\/exec>\n+    <\/target>\n+<\/project>\n","filename":"build\/build.xml","additions":151,"deletions":84,"binary":false,"changes":235,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-# Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,6 +26,6 @@\n-PRODUCT_NAME        = asmtools\n-PRODUCT_JAR_NAME    = asmtools.jar\n-PRODUCT_VERSION     = 8.1\n-PRODUCT_MILESTONE   = ea\n-PRODUCT_BUILDNUMBER = 01\n-PRODUCT_NAME_LONG   = Java Assembler Tools\n+PRODUCT_NAME        =asmtools\n+PRODUCT_JAR_NAME    =asmtools.jar\n+PRODUCT_VERSION     =9.0\n+PRODUCT_MILESTONE   =ea\n+PRODUCT_BUILDNUMBER =06\n+PRODUCT_NAME_LONG   =Java Assembler Tools\n","filename":"build\/productinfo.properties","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,20 @@\n+package org\/openjdk\/asmtools\/source00;\n+\n+public super class Class00 version 67:0\n+{\n+  public Method \"<init>\":\"()V\" \n+    stack 1  locals 1\n+  {\n+         aload_0;\n+         invokespecial     Method java\/lang\/Object.\"<init>\":\"()V\";\n+         return;\n+  }\n+\n+  public static Method main:\"([Ljava\/lang\/String;)V\" \n+    stack 0  locals 1\n+  {\n+         return;\n+  }\n+\n+  SourceFile               \"Class00.java\";\n+} \/\/ end Class org\/openjdk\/asmtools\/source00\/Class00 compiled from \"Class00.java\"\n","filename":"docs\/Class00.jasm","additions":20,"deletions":0,"binary":false,"changes":20,"status":"added"},{"patch":"@@ -0,0 +1,5 @@\n+package org.openjdk.asmtools.source00;\n+public class Class00 {\n+    public static void main(String argv[]) {\n+    }\n+}\n","filename":"docs\/Class00.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"added"},{"patch":"@@ -0,0 +1,21 @@\n+file Cls01\n+package org\/openjdk\/asmtools\/source00;\n+\n+public super class Class00 version 67:0\n+{\n+  public Method \"<init>\":\"()V\" \n+    stack 1  locals 1\n+  {\n+         aload_0;\n+         invokespecial     Method java\/lang\/Object.\"<init>\":\"()V\";\n+         return;\n+  }\n+\n+  public static Method main:\"([Ljava\/lang\/String;)V\" \n+    stack 0  locals 1\n+  {\n+         return;\n+  }\n+\n+  SourceFile               \"Class00.java\";\n+} \/\/ end Class org\/openjdk\/asmtools\/source00\/Class00 compiled from \"Class00.java\"\n","filename":"docs\/Class00_1.jasm","additions":21,"deletions":0,"binary":false,"changes":21,"status":"added"},{"patch":"@@ -0,0 +1,537 @@\n+<!DOCTYPE HTML PUBLIC \"-\/\/W3C\/\/DTD HTML 4.0 Transitional\/\/EN\">\n+<!--\n+ Copyright (c) 2014, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+\n+ This code is free software; you can redistribute it and\/or modify it\n+ under the terms of the GNU General Public License version 2 only, as\n+ published by the Free Software Foundation.\n+\n+ This code is distributed in the hope that it will be useful, but WITHOUT\n+ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ version 2 for more details (a copy is included in the LICENSE file that\n+ accompanied this code).\n+\n+ You should have received a copy of the GNU General Public License version\n+ 2 along with this work; if not, write to the Free Software Foundation,\n+ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+\n+ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ or visit www.oracle.com if you need additional information or have any\n+ questions.\n+-->\n+\n+<html>\n+<head>\n+  <meta http-equiv=\"Content-Type\" content=\"text\/html; charset=UTF-8\">\n+  <meta http-equiv=\"Content-Language\" content=\"en-US\">\n+  <title>AsmTools Tutorial<\/title>\n+  <meta http-equiv=\"Content-Style-Type\" content=\"text\/css\">\n+  <meta name=\"Generator\" content=\"XSolBook3.5 XML Custom XSLT Filter\">\n+  <meta name=\"keywords\" content=\"AsmTools, Assembler Tools User's Guide\">\n+  <meta name=\"dc.title\" content=\"AsmTools Tutorial\">\n+  <meta name=\"description\"\n+ content=\"This manual describes how to use the AsmTools.\">\n+  <meta name=\"identifier\" content=\"000-0000-00\">\n+  <meta name=\"date\" content=\"\">\n+  <meta name=\"issued\" content=\"2009-02-20\">\n+  <meta name=\"revision\" content=\"\">\n+  <meta name=\"publisher\" content=\"Oracle, Inc.\">\n+  <meta name=\"collection\" content=\"reference\">\n+  <meta name=\"robots\" content=\"index, follow\">\n+<!--Inserts the stylesheet-->\n+  <link rel=\"STYLESHEET\" href=\"unx_str_styles.css\" charset=\"ISO-8859-1\"\n+ type=\"text\/css\">\n+<\/head>\n+<body class=\"HlpBdy\" leftmargin=\"10\" topmargin=\"10\"\n+ style=\"background-color: rgb(255, 255, 255);\" marginheight=\"10\"\n+ marginwidth=\"10\">\n+<a name=\"top\"><\/a>\n+<div class=\"navbar\" align=\"center\">\n+<table dir=\"ltr\"\n+ summary=\"Navigation bar, includes the book title and navigation buttons\"\n+ width=\"100%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n+  <colgroup span=\"2\" width=\"100%\"><col id=\"t1\" span=\"1\" width=\"50%\"><col\n+ id=\"t2\" span=\"1\" width=\"50%\"><\/colgroup><tbody>\n+    <tr bgcolor=\"#cccccc\">\n+      <td class=\"navbartitle\" rowspan=\"1\" colspan=\"1\" abbr=\"ChapTitle\"\n+ align=\"left\"><a name=\"Z400012b9112\"><\/a>Java Assembler Tools\n+(AsmTools) User's Guide<\/td>\n+      <td rowspan=\"1\" colspan=\"1\" abbr=\"NavButtons\" valign=\"top\"\n+ align=\"right\"><a href=\"index.html\"><img src=\"shared\/toc01.gif\"\n+ title=\"Table Of Contents\" alt=\"Table Of Contents\" width=\"30\" border=\"0\"\n+ height=\"26\"><\/a><a href=\"chapter1.html\"><img src=\"shared\/prev01.gif\"\n+ title=\"Previous Chapter\" alt=\"Previous Chapter\" width=\"30\" border=\"0\"\n+ height=\"26\"><\/a><a href=\"chapter3.html\"><img src=\"shared\/next01.gif\"\n+ title=\"Next Chapter\" alt=\"Next Chapter\" width=\"30\" border=\"0\"\n+ height=\"26\"><\/a><a href=\"ix.html\"><img src=\"shared\/index01.gif\"\n+ title=\"Book Index\" alt=\"Book Index\" width=\"30\" border=\"0\" height=\"26\"><\/a><\/td>\n+    <\/tr>\n+  <\/tbody>\n+<\/table>\n+<p class=\"feedback\">\n+<script language=\"javascript\" type=\"text\/javascript\" charset=\"UTF-8\"\n+ src=\"\/app\/css\/oo_engine.js\"><\/script><a>\n+<script language=\"javascript\" type=\"text\/javascript\" charset=\"UTF-8\">\n+O_GoT('<img src=\"\/app\/images\/sm_3E6B8A_oo.gif\" border=\"0\" alt=\"Feedback link\" title=\"Feedback\">Feedback');\n+<\/script><\/a><\/p>\n+<br>\n+<br>\n+<\/div>\n+<table dir=\"ltr\" summary=\"Chapter Number\" abbr=\"ChapNum\" width=\"100%\"\n+ border=\"0\">\n+  <colgroup span=\"1\" width=\"100%\"><col id=\"ch1\" span=\"1\"><\/colgroup><tbody>\n+    <tr>\n+      <td class=\"ChapNumber\" align=\"right\"><span class=\"ChapNumPrefix\">CHAPTER<\/span>&nbsp; <span class=\"ChapNumNum\">2<\/span><span\n+ class=\"ChapNumSuffix\"><\/span><\/td>\n+    <\/tr>\n+  <\/tbody>\n+<\/table>\n+<hr size=\"7\" noshade=\"noshade\">\n+\n+<!-- ============ -->\n+<!-- MAIN CONTENT -->\n+<!-- ============ -->\n+<!-- BEGIN PAGETITLE ONE LINE -->\n+<h1 class=\"chaptitle\" align=\"right\"><a name=\"d0e1017\"><\/a> Using the AsmTools<\/h1>\n+<p class=\"paragraph\"><a name=\"d0e1021\"><\/a>\n+<!-- END PAGETITLE ONE LINE -->\n+This chapter describes\n+general principles and techniques for using the\n+AsmTools. For detailed information about the syntax of each\n+component and command line examples, see\n+<a href=\"appendix2.html#Z400013211728\">Appendix B<\/a>.\n+If no command-line options are provided or they are invalid,\n+the tools provide error messages and usage information. To get the\n+help message, launch AsmTools without any parameters as follows:<\/p>\n+<p class=\"paragraph\"><a name=\"d0e1026\"><\/a><kbd class=\"command\">java<br>\n+<br>\n+-jar asmtools.jar<\/kbd><\/p>\n+<p class=\"paragraph\"><a name=\"d0e1030\"><\/a>The help system describes\n+how to use all of the AsmTools components and contains the\n+following topics described in this chapter.<\/p>\n+<ul type=\"square\">\n+  <li>\n+    <p class=\"paragraph\"><a name=\"d0e1035\"><\/a>\n+  <a href=\"#BADGCIGA\">Assemblers and Disassemblers<\/a><\/p>\n+  <\/li>\n+  <li>\n+    <p class=\"paragraph\"><a name=\"d0e1035\"><\/a><a\n+ href=\"chapter2.html#BADGCIGB\">JASM vs JCOD<br>\n+    <\/a><\/p>\n+  <\/li>\n+  <li>\n+    <p class=\"paragraph\"><a name=\"d0e1039\"><\/a><a href=\"#BADCEIIF\">Tool\n+Usage<br>\n+    <\/a><\/p>\n+    <ul type=\"disc\">\n+      <li>\n+        <p class=\"paragraph\"><a name=\"d0e1044\"><\/a><a href=\"#BADEFIIJ\">JASM<\/a><\/p>\n+      <\/li>\n+      <li>\n+        <p class=\"paragraph\"><a name=\"d0e1048\"><\/a><a href=\"#BADCBFCE\">JDIS<\/a><\/p>\n+      <\/li>\n+      <li>\n+        <p class=\"paragraph\"><a name=\"d0e1052\"><\/a><a href=\"#BADIFAIE\">JCODER<\/a><\/p>\n+      <\/li>\n+      <li>\n+        <p class=\"paragraph\"><a name=\"d0e1056\"><\/a><a href=\"#BADHJAHI\">JDEC<\/a><\/p>\n+      <\/li>\n+      <li>\n+        <p class=\"paragraph\"><a name=\"d0e1060\"><\/a><a href=\"#BADBIGAE\">JCDEC<\/a><\/p>\n+      <\/li>\n+    <\/ul>\n+  <\/li>\n+<\/ul>\n+<hr size=\"5\" noshade=\"noshade\">\n+<a name=\"BADGCIGA\"><\/a>\n+<h1 class=\"head1\">Assemblers and Dissassemblers<br>\n+<\/h1>\n+Assembly and Dissassembly are reflexive operations.&nbsp; You can feed\n+one tool into another to achieve the same file.&nbsp; For example<br>\n+<br>\n+<b>java -jar asmtools.jar jdec foo.class  # produces foo.jcod<\/b><br>\n+<b>java -jar asmtools.jar jcod foo.jcod   # produces foo.class<\/b><br>\n+<p class=\"paragraph\">For a given class foo.class, the product of\n+dissassembly, and re-assembly is the same foo.class.<br>\n+<\/p>\n+<p style=\"margin-bottom: 0in;\"><br>\n+<\/p>\n+<hr size=\"5\" noshade=\"noshade\">\n+<a name=\"BADGCIGB\"><\/a>\n+<h1 class=\"head1\">JASM vs. JCod<br>\n+<\/h1>\n+<p class=\"paragraph\">Which format to use depends on the task you are\n+trying to do. We can describe some generalizations of when you might\n+wish to use the JASM format versus the JCOD format.&nbsp;&nbsp; <br>\n+<\/p>\n+<h4>JASM<br>\n+<\/h4>\n+<p class=\"paragraph\">The\n+biggest difference between the two formats is that JASM specifically\n+focuses on representing byte-code instructions in the VM format (while\n+providing minimal description of the structure of&nbsp; the rest of the\n+class file).&nbsp; Generally, JASM is more convenient for semantic\n+changes, like change to instruction flow. <br>\n+<\/p>\n+<h4>JCOD<\/h4>\n+<p class=\"paragraph\">JCOD provides good support\n+for describing the structure of a class file (as well as writing\n+incorrect bytes outside of this structure), and provides no support for\n+specifying byte-code instructions (simply raw bytes for\n+instructions).&nbsp;&nbsp; JCOD is typically used for VMs to test\n+Well-formedness of class files (eg extra or missing bytes), boundary\n+issues, constant-pool coherence, constant-pool index coherence,\n+attribute well-formedness, etc..<br>\n+<\/p>\n+<h4>Use Cases<\/h4>\n+<p class=\"paragraph\">Below are typical cases of usage of both formats:<br>\n+<br>\n+JASM usages:<br>\n+<br>\n+<\/p>\n+<ul>\n+  <li>&nbsp;To obtain an invalid class where two methods have the same\n+signature<\/li>\n+  <li>&nbsp;To obtain an invalid class reference where an illegal type is used<\/li>\n+  <li>&nbsp;To obtain an invalid class with missing\/removed instructions<\/li>\n+  <li>&nbsp;To insert profiling instructions in methods<\/li>\n+  <li>&nbsp;To obtain a class where a keyword is used as an identifier<\/li>\n+  <li>&nbsp;To check that two classes produced by different compilers\n+are equivalent<br>\n+  <\/li>\n+<\/ul>\n+<p class=\"paragraph\"><br>\n+JCOD usages:<br>\n+<br>\n+<\/p>\n+<ul>\n+  <li>&nbsp;To examine specific parts of a classfile <br>\n+  <\/li>\n+  <ul>\n+    <li>eg. constant-pool (for dependency analysis)<\/li>\n+    <li>constant values<\/li>\n+    <li>inheritance chains (super classes)<\/li>\n+    <li>implementation fullfillment (interface resolution)<\/li>\n+  <\/ul>\n+<\/ul>\n+<p style=\"margin-bottom: 0in;\"><br>\n+<\/p>\n+<hr size=\"5\" noshade=\"noshade\"><br>\n+<a name=\"BADCEIIF\"><\/a>\n+<h1 class=\"head1\">Tool Usage<br>\n+<\/h1>\n+Asmtools consist of five utilities:<br>\n+<br>\n+<ul>\n+  <li>&nbsp;jasm - Generates class files from the JASM representation<\/li>\n+  <li>&nbsp;jdis - Represents class file in JASM format<\/li>\n+  <li>&nbsp;jcoder - Generates class files from the JCOD representation<\/li>\n+  <li>&nbsp;jdec - Represents class file in JCOD format<\/li>\n+  <li>&nbsp;jcdec - Represents JavaCard cap and exp files in JCOD format<\/li>\n+<\/ul>\n+<br>\n+Each utility can be invoked from the command line as shown below:<br>\n+<br style=\"font-weight: bold;\">\n+<span style=\"font-weight: bold;\">$ java -jar asmtools.jar UTILITY\n+[options] File1 ...<\/span><br>\n+<br>\n+or<br>\n+<br style=\"font-weight: bold;\">\n+<span style=\"font-weight: bold;\">$ java -cp asmtools.jar&nbsp;\n+com.sun.asmtools.UTILITY.Main [options] File1 ...<\/span><br>\n+<br>\n+Each utility supports own set of options<br>\n+<hr size=\"1\" noshade=\"noshade\">\n+<table width=\"100%\" cellpadding=\"2\" cellspacing=\"2\">\n+  <col width=\"100\"> <tbody>\n+    <tr>\n+      <td valign=\"top\">\n+      <p align=\"left\"><a name=\"d0e1281\"><\/a><b>Note - <\/b>See the\n+following sections for the options associated with each tool.<br>\n+      <\/p>\n+      <\/td>\n+    <\/tr>\n+  <\/tbody>\n+<\/table>\n+<hr size=\"1\" noshade=\"noshade\">\n+<p class=\"paragraph\"><br>\n+<\/p>\n+<hr size=\"5\" width=\"108\" align=\"left\" noshade=\"noshade\">\n+<a name=\"BADEFIIJ\"><\/a>\n+<h2 class=\"head2\">JASM<\/h2>\n+<p class=\"paragraph\"><a name=\"DDE_LINK\"><\/a><span\n+ style=\"font-style: italic;\">jasm<\/span> is an assembler that accepts a\n+text file based on the JASM Specification, and produces a .class file\n+for use with a Java Virtual Machine.<br>\n+<\/p>\n+<h4>Usage:<br>\n+<\/h4>\n+<p class=\"paragraph\"><span style=\"font-weight: bold;\">$ java -jar\n+asmtools.jar jasm [options] filename.jasm<\/span><br>\n+<br>\n+or<br>\n+<br>\n+<span style=\"font-weight: bold;\">$ java -cp asmtools.jar\n+com.sun.asmtools.jasm.Main [options] filename.jasm<\/span><br>\n+<br>\n+<\/p>\n+<h4>Options:<\/h4>\n+<p class=\"paragraph\"><span style=\"font-weight: bold;\">-version<\/span>\n+Print jasm version<br>\n+<br>\n+<span style=\"font-weight: bold;\">-d destdir <\/span>Specifies a\n+directory to place resulting .class files. If a destdir is not\n+provided, the .class file will be written in the current directory.<br>\n+<br>\n+<span style=\"font-weight: bold;\">-g <\/span>Add debug information to\n+.class file.<br>\n+<br>\n+<span style=\"font-weight: bold;\">-nowrite<\/span> Do not write resulting\n+.class files. This option may be used to verify the integrity of your\n+source jasm file.<br>\n+<br style=\"font-weight: bold;\">\n+<span style=\"font-weight: bold;\">-strict<\/span> Consider warnings as\n+errors.<br>\n+<br>\n+<span style=\"font-weight: bold;\">-nowarn<\/span> Do not print warnings.<br>\n+<br>\n+<span style=\"font-weight: bold;\">-cv major.minor<\/span> Set the\n+operating class file version (by default 45.3).<\/p>\n+<hr size=\"1\" noshade=\"noshade\">\n+<table width=\"100%\" cellpadding=\"2\" cellspacing=\"2\">\n+  <col width=\"100\"> <tbody>\n+    <tr>\n+      <td valign=\"top\">\n+      <p align=\"left\"><a name=\"d0e1281\"><\/a><b>Note - <\/b>If the\n+optional class attribute '<span style=\"font-style: italic;\">version<\/span>'defines\n+(in source of class) the class file version then it overrides default class file version set\n+by <span style=\"font-style: italic;\">-cv<\/span> option. <\/p>\n+      <\/td>\n+    <\/tr>\n+  <\/tbody>\n+<\/table>\n+<hr size=\"1\" noshade=\"noshade\">\n+<p class=\"paragraph\"><span style=\"font-weight: bold;\"><\/span><br>\n+<\/p>\n+<h4>Description:<\/h4>\n+<p class=\"paragraph\">To use jasm, specify the filename of the .jasm\n+file you wish to develop a .class file from. The Jasm Specification\n+contains information relative to the format of a .jasm file. <br>\n+<\/p>\n+<p class=\"paragraph\"><br>\n+<\/p>\n+<hr size=\"5\" width=\"108\" align=\"left\" noshade=\"noshade\">\n+<a name=\"BADCBFCE\"><\/a>\n+<h2 class=\"head2\">JDIS<\/h2>\n+<p class=\"paragraph\"><a name=\"DDE_LINK\"><\/a><i>jdis<\/i> is a\n+disassembler that accepts a <code>.class<\/code> file, and prints the\n+plain-text\n+translation of <code>jasm<\/code> source file to the standard output.\n+<\/p>\n+<h4>Usage:<br>\n+<\/h4>\n+<p class=\"paragraph\"><span style=\"font-weight: bold;\">$ java -jar\n+asmtools.jar jdis [options] filename.class<\/span><br>\n+<br>\n+or<br>\n+<br>\n+<span style=\"font-weight: bold;\">$ java -cp asmtools.jar\n+com.sun.asmtools.jdis.Main [options] filename.class<\/span><br>\n+<br>\n+<\/p>\n+<h4>Options:<\/h4>\n+<p class=\"paragraph\"><span style=\"font-weight: bold;\">-version<\/span>\n+Print jdis version<span style=\"font-weight: bold;\"><\/span><br>\n+<br>\n+<span style=\"font-weight: bold;\">-g <\/span>Generate a detailed output\n+format. Constants from constant pool are printed, and instructions in\n+methods are preceded with source line numbers (if attribute\n+LineNumberTable is available) and with bytecode program counters.<br>\n+<br>\n+<span style=\"font-weight: bold;\">-s1<\/span> Generate source lines in\n+comments. Commented lines of the source file, from which given .class\n+file is obtained, are printed above the corresponding instruction. Both\n+attributes LineNumberTable and SourceFile must be available. The source\n+file should be placed in the current working directory.<br>\n+<br style=\"font-weight: bold;\">\n+<span style=\"font-weight: bold;\">-hx<\/span> Generate floating-point\n+constants in hexadecimal format.<\/p>\n+<h4>Description:<\/h4>\n+<p> To use jdis, specify a <em>filename<\/em><code>.class<\/code>\n+that you wish to disassemble. <br>\n+You may redirect standard output to\n+a <em>filename<\/em> <code>.jasm<\/code> file. Jdis will disassemble a <code>.class<\/code>\n+file and create a resultant <code>.jasm<\/code> source file. <\/p>\n+<p>Refer to the <a\n+ href=\"..\/..\/work\/asmtools\/asm-tools-4.1.2-build\/release\/doc\/misc\/jasmspec.html\">Jasm\n+Assembler<\/a> documentation for information on the structure of the\n+resultant <code>.jasm<\/code> file.<br>\n+<\/p>\n+<p class=\"paragraph\"><br>\n+<\/p>\n+<hr size=\"5\" width=\"108\" align=\"left\" noshade=\"noshade\">\n+<a name=\"BADIFAIE\"><\/a>\n+<h2 class=\"head2\">JCoder<\/h2>\n+<p class=\"paragraph\"><a name=\"DDE_LINK\"><\/a><i>jcoder<\/i> is a\n+low-level assembler that accepts text based on the <a\n+ href=\"..\/..\/work\/asmtools\/asm-tools-4.1.2-build\/release\/doc\/misc\/jcoderspec.html\">Jcoder\n+Specification.<\/a> and produces a <code>.class<\/code> file for use\n+with a Java Virtual Machine. Jcoder's primary use is as a tool for\n+producing specialized tests for testing a JVM implementation.\n+<\/p>\n+<h4>Usage:<br>\n+<\/h4>\n+<p class=\"paragraph\"><span style=\"font-weight: bold;\">$ java -jar\n+asmtools.jar jcoder [options] filename.jcod<\/span><br>\n+<br>\n+or<br>\n+<br>\n+<span style=\"font-weight: bold;\">$ java -cp asmtools.jar\n+com.sun.asmtools.jcoder.Main [options] filename.jcod<\/span><br>\n+<br>\n+<\/p>\n+<h4>Options:<\/h4>\n+<p class=\"paragraph\"><span style=\"font-weight: bold;\">-version<\/span>\n+Print jcoder version<br>\n+<br>\n+<span style=\"font-weight: bold;\">-d destdir <\/span>Specifies a\n+directory to place resulting .class files. If a destdir is not\n+provided, the .class file will be written in the current directory.<br>\n+<br>\n+<span style=\"font-weight: bold;\">-nowrite<\/span> Do not write resulting\n+.class files. This option may be used to verify the integrity of your\n+source jcoder file.<br>\n+<\/p>\n+<h4>Description:<\/h4>\n+<p class=\"paragraph\"> To use jcoder, specify the <em>filename<\/em><code>.jcod<\/code>\n+file you\n+wish to develop a <code>.class<\/code> file from. The <a\n+ href=\"..\/..\/work\/asmtools\/asm-tools-4.1.2-build\/release\/doc\/misc\/jcoderspec.html\">\n+Jcoder Specification<\/a> contains information relative to the format of\n+a <code>.jcod<\/code> file.\n+<\/p>\n+<p class=\"paragraph\"><br>\n+<\/p>\n+<hr size=\"5\" width=\"108\" align=\"left\" noshade=\"noshade\">\n+<a name=\"BADHJAHI\"><\/a>\n+<h2 class=\"head2\">JDec<\/h2>\n+<p class=\"paragraph\"><a name=\"DDE_LINK\"><\/a><i>jdec<\/i> is a low-level\n+disassembler that accepts <code>.class<\/code> file and prints a plain\n+text of <code>jcod<\/code> source file to the standard output.\n+<\/p>\n+<h4>Usage:<br>\n+<\/h4>\n+<p class=\"paragraph\"><span style=\"font-weight: bold;\">$ java -jar\n+asmtools.jar jdec [options] filename.class [&gt; filename.jcod]<\/span><br>\n+<br>\n+or<br>\n+<br>\n+<span style=\"font-weight: bold;\">$ java -cp asmtools.jar\n+com.sun.asmtools.jdec.Main [options] filename.class<\/span><span\n+ style=\"font-weight: bold;\"> [&gt; filename.jcod]<\/span><br>\n+<br>\n+<\/p>\n+<h4>Options:<\/h4>\n+<p class=\"paragraph\"><span style=\"font-weight: bold;\">-version<\/span>\n+Print jdec version<span style=\"font-weight: bold;\"><\/span><br>\n+<br>\n+<span style=\"font-weight: bold;\">-g <\/span>Generate a detailed output\n+format. <br>\n+<\/p>\n+<h4>Description:<\/h4>\n+<p>To use jdec, specify a <code><em>filename.class<\/em><\/code> that\n+you wish to disassemble. <br>\n+You may redirect standard output to a <code><em>filename.jcod<\/em><\/code>\n+file. <i>jdec<\/i> will disassemble <code>.class<\/code> file and\n+create a resultant <code>.jcod<\/code> plain source file.\n+<\/p>\n+<p> Refer to the <a\n+ href=\"..\/..\/work\/asmtools\/asm-tools-4.1.2-build\/release\/doc\/misc\/jcoderspec.html\">Jcoder\n+Low-Level\n+Assembler<\/a> documentation for information on the structure\n+of the resultant <code>.jcod<\/code> file.<br>\n+<\/p>\n+<p class=\"paragraph\"><br>\n+<\/p>\n+<hr size=\"5\" width=\"108\" align=\"left\" noshade=\"noshade\">\n+<a name=\"BADBIGAE\"><\/a>\n+<h2 class=\"head2\">JCDec<\/h2>\n+<p class=\"paragraph\"><a name=\"DDE_LINK\"><\/a><i>jcdec<\/i> is a low-level\n+disassembler that accepts <code>.class<\/code> file and prints a plain\n+text of <code>jcod<\/code> source file to the standard output.\n+<\/p>\n+<h4>Usage:<br>\n+<\/h4>\n+<p class=\"paragraph\"><span style=\"font-weight: bold;\">$ java -jar\n+asmtools.jar jcdec [options] filename.exp | filename.cap [&gt;\n+filename.jcod]<\/span><br>\n+<br>\n+or<br>\n+<br>\n+<span style=\"font-weight: bold;\">$ java -cp asmtools.jar\n+com.sun.asmtools.jcdec.Main [options] <\/span><span\n+ style=\"font-weight: bold;\">filename.exp | filename.cap<\/span><span\n+ style=\"font-weight: bold;\"> [&gt; filename.jcod]<\/span><br>\n+<br>\n+<\/p>\n+<h4>Options:<\/h4>\n+<p class=\"paragraph\"><span style=\"font-weight: bold;\">-version<\/span>\n+Print jcdec version<span style=\"font-weight: bold;\"><\/span><br>\n+<br>\n+<span style=\"font-weight: bold;\">-g <\/span>Generate a detailed output\n+format. <br>\n+<\/p>\n+<h4>Description:<\/h4>\n+<p>To use jcdec, specify a <code><em>filename.exp<\/em><\/code> or <code><em>filename.cap<\/em><\/code>\n+that you wish to disassemble. <br>\n+You may redirect standard output to a <code><em>filename.jcod<\/em><\/code>\n+file. <i>jcdec<\/i> will disassemble the file and create a resultant <code>.jcod<\/code>\n+plain source file.\n+<\/p>\n+<p> Refer to the <a\n+ href=\"..\/..\/work\/asmtools\/asm-tools-4.1.2-build\/release\/doc\/misc\/jcoderspec.html\">Jcoder\n+Low-Level\n+Assembler<\/a> documentation for information on the structure\n+of the resultant <code> .jcod<\/code> file.\n+<\/p>\n+<p>\n+<\/p>\n+<br>\n+<center>\n+<table width=\"100%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n+  <col width=\"45\"> <col width=\"25\"> <col width=\"30\"> <tbody>\n+    <tr bgcolor=\"#cccccc\">\n+      <td>\n+      <p align=\"left\">Java Assembler Tools (AsmTools) User's Guide<\/p>\n+      <\/td>\n+      <td>\n+      <p align=\"right\">000-0000-00<\/p>\n+      <\/td>\n+      <td valign=\"top\">\n+      <p align=\"right\"><a href=\"index.html\"><img src=\"shared\/toc01.gif\"\n+ name=\"graphics14\" alt=\"Table Of Contents\" width=\"30\" align=\"bottom\"\n+ border=\"0\" height=\"26\"><\/a> <a href=\"chapter1.html\"><img\n+ src=\"shared\/prev01.gif\" name=\"graphics15\" alt=\"Previous Chapter\"\n+ width=\"30\" align=\"bottom\" border=\"0\" height=\"26\"><\/a><a\n+ href=\"chapter3.html\"><img src=\"shared\/next01.gif\" name=\"graphics16\"\n+ alt=\"Next Chapter\" width=\"30\" align=\"bottom\" border=\"0\" height=\"26\"><\/a><a\n+ href=\"ix.html\"><img src=\"shared\/index01.gif\" name=\"graphics17\"\n+ alt=\"Book Index\" width=\"30\" align=\"bottom\" border=\"0\" height=\"26\"><\/a><\/p>\n+      <\/td>\n+    <\/tr>\n+  <\/tbody>\n+<\/table>\n+<\/center>\n+<p class=\"copyrightlink\">\n+<script language=\"javascript\">\n+       O_GoT('<img src=\"\/app\/images\/sm_3E6B8A_oo.gif\" border=\"0\" alt=\"Feedback link\" title=\"Feedback\">Feedback');\n+\n+<\/script><\/p>\n+<hr size=\"7\" noshade=\"noshade\">\n+<center>\n+Copyright &copy; 2012, 2017, Oracle and\/or its affiliates. All rights reserved.\n+<\/center>\n+<\/body>\n+<\/html>\n","filename":"docs\/UsingTools.html","additions":537,"deletions":0,"binary":false,"changes":537,"status":"added"},{"patch":"@@ -0,0 +1,488 @@\n+<span id=\"top\"><\/span>\n+\n+<table dir=\"ltr\"\n+data-summary=\"Navigation bar, includes the book title and navigation buttons\"\n+width=\"100%\" data-border=\"0\" data-cellpadding=\"0\" data-cellspacing=\"0\">\n+<colgroup>\n+<col style=\"width: 50%\" \/>\n+<col style=\"width: 50%\" \/>\n+<\/colgroup>\n+<tbody>\n+<tr class=\"odd\" data-bgcolor=\"#cccccc\">\n+<td class=\"navbartitle\" style=\"text-align: left;\" abbr=\"ChapTitle\"><span\n+id=\"Z400012b9112\"><\/span>Java Assembler Tools (AsmTools) User's\n+Guide<\/td>\n+<td style=\"text-align: right;\" abbr=\"NavButtons\" data-valign=\"top\"><a\n+href=\"index.html\"><img src=\"shared\/toc01.gif\" title=\"Table Of Contents\"\n+data-border=\"0\" width=\"30\" height=\"26\" alt=\"Table Of Contents\" \/><\/a><a\n+href=\"chapter1.html\"><img src=\"shared\/prev01.gif\"\n+title=\"Previous Chapter\" data-border=\"0\" width=\"30\" height=\"26\"\n+alt=\"Previous Chapter\" \/><\/a><a href=\"chapter3.html\"><img\n+src=\"shared\/next01.gif\" title=\"Next Chapter\" data-border=\"0\" width=\"30\"\n+height=\"26\" alt=\"Next Chapter\" \/><\/a><a href=\"ix.html\"><img\n+src=\"shared\/index01.gif\" title=\"Book Index\" data-border=\"0\" width=\"30\"\n+height=\"26\" alt=\"Book Index\" \/><\/a><\/td>\n+<\/tr>\n+<\/tbody>\n+<\/table>\n+\n+  \n+  \n+\n+<table dir=\"ltr\" data-summary=\"Chapter Number\" abbr=\"ChapNum\"\n+width=\"100%\" data-border=\"0\">\n+<tbody>\n+<tr class=\"odd\">\n+<td class=\"ChapNumber\" style=\"text-align: right;\"><span\n+class=\"ChapNumPrefix\">CHAPTER<\/span>  <span\n+class=\"ChapNumNum\">2<\/span><span class=\"ChapNumSuffix\"><\/span><\/td>\n+<\/tr>\n+<\/tbody>\n+<\/table>\n+\n+------------------------------------------------------------------------\n+\n+# <span id=\"d0e1017\"><\/span> Using the AsmTools\n+\n+<span id=\"d0e1021\"><\/span> This chapter describes general principles and\n+techniques for using the AsmTools. For detailed information about the\n+syntax of each component and command line examples, see [Appendix\n+B](appendix2.html#Z400013211728). If no command-line options are\n+provided or they are invalid, the tools provide error messages and usage\n+information. To get the help message, launch AsmTools without any\n+parameters as follows:\n+\n+<span id=\"d0e1026\"><\/span><span class=\"kbd command\">java  \n+  \n+-jar asmtools.jar<\/span>\n+\n+<span id=\"d0e1030\"><\/span>The help system describes how to use all of\n+the AsmTools components and contains the following topics described in\n+this chapter.\n+\n+-   <span id=\"d0e1035\"><\/span> [Assemblers and Disassemblers](#BADGCIGA)\n+\n+-   <span id=\"d0e1035\"><\/span>[JASM vs JCOD  \n+    ](chapter2.html#BADGCIGB)\n+\n+-   <span id=\"d0e1039\"><\/span>[Tool Usage  \n+    ](#BADCEIIF)\n+\n+    -   <span id=\"d0e1044\"><\/span>[JASM](#BADEFIIJ)\n+\n+    -   <span id=\"d0e1048\"><\/span>[JDIS](#BADCBFCE)\n+\n+    -   <span id=\"d0e1052\"><\/span>[JCODER](#BADIFAIE)\n+\n+    -   <span id=\"d0e1056\"><\/span>[JDEC](#BADHJAHI)\n+\n+    -   <span id=\"d0e1060\"><\/span>[JCDEC](#BADBIGAE)\n+\n+------------------------------------------------------------------------\n+\n+<span id=\"BADGCIGA\"><\/span>\n+\n+# Assemblers and Dissassemblers \n+\n+Assembly and Dissassembly are reflexive operations.  You can feed one\n+tool into another to achieve the same file.  For example  \n+  \n+**java -jar asmtools.jar jdec foo.class \\# produces foo.jcod**  \n+**java -jar asmtools.jar jcod foo.jcod \\# produces foo.class**  \n+\n+For a given class foo.class, the product of dissassembly, and\n+re-assembly is the same foo.class.  \n+\n+  \n+\n+------------------------------------------------------------------------\n+\n+<span id=\"BADGCIGB\"><\/span>\n+\n+# JASM vs. JCod \n+\n+Which format to use depends on the task you are trying to do. We can\n+describe some generalizations of when you might wish to use the JASM\n+format versus the JCOD format.    \n+\n+#### JASM \n+\n+The biggest difference between the two formats is that JASM specifically\n+focuses on representing byte-code instructions in the VM format (while\n+providing minimal description of the structure of  the rest of the class\n+file).  Generally, JASM is more convenient for semantic changes, like\n+change to instruction flow.  \n+\n+#### JCOD\n+\n+JCOD provides good support for describing the structure of a class file\n+(as well as writing incorrect bytes outside of this structure), and\n+provides no support for specifying byte-code instructions (simply raw\n+bytes for instructions).   JCOD is typically used for VMs to test\n+Well-formedness of class files (eg extra or missing bytes), boundary\n+issues, constant-pool coherence, constant-pool index coherence,\n+attribute well-formedness, etc..  \n+\n+#### Use Cases\n+\n+Below are typical cases of usage of both formats:  \n+  \n+JASM usages:  \n+  \n+\n+-    To obtain an invalid class where two methods have the same\n+    signature\n+-    To obtain an invalid class reference where an illegal type is used\n+-    To obtain an invalid class with missing\/removed instructions\n+-    To insert profiling instructions in methods\n+-    To obtain a class where a keyword is used as an identifier\n+-    To check that two classes produced by different compilers are\n+    equivalent  \n+\n+  \n+JCOD usages:  \n+  \n+\n+-    To examine specific parts of a classfile  \n+\n+-   -   eg. constant-pool (for dependency analysis)\n+    -   constant values\n+    -   inheritance chains (super classes)\n+    -   implementation fullfillment (interface resolution)\n+\n+  \n+\n+------------------------------------------------------------------------\n+\n+  \n+<span id=\"BADCEIIF\"><\/span>\n+\n+# Tool Usage \n+\n+Asmtools consist of five utilities:  \n+  \n+\n+-    jasm - Generates class files from the JASM representation\n+-    jdis - Represents class file in JASM format\n+-    jcoder - Generates class files from the JCOD representation\n+-    jdec - Represents class file in JCOD format\n+-    jcdec - Represents JavaCard cap and exp files in JCOD format\n+\n+  \n+Each utility can be invoked from the command line as shown below:  \n+  \n+<span style=\"font-weight: bold;\">$ java -jar asmtools.jar UTILITY\n+\\[options\\] File1 ...<\/span>  \n+  \n+or  \n+  \n+<span style=\"font-weight: bold;\">$ java -cp asmtools.jar \n+com.sun.asmtools.UTILITY.Main \\[options\\] File1 ...<\/span>  \n+  \n+Each utility supports own set of options  \n+\n+------------------------------------------------------------------------\n+\n+<table width=\"100%\" data-cellpadding=\"2\" data-cellspacing=\"2\">\n+<tbody>\n+<tr class=\"odd\">\n+<td data-valign=\"top\"><p><span id=\"d0e1281\"><\/span><strong>Note\n+-<\/strong> See the following sections for the options associated with\n+each tool.<br \/>\n+<\/p><\/td>\n+<\/tr>\n+<\/tbody>\n+<\/table>\n+\n+------------------------------------------------------------------------\n+\n+  \n+\n+------------------------------------------------------------------------\n+\n+<span id=\"BADEFIIJ\"><\/span>\n+\n+## JASM\n+\n+<span id=\"DDE_LINK\"><\/span><span style=\"font-style: italic;\">jasm<\/span>\n+is an assembler that accepts a text file based on the JASM\n+Specification, and produces a .class file for use with a Java Virtual\n+Machine.  \n+\n+#### Usage: \n+\n+<span style=\"font-weight: bold;\">$ java -jar asmtools.jar jasm\n+\\[options\\] filename.jasm<\/span>  \n+  \n+or  \n+  \n+<span style=\"font-weight: bold;\">$ java -cp asmtools.jar\n+com.sun.asmtools.jasm.Main \\[options\\] filename.jasm<\/span>  \n+  \n+\n+#### Options:\n+\n+<span style=\"font-weight: bold;\">-version<\/span> Print jasm version  \n+  \n+<span style=\"font-weight: bold;\">-d destdir <\/span>Specifies a directory\n+to place resulting .class files. If a destdir is not provided, the\n+.class file will be written in the current directory.  \n+  \n+<span style=\"font-weight: bold;\">-g <\/span>Add debug information to\n+.class file.  \n+  \n+<span style=\"font-weight: bold;\">-nowrite<\/span> Do not write resulting\n+.class files. This option may be used to verify the integrity of your\n+source jasm file.  \n+  \n+<span style=\"font-weight: bold;\">-strict<\/span> Consider warnings as\n+errors.  \n+  \n+<span style=\"font-weight: bold;\">-nowarn<\/span> Do not print warnings.  \n+  \n+<span style=\"font-weight: bold;\">-cv major.minor<\/span> Set the\n+operating class file version (by default 45.3).\n+\n+------------------------------------------------------------------------\n+\n+<table width=\"100%\" data-cellpadding=\"2\" data-cellspacing=\"2\">\n+<tbody>\n+<tr class=\"odd\">\n+<td data-valign=\"top\"><p><span id=\"d0e1281\"><\/span><strong>Note\n+-<\/strong> If the optional class attribute '<span\n+style=\"font-style: italic;\">version<\/span>'defines (in source of class)\n+the class file version then it overrides default class file version set\n+by <span style=\"font-style: italic;\">-cv<\/span> option.<\/p><\/td>\n+<\/tr>\n+<\/tbody>\n+<\/table>\n+\n+------------------------------------------------------------------------\n+\n+<span style=\"font-weight: bold;\"><\/span>  \n+\n+#### Description:\n+\n+To use jasm, specify the filename of the .jasm file you wish to develop\n+a .class file from. The Jasm Specification contains information relative\n+to the format of a .jasm file.  \n+\n+  \n+\n+------------------------------------------------------------------------\n+\n+<span id=\"BADCBFCE\"><\/span>\n+\n+## JDIS\n+\n+<span id=\"DDE_LINK\"><\/span>*jdis* is a disassembler that accepts a\n+`.class` file, and prints the plain-text translation of `jasm` source\n+file to the standard output.\n+\n+#### Usage: \n+\n+<span style=\"font-weight: bold;\">$ java -jar asmtools.jar jdis\n+\\[options\\] filename.class<\/span>  \n+  \n+or  \n+  \n+<span style=\"font-weight: bold;\">$ java -cp asmtools.jar\n+com.sun.asmtools.jdis.Main \\[options\\] filename.class<\/span>  \n+  \n+\n+#### Options:\n+\n+<span style=\"font-weight: bold;\">-version<\/span> Print jdis\n+version<span style=\"font-weight: bold;\"><\/span>  \n+  \n+<span style=\"font-weight: bold;\">-g <\/span>Generate a detailed output\n+format. Constants from constant pool are printed, and instructions in\n+methods are preceded with source line numbers (if attribute\n+LineNumberTable is available) and with bytecode program counters.  \n+  \n+<span style=\"font-weight: bold;\">-s1<\/span> Generate source lines in\n+comments. Commented lines of the source file, from which given .class\n+file is obtained, are printed above the corresponding instruction. Both\n+attributes LineNumberTable and SourceFile must be available. The source\n+file should be placed in the current working directory.  \n+  \n+<span style=\"font-weight: bold;\">-hx<\/span> Generate floating-point\n+constants in hexadecimal format.\n+\n+#### Description:\n+\n+To use jdis, specify a *filename*`.class` that you wish to\n+disassemble.  \n+You may redirect standard output to a *filename* `.jasm` file. Jdis will\n+disassemble a `.class` file and create a resultant `.jasm` source file.\n+\n+Refer to the [Jasm\n+Assembler](..\/..\/work\/asmtools\/asm-tools-4.1.2-build\/release\/doc\/misc\/jasmspec.html)\n+documentation for information on the structure of the resultant `.jasm`\n+file.  \n+\n+  \n+\n+------------------------------------------------------------------------\n+\n+<span id=\"BADIFAIE\"><\/span>\n+\n+## JCoder\n+\n+<span id=\"DDE_LINK\"><\/span>*jcoder* is a low-level assembler that\n+accepts text based on the [Jcoder\n+Specification.](..\/..\/work\/asmtools\/asm-tools-4.1.2-build\/release\/doc\/misc\/jcoderspec.html)\n+and produces a `.class` file for use with a Java Virtual Machine.\n+Jcoder's primary use is as a tool for producing specialized tests for\n+testing a JVM implementation.\n+\n+#### Usage: \n+\n+<span style=\"font-weight: bold;\">$ java -jar asmtools.jar jcoder\n+\\[options\\] filename.jcod<\/span>  \n+  \n+or  \n+  \n+<span style=\"font-weight: bold;\">$ java -cp asmtools.jar\n+com.sun.asmtools.jcoder.Main \\[options\\] filename.jcod<\/span>  \n+  \n+\n+#### Options:\n+\n+<span style=\"font-weight: bold;\">-version<\/span> Print jcoder version  \n+  \n+<span style=\"font-weight: bold;\">-d destdir <\/span>Specifies a directory\n+to place resulting .class files. If a destdir is not provided, the\n+.class file will be written in the current directory.  \n+  \n+<span style=\"font-weight: bold;\">-nowrite<\/span> Do not write resulting\n+.class files. This option may be used to verify the integrity of your\n+source jcoder file.  \n+\n+#### Description:\n+\n+To use jcoder, specify the *filename*`.jcod` file you wish to develop a\n+`.class` file from. The [Jcoder\n+Specification](..\/..\/work\/asmtools\/asm-tools-4.1.2-build\/release\/doc\/misc\/jcoderspec.html)\n+contains information relative to the format of a `.jcod` file.\n+\n+  \n+\n+------------------------------------------------------------------------\n+\n+<span id=\"BADHJAHI\"><\/span>\n+\n+## JDec\n+\n+<span id=\"DDE_LINK\"><\/span>*jdec* is a low-level disassembler that\n+accepts `.class` file and prints a plain text of `jcod` source file to\n+the standard output.\n+\n+#### Usage: \n+\n+<span style=\"font-weight: bold;\">$ java -jar asmtools.jar jdec\n+\\[options\\] filename.class \\[&gt; filename.jcod\\]<\/span>  \n+  \n+or  \n+  \n+<span style=\"font-weight: bold;\">$ java -cp asmtools.jar\n+com.sun.asmtools.jdec.Main \\[options\\]\n+filename.class<\/span><span style=\"font-weight: bold;\"> \\[&gt;\n+filename.jcod\\]<\/span>  \n+  \n+\n+#### Options:\n+\n+<span style=\"font-weight: bold;\">-version<\/span> Print jdec\n+version<span style=\"font-weight: bold;\"><\/span>  \n+  \n+<span style=\"font-weight: bold;\">-g <\/span>Generate a detailed output\n+format.  \n+\n+#### Description:\n+\n+To use jdec, specify a *`filename.class`* that you wish to\n+disassemble.  \n+You may redirect standard output to a *`filename.jcod`* file. *jdec*\n+will disassemble `.class` file and create a resultant `.jcod` plain\n+source file.\n+\n+Refer to the [Jcoder Low-Level\n+Assembler](..\/..\/work\/asmtools\/asm-tools-4.1.2-build\/release\/doc\/misc\/jcoderspec.html)\n+documentation for information on the structure of the resultant `.jcod`\n+file.  \n+\n+  \n+\n+------------------------------------------------------------------------\n+\n+<span id=\"BADBIGAE\"><\/span>\n+\n+## JCDec\n+\n+<span id=\"DDE_LINK\"><\/span>*jcdec* is a low-level disassembler that\n+accepts `.class` file and prints a plain text of `jcod` source file to\n+the standard output.\n+\n+#### Usage: \n+\n+<span style=\"font-weight: bold;\">$ java -jar asmtools.jar jcdec\n+\\[options\\] filename.exp | filename.cap \\[&gt; filename.jcod\\]<\/span>  \n+  \n+or  \n+  \n+<span style=\"font-weight: bold;\">$ java -cp asmtools.jar\n+com.sun.asmtools.jcdec.Main \\[options\\]\n+<\/span><span style=\"font-weight: bold;\">filename.exp |\n+filename.cap<\/span><span style=\"font-weight: bold;\"> \\[&gt;\n+filename.jcod\\]<\/span>  \n+  \n+\n+#### Options:\n+\n+<span style=\"font-weight: bold;\">-version<\/span> Print jcdec\n+version<span style=\"font-weight: bold;\"><\/span>  \n+  \n+<span style=\"font-weight: bold;\">-g <\/span>Generate a detailed output\n+format.  \n+\n+#### Description:\n+\n+To use jcdec, specify a *`filename.exp`* or *`filename.cap`* that you\n+wish to disassemble.  \n+You may redirect standard output to a *`filename.jcod`* file. *jcdec*\n+will disassemble the file and create a resultant `.jcod` plain source\n+file.\n+\n+Refer to the [Jcoder Low-Level\n+Assembler](..\/..\/work\/asmtools\/asm-tools-4.1.2-build\/release\/doc\/misc\/jcoderspec.html)\n+documentation for information on the structure of the resultant ` .jcod`\n+file.\n+\n+  \n+\n+<table width=\"100%\" data-border=\"0\" data-cellpadding=\"0\"\n+data-cellspacing=\"0\">\n+<tbody>\n+<tr class=\"odd\" data-bgcolor=\"#cccccc\">\n+<td><p>Java Assembler Tools (AsmTools) User's Guide<\/p><\/td>\n+<td><p>000-0000-00<\/p><\/td>\n+<td data-valign=\"top\"><p><a href=\"index.html\"><img\n+src=\"shared\/toc01.gif\" id=\"graphics14\" data-align=\"bottom\"\n+data-border=\"0\" width=\"30\" height=\"26\" alt=\"Table Of Contents\" \/><\/a> <a\n+href=\"chapter1.html\"><img src=\"shared\/prev01.gif\" id=\"graphics15\"\n+data-align=\"bottom\" data-border=\"0\" width=\"30\" height=\"26\"\n+alt=\"Previous Chapter\" \/><\/a><a href=\"chapter3.html\"><img\n+src=\"shared\/next01.gif\" id=\"graphics16\" data-align=\"bottom\"\n+data-border=\"0\" width=\"30\" height=\"26\" alt=\"Next Chapter\" \/><\/a><a\n+href=\"ix.html\"><img src=\"shared\/index01.gif\" id=\"graphics17\"\n+data-align=\"bottom\" data-border=\"0\" width=\"30\" height=\"26\"\n+alt=\"Book Index\" \/><\/a><\/p><\/td>\n+<\/tr>\n+<\/tbody>\n+<\/table>\n+\n+------------------------------------------------------------------------\n+\n+Copyright © 2012, 2017, Oracle and\/or its affiliates. All rights\n+reserved.\n","filename":"docs\/UsingTools.md","additions":488,"deletions":0,"binary":false,"changes":488,"status":"added"},{"patch":"@@ -0,0 +1,2257 @@\n+<!DOCTYPE HTML PUBLIC \"-\/\/W3C\/\/DTD HTML 4.0 Transitional\/\/EN\">\n+<!--\n+ Copyright (c) 2014, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+\n+ This code is free software; you can redistribute it and\/or modify it\n+ under the terms of the GNU General Public License version 2 only, as\n+ published by the Free Software Foundation.\n+\n+ This code is distributed in the hope that it will be useful, but WITHOUT\n+ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ version 2 for more details (a copy is included in the LICENSE file that\n+ accompanied this code).\n+\n+ You should have received a copy of the GNU General Public License version\n+ 2 along with this work; if not, write to the Free Software Foundation,\n+ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+\n+ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ or visit www.oracle.com if you need additional information or have any\n+ questions.\n+-->\n+\n+<html>\n+<head>\n+  <meta http-equiv=\"Content-Type\" content=\"text\/html; charset=UTF-8\">\n+  <meta http-equiv=\"Content-Language\" content=\"en-US\">\n+  <title>JASM Syntax<\/title>\n+  <meta http-equiv=\"Content-Style-Type\" content=\"text\/css\">\n+  <meta name=\"Generator\" content=\"XSolBook3.5 XML Custom XSLT Filter\">\n+  <meta name=\"keywords\" content=\"AsmTools, AsmTools User's Guide\">\n+  <meta name=\"dc.title\" content=\"Command Line Usage Examples\">\n+  <meta name=\"description\"\n+ content=\"This manual describes how to use the AsmTools.\">\n+  <meta name=\"identifier\" content=\"000-0000-00\">\n+  <meta name=\"date\" content=\"\">\n+  <meta name=\"issued\" content=\"2009-02-20\">\n+  <meta name=\"revision\" content=\"\">\n+  <meta name=\"publisher\" content=\"Oracle, Inc.\">\n+  <meta name=\"collection\" content=\"reference\">\n+  <meta name=\"robots\" content=\"index, follow\">\n+<!--Inserts the stylesheet-->\n+  <link rel=\"STYLESHEET\" href=\"unx_str_styles.css\" charset=\"ISO-8859-1\"\n+ type=\"text\/css\">\n+  <meta http-equiv=\"content-type\" content=\"text\/html; charset=UTF-8\">\n+<\/head>\n+<body class=\"HlpBdy\" leftmargin=\"10\" topmargin=\"10\"\n+ style=\"background-color: rgb(255, 255, 255);\" marginheight=\"10\"\n+ marginwidth=\"10\">\n+<div class=\"navbar\" align=\"center\">\n+<table dir=\"ltr\"\n+ summary=\"Navigation bar, includes the book title and navigation buttons\"\n+ border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n+  <colgroup span=\"2\" width=\"100%\"><col id=\"t1\" span=\"1\" width=\"50%\"><col\n+ id=\"t2\" span=\"1\" width=\"50%\"><\/colgroup><tbody>\n+    <tr bgcolor=\"#cccccc\">\n+      <td class=\"navbartitle\" rowspan=\"1\" colspan=\"1\" abbr=\"ChapTitle\"\n+ align=\"left\"><a name=\"Z400013211728\"><\/a>Java Assembler Tools\n+(AsmTools) User's Guide<\/td>\n+      <td rowspan=\"1\" colspan=\"1\" abbr=\"NavButtons\" align=\"right\"\n+ valign=\"top\"><a href=\"index.html\"><img src=\"shared\/toc01.gif\"\n+ title=\"Table Of Contents\" alt=\"Table Of Contents\" border=\"0\"\n+ height=\"26\" width=\"30\"><\/a><a href=\"chapter3.html\"><img\n+ src=\"shared\/prev01.gif\" title=\"Previous Chapter\" alt=\"Previous Chapter\"\n+ border=\"0\" height=\"26\" width=\"30\"><\/a><a href=\"appendix2.html\"><img\n+ src=\"shared\/next01.gif\" title=\"Next Chapter\" alt=\"Next Chapter\"\n+ border=\"0\" height=\"26\" width=\"30\"><\/a><a href=\"ix.html\"><img\n+ src=\"shared\/index01.gif\" title=\"Book Index\" alt=\"Book Index\" border=\"0\"\n+ height=\"26\" width=\"30\"><\/a><\/td>\n+    <\/tr>\n+  <\/tbody>\n+<\/table>\n+<p class=\"feedback\">\n+<script language=\"javascript\" type=\"text\/javascript\" charset=\"UTF-8\"\n+ src=\"\/app\/css\/oo_engine.js\"><\/script><a>\n+<script language=\"javascript\" type=\"text\/javascript\" charset=\"UTF-8\">\n+O_GoT('<img src=\"\/app\/images\/sm_3E6B8A_oo.gif\" border=\"0\" alt=\"Feedback link\" title=\"Feedback\">Feedback');\n+<\/script><\/a><\/p>\n+<br>\n+<br>\n+<\/div>\n+<table dir=\"ltr\" summary=\"Chapter Number\" abbr=\"ChapNum\" border=\"0\"\n+ width=\"100%\">\n+  <colgroup span=\"1\" width=\"100%\"><col id=\"ch1\" span=\"1\"><\/colgroup><tbody>\n+    <tr>\n+      <td class=\"ChapNumber\" align=\"right\"> <span class=\"ChapNumPrefix\">APPENDIX<\/span>&nbsp;\n+\n+\n+\n+\n+\n+      <span class=\"ChapNumNum\">A<\/span> <span class=\"ChapNumSuffix\"><\/span><\/td>\n+    <\/tr>\n+  <\/tbody>\n+<\/table>\n+<hr noshade=\"1\" size=\"7\">\n+<h1 class=\"chaptitle\" align=\"right\"><a name=\"d0e2098\"><\/a><!-- ============ --><!-- MAIN CONTENT --><\/h1>\n+<h1 class=\"ChapTitle\" align=\"right\"><a name=\"d0e2429\"><\/a>JASM Syntax<br>\n+<\/h1>\n+<!-- END PAGETITLE ONE LINE -->\n+<p>This chapter describes JASM syntax, and how to encode class files\n+using this\n+syntax. <span style=\"font-style: italic;\">Jasm<\/span> is a java\n+assembler that accepts text in the JASM\n+format and produces a <code>.class<\/code> file for use\n+with a Java Virtual Machine. <span style=\"font-style: italic;\">Jasm<\/span>'s\n+primary\n+use\n+is\n+as\n+a\n+tool for producing specialized tests for testing a JVM\n+implementation<br>\n+<\/p>\n+<p>\n+This chapter describes JASM syntax in the following sections:\n+<\/p>\n+<ul type=\"square\">\n+  <li><a href=\"#gensyntax\">General Syntax<\/a>\n+    <ul>\n+      <li><a href=\"#descrfrm\">Description Formats<\/a><\/li>\n+      <li><a href=\"#lex\">Lexical Structure<\/a><\/li>\n+    <\/ul>\n+  <\/li>\n+  <li><a href=\"#genstruct\">General Class Structure<\/a><\/li>\n+  <li><a href=\"#genmodule\">General Module Structure<\/a><\/li>\n+  <li><a href=\"#source\">General Source File Structure<\/a><\/li>\n+  <li><a href=\"#cp\">The Constant Pool and Constant Elements<\/a><\/li>\n+  <li><a href=\"#constant\">Constant Declarations<\/a><\/li>\n+  <li><a href=\"#field\">Field Variables<\/a><\/li>\n+  <li><a href=\"#method\">Method Declarations<\/a><\/li>\n+  <li><a href=\"#instructions\">Instructions<\/a>\n+    <ul>\n+      <li><a href=\"#vminstructions\">VM Instructions<\/a><\/li>\n+      <li><a href=\"#invokedynamicinstructions\">InvokeDynamic\n+Instructions<\/a><\/li>\n+      <li><a href=\"#pseudoinstructions\">Pseudo Instructions<\/a>\n+        <ul>\n+          <li><a href=\"#codepseudo\">Code Generating Pseudo Instructions<\/a><\/li>\n+          <li><a href=\"#attrpseudo\">Attribute Generating Pseudo\n+Instructions<\/a> <\/li>\n+        <\/ul>\n+      <\/li>\n+    <\/ul>\n+  <\/li>\n+  <li><a href=\"#innercl\">Inner Class Declarations<\/a><\/li>\n+  <li><a href=\"#annots\">Annotation Declarations<\/a>\n+    <ul>\n+      <li><a href=\"#memberannots\">Member Annotations<\/a><\/li>\n+      <li><a href=\"#paramannots\">Parameter Names and Parameter\n+Annotations<\/a><\/li>\n+      <li><a href=\"#defaultannots\">Default Annotations<\/a><\/li>\n+    <\/ul>\n+  <\/li>\n+  <li><a href=\"#module_properties\">Module Properties<\/a>\n+    <ul>\n+      <li><a href=\"#module_requires\">Requires<\/a><\/li>\n+      <li><a href=\"#module_exports\">Exports<\/a><\/li>\n+      <li><a href=\"#module_opens\">Opens<\/a><\/li>\n+      <li><a href=\"#module_uses\">Uses<\/a><\/li>\n+      <li><a href=\"#module_provides\">Provides<\/a><\/li>\n+    <\/ul>\n+  <\/li>\n+  <li><a href=\"#pico\">PicoJava Instructions<\/a><\/li>\n+<\/ul>\n+<p><\/p>\n+<!-- MAIN CONTENT -->\n+<!-- ============ --><!-- ============ --><!-- BEGIN PAGETITLE ONE LINE -->\n+<hr noshade=\"noshade\" size=\"7\"><a name=\"gensyntax\"><\/a>\n+<h1 class=\"head1\">General Syntax<\/h1>\n+<p>\n+JASM syntax can come in one of two variations: short-form or\n+verbose-form.&nbsp; Short form uses Java-style names to refer to items\n+in a constant-pool.&nbsp; Verbose form uses explicit constant-pool\n+indexes to refer to items in the constant pool.&nbsp; The normal output\n+from JDIS produces jasm files in the short-form.&nbsp; Using the -g\n+option for JDIS (ie.&nbsp; jdis -g file.class) produces JASM source in\n+the verbose-form.<br>\n+<\/p>\n+<p>The source text file can be free form (newlines are considered\n+blanks)\n+and may contain Java-style commenting.\n+The first line of a JASM file represents the name of the resulting\n+file in the destination directory. This name does not affect the\n+content of\n+the resulting file. This line has two forms:\n+<\/p>\n+<p>\n+<\/p>\n+<pre>file FILENAME <br><\/pre>\n+or\n+<pre>class CLASSNAME <br><\/pre>\n+In the latter case, extension <code> .class <\/code> will be added to\n+form FILENAME. Jasm's <code>-d option<\/code> allows you to define the\n+destination\n+directory. A list of structured dataWriter items follows the class name. The\n+length (in bytes) of each item\n+is determined by its representation.<br>\n+<p><\/p>\n+<blockquote>\n+  <hr align=\"left\" noshade=\"1\" size=\"6\" width=\"80%\"><a name=\"descrfrm\"><\/a>\n+  <h2 class=\"head2\">Description formats<\/h2>\n+  <p>\n+  <table>\n+    <tbody>\n+      <tr>\n+        <td> TERM1|TERM2 <\/td>\n+        <td>TERM1 or TERM2 (not both) <\/td>\n+      <\/tr>\n+      <tr>\n+        <td> [TERM] <\/td>\n+        <td> TERM is optional <\/td>\n+      <\/tr>\n+      <tr>\n+        <td> TERM... <\/td>\n+        <td> TERM repeated 1 or more times <\/td>\n+      <\/tr>\n+      <tr>\n+        <td> [TERM...] <\/td>\n+        <td> TERM repeated 0 or more times <\/td>\n+      <\/tr>\n+      <tr>\n+        <td> \"sequence of\" <\/td>\n+        <td>all the following terms are mandatory, in the order given. <\/td>\n+      <\/tr>\n+      <tr>\n+        <td> \"set of\" <\/td>\n+        <td> any of following terms, or none of them,\n+may appear in any order. However, repetitions are not allowed. <\/td>\n+      <\/tr>\n+      <tr>\n+        <td> \"list of\" <\/td>\n+        <td> any of following terms, or none of them,\n+may appear in any sequence. If more than one term appear, they are\n+separated by commas (',') <\/td>\n+      <\/tr>\n+    <\/tbody>\n+  <\/table>\n+  <\/p>\n+  <hr align=\"left\" noshade=\"1\" size=\"6\" width=\"80%\"><a name=\"lex\"><\/a>\n+  <h2 class=\"head2\">Lexical Structure<\/h2>\n+  <p>The source text file can be free form (newlines, tabs, and blank\n+spaces are equivalent). Additionally, the source may contain standard\n+Java\n+and C++ comments. <\/p>\n+  <p> <code>STRING<\/code>, <code>NUMBER<\/code>, and <code>IDENT<\/code>\n+are treated the same as in\n+the Java Language Specification. One difference is that LETTERs include\n+also `\/', `&lt;', `&gt;', `(', and `)' . <\/p>\n+  <dl>\n+    <dt><code><b><em>STRING<\/em><\/b><\/code>: <\/dt>\n+    <dd><code>\" [ STRING_CHARACTER... ] \"<\/code> <\/dd>\n+    <dt><code><b><em>NUMBER<\/em><\/b><\/code>: <\/dt>\n+    <dd><code> DIGIT...<\/code> <\/dd>\n+    <dt><code><b><em>IDENT<\/em><\/b><\/code>: <\/dt>\n+    <dd><code>LETTER [ LETTER_OR_DIGIT ...]<\/code> <\/dd>\n+    <dt><code><b><em>ACCESS<\/em><\/b><\/code> (depends on the context):\n+set of <\/dt>\n+    <dd><code>abstract final interface native private protected public\n+static super synchronized transient volatile deprecated synthetic\n+bridge varargs<\/code> <\/dd>\n+  <\/dl>\n+  <p> Not all access bits make sense for all declarations: for example,\n+the\n+\"super\" and \"interface\" access flags are applied to classes only. <\/p>\n+  <p>If an access bit is used improperly,\n+the assembler prints a warning, but places the bit in the access\n+set. <\/p>\n+  <p>Note that <code>deprecated<\/code> and <code>synthetic<\/code>\n+keywords\n+are not translated to access flags in the Java sense.\n+For these jasm generates a corresponding <code>Deprecated<\/code>\n+or <code>Synthetic<\/code> attributes instead of access bits. The <code>synthetic<\/code>\n+access flag is used to mark compiler generated\n+members not\n+seen in the source (for example, a field reference to an anonymous\n+outer class). <\/p>\n+  <dl>\n+    <dt><code><b><em>TAG<\/em><\/b><\/code>: one of <\/dt>\n+    <dd><code>int float long double Asciz String class Field Method\n+NameAndType InterfaceMethod MethodType MethodHandle InvokeDynamic Dynamic<\/code>\n+    <\/dd>\n+  <\/dl>\n+Local names represent labels, rangePC-labels and local variables. Their\n+scope is constrained by method parenthesis.\n+  <dl>\n+    <dt><code><b><em>LOCAL_NAME<\/em><\/b><\/code>: <\/dt>\n+    <dd><code>IDENT<\/code> <\/dd>\n+  <\/dl>\n+  <p>&nbsp;<\/p>\n+  <dl>\n+    <dt><code><b><em>CONSTANT_INDEX<\/em><\/b><\/code>: <\/dt>\n+    <dd><code>#NUMBER<\/code><\/dd>\n+  <\/dl>\n+  <p> Each CONSTANT_INDEX represents a reference into the constant pool\n+at the specified location. <\/p>\n+<\/blockquote>\n+<hr noshade=\"noshade\" size=\"7\"><a name=\"genstruct\"><\/a>\n+<h1 class=\"head1\">General Class Structure<\/h1>\n+<dl>\n+  <dt><code><b><em>INTERFACES<\/em><\/b><\/code>:list of <\/dt>\n+  <dd><code>CONSTANT_CELL(class|@interface|interface)<\/code> <\/dd>\n+  <dt><code><b><em>TOP_LEVEL_COMPONENT<\/em><\/b><\/code>: one of <\/dt>\n+  <dd><code>CONSTANT_DECLARATION FIELD_DECLARATION METHOD_DECLARATION\n+INNER_CLASS_DECLARATIONS<\/code> <\/dd>\n+  <dt><code><b><em>CLASS<\/em><\/b><\/code>: sequence of <\/dt>\n+  <dd><code>ANNOTATIONS CLASS_ACCESS CONSTANT_CELL(class|@interface|interface) [extends\n+CONSTANT_CELL(class)]\n+[implements INTERFACES] [version INTEGER:INTEGER] {\n+[TOP_LEVEL_COMPONENT...] }<\/code><\/dd>\n+  <dt><code><span style=\"font-weight: bold; font-style: italic;\">CLASS_ACCESS<\/span>:\n+list\n+of<\/code><\/dt>\n+  <dd><code>[public]<\/code><code>[final]<\/code><code><\/code><code>[super]<\/code><code><\/code><code>[interface]<\/code><code><\/code><code>[abstract]<\/code><code><\/code><code>[synthetic]<\/code><code><\/code><code>[annotation]<\/code><code><\/code><code>[enum]<\/code><\/dd>\n+<\/dl>\n+<p>\n+The <code>extends CONSTANT_CELL(class)<\/code> clause places the\n+\"super\" element of the\n+class file. The <code>implements INTERFACES<\/code> clause places the\n+table of interfaces.\n+Since the assembler does not distinguish interfaces and ordinary\n+classes\n+(the only difference is one access bit), the table of interfaces of an\n+interface class must be declared with <code>implements<\/code> keyword,\n+and not <code>extends<\/code>, as in Java language.\n+<\/p>\n+<p>\n+<b>Note:<\/b>The last two rules allow <code>TOP_LEVEL_COMPONENT<\/code>\n+to appear in any order and number. For example, you can split constant\n+pool table into several parts, mixing constants and method\n+declarations.\n+<\/p>\n+<hr noshade=\"noshade\" size=\"7\"><a name=\"genmodule\"><\/a>\n+<h1 class=\"head1\">General Module Structure<\/h1>\n+<dl>\n+  <dt><code><b><em>MODULE<\/em><\/b><\/code>: sequence of <\/dt>\n+  <dd><code>ANNOTATIONS [MODULE_FLAGS] moduleContent CONSTANT_CELL(moduleContent) [version INTEGER:INTEGER] {[TOP_LEVEL_MODULE_PROPERTIES...]}<\/code><\/dd>\n+  <dt><code><b><em>TOP_LEVEL_MODULE_PROPERTIES<\/em><\/b><\/code>: one of <\/dt>\n+  <dd><code>MODULE_REQUIRES<\/code> <code>MODULE_EXPORTS<\/code> <code>MODULE_OPENS<\/code> <code>MODULE_USES<\/code> <code>MODULE_PROVIDES<\/code> <\/dd>\n+  <dt><code><span style=\"font-weight: bold; font-style: italic;\">MODULE_FLAGS<\/span>:set\n+    of<\/code><\/dt>\n+  <dd><code>[open]<\/code><\/dd>\n+<\/dl>\n+<hr noshade=\"noshade\" size=\"7\">\n+<a name=\"source\"><\/a>\n+<h1 class=\"head1\">General Source File Structure<\/h1>\n+<dl>\n+  <dt><code><b><em>PACKAGE_DECLARATION<\/em><\/b><\/code>: <\/dt>\n+  <dd><code>package IDENT;<\/code> <\/dd>\n+<\/dl>\n+Package declaration can appear only once in source file.\n+<dl>\n+  <dt><code><b><em>CLASS_FILE<\/em><\/b><\/code>: sequence of <\/dt>\n+  <dd><code>PACKAGE_DECLARATION CLASS...<\/code> <\/dd>\n+<\/dl>\n+<dl>\n+  <dt><code><b><em>MODULE_FILE<\/em><\/b><\/code>: <\/dt>\n+  <dd><code>MODULE...<\/code> <\/dd>\n+<\/dl>\n+<dl>\n+  <dt><code><b><em>SOURCE_FILE<\/em><\/b><\/code>: <\/dt>\n+  <dd><code>MODULE_FILE|CLASS_FILE<\/code> <\/dd>\n+<\/dl>\n+<hr noshade=\"noshade\" size=\"7\">\n+<a name=\"cp\"><\/a>\n+<h1 class=\"head1\">The Constant Pool and Constant Elements<\/h1>\n+<p>\n+A <code>CONSTANT_CELL<\/code> refers to an element in the constant\n+pool.\n+It may refer to the element either by its index or its value:\n+<\/p>\n+<dl>\n+  <dt><code><b><em>CONSTANT_CELL<\/em><\/b><\/code>: <\/dt>\n+  <dd><code>CONSTANT_INDEX<\/code> <br>\n+    <code>TAGGED_CONSTANT_VALUE<\/code> <\/dd>\n+<\/dl>\n+Generic rule for TAGGED_CONSTANT_VALUE is:\n+<dl>\n+  <dt><code><b><em>TAGGED_CONSTANT_VALUE<\/em><\/b><\/code>: <\/dt>\n+  <dd><code> [TAG] CONSTANT_VALUE<\/code> <\/dd>\n+<\/dl>\n+<p>\n+A TAG may be omitted when the context only allows one kind of a tag.\n+For example, the argument of an <code>anewarray<\/code> instruction\n+should be a <code>CONSTANT_CELL<\/code> which represents a class, so\n+instead of\n+<\/p>\n+<pre>    anewarray class java\/lang\/Object<br><br><\/pre>\n+one may write:\n+<pre>    anewarray java\/lang\/Object<br><\/pre>\n+It is possible to write another tag, e.g.:\n+<pre>    anewarray String java\/lang\/Object<br><\/pre>\n+However, the resulting program will be incorrect.\n+<p><\/p>\n+<p>Another example of an implicit tag (eg. a context which implies tag)\n+is the header of a class declaration. You may write:\n+<\/p>\n+<pre>    aClass {<br>    }<br><\/pre>\n+which is equivalent to:\n+<pre>    class aClass {<br>    }<br><\/pre>\n+Below, the tag implied by context will be included in the rules, e.g.:\n+<pre>    CONSTANT_VALUE(int).<br><\/pre>\n+<p>\n+The exact notation of <code>CONSTANT_VALUE<\/code> depends on the\n+(explicit or implicit) <code>TAG.<\/code>\n+<\/p>\n+<dl>\n+  <dt><code><b><em>TAGGED_CONSTANT_VALUE<\/em><\/b><\/code>: <\/dt>\n+  <blockquote>\n+    <table border=\"0\">\n+      <tbody>\n+        <tr>\n+          <td><code> int <\/code> <\/td>\n+          <td><code> INTEGER <\/code><\/td>\n+          <td colspan=\"2\"> &nbsp; <\/td>\n+        <\/tr>\n+        <tr>\n+          <td><code> long <\/code> <\/td>\n+          <td><code> [INTEGER|LONG] <\/code><\/td>\n+          <td colspan=\"2\"> &nbsp; <\/td>\n+        <\/tr>\n+        <tr>\n+          <td><code> float <\/code> <\/td>\n+          <td><code> [FLOAT|INTEGER] <\/code><\/td>\n+          <td colspan=\"2\"> &nbsp; <\/td>\n+        <\/tr>\n+        <tr>\n+          <td><code> float <\/code> <\/td>\n+          <td><code> bits INTEGER <\/code><\/td>\n+          <td colspan=\"2\"> &nbsp; <\/td>\n+        <\/tr>\n+        <tr>\n+          <td><code> double <\/code> <\/td>\n+          <td><code> [FLOAT|DOUBLE|INTEGER|LONG] <\/code><\/td>\n+          <td colspan=\"2\"> &nbsp; <\/td>\n+        <\/tr>\n+        <tr>\n+          <td><code> double <\/code> <\/td>\n+          <td><code> [bits INTEGER | bits LONG] <\/code><\/td>\n+          <td colspan=\"2\"> &nbsp; <\/td>\n+        <\/tr>\n+        <tr>\n+          <td><code> Asciz <\/code> <\/td>\n+          <td><code> EXTERNAL_NAME <\/code><\/td>\n+          <td colspan=\"2\"> &nbsp; <\/td>\n+        <\/tr>\n+        <tr>\n+          <td><code> class <\/code> <\/td>\n+          <td><code> CONSTANT_NAME <\/code><\/td>\n+          <td colspan=\"2\"> &nbsp; <\/td>\n+        <\/tr>\n+        <tr>\n+          <td><code> String <\/code> <\/td>\n+          <td><code> CONSTANT_NAME <\/code><\/td>\n+          <td colspan=\"2\"> &nbsp; <\/td>\n+        <\/tr>\n+        <tr>\n+          <td><code> NameAndType <\/code> <\/td>\n+          <td><code> NAME_AND_TYPE <\/code><\/td>\n+          <td colspan=\"2\"> &nbsp; <\/td>\n+        <\/tr>\n+        <tr>\n+          <td><code> Field <\/code> <\/td>\n+          <td><code> CONSTANT_FIELD <\/code><\/td>\n+          <td colspan=\"2\"> &nbsp; <\/td>\n+        <\/tr>\n+        <tr>\n+          <td><code> Method <\/code> <\/td>\n+          <td><code> CONSTANT_FIELD <\/code><\/td>\n+          <td colspan=\"2\"> &nbsp; <\/td>\n+        <\/tr>\n+        <tr>\n+          <td><code> ReferenceIndex <\/code> <\/td>\n+          <td><code> [Method|InterfaceMethod]<\/code><\/td>\n+          <td colspan=\"2\"> &nbsp; <\/td>\n+        <\/tr>\n+        <tr>\n+          <td><code> MethodHandle <\/code> <\/td>\n+          <td><code> [INVOKESUBTAG|INVOKESUBTAG_INDEX]<\/code><\/td>\n+          <td><code> :<\/code><\/td>\n+          <td><code> CONSTANT_FIELD&nbsp;|&nbsp;[FIELDREF|METHODREF|INTERFACEMETHODREF] <\/code><\/td>\n+        <\/tr>\n+        <tr>\n+          <td><code> MethodType <\/code> <\/td>\n+          <td colspan=\"3\"><code> CONSTANT_NAME<\/code><\/td>\n+        <\/tr>\n+        <tr>\n+          <td><a name=\"invokedynamicconstant\"><\/a><code> InvokeDynamic <\/code>\n+          <\/td>\n+          <td><code> INVOKESUBTAG<\/code><\/td>\n+          <td><code> :<\/code><\/td>\n+          <td><code> CONSTANT_FIELD<\/code><\/td>\n+          <td><code> :<\/code><\/td>\n+          <td><code> NAME_AND_TYPE<\/code><\/td>\n+          <td><code> [INVOKEDYNAMIC_STATIC_ARGS]<\/code><\/td>\n+        <\/tr>\n+        <tr>\n+          <td><code> moduleContent <\/code> <\/td>\n+          <td><code> CONSTANT_NAME <\/code><\/td>\n+          <td colspan=\"2\"> &nbsp; <\/td>\n+        <\/tr>\n+        <tr>\n+          <td><code> package <\/code> <\/td>\n+          <td><code> CONSTANT_NAME <\/code><\/td>\n+          <td colspan=\"2\"> &nbsp; <\/td>\n+        <\/tr>\n+      <\/tbody>\n+    <\/table>\n+  <\/blockquote>\n+<\/dl>\n+<blockquote>\n+  <p><u><em>Note<\/em><\/u><br>\n+When the JASM parser encounters an InvokeDynamic constant, it creates\n+an entry in\n+the <em>BootstrapMethods<\/em> attribute (the <em>BootstrapMethods<\/em>\n+attribute is produced if it\n+has not already been created). The entry contains a reference to the <em>MethodHandle<\/em>\n+item\n+in the constant pool, and, optionally, a sequence of references to\n+additional static\n+arguments (<em>ldc<\/em>-type constants) to the <em>bootstrap\n+method<\/em> <\/p>\n+<\/blockquote>\n+<p>\n+INVOKESUBTAGs for MethodHandle and (const) InvokeDynamic are defined as\n+follows and can be presented as either an index or a tag:\n+<\/p>\n+<dl>\n+  <dt><code><b><em>INVOKESUBTAG:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[INVOKESUBTAG_INDEX]<\/em><\/b><\/code><\/dt>\n+  <blockquote>\n+    <table border=\"0\">\n+      <tbody>\n+        <tr>\n+          <td><code> REF_GETFIELD <\/code> <\/td>\n+          <td><code> [1] <\/code><\/td>\n+        <\/tr>\n+        <tr>\n+          <td><code> REF_GETSTATIC <\/code> <\/td>\n+          <td><code> [2] <\/code><\/td>\n+        <\/tr>\n+        <tr>\n+          <td><code> REF_PUTFIELD <\/code> <\/td>\n+          <td><code> [3] <\/code><\/td>\n+        <\/tr>\n+        <tr>\n+          <td><code> REF_PUTSTATIC <\/code> <\/td>\n+          <td><code> [4] <\/code><\/td>\n+        <\/tr>\n+        <tr>\n+          <td><code> REF_INVOKEVIRTUAL <\/code> <\/td>\n+          <td><code> [5] <\/code><\/td>\n+        <\/tr>\n+        <tr>\n+          <td><code> REF_INVOKESTATIC <\/code> <\/td>\n+          <td><code> [6] <\/code><\/td>\n+        <\/tr>\n+        <tr>\n+          <td><code> REF_INVOKESPECIAL <\/code> <\/td>\n+          <td><code> [7] <\/code><\/td>\n+        <\/tr>\n+        <tr>\n+          <td><code> REF_NEWINVOKESPECIAL<\/code> <\/td>\n+          <td><code> [8] <\/code><\/td>\n+        <\/tr>\n+        <tr>\n+          <td><code> REF_INVOKEINTERFACE <\/code> <\/td>\n+          <td><code> [9] <\/code><\/td>\n+        <\/tr>\n+      <\/tbody>\n+    <\/table>\n+  <\/blockquote>\n+<\/dl>\n+<p>\n+Static arguments for an InvokeDynamic constant are defined as follows:\n+<\/p>\n+<dl>\n+  <dt><code><b><em>INVOKEDYNAMIC_STATIC_ARGUMENTS<\/em><\/b><\/code>: <\/dt>\n+  <dd><code> INVOKEDYNAMIC_STATIC_ARG ',' ...<\/code> <\/dd>\n+  <dt><code><b><em>INVOKEDYNAMIC_STATIC_ARG<\/em><\/b><\/code>: (one of)<\/dt>\n+  <dd><code> INVOKEDYNAMIC_STATIC_ARG_CONSTANT_VALUE<\/code> <\/dd>\n+<\/dl>\n+<dl>\n+  <dt><code><b><em>INVOKEDYNAMIC_STATIC_ARG_CONSTANT_VALUE<\/em><\/b><\/code>:\n+\n+\n+\n+\n+  <\/dt>\n+  <blockquote>\n+    <table border=\"0\">\n+      <tbody>\n+        <tr>\n+          <td><code> int <\/code> <\/td>\n+          <td><code> INTEGER <\/code><\/td>\n+        <\/tr>\n+        <tr>\n+          <td><code> long<\/code> <\/td>\n+          <td><code> [INTEGER|LONG] <\/code><\/td>\n+        <\/tr>\n+        <tr>\n+          <td><code> float <\/code> <\/td>\n+          <td><code> [FLOAT|INTEGER] <\/code><\/td>\n+        <\/tr>\n+        <tr>\n+          <td><code> double <\/code> <\/td>\n+          <td><code> [FLOAT|DOUBLE|INTEGER|LONG] <\/code><\/td>\n+        <\/tr>\n+        <tr>\n+          <td><code> class <\/code> <\/td>\n+          <td><code> CONSTANT_NAME <\/code><\/td>\n+        <\/tr>\n+        <tr>\n+          <td><code> String <\/code> <\/td>\n+          <td><code> CONSTANT_NAME <\/code><\/td>\n+        <\/tr>\n+        <tr>\n+          <td><code> MethodHandle <\/code> <\/td>\n+          <td><code> INVOKESUBTAG:CONSTANT_FIELD <\/code><\/td>\n+        <\/tr>\n+        <tr>\n+          <td><code> MethodType <\/code> <\/td>\n+          <td><code> CONSTANT_NAME <\/code><\/td>\n+        <\/tr>\n+      <\/tbody>\n+    <\/table>\n+  <\/blockquote>\n+<\/dl>\n+<p>\n+<code>INTEGER<\/code>, <code>LONG<\/code>, <code>FLOAT<\/code>, and <code>DOUBLE<\/code>\n+correspond to <code>IntegerLiteral<\/code>\n+and <code>FloatingPointLiteral<\/code> as described in\n+<a\n+ href=\"https:\/\/docs.oracle.com\/javase\/specs\/jls\/se8\/html\/index.html\">The\n+Java\n+Language\n+Specification<\/a>. If a double-word constant (<code>LONG<\/code>\n+or <code>DOUBLE<\/code>) is represented with a single-word value (<code>INTEGER<\/code>\n+or <code>FLOAT<\/code>, respectively), single-word value\n+is simply promoted to double-word, as described in\n+<a\n+ href=\"https:\/\/docs.oracle.com\/javase\/specs\/jls\/se8\/html\/index.html\">The\n+Java\n+Language\n+Specification<\/a>. If floating-point constant (<code>FLOAT<\/code>\n+or <code>DOUBLE<\/code>) is represented with an integral value\n+(<code>INTEGER<\/code> or <code>LONG<\/code>, respectively),\n+the result depends on whether the integral number is preceded with the\n+keyword\n+\"bits\". If \"bits\" is not used, the result is a floating-point number\n+closest in value to the decimal number. If the keyword \"bits\" is used,\n+the floating-point constant takes bits of the integral value without\n+conversion.\n+<\/p>\n+<p>\n+Thus,\n+<\/p>\n+<pre>   <code>float 2;<\/code>\n+<p>means the same as <\/p>\n+   <code>float 2.0f;<\/code>\n+<p>and the same as <\/p>\n+   <code>float bits 0x40000000;<\/code>\n+<p>while <\/p>\n+   <code>float bits 2;<\/code>\n+<p>actually means the same as <\/p>\n+   <code>float bits 0x00000002;<\/code>\n+<p>and the same as<\/p>\n+   <code>float 2.8026e-45f<\/code>\n+<\/pre>\n+<p><\/p>\n+<p>&nbsp;<\/p>\n+<dl>\n+  <dt><code><b><em>CONSTANT_NAME<\/em><\/b><\/code>: <\/dt>\n+  <dd><code> CONSTANT_INDEX<br>\n+EXTERNAL_NAME<\/code> <\/dd>\n+  <dt><code><b><em>EXTERNAL_NAME<\/em><\/b><\/code>: <\/dt>\n+  <dd><code> IDENT STRING<\/code> <\/dd>\n+<\/dl>\n+<p>\n+External names are names of class, method, field, or type, which stay\n+in resulting .class file, and may be represented both by\n+<code>IDENT<\/code> or by <code>STRING<\/code> (which is useful when\n+name contains non-letter characters).\n+<\/p>\n+<dl>\n+  <dt><code><b><em>NAME_AND_TYPE<\/em><\/b><\/code>: <\/dt>\n+  <dd><code>CONSTANT_INDEX<\/code><br>\n+    <code>CONSTANT_NAME:CONSTANT_NAME<\/code> <\/dd>\n+<\/dl>\n+<p>\n+In this second example, the first <code>CONSTANT_NAME<\/code> denotes\n+the name of a field and second denotes its type.\n+<\/p>\n+<dl>\n+  <dt><code><b><em>CONSTANT_FIELD<\/em><\/b><\/code>: <\/dt>\n+  <dd><code> CONSTANT_INDEX<\/code><br>\n+    <code>[CONSTANT_NAME.]NAME_AND_TYPE<\/code> <\/dd>\n+<\/dl>\n+<p>\n+In this third example, <code>CONSTANT_NAME<\/code> denotes to the class\n+of a field. If <code>CONSTANT_NAME<\/code> is omitted, the current\n+class is\n+assumed.\n+<\/p>\n+<hr noshade=\"noshade\" size=\"7\"><a name=\"constant\"><\/a>\n+<h1 class=\"head1\">Constant Declarations<\/h1>\n+<p>\n+Constant declarations are demonstrated in the examples below:\n+<\/p>\n+<pre><br>\tconst #1=int 1234<br>\t    , #2=String \"a string\"<br>\t    , #3=Method get:I<br>\t;<br><\/pre>\n+<dl>\n+  <dt><code><b><em>CONSTANT_DECLARATION<\/em><\/b><\/code>: <\/dt>\n+  <dd><code> const CONSTANT_DECLARATORS ;<\/code> <\/dd>\n+  <dt><code><b><em>CONSTANT_DECLARATORS<\/em><\/b><\/code>: list of <\/dt>\n+  <dd><code>CONSTANT_DECLARATOR<\/code> <\/dd>\n+  <dt><code><b><em>CONSTANT_DECLARATOR<\/em><\/b><\/code>: <\/dt>\n+  <dd><code>CONSTANT_INDEX = TAGGED_CONSTANT_VALUE<\/code> <\/dd>\n+<\/dl>\n+<hr noshade=\"noshade\" size=\"7\">\n+<a name=\"field\"><\/a>\n+<h1 class=\"head1\">Field Variables<\/h1>\n+<dl>\n+  <dt><code><b><em>FIELD_DECLARATION<\/em><\/b><\/code>: <\/dt>\n+  <dd><code>ANNOTATIONS <\/code><code>FIELD_ACCESS Field\n+FIELD_DECLARATORS ;<\/code> <\/dd>\n+  <dt><code><b><em>FIELD_DECLARATORS<\/em><\/b><\/code>: list of <\/dt>\n+  <dd><code>FIELD_DECLARATOR<\/code> <\/dd>\n+  <dt><code><b><em>FIELD_DECLARATOR<\/em><\/b><\/code>: <\/dt>\n+  <dd><code>EXTERNAL_NAME:CONSTANT_NAME [:SIGNATURE] [ = TAGGED_CONSTANT_VALUE ]<\/code><\/dd>\n+  <dt><code><span style=\"font-weight: bold; font-style: italic;\">FIELD_ACCESS<\/span>:\n+list\n+of<\/code><\/dt>\n+  <dd><code>[public|private|protected]<\/code><code>[final]<\/code><code><\/code><code>[static]<\/code><code><\/code><code>[volatile]<\/code><code><\/code><code>[transient]<\/code><code><\/code><code>[synthetic]<\/code><code>[enum]<\/code><\/dd>\n+<\/dl>\n+Example:\n+<pre>\tpublic static Field <br>\t    field1:I = int 1234,<br>\t    field2:\"Ljava\/lang\/String;\",<br>\t    field3:\"Ljava\/util\/List;\":\"Ljava\/util\/List<+Ljava\/lang\/String;>\" <br>\t;<br><br><\/pre>\n+<p>Access bits (public and static) are applied both to field1 and\n+field2.\n+The <code>EXTERNAL_NAME<\/code> denotes the name of the field, <code>CONSTANT_NAME<\/code>\n+denotes its type, <code>TAGGED_CONSTANT_VALUE<\/code>\n+denotes initial value.\n+<\/p>\n+<hr noshade=\"noshade\" size=\"7\">\n+<a name=\"method\"><\/a>\n+<h1 class=\"head1\">Method Declarations<\/h1>\n+<dl>\n+  <dt><code><b><em>METHOD_DECLARATION<\/em><\/b><\/code>: sequence of <\/dt>\n+  <dd><code>ANNOTATIONS <\/code><code>METHOD_ACCESS Method <br>\n+EXTERNAL_NAME:CONSTANT_NAME <br>\n+[THROWS] <br>\n+STACK_SIZE <br>\n+[LOCAL_VAR_SIZE] <br>\n+{ INSTRUCTION_STATEMENT...<br>&nbsp;&nbsp;ANNOTATIONS  }<\/code> <\/dd>\n+<\/dl>\n+<p>\n+The <code>EXTERNAL_NAME<\/code> denotes the name of the method, <code>CONSTANT_NAME<\/code>\n+denotes its type.\n+<\/p>\n+<dl>\n+  <dt><code><span style=\"font-weight: bold; font-style: italic;\">METHOD_ACCESS<\/span>:\n+list\n+of<\/code><\/dt>\n+  <dd><code>[public|private|protected]<\/code><code>[static][final]<\/code><code><\/code><code>[synthetic]<\/code><code><\/code><code>[bridge]<\/code><code><\/code><code>[varargs]<\/code><code><\/code><code>[native][abstract]<\/code><code><\/code><code>[strict]<\/code><code><\/code><code>[synthetic]<\/code><\/dd>\n+<\/dl>\n+<dl>\n+  <dt><code><b><em>THROWS<\/em><\/b><\/code>: <\/dt>\n+  <dd><code>throws EXCEPTIONS<\/code> <\/dd>\n+  <dt><code><b><em>EXCEPTIONS<\/em><\/b><\/code>: list of <\/dt>\n+  <dd><code>CONSTANT_CELL(class)<\/code> <\/dd>\n+<\/dl>\n+<p>\n+The meaning of the <code>THROWS<\/code> clause is the same as in Java\n+Language Specification - it forms Exceptions attribute of a method.\n+Jasm itself does not use this attribute in any way.\n+<\/p>\n+<dl>\n+  <dt><code><b><em>STACK_SIZE<\/em><\/b><\/code>: <\/dt>\n+  <dd><code>stack NUMBER<\/code> <\/dd>\n+<\/dl>\n+<p>\n+The <code>NUMBER<\/code> denotes maximum operand stack size of the\n+method.\n+<\/p>\n+<dl>\n+  <dt><code><b><em>LOCAL_VAR_SIZE<\/em><\/b><\/code>: <\/dt>\n+  <dd><code>locals NUMBER<\/code> <\/dd>\n+<\/dl>\n+<p>\n+The <code>NUMBER<\/code> denotes number of local variables of the\n+method. If omitted, it is calculated by assembler according to the\n+signature of\n+the method and local variable declarations.\n+<\/p>\n+<hr noshade=\"noshade\" size=\"7\">\n+<a name=\"instructions\"><\/a>\n+<h1 class=\"head1\">Instructions<\/h1>\n+<blockquote> <a name=\"vminstructions\"><\/a>\n+  <h2>VM Instructions<\/h2>\n+  <dl>\n+    <dt><code><b><em>INSTRUCTION_STATEMENT<\/em><\/b><\/code>: <\/dt>\n+    <dd><code>[NUMBER] [LABEL:] INSTRUCTION|PSEUDO_INSTRUCTION ;<\/code>\n+    <\/dd>\n+  <\/dl>\n+  <p>Jasm allows for a <code>NUMBER<\/code>\n+(which is ignored) at the beginning of each line. This is allowed in\n+order to remain consistent with the jdis disassembler. Jdis puts line\n+numbers in disassembled code that may be reassembled using Jasm\n+without any additional modifications. <\/p>\n+  <dl>\n+    <dt><code><b><em>INSTRUCTION<\/em><\/b><\/code>: <\/dt>\n+    <dd><code>OPCODE [ARGUMENTS] <\/code> <\/dd>\n+    <dt><code><b><em>ARGUMENTS<\/em><\/b><\/code>: list of <\/dt>\n+    <dd><code>ARGUMENT<\/code> <\/dd>\n+    <dt><code><b><em>ARGUMENT<\/em><\/b><\/code>: <\/dt>\n+    <dd><code>NUMBER LABEL LOCAL_VARIABLE TRAP_IDENT CONSTANT_CELL\n+SWITCHTABLE TYPE<\/code> <\/dd>\n+    <dt><code><b><em>LABEL<\/em><\/b><\/code>: <\/dt>\n+    <dd><code>NUMBER IDENT<\/code> <\/dd>\n+    <dt><code><b><em>LOCAL_VARIABLE<\/em><\/b><\/code>: <\/dt>\n+    <dd><code>NUMBER IDENT<\/code> <\/dd>\n+    <dt><code><b><em>TRAP_IDENT<\/em><\/b><\/code>: <\/dt>\n+    <dd><code>IDENT<\/code> <\/dd>\n+    <dt><code><b><em>TYPE<\/em><\/b><\/code>: <\/dt>\n+    <dd><code>NUMBER boolean byte char int float long double class<\/code>\n+    <\/dd>\n+    <dt><code><b><em>SWITCHTABLE<\/em><\/b><\/code>: <\/dt>\n+    <dd><code>{ [NUMBER:LABEL...] [default:LABEL] }<\/code> <\/dd>\n+  <\/dl>\n+  <p>SWITCHTABLE example: Java_text <\/p>\n+  <pre>     switch (x) {<br>     case 11:<br>\t x=1;<br>\t break;<br>     case 12:<br>\t x=2;<br>\t break;<br>     default:<br>\t x=3;<br>     }<br>\n+  <\/pre>\n+  <p>will be coded in assembler as follows: <\/p>\n+  <pre>     tableswitch  {<br>\t 11: L24;<br>\t 12: L29;<br>\t default: L34<br>     }<br>L24: iconst_1; <br>     istore_1;<br>     goto  L36;<br>L29: iconst_2 ;<br>     istore_1;<br>     goto  L36;<br>L34: iconst_3; <br>     istore_1;<br>L36:    ....<br>\n+  <\/pre>\n+  <p>OPCODE is any mnemocode from the instruction set.\n+If mnemocode needs an ARGUMENT, it cannot be omitted.\n+Moreover, the kind (and number) of the argument(s) must match the kind\n+(and number) required by the mnemocode: <\/p>\n+  <p>\n+  <table style=\"width: 847px; height: 651px;\" border=\"1\">\n+    <tbody>\n+      <tr>\n+        <td>aload, astore, fload, fstore,\n+iload, istore, lload, lstore,\n+dload, dstore, ver, endvar: <\/td>\n+        <td><code>LOCAL_VARIABLE<\/code> <\/td>\n+      <\/tr>\n+      <tr>\n+        <td>iinc: <\/td>\n+        <td><code>LOCAL_VARIABLE, NUMBER<\/code> <\/td>\n+      <\/tr>\n+      <tr>\n+        <td>sipush, bipush, bytecode: <\/td>\n+        <td><code>NUMBER<\/code> <\/td>\n+      <\/tr>\n+      <tr>\n+        <td>tableswitch, lookupswitch: <\/td>\n+        <td><code>SWITCHTABLE<\/code> <\/td>\n+      <\/tr>\n+      <tr>\n+        <td>newarray: <\/td>\n+        <td><code>TYPE<\/code> <\/td>\n+      <\/tr>\n+      <tr>\n+        <td>jsr, goto,\n+ifeq, ifge, ifgt, ifle, iflt, ifne,\n+if_icmpeq, if_icmpne, if_icmpge,\n+if_icmpgt, if_icmple, if_icmplt,\n+if_acmpeq, if_acmpne, ifnull, ifnonnull,\n+try, endtry: <\/td>\n+        <td><code>LABEL<\/code> <\/td>\n+      <\/tr>\n+      <tr>\n+        <td>jsr_w, goto_w: <\/td>\n+        <td><code>LABEL<\/code> <\/td>\n+      <\/tr>\n+      <tr>\n+        <td>ldc_w, ldc2_w, ldc: <\/td>\n+        <td><code>CONSTANT_CELL<\/code> <\/td>\n+      <\/tr>\n+      <tr>\n+        <td>new, anewarray, instanceof, checkcast, <\/td>\n+        <td><code>CONSTANT_CELL(class)<\/code> <\/td>\n+      <\/tr>\n+      <tr>\n+        <td style=\"vertical-align: top;\">multianewarray<\/td>\n+        <td style=\"vertical-align: top;\"><code>NUMBER, <\/code><code>CONSTANT_CELL(class)<\/code>\n+        <\/td>\n+      <\/tr>\n+      <tr>\n+        <td>putstatic, getstatic, putfield, getfield: <\/td>\n+        <td><code>CONSTANT_CELL(Field)<\/code> <\/td>\n+      <\/tr>\n+      <tr>\n+        <td>invokevirtual, invokenonvirtual, invokestatic: <\/td>\n+        <td><code>CONSTANT_CELL(Method)<\/code> <\/td>\n+      <\/tr>\n+      <tr>\n+        <td>invokeinterface: <\/td>\n+        <td><code>NUMBER, CONSTANT_CELL(Method)<\/code> <\/td>\n+      <\/tr>\n+      <tr>\n+        <td>invokedynamic: <\/td>\n+        <td><code>CONSTANT_CELL(InvokeDynamic)<\/code> <\/td>\n+      <\/tr>\n+      <tr>\n+        <td style=\"vertical-align: top;\">&nbsp;aaload,&nbsp;\n+aastore,&nbsp; aconst_null,&nbsp; aload_0,&nbsp; aload_1,&nbsp;\n+aload_2,&nbsp; aload_3,&nbsp; aload_w ,&nbsp; areturn,&nbsp;\n+arraylength,&nbsp; astore_0,&nbsp; astore_1,&nbsp; astore_2,&nbsp;\n+astore_3,&nbsp; astore_w,&nbsp; athrow,&nbsp; baload,&nbsp;\n+bastore,&nbsp; caload,&nbsp; castore,&nbsp; d2f,&nbsp; d2i,&nbsp;\n+d2l,&nbsp; dadd,&nbsp; daload,&nbsp; dastore,&nbsp; dcmpg,&nbsp;\n+dcmpl,&nbsp; dconst_0,&nbsp; dconst_1,&nbsp; ddiv,&nbsp; dead,&nbsp;\n+dload_0,&nbsp; dload_1,&nbsp; dload_2,&nbsp; dload_3,&nbsp; dload_w\n+,&nbsp; dmul,&nbsp; dneg,&nbsp; drem,&nbsp; dreturn,&nbsp;\n+dstore_0,&nbsp; dstore_1,&nbsp; dstore_2,&nbsp; dstore_3,&nbsp;\n+dstore_w,&nbsp; dsub,&nbsp; dup,&nbsp; dup2,&nbsp; dup2_x1,&nbsp;\n+dup2_x2,&nbsp; dup_x1,&nbsp; dup_x2,&nbsp; f2d,&nbsp; f2i,&nbsp;\n+f2l,&nbsp; fadd,&nbsp; faload,&nbsp; fastore,&nbsp; fcmpg,&nbsp;\n+fcmpl,&nbsp; fconst_0,&nbsp; fconst_1,&nbsp; fconst_2,&nbsp;\n+fdiv,&nbsp; fload_0,&nbsp; fload_1,&nbsp; fload_2,&nbsp; fload_3,&nbsp;\n+fload_w,&nbsp; fmul,&nbsp; fneg,&nbsp; frem,&nbsp; freturn ,&nbsp;\n+fstore_0,&nbsp; fstore_1,&nbsp; fstore_2,&nbsp; fstore_3,&nbsp;\n+fstore_w,&nbsp; fsub ,&nbsp; i2b,&nbsp; i2c,&nbsp; i2d,&nbsp;\n+i2f,&nbsp; i2l,&nbsp; i2s,&nbsp; iadd,&nbsp; iaload,&nbsp; iand,&nbsp;\n+iastore,&nbsp; iconst_0,&nbsp; iconst_1,&nbsp; iconst_2,&nbsp;\n+iconst_3,&nbsp; iconst_4,&nbsp; iconst_5,&nbsp; iconst_m1,&nbsp;\n+idiv,&nbsp; iinc_w,&nbsp; iload_0,&nbsp; iload_1,&nbsp; iload_2,&nbsp;\n+iload_3,&nbsp; iload_w,&nbsp; imul,&nbsp; ineg,&nbsp; int2byte,&nbsp;\n+int2char,&nbsp; int2short,&nbsp; ior,&nbsp; irem,&nbsp; ireturn,&nbsp;\n+ishl,&nbsp; ishr,&nbsp; istore_0,&nbsp; istore_1,&nbsp; istore_2,&nbsp;\n+istore_3,&nbsp; istore_w,&nbsp; isub,&nbsp; iushr,&nbsp; ixor,&nbsp;\n+l2d,&nbsp; l2f,&nbsp; l2i,&nbsp; label,&nbsp; ladd,&nbsp; laload,&nbsp;\n+land,&nbsp; lastore,&nbsp; lcmp,&nbsp; lconst_0,&nbsp; lconst_1,&nbsp;\n+ldiv,&nbsp; lload_0,&nbsp; lload_1,&nbsp; lload_2,&nbsp; lload_3,&nbsp;\n+lload_w,&nbsp; lmul,&nbsp; lneg,&nbsp; lor,&nbsp; lrem,&nbsp;\n+lreturn,&nbsp; lshl,&nbsp; lshr,&nbsp; lstore_0,&nbsp; lstore_1,&nbsp;\n+lstore_2,&nbsp; lstore_3,&nbsp; lstore_w,&nbsp; lsub,&nbsp;\n+lushr,&nbsp; lxor,&nbsp; monitorenter,&nbsp; monitorexit,&nbsp;\n+nonpriv,&nbsp; nop,&nbsp; pop,&nbsp; pop2,&nbsp; priv,&nbsp; ret,&nbsp;\n+return,&nbsp; ret_w,&nbsp; saload,&nbsp; sastore,&nbsp;\n+swap,&nbsp;&nbsp; wide<br>\n+        <\/td>\n+        <td style=\"vertical-align: top;\"><code>&lt;No Arguments&gt; <\/code><\/td>\n+      <\/tr>\n+    <\/tbody>\n+  <\/table>\n+  <\/p>\n+  <a name=\"invokedynamicinstructions\"><\/a>\n+  <h2>InvokeDynamic Instructions<\/h2>\n+  <p> <em>InvokeDynamic instructions<\/em> are instructions that allow\n+dynamic binding of methods to a call site. These instructions in JASM\n+form are rather complex, and the JASM assembler does some of the\n+necessary work to create a <em>BootstrapMethods<\/em> attribute for\n+entries of binding methods. <\/p>\n+  <blockquote> <code><\/code>\n+    <pre>\n+class Test\n+      version 51:0\n+{\n+    Method m:\"()V\"\n+      stack 0 locals 1\n+    {\n+       invokedynamic InvokeDynamic REF_invokeSpecial:bsmName:\"()V\"   \/\/ information about bootstrap method\n+                                                    :methName:\"(I)I\" \/\/ dynamic call-site name (\"methName\") plus the argument and return types of the call (\"(I)I\")\n+                                                     int 1, long 2l; \/\/ optional sequence of additional static arguments to the bootstrap method (ldc-type constants)\n+    }\n+} \/\/ end Class Test<\/pre>\n+  <\/blockquote>\n+  <p> This JASM code has an <em>invokedynamic<\/em> instruction of the\n+form: <b><em> invokedynamic InvokeDynamic (CONSTANT_CELL(INVOKEDYNAMIC))<\/em><\/b>\n+where the INVOKEDYNAMIC constant is represented as <a\n+ href=\"#invokedynamicconstant\">specified<\/a> <br>\n+  <br>\n+(i.e. <em> invokedynamic InvokeDynamic INVOKESUBTAG : CONSTANT_FIELD\n+(bootstrapmethod signature) : NAME_AND_TYPE (CallSite) [Arguments\n+(Optional)]<\/em> ). <\/p>\n+  <p> The JASM assembler creates the appropriate constant entries and\n+entries into the BootstrapMethods attribute in a resulting class file. <\/p>\n+  <p>You can also create InvokeDynamic constants and BootstrapMethods\n+explicitly: <\/p>\n+  <blockquote> <code><\/code>\n+    <pre>\t#22; \/\/class Test3<br>\tversion 51:0<br>{<br><br>const #1 = InvokeDynamic\t0:#11;\t\/\/  REF_invokeSpecial:Test3.bsmName:\"()V\":name:\"(I)I\" int 1, long 2l<br>const #2 = Asciz\t\"Test3\";<br>const #3 = long\t2l;<br>const #5 = class\t#6;\t\/\/  java\/lang\/Object<br>const #6 = Asciz\t\"java\/lang\/Object\";<br>const #7 = Asciz\t\"name\";<br>const #8 = int\t1;<br>const #9 = Asciz\t\"SourceFile\";<br>const #10 = Asciz\t\"Test3.jasm\";<br>const #11 = NameAndType\t#7:#21;\t\/\/  name:\"(I)I\"<br>const #12 = Asciz\t\"()V\";<br>const #13 = Method\t#22.#17;\t\/\/  Test3.bsmName:\"()V\"<br>const #14 = Asciz\t\"Code\";<br>const #15 = Asciz\t\"m\";<br>const #16 = Asciz\t\"BootstrapMethods\";<br>const #17 = NameAndType\t#20:#12;\t\/\/  bsmName:\"()V\"<br>const #18 = Asciz\t\"LineNumberTable\";<br>const #19 = MethodHandle\t7:#13;\t\/\/  REF_invokeSpecial:Test3.bsmName:\"()V\"<br>const #20 = Asciz\t\"bsmName\";<br>const #21 = Asciz\t\"(I)I\";<br>const #22 = class\t#2;\t\/\/  Test3<br>const #23 = class\t#6;\t\/\/  java\/lang\/Object<br><br><br><br>Method #15:#12<br>\tstack 0 locals 1<br>{<br>\t0:\tinvokedynamic InvokeDynamic\t#1; \/\/\tInvokeDynamic REF_invokeSpecial:Test3.bsmName:\"()V\":name:\"(I)I\" int 1, long 2l;<br>}<br><br>BootstrapMethod #19 #8 #3;<br><br>} \/\/ end Class Test3<br><\/pre>\n+  <\/blockquote>\n+  <p>In this example, <code>const #1 = InvokeDynamic 0:#11;<\/code> is\n+the\n+InvokeDynamic constant that refers to BootstrapMethod at index '0' in\n+the BootstrapMethods Attribute (<code>BootstrapMethod #19 #8\n+#3;<\/code> which refers to the <em>MethodHandle<\/em> at const #19,\n+plus 2 other static args (at const #8 and const #3). <\/p>\n+<\/blockquote>\n+<a name=\"pseudoinstructions\"><\/a>\n+<h2>Pseudo Instructions<\/h2>\n+<blockquote>\n+  <p>Pseudo instructions are 'assembler\n+directives', and not really instructions (in the VM sense) They\n+typically come in two forms: Code-generating Pseudo-Instructions,\n+and Attribute-Generating Pseudo-Instructions. <\/p>\n+  <a name=\"codepseudo\"><\/a>\n+  <h3>Code-Generating Pseudo-Instructions<\/h3>\n+The <i>bytecode<\/i> directive\n+instructs the assembler to put a collection of raw bytes into the code\n+attribute of a methodK<br>\n+  <br>\n+  <dl>\n+    <dt><code><b><em>bytecode NUMBERS<\/em><\/b><\/code> <\/dt>\n+    <dd>NUMBERS is list of NUMBERs (divided by COMMA). <br>\n+Insert bytes in place of the instruction. May have any number\n+of numeric arguments, each of them to be converted into a byte and\n+inserted in method's code. <\/dd>\n+  <\/dl>\n+  <a name=\"atrpseudo\"><\/a>\n+  <h3>Attribute-Generating Pseudo-Instructions<\/h3>\n+  <p>The rest of pseudo_instructions do not produce any bytecodes, and\n+are\n+used to form tables: local variable table, exception table,<br>\n+Stack Maps, and Stack Map Frames. Line Number Tables can not be\n+specified, but they are constructed\n+by the assembler itself. <\/p>\n+  <blockquote>\n+    <h4>Local Variable Table Attribute Generation<\/h4>\n+    <dl>\n+      <dt><code><b><em>var LOCAL_VARIABLE<\/em><\/b><\/code> <\/dt>\n+      <dd>Starts local variable range <\/dd>\n+      <dt><code><b><em>endvar LOCAL_VARIABLE<\/em><\/b><\/code> <\/dt>\n+      <dd>Ends local variable range. LOCAL_VARIABLE means name or index\n+of local variable table entry. <\/dd>\n+    <\/dl>\n+    <p><u>Example<\/u>:<\/p>\n+    <pre>    static void main (String[] args) {<br>\tTester inst = new Tester();<br>        inst.callSub();<br>    }<br><br><\/pre>\n+    <p>will be coded in assembler as\n+follows: <\/p>\n+    <blockquote>\n+      <blockquote>\n+        <blockquote>\n+          <pre>static Method #8:#9\t \/\/ main:\"([Ljava\/lang\/String;)V\"<br>\tstack 2 locals 2<br>{<br><span\n+ style=\"font-style: italic; font-weight: bold;\">4\t\tvar 0; \/\/ args:\"[Ljava\/lang\/String;\"<\/span><br>\t0:\tnew\t#1; \/\/\tclass Tester;<br>\t3:\tdup;<br>\t4:\tinvokespecial\t#2; \/\/\tMethod \"&lt;init&gt;\":\"()V\";<br>\t7:\tastore_1;<br><span\n+ style=\"font-style: italic; font-weight: bold;\">6\t\tvar 1; \/\/ inst:\"LTester;\"<\/span><br>\t8:\taload_1;<br>\t9:\tinvokevirtual\t#3; \/\/\tMethod callSub:\"()V\";<br>7\t12:\treturn;<br><span\n+ style=\"font-style: italic; font-weight: bold;\">\t\tendvar 0, 1;<\/span><br>\t<br>}<br><\/pre>\n+        <\/blockquote>\n+      <\/blockquote>\n+    <\/blockquote>\n+    <h4>Exception Table Attribute Generation<\/h4>\n+    <p>To generate exception table, three pseudo-instructions are used.\n+    <\/p>\n+    <blockquote>\n+      <dl>\n+        <dt><code><b><em>try TRAP_IDENT<\/em><\/b><\/code> <\/dt>\n+        <dd>Starts rangePC range <\/dd>\n+        <dt><code><b><em>endtry TRAP_IDENT<\/em><\/b><\/code> <\/dt>\n+        <dd>Ends rangePC range <\/dd>\n+        <dt><code><b><em>catch TRAP_IDENT CONSTANT_CELL(class)<\/em><\/b><\/code>\n+        <\/dt>\n+        <dd>Starts exception handler. <\/dd>\n+      <\/dl>\n+    <\/blockquote>\n+    <p> <code>TRAP_IDENT<\/code> represents the\n+name or number of an exception table entry. <code>CONSTANT_CELL<\/code>\n+in \"catch\" pseudo_instruction means\n+catch\n+type. Each exception table entry contains 4 values:start-pc, end-pc,\n+catch-pc, catch-type. In jasm, each entry is denoted with some (local)\n+identifier, as an example: <code>TRAP_IDENT<\/code>. <\/p>\n+    <p>To set start-pc, place \"try TRAP_IDENT\"\n+before the instruction with the desirable program counter.\n+Similarly, use \"endtry TRAP_IDENT\" for\n+end-pc and \"catch TRAP_IDENT, catch-type\" for catch-pc and catch-type\n+(which is usually a constant pool reference).\n+Try, endtry, and catch pseudoinstructions may be placed in any order.\n+The order of entries in exception table is significant (see JVM\n+specification). However, the only way to control this order is to\n+place catch-clauses in appropriate\n+textual order: assembler adds an entry in the exception table each\n+time it encounters a catch-clause. <\/p>\n+    <p>Example: <\/p>\n+    <pre>     try {<br>\t     try {<br>\t\t \tthrow new Exception(\"EXC\");<br>\t     } catch (NullPointerException e){<br>\t\t \tthrow e;<br>\t     } catch (Exception e){<br>\t\t \tthrow e;<br>\t     }<br>\t } catch (Throwable e){<br>\t\t throw e;<br>\t }<br><\/pre>\n+    <p>will be coded in assembler as follows: <\/p>\n+    <blockquote>\n+      <pre><br><span style=\"font-style: italic; font-weight: bold;\">\ttry R1, R2; \/\/ single \"try\" or \"endtry\" can start several regions<\/span><br>\t\tnew\tclass java\/lang\/Exception;<br>\t\tdup;<br>\t\tldc\tString \"EXC\";<br>\t\tinvokespecial java\/lang\/Exception.&lt;init&gt;:\"(Ljava\/lang\/String;)V\";<br>\t\tathrow;<br><span\n+ style=\"font-style: italic; font-weight: bold;\">\tendtry R1;<\/span><br><span\n+ style=\"font-style: italic; font-weight: bold;\">\tcatch R1 java\/lang\/NullPointerException; \/\/ only one \"catch\" per entry allowed<\/span><br>\t\tastore_1;<br>\t\taload_1;<br>\t\tathrow;<br><span\n+ style=\"font-style: italic; font-weight: bold;\">\tcatch R1 java\/lang\/Exception; \/\/ same region (R1) can appear in different catches<\/span><br>\t\tastore_1;<br>\t\taload_1;<br>\t\tathrow;<br><span\n+ style=\"font-style: italic; font-weight: bold;\">\tendtry R2;<\/span><br><span\n+ style=\"font-style: italic; font-weight: bold;\">\tcatch R2 java\/lang\/Throwable;<\/span><br>\t\tastore_1;<br>\t\taload_1;<br>\t\tathrow;<br>\n+      <\/pre>\n+    <\/blockquote>\n+    <h4>StackMap Table Attribute Generation<\/h4>\n+    <p>Stack Maps are denoted by the pseudo-op opcode <i>stack_map,\n+and they can be identified by three basic items: <\/i><\/p>\n+    <dl>\n+      <dt><code><b><em>StackMapStatement = <\/em><\/b><\/code>stack_map <code><b><em>(stackMap_Item_MapType\n+|stackMap_Item_Object\n+|\n+stackMap_Item_NewObject)\n+\n+        <\/em><\/b><\/code><\/dt>\n+    <\/dl>\n+    <code><b><em>stackMap_Item_MapType =\n+(<\/em><\/b><\/code>bogus | int | float | double | long | null | this | CP<code><b><em>)\n+\n+\n+\n+\n+    <\/em><\/b><\/code> <br>\n+    <br>\n+    <code><b><em>stackMap_Item_Object = CONSTANT_CELL_CLASS<\/em><\/b><\/code>\n+    <br>\n+    <code><b><em>stackMap_Item_NewObject = <\/em><\/b><\/code>at<code><b><em>\n+LABEL <\/em><\/b><\/code>\n+    <p> All stack_map directives are collected\n+by the assembler, and are used to create a StackMap Table attribute. <\/p>\n+    <span style=\"text-decoration: underline;\">Example 1 (MapType):<\/span>\n+    <br>\n+    <pre>public Method \"&lt;init&gt;\":\"()V\"<br>&nbsp;&nbsp;&nbsp; stack 1 locals 1<br>{<br> &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; aload_0;<br> &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; invokespecial&nbsp;&nbsp;&nbsp; Method java\/lang\/Object.\"&lt;init&gt;\":\"()V\";<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; return;<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; stack_frame_type full;<br><span\n+ style=\"font-style: italic; font-weight: bold;\">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; stack_map bogus;<\/span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br>}<\/pre>\n+    <br>\n+    <u>Example 2 (Object):<\/u><br>\n+    <br>\n+    <span style=\"font-family: monospace;\">public Method\n+\"&lt;init&gt;\":\"()V\"<br>\n+&nbsp;&nbsp; &nbsp;stack 2 locals 1<br>\n+{<br>\n+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br>\n+    <i><b>&nbsp;&nbsp;&nbsp;\n+&nbsp;&nbsp;\n+&nbsp;stack_map\n+class\n+java\/lang\/Object;<\/b><\/i><br>\n+&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; nop;<br>\n+&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; return;<br>\n+}<br>\n+    <\/span><br>\n+    <u>Example 3 (NewObject):<\/u><br>\n+    <br>\n+    <span style=\"font-family: monospace;\">public Method\n+\"&lt;init&gt;\":\"()V\"<br>\n+&nbsp;&nbsp; &nbsp;stack 2 locals 1<br>\n+{<br>\n+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br>\n+    <i><b>&nbsp;&nbsp;\n+&nbsp;&nbsp;&nbsp;&nbsp; stack_map at L5;<\/b><\/i><br>\n+&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; nop;<br>\n+&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; return;<br>\n+}<br>\n+    <br>\n+    <\/span><br>\n+    <h4>StackFrameType Table Attribute Generation<\/h4>\n+    <p>StackFrameTypes are similar assembler directives as StackMap.\n+These directives can appear anywhere in\n+the code, and the assembler will collect them to produce a\n+StackFrameType attribute. <\/p>\n+    <dl>\n+      <dt><code><em><b>StackFrameStatement = <\/b><\/em><b><\/b><\/code>stack_frame_type<code><b><em>\n+frame_type<\/em><\/b><\/code><\/dt>\n+    <\/dl>\n+    <code><b><em>frame_type = (<\/em><\/b><\/code>\n+same\n+|\n+stack1\n+|\n+stack1_ex\n+|\n+chop1\n+|\n+chop2\n+|\n+chop3 | same_ex | append | full <code><b><em>)<\/em><\/b><\/code> <br>\n+    <br>\n+    <u>Example 1 (full <i>stack frame type<\/i>):<\/u><br>\n+    <pre>public Method \"&lt;init&gt;\":\"()V\"<br>&nbsp;&nbsp;&nbsp; stack 1 locals 1<br>{<br> &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; aload_0;<br> &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; invokespecial&nbsp;&nbsp;&nbsp; Method java\/lang\/Object.\"&lt;init&gt;\":\"()V\";<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; return;<br><i><b>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; stack_frame_type full;<\/b><\/i><br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; stack_map bogus;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br>}<\/pre>\n+    <u>Example 2 (append, chop2, and same <i>stack frame types<\/i>):<\/u><br>\n+    <pre>public Method foo:\"(Z)V\"<br>\tstack 2 locals 5<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br>\t\tiload_2;<br>\t\ticonst_2;<br>\t\tif_icmpge\tL30;<br><span\n+ style=\"font-style: italic; font-weight: bold;\">\tL27:\tstack_frame_type append;<\/span><br>\t\tlocals_map int, int;<br>\t\ticonst_2;<br>\t\tistore\t4;<br><span\n+ style=\"font-style: italic; font-weight: bold;\">\tL30:\tstack_frame_type chop2;<\/span><br>\t\tgoto\tL9;<br><span\n+ style=\"font-style: italic; font-weight: bold;\">\tL33:\tstack_frame_type same;<\/span><br>\t\tgetstatic\tField java\/lang\/System.out:\"Ljava\/io\/PrintStream;\";<br>\t\tldc\tString \"Chop2 attribute test\";<br>\t\tinvokevirtual\tMethod java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\";<br>\t\treturn;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br>}<\/pre>\n+    <h4>LocalsMap Table <\/h4>\n+    <p> Locals Maps are typically associated with a <i>stack_frame_type<\/i>,\n+and\n+are\n+accumulated\n+per\n+stack\n+frame. They typically follow a <i>stack_frame_type<\/i>\n+directive. <\/p>\n+    <dl>\n+      <dt><code><em><b>LocalsMapStatement = <\/b><\/em><b><\/b><\/code>locals_map<code><b><em>\n+locals_type (, locals_type\n+)*<\/em><\/b><\/code><\/dt>\n+    <\/dl>\n+    <code><b><em>locals_type =\n+stackMap_Item_MapType\n+|\n+CONSTANT_CELL_CLASS <\/em><\/b><\/code> <br>\n+    <br>\n+    <u>Example (a <i>locals map<\/i> specifying 2 ints):<\/u>\n+    <pre>public Method foo:\"(Z)V\"<br>\tstack 2 locals 5<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br>\t\tiload_2;<br>\t\ticonst_2;<br>\t\tif_icmpge\tL30;<br>\tL27:\tstack_frame_type append;<br><span\n+ style=\"font-style: italic; font-weight: bold;\">\t\tlocals_map int, int;<\/span><br>\t\ticonst_2;<br>\t\tistore\t4;<br>\tL30:\tstack_frame_type chop2;<br>\t\tgoto\tL9;<br>\tL33:\tstack_frame_type same;<br>\t\tgetstatic\tField java\/lang\/System.out:\"Ljava\/io\/PrintStream;\";<br>\t\tldc\tString \"Chop2 attribute test\";<br>\t\tinvokevirtual\tMethod java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\";<br>\t\treturn;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br>}<\/pre>\n+  <\/blockquote>\n+<\/blockquote>\n+<hr noshade=\"noshade\" size=\"7\"><a name=\"innercl\"><\/a>\n+<h1 class=\"head1\">Inner Class Declarations<\/h1>\n+<dl>\n+  <dt><code><b><em>INNER_CLASS_DECLARATIONS<\/em><\/b><\/code>: list of <\/dt>\n+  <dd><code>INNER_CLASS_DECLARATION<\/code> <\/dd>\n+  <dt><code><b><em>INNER_CLASS_DECLARATION<\/em><\/b><\/code>: <\/dt>\n+  <dd><code>INNER_CLASS_ACCESS <b>InnerClass<\/b>\n+[INNER_CLASS_NAME<b>=<\/b>]?\n+INNER_CLASS_INFO\n+[<b>of<\/b> OUTER_CLASS_INFO]? ;<\/code> <\/dd>\n+  <dt><code><b><em>INNER_CLASS_NAME<\/em><\/b><\/code>: <\/dt>\n+  <dd><code>IDENT | CPX_name<\/code> <\/dd>\n+  <dt><code><b><em>INNER_CLASS_INFO<\/em><\/b><\/code>: <\/dt>\n+  <dd><code>CONSTANT_CELL(class)&nbsp;<\/code> <\/dd>\n+  <dt><code><b><em>OUTER_CLASS_INFO<\/em><\/b><\/code>: <\/dt>\n+  <dd><code>CONSTANT_CELL(class)<\/code><\/dd>\n+  <dt><code><b><i>INNER_CLASS_ACCESS<\/i><\/b>: list of<\/code><\/dt>\n+  <dd><code>[public|protected|private][static][final][interface][abstract][synthetic][annotation][enum]<\/code><\/dd>\n+<\/dl>\n+Example:\n+<pre>    InnerClass InCl=class test$InCl of class test;<\/pre>\n+<p> &nbsp; <\/p>\n+<hr noshade=\"noshade\" size=\"7\"><a name=\"annots\"><\/a>\n+<h1 class=\"head1\">Annotation Declarations<\/h1>\n+<a name=\"memberannots\"><\/a>\n+<h2 class=\"head2\">Member Annotations<\/h2>\n+<p>\n+Member annotations are a subset of the basic annotations support\n+provided in JDK 5.0 (1.5). These are annotations that\n+ornament Packages, Classes, and Members either visibly (accessible at\n+runtime) or invisibly (not accessible at\n+runtime). In JASM, visible annotations are denoted by the token <b>@<\/b>,\n+while\n+invisible\n+annotations\n+are\n+denoted\n+by the token <b>@-<\/b>.\n+<\/p>\n+<h4 class=\"head4\"><u>Synopsis<\/u><\/h4>\n+<dl>\n+  <dt><code><b><em>ANNOTATIONS<\/em><\/b><\/code>: <br>\n+  <\/dt>\n+  <dd><code>[ANNOTATION_DECLARATION]+<\/code>; <\/dd>\n+  <dt><code><b><em>ANNOTATION_DECLARATION<\/em><\/b><\/code>: <\/dt>\n+  <dd><code><b>@+<\/b>|<b>@-<\/b> ANNOTATION_NAME\n+[ANNOTATION_VALUE_DECLARATIONS]<\/code><\/dd>\n+<\/dl>\n+<p>\n+The '<b>@+<\/b>' token identifies a\n+Runtime Visible Annotation, where the '<b>@-'\n+token identifies a Runtime Invisible Annotation.\n+<\/b><\/p>\n+<dl>\n+  <dt><code><b><em>ANNOTATION_NAME<\/em><\/b><\/code>: <\/dt>\n+  <dd><code>IDENT<\/code> <\/dd>\n+  <dt><code><b><em>ANNOTATION_VALUE_DECLARATIONS<\/em><\/b><\/code>: list\n+of (comma separated)<br>\n+  <\/dt>\n+  <dd><code>ANNOTATION_VALUE_DECLARATION<\/code> <\/dd>\n+  <dt><code><b><em>ANNOTATION_VALUE_DECLARATION<\/em><\/b><\/code>: <\/dt>\n+  <dd><code>[ANNOTATION_VALUE_IDENT=] [ANNOTATION_VALUE]<\/code><\/dd>\n+  <dt><code><b><em>ANNOTATION_VALUE_IDENT<\/em><\/b><\/code>: <\/dt>\n+  <dd><code>IDENT<\/code> <\/dd>\n+  <dt><code><b><em>ANNOTATION_VALUE<\/em><\/b><\/code>: <\/dt>\n+  <dd><code>ANNOTATION_VALUE_PRIMITIVE | Array of\n+ANNOTATION_VALUE_PRIMITIVE<\/code> <\/dd>\n+  <dt><code><b><em>ANNOTATION_VALUE_PRIMITIVE<\/em><\/b><\/code>: <\/dt>\n+  <dd><code>PRIMITIVE_TYPE | STRING | CLASS | ENUM |\n+ANNOTATION_DECLARATION<\/code><\/dd>\n+<\/dl>\n+<dl>\n+  <dt><code><b><em>CLASS<\/em><\/b><\/code>: <\/dt>\n+  <dd><code><b>class<\/b> CONSTANT_CELL(class)<\/code> <\/dd>\n+<\/dl>\n+<dl>\n+  <dt><code><b><em>ENUM<\/em><\/b><\/code>: <\/dt>\n+  <dd><code><b>enum CONSTANT_CELL(class) CONSTANT_CELL(string) (where\n+string is Enum type name)<\/b><\/code> <\/dd>\n+<\/dl>\n+<dl>\n+  <dt><code><b><em>PRIMITIVE_TYPE<\/em><\/b><\/code>: <\/dt>\n+  <dd><code>BOOLEAN | BYTE | CHAR | SHORT | INTEGER | LONG | FLOAT |\n+DOUBLE<\/code><\/dd>\n+<\/dl>\n+<b><i><u>Note<\/u><\/i><\/b>\n+<br>\n+&nbsp;&nbsp;&nbsp; Types (Boolean, Byte, Char, and Short) are\n+normalized into Integer's within the constant pool.<br>\n+&nbsp;&nbsp;&nbsp; Annotation values with these types may be identified\n+with a keyword in front of an integer value.<br>\n+<br>\n+&nbsp;&nbsp;&nbsp;&nbsp; eg.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>boolean<\/b>\n+true (or: boolean 1)<br>\n+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n+<b>byte<\/b> 20<br>\n+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n+<b>char<\/b> 97<br>\n+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n+<b>short<\/b> 2130<br>\n+<br>\n+&nbsp;&nbsp;&nbsp; Other primitive types are parsed according to normal\n+prefix and suffix\n+conventions <br>\n+&nbsp;&nbsp;&nbsp;\n+(eg. Double = xxx.x<b>d<\/b>, Float = xxx.x<b>f<\/b>, Long = xxx<b>L<\/b>).&nbsp;\n+<br>\n+&nbsp;&nbsp;&nbsp; Strings are identified and delimited by '\"'\n+(quotation marks).<br>\n+<br>\n+&nbsp;&nbsp;\n+Keywords '<b>class<\/b>' and '<b>enum<\/b>' identify those annotation\n+types explicitly. Values within classes and enums may<br>\n+&nbsp;&nbsp; either be identifiers (strings) or Constant Pool IDs.<br>\n+<br>\n+&nbsp;&nbsp; Annotations specified as the value of an Annotation field\n+are identified by the JASM annotation keywords '<b>@+<\/b>' and '<b>@-<\/b>'.<br>\n+<br>\n+&nbsp;&nbsp;\n+Arrays are delimited by '{' and '}' marks, with individual elements\n+delimited by ',' (comma).<br>\n+<h4 class=\"head4\"><u>Examples<\/u><\/h4>\n+<div style=\"margin-left: 40px;\"><u>Example 1 (Class Annotation, Visible)<\/u><br>\n+  <pre>@+ClassPreamble { <br>     author = \"John Doe\", <br>     date = \"3\/17\/2002\", <br>     currentRevision = 6, <br>     lastModified = \"4\/12\/2004\", <br>     lastModifiedBy = \"Jane Doe\", <br>     reviewers = {<br>        \"Alice\",<br>        \"Bob\",<br>        \"Cindy\"}<br>}<br><\/pre>\n+  <pre>super public class MyClass<br>\tversion 50:0<br>{<br>&nbsp;...<\/pre>\n+  <br>\n+<\/div>\n+<div style=\"margin-left: 40px;\"><span\n+ style=\"text-decoration: underline;\">Example 2 (Field Annotation,\n+Invisible)<\/span><br>\n+<br>\n+<pre>@-FieldPreamble {<br>    &nbsp;author = \"Mustafa\", <br>     date = \"3\/17\/2009\", <br>     currentRevision = 4<br>}<br>Field foo:I;<br><\/pre>\n+...<br>\n+<br>\n+<br>\n+<span style=\"text-decoration: underline;\">Example 3 (Field Annotation,\n+All subtypes)<\/span><br>\n+<br>\n+<pre><br>@+FieldPreamble { <br>\tboolAnnot      = boolean 1, \t\t\t\t\t\/\/ Boolean<br>\tcharBear       = char 97, \t\t\t\t\t\/\/ Char<br>\tsharkByte      = byte 17, \t\t\t\t\t\/\/ Byte<br>\tshortCircuit   = short 4386,\t\t\t\t\t\/\/ Short <br>\tintegerHead    = 42,\t\t\t\t\t\t\/\/ Int <br>\tlongJohnSilver = 55l,\t\t\t\t\t\t\/\/ Long <br>\tfloatBoat      = 1.0f,\t\t\t\t\t\t\/\/ Float <br>\tdoubleDip      = 10.0d,\t\t\t\t\t\t\/\/ Double <br>\tstringBeans    = \"foo\",\t\t\t\t\t\t\/\/ String <br>\tseverity       = enum FieldPreamble$Severity IMPORTANT,   \t\/\/ Enum<br>\tclassAnnot     = class FieldPreamble$FooBall,\t\t\t\/\/ Class<br>\ttm = @+Trademark { description = \"embedded\", owner = \"ktl\"}\t\/\/ Annotation<br>}<br>Field foo:I;<br><\/pre>\n+...<br>\n+<\/div>\n+<div style=\"margin-left: 40px;\"><u>Example 4 (Module Annotation, Visible)<\/u><br>\n+  <pre>@+java\/lang\/Deprecated { <br>     since = \"9\", <br>     forRemoval = boolean true <br>}<\/pre>\n+  <pre>moduleContent my.moduleContent<br>\tversion 53:0<br>{<br>&nbsp;...<\/pre>\n+  <br>\n+<\/div>\n+<p>\n+Note:<br>\n+&nbsp;JASM does not enforce the annotation value declarations like a\n+compiler would.&nbsp; It only checks to see that an annotation\n+structure is well-formed.<br>\n+<\/p>\n+<h2 class=\"head2\">Type Annotations<\/h2>\n+<p>\n+Member annotations are a subset of the basic annotations support\n+provided in JDK 7.0 (1.7). These are annotations that\n+ornament Packages, Classes, and Members either visibly (accessible at\n+runtime) or invisibly (not accessible at\n+runtime). In JASM, visible annotations are denoted by the token <b>@T+<\/b>,\n+while\n+invisible\n+annotations\n+are\n+denoted\n+by the token <b>@T-<\/b>.<\/p>\n+<h4 class=\"head4\"><u>Synopsis<\/u><\/h4>\n+<font size=\"+1\"><code><dt><code><b><em>TYPE_ANNOTATION_DECLARATION<\/em><\/b><\/code>:\n+<\/dt>\n+<dd><code><b>@T+<\/b>|<b>@T-<\/b> ANNOTATION_NAME\n+[TYPE_ANNOTATION_VALUE_DECLARATIONS]<\/code><\/dd>\n+<\/code><\/font><br>\n+<br>\n+<font size=\"+1\"><code><dt><code><b><em>TYPE_ANNOTATION_VALUE_DECLARATIONS<\/em><\/b><\/code>:\n+list\n+of\n+(comma\n+separated)<br>\n+<\/dt>\n+<dd><code>TYPE_ANNOTATION_VALUE_DECLARATION<\/code> <\/dd>\n+<\/code><\/font><br>\n+<br>\n+<code><dt><code><b><em>TYPE_ANNOTATION_VALUE_DECLARATION<\/em><\/b><\/code>:\n+<\/dt>\n+<dd><code><code><b>{<\/b> <\/code><\/code><code><b>{<\/b>\n+ANNOTATION_VALUE_DECLARATION<\/code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><font\n+ size=\"+1\"><code><code><\/code><code><b><sup>+<\/sup><\/b><\/code><\/code><\/font><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><code>\n+  <b>}<\/b> TARGET PATH<\/code><code><code> <b>}<\/b><\/code><\/code><\/dd>\n+<dt><br>\n+<\/dt>\n+<dt><br>\n+<\/dt>\n+<dt><code><b><em>TARGET<\/em><\/b><\/code>: <\/dt>\n+<code><dd><code><b>{<\/b> TARGET_TYPE TARGET_INFO <b>}<\/b> <br>\n+  <\/code><\/dd>\n+<dt><br>\n+<\/dt>\n+<\/code> <dt><code><b><em><\/em><\/b><\/code><code><\/code><br>\n+<\/dt>\n+<dt><code><code><b><em>TARGET_TYPE<\/em><\/b><\/code>: <\/code><\/dt>\n+<\/code><code><code><\/code><\/code><code><code> <dd><code><code><font\n+ size=\"+1\"><code><code><\/code><\/code><\/font><\/code><\/code><font\n+ size=\"+1\"><code><code><\/code><\/code><\/font><br>\n+<\/dd>\n+<\/code><\/code><code><code><dt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n+\n+\n+\n+\n+\n+  <br>\n+<\/dt>\n+<\/code><\/code>\n+<table border=\"0\">\n+  <tbody>\n+    <tr>\n+      <td style=\"vertical-align: top;\"><big><code><code><code><b><em>TARGET_TYPE<\/em><\/b><\/code>:<\/code><\/code><\/big><\/td>\n+      <td style=\"vertical-align: top;\"><big><code><code><code><b><em>TARGET_INFO_TYPE<\/em><\/b><\/code>:<\/code><\/code><\/big><\/td>\n+    <\/tr>\n+    <tr>\n+      <td><code><code><span\n+ style=\"font-size: 8pt; font-family: 'NimbusMonL-Regu-Extend_850';\">CLASS_TYPE_PARAMETER&nbsp;<\/span><\/code><\/code>\n+      <\/td>\n+      <td style=\"vertical-align: top; font-style: italic;\"><code><code><code><font><font><font><font><font\n+ size=\"+1\"><font size=\"+1\"><code><code><font size=\"+1\"><font size=\"+1\"><b><code><code><font\n+ size=\"+1\"><code><code>TYPEPARAM<\/code><\/code><\/font><\/code><\/code><\/b><code><code><font\n+ size=\"+1\"><code><b><code><em><\/em><\/code><\/b><\/code><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/font><\/font><\/font><\/font><\/code><\/code><\/code>\n+      <\/td>\n+    <\/tr>\n+    <tr>\n+      <td> <span\n+ style=\"font-size: 8pt; font-family: 'NimbusMonL-Regu-Extend_850';\">METHOD_TYPE_PARAMETER\n+\n+\n+\n+\n+\n+\n+      <\/span><code><code><span\n+ style=\"font-size: 8pt; font-family: 'NimbusMonL-Regu-Extend_850';\">&nbsp;<\/span><\/code><\/code>\n+      <\/td>\n+      <td style=\"vertical-align: top; font-style: italic;\"><code><code><code><font><font><font><font><font\n+ size=\"+1\"><font size=\"+1\"><code><code><font size=\"+1\"><font size=\"+1\"><b><code><code><font\n+ size=\"+1\"><code><code>TYPEPARAM<\/code><\/code><\/font><\/code><\/code><\/b><code><code><font\n+ size=\"+1\"><code><b><code><em><\/em><\/code><\/b><\/code><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/font><\/font><\/font><\/font><\/code><\/code><\/code>\n+      <\/td>\n+    <\/tr>\n+    <tr>\n+      <td> <span\n+ style=\"font-size: 8pt; font-family: 'NimbusMonL-Regu-Extend_850';\">CLASS_EXTENDS<\/span><code><code><span\n+ style=\"font-size: 8pt; font-family: 'NimbusMonL-Regu-Extend_850';\">&nbsp;<\/span><\/code><\/code>\n+      <\/td>\n+      <td style=\"vertical-align: top; font-style: italic;\"><code><code><code><font><font><font><font><font><font><font><font><font><font><font><font><font><font><font\n+ size=\"+1\"><font size=\"+1\"><code><code><font size=\"+1\"><font size=\"+1\"><code><code><code><code><font\n+ size=\"+1\"><font size=\"+1\"><code><code><font size=\"+1\"><font size=\"+1\"><code><code><font\n+ size=\"+1\"><font size=\"+1\"><code><code><font size=\"+1\"><font size=\"+1\"><code><code><font\n+ size=\"+1\"><font size=\"+1\"><b><code><code><font size=\"+1\"><code><code>SUPERTYPE<\/code><\/code><\/font><\/code><\/code><\/b><code><code><font\n+ size=\"+1\"><code><b><code><em><\/em><\/code><\/b><\/code><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/code><\/code><\/code>\n+      <\/td>\n+    <\/tr>\n+    <tr>\n+      <td><code><code><span\n+ style=\"font-size: 8pt; font-family: 'NimbusMonL-Regu-Extend_850';\">CLASS_TYPE_PARAMETER_BOUND&nbsp;<\/span><\/code><\/code>\n+      <\/td>\n+      <td style=\"vertical-align: top; font-style: italic;\"><code><code><code><font><font><font><font><font><font><font><font><font><font><font\n+ size=\"+1\"><font size=\"+1\"><code><code><font size=\"+1\"><font size=\"+1\"><code><code><code><font\n+ size=\"+1\"><font size=\"+1\"><code><code><font size=\"+1\"><font size=\"+1\"><code><code><font\n+ size=\"+1\"><font size=\"+1\"><b><code><code><font size=\"+1\"><code><code>TYPEPARAM_BOUND<\/code><\/code><\/font><\/code><\/code><\/b><code><code><font\n+ size=\"+1\"><code><code><b><em><\/em><\/b><\/code><\/code><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/code><\/code><\/code>\n+      <\/td>\n+    <\/tr>\n+    <tr>\n+      <td><code><code><span\n+ style=\"font-size: 8pt; font-family: 'NimbusMonL-Regu-Extend_850';\">METHOD_TYPE_PARAMETER_BOUND<\/span><\/code><\/code>\n+      <\/td>\n+      <td style=\"vertical-align: top; font-style: italic;\"><code><code><code><font><font><font><font><font><font><font><font><font><font><font\n+ size=\"+1\"><font size=\"+1\"><code><code><font size=\"+1\"><font size=\"+1\"><code><code><code><font\n+ size=\"+1\"><font size=\"+1\"><code><code><font size=\"+1\"><font size=\"+1\"><code><code><font\n+ size=\"+1\"><font size=\"+1\"><b><code><code><font size=\"+1\"><code><code>TYPEPARAM_BOUND<\/code><\/code><\/font><\/code><\/code><\/b><code><code><font\n+ size=\"+1\"><code><code><b><em><\/em><\/b><\/code><\/code><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/code><\/code><\/code>\n+      <\/td>\n+    <\/tr>\n+    <tr>\n+      <td><code><code><span\n+ style=\"font-size: 8pt; font-family: 'NimbusMonL-Regu-Extend_850';\">FIELD&nbsp;<\/span><\/code><\/code>\n+      <\/td>\n+      <td style=\"vertical-align: top; font-style: italic;\"><code><code><code><font\n+ size=\"+1\"><font size=\"+1\"><code><code><font size=\"+1\"><font size=\"+1\"><code><code><code><font\n+ size=\"+1\"><font size=\"+1\"><code><code><font size=\"+1\"><font size=\"+1\"><code><code><font\n+ size=\"+1\"><font size=\"+1\"><code><code><code><code><font size=\"+1\"><code><code><code><code><code><code><font\n+ size=\"+1\"><font size=\"+1\"><code><code><font size=\"+1\"><code><b><code><code><font\n+ size=\"+1\"><code><code>EMPTY<\/code><\/code><\/font><\/code><\/code><\/b><code><code><font\n+ size=\"+1\"><code><\/code><\/font><\/code><\/code><\/code><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/code>\n+      <\/td>\n+    <\/tr>\n+    <tr>\n+      <td><code><code><span\n+ style=\"font-size: 8pt; font-family: 'NimbusMonL-Regu-Extend_850';\">METHOD_RETURN&nbsp;<\/span><\/code><\/code>\n+      <\/td>\n+      <td style=\"vertical-align: top; font-style: italic;\"><code><code><code><font\n+ size=\"+1\"><font size=\"+1\"><code><code><font size=\"+1\"><font size=\"+1\"><code><code><code><font\n+ size=\"+1\"><font size=\"+1\"><code><code><font size=\"+1\"><font size=\"+1\"><code><code><font\n+ size=\"+1\"><font size=\"+1\"><code><code><code><code><font size=\"+1\"><code><code><code><code><code><code><font\n+ size=\"+1\"><font size=\"+1\"><code><code><font size=\"+1\"><code><b><code><code><font\n+ size=\"+1\"><code><code>EMPTY<\/code><\/code><\/font><\/code><\/code><\/b><code><code><font\n+ size=\"+1\"><code><\/code><\/font><\/code><\/code><\/code><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/code>|<br>\n+      <\/td>\n+    <\/tr>\n+    <tr>\n+      <td><code><code><span\n+ style=\"font-size: 8pt; font-family: 'NimbusMonL-Regu-Extend_850';\">METHOD_RECEIVER<\/span><\/code><\/code>\n+      <\/td>\n+      <td style=\"vertical-align: top; font-style: italic;\"><code><code><code><font\n+ size=\"+1\"><font size=\"+1\"><code><code><font size=\"+1\"><font size=\"+1\"><code><code><code><font\n+ size=\"+1\"><font size=\"+1\"><code><code><font size=\"+1\"><font size=\"+1\"><code><code><font\n+ size=\"+1\"><font size=\"+1\"><code><code><code><code><font size=\"+1\"><code><code><code><code><code><code><font\n+ size=\"+1\"><font size=\"+1\"><code><code><font size=\"+1\"><code><b><code><code><font\n+ size=\"+1\"><code><code>EMPTY<\/code><\/code><\/font><\/code><\/code><\/b><code><code><font\n+ size=\"+1\"><code><\/code><\/font><\/code><\/code><\/code><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/code>\n+      <\/td>\n+    <\/tr>\n+    <tr>\n+      <td style=\"vertical-align: top;\"><code><code><span\n+ style=\"font-size: 8pt; font-family: 'NimbusMonL-Regu-Extend_850';\">METHOD_FORMAL_PARAMETER<\/span><\/code><\/code><\/td>\n+      <td style=\"vertical-align: top; font-style: italic;\"><code><code><code><font><font><font><font><font><font><font><font><font><font><font\n+ size=\"+1\"><font size=\"+1\"><code><code><font size=\"+1\"><font size=\"+1\"><code><code><code><font\n+ size=\"+1\"><font size=\"+1\"><code><code><font size=\"+1\"><font size=\"+1\"><code><code><font\n+ size=\"+1\"><font size=\"+1\"><code><code><b><code><code><font size=\"+1\"><code><code>METHODPARAM<\/code><\/code><\/font><\/code><\/code><\/b><code><code><font\n+ size=\"+1\"><code><b><code><em><\/em><\/code><\/b><\/code><\/font><\/code><\/code><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/code><\/code><\/code><\/td>\n+    <\/tr>\n+    <tr>\n+      <td style=\"vertical-align: top;\"><code><code><span\n+ style=\"font-size: 8pt; font-family: 'NimbusMonL-Regu-Extend_850';\">THROWS<\/span><\/code><\/code><\/td>\n+      <td style=\"vertical-align: top; font-style: italic;\"><code><code><code><font><font><font><font><font><font><font><font><font><font><font\n+ size=\"+1\"><font size=\"+1\"><code><code><font size=\"+1\"><font size=\"+1\"><code><code><code><font\n+ size=\"+1\"><font size=\"+1\"><code><code><font size=\"+1\"><font size=\"+1\"><code><code><font\n+ size=\"+1\"><font size=\"+1\"><code><code><font size=\"+1\"><code><code><font\n+ size=\"+1\"><code><\/code><\/font><\/code><\/code><\/font><code><code><\/code><\/code><font\n+ size=\"+1\"><font size=\"+1\"><code><code><font size=\"+1\"><code><b>EXCEPTION<code><code><font\n+ size=\"+1\"><code><code><\/code><\/code><\/font><\/code><\/code><\/b><code><code><font\n+ size=\"+1\"><code><b><code><em><\/em><\/code><\/b><\/code><\/font><\/code><\/code><\/code><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/code><\/code><\/code><\/td>\n+    <\/tr>\n+    <tr>\n+      <td style=\"vertical-align: top;\"><code><code><span\n+ style=\"font-size: 8pt; font-family: 'NimbusMonL-Regu-Extend_850';\">LOCAL_VARIABLE<\/span><\/code><\/code><\/td>\n+      <td style=\"vertical-align: top; font-style: italic;\"><code><font\n+ size=\"+1\"><font size=\"+1\"><code><code><font size=\"+1\"><code><code><code><font\n+ size=\"+1\"><code><code><b><em>LOCALVAR<\/em><\/b><\/code><\/code><\/font><\/code><\/code><\/code><\/font><\/code><\/code><\/font><\/font><\/code><\/td>\n+    <\/tr>\n+    <tr>\n+      <td style=\"vertical-align: top;\"><code><code><span\n+ style=\"font-size: 8pt; font-family: 'NimbusMonL-Regu-Extend_850';\">RESOURCE_VARIABLE<\/span><\/code><\/code><\/td>\n+      <td style=\"vertical-align: top; font-style: italic;\"><code><font\n+ size=\"+1\"><font size=\"+1\"><code><code><font size=\"+1\"><code><code><code><font\n+ size=\"+1\"><code><code><b><em>LOCALVAR<\/em><\/b><\/code><\/code><\/font><\/code><\/code><\/code><\/font><\/code><\/code><\/font><\/font><\/code><\/td>\n+    <\/tr>\n+    <tr>\n+      <td style=\"vertical-align: top;\"><code><code><span\n+ style=\"font-size: 8pt; font-family: 'NimbusMonL-Regu-Extend_850';\">EXCEPTION_PARAM<\/span><\/code><\/code><\/td>\n+      <td style=\"vertical-align: top; font-style: italic;\"><code><code><code><font\n+ size=\"+1\"><font size=\"+1\"><code><code><b><code><code><font size=\"+1\"><code><code>CATCH<\/code><\/code><\/font><\/code><\/code><\/b><code><code><font\n+ size=\"+1\"><code><\/code><\/font><\/code><\/code><\/code><\/code><\/font><\/font><\/code><\/code><code><code><font\n+ size=\"+1\"><code><\/code><\/font><\/code><\/code><\/code><\/td>\n+    <\/tr>\n+    <tr>\n+      <td style=\"vertical-align: top;\"><code><code><span\n+ style=\"font-size: 8pt; font-family: 'NimbusMonL-Regu-Extend_850';\">INSTANCEOF<\/span><\/code><\/code><\/td>\n+      <td style=\"vertical-align: top; font-style: italic;\"><code><code><font\n+ size=\"+1\"><code><code><font size=\"+1\"><code><code><b><em>OFFSET<\/em><\/b><\/code><\/code><\/font><\/code><\/code><\/font><\/code><\/code><\/td>\n+    <\/tr>\n+    <tr>\n+      <td style=\"vertical-align: top;\"><code><code><span\n+ style=\"font-size: 8pt; font-family: 'NimbusMonL-Regu-Extend_850';\">NEW<\/span><\/code><\/code><\/td>\n+      <td style=\"vertical-align: top; font-style: italic;\"><code><code><font\n+ size=\"+1\"><code><code><font size=\"+1\"><code><code><b><em>OFFSET<\/em><\/b><\/code><\/code><\/font><\/code><\/code><\/font><\/code><\/code><\/td>\n+    <\/tr>\n+    <tr>\n+      <td style=\"vertical-align: top;\"><code><code><span\n+ style=\"font-size: 8pt; font-family: 'NimbusMonL-Regu-Extend_850';\">CONSTRUCTOR_REFERE\n+CE_RECEIVER<\/span><\/code><\/code><br>\n+      <\/td>\n+      <td style=\"vertical-align: top; font-style: italic;\"><code><code><font\n+ size=\"+1\"><code><code><font size=\"+1\"><code><code><b><em>OFFSET<\/em><\/b><\/code><\/code><\/font><\/code><\/code><\/font><\/code><\/code><\/td>\n+    <\/tr>\n+    <tr>\n+      <td style=\"vertical-align: top;\"><code><code><span\n+ style=\"font-size: 8pt; font-family: 'NimbusMonL-Regu-Extend_850';\">METHOD_REFERENCE_RECEIVER<\/span><\/code><\/code><\/td>\n+      <td style=\"vertical-align: top; font-style: italic;\"><code><code><font\n+ size=\"+1\"><code><code><font size=\"+1\"><code><code><b><em>OFFSET<\/em><\/b><\/code><\/code><\/font><\/code><\/code><\/font><\/code><\/code>&nbsp;\n+\n+      <\/td>\n+    <\/tr>\n+    <tr>\n+      <td style=\"vertical-align: top;\"><code><code><span\n+ style=\"font-size: 8pt; font-family: 'NimbusMonL-Regu-Extend_850';\">CAST<\/span><\/code><\/code><br>\n+      <\/td>\n+      <td style=\"vertical-align: top; font-style: italic;\"><code><code><code><font><font><font><font><font><font><font><font><font\n+ size=\"+1\"><font size=\"+1\"><code><code><font size=\"+1\"><font size=\"+1\"><code><code><font\n+ size=\"+1\"><font size=\"+1\"><code><code><font size=\"+1\"><font size=\"+1\"><b><code><code><font\n+ size=\"+1\"><code><code>TYPEARG<\/code><\/code><\/font><\/code><\/code><\/b><code><code><font\n+ size=\"+1\"><code><b><code><em><\/em><\/code><\/b><\/code><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/code><\/code><\/code><\/td>\n+    <\/tr>\n+    <tr>\n+      <td style=\"vertical-align: top;\"><code><code><span\n+ style=\"font-size: 8pt; font-family: 'NimbusMonL-Regu-Extend_850';\">CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT<\/span><\/code><\/code><br>\n+      <\/td>\n+      <td style=\"vertical-align: top; font-style: italic;\"><code><code><code><font><font><font><font><font><font><font><font><font\n+ size=\"+1\"><font size=\"+1\"><code><code><font size=\"+1\"><font size=\"+1\"><code><code><font\n+ size=\"+1\"><font size=\"+1\"><code><code><font size=\"+1\"><font size=\"+1\"><b><code><code><font\n+ size=\"+1\"><code><code>TYPEARG<\/code><\/code><\/font><\/code><\/code><\/b><code><code><font\n+ size=\"+1\"><code><b><code><em><\/em><\/code><\/b><\/code><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/code><\/code><\/code><\/td>\n+    <\/tr>\n+    <tr>\n+      <td style=\"vertical-align: top;\"><code><code><span\n+ style=\"font-size: 8pt; font-family: 'NimbusMonL-Regu-Extend_850';\">METHOD_INVOCATION_TYPE_ARGUMENT<\/span><\/code><\/code><\/td>\n+      <td style=\"vertical-align: top; font-style: italic;\"><code><code><code><font><font><font><font><font><font><font><font><font\n+ size=\"+1\"><font size=\"+1\"><code><code><font size=\"+1\"><font size=\"+1\"><code><code><font\n+ size=\"+1\"><font size=\"+1\"><code><code><font size=\"+1\"><font size=\"+1\"><b><code><code><font\n+ size=\"+1\"><code><code>TYPEARG<\/code><\/code><\/font><\/code><\/code><\/b><code><code><font\n+ size=\"+1\"><code><b><code><em><\/em><\/code><\/b><\/code><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/code><\/code><\/code><\/td>\n+    <\/tr>\n+    <tr>\n+      <td style=\"vertical-align: top;\"><code><code><span\n+ style=\"font-size: 8pt; font-family: 'NimbusMonL-Regu-Extend_850';\">CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT<\/span><\/code><\/code><\/td>\n+      <td style=\"vertical-align: top; font-style: italic;\"><code><code><code><font><font><font><font><font><font><font><font><font\n+ size=\"+1\"><font size=\"+1\"><code><code><font size=\"+1\"><font size=\"+1\"><code><code><font\n+ size=\"+1\"><font size=\"+1\"><code><code><font size=\"+1\"><font size=\"+1\"><b><code><code><font\n+ size=\"+1\"><code><code>TYPEARG<\/code><\/code><\/font><\/code><\/code><\/b><code><code><font\n+ size=\"+1\"><code><b><code><em><\/em><\/code><\/b><\/code><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/code><\/code><\/code><\/td>\n+    <\/tr>\n+    <tr>\n+      <td style=\"vertical-align: top;\"><code><code><span\n+ style=\"font-size: 8pt; font-family: 'NimbusMonL-Regu-Extend_850';\">METHOD_REFERENCE_TYPE_ARGUMENT<\/span><\/code><\/code><\/td>\n+      <td style=\"vertical-align: top; font-style: italic;\"><code><code><code><font><font><font><font><font><font><font><font><font\n+ size=\"+1\"><font size=\"+1\"><code><code><font size=\"+1\"><font size=\"+1\"><code><code><font\n+ size=\"+1\"><font size=\"+1\"><code><code><font size=\"+1\"><font size=\"+1\"><b><code><code><font\n+ size=\"+1\"><code><code>TYPEARG<\/code><\/code><\/font><\/code><\/code><\/b><code><code><font\n+ size=\"+1\"><code><b><code><em><\/em><\/code><\/b><\/code><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/code><\/code><\/code><\/td>\n+    <\/tr>\n+  <\/tbody>\n+<\/table>\n+<p><code><dt><br>\n+<\/dt>\n+<dt><code><big><code><b><em>TARGET_INFO<\/em><\/b><\/code><span\n+ style=\"font-weight: bold;\">_TYPE<\/span>:<\/big> <\/code><\/dt>\n+<code> <dd><font size=\"+1\"><code><code>TYPEPARAM | SUPERTYPE |\n+TYPEPARAM_BOUND\n+| EMPTY | METHODPARAM | EXCEPTION | LOCALVAR | CATCH |<\/code><\/code><\/font><font\n+ size=\"+1\"><code><code> OFFSET\n+|&nbsp; TYPEARG<\/code><\/code><\/font><\/dd>\n+<\/code><\/code> <\/p>\n+<code><dt><code><b><em><\/em><\/b><\/code><font size=\"+1\"><code><\/code><\/font><code><code><font\n+ size=\"+1\"><font size=\"+1\"><code><code><font size=\"+1\"><font size=\"+1\"><\/font><\/font><\/code><\/code><\/font><\/font><\/code><\/code><br>\n+<\/dt>\n+<dt><font size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font size=\"+1\"><b><code><code><font\n+ size=\"+1\"><code><code>TYPEPARAM<\/code><\/code><\/font><\/code><\/code><\/b><code><code><font\n+ size=\"+1\"><code><b><code><em><\/em><\/code><\/b>: <br>\n+  <\/code><\/font><\/code><\/code> <\/font><\/font><\/font><\/font><\/dt>\n+<dd><code><font size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font\n+ size=\"+1\"><font size=\"+1\"><code><code><\/code><code>paramIndex(<\/code><i><code>INTEGER<\/code><\/i><code>)<\/code>\n+  <\/code><\/font><\/font><\/font><\/font><\/font><\/code><\/dd>\n+<font size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font size=\"+1\"> <code><br>\n+<code><dt><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><code><code><font\n+ size=\"+1\"><font size=\"+1\"><code><code><font size=\"+1\"><font size=\"+1\"><code><code><font\n+ size=\"+1\"><font size=\"+1\"><code><code><font size=\"+1\"><font size=\"+1\"><code><code><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/code><\/code><br>\n+<\/dt>\n+<dt><font size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font\n+ size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font\n+ size=\"+1\"><code><code><font size=\"+1\"><code><br>\n+  <\/code><\/font><\/code><\/code><\/font> <font size=\"+1\"><font size=\"+1\">\n+  <\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/dt>\n+<dt><font size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font\n+ size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font\n+ size=\"+1\"><font size=\"+1\"><b><code><code><font size=\"+1\"><code><code>SUPERTYPE<\/code><\/code><\/font><\/code><\/code><\/b><code><code><font\n+ size=\"+1\"><code><b><code><em><\/em><\/code><\/b>: <br>\n+  <\/code><\/font><\/code><\/code> <\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/dt>\n+<dd><code><font size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font\n+ size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font\n+ size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font size=\"+1\"><code><code>typeIndex(<i>INTEGER<\/i>)<\/code><\/code><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/code><code><code><code><code><font\n+ size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font\n+ size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font\n+ size=\"+1\"><font size=\"+1\"><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><code><code><code><code><code><code><code><code><code><code><code><code><code><code><code><code><code><code><code><code><code>typeIndex(<\/code><code>INTEGER<\/code><code>)<\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code>\n+  <\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/code><\/code><\/code><\/code><\/dd>\n+<font size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font\n+ size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font\n+ size=\"+1\"><font size=\"+1\"> <\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/code><\/code><font\n+ size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font\n+ size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font size=\"+1\"><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/code><font\n+ size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font\n+ size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font\n+ size=\"+1\"><font size=\"+1\"><\/font><\/font><\/font><\/font><\/font><\/font><font\n+ size=\"+1\"><font size=\"+1\"><font size=\"+1\"><code><font size=\"+1\"><code><\/code><\/font><\/code>\n+<\/font><\/font><\/font> <dt><code><font size=\"+1\"><font size=\"+1\"><code><code><font\n+ size=\"+1\"><font size=\"+1\"><code><code><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/code><br>\n+<\/dt>\n+<dt><font size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font\n+ size=\"+1\"><code><code><font size=\"+1\"><code><br>\n+  <\/code><\/font><\/code><\/code><\/font> <font size=\"+1\"><font size=\"+1\">\n+  <\/font><\/font><\/font><\/font><\/font><\/font><\/dt>\n+<dt><font size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font\n+ size=\"+1\"><font size=\"+1\"><b><code><code><font size=\"+1\"><code><code>TYPEPARAM_BOUND<\/code><\/code><\/font><\/code><\/code><\/b><code><code><font\n+ size=\"+1\"><code><code><b><em><\/em><\/b><\/code>: <br>\n+  <\/code><\/font><\/code><\/code> <\/font><\/font><\/font><\/font><\/font><\/font><\/dt>\n+<dd><code><font size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font\n+ size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font size=\"+1\"><code><code><\/code><\/code><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/code><code><code><code><code><font\n+ size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font\n+ size=\"+1\"><font size=\"+1\"><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><font size=\"+1\"><code><code><\/code><code>paramIndex(<\/code><i><code>INTEGER<\/code><\/i><code>)\n+\n+\n+\n+\n+\n+  <\/code><\/code><\/font><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/code><\/code><\/code><\/code><code><code><code><code><font\n+ size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font\n+ size=\"+1\"><font size=\"+1\"><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><font size=\"+1\"><code><code><\/code><code>boundIndex(<\/code><i><code>INTEGER<\/code><\/i><code>)<\/code><\/code><\/font><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/code><\/code><\/code><\/code><code><font\n+ size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font\n+ size=\"+1\"><font size=\"+1\"><font size=\"+1\"><code><code><\/code><code><\/code>\n+  <\/code><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/code><\/dd>\n+<font size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font\n+ size=\"+1\"><font size=\"+1\"> <code><br>\n+<code><dt><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><br>\n+<\/dt>\n+<dt><font size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font\n+ size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font\n+ size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font\n+ size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font\n+ size=\"+1\"><font size=\"+1\"><br>\n+  <\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/dt>\n+<dt><font size=\"+1\"><font size=\"+1\"><font size=\"+1\"><code><code><font\n+ size=\"+1\"><code><b><code><code><font size=\"+1\"><code><code>EMPTY<\/code><\/code><\/font><\/code><\/code><\/b><code><code><font\n+ size=\"+1\"><code>:<\/code><\/font><\/code><\/code><\/code><\/font><\/code><\/code><\/font><\/font>\n+  <\/font><\/dt>\n+<dt><font size=\"+1\"><font size=\"+1\"><font size=\"+1\"><code><code><font\n+ size=\"+1\"><code><code><code><font size=\"+1\"><code>&nbsp;<br>\n+  <\/code><\/font><\/code><\/code><\/code><\/font><\/code><\/code><\/font><\/font>\n+  <\/font><\/dt>\n+<dd><font size=\"+1\"><br>\n+  <font size=\"+1\"><font size=\"+1\"><code><\/code><\/font><\/font><\/font><\/dd>\n+<dd><br>\n+  <b><code><code><font size=\"+1\"><code><code>METHODPARAM<\/code><\/code><\/font><\/code><\/code><\/b><code><code><font\n+ size=\"+1\"><code><b><code><em><\/em><\/code><\/b>: <br>\n+  <\/code><\/font><\/code><\/code> <\/dd>\n+<dd><code><font size=\"+1\"><code><code><\/code><\/code><\/font><\/code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><code><code><code><code><code><code><code><code><code><code><code><code><code><code><code><code><code>index(<\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><code><code><code><code><code><code><code><code><code><code><code><\/code><code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><font\n+ size=\"+1\"><\/font><\/code><\/code><\/code><\/font><\/code><\/code><font\n+ size=\"+1\"><\/font><\/code><\/code><\/code><\/font><\/code><\/code><font\n+ size=\"+1\"><\/font><\/code><\/code><\/code><\/font><\/code><\/code><font\n+ size=\"+1\"><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><font\n+ size=\"+1\"><\/font><\/code><\/code><\/code><\/font><\/code><\/code><font\n+ size=\"+1\"><\/font><\/code><\/code><\/code><\/font><\/code><\/code><font\n+ size=\"+1\"><\/font><\/code><\/code><\/code><\/font><\/code><\/code><font\n+ size=\"+1\"><\/font><\/code><\/code><\/code><\/font><\/code><\/code><font\n+ size=\"+1\"><\/font><\/code><\/code><\/code><\/font><\/code><\/code><font\n+ size=\"+1\"><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><font\n+ size=\"+1\"><\/font><\/code><\/code><\/code><\/font><\/code><\/code><font\n+ size=\"+1\"><\/font><\/code><\/code><\/code><\/font><\/code><\/code><font\n+ size=\"+1\"><\/font><\/code><\/code><\/code><\/font><\/code><\/code><font\n+ size=\"+1\"><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><font\n+ size=\"+1\"><\/font><\/code><\/code><\/code><\/font><\/code><\/code><font\n+ size=\"+1\"><\/font><\/code><\/code><\/dd>\n+<\/code><\/code><\/font><\/font><code><font size=\"+1\"><code><code>paramIndex(<i>INTEGER<\/i>)<\/code><\/code><\/font><\/code>\n+<dt><font size=\"+1\"><code><code><font size=\"+1\"><code><br>\n+  <\/code><\/font><\/code><\/code><\/font><code><code><\/code><\/code><font\n+ size=\"+1\"><font size=\"+1\"><code><code><font size=\"+1\"><code><b>EXCEPTION<code><code><font\n+ size=\"+1\"><code><code><\/code><\/code><\/font><\/code><\/code><\/b><code><code><font\n+ size=\"+1\"><code><b><code><em><\/em><\/code><\/b>: <br>\n+  <\/code><\/font><\/code><\/code><\/code><\/font><\/code><\/code><\/font><\/font><font\n+ size=\"+1\"><font size=\"+1\"> <\/font><\/font><\/dt>\n+<dd><code><font size=\"+1\"><font size=\"+1\"><font size=\"+1\"><code><code><\/code><code>typeIndex(<\/code><i><code>INTEGER<\/code><\/i><code>)<\/code><i><code>&nbsp;<\/code><\/i><code><\/code>\n+  <\/code><\/font><\/font><\/font><\/code><\/dd>\n+<font size=\"+1\"><font size=\"+1\"> <code><br>\n+<code><dt><code><b><em><\/em><\/b><\/code><br>\n+<\/dt>\n+<\/code><\/code><\/font><\/font><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><font\n+ size=\"+1\"><code><code><font size=\"+1\"><code><\/code><\/font><\/code><\/code><\/font><code><code><\/code><\/code><code><code><font\n+ size=\"+1\"><font size=\"+1\"><code><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><b><code><code><font\n+ size=\"+1\"><code><code><\/code><\/code><\/font><\/code><\/code><\/b><\/code><\/code><\/font><\/font><\/code><\/code><br>\n+<\/font><\/font><\/font><\/font><\/font><\/font> <\/font><\/font><font\n+ size=\"+1\"><font size=\"+1\"><code><code><font size=\"+1\"><code><code><code><font\n+ size=\"+1\"><code><code><b><em>LOCALVAR<\/em><\/b><\/code>: <br>\n+<\/code><\/font><\/code><\/code><\/code><\/font><\/code><\/code><\/font><\/font><font\n+ size=\"+1\"><font size=\"+1\"> <dd><code><font size=\"+1\"><code><code><span\n+ style=\"font-weight: bold;\">{<\/span><\/code><\/code><\/font><\/code><code><font\n+ size=\"+1\"><code><code><b> LVENTRY }<\/b><\/code><code><b><sup>+numEntries<\/sup><\/b><\/code>\n+  <\/code><\/font><\/code><\/dd>\n+<code><br>\n+<code> <dt><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><br>\n+<\/dt>\n+<dt><font size=\"+1\"><font size=\"+1\"><code><code><font size=\"+1\"><code><code><code><font\n+ size=\"+1\"><code><code><b><em>LVENTRY<\/em><\/b><\/code>: <br>\n+  <\/code><\/font><\/code><\/code><\/code><\/font><\/code><\/code><\/font><\/font><\/dt>\n+<font size=\"+1\"><font size=\"+1\"> <dd><code style=\"font-weight: bold;\"><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><code><code><code><code><code><code><code><code><code><code><code><code><code><code><code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><code><font\n+ size=\"+1\"><code><code>startpc(<\/code><\/code><\/font><\/code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><\/code><i><code>INTEGER)\n+\n+\n+\n+\n+\n+  <\/code><\/i><code>length<\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><font\n+ size=\"+1\"><code><code>(<\/code><\/code><\/font><\/code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><\/code><i><code>INTEGER)\n+\n+\n+\n+\n+\n+  <\/code><\/i><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><font\n+ size=\"+1\"><code><code>index(<\/code><\/code><\/font><\/code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><\/code><i><code>INTEGER)<span\n+ style=\"font-weight: bold;\"><\/span><\/code><\/i><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><code><font\n+ size=\"+1\"><code><code><\/code><code><\/code> <\/code><\/font><\/code><\/dd>\n+<code><br>\n+<code><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><dt><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><font\n+ size=\"+1\"><code><code><font size=\"+1\"><code><code><code><code><code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/font><br>\n+<\/dt>\n+<dt><code><code><font size=\"+1\"><font size=\"+1\"><code><code><b><code><code><font\n+ size=\"+1\"><code><code>CATCH<\/code><\/code><\/font><\/code><\/code><\/b><code><code><font\n+ size=\"+1\"><code><\/code><\/font><\/code><\/code><\/code><\/code><\/font><\/font><\/code><\/code><code><code><font\n+ size=\"+1\"><code>: <br>\n+  <\/code><\/font><\/code><\/code> <\/dt>\n+<dd><code><font size=\"+1\"><code><code><\/code><\/code><\/font><\/code><code><code><font\n+ size=\"+1\"><font size=\"+1\"><code><code><code><code><\/code><\/code><\/code><\/code><\/font><\/font><\/code><\/code><br>\n+<\/dd>\n+<dd><code><code><code><code><font size=\"+1\"><font><font><font size=\"+1\"><font\n+ size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><font size=\"+1\"><font size=\"+1\"><code><code><font\n+ size=\"+1\"><font size=\"+1\"><code><font size=\"+1\"><code><code>catch(<\/code><\/code><\/font><\/code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><\/code><i><code>INTEGER)<\/code><\/i><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/code><\/code><\/code><\/code><\/dd>\n+<font size=\"+1\"> <\/font><code><font size=\"+1\"><code><code><\/code> <\/code><\/font><\/code>\n+<code><br>\n+<\/code><dt><br>\n+<\/dt>\n+<dt><br>\n+<\/dt>\n+<dt><code><\/code><br>\n+<\/dt>\n+<dt><font size=\"+1\"><code><code><font size=\"+1\"><code><code><b><em>OFFSET<\/em><\/b><\/code>:\n+\n+\n+\n+\n+\n+  <br>\n+  <\/code><\/font><\/code><\/code><\/font><\/dt>\n+<font size=\"+1\"><code><font size=\"+1\"><code> <dd><code><\/code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><font\n+ size=\"+1\"><code><code>offset(<\/code><\/code><\/font><\/code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><\/code><i><code>INTEGER)<\/code><\/i><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><code><\/code>\n+<\/dd>\n+<\/code><\/font><\/code><\/font><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><dt><font size=\"+1\"><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/font><br>\n+<\/dt>\n+<\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><code><code><font\n+ size=\"+1\"><font size=\"+1\"><code><code><font size=\"+1\"><font size=\"+1\"><code><code><font\n+ size=\"+1\"><font size=\"+1\"><code><code><font size=\"+1\"><font size=\"+1\">\n+<dt><b><code><code><font size=\"+1\"><code><code>TYPEARG<\/code><\/code><\/font><\/code><\/code><\/b><code><code><font\n+ size=\"+1\"><code><b><code><em><\/em><\/code><\/b>: <br>\n+  <\/code><\/font><\/code><\/code><\/dt>\n+<dd><code><font size=\"+1\"><code><code><\/code><\/code><\/font><\/code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><font\n+ size=\"+1\"><code><code>offset(<\/code><i><code>INTEGER<\/code><\/i><code>)\n+  <\/code><\/code><\/font><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><font\n+ size=\"+1\"><code><code><\/code><code>typeIndex(<\/code><i><code>INTEGER<\/code><\/i><code>)<\/code><\/code><\/font><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><code><font\n+ size=\"+1\"><code><code><\/code><code><\/code> <\/code><\/font><\/code><\/dd>\n+<code><br>\n+<code><dt><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><br>\n+<\/dt>\n+<dt><font size=\"+1\"><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/font><br>\n+<\/dt>\n+<\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/code><\/code><dt><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><br>\n+  <\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/dt>\n+<font size=\"+1\"><code><code><b><em>PATH<\/em><\/b><\/code>: list\n+of (space separated)<br>\n+<\/code><\/font><font size=\"+1\"><code> <dd><code><code><code><b>{<\/b><\/code><\/code><\/code><i><code>\n+  <span style=\"font-weight: bold;\">PATH_ENTRY<\/span><\/code><\/i><sup><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><font\n+ size=\"+1\"><code><code><b>+<\/b><\/code><\/code><\/font><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/sup><code><code>\n+  <b>}<\/b><\/code><\/code><\/dd>\n+<dt><br>\n+<\/dt>\n+<\/code><\/font> <dt><code><code><\/code><\/code><br>\n+<\/dt>\n+<dt><font size=\"+1\"><code><code><font size=\"+1\"><code><code><b><em>PATH_ENTRY<\/em><\/b><\/code>:\n+  <br>\n+  <\/code><\/font><\/code><\/code><\/font><\/dt>\n+<font size=\"+1\"><code><font size=\"+1\"><code> <dd><code><\/code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><font\n+ size=\"+1\"><code><code><span style=\"font-style: italic;\">{ <span\n+ style=\"font-weight: bold;\">PATH_KIND PATH_INDEX }<\/span><\/span><\/code><\/code><\/font><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><code><font\n+ size=\"+1\"><font size=\"+1\"><code><font size=\"+1\"><code><code><\/code><\/code><\/font><\/code><\/font><\/font><\/code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><br>\n+<\/dd>\n+<\/code><\/font><\/code><\/font> <code><\/code>\n+<p><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/p>\n+<code><code><font size=\"+1\"><font size=\"+1\"><code><code><dt><code><\/code><br>\n+<\/dt>\n+<dt><code><code><b><em>PATH_KIND<\/em><\/b><\/code>: <\/code><\/dt>\n+<code> <dd><font size=\"+1\"><code><code>ARRAY | INNER_TYPE | WILDCARD\n+| TYPE_ARGUMENT<\/code><\/code><\/font><\/dd>\n+<\/code><\/code><font size=\"+1\"><font size=\"+1\"><br>\n+<code><code><dt><font size=\"+1\"><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/font><code><code><code><font\n+ size=\"+1\"><font size=\"+1\"><code><code><\/code><\/code><\/font><\/font><\/code><\/code><\/code><br>\n+<\/dt>\n+<dt><font><font><font><font><font size=\"+1\"><font size=\"+1\"><font\n+ size=\"+1\"><font size=\"+1\"><b><code><code><font size=\"+1\"><code><code>PATH_INDEX<\/code><\/code><\/font><\/code><\/code><\/b><code><code><font\n+ size=\"+1\"><code><b><code><em><\/em><\/code><\/b>: <br>\n+  <\/code><\/font><\/code><\/code><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/dt>\n+<font size=\"+1\"><dd><code><font><font><font><font><font size=\"+1\"><font\n+ size=\"+1\"><font size=\"+1\"><font size=\"+1\"><font size=\"+1\"><code><code><\/code><code><\/code><i><code>INTEGER<\/code><\/i><code><\/code>\n+  <\/code><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/code><\/dd>\n+<code><font><font><font><font><font size=\"+1\"><font size=\"+1\"><font\n+ size=\"+1\"><font size=\"+1\"><br>\n+<\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/font><\/code><br>\n+<\/font><font size=\"+1\"><font size=\"+1\"><code><code><dt><font size=\"+1\"><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><\/code><\/font><\/code><\/code><\/code><\/code><br>\n+  <\/code><\/font><\/code><\/code><\/font><\/dt>\n+<\/code><\/code><\/font><\/font><\/code><\/code><\/font><\/font><\/code><\/font><\/font><\/code><font\n+ size=\"+1\"><font size=\"+1\"><\/font><\/font><\/code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><br>\n+<code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><dt><font\n+ size=\"+1\"><font size=\"+1\"><code><code><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/font><br>\n+<\/dt>\n+<dt><font size=\"+1\"><font size=\"+1\"><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/font><\/font><font\n+ size=\"+1\"><font size=\"+1\"><code><code><\/code><\/code><\/font><\/font><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><code><code><code><code><code><code><font\n+ size=\"+1\"><code><code><code><code><code><font size=\"+1\"><code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><\/code><br>\n+<\/dt>\n+<code><code><font size=\"+1\"><code><code><code><code><code><code><font\n+ size=\"+1\"><font size=\"+1\"><code><code><dt><code><b><em><\/em><\/b><\/code><br>\n+<\/dt>\n+<\/code><\/code><\/font><\/font><\/code><\/code><\/code><\/code><\/code><\/code><\/font><\/code><\/code><br>\n+<code><b><em><\/em><\/b><\/code>\n+<a name=\"paramannots\"><\/a>\n+<h2 class=\"head2\">Parameter Names and Parameter Annotations<\/h2>\n+<p>Parameter annotations are another subset of the basic annotations\n+support provided in JDK 5.0 (1.5). These are annotations that\n+ornament Parameters to methods either visibly (accessible at runtime)\n+or invisibly (not accessible at\n+runtime). In JASM, visible parameter annotations are denoted by the\n+token <b>@+<\/b>, while invisible parameter annotations are denoted\n+by the token <b>@-<\/b>.<br>\n+<\/p>\n+<p>Parameter names come from an attribute introduced in JDK 8.0\n+(1.8).&nbsp; These are fixed parameter names that are used to ornament\n+parameters on methods.&nbsp; In Jasm, parameter names are identified by\n+the token # followed by { } braclets<br>\n+<\/p>\n+<h4 class=\"head4\"><u>Synopsis<\/u><\/h4>\n+<dl>\n+  <dt><code><b><em>METHOD DECLARATION<\/em><\/b><\/code>: <br>\n+  <\/dt>\n+  <dd><code>MODIFIERS Method METHOD_NAME:\"METHOD_SIGNATURE\"\n+[STACK_DECL] [LOCALS_DECL] [PARAMETERS_DECL] {[CODE]}<\/code><\/dd>\n+  <dd><br>\n+  <\/dd>\n+  <dt><code><b><em>PARAMETERS_DECL<\/em><\/b><\/code>: <br>\n+  <\/dt>\n+  <dd><code>[PARAMETER_DECL]<sup>N<\/sup> (where N &lt; number of params\n+in method, each N is a unique param number)<\/code><\/dd>\n+  <dd><br>\n+  <\/dd>\n+  <dt><code><b><em>PARAMETER_DECL<\/em><\/b><\/code>: <br>\n+  <\/dt>\n+  <dd><code>PARAM_NUM : [PARAM_NAME_DECL] [ANNOTATION_DECLARATIONS]<\/code><\/dd>\n+<\/dl>\n+<dl>\n+  <dt><code><b><em>PARAM_NAME_DECL<\/em><\/b><\/code>: <br>\n+  <\/dt>\n+  <dd><code>#{ name PARAM_ACCESS}<\/code><\/dd>\n+  <dt><br>\n+  <\/dt>\n+  <dt><code><b><i>PARAM_ACCESS<\/i><\/b>: list of<\/code><\/dt>\n+  <dd><code>[final][synthetic][mandated]<\/code><\/dd>\n+<\/dl>\n+<h4 style=\"text-decoration: underline;\" class=\"head4\">Examples<\/h4>\n+<div style=\"margin-left: 40px;\"><u>Example 1 (Parameter Annotation)<\/u><br>\n+<b><i><u>Java Code<\/u><\/i><\/b><br>\n+<pre>public class MyClass2 {<br>\t<br> ...<br><br>    public int doSomething(<br>\t@VisParamPreamble ( author = \"gummy\" )  @InVisParamPreamble ( author = \"bears\" )  int barber,<br>\tboolean of, <br>        @VisParamPreamble ( author = \"sour\" )  @InVisParamPreamble ( author = \"worms\" )    int seville,<br>        @InVisParamPreamble1 ( reviewers = {\"Dilbert\", \"Garfield\"} ) boolean pastrami) { <br>         ...<br>    }<br> ...<br>}<br><\/pre>\n+<br>\n+<b><i><u>JASM Code<\/u><\/i><\/b><br>\n+<br>\n+<span style=\"text-decoration: underline;\">Note<\/span>:&nbsp; The first\n+two parameters are named ('P0'- 'P3').&nbsp; Since this is a compiler\n+controlled option, there is no way to specify parameter naming in Java\n+source.<br>\n+<pre>super public class MyClass2<br>\tversion 50:0<br>{<br> ...<br><br>  public Method doSomething:\"(IZIZ)I\"<br>\tstack 2 locals 5<br><br>\t0: #{P0 mandated} @+VisParamPreamble { author = \"gummy\" } @-InVisParamPreamble { author = \"bears\" } <br>\t1: #{P1 final synthetic mandated}<br>&nbsp;       2: #{P2 mandated} @+VisParamPreamble { author = \"sour\" } @-InVisParamPreamble { author = \"worms\" } <br>\t3: #{P3 mandated} @-InVisParamPreamble1 { reviewers = {  \"Dilbert\",  \"Garfield\"} } <br>   {<br>\t...<br>   }<br><br>} \/\/ end Class MyClass2<\/pre>\n+<\/div>\n+<br>\n+<a name=\"paramannots\"><\/a>\n+<h2 class=\"head2\">Default Annotations<\/h2>\n+<p>&nbsp; Default annotations are another subset of the basic\n+annotations\n+support provided in JDK 5.0 (1.5). These are annotations that\n+ornament Annotations either visibly (accessible at runtime)\n+or invisibly (not accessible at\n+runtime). Default annotations specify a default value for a given\n+annotation field. <br>\n+<\/p>\n+<h4 class=\"head4\"><u>Synopsis<\/u><\/h4>\n+<dl>\n+  <dt><code><b><em>ANNOTATION INTERFACE DECLARATION<\/em><\/b><\/code>: <br>\n+  <\/dt>\n+  <dd><code>@interface ANNOTATION_NAME { ANNOTATION_FIELD_DECL<sup>+<\/sup>\n+} <br>\n+    <\/code><\/dd>\n+  <dd><br>\n+  <\/dd>\n+  <dt><code><b><em>ANNOTATION_FIELD_DECL<\/em><\/b><\/code>: <br>\n+  <\/dt>\n+  <dd><code>ANNOT_FIELD_TYPE ANNOTATION_NAME\n+[ANNOTATION_DEFAULT_VALUE_DECL];<br>\n+    <\/code><\/dd>\n+  <dd><br>\n+  <\/dd>\n+  <dt><code><b><em>ANNOTATION_DEFAULT_VALUE_DECL<\/em><\/b><\/code>: <br>\n+  <\/dt>\n+  <dd><code>default ANNOTATION_VALUE (where value must be of the type\n+ANNOT_FIELD_TYPE)<br>\n+    <\/code><\/dd>\n+<\/dl>\n+<h4 class=\"head4\"><u>Examples<\/u><\/h4>\n+<div style=\"margin-left: 40px;\"><u>Example 1 (Default Annotation)<\/u><br>\n+<b><i><u>Java Code<\/u><\/i><\/b><br>\n+<pre>import java.lang.annotation.*; <br>@Retention(RetentionPolicy.RUNTIME)<\/pre>\n+<pre>@interface Meth2Preamble {<br>&nbsp;&nbsp; String author() default \"John Steinbeck\";<br>}<\/pre>\n+<br>\n+<b><i><u>JASM Code<\/u><\/i><\/b><br>\n+<pre>interface&nbsp; Meth2Preamble<br>&nbsp;&nbsp; &nbsp;implements java\/lang\/annotation\/Annotation<br>&nbsp;&nbsp; &nbsp;version 50:0<\/pre>\n+<pre>{<br>  &nbsp;public abstract Method author:\"()Ljava\/lang\/String;\" default { \"John Steinbeck\" } ;<br>} \/\/ end Class Meth2Preamble<\/pre>\n+<\/div>\n+<hr noshade=\"noshade\" size=\"7\">\n+<a name=\"module_properties\"><\/a>\n+<h1 class=\"head1\">Module properties<\/h1>\n+<a name=\"module_requires\"><\/a>\n+<h2 class=\"head2\">Requires<\/h2>\n+<dl>\n+  <dt><code><b><em>MODULE_REQUIRES<\/em><\/b><\/code>: sequence of <\/dt>\n+  <dd>requires <code>REQUIRES_FLAGS<\/code> <code>CONSTANT_CELL(moduleContent)<\/code>; <\/dd>\n+  <dt><code><b><em>REQUIRES_FLAGS<\/em><\/b><\/code>: set of <\/dt>\n+  <dd>[<code>transitive<\/code>] [<code>static<\/code>] <\/dd>\n+<\/dl>\n+Example:\n+<pre>        requires transitive static foo.bar;<\/pre>\n+<a name=\"module_exports\"><\/a>\n+<h2 class=\"head2\">Exports<\/h2>\n+<dl>\n+  <dt><code><b><em>MODULE_EXPORTS<\/em><\/b><\/code>: sequence of <\/dt>\n+  <dd>exports <code>CONSTANT_CELL(package)<\/code> [to <code>EXPORT_TO_MODULES<\/code>]; <\/dd>\n+  <dt><code><b><em>EXPORT_TO_MODULES<\/em><\/b><\/code>: list of <\/dt>\n+  <dd><code>CONSTANT_CELL(moduleContent)<\/code> <\/dd>\n+<\/dl>\n+Example:\n+<pre>        exports com\/foo\/bar to <br>            foo2.bar2,<br>            foo3.bar3;\n+<\/pre>\n+<pre>        exports org\/foo\/bar;<\/pre>\n+<a name=\"module_opens\"><\/a>\n+<h2 class=\"head2\">Opens<\/h2>\n+<dl>\n+  <dt><code><b><em>MODULE_OPENS<\/em><\/b><\/code>: sequence of <\/dt>\n+  <dd>opens <code>CONSTANT_CELL(package)<\/code> [to <code>OPENS_TO_MODULES<\/code>]; <\/dd>\n+  <dt><code><b><em>OPENS_TO_MODULES<\/em><\/b><\/code>: list of <\/dt>\n+  <dd><code>CONSTANT_CELL(moduleContent)<\/code> <\/dd>\n+<\/dl>\n+Example:\n+<pre>        opens com\/foo\/bar to <br>            foo2.bar2,<br>            foo3.bar3;\n+<\/pre>\n+<pre>        opens org\/foo\/bar;<\/pre>\n+<a name=\"module_uses\"><\/a>\n+<h2 class=\"head2\">Uses<\/h2>\n+<dl>\n+  <dt><code><b><em>MODULE_USES<\/em><\/b><\/code>: sequence of <\/dt>\n+  <dd>uses <code>CONSTANT_CELL(class)<\/code>; <\/dd>\n+<\/dl>\n+Example:\n+<pre>        uses com\/foo\/bar;\n+<\/pre>\n+<a name=\"module_provides\"><\/a>\n+<h2 class=\"head2\">Provides<\/h2>\n+<dl>\n+  <dt><code><b><em>MODULE_PROVIDES<\/em><\/b><\/code>: sequence of <\/dt>\n+  <dd>provides <code>CONSTANT_CELL(class)<\/code> [with <code>MODULE_PROVIDES_WITH_CLASSES<\/code>]; <\/dd>\n+  <dt><code><b><em>MODULE_PROVIDES_WITH_CLASSES<\/em><\/b><\/code>: list of <\/dt>\n+  <dd><code>CONSTANT_CELL(class)<\/code><\/dd>\n+<\/dl>\n+Example:\n+<pre>        provides com\/foo\/bar with <br>            foo2.bar2,<br>            foo3.bar3;<\/pre>\n+<pre>        provides com\/foo\/bar;<\/pre>\n+<hr noshade=\"noshade\" size=\"7\"><a name=\"pico\"><\/a>\n+<h1 class=\"head1\">PicoJava Instructions<\/h1>\n+These instructions takes 2 bytes: prefix (254 for non-privileged\n+variant and 255 for privileged) and the opcode itself.\n+These instructions can be coded in assembler in 2 ways:\n+as single mnemocode identical to the description or\n+using \"priv\" and \"nonpriv\" instructions followed with an integer\n+representing the opcode.\n+<p class=\"paragraph\"><br>\n+<\/p>\n+<!-- =================== --><!-- END OF MAIN CONTENT --><!-- END OF MAIN CONTENT --><!-- =================== --><!--Begin SiteCatalyst code version: G.5.-->\n+<script language=\"Javascript\" src=\"\/s_code_remote.js\"><\/script><!--End SiteCatalyst code version: G.5.--><br>\n+<br>\n+<center>\n+<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n+  <col width=\"45\"> <col width=\"25\"> <col width=\"30\"> <tbody>\n+    <tr bgcolor=\"#cccccc\">\n+      <td>\n+      <p align=\"left\">Java Assembler Tools (AsmTools) User's Guide<\/p>\n+      <\/td>\n+      <td>\n+      <p align=\"right\">000-0000-00<\/p>\n+      <\/td>\n+      <td valign=\"top\">\n+      <p align=\"right\"><a href=\"index.html\"><img src=\"shared\/toc01.gif\"\n+ name=\"graphics5\" alt=\"Table Of Contents\" align=\"bottom\" border=\"0\"\n+ height=\"26\" width=\"30\"><\/a> <a href=\"chapter3.html\"><img\n+ src=\"shared\/prev01.gif\" name=\"graphics6\" alt=\"Previous Chapter\"\n+ align=\"bottom\" border=\"0\" height=\"26\" width=\"30\"><\/a><a\n+ href=\"appendix2.html\"><img src=\"shared\/next01.gif\" name=\"graphics7\"\n+ alt=\"Next Chapter\" align=\"bottom\" border=\"0\" height=\"26\" width=\"30\"><\/a><a\n+ href=\"ix.html\"><img src=\"shared\/index01.gif\" name=\"graphics8\"\n+ alt=\"Book Index\" align=\"bottom\" border=\"0\" height=\"26\" width=\"30\"><\/a><\/p>\n+      <\/td>\n+    <\/tr>\n+  <\/tbody>\n+<\/table>\n+<\/center>\n+<p class=\"copyrightlink\">\n+<script language=\"javascript\">\n+       O_GoT('<img src=\"\/app\/images\/sm_3E6B8A_oo.gif\" border=\"0\" alt=\"Feedback link\" title=\"Feedback\">Feedback'); <\/script><\/p>\n+<hr noshade=\"noshade\" size=\"7\">\n+<center>\n+Copyright &copy; 2012, 2017, Oracle and\/or its affiliates. All rights reserved.\n+<\/center>\n+<\/body>\n+<\/html>\n","filename":"docs\/jasm.html","additions":2257,"deletions":0,"binary":false,"changes":2257,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n-# JASM Syntax \n+# JASM Syntax\n@@ -10,54 +10,126 @@\n--   [General Syntax](#gensyntax)\n-    -   [Description Formats](#descrfrm)\n-    -   [Lexical Structure](#lex)\n--   [General Class Structure](#genstruct)\n--   [General Module Structure](#genmodule)\n--   [General Source File Structure](#source)\n--   [The Constant Pool and Constant Elements](#cp)\n--   [Constant Declarations](#constant)\n--   [Field Variables](#field)\n--   [Method Declarations](#method)\n--   [Instructions](#instructions)\n-    -   [VM Instructions](#vminstructions)\n-    -   [InvokeDynamic Instructions](#invokedynamicinstructions)\n-    -   [Pseudo Instructions](#pseudoinstructions)\n-        -   [Code Generating Pseudo Instructions](#codepseudo)\n-        -   [Attribute Generating Pseudo Instructions](#attrpseudo)\n--   [Inner Class Declarations](#innercl)\n--   [Annotation Declarations](#annots)\n-    -   [Member Annotations](#memberannots)\n-    -   [Parameter Names and Parameter Annotations](#paramannots)\n-    -   [Default Annotations](#defaultannots)\n--   [Module Properties](#module_properties)\n-    -   [Requires](#module_requires)\n-    -   [Exports](#module_exports)\n-    -   [Opens](#module_opens)\n-    -   [Uses](#module_uses)\n-    -   [Provides](#module_provides)\n--   [PicoJava Instructions](#pico)\n-\n-*** \n-\n-## General Syntax\n-\n- _JASM_ syntax can come in one of two variations: short-form or verbose-form.  Short form uses Java-style names to refer \n- to items in a constant-pool. Verbose form uses explicit constant-pool indexes to refer to items in the constant pool.\n- The normal output from _JDIS_ produces jasm files in the short-form.  Using the -g option for [_JDIS_](UsingTools.md#BADCBFCE)\n-(i.e.  `java -jar asmtools.jar jdis`) produces JASM source in the verbose-form.  \n-\n-The source text file can be free form (newlines are considered blanks) and may contain Java-style commenting. \n-The first line of a JASM file\n-represents the name of the resulting file in the destination directory.\n-This name does not affect the content of the resulting file. This line\n-has two forms:\n-\n-    file FILENAME \n-\n-or\n-\n-    class CLASSNAME \n-\n-In the latter case, extension ` .class ` will be added to form FILENAME.\n-Jasm's `-d option` allows you to define the destination directory. A\n-list of structured dataWriter items follows the class name. The length\n-(in bytes) of each item is determined by its representation.  \n+- [General Class Structure](#general-class-structure)\n+- [General Module Structure](#general-module-structure)\n+- [General Source File Structure](#general-source-file-structure)\n+- [The Constant Pool and Constant Elements](#the-constant-pool-and-constant-elements)\n+- [Constant Declarations](#constant-declarations)\n+- [Field Variables](#field-variables)\n+- [Method Declarations](#method-declarations)\n+- [Instructions](#instructions)\n+  - [Pseudo Instructions](#pseudo-instructions)\n+- [Inner Class Declarations](#inner-class-declarations)\n+- [Annotation Declarations](#annotation-declarations)\n+  - [Member Annotations](#member-annotations)\n+      - [Synopsis](#synopsis)\n+      - [Examples](#examples)\n+  - [Type Annotations](#type-annotations)\n+      - [Synopsis](#synopsis-1)\n+  - [Parameter Names and Parameter Annotations](#parameter-names-and-parameter-annotations)\n+      - [Synopsis](#synopsis-2)\n+      - [Examples](#examples-1)\n+  - [Default Annotations](#default-annotations)\n+      - [Synopsis](#synopsis-3)\n+      - [Examples](#examples-2)\n+- [Module properties](#module-properties)\n+  - [Requires](#requires)\n+  - [Exports](#exports)\n+  - [Opens](#opens)\n+  - [Uses](#uses)\n+  - [Provides](#provides)\n+- [PicoJava Instructions](#picojava-instructions)\n+\n+---\n+\n+## JASM Syntax Overview\n+\n+JASM syntax comes in two forms: short-form and verbose-form:\n+\n+1. **Short-form:** Uses Java-style names to refer to items in the constant-pool.\n+2. **Verbose-form:** Uses constant-pool indexes to explicitly refer to items.\n+By default, the **JDIS** tool outputs short-form JASM files. To generate verbose-form output, use the `-g` option, like this:\n+\n+``` shell\n+java -jar asmtools.jar jdis -g\n+```\n+\n+## File Naming in JASM\n+\n+A JASM file can start with a line specifying the name of the output file. This does not affect the file’s content but determines the file name. The first line can be one of these:\n+\n+- `file FILENAME;`\n+- `classfile CLASSNAME;` (adds `.class` to the name).\n+\n+You can define the destination directory using these options:\n+\n+- `-d`: Specifies the root directory for the output, following the class package structure.\n+- `-w`: Specifies the exact directory for the output file.\n+\n+If neither option is used, JASM outputs to `<stdout>`.\n+\n+## Class Structure in JASM\n+\n+A JASM file defines class or interface items as follows:\n+\n+1. **Optional Package Declaration:**\n+\n+```java\n+package package_name;\n+```\n+\n+2. **Class or Interface Declaration**:\n+\n+```java\n+[CLASS_MODIFIERS] class|interface CLASSNAME [extends SUPERCLASSNAME] { [CLASS_BODY] }\n+```\n+\n+- The `CLASSNAME` determines the resulting file name.\n+- If `this_class` is defined in CLASS_BODY, the name does not affect the file's content but only its name.\n+\n+If both `file FILENAME;` ( or `classfile CLASSNAME;`) and `class CLASSNAME { [CLASS_BODY] }` are present, the file(classfile) declaration takes priority.\n+\n+### Example Command and Output\n+\n+Here is an example of compiling a JASM file:\n+\n+**Input Command:**\n+\n+```shell\n+java -jar asmtools.jar jasm -d . FILE.jasm\n+```\n+\n+**JASM File Content:**\n+\n+```java\n+class FILENAME.data {\n+this_class  CLASSNAME;\n+super_class SUPERCLASSNAME;\n+}\n+```\n+\n+**Output:**\n+\n+A binary file FILENAME.data is created. Decompiling this file (`java -jar asmtools.jar jdis FILENAME.data`) produces:\n+\n+```java\n+super class CLASSNAME extends SUPERCLASSNAME version 45:0 {\n+}\n+```\n+\n+---\n+\n+## Description formats\n+\n+|               |                                                                                                                                        |\n+| ------------- | -------------------------------------------------------------------------------------------------------------------------------------- |\n+| TERM1\\|TERM2  | TERM1 or TERM2 (not both)                                                                                                              |\n+| [ TERM ]      | TERM is optional                                                                                                                       |\n+| TERM...       | TERM repeated 1 or more times                                                                                                          |\n+| [TERM...]     | TERM repeated 0 or more times                                                                                                          |\n+| \"sequence of\" | all the following terms are mandatory, in the order given.                                                                             |\n+| \"set of\"      | any of following terms, or none of them, may appear in any order. However, repetitions are not llowed.                                 |\n+| \"list of\"     | any of following terms, or none of them, may appear in any sequence. If more than one term appear, they are separated by commas (',')  |\n+\n+---\n+## Lexical Structure\n+\n+\n+# TODO\n@@ -67,44 +139,0 @@\n-> <span id=\"descrfrm\"><\/span>\n->\n-> ## Description formats\n->\n-> <table>\n-> <tbody>\n-> <tr class=\"odd\">\n-> <td>TERM1|TERM2<\/td>\n-> <td>TERM1 or TERM2 (not both)<\/td>\n-> <\/tr>\n-> <tr class=\"even\">\n-> <td>[TERM]<\/td>\n-> <td>TERM is optional<\/td>\n-> <\/tr>\n-> <tr class=\"odd\">\n-> <td>TERM...<\/td>\n-> <td>TERM repeated 1 or more times<\/td>\n-> <\/tr>\n-> <tr class=\"even\">\n-> <td>[TERM...]<\/td>\n-> <td>TERM repeated 0 or more times<\/td>\n-> <\/tr>\n-> <tr class=\"odd\">\n-> <td>\"sequence of\"<\/td>\n-> <td>all the following terms are mandatory, in the order given.<\/td>\n-> <\/tr>\n-> <tr class=\"even\">\n-> <td>\"set of\"<\/td>\n-> <td>any of following terms, or none of them, may appear in any order.\n-> However, repetitions are not allowed.<\/td>\n-> <\/tr>\n-> <tr class=\"odd\">\n-> <td>\"list of\"<\/td>\n-> <td>any of following terms, or none of them, may appear in any sequence.\n-> If more than one term appear, they are separated by commas (',')<\/td>\n-> <\/tr>\n-> <\/tbody>\n-> <\/table>\n->\n-> ------------------------------------------------------------------------\n->\n-> <span id=\"lex\"><\/span>\n->\n-> ## Lexical Structure\n@@ -120,1 +148,1 @@\n-> ***`STRING`***:  \n+> _**`STRING`**_:  \n@@ -123,2 +151,2 @@\n-> ***`NUMBER`***:  \n-> ` DIGIT...`\n+> _**`NUMBER`**_:  \n+> `DIGIT...`\n@@ -126,1 +154,1 @@\n-> ***`IDENT`***:  \n+> _**`IDENT`**_:  \n@@ -129,1 +157,1 @@\n-> ***`ACCESS`*** (depends on the context): set of  \n+> _**`ACCESS`**_ (depends on the context): set of  \n@@ -145,1 +173,1 @@\n-> ***`TAG`***: one of  \n+> _**`TAG`**_: one of  \n@@ -151,1 +179,1 @@\n-> ***`LOCAL_NAME`***:  \n+> _**`LOCAL_NAME`**_:  \n@@ -154,1 +182,1 @@\n->  \n+> \n@@ -156,1 +184,1 @@\n-> ***`CONSTANT_INDEX`***:  \n+> _**`CONSTANT_INDEX`**_:  \n@@ -168,1 +196,1 @@\n-***`INTERFACES`***:list of  \n+_**`INTERFACES`**_:list of  \n@@ -171,1 +199,1 @@\n-***`TOP_LEVEL_COMPONENT`***: one of  \n+_**`TOP_LEVEL_COMPONENT`**_: one of  \n@@ -174,1 +202,1 @@\n-***`CLASS`***: sequence of  \n+_**`CLASS`**_: sequence of  \n@@ -197,1 +225,1 @@\n-***`MODULE`***: sequence of  \n+_**`MODULE`**_: sequence of  \n@@ -200,1 +228,1 @@\n-***`TOP_LEVEL_MODULE_PROPERTIES`***: one of  \n+_**`TOP_LEVEL_MODULE_PROPERTIES`**_: one of  \n@@ -213,1 +241,1 @@\n-***`PACKAGE_DECLARATION`***:  \n+_**`PACKAGE_DECLARATION`**_:  \n@@ -218,1 +246,1 @@\n-***`CLASS_FILE`***: sequence of  \n+_**`CLASS_FILE`**_: sequence of  \n@@ -223,1 +251,1 @@\n-***`MODULE_FILE`***:  \n+_**`MODULE_FILE`**_:  \n@@ -228,1 +256,1 @@\n-***`SOURCE_FILE`***:  \n+_**`SOURCE_FILE`**_:  \n@@ -240,1 +268,1 @@\n-***`CONSTANT_CELL`***:  \n+_**`CONSTANT_CELL`**_:  \n@@ -246,2 +274,2 @@\n-***`TAGGED_CONSTANT_VALUE`***:  \n-` [TAG] CONSTANT_VALUE`\n+_**`TAGGED_CONSTANT_VALUE`**_:  \n+`[TAG] CONSTANT_VALUE`\n@@ -283,1 +311,1 @@\n-***`TAGGED_CONSTANT_VALUE`***:\n+_**`TAGGED_CONSTANT_VALUE`**_:\n@@ -436,1 +464,1 @@\n-> <u>*Note*<\/u>  \n+> <u>_Note_<\/u>  \n@@ -438,1 +466,1 @@\n-> an entry in the *BootstrapMethods* attribute (the *BootstrapMethods*\n+> an entry in the _BootstrapMethods_ attribute (the _BootstrapMethods_\n@@ -440,1 +468,1 @@\n-> contains a reference to the *MethodHandle* item in the constant pool,\n+> contains a reference to the _MethodHandle_ item in the constant pool,\n@@ -442,1 +470,1 @@\n-> arguments (*ldc*-type constants) to the *bootstrap method*\n+> arguments (_ldc_-type constants) to the _bootstrap method_\n@@ -447,1 +475,1 @@\n-***`INVOKESUBTAG:             [INVOKESUBTAG_INDEX]`***\n+_**`INVOKESUBTAG:             [INVOKESUBTAG_INDEX]`**_\n@@ -492,2 +520,2 @@\n-***`INVOKEDYNAMIC_STATIC_ARGUMENTS`***:  \n-` INVOKEDYNAMIC_STATIC_ARG ',' ...`\n+_**`INVOKEDYNAMIC_STATIC_ARGUMENTS`**_:  \n+`INVOKEDYNAMIC_STATIC_ARG ',' ...`\n@@ -495,2 +523,2 @@\n-***`INVOKEDYNAMIC_STATIC_ARG`***: (one of)  \n-` INVOKEDYNAMIC_STATIC_ARG_CONSTANT_VALUE`\n+_**`INVOKEDYNAMIC_STATIC_ARG`**_: (one of)  \n+`INVOKEDYNAMIC_STATIC_ARG_CONSTANT_VALUE`\n@@ -498,1 +526,1 @@\n-***`INVOKEDYNAMIC_STATIC_ARG_CONSTANT_VALUE`***:\n+_**`INVOKEDYNAMIC_STATIC_ARG_CONSTANT_VALUE`**_:\n@@ -567,4 +595,2 @@\n- \n-\n-***`CONSTANT_NAME`***:  \n-` CONSTANT_INDEX`  \n+_**`CONSTANT_NAME`**_:  \n+`CONSTANT_INDEX`  \n@@ -573,2 +599,2 @@\n-***`EXTERNAL_NAME`***:  \n-` IDENT STRING`\n+_**`EXTERNAL_NAME`**_:  \n+`IDENT STRING`\n@@ -580,1 +606,1 @@\n-***`NAME_AND_TYPE`***:  \n+_**`NAME_AND_TYPE`**_:  \n@@ -587,2 +613,2 @@\n-***`CONSTANT_FIELD`***:  \n-` CONSTANT_INDEX`  \n+_**`CONSTANT_FIELD`**_:  \n+`CONSTANT_INDEX`  \n@@ -607,2 +633,2 @@\n-***`CONSTANT_DECLARATION`***:  \n-` const CONSTANT_DECLARATORS ;`\n+_**`CONSTANT_DECLARATION`**_:  \n+`const CONSTANT_DECLARATORS ;`\n@@ -610,1 +636,1 @@\n-***`CONSTANT_DECLARATORS`***: list of  \n+_**`CONSTANT_DECLARATORS`**_: list of  \n@@ -613,1 +639,1 @@\n-***`CONSTANT_DECLARATOR`***:  \n+_**`CONSTANT_DECLARATOR`**_:  \n@@ -622,1 +648,1 @@\n-***`FIELD_DECLARATION`***:  \n+_**`FIELD_DECLARATION`**_:  \n@@ -625,1 +651,1 @@\n-***`FIELD_DECLARATORS`***: list of  \n+_**`FIELD_DECLARATORS`**_: list of  \n@@ -628,1 +654,1 @@\n-***`FIELD_DECLARATOR`***:  \n+_**`FIELD_DECLARATOR`**_:  \n@@ -652,1 +678,1 @@\n-***`METHOD_DECLARATION`***: sequence of  \n+_**`METHOD_DECLARATION`**_: sequence of  \n@@ -659,1 +685,1 @@\n-`  ANNOTATIONS }`\n+`ANNOTATIONS }`\n@@ -669,1 +695,1 @@\n-***`THROWS`***:  \n+_**`THROWS`**_:  \n@@ -672,1 +698,1 @@\n-***`EXCEPTIONS`***: list of  \n+_**`EXCEPTIONS`**_: list of  \n@@ -679,1 +705,1 @@\n-***`STACK_SIZE`***:  \n+_**`STACK_SIZE`**_:  \n@@ -684,1 +710,1 @@\n-***`LOCAL_VAR_SIZE`***:  \n+_**`LOCAL_VAR_SIZE`**_:  \n@@ -701,1 +727,1 @@\n-> ***`INSTRUCTION_STATEMENT`***:  \n+> _**`INSTRUCTION_STATEMENT`**_:  \n@@ -709,2 +735,2 @@\n-> ***`INSTRUCTION`***:  \n-> `OPCODE [ARGUMENTS] `\n+> _**`INSTRUCTION`**_:  \n+> `OPCODE [ARGUMENTS]`\n@@ -712,1 +738,1 @@\n-> ***`ARGUMENTS`***: list of  \n+> _**`ARGUMENTS`**_: list of  \n@@ -715,1 +741,1 @@\n-> ***`ARGUMENT`***:  \n+> _**`ARGUMENT`**_:  \n@@ -718,1 +744,1 @@\n-> ***`LABEL`***:  \n+> _**`LABEL`**_:  \n@@ -721,1 +747,1 @@\n-> ***`LOCAL_VARIABLE`***:  \n+> _**`LOCAL_VARIABLE`**_:  \n@@ -724,1 +750,1 @@\n-> ***`TRAP_IDENT`***:  \n+> _**`TRAP_IDENT`**_:  \n@@ -727,1 +753,1 @@\n-> ***`TYPE`***:  \n+> _**`TYPE`**_:  \n@@ -730,1 +756,1 @@\n-> ***`SWITCHTABLE`***:  \n+> _**`SWITCHTABLE`**_:  \n@@ -736,9 +762,9 @@\n->          case 11:\n->         x=1;\n->         break;\n->          case 12:\n->          x=2;\n->         break;\n->          default:\n->          x=3;\n->          }\n+>      case 11:\n+>     x=1;\n+>     break;\n+>      case 12:\n+>      x=2;\n+>     break;\n+>      default:\n+>      x=3;\n+>      }\n@@ -746,1 +772,1 @@\n->       \n+>   \n@@ -751,13 +777,13 @@\n->        11: L24;\n->         12: L29;\n->         default: L34\n->          }\n->     L24: iconst_1; \n->          istore_1;\n->          goto  L36;\n->     L29: iconst_2 ;\n->          istore_1;\n->          goto  L36;\n->     L34: iconst_3; \n->          istore_1;\n->     L36:    ....\n+>    11: L24;\n+>     12: L29;\n+>     default: L34\n+>      }\n+> L24: iconst_1; \n+>      istore_1;\n+>      goto  L36;\n+> L29: iconst_2 ;\n+>      istore_1;\n+>      goto  L36;\n+> L34: iconst_3; \n+>      istore_1;\n+> L36:    ....\n@@ -765,1 +791,1 @@\n->       \n+>   \n@@ -839,22 +865,22 @@\n-> <td style=\"vertical-align: top\"> aaload,  aastore,  aconst_null, \n-> aload_0,  aload_1,  aload_2,  aload_3,  aload_w ,  areturn, \n-> arraylength,  astore_0,  astore_1,  astore_2,  astore_3,  astore_w, \n-> athrow,  baload,  bastore,  caload,  castore,  d2f,  d2i,  d2l,  dadd, \n-> daload,  dastore,  dcmpg,  dcmpl,  dconst_0,  dconst_1,  ddiv,  dead, \n-> dload_0,  dload_1,  dload_2,  dload_3,  dload_w ,  dmul,  dneg,  drem, \n-> dreturn,  dstore_0,  dstore_1,  dstore_2,  dstore_3,  dstore_w,  dsub, \n-> dup,  dup2,  dup2_x1,  dup2_x2,  dup_x1,  dup_x2,  f2d,  f2i,  f2l, \n-> fadd,  faload,  fastore,  fcmpg,  fcmpl,  fconst_0,  fconst_1, \n-> fconst_2,  fdiv,  fload_0,  fload_1,  fload_2,  fload_3,  fload_w, \n-> fmul,  fneg,  frem,  freturn ,  fstore_0,  fstore_1,  fstore_2, \n-> fstore_3,  fstore_w,  fsub ,  i2b,  i2c,  i2d,  i2f,  i2l,  i2s,  iadd, \n-> iaload,  iand,  iastore,  iconst_0,  iconst_1,  iconst_2,  iconst_3, \n-> iconst_4,  iconst_5,  iconst_m1,  idiv,  iinc_w,  iload_0,  iload_1, \n-> iload_2,  iload_3,  iload_w,  imul,  ineg,  int2byte,  int2char, \n-> int2short,  ior,  irem,  ireturn,  ishl,  ishr,  istore_0,  istore_1, \n-> istore_2,  istore_3,  istore_w,  isub,  iushr,  ixor,  l2d,  l2f,  l2i, \n-> label,  ladd,  laload,  land,  lastore,  lcmp,  lconst_0,  lconst_1, \n-> ldiv,  lload_0,  lload_1,  lload_2,  lload_3,  lload_w,  lmul,  lneg, \n-> lor,  lrem,  lreturn,  lshl,  lshr,  lstore_0,  lstore_1,  lstore_2, \n-> lstore_3,  lstore_w,  lsub,  lushr,  lxor,  monitorenter,  monitorexit, \n-> nonpriv,  nop,  pop,  pop2,  priv,  ret,  return,  ret_w,  saload, \n+> <td style=\"vertical-align: top\"> aaload,  aastore,  aconst_null,\n+> aload_0,  aload_1,  aload_2,  aload_3,  aload_w ,  areturn,\n+> arraylength,  astore_0,  astore_1,  astore_2,  astore_3,  astore_w,\n+> athrow,  baload,  bastore,  caload,  castore,  d2f,  d2i,  d2l,  dadd,\n+> daload,  dastore,  dcmpg,  dcmpl,  dconst_0,  dconst_1,  ddiv,  dead,\n+> dload_0,  dload_1,  dload_2,  dload_3,  dload_w ,  dmul,  dneg,  drem,\n+> dreturn,  dstore_0,  dstore_1,  dstore_2,  dstore_3,  dstore_w,  dsub,\n+> dup,  dup2,  dup2_x1,  dup2_x2,  dup_x1,  dup_x2,  f2d,  f2i,  f2l,\n+> fadd,  faload,  fastore,  fcmpg,  fcmpl,  fconst_0,  fconst_1,\n+> fconst_2,  fdiv,  fload_0,  fload_1,  fload_2,  fload_3,  fload_w,\n+> fmul,  fneg,  frem,  freturn ,  fstore_0,  fstore_1,  fstore_2,\n+> fstore_3,  fstore_w,  fsub ,  i2b,  i2c,  i2d,  i2f,  i2l,  i2s,  iadd,\n+> iaload,  iand,  iastore,  iconst_0,  iconst_1,  iconst_2,  iconst_3,\n+> iconst_4,  iconst_5,  iconst_m1,  idiv,  iinc_w,  iload_0,  iload_1,\n+> iload_2,  iload_3,  iload_w,  imul,  ineg,  int2byte,  int2char,\n+> int2short,  ior,  irem,  ireturn,  ishl,  ishr,  istore_0,  istore_1,\n+> istore_2,  istore_3,  istore_w,  isub,  iushr,  ixor,  l2d,  l2f,  l2i,\n+> label,  ladd,  laload,  land,  lastore,  lcmp,  lconst_0,  lconst_1,\n+> ldiv,  lload_0,  lload_1,  lload_2,  lload_3,  lload_w,  lmul,  lneg,\n+> lor,  lrem,  lreturn,  lshl,  lshr,  lstore_0,  lstore_1,  lstore_2,\n+> lstore_3,  lstore_w,  lsub,  lushr,  lxor,  monitorenter,  monitorexit,\n+> nonpriv,  nop,  pop,  pop2,  priv,  ret,  return,  ret_w,  saload,\n@@ -872,1 +898,1 @@\n-> *InvokeDynamic instructions* are instructions that allow dynamic\n+> _InvokeDynamic instructions_ are instructions that allow dynamic\n@@ -875,1 +901,1 @@\n-> to create a *BootstrapMethods* attribute for entries of binding\n+> to create a _BootstrapMethods_ attribute for entries of binding\n@@ -879,1 +905,4 @@\n-> >           version 51:0\n+> >       version 51:0\n+> > {\n+> >     Method m:\"()V\"\n+> >       stack 0 locals 1\n@@ -881,8 +910,5 @@\n-> >         Method m:\"()V\"\n-> >           stack 0 locals 1\n-> >         {\n-> >            invokedynamic InvokeDynamic REF_invokeSpecial:bsmName:\"()V\"   \/\/ information about bootstrap method\n-> >                                                         :methName:\"(I)I\" \/\/ dynamic call-site name (\"methName\") plus the argument and return types of the call (\"(I)I\")\n-> >                                                          int 1, long 2l; \/\/ optional sequence of additional static arguments to the bootstrap method (ldc-type constants)\n-> >         }\n-> >     } \/\/ end Class Test\n+> >        invokedynamic InvokeDynamic REF_invokeSpecial:bsmName:\"()V\"   \/\/ information about bootstrap method\n+> >                                                     :methName:\"(I)I\" \/\/ dynamic call-site name (\"methName\") plus the argument and return types of the call (\"(I)I\")\n+> >                                                      int 1, long 2l; \/\/ optional sequence of additional static arguments to the bootstrap method (ldc-type constants)\n+> >     }\n+> > } \/\/ end Class Test\n@@ -890,2 +916,2 @@\n-> This JASM code has an *invokedynamic* instruction of the form:\n-> ***invokedynamic InvokeDynamic (CONSTANT\\_CELL(INVOKEDYNAMIC))***\n+> This JASM code has an _invokedynamic_ instruction of the form:\n+> _**invokedynamic InvokeDynamic (CONSTANT\\_CELL(INVOKEDYNAMIC))**_\n@@ -894,2 +920,2 @@\n->   \n-> (i.e. *invokedynamic InvokeDynamic INVOKESUBTAG : CONSTANT\\_FIELD\n+> \n+> (i.e. _invokedynamic InvokeDynamic INVOKESUBTAG : CONSTANT\\_FIELD\n@@ -897,1 +923,1 @@\n-> (Optional)\\]* ).\n+> (Optional)\\]_ ).\n@@ -906,2 +932,2 @@\n-> >       version 51:0\n-> >     {\n+> >   version 51:0\n+> > {\n@@ -909,22 +935,22 @@\n-> >     const #1 = InvokeDynamic   0:#11;  \/\/  REF_invokeSpecial:Test3.bsmName:\"()V\":name:\"(I)I\" int 1, long 2l\n-> >     const #2 = Asciz    \"Test3\";\n-> >     const #3 = long 2l;\n-> >     const #5 = class #6; \/\/  java\/lang\/Object\n-> >     const #6 = Asciz    \"java\/lang\/Object\";\n-> >     const #7 = Asciz \"name\";\n-> >     const #8 = int   1;\n-> >     const #9 = Asciz  \"SourceFile\";\n-> >     const #10 = Asciz  \"Test3.jasm\";\n-> >     const #11 = NameAndType    #7:#21; \/\/  name:\"(I)I\"\n-> >     const #12 = Asciz    \"()V\";\n-> >     const #13 = Method    #22.#17;    \/\/  Test3.bsmName:\"()V\"\n-> >     const #14 = Asciz    \"Code\";\n-> >     const #15 = Asciz    \"m\";\n-> >     const #16 = Asciz   \"BootstrapMethods\";\n-> >     const #17 = NameAndType  #20:#12;    \/\/  bsmName:\"()V\"\n-> >     const #18 = Asciz  \"LineNumberTable\";\n-> >     const #19 = MethodHandle  7:#13;  \/\/  REF_invokeSpecial:Test3.bsmName:\"()V\"\n-> >     const #20 = Asciz  \"bsmName\";\n-> >     const #21 = Asciz \"(I)I\";\n-> >     const #22 = class    #2; \/\/  Test3\n-> >     const #23 = class  #6; \/\/  java\/lang\/Object\n+> > const #1 = InvokeDynamic   0:#11;  \/\/  REF_invokeSpecial:Test3.bsmName:\"()V\":name:\"(I)I\" int 1, long 2l\n+> > const #2 = Asciz    \"Test3\";\n+> > const #3 = long 2l;\n+> > const #5 = class #6; \/\/  java\/lang\/Object\n+> > const #6 = Asciz    \"java\/lang\/Object\";\n+> > const #7 = Asciz \"name\";\n+> > const #8 = int   1;\n+> > const #9 = Asciz  \"SourceFile\";\n+> > const #10 = Asciz  \"Test3.jasm\";\n+> > const #11 = NameAndType    #7:#21; \/\/  name:\"(I)I\"\n+> > const #12 = Asciz    \"()V\";\n+> > const #13 = Method    #22.#17;    \/\/  Test3.bsmName:\"()V\"\n+> > const #14 = Asciz    \"Code\";\n+> > const #15 = Asciz    \"m\";\n+> > const #16 = Asciz   \"BootstrapMethods\";\n+> > const #17 = NameAndType  #20:#12;    \/\/  bsmName:\"()V\"\n+> > const #18 = Asciz  \"LineNumberTable\";\n+> > const #19 = MethodHandle  7:#13;  \/\/  REF_invokeSpecial:Test3.bsmName:\"()V\"\n+> > const #20 = Asciz  \"bsmName\";\n+> > const #21 = Asciz \"(I)I\";\n+> > const #22 = class    #2; \/\/  Test3\n+> > const #23 = class  #6; \/\/  java\/lang\/Object\n@@ -934,5 +960,5 @@\n-> >     Method #15:#12\n-> >       stack 0 locals 1\n-> >     {\n-> >        0:  invokedynamic InvokeDynamic #1; \/\/  InvokeDynamic REF_invokeSpecial:Test3.bsmName:\"()V\":name:\"(I)I\" int 1, long 2l;\n-> >     }\n+> > Method #15:#12\n+> >   stack 0 locals 1\n+> > {\n+> >    0:  invokedynamic InvokeDynamic #1; \/\/  InvokeDynamic REF_invokeSpecial:Test3.bsmName:\"()V\":name:\"(I)I\" int 1, long 2l;\n+> > }\n@@ -940,1 +966,1 @@\n-> >     BootstrapMethod #19 #8 #3;\n+> > BootstrapMethod #19 #8 #3;\n@@ -942,1 +968,1 @@\n-> >     } \/\/ end Class Test3\n+> > } \/\/ end Class Test3\n@@ -947,1 +973,1 @@\n-> refers to the *MethodHandle* at const \\#19, plus 2 other static args\n+> refers to the _MethodHandle_ at const \\#19, plus 2 other static args\n@@ -963,1 +989,1 @@\n-> The *bytecode* directive instructs the assembler to put a collection\n+> The _bytecode_ directive instructs the assembler to put a collection\n@@ -965,1 +991,1 @@\n->   \n+> \n@@ -967,1 +993,1 @@\n-> ***`bytecode NUMBERS`***  \n+> _**`bytecode NUMBERS`**_  \n@@ -984,1 +1010,1 @@\n-> > ***`var LOCAL_VARIABLE`***  \n+> > _**`var LOCAL_VARIABLE`**_  \n@@ -987,1 +1013,1 @@\n-> > ***`endvar LOCAL_VARIABLE`***  \n+> > _**`endvar LOCAL_VARIABLE`**_  \n@@ -994,3 +1020,3 @@\n-> >      Tester inst = new Tester();\n-> >             inst.callSub();\n-> >         }\n+> >  Tester inst = new Tester();\n+> >         inst.callSub();\n+> >     }\n@@ -1001,14 +1027,14 @@\n-> > > > >        stack 2 locals 2\n-> > > > >     {\n-> > > > >     4       var 0; \/\/ args:\"[Ljava\/lang\/String;\"\n-> > > > >      0:  new #1; \/\/  class Tester;\n-> > > > >        3:  dup;\n-> > > > >         4:  invokespecial   #2; \/\/  Method \"<init>\":\"()V\";\n-> > > > >         7:  astore_1;\n-> > > > >     6       var 1; \/\/ inst:\"LTester;\"\n-> > > > >         8:  aload_1;\n-> > > > >         9:  invokevirtual   #3; \/\/  Method callSub:\"()V\";\n-> > > > >     7  12: return;\n-> > > > >             endvar 0, 1;\n-> > > > >      \n-> > > > >     }\n+> > > > >    stack 2 locals 2\n+> > > > > {\n+> > > > > 4       var 0; \/\/ args:\"[Ljava\/lang\/String;\"\n+> > > > >  0:  new #1; \/\/  class Tester;\n+> > > > >    3:  dup;\n+> > > > >     4:  invokespecial   #2; \/\/  Method \"<init>\":\"()V\";\n+> > > > >     7:  astore_1;\n+> > > > > 6       var 1; \/\/ inst:\"LTester;\"\n+> > > > >     8:  aload_1;\n+> > > > >     9:  invokevirtual   #3; \/\/  Method callSub:\"()V\";\n+> > > > > 7  12: return;\n+> > > > >         endvar 0, 1;\n+> > > > >  \n+> > > > > }\n@@ -1020,1 +1046,1 @@\n-> > > ***`try TRAP_IDENT`***  \n+> > > _**`try TRAP_IDENT`**_  \n@@ -1023,1 +1049,1 @@\n-> > > ***`endtry TRAP_IDENT`***  \n+> > > _**`endtry TRAP_IDENT`**_  \n@@ -1026,1 +1052,1 @@\n-> > > ***`catch TRAP_IDENT CONSTANT_CELL(class)`***  \n+> > > _**`catch TRAP_IDENT CONSTANT_CELL(class)`**_  \n@@ -1048,8 +1074,3 @@\n-> >           try {\n-> >               throw new Exception(\"EXC\");\n-> >           } catch (NullPointerException e){\n-> >               throw e;\n-> >              } catch (Exception e){\n-> >              throw e;\n-> >              }\n-> >        } catch (Throwable e){\n+> >       try {\n+> >           throw new Exception(\"EXC\");\n+> >       } catch (NullPointerException e){\n@@ -1057,1 +1078,6 @@\n-> >         }\n+> >          } catch (Exception e){\n+> >          throw e;\n+> >          }\n+> >    } catch (Throwable e){\n+> >       throw e;\n+> >     }\n@@ -1062,19 +1088,19 @@\n-> > >             new class java\/lang\/Exception;\n-> > >           dup;\n-> > >             ldc String \"EXC\";\n-> > >            invokespecial java\/lang\/Exception.<init>:\"(Ljava\/lang\/String;)V\";\n-> > >          athrow;\n-> > >         endtry R1;\n-> > >         catch R1 java\/lang\/NullPointerException; \/\/ only one \"catch\" per entry allowed\n-> > >            astore_1;\n-> > >            aload_1;\n-> > >             athrow;\n-> > >         catch R1 java\/lang\/Exception; \/\/ same region (R1) can appear in different catches\n-> > >             astore_1;\n-> > >            aload_1;\n-> > >             athrow;\n-> > >         endtry R2;\n-> > >         catch R2 java\/lang\/Throwable;\n-> > >             astore_1;\n-> > >            aload_1;\n-> > >             athrow;\n+> > >         new class java\/lang\/Exception;\n+> > >       dup;\n+> > >         ldc String \"EXC\";\n+> > >        invokespecial java\/lang\/Exception.<init>:\"(Ljava\/lang\/String;)V\";\n+> > >      athrow;\n+> > >     endtry R1;\n+> > >     catch R1 java\/lang\/NullPointerException; \/\/ only one \"catch\" per entry allowed\n+> > >        astore_1;\n+> > >        aload_1;\n+> > >         athrow;\n+> > >     catch R1 java\/lang\/Exception; \/\/ same region (R1) can appear in different catches\n+> > >         astore_1;\n+> > >        aload_1;\n+> > >         athrow;\n+> > >     endtry R2;\n+> > >     catch R2 java\/lang\/Throwable;\n+> > >         astore_1;\n+> > >        aload_1;\n+> > >         athrow;\n@@ -1082,1 +1108,1 @@\n-> > >           \n+> > >       \n@@ -1086,2 +1112,2 @@\n-> > Stack Maps are denoted by the pseudo-op opcode *stack\\_map, and they\n-> > can be identified by three basic items:*\n+> > Stack Maps are denoted by the pseudo-op opcode _stack\\_map, and they\n+> > can be identified by three basic items:_\n@@ -1089,2 +1115,2 @@\n-> > ***`StackMapStatement =`***` `stack\\_map\n-> > ***`(stackMap_Item_MapType |stackMap_Item_Object | stackMap_Item_NewObject)`***` `\n+> > _**`StackMapStatement =`**_``stack\\_map\n+> > _**`(stackMap_Item_MapType |stackMap_Item_Object | stackMap_Item_NewObject)`**_``\n@@ -1092,5 +1118,5 @@\n-> > ***`stackMap_Item_MapType = (`***bogus | int | float | double | long\n-> > | null | this | CP***`)`***` `  \n-> >   \n-> > ***`stackMap_Item_Object = CONSTANT_CELL_CLASS`***  \n-> > ***`stackMap_Item_NewObject =`***` `at` `***`LABEL`***` `\n+> > _**`stackMap_Item_MapType = (`_**bogus | int | float | double | long\n+> > | null | this | CP**_`)`**_``  \n+> > \n+> > _**`stackMap_Item_Object = CONSTANT_CELL_CLASS`**_  \n+> > _**`stackMap_Item_NewObject =`**_``at``_**`LABEL`**_``\n@@ -1105,9 +1131,9 @@\n-> >         stack 1 locals 1\n-> >     {\n-> >             aload_0;\n-> >             invokespecial    Method java\/lang\/Object.\"<init>\":\"()V\";\n-> >             return;\n-> >             stack_frame_type full;\n-> >             stack_map bogus;\n-> >             ...\n-> >     }\n+> >     stack 1 locals 1\n+> > {\n+> >         aload_0;\n+> >         invokespecial    Method java\/lang\/Object.\"<init>\":\"()V\";\n+> >         return;\n+> >         stack_frame_type full;\n+> >         stack_map bogus;\n+> >         ...\n+> > }\n@@ -1115,1 +1141,1 @@\n-> >   \n+> > \n@@ -1117,1 +1143,1 @@\n-> >   \n+> > \n@@ -1120,1 +1146,1 @@\n-> >     stack 2 locals 1  \n+> > stack 2 locals 1  \n@@ -1122,4 +1148,4 @@\n-> >         ...  \n-> > ***        stack\\_map class java\/lang\/Object;***  \n-> >         nop;  \n-> >         return;  \n+> > ...  \n+> > ***stack\\_map class java\/lang\/Object;***  \n+> > nop;  \n+> > return;  \n@@ -1129,1 +1155,1 @@\n-> >   \n+> > \n@@ -1132,1 +1158,1 @@\n-> >     stack 2 locals 1  \n+> > stack 2 locals 1  \n@@ -1134,4 +1160,4 @@\n-> >         ...  \n-> > ***        stack\\_map at L5;***  \n-> >         nop;  \n-> >         return;  \n+> > ...  \n+> > ***stack\\_map at L5;***  \n+> > nop;  \n+> > return;  \n@@ -1139,1 +1165,1 @@\n-> >   \n+> > \n@@ -1148,1 +1174,1 @@\n-> > ***`StackFrameStatement =`***` `stack\\_frame\\_type` `***`frame_type`***\n+> > _**`StackFrameStatement =`**_``stack\\_frame\\_type``_**`frame_type`**_\n@@ -1150,4 +1176,4 @@\n-> > ***`frame_type = (`*** same | stack1 | stack1\\_ex | chop1 | chop2 |\n-> > chop3 | same\\_ex | append | full ***`)`***  \n-> >   \n-> > <u>Example 1 (full *stack frame type*):<\/u>  \n+> > _**`frame_type = (`**_ same | stack1 | stack1\\_ex | chop1 | chop2 |\n+> > chop3 | same\\_ex | append | full _**`)`**_  \n+> > \n+> > <u>Example 1 (full _stack frame type_):<\/u>  \n@@ -1156,9 +1182,9 @@\n-> >         stack 1 locals 1\n-> >     {\n-> >             aload_0;\n-> >             invokespecial    Method java\/lang\/Object.\"<init>\":\"()V\";\n-> >             return;\n-> >             stack_frame_type full;\n-> >             stack_map bogus;\n-> >             ...\n-> >     }\n+> >     stack 1 locals 1\n+> > {\n+> >         aload_0;\n+> >         invokespecial    Method java\/lang\/Object.\"<init>\":\"()V\";\n+> >         return;\n+> >         stack_frame_type full;\n+> >         stack_map bogus;\n+> >         ...\n+> > }\n@@ -1166,1 +1192,1 @@\n-> > <u>Example 2 (append, chop2, and same *stack frame types*):<\/u>  \n+> > <u>Example 2 (append, chop2, and same _stack frame types_):<\/u>  \n@@ -1169,19 +1195,19 @@\n-> >        stack 2 locals 5\n-> >     {\n-> >             ...\n-> >          iload_2;\n-> >             iconst_2;\n-> >            if_icmpge   L30;\n-> >         L27:    stack_frame_type append;\n-> >          locals_map int, int;\n-> >             iconst_2;\n-> >            istore  4;\n-> >         L30:    stack_frame_type chop2;\n-> >           goto    L9;\n-> >         L33:    stack_frame_type same;\n-> >            getstatic   Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\";\n-> >          ldc String \"Chop2 attribute test\";\n-> >           invokevirtual   Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\";\n-> >          return;\n-> >             ...\n-> >     }\n+> >    stack 2 locals 5\n+> > {\n+> >         ...\n+> >      iload_2;\n+> >         iconst_2;\n+> >        if_icmpge   L30;\n+> >     L27:    stack_frame_type append;\n+> >      locals_map int, int;\n+> >         iconst_2;\n+> >        istore  4;\n+> >     L30:    stack_frame_type chop2;\n+> >       goto    L9;\n+> >     L33:    stack_frame_type same;\n+> >        getstatic   Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\";\n+> >      ldc String \"Chop2 attribute test\";\n+> >       invokevirtual   Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\";\n+> >      return;\n+> >         ...\n+> > }\n@@ -1191,1 +1217,1 @@\n-> > Locals Maps are typically associated with a *stack\\_frame\\_type*,\n+> > Locals Maps are typically associated with a _stack\\_frame\\_type_,\n@@ -1193,1 +1219,1 @@\n-> > *stack\\_frame\\_type* directive.\n+> > _stack\\_frame\\_type_ directive.\n@@ -1195,1 +1221,1 @@\n-> > ***`LocalsMapStatement =`***` `locals\\_map` `***`locals_type (, locals_type )*`***\n+> > _**`LocalsMapStatement =`**_``locals\\_map``_**`locals_type (, locals_type )*`**_\n@@ -1197,3 +1223,3 @@\n-> > ***`locals_type = stackMap_Item_MapType | CONSTANT_CELL_CLASS`***` `  \n-> >   \n-> > <u>Example (a *locals map* specifying 2 ints):<\/u>\n+> > _**`locals_type = stackMap_Item_MapType | CONSTANT_CELL_CLASS`**_``  \n+> > \n+> > <u>Example (a _locals map_ specifying 2 ints):<\/u>\n@@ -1202,19 +1228,19 @@\n-> >        stack 2 locals 5\n-> >     {\n-> >             ...\n-> >          iload_2;\n-> >             iconst_2;\n-> >            if_icmpge   L30;\n-> >         L27:    stack_frame_type append;\n-> >             locals_map int, int;\n-> >          iconst_2;\n-> >            istore  4;\n-> >       L30:    stack_frame_type chop2;\n-> >          goto    L9;\n-> >      L33:    stack_frame_type same;\n-> >           getstatic   Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\";\n-> >          ldc String \"Chop2 attribute test\";\n-> >           invokevirtual   Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\";\n-> >          return;\n-> >             ...\n-> >     }\n+> >    stack 2 locals 5\n+> > {\n+> >         ...\n+> >      iload_2;\n+> >         iconst_2;\n+> >        if_icmpge   L30;\n+> >     L27:    stack_frame_type append;\n+> >         locals_map int, int;\n+> >      iconst_2;\n+> >        istore  4;\n+> >   L30:    stack_frame_type chop2;\n+> >      goto    L9;\n+> >  L33:    stack_frame_type same;\n+> >       getstatic   Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\";\n+> >      ldc String \"Chop2 attribute test\";\n+> >       invokevirtual   Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\";\n+> >      return;\n+> >         ...\n+> > }\n@@ -1228,1 +1254,1 @@\n-***`INNER_CLASS_DECLARATIONS`***: list of  \n+_**`INNER_CLASS_DECLARATIONS`**_: list of  \n@@ -1231,2 +1257,2 @@\n-***`INNER_CLASS_DECLARATION`***:  \n-`INNER_CLASS_ACCESS `**`InnerClass`**` [INNER_CLASS_NAME`**`=`**`]? INNER_CLASS_INFO [`**`of`**` OUTER_CLASS_INFO]? ;`\n+_**`INNER_CLASS_DECLARATION`**_:  \n+`INNER_CLASS_ACCESS`**`InnerClass`**`[INNER_CLASS_NAME`**`=`**`]? INNER_CLASS_INFO [`**`of`**`OUTER_CLASS_INFO]? ;`\n@@ -1234,1 +1260,1 @@\n-***`INNER_CLASS_NAME`***:  \n+_**`INNER_CLASS_NAME`**_:  \n@@ -1237,2 +1263,2 @@\n-***`INNER_CLASS_INFO`***:  \n-`CONSTANT_CELL(class) `\n+_**`INNER_CLASS_INFO`**_:  \n+`CONSTANT_CELL(class)`\n@@ -1240,1 +1266,1 @@\n-***`OUTER_CLASS_INFO`***:  \n+_**`OUTER_CLASS_INFO`**_:  \n@@ -1243,1 +1269,1 @@\n-***`INNER_CLASS_ACCESS`***`: list of`  \n+_**`INNER_CLASS_ACCESS`**_`: list of`  \n@@ -1250,2 +1276,0 @@\n- \n-\n@@ -1271,1 +1295,1 @@\n-***`ANNOTATIONS`***:    \n+_**`ANNOTATIONS`**_:\n@@ -1274,2 +1298,2 @@\n-***`ANNOTATION_DECLARATION`***:  \n-**`@+`**`|`**`@-`**` ANNOTATION_NAME [ANNOTATION_VALUE_DECLARATIONS]`\n+_**`ANNOTATION_DECLARATION`**_:  \n+**`@+`**`|`**`@-`**`ANNOTATION_NAME [ANNOTATION_VALUE_DECLARATIONS]`\n@@ -1280,1 +1304,1 @@\n-***`ANNOTATION_NAME`***:  \n+_**`ANNOTATION_NAME`**_:  \n@@ -1283,1 +1307,1 @@\n-***`ANNOTATION_VALUE_DECLARATIONS`***: list of (comma separated)    \n+_**`ANNOTATION_VALUE_DECLARATIONS`**_: list of (comma separated)\n@@ -1286,1 +1310,1 @@\n-***`ANNOTATION_VALUE_DECLARATION`***:  \n+_**`ANNOTATION_VALUE_DECLARATION`**_:  \n@@ -1289,1 +1313,1 @@\n-***`ANNOTATION_VALUE_IDENT`***:  \n+_**`ANNOTATION_VALUE_IDENT`**_:  \n@@ -1292,1 +1316,1 @@\n-***`ANNOTATION_VALUE`***:  \n+_**`ANNOTATION_VALUE`**_:  \n@@ -1295,1 +1319,1 @@\n-***`ANNOTATION_VALUE_PRIMITIVE`***:  \n+_**`ANNOTATION_VALUE_PRIMITIVE`**_:  \n@@ -1300,2 +1324,2 @@\n-***`CLASS`***:  \n-**`class`**` CONSTANT_CELL(class)`\n+_**`CLASS`**_:  \n+**`class`**`CONSTANT_CELL(class)`\n@@ -1305,1 +1329,1 @@\n-***`ENUM`***:  \n+_**`ENUM`**_:  \n@@ -1310,1 +1334,1 @@\n-***`PRIMITIVE_TYPE`***:  \n+_**`PRIMITIVE_TYPE`**_:  \n@@ -1313,1 +1337,1 @@\n-***<u>Note<\/u>***  \n+_**<u>Note<\/u>**_  \n@@ -1326,1 +1350,1 @@\n-    (eg. Double = xxx.x**d**, Float = xxx.x**f**, Long = xxx**L**).   \n+    (eg. Double = xxx.x**d**, Float = xxx.x**f**, Long = xxx**L**).\n@@ -1360,2 +1384,0 @@\n-  \n-\n@@ -1365,1 +1387,0 @@\n-\n@@ -1375,1 +1396,0 @@\n-  \n@@ -1379,1 +1399,0 @@\n-\n@@ -1410,2 +1429,0 @@\n-  \n-\n@@ -1428,3 +1445,1 @@\n-***`TYPE_ANNOTATION_DECLARATION`***:\n-\n-**`@T+`**`|`**`@T-`**` ANNOTATION_NAME [TYPE_ANNOTATION_VALUE_DECLARATIONS]`\n+_**`TYPE_ANNOTATION_DECLARATION`**_:\n@@ -1432,2 +1447,1 @@\n-  \n-  \n+**`@T+`**`|`**`@T-`**`ANNOTATION_NAME [TYPE_ANNOTATION_VALUE_DECLARATIONS]`\n@@ -1435,1 +1449,1 @@\n-***`TYPE_ANNOTATION_VALUE_DECLARATIONS`***: list of (comma separated)  \n+_**`TYPE_ANNOTATION_VALUE_DECLARATIONS`**_: list of (comma separated)  \n@@ -1439,6 +1453,1 @@\n-  \n-  \n-\n-***`TYPE_ANNOTATION_VALUE_DECLARATION`***:\n-\n-**`{`**` `**`{`**` ANNOTATION_VALUE_DECLARATION`**<sup>`+`<\/sup>**` `**`}`**` TARGET PATH`` `**`}`**\n+_**`TYPE_ANNOTATION_VALUE_DECLARATION`**_:\n@@ -1446,3 +1455,1 @@\n-  \n-\n-  \n+**`{`**``**`{`**`ANNOTATION_VALUE_DECLARATION`**<sup>`+`<\/sup>**``**`}`**` TARGET PATH`` `**`}`**\n@@ -1450,1 +1457,1 @@\n-***`TARGET`***:\n+_**`TARGET`**_:\n@@ -1454,2 +1461,0 @@\n-  \n-\n@@ -1458,3 +1463,1 @@\n-***`TARGET_TYPE`***`: `\n-\n-` `\n+_**`TARGET_TYPE`**_`:`\n@@ -1462,3 +1465,1 @@\n-  \n-\n-           \n+``\n@@ -1620,3 +1621,1 @@\n-  \n-\n-***`TARGET_INFO`***<span style=\"font-weight: bold;\">`_TYPE`<\/span>`: `\n+_**`TARGET_INFO`**_<span style=\"font-weight: bold;\">`_TYPE`<\/span>`:`\n@@ -1624,1 +1623,1 @@\n-` `\n+``\n@@ -1632,7 +1631,1 @@\n-`paramIndex(`*`INTEGER`*`)`` `\n-\n-  \n-\n-  \n-\n-  \n+`paramIndex(`_`INTEGER`_`)`` `\n@@ -1642,5 +1635,1 @@\n-`typeIndex(`*`INTEGER`*`)``typeIndex(``INTEGER``)`` `\n-\n-  \n-\n-  \n+`typeIndex(`_`INTEGER`_`)``typeIndex(``INTEGER``)`` `\n@@ -1650,7 +1639,1 @@\n-`paramIndex(`*`INTEGER`*`) ``boundIndex(`*`INTEGER`*`)`` `\n-\n-  \n-\n-  \n-\n-  \n+`paramIndex(`_`INTEGER`_`) ``boundIndex(`_`INTEGER`_`)`` `\n@@ -1660,3 +1643,1 @@\n-` `  \n-\n-  \n+``  \n@@ -1664,1 +1645,0 @@\n-  \n@@ -1669,1 +1649,1 @@\n-`paramIndex(`*`INTEGER`*`)`\n+`paramIndex(`_`INTEGER`_`)`\n@@ -1671,1 +1651,0 @@\n-  \n@@ -1674,3 +1653,1 @@\n-`typeIndex(`*`INTEGER`*`)`*` `*` `\n-\n-  \n+`typeIndex(`_`INTEGER`_`)`_``_``\n@@ -1680,9 +1657,1 @@\n-  \n-***`LOCALVAR`***`:`  \n-\n-<span style=\"font-weight: bold;\">`{`<\/span>` `**`LVENTRY }`<sup>`+numEntries`<\/sup>**` `\n-\n-  \n-` `\n-\n-  \n+_**`LOCALVAR`**_`:`  \n@@ -1690,1 +1659,1 @@\n-***`LVENTRY`***`:`  \n+<span style=\"font-weight: bold;\">`{`<\/span>``**`LVENTRY }`<sup>`+numEntries`<\/sup>**``\n@@ -1692,1 +1661,1 @@\n-`startpc(`*`INTEGER) `*`length``(`*`INTEGER) `*`index(`*`INTEGER)`<span style=\"font-weight: bold;\"><\/span>*` `\n+``\n@@ -1694,1 +1663,1 @@\n-  \n+_**`LVENTRY`**_`:`  \n@@ -1696,1 +1665,1 @@\n-  \n+`startpc(`_`INTEGER)`_`length``(`_`INTEGER)`_`index(`_`INTEGER)`<span style=\"font-weight: bold;\"><\/span>_``\n@@ -1700,11 +1669,1 @@\n-  \n-\n-`catch(`*`INTEGER)`*\n-\n-` `  \n-\n-  \n-\n-  \n-\n-  \n+`catch(`_`INTEGER)`_\n@@ -1712,1 +1671,1 @@\n-***`OFFSET`***`:`  \n+``  \n@@ -1714,1 +1673,1 @@\n-` `\n+_**`OFFSET`**_`:`  \n@@ -1716,1 +1675,1 @@\n-`offset(`*`INTEGER)`*\n+``\n@@ -1718,1 +1677,1 @@\n-  \n+`offset(`_`INTEGER)`_\n@@ -1720,1 +1679,1 @@\n-` `\n+``\n@@ -1724,1 +1683,1 @@\n-`offset(`*`INTEGER`*`) ``typeIndex(`*`INTEGER`*`)`` `\n+`offset(`_`INTEGER`_`) ``typeIndex(`_`INTEGER`_`)`` `\n@@ -1726,1 +1685,2 @@\n-  \n+_**`PATH`**_`: list of (space separated)`  \n+``\n@@ -1728,1 +1688,1 @@\n-  \n+**`{`**_``<span style=\"font-weight: bold;\">`PATH_ENTRY`<\/span>_<sup>**`+`**<\/sup>``**`}`**\n@@ -1730,1 +1690,1 @@\n-  \n+_**`PATH_ENTRY`**_`:`  \n@@ -1732,4 +1692,1 @@\n-  \n-\n-***`PATH`***`: list of (space separated)`  \n-` `\n+``\n@@ -1737,1 +1694,1 @@\n-**`{`***` `<span style=\"font-weight: bold;\">`PATH_ENTRY`<\/span>*<sup>**`+`**<\/sup>` `**`}`**\n+<span style=\"font-style: italic;\">`{`<span style=\"font-weight: bold;\">`PATH_KIND PATH_INDEX }`<\/span><\/span>  \n@@ -1739,1 +1696,1 @@\n-  \n+_**`PATH_KIND`**_`:`\n@@ -1741,13 +1698,1 @@\n-  \n-\n-***`PATH_ENTRY`***`:`  \n-\n-` `\n-\n-<span style=\"font-style: italic;\">`{ `<span style=\"font-weight: bold;\">`PATH_KIND PATH_INDEX }`<\/span><\/span>  \n-\n-  \n-\n-***`PATH_KIND`***`: `\n-\n-` `\n+``\n@@ -1757,4 +1702,0 @@\n-  \n-\n-  \n-\n@@ -1763,12 +1704,1 @@\n-*`INTEGER`*` `\n-\n-  \n-  \n-\n-  \n-\n-  \n-\n-  \n-\n-  \n+_`INTEGER`_``\n@@ -1778,1 +1708,0 @@\n-  \n@@ -1790,1 +1719,1 @@\n-Parameter names come from an attribute introduced in JDK 8.0 (1.8). \n+Parameter names come from an attribute introduced in JDK 8.0 (1.8).\n@@ -1797,1 +1726,1 @@\n-***`METHOD DECLARATION`***:    \n+_**`METHOD DECLARATION`**_:\n@@ -1800,6 +1729,2 @@\n-  \n-\n-***`PARAMETERS_DECL`***:    \n-`[PARAMETER_DECL]`<sup>`N`<\/sup>` (where N < number of params in method, each N is a unique param number)`\n-\n-  \n+_**`PARAMETERS_DECL`**_:\n+`[PARAMETER_DECL]`<sup>`N`<\/sup>`(where N < number of params in method, each N is a unique param number)`\n@@ -1807,1 +1732,1 @@\n-***`PARAMETER_DECL`***:    \n+_**`PARAMETER_DECL`**_:\n@@ -1812,1 +1737,1 @@\n-***`PARAM_NAME_DECL`***:    \n+_**`PARAM_NAME_DECL`**_:\n@@ -1815,3 +1740,1 @@\n-  \n-  \n-***`PARAM_ACCESS`***`: list of`  \n+_**`PARAM_ACCESS`**_`: list of`  \n@@ -1823,1 +1746,1 @@\n-***<u>Java Code<\/u>***  \n+_**<u>Java Code<\/u>**_  \n@@ -1839,2 +1762,1 @@\n-  \n-***<u>JASM Code<\/u>***  \n+_**<u>JASM Code<\/u>**_  \n@@ -1864,1 +1786,0 @@\n-  \n@@ -1877,4 +1798,2 @@\n-***`ANNOTATION INTERFACE DECLARATION`***:    \n-`@interface ANNOTATION_NAME { ANNOTATION_FIELD_DECL`<sup>`+`<\/sup>` }`  \n-\n-  \n+_**`ANNOTATION INTERFACE DECLARATION`**_:\n+`@interface ANNOTATION_NAME { ANNOTATION_FIELD_DECL`<sup>`+`<\/sup>`}`  \n@@ -1882,1 +1801,1 @@\n-***`ANNOTATION_FIELD_DECL`***:    \n+_**`ANNOTATION_FIELD_DECL`**_:\n@@ -1885,3 +1804,1 @@\n-  \n-\n-***`ANNOTATION_DEFAULT_VALUE_DECL`***:    \n+_**`ANNOTATION_DEFAULT_VALUE_DECL`**_:\n@@ -1893,1 +1810,1 @@\n-***<u>Java Code<\/u>***  \n+_**<u>Java Code<\/u>**_  \n@@ -1902,2 +1819,1 @@\n-  \n-***<u>JASM Code<\/u>***  \n+_**<u>JASM Code<\/u>**_  \n@@ -1923,1 +1839,1 @@\n-***`MODULE_REQUIRES`***: sequence of  \n+_**`MODULE_REQUIRES`**_: sequence of  \n@@ -1926,1 +1842,1 @@\n-***`REQUIRES_FLAGS`***: set of  \n+_**`REQUIRES_FLAGS`**_: set of  \n@@ -1937,1 +1853,1 @@\n-***`MODULE_EXPORTS`***: sequence of  \n+_**`MODULE_EXPORTS`**_: sequence of  \n@@ -1940,1 +1856,1 @@\n-***`EXPORT_TO_MODULES`***: list of  \n+_**`EXPORT_TO_MODULES`**_: list of  \n@@ -1955,1 +1871,1 @@\n-***`MODULE_OPENS`***: sequence of  \n+_**`MODULE_OPENS`**_: sequence of  \n@@ -1958,1 +1874,1 @@\n-***`OPENS_TO_MODULES`***: list of  \n+_**`OPENS_TO_MODULES`**_: list of  \n@@ -1973,1 +1889,1 @@\n-***`MODULE_USES`***: sequence of  \n+_**`MODULE_USES`**_: sequence of  \n@@ -1984,1 +1900,1 @@\n-***`MODULE_PROVIDES`***: sequence of  \n+_**`MODULE_PROVIDES`**_: sequence of  \n@@ -1987,1 +1903,1 @@\n-***`MODULE_PROVIDES_WITH_CLASSES`***: list of  \n+_**`MODULE_PROVIDES_WITH_CLASSES`**_: list of  \n@@ -2010,5 +1926,0 @@\n-  \n-\n-  \n-  \n-\n","filename":"docs\/jasm.md","additions":512,"deletions":601,"binary":false,"changes":1113,"status":"modified"},{"patch":"@@ -38,2 +38,1 @@\n-TARGET=$(readProperty \"javac.target.version\" \"$BUILD_INFO\")\n-SOURCE=$(readProperty \"javac.source.version\" \"$BUILD_INFO\")\n+RELEASE=$(readProperty \"javac.release.version\" \"$BUILD_INFO\")\n@@ -43,2 +42,1 @@\n-sed \"s\/\\[TARGET\\]\/$TARGET\/g\" | \\\n-sed \"s\/\\[SOURCE\\]\/$SOURCE\/g\" | \\\n+sed \"s\/\\[RELEASE\\]\/$RELEASE\/g\" | \\\n","filename":"maven\/mvngen.sh","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -11,1 +11,1 @@\n-<!--eg:      7.0.b10-ea-->\n+    <!-- eg:9.0.b03-ea -->\n@@ -63,2 +63,1 @@\n-                    <source>[SOURCE]<\/source>\n-                    <target>[TARGET]<\/target>\n+                     <release>[RELEASE]<\/release>\n","filename":"maven\/pom.xml.in","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+    public static final String WRITE_SWITCH=\"-w\";\n","filename":"src\/org\/openjdk\/asmtools\/Main.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,6 @@\n+package org.openjdk.asmtools.asmutils;\n+\n+@FunctionalInterface\n+public interface FormatConsumer<F, A> {\n+    void format(F t, A... arg);\n+}\n","filename":"src\/org\/openjdk\/asmtools\/asmutils\/FormatConsumer.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"added"},{"patch":"@@ -43,0 +43,11 @@\n+    public static String toHex(byte val) {\n+        int width;\n+        for (width = 2; width > 0; width--) {\n+            if ((val >> (width - 1) * 4) != 0) {\n+                break;\n+            }\n+        }\n+        return toHex(val, width);\n+    }\n+\n+\n","filename":"src\/org\/openjdk\/asmtools\/asmutils\/HexUtils.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -25,2 +25,0 @@\n-import java.util.Objects;\n-\n","filename":"src\/org\/openjdk\/asmtools\/asmutils\/Pair.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,1 +60,1 @@\n-        if(idx != -1) {\n+        if (idx != -1) {\n@@ -62,2 +62,2 @@\n-            if( str.charAt(idx) == ' ') {\n-                str = str.substring(0,idx);\n+            if (str.charAt(idx) == ' ') {\n+                str = str.substring(0, idx);\n@@ -68,1 +68,1 @@\n-        if( list.length > 1 ) {\n+        if (list.length > 1) {\n@@ -72,3 +72,3 @@\n-                idx = list[i].length()-1;\n-                if( list[i].charAt(idx) == ' ' ) {\n-                    str += list[i].substring(0,idx);\n+                idx = list[i].length() - 1;\n+                if (list[i].charAt(idx) == ' ') {\n+                    str += list[i].substring(0, idx);\n@@ -77,2 +77,2 @@\n-                    idx = i+1;\n-                    if( idx < list.length && list[idx].charAt(0) == ' ' ) {\n+                    idx = i + 1;\n+                    if (idx < list.length && list[idx].charAt(0) == ' ') {\n@@ -88,1 +88,1 @@\n-     * Converts CONSTANT_Utf8_info string to a printable string for jdis\/jdes.\n+     * Converts CONSTANT_Utf8_info string to a printable string for jdis\/jdec.\n@@ -227,0 +227,12 @@\n+    public static String ListToString(List<String> list) {\n+        return ListToString(list, \"(,)\");\n+    }\n+\n+    public static String ListToString(List<String> list, String separators) {\n+        int l = separators.length();\n+        String prefix = separators != null && l > 0 ? separators.substring(0, 1) : \"[\";\n+        String delim = separators != null && l > 1 ? separators.substring(1, 2) : \",\";\n+        String postfix = separators != null && l > 2 ? separators.substring(2, 3) : \"]\";\n+        return prefix.concat(\" \") + String.join(delim.concat(\" \"), list) + \" \".concat(postfix);\n+    }\n+\n","filename":"src\/org\/openjdk\/asmtools\/asmutils\/StringUtils.java","additions":23,"deletions":11,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.common;\n+\n+import org.openjdk.asmtools.common.outputs.ToolOutput;\n+import org.openjdk.asmtools.common.outputs.log.DualStreamToolOutput;\n+\n+import static org.openjdk.asmtools.common.Environment.OK;\n+\n+public abstract class Compiler<T extends Environment<? extends ToolLogger>> extends Tool<T> {\n+    protected Compiler(ToolOutput toolOutput, DualStreamToolOutput outerLog) {\n+        super(toolOutput, outerLog);\n+    }\n+\n+    public synchronized boolean compile(String... argv) {\n+        parseArgs(argv);\n+        return this.compile() == OK;\n+    }\n+\n+    \/\/ Run a compiler when args already parsed\n+    public abstract int compile();\n+}\n","filename":"src\/org\/openjdk\/asmtools\/common\/Compiler.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -35,1 +35,1 @@\n-    int OFFSET_BITS = 19;\n+    int OFFSET_BITS = 32;\n@@ -39,2 +39,1 @@\n-    \/\/ The increment for each line.\n-    int LINE_INC = 1 << OFFSET_BITS;\n+\n","filename":"src\/org\/openjdk\/asmtools\/common\/CompilerConstants.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.util.function.Function;\n@@ -47,1 +48,1 @@\n-    private final Map<Integer, Set<Message>> container = new HashMap<>();\n+    private final Map<Long, Set<Message>> container = new HashMap<>();\n@@ -60,1 +61,1 @@\n-    public void warning(int where, String id, Object... args) {\n+    public void warning(long where, String id, Object... args) {\n@@ -74,1 +75,1 @@\n-    public void error(int where, String id, Object... args) {\n+    public void error(long where, String id, Object... args) {\n@@ -102,0 +103,7 @@\n+        usage(usageIDs, id -> id.equals(\"info.opt.cv\") ?\n+                getInfo(id, DEFAULT_MAJOR_VERSION, DEFAULT_MINOR_VERSION) :\n+                getInfo(id));\n+    }\n+\n+    @Override\n+    public void usage(List<String> usageIDs, Function<String, String> func) {\n@@ -103,2 +111,1 @@\n-            String s = id.equals(\"info.opt.cv\") ? getInfo(id, DEFAULT_MAJOR_VERSION, DEFAULT_MINOR_VERSION) :\n-                    getInfo(id);\n+            String s = func.apply(id);\n@@ -130,1 +137,1 @@\n-    Pair<Integer, Integer> filePosition(int where) {\n+    Pair<Long, Long> filePosition(long where) {\n@@ -134,3 +141,2 @@\n-            final int lineNumber = lineNumber(where), absPos = where & ((1 << OFFSET_BITS) - 1);\n-            int lineOffset = absPos - (fileContent.subList(0, lineNumber - 1).stream().mapToInt(String::length).sum() + lineNumber - 1);\n-            return new Pair<>(lineNumber, lineOffset);\n+            long lineNumber = lineNumber(where);\n+            return new Pair<>(lineNumber, lineOffset(lineNumber, where));\n@@ -140,2 +146,9 @@\n-    public int lineNumber(int where) {\n-        return where >>> OFFSET_BITS;\n+    public long lineNumber(long where) {\n+        return where >> OFFSET_BITS;\n+    }\n+\n+    public long lineOffset(long lineNumber, long where) {\n+        long absPos = where & ((1L << OFFSET_BITS) - 1);\n+        return absPos - (fileContent.subList(0, (int) lineNumber - 1).\n+                stream().mapToInt(String::length).sum() + lineNumber - 1);\n+\n@@ -145,1 +158,2 @@\n-        return noMessages() ? 0 : container.values().stream().flatMap(Collection::stream).filter(m -> m.kind() == kind).count();\n+        return noMessages() ? 0 : container.values().stream().\n+                flatMap(Collection::stream).filter(m -> m.kind() == kind).count();\n@@ -159,1 +173,1 @@\n-        List<Map.Entry<Integer, Set<Message>>> list = new ArrayList<>(container.entrySet());\n+        List<Map.Entry<Long, Set<Message>>> list = new ArrayList<>(container.entrySet());\n@@ -162,3 +176,3 @@\n-        for (Map.Entry<Integer, Set<Message>> entry : list) {\n-            int where = entry.getKey();\n-            Pair<Integer, Integer> filePosition = filePosition(where);\n+        for (Map.Entry<Long, Set<Message>> entry : list) {\n+            long where = entry.getKey();\n+            Pair<Long, Long> filePosition = filePosition(where);\n@@ -166,2 +180,2 @@\n-                if( msg.kind() == WARNING && ignoreWarnings) {\n-                   continue;\n+                if (msg.kind() == WARNING && ignoreWarnings) {\n+                    continue;\n@@ -204,3 +218,3 @@\n-    \/\/ Removes tabs from a source line to get correct line position while printing.\n-    private void printAffectedSourceLine(ToolOutput output, Pair<Integer, Integer> filePosition) {\n-        String line = fileContent.get(filePosition.first - 1);\n+    \/\/ Removes tabs from a source line to get the correct line position while printing.\n+    private void printAffectedSourceLine(ToolOutput output, Pair<Long, Long> filePosition) {\n+        String line = fileContent.get((int) (filePosition.first - 1));\n@@ -217,1 +231,1 @@\n-    private void insert(int where, Message message) {\n+    private void insert(long where, Message message) {\n@@ -230,1 +244,1 @@\n-    private void addToContainer(int where, Message msg) {\n+    private void addToContainer(long where, Message msg) {\n","filename":"src\/org\/openjdk\/asmtools\/common\/CompilerLogger.java","additions":37,"deletions":23,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -0,0 +1,43 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.common;\n+\n+import org.openjdk.asmtools.common.outputs.ToolOutput;\n+import org.openjdk.asmtools.common.outputs.log.DualStreamToolOutput;\n+\n+import static org.openjdk.asmtools.common.Environment.OK;\n+\n+public abstract class Decoder<T extends Environment<? extends ToolLogger>> extends Tool<T> {\n+    protected Decoder(ToolOutput toolOutput, DualStreamToolOutput outerLog) {\n+        super(toolOutput, outerLog);\n+    }\n+\n+    \/\/ Runs the decoder with args\n+    public synchronized boolean decode(String... argv) {\n+        parseArgs(argv);\n+        return this.decode() == OK;\n+    }\n+\n+    \/\/ Run a decoder when args already parsed\n+    public abstract int decode();\n+}\n","filename":"src\/org\/openjdk\/asmtools\/common\/Decoder.java","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,1 @@\n+import org.openjdk.asmtools.common.inputs.ToolInput;\n@@ -27,0 +28,1 @@\n+import java.util.LinkedHashSet;\n@@ -28,0 +30,2 @@\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n@@ -30,0 +34,1 @@\n+import static java.lang.Math.max;\n@@ -31,0 +36,3 @@\n+import static org.openjdk.asmtools.common.EMessageKind.ERROR;\n+import static org.openjdk.asmtools.common.EMessageKind.WARNING;\n+import static org.openjdk.asmtools.common.Environment.OK;\n@@ -32,1 +40,12 @@\n-public class DecompilerLogger extends ToolLogger implements ILogger {\n+public class\n+\n+DecompilerLogger extends ToolLogger implements ILogger {\n+\n+    \/\/ Message Container\n+    private final LinkedHashSet<String> messages = new LinkedHashSet<String>();\n+\n+    private Consumer<String> addToContainer = (String msg) -> {\n+        if (msg != null) {\n+            messages.add(msg);\n+        }\n+    };\n@@ -43,0 +62,1 @@\n+\n@@ -44,10 +64,8 @@\n-    public void usage(List<String> usageIDs) {\n-        for (String id : usageIDs) {\n-            String s = getInfo(id);\n-            if (s != null) {\n-                Matcher m = usagePattern.matcher(s);\n-                if (m.find()) {\n-                    println(format(\"  %-21s %s\", m.group(1).trim(), m.group(2).trim()));\n-                } else {\n-                    println(s);\n-                }\n+    public void warning(String id, Object... args) {\n+        String msg = getResourceString(id, args);\n+        if (msg == null) {\n+            if (EMessageKind.isFromResourceBundle(id)) {\n+                msg = EMessageFormatter.VERBOSE.apply(EMessageKind.ERROR,\n+                        \"(I18NResourceBundle) The warning message '%s' not found\", id);\n+            } else {\n+                msg = EMessageFormatter.VERBOSE.apply(EMessageKind.WARNING, super.getProgramName(), format(id, args));\n@@ -55,0 +73,2 @@\n+        } else {\n+            msg = EMessageFormatter.VERBOSE.apply(EMessageKind.WARNING, super.getProgramName(), msg);\n@@ -56,0 +76,1 @@\n+        addToContainer.accept(msg);\n@@ -59,14 +80,3 @@\n-    public void printErrorLn(String format, Object... args) {\n-        super.printErrorLn((args == null || args.length == 0) ? format : format(format, args));\n-    }\n-\n-    @Override\n-    public void error(Throwable exception) {\n-        super.printErrorLn(ToolLogger.EMessageFormatter.VERBOSE.apply(super.getProgramName(),\n-                new ToolLogger.Message(EMessageKind.ERROR, super.getProgramName(), exception.getMessage())));\n-    }\n-\n-    @Override\n-    public void warning(String id, Object... args) {\n-        String message = getResourceString(id, args);\n-        if (message == null) {\n+    public void error(String id, Object... args) {\n+        String msg = getResourceString(id, args);\n+        if (msg == null) {\n@@ -74,2 +84,3 @@\n-                printErrorLn(EMessageFormatter.VERBOSE.apply(EMessageKind.ERROR,\n-                        \"(I18NResourceBundle) The warning message '%s' not found\", id));\n+                msg = EMessageFormatter.VERBOSE.apply(EMessageKind.ERROR,\n+                        super.getProgramName(),\n+                        \"(I18NResourceBundle) The error message '%s' not found\", id);\n@@ -77,1 +88,1 @@\n-                println(EMessageFormatter.LONG.apply(EMessageKind.WARNING, super.getProgramName(), format(id, args)));\n+                msg = EMessageFormatter.VERBOSE.apply(EMessageKind.ERROR, super.getProgramName(), format(id, args));\n@@ -80,1 +91,1 @@\n-            println(EMessageFormatter.LONG.apply(EMessageKind.WARNING, super.getProgramName(), message));\n+            msg = EMessageFormatter.VERBOSE.apply(EMessageKind.ERROR, super.getProgramName(), msg);\n@@ -82,0 +93,1 @@\n+        addToContainer.accept(msg);\n@@ -85,3 +97,3 @@\n-    public void error(String id, Object... args) {\n-        String message = getResourceString(id, args);\n-        if (message == null) {\n+    public void info(String id, Object... args) {\n+        String msg = getResourceString(id, args);\n+        if (msg == null) {\n@@ -89,1 +101,1 @@\n-                printErrorLn(EMessageFormatter.VERBOSE.apply(EMessageKind.ERROR,\n+                msg = EMessageFormatter.VERBOSE.apply(EMessageKind.ERROR,\n@@ -91,1 +103,1 @@\n-                        \"(I18NResourceBundle) The error message '%s' not found\", id));\n+                        \"(I18NResourceBundle) The error message '%s' not found\", id);\n@@ -93,1 +105,1 @@\n-                printErrorLn(EMessageFormatter.VERBOSE.apply(EMessageKind.ERROR, super.getProgramName(), format(id, args)));\n+                msg = EMessageFormatter.VERBOSE.apply(EMessageKind.ERROR, super.getProgramName(), format(id, args));\n@@ -96,1 +108,1 @@\n-            printErrorLn(EMessageFormatter.VERBOSE.apply(EMessageKind.ERROR, super.getProgramName(), message));\n+            msg = EMessageFormatter.SHORT.apply(EMessageKind.ERROR, super.getProgramName(), msg);\n@@ -98,0 +110,14 @@\n+        addToContainer.accept(msg);\n+    }\n+\n+    @Override\n+    public void printErrorLn(String format, Object... args) {\n+        String msg = (args == null || args.length == 0) ? format : format(format, args);\n+        addToContainer.accept(msg);\n+    }\n+\n+\n+    @Override\n+    public void error(Throwable exception) {\n+        String msg = ToolLogger.EMessageFormatter.VERBOSE.apply(ERROR, super.getProgramName(), exception.getMessage());\n+        addToContainer.accept(msg);\n@@ -104,0 +130,1 @@\n+            String msg;\n@@ -105,2 +132,2 @@\n-                printErrorLn(EMessageFormatter.VERBOSE.apply(EMessageKind.ERROR, super.getProgramName(),\n-                        \"(I18NResourceBundle) The error message '%s' not found\", id));\n+                msg = EMessageFormatter.VERBOSE.apply(EMessageKind.ERROR, super.getProgramName(),\n+                        \"(I18NResourceBundle) The error message '%s' not found\", id);\n@@ -108,1 +135,1 @@\n-                println(id, args);\n+                msg = (args == null || args.length == 0) ? id : format(id, args);\n@@ -110,0 +137,1 @@\n+            addToContainer.accept(msg);\n@@ -113,0 +141,68 @@\n+\n+    @Override\n+    public long getCount(EMessageKind kind) {\n+        return messages.stream().filter(msg -> msg.contains(kind.shortForm())).count();\n+    }\n+\n+    public int registerTotalIssues(int rc, ToolInput toolInput) {\n+        int ret = OK;\n+        int nErrors = (int) getCount(ERROR);\n+        int nWarnings = (int) getCount(WARNING);\n+        if (nWarnings > 0 || nErrors > 0) {\n+            ret = max(rc, nWarnings + nErrors);\n+            String sWarnings = (nWarnings > 0) ?\n+                    \"%d warning(s)\".formatted(nWarnings).concat((nErrors > 0) ? \", \" : \"\") : \"\";\n+            String sErrors = (nErrors > 0) ? \"%d error(s) \".formatted(nErrors) : \" \";\n+            info(\"err.count.issues\", sWarnings, sErrors, toolInput);\n+        }\n+        return ret;\n+    }\n+\n+    public synchronized void flush() {\n+        if (!messages.isEmpty()) {\n+            DualStreamToolOutput output = getOutputs();\n+            \/\/ output.printe('\\n');\n+            for (String msg : messages) {\n+                output.printlne(msg);\n+            }\n+            synchronized (output) {\n+                output.flush();\n+                messages.clear();\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void usage(List<String> usageIDs) {\n+        usage(usageIDs, id -> getInfo(id));\n+    }\n+\n+    @Override\n+    public void usage(List<String> usageIDs, Function<String, String> func) {\n+        for (String id : usageIDs) {\n+            String s = func.apply(id);\n+            if (s != null) {\n+                Matcher m = usagePattern.matcher(s);\n+                if (m.find()) {\n+                    println(format(\"  %-21s %s\", m.group(1).trim(), m.group(2).trim()));\n+                    if (s.contains(\"\\n\")) {\n+                        \/\/ multiline\n+                        String[] lines = s.split(\"\\\\n\");\n+                        for (int i = 1; i < lines.length; i++) {\n+                            println(format(\"%s%s\", \" \".repeat(24), lines[i].trim()));\n+                        }\n+                    }\n+                } else {\n+                    String[] lines = s.split(\"\\\\n\");\n+                    if (lines.length > 1 && lines[0].trim().startsWith(\"-\")) {\n+                        println(format(\"  %s\", lines[0].trim()));\n+                        for (int i = 1; i < lines.length; i++) {\n+                            println(format(\"%s%s\", \" \".repeat(24), lines[i].trim()));\n+                        }\n+                    } else {\n+                        println(s);\n+                    }\n+                }\n+            }\n+        }\n+    }\n","filename":"src\/org\/openjdk\/asmtools\/common\/DecompilerLogger.java","additions":136,"deletions":40,"binary":false,"changes":176,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-import org.openjdk.asmtools.common.outputs.log.DualStreamToolOutput;\n@@ -28,0 +27,1 @@\n+import org.openjdk.asmtools.common.outputs.log.DualStreamToolOutput;\n@@ -35,0 +35,2 @@\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n@@ -44,0 +46,4 @@\n+    \/\/-w <directory> Specify where to place generated class files, without considering the classpath.\n+    \/\/ If not specified, output will be directed to <stdout>.\n+    private boolean ignorePackage = false;\n+\n@@ -45,1 +51,1 @@\n-    private ToolInput inputFileName;\n+    private ToolInput toolInput;\n@@ -50,0 +56,4 @@\n+    public boolean isTraceFlag() {\n+        return traceFlag;\n+    }\n+\n@@ -60,3 +70,3 @@\n-    public void setInputFile(ToolInput inputFileName) throws IOException, URISyntaxException {\n-        this.inputFileName = inputFileName;\n-        toolLogger.setInputFileName(inputFileName);\n+    public void setToolInput(ToolInput toolInput) throws IOException, URISyntaxException {\n+        this.toolInput = toolInput;\n+        toolLogger.setInputFileName(toolInput);\n@@ -77,1 +87,13 @@\n-    public String getSimpleInputFileName() { return toolLogger.getSimpleInputFileName(); }\n+\n+    public boolean isIgnorePackage() {\n+        return ignorePackage;\n+    }\n+\n+    public Environment<T> setIgnorePackage(boolean ignorePackage) {\n+        this.ignorePackage = ignorePackage;\n+        return this;\n+    }\n+\n+    public String getSimpleInputFileName() {\n+        return toolLogger.getSimpleInputFileName();\n+    }\n@@ -92,1 +114,3 @@\n-    public ToolInput getInputFile() { return inputFileName; }\n+    public ToolInput getToolInput() {\n+        return toolInput;\n+    }\n@@ -98,2 +122,2 @@\n-        Objects.requireNonNull(this.inputFileName, \"Input must be defined.\");\n-        return inputFileName.getDataInputStream(Optional.of(this));\n+        Objects.requireNonNull(this.toolInput, \"Input must be defined.\");\n+        return toolInput.getDataInputStream(Optional.of(this));\n@@ -108,0 +132,6 @@\n+    public void traceln(Supplier<String> supplier) {\n+        if (traceFlag) {\n+            ILogger.super.traceln(supplier.get());\n+        }\n+    }\n+\n@@ -119,0 +149,11 @@\n+    @Override\n+    public void error(Throwable exception) {\n+        toolLogger.error(exception);\n+    }\n+\n+    public void trace(Supplier<String> supplier) {\n+        if (traceFlag) {\n+            ILogger.super.trace(supplier.get());\n+        }\n+    }\n+\n@@ -130,0 +171,1 @@\n+    }\n@@ -131,0 +173,2 @@\n+    public void usage(List<String> ids, Function<String, String> func) {\n+        toolLogger.usage(ids, func);\n","filename":"src\/org\/openjdk\/asmtools\/common\/Environment.java","additions":54,"deletions":10,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -42,5 +42,2 @@\n-        super(\n-                logger.getResourceString(id, args) == null\n-                        ? FormatError.getResourceMsg(id, args) == null ?\n-                        \"(i18n.properties) The message '\" + id + \"' not found\" :\n-                        FormatError.getResourceMsg(id, args)\n+        super( logger.getResourceString(id, args) == null ?\n+                        (FormatError.getResourceMsg(id, args) == null ?  \"(i18n.properties) The message '\" + id + \"' not found\" : FormatError.getResourceMsg(id, args))\n","filename":"src\/org\/openjdk\/asmtools\/common\/FormatError.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n@@ -3,3 +25,0 @@\n-import static java.lang.String.format;\n-\n-import org.openjdk.asmtools.common.outputs.log.DualStreamToolOutput;\n@@ -7,0 +26,1 @@\n+import org.openjdk.asmtools.common.outputs.log.DualStreamToolOutput;\n@@ -10,0 +30,2 @@\n+import static java.lang.String.format;\n+\n@@ -15,1 +37,1 @@\n-    CharSequence TAB_REPLACEMENT = \"    \";\n+    CharSequence TAB_REPLACEMENT = \" \".repeat(4);\n@@ -17,1 +39,1 @@\n-    Pattern usagePattern = Pattern.compile(\"(-.*?)\\s([PGSDCSOIU]+.*)\");\n+    Pattern usagePattern = Pattern.compile(\"(-\\\\S+\\\\p{Blank}*\\\\S*)\\\\p{Blank}+([PGSDCSOIU]+.*)\");\n@@ -22,1 +44,0 @@\n-    default void warning(int where, String id, Object... args) { throw new NotImplementedException(); }\n@@ -24,1 +45,5 @@\n-    default void error(int where, String id, Object... args) {\n+    default void warning(long where, String id, Object... args) {\n+        throw new NotImplementedException();\n+    }\n+\n+    default void error(long where, String id, Object... args) {\n@@ -35,0 +60,4 @@\n+    default long getCount(EMessageKind kind) {\n+        throw new NotImplementedException();\n+    }\n+\n@@ -47,1 +76,3 @@\n-    default void error(Throwable exception) { error(NOWHERE, exception.getMessage()); }\n+    default void error(Throwable exception) {\n+        error(NOWHERE, exception.getMessage());\n+    }\n@@ -50,1 +81,2 @@\n-        getOutputs().printlne(( args == null || args.length == 0) ? format : format(format, args));;\n+        getOutputs().printlne((args == null || args.length == 0) ? format : format(format, args));\n+        ;\n@@ -54,1 +86,1 @@\n-        getOutputs().printe(( args == null || args.length == 0) ? format : format(format, args));\n+        getOutputs().printe((args == null || args.length == 0) ? format : format(format, args));\n@@ -58,1 +90,1 @@\n-        getOutputs().printlne(( args == null || args.length == 0) ? format : format(format, args));\n+        getOutputs().printlne((args == null || args.length == 0) ? format : format(format, args));\n@@ -62,1 +94,1 @@\n-        getOutputs().printlns(( args == null || args.length == 0) ? format : format(format, args));\n+        getOutputs().printlns((args == null || args.length == 0) ? format : format(format, args));\n@@ -70,1 +102,1 @@\n-        getOutputs().prints(( args == null || args.length == 0) ? format : format(format, args));\n+        getOutputs().prints((args == null || args.length == 0) ? format : format(format, args));\n","filename":"src\/org\/openjdk\/asmtools\/common\/ILogger.java","additions":45,"deletions":13,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -28,2 +28,1 @@\n-import org.openjdk.asmtools.common.outputs.DirOutput;\n-import org.openjdk.asmtools.common.outputs.log.DualStreamToolOutput;\n+import org.openjdk.asmtools.common.outputs.FSOutput;\n@@ -31,0 +30,1 @@\n+import org.openjdk.asmtools.common.outputs.log.DualStreamToolOutput;\n@@ -35,0 +35,2 @@\n+import static org.openjdk.asmtools.common.outputs.FSOutput.FSDestination.DIR;\n+\n@@ -39,0 +41,1 @@\n+    private ToolOutput toolOutput;\n@@ -66,1 +69,1 @@\n-    \/\/ Parse arguments. Tool will be left using System.Exit if error found.\n+    \/\/ Parse arguments. The Tool will be left using System.Exit if an error is found.\n@@ -69,2 +72,2 @@\n-    protected void setDestDir(int index, String... argv) {\n-        File destDir;\n+    protected void setFSDestination(FSOutput.FSDestination destination, int index, String... argv) {\n+        File file;\n@@ -72,1 +75,1 @@\n-            environment.error(\"err.d_requires_argument\");\n+            environment.error(destination == FSOutput.FSDestination.FILE ? \"err.f_requires_argument\" : \"err.d_requires_argument\");\n@@ -76,3 +79,4 @@\n-        destDir = new File(argv[index]);\n-        if (!destDir.exists()) {\n-            environment.error(\"err.does_not_exist\", destDir.getPath());\n+        String fname = argv[index];\n+        file = new File(fname);\n+        if (destination == DIR && !file.exists()) {\n+            environment.error(\"err.does_not_exist\", fname);\n@@ -81,1 +85,10 @@\n-        environment.setToolOutput(new DirOutput(destDir));\n+        if (toolOutput == null) {\n+            toolOutput = new FSOutput();\n+        }\n+        switch (destination) {\n+            case FILE:\n+                environment.setToolOutput(((FSOutput) toolOutput).setFile(new File(\".\"), fname));\n+                break;\n+            case DIR:\n+                environment.setToolOutput(((FSOutput) toolOutput).setDir(file));\n+        }\n@@ -85,1 +98,1 @@\n-        for (ToolInput toolInput: fileList) {\n+        for (ToolInput toolInput : fileList) {\n","filename":"src\/org\/openjdk\/asmtools\/common\/Tool.java","additions":24,"deletions":11,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+import java.util.function.Function;\n@@ -43,1 +44,1 @@\n-    protected boolean strictWarnings  = false;        \/\/ consider warnings as errors\n+    protected boolean strictWarnings = false;        \/\/ consider warnings as errors\n@@ -92,0 +93,1 @@\n+    @Override\n@@ -104,1 +106,1 @@\n-            \/\/to get proper error message\n+            \/\/to get a proper error message\n@@ -111,3 +113,3 @@\n-        this.inputFileName = inputFileName.getFileName();\n-        this.simpleInputFileName = Paths.get(inputFileName.getFileName()).getFileName().toString();\n-        \/\/ content of the input file will be loaded only if the file will be parsed by jasm\/jcoder\n+        this.inputFileName = inputFileName.getName();\n+        this.simpleInputFileName = Paths.get(inputFileName.getName()).getFileName().toString();\n+        \/\/ the content of the input file will be loaded only if the file is parsed by jasm\/jcoder\n@@ -154,4 +156,1 @@\n-    @FunctionalInterface\n-    private interface TriFunction<A, B, C, R> {\n-        R apply(A a, B b, C c);\n-    }\n+    public abstract void usage(List<String> ids, Function<String, String> func);\n@@ -162,2 +161,2 @@\n-        VERBOSE((severity, name, message) -> severity == INFO ? message : format(\"%-7s-%6s: %s\",\n-                name, severity.shortForm(), message));\n+        VERBOSE((severity, name, message) -> severity == INFO ? message :\n+                format(\"%-7s-%6s: %s\", name, severity.shortForm(), message));\n","filename":"src\/org\/openjdk\/asmtools\/common\/ToolLogger.java","additions":11,"deletions":12,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -0,0 +1,34 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.common;\n+\n+@FunctionalInterface\n+public interface TriFunction<T, U, V, R> {\n+    R apply(T t, U u, V v);\n+\n+    \/\/ Default method to compose functions (like BiFunction.andThen)\n+    default <W> TriFunction<T, U, V, W> andThen(java.util.function.Function<? super R, ? extends W> after) {\n+        if (after == null) throw new NullPointerException(\"After function must not be null\");\n+        return (t, u, v) -> after.apply(apply(t, u, v));\n+    }\n+}\n","filename":"src\/org\/openjdk\/asmtools\/common\/TriFunction.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle, Red Hat  and\/or theirs affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle, Red Hat  and\/or theirs affiliates. All rights reserved.\n@@ -27,5 +27,1 @@\n-import java.io.BufferedReader;\n-import java.io.ByteArrayInputStream;\n-import java.io.DataInputStream;\n-import java.io.IOException;\n-import java.io.InputStreamReader;\n+import java.io.*;\n@@ -33,0 +29,3 @@\n+import java.security.DigestInputStream;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n@@ -39,0 +38,3 @@\n+    private boolean detailedInput = false;\n+    private MessageDigest md = null;\n+\n@@ -47,0 +49,10 @@\n+    }\n+\n+    public byte[] getBytes() {\n+        return bytes;\n+    }\n+\n+    public ByteInput setDetailedInput(boolean detailedInput) {\n+        this.detailedInput = detailedInput;\n+        return this;\n+    }\n@@ -48,0 +60,8 @@\n+    @Override\n+    public MessageDigest getMessageDigest() {\n+        return md;\n+    }\n+\n+    @Override\n+    public int getSize() {\n+        return bytes.length;\n@@ -51,1 +71,1 @@\n-    public String getFileName() {\n+    public String getName() {\n@@ -58,1 +78,1 @@\n-        return getFileName();\n+        return getName();\n@@ -66,1 +86,1 @@\n-    public DataInputStream getDataInputStream(Optional<Environment> logger) throws URISyntaxException, IOException {\n+    public DataInputStream getDataInputStream(Optional<Environment> logger) {\n@@ -68,1 +88,12 @@\n-        return new DataInputStream(new ByteArrayInputStream(bytes));\n+        try {\n+            ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+            if (detailedInput) {\n+                md = MessageDigest.getInstance(\"SHA-256\");\n+                DigestInputStream dis = new DigestInputStream(bais, md);\n+                return new DataInputStream(dis);\n+            } else {\n+                return new DataInputStream(bais);\n+            }\n+        } catch (NoSuchAlgorithmException e) {\n+            throw new RuntimeException(e);\n+        }\n@@ -84,1 +115,0 @@\n-        ;\n","filename":"src\/org\/openjdk\/asmtools\/common\/inputs\/ByteInput.java","additions":41,"deletions":11,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -27,3 +27,1 @@\n-import java.io.DataInputStream;\n-import java.io.FileInputStream;\n-import java.io.IOException;\n+import java.io.*;\n@@ -36,0 +34,3 @@\n+import java.security.DigestInputStream;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n@@ -40,1 +41,0 @@\n-    private final String file;\n@@ -42,2 +42,7 @@\n-    public FileInput(String file) {\n-        this.file = file;\n+    private boolean detailedInput = false;\n+    private final String fileName;\n+    private MessageDigest md = null;\n+    private CapacityInputStream cis = null;\n+\n+    public FileInput(String fileName) {\n+        this.fileName = fileName;\n@@ -47,2 +52,2 @@\n-    public String getFileName() {\n-        return file;\n+    public String getName() {\n+        return fileName;\n@@ -52,1 +57,16 @@\n-        return Files.readAllLines(Paths.get(getFileName()));\n+        return Files.readAllLines(Paths.get(getName()));\n+    }\n+\n+    public FileInput setDetailedInput(boolean detailedInput) {\n+        this.detailedInput = detailedInput;\n+        return this;\n+    }\n+\n+    @Override\n+    public MessageDigest getMessageDigest() {\n+        return md;\n+    }\n+\n+    @Override\n+    public int getSize() {\n+        return cis != null ? cis.size() : 0;\n@@ -58,1 +78,9 @@\n-            return new DataInputStream(new FileInputStream(this.getFileName()));\n+            FileInputStream fis = new FileInputStream(this.getName());\n+            if (detailedInput) {\n+                cis = new CapacityInputStream(fis);\n+                md = MessageDigest.getInstance(\"SHA-256\");\n+                DigestInputStream dis = new DigestInputStream(cis, md);\n+                return new DataInputStream(dis);\n+            } else {\n+                return new DataInputStream(fis);\n+            }\n@@ -60,1 +88,1 @@\n-            if (this.getFileName().matches(\"^[A-Za-z]+:.*\")) {\n+            if (this.getName().matches(\"^[A-Za-z]+:.*\")) {\n@@ -62,1 +90,1 @@\n-                    final URI uri = new URI(this.getFileName());\n+                    final URI uri = new URI(this.getName());\n@@ -69,1 +97,1 @@\n-                        logger.get().error(\"err.cannot.read\", this.getFileName());\n+                        logger.get().error(\"err.cannot.read\", this.getName());\n@@ -76,0 +104,2 @@\n+        } catch (NoSuchAlgorithmException e) {\n+            throw new RuntimeException(e);\n@@ -81,1 +111,28 @@\n-        return getFileName();\n+        return getName();\n+    }\n+\n+    private static class CapacityInputStream extends FilterInputStream {\n+        CapacityInputStream(InputStream in) {\n+            super(in);\n+        }\n+\n+        int size() {\n+            return size;\n+        }\n+\n+        @Override\n+        public int read(byte[] buf, int offset, int length) throws IOException {\n+            int n = super.read(buf, offset, length);\n+            if (n > 0)\n+                size += n;\n+            return n;\n+        }\n+\n+        @Override\n+        public int read() throws IOException {\n+            int b = super.read();\n+            size += 1;\n+            return b;\n+        }\n+\n+        private int size;\n","filename":"src\/org\/openjdk\/asmtools\/common\/inputs\/FileInput.java","additions":71,"deletions":14,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-    public String getFileName() {\n+    public String getName() {\n","filename":"src\/org\/openjdk\/asmtools\/common\/inputs\/StdinInput.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    public String getFileName() {\n+    public String getName() {\n","filename":"src\/org\/openjdk\/asmtools\/common\/inputs\/StreamInput.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-    public String getFileName() {\n+    public String getName() {\n","filename":"src\/org\/openjdk\/asmtools\/common\/inputs\/StringInput.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,2 +35,4 @@\n-    public int position;\n-    protected int charPos;\n+    public long position;\n+    protected int charPos = 0;\n+    protected int linepos = 1;\n+\n","filename":"src\/org\/openjdk\/asmtools\/common\/inputs\/TextInput.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.security.MessageDigest;\n@@ -37,1 +38,1 @@\n- *\n+ * <p>\n@@ -39,1 +40,1 @@\n- *\n+ * <p>\n@@ -44,1 +45,1 @@\n-    String getFileName();\n+    String getName();\n@@ -50,0 +51,16 @@\n+    default boolean isDetailedInput() {\n+        return false;\n+    }\n+\n+    default ToolInput setDetailedInput(boolean value) {\n+        return this;\n+    }\n+\n+    default MessageDigest getMessageDigest() {\n+        return null;\n+    }\n+\n+    default int getSize() {\n+        return 0;\n+    }\n+\n","filename":"src\/org\/openjdk\/asmtools\/common\/inputs\/ToolInput.java","additions":20,"deletions":3,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle, Red Hat  and\/or theirs affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle, Red Hat  and\/or theirs affiliates. All rights reserved.\n@@ -62,3 +62,4 @@\n-    public void finishClass(String fqn) throws IOException {\n-        if (!getCurrentClassName().equals(fqn)) {\n-            throw new RuntimeException(\"Ended different class - \" + fqn + \" - then started - \" + super.fqn);\n+    public void finishClass(String fullyQualifiedName) throws IOException {\n+        if (!getCurrentClassName().equals(fullyQualifiedName)) {\n+            throw new RuntimeException(\"Ended different class: %s then was started %s\".\n+                    formatted(fullyQualifiedName, super.fullyQualifiedName));\n@@ -66,2 +67,2 @@\n-        outputs.add(new NamedBinary(fqn, currentClass.toByteArray()));\n-        super.fqn = null;\n+        outputs.add(new NamedBinary(fullyQualifiedName, currentClass.toByteArray()));\n+        super.fullyQualifiedName = null;\n@@ -100,0 +101,5 @@\n+    @Override\n+    public String getName() {\n+        return \"byte stream\";\n+    }\n+\n","filename":"src\/org\/openjdk\/asmtools\/common\/outputs\/ByteOutput.java","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1,118 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle, Red Hat  and\/or theirs affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.asmtools.common.outputs;\n-\n-import org.openjdk.asmtools.common.Environment;\n-\n-import java.io.BufferedOutputStream;\n-import java.io.DataOutputStream;\n-import java.io.File;\n-import java.io.FileNotFoundException;\n-import java.io.FileOutputStream;\n-import java.io.IOException;\n-import java.io.OutputStreamWriter;\n-import java.io.PrintWriter;\n-import java.nio.file.FileSystems;\n-import java.util.Optional;\n-\n-public class DirOutput extends NamedToolOutput {\n-\n-    private final File dir;\n-    private File outfile;\n-    private FileOutputStream fos;\n-    private PrintWriter pw;\n-\n-    public DirOutput(File dir) {\n-        this.dir = dir;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return super.toString() + \" to \" + dir;\n-    }\n-\n-    @Override\n-    public void printlns(String line) {\n-        pw.println(line);\n-    }\n-\n-    @Override\n-    public void prints(String line) {\n-        pw.print(line);\n-    }\n-\n-    @Override\n-    public void prints(char line) {\n-        pw.print(line);\n-    }\n-\n-    @Override\n-    public void startClass(String fqn, Optional<String> fileExtension, Environment environment) throws IOException {\n-        super.startClass(fqn, fileExtension, environment);\n-        final String fileSeparator = FileSystems.getDefault().getSeparator();\n-        if (dir == null) {\n-            int startOfName = fqn.lastIndexOf(fileSeparator);\n-            if (startOfName != -1) {\n-                fqn = fqn.substring(startOfName + 1);\n-            }\n-            outfile = new File(fqn + fileExtension.orElseGet(() -> \"\"));\n-        } else {\n-            environment.traceln(\"writing -d \" + dir.getPath());\n-            fqn = fqn.replace(\"\/\", fileSeparator);\n-             outfile = new File(dir, fqn + fileExtension.orElseGet(() -> \"\"));\n-            File outDir = new File(outfile.getParent());\n-            if (!outDir.exists() && !outDir.mkdirs()) {\n-                environment.error(\"err.cannot.write\", outDir.getPath());\n-                return;\n-            }\n-        }\n-        fos = new FileOutputStream(outfile);\n-        pw = new PrintWriter(new OutputStreamWriter(fos));\n-    }\n-\n-    @Override\n-    public void finishClass(String fqn) throws IOException {\n-        super.finishClass(fqn);\n-        flush();\n-        try {\n-            pw.close();\n-        } finally {\n-            fos.close();\n-        }\n-\n-    }\n-\n-    @Override\n-    public void flush() {\n-        try {\n-            fos.flush();\n-        } catch (IOException ex) {\n-            throw new RuntimeException(ex);\n-        }\n-    }\n-\n-    @Override\n-    public DataOutputStream getDataOutputStream() throws FileNotFoundException {\n-        return new DataOutputStream(new BufferedOutputStream(fos));\n-    }\n-}\n","filename":"src\/org\/openjdk\/asmtools\/common\/outputs\/DirOutput.java","additions":0,"deletions":118,"binary":false,"changes":118,"status":"deleted"},{"patch":"@@ -48,2 +48,2 @@\n-    public void finishClass(String fqn) throws IOException {\n-        super.finishClass(fqn);\n+    public void finishClass(String fullyQualifiedName) throws IOException {\n+        super.finishClass(fullyQualifiedName);\n","filename":"src\/org\/openjdk\/asmtools\/common\/outputs\/EscapedPrintStreamOutput.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,194 @@\n+\/*\n+ * Copyright (c) 2023, 2025, Oracle, Red Hat  and\/or theirs affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.common.outputs;\n+\n+import org.openjdk.asmtools.common.Environment;\n+\n+import java.io.*;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+\/**\n+ * A concrete implementation of {@link NamedToolOutput} that writes output to a file system.\n+ *\n+ * @author Leonid Kuskov\n+ *\/\n+public class FSOutput extends NamedToolOutput {\n+\n+    private FSDestination destination;\n+    private File dir;\n+    private File file;\n+    private FileOutputStream fos;\n+    private PrintWriter pw;\n+\n+    private static final String fileSeparator = FileSystems.getDefault().getSeparator();\n+\n+    public FSOutput() {\n+    }\n+\n+    @Override\n+    public boolean isReady() {\n+        return pw != null;\n+    }\n+\n+    public FSOutput setFile(File dir, String file) {\n+        if (this.dir == null)\n+            this.dir = dir;\n+        destination = FSDestination.FILE;\n+        setDestinationFileName(file);\n+        return this;\n+    }\n+\n+    public FSOutput setDir(File dir) {\n+        this.dir = dir;\n+        if (destination == null) {\n+            destination = FSDestination.DIR;\n+        }\n+        return this;\n+    }\n+\n+    public File getDir() {\n+        return dir;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        String str = super.toString();\n+        if (dir != null && file != null) {\n+            str.concat(dir != null ? dir.toString() : \"\").\n+                    concat(fileSeparator).\n+                    concat(file != null ? file.toString() : \"\");\n+        }\n+        return str;\n+    }\n+\n+    @Override\n+    public void printlns(String line) {\n+        pw.println(line);\n+    }\n+\n+    @Override\n+    public void prints(String line) {\n+        pw.print(line);\n+    }\n+\n+    @Override\n+    public void prints(char line) {\n+        pw.print(line);\n+    }\n+\n+    \/**\n+     * Starts writing a new class file with the specified fully qualified name and optional file extension.\n+     *\n+     * @param fullyQualifiedName the fully qualified name of the class\n+     * @param fileExtension      the optional file extension\n+     * @param environment        the current environment\n+     * @throws IOException if an I\/O error occurs\n+     *\/\n+    @Override\n+    public void startClass(String fullyQualifiedName, Optional<String> fileExtension, Environment environment) throws IOException {\n+        super.startClass(fullyQualifiedName, fileExtension, environment);\n+        String packageName, fileName;\n+        int index = fullyQualifiedName.lastIndexOf(fileSeparator);\n+        if (index != -1) {\n+            packageName = environment.isIgnorePackage() ? \"\" : fullyQualifiedName.substring(0, index);\n+            fileName = fullyQualifiedName.substring(index + 1);\n+        } else {\n+            packageName = \"\";\n+            fileName = fullyQualifiedName;\n+        }\n+        \/**\n+         * The destinationFileName is used to form the filename of the output.\n+         * 1. File FILENAME or class file CLASSNAME takes the highest priority. This filename cannot be overridden.\n+         * 2. Public class CLASSNAME { }– class name is CLASSNAME, and this CLASSNAME will be used to generate the filename (i.e., CLASSNAME.class).\n+         * 3. this_class – The filename will be CLASSNAME.class, but the class name will be this_class.\n+         *\n+         * Also, if the -f option is used and the number of processed class files is more than 1,\n+         * then destinationFileName will only apply to the first input file only.\n+         * For example, if you run jdis -w . -f FILE input.class input2.class, then in the output directory,\n+         * the files FILE.jasm and input2.jasm will be generated.\n+         *\/\n+        String destinationFileName = this.getDestinationFileName();\n+        if (destinationFileName != null) {\n+            fileName = destinationFileName + fileExtension.orElse(\"\");\n+        } else {\n+            fileName = fileName + fileExtension.orElse(\"\");\n+        }\n+        if (dir == null) {\n+            environment.traceln(\"writing to %s %s\".formatted(packageName, fileName));\n+            file = new File(packageName, fileName);\n+        } else {\n+            file = Paths.get(dir.getPath(), packageName, fileName).toFile();\n+            environment.traceln(() -> \"writing -d %s = \\\"%s\\\"\".formatted(dir.getPath(), file.getAbsolutePath()));\n+            File outDir = new File(file.getParent());\n+            if (!outDir.exists() && !outDir.mkdirs()) {\n+                environment.error(\"err.cannot.create\", outDir.getPath());\n+                return;\n+            }\n+        }\n+        fos = new FileOutputStream(file);\n+        pw = new PrintWriter(new OutputStreamWriter(fos));\n+    }\n+\n+    @Override\n+    public void finishClass(String fullyQualifiedName) throws IOException {\n+        super.finishClass(fullyQualifiedName);\n+        flush();\n+        try {\n+            if (pw != null) {\n+                pw.close();\n+            }\n+        } finally {\n+            if (fos != null) {\n+                fos.close();\n+            }\n+        }\n+\n+    }\n+\n+    @Override\n+    public void flush() {\n+        if (fos != null) {\n+            try {\n+                fos.flush();\n+            } catch (IOException ex) {\n+                throw new RuntimeException(ex);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public DataOutputStream getDataOutputStream() throws FileNotFoundException {\n+        return new DataOutputStream(new BufferedOutputStream(fos));\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return ( file !=null  ) ? file.toString() : \"file stream\";\n+    }\n+\n+    public enum FSDestination {\n+        FILE, DIR;\n+    }\n+}\n","filename":"src\/org\/openjdk\/asmtools\/common\/outputs\/FSOutput.java","additions":194,"deletions":0,"binary":false,"changes":194,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle, Red Hat  and\/or theirs affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle, Red Hat  and\/or theirs affiliates. All rights reserved.\n@@ -35,1 +35,14 @@\n-    protected String fqn;\n+\n+    protected String fullyQualifiedName;\n+    \/**\n+     * If the output is a file, then the destinationFileName is used to form the filename of the output.\n+     * 1. File FILENAME or class file CLASSNAME takes the highest priority. This filename cannot be overridden.\n+     * 2. Public class CLASSNAME { }– class name is CLASSNAME, and this CLASSNAME will be used to generate the filename (i.e., CLASSNAME.class).\n+     * 3. this_class – The filename will be CLASSNAME.class, but the class name will be this_class.\n+     * <p>\n+     * Also, if the -f option is used and the number of processed class files is more than 1,\n+     * then destinationFileName will only apply to the first input file only.\n+     * For example, if you run jdis -w . -f FILE input.class input2.class, then in the output directory,\n+     * the files FILE.jasm and input2.jasm will be generated.\n+     *\/\n+    protected String destinationFileName = null;\n@@ -41,1 +54,5 @@\n-        return fqn;\n+        return fullyQualifiedName;\n+    }\n+\n+    public String getFullyQualifiedName() {\n+        return fullyQualifiedName;\n@@ -46,1 +63,1 @@\n-        this.fqn = fullyQualifiedName;\n+        this.fullyQualifiedName = fullyQualifiedName;\n@@ -52,2 +69,7 @@\n-    public void finishClass(String fqn) throws IOException {\n-        this.fqn = null;\n+    public void finishClass(String fullyQualifiedName) throws IOException {\n+        this.fullyQualifiedName = null;\n+        this.destinationFileName = null;\n+    }\n+\n+    public String getDestinationFileName() {\n+        return destinationFileName;\n@@ -55,0 +77,8 @@\n+\n+    public NamedToolOutput setDestinationFileName(String destinationFileName) {\n+        this.destinationFileName = destinationFileName;\n+        return this;\n+    }\n+\n+    public abstract String getName();\n+\n","filename":"src\/org\/openjdk\/asmtools\/common\/outputs\/NamedToolOutput.java","additions":36,"deletions":6,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle, Red Hat  and\/or theirs affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle, Red Hat  and\/or theirs affiliates. All rights reserved.\n@@ -64,2 +64,2 @@\n-    public void finishClass(String fqn) throws IOException {\n-        super.finishClass(fqn);\n+    public void finishClass(String fullyQualifiedName) throws IOException {\n+        super.finishClass(fullyQualifiedName);\n@@ -79,1 +79,4 @@\n-\n+    @Override\n+    public String getName() {\n+        return \"text-output stream\";\n+    }\n","filename":"src\/org\/openjdk\/asmtools\/common\/outputs\/PrintWriterOutput.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle, Red Hat  and\/or theirs affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle, Red Hat  and\/or theirs affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-    private BiFunction<String, String, String> namedSourceOrnament = null;\n+    private BiFunction<String, String, String> namedSourceOrnament;\n@@ -43,1 +43,1 @@\n-    private StringBuilder currentClass;\n+    private StringBuilder curClsStringBuilder;\n@@ -62,1 +62,1 @@\n-        currentClass = new StringBuilder();\n+        curClsStringBuilder = new StringBuilder();\n@@ -68,1 +68,1 @@\n-            throw new RuntimeException(\"Ended different class - \" + fullyQualifiedName + \" - then started - \" + super.fqn);\n+            throw new RuntimeException(\"Ended different class - \" + fullyQualifiedName + \" - then started - \" + super.fullyQualifiedName);\n@@ -70,3 +70,3 @@\n-        outputs.add(new NamedSource(fullyQualifiedName, currentClass.toString(), namedSourceOrnament));\n-        super.fqn = null;\n-        currentClass = null;\n+        outputs.add(new NamedSource(fullyQualifiedName, curClsStringBuilder.toString(), namedSourceOrnament));\n+        super.fullyQualifiedName = null;\n+        curClsStringBuilder = null;\n@@ -82,1 +82,1 @@\n-        currentClass.append(line).append(\"\\n\");\n+        curClsStringBuilder.append(line).append(\"\\n\");\n@@ -87,1 +87,1 @@\n-        currentClass.append(line);\n+        curClsStringBuilder.append(line);\n@@ -92,1 +92,1 @@\n-        currentClass.append(line);\n+        curClsStringBuilder.append(line);\n@@ -99,0 +99,5 @@\n+    @Override\n+    public String getName() {\n+        return \"string\";\n+    }\n+\n","filename":"src\/org\/openjdk\/asmtools\/common\/outputs\/TextOutput.java","additions":16,"deletions":11,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -28,6 +28,1 @@\n-\n-import java.io.ByteArrayOutputStream;\n-import java.io.DataOutputStream;\n-import java.io.FileNotFoundException;\n-import java.io.IOException;\n-import java.io.PrintStream;\n+import java.io.*;\n@@ -38,1 +33,1 @@\n- * This class is a generic interface, symbolising any output from jdis\/jasm\/jdec\/jcoder.\n+ * This class is a generic interface, symbolizing any output from jdis\/jasm\/jdec\/jcoder.\n@@ -40,5 +35,6 @@\n- * UnitTests for asmtools uses mainly ByteOutput for assemblers  and TextOutput for disasemblers.\n- *\n- * Text\/Byte\/EscapedPrintStream outputs can be used as any 3rd part code which do not need files, aka IDE, instrumetations or similar.\n- *\n- * The interface methods goes in favor of asmtools, and for details and help see individual implementations\n+ * UnitTests for asmtools uses mainly ByteOutput for assemblers  and TextOutput for disassemblers.\n+ * <p>\n+ * Text\/Byte\/EscapedPrintStream outputs can be used as any 3rd part code that does not need files, aka IDE,\n+ * instrumentation or similar.\n+ * <p>\n+ * The interface methods go in favor of asmtools, and for details and help see individual implementations\n@@ -64,1 +60,0 @@\n-\n@@ -70,1 +65,0 @@\n-}\n@@ -72,0 +66,4 @@\n+    default boolean isReady() {\n+        return true;\n+    }\n+}\n","filename":"src\/org\/openjdk\/asmtools\/common\/outputs\/ToolOutput.java","additions":12,"deletions":14,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,2 @@\n+import static org.openjdk.asmtools.common.structure.ClassFileContext.VALUE_OBJECTS;\n+\n@@ -39,0 +41,3 @@\n+    \/\/ Vlahalla: Value Classes and Objects\n+    public static final int VALUE_OBJECTS_MAJOR_VERSION = 69;\n+    public static final int VALUE_OBJECTS_MINOR_VERSION = 65535;\n@@ -52,4 +57,1 @@\n-        frozen = false;\n-        isSetByParameter = false;\n-        major_version = UNDEFINED_VERSION;\n-        minor_version = UNDEFINED_VERSION;\n+        setVersion(UNDEFINED_VERSION, UNDEFINED_VERSION);\n@@ -58,0 +60,10 @@\n+        isSetByParameter = false;\n+        frozen = false;\n+    }\n+\n+    public CFVersion(CFVersion other) {\n+        this.setVersion(other.major_version, other.minor_version);\n+        threshold_major_version = other.threshold_major_version;\n+        threshold_minor_version = other.threshold_minor_version;\n+        this.isSetByParameter = other.isSetByParameter;\n+        this.frozen = other.frozen;\n@@ -61,1 +73,0 @@\n-        frozen = false;\n@@ -64,0 +75,3 @@\n+        if (isValueObjectContext()) {\n+            EModifier.setGlobalContext(VALUE_OBJECTS);\n+        }\n@@ -80,0 +94,3 @@\n+        if (isValueObjectContext()) {\n+            EModifier.setGlobalContext(VALUE_OBJECTS);\n+        }\n@@ -94,3 +111,1 @@\n-        this.major_version = major_version;\n-        this.minor_version = minor_version;\n-        return this;\n+        return setVersion(major_version, minor_version);\n@@ -101,2 +116,3 @@\n-        if (!frozen)\n-            this.major_version = major_version;\n+        if (!frozen) {\n+            setVersion(major_version, this.minor_version);\n+        }\n@@ -107,1 +123,3 @@\n-        if (!frozen) this.minor_version = minor_version;\n+        if (!frozen) {\n+            setVersion(this.major_version, minor_version);\n+        }\n@@ -153,2 +171,3 @@\n-        major_version = (major_version == UNDEFINED_VERSION) ? DEFAULT_MODULE_MAJOR_VERSION : major_version;\n-        minor_version = (minor_version == UNDEFINED_VERSION) ? DEFAULT_MODULE_MINOR_VERSION : minor_version;\n+        if (!isSet()) {\n+            setVersion(DEFAULT_MODULE_MAJOR_VERSION, DEFAULT_MODULE_MINOR_VERSION);\n+        }\n@@ -159,2 +178,7 @@\n-        major_version = (major_version == UNDEFINED_VERSION) ? DEFAULT_MAJOR_VERSION : major_version;\n-        minor_version = (minor_version == UNDEFINED_VERSION) ? DEFAULT_MINOR_VERSION : minor_version;\n+        if (!isSet()) {\n+            if (EModifier.GlobalContext() == VALUE_OBJECTS) {\n+                setVersion(VALUE_OBJECTS_MAJOR_VERSION, VALUE_OBJECTS_MINOR_VERSION);\n+            } else {\n+                setVersion(DEFAULT_MAJOR_VERSION, DEFAULT_MINOR_VERSION);\n+            }\n+        }\n@@ -165,7 +189,1 @@\n-        CFVersion cfVersion = new CFVersion();\n-        cfVersion.major_version = cfv.major_version;\n-        cfVersion.minor_version = cfv.minor_version;\n-        cfVersion.threshold_major_version = cfv.threshold_major_version;\n-        cfVersion.threshold_minor_version = cfv.threshold_minor_version;\n-        cfVersion.isSetByParameter = cfv.isSetByParameter;\n-        cfVersion.frozen = cfv.frozen;\n+        CFVersion cfVersion = new CFVersion(cfv);\n@@ -176,1 +194,1 @@\n-            return this.minor_version;\n+        return this.minor_version;\n@@ -182,0 +200,14 @@\n+\n+    public boolean isValueObjectContext() {\n+        return major_version > VALUE_OBJECTS_MAJOR_VERSION ||\n+                (major_version == VALUE_OBJECTS_MAJOR_VERSION && minor_version == VALUE_OBJECTS_MINOR_VERSION);\n+    }\n+\n+    public static boolean isValueObjectContext(int major_version, int minor_version) {\n+        return major_version > VALUE_OBJECTS_MAJOR_VERSION ||\n+                (major_version == VALUE_OBJECTS_MAJOR_VERSION && minor_version == VALUE_OBJECTS_MINOR_VERSION);\n+    }\n+\n+    public static CFVersion ValueObjectsVersion() {\n+        return new CFVersion(VALUE_OBJECTS_MAJOR_VERSION, VALUE_OBJECTS_MINOR_VERSION);\n+    }\n","filename":"src\/org\/openjdk\/asmtools\/common\/structure\/CFVersion.java","additions":56,"deletions":24,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,11 +30,13 @@\n-    NONE(0x0000, \"n\/a\"),\n-    CLASS(0x0001, \"class\"),\n-    FIELD(0x0002, \"field\"),\n-    METHOD(0x0004, \"method\"),\n-    INNER_CLASS(0x0008, \"inner-class\"),\n-    MODULE(0x0010, \"module\"),\n-    REQUIRES(0x0020, \"requires\"),\n-    EXPORTS(0x0040, \"exports\"),\n-    OPENS(0x0080, \"opens\"),\n-    METHOD_PARAMETERS(0x0100, \"method parameters\"),\n-    MODULE_DIRECTIVES(0x0020 | 0x0040 | 0x0080, \"module directives\");\n+    NONE(0x0000, \"n\/a\", false),\n+    CLASS(0x0001, \"class\", false),\n+    FIELD(0x0002, \"field\", false),\n+    METHOD(0x0004, \"method\", false),\n+    INNER_CLASS(0x0008, \"inner-class\", false),\n+    MODULE(0x0010, \"module\", false),\n+    REQUIRES(0x0020, \"requires\", false),\n+    EXPORTS(0x0040, \"exports\", false),\n+    OPENS(0x0080, \"opens\", false),\n+    METHOD_PARAMETERS(0x0100, \"method parameters\", false),\n+    MODULE_DIRECTIVES(0x0020 | 0x0040 | 0x0080, \"module directives\", false),\n+    ORDINARY(0x0200, \"ordinary\", true),\n+    VALUE_OBJECTS(0x0200, \"value classes and objects\", true);\n@@ -44,0 +46,1 @@\n+    private final boolean globalContext;\n@@ -45,1 +48,1 @@\n-    ClassFileContext(int id, String print) {\n+    ClassFileContext(int id, String print, boolean globalContext) {\n@@ -47,1 +50,2 @@\n-        printVal = print;\n+        this.printVal = print;\n+        this.globalContext = globalContext;\n@@ -58,0 +62,4 @@\n+    public boolean isGlobal() {\n+        return globalContext;\n+    }\n+\n@@ -60,1 +68,1 @@\n-            if ( (cfc.id & this.id) != 0) {\n+            if ((cfc.id & this.id) != 0) {\n","filename":"src\/org\/openjdk\/asmtools\/common\/structure\/ClassFileContext.java","additions":23,"deletions":15,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-    ATT_RuntimeInvisibleParameterAnnotations(19, \"ATT_RuntimeInvisibleParameterAnnotations\", \"RuntimeInvisibleParameterAnnotations\",CONSTANT_UNKNOWN ),\n+    ATT_RuntimeInvisibleParameterAnnotations(19, \"ATT_RuntimeInvisibleParameterAnnotations\", \"RuntimeInvisibleParameterAnnotations\", CONSTANT_UNKNOWN),\n@@ -93,1 +93,1 @@\n-    ATT_Preload(36, \"ATT_Preload\", \"Preload\", CONSTANT_CLASS);\n+    ATT_LoadableDescriptors(36, \"ATT_LoadableDescriptors\", \"LoadableDescriptors\", CONSTANT_CLASS);\n@@ -109,0 +109,9 @@\n+    public boolean isOneOf(EAttribute... attributes) {\n+        for (EAttribute attribute : attributes) {\n+            if (attribute == this) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n@@ -113,1 +122,3 @@\n-    public String parseKey() { return parseKey; }\n+    public String parseKey() {\n+        return parseKey;\n+    }\n@@ -115,1 +126,3 @@\n-    public ClassFileConst.ConstType getCPTypeOfIndex() { return constType; }\n+    public ClassFileConst.ConstType getCPTypeOfIndex() {\n+        return constType;\n+    }\n","filename":"src\/org\/openjdk\/asmtools\/common\/structure\/EAttribute.java","additions":17,"deletions":4,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.common.structure;\n+\n+\/**\n+ * Attribute location\n+ * Table 4.7-C. Predefined class file attributes (by location)\n+ *\/\n+public enum ELocation {\n+    UNKNOWN,\n+    ClassFile,\n+    field_info,\n+    method_info,\n+    record_component_info,\n+    Code\n+}\n","filename":"src\/org\/openjdk\/asmtools\/common\/structure\/ELocation.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -40,1 +40,1 @@\n-    ACC_NONE(0x0000, \"\", NONE),                                 \/\/ <<everywhere>>\n+    ACC_NONE(0x0000, \"\", NONE),                                     \/\/ <<everywhere>>\n@@ -48,3 +48,3 @@\n-    ACC_SUPER(0x0020, \"super\", CLASS),   \/\/ although this seems to be easily ignored, but not including it to the class, where it originally was,\n-                                                      \/\/ will cause running hotswap to fail, with\n-                                                      \/\/java.lang.UnsupportedOperationException: class redefinition failed: attempted to change the class modifiers\n+    ACC_SUPER(0x0020, \"super\", CLASS),\n+    ACC_IDENTITY(0x0020, \"identity\", CLASS, INNER_CLASS, VALUE_OBJECTS),     \/\/ Value Classes and Objects\n+    ACC_VALUE(0x0000, \"value\", CLASS, INNER_CLASS, VALUE_OBJECTS),           \/\/ Value Classes and Objects\n@@ -59,1 +59,0 @@\n-    ACC_PERMITS_VALUE(0x0040, \"permits_value\", CLASS, INNER_CLASS),       \/\/ valhalla\n@@ -65,1 +64,0 @@\n-    ACC_VALUE(0x0100, \"value\", CLASS, INNER_CLASS),                         \/\/ valhalla\n@@ -71,2 +69,1 @@\n-    ACC_STRICT(0x0800, \"strict\", METHOD),\n-    ACC_PRIMITIVE(0x0800, \"primitive\", CLASS, INNER_CLASS),                  \/\/ valhalla\n+    ACC_STRICT(0x0800, \"strict\", METHOD, FIELD, VALUE_OBJECTS),              \/\/ FIELD added for VALUE_OBJECTS CONTEXT\n@@ -84,1 +81,3 @@\n-    DEPRECATED_ATTRIBUTE(0x00020000, \"Deprecated(Pseudo)\", CLASS, INNER_CLASS, FIELD, METHOD);\n+    DEPRECATED_ATTRIBUTE(0x00020000, \"Deprecated(Pseudo)\", CLASS, INNER_CLASS, FIELD, METHOD),\n+\n+    VALUE_OBJECTS_ATTRIBUTE(0x010000000, \"ValueObjects(Pseudo)\", CLASS, INNER_CLASS, FIELD);\n@@ -89,1 +88,2 @@\n-            ACC_STRICT, ACC_SYNTHETIC};\n+            ACC_SYNTHETIC,\n+            ACC_STRICT };           \/\/ Valhalla SPECIFIC\n@@ -91,3 +91,4 @@\n-    public static final EModifier[] MM_CLASS = {ACC_PUBLIC, ACC_FINAL, ACC_SUPER,\n-            ACC_PRIMITIVE, ACC_INTERFACE, ACC_ABSTRACT, ACC_SYNTHETIC,\n-            ACC_ANNOTATION, ACC_ENUM, ACC_MODULE, ACC_VALUE, ACC_PERMITS_VALUE, ACC_PRIMITIVE};\n+    public static final EModifier[] MM_CLASS = {ACC_PUBLIC, ACC_PRIVATE, ACC_PROTECTED, ACC_FINAL,\n+            ACC_SUPER, ACC_IDENTITY, ACC_INTERFACE,\n+            ACC_ABSTRACT, ACC_SYNTHETIC,\n+            ACC_ANNOTATION, ACC_ENUM, ACC_MODULE};\n@@ -96,1 +97,2 @@\n-    public static final EModifier[] MM_INTERFACE = {ACC_PUBLIC, ACC_INTERFACE,\n+    public static final EModifier[] MM_INTERFACE = {ACC_PUBLIC, ACC_PRIVATE, ACC_PROTECTED,\n+            ACC_INTERFACE,\n@@ -101,1 +103,2 @@\n-            ACC_SYNTHETIC, ACC_ENUM};\n+            ACC_SYNTHETIC, ACC_ENUM,\n+            ACC_STRICT};            \/\/ Valhalla SPECIFIC\n@@ -103,1 +106,2 @@\n-    public static final EModifier[] MM_ABSTRACT_METHOD = {ACC_PUBLIC, ACC_PROTECTED, ACC_BRIDGE, ACC_VARARGS, ACC_ABSTRACT,\n+    public static final EModifier[] MM_ABSTRACT_METHOD = {ACC_PUBLIC, ACC_PRIVATE, ACC_PROTECTED,\n+            ACC_BRIDGE, ACC_VARARGS, ACC_ABSTRACT,\n@@ -106,1 +110,2 @@\n-    public static final EModifier[] MM_INIT_METHOD = {ACC_PUBLIC, ACC_PRIVATE, ACC_PROTECTED, ACC_VARARGS, ACC_SYNTHETIC,\n+    public static final EModifier[] MM_INIT_METHOD = {ACC_PUBLIC, ACC_PRIVATE, ACC_PROTECTED,\n+            ACC_VARARGS, ACC_SYNTHETIC,\n@@ -109,1 +114,2 @@\n-    public static final EModifier[] MM_NESTED_CLASS = {ACC_PUBLIC, ACC_PRIVATE, ACC_PROTECTED, ACC_STATIC, ACC_FINAL,\n+    public static final EModifier[] MM_NESTED_CLASS = {ACC_PUBLIC, ACC_PRIVATE, ACC_PROTECTED,\n+            ACC_STATIC, ACC_FINAL,\n@@ -112,1 +118,2 @@\n-    private static final EModifier[] MM_INTERFACE_METHOD = {ACC_PUBLIC, ACC_PRIVATE, ACC_STATIC, ACC_BRIDGE, ACC_VARARGS,\n+    private static final EModifier[] MM_INTERFACE_METHOD = {ACC_PUBLIC, ACC_PRIVATE, ACC_PROTECTED,\n+            ACC_STATIC, ACC_BRIDGE, ACC_VARARGS,\n@@ -120,1 +127,1 @@\n-    public static String NAMES_SUFFIX = \" \";\n+    public static String NAMES_SUFFIX = \"\";\n@@ -128,0 +135,3 @@\n+    \/\/ Externally changed switchers\n+    private static ClassFileContext globalContext = ORDINARY;\n+\n@@ -140,0 +150,8 @@\n+    public static void setGlobalContext(ClassFileContext globalContext) {\n+        EModifier.globalContext = globalContext;\n+    }\n+\n+    public static ClassFileContext GlobalContext() {\n+        return EModifier.globalContext;\n+    }\n+\n@@ -209,0 +227,25 @@\n+    public static int getNotPermitted(int flags, EModifier[] set) {\n+        int notPermitted = 0;\n+        for (EModifier mod : set) {\n+            if ((flags & mod.flag) != 0) {\n+                flags &= ~mod.flag;\n+                ClassFileContext context = mod.getGlobalContext();\n+                if( globalContext != context && context != ORDINARY) {\n+                    notPermitted |= mod.flag;\n+                }\n+            }\n+        }\n+        notPermitted |= flags;\n+        return notPermitted;\n+    }\n+\n+    public ClassFileContext getGlobalContext() {\n+        for (ClassFileContext c : contexts) {\n+            if (c.isGlobal()) {\n+                return c;\n+            }\n+        }\n+        return ORDINARY;\n+    }\n+\n+\n@@ -237,6 +280,3 @@\n-    public static boolean isValue(int flags) {\n-        return (flags & ACC_VALUE.flag) != 0;\n-    }\n-\n-    public static boolean isPermitsValue(int flags) {\n-        return (flags & ACC_PERMITS_VALUE.flag) != 0;\n+    \/\/  Value Classes and Objects\n+    public static boolean isValueObjects(int flags) {\n+        return (flags & VALUE_OBJECTS_ATTRIBUTE.flag) != 0;\n@@ -245,2 +285,2 @@\n-    public static boolean isPrimitive(int flags) {\n-        return (flags & ACC_PRIMITIVE.flag) != 0;\n+    public static boolean isIdentity(int flags) {\n+        return (flags & ACC_IDENTITY.flag) != 0;\n@@ -283,1 +323,0 @@\n-\n@@ -292,0 +331,13 @@\n+    \/*\n+     * Is more than one flag set in the list?\n+     *\/\n+    public static boolean moreThanOne(int flags, EModifier... modifiers) {\n+        int count = 0;\n+        for (EModifier m : modifiers) {\n+            if( (flags & m.flag) != 0) {\n+                count++;\n+            }\n+        }\n+        return count > 1;\n+    }\n+\n@@ -315,1 +367,1 @@\n-            if( m.contexts.contains(context) ) {\n+            if (m.contexts.contains(context)) {\n@@ -343,2 +395,2 @@\n-     * @param flags   the flags to choose a corresponding names or keywords.\n-     * @param isName  either the JVMS modifier names ot JLS keywords are selected\n+     * @param flags   the flags to choose the corresponding names or keywords.\n+     * @param isName  either the JVMS modifier names or JLS keywords are selected\n@@ -353,1 +405,2 @@\n-        } else if (isPrivate(flags) && context.belongToContextOf(ACC_PRIVATE)) {\n+        }\n+        if (isPrivate(flags) && context.belongToContextOf(ACC_PRIVATE)) {\n@@ -355,1 +408,2 @@\n-        } else if (isProtected(flags) && context.belongToContextOf(ACC_PROTECTED)) {\n+        }\n+        if (isProtected(flags) && context.belongToContextOf(ACC_PROTECTED)) {\n@@ -376,1 +430,6 @@\n-                    flags = addTo(list, flags, isName, ACC_SUPER);\n+                    flags = addTo(list, flags, isName, (globalContext == VALUE_OBJECTS) ? ACC_IDENTITY : ACC_SUPER);\n+                }\n+                case INNER_CLASS -> {\n+                    if(globalContext == VALUE_OBJECTS) {\n+                        flags = addTo(list, flags, isName, ACC_IDENTITY);\n+                    }\n@@ -389,1 +448,0 @@\n-                case CLASS, INNER_CLASS -> flags = addTo(list, flags, isName, ACC_PERMITS_VALUE);\n@@ -403,1 +461,0 @@\n-                case CLASS, INNER_CLASS -> flags = addTo(list, flags, isName, ACC_VALUE);\n@@ -419,2 +476,2 @@\n-        \/\/ ACC_STRICT ACC_PRIMITIVE\n-        if (isStrict(flags)) {                          \/\/ == isPrimitive(flags)\n+        \/\/ ACC_STRICT\n+        if (isStrict(flags)) {\n@@ -423,1 +480,5 @@\n-                case CLASS, INNER_CLASS -> flags = addTo(list, flags, isName, ACC_PRIMITIVE);\n+                case FIELD -> {\n+                    if (globalContext == VALUE_OBJECTS) {\n+                        flags = addTo(list, flags, isName, ACC_STRICT);\n+                    }\n+                }\n","filename":"src\/org\/openjdk\/asmtools\/common\/structure\/EModifier.java","additions":101,"deletions":40,"binary":false,"changes":141,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,1 @@\n+import org.openjdk.asmtools.asmutils.FormatConsumer;\n@@ -27,1 +28,0 @@\n-import java.io.PrintWriter;\n@@ -32,1 +32,0 @@\n-import java.util.function.Consumer;\n@@ -36,2 +35,0 @@\n-import static java.lang.String.format;\n-\n@@ -45,1 +42,1 @@\n-     * @param errorConsumer   consumer to announce a problem\n+     * @param errorConsumer      consumer to announce a problem\n@@ -48,1 +45,1 @@\n-    public static VerificationType getVerificationType(int verificationTypeID, Optional<Consumer<String>> errorConsumer) {\n+    public static VerificationType getVerificationType(int verificationTypeID, Optional<FormatConsumer<String, Object>> errorConsumer) {\n@@ -52,1 +49,1 @@\n-            errorConsumer.ifPresent(c->c.accept(format(\"Unknown StackMap verification type %d\", verificationTypeID)));\n+            errorConsumer.ifPresent(c -> c.format(\"error.stackmap.unknown.type\", verificationTypeID));\n@@ -62,1 +59,1 @@\n-     * Get Frame Type by tag belonging the range\n+     * Get Entry Type by tag belonging the range\n@@ -67,4 +64,4 @@\n-    public static FrameType stackMapFrameType(int tag) {\n-        FrameType frameType;\n-        frameType = FrameType.getByTag(tag);\n-        return frameType;\n+    public static EntryType stackMapEntryType(int tag) {\n+        EntryType entryType;\n+        entryType = EntryType.getByTag(tag);\n+        return entryType;\n@@ -79,2 +76,12 @@\n-    public static int getFrameTypeTag(String frameTypeName) {\n-        return FrameType.getByTagName(frameTypeName).fromTag();\n+    public static int getFrameTypeTagByName(String frameTypeName) {\n+        return EntryType.getByTagName(frameTypeName).fromTag();\n+    }\n+\n+    \/**\n+     * Get entry type id by a name\n+     *\n+     * @param entryTypeName entry type name\n+     * @return Stack FrameType tag [0..255]\n+     *\/\n+    public static EntryType getEntryTypeByName(String entryTypeName) {\n+        return EntryType.getByTagName(entryTypeName);\n@@ -89,2 +96,2 @@\n-    public static boolean isValidFrameType(int tag) {\n-        return FrameType.isValid(tag);\n+    public static boolean isValidEntryType(int tag) {\n+        return EntryType.isValid(tag);\n@@ -98,1 +105,1 @@\n-        ITEM_UNKNOWN(-1, \"UNKNOWN\", \"UNKNOWN\"),     \/\/ placeholder for wrong types\n+        ITEM_UNKNOWN(-1, \"??? Unknown verification type\", \"UNKNOWN\"),     \/\/ placeholder for wrong types\n@@ -168,2 +175,2 @@\n-    public enum FrameType {\n-        UNKNOWN_TYPE(-1, -1, \"unknown\"),                \/\/ placeholder for wrong frame types\n+    public enum EntryType {\n+        UNKNOWN_TYPE(-1, -1, \"unknown\", false, false, false),                \/\/ placeholder for wrong frame types\n@@ -171,12 +178,13 @@\n-        SAME_FRAME(0, 63, \"same\"),\n-        SAME_LOCALS_1_STACK_ITEM_FRAME(64, 127, \"stack1\"),\n-        RESERVED(128, 246, \"reserved\"),\n-        SAME_LOCALS_1_STACK_ITEM_EXTENDED_FRAME(247, 247, \"stack1_ex\"),\n-        CHOP_1_FRAME(250, 250, \"chop1\"),\n-        CHOP_2_FRAME(249, 249, \"chop2\"),\n-        CHOP_3_FRAME(248, 248, \"chop3\"),\n-        SAME_FRAME_EX(251, 251, \"same_ex\"),\n-        APPEND_FRAME(252, 254, \"append\"),\n-        FULL_FRAME(255, 255, \"full\");\n-\n-        private static HashMap<String, FrameType> tagNameToFrameType;\n+        SAME_FRAME(0, 63, \"same\", false, false, false),\n+        SAME_LOCALS_1_STACK_ITEM_FRAME(64, 127, \"stack1\", false, true, false),\n+        RESERVED(128, 245, \"reserved\", false, false, false),\n+        EARLY_LARVAL(246, 246, \"early_larval\", false, false, true),\n+        SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED(247, 247, \"stack1_ex\", false, true, false),\n+        CHOP_1_FRAME(250, 250, \"chop1\", false, false, false),\n+        CHOP_2_FRAME(249, 249, \"chop2\", false, false, false),\n+        CHOP_3_FRAME(248, 248, \"chop3\", false, false, false),\n+        SAME_FRAME_EXTENDED(251, 251, \"same_ex\", false, false, false),\n+        APPEND_FRAME(252, 254, \"append\", true, false, false),\n+        FULL_FRAME(255, 255, \"full\", true, true, false);\n+\n+        private static HashMap<String, EntryType> tagNameToFrameType;\n@@ -185,0 +193,3 @@\n+        private final boolean localMap;\n+        private final boolean stackMap;\n+        private final boolean fields;\n@@ -186,1 +197,1 @@\n-        FrameType(int from, int to, String tagName) {\n+        EntryType(int from, int to, String tagName, boolean localMap, boolean stackMap, boolean fields) {\n@@ -189,0 +200,3 @@\n+            this.localMap = localMap;\n+            this.stackMap = stackMap;\n+            this.fields = fields;\n@@ -191,1 +205,13 @@\n-        public static FrameType getByTagName(String tagName) {\n+        public boolean hasLocalMap() {\n+            return localMap;\n+        }\n+\n+        public boolean hasStackMap() {\n+            return stackMap;\n+        }\n+\n+        public boolean hasFields() {\n+            return fields;\n+        }\n+\n+        public static EntryType getByTagName(String tagName) {\n@@ -193,2 +219,2 @@\n-                tagNameToFrameType = (HashMap<String, FrameType>) Arrays.stream(FrameType.values()).\n-                        collect(Collectors.toMap(FrameType::tagName, Function.identity()));\n+                tagNameToFrameType = (HashMap<String, EntryType>) Arrays.stream(EntryType.values()).\n+                        collect(Collectors.toMap(EntryType::tagName, Function.identity()));\n@@ -196,2 +222,2 @@\n-            FrameType type = tagNameToFrameType.get(tagName);\n-            return type == null ? FrameType.UNKNOWN_TYPE : type;\n+            EntryType type = tagNameToFrameType.get(tagName);\n+            return type == null ? EntryType.UNKNOWN_TYPE : type;\n@@ -200,2 +226,2 @@\n-        public static FrameType getByTag(int tag) {\n-            for (FrameType type : FrameType.values()) {\n+        public static EntryType getByTag(int tag) {\n+            for (EntryType type : EntryType.values()) {\n@@ -206,1 +232,1 @@\n-            return FrameType.UNKNOWN_TYPE;\n+            return EntryType.UNKNOWN_TYPE;\n@@ -218,5 +244,2 @@\n-            return this.name().toLowerCase();\n-        }\n-\n-        public Range<Integer> tagRange() {\n-            return tagRange;\n+            String buf = this.name().toLowerCase().replace(\"_frame\", \"\");\n+            return buf.startsWith(\"chop\") ? tagName : buf;\n@@ -236,2 +259,2 @@\n-            for (FrameType frameType : Set.of(UNKNOWN_TYPE, RESERVED)) {\n-                if (frameType.inRange(tag))\n+            for (EntryType entryType : Set.of(UNKNOWN_TYPE, RESERVED)) {\n+                if (entryType.inRange(tag))\n","filename":"src\/org\/openjdk\/asmtools\/common\/structure\/StackMap.java","additions":71,"deletions":48,"binary":false,"changes":119,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-main.error.unknown_tool=Tool name \\\"{0}\\\" unrecognized.  See usage above for possible tool choices.\n+main.error.unknown_tool=Tool name \\\"{0}\\\" unrecognized.  See the usage above for possible tool choices.\n@@ -34,0 +34,1 @@\n+err.f_requires_argument=-f requires argument <file>\n@@ -36,0 +37,2 @@\n+info.opt.w=\\\n+\\     -w <directory> Specify where to place generated class files, without considering the classpath, otherwise <stdout>\n@@ -45,0 +48,1 @@\n+error.stackmap.unknown.type=Unknown StackMapTable verification type {0}\n","filename":"src\/org\/openjdk\/asmtools\/i18n.properties","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.jasm;\n+\n+import org.openjdk.asmtools.common.structure.EAttribute;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+\/**\n+ * Base class of the \"classes\/descriptors[]\" data of attributes\n+ * <p>\n+ * JEP 181 (Nest-based Access Control): class file 55.0\n+ * NestMembers_attribute {\n+ * u2 attribute_name_index;\n+ * u4 attribute_length;\n+ * u2 number_of_classes;\n+ * u2 classes[number_of_classes];\n+ * }\n+ * <p>\n+ * JEP 360 (Sealed types): class file 59.65535\n+ * PermittedSubclasses_attribute {\n+ * u2 attribute_name_index;\n+ * u4 attribute_length;\n+ * u2 number_of_classes;\n+ * u2 classes[number_of_classes];\n+ * }\n+ * <p>\n+ * Valhalla:\n+ * LoadableDescriptors_attribute {\n+ *     u2 attribute_name_index;\n+ *     u4 attribute_length;\n+ *     u2 number_of_descriptors;\n+ *     u2 descriptors[number_of_descriptors];\n+ * }\n+ *\/\n+public class ArrayAttr extends AttrData {\n+\n+    List<ConstCell> cells = new ArrayList<>();\n+\n+    public ArrayAttr(ConstantPool pool, EAttribute attribute, List<ConstCell> constCellList) {\n+        super(pool, attribute);\n+        for (ConstCell<?> cell : constCellList) {\n+            this.cells.add(classifyConstCell(pool, cell));\n+        }\n+    }\n+\n+    public int size() {\n+        return cells.size();\n+    }\n+\n+    @Override\n+    public int attrLength() {\n+        return 2 + cells.size() * 2;\n+    }\n+\n+    @Override\n+    public void write(CheckedDataOutputStream out) throws IOException {\n+        super.write(out);\n+        out.writeShort(cells.size());\n+        for (ConstCell c : cells) {\n+            out.writeShort(c.cpIndex);\n+        }\n+    }\n+}\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/ArrayAttr.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"},{"patch":"@@ -57,1 +57,1 @@\n-                                findAny();\n+                                findFirst();\n@@ -110,0 +110,3 @@\n+    public EAttribute getAttribute() {\n+        return attribute;\n+    }\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/AttrData.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-import java.util.ArrayList;\n+import java.util.List;\n@@ -33,1 +33,1 @@\n-    ArrayList<ConstCell<?>> arguments;\n+    List<ConstCell<?>> arguments;\n@@ -35,1 +35,1 @@\n-    public BootstrapMethodData(ConstCell bsmHandle, ArrayList<ConstCell<?>> arguments) {\n+    public BootstrapMethodData(ConstCell bsmHandle, List<ConstCell<?>> arguments) {\n@@ -67,0 +67,1 @@\n+\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/BootstrapMethodData.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -41,1 +41,5 @@\n-            case CONSTANT_INTEGER, CONSTANT_INTEGER_BYTE, CONSTANT_INTEGER_BOOLEAN, CONSTANT_INTEGER_CHAR, CONSTANT_INTEGER_SHORT -> {\n+            case CONSTANT_INTEGER, CONSTANT_INT,\n+                 CONSTANT_BYTE, CONSTANT_C_BYTE,\n+                 CONSTANT_CHAR, CONSTANT_C_CHAR,\n+                 CONSTANT_SHORT, CONSTANT_C_SHORT,\n+                 CONSTANT_C_BOOLEAN, CONSTANT_BOOLEAN -> {\n@@ -44,1 +48,1 @@\n-            case CONSTANT_FLOAT -> {\n+            case CONSTANT_FLOAT, CONSTANT_C_FLOAT -> {\n@@ -47,1 +51,1 @@\n-            case CONSTANT_DOUBLE -> {\n+            case CONSTANT_DOUBLE, CONSTANT_C_DOUBLE -> {\n@@ -50,1 +54,1 @@\n-            case CONSTANT_LONG -> {\n+            case CONSTANT_LONG, CONSTANT_C_LONG -> {\n@@ -56,1 +60,1 @@\n-            case CONSTANT_STRING -> {\n+            case CONSTANT_STRING, CONSTANT_L_STRING -> {\n@@ -59,1 +63,1 @@\n-            case CONSTANT_CLASS -> {\n+            case CONSTANT_CLASS, CONSTANT_C_CLASS -> {\n@@ -62,1 +66,1 @@\n-            case CONSTANT_METHODREF -> {\n+            case CONSTANT_METHODREF, CONSTANT_METHOD -> {\n@@ -65,1 +69,1 @@\n-            case CONSTANT_FIELDREF -> {\n+            case CONSTANT_FIELDREF, CONSTANT_FIELD -> {\n@@ -68,1 +72,1 @@\n-            case CONSTANT_INTERFACEMETHODREF -> {\n+            case CONSTANT_INTERFACEMETHODREF, CONSTANT_INTERFACEMETHOD -> {\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/CPTagVisitor.java","additions":13,"deletions":9,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,7 +32,5 @@\n-                \/\/ just ignore\n-                break;\n-            case CONSTANT_METHODTYPE:\n-            case CONSTANT_STRING:\n-            case CONSTANT_CLASS:\n-            case CONSTANT_MODULE:\n-            case CONSTANT_PACKAGE:\n+                break; \/\/ ignore\n+            case CONSTANT_METHODTYPE,\n+                 CONSTANT_STRING, CONSTANT_L_STRING,\n+                 CONSTANT_CLASS, CONSTANT_C_CLASS,\n+                 CONSTANT_MODULE, CONSTANT_PACKAGE:\n@@ -41,4 +39,4 @@\n-            case CONSTANT_METHODREF:\n-            case CONSTANT_FIELDREF:\n-            case CONSTANT_INTERFACEMETHODREF:\n-            case CONSTANT_NAMEANDTYPE:\n+            case CONSTANT_METHODREF,  CONSTANT_METHOD,\n+                 CONSTANT_FIELDREF,  CONSTANT_FIELD,\n+                CONSTANT_INTERFACEMETHODREF, CONSTANT_INTERFACEMETHOD,\n+                CONSTANT_NAMEANDTYPE:\n@@ -50,7 +48,11 @@\n-            case CONSTANT_UTF8:\n-            case CONSTANT_INTEGER:\n-            case CONSTANT_FLOAT:\n-            case CONSTANT_DOUBLE:\n-            case CONSTANT_LONG:\n-            case CONSTANT_DYNAMIC:\n-            case CONSTANT_INVOKEDYNAMIC:\n+            case CONSTANT_UTF8, CONSTANT_ASCIZ,\n+                 CONSTANT_INTEGER, CONSTANT_INT,\n+                 CONSTANT_BYTE, CONSTANT_C_BYTE,\n+                 CONSTANT_CHAR, CONSTANT_C_CHAR,\n+                 CONSTANT_SHORT, CONSTANT_C_SHORT,\n+                 CONSTANT_C_BOOLEAN, CONSTANT_BOOLEAN,\n+                 CONSTANT_FLOAT, CONSTANT_C_FLOAT,\n+                 CONSTANT_DOUBLE, CONSTANT_C_DOUBLE,\n+                 CONSTANT_LONG, CONSTANT_C_LONG,\n+                 CONSTANT_DYNAMIC, CONSTANT_INVOKEDYNAMIC:\n+                \/\/ default\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/CPVisitor.java","additions":21,"deletions":19,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-import org.openjdk.asmtools.common.SyntaxError;\n@@ -29,1 +28,0 @@\n-\n@@ -38,1 +36,2 @@\n-    private Checker() {}\n+    private Checker() {\n+    }\n@@ -55,0 +54,4 @@\n+    public static int notValidField(int flags) {\n+        return getNotPermitted(flags, MM_FIELD);\n+    }\n+\n@@ -64,1 +67,0 @@\n-\n@@ -77,1 +79,2 @@\n-        final int flags = isSynthetic(mod) ? mod & ~ACC_SYNTHETIC.getFlag() : mod;\n+        int flags = isSynthetic(mod) ? mod & ~ACC_SYNTHETIC.getFlag() : mod;\n+        flags = isStrict(flags) ? flags & ~ACC_STRICT.getFlag() : flags;\n@@ -95,0 +98,4 @@\n+    public static boolean isValueObjectsContext() {\n+        return EModifier.GlobalContext() == ClassFileContext.VALUE_OBJECTS;\n+    }\n+\n@@ -102,2 +109,15 @@\n-        if( scanner.token != Token.CLASS && ! EModifier.isInterface(mod) ) {\n-            scanner.environment.warning(scanner.pos, \"warn.one.of.two.token.expected\", Token.CLASS.parseKey(), Token.INTERFACE.parseKey());\n+        \/\/ Check \"Value Classes and Objects\" Context\n+        if (EModifier.isValueObjects(mod)) {\n+            EModifier.setGlobalContext(ClassFileContext.VALUE_OBJECTS);\n+        }\n+\n+        mod = EModifier.cleanFlags(mod, DEPRECATED_ATTRIBUTE, SYNTHETIC_ATTRIBUTE, VALUE_OBJECTS_ATTRIBUTE);\n+\n+        \/\/ check Ambiguous use of similar modifiers\n+        if (EModifier.moreThanOne(mod, ACC_PUBLIC, ACC_PROTECTED, ACC_PRIVATE)) {\n+            scanner.environment.warning(scanner.pos, \"warn.repeated.modifier\");\n+        }\n+\n+        if (scanner.token != Token.CLASS && !EModifier.isInterface(mod)) {\n+            scanner.environment.warning(scanner.pos, \"warn.one.of.two.token.expected\",\n+                    Token.CLASS.parseKey(), Token.INTERFACE.parseKey(), Token.CLASS.parseKey());\n@@ -105,1 +125,0 @@\n-        mod = EModifier.cleanFlags(mod, DEPRECATED_ATTRIBUTE, SYNTHETIC_ATTRIBUTE);\n@@ -113,8 +132,9 @@\n-            \/\/ If the ACC_INTERFACE flag is set, the ACC_FINAL, ACC_PRIMITIVE, ACC_ENUM, and ACC_MODULE flags must not be set.\n-            if (anyOf(mod, ACC_FINAL, ACC_PRIMITIVE, ACC_ENUM, ACC_MODULE)) {\n-                scanner.environment.warning(scanner.pos, \"warn.invalid.modifier.interface.set\",\n-                        EModifier.asNames(mod, ClassFileContext.CLASS));\n-            }\n-            if (!validInterface(mod)) {\n-                scanner.environment.warning(scanner.pos, \"warn.invalid.modifier.int\",\n-                        EModifier.asNames(mod & ~getFlags(MM_INTERFACE), ClassFileContext.CLASS));\n+            \/\/ If the ACC_INTERFACE flag is set, the ACC_FINAL, ACC_IDENTITY, ACC_ENUM, and ACC_MODULE flags must not be set.\n+            if (anyOf(mod, ACC_FINAL, ACC_ENUM, ACC_IDENTITY, ACC_MODULE)) {\n+                if (isValueObjectsContext()) {\n+                    scanner.environment.warning(scanner.pos, \"warn.invalid.modifier.interface.set.vo\",\n+                            EModifier.asNames(mod, ClassFileContext.CLASS));\n+                } else {\n+                    scanner.environment.warning(scanner.pos, \"warn.invalid.modifier.interface.set\",\n+                            EModifier.asNames(mod, ClassFileContext.CLASS));\n+                }\n@@ -122,2 +142,5 @@\n-            if (isEnum(mod)) {\n-                scanner.environment.warning(scanner.pos, \"warn.invalid.modifier.class.intenum\",\n+\/\/ Class\n+        } else {\n+            \/\/ If the ACC_INTERFACE flag is not set, any of the other flags in Table 4.1-B may be set except ACC_ANNOTATION and ACC_MODULE.\n+            if (anyOf(mod, ACC_ANNOTATION, ACC_MODULE)) {\n+                scanner.environment.warning(scanner.pos, \"warn.invalid.modifier.not.interface.set\",\n@@ -126,2 +149,9 @@\n-\/\/ class\n-        } else {\n+            if (isValueObjectsContext()) {\n+                \/\/ However, such a class file must have at least one of its ACC_FINAL, ACC_IDENTITY, or ACC_ABSTRACT flags set,\n+                if (!anyOf(mod, ACC_FINAL, ACC_IDENTITY, ACC_ABSTRACT)) {\n+                    String buf = EModifier.asNames(mod, ClassFileContext.CLASS);\n+                    buf = (buf.isEmpty() ? \"ACC_VALUE\" : \"ACC_VALUE, \".concat(buf));\n+                    scanner.environment.warning(scanner.pos, \"warn.invalid.modifier.not.interface.set.vo\", buf);\n+                }\n+\n+            }\n@@ -133,1 +163,2 @@\n-\/\/ any\n+\n+        \/\/ Must not have both its ACC_FINAL and ACC_ABSTRACT flags set (JLS §8.1.1.2).\n@@ -143,3 +174,3 @@\n-     * @param classData  The ClassData for the current class\n-     * @param mod The modifier flags being checked\n-     * @param pos the position of the parser in the file\n+     * @param classData The ClassData for the current class\n+     * @param mod       The modifier flags being checked\n+     * @param pos       the position of the parser in the file\n@@ -147,1 +178,1 @@\n-    public static void checkFieldModifiers(ClassData classData, int mod, int pos) {\n+    public static void checkFieldModifiers(ClassData classData, int mod, long pos) {\n@@ -152,1 +183,1 @@\n-            \/\/ they may have their ACC_SYNTHETIC flag set and must not have any of the other flags in Table 4.5-A set (JLS §9.3).\n+            \/\/they may have their ACC_STRICT_INIT or ACC_SYNTHETIC flag set, and must not have any of the other flags in Table 4.5-A set (JLS §9.3).\n@@ -157,0 +188,5 @@\n+            \/\/\n+            if( !isPublic(mod)) {\n+                environment.warning(pos, \"warn.invalid.modifier.intfield\",\n+                        EModifier.asNames(mod, ClassFileContext.FIELD));\n+            }\n@@ -158,0 +194,9 @@\n+            if (isValueObjectsContext()) {\n+                \/\/ Each field of a value class must have at least one of its ACC_STATIC or ACC_STRICT_INIT flags set.\n+                if (classData.isValue()) {\n+                    if (!EModifier.anyOf(mod, ACC_STATIC, ACC_STRICT)) {\n+                        environment.warning(pos, \"warn.invalid.modifier.for.value\",\n+                                EModifier.asNames(mod, ClassFileContext.FIELD));\n+                    }\n+                }\n+            }\n@@ -161,1 +206,2 @@\n-            if (!validField(mod)) {\n+            int invalidFlags = notValidField(mod);\n+            if (invalidFlags != 0) {\n@@ -163,1 +209,1 @@\n-                        EModifier.asNames(mod & ~getFlags(MM_FIELD), ClassFileContext.FIELD));\n+                        EModifier.asNames(invalidFlags, ClassFileContext.FIELD));\n@@ -173,12 +219,0 @@\n-            \/\/ In a primitive class, each field must have at least one of its ACC_STATIC or ACC_FINAL flags set.\n-            if (classData.isPrimitive()) {\n-                if (!EModifier.anyOf(mod, ACC_STATIC, ACC_FINAL) || !EModifier.both(mod, ACC_STATIC, ACC_FINAL)) {\n-                    environment.warning(pos, \"warn.invalid.modifier.primitive.flags\",\n-                            EModifier.asNames(mod, ClassFileContext.FIELD));\n-                }\n-                \/\/ In an abstract class, each field must have its ACC_STATIC flag set.\n-                if (classData.isAbstract() && !isStatic(mod)) {\n-                    environment.warning(pos, \"warn.invalid.modifier.primitive.abstract\",\n-                            EModifier.asNames(mod, ClassFileContext.FIELD));\n-                }\n-            }\n@@ -191,5 +225,5 @@\n-     * @param classData  The ClassData for the current class\n-     * @param mod The modifier flags being checked\n-     * @param pos the position of the parser in the file\n-     * @param isInit is the method constructor\n-     * @param isClinit is the method static initializer\n+     * @param classData The ClassData for the current class\n+     * @param mod       The modifier flags being checked\n+     * @param pos       the position of the parser in the file\n+     * @param isInit    is the method constructor\n+     * @param isClinit  is the method static initializer\n@@ -197,1 +231,1 @@\n-    public static void checkMethodModifiers(ClassData classData, int mod, int pos, boolean isInit, boolean isClinit) {\n+    public static void checkMethodModifiers(ClassData classData, int mod, long pos, boolean isInit, boolean isClinit) {\n@@ -225,1 +259,1 @@\n-            \/\/ class methods\n+                \/\/ class methods\n@@ -232,1 +266,1 @@\n-                    if ( !validAbstractMethod(mod) ) {\n+                    if (!validAbstractMethod(mod)) {\n@@ -236,1 +270,1 @@\n-                    } else if (isStrict(mod) &&  (cfvMajorVersion >= 46 && cfvMajorVersion <= 60) ) {\n+                    } else if (isStrict(mod) && (cfvMajorVersion >= 46 && cfvMajorVersion <= 60)) {\n@@ -247,3 +281,3 @@\n-     * @param classData  The ClassData for the current class\n-     * @param mod The modifier flags being checked\n-     * @param pos the position of the parser in the file\n+     * @param classData The ClassData for the current class\n+     * @param mod       The modifier flags being checked\n+     * @param pos       the position of the parser in the file\n@@ -251,1 +285,1 @@\n-    public static void checkInnerClassModifiers(ClassData classData, int mod, int pos) {\n+    public static void checkInnerClassModifiers(ClassData classData, int mod, long pos) {\n@@ -265,1 +299,1 @@\n-    public static void validateInterfaceMethod(int mod, ClassData cd, int pos) {\n+    public static void validateInterfaceMethod(int mod, ClassData cd, long pos) {\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/Checker.java","additions":89,"deletions":55,"binary":false,"changes":144,"status":"modified"},{"patch":"@@ -1,75 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.asmtools.jasm;\n-\n-import org.openjdk.asmtools.common.structure.EAttribute;\n-\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Optional;\n-\n-\/**\n- * Base class of the \"classes[]\" data of attributes\n- * <p>\n- * JEP 181 (Nest-based Access Control): class file 55.0\n- * NestMembers_attribute {\n- * u2 attribute_name_index;\n- * u4 attribute_length;\n- * u2 number_of_classes;\n- * u2 classes[number_of_classes];\n- * }\n- * <p>\n- * JEP 360 (Sealed types): class file 59.65535\n- * PermittedSubclasses_attribute {\n- * u2 attribute_name_index;\n- * u4 attribute_length;\n- * u2 number_of_classes;\n- * u2 classes[number_of_classes];\n- * }\n- *\/\n-public class ClassArrayAttr extends AttrData {\n-\n-    List<ConstCell> classes = new ArrayList<>();\n-\n-    public ClassArrayAttr(ConstantPool pool, EAttribute attribute, List<ConstCell> constCellList) {\n-        super(pool, attribute);\n-        for (ConstCell<?> cell : constCellList) {\n-            this.classes.add(classifyConstCell(pool, cell));\n-        }\n-    }\n-\n-    @Override\n-    public int attrLength() {\n-        return 2 + classes.size() * 2;\n-    }\n-\n-    @Override\n-    public void write(CheckedDataOutputStream out) throws IOException {\n-        super.write(out);\n-        out.writeShort(classes.size());\n-        for (ConstCell c : classes) {\n-            out.writeShort(c.cpIndex);\n-        }\n-    }\n-}\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/ClassArrayAttr.java","additions":0,"deletions":75,"binary":false,"changes":75,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+import org.openjdk.asmtools.common.outputs.NamedToolOutput;\n@@ -29,0 +30,1 @@\n+import org.openjdk.asmtools.common.structure.ELocation;\n@@ -39,0 +41,1 @@\n+import static org.openjdk.asmtools.common.structure.EAttribute.ATT_Record;\n@@ -82,1 +85,3 @@\n-    private PreloadAttr preloadAttr;\n+    private LoadableDescriptorsAttr loadableDescriptorsAttr;\n+    \/\/ EnclosingMethod\n+    private EnclosingMethodAttr enclosingMethodAttr;\n@@ -90,0 +95,1 @@\n+        this.attributeLocation = ELocation.ClassFile;\n@@ -134,1 +140,1 @@\n-     * @return True if the classes access flag indicates it is an interface.\n+     * @return True, if the class access flag indicates it is an interface.\n@@ -140,7 +146,3 @@\n-    \/**\n-     * Predicate that describes if this class has a primitive flag indicating that it is the primitive class.\n-     *\n-     * @return True if the classes access flag indicates it is the primitive class.\n-     *\/\n-    public final boolean isPrimitive() {\n-        return EModifier.isPrimitive(access);\n+    \/\/ Entity of the Value Classes and Objects\n+    public final boolean isValue() {\n+        return !EModifier.isIdentity(access);\n@@ -152,1 +154,1 @@\n-     * @return True if the classes access flag indicates it is the abstract class.\n+     * @return True, if the class access flag indicates it is the abstract class.\n@@ -252,6 +254,2 @@\n-    \/\/ API\n-    \/\/ Record\n-    public RecordData setRecord(int where) {\n-        if (recordAttributeExists()) {\n-            environment.warning(where, \"warn.record.repeated\");\n-        }\n+    public RecordData setRecord(long where) {\n+        checkExistence(ATT_Record, () -> environment.warning(where, \"warn.record.repeated\"));\n@@ -276,1 +274,1 @@\n-        environment.traceln(\" [ClassData.addFieldIfAbsent]:  #\" +\n+        environment.traceln(() -> \" [ClassData.addFieldIfAbsent]:  #\" +\n@@ -297,1 +295,1 @@\n-        environment.traceln(\" [ClassData.addField]:  #\" +\n+        environment.traceln(() -> \" [ClassData.addField]:  #\" +\n@@ -311,1 +309,1 @@\n-        environment.traceln(\" [ClassData.StartMethod]:  #\" + name.cpIndex + \":#\" + sig.cpIndex);\n+        environment.traceln(() -> \" [ClassData.StartMethod]:  #\" + name.cpIndex + \":#\" + sig.cpIndex);\n@@ -333,1 +331,1 @@\n-        environment.traceln(\"addInnerClass (with indexes: Name (\" + name.toString() +\n+        environment.traceln(() -> \"addInnerClass (with indexes: Name (\" + name.toString() +\n@@ -346,1 +344,1 @@\n-        environment.traceln(\"addBootstrapMethod: \" + bsmData.toString());\n+        environment.traceln(() -> \"addBootstrapMethod: \" + bsmData.toString());\n@@ -364,3 +362,3 @@\n-    public void addPreloads(List<ConstCell> classes) {\n-        environment.traceln(\"addPreloads\");\n-        preloadAttr = new PreloadAttr(pool, classes);\n+    public void addLoadableDescriptors(List<ConstCell> utf8List) {\n+        environment.traceln(\"addLoadableDescriptors\");\n+        loadableDescriptorsAttr = new LoadableDescriptorsAttr(pool, utf8List);\n@@ -369,0 +367,6 @@\n+    public void addEnclosingMethod(ConstCell classCell, ConstCell methodRefCell) {\n+        environment.traceln(\"addEnclosingMethod\");\n+        enclosingMethodAttr = new EnclosingMethodAttr(pool, classCell, methodRefCell);\n+    }\n+\n+\n@@ -384,11 +388,13 @@\n-            environment.traceln(\"ClassFileName = \" + myClassName);\n-            environment.traceln(\"this_class    = \" + coreClasses.this_class());\n-            environment.traceln(\"super_class   = \" + coreClasses.super_class());\n-            environment.traceln(\"-- Constant Pool ---\");\n-            environment.traceln(\"--------------------\");\n-            pool.printPool();\n-            environment.traceln(\"--------------------\");\n-            environment.traceln(\"-- Inner Classes ---\");\n-            environment.traceln(\"--------------------\");\n-            printInnerClasses();\n-            environment.traceln(\"--------------------\");\n+            if (environment.isTraceFlag()) {\n+                environment.traceln(\"ClassFileName = \" + myClassName);\n+                environment.traceln(\"this_class    = \" + coreClasses.this_class());\n+                environment.traceln(\"super_class   = \" + coreClasses.super_class());\n+                environment.traceln(\"-- Constant Pool ---\");\n+                environment.traceln(\"--------------------\");\n+                pool.printPool();\n+                environment.traceln(\"--------------------\");\n+                environment.traceln(\"-- Inner Classes ---\");\n+                environment.traceln(\"--------------------\");\n+                printInnerClasses();\n+                environment.traceln(\"--------------------\");\n+            }\n@@ -396,1 +402,1 @@\n-            environment.traceln(\"check name:\" + e);\n+            environment.traceln(() -> \"check name:\" + e);\n@@ -521,1 +527,2 @@\n-                    preloadAttr                                     \/\/ Valhalla\n+                    enclosingMethodAttr,\n+                    loadableDescriptorsAttr                         \/\/ Valhalla\n@@ -537,1 +544,1 @@\n-     * Writes to the directory passed with -d option\n+     * Writes to the directory passed with -d\/-w options\n@@ -544,2 +551,6 @@\n-            environment.error(\"err.cannot.write\", ex.getMessage());\n-            throw ex;\n+            if (toolOutput instanceof NamedToolOutput output) {\n+                environment.error(\"err.cannot.write\", output.getName());\n+            } else {\n+                environment.error(\"err.cannot.write\", \"output stream\");\n+            }\n+            throw new IOException(ex);\n@@ -554,6 +565,14 @@\n-    public boolean nestHostAttributeExists() {\n-        return nestHostAttr != null;\n-    }\n-\n-    public boolean nestMembersAttributesExist() {\n-        return nestMembersAttr != null;\n+    protected boolean checkExistence(EAttribute attribute) {\n+        return switch (attribute) {\n+            case ATT_Signature -> signatureAttr != null;\n+            case ATT_SourceFile -> sourceFileAttr != null;\n+            case ATT_SourceDebugExtension -> sourceDebugExtensionAttr != null;\n+            case ATT_NestHost -> nestHostAttr != null;\n+            case ATT_NestMembers -> nestMembersAttr != null && nestMembersAttr.size() != 0;\n+            case ATT_PermittedSubclasses -> permittedSubclassesAttr != null && permittedSubclassesAttr.size() != 0;\n+            case ATT_LoadableDescriptors -> loadableDescriptorsAttr != null && loadableDescriptorsAttr.size() != 0;\n+            case ATT_Record -> recordData != null;\n+            case ATT_EnclosingMethod -> enclosingMethodAttr != null;\n+            default -> throw new IllegalStateException(\"Unexpected attribute: %s in %s\".\n+                    formatted(attribute.parseKey(), attributeLocation.name()));\n+        };\n@@ -562,6 +581,5 @@\n-    public boolean recordAttributeExists() {\n-        return recordData != null;\n-    }\n-\n-    public boolean preloadAttributeExists() {\n-        return preloadAttr != null;\n+    protected ClassData checkExistence(EAttribute attribute, long position) {\n+        checkExistence(attribute,\n+                () -> environment.throwErrorException(position, \"err.extra.attribute\",\n+                        attribute.parseKey(), attributeLocation.name()));\n+        return this;\n@@ -691,4 +709,4 @@\n-     *  jasm supports the values:\n-     *  [CLASS_MODIFIERS] class|interface CLASSNAME [ extends SUPERCLASSNAME ] { \/\/ HEADER\n-     *  this_class[:]  (#ID | IDENT); \/\/ CLASSNAME                                  CLASSFILE\n-     *  super_class[:] (#ID | IDENT); \/\/ SUPERCLASSNAME                             CLASSFILE\n+     * jasm supports the values:\n+     * [CLASS_MODIFIERS] class|interface CLASSNAME [ extends SUPERCLASSNAME ] { \/\/ HEADER\n+     * this_class[:]  (#ID | IDENT); \/\/ CLASSNAME                                  CLASSFILE\n+     * super_class[:] (#ID | IDENT); \/\/ SUPERCLASSNAME                             CLASSFILE\n@@ -785,1 +803,1 @@\n-                constantPool.removeClassCell((ConstCell<ConstantPool.ConstValue_Class>)header.first);\n+                constantPool.removeClassCell((ConstCell<ConstantPool.ConstValue_Class>) header.first);\n@@ -789,1 +807,1 @@\n-                constantPool.removeClassCell((ConstCell<ConstantPool.ConstValue_Class>)header.second);\n+                constantPool.removeClassCell((ConstCell<ConstantPool.ConstValue_Class>) header.second);\n@@ -792,0 +810,1 @@\n+\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/ClassData.java","additions":78,"deletions":59,"binary":false,"changes":137,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,0 +53,1 @@\n+    private static final HashMap<String, ConstType> BSMArgumentNameToConstantType = new HashMap<>(ConstType.maxTag);\n@@ -77,2 +78,3 @@\n-    static public ConstType tag(int i) {\n-        return ConstantTypes.get(i);\n+    static public ConstType getByTag(int i) {\n+        ConstType constType = ConstantTypes.get(i);\n+        return constType == null ? ConstType.CONSTANT_UNKNOWN : constType;\n@@ -81,1 +83,1 @@\n-    static public ConstType tag(String parseKey) {\n+    static public ConstType getByParseKey(String parseKey) {\n@@ -85,0 +87,4 @@\n+    static public ConstType getBSMArgumentTypeByParseKey(String parseKey) {\n+        return BSMArgumentNameToConstantType.get(parseKey);\n+    }\n+\n@@ -87,1 +93,4 @@\n-        if ( !ConstantTypes.containsKey(constType.tag) ) {\n+        if (constType.isBsmType) {\n+            BSMArgumentNameToConstantType.put(constType.parseKey, constType);\n+        }\n+        if (!ConstantTypes.containsKey(constType.tag)) {\n@@ -145,1 +154,1 @@\n-        CONSTANT_UNKNOWN(-1, \"CONSTANT_UNKNOWN\", \"\", AnnotationElementType.AE_NOT_APPLICABLE),\n+        CONSTANT_UNKNOWN(-1, \"CONSTANT_UNKNOWN\", \"\", AnnotationElementType.AE_NOT_APPLICABLE, false),\n@@ -147,3 +156,3 @@\n-        CONSTANT_ZERO(0, \"CONSTANT_ZERO\", \"\", AnnotationElementType.AE_NOT_APPLICABLE),\n-        CONSTANT_UTF8(1, \"CONSTANT_UTF8\", \"Utf8\", AnnotationElementType.AE_STRING),\n-        CONSTANT_ASCIZ(1, \"CONSTANT_UTF8\", \"Asciz\", AnnotationElementType.AE_STRING),   \/\/ supports previous version\n+        CONSTANT_ZERO(0, \"CONSTANT_ZERO\", \"\", AnnotationElementType.AE_NOT_APPLICABLE, false),\n+        CONSTANT_UTF8(1, \"CONSTANT_UTF8\", \"Utf8\", AnnotationElementType.AE_STRING, true),\n+        CONSTANT_ASCIZ(1, \"CONSTANT_UTF8\", \"Asciz\", AnnotationElementType.AE_STRING, true),   \/\/ supports previous version\n@@ -151,15 +160,36 @@\n-        CONSTANT_INTEGER(3, \"CONSTANT_INTEGER\",  AnnotationElementType.AE_INT.printValue, AnnotationElementType.AE_INT),\n-        CONSTANT_INTEGER_BYTE(3, \"CONSTANT_INTEGER\", AnnotationElementType.AE_BYTE.printValue, AnnotationElementType.AE_BYTE),\n-        CONSTANT_INTEGER_CHAR(3, \"CONSTANT_INTEGER\", AnnotationElementType.AE_CHAR.printValue, AnnotationElementType.AE_CHAR),\n-        CONSTANT_INTEGER_SHORT(3, \"CONSTANT_INTEGER\", AnnotationElementType.AE_SHORT.printValue, AnnotationElementType.AE_SHORT),\n-        CONSTANT_INTEGER_BOOLEAN(3, \"CONSTANT_INTEGER\", AnnotationElementType.AE_BOOLEAN.printValue, AnnotationElementType.AE_BOOLEAN),\n-\n-        CONSTANT_FLOAT(4, \"CONSTANT_FLOAT\", \"float\", AnnotationElementType.AE_FLOAT),\n-        CONSTANT_LONG(5, \"CONSTANT_LONG\", \"long\", AnnotationElementType.AE_LONG),\n-        CONSTANT_DOUBLE(6, \"CONSTANT_DOUBLE\", \"double\", AnnotationElementType.AE_DOUBLE),\n-        CONSTANT_CLASS(7, \"CONSTANT_CLASS\", \"class\", AnnotationElementType.AE_CLASS),\n-        CONSTANT_STRING(8, \"CONSTANT_STRING\", \"String\", AnnotationElementType.AE_NOT_APPLICABLE),\n-        CONSTANT_FIELDREF(9, \"CONSTANT_FIELDREF\", \"Field\", AnnotationElementType.AE_NOT_APPLICABLE),\n-        CONSTANT_METHODREF(10, \"CONSTANT_METHODREF\", \"Method\", AnnotationElementType.AE_NOT_APPLICABLE),\n-        CONSTANT_INTERFACEMETHODREF(11, \"CONSTANT_INTERFACEMETHODREF\", \"InterfaceMethod\", AnnotationElementType.AE_NOT_APPLICABLE),\n-        CONSTANT_NAMEANDTYPE(12, \"CONSTANT_NAMEANDTYPE\", \"NameAndType\", AnnotationElementType.AE_NOT_APPLICABLE),\n+        CONSTANT_INTEGER(3, \"CONSTANT_INTEGER\", \"Integer\", AnnotationElementType.AE_INT, true),\n+        CONSTANT_INT(3, \"CONSTANT_INTEGER\", AnnotationElementType.AE_INT.printValue, AnnotationElementType.AE_INT, true),\n+        CONSTANT_BYTE(3, \"CONSTANT_INTEGER\", AnnotationElementType.AE_BYTE.printValue, AnnotationElementType.AE_BYTE, true),\n+        CONSTANT_C_BYTE(3, \"CONSTANT_INTEGER\", \"Byte\", AnnotationElementType.AE_BYTE, true),\n+        CONSTANT_CHAR(3, \"CONSTANT_INTEGER\", AnnotationElementType.AE_CHAR.printValue, AnnotationElementType.AE_CHAR, true),\n+        CONSTANT_C_CHAR(3, \"CONSTANT_INTEGER\", \"Char\", AnnotationElementType.AE_CHAR, true),\n+        CONSTANT_SHORT(3, \"CONSTANT_INTEGER\", AnnotationElementType.AE_SHORT.printValue, AnnotationElementType.AE_SHORT, true),\n+        CONSTANT_C_SHORT(3, \"CONSTANT_INTEGER\", \"Short\", AnnotationElementType.AE_SHORT, true),\n+        CONSTANT_BOOLEAN(3, \"CONSTANT_INTEGER\", AnnotationElementType.AE_BOOLEAN.printValue, AnnotationElementType.AE_BOOLEAN, true),\n+        CONSTANT_C_BOOLEAN(3, \"CONSTANT_INTEGER\", \"Boolean\", AnnotationElementType.AE_BOOLEAN, true),\n+\n+        CONSTANT_C_FLOAT(4, \"CONSTANT_FLOAT\", \"Float\", AnnotationElementType.AE_FLOAT, true),\n+        CONSTANT_FLOAT(4, \"CONSTANT_FLOAT\", \"float\", AnnotationElementType.AE_FLOAT, true),\n+\n+        CONSTANT_C_LONG(5, \"CONSTANT_LONG\", \"Long\", AnnotationElementType.AE_LONG, true),\n+        CONSTANT_LONG(5, \"CONSTANT_LONG\", \"long\", AnnotationElementType.AE_LONG, true),\n+\n+        CONSTANT_C_DOUBLE(6, \"CONSTANT_DOUBLE\", \"Double\", AnnotationElementType.AE_DOUBLE, true),\n+        CONSTANT_DOUBLE(6, \"CONSTANT_DOUBLE\", \"double\", AnnotationElementType.AE_DOUBLE, true),\n+\n+        CONSTANT_C_CLASS(7, \"CONSTANT_CLASS\", \"Class\", AnnotationElementType.AE_CLASS, true),\n+        CONSTANT_CLASS(7, \"CONSTANT_CLASS\", \"class\", AnnotationElementType.AE_CLASS, true),\n+\n+        CONSTANT_STRING(8, \"CONSTANT_STRING\", \"String\", AnnotationElementType.AE_NOT_APPLICABLE, true),\n+        CONSTANT_L_STRING(8, \"CONSTANT_STRING\", \"string\", AnnotationElementType.AE_NOT_APPLICABLE, false),\n+\n+        CONSTANT_FIELD(9, \"CONSTANT_FIELD\", \"Field\", AnnotationElementType.AE_NOT_APPLICABLE, true),\n+        CONSTANT_FIELDREF(9, \"CONSTANT_FIELDREF\", \"Fieldref\", AnnotationElementType.AE_NOT_APPLICABLE, true),\n+\n+        CONSTANT_METHOD(10, \"CONSTANT_METHOD\", \"Method\", AnnotationElementType.AE_NOT_APPLICABLE, true),\n+        CONSTANT_METHODREF(10, \"CONSTANT_METHODREF\", \"Methodref\", AnnotationElementType.AE_NOT_APPLICABLE, true),\n+\n+        CONSTANT_INTERFACEMETHOD(11, \"CONSTANT_INTERFACEMETHOD\", \"InterfaceMethod\", AnnotationElementType.AE_NOT_APPLICABLE, true),\n+        CONSTANT_INTERFACEMETHODREF(11, \"CONSTANT_INTERFACEMETHODREF\", \"InterfaceMethodref\", AnnotationElementType.AE_NOT_APPLICABLE, true),\n+\n+        CONSTANT_NAMEANDTYPE(12, \"CONSTANT_NAMEANDTYPE\", \"NameAndType\", AnnotationElementType.AE_NOT_APPLICABLE, true),\n@@ -168,6 +198,7 @@\n-        CONSTANT_METHODHANDLE(15, \"CONSTANT_METHODHANDLE\", \"MethodHandle\", AnnotationElementType.AE_NOT_APPLICABLE),\n-        CONSTANT_METHODTYPE(16, \"CONSTANT_METHODTYPE\", \"MethodType\", AnnotationElementType.AE_NOT_APPLICABLE),\n-        CONSTANT_DYNAMIC(17, \"CONSTANT_DYNAMIC\", \"Dynamic\", AnnotationElementType.AE_NOT_APPLICABLE),\n-        CONSTANT_INVOKEDYNAMIC(18, \"CONSTANT_INVOKEDYNAMIC\", \"InvokeDynamic\", AnnotationElementType.AE_NOT_APPLICABLE),\n-        CONSTANT_MODULE(19, \"CONSTANT_MODULE\", \"Module\", AnnotationElementType.AE_NOT_APPLICABLE),\n-        CONSTANT_PACKAGE(20, \"CONSTANT_PACKAGE\", \"Package\", AnnotationElementType.AE_NOT_APPLICABLE);\n+        CONSTANT_METHODHANDLE(15, \"CONSTANT_METHODHANDLE\", \"MethodHandle\", AnnotationElementType.AE_NOT_APPLICABLE, true),\n+        CONSTANT_METHODTYPE(16, \"CONSTANT_METHODTYPE\", \"MethodType\", AnnotationElementType.AE_NOT_APPLICABLE, true),\n+        CONSTANT_DYNAMIC(17, \"CONSTANT_DYNAMIC\", \"Dynamic\", AnnotationElementType.AE_NOT_APPLICABLE, true),\n+        CONSTANT_INVOKEDYNAMIC(18, \"CONSTANT_INVOKEDYNAMIC\", \"InvokeDynamic\", AnnotationElementType.AE_NOT_APPLICABLE, true),\n+\n+        CONSTANT_MODULE(19, \"CONSTANT_MODULE\", \"Module\", AnnotationElementType.AE_NOT_APPLICABLE, true),\n+        CONSTANT_PACKAGE(20, \"CONSTANT_PACKAGE\", \"Package\", AnnotationElementType.AE_NOT_APPLICABLE, true);\n@@ -181,0 +212,8 @@\n+        private final boolean isBsmType;\n+\n+        public boolean equals(ConstType other) {\n+            if (other != null) {\n+                return this.tag == other.tag;\n+            }\n+            return false;\n+        }\n@@ -182,2 +221,2 @@\n-        ConstType(int val, String printVal, String parseKey, AnnotationElementType annotationElementType) {\n-            this.tag = val;\n+        ConstType(int tag, String printVal, String parseKey, AnnotationElementType annotationElementType, boolean isBsmType) {\n+            this.tag = tag;\n@@ -187,0 +226,1 @@\n+            this.isBsmType = isBsmType;\n@@ -210,1 +250,1 @@\n-            return (byte)tag;\n+            return (byte) tag;\n@@ -235,1 +275,1 @@\n-     public enum AnnotationElementType {\n+    public enum AnnotationElementType {\n@@ -287,1 +327,1 @@\n-     public enum SubTag {\n+    public enum SubTag {\n@@ -318,1 +358,1 @@\n-     public enum BasicType {\n+    public enum BasicType {\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/ClassFileConst.java","additions":76,"deletions":36,"binary":false,"changes":112,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,8 @@\n+import static java.lang.Math.max;\n+import static org.openjdk.asmtools.common.structure.EAttribute.ATT_StackMap;\n+import static org.openjdk.asmtools.common.structure.EAttribute.ATT_StackMapTable;\n+import static org.openjdk.asmtools.jasm.OpcodeTables.MAX_LOOKUPSWITCH_LENGTH;\n+import static org.openjdk.asmtools.jasm.OpcodeTables.MAX_TABLESWITCH_LENGTH;\n+import static org.openjdk.asmtools.jasm.OpcodeTables.Opcode.opc_lookupswitch;\n+import static org.openjdk.asmtools.jasm.OpcodeTables.Opcode.opc_tableswitch;\n+\n@@ -57,4 +65,5 @@\n-    protected final List<LocVarData> locVarSlots;\n-    private final LocVarData VACANT = null;\n-\n-    protected ClassData classData;              \/\/ reference to the surrounding data containers\n+    protected final List<LocalVariableData> locVarSlots;\n+    protected final List<LocalVariableData> locVarTypeSlots;\n+    private final LocalVariableData VACANT = null;\n+    \/\/ reference to the surrounding data containers\n+    protected ClassData classData;\n@@ -67,4 +76,6 @@\n-    protected DataVector<ExceptionData> exceptionTable;             \/\/ TrapData\n-    protected DataVectorAttr<LineNumberData> lineNumberTable;       \/\/ LineNumData\n-    protected int lastLineNumber = 0;\n-    protected DataVectorAttr<LocVarData> localVariableTable;        \/\/ LocVarData\n+    protected DataVector<ExceptionData> exceptionTable;\n+    protected DataVectorAttr<LineNumberData> lineNumberTable;\n+    protected long lastLineNumber = 0;\n+    protected DataVectorAttr<LocalVariableData> localVariableTable;\n+    protected DataVectorAttr<LocalVariableData> localVariableTypeTable;\n+\n@@ -74,2 +85,2 @@\n-    protected StackMapData curMapEntry = null;\n-    protected DataVectorAttr<StackMapData> stackMap;\n+    protected List<StackMapData> stackMapEntries = new ArrayList<>();\n+    protected DataVectorAttr<StackMapData> stackMapTable;\n@@ -88,0 +99,1 @@\n+        this.locVarTypeSlots = new ArrayList<>(Collections.nCopies(max_locals != null ? max_locals.value() : paramCount, VACANT));\n@@ -99,1 +111,2 @@\n-        checkLocVars();\n+        checkLocVars(Opcode.opc_var);\n+        checkLocVars(Opcode.opc_type);\n@@ -117,1 +130,1 @@\n-                        inVisTypeAnnotations = new DataVectorAttr(methodData.pool, EAttribute.ATT_RuntimeInvisibleTypeAnnotations);\n+                        inVisTypeAnnotations = new DataVectorAttr<>(methodData.pool, EAttribute.ATT_RuntimeInvisibleTypeAnnotations);\n@@ -122,1 +135,1 @@\n-                        this.visTypeAnnotations = new DataVectorAttr(methodData.pool, EAttribute.ATT_RuntimeVisibleTypeAnnotations);\n+                        this.visTypeAnnotations = new DataVectorAttr<>(methodData.pool, EAttribute.ATT_RuntimeVisibleTypeAnnotations);\n@@ -130,0 +143,42 @@\n+    public void fillLineTable(List<LineNumberData> list) {\n+        if (lineNumberTable != null) {\n+            \/\/ Remove the automatically generated LineTable by jasm and instead,\n+            \/\/ include a table inline within the jasm source.\n+            lineNumberTable.clear();\n+        } else {\n+            lineNumberTable = new DataVectorAttr<>(methodData.pool, EAttribute.ATT_LineNumberTable);\n+            attributes.add(lineNumberTable);\n+        }\n+        lineNumberTable.addAll(list);\n+    }\n+\n+    \/**\n+     * Fills either localVariableTable or localVariableTypeTable according to the boolean parameter isTypeTable\n+     *\n+     * @param isTypeTable defines which localVariableTypeTable or localVariableTable is filled\n+     * @param list        list of local_variable_table[i] or local_variable_type_table[i] entries\n+     *\/\n+    public void fillLocalVariableTable(boolean isTypeTable, List<LocalVariableData> list) {\n+        DataVectorAttr<LocalVariableData> vector = (isTypeTable) ? localVariableTypeTable : localVariableTable;\n+        if (vector == null) {\n+            vector = new DataVectorAttr<>(methodData.pool, (isTypeTable) ? EAttribute.ATT_LocalVariableTypeTable : EAttribute.ATT_LocalVariableTable);\n+            attributes.add(vector);\n+        }\n+        vector.addAll(list);\n+    }\n+\n+    public void fillStackMapTable(List<StackMapData> list) {\n+        if (stackMapTable == null) {\n+            DataVectorAttr<StackMapData> table = (DataVectorAttr<StackMapData>) attributes.\n+                    findFirst(item -> item.getAttribute().\n+                            isOneOf(ATT_StackMapTable, ATT_StackMap)).orElse(null);\n+            if (table == null) {\n+                stackMapTable = new DataVectorAttr<>(classData.pool, classData.cfv.isTypeCheckingVerifier() ? ATT_StackMapTable : ATT_StackMap);\n+                attributes.add(stackMapTable);\n+            } else {\n+                stackMapTable = table;\n+            }\n+        }\n+        stackMapTable.addAll(list);\n+    }\n+\n@@ -131,1 +186,1 @@\n-    RangePC trapDecl(int pos, String name) {\n+    RangePC trapDecl(long pos, String name) {\n@@ -146,1 +201,1 @@\n-    void beginTrap(int pos, String name) {\n+    void beginTrap(long pos, String name) {\n@@ -155,1 +210,1 @@\n-    void endTrap(int pos, String name) {\n+    void endTrap(long pos, String name) {\n@@ -164,1 +219,1 @@\n-    void trapHandler(int pos, String name, Indexer type) {\n+    void trapHandler(long pos, String name, Indexer type) {\n@@ -208,1 +263,1 @@\n-    public Label LabelDef(int pos, String name) {\n+    public Label LabelDef(long pos, String name) {\n@@ -237,1 +292,1 @@\n-    \/\/ LocalVariables\n+\/\/ LocalVariables\n@@ -242,0 +297,1 @@\n+     * @param opcode         var or type opcode that defines type of filled table -LocalVariableTypeTable or LocalVariableTable\n@@ -247,9 +303,10 @@\n-    public void LocVarDataDef(int position, int index, ConstCell<?> nameCell, ConstCell<?> descriptorCell) {\n-        LocVarData locVarData = new LocVarData((short) index, (short) curPC, nameCell, descriptorCell);\n-        FieldType fieldType = locVarData.getFieldType();\n-        \/\/ check slot availability\n-        \/\/If the given local variable is of type double or long, it occupies both index and index + 1\n-        for (int i = 0; i < fieldType.getSlotsCount(); i++) {\n-            if (!max_locals.inRange(index + i)) {\n-                environment.error(position, \"err.locvar.wrong.index\", index + i, max_locals.value() - 1);\n-                throw new SyntaxError();\n+    public void LocVarDataDef(OpcodeTables.Opcode opcode, long position, int index, ConstCell<?> nameCell, ConstCell<?> descriptorCell) {\n+        FieldType fieldType = null;\n+        List<LocalVariableData> slots;\n+        LocalVariableData localVariableData = new LocalVariableData((short) index, (short) curPC, nameCell, descriptorCell);\n+        if (opcode == Opcode.opc_var) {\n+            slots = locVarSlots;\n+            fieldType = localVariableData.getFieldType();\n+            if (localVariableTable == null) {\n+                localVariableTable = new DataVectorAttr<>(methodData.pool, EAttribute.ATT_LocalVariableTable);\n+                attributes.add(localVariableTable);\n@@ -257,3 +314,8 @@\n-            if (locVarSlots.get(index + i) != VACANT) {\n-                environment.error(position, \"err.locvar.slot.occupied\", index + i);\n-                throw new SyntaxError();\n+            localVariableTable.add(localVariableData);\n+        } else {\n+            slots = locVarTypeSlots;\n+            if (localVariableTable != null) {\n+                LocalVariableData lvd = localVariableTable.findFirst(lv -> lv.getIndex() == index).orElse(null);\n+                if (lvd != null) {\n+                    fieldType = lvd.getFieldType();\n+                }\n@@ -261,1 +323,5 @@\n-            locVarSlots.set(index + i, locVarData); \/\/ OCCUPIED\n+            if (localVariableTypeTable == null) {\n+                localVariableTypeTable = new DataVectorAttr<>(methodData.pool, EAttribute.ATT_LocalVariableTypeTable);\n+                attributes.add(localVariableTypeTable);\n+            }\n+            localVariableTypeTable.add(localVariableData);\n@@ -263,3 +329,16 @@\n-        if (localVariableTable == null) {\n-            localVariableTable = new DataVectorAttr<>(methodData.pool, EAttribute.ATT_LocalVariableTable);\n-            attributes.add(localVariableTable);\n+        if (fieldType == null) {\n+            environment.throwErrorException(position, \"err.fieldType.undecl\", index);\n+        } else {\n+            localVariableData.setFieldType(fieldType);\n+            \/\/ check slot availability\n+            \/\/If the given local variable is of type double or long, it occupies both index and index + 1\n+            for (int i = 0; i < fieldType.getSlotsCount(); i++) {\n+                if (!max_locals.inRange(index + i)) {\n+                    environment.throwErrorException(position, \"err.locvar.wrong.index\", index + i, max_locals.value() - 1);\n+                }\n+\n+                if (slots.get(index + i) != VACANT) {\n+                    environment.throwErrorException(position, \"err.locvar.slot.occupied\", index + i);\n+                }\n+                slots.set(index + i, localVariableData); \/\/ OCCUPIED\n+            }\n@@ -267,1 +346,0 @@\n-        localVariableTable.add(locVarData);\n@@ -271,1 +349,1 @@\n-     * Marks the end of Local Variable presented in the form endVar index: locVarSlots[slot] = VACANT\n+     * Marks the end of Local Variable (Type) presented in the form endVar index: locVarSlots[slot] = VACANT\n@@ -277,1 +355,1 @@\n-    public void LocVarDataEnd(short slot, int position) {\n+    public void LocVarDataEnd(OpcodeTables.Opcode opcode, short slot, long position) {\n@@ -279,19 +357,21 @@\n-            environment.error(position, \"err.locvar.wrong.index\", slot, max_locals.value() - 1);\n-            throw new SyntaxError();\n-        }\n-        final LocVarData locVarData = locVarSlots.get(slot);\n-        if (locVarData == VACANT) {\n-            environment.error(position, \"err.locvar.undecl\", slot);\n-            throw new SyntaxError();\n-        }\n-        locVarData.setLength(curPC);\n-        \/\/ Check slot availability and clean up appropriate locVarSlots[slot{,slot+1}]\n-        \/\/ If the given local variable is of type double or long, it occupies both index and index + 1\n-        for (int i = 0; i < locVarData.getSlotsCount(); i++) {\n-            if (i > 0 && !max_locals.inRange(slot + i)) {\n-                environment.error(position, \"err.locvar.wrong.index\", slot + i, max_locals.value() - 1);\n-                throw new SyntaxError();\n-            }\n-            if (i > 0 && locVarSlots.get(slot + i) == VACANT) {\n-                environment.error(position, \"err.locvar.undecl\", slot + i);\n-                throw new SyntaxError();\n+            environment.throwErrorException(position, \"err.locvar.wrong.index\", slot, max_locals.value() - 1);\n+        }\n+        final LocalVariableData localVariableData = (opcode == Opcode.opc_var) ? locVarSlots.get(slot) : locVarTypeSlots.get(slot);\n+        if (localVariableData == VACANT) {\n+            environment.throwErrorException(position, \"err.locvar.undecl\", slot);\n+        } else {\n+            localVariableData.setLength(curPC);\n+            \/\/ Check slot availability and clean up appropriate locVarSlots[slot{,slot+1}] or locVarTypeSlots[slot{,slot+1}]\n+            \/\/ If the given local variable is of type double or long, it occupies both index and index + 1\n+            List<LocalVariableData> slots = (opcode == Opcode.opc_var) ? locVarSlots : locVarTypeSlots;\n+\n+            for (int i = 0; i < localVariableData.getSlotsCount(); i++) {\n+                if (i > 0 && !max_locals.inRange(slot + i)) {\n+                    environment.error(position, \"err.locvar.wrong.index\", slot + i, max_locals.value() - 1);\n+                    throw new SyntaxError();\n+                }\n+                if (i > 0 && slots.get(slot + i) == VACANT) {\n+                    environment.error(position, \"err.locvar.undecl\", slot + i);\n+                    throw new SyntaxError();\n+                }\n+                slots.set(slot + i, VACANT);\n@@ -299,1 +379,0 @@\n-            locVarSlots.set(slot + i, VACANT);\n@@ -303,5 +382,7 @@\n-    void checkLocVars() {\n-        for (int i = 0; i < locVarSlots.size(); i++) {\n-            if (locVarSlots.get(i) != VACANT) {\n-                locVarSlots.get(i).setLength(curPC);\n-                environment.warning(environment.getPosition(), \"warn.locvar.ambiqous\", i);\n+    void checkLocVars(OpcodeTables.Opcode opcode) {\n+        List<LocalVariableData> slots = (opcode == Opcode.opc_var) ? locVarSlots : locVarTypeSlots;\n+        for (int i = 0; i < slots.size(); i++) {\n+            if (slots.get(i) != VACANT) {\n+                slots.get(i).setLength(curPC);\n+                environment.warning(environment.getPosition(), (opcode == Opcode.opc_var) ? \"warn.locvar.ambiqous\" :\n+                        \"warn.loctype.ambiqous\", i);\n@@ -313,4 +394,7 @@\n-    public StackMapData getStackMap() {\n-        if (curMapEntry == null) {\n-            curMapEntry = new StackMapData(environment);\n-            curMapEntry.setIsStackMapTable(classData.cfv.isTypeCheckingVerifier());\n+    public StackMapData getStackMapTable() {\n+        StackMapData entry;\n+        if (stackMapEntries.isEmpty()) {\n+            entry = new StackMapData(environment, isTypeCheckingVerifier());\n+            stackMapEntries.add(entry);\n+        } else {\n+            entry = stackMapEntries.getLast();\n@@ -318,1 +402,13 @@\n-        return curMapEntry;\n+        return entry;\n+    }\n+\n+    public StackMapData getNextStackMapTable() {\n+        StackMapData entry = new StackMapData(environment, isTypeCheckingVerifier());\n+        stackMapEntries.add(entry);\n+        return entry;\n+    }\n+\n+    \/\/ A class file whose version number is 50.0 or above (§4.1) must be verified using the type checking rules given\n+    \/\/ in the section 4.10.1. Verification by Type Checking\n+    public boolean isTypeCheckingVerifier() {\n+        return classData.cfv.isTypeCheckingVerifier();\n@@ -322,1 +418,1 @@\n-    void addInstr(int mnenoc_pos, Opcode opcode, Indexer arg, Object arg2) {\n+    void addInstr(long mnenoc_pos, Opcode opcode, Indexer arg, Object arg2) {\n@@ -330,0 +426,4 @@\n+                if (len >= MAX_TABLESWITCH_LENGTH) {\n+                    environment.error(mnenoc_pos, \"err.instr.oversize\",\n+                            opc_tableswitch.parseKey(), len, MAX_TABLESWITCH_LENGTH);\n+                }\n@@ -333,0 +433,4 @@\n+                if (len >= MAX_LOOKUPSWITCH_LENGTH) {\n+                    environment.error(mnenoc_pos, \"err.instr.oversize\",\n+                            opc_lookupswitch.parseKey(), len, MAX_LOOKUPSWITCH_LENGTH);\n+                }\n@@ -346,1 +450,1 @@\n-            int ln = environment.lineNumber(mnenoc_pos);\n+            long ln = environment.lineNumber(mnenoc_pos);\n@@ -352,8 +456,6 @@\n-        if (curMapEntry != null) {\n-            curMapEntry.setPC(curPC);\n-            StackMapData prevStackFrame = null;\n-            if (stackMap == null) {\n-                if (classData.cfv.isTypeCheckingVerifier()) {\n-                    stackMap = new DataVectorAttr<>(classData.pool, EAttribute.ATT_StackMapTable);\n-                } else {\n-                    stackMap = new DataVectorAttr<>(classData.pool, EAttribute.ATT_StackMap);\n+        if (!stackMapEntries.isEmpty()) {\n+            StackMapData prevStackFrame = getPreviousStackMapEntry();\n+            for (StackMapData entry : stackMapEntries) {\n+                if (!entry.isWrapper()) {\n+                    entry.setPC(curPC);\n+                    entry.setOffset(prevStackFrame);\n@@ -361,3 +463,0 @@\n-                attributes.add(stackMap);\n-            } else if (stackMap.size() > 0) {\n-                prevStackFrame = stackMap.get(stackMap.size() - 1);\n@@ -365,3 +464,2 @@\n-            curMapEntry.setOffset(prevStackFrame);\n-            stackMap.add(curMapEntry);\n-            curMapEntry = null;\n+            stackMapTable.addAll(stackMapEntries);\n+            stackMapEntries.clear();\n@@ -372,0 +470,17 @@\n+    private StackMapData getPreviousStackMapEntry() {\n+        if (stackMapTable == null) {\n+            stackMapTable = new DataVectorAttr<>(classData.pool,\n+                    classData.cfv.isTypeCheckingVerifier() ? ATT_StackMapTable : ATT_StackMap);\n+            attributes.add(stackMapTable);\n+        } else if (!stackMapTable.isEmpty()) {\n+            for (int i = stackMapTable.size() - 1; i >= 0; i--) {\n+                StackMapData entry = stackMapTable.get(i);\n+                if (!entry.isWrapper()) {\n+                    return entry;\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+\n@@ -383,1 +498,1 @@\n-        int maxLocals = (max_locals != null) ? max_locals.cpIndex : locVarSlots.size();\n+        int maxLocals = (max_locals != null) ? max_locals.cpIndex : max(locVarSlots.size(), locVarTypeSlots.size());\n@@ -420,1 +535,1 @@\n-        int pos;\n+        long pos;\n@@ -422,1 +537,1 @@\n-        RangePC(int pos, String name) {\n+        RangePC(long pos, String name) {\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/CodeAttr.java","additions":203,"deletions":88,"binary":false,"changes":291,"status":"modified"},{"patch":"@@ -110,1 +110,1 @@\n-                return ((ConstValue) this.ref).equalsByValue(constCell.ref);\n+                return this.ref.equalsByValue(constCell.ref);\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/ConstCell.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import static java.lang.Math.max;\n@@ -52,1 +53,1 @@\n-    Hashtable<ConstValue<?>, ConstCell<?>> ConstantPoolHashByValue = new Hashtable<>(40);\n+    public LinkedHashMap<ConstValue<?>, ConstCell<?>> ConstantPoolHashByValue = new LinkedHashMap<>(40);\n@@ -104,1 +105,1 @@\n-            environment.traceln(\"FIXED ConstPool[\" + refCell.cpIndex + \"](\" + cell.tag.toString() + \") = \" + cell.value);\n+            environment.traceln(() -> \"FIXED ConstPool[\" + refCell.cpIndex + \"](\" + cell.tag.toString() + \") = \" + cell.value);\n@@ -111,1 +112,1 @@\n-            environment.traceln(\"FIXED Left:ConstPool[\" + pair.first.cpIndex + \"](\" + cv.tag.toString() + \") = \" + pair.first.ref);\n+            environment.traceln(() -> \"FIXED Left:ConstPool[\" + pair.first.cpIndex + \"](\" + cv.tag.toString() + \") = \" + pair.first.ref);\n@@ -114,1 +115,1 @@\n-            environment.traceln(\"FIXED Right:ConstPool[\" + pair.second.cpIndex + \"](\" + cv.tag.toString() + \") = \" + pair.second.ref);\n+            environment.traceln(() -> \"FIXED Right:ConstPool[\" + pair.second.cpIndex + \"](\" + cv.tag.toString() + \") = \" + pair.second.ref);\n@@ -139,1 +140,1 @@\n-            environment.traceln(\"FIXED Index of ConstPool[\" + refCell.cpIndex + \"](\" + cell.tag.toString() + \") = \" + cell.value);\n+            environment.traceln(() -> \"FIXED Index of ConstPool[\" + refCell.cpIndex + \"](\" + cell.tag.toString() + \") = \" + cell.value);\n@@ -146,1 +147,1 @@\n-            environment.traceln(\"FIXED Index of Left:ConstPool[\" + pair.first.cpIndex + \"](\" + cv.tag.toString() + \") = \" + pair.first.ref);\n+            environment.traceln(() -> \"FIXED Index of Left:ConstPool[\" + pair.first.cpIndex + \"](\" + cv.tag.toString() + \") = \" + pair.first.ref);\n@@ -149,1 +150,1 @@\n-            environment.traceln(\"FIXED Index of Right:ConstPool[\" + pair.second.cpIndex + \"](\" + cv.tag.toString() + \") = \" + pair.second.ref);\n+            environment.traceln(() -> \"FIXED Index of Right:ConstPool[\" + pair.second.cpIndex + \"](\" + cv.tag.toString() + \") = \" + pair.second.ref);\n@@ -245,2 +246,1 @@\n-            environment.traceln(\"^^^^^^^^^^^^^  const #\" + i + \": \" + item);\n-            i++;\n+            environment.traceln(\" const #%4d: %s\".formatted(i++, item));\n@@ -262,3 +262,3 @@\n-        environment.traceln(\"cpool_set1: \" + cpx + \" \" + cell);\n-        environment.traceln(\"param_size: \" + sz);\n-        environment.traceln(\"pool_size : \" + pool.size());\n+        environment.traceln(() -> \"cpool_set1: \" + cpx + \" \" + cell);\n+        environment.traceln(() -> \"param_size: \" + sz);\n+        environment.traceln(() -> \"pool_size : \" + pool.size());\n@@ -267,1 +267,1 @@\n-            environment.traceln(\"calling ensureCapacity( \" + (cpx + sz + 1) + \" )\");\n+            environment.traceln(() -> \"calling ensureCapacity( \" + (cpx + sz + 1) + \" )\");\n@@ -270,0 +270,4 @@\n+            if (high - low > sz) {\n+                String msg = (low == high - sz - 1) ? \"#%d\".formatted(low) : \"#%d-#%d\".formatted(low, high - sz - 1);\n+                environment.warning(\"warn.const.fill\", msg);\n+            }\n@@ -278,1 +282,1 @@\n-        environment.traceln(\"cpool_set2: \" + cpx + \" \" + cell);\n+        environment.traceln(() -> \"cpool_set2: \" + cpx + \" \" + cell);\n@@ -282,1 +286,1 @@\n-        environment.traceln(\"delete cell(\" + cpx + \")\");\n+        environment.traceln(() -> \"delete cell(\" + cpx + \")\");\n@@ -287,1 +291,1 @@\n-                    environment.traceln(\"\\tcell from \" + (cell.cpIndex + 1) + \" to \" + cell);\n+                    environment.traceln(() -> \"\\tcell from \" + (cell.cpIndex + 1) + \" to \" + cell);\n@@ -311,1 +315,1 @@\n-                                CONSTANT_DYNAMIC, CONSTANT_INVOKEDYNAMIC -> {\n+                             CONSTANT_DYNAMIC, CONSTANT_INVOKEDYNAMIC -> {\n@@ -314,1 +318,2 @@\n-                        case CONSTANT_METHODHANDLE, CONSTANT_NAMEANDTYPE, CONSTANT_FIELDREF, CONSTANT_METHODREF, CONSTANT_INTERFACEMETHODREF -> {\n+                        case CONSTANT_METHODHANDLE, CONSTANT_NAMEANDTYPE, CONSTANT_FIELDREF, CONSTANT_METHODREF,\n+                             CONSTANT_INTERFACEMETHODREF -> {\n@@ -351,2 +356,1 @@\n-                String name = \"#\" + cpx;\n-                environment.error(\"err.const.redecl\", name);\n+                environment.error(\"err.const.redecl\", \"#\" + cpx, \"#\" + max(cpx - 1, 0));\n@@ -357,1 +361,1 @@\n-                environment.traceln(\"setCell: new ConstCell %s\", cell.toString());\n+                environment.traceln(\"setCell: new ConstCell \" + cell);\n@@ -378,1 +382,1 @@\n-                findAny();\n+                findFirst();\n@@ -425,0 +429,15 @@\n+    public <T extends ConstValue> boolean cellFound(final T ref) {\n+        if (ref == null) {\n+            environment.throwErrorException(\"err.constcell.is.null\");\n+        }\n+        ConstCell cell = ConstantPoolHashByValue.get(ref);\n+        if (cell != null) {\n+            \/\/ If we found a cached ConstValue\n+            ConstValue value = cell.ref;\n+            if (value.equals(ref)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n@@ -446,0 +465,4 @@\n+    public ConstCell findNameAndTypeCell(ConstantPool.ConstValue_NameAndType ref) {\n+        return findCell(ref);\n+    }\n+\n@@ -459,1 +482,1 @@\n-        return findCell(new ConstValue_Long(value));\n+        return findCell(new ConstValue_Double(value));\n@@ -469,1 +492,1 @@\n-                findAny().map(entry -> entry.getValue()).\n+                findFirst().map(entry -> entry.getValue()).\n@@ -525,1 +548,1 @@\n-        environment.traceln(\"wr.pool:size=\" + length);\n+        environment.traceln(() -> \"wr.pool:size=\" + length);\n@@ -623,0 +646,5 @@\n+        @Override\n+        public String asString() {\n+            return value;\n+        }\n+\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/ConstantPool.java","additions":53,"deletions":25,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-                data = (T) new ParserAnnotation.ConstElemValue(type.getAnnotationElementTypeValue(), cell);\n+                data = (T) new ParseAnnotation.ConstElemValue(type.getAnnotationElementTypeValue(), cell);\n@@ -45,1 +45,1 @@\n-                data = (T) new ParserAnnotation.ClassElemValue(cell);\n+                data = (T) new ParseAnnotation.ClassElemValue(cell);\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/ConstantPoolDataVisitor.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.jasm;\n+\n+import java.io.IOException;\n+\n+import static org.openjdk.asmtools.jdis.Indenter.UNDEFINED;\n+\n+\/**\n+ * Writable element of the DataVector u2 vector[elements];\n+ * <p>\n+ * u2 unset_fields[number_of_unset_fields];\n+ * Each entry in the unset_fields array must be a valid index into the constant_pool table.\n+ * The constant_pool entry at that index must be a CONSTANT_NameAndType_info structure with a field descriptor.\n+ *\/\n+public class ConstantPoolIndexData implements DataWriter {\n+\n+    ConstCell nameAndType = null;\n+    ConstantPool pool = null;\n+    int cpIndex = UNDEFINED;\n+\n+    public ConstantPoolIndexData(ConstCell nameAndType, ConstantPool pool) {\n+        this.nameAndType = nameAndType;\n+        this.pool = pool;\n+    }\n+\n+\n+    public ConstantPoolIndexData(int cpIndex) {\n+        this.cpIndex = cpIndex;\n+    }\n+\n+    @Override\n+    public void write(CheckedDataOutputStream out) throws IOException {\n+        if (cpIndex == UNDEFINED) {\n+            cpIndex = nameAndType.cpIndex;\n+        }\n+        if (cpIndex == UNDEFINED) {\n+            throw new IOException(\"a file due to implementation issue:\\n\\t\\t \\\"Can't retrieve CP Index for %s\\\"\".\n+                    formatted(nameAndType == null ? \"null\" : nameAndType.toString()));\n+        }\n+        out.writeShort(cpIndex);\n+    }\n+\n+    @Override\n+    public int getLength() {\n+        \/\/ u2\n+        return 2;\n+    }\n+}\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/ConstantPoolIndexData.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -29,0 +29,2 @@\n+import java.util.Optional;\n+import java.util.function.Predicate;\n@@ -54,0 +56,4 @@\n+    public Optional<T> findFirst(Predicate<T> filter) {\n+        return elements.stream().filter(filter).findFirst();\n+    }\n+\n@@ -93,1 +99,0 @@\n-\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/DataVector.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,2 @@\n+import java.util.Optional;\n+import java.util.function.Predicate;\n@@ -40,2 +42,2 @@\n-    private ArrayList<T> elements;\n-    private boolean     byteIndex;\n+    private final ArrayList<T> elements;\n+    private boolean byteIndex;\n@@ -44,6 +46,5 @@\n-     *\n-     * @param pool Constant pool\n-     * @param eAttribute the attribute name @see org.openjdk.asmtools.common.content.EAttribute\n-     * @param byteIndex indicates 1 or two bytes is used to keep number of table elements:\n-     *                  u2 StackMapTable_attribute.number_of_entries\n-     *                  u1 RuntimeVisibleParameterAnnotations_attribute.num_parameters\n+     * @param pool        Constant pool\n+     * @param eAttribute  the attribute name @see org.openjdk.asmtools.common.content.EAttribute\n+     * @param byteIndex   indicates 1 or two bytes is used to keep number of table elements:\n+     *                    u2 StackMapTable_attribute.number_of_entries\n+     *                    u1 RuntimeVisibleParameterAnnotations_attribute.num_parameters\n@@ -75,0 +76,4 @@\n+    public Optional<T> findFirst(Predicate<T> filter) {\n+        return elements.stream().filter(filter).findFirst();\n+    }\n+\n@@ -111,1 +116,1 @@\n-        s.filter(e->e != null).forEach(elements::add);\n+        s.filter(e -> e != null).forEach(elements::add);\n@@ -155,1 +160,1 @@\n-    public Stream<T> stream() { return elements.stream(); };\n+    public Stream<T> stream() { return elements.stream(); }\n@@ -160,1 +165,1 @@\n-        int length = elements.stream().mapToInt(e->e.getLength()).sum();\n+        int length = elements.stream().mapToInt(DataWriter::getLength).sum();\n@@ -168,1 +173,2 @@\n-        super.write(out);  \/\/ attr name, attr length\n+        super.write(out);\n+        int size = (int)elements.stream().filter(DataWriter::isCountable).count();\n@@ -170,1 +176,1 @@\n-            out.writeByte(elements.size());\n+            out.writeByte(size);\n@@ -172,1 +178,1 @@\n-            out.writeShort(elements.size());\n+            out.writeShort(size);\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/DataVectorAttr.java","additions":21,"deletions":15,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,5 @@\n+\n+    default boolean isCountable() {\n+        return true;\n+    }\n+\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/DataWriter.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,69 @@\n+package org.openjdk.asmtools.jasm;\n+\n+import org.openjdk.asmtools.common.structure.EAttribute;\n+\n+import java.io.IOException;\n+\n+import static org.openjdk.asmtools.jasm.ClassFileConst.ConstType.CONSTANT_METHODREF;\n+\n+\/**\n+ * EnclosingMethod_attribute {\n+ * u2 attribute_name_index;\n+ * u4 attribute_length;\n+ * u2 class_index;\n+ * u2 method_index;\n+ * }\n+ * If the current class is not immediately enclosed by a method or constructor,\n+ * then the value of the method_index item must be zero.\n+ *\/\n+public class EnclosingMethodAttr extends AttrData {\n+    private ConstantPool pool;\n+    private ConstCell classCell;\n+    \/\/ methodCell is null if the current class is not immediately enclosed by a method or constructor.\n+    private ConstCell methodCell;\n+\n+    \/**\n+     * @param pool       ConstantPool\n+     * @param classCell  class_index to be written to class file\n+     * @param methodCell method_index If the current class is not immediately enclosed by a method or constructor,\n+     *                   then the value of the method_index item must be zero.\n+     *\/\n+    EnclosingMethodAttr(ConstantPool pool, ConstCell classCell, ConstCell methodCell) {\n+        super(pool, EAttribute.ATT_EnclosingMethod);\n+        this.pool = pool;\n+        this.classCell = classCell;\n+        this.methodCell = methodCell;\n+    }\n+\n+    @Override\n+    public int attrLength() {\n+        \/\/ attribute_length: The value of the attribute_length item must be four.\n+        return 4;\n+    }\n+\n+    @Override\n+    protected ConstCell<?> classifyConstCell(ConstantPool pool, ConstCell<?> cell) {\n+        return pool.findCell(CONSTANT_METHODREF, cell);\n+    }\n+\n+    @Override\n+    public void write(CheckedDataOutputStream out) throws IOException {\n+        super.write(out);\n+        if (!classCell.isSet()) {\n+            classCell = pool.specifyCell(classCell);\n+            if (!pool.getBounds().in(classCell.cpIndex)) {\n+                pool.environment.throwErrorException(\"err.entity.not.in.cp\", classCell);\n+            }\n+        }\n+        out.writeShort(classCell.cpIndex);\n+        if (methodCell != null && !methodCell.isSet()) {\n+            methodCell = pool.specifyCell(methodCell);\n+            if (!pool.getBounds().in(methodCell.cpIndex)) {\n+                pool.environment.throwErrorException(\"err.entity.not.in.cp\", methodCell);\n+            }\n+        }\n+\n+        \/\/ if methodCell is null then method_index is 0\n+        out.writeShort(methodCell != null ? methodCell.cpIndex : 0);\n+    }\n+}\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/EnclosingMethodAttr.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -42,1 +42,1 @@\n-    int pos;\n+    long pos;\n@@ -47,1 +47,1 @@\n-    public ExceptionData(int pos, CodeAttr.RangePC rangePC, int handler_pc, Indexer catchType) {\n+    public ExceptionData(long pos, CodeAttr.RangePC rangePC, int handler_pc, Indexer catchType) {\n@@ -70,1 +70,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/ExceptionData.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import org.openjdk.asmtools.common.structure.ELocation;\n@@ -35,0 +36,1 @@\n+\n@@ -41,0 +43,1 @@\n+        this.attributeLocation = ELocation.field_info;\n@@ -47,0 +50,8 @@\n+    protected boolean checkExistence(EAttribute attribute) {\n+        return switch (attribute) {\n+            case ATT_Signature -> signatureAttr != null;\n+            default -> throw new IllegalStateException(\"Unexpected attribute: %s in %s\".\n+                    formatted(attribute.parseKey(), attributeLocation.name()));\n+        };\n+    }\n+\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/FieldData.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -48,2 +48,0 @@\n-\n-\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/FieldType.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-    private int pos;\n+    private long pos;\n@@ -59,1 +59,1 @@\n-    public Instr set(int pc, int pos, Opcode opc, Indexer arg, Object arg2) {\n+    public Instr set(int pc, long pos, Opcode opc, Indexer arg, Object arg2) {\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/Instr.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-    public void setInputFile(ToolInput inputFileName) throws IOException, URISyntaxException {\n+    public void setToolInput(ToolInput toolInput) throws IOException, URISyntaxException {\n@@ -55,1 +55,1 @@\n-            super.setInputFile(inputFileName);\n+            super.setToolInput(toolInput);\n@@ -58,1 +58,1 @@\n-            error(\"err.cannot.read\", inputFileName);\n+            error(\"err.cannot.read\", toolInput);\n@@ -65,1 +65,1 @@\n-    public void warning(int where, String id, Object... args) {\n+    public void warning(long where, String id, Object... args) {\n@@ -70,1 +70,1 @@\n-    public void error(int where, String id, Object... args) {\n+    public void error(long where, String id, Object... args) {\n@@ -85,2 +85,3 @@\n-    public long getErrorCount() {\n-        return getLogger().getCount(EMessageKind.ERROR);\n+    @Override\n+    public long getCount(EMessageKind kind) {\n+        return getLogger().getCount(kind);\n@@ -94,1 +95,1 @@\n-    public int lineNumber(int where) {\n+    public long lineNumber(long where) {\n@@ -98,0 +99,5 @@\n+    \/\/ get line number by scanner position\n+    public long lineOffset(long lineNumber, long where) {\n+        return getLogger().lineOffset(lineNumber, where);\n+    }\n+\n@@ -99,1 +105,1 @@\n-     * Throws an error that is not associated with scanner position in an input file\n+     * Throws an error not associated with scanner position in an input file\n@@ -111,1 +117,1 @@\n-     * Throws an error that is associated with scanner position in an input file\n+     * Throws an error associated with scanner position in an input file\n@@ -118,1 +124,1 @@\n-    public void throwErrorException(int where, String id, Object... args) throws Error {\n+    public void throwErrorException(long where, String id, Object... args) throws Error {\n@@ -132,1 +138,1 @@\n-    public int getPosition() {\n+    public long getPosition() {\n@@ -161,1 +167,0 @@\n-        private int linepos = 1;\n@@ -165,1 +170,0 @@\n-            charPos = 0;\n@@ -179,1 +183,1 @@\n-            position = (linepos << OFFSET_BITS) | charPos;\n+            position = ((long) linepos << OFFSET_BITS) | charPos;\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/JasmEnvironment.java","additions":20,"deletions":16,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+import java.util.Set;\n+import java.util.stream.Collectors;\n@@ -30,1 +32,0 @@\n- *\n@@ -32,1 +33,1 @@\n- *\n+ * <p>\n@@ -34,1 +35,1 @@\n- *\n+ * <p>\n@@ -38,1 +39,1 @@\n- *\n+ * <p>\n@@ -47,4 +48,4 @@\n-        TOKEN            (0, \"TOKEN\"),\n-        VALUE            (1, \"VALUE\"),\n-        JASMIDENTIFIER   (2, \"JASM\"),\n-        KEYWORD          (3, \"KEYWORD\");\n+        TOKEN(\"TOKEN\"),\n+        VALUE(\"VALUE\"),\n+        JASMIDENTIFIER(\"JASM\"),\n+        KEYWORD(\"KEYWORD\");\n@@ -52,1 +53,0 @@\n-        private final Integer value;\n@@ -55,2 +55,1 @@\n-        KeywordType(Integer val, String printValue) {\n-            this.value = val;\n+        KeywordType(String printValue) {\n@@ -68,18 +67,17 @@\n-    static public enum TokenType {\n-        MODIFIER            (1, \"Modifier\"),\n-        OPERATOR            (2, \"Operator\"),\n-        VALUE               (3, \"Value\"),\n-        TYPE                (4, \"Type\"),\n-        EXPRESSION          (5, \"Expression\"),\n-        STATEMENT           (6, \"Statement\"),\n-        DECLARATION         (7, \"Declaration\"),\n-        PUNCTUATION         (8, \"Punctuation\"),\n-        SPECIAL             (9, \"Special\"),\n-        JASM                (10, \"Jasm\"),\n-        MISC                (11, \"Misc\"),\n-        JASM_IDENT          (12, \"Jasm identifier\"),\n-        MODULE_NAME         (13, \"Module Name\"),             \/\/ The token can be used as Module Name\n-        TYPE_PATH_KIND      (14, \"Type path kind\"),          \/\/ Table 4.7.20.2-A Interpretation of type_path_kind values\n-        CLASS_NAME          (15, \"Class Name\");              \/\/ The token can be used as Class Name\n-\n-        private final Integer value;\n+    public enum TokenType {\n+        MODIFIER(\"Modifier\"),\n+        OPERATOR(\"Operator\"),\n+        VALUE(\"Value\"),\n+        TYPE(\"Type\"),\n+        EXPRESSION(\"Expression\"),\n+        STATEMENT(\"Statement\"),\n+        DECLARATION(\"Declaration\"),\n+        PUNCTUATION(\"Punctuation\"),\n+        SPECIAL(\"Special\"),\n+        JASM(\"Jasm\"),\n+        MISC(\"Misc\"),\n+        JASM_IDENT(\"Jasm identifier\"),\n+        MODULE_NAME(\"Module Name\"),             \/\/ The token can be used as Module Name\n+        TYPE_PATH_KIND(\"Type path kind\"),       \/\/ Table 4.7.20.2-A Interpretation of type_path_kind values\n+        CLASS_NAME(\"Class Name\");              \/\/ The token can be used as Class Name\n+\n@@ -88,2 +86,1 @@\n-        TokenType(Integer value, String printValue) {\n-            this.value = value;\n+        TokenType(String printValue) {\n@@ -92,0 +89,1 @@\n+\n@@ -111,1 +109,1 @@\n-         *\n+         * <p>\n@@ -125,1 +123,1 @@\n-         *\n+         * <p>\n@@ -139,1 +137,1 @@\n-         *\n+         * <p>\n@@ -151,1 +149,1 @@\n-         *\n+         * <p>\n@@ -167,205 +165,208 @@\n-        EOF                 (-1, \"EOF\",         \"EOF\",  EnumSet.of(TokenType.MISC, TokenType.CLASS_NAME, TokenType.MODULE_NAME)),\n-        COMMA               (0, \"COMMA\",        \",\",    EnumSet.of(TokenType.OPERATOR)),\n-        ASSIGN              (1, \"ASSIGN\",       \"=\",    EnumSet.of(TokenType.OPERATOR)),\n-\n-        ASGMUL              (2, \"ASGMUL\",       \"*=\",   EnumSet.of(TokenType.OPERATOR)),\n-        ASGDIV              (3, \"ASGDIV\",       \"\/=\",   EnumSet.of(TokenType.OPERATOR)),\n-        ASGREM              (4, \"ASGREM\",       \"%=\",   EnumSet.of(TokenType.OPERATOR)),\n-        ASGADD              (5, \"ASGADD\",       \"+=\",   EnumSet.of(TokenType.OPERATOR)),\n-        ASGSUB              (6, \"ASGSUB\",       \"-=\",   EnumSet.of(TokenType.OPERATOR)),\n-        ASGLSHIFT           (7, \"ASGLSHIFT\",    \"<<=\",  EnumSet.of(TokenType.OPERATOR)),\n-        ASGRSHIFT           (8, \"ASGRSHIFT\",    \">>=\",  EnumSet.of(TokenType.OPERATOR)),\n-        ASGURSHIFT          (9, \"ASGURSHIFT\",   \"<<<=\", EnumSet.of(TokenType.OPERATOR)),\n-        ASGBITAND           (10, \"ASGBITAND\",   \"&=\",   EnumSet.of(TokenType.OPERATOR)),\n-        ASGBITOR            (11, \"ASGBITOR\",    \"|=\",   EnumSet.of(TokenType.OPERATOR)),\n-        ASGBITXOR           (12, \"ASGBITXOR\",   \"^=\",   EnumSet.of(TokenType.OPERATOR)),\n-\n-        COND                (13, \"COND\",        \"?:\",   EnumSet.of(TokenType.OPERATOR)),\n-        OR                  (14, \"OR\",          \"||\",   EnumSet.of(TokenType.OPERATOR)),\n-        AND                 (15, \"AND\",         \"&&\",   EnumSet.of(TokenType.OPERATOR)),\n-        BITOR               (16, \"BITOR\",       \"|\",    EnumSet.of(TokenType.OPERATOR)),\n-        BITXOR              (17, \"BITXOR\",      \"^\",    EnumSet.of(TokenType.OPERATOR)),\n-        BITAND              (18, \"BITAND\",      \"&\",    EnumSet.of(TokenType.OPERATOR)),\n-        NE                  (19, \"NE\",          \"!=\",   EnumSet.of(TokenType.OPERATOR)),\n-        EQ                  (20, \"EQ\",          \"==\",   EnumSet.of(TokenType.OPERATOR)),\n-        GE                  (21, \"GE\",          \">=\",   EnumSet.of(TokenType.OPERATOR)),\n-        GT                  (22, \"GT\",          \">\",    EnumSet.of(TokenType.OPERATOR)),\n-        LE                  (23, \"LE\",          \"<=\",   EnumSet.of(TokenType.OPERATOR)),\n-        LT                  (24, \"LT\",          \"<\",    EnumSet.of(TokenType.OPERATOR)),\n-        INSTANCEOF          (25, \"INSTANCEOF\",  \"instanceof\",  EnumSet.of(TokenType.OPERATOR)),\n-        LSHIFT              (26, \"LSHIFT\",      \"<<\",   EnumSet.of(TokenType.OPERATOR)),\n-        RSHIFT              (27, \"RSHIFT\",      \">>\",   EnumSet.of(TokenType.OPERATOR)),\n-        URSHIFT             (28, \"URSHIFT\",     \"<<<\",  EnumSet.of(TokenType.OPERATOR)),\n-        ADD                 (29, \"ADD\",         \"+\",    EnumSet.of(TokenType.OPERATOR)),\n-        SUB                 (30, \"SUB\",         \"-\",    EnumSet.of(TokenType.OPERATOR)),\n-        DIV                 (31, \"DIV\",         \"\/\",    EnumSet.of(TokenType.OPERATOR)),\n-        REM                 (32, \"REM\",         \"%\",    EnumSet.of(TokenType.OPERATOR)),\n-        MUL                 (33, \"MUL\",         \"*\",    EnumSet.of(TokenType.OPERATOR)),\n-        CAST                (34, \"CAST\",        \"cast\", EnumSet.of(TokenType.OPERATOR, TokenType.CLASS_NAME, TokenType.MODULE_NAME)),\n-        POS                 (35, \"POS\",         \"+\",    EnumSet.of(TokenType.OPERATOR)),\n-        NEG                 (36, \"NEG\",         \"-\",    EnumSet.of(TokenType.OPERATOR)),\n-        NOT                 (37, \"NOT\",         \"!\",    EnumSet.of(TokenType.OPERATOR)),\n-        BITNOT              (38, \"BITNOT\",      \"~\",    EnumSet.of(TokenType.OPERATOR)),\n-        PREINC              (39, \"PREINC\",      \"++\",   EnumSet.of(TokenType.OPERATOR)),\n-        PREDEC              (40, \"PREDEC\",      \"--\",   EnumSet.of(TokenType.OPERATOR)),\n-        NEWARRAY            (41, \"NEWARRAY\",    \"new\",  EnumSet.of(TokenType.OPERATOR)),\n-        NEWINSTANCE         (42, \"NEWINSTANCE\", \"new\",  EnumSet.of(TokenType.OPERATOR)),\n-        NEWFROMNAME         (43, \"NEWFROMNAME\", \"new\",  EnumSet.of(TokenType.OPERATOR)),\n-        POSTINC             (44, \"POSTINC\",     \"++\",   EnumSet.of(TokenType.OPERATOR)),\n-        POSTDEC             (45, \"POSTDEC\",     \"--\",   EnumSet.of(TokenType.OPERATOR)),\n-        FIELD               (46, \"FIELD\",       \"field\", EnumSet.of(TokenType.OPERATOR,   TokenType.CLASS_NAME, TokenType.MODULE_NAME)),\n-        METHOD              (47, \"METHOD\",      \"method\",  EnumSet.of(TokenType.OPERATOR, TokenType.CLASS_NAME, TokenType.MODULE_NAME)),\n-        ARRAYACCESS         (48, \"ARRAYACCESS\", \"[]\",   EnumSet.of(TokenType.OPERATOR)),\n-        NEW                 (49, \"NEW\",         \"new\",  EnumSet.of(TokenType.OPERATOR)),\n-        INC                 (50, \"INC\",         \"++\",   EnumSet.of(TokenType.OPERATOR)),\n-        DEC                 (51, \"DEC\",         \"--\",   EnumSet.of(TokenType.OPERATOR)),\n-\n-        CONVERT             (55, \"CONVERT\",     \"convert\", EnumSet.of(TokenType.OPERATOR, TokenType.CLASS_NAME, TokenType.MODULE_NAME)),\n-        EXPR                (56, \"EXPR\",        \"expr\", EnumSet.of(TokenType.OPERATOR,    TokenType.CLASS_NAME, TokenType.MODULE_NAME)),\n-        ARRAY               (57, \"ARRAY\",       \"array\", EnumSet.of(TokenType.OPERATOR,   TokenType.CLASS_NAME, TokenType.MODULE_NAME)),\n-        GOTO                (58, \"GOTO\",        \"goto\", EnumSet.of(TokenType.OPERATOR)),\n-    \/*\n-     * Value tokens\n-     *\/\n-        IDENT               (60, \"IDENT\",       \"Identifier\", EnumSet.of(TokenType.VALUE, TokenType.CLASS_NAME, TokenType.MODULE_NAME, TokenType.JASM_IDENT), KeywordType.VALUE),\n-        BOOLEANVAL          (61, \"BOOLEANVAL\",  \"Boolean\",    EnumSet.of(TokenType.VALUE, TokenType.CLASS_NAME, TokenType.MODULE_NAME),   KeywordType.VALUE),\n-        BYTEVAL             (62, \"BYTEVAL\",     \"Byte\",       EnumSet.of(TokenType.VALUE, TokenType.CLASS_NAME, TokenType.MODULE_NAME)),\n-        CHARVAL             (63, \"CHARVAL\",     \"Char\",       EnumSet.of(TokenType.VALUE, TokenType.CLASS_NAME, TokenType.MODULE_NAME)),\n-        SHORTVAL            (64, \"SHORTVAL\",    \"Short\",      EnumSet.of(TokenType.VALUE, TokenType.CLASS_NAME, TokenType.MODULE_NAME)),\n-        INTVAL              (65, \"INTVAL\",      \"Integer\",    EnumSet.of(TokenType.VALUE, TokenType.CLASS_NAME, TokenType.MODULE_NAME),   KeywordType.VALUE),\n-        LONGVAL             (66, \"LONGVAL\",     \"Long\",       EnumSet.of(TokenType.VALUE, TokenType.CLASS_NAME, TokenType.MODULE_NAME),   KeywordType.VALUE),\n-        FLOATVAL            (67, \"FLOATVAL\",    \"Float\",      EnumSet.of(TokenType.VALUE, TokenType.CLASS_NAME, TokenType.MODULE_NAME),   KeywordType.VALUE),\n-        DOUBLEVAL           (68, \"DOUBLEVAL\",   \"Double\",     EnumSet.of(TokenType.VALUE, TokenType.CLASS_NAME, TokenType.MODULE_NAME),   KeywordType.VALUE),\n-        STRINGVAL           (69, \"STRINGVAL\",   \"String\",     EnumSet.of(TokenType.VALUE, TokenType.CLASS_NAME, TokenType.MODULE_NAME),   KeywordType.VALUE),\n-    \/*\n-     * Type keywords\n-     *\/\n-        BYTE                (70, \"BYTE\",        \"byte\",     EnumSet.of(TokenType.TYPE)),\n-        CHAR                (71, \"CHAR\",        \"char\",     EnumSet.of(TokenType.TYPE)),\n-        SHORT               (72, \"SHORT\",       \"short\",    EnumSet.of(TokenType.TYPE)),\n-        INT                 (73, \"INT\",         \"int\",      EnumSet.of(TokenType.TYPE)),\n-        LONG                (74, \"LONG\",        \"long\",     EnumSet.of(TokenType.TYPE)),\n-        FLOAT               (75, \"FLOAT\",       \"float\",    EnumSet.of(TokenType.TYPE)),\n-        DOUBLE              (76, \"DOUBLE\",      \"double\",   EnumSet.of(TokenType.TYPE)),\n-        VOID                (77, \"VOID\",        \"void\",     EnumSet.of(TokenType.TYPE)),\n-        BOOLEAN             (78, \"BOOLEAN\",     \"boolean\",  EnumSet.of(TokenType.TYPE)),\n-    \/*\n-     * Expression keywords\n-     *\/\n-        TRUE                (80, \"TRUE\",        \"true\",     EnumSet.of(TokenType.EXPRESSION, TokenType.CLASS_NAME, TokenType.MODULE_NAME)),\n-        FALSE               (81, \"FALSE\",       \"false\",    EnumSet.of(TokenType.EXPRESSION, TokenType.CLASS_NAME, TokenType.MODULE_NAME)),\n-        THIS                (82, \"THIS\",        \"this\",     EnumSet.of(TokenType.EXPRESSION)),\n-        SUPER               (83, \"SUPER\",       \"super\",    EnumSet.of(TokenType.MODIFIER),  KeywordType.KEYWORD),\n-        NULL                (84, \"NULL\",        \"null\",     EnumSet.of(TokenType.EXPRESSION, TokenType.CLASS_NAME, TokenType.MODULE_NAME)),\n-\n-        THIS_CLASS          (85, \"this_class\",  \"this_class\",      EnumSet.of(TokenType.DECLARATION, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n-        SUPER_CLASS         (86, \"super_class\", \"super_class\",     EnumSet.of(TokenType.DECLARATION, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n-    \/*\n-     * Statement keywords\n-     *\/\n-        IF                  (90, \"IF\",          \"if\",       EnumSet.of(TokenType.STATEMENT)),\n-        ELSE                (91, \"ELSE\",        \"else\",     EnumSet.of(TokenType.STATEMENT)),\n-        FOR                 (92, \"FOR\",         \"for\",      EnumSet.of(TokenType.STATEMENT)),\n-        WHILE               (93, \"WHILE\",       \"while\",    EnumSet.of(TokenType.STATEMENT)),\n-        DO                  (94, \"DO\",          \"do\",       EnumSet.of(TokenType.STATEMENT)),\n-        SWITCH              (95, \"SWITCH\",      \"switch\",   EnumSet.of(TokenType.STATEMENT)),\n-        CASE                (96, \"CASE\",        \"case\",     EnumSet.of(TokenType.STATEMENT)),\n-        DEFAULT             (97,  \"DEFAULT\",    \"default\",  EnumSet.of(TokenType.STATEMENT), KeywordType.KEYWORD),\n-        BREAK               (98, \"BREAK\",       \"break\",    EnumSet.of(TokenType.STATEMENT)),\n-        CONTINUE            (99, \"CONTINUE\",    \"continue\", EnumSet.of(TokenType.STATEMENT)),\n-        RETURN              (100, \"RETURN\",     \"return\",   EnumSet.of(TokenType.STATEMENT)),\n-        TRY                 (101, \"TRY\",        \"try\",      EnumSet.of(TokenType.STATEMENT)),\n-\n-        CATCH               (102, \"CATCH\",      \"catch\",    EnumSet.of(TokenType.STATEMENT)),\n-        FINALLY             (103, \"FINALLY\",    \"finally\",  EnumSet.of(TokenType.STATEMENT)),\n-        THROW               (104, \"THROW\",      \"throw\",            EnumSet.of(TokenType.STATEMENT)),\n-        STAT                (105, \"STAT\",       \"stat\",             EnumSet.of(TokenType.STATEMENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME )),\n-        EXPRESSION          (106, \"EXPRESSION\", \"expression\",       EnumSet.of(TokenType.STATEMENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME )),\n-        DECLARATION         (107, \"DECLARATION\", \"declaration\",     EnumSet.of(TokenType.STATEMENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME )),\n-        VARDECLARATION      (108, \"VARDECLARATION\", \"vdeclaration\", EnumSet.of(TokenType.STATEMENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME)),\n-    \/*\n-     * Declaration keywords\n-     *\/\n-        IMPORT              (110, \"IMPORT\",     \"import\",   EnumSet.of(TokenType.DECLARATION,     TokenType.CLASS_NAME, TokenType.MODULE_NAME)),\n-        CLASS               (111, \"CLASS\",      \"class\",    EnumSet.of(TokenType.DECLARATION,     TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n-        EXTENDS             (112, \"EXTENDS\",    \"extends\",  EnumSet.of(TokenType.DECLARATION,     TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n-        IMPLEMENTS          (113, \"IMPLEMENTS\", \"implements\",   EnumSet.of(TokenType.DECLARATION, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n-        INTERFACE           (114, \"INTERFACE\",  \"interface\",    EnumSet.of(TokenType.DECLARATION, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n-        PACKAGE             (115, \"PACKAGE\",    \"package\",  EnumSet.of(TokenType.DECLARATION),    KeywordType.KEYWORD),\n-        ENUM                (116, \"ENUM\",       \"enum\",     EnumSet.of(TokenType.DECLARATION),    KeywordType.KEYWORD),\n-        MANDATED            (117, \"MANDATED\",   \"mandated\", EnumSet.of(TokenType.DECLARATION,     TokenType.CLASS_NAME), KeywordType.KEYWORD),\n-        THROWS              (118, \"THROWS\",     \"throws\",   EnumSet.of(TokenType.DECLARATION),    KeywordType.KEYWORD),\n-\n-    \/*\n-     * Modifier keywords\n-     *\/\n-        ANNOTATION_ACCESS   (119, \"ANNOTATION_ACCESS\",  \"annotation\",       EnumSet.of(TokenType.MODIFIER, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n-        PRIVATE             (120, \"PRIVATE\",            \"private\",          EnumSet.of(TokenType.MODIFIER),    KeywordType.KEYWORD),\n-        PUBLIC              (121, \"PUBLIC\",             \"public\",           EnumSet.of(TokenType.MODIFIER),    KeywordType.KEYWORD),\n-        PROTECTED           (122, \"PROTECTED\",          \"protected\",        EnumSet.of(TokenType.MODIFIER),    KeywordType.KEYWORD),\n-        CONST               (123, \"CONST\",              \"const\",            EnumSet.of(TokenType.DECLARATION), KeywordType.KEYWORD),\n-        STATIC              (124, \"STATIC\",             \"static\",           EnumSet.of(TokenType.MODIFIER),    KeywordType.KEYWORD),\n-        TRANSIENT           (125, \"TRANSIENT\",          \"transient\",        EnumSet.of(TokenType.MODIFIER, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n-        SYNCHRONIZED        (126, \"SYNCHRONIZED\",       \"synchronized\",     EnumSet.of(TokenType.MODIFIER), KeywordType.KEYWORD),\n-        NATIVE              (127, \"NATIVE\",             \"native\",           EnumSet.of(TokenType.MODIFIER), KeywordType.KEYWORD),\n-        FINAL               (128, \"FINAL\",              \"final\",            EnumSet.of(TokenType.MODIFIER), KeywordType.KEYWORD),\n-        VOLATILE            (129, \"VOLATILE\",           \"volatile\",         EnumSet.of(TokenType.MODIFIER), KeywordType.KEYWORD),\n-        ABSTRACT            (130, \"ABSTRACT\",           \"abstract\",         EnumSet.of(TokenType.MODIFIER), KeywordType.KEYWORD),\n-        TRANSITIVE          (131, \"TRANSITIVE\",         \"transitive\",       EnumSet.of(TokenType.MODIFIER, TokenType.CLASS_NAME ), KeywordType.KEYWORD),\n-        OPEN                (132, \"OPEN\",               \"open\",             EnumSet.of(TokenType.MODIFIER, TokenType.CLASS_NAME ), KeywordType.KEYWORD),\n-\n-    \/*\n-     * Punctuation\n-     *\/\n-        AT_SIGN             (133, \"AT\",         \"@\",       EnumSet.of(TokenType.PUNCTUATION), KeywordType.VALUE),\n-        SEMICOLON           (134, \"SEMICOLON\",  \";\",       EnumSet.of(TokenType.PUNCTUATION), KeywordType.VALUE),\n-        COLON               (135, \"COLON\",      \":\",       EnumSet.of(TokenType.PUNCTUATION), KeywordType.VALUE),\n-        QUESTIONMARK        (136, \"QUESTIONMARK\", \"?\",     EnumSet.of(TokenType.PUNCTUATION)),\n-        LBRACE              (137, \"LBRACE\",     \"{\",       EnumSet.of(TokenType.PUNCTUATION), KeywordType.VALUE),\n-        RBRACE              (138, \"RBRACE\",     \"}\",       EnumSet.of(TokenType.PUNCTUATION), KeywordType.VALUE),\n-        LPAREN              (139, \"LPAREN\",     \"(\",       EnumSet.of(TokenType.PUNCTUATION)),\n-        RPAREN              (140, \"RPAREN\",     \")\",       EnumSet.of(TokenType.PUNCTUATION)),\n-        LSQBRACKET          (141, \"LSQBRACKET\", \"[\",       EnumSet.of(TokenType.PUNCTUATION)),\n-        RSQBRACKET          (142, \"RSQBRACKET\", \"]\",       EnumSet.of(TokenType.PUNCTUATION)),\n-\n-        ESCAPED_COLON       (201, \"ESCCOLON\",     \"\\\\:\",     EnumSet.of(TokenType.PUNCTUATION)),\n-        ESCAPED_ATSIGH      (202, \"ESCATSIGH\",    \"\\\\@\",     EnumSet.of(TokenType.PUNCTUATION)),\n-        ESCAPED_BACKSLASH   (203, \"ESCBACKSLASH\", \"\\\\\\\\\",    EnumSet.of(TokenType.PUNCTUATION)),\n-    \/*\n-     * Special tokens\n-     *\/\n-        ERROR               (145, \"ERROR\",      \"error\",    EnumSet.of(TokenType.MODIFIER,    TokenType.CLASS_NAME, TokenType.MODULE_NAME)),\n-        COMMENT             (146, \"COMMENT\",    \"comment\",  EnumSet.of(TokenType.MODIFIER,    TokenType.CLASS_NAME, TokenType.MODULE_NAME)),\n-        TYPE                (147, \"TYPE\",       \"type\",     EnumSet.of(TokenType.MODIFIER,    TokenType.CLASS_NAME, TokenType.MODULE_NAME)),\n-        LENGTH              (148, \"LENGTH\",     \"length\",   EnumSet.of(TokenType.DECLARATION, TokenType.CLASS_NAME, TokenType.MODULE_NAME)),\n-        INLINERETURN        (149, \"INLINERETURN\", \"inline-return\",  EnumSet.of(TokenType.MODIFIER)),\n-        INLINEMETHOD        (150, \"INLINEMETHOD\", \"inline-method\",  EnumSet.of(TokenType.MODIFIER)),\n-        INLINENEWINSTANCE   (151, \"INLINENEWINSTANCE\", \"inline-new\",EnumSet.of(TokenType.MODIFIER)),\n-\n-    \/*\n-     * Added for jasm\n-     *\/\n-        METHODREF           (152, \"METHODREF\",  \"Method\",   EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n-        FIELDREF            (153, \"FIELD\",      \"Field\",    EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n-        STACK               (154, \"STACK\",      \"stack\",    EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n-        LOCAL               (155, \"LOCAL\",      \"locals\",   EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n-        CPINDEX             (156, \"CPINDEX\",    \"CPINDEX\",  EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME)),\n-        CPNAME              (157, \"CPNAME\",     \"CPName\",   EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME)),\n-        SIGN                (158, \"SIGN\",       \"SIGN\",     EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME)),\n-        BITS                (159, \"BITS\",       \"bits\",     EnumSet.of(TokenType.MISC,        TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n-\n-        INF                 (160, \"INF\",        \"Inf\", \"Infinity\",  EnumSet.of(TokenType.MISC, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n-        NAN                 (161, \"NAN\",        \"NaN\",                  EnumSet.of(TokenType.MISC, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n-\n-        INNERCLASS          (162, \"INNERCLASS\", \"InnerClass\",  EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT,  TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n-        OF                  (163, \"OF\",         \"of\",          EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT,  TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n-        SYNTHETIC           (164, \"SYNTHETIC\",  \"synthetic\",   EnumSet.of(TokenType.MODIFIER,    TokenType.JASM_IDENT,  TokenType.CLASS_NAME), KeywordType.KEYWORD),\n-        STRICT              (165, \"STRICT\",     \"strict\",      EnumSet.of(TokenType.MODIFIER,    TokenType.JASM_IDENT,  TokenType.CLASS_NAME, TokenType.MODULE_NAME ), KeywordType.KEYWORD),\n-        DEPRECATED          (166, \"DEPRECATED\", \"deprecated\",  EnumSet.of(TokenType.MODIFIER,    TokenType.JASM_IDENT,  TokenType.CLASS_NAME), KeywordType.KEYWORD),\n-        VERSION             (167, \"VERSION\",    \"version\",     EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT,  TokenType.CLASS_NAME), KeywordType.KEYWORD),\n-        MODULE              (168, \"MODULE\",     \"module\",      EnumSet.of(TokenType.DECLARATION, TokenType.CLASS_NAME), KeywordType.KEYWORD),\n-        ANNOTATION          (169, \"ANNOTATION\", \"@\",           EnumSet.of(TokenType.MISC)),\n-        PARAM_NAME          (170, \"PARAM_NAME\", \"#\",           EnumSet.of(TokenType.MISC)),\n-\n-        VARARGS             (171, \"VARARGS\",    \"varargs\",  EnumSet.of(TokenType.MODIFIER, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n-        BRIDGE              (172, \"BRIDGE\",     \"bridge\",   EnumSet.of(TokenType.MODIFIER, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        EOF(-1, \"EOF\", \"EOF\", EnumSet.of(TokenType.MISC, TokenType.CLASS_NAME, TokenType.MODULE_NAME)),\n+        COMMA(0, \"COMMA\", \",\", EnumSet.of(TokenType.OPERATOR)),\n+        ASSIGN(1, \"ASSIGN\", \"=\", EnumSet.of(TokenType.OPERATOR)),\n+\n+        ASGMUL(2, \"ASGMUL\", \"*=\", EnumSet.of(TokenType.OPERATOR)),\n+        ASGDIV(3, \"ASGDIV\", \"\/=\", EnumSet.of(TokenType.OPERATOR)),\n+        ASGREM(4, \"ASGREM\", \"%=\", EnumSet.of(TokenType.OPERATOR)),\n+        ASGADD(5, \"ASGADD\", \"+=\", EnumSet.of(TokenType.OPERATOR)),\n+        ASGSUB(6, \"ASGSUB\", \"-=\", EnumSet.of(TokenType.OPERATOR)),\n+        ASGLSHIFT(7, \"ASGLSHIFT\", \"<<=\", EnumSet.of(TokenType.OPERATOR)),\n+        ASGRSHIFT(8, \"ASGRSHIFT\", \">>=\", EnumSet.of(TokenType.OPERATOR)),\n+        ASGURSHIFT(9, \"ASGURSHIFT\", \"<<<=\", EnumSet.of(TokenType.OPERATOR)),\n+        ASGBITAND(10, \"ASGBITAND\", \"&=\", EnumSet.of(TokenType.OPERATOR)),\n+        ASGBITOR(11, \"ASGBITOR\", \"|=\", EnumSet.of(TokenType.OPERATOR)),\n+        ASGBITXOR(12, \"ASGBITXOR\", \"^=\", EnumSet.of(TokenType.OPERATOR)),\n+\n+        COND(13, \"COND\", \"?:\", EnumSet.of(TokenType.OPERATOR)),\n+        OR(14, \"OR\", \"||\", EnumSet.of(TokenType.OPERATOR)),\n+        AND(15, \"AND\", \"&&\", EnumSet.of(TokenType.OPERATOR)),\n+        BITOR(16, \"BITOR\", \"|\", EnumSet.of(TokenType.OPERATOR)),\n+        BITXOR(17, \"BITXOR\", \"^\", EnumSet.of(TokenType.OPERATOR)),\n+        BITAND(18, \"BITAND\", \"&\", EnumSet.of(TokenType.OPERATOR)),\n+        NE(19, \"NE\", \"!=\", EnumSet.of(TokenType.OPERATOR)),\n+        EQ(20, \"EQ\", \"==\", EnumSet.of(TokenType.OPERATOR)),\n+        GE(21, \"GE\", \">=\", EnumSet.of(TokenType.OPERATOR)),\n+        GT(22, \"GT\", \">\", EnumSet.of(TokenType.OPERATOR)),\n+        LE(23, \"LE\", \"<=\", EnumSet.of(TokenType.OPERATOR)),\n+        LT(24, \"LT\", \"<\", EnumSet.of(TokenType.OPERATOR)),\n+        INSTANCEOF(25, \"INSTANCEOF\", \"instanceof\", EnumSet.of(TokenType.OPERATOR)),\n+        LSHIFT(26, \"LSHIFT\", \"<<\", EnumSet.of(TokenType.OPERATOR)),\n+        RSHIFT(27, \"RSHIFT\", \">>\", EnumSet.of(TokenType.OPERATOR)),\n+        URSHIFT(28, \"URSHIFT\", \"<<<\", EnumSet.of(TokenType.OPERATOR)),\n+        ADD(29, \"ADD\", \"+\", EnumSet.of(TokenType.OPERATOR)),\n+        SUB(30, \"SUB\", \"-\", EnumSet.of(TokenType.OPERATOR)),\n+        DIV(31, \"DIV\", \"\/\", EnumSet.of(TokenType.OPERATOR)),\n+        REM(32, \"REM\", \"%\", EnumSet.of(TokenType.OPERATOR)),\n+        MUL(33, \"MUL\", \"*\", EnumSet.of(TokenType.OPERATOR)),\n+        CAST(34, \"CAST\", \"cast\", EnumSet.of(TokenType.OPERATOR, TokenType.CLASS_NAME, TokenType.MODULE_NAME)),\n+        POS(35, \"POS\", \"+\", EnumSet.of(TokenType.OPERATOR)),\n+        NEG(36, \"NEG\", \"-\", EnumSet.of(TokenType.OPERATOR)),\n+        NOT(37, \"NOT\", \"!\", EnumSet.of(TokenType.OPERATOR)),\n+        BITNOT(38, \"BITNOT\", \"~\", EnumSet.of(TokenType.OPERATOR)),\n+        PREINC(39, \"PREINC\", \"++\", EnumSet.of(TokenType.OPERATOR)),\n+        PREDEC(40, \"PREDEC\", \"--\", EnumSet.of(TokenType.OPERATOR)),\n+        NEWARRAY(41, \"NEWARRAY\", \"new\", EnumSet.of(TokenType.OPERATOR)),\n+        NEWINSTANCE(42, \"NEWINSTANCE\", \"new\", EnumSet.of(TokenType.OPERATOR)),\n+        NEWFROMNAME(43, \"NEWFROMNAME\", \"new\", EnumSet.of(TokenType.OPERATOR)),\n+        POSTINC(44, \"POSTINC\", \"++\", EnumSet.of(TokenType.OPERATOR)),\n+        POSTDEC(45, \"POSTDEC\", \"--\", EnumSet.of(TokenType.OPERATOR)),\n+        FIELD(46, \"FIELD\", \"field\", EnumSet.of(TokenType.OPERATOR, TokenType.CLASS_NAME, TokenType.MODULE_NAME)),\n+        METHOD(47, \"METHOD\", \"method\", EnumSet.of(TokenType.OPERATOR, TokenType.CLASS_NAME, TokenType.MODULE_NAME)),\n+        ARRAYACCESS(48, \"ARRAYACCESS\", \"[]\", EnumSet.of(TokenType.OPERATOR)),\n+        NEW(49, \"NEW\", \"new\", EnumSet.of(TokenType.OPERATOR)),\n+        INC(50, \"INC\", \"++\", EnumSet.of(TokenType.OPERATOR)),\n+        DEC(51, \"DEC\", \"--\", EnumSet.of(TokenType.OPERATOR)),\n+        \/\/ 52, 53 are reserved for FILE, CLASSFILE\n+\n+        CONVERT(55, \"CONVERT\", \"convert\", EnumSet.of(TokenType.OPERATOR, TokenType.CLASS_NAME, TokenType.MODULE_NAME)),\n+        EXPR(56, \"EXPR\", \"expr\", EnumSet.of(TokenType.OPERATOR, TokenType.CLASS_NAME, TokenType.MODULE_NAME)),\n+        ARRAY(57, \"ARRAY\", \"array\", EnumSet.of(TokenType.OPERATOR, TokenType.CLASS_NAME, TokenType.MODULE_NAME)),\n+        GOTO(58, \"GOTO\", \"goto\", EnumSet.of(TokenType.OPERATOR)),\n+        \/*\n+         * Value tokens\n+         *\/\n+        IDENT(60, \"IDENT\", \"Identifier\", EnumSet.of(TokenType.VALUE, TokenType.CLASS_NAME, TokenType.MODULE_NAME, TokenType.JASM_IDENT), KeywordType.VALUE),\n+        BOOLEANVAL(61, \"BOOLEANVAL\", \"Boolean\", EnumSet.of(TokenType.VALUE, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.VALUE),\n+        BYTEVAL(62, \"BYTEVAL\", \"Byte\", EnumSet.of(TokenType.VALUE, TokenType.CLASS_NAME, TokenType.MODULE_NAME)),\n+        CHARVAL(63, \"CHARVAL\", \"Char\", EnumSet.of(TokenType.VALUE, TokenType.CLASS_NAME, TokenType.MODULE_NAME)),\n+        SHORTVAL(64, \"SHORTVAL\", \"Short\", EnumSet.of(TokenType.VALUE, TokenType.CLASS_NAME, TokenType.MODULE_NAME)),\n+        INTVAL(65, \"INTVAL\", \"Integer\", EnumSet.of(TokenType.VALUE, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.VALUE),\n+        LONGVAL(66, \"LONGVAL\", \"Long\", EnumSet.of(TokenType.VALUE, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.VALUE),\n+        FLOATVAL(67, \"FLOATVAL\", \"Float\", EnumSet.of(TokenType.VALUE, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.VALUE),\n+        DOUBLEVAL(68, \"DOUBLEVAL\", \"Double\", EnumSet.of(TokenType.VALUE, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.VALUE),\n+        STRINGVAL(69, \"STRINGVAL\", \"String\", EnumSet.of(TokenType.VALUE, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.VALUE),\n+        \/*\n+         * Type keywords\n+         *\/\n+        BYTE(70, \"BYTE\", \"byte\", EnumSet.of(TokenType.TYPE)),\n+        CHAR(71, \"CHAR\", \"char\", EnumSet.of(TokenType.TYPE)),\n+        SHORT(72, \"SHORT\", \"short\", EnumSet.of(TokenType.TYPE)),\n+        INT(73, \"INT\", \"int\", EnumSet.of(TokenType.TYPE)),\n+        LONG(74, \"LONG\", \"long\", EnumSet.of(TokenType.TYPE)),\n+        FLOAT(75, \"FLOAT\", \"float\", EnumSet.of(TokenType.TYPE)),\n+        DOUBLE(76, \"DOUBLE\", \"double\", EnumSet.of(TokenType.TYPE)),\n+        VOID(77, \"VOID\", \"void\", EnumSet.of(TokenType.TYPE)),\n+        BOOLEAN(78, \"BOOLEAN\", \"boolean\", EnumSet.of(TokenType.TYPE)),\n+        \/*\n+         * Expression keywords\n+         *\/\n+        TRUE(80, \"TRUE\", \"true\", EnumSet.of(TokenType.EXPRESSION, TokenType.CLASS_NAME, TokenType.MODULE_NAME)),\n+        FALSE(81, \"FALSE\", \"false\", EnumSet.of(TokenType.EXPRESSION, TokenType.CLASS_NAME, TokenType.MODULE_NAME)),\n+        THIS(82, \"THIS\", \"this\", EnumSet.of(TokenType.EXPRESSION)),\n+        SUPER(83, \"SUPER\", \"super\", EnumSet.of(TokenType.MODIFIER), KeywordType.KEYWORD),\n+        NULL(84, \"NULL\", \"null\", EnumSet.of(TokenType.EXPRESSION, TokenType.CLASS_NAME, TokenType.MODULE_NAME)),\n+\n+        THIS_CLASS(85, \"this_class\", \"this_class\", EnumSet.of(TokenType.DECLARATION, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        SUPER_CLASS(86, \"super_class\", \"super_class\", EnumSet.of(TokenType.DECLARATION, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        \/*\n+         * Statement keywords\n+         *\/\n+        IF(90, \"IF\", \"if\", EnumSet.of(TokenType.STATEMENT)),\n+        ELSE(91, \"ELSE\", \"else\", EnumSet.of(TokenType.STATEMENT)),\n+        FOR(92, \"FOR\", \"for\", EnumSet.of(TokenType.STATEMENT)),\n+        WHILE(93, \"WHILE\", \"while\", EnumSet.of(TokenType.STATEMENT)),\n+        DO(94, \"DO\", \"do\", EnumSet.of(TokenType.STATEMENT)),\n+        SWITCH(95, \"SWITCH\", \"switch\", EnumSet.of(TokenType.STATEMENT)),\n+        CASE(96, \"CASE\", \"case\", EnumSet.of(TokenType.STATEMENT)),\n+        DEFAULT(97, \"DEFAULT\", \"default\", EnumSet.of(TokenType.STATEMENT), KeywordType.KEYWORD),\n+        BREAK(98, \"BREAK\", \"break\", EnumSet.of(TokenType.STATEMENT)),\n+        CONTINUE(99, \"CONTINUE\", \"continue\", EnumSet.of(TokenType.STATEMENT)),\n+        RETURN(100, \"RETURN\", \"return\", EnumSet.of(TokenType.STATEMENT)),\n+        TRY(101, \"TRY\", \"try\", EnumSet.of(TokenType.STATEMENT)),\n+\n+        CATCH(102, \"CATCH\", \"catch\", EnumSet.of(TokenType.STATEMENT)),\n+        FINALLY(103, \"FINALLY\", \"finally\", EnumSet.of(TokenType.STATEMENT)),\n+        THROW(104, \"THROW\", \"throw\", EnumSet.of(TokenType.STATEMENT)),\n+        STAT(105, \"STAT\", \"stat\", EnumSet.of(TokenType.STATEMENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME)),\n+        EXPRESSION(106, \"EXPRESSION\", \"expression\", EnumSet.of(TokenType.STATEMENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME)),\n+        DECLARATION(107, \"DECLARATION\", \"declaration\", EnumSet.of(TokenType.STATEMENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME)),\n+        VARDECLARATION(108, \"VARDECLARATION\", \"vdeclaration\", EnumSet.of(TokenType.STATEMENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME)),\n+        \/*\n+         * Declaration keywords\n+         *\/\n+        IMPORT(110, \"IMPORT\", \"import\", EnumSet.of(TokenType.DECLARATION, TokenType.CLASS_NAME, TokenType.MODULE_NAME)),\n+        CLASS(111, \"CLASS\", \"class\", EnumSet.of(TokenType.DECLARATION, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        FILE(52, \"FILE\", \"file\", EnumSet.of(TokenType.DECLARATION, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        CLASS_FILE(53, \"CLASSFILE\", \"classfile\", EnumSet.of(TokenType.DECLARATION, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        EXTENDS(112, \"EXTENDS\", \"extends\", EnumSet.of(TokenType.DECLARATION, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        IMPLEMENTS(113, \"IMPLEMENTS\", \"implements\", EnumSet.of(TokenType.DECLARATION, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        INTERFACE(114, \"INTERFACE\", \"interface\", EnumSet.of(TokenType.DECLARATION, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        PACKAGE(115, \"PACKAGE\", \"package\", EnumSet.of(TokenType.DECLARATION), KeywordType.KEYWORD),\n+        ENUM(116, \"ENUM\", \"enum\", EnumSet.of(TokenType.DECLARATION), KeywordType.KEYWORD),\n+        MANDATED(117, \"MANDATED\", \"mandated\", EnumSet.of(TokenType.DECLARATION, TokenType.CLASS_NAME), KeywordType.KEYWORD),\n+        THROWS(118, \"THROWS\", \"throws\", EnumSet.of(TokenType.DECLARATION), KeywordType.KEYWORD),\n+\n+        \/*\n+         * Modifier keywords\n+         *\/\n+        ANNOTATION_ACCESS(119, \"ANNOTATION_ACCESS\", \"annotation\", EnumSet.of(TokenType.MODIFIER, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        PRIVATE(120, \"PRIVATE\", \"private\", EnumSet.of(TokenType.MODIFIER), KeywordType.KEYWORD),\n+        PUBLIC(121, \"PUBLIC\", \"public\", EnumSet.of(TokenType.MODIFIER), KeywordType.KEYWORD),\n+        PROTECTED(122, \"PROTECTED\", \"protected\", EnumSet.of(TokenType.MODIFIER), KeywordType.KEYWORD),\n+        CONST(123, \"CONST\", \"const\", EnumSet.of(TokenType.DECLARATION), KeywordType.KEYWORD),\n+        STATIC(124, \"STATIC\", \"static\", EnumSet.of(TokenType.MODIFIER), KeywordType.KEYWORD),\n+        TRANSIENT(125, \"TRANSIENT\", \"transient\", EnumSet.of(TokenType.MODIFIER, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        SYNCHRONIZED(126, \"SYNCHRONIZED\", \"synchronized\", EnumSet.of(TokenType.MODIFIER), KeywordType.KEYWORD),\n+        NATIVE(127, \"NATIVE\", \"native\", EnumSet.of(TokenType.MODIFIER), KeywordType.KEYWORD),\n+        FINAL(128, \"FINAL\", \"final\", EnumSet.of(TokenType.MODIFIER), KeywordType.KEYWORD),\n+        VOLATILE(129, \"VOLATILE\", \"volatile\", EnumSet.of(TokenType.MODIFIER), KeywordType.KEYWORD),\n+        ABSTRACT(130, \"ABSTRACT\", \"abstract\", EnumSet.of(TokenType.MODIFIER), KeywordType.KEYWORD),\n+        TRANSITIVE(131, \"TRANSITIVE\", \"transitive\", EnumSet.of(TokenType.MODIFIER, TokenType.CLASS_NAME), KeywordType.KEYWORD),\n+        OPEN(132, \"OPEN\", \"open\", EnumSet.of(TokenType.MODIFIER, TokenType.CLASS_NAME), KeywordType.KEYWORD),\n+\n+        \/*\n+         * Punctuation\n+         *\/\n+        AT_SIGN(133, \"AT\", \"@\", EnumSet.of(TokenType.PUNCTUATION), KeywordType.VALUE),\n+        SEMICOLON(134, \"SEMICOLON\", \";\", EnumSet.of(TokenType.PUNCTUATION), KeywordType.VALUE),\n+        COLON(135, \"COLON\", \":\", EnumSet.of(TokenType.PUNCTUATION), KeywordType.VALUE),\n+        QUESTIONMARK(136, \"QUESTIONMARK\", \"?\", EnumSet.of(TokenType.PUNCTUATION)),\n+        LBRACE(137, \"LBRACE\", \"{\", EnumSet.of(TokenType.PUNCTUATION), KeywordType.VALUE),\n+        RBRACE(138, \"RBRACE\", \"}\", EnumSet.of(TokenType.PUNCTUATION), KeywordType.VALUE),\n+        LPAREN(139, \"LPAREN\", \"(\", EnumSet.of(TokenType.PUNCTUATION)),\n+        RPAREN(140, \"RPAREN\", \")\", EnumSet.of(TokenType.PUNCTUATION)),\n+        LSQBRACKET(141, \"LSQBRACKET\", \"[\", EnumSet.of(TokenType.PUNCTUATION)),\n+        RSQBRACKET(142, \"RSQBRACKET\", \"]\", EnumSet.of(TokenType.PUNCTUATION)),\n+\n+        ESCAPED_COLON(201, \"ESCCOLON\", \"\\\\:\", EnumSet.of(TokenType.PUNCTUATION)),\n+        ESCAPED_ATSIGH(202, \"ESCATSIGH\", \"\\\\@\", EnumSet.of(TokenType.PUNCTUATION)),\n+        ESCAPED_BACKSLASH(203, \"ESCBACKSLASH\", \"\\\\\\\\\", EnumSet.of(TokenType.PUNCTUATION)),\n+        \/*\n+         * Special tokens\n+         *\/\n+        ERROR(145, \"ERROR\", \"error\", EnumSet.of(TokenType.MODIFIER, TokenType.CLASS_NAME, TokenType.MODULE_NAME)),\n+        COMMENT(146, \"COMMENT\", \"comment\", EnumSet.of(TokenType.MODIFIER, TokenType.CLASS_NAME, TokenType.MODULE_NAME)),\n+        TYPE(147, \"TYPE\", \"type\", EnumSet.of(TokenType.MODIFIER, TokenType.CLASS_NAME, TokenType.MODULE_NAME)),\n+        LENGTH(148, \"LENGTH\", \"Length\", \"length\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        INLINERETURN(149, \"INLINERETURN\", \"inline-return\", EnumSet.of(TokenType.MODIFIER)),\n+        INLINEMETHOD(150, \"INLINEMETHOD\", \"inline-method\", EnumSet.of(TokenType.MODIFIER)),\n+        INLINENEWINSTANCE(151, \"INLINENEWINSTANCE\", \"inline-new\", EnumSet.of(TokenType.MODIFIER)),\n+\n+        \/*\n+         * Added for jasm\n+         *\/\n+        METHODREF(152, \"METHODREF\", \"Method\", \"Methodref\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        FIELDREF(153, \"FIELD\", \"Field\", \"Fieldref\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        STACK(154, \"STACK\", \"stack\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        LOCAL(155, \"LOCAL\", \"locals\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        CPINDEX(156, \"CPINDEX\", \"CPINDEX\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME)),\n+        CPNAME(157, \"CPNAME\", \"CPName\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME)),\n+        SIGN(158, \"SIGN\", \"SIGN\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME)),\n+        BITS(159, \"BITS\", \"bits\", EnumSet.of(TokenType.MISC, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+\n+        INF(160, \"INF\", \"Inf\", \"Infinity\", EnumSet.of(TokenType.MISC, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        NAN(161, \"NAN\", \"NaN\", EnumSet.of(TokenType.MISC, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+\n+        INNERCLASS(162, \"INNERCLASS\", \"InnerClass\", \"InnerClasses\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        OF(163, \"OF\", \"of\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        SYNTHETIC(164, \"SYNTHETIC\", \"synthetic\", EnumSet.of(TokenType.MODIFIER, TokenType.JASM_IDENT, TokenType.CLASS_NAME), KeywordType.KEYWORD),\n+        STRICT(165, \"STRICT\", \"strict\", EnumSet.of(TokenType.MODIFIER, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        DEPRECATED(166, \"DEPRECATED\", \"deprecated\", EnumSet.of(TokenType.MODIFIER, TokenType.JASM_IDENT, TokenType.CLASS_NAME), KeywordType.KEYWORD),\n+        VERSION(167, \"VERSION\", \"version\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME), KeywordType.KEYWORD),\n+        MODULE(168, \"MODULE\", \"module\", EnumSet.of(TokenType.DECLARATION, TokenType.CLASS_NAME), KeywordType.KEYWORD),\n+        ANNOTATION(169, \"ANNOTATION\", \"@\", EnumSet.of(TokenType.MISC)),\n+        PARAM_NAME(170, \"PARAM_NAME\", \"#\", EnumSet.of(TokenType.MISC)),\n+\n+        VARARGS(171, \"VARARGS\", \"varargs\", EnumSet.of(TokenType.MODIFIER, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        BRIDGE(172, \"BRIDGE\", \"bridge\", EnumSet.of(TokenType.MODIFIER, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n@@ -374,4 +375,4 @@\n-        BOOTSTRAPMETHOD     (173, \"BOOTSTRAPMETHOD\", \"BootstrapMethod\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n-        NESTHOST            (174, \"NESTHOST\",       \"NestHost\",         EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n-        SIGNATURE           (175, \"SIGNATURE\",      \"Signature\",        EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n-        NESTMEMBERS         (176, \"NESTMEMBERS\",    \"NestMembers\",      EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        BOOTSTRAPMETHOD(173, \"BOOTSTRAPMETHOD\", \"BootstrapMethod\", \"BootstrapMethods\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        NESTHOST(174, \"NESTHOST\", \"NestHost\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        SIGNATURE(175, \"SIGNATURE\", \"Signature\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        NESTMEMBERS(176, \"NESTMEMBERS\", \"NestMembers\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n@@ -379,2 +380,2 @@\n-        RECORD              (177, \"RECORD\",    \"Record\",                EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n-        COMPONENT           (178, \"COMPONENT\", \"Component\",             EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        RECORD(177, \"RECORD\", \"Record\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        COMPONENT(178, \"COMPONENT\", \"Component\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n@@ -382,4 +383,4 @@\n-        PERMITTEDSUBCLASSES (179, \"PERMITTEDSUBCLASSES\", \"PermittedSubclasses\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n-        SOURCEFILE          (180, \"SOURCEFILE\", \"SourceFile\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n-        SOURCEDEBUGEXTENSION(181, \"SOURCEDEBUGEXTENSION\", \"SourceDebugExtension\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n-\n+        PERMITTEDSUBCLASSES(179, \"PERMITTEDSUBCLASSES\", \"PermittedSubclasses\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        SOURCEFILE(180, \"SOURCEFILE\", \"SourceFile\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        ENCLOSINGMETHOD(181, \"ENCLOSINGMETHOD\", \"EnclosingMethod\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        SOURCEDEBUGEXTENSION(182, \"SOURCEDEBUGEXTENSION\", \"SourceDebugExtension\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n@@ -387,7 +388,8 @@\n-        REQUIRES            (182, \"REQUIRES\", \"requires\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME), KeywordType.KEYWORD),\n-        EXPORTS             (183, \"EXPORTS\",  \"exports\",  EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME), KeywordType.KEYWORD),\n-        TO                  (184, \"TO\",       \"to\",       EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME), KeywordType.KEYWORD),\n-        USES                (185, \"USES\",     \"uses\",     EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME), KeywordType.KEYWORD),\n-        PROVIDES            (186, \"PROVIDES\", \"provides\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME), KeywordType.KEYWORD),\n-        WITH                (187, \"WITH\",     \"with\",     EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME), KeywordType.KEYWORD),\n-        OPENS               (188, \"OPENS\",    \"opens\",    EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME), KeywordType.KEYWORD),\n+        REQUIRES(183, \"REQUIRES\", \"requires\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME), KeywordType.KEYWORD),\n+        EXPORTS(184, \"EXPORTS\", \"exports\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME), KeywordType.KEYWORD),\n+        TO(185, \"TO\", \"to\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME), KeywordType.KEYWORD),\n+        USES(186, \"USES\", \"uses\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME), KeywordType.KEYWORD),\n+        PROVIDES(187, \"PROVIDES\", \"provides\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME), KeywordType.KEYWORD),\n+        WITH(188, \"WITH\", \"with\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME), KeywordType.KEYWORD),\n+        OPENS(189, \"OPENS\", \"opens\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME), KeywordType.KEYWORD),\n+        \/\/\n@@ -396,14 +398,36 @@\n-        ARRAY_TYPEPATH      (190, TypeAnnotationTypes.EPathKind.ARRAY.parseKey(),  TypeAnnotationTypes.EPathKind.ARRAY.parseKey(),\n-                                                                             EnumSet.of(TokenType.TYPE_PATH_KIND, TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME ), KeywordType.KEYWORD),\n-        INNER_TYPE_TYPEPATH    (191, TypeAnnotationTypes.EPathKind.INNER_TYPE.parseKey(),    TypeAnnotationTypes.EPathKind.INNER_TYPE.parseKey(),\n-                                                                             EnumSet.of(TokenType.TYPE_PATH_KIND, TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME ), KeywordType.KEYWORD),\n-        WILDCARD_TYPEPATH      (192, TypeAnnotationTypes.EPathKind.WILDCARD.parseKey(),    TypeAnnotationTypes.EPathKind.WILDCARD.parseKey(),\n-                                                                             EnumSet.of(TokenType.TYPE_PATH_KIND, TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME ), KeywordType.KEYWORD),\n-        TYPE_ARGUMENT_TYPEPATH (193, TypeAnnotationTypes.EPathKind.TYPE_ARGUMENT.parseKey(),    TypeAnnotationTypes.EPathKind.TYPE_ARGUMENT.parseKey(),\n-                                                                             EnumSet.of(TokenType.TYPE_PATH_KIND, TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME ), KeywordType.KEYWORD),\n-        \/\/ Valhalla\n-        VALUE                   (200, \"VALUE\",     \"value\",     EnumSet.of(TokenType.MODIFIER, TokenType.CLASS_NAME, TokenType.MODULE_NAME, TokenType.JASM_IDENT), KeywordType.KEYWORD),\n-        PERMITS_VALUE           (201, \"PERMITS_VALUE\", \"permits_value\", EnumSet.of(TokenType.MODIFIER, TokenType.CLASS_NAME, TokenType.MODULE_NAME ), KeywordType.KEYWORD),\n-        PRIMITIVE               (202, \"PRIMITIVE\", \"primitive\", EnumSet.of(TokenType.MODIFIER, TokenType.CLASS_NAME, TokenType.MODULE_NAME, TokenType.JASM_IDENT ), KeywordType.KEYWORD),\n-        \/\/ Valhalla  Declaration keyword(s)\n-        PRELOAD                 (203, \"PRELOAD\",    \"Preload\",  EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME ), KeywordType.KEYWORD);\n+        ARRAY_TYPEPATH(190, TypeAnnotationTypes.EPathKind.ARRAY.parseKey(), TypeAnnotationTypes.EPathKind.ARRAY.parseKey(),\n+                EnumSet.of(TokenType.TYPE_PATH_KIND, TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        INNER_TYPE_TYPEPATH(191, TypeAnnotationTypes.EPathKind.INNER_TYPE.parseKey(), TypeAnnotationTypes.EPathKind.INNER_TYPE.parseKey(),\n+                EnumSet.of(TokenType.TYPE_PATH_KIND, TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        WILDCARD_TYPEPATH(192, TypeAnnotationTypes.EPathKind.WILDCARD.parseKey(), TypeAnnotationTypes.EPathKind.WILDCARD.parseKey(),\n+                EnumSet.of(TokenType.TYPE_PATH_KIND, TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        TYPE_ARGUMENT_TYPEPATH(193, TypeAnnotationTypes.EPathKind.TYPE_ARGUMENT.parseKey(), TypeAnnotationTypes.EPathKind.TYPE_ARGUMENT.parseKey(),\n+                EnumSet.of(TokenType.TYPE_PATH_KIND, TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        \/\/ Valhalla Declaration keyword(s) attribute\n+        LOADABLEDESCRIPTORS(203, \"LOADABLEDESCRIPTORS\", \"LoadableDescriptors\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        \/\/\n+        STACKMAPTABLE_HEADER(208, \"STACKMAPTABLE\", \"StackMapTable\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        STACKMAP_HEADER(209, \"STACKMAP\", \"StackMap\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        LINETABLE_HEADER(210, \"LINETABLE\", \"LineTable\", \"LineNumberTable\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        LOCALVARIABLES_HEADER(211, \"LOCALVARIABLES\", \"LocalVariables\", \"LocalVariableTable\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        LOCALVARIABLETYPES_HEADER(212, \"LOCALVARIABLETYPES\", \"LocalVariableTypes\", \"LocalVariableTypeTable\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        \/*\n+         * Special tokens\n+         *\/\n+        LINE(214, \"LINE\", \"line\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        START(215, \"START\", \"Start\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        SLOT(216, \"SLOT\", \"Slot\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        NAME(217, \"NAME\", \"Name\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        DESCRIPTOR(218, \"DESCRIPTOR\", \"Descriptor\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        NUMBEROFENTRIES(219, \"NUMBEROFENTRIES\", \"number_of_entries\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        FRAMETYPE(220, \"FRAMETYPE\", \"frame_type\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        ENTRYTYPE(221, \"ENTRYTYPE\", \"entry_type\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        OFFSETDELTA(222, \"OFFSETDELTA\", \"offset_delta\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        BYTECODEOFFSET(223, \"BYTECODEOFFSET\", \"offset\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        STACKMAP(224, \"STACKMAP\", \"stack_map\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        LOCALSMAP(225, \"LOCALSMAP\", \"locals_map\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        UNSETFIELDS(226, \"UNSETFIELDS\", \"unset_fields\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        ARGUMENTS(227, \"ARGUMENTS\", \"Arguments\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        \/\/ new keyword(s)\n+        IDENTITY(228, \"IDENTITY\", \"identity\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        VALUE(229, \"VALUE\", \"value\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD);\n@@ -416,3 +440,3 @@\n-        final private String  alias;                        \/\/ Infinity\n-        final private EnumSet<TokenType>  tokenType;        \/\/ TokenType.MISC, TokenType.MODULE_NAME\n-        final private KeywordType key_type;                 \/\/ KeywordType.KEYWORD\n+        final private String alias;                         \/\/ Infinity\n+        final private EnumSet<TokenType> tokenTypes;        \/\/ TokenType.MISC, TokenType.MODULE_NAME\n+        final private KeywordType keywordType;              \/\/ KeywordType.KEYWORD\n@@ -420,1 +444,1 @@\n-        public static Optional<Token> get(String  parseKey, KeywordType keywordType) {\n+        public static Optional<Token> get(String parseKey, KeywordType keywordType) {\n@@ -422,2 +446,2 @@\n-                    filter(t->t.key_type == keywordType).\n-                    filter(t->t.parseKey.equals(parseKey) || ( t.alias != null && t.alias.equals(parseKey))).\n+                    filter(t -> t.keywordType == keywordType).\n+                    filter(t -> t.parseKey.equals(parseKey) || (t.alias != null && t.alias.equals(parseKey))).\n@@ -427,0 +451,10 @@\n+        public static Set<Token> getTokenByType(TokenType type) {\n+            return ALL_TOKENS.stream().filter(t -> t.tokenTypes.contains(type)).\n+                    collect(Collectors.toSet());\n+        }\n+\n+        public static Set<Token> getTokenByKeywordType(KeywordType keywordType) {\n+            return ALL_TOKENS.stream().filter(t -> t.keywordType.equals(keywordType)).\n+                    collect(Collectors.toSet());\n+        }\n+\n@@ -434,1 +468,1 @@\n-            return (tokens == null) ? false : Arrays.asList(tokens).contains(this);\n+            return tokens != null && Arrays.asList(tokens).contains(this);\n@@ -438,6 +472,2 @@\n-        Token(Integer val, String print, String parseKey, EnumSet<TokenType> tokenType) {\n-            this(val, print, parseKey, null, tokenType, KeywordType.TOKEN);\n-        }\n-\n-        Token(Integer val, String print, String parseKey, String als, EnumSet<TokenType> tokenType) {\n-            this(val, print, parseKey, als, tokenType, KeywordType.TOKEN);\n+        Token(Integer val, String print, String parseKey, EnumSet<TokenType> tokenTypes) {\n+            this(val, print, parseKey, null, tokenTypes, KeywordType.TOKEN);\n@@ -446,2 +476,2 @@\n-        Token(Integer val, String print, String parseKey, EnumSet<TokenType> tokenType, KeywordType ktype) {\n-            this(val, print, parseKey, null, tokenType, ktype);\n+        Token(Integer val, String print, String parseKey, EnumSet<TokenType> tokenTypes, KeywordType ktype) {\n+            this(val, print, parseKey, null, tokenTypes, ktype);\n@@ -450,1 +480,1 @@\n-        Token(Integer val, String print, String parseKey, String als, EnumSet<TokenType> tokenType, KeywordType ktype) {\n+        Token(Integer val, String print, String parseKey, String alias, EnumSet<TokenType> tokenTypes, KeywordType ktype) {\n@@ -454,3 +484,3 @@\n-            this.tokenType = tokenType;\n-            this.key_type = ktype;\n-            this.alias = als;\n+            this.tokenTypes = tokenTypes;\n+            this.keywordType = ktype;\n+            this.alias = alias;\n@@ -467,0 +497,8 @@\n+        public String alias() {\n+            return this.alias;\n+        }\n+\n+        public boolean hasType(TokenType type) {\n+            return tokenTypes.contains(type);\n+        }\n+\n@@ -472,1 +510,1 @@\n-            return tokenType.contains(TokenType.JASM_IDENT);\n+            return tokenTypes.contains(TokenType.JASM_IDENT);\n@@ -475,1 +513,3 @@\n-        public boolean isPossibleModuleName() {  return tokenType.contains(TokenType.MODULE_NAME); }\n+        public boolean isPossibleModuleName() {\n+            return tokenTypes.contains(TokenType.MODULE_NAME);\n+        }\n@@ -477,1 +517,3 @@\n-        public boolean isPossibleClassName() {  return tokenType.contains(TokenType.CLASS_NAME); }\n+        public boolean isPossibleClassName() {\n+            return tokenTypes.contains(TokenType.CLASS_NAME);\n+        }\n@@ -484,1 +526,3 @@\n-        public boolean possibleTypePathKind() { return tokenType.contains(TokenType.TYPE_PATH_KIND); }\n+        public boolean possibleTypePathKind() {\n+            return tokenTypes.contains(TokenType.TYPE_PATH_KIND);\n+        }\n@@ -493,1 +537,1 @@\n-        return Token.get(idValue,KeywordType.KEYWORD).orElse(Token.IDENT);\n+        return Token.get(idValue, KeywordType.KEYWORD).orElse(Token.IDENT);\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/JasmTokens.java","additions":340,"deletions":296,"binary":false,"changes":636,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,1 @@\n+import org.openjdk.asmtools.common.Compiler;\n@@ -31,1 +32,1 @@\n-public abstract class JasmTool extends Tool<JasmEnvironment> {\n+public abstract class JasmTool extends Compiler<JasmEnvironment> {\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/JasmTool.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -40,1 +40,2 @@\n-    int start_pc, line_number;\n+    int start_pc;\n+    long line_number;\n@@ -42,1 +43,1 @@\n-    public LineNumberData(int start_pc, int line_number) {\n+    public LineNumberData(int start_pc, long line_number) {\n@@ -55,1 +56,1 @@\n-        out.writeShort(line_number);\n+        out.writeShort((int)line_number);\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/LineNumberData.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.jasm;\n+\n+import org.openjdk.asmtools.common.structure.EAttribute;\n+\n+import java.util.List;\n+\n+import static org.openjdk.asmtools.jasm.ClassFileConst.ConstType.CONSTANT_UTF8;\n+\n+\/**\n+ * Valhalla:\n+ * <p>\n+ * LoadableDescriptors_attribute {\n+ * u2 attribute_name_index;\n+ * u4 attribute_length;\n+ * u2 number_of_descriptors;\n+ * u2 descriptors[number_of_descriptors];\n+ * }\n+ *\/\n+public class LoadableDescriptorsAttr extends ArrayAttr {\n+    public LoadableDescriptorsAttr(ConstantPool pool, List<ConstCell> descriptors) {\n+        super(pool, EAttribute.ATT_LoadableDescriptors, descriptors);\n+    }\n+\n+    @Override\n+    protected ConstCell<?> classifyConstCell(ConstantPool pool, ConstCell<?> cell) {\n+        return pool.findCell(CONSTANT_UTF8, cell);\n+    }\n+}\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/LoadableDescriptorsAttr.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -1,99 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.asmtools.jasm;\n-\n-import java.io.IOException;\n-\n-\/**\n- * 4.7.13. The LocalVariableTable Entry: local_variable_table[i]\n- * <p>\n- * LocalVariableTable_attribute {\n- * ...\n- * {    u2 start_pc;\n- * u2 length;\n- * u2 name_index;\n- * u2 descriptor_index;\n- * u2 index;\n- * }\n- * ...\n- * }\n- *\/\n-class LocVarData implements DataWriter {\n-\n-    private final short index;\n-    \/\/ assisting fields\n-    FieldType fieldType;\n-    private short start_pc;\n-    private short length;\n-    private ConstCell nameCell;\n-    private ConstCell descriptorCell;\n-\n-    \/**\n-     * Creates an entry of Local Variable Table\n-     *\n-     * @param index The value of the index item must be a valid index into the local variable array of the current frame.\n-     *              The given local variable is at index in the local variable array of the current frame\n-     *              var is presented in the form: var index  (#)name(_index):(#)descriptor(_index);\n-     *\/\n-    public LocVarData(short index, short curPC, ConstCell nameCell, ConstCell descriptorCell) {\n-        this.index = index;\n-        this.start_pc = curPC;\n-        this.nameCell = nameCell;\n-        this.descriptorCell = descriptorCell;\n-        this.fieldType = FieldType.getFieldType(((String) descriptorCell.ref.value).charAt(0));\n-    }\n-\n-    public FieldType getFieldType() {\n-        return this.fieldType;\n-    }\n-\n-    public int getSlotsCount() {\n-        return (getFieldType() == null) ? 0 : this.fieldType.getSlotsCount();\n-    }\n-\n-    public short getIndex() {\n-        return index;\n-    }\n-\n-    @Override\n-    public int getLength() {\n-        return 10;\n-    }\n-\n-    public void setLength(int CurrentPC) {\n-        this.length = (short) (CurrentPC - start_pc);\n-    }\n-\n-    @Override\n-    public void write(CheckedDataOutputStream out) throws IOException {\n-        out.writeShort(start_pc);\n-        out.writeShort(length);\n-        out.writeShort(nameCell.cpIndex);\n-        out.writeShort(descriptorCell.cpIndex);\n-        out.writeShort(index);\n-    }\n-\n-    public void setStartPc(short start_pc) {\n-        this.start_pc = start_pc;\n-    }\n-}\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/LocVarData.java","additions":0,"deletions":99,"binary":false,"changes":99,"status":"deleted"},{"patch":"@@ -0,0 +1,146 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.jasm;\n+\n+import org.openjdk.asmtools.common.ToolLogger;\n+import org.openjdk.asmtools.jdis.notations.Signature;\n+\n+import java.io.IOException;\n+\n+\/**\n+ Class for entries: local_variable_table[i], local_variable_type_table[i]\n+ *\n+ * 4.7.13. The LocalVariableTable Entry: local_variable_table[i]\n+ * <p>\n+ * LocalVariableTable_attribute {\n+ *     u2 attribute_name_index;\n+ *     u4 attribute_length;\n+ *     u2 local_variable_table_length;\n+ *     {   u2 start_pc;\n+ *         u2 length;\n+ *         u2 name_index;\n+ *         u2 descriptor_index;\n+ *         u2 index;\n+ *     } local_variable_table[local_variable_table_length];\n+ * }\n+ * <p>\n+ * 4.7.13. The LocalVariableTypeTable Entry: local_variable_type_table[i]\n+ * LocalVariableTypeTable_attribute {\n+ *     u2 attribute_name_index;\n+ *     u4 attribute_length;\n+ *     u2 local_variable_type_table_length;\n+ *     {   u2 start_pc;\n+ *         u2 length;\n+ *         u2 name_index;\n+ *         u2 signature_index;\n+ *         u2 index;\n+ *     } local_variable_type_table[local_variable_type_table_length];\n+ * }\n+ *\/\n+class LocalVariableData implements DataWriter {\n+    private final short index;\n+\n+    \/\/ assisting fields\n+    FieldType fieldType;\n+    Signature<ToolLogger> fieldSignature;\n+    private short start_pc;\n+    private short length;\n+    private ConstCell nameCell;\n+    private ConstCell descriptorCell;\n+\n+    \/**\n+     * Creates an entry of Local Variable Table\n+     *\n+     * @param index The value of the index item must be a valid index into the local variable array of the current frame.\n+     *              The given local variable is at index in the local variable array of the current frame\n+     *              var is presented in the form: var index  (#)name(_index):(#)descriptor(_index);\n+     *\/\n+    public LocalVariableData(short index, short curPC, ConstCell nameCell, ConstCell descriptorCell) {\n+        this.index = index;\n+        this.start_pc = curPC;\n+        this.nameCell = nameCell;\n+        this.descriptorCell = descriptorCell;\n+    }\n+\n+    public LocalVariableData(short start_pc, short length, short slot, ConstCell nameCell, ConstCell descriptorCell) {\n+        this.start_pc = start_pc;\n+        this.length = length;\n+        this.index = slot;\n+        this.nameCell = nameCell;\n+        this.descriptorCell = descriptorCell;\n+    }\n+\n+    public FieldType getFieldType() {\n+        if( this.fieldType == null ) {\n+            this.fieldType = FieldType.getFieldType(((String) descriptorCell.ref.value).charAt(0));\n+        }\n+        return this.fieldType;\n+    }\n+\n+    public LocalVariableData setFieldType(FieldType fieldType) {\n+        this.fieldType = fieldType;\n+        return this;\n+    }\n+\n+    public Signature<ToolLogger> getSignature(ToolLogger logger) {\n+        if ( this.fieldSignature == null) {\n+            this.fieldSignature = new Signature<>(logger, (String) descriptorCell.ref.value);\n+        }\n+        return this.fieldSignature;\n+    }\n+\n+    public LocalVariableData setFieldSignature(Signature<ToolLogger> fieldSignature) {\n+        this.fieldSignature = fieldSignature;\n+        return this;\n+    }\n+\n+    public int getSlotsCount() {\n+        return (getFieldType() == null) ? 0 : this.fieldType.getSlotsCount();\n+    }\n+\n+    public short getIndex() {\n+        return index;\n+    }\n+\n+    @Override\n+    public int getLength() {\n+        return 10;\n+    }\n+\n+    public void setLength(int CurrentPC) {\n+        this.length = (short) (CurrentPC - start_pc);\n+    }\n+\n+    @Override\n+    public void write(CheckedDataOutputStream out) throws IOException {\n+        out.writeShort(start_pc);\n+        out.writeShort(length);\n+        out.writeShort(nameCell.cpIndex);\n+        out.writeShort(descriptorCell.cpIndex);\n+        out.writeShort(index);\n+    }\n+\n+    public void setStartPc(short start_pc) {\n+        this.start_pc = start_pc;\n+    }\n+}\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/LocalVariableData.java","additions":146,"deletions":0,"binary":false,"changes":146,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,0 +45,2 @@\n+import static org.openjdk.asmtools.Main.*;\n+import static org.openjdk.asmtools.common.EMessageKind.ERROR;\n@@ -47,0 +49,1 @@\n+import static org.openjdk.asmtools.common.outputs.FSOutput.FSDestination.DIR;\n@@ -71,0 +74,1 @@\n+    private boolean debugAttribute = false;\n@@ -128,6 +132,0 @@\n-    \/\/ Run jasm compiler with args\n-    public synchronized boolean compile(String... argv) {\n-        parseArgs(argv);\n-        return this.compile() == OK;\n-    }\n-\n@@ -135,0 +133,1 @@\n+    @Override\n@@ -140,1 +139,1 @@\n-                environment.setInputFile(inputFileName);\n+                environment.setToolInput(inputFileName);\n@@ -143,1 +142,1 @@\n-                parser.setDebugFlags(debugScanner, debugMembers, debugCP, debugAnnot, debugInstr);\n+                parser.setDebugFlags(debugScanner, debugMembers, debugCP, debugAnnot, debugInstr, debugAttribute);\n@@ -145,2 +144,6 @@\n-                if (environment.getErrorCount() > 0) break;\n-                if (noWriteFlag) continue;\n+                if (environment.getCount(ERROR) > 0) {\n+                    break;\n+                }\n+                if (noWriteFlag) {\n+                    continue;\n+                }\n@@ -149,2 +152,3 @@\n-                    String fqn = cd.myClassName;\n-                    environment.getToolOutput().startClass(fqn, Optional.of(cd.fileExtension), environment);\n+                    String fullyQualifiedName = cd.myClassName;\n+                    ToolOutput toolOutput = environment.getToolOutput();\n+                    toolOutput.startClass(fullyQualifiedName, Optional.of(cd.fileExtension), environment);\n@@ -154,2 +158,5 @@\n-                    cd.write(environment.getToolOutput());\n-                    environment.getToolOutput().finishClass(fqn);\n+                    cd.write(toolOutput);\n+                    toolOutput.finishClass(fullyQualifiedName);\n+                }\n+                if (environment.hasMessages()) {\n+                    rc += environment.flush(true);\n@@ -157,1 +164,0 @@\n-                if (environment.hasMessages()) rc += environment.flush(true);\n@@ -177,0 +183,1 @@\n+                \"info.opt.w\",\n@@ -205,1 +212,1 @@\n-                    case org.openjdk.asmtools.Main.VERSION_SWITCH -> {\n+                    case VERSION_SWITCH -> {\n@@ -209,3 +216,6 @@\n-                    case org.openjdk.asmtools.Main.DIR_SWITCH -> setDestDir(++i, argv);\n-                    case org.openjdk.asmtools.Main.DUAL_LOG_SWITCH ->\n-                            this.environment.setOutputs(new DualOutputStreamOutput());\n+                    case WRITE_SWITCH -> {                              \/\/ -w\n+                        environment.setIgnorePackage(true);\n+                        setFSDestination(DIR, ++i, argv);\n+                    }\n+                    case DIR_SWITCH -> setFSDestination(DIR, ++i, argv);\n+                    case DUAL_LOG_SWITCH -> this.environment.setOutputs(new DualOutputStreamOutput());\n@@ -242,1 +252,1 @@\n-                                if( versionsPair.second > 0xFFFF || versionsPair.first > 0xFFFF ) {\n+                                if (versionsPair.second > 0xFFFF || versionsPair.first > 0xFFFF) {\n@@ -247,1 +257,1 @@\n-                                if( versionsPair.second > 0xFFFF || versionsPair.first > 0xFFFF ) {\n+                                if (versionsPair.second > 0xFFFF || versionsPair.first > 0xFFFF) {\n@@ -255,1 +265,1 @@\n-                                    if( versionsPair.second > 0xFFFF || versionsPair.first > 0xFFFF ) {\n+                                    if (versionsPair.second > 0xFFFF || versionsPair.first > 0xFFFF) {\n@@ -280,0 +290,1 @@\n+                    case \"-XdAttr\" -> debugAttribute = true;\n@@ -286,0 +297,1 @@\n+                        debugAttribute = true;\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/Main.java","additions":35,"deletions":23,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import org.openjdk.asmtools.common.structure.ELocation;\n@@ -32,2 +33,2 @@\n-import static org.openjdk.asmtools.common.structure.EModifier.DEPRECATED_ATTRIBUTE;\n-import static org.openjdk.asmtools.common.structure.EModifier.SYNTHETIC_ATTRIBUTE;\n+import static org.openjdk.asmtools.common.structure.EModifier.*;\n+import static org.openjdk.asmtools.jasm.JasmTokens.Token.SIGNATURE;\n@@ -49,0 +50,1 @@\n+    protected ELocation attributeLocation = ELocation.UNKNOWN;\n@@ -60,0 +62,29 @@\n+    \/**\n+     * Checks for the existence of an attribute belonging to the MemberData.\n+     *\n+     * @param attribute the attribute to check for existence\n+     * @return true if the attribute exists\n+     *\/\n+    protected <M extends MemberData<?>> boolean checkExistence(EAttribute attribute) {\n+        throw new RuntimeException(\"Not implemented yet\");\n+    }\n+\n+    \/**\n+     * Checks for the existence of an attribute belonging to the MemberData.\n+     *\n+     * @param attribute the attribute to check for existence\n+     * @param action    the action to take if the attribute exists\n+     * @param <M>       the type of the attribute owner\n+     * @return the instance of the attribute owner\n+     *\/\n+    protected <M extends MemberData<?>> M checkExistence(EAttribute attribute, Runnable action) {\n+        if (checkExistence(attribute)) {\n+            action.run();\n+        }\n+        return (M) this;\n+    }\n+\n+    protected <M extends MemberData<?>> M andThenCheck(EAttribute attribute, Runnable action) {\n+        return checkExistence(attribute, action);\n+    }\n+\n@@ -87,0 +118,12 @@\n+    public void setSignatureAttr(ConstCell value_cpx, long position) {\n+        if (signatureAttr != null) {\n+            CPXAttr cpx = (CPXAttr) signatureAttr;\n+            if (value_cpx.cpIndex != cpx.cell.cpIndex) {\n+                environment.warning(position, \"warn.redeclared.attribute\",\n+                        SIGNATURE.parseKey(), ELocation.ClassFile.toString());\n+            }\n+        }\n+        signatureAttr = new CPXAttr(pool, EAttribute.ATT_Signature, value_cpx);\n+    }\n+\n+\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/MemberData.java","additions":45,"deletions":2,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import org.openjdk.asmtools.common.structure.ELocation;\n@@ -112,1 +113,1 @@\n-            out.writeByte(paramsTotal); \/\/ number of parameters total (in byte)\n+            out.writeByte(paramsTotal); \/\/ number of parameters(in byte)\n@@ -115,2 +116,2 @@\n-                ArrayList<T> attrarray = get(i);\n-                if (attrarray != null) {\n+                ArrayList<T> list = get(i);\n+                if (list != null) {\n@@ -118,2 +119,2 @@\n-                    out.writeShort(attrarray.size());\n-                    for (T item : attrarray) {\n+                    out.writeShort(list.size());\n+                    for (T item : list) {\n@@ -143,0 +144,1 @@\n+        this.attributeLocation = ELocation.method_info;\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/MethodData.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-public class NestMembersAttr extends ClassArrayAttr {\n+public class NestMembersAttr extends ArrayAttr {\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/NestMembersAttr.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,4 @@\n+    public static int MAX_TABLESWITCH_LENGTH = 16384;            \/\/ 2^14 in bytes\n+    public static int MAX_LOOKUPSWITCH_LENGTH = 16384;           \/\/ 2^14 in bytes\n+    public static int MAX_LOOKUPSWITCH_PAIRS_COUNT = 2048;       \/\/ count\n+\n@@ -70,2 +74,0 @@\n-    \/*-------------------------------------------------------- *\/\n-\n@@ -95,1 +97,0 @@\n-    \/*-------------------------------------------------------- *\/\n@@ -307,3 +308,0 @@\n-        \/\/ Valhalla instructions:     aconst_init, withfield\n-        opc_aconst_init(203, \"aconst_init\", 3),\n-        opc_withfield(204, \"withfield\", 3),\n@@ -318,0 +316,1 @@\n+\n@@ -320,1 +319,12 @@\n-        opc_stack_frame_type(218, \"stack_frame_type\", 0),\n+        opc_unset_fields(218, \"unset_fields\", 0),\n+        \/\/ StackMap Attribute (Java 6.0) This entry point of the beginning of the record or nothing.\n+        opc_stack_map_frame(219, \"stack_map_frame\", 0),\n+\n+        \/\/ Always must be first record of any entry of the StackMapTable Attribute (Java 7.0 and above)\n+        opc_stack_map_entry(220, \"stack_map_entry\", 0),\n+        opc_stack_frame_type(221, \"stack_frame_type\", 0),\n+        opc_frame_type(222,       \"frame_type\", 0),\n+        opc_entry_type(223,       \"entry_type\", 0),\n+\n+        opc_type(224, \"type\", 0),\n+        opc_endtype(225, \"endtype\", 0),\n@@ -340,1 +350,0 @@\n-\n@@ -518,0 +527,4 @@\n+        public byte byteValue() {\n+            return (byte) (value & 0xFF);\n+        }\n+\n@@ -535,1 +548,0 @@\n-\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/OpcodeTables.java","additions":22,"deletions":10,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-public class ParserAnnotation extends ParseBase {\n+public class ParseAnnotation extends ParseBase {\n@@ -62,1 +62,1 @@\n-    protected ParserAnnotation(Parser parentParser) {\n+    protected ParseAnnotation(Parser parentParser) {\n@@ -107,1 +107,1 @@\n-    ArrayList<AnnotationData> scanAnnotations() throws SyntaxError {\n+    ArrayList<AnnotationData> parseAnnotations() throws SyntaxError {\n@@ -151,1 +151,1 @@\n-    protected void parseParamAnnots(int totalParams, MethodData curMethod) throws SyntaxError {\n+    protected void parseParamAnnotation(int totalParams, MethodData curMethod) throws SyntaxError {\n@@ -188,1 +188,1 @@\n-                ArrayList<AnnotationData> pAnnot = scanAnnotations();\n+                ArrayList<AnnotationData> pAnnot = parseAnnotations();\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/ParseAnnotation.java","additions":5,"deletions":5,"binary":false,"changes":10,"previous_filename":"src\/org\/openjdk\/asmtools\/jasm\/ParserAnnotation.java","status":"renamed"},{"patch":"@@ -0,0 +1,634 @@\n+\/*\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.jasm;\n+\n+import org.openjdk.asmtools.common.SyntaxError;\n+import org.openjdk.asmtools.common.structure.StackMap;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.openjdk.asmtools.common.structure.StackMap.EntryType.*;\n+import static org.openjdk.asmtools.jasm.JasmTokens.Token.*;\n+import static org.openjdk.asmtools.jasm.StackMapData.UNDEFINED;\n+\n+public class ParseAttribute extends ParseBase {\n+\n+    private static final String LocalVariableTable_HEADER = START.parseKey() + LENGTH.parseKey() + SLOT.parseKey() + NAME.parseKey() + DESCRIPTOR.parseKey();\n+    private static final String LocalVariableTypeTable_HEADER = START.parseKey() + LENGTH.parseKey() + SLOT.parseKey() + NAME.parseKey() + SIGNATURE.parseKey();\n+    private static final int LocalVariableTable_HEADER_LENGTH = LocalVariableTable_HEADER.length();\n+    private static final int LocalVariableTypeTable_HEADER_LENGTH = LocalVariableTypeTable_HEADER.length();\n+\n+    protected ParseAttribute(Parser parentParser) {\n+        super.init(parentParser);\n+    }\n+\n+    \/**\n+     * Parse either localVariableTable or localVariableTypeTable according to the boolean parameter isTypeTable\n+     *\n+     * @param isTypeTable defines which localVariableTypeTable or localVariableTable is parsed\n+     * @return list of local_variable_table[i] or local_variable_type_table[i] entries\n+     *\/\n+    public List<LocalVariableData> parseLocalVariableTable(boolean isTypeTable) {\n+        String attributeName = isTypeTable ? \"LocalVariableTypeTable\" : \"LocalVariableTable\";\n+        String parseKey = isTypeTable ? SIGNATURE.parseKey() : DESCRIPTOR.parseKey();\n+        String header = isTypeTable ? LocalVariableTypeTable_HEADER : LocalVariableTable_HEADER;\n+        int headerLength = isTypeTable ? LocalVariableTypeTable_HEADER_LENGTH : LocalVariableTable_HEADER_LENGTH;\n+\n+        ArrayList<LocalVariableData> list = new ArrayList<>();\n+        scanner.scan();\n+        if (scanner.token == COLON) {\n+            scanner.scan();\n+        }\n+        String buffer = \"\";\n+        short slot = -1, start_pc = -1, length = -1;\n+        ConstCell nameCell = null, descriptorCell = null;\n+\n+        while ((scanner.token != EOF) && (scanner.token != RBRACE)) {\n+            switch (scanner.token) {\n+                case START, LENGTH, SLOT, NAME, DESCRIPTOR, SIGNATURE -> {\n+                    if (buffer.length() == headerLength || buffer.contains(scanner.stringValue)) {\n+                        environment.throwErrorException(scanner.pos, \"err.header.locvars\", parseKey);\n+                    }\n+                    buffer += scanner.stringValue;\n+                    if (!header.startsWith(buffer)) {\n+                        environment.throwErrorException(scanner.pos, \"err.header.locvars\", parseKey);\n+                    }\n+                }\n+                case INTVAL -> {\n+                    if (buffer.length() != headerLength) {\n+                        environment.throwErrorException(scanner.pos, \"err.header.expected.locvars\", parseKey);\n+                    }\n+                    if (start_pc == -1) {\n+                        start_pc = (short) scanner.intValue;\n+                    } else if (length == -1) {\n+                        length = (short) scanner.intValue;\n+                    } else if (slot == -1) {\n+                        slot = (short) scanner.intValue;\n+                    } else {\n+                        if (nameCell == null) {\n+                            environment.throwErrorException(scanner.pos, \"err.expected.locvars\",\n+                                    attributeName, \"\\\"\" + NAME.parseKey() + \"\\\"\");\n+                        }\n+                        if (descriptorCell == null) {\n+                            environment.throwErrorException(scanner.pos, \"err.expected.locvars\",\n+                                    attributeName, \"\\\"\" + parseKey + \"\\\"\");\n+                        }\n+                    }\n+                }\n+                case STRINGVAL -> {\n+                    verifyPosition(buffer, headerLength, attributeName, parseKey, start_pc, length, slot);\n+                    String str = scanner.stringValue;\n+                    if (nameCell == null) {\n+                        nameCell = parser.pool.findUTF8Cell(str);\n+                    } else if (descriptorCell == null) {\n+                        descriptorCell = parser.pool.findUTF8Cell(str);\n+                        list.add(new LocalVariableData(start_pc, length, slot, nameCell, descriptorCell));\n+                        \/\/ next new line\n+                        slot = start_pc = length = -1;\n+                        nameCell = descriptorCell = null;\n+                    } else {\n+                        environment.throwErrorException(scanner.pos, \"err.header.expected.locvars\", parseKey);\n+                    }\n+                }\n+                case CPINDEX -> {\n+                    \/\/ processing class references: Name, [Descriptor|Signature]\n+                    verifyPosition(buffer, headerLength, attributeName, parseKey, start_pc, length, slot);\n+                    String str = scanner.stringValue;\n+                    if (nameCell == null) {\n+                        nameCell = parser.pool.findUTF8Cell(str);\n+                    } else if (descriptorCell == null) {\n+                        descriptorCell = parser.pool.findUTF8Cell(str);\n+                        list.add(new LocalVariableData(start_pc, length, slot, nameCell, descriptorCell));\n+                        \/\/ next new line\n+                        slot = start_pc = length = -1;\n+                        nameCell = descriptorCell = null;\n+                    } else {\n+                        environment.throwErrorException(scanner.pos, \"err.header.expected.locvars\", parseKey);\n+                    }\n+                }\n+                default -> {\n+                    if (buffer.length() != headerLength) {\n+                        environment.throwErrorException(scanner.pos, \"err.header.locvars\",\n+                                parseKey);\n+                    }\n+                    if (slot != -1 || start_pc != -1 || length != -1 || nameCell != null || descriptorCell != null) {\n+                        environment.throwErrorException(scanner.pos, \"err.expected.locvars\",\n+                                attributeName, \" either the line {start_pc length slot \\\"name\\\" \\\"descriptor\\\"} or \" +\n+                                        \"{start_pc length slot name_index descriptor_index}\");\n+                    }\n+                    return list;\n+                }\n+            }\n+            scanner.scan();\n+        }\n+        return list;\n+    }\n+\n+    private void verifyPosition(String buffer, int headerLength,\n+                                String attributeName, String parseKey,\n+                                short start_pc, short length, short slot) {\n+        if (buffer.length() != headerLength) {\n+            environment.throwErrorException(scanner.pos, \"err.header.locvars\", parseKey);\n+        }\n+        if (start_pc == -1) {\n+            environment.throwErrorException(scanner.pos, \"err.expected.locvars\", attributeName, \"\\\"start_pc\\\"\");\n+        } else if (length == -1) {\n+            environment.throwErrorException(scanner.pos, \"err.expected.locvars\", attributeName, \"\\\"length\\\"\");\n+        } else if (slot == -1) {\n+            environment.throwErrorException(scanner.pos, \"err.expected.locvars\", attributeName, \"\\\"slot\\\"\");\n+        }\n+    }\n+\n+    public List<StackMapData> parseStackMap() throws SyntaxError, IOException {\n+        if (scanner.token == COLON) {\n+            \/\/ ignore\n+            scanner.scan();\n+        }\n+        ArrayList<StackMapData> list = new ArrayList<>();\n+        int numEntries = 0;\n+        StackMap.EntryType entryType = UNKNOWN_TYPE;\n+        StackMapData stackMapData = null;\n+\n+        while ((scanner.token != EOF) && (scanner.token != RBRACE)) {\n+            switch (scanner.token) {\n+                case NUMBEROFENTRIES -> {               \/\/ number_of_entries\n+                    scanner.scan();\n+                    scanner.expect(ASSIGN);\n+                    if (scanner.token != INTVAL) {\n+                        environment.throwErrorException(scanner.pos, \"err.stackmap.expected\",\n+                                \"\\\"number of entries\\\"\");\n+                    }\n+                    numEntries = scanner.intValue;\n+                }\n+                case BYTECODEOFFSET -> {                \/\/ BCI\n+                    if (stackMapData != null) {\n+                        list.add(stackMapData);\n+                    }\n+                    scanner.scan();\n+                    scanner.expect(ASSIGN);\n+                    if (scanner.token != INTVAL) {\n+                        environment.throwErrorException(scanner.pos, \"err.stackmap.expected\",\n+                                \"The offset value\");\n+                    }\n+                    stackMapData = new StackMapData(environment, false);\n+                    stackMapData.setPC(scanner.intValue);\n+                }\n+                case LOCALSMAP -> {                     \/\/ locals_map\n+                    if (stackMapData == null) {\n+                        environment.throwErrorException(scanner.pos, \"err.stackmap.expected\",\n+                                \"\\\"%s\\\"\".formatted(BYTECODEOFFSET.parseKey()));\n+                    } else {\n+                        if (stackMapData.localsMap != null && stackMapData.localsMap.size() > 0) {\n+                            environment.warning(scanner.pos, \"warn.stackmap.redeclared\",\n+                                    \"\\\"%s\\\"\".formatted(LOCALSMAP.parseKey()));\n+                        }\n+                        scanner.scan();\n+                        scanner.expect(ASSIGN);\n+                        if (scanner.token == IDENT && scanner.stringValue.equals(LSQBRACKET.parseKey() + RSQBRACKET.parseKey())) {\n+                            \/\/ empty list\n+                            stackMapData.localsMap = new DataVector();\n+                        } else {\n+                            scanner.expectIdentContent(LSQBRACKET);\n+                            DataVector localsMap = new DataVector();\n+                            stackMapData.localsMap = localsMap;\n+                            while (scanner.token != EOF) {\n+                                if (scanner.token == SEMICOLON) {\n+                                    scanner.scan();\n+                                    scanner.expectIdentContent(RSQBRACKET);\n+                                    break;\n+                                }\n+                                \/\/ list can be empty due to some issues\n+                                if (scanner.token == IDENT && scanner.stringValue.equals(RSQBRACKET.parseKey())) {\n+                                    \/\/ LocalsMap could be empty:  environment.warning(scanner.pos, \"warm.locals_map.empty\");\n+                                    break;\n+                                }\n+                                parser.parseMapItem(localsMap);\n+                                if (scanner.token != JasmTokens.Token.COMMA) {\n+                                    if (scanner.token != SEMICOLON) {\n+                                        environment.throwErrorException(scanner.pos, \"err.token.expected\", \"\\\"\" +\n+                                                SEMICOLON.parseKey() + \"\\\"\");\n+                                    }\n+                                    continue;\n+                                }\n+                                scanner.scan();\n+                            }\n+                            continue;\n+                        }\n+                    }\n+                }\n+                case STACKMAP -> {\n+                    if (stackMapData == null) {\n+                        environment.throwErrorException(scanner.pos, \"err.stackmap.expected\",\n+                                \"\\\"%s\\\"\".formatted(BYTECODEOFFSET.parseKey()));\n+                    } else {\n+\n+                        if (stackMapData.stackMap != null && stackMapData.stackMap.size() > 0) {\n+                            environment.warning(scanner.pos, \"warn.stackmap.redeclared\",\n+                                    \"\\\"%s\\\"\".formatted(STACKMAP.parseKey()));\n+                        }\n+                        scanner.scan();\n+                        scanner.expect(ASSIGN);\n+                        if (scanner.token == IDENT && scanner.stringValue.equals(LSQBRACKET.parseKey() + RSQBRACKET.parseKey())) {\n+                            \/\/ empty list\n+                            stackMapData.stackMap = new DataVector();\n+\n+                        } else {\n+                            scanner.expectIdentContent(LSQBRACKET);\n+                            DataVector stackMap = new DataVector();\n+                            stackMapData.stackMap = stackMap;\n+                            while (scanner.token != EOF) {\n+                                if (scanner.token == SEMICOLON) {\n+                                    scanner.scan();\n+                                    scanner.expectIdentContent(RSQBRACKET);\n+                                    break;\n+                                }\n+                                \/\/ the list can be empty due to some issues\n+                                if (scanner.token == IDENT && scanner.stringValue.equals(RSQBRACKET.parseKey())) {\n+                                    \/\/ StackMap could be empty: environment.warning(scanner.pos, \"warm.stack_map.empty\");\n+                                    break;\n+                                }\n+                                parser.parseMapItem(stackMap);\n+                                if (scanner.token != JasmTokens.Token.COMMA) {\n+                                    if (scanner.token != SEMICOLON) {\n+                                        environment.throwErrorException(scanner.pos, \"err.token.expected\", \"\\\"\" +\n+                                                SEMICOLON.parseKey() + \"\\\"\");\n+                                    }\n+                                    continue;\n+                                }\n+                                scanner.scan();\n+                            }\n+                            continue;\n+                        }\n+                    }\n+                }\n+            }\n+            scanner.scan();\n+        }\n+        if (stackMapData != null) {\n+            list.add(stackMapData);\n+        }\n+        return list;\n+    }\n+\n+    public List<StackMapData> parseStackMapTable() throws SyntaxError, IOException {\n+        int wrapLevel = 0;\n+        int numEntries = 0;    \/\/ - might be used to check that the header's number matches the actual number of records.\n+        ArrayList<StackMapData> list = new ArrayList<>();\n+        int stackFrameTypeValue = UNDEFINED;\n+        StackMap.EntryType entryType = UNKNOWN_TYPE;\n+        StackMapData stackMapData = null;\n+\n+        scanner.scan();\n+        if (scanner.token == COLON) {\n+            \/\/ ignore\n+            scanner.scan();\n+        }\n+        while (scanner.token != EOF) {\n+            switch (scanner.token) {\n+                case LBRACE -> {\n+                    if (wrapLevel == 0) {\n+                        environment.throwErrorException(scanner.pos, \"err.larvar.frame.expected\");\n+                    }\n+                }\n+                case RBRACE -> {\n+                    if (wrapLevel == 0) {\n+\/\/                        if (entryType == EARLY_LARVAL) {\n+\/\/                            environment.throwErrorException(scanner.pos, \"err.base.frame.expected\");\n+\/\/                        }\n+                        return list;\n+                    }\n+                    wrapLevel--;\n+                }\n+                case NUMBEROFENTRIES -> {               \/\/ number_of_entries\n+                    scanner.scan();\n+                    scanner.expect(ASSIGN);\n+                    if (scanner.token != INTVAL) {\n+                        environment.throwErrorException(scanner.pos, \"err.stackmap.expected\",\n+                                \"\\\"number of entries\\\"\");\n+                    }\n+                    numEntries = scanner.intValue;\n+                }\n+                case FRAMETYPE, ENTRYTYPE -> {                   \/\/ frame_type, entry_type\n+                    scanner.scan();\n+                    scanner.expect(ASSIGN);\n+                    if (scanner.token == INTVAL) {\n+                        stackFrameTypeValue = scanner.intValue;\n+                        entryType = StackMap.EntryType.getByTag(stackFrameTypeValue);\n+                    }\n+                    if (entryType == UNKNOWN_TYPE) {\n+                        environment.throwErrorException(scanner.pos, \"err.stackmap.expected\",\n+                                \"An integer within the range of [0 to 255]\");\n+                    }\n+                    if (entryType == EARLY_LARVAL) {\n+                        if (wrapLevel > 2) {        \/\/ limit of enclosure\n+                            environment.throwErrorException(scanner.pos, \"err.base.frame.expected\");\n+                        }\n+                        wrapLevel++;\n+                    }\n+\n+                    if (stackMapData == null) {\n+                        stackMapData = new StackMapData(environment, parser.curCodeAttr.isTypeCheckingVerifier());\n+                    } else {\n+                        JasmTokens.Token expectedToken = stackMapData.checkIntegrity();\n+                        if (expectedToken == null) {\n+                            list.add(stackMapData);\n+                            stackMapData = new StackMapData(environment, parser.curCodeAttr.isTypeCheckingVerifier());\n+                        } else {\n+                            if (expectedToken == STACKMAP || stackMapData.getFrameType() == FULL_FRAME) {\n+                                stackMapData.stackMap = new DataVector<>();\n+                                list.add(stackMapData);\n+                                stackMapData = new StackMapData(environment, parser.curCodeAttr.isTypeCheckingVerifier());\n+                                environment.warning(scanner.pos, \"warn.stackmap.expected\",\n+                                        \"\\\"%s\\\"\".formatted(expectedToken.parseKey()));\n+\/\/                            } else if (expectedToken == UNSETFIELDS) {\n+\/\/                                \/\/ missing means empty unset_fields\n+\/\/                                stackMapData.unsetFields = new DataVector<>();\n+\/\/                                list.add(stackMapData);\n+\/\/                                stackMapData = new StackMapData(environment, parser.curCodeAttr.isTypeCheckingVerifier());\n+                        } else {\n+                                environment.throwErrorException(scanner.pos, \"err.stackmap.expected\",\n+                                        \"\\\"%s\\\"\".formatted(expectedToken.parseKey()));\n+                            }\n+                        }\n+                    }\n+                    stackMapData.setStackFrameType(stackFrameTypeValue);\n+                    if (stackMapData.checkIntegrity() == null) {\n+                        list.add(stackMapData);\n+                        stackMapData = null;\n+                    }\n+                    continue;\n+                }\n+                case OFFSETDELTA -> {                  \/\/ offset_delta\n+                    if (stackMapData == null || stackMapData.getFrameType() == SAME_FRAME) {\n+                        if (wrapLevel > 0) {\n+                            environment.throwErrorException(scanner.pos, \"err.token.expected\", RBRACE.parseKey());\n+                        } else {\n+                            environment.throwErrorException(scanner.pos, \"err.stackmap.expected\",\n+                                    \"\\\"%s\\\"\".formatted(FRAMETYPE.parseKey()));\n+                        }\n+                    } else {\n+                        JasmTokens.Token expectedToken = stackMapData.checkIntegrity();\n+                        if (expectedToken != OFFSETDELTA) {\n+                            environment.throwErrorException(scanner.pos, \"err.stackmap.expected\",\n+                                    \"\\\"%s\\\"\".formatted(expectedToken.parseKey()));\n+                        }\n+                        scanner.scan();\n+                        scanner.expect(ASSIGN);\n+                        if (scanner.token != INTVAL) {\n+                            environment.throwErrorException(scanner.pos, \"err.stackmap.expected\",\n+                                    \"The offset_delta value\");\n+                        }\n+                        stackMapData.setOffset(scanner.intValue);\n+                        if (stackMapData.checkIntegrity() == null) {\n+                            list.add(stackMapData);\n+                            stackMapData = null;\n+                        }\n+                    }\n+                }\n+                case LOCALSMAP -> {                     \/\/ locals_map\n+                    if (stackMapData == null || stackMapData.getFrameType() == SAME_FRAME) {\n+                        if (wrapLevel > 0) {\n+                            environment.throwErrorException(scanner.pos, \"err.token.expected\", RBRACE.parseKey());\n+                        } else {\n+                            environment.throwErrorException(scanner.pos, \"err.stackmap.expected\",\n+                                    \"\\\"%s\\\"\".formatted(FRAMETYPE.parseKey()));\n+                        }\n+                    } else {\n+                        JasmTokens.Token expectedToken = stackMapData.checkIntegrity();\n+                        if (expectedToken != LOCALSMAP) {\n+                            environment.throwErrorException(scanner.pos, \"err.stackmap.expected\",\n+                                    \"\\\"%s\\\"\".formatted(expectedToken.parseKey()));\n+                        }\n+                        scanner.scan();\n+                        scanner.expect(ASSIGN);\n+                        stackMapData.localsMap = new DataVector();\n+                        \/\/ The scanner identifies an empty statement ([] in locals_map    = []) as an identifier.\n+                        if (scanner.token == IDENT && scanner.stringValue.equals(LSQBRACKET.parseKey() + RSQBRACKET.parseKey())) {\n+                            scanner.scan();\n+                        } else {\n+                            scanner.expectIdentContent(LSQBRACKET);\n+                            while (scanner.token != EOF) {\n+                                if (scanner.token == SEMICOLON) {\n+                                    scanner.scan();\n+                                    scanner.expectIdentContent(RSQBRACKET);\n+                                    break;\n+                                }\n+                                \/\/ list can be empty due to some issues\n+                                if (scanner.token == IDENT && scanner.stringValue.equals(RSQBRACKET.parseKey())) {\n+                                    \/\/ LocalsMap could be empty:  environment.warning(scanner.pos, \"warm.locals_map.empty\");\n+                                    break;\n+                                }\n+                                parser.parseMapItem(stackMapData.localsMap);\n+                                if (scanner.token != JasmTokens.Token.COMMA) {\n+                                    if (scanner.token != SEMICOLON) {\n+                                        environment.throwErrorException(scanner.pos, \"err.token.expected\", \"\\\"\" +\n+                                                SEMICOLON.parseKey() + \"\\\"\");\n+                                    }\n+                                    continue;\n+                                }\n+                                scanner.scan();\n+                            }\n+                        }\n+                        if (stackMapData.checkIntegrity() == null) {\n+                            list.add(stackMapData);\n+                            stackMapData = null;\n+                        }\n+                        continue;\n+                    }\n+                }\n+                case STACKMAP -> {\n+                    if (stackMapData == null || stackMapData.getFrameType() == SAME_FRAME) {\n+                        if (wrapLevel > 0) {\n+                            environment.throwErrorException(scanner.pos, \"err.token.expected\", RBRACE.parseKey());\n+                        } else {\n+                            environment.throwErrorException(scanner.pos, \"err.stackmap.expected\",\n+                                    \"\\\"%s\\\"\".formatted(FRAMETYPE.parseKey()));\n+                        }\n+                    } else {\n+                        JasmTokens.Token expectedToken = stackMapData.checkIntegrity();\n+                        if (expectedToken != STACKMAP) {\n+                            if (expectedToken != LOCALSMAP || stackMapData.getFrameType() != FULL_FRAME) {\n+                                environment.throwErrorException(scanner.pos, \"err.stackmap.expected\",\n+                                        \"\\\"%s\\\"\".formatted(expectedToken.parseKey()));\n+                            }\n+                        }\n+                        scanner.scan();\n+                        scanner.expect(ASSIGN);\n+                        stackMapData.stackMap = new DataVector();\n+                        \/\/ The scanner identifies an empty statement ([] in stack_map    = []) as an identifier.\n+                        if (scanner.token == IDENT && scanner.stringValue.equals(LSQBRACKET.parseKey() + RSQBRACKET.parseKey())) {\n+                            scanner.scan();\n+                        } else {\n+                            scanner.expectIdentContent(LSQBRACKET);\n+                            while (scanner.token != EOF) {\n+                                if (scanner.token == SEMICOLON) {\n+                                    scanner.scan();\n+                                    scanner.expectIdentContent(RSQBRACKET);\n+                                    break;\n+                                }\n+                                \/\/ the list can be empty due to some issues\n+                                if (scanner.token == IDENT && scanner.stringValue.equals(RSQBRACKET.parseKey())) {\n+                                    \/\/ StackMap could be empty: environment.warning(scanner.pos, \"warm.stack_map.empty\");\n+                                    break;\n+                                }\n+                                parser.parseMapItem(stackMapData.stackMap);\n+                                if (scanner.token != JasmTokens.Token.COMMA) {\n+                                    if (scanner.token != SEMICOLON) {\n+                                        environment.throwErrorException(scanner.pos, \"err.token.expected\", \"\\\"\" +\n+                                                SEMICOLON.parseKey() + \"\\\"\");\n+                                    }\n+                                    continue;\n+                                }\n+                                scanner.scan();\n+                            }\n+                        }\n+                        if (stackMapData.checkIntegrity() == null) {\n+                            list.add(stackMapData);\n+                            stackMapData = null;\n+                        }\n+                        continue;\n+                    }\n+                }\n+                case UNSETFIELDS -> {\n+                    if (stackMapData == null || stackMapData.getFrameType() == SAME_FRAME) {\n+                        if (wrapLevel > 0) {\n+                            environment.throwErrorException(scanner.pos, \"err.token.expected\", RBRACE.parseKey());\n+                        } else {\n+                            environment.throwErrorException(scanner.pos, \"err.stackmap.expected\",\n+                                    \"\\\"%s\\\"\".formatted(FRAMETYPE.parseKey()));\n+                        }\n+                    } else {\n+                        JasmTokens.Token expectedToken = stackMapData.checkIntegrity();\n+                        if (expectedToken != UNSETFIELDS) {\n+                            environment.throwErrorException(scanner.pos, \"err.stackmap.expected\",\n+                                    \"\\\"%s\\\"\".formatted(expectedToken.parseKey()));\n+                        }\n+                        scanner.scan();\n+                        scanner.expect(ASSIGN);\n+                        stackMapData.unsetFields = new DataVector();\n+                        \/\/ The scanner identifies an empty statement ([ ] in unset_fields    = [ ]) as an identifier.\n+                        if (scanner.token == IDENT && scanner.stringValue.equals(LSQBRACKET.parseKey() + RSQBRACKET.parseKey())) {\n+                            scanner.scan();\n+                        } else {\n+                            scanner.expectIdentContent(LSQBRACKET);\n+                            while (scanner.token != EOF) {\n+                                if (scanner.token == SEMICOLON) {\n+                                    scanner.scan();\n+                                    scanner.expectIdentContent(RSQBRACKET);\n+                                    break;\n+                                }\n+                                \/\/ the list can be empty due to some issues\n+                                if (scanner.token == IDENT && scanner.stringValue.equals(RSQBRACKET.parseKey())) {\n+                                    \/\/ StackMap could be empty: environment.warning(scanner.pos, \"warm.stack_map.empty\");\n+                                    break;\n+                                }\n+                                parser.parseNameAndType(stackMapData.unsetFields);\n+                                if (scanner.token != JasmTokens.Token.COMMA) {\n+                                    if (scanner.token != SEMICOLON) {\n+                                        environment.throwErrorException(scanner.pos, \"err.token.expected\", SEMICOLON.parseKey());\n+                                    }\n+                                    continue;\n+                                }\n+                                scanner.scan();\n+                            }\n+                        }\n+                        if (stackMapData.checkIntegrity() == null) {\n+                            list.add(stackMapData);\n+                            stackMapData = null;\n+                        }\n+                        continue;\n+                    }\n+                }\n+\/\/                default -> {\n+\/\/                    if (wrapLevel == 0) {\n+\/\/                        environment.throwErrorException(scanner.pos, \"err.token.expected\", RBRACE.parseKey());\n+\/\/                    }\n+\/\/                }\n+            }\n+            scanner.scan();\n+        }\n+        return list;\n+    }\n+\n+    public List<LineNumberData> parseLineTable() {\n+        ArrayList<LineNumberData> list = new ArrayList<>();\n+        scanner.scan();\n+        if (scanner.token == COLON) {\n+            \/\/ ignore\n+            scanner.scan();\n+        }\n+        int start_pc = -1, line_number = -1;\n+        boolean newLine = true, colonFound = false;\n+        while ((scanner.token != EOF) && (scanner.token != RBRACE)) {\n+            switch (scanner.token) {\n+                case COLON -> {\n+                    if (newLine) {\n+                        environment.throwErrorException(scanner.pos, \"err.expected.linetable\",\n+                                \"line keyword\");\n+                    }\n+                    if (line_number == -1) {\n+                        environment.throwErrorException(scanner.pos, \"err.expected.linetable\",\n+                                \"line_number:\");\n+                    } else if (colonFound) {\n+                        if (start_pc == -1)\n+                            environment.throwErrorException(scanner.pos, \"err.expected.linetable\",\n+                                    \"start_pc\");\n+                        else\n+                            environment.throwErrorException(scanner.pos, \"err.expected.linetable\",\n+                                    \"line keyword\");\n+                    }\n+                    colonFound = true;\n+                }\n+                case LINE -> {\n+                    if (!newLine) {\n+                        environment.throwErrorException(scanner.pos, \"err.expected.linetable\",\n+                                \"line  line_number:  start_pc\");\n+                    }\n+                    newLine = false;\n+                }\n+                case INTVAL -> {\n+                    if (line_number == -1)\n+                        line_number = scanner.intValue;\n+                    else {\n+                        start_pc = scanner.intValue;\n+                        list.add(new LineNumberData(start_pc, line_number));\n+                        newLine = true;\n+                        colonFound = false;\n+                        line_number = -1;\n+                        start_pc = -1;\n+                    }\n+                }\n+                default -> {\n+                    if (line_number != -1 || start_pc != -1 || !newLine) {\n+                        environment.throwErrorException(scanner.pos, \"err.expected.linetable\", \"line  line_number:  start_pc\");\n+                    }\n+                    return list;\n+                }\n+            }\n+            scanner.scan();\n+        }\n+        return list;\n+    }\n+}\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/ParseAttribute.java","additions":634,"deletions":0,"binary":false,"changes":634,"status":"added"},{"patch":"@@ -26,0 +26,1 @@\n+import java.util.function.Supplier;\n@@ -62,1 +63,1 @@\n-        traceMethodInfoLn(null);\n+        traceMethodInfoLn(() -> null);\n@@ -66,0 +67,4 @@\n+        traceMethodInfoLn(() -> str);\n+    }\n+\n+    protected void traceMethodInfoLn(Supplier<String> supplier) {\n@@ -67,0 +72,1 @@\n+            String str = supplier.get();\n@@ -68,1 +74,2 @@\n-            String msg = String.format(\"%s::%s[%d]%s\", elem.getClassName().substring(elem.getClassName().lastIndexOf('.') + 1),\n+            String msg = String.format(\"%s::%s[%d]%s\",\n+                    elem.getClassName().substring(elem.getClassName().lastIndexOf('.') + 1),\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/ParseBase.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,716 @@\n+\/*\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.jasm;\n+\n+import org.openjdk.asmtools.common.SyntaxError;\n+\n+import java.util.ArrayList;\n+import java.util.function.BiFunction;\n+\n+import static java.lang.String.format;\n+import static org.openjdk.asmtools.jasm.ClassFileConst.*;\n+import static org.openjdk.asmtools.jasm.ClassFileConst.ConstType.*;\n+import static org.openjdk.asmtools.jasm.ConstantPool.*;\n+import static org.openjdk.asmtools.jasm.JasmTokens.Token;\n+\n+\/**\n+ * ParserCP\n+ * <p>\n+ * ParseCP is a parser class owned by Parser.java. It is primarily responsible for parsing\n+ * the constant pool and constant declarations.\n+ *\/\n+public class ParseConstPool extends ParseBase {\n+\n+    \/\/ Visitor object\n+    private final ParserCPVisitor pConstVstr;\n+    \/\/ Stop parsing a source file immediately and interpret any issue as an error\n+    private boolean exitImmediately = false;\n+    \/\/ counter of left braces\n+    private int lbrace = 0;\n+\n+    \/**\n+     * main constructor\n+     *\/\n+    protected ParseConstPool(Parser parentParser) {\n+        super.init(parentParser);\n+        pConstVstr = new ParserCPVisitor();\n+    }\n+\n+    \/**\n+     * In particular cases, it's necessary to interpret a warning issue as an error and\n+     * stop parsing a source file immediately\n+     * cpParser.setExitImmediately(true);\n+     * parseConstRef(...);\n+     * cpParser.setExitImmediately(false);\n+     *\/\n+    public void setExitImmediately(boolean exitImmediately) {\n+        this.exitImmediately = exitImmediately;\n+    }\n+\n+    \/**\n+     * Parse CONSTVALUE\n+     *\/\n+    protected ConstValue<?> parseConstValue(ConstType tag) throws SyntaxError {\n+        return pConstVstr.visitExcept(tag);\n+    }\n+\n+    private ConstType scanConstByID(boolean ignoreKeywords, boolean isBSMArgTag) throws SyntaxError {\n+        ConstType tag = null;\n+        if (!ignoreKeywords) {\n+            tag = (isBSMArgTag) ? ClassFileConst.getBSMArgumentTypeByParseKey(scanner.idValue) :\n+                    ClassFileConst.getByParseKey(scanner.idValue);\n+        }\n+        traceMethodInfoLn(format(\"\\t\\tTag: %s \", tag == null ? \"<not found>\" : tag));\n+        return tag;\n+    }\n+\n+    private ConstType scanConstPrimVal() throws SyntaxError {\n+        ConstType tag;\n+        switch (scanner.token) {\n+            case BYTE -> tag = CONSTANT_BYTE;\n+            case BYTEVAL -> tag = CONSTANT_C_BYTE;\n+            case CHAR -> tag = CONSTANT_CHAR;\n+            case CHARVAL -> tag = CONSTANT_C_CHAR;\n+            case DOUBLE -> tag = CONSTANT_DOUBLE;\n+            case DOUBLEVAL -> tag = CONSTANT_C_DOUBLE;\n+            case FLOAT -> tag = ConstType.CONSTANT_FLOAT;\n+            case FLOATVAL -> tag = ConstType.CONSTANT_C_FLOAT;\n+            case LONG -> tag = ConstType.CONSTANT_LONG;\n+            case LONGVAL -> tag = ConstType.CONSTANT_C_LONG;\n+            case INT -> tag = CONSTANT_INT;\n+            case INTVAL -> tag = CONSTANT_INTEGER;\n+            case SHORT -> tag = CONSTANT_SHORT;\n+            case SHORTVAL -> tag = CONSTANT_C_SHORT;\n+            case BOOLEAN -> tag = CONSTANT_BOOLEAN;\n+            case BOOLEANVAL -> tag = CONSTANT_C_BOOLEAN;\n+            case STRINGVAL, BITS, IDENT -> tag = ConstType.CONSTANT_STRING;\n+            default -> {\n+                \/\/ problem - no constant value\n+                environment.error(scanner.pos, \"err.value.expected\", scanner.token.printValue());\n+                throw new SyntaxError();\n+            }\n+        }\n+        return tag;\n+    }\n+\n+    private void checkWrongTag(ConstType tag, ConstType defaultTag, ConstType default2Tag) throws SyntaxError {\n+        if (defaultTag != null) {\n+            if (!tag.equals(defaultTag)) {\n+                if (default2Tag == null) {\n+                    if (exitImmediately) {\n+                        environment.error(scanner.pos, \"err.wrong.tag\", defaultTag.parseKey());\n+                        throw new SyntaxError().setFatal();\n+                    }\n+                    environment.warning(scanner.pos, \"warn.wrong.tag\", defaultTag.parseKey());\n+                } else if (!tag.equals(default2Tag)) {\n+                    if (exitImmediately) {\n+                        environment.error(scanner.pos, \"err.wrong.tag2\", defaultTag.parseKey(), default2Tag.parseKey());\n+                        throw new SyntaxError().setFatal();\n+                    }\n+                    environment.warning(scanner.pos, \"warn.wrong.tag2\", defaultTag.parseKey(), default2Tag.parseKey());\n+                }\n+            }\n+        }\n+    }\n+\n+    protected ConstValue<?> parseTagConstValue(ConstType defaultTag, ConstType default2Tag,\n+                                               boolean ignoreKeywords, boolean isBSMArgTag) throws SyntaxError {\n+        traceMethodInfoLn(() -> \"\\t<< DefaultTag: %s 2nd DefaultTag: %s IgnoreKeyword?: %b\".\n+                formatted(defaultTag == null ? \"<none>\" : defaultTag,\n+                        default2Tag == null ? \"<none>\" : default2Tag, ignoreKeywords));\n+        \/\/ Lookup the Tag from the scanner\n+        ConstType tag = scanConstByID(ignoreKeywords, isBSMArgTag);\n+        traceMethodInfoLn(\"\\tResult Tag: %s >>\".formatted(tag));\n+        \/\/ If the scanned tag is null\n+        if (tag == null) {\n+            \/\/ and, if the expected tag is null\n+            if (defaultTag == null) {\n+                \/\/ return some other type of constant as the tag\n+                tag = scanConstPrimVal();\n+            } else {\n+                \/\/ otherwise, make the scanned-tag the same constant-type\n+                \/\/ as the expected tag.\n+                tag = defaultTag;\n+            }\n+        } else {\n+            \/\/ If the scanned tag is some constant type\n+            \/\/ and the scanned type does not equal the expected type\n+            checkWrongTag(tag, defaultTag, default2Tag);\n+            scanner.scan();\n+        }\n+        return parseConstValue(tag);\n+    } \/\/ end parseTagConstValue\n+\n+    protected ConstCell<?> parseConstRef(ConstType defaultTag) throws SyntaxError {\n+        return parseConstRef(defaultTag, null, false);\n+    }\n+\n+    \/**\n+     * Parses a pair [TAG CONSTVALUE] from a constant pool entry [const #DD = TAG CONSTVALUE].\n+     *\n+     * @return a ConstantCell holding the ConstValue\n+     * @throws SyntaxError if a syntax error occurs\n+     *\/\n+    protected ConstCell<?> parseConstPoolRef() throws SyntaxError {\n+        ConstType tag = scanConstByID(false, true);\n+        \/\/ check a tag:\n+        ConstValue<?> ref;\n+        if (tag == null || tag.getTag() < 1) {\n+            \/\/ if element is given without tag,\n+            \/\/ i.e. instead of const #dd = long 1l; is written const #dd = 1l;\n+            ref = switch (scanner.token) {\n+                case IDENT -> {\n+                    String value = scanner.stringValue;\n+                    if( value.equalsIgnoreCase(\"true\") ) {\n+                        yield new ConstValue_Integer(CONSTANT_BOOLEAN, 1);\n+                    } else if (value.equalsIgnoreCase(\"false\") ) {\n+                        yield new ConstValue_Integer(CONSTANT_BOOLEAN, 0);\n+                    }\n+                    environment.error(scanner.pos, \"err.constant.kind.expected\");\n+                    throw new SyntaxError().setFatal();\n+                }\n+                case STRINGVAL -> new ConstValue_UTF8(scanner.stringValue);\n+                case INTVAL -> new ConstValue_Integer(CONSTANT_INT, scanner.intValue);\n+                case BYTEVAL -> new ConstValue_Integer(CONSTANT_BYTE, scanner.intValue);\n+                case SHORTVAL -> new ConstValue_Integer(CONSTANT_SHORT, scanner.intValue);\n+                case CHARVAL -> new ConstValue_Integer(CONSTANT_CHAR, scanner.intValue);\n+                case BOOLEANVAL -> new ConstValue_Integer(CONSTANT_BOOLEAN, scanner.intValue);\n+                case FLOATVAL -> new ConstValue_Float(Float.floatToIntBits(scanner.floatValue));\n+                case DOUBLEVAL -> new ConstValue_Double(Double.doubleToLongBits(scanner.doubleValue));\n+                case LONGVAL -> new ConstValue_Long(scanner.longValue);\n+                default -> {\n+                    environment.error(scanner.pos, \"err.constant.kind.expected\");\n+                    throw new SyntaxError().setFatal();\n+                }\n+            };\n+            scanner.scan();\n+            return parser.pool.findCell(ref);\n+        }\n+        scanner.scan();\n+        ref = parseConstValue(tag);\n+        return parser.pool.findCell(ref);\n+    }\n+\n+    protected ConstCell<?> parseConstRef(ConstType defaultTag, ConstType default2Tag) throws SyntaxError {\n+        return parseConstRef(defaultTag, default2Tag, false);\n+    }\n+\n+    \/**\n+     * Parse an instruction argument, one of: * #NUMBER, #NAME, [TAG] CONSTVALUE\n+     *\/\n+    protected ConstCell<?> parseConstRef(ConstType defaultTag,\n+                                         ConstType default2Tag,\n+                                         boolean ignoreKeywords) throws SyntaxError {\n+        if (scanner.token == Token.CPINDEX) {\n+            int cpx = scanner.intValue;\n+            scanner.scan();\n+            return parser.pool.getCell(cpx);\n+        } else {\n+            ConstValue<?> ref = parseTagConstValue(defaultTag, default2Tag, ignoreKeywords, false);\n+            return parser.pool.findCell(ref);\n+        }\n+    } \/\/ end parseConstRef\n+\n+    protected ConstCell<?> parseBSMArgumentConstRef() throws SyntaxError {\n+        if (scanner.token == Token.CPINDEX) {\n+            int cpx = scanner.intValue;\n+            scanner.scan();\n+            return parser.pool.getCell(cpx);\n+        } else {\n+            ConstValue<?> ref = parseTagConstValue(null, null, false, true);\n+            return parser.pool.findCell(ref);\n+        }\n+    } \/\/ end parseConstRef\n+\n+    \/**\n+     * ParserCPVisitor\n+     * <p>\n+     * This inner class overrides a constant pool visitor to provide specific parsing\n+     * instructions (per method) for each type of Constant.\n+     * <p>\n+     * Note: since the generic visitor throws no exceptions, this derived class tunnels\n+     * the exceptions, rethrown in the visitExcept method.\n+     *\/\n+    class ParserCPVisitor extends CPTagVisitor<ConstValue<?>> {\n+\n+        private SyntaxError syntaxError;\n+\n+        \/\/This is the entry point for a visitor that tunnels exceptions\n+        public ConstValue<?> visitExcept(ConstType tag) throws SyntaxError {\n+            syntaxError = null;\n+            traceMethodInfoLn();\n+            ConstValue<?> ret = visit(tag);\n+            if (syntaxError != null) {\n+                throw syntaxError;\n+            }\n+            return ret;\n+        }\n+\n+        @Override\n+        public ConstValue<?> visitUTF8() {\n+            traceMethodInfoLn();\n+            try {\n+                scanner.expect(Token.STRINGVAL);\n+            } catch (SyntaxError se) {\n+                syntaxError = se;\n+            }\n+            return new ConstValue_UTF8(scanner.stringValue);\n+        }\n+\n+        @Override\n+        public ConstValue<?> visitInteger(ClassFileConst.ConstType tag) {\n+            traceMethodInfoLn();\n+            int v = 0;\n+            try {\n+                if (scanner.token == Token.BITS) {\n+                    scanner.scan();\n+                    scanner.inBits = true;\n+                }\n+                v = scanner.intValue * scanner.sign;\n+                scanner.expect(Token.INTVAL);\n+            } catch (SyntaxError se) {\n+                syntaxError = se;\n+            }\n+            return new ConstValue_Integer(tag, v);\n+        }\n+\n+        @Override\n+        public ConstValue<?> visitLong() {\n+            traceMethodInfoLn();\n+            ConstValue_Long valueLong = null;\n+            try {\n+                long v;\n+                if (scanner.token == Token.BITS) {\n+                    scanner.scan();\n+                    scanner.inBits = true;\n+                }\n+                switch (scanner.token) {\n+                    case INTVAL -> v = scanner.intValue;\n+                    case LONGVAL -> v = scanner.longValue;\n+                    default -> {\n+                        environment.error(scanner.prevPos, \"err.token.expected\", \"Integer\");\n+                        throw new SyntaxError();\n+                    }\n+                }\n+                valueLong = new ConstValue_Long(v * scanner.sign);\n+                scanner.scan();\n+            } catch (SyntaxError se) {\n+                syntaxError = se;\n+            }\n+            return valueLong;\n+        }\n+\n+        @Override\n+        public ConstValue<?> visitFloat() {\n+            traceMethodInfoLn();\n+            ConstValue_Float valueFloat = null;\n+            try {\n+                int v;\n+                float f;\n+                scanner.inBits = false;  \/\/ this needs to be initialized for each float!\n+                if (scanner.token == Token.BITS) {\n+                    scanner.scan();\n+                    scanner.inBits = true;\n+                }\n+                i2f:\n+                {\n+                    switch (scanner.token) {\n+                        case INTVAL -> {\n+                            if (scanner.inBits) {\n+                                v = scanner.intValue;\n+                                break i2f;\n+                            } else {\n+                                f = (float) scanner.intValue;\n+                            }\n+                        }\n+                        case FLOATVAL -> f = scanner.floatValue;\n+                        case DOUBLEVAL -> f = (float) scanner.doubleValue; \/\/ to be excluded?\n+                        case INF -> f = Float.POSITIVE_INFINITY;\n+                        case NAN -> f = Float.NaN;\n+                        default -> {\n+                            environment.traceln(() -> \"token=\" + scanner.token);\n+                            environment.error(scanner.pos, \"err.token.expected\", \"<Float>\");\n+                            throw new SyntaxError();\n+                        }\n+                    }\n+                    v = Float.floatToIntBits(f);\n+                }\n+                if (scanner.sign == -1) {\n+                    v = v ^ 0x80000000;\n+                }\n+                valueFloat = new ConstValue_Float(v);\n+                scanner.scan();\n+            } catch (SyntaxError se) {\n+                syntaxError = se;\n+            }\n+            return valueFloat;\n+        }\n+\n+        @Override\n+        public ConstValue<?> visitDouble() {\n+            traceMethodInfoLn();\n+            ConstValue_Double valueDouble = null;\n+            try {\n+                long v;\n+                double d;\n+                if (scanner.token == Token.BITS) {\n+                    scanner.scan();\n+                    scanner.inBits = true;\n+                }\n+                d2l:\n+                {\n+                    switch (scanner.token) {\n+                        case INTVAL -> {\n+                            if (scanner.inBits) {\n+                                v = scanner.intValue;\n+                                break d2l;\n+                            } else {\n+                                d = scanner.intValue;\n+                            }\n+                        }\n+                        case LONGVAL -> {\n+                            if (scanner.inBits) {\n+                                v = scanner.longValue;\n+                                break d2l;\n+                            } else {\n+                                d = (double) scanner.longValue;\n+                            }\n+                        }\n+                        case FLOATVAL -> d = scanner.floatValue;\n+                        case DOUBLEVAL -> d = scanner.doubleValue;\n+                        case INF -> d = Double.POSITIVE_INFINITY;\n+                        case NAN -> d = Double.NaN;\n+                        default -> {\n+                            environment.error(scanner.pos, \"err.token.expected\", \"Double\");\n+                            throw new SyntaxError();\n+                        }\n+                    }\n+                    v = Double.doubleToLongBits(d);\n+                }\n+                if (scanner.sign == -1) {\n+                    v = v ^ 0x8000000000000000L;\n+                }\n+                valueDouble = new ConstValue_Double(v);\n+                scanner.scan();\n+            } catch (SyntaxError se) {\n+                syntaxError = se;\n+            }\n+            return valueDouble;\n+        }\n+\n+        public ConstCell<?> visitName() {\n+            traceMethodInfoLn();\n+            ConstCell<?> obj = null;\n+            try {\n+                \/\/ Parse an external name: CPINDEX, string, or identifier.\n+                obj = parser.parseName();\n+            } catch (SyntaxError se) {\n+                syntaxError = se;\n+            }\n+            return obj;\n+        }\n+\n+        @Override\n+        public ConstValue<?> visitMethodType() {\n+            traceMethodInfoLn();\n+            ConstValue_MethodType obj = null;\n+            ConstCell<ConstValue_UTF8> cell = (ConstCell<ConstValue_UTF8>) visitName();\n+            if (syntaxError == null) {\n+                obj = new ConstValue_MethodType(cell);\n+            }\n+            return obj;\n+        }\n+\n+        @Override\n+        public ConstValue<?> visitString() {\n+            traceMethodInfoLn();\n+            ConstValue_String obj = null;\n+            ConstCell cell = visitName();\n+            if (syntaxError == null) {\n+                obj = new ConstValue_String(cell);\n+            }\n+            return obj;\n+        }\n+\n+        @Override\n+        public ConstValue<?> visitClass() {\n+            traceMethodInfoLn();\n+            ConstValue_Class obj = null;\n+            try {\n+                ConstCell cell = parser.parseConstantClassInfo(true);\n+                obj = new ConstValue_Class(cell);\n+            } catch (SyntaxError se) {\n+                syntaxError = se;\n+            }\n+            return obj;\n+        }\n+\n+        @Override\n+        public ConstValue<?> visitPackage() {\n+            traceMethodInfoLn();\n+            ConstValue_Package obj = null;\n+            try {\n+                ConstCell cell = parser.parseConstantPackageInfo();\n+                obj = new ConstValue_Package(cell);\n+            } catch (SyntaxError se) {\n+                syntaxError = se;\n+            }\n+            return obj;\n+        }\n+\n+        @Override\n+        public ConstValue<?> visitModule() {\n+            traceMethodInfoLn();\n+            ConstValue_Module obj = null;\n+            try {\n+                ConstCell cell = parser.parseConstantModuleInfo();\n+                obj = new ConstValue_Module(cell);\n+            } catch (SyntaxError se) {\n+                syntaxError = se;\n+            }\n+            return obj;\n+        }\n+\n+\n+        @Override\n+        public ConstValue<?> visitMethodHandle() {\n+            traceMethodInfoLn();\n+            ConstValue_MethodHandle obj = null;\n+            try {\n+                ConstCell refCell;\n+                SubTag subTag;\n+                \/\/ MethodHandle    [INVOKESUBTAG|INVOKESUBTAG_INDEX] :    CONSTANT_FIELD | [FIELDREF|METHODREF|INTERFACEMETHODREF]\n+                if (scanner.token == Token.INTVAL) {\n+                    \/\/ INVOKESUBTAG_INDEX\n+                    \/\/ Handle an explicit constant pool form\n+                    subTag = subTag(scanner.intValue);\n+                    scanner.scan();\n+                    scanner.expect(Token.COLON);\n+                    if (scanner.token == Token.CPINDEX) {\n+                        \/\/ CONSTANT_FIELD\n+                        int cpx = scanner.intValue;\n+                        refCell = parser.pool.getCell(cpx);\n+                        scanner.scan();\n+                    } else {\n+                        \/\/ [FIELDREF|METHODREF|INTERFACEMETHODREF]\n+                        refCell = parser.parseMethodHandle(subTag);\n+                    }\n+                } else {\n+                    \/\/ INVOKESUBTAG : REF_INVOKEINTERFACE, REF_NEWINVOKESPECIAL, ...\n+                    \/\/ normal JASM\n+                    subTag = parser.parseSubtag();\n+                    scanner.expect(Token.COLON);\n+                    if (scanner.token == Token.CPINDEX) {\n+                        \/\/ CODETOOLS-7901522: Jasm doesn't allow creating REF_invoke* referring an InterfaceMethod\n+                        \/\/ Parsing the case when refCell is CP index (#1)\n+                        \/\/ const #1 = InterfaceMethod m:\"()V\";\n+                        \/\/ const #2 = MethodHandle REF_invokeSpecial:#1;\n+                        int cpx = scanner.intValue;\n+                        refCell = parser.pool.getCell(cpx);\n+                        scanner.scan();\n+                    } else {\n+                        refCell = parser.parseMethodHandle(subTag);\n+                    }\n+                }\n+                obj = new ConstValue_MethodHandle(subTag, refCell);\n+            } catch (SyntaxError se) {\n+                syntaxError = se;\n+            }\n+            return obj;\n+        }\n+\n+        public <T extends ConstValue_Pair<ConstValue_Class, ConstValue_NameAndType>> T visitMember(ConstType tag) {\n+            traceMethodInfoLn();\n+            T constValue = null;\n+            try {\n+                Token prevToken = scanner.token;\n+                ConstCell firstName;\n+                ConstCell<ConstValue_Class> ClassCell;\n+                ConstCell<ConstValue_NameAndType> NameCell, NapeCell;\n+                firstName = parser.parseConstantClassInfo(false);\n+                if (scanner.token == Token.FIELD) { \/\/ DOT\n+                    scanner.scan();\n+                    if (prevToken == Token.CPINDEX) {\n+                        ClassCell = firstName;\n+                    } else {\n+                        ClassCell = parser.pool.findCell(ConstType.CONSTANT_CLASS, firstName);\n+                    }\n+                    NameCell = parser.parseName();\n+                } else {\n+                    \/\/ no class provided - assume current class\n+                    if (parser.classData.coreClasses.this_class().isSet() ||\n+                            parser.classData.coreClasses.this_class().ref == null) {\n+                        ClassCell = (ConstCell<ConstValue_Class>) parser.classData.coreClasses.this_class();\n+                    } else {\n+                        ClassCell = parser.pool.findCell((ConstValue_Class) parser.classData.coreClasses.this_class().ref);\n+                    }\n+                    NameCell = firstName;\n+                }\n+                if (scanner.token == Token.COLON) {\n+                    \/\/ name and type separately\n+                    scanner.scan();\n+                    NapeCell = parser.pool.findCell(ConstType.CONSTANT_NAMEANDTYPE, NameCell, parser.parseName());\n+                } else {\n+                    \/\/ name and type as single name\n+                    NapeCell = NameCell;\n+                }\n+                switch (tag) {\n+                    case CONSTANT_INTERFACEMETHODREF ->\n+                            constValue = (T) new ConstValue_InterfaceMethodRef(ClassCell, NapeCell);\n+                    case CONSTANT_METHODREF -> constValue = (T) new ConstValue_MethodRef(ClassCell, NapeCell);\n+                    case CONSTANT_FIELDREF -> constValue = (T) new ConstValue_FieldRef(ClassCell, NapeCell);\n+                }\n+                if (constValue == null) {\n+                    environment.error(\"err.invalid.type\", tag.printVal());\n+                    throw new SyntaxError().setFatal();\n+                }\n+            } catch (SyntaxError se) {\n+                syntaxError = se;\n+            }\n+\n+            return constValue;\n+        }\n+\n+        @Override\n+        public ConstValue<?> visitField() {\n+            traceMethodInfoLn();\n+            return visitMember(ConstType.CONSTANT_FIELDREF);\n+        }\n+\n+        @Override\n+        public ConstValue<?> visitMethod() {\n+            traceMethodInfoLn();\n+            return visitMember(ConstType.CONSTANT_METHODREF);\n+        }\n+\n+        @Override\n+        public ConstValue<?> visitInterfaceMethod() {\n+            traceMethodInfoLn();\n+            return visitMember(ConstType.CONSTANT_INTERFACEMETHODREF);\n+        }\n+\n+        @Override\n+        public ConstValue<?> visitNameAndType() {\n+            traceMethodInfoLn();\n+            ConstValue_NameAndType obj = null;\n+            try {\n+                ConstCell<?> NameCell = parser.parseName(), TypeCell;\n+                scanner.expect(Token.COLON);\n+                TypeCell = parser.parseName();\n+                obj = new ConstValue_NameAndType((ConstCell<ConstValue_UTF8>) NameCell, (ConstCell<ConstValue_UTF8>) TypeCell);\n+            } catch (SyntaxError se) {\n+                syntaxError = se;\n+            }\n+            return obj;\n+        }\n+\n+        @Override\n+        public ConstValue_InvokeDynamic visitInvokeDynamic() {\n+            traceMethodInfoLn();\n+            final BiFunction<BootstrapMethodData, ConstCell<?>, ConstValue_InvokeDynamic> ctor =\n+                    ConstValue_InvokeDynamic::new;\n+            return visitBsm(ctor);\n+        }\n+\n+        @Override\n+        public ConstValue_Dynamic visitDynamic() {\n+            traceMethodInfoLn();\n+            final BiFunction<BootstrapMethodData, ConstCell<?>, ConstValue_Dynamic> ctor =\n+                    ConstValue_Dynamic::new;\n+            return visitBsm(ctor);\n+        }\n+\n+        private <E extends ConstValue_BootstrapMethod> E visitBsm(BiFunction<BootstrapMethodData, ConstCell<?>, E> ctor) {\n+            E obj = null;\n+            try {\n+                if (scanner.token == Token.INTVAL) {\n+                    \/\/ Handle an explicit constant pool form\n+                    int bsmIndex = scanner.intValue;\n+                    scanner.scan();\n+\n+                    scanner.expect(Token.COLON);\n+\n+                    if (scanner.token != Token.CPINDEX) {\n+                        environment.traceln(() -> \"token=\" + scanner.token);\n+                        environment.error(scanner.pos, \"err.token.expected\", \"<CPINDEX>\");\n+                        throw new SyntaxError();\n+                    }\n+                    int cpx = scanner.intValue;\n+                    scanner.scan();\n+                    \/\/ Put a placeholder in place of BSM.\n+                    \/\/ resolve placeholder after the attributes are scanned.\n+                    BootstrapMethodData bsmData = new BootstrapMethodData(bsmIndex);\n+                    obj = ctor.apply(bsmData, parser.pool.getCell(cpx));\n+                } else {\n+                    \/\/ Handle full form\n+                    ConstCell<?> MHCell = parser.pool.findCell(parseConstValue(ConstType.CONSTANT_METHODHANDLE));\n+                    scanner.expect(Token.COLON);\n+                    ConstCell<?> NapeCell = parser.pool.findCell(parseConstValue(ConstType.CONSTANT_NAMEANDTYPE));\n+                    if (scanner.token == Token.LBRACE) {\n+                        incLBRACE();\n+                        scanner.scan();\n+                    }\n+                    ArrayList<ConstCell<?>> bsm_args = new ArrayList<>(256);\n+                    while (true) {\n+                        if (ParseConstPool.this.lbrace > 0) {\n+                            if (scanner.token == Token.RBRACE) {\n+                                decLBRACE();\n+                                scanner.scan();\n+                                break;\n+                            } else if (scanner.token == Token.SEMICOLON) {\n+                                scanner.expect(Token.RBRACE);\n+                            }\n+                        } else if (scanner.token == Token.SEMICOLON) {\n+                            break;\n+                        }\n+                        if (scanner.token == Token.COMMA) {\n+                            scanner.scan();\n+                        }\n+                        ConstCell<?> cell = parseBSMArgumentConstRef();\n+                        bsm_args.add(cell);\n+                    }\n+                    if (ParseConstPool.this.lbrace == 0) {\n+                        scanner.check(Token.SEMICOLON);\n+                    }\n+                    BootstrapMethodData bsmData = new BootstrapMethodData(MHCell, bsm_args);\n+                    parser.classData.addBootstrapMethod(bsmData);\n+                    obj = ctor.apply(bsmData, NapeCell);\n+                }\n+            } catch (SyntaxError se) {\n+                syntaxError = se;\n+            }\n+            return obj;\n+        }\n+    } \/\/ End Visitor\n+\n+    public ParseConstPool decLBRACE() {\n+        ParseConstPool.this.lbrace--;\n+        return this;\n+    }\n+\n+\n+    public ParseConstPool incLBRACE() {\n+        ParseConstPool.this.lbrace++;\n+        return this;\n+    }\n+}\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/ParseConstPool.java","additions":716,"deletions":0,"binary":false,"changes":716,"status":"added"},{"patch":"@@ -0,0 +1,477 @@\n+\/*\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.jasm;\n+\n+import org.openjdk.asmtools.common.SyntaxError;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Modifier;\n+import java.util.List;\n+\n+import static org.openjdk.asmtools.common.structure.StackMap.EntryType.EARLY_LARVAL;\n+import static org.openjdk.asmtools.jasm.ClassFileConst.ConstType;\n+import static org.openjdk.asmtools.jasm.JasmTokens.Token;\n+import static org.openjdk.asmtools.jasm.JasmTokens.Token.ENTRYTYPE;\n+import static org.openjdk.asmtools.jasm.JasmTokens.Token.FRAMETYPE;\n+import static org.openjdk.asmtools.jasm.OpcodeTables.*;\n+import static org.openjdk.asmtools.jasm.OpcodeTables.Opcode.*;\n+\n+\/**\n+ * Instruction Parser\n+ * <p>\n+ * ParserInstr is a parser class owned by Parser.java. It is primarily responsible for\n+ * parsing instruction byte codes.\n+ *\/\n+public class ParseInstruction extends ParseBase {\n+\n+    \/**\n+     * local handle for the constant parser - needed for parsing constants during\n+     * instruction construction.\n+     *\/\n+    private final ParseConstPool instructionParser;\n+\n+    \/**\n+     * Constructor\n+     *\n+     * @param parser   parent, main parser\n+     * @param cpParser constant pool parser\n+     *\/\n+    protected ParseInstruction(Parser parser, ParseConstPool cpParser) throws IOException {\n+        super.init(parser);\n+        this.instructionParser = cpParser;\n+    }\n+\n+    private boolean isInstruction(Token token) {\n+        return (token == Token.IDENT || token.in(Token.LOCALSMAP, Token.STACKMAP, Token.UNSETFIELDS));\n+    }\n+\n+    \/**\n+     * Parse an instruction.\n+     *\/\n+    protected void parseInstr() throws SyntaxError, IOException {\n+        \/\/ ignore possible line numbers after java disassembler\n+        if (scanner.token == Token.INTVAL) {\n+            scanner.scan();\n+        }\n+        \/\/ ignore possible numeric labels after java disassembler\n+        if (scanner.token == Token.INTVAL) {\n+            scanner.scan();\n+        }\n+        if (scanner.token == Token.COLON) {\n+            scanner.scan();\n+        }\n+\n+        String mnemocode;\n+        long mnenoc_pos;\n+        for (; ; ) { \/\/ read labels\n+            if (!isInstruction(scanner.token)) {\n+                return;\n+            }\n+\n+            mnemocode = scanner.idValue;\n+            mnenoc_pos = scanner.pos;\n+            scanner.scan();\n+            if (scanner.token != Token.COLON) {\n+                break;\n+            }\n+            \/\/ actually it was a label\n+            scanner.scan();\n+            parser.curCodeAttr.LabelDef(mnenoc_pos, mnemocode);\n+        }\n+\n+        Opcode opcode = OpcodeTables.opcode(mnemocode);\n+        if (opcode == null) {\n+            environment.error(mnenoc_pos, \"err.wrong.mnemocode\", mnemocode);\n+            throw new SyntaxError();\n+        }\n+        OpcodeType opcodeType = opcode.type();\n+\n+        Indexer arg = null;\n+        Object arg2 = null;\n+        StackMapData stackMapData;\n+        scanner.debugScan(mnenoc_pos, \"parseInstr: MnemoCode \\'%s\\'\".formatted(opcode.parseKey()));\n+        switch (opcodeType) {\n+            case NORMAL:\n+                switch (opcode) {\n+\n+                    \/\/ pseudo-instructions:\n+                    case opc_bytecode:\n+                        for (; ; ) {\n+                            parser.curCodeAttr.addInstr(mnenoc_pos, Opcode.opc_bytecode, parser.parseUInt(1), null);\n+                            if (scanner.token != Token.COMMA) {\n+                                return;\n+                            }\n+                            scanner.scan();\n+                        }\n+                    case opc_try:\n+                        for (; ; ) {\n+                            parser.curCodeAttr.beginTrap(scanner.pos, parser.parseIdent());\n+                            if (scanner.token != Token.COMMA) {\n+                                return;\n+                            }\n+                            scanner.scan();\n+                        }\n+                    case opc_endtry:\n+                        for (; ; ) {\n+                            parser.curCodeAttr.endTrap(scanner.pos, parser.parseIdent());\n+                            if (scanner.token != Token.COMMA) {\n+                                return;\n+                            }\n+                            scanner.scan();\n+                        }\n+                    case opc_catch:\n+                        parser.curCodeAttr.trapHandler(scanner.pos, parser.parseIdent(),\n+                                instructionParser.parseConstRef(ConstType.CONSTANT_CLASS));\n+                        return;\n+                    case opc_var:\n+                        for (; ; ) {\n+                            parser.parseLocVarDef(opc_var);\n+                            if (scanner.token != Token.COMMA) {\n+                                return;\n+                            }\n+                            scanner.scan();\n+                        }\n+                    case opc_endvar:\n+                        for (; ; ) {\n+                            parser.parseLocVarEnd(opc_var);\n+                            if (scanner.token != Token.COMMA) {\n+                                return;\n+                            }\n+                            scanner.scan();\n+                        }\n+                    case opc_type:\n+                        for (; ; ) {\n+                            parser.parseLocVarDef(opc_type);\n+                            if (scanner.token != Token.COMMA) {\n+                                return;\n+                            }\n+                            scanner.scan();\n+                        }\n+                    case opc_endtype:\n+                        for (; ; ) {\n+                            parser.parseLocVarEnd(opc_type);\n+                            if (scanner.token != Token.COMMA) {\n+                                return;\n+                            }\n+                            scanner.scan();\n+                        }\n+\n+                    case opc_locals_map:\n+                        stackMapData = parser.curCodeAttr.getStackMapTable();\n+                        if (stackMapData.localsMap != null) {\n+                            environment.error(scanner.pos, \"err.stackmap.entity.repeated\", opc_locals_map.parseKey());\n+                        }\n+                        DataVector localsMap = new DataVector();\n+                        stackMapData.localsMap = localsMap;\n+                        stackMapData.setScannerPosition(scanner.pos);\n+                        if (scanner.token == Token.SEMICOLON) {\n+                            return;  \/\/ empty locals_map allowed\n+                        }\n+                        for (; ; ) {\n+                            parser.parseMapItem(localsMap);\n+                            if (scanner.token != Token.COMMA) {\n+                                return;\n+                            }\n+                            scanner.scan();\n+                        }\n+                    case opc_stack_map:\n+                        stackMapData = parser.curCodeAttr.getStackMapTable();\n+                        if (stackMapData.stackMap != null) {\n+                            environment.error(scanner.pos, \"err.stackmap.entity.repeated\", opc_stack_map.parseKey());\n+                        }\n+                        DataVector stackMap = new DataVector();\n+                        stackMapData.stackMap = stackMap;\n+                        stackMapData.setScannerPosition(scanner.pos);\n+                        if (scanner.token == Token.SEMICOLON) {\n+                            return;  \/\/ empty stack_map allowed\n+                        }\n+                        for (; ; ) {\n+                            parser.parseMapItem(stackMap);\n+                            if (scanner.token != Token.COMMA) {\n+                                return;\n+                            }\n+                            scanner.scan();\n+                        }\n+                    case opc_unset_fields:\n+                        stackMapData = parser.curCodeAttr.getStackMapTable();\n+                        if (!stackMapData.isWrapper()) {\n+                            environment.error(scanner.pos, \"err.stackmap.map.eligible\",\n+                                    opc_unset_fields.parseKey(),\n+                                    EARLY_LARVAL.tagName());\n+                        }\n+                        if (stackMapData.unsetFields != null) {\n+                            environment.error(scanner.pos, \"err.stackmap.entity.repeated\", opc_unset_fields.parseKey());\n+                        }\n+                        DataVector unsetFields = new DataVector();\n+                        stackMapData.unsetFields = unsetFields;\n+                        stackMapData.setScannerPosition(scanner.pos);\n+                        if (scanner.token == Token.SEMICOLON) {\n+                            \/\/ empty unset_fields allowed\n+                            scanner.scan();\n+                            scanner.expectOneOf(List.of(opc_stack_map_entry.parseKey(), opc_stack_frame_type.parseKey()),\n+                                    FRAMETYPE, ENTRYTYPE);\n+                        } else {\n+                            for (; ; ) {\n+                                parser.parseNameAndType(unsetFields);\n+                                if (scanner.token != Token.COMMA) {\n+                                    scanner.expect(Token.SEMICOLON);\n+                                    scanner.expectOneOf(List.of(opc_stack_map_entry.parseKey(), opc_stack_frame_type.parseKey()),\n+                                            FRAMETYPE, ENTRYTYPE);\n+                                    break;\n+                                }\n+                                scanner.scan();\n+                            }\n+                        }\n+                        opcode = opc_frame_type;\n+                        scanner.scan();\n+                        \/\/ continue to the next case: opc_stack_frame_type, opc_stack_map_entry, opc_frame_type, opc_entry_type\n+                        \/\/ StackMapTable Attribute (Since 7.0)\n+                    case opc_stack_frame_type, opc_stack_map_entry,\n+                         opc_frame_type, opc_entry_type:\n+                        stackMapData = parser.curCodeAttr.getStackMapTable();\n+                        if (stackMapData.isFrameTypeSet()) {\n+                            if (stackMapData.isWrapper()) {\n+                                stackMapData = parser.curCodeAttr.getNextStackMapTable();\n+                            } else {\n+                                environment.error(scanner.pos, \"err.stackmaptable.repeated\");\n+                            }\n+                        }\n+                        stackMapData.setScannerPosition(scanner.pos).setStackFrameTypeByName(parser.parseIdent());\n+                        return;\n+                    \/\/ StackMap Attribute (Java 6.0)\n+                    case opc_stack_map_frame:                                       \/\/ stack_map_frame\n+                        stackMapData = parser.curCodeAttr.getStackMapTable();\n+                        if (stackMapData.isFrameTypeSet()) {\n+                            environment.error(scanner.pos, \"err.stackmaptable.repeated\");\n+                        }\n+                        stackMapData.setScannerPosition(scanner.pos);\n+                        return;\n+                    \/\/ normal instructions:\n+                    case opc_aload:\n+                    case opc_astore:\n+                    case opc_fload:\n+                    case opc_fstore:\n+                    case opc_iload:\n+                    case opc_istore:\n+                    case opc_lload:\n+                    case opc_lstore:\n+                    case opc_dload:\n+                    case opc_dstore:\n+                    case opc_ret:\n+                    case opc_aload_w:\n+                    case opc_astore_w:\n+                    case opc_fload_w:\n+                    case opc_fstore_w:\n+                    case opc_iload_w:\n+                    case opc_istore_w:\n+                    case opc_lload_w:\n+                    case opc_lstore_w:\n+                    case opc_dload_w:\n+                    case opc_dstore_w:\n+                    case opc_ret_w:\n+                        \/\/ loc var\n+                        arg = parser.parseLocVarRef();\n+                        break;\n+                    case opc_iinc: \/\/ loc var, const\n+                        arg = parser.parseLocVarRef();\n+                        scanner.expect(Token.COMMA);\n+                        arg2 = parser.parseInt(opcode.parseKey(), 1);\n+                        break;\n+                    case opc_tableswitch:\n+                    case opc_lookupswitch:\n+                        arg2 = parseSwitchTable();\n+                        break;\n+                    case opc_newarray: {\n+                        int type;\n+                        if (scanner.token == Token.INTVAL) {\n+                            type = scanner.intValue;\n+                        } else if ((type = ClassFileConst.basicTypeValue(scanner.idValue)) == -1) {\n+                            environment.error(scanner.pos, \"err.array.type.expected\");\n+                            throw new SyntaxError();\n+                        }\n+                        scanner.scan();\n+                        arg = new Indexer(type);\n+                        break;\n+                    }\n+                    case opc_new:\n+                    case opc_anewarray:\n+                    case opc_instanceof:\n+                    case opc_checkcast:\n+                        arg = instructionParser.parseConstRef(ConstType.CONSTANT_CLASS);\n+                        break;\n+                    case opc_bipush:\n+                        arg = parser.parseInt(opcode.parseKey(), 1);\n+                        break;\n+                    case opc_sipush:\n+                        arg = parser.parseInt(opcode.parseKey(), 2);\n+                        break;\n+                    case opc_ldc:\n+                    case opc_ldc_w:\n+                    case opc_ldc2_w:\n+                        arg = instructionParser.parseConstRef(null);\n+                        break;\n+                    case opc_putstatic:\n+                    case opc_getstatic:\n+                    case opc_putfield:\n+                    case opc_getfield:\n+                        arg = instructionParser.parseConstRef(ConstType.CONSTANT_FIELDREF);\n+                        break;\n+                    case opc_invokevirtual:\n+                        arg = instructionParser.parseConstRef(ConstType.CONSTANT_METHODREF);\n+                        break;\n+                    case opc_invokestatic:\n+                    case opc_invokespecial:\n+                        ConstType ctype01 = ConstType.CONSTANT_METHODREF;\n+                        ConstType ctype02 = ConstType.CONSTANT_INTERFACEMETHODREF;\n+                        if (Modifier.isInterface(this.parser.classData.access)) {\n+                            ctype01 = ConstType.CONSTANT_INTERFACEMETHODREF;\n+                            ctype02 = ConstType.CONSTANT_METHODREF;\n+                        }\n+                        arg = instructionParser.parseConstRef(ctype01, ctype02);\n+                        break;\n+                    case opc_jsr:\n+                    case opc_goto:\n+                    case opc_ifeq:\n+                    case opc_ifge:\n+                    case opc_ifgt:\n+                    case opc_ifle:\n+                    case opc_iflt:\n+                    case opc_ifne:\n+                    case opc_if_icmpeq:\n+                    case opc_if_icmpne:\n+                    case opc_if_icmpge:\n+                    case opc_if_icmpgt:\n+                    case opc_if_icmple:\n+                    case opc_if_icmplt:\n+                    case opc_if_acmpeq:\n+                    case opc_if_acmpne:\n+                    case opc_ifnull:\n+                    case opc_ifnonnull:\n+                    case opc_jsr_w:\n+                    case opc_goto_w:\n+                        arg = parseLabelRef();\n+                        break;\n+                    case opc_invokeinterface:\n+                        arg = instructionParser.parseConstRef(ConstType.CONSTANT_INTERFACEMETHODREF);\n+                        scanner.expect(Token.COMMA);\n+                        arg2 = parser.parseUInt(1);\n+                        break;\n+                    case opc_invokedynamic:\n+                        arg = instructionParser.parseConstRef(ConstType.CONSTANT_INVOKEDYNAMIC);\n+                        break;\n+\n+                    case opc_multianewarray:\n+                        arg = instructionParser.parseConstRef(ConstType.CONSTANT_CLASS);\n+                        scanner.expect(Token.COMMA);\n+                        arg2 = parser.parseUInt(1);\n+                        break;\n+                    case opc_wide:\n+                    case opc_nonpriv:\n+                    case opc_priv:\n+                        int opc2 = (opcode.value() << 8) | parser.parseUInt(1).cpIndex;\n+                        opcode = opcode(opc2);\n+                        break;\n+                }\n+                break;\n+            case WIDE:\n+                arg = parser.parseLocVarRef();\n+                if (opcode == Opcode.opc_iinc_w) { \/\/ loc var, const\n+                    scanner.expect(Token.COMMA);\n+                    arg2 = parser.parseInt(opcode.parseKey(), 2);\n+                }\n+                break;\n+            case NONPRIVELEGED:\n+            case PRIVELEGED:\n+                break;\n+            default:\n+                environment.error(scanner.prevPos, \"err.wrong.mnemocode\", mnemocode);\n+                throw new SyntaxError();\n+        }\n+        parser.curCodeAttr.addInstr(mnenoc_pos, opcode, arg, arg2);\n+    } \/\/end parseInstr\n+\n+    \/**\n+     * Parse a Switch Table. return value: SwitchTable.\n+     *\/\n+    protected SwitchTable parseSwitchTable() throws SyntaxError, IOException {\n+        scanner.expect(Token.LBRACE);\n+        Indexer label;\n+        int numpairs = 0, key;\n+        SwitchTable table = new SwitchTable(environment);\n+        tableScan:\n+        {\n+            while (numpairs < MAX_LOOKUPSWITCH_PAIRS_COUNT) {\n+                switch (scanner.token) {\n+                    case INTVAL:\n+                        key = scanner.intValue * scanner.sign;\n+                        scanner.scan();\n+                        scanner.expect(Token.COLON);\n+                        table.addEntry(key, parseLabelRef());\n+                        numpairs++;\n+                        if (scanner.token != Token.SEMICOLON) {\n+                            break tableScan;\n+                        }\n+                        scanner.scan();\n+                        break;\n+                    case DEFAULT:\n+                        scanner.scan();\n+                        scanner.expect(Token.COLON);\n+                        if (table.defLabel != null) {\n+                            environment.error(\"err.default.redecl\");\n+                        }\n+                        table.defLabel = parseLabelRef();\n+                        if (scanner.token != Token.SEMICOLON) {\n+                            break tableScan;\n+                        }\n+                        scanner.scan();\n+                        break;\n+                    default:\n+                        break tableScan;\n+                }\n+            }\n+            environment.error(\"err.long.switchtable\", MAX_LOOKUPSWITCH_PAIRS_COUNT);\n+        } \/\/ end tableScan\n+        scanner.expect(Token.RBRACE);\n+        return table;\n+    } \/\/ end parseSwitchTable\n+\n+    \/**\n+     * Parse a label instruction argument\n+     *\/\n+    protected Indexer parseLabelRef() throws SyntaxError, IOException {\n+        switch (scanner.token) {\n+            case INTVAL: {\n+                int v = scanner.intValue * scanner.sign;\n+                scanner.scan();\n+                return new Indexer(v);\n+            }\n+            case IDENT: {\n+                String label = scanner.stringValue;\n+                scanner.scan();\n+                return parser.curCodeAttr.LabelRef(label);\n+            }\n+        }\n+        environment.error(\"err.label.expected\");\n+        throw new SyntaxError();\n+    }\n+}\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/ParseInstruction.java","additions":477,"deletions":0,"binary":false,"changes":477,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,1 @@\n+import org.openjdk.asmtools.asmutils.Pair;\n@@ -27,0 +28,1 @@\n+import org.openjdk.asmtools.common.outputs.NamedToolOutput;\n@@ -29,0 +31,1 @@\n+import org.openjdk.asmtools.jasm.JasmTokens.Token;\n@@ -30,0 +33,1 @@\n+import org.openjdk.asmtools.jdis.notations.Signature;\n@@ -37,1 +41,0 @@\n-import static java.lang.String.format;\n@@ -39,0 +42,1 @@\n+import static org.openjdk.asmtools.common.structure.EAttribute.*;\n@@ -44,1 +48,0 @@\n-import static org.openjdk.asmtools.jasm.JasmTokens.Token;\n@@ -46,0 +49,2 @@\n+import static org.openjdk.asmtools.jasm.OpcodeTables.Opcode.opc_type;\n+import static org.openjdk.asmtools.jasm.OpcodeTables.Opcode.opc_var;\n@@ -71,1 +76,1 @@\n- * Syntax errors, should always be caught inside the\n+ * Syntax errors should always be caught inside the\n@@ -80,3 +85,4 @@\n-    private final ParserAnnotation annotParser;       \/\/ For parsing Annotations\n-    private final ParserCP cpParser;                  \/\/ for parsing Constants\n-    private final ParserInstr instrParser;            \/\/ for parsing Instructions\n+    private final ParseAnnotation annotParser;              \/\/ For parsing Annotations\n+    private final ParseConstPool cpParser;                  \/\/ for parsing Constants\n+    private final ParseInstruction instrParser;             \/\/ for parsing Instructions\n+    private final ParseAttribute attributeParser;           \/\/ for parsing Instructions\n@@ -86,1 +92,1 @@\n-    CFVersion currentCFV;\n+    CFVersion currentCFV;                                   \/\/ parser cfv\n@@ -90,3 +96,3 @@\n-    private ArrayList<AnnotationData> pkgAnnttns = null;\n-    private ArrayList<AnnotationData> clsAnnttns = null;\n-    private ArrayList<AnnotationData> memberAnnttns = null;\n+    private ArrayList<AnnotationData> packageAnnotations = null;\n+    private ArrayList<AnnotationData> classAnnotations = null;\n+    private ArrayList<AnnotationData> memberAnnotations = null;\n@@ -101,3 +107,5 @@\n-        this.cpParser = new ParserCP(this);\n-        this.annotParser = new ParserAnnotation(this);\n-        this.instrParser = new ParserInstr(this, cpParser);\n+        this.cpParser = new ParseConstPool(this);\n+        this.annotParser = new ParseAnnotation(this);\n+        this.instrParser = new ParseInstruction(this, cpParser);\n+        this.attributeParser = new ParseAttribute(this);\n+        EModifier.setGlobalContext(ClassFileContext.ORDINARY);\n@@ -108,1 +116,2 @@\n-                       boolean debugCP, boolean debugAnnot, boolean debugInstr) {\n+                       boolean debugCP, boolean debugAnnot,\n+                       boolean debugInstr, boolean debugAttribute) {\n@@ -114,0 +123,1 @@\n+        attributeParser.setDebugFlag(debugAttribute);\n@@ -120,1 +130,1 @@\n-    public int getPosition() {\n+    public long getPosition() {\n@@ -124,1 +134,1 @@\n-    private void parseVersion() {\n+    private Pair<Integer, Integer> parseVersion() {\n@@ -138,1 +148,1 @@\n-                        return;\n+                        return new Pair<>(majorVersion, minorVersion);\n@@ -155,1 +165,1 @@\n-     * Parse a local variable presented in the form\n+     * Parse a local variable (type) presented in the form\n@@ -157,0 +167,2 @@\n+     * or\n+     * (type) index  #name_index:#signature_index; [ (type) index name:signature; ]\n@@ -160,1 +172,1 @@\n-     * descriptor - a field descriptor which encodes the type of a local variable in the source program\n+     * descriptor - a field descriptor which encodes the type or the signature of a local variable in the source program\n@@ -162,2 +174,2 @@\n-    void parseLocVarDef() throws SyntaxError {\n-        int index = NotSet;\n+    void parseLocVarDef(OpcodeTables.Opcode opcode) throws SyntaxError {\n+        int slot = NotSet;\n@@ -165,2 +177,3 @@\n-        \/\/ The form is (var) index  #name_index:#descriptor_index; [ (var) index name:descriptor; ]\n-        int indexPosition = scanner.pos;\n+        \/\/ The form is (var)  slot  #name_index:#descriptor_index; [ (var) slot name:descriptor; ]\n+        \/\/          or (type) slot  #name_index:#signature_index; [ (type) slot name:signature; ]\n+        long indexPosition = scanner.pos;\n@@ -168,2 +181,1 @@\n-            environment.error(indexPosition, \"err.locvar.expected\", index, curCodeAttr.max_locals.cpIndex);\n-            throw new SyntaxError();\n+            environment.throwErrorException(indexPosition, \"err.locvar.expected\");\n@@ -171,4 +183,3 @@\n-        index = scanner.intValue;\n-        if (!curCodeAttr.max_locals.inRange(index)) {\n-            environment.error(indexPosition, \"err.locvar.wrong.index\", index, curCodeAttr.max_locals.cpIndex - 1);\n-            throw new SyntaxError();\n+        slot = scanner.intValue;\n+        if (!curCodeAttr.max_locals.inRange(slot)) {\n+            environment.throwErrorException(indexPosition, \"err.locvar.wrong.index\", slot, curCodeAttr.max_locals.cpIndex - 1);\n@@ -183,1 +194,1 @@\n-        int descriptorPosition = scanner.pos;\n+        long descriptorPosition = scanner.pos;\n@@ -185,5 +196,18 @@\n-        \/\/ check field type of the local var\n-        FieldType fieldType = FieldType.getFieldType(((String) descriptorCell.ref.value).charAt(0));\n-        if (fieldType == null) {\n-            environment.error(descriptorPosition, \"err.locvar.unknown.field.descriptor\", index, descriptorCell.ref.value.toString());\n-            throw new SyntaxError();\n+        \/\/ check either field descriptor or signature of the local var according to the opcode\n+        if (opcode == opc_var) {\n+            FieldType fieldType = FieldType.getFieldType(((String) descriptorCell.ref.value).charAt(0));\n+            if (fieldType == null) {\n+                environment.throwErrorException(descriptorPosition,\n+                        \"err.locvar.unknown.field.descriptor\", slot, descriptorCell.ref.value.toString());\n+            }\n+        } else if (opcode == opc_type) {\n+            try {\n+                \/\/ check validity of the parsed signature\n+                new Signature<>(environment.getLogger(), descriptorCell.ref.value.toString()).getFieldType(null);\n+            } catch (Exception ex) {\n+                environment.warning(descriptorPosition,\n+                        \"warn.loctype.wrong.field.signature\", slot, descriptorCell.ref.value.toString());\n+            }\n+        } else {\n+            environment.throwErrorException(descriptorPosition,\n+                    \"err.one.of.two.token.expected\", opc_var.parseKey(), opc_type.parseKey());\n@@ -191,1 +215,1 @@\n-        curCodeAttr.LocVarDataDef(indexPosition, index, nameCell, descriptorCell);\n+        curCodeAttr.LocVarDataDef(opcode, indexPosition, slot, nameCell, descriptorCell);\n@@ -199,1 +223,1 @@\n-    Indexer parseLocVarRef() throws SyntaxError, IOException {\n+    Indexer parseLocVarRef() throws SyntaxError {\n@@ -214,1 +238,1 @@\n-     * endvar LOCAL_VARIABLE;\n+     * either  endvar  LOCAL_VARIABLE; or endtype LOCAL_VARIABLE;\n@@ -216,2 +240,2 @@\n-    void parseLocVarEnd() throws SyntaxError, IOException {\n-        final int position = scanner.pos;\n+    void parseLocVarEnd(OpcodeTables.Opcode opcode) throws SyntaxError {\n+        final long position = scanner.pos;\n@@ -220,1 +244,1 @@\n-            curCodeAttr.LocVarDataEnd((short) index, position);\n+            curCodeAttr.LocVarDataEnd(opcode, (short) index, position);\n@@ -230,0 +254,25 @@\n+    \/**\n+     * Parse a set of  CONSTANT_NameAndType_info entries in the following forms:\n+     * #id1, #id2, #idN;\n+     * or\n+     * fldS:\"Ljava\/lang\/String;\", fldS:\"I\", fldI:\"I\";\n+     *\n+     * @param fields is the list of fields that is populated with a newly scanned item\n+     * @throws SyntaxError if any format error\n+     * @throws IOException if any input error\n+     *\/\n+    void parseNameAndType(DataVector fields) throws SyntaxError {\n+        if (scanner.token == CPINDEX) {\n+            fields.add(new ConstantPoolIndexData(scanner.intValue));\n+            scanner.scan();\n+        } else {\n+            ConstCell nameCell = parseName();\n+            scanner.expect(COLON);\n+            ConstCell typeCell = parseName();\n+            \/\/ Define the variable\n+            ConstantPool.ConstValue_NameAndType nameAndType = new ConstantPool.ConstValue_NameAndType(nameCell, typeCell);\n+            ConstCell cell = pool.findNameAndTypeCell(nameAndType);\n+            fields.add(new ConstantPoolIndexData(cell, pool));\n+        }\n+    }\n+\n@@ -231,2 +280,1 @@\n-        StackMap.VerificationType itemVerificationType =\n-                StackMap.getVerificationType(scanner.intValue, Optional.empty());\n+        StackMap.VerificationType itemVerificationType = StackMap.getVerificationType(scanner.intValue, Optional.empty());\n@@ -254,1 +302,1 @@\n-                    tag = ClassFileConst.tag(sValue);\n+                    tag = ClassFileConst.getByParseKey(sValue);\n@@ -312,1 +360,1 @@\n-     * Parses a field or method reference for method handle.\n+     * Parses a field or method reference for a method handle.\n@@ -390,1 +438,1 @@\n-    private void checkReferenceIndex(int position, ConstType defaultTag, ConstType defaultTag2) {\n+    private void checkReferenceIndex(long position, ConstType defaultTag, ConstType defaultTag2) {\n@@ -402,1 +450,1 @@\n-     * Parses a sub-tag value in method handle.\n+     * Parses a sub-tag value in a method handle.\n@@ -461,1 +509,1 @@\n-                \/\/ these should be OK to use as identifier names.\n+                \/\/ These should be OK to use as identifier names.\n@@ -474,1 +522,1 @@\n-        ConstType key = ClassFileConst.tag(scanner.token.value());\n+        ConstType key = ClassFileConst.getByTag(scanner.token.value());\n@@ -494,1 +542,1 @@\n-    Indexer parseInt(String opCode, int size) throws SyntaxError, IOException {\n+    Indexer parseInt(String opCode, int size) throws SyntaxError {\n@@ -531,1 +579,1 @@\n-    Indexer parseUInt(int size) throws SyntaxError, IOException {\n+    Indexer parseUInt(int size) throws SyntaxError {\n@@ -570,2 +618,2 @@\n-                traceMethodInfoLn(\"\\ncpIndex: \" + cpx);\n-                pool.setCell(cpx, cpParser.parseConstRef(null));\n+                traceMethodInfoLn(\"\\ncpIndex: %d\".formatted(cpx));\n+                pool.setCell(cpx, cpParser.parseConstPoolRef());\n@@ -588,1 +636,2 @@\n-        int nextmod, prevpos;\n+        int nextmod;\n+        long prevpos;\n@@ -593,70 +642,24 @@\n-                case PUBLIC:\n-                    nextmod = EModifier.ACC_PUBLIC.getFlag();\n-                    break;\n-                case PRIVATE:\n-                    nextmod = EModifier.ACC_PRIVATE.getFlag();\n-                    break;\n-                case PROTECTED:\n-                    nextmod = EModifier.ACC_PROTECTED.getFlag();\n-                    break;\n-                case STATIC:\n-                    nextmod = EModifier.ACC_STATIC.getFlag();\n-                    break;\n-                case FINAL:\n-                    nextmod = EModifier.ACC_FINAL.getFlag();\n-                    break;\n-                case SYNCHRONIZED:\n-                    nextmod = EModifier.ACC_SYNCHRONIZED.getFlag();\n-                    break;\n-                case SUPER:\n-                    nextmod = EModifier.ACC_SUPER.getFlag();\n-                    break;\n-                case VOLATILE:\n-                    nextmod = EModifier.ACC_VOLATILE.getFlag();\n-                    break;\n-                case BRIDGE:\n-                    nextmod = EModifier.ACC_BRIDGE.getFlag();\n-                    break;\n-                case TRANSIENT:\n-                    nextmod = EModifier.ACC_TRANSIENT.getFlag();\n-                    break;\n-                case VARARGS:\n-                    nextmod = EModifier.ACC_VARARGS.getFlag();\n-                    break;\n-                case NATIVE:\n-                    nextmod = EModifier.ACC_NATIVE.getFlag();\n-                    break;\n-                case INTERFACE:\n-                    nextmod = ACC_INTERFACE.getFlag();\n-                    break;\n-                case ABSTRACT:\n-                    nextmod = ACC_ABSTRACT.getFlag();\n-                    break;\n-                case STRICT:\n-                    nextmod = EModifier.ACC_STRICT.getFlag();\n-                    break;\n-                case ENUM:\n-                    nextmod = EModifier.ACC_ENUM.getFlag();\n-                    break;\n-                case SYNTHETIC:\n-                    nextmod = EModifier.ACC_SYNTHETIC.getFlag();\n-                    break;\n-                case ANNOTATION_ACCESS:\n-                    nextmod = EModifier.ACC_ANNOTATION.getFlag();\n-                    break;\n-                case DEPRECATED:\n-                    nextmod = EModifier.DEPRECATED_ATTRIBUTE.getFlag();\n-                    break;\n-                case MANDATED:\n-                    nextmod = EModifier.ACC_MANDATED.getFlag();\n-                    break;\n-                case VALUE:\n-                    nextmod = EModifier.ACC_VALUE.getFlag();\n-                    break;\n-                case PERMITS_VALUE:\n-                    nextmod = EModifier.ACC_PERMITS_VALUE.getFlag();\n-                    break;\n-                case PRIMITIVE:\n-                    nextmod = EModifier.ACC_PRIMITIVE.getFlag();\n-                    break;\n-                default:\n+                case PUBLIC -> nextmod = ACC_PUBLIC.getFlag();\n+                case PRIVATE -> nextmod = ACC_PRIVATE.getFlag();\n+                case PROTECTED -> nextmod = ACC_PROTECTED.getFlag();\n+                case STATIC -> nextmod = ACC_STATIC.getFlag();\n+                case FINAL -> nextmod = ACC_FINAL.getFlag();\n+                case SYNCHRONIZED -> nextmod = ACC_SYNCHRONIZED.getFlag();\n+                case SUPER -> nextmod = ACC_SUPER.getFlag();\n+                case IDENTITY -> nextmod = ACC_IDENTITY.getFlag() | VALUE_OBJECTS_ATTRIBUTE.getFlag();\n+                case VALUE -> nextmod = ACC_VALUE.getFlag() | VALUE_OBJECTS_ATTRIBUTE.getFlag();\n+                case VOLATILE -> nextmod = ACC_VOLATILE.getFlag();\n+                case BRIDGE -> nextmod = ACC_BRIDGE.getFlag();\n+                case TRANSIENT -> nextmod = ACC_TRANSIENT.getFlag();\n+                case VARARGS -> nextmod = ACC_VARARGS.getFlag();\n+                case NATIVE -> nextmod = ACC_NATIVE.getFlag();\n+                case INTERFACE -> nextmod = ACC_INTERFACE.getFlag();\n+                case ABSTRACT -> nextmod = ACC_ABSTRACT.getFlag();\n+                case STRICT -> nextmod = ACC_STRICT.getFlag();\n+                case ENUM -> nextmod = ACC_ENUM.getFlag();\n+                case SYNTHETIC -> nextmod = ACC_SYNTHETIC.getFlag();\n+                case ANNOTATION_ACCESS -> nextmod = ACC_ANNOTATION.getFlag();\n+                case DEPRECATED -> nextmod = DEPRECATED_ATTRIBUTE.getFlag();\n+                case MANDATED -> nextmod = ACC_MANDATED.getFlag();\n+                case INTVAL -> nextmod = scanner.intValue;\n+                default -> {\n@@ -664,0 +667,1 @@\n+                }\n@@ -693,0 +697,2 @@\n+        \/\/ FIELD = NAME:DESCRIPTOR(:SIGNATURE_FULL)?\n+        \/\/ FIELD = NAME:DESCRIPTOR CONST_VALUE(:SIGNATURE_FULL)?\n@@ -696,0 +702,1 @@\n+        \/\/ SIGNATURE_FULL=Signature SIGNATURE\n@@ -708,2 +715,2 @@\n-            if (memberAnnttns != null) {\n-                fld.addAnnotations(memberAnnttns);\n+            if (memberAnnotations != null) {\n+                fld.addAnnotations(memberAnnotations);\n@@ -715,0 +722,3 @@\n+                if (scanner.token == SIGNATURE) {\n+                    scanner.scan(); \/\/ skip\n+                }\n@@ -725,2 +735,10 @@\n-            \/\/ If the next scanner.token is a comma, then there is more\n-            traceMethodInfoLn(\"Field: \" + fld);\n+            if (scanner.token == COLON) {\n+                scanner.scan();\n+                fld.checkExistence(ATT_Signature,\n+                        () -> environment.warning(scanner.pos, \"warn.repeat.signature.field\"));\n+                if (scanner.token == SIGNATURE) {\n+                    scanner.scan(); \/\/ skip\n+                }\n+                ConstCell signatureCell = parseName();\n+                fld.setSignatureAttr(signatureCell);\n+            }\n@@ -728,0 +746,1 @@\n+            \/\/ If the next scanner.token is a comma, then there is more\n@@ -737,1 +756,1 @@\n-     * Scan method's signature to determine size of parameters.\n+     * Scan method's signature to determine the size of parameters.\n@@ -747,1 +766,2 @@\n-        int siglen = sig.length(), k = 0, loccnt = 0, errparam = 0;\n+        int siglen = sig.length(), k = 0, loccnt = 0;\n+        String errMsg = \"\\\"({JavaTypeSignature})Result\\\" is missing.\";\n@@ -755,1 +775,1 @@\n-                errparam = 1;\n+                errMsg = \"A \\\"(\\\" token is expected in \\\"({JavaTypeSignature})Result\\\"\";\n@@ -762,1 +782,1 @@\n-                            errparam = 2;\n+                            errMsg = \"An array type signature is expected: \\\"[JavaTypeSignature\\\"\";\n@@ -791,1 +811,1 @@\n-                                errparam = 3;\n+                                errMsg = \"ClassTypeSignature is not properly terminated: L{PackageSpecifier\/}SimpleClassTypeSignature;\";\n@@ -802,1 +822,1 @@\n-                        errparam = 4;\n+                        errMsg = \"Unknown token \\\"%s\\\" in \\\"({JavaTypeSignature})Result\\\"\".formatted(sig.charAt(k));\n@@ -807,1 +827,1 @@\n-        environment.error(scanner.pos, \"err.msig.malformed\", Integer.toString(k), Integer.toString(errparam));\n+        environment.warning(scanner.prevPos, \"err.msig.malformed\", k + 1, errMsg);\n@@ -816,1 +836,1 @@\n-        int scannerPosition = scanner.prevPos;\n+        long scannerPosition = scanner.prevPos;\n@@ -839,1 +859,0 @@\n-\n@@ -842,4 +861,0 @@\n-        if (scanner.token == COLON) {\n-            scanner.scan();\n-            signatureCell = parseName();\n-        }\n@@ -847,16 +862,6 @@\n-        \/\/ Parse throws clause\n-        ArrayList<ConstCell<?>> exc_table = null;\n-        if (scanner.token == Token.THROWS) {\n-            scanner.scan();\n-            exc_table = new ArrayList<>();\n-            for (; ; ) {\n-                scannerPosition = scanner.pos;\n-                ConstCell<?> exc = cpParser.parseConstRef(ConstType.CONSTANT_CLASS);\n-                if (exc_table.contains(exc)) {\n-                    environment.warning(scannerPosition, \"warn.exc.repeated\");\n-                } else {\n-                    exc_table.add(exc);\n-                    environment.traceln(\"THROWS:\" + exc.cpIndex);\n-                }\n-                if (scanner.token != COMMA) {\n-                    break;\n+        if (scanner.token.in(COLON, SIGNATURE)) {\n+            \/\/ Signature expected\n+            if (scanner.token == COLON) {\n+                scanner.scan();\n+                if (scanner.token == SIGNATURE) {\n+                    scanner.scan();\n@@ -864,0 +869,6 @@\n+                signatureCell = parseName();\n+            } else if (scanner.token == SIGNATURE) {\n+                scanner.scan();\n+                signatureCell = parseName();\n+            }\n+            if (scanner.token == SEMICOLON) {\n@@ -867,4 +878,11 @@\n-        if (scanner.token == Token.DEFAULT) {\n-            \/\/ need to scan the annotation value\n-            defAnnot = annotParser.parseDefaultAnnotation();\n-        }\n+        ArrayList<ConstCell<?>> exceptionList = null;\n+        boolean parseNext = true;\n+        do {\n+            switch (scanner.token) {\n+                \/\/ Parse throws clause\n+                case THROWS -> exceptionList = parseThrowsClause();\n+                \/\/ Parse default clause\n+                case DEFAULT -> defAnnot = annotParser.parseDefaultAnnotation();\n+                default -> parseNext = false;\n+            }\n+        } while (parseNext);\n@@ -872,1 +890,1 @@\n-        MethodData curMethod = classData.StartMethod(mod, nameCell, typeCell, exc_table);\n+        MethodData curMethod = classData.StartMethod(mod, nameCell, typeCell, exceptionList);\n@@ -888,1 +906,1 @@\n-            annotParser.parseParamAnnots(paramCount, curMethod);\n+            annotParser.parseParamAnnotation(paramCount, curMethod);\n@@ -896,1 +914,1 @@\n-        } else {\n+        } else if (!EModifier.isAbstract(mod)) {\n@@ -899,12 +917,1 @@\n-            while ((scanner.token != EOF) && (scanner.token != RBRACE)) {\n-                instrParser.parseInstr();\n-                if (scanner.token == RBRACE) {\n-                    break;\n-                }\n-                \/\/ code's type annotation(s)\n-                if (scanner.token == ANNOTATION) {\n-                    curCodeAttr.addAnnotations(annotParser.scanAnnotations());\n-                    break;\n-                }\n-                scanner.expect(SEMICOLON);\n-            }\n+            parseCodeAttribute();\n@@ -913,0 +920,8 @@\n+        } else { \/\/ abstract method could have empty body {} and even not empty\n+            if (scanner.token == LBRACE) {\n+                scanner.scan();\n+                curCodeAttr = curMethod.startCode(paramCount, max_stack, max_locals);\n+                parseCodeAttribute();\n+                curCodeAttr.endCode();\n+                scanner.expect(RBRACE);\n+            }\n@@ -914,1 +929,0 @@\n-\n@@ -918,2 +932,2 @@\n-        if (memberAnnttns != null) {\n-            curMethod.addAnnotations(memberAnnttns);\n+        if (memberAnnotations != null) {\n+            curMethod.addAnnotations(memberAnnotations);\n@@ -922,0 +936,1 @@\n+\n@@ -926,0 +941,28 @@\n+    private void parseCodeAttribute() throws IOException {\n+        while ((scanner.token != EOF) && (scanner.token != RBRACE)) {\n+            instrParser.parseInstr();\n+            if (scanner.token == RBRACE) {\n+                break;\n+            } else if (scanner.token == LINETABLE_HEADER) {\n+                curCodeAttr.fillLineTable(attributeParser.parseLineTable());\n+                continue;\n+            } else if (scanner.token == LOCALVARIABLES_HEADER) {\n+                curCodeAttr.fillLocalVariableTable(false, attributeParser.parseLocalVariableTable(false));\n+                continue;\n+            } else if (scanner.token == LOCALVARIABLETYPES_HEADER) {\n+                curCodeAttr.fillLocalVariableTable(true, attributeParser.parseLocalVariableTable(true));\n+                continue;\n+            } else if (scanner.token == ANNOTATION) {\n+                curCodeAttr.addAnnotations(annotParser.parseAnnotations());\n+                continue;\n+            } else if (scanner.token == STACKMAP_HEADER) {\n+                curCodeAttr.fillStackMapTable(attributeParser.parseStackMap());\n+                continue;\n+            } else if (scanner.token == STACKMAPTABLE_HEADER) {\n+                curCodeAttr.fillStackMapTable(attributeParser.parseStackMapTable());\n+                continue;\n+            }\n+            scanner.expect(SEMICOLON);\n+        }\n+    }\n+\n@@ -927,1 +970,1 @@\n-     * Parse a (CPX based) BootstrapMethod entry.\n+     * @return list of the exception classes\n@@ -929,7 +972,17 @@\n-    private void parseCPXBootstrapMethod() throws SyntaxError {\n-        \/\/ Parses in the form:\n-        \/\/ BOOTSTRAPMETHOD CPX_MethodHandle (CPX_Arg)* ;\n-        if (scanner.token == CPINDEX) {\n-            \/\/ CPX can be a CPX to an MethodHandle constant,\n-            int cpx = scanner.intValue;\n-            ConstCell<?> MHCell = pool.getCell(cpx);\n+    private ArrayList<ConstCell<?>> parseThrowsClause() {\n+        scanner.scan();\n+        ArrayList<ConstCell<?>> list = new ArrayList<>();\n+        for (; ; ) {\n+            ConstCell<?> exc = cpParser.parseConstRef(ConstType.CONSTANT_CLASS);\n+            if (list.contains(exc)) {\n+                environment.warning(scanner.pos, \"warn.exc.repeated\");\n+            } else {\n+                list.add(exc);\n+                environment.traceln(() -> \"THROWS:\" + exc.cpIndex);\n+            }\n+            if (scanner.token == SEMICOLON) {\n+                scanner.scan();\n+                break;\n+            } else if (scanner.token != COMMA) {\n+                break;\n+            }\n@@ -937,1 +990,3 @@\n-            ArrayList<ConstCell<?>> bsm_args = new ArrayList<>(256);\n+        }\n+        return list;\n+    }\n@@ -939,3 +994,102 @@\n-            while (scanner.token != SEMICOLON) {\n-                if (scanner.token == CPINDEX) {\n-                    bsm_args.add(pool.getCell(scanner.intValue));\n+    \/**\n+     * Parse a group of BootstrapMethod entries.\n+     * <p>\n+     * BootstrapMethods {\n+     * N: MethodHandle;\n+     * (\n+     * Arguments:\n+     * (ARG,)*\n+     * ARG;\n+     * )?\n+     * }\n+     *\/\n+    private void parseBootstrapMethodGroup() throws SyntaxError {\n+        scanner.scan();\n+        scanner.expect(LBRACE);\n+        List<Token> expectedToken = List.of(INTVAL);\n+        int mhIndex = 0;\n+        ConstCell<?> MHCell = null;\n+        ArrayList<ConstCell<?>> bsm_args = new ArrayList<>(256);\n+        while (true) {\n+            switch (scanner.token) {\n+                case INTVAL -> {\n+                    \/\/ 0:\n+                    if (!expectedToken.contains(scanner.token)) {\n+                        environment.throwErrorException(scanner.pos, \"err.token.expected\", INTVAL.parseKey());\n+                    }\n+                    if (MHCell != null) {\n+                        classData.addBootstrapMethod(new BootstrapMethodData(MHCell, bsm_args));\n+                    }\n+                    scanner.expect(INTVAL);\n+                    mhIndex = scanner.intValue;\n+                    scanner.expect(COLON);\n+                    MHCell = parseMHCell();\n+                    if (scanner.token == CPINDEX) {\n+                        scanner.scan();\n+                        scanner.expect(SEMICOLON);\n+                    }\n+                    expectedToken = List.of(ARGUMENTS, INTVAL, RBRACE);\n+                }\n+                case ARGUMENTS -> {\n+                    if (!expectedToken.contains(scanner.token)) {\n+                        environment.throwErrorException(scanner.pos, \"err.token.isnot.expected\", ARGUMENTS.parseKey());\n+                    }\n+                    scanner.scan();\n+                    scanner.expect(COLON);\n+                    cpParser.incLBRACE();\n+                    \/\/ scan Bootstrap arguments\n+                    bsm_args.clear();\n+                    expectedToken = List.of(CPINDEX, IDENT, CLASS);\n+                    while (true) {\n+                        if (scanner.token.in(CPINDEX, IDENT, CLASS)) {\n+                            if (!expectedToken.contains(scanner.token)) {\n+                                environment.throwErrorException(scanner.pos, \"err.bootstrap.arg.is.not.expected\");\n+                            }\n+                            bsm_args.add(cpParser.parseConstRef(null));\n+                            expectedToken = List.of(COMMA, SEMICOLON);\n+                        } else if (scanner.token == COMMA) {\n+                            if (!expectedToken.contains(scanner.token)) {\n+                                environment.throwErrorException(scanner.pos, \"err.token.isnot.expected\", COMMA.parseKey());\n+                            }\n+                            scanner.scan();\n+                            expectedToken = List.of(CPINDEX, IDENT);\n+                        } else if (scanner.token == SEMICOLON) {\n+                            if (!expectedToken.contains(scanner.token)) {\n+                                environment.throwErrorException(scanner.pos, \"err.token.isnot.expected\", SEMICOLON.parseKey());\n+                            }\n+                            cpParser.decLBRACE();\n+                            scanner.scan();\n+                            break;\n+                        } else {\n+                            if (bsm_args.isEmpty()) {\n+                                environment.throwErrorException(scanner.pos, \"err.bootstrap.arg.expected\");\n+                            } else {\n+                                String expectedTokens = expectedToken.stream().map(Token::printValue).\n+                                        collect(Collectors.joining(\", \"));\n+                                environment.throwErrorException(scanner.pos, \"err.one.of.N.token.expected\",\n+                                        expectedTokens);\n+                            }\n+                        }\n+                    }\n+                    classData.addBootstrapMethod(new BootstrapMethodData(MHCell, bsm_args));\n+                    MHCell = null;\n+                    expectedToken = List.of(INTVAL, RBRACE);\n+                }\n+                case RBRACE -> {\n+                    if (!expectedToken.contains(scanner.token)) {\n+                        environment.throwErrorException(scanner.pos, \"err.token.expected\", RBRACE.parseKey());\n+                    }\n+                    if (MHCell != null) {\n+                        classData.addBootstrapMethod(new BootstrapMethodData(MHCell, bsm_args));\n+                    }\n+                    scanner.scan();\n+                    return;\n+                }\n+                default -> {\n+                    String expectedTokens = expectedToken.stream().map(Token::printValue).collect(Collectors.joining(\", \"));\n+                    environment.throwErrorException(scanner.pos,\n+                            (expectedToken.size() == 1) ? \"err.token.expected\" : \"err.one.of.N.token.expected\", expectedTokens);\n+                }\n+            }\n+        }\n+    }\n@@ -943,0 +1097,86 @@\n+    \/**\n+     * Parse a BootstrapMethod entry individually.\n+     * <p>\n+     * Two formats are supported:\n+     * BootstrapMethod #METHODHANDLE (#ARG)*;\n+     * BootstrapMethod #MH; { (#ARG,)* (ARG)? }\n+     *\/\n+    private void parseBootstrapMethod() throws SyntaxError {\n+        ArrayList<ConstCell<?>> bsm_args = new ArrayList<>(256);\n+        ConstCell<?> MHCell = parseMHCell();\n+        if (scanner.token != LBRACE) {\n+            \/\/ in the case BootstrapMethod  REF_invokeStatic:Phoo.phee:\"()LBoo;\"; { } don't skip LBRACE\n+            scanner.scan();\n+        }\n+        if (scanner.token == SEMICOLON) {\n+            \/\/ BOOTSTRAPMETHOD MethodHandle; ({(ARG,)* ARG;]})?\n+            scanner.scan();\n+            if (scanner.token == LBRACE) {\n+                scanner.scan();\n+                cpParser.incLBRACE();\n+                if (scanner.token == RBRACE) {\n+                    \/\/ BSMethod doesn't have arguments.\n+                    classData.addBootstrapMethod(new BootstrapMethodData(MHCell, List.of()));\n+                    scanner.scan();\n+                    return;\n+                }\n+                \/\/ scan Bootstrap arguments\n+                while (true) {\n+                    bsm_args.add(cpParser.parseConstRef(null));\n+                    if (scanner.token.in(COMMA, SEMICOLON)) {\n+                        scanner.scan();\n+                        if (scanner.token == RBRACE) {\n+                            cpParser.decLBRACE();\n+                            scanner.scan();\n+                            break;\n+                        }\n+                    } else if (scanner.token == RBRACE) {\n+                        cpParser.decLBRACE();\n+                        scanner.scan();\n+                        break;\n+                    } else {\n+                        environment.throwErrorException(scanner.pos, \"err.one.of.N.token.expected\",\n+                                \"%s, %s, or %s\".formatted(COMMA.printValue(), SEMICOLON.printValue(), RBRACE.printValue()));\n+                    }\n+                }\n+            } \/\/ else BSMethod doesn't have arguments: BootstrapMethod #MH;\n+            classData.addBootstrapMethod(new BootstrapMethodData(MHCell, bsm_args));\n+        }\n+        if (scanner.token == LBRACE) {\n+            scanner.scan();\n+            cpParser.incLBRACE();\n+            if (scanner.token == RBRACE) {\n+                \/\/ BSMethod doesn't have arguments.\n+                classData.addBootstrapMethod(new BootstrapMethodData(MHCell, List.of()));\n+                scanner.scan();\n+                return;\n+            }\n+            \/\/ scan Bootstrap arguments\n+            while (true) {\n+                bsm_args.add(cpParser.parseConstRef(null));\n+                if (scanner.token.in(COMMA, SEMICOLON)) {\n+                    scanner.scan();\n+                    if (scanner.token == RBRACE) {\n+                        cpParser.decLBRACE();\n+                        scanner.scan();\n+                        break;\n+                    }\n+                } else if (scanner.token == RBRACE) {\n+                    cpParser.decLBRACE();\n+                    scanner.scan();\n+                    break;\n+                } else {\n+                    environment.throwErrorException(scanner.pos, \"err.one.of.N.token.expected\",\n+                            \"%s, %s, or %s\".formatted(COMMA.printValue(), SEMICOLON.printValue(), RBRACE.printValue()));\n+                }\n+            }\n+            classData.addBootstrapMethod(new BootstrapMethodData(MHCell, bsm_args));\n+        } else if (scanner.token == Token.CPINDEX) {\n+            \/\/ CPX can be a CPX to a MethodHandle constant\n+            \/\/  BootstrapMethod #MH #ARG1 #ARG2;\n+            int cpx = scanner.intValue;\n+            bsm_args.add(pool.getCell(cpx));\n+            scanner.scan();\n+            while (scanner.token != Token.SEMICOLON) {\n+                if (scanner.token == Token.CPINDEX) {\n+                    bsm_args.add(pool.getCell(scanner.intValue));\n@@ -945,2 +1185,1 @@\n-                    environment.error(scanner.pos, \"err.invalid.bootstrapmethod\");\n-                    throw new SyntaxError();\n+                    environment.throwErrorException(scanner.pos, \"invalid.bootstrapmethod\");\n@@ -950,2 +1189,10 @@\n-            BootstrapMethodData bsmData = new BootstrapMethodData(MHCell, bsm_args);\n-            classData.addBootstrapMethod(bsmData);\n+            classData.addBootstrapMethod(new BootstrapMethodData(MHCell, bsm_args));\n+        }\n+    }\n+\n+    private ConstCell<?> parseMHCell() throws SyntaxError {\n+        ConstCell<?> MHCell;\n+        if (scanner.token == CPINDEX) {\n+            \/\/ MethodHandle #CPX\n+            int cpx = scanner.intValue;\n+            MHCell = pool.getCell(cpx);\n@@ -953,3 +1200,12 @@\n-            \/\/ throw error, bootstrap method is not recognizable\n-            environment.error(scanner.pos, \"err.invalid.bootstrapmethod\");\n-            throw new SyntaxError();\n+            \/\/ MethodHandle    [INVOKESUBTAG|INVOKESUBTAG_INDEX] :   [METHODREF|INTERFACEMETHODREF]\n+            \/\/ INVOKESUBTAG : REF_INVOKEINTERFACE, REF_NEWINVOKESPECIAL, ...\n+            SubTag subTag = parser.parseSubtag();\n+            scanner.expect(Token.COLON);\n+            if (scanner.token == Token.CPINDEX) {\n+                int cpx = scanner.intValue;\n+                MHCell = pool.getCell(cpx);\n+                scanner.scan();\n+            } else {\n+                MHCell = parser.parseMethodHandle(subTag);\n+            }\n+            scanner.expect(SEMICOLON);\n@@ -957,0 +1213,1 @@\n+        return MHCell;\n@@ -1104,1 +1361,1 @@\n-     * Parse a list of classes belonging to the [NestMembers | PermittedSubclasses | Preload]  entry\n+     * Parse a list of classes belonging to the [NestMembers | PermittedSubclasses] entry\n@@ -1109,1 +1366,1 @@\n-        \/\/ (NESTMEMBERS|PERMITTEDSUBCLASSES|PRELOAD)? IDENT(, IDENT)*;\n+        \/\/ (NESTMEMBERS|PERMITTEDSUBCLASSES)? IDENT(, IDENT)*;\n@@ -1128,1 +1385,2 @@\n-     * Parse the Record entry\n+     * Valhalla specific\n+     * Parse a list of Utf-8 belonging to the [LoadableDescriptors] entry\n@@ -1130,0 +1388,48 @@\n+    private void parseUtf8List(Consumer<ArrayList<ConstCell>> utf8Consumer) throws SyntaxError {\n+        ArrayList<ConstCell> utf8List = new ArrayList<>();\n+        \/\/ Parses in the form:\n+        \/\/ (LOADABLEDESCRIPTORS)? IDENT(, IDENT)*;\n+        traceMethodInfoLn(\"Begin\");\n+        while (true) {\n+            ConstCell<?> cell = parseName();\n+            if (!cell.getType().equals(ConstType.CONSTANT_UTF8)) {\n+                throwSyntaxError(\"err.field.descriptor.expected\");\n+            }\n+            utf8List.add(cell);\n+            traceMethodInfoLn(\"Added cell: \" + cell);\n+            if (scanner.token != COMMA) {\n+                scanner.expect(SEMICOLON);\n+                utf8Consumer.accept(utf8List);\n+                return;\n+            }\n+            scanner.scan();\n+        }\n+    }\n+\n+\n+    private void parseEnclosingMethod() {\n+        \/\/ Parse in the form:\n+        \/\/ ENCLOSINGMETHOD (CPINDEX | CLASS_NAME)(: CPINDEX | METHOD_NAME:\"METHOD_SIGNATURE\");\n+        traceMethodInfoLn(\"Begin\");\n+        ConstCell<?> classCell = cpParser.parseConstRef(ConstType.CONSTANT_CLASS, null, true);\n+        if (scanner.token == SEMICOLON) {\n+            \/\/If the current class is not immediately enclosed by a method or constructor,\n+            \/\/ then the value of the method_index item must be zero.\n+            classData.addEnclosingMethod(classCell, null);\n+            return;\n+        }\n+        scanner.expect(COLON);\n+        ConstCell methodCell = null;\n+        if (scanner.token.in(CPINDEX, INTVAL)) {\n+            int methodCPIdx = scanner.intValue;\n+            if (methodCPIdx != 0) {\n+                methodCell = pool.getCell(methodCPIdx);\n+            }\n+            scanner.scan();\n+        } else {\n+            methodCell = pool.findCell(cpParser.parseConstValue(ConstType.CONSTANT_NAMEANDTYPE));\n+        }\n+        classData.addEnclosingMethod(classCell, methodCell);\n+    }\n+\n+    \/\/ Parse the Record entry\n@@ -1141,2 +1447,0 @@\n-        ArrayList<AnnotationData> componentAnntts = null;\n-        boolean grouped = false;\n@@ -1150,2 +1454,0 @@\n-                } else if (grouped) {\n-                    environment.error(scanner.pos, \"err.grouped.component.expected\");\n@@ -1158,0 +1460,1 @@\n+            ArrayList<AnnotationData> componentAnnotations = null;\n@@ -1159,1 +1462,1 @@\n-                componentAnntts = annotParser.scanAnnotations();\n+                componentAnnotations = annotParser.parseAnnotations();\n@@ -1163,1 +1466,0 @@\n-\n@@ -1167,7 +1469,0 @@\n-            \/\/ Parse the optional attribute: signature\n-            if (scanner.token == COLON) {\n-                scanner.scan();\n-                signatureCell = parseName();\n-            }\n-\n-            rd.addComponent(nameCell, descCell, signatureCell, componentAnntts);\n@@ -1176,4 +1471,10 @@\n-                case COMMA -> grouped = true;\n-                case SEMICOLON -> {\n-                    grouped = false;\n-                    componentAnntts = null;\n+                case COMMA, SEMICOLON -> {\n+                    \/\/ end of the component\n+                    scanner.scan();\n+                    if (scanner.token == SIGNATURE) {\n+                        scanner.scan();\n+                        signatureCell = parseName();\n+                    } else {\n+                        rd.addComponent(nameCell, descCell, signatureCell, componentAnnotations);\n+                        continue;\n+                    }\n@@ -1181,1 +1482,14 @@\n-                default -> environment.error(scanner.pos, \"err.one.of.two.token.expected\",\n+                case COLON -> {\n+                    \/\/ Parse the optional attribute: signature\n+                    scanner.scan();\n+                    if (scanner.token == SIGNATURE) {\n+                        scanner.scan();\n+                    }\n+                    signatureCell = parseName();\n+                }\n+            }\n+\n+            rd.addComponent(nameCell, descCell, signatureCell, componentAnnotations);\n+\n+            if (!scanner.token.in(COMMA, SEMICOLON)) {\n+                environment.throwErrorException(scanner.pos, \"err.one.of.two.token.expected\",\n@@ -1184,0 +1498,1 @@\n+\n@@ -1191,0 +1506,42 @@\n+    \/**\n+     * Parse a group of InnerClasses.\n+     *\n+     * @param mod inner_class_access_flags is ignored for a group of inner classes.\n+     *\/\n+    private void parseInnerClassGroup(int mod) throws SyntaxError, IOException {\n+        \/\/ Parses in the form:\n+        \/\/ INNERCLASSES { (INNER_CLASS)+ }\n+        \/\/   INNER_CLASS = MODIFIERS (INNERCLASSNAME =)? (INNERCLASS) (OF OUTERCLASS)? [;|,]\n+        \/\/ }\n+        \/\/ where\n+        \/\/    INNERCLASSNAME = (IDENT | CPX_IN-CL-NM)\n+        \/\/    INNERCLASS = (CLASS IDENT | CPX_IN-CL) (S2)\n+        \/\/    OUTERCLASS = (CLASS IDENT | CPX_OT-CL) (S3)\n+        \/\/\n+        \/\/ Note:\n+        \/\/    If a class reference cannot be identified using IDENT, CPX indexes must be used.\n+        traceMethodInfoLn(\"Begin\");\n+        if (mod != 0) {\n+            environment.warning(scanner.pos, \"warn.invalid.modifier.innerclasses\");\n+        }\n+        scanner.expect(LBRACE);\n+        while (true) {\n+            if (scanner.token == RBRACE) {\n+                if (classData.innerClasses == null || classData.innerClasses.isEmpty()) {\n+                    environment.warning(scanner.pos, \"warn.no.classes.in.innnerclasses\");\n+                }\n+                scanner.scan();\n+                break;\n+            }\n+            parseInnerClass(0);\n+            if (!scanner.token.in(COMMA, SEMICOLON)) {\n+                environment.throwErrorException(scanner.pos, \"err.one.of.two.token.expected\",\n+                        \"<\" + SEMICOLON.printValue() + \">\",\n+                        \"<\" + COMMA.printValue() + \">\");\n+\n+            }\n+            scanner.scan();\n+        }\n+        traceMethodInfoLn(\"End\");\n+    }\n+\n@@ -1193,0 +1550,2 @@\n+     *\n+     * @param mod inner_class_access_flags\n@@ -1209,0 +1568,7 @@\n+        \/\/ possible case \"MODIFIERS InnerClass MODIFIERS (INNERCLASSNAME =)? (INNERCLASS) (OF OUTERCLASS)? ;\"\n+        int inlineMod = scanModifiers();\n+        if (mod != 0 && inlineMod != 0) {\n+            environment.warning(scanner.pos, \"warn.both.modifiers.apply\",\n+                    EModifier.asKeywords(mod | inlineMod, ClassFileContext.INNER_CLASS).strip());\n+        }\n+        mod |= inlineMod;\n@@ -1210,3 +1576,1 @@\n-        ConstCell nameCell;\n-        ConstCell innerClass = null;\n-        ConstCell outerClass = null;\n+        ConstCell nameCell, innerClass = null, outerClass = null;\n@@ -1250,2 +1614,3 @@\n-    private void parseInnerClass_s1(int mod, ConstCell nameCell, ConstCell innerClass, ConstCell outerClass) throws IOException {\n-        \/\/ next scanner.token must be '='\n+    private void parseInnerClass_s1(int mod, ConstCell nameCell, ConstCell innerClass, ConstCell outerClass) throws\n+            IOException {\n+        \/\/ the next scanner.token must be '='\n@@ -1260,1 +1625,2 @@\n-    private void parseInnerClass_s2(int mod, ConstCell nameCell, ConstCell innerClass, ConstCell outerClass) throws IOException {\n+    private void parseInnerClass_s2(int mod, ConstCell nameCell, ConstCell innerClass, ConstCell outerClass) throws\n+            IOException {\n@@ -1294,1 +1660,2 @@\n-    private void parseInnerClass_s3(int mod, ConstCell nameCell, ConstCell innerClass, ConstCell outerClass) throws IOException {\n+    private void parseInnerClass_s3(int mod, ConstCell nameCell, ConstCell innerClass, ConstCell outerClass) throws\n+            IOException {\n@@ -1300,1 +1667,1 @@\n-                \/\/ outerClass = cpParser.parseConstRef(ConstType.CONSTANT_CLASS);; ignore keywords as much as possible:\n+                \/\/ outerClass = cpParser.parseConstRef(ConstType.CONSTANT_CLASS); ignore keywords as much as possible:\n@@ -1380,1 +1747,1 @@\n-    private void match(Token open, Token close) throws IOException {\n+    private void match(Token open, Token close) {\n@@ -1403,1 +1770,1 @@\n-    private void recoverField() throws SyntaxError, IOException {\n+    private void recoverField() throws SyntaxError {\n@@ -1444,1 +1811,1 @@\n-                    traceMethodInfoLn(format(\"scanner position %d\", scanner.pos));\n+                    traceMethodInfoLn(\"scanner position %d\".formatted(scanner.pos));\n@@ -1458,1 +1825,1 @@\n-        int posa = scanner.pos;\n+        long posa = scanner.pos;\n@@ -1462,2 +1829,2 @@\n-        if (clsAnnttns != null) {\n-            classData.addAnnotations(clsAnnttns);\n+        if (classAnnotations != null) {\n+            classData.addAnnotations(classAnnotations);\n@@ -1543,1 +1910,0 @@\n-\n@@ -1557,4 +1923,4 @@\n-                String option = classData.cfv.isThresholdSet() ? classData.cfv.asThresholdString() : classData.cfv.asString();\n-                parseVersion();\n-                if (classData.cfv.isSetByParameter() &&\n-                        (major == classData.cfv.major_version() || minor == classData.cfv.minor_version()))\n+                String option = classData.cfv.isThresholdSet() ? classData.cfv.asThresholdString() :\n+                        classData.cfv.asString();\n+                Pair<Integer, Integer> ver = parseVersion();\n+                if (classData.cfv.isSetByParameter() && (ver.first != major || ver.second != minor))\n@@ -1564,0 +1930,4 @@\n+                if (EModifier.GlobalContext() == ClassFileContext.VALUE_OBJECTS && !classData.cfv.isValueObjectContext()) {\n+                    environment.warning(scanner.prevPos, \"warn.value.object.defined\", classData.cfv.asString(),\n+                            CFVersion.ValueObjectsVersion().asString());\n+                }\n@@ -1595,1 +1965,1 @@\n-    private NameInfo parseTypeName() throws IOException {\n+    private NameInfo parseTypeName() {\n@@ -1627,1 +1997,1 @@\n-    private NameInfo parseModuleName() throws IOException {\n+    private NameInfo parseModuleName() {\n@@ -1664,2 +2034,2 @@\n-        if (clsAnnttns != null) {\n-            classData.addAnnotations(clsAnnttns);\n+        if (classAnnotations != null) {\n+            classData.addAnnotations(classAnnotations);\n@@ -1750,1 +2120,1 @@\n-    private void scanRequires(Consumer<ModuleContent.Dependence> action) throws IOException {\n+    private void scanRequires(Consumer<ModuleContent.Dependence> action) {\n@@ -1955,0 +2325,1 @@\n+        boolean bothFound = false;\n@@ -1957,1 +2328,1 @@\n-            memberAnnttns = annotParser.scanAnnotations();\n+            memberAnnotations = annotParser.parseAnnotations();\n@@ -1973,1 +2344,7 @@\n-                    parseInnerClass(mod);\n+                    if (scanner.stringValue.equals(INNERCLASS.alias())) {\n+                        \/\/ Parse a group of InnerClasses {....}\n+                        parseInnerClassGroup(mod);\n+                    } else {\n+                        \/\/ Parse an InnerClass individually.\n+                        parseInnerClass(mod);\n+                    }\n@@ -1976,2 +2353,9 @@\n-                    scanner.scan();\n-                    parseCPXBootstrapMethod();\n+                    if (scanner.stringValue.equals(BOOTSTRAPMETHOD.alias())) {\n+                        \/\/ Parse a group of BootstrapMethods {....}\n+                        parseBootstrapMethodGroup();\n+                    } else {\n+                        scanner.scan();\n+                        \/\/ Parse a BootstrapMethod individually.\n+                        parseBootstrapMethod();\n+                    }\n+\n@@ -1980,4 +2364,0 @@\n-                    if (classData.signatureAttr != null) {\n-                        environment.error(scanner.pos, \"err.extra.attribute\", SIGNATURE.parseKey(), \"ClassData\");\n-                        throw new SyntaxError();\n-                    }\n@@ -1985,1 +2365,1 @@\n-                    parseClassSignature();\n+                    classData.setSignatureAttr(parseName(), scanner.pos);\n@@ -1988,1 +2368,0 @@\n-                \/\/\n@@ -2001,4 +2380,1 @@\n-                    if (classData.sourceFileAttr != null) {\n-                        environment.error(scanner.pos, \"err.extra.attribute\", SOURCEFILE.parseKey(), \"ClassData\");\n-                        throw new SyntaxError();\n-                    }\n+                    classData.checkExistence(ATT_SourceFile, scanner.pos);\n@@ -2010,4 +2386,1 @@\n-                    if (classData.sourceDebugExtensionAttr != null) {\n-                        environment.error(scanner.pos, \"err.extra.attribute\", SOURCEDEBUGEXTENSION.parseKey(), \"ClassData\");\n-                        throw new SyntaxError();\n-                    }\n+                    classData.checkExistence(ATT_SourceDebugExtension, scanner.pos);\n@@ -2017,1 +2390,0 @@\n-                \/\/\n@@ -2019,7 +2391,2 @@\n-                    if (classData.nestHostAttributeExists()) {\n-                        environment.error(scanner.pos, \"err.extra.attribute\", NESTHOST.parseKey(), \"ClassData\");\n-                        throw new SyntaxError();\n-                    } else if (classData.nestMembersAttributesExist()) {\n-                        environment.error(scanner.pos, \"err.both.nesthost.nestmembers.found\");\n-                        throw new SyntaxError();\n-                    }\n+                    classData.checkExistence(ATT_NestHost, scanner.pos).\n+                            checkExistence(ATT_NestMembers, () -> environment.warning(scanner.pos, \"err.both.nesthost.nestmembers.found\"));\n@@ -2030,7 +2397,2 @@\n-                    if (classData.nestMembersAttributesExist()) {\n-                        environment.error(scanner.pos, \"err.extra.attribute\", NESTMEMBERS.parseKey(), \"ClassData\");\n-                        throw new SyntaxError();\n-                    } else if (classData.nestHostAttributeExists()) {\n-                        environment.error(scanner.pos, \"err.both.nesthost.nestmembers.found\");\n-                        throw new SyntaxError();\n-                    }\n+                    classData.checkExistence(ATT_NestMembers, scanner.pos).\n+                            checkExistence(ATT_NestHost, () -> environment.warning(scanner.pos, \"err.both.nesthost.nestmembers.found\"));\n@@ -2041,4 +2403,1 @@\n-                    if (classData.nestMembersAttributesExist()) {\n-                        environment.error(scanner.pos, \"err.extra.attribute\", PERMITTEDSUBCLASSES.parseKey(), \"ClassData\");\n-                        throw new SyntaxError();\n-                    }\n+                    classData.checkExistence(ATT_PermittedSubclasses, scanner.pos);\n@@ -2049,4 +2408,1 @@\n-                    if (classData.recordAttributeExists()) {\n-                        environment.error(scanner.pos, \"err.extra.attribute\", RECORD.parseKey(), \"ClassData\");\n-                        throw new SyntaxError();\n-                    }\n+                    classData.checkExistence(ATT_Record, scanner.pos);\n@@ -2056,5 +2412,2 @@\n-                case PRELOAD -> {\n-                    if (classData.preloadAttributeExists()) {\n-                        environment.error(scanner.pos, \"err.extra.attribute\", PRELOAD.parseKey(), \"ClassData\");\n-                        throw new SyntaxError();\n-                    }\n+                case LOADABLEDESCRIPTORS -> {\n+                    classData.checkExistence(ATT_LoadableDescriptors, scanner.pos);\n@@ -2062,1 +2415,6 @@\n-                    parseClasses(list -> classData.addPreloads(list));\n+                    parseUtf8List(list -> classData.addLoadableDescriptors(list));\n+                }\n+                case ENCLOSINGMETHOD -> {\n+                    classData.checkExistence(ATT_EnclosingMethod, scanner.pos);\n+                    scanner.scan();\n+                    parseEnclosingMethod();\n@@ -2077,1 +2435,1 @@\n-        memberAnnttns = null;\n+        memberAnnotations = null;\n@@ -2087,1 +2445,1 @@\n-            environment.traceln(\"recoverFile: scanner.token=\" + scanner.token);\n+            environment.traceln(() -> \"recoverFile: scanner.token=\" + scanner.token);\n@@ -2235,1 +2593,1 @@\n-                            pkgAnnttns = annotParser.scanAnnotations();\n+                            packageAnnotations = annotParser.parseAnnotations();\n@@ -2240,1 +2598,1 @@\n-                            int where = scanner.pos;\n+                            long where = scanner.pos;\n@@ -2272,1 +2630,1 @@\n-                    environment.traceln(\"Creating \\\"package-info.jasm\\\": package: \" + pkg + \" \" + classData.cfv.asString());\n+                    environment.traceln(() -> \"Creating \\\"package-info.jasm\\\": package: \" + pkg + \" \" + classData.cfv.asString());\n@@ -2281,2 +2639,2 @@\n-                    if (pkgAnnttns != null) {\n-                        classData.addAnnotations(pkgAnnttns);\n+                    if (packageAnnotations != null) {\n+                        classData.addAnnotations(packageAnnotations);\n@@ -2288,3 +2646,3 @@\n-            if (pkg == null && pkgAnnttns != null) { \/\/ RemoveModules\n-                clsAnnttns = pkgAnnttns;\n-                pkgAnnttns = null;\n+            if (pkg == null && packageAnnotations != null) { \/\/ RemoveModules\n+                classAnnotations = packageAnnotations;\n+                packageAnnotations = null;\n@@ -2297,0 +2655,3 @@\n+     * 1. File FILENAME or class file CLASSNAME takes the highest priority. This filename cannot be overridden.\n+     * 2. Public class CLASSNAME { }– class name is CLASSNAME, and this CLASSNAME will be used to generate the filename (i.e., CLASSNAME.class).\n+     * 3. this_class – The filename will be CLASSNAME.class, but the class name will be this_class.\n@@ -2301,1 +2662,10 @@\n-            \/\/ First, parse any package identifiers (and associated package annotations)\n+            \/\/ First parse the first line\n+            \/\/ file FILENAME || classfile CLASSNAME\n+            String destinationFileName = parseResultingFile();\n+            if (destinationFileName != null) {\n+                if (environment.getToolOutput() instanceof NamedToolOutput namedToolOutput) {\n+                    namedToolOutput.setDestinationFileName(destinationFileName);\n+                }\n+            }\n+\n+            \/\/ parse any package identifiers (and associated package annotations)\n@@ -2309,1 +2679,1 @@\n-                        clsAnnttns = annotParser.scanAnnotations();\n+                        classAnnotations = annotParser.parseAnnotations();\n@@ -2343,1 +2713,1 @@\n-                    clsAnnttns = null;\n+                    classAnnotations = null;\n@@ -2362,0 +2732,56 @@\n+\n+    \/**\n+     * The source text file can be free form (newlines are considered blanks) and may contain Java-style commenting.\n+     * The first line of a JASM file represents the name of the resulting file in the destination directory.\n+     * This name does not affect the content of the resulting file. This line has two forms:\n+     * file FILENAME;\n+     * or\n+     * classfile CLASSNAME;\n+     * In the latter case, extension .class will be added to form FILENAME.\n+     *\/\n+    private String parseResultingFile() throws IOException {\n+        boolean addExtension = false;\n+        String name = null;\n+        if (scanner.token.in(FILE, CLASS_FILE)) {\n+            while ((scanner.token != EOF)) {\n+                switch (scanner.token) {\n+                    case FILE -> {\n+                        if (name != null) {\n+                            environment.throwErrorException(scanner.pos, \"err.token.expected\", SEMICOLON.parseKey());\n+                        }\n+                    }\n+                    case CLASS_FILE -> {\n+                        if (name != null) {\n+                            environment.throwErrorException(scanner.pos, \"err.token.expected\", SEMICOLON.printValue());\n+                        }\n+                        addExtension = true;\n+                    }\n+                    case IDENT, CLASS -> {\n+                        name = name == null ? scanner.stringValue : name + scanner.stringValue;\n+                    }\n+                    case FIELD -> {     \/\/ \".\" is recognized as FIELD token\n+                        name = name == null ? \".\" : name + \".\";\n+                    }\n+                    case SEMICOLON -> {\n+                        if (name == null) {\n+                            environment.throwErrorException(scanner.pos, \"err.token.expected\",\n+                                    addExtension ? \"CLASSNAME\" : \"FILENAME\");\n+                        }\n+                        scanner.scan();\n+                        return name.concat(addExtension ? \".class\" : \"\");\n+                    }\n+                    default -> {\n+                        if (name == null) {\n+                            environment.throwErrorException(scanner.pos, \"err.token.expected\",\n+                                    addExtension ? \"CLASSNAME\" : \"FILENAME\");\n+                        } else {\n+                            environment.throwErrorException(scanner.pos, \"err.token.expected\", SEMICOLON.printValue());\n+                        }\n+                    }\n+                }  \/\/ end switch\n+                scanner.scan();\n+            } \/\/ while\n+        }\n+        return name;\n+    }\n+\n@@ -2363,0 +2789,1 @@\n+        \/\/ parser environment and copy of the parser cfv.\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/Parser.java","additions":731,"deletions":304,"binary":false,"changes":1035,"status":"modified"},{"patch":"@@ -1,645 +0,0 @@\n-\/*\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.asmtools.jasm;\n-\n-import org.openjdk.asmtools.common.SyntaxError;\n-\n-import java.util.ArrayList;\n-import java.util.function.BiFunction;\n-\n-import static java.lang.String.format;\n-import static org.openjdk.asmtools.jasm.ClassFileConst.*;\n-import static org.openjdk.asmtools.jasm.ClassFileConst.ConstType.*;\n-import static org.openjdk.asmtools.jasm.ConstantPool.*;\n-import static org.openjdk.asmtools.jasm.JasmTokens.Token;\n-\n-\/**\n- * ParserCP\n- * <p>\n- * ParseCP is a parser class owned by Parser.java. It is primarily responsible for parsing\n- * the constant pool and constant declarations.\n- *\/\n-public class ParserCP extends ParseBase {\n-\n-    \/\/ Visitor object\n-    private final ParserCPVisitor pConstVstr;\n-    \/\/ Stop parsing a source file immediately and interpret any issue as an error\n-    private boolean exitImmediately = false;\n-    \/\/ counter of left braces\n-    private int lbrace = 0;\n-\n-    \/**\n-     * main constructor\n-     *\/\n-    protected ParserCP(Parser parentParser) {\n-        super.init(parentParser);\n-        pConstVstr = new ParserCPVisitor();\n-    }\n-\n-    \/**\n-     * In particular cases it's necessary to interpret a warning issue as an error and\n-     * stop parsing a source file immediately\n-     * cpParser.setExitImmediately(true);\n-     * parseConstRef(...);\n-     * cpParser.setExitImmediately(false);\n-     *\/\n-    public void setExitImmediately(boolean exitImmediately) {\n-        this.exitImmediately = exitImmediately;\n-    }\n-\n-    \/**\n-     * Parse CONSTVALUE\n-     *\/\n-    protected ConstValue<?> parseConstValue(ConstType tag) throws SyntaxError {\n-        return pConstVstr.visitExcept(tag);\n-    }\n-\n-    \/**\n-     * Parse [TAG] CONSTVALUE\n-     *\/\n-    protected ConstValue<?> parseTagConstValue(ConstType defaultTag) throws SyntaxError {\n-        return parseTagConstValue(defaultTag, null, false);\n-    }\n-\n-    private ConstType scanConstByID(boolean ignoreKeywords) {\n-        ConstType tag = null;\n-        if (!ignoreKeywords) {\n-            tag = ClassFileConst.tag(scanner.idValue);\n-        }\n-        traceMethodInfoLn(format(\"\\t\\tTag: %s \", tag == null ? \"<not found>\" : tag));\n-        return tag;\n-    }\n-\n-    private ConstType scanConstPrimVal() throws SyntaxError {\n-        ConstType tag;\n-        switch (scanner.token) {\n-            case BYTE -> tag = CONSTANT_INTEGER_BYTE;\n-            case CHAR -> tag = CONSTANT_INTEGER_CHAR;\n-            case DOUBLEVAL -> tag = ConstType.CONSTANT_DOUBLE;\n-            case FLOATVAL -> tag = ConstType.CONSTANT_FLOAT;\n-            case LONGVAL -> tag = ConstType.CONSTANT_LONG;\n-            case INTVAL -> tag = ConstType.CONSTANT_INTEGER;\n-            case SHORT -> tag = CONSTANT_INTEGER_SHORT;\n-            case BOOLEAN -> tag = CONSTANT_INTEGER_BOOLEAN;\n-            case STRINGVAL, BITS, IDENT -> tag = ConstType.CONSTANT_STRING;\n-            default -> {\n-                \/\/ problem - no constant value\n-                environment.error(scanner.pos, \"err.value.expected\", scanner.token.printValue());\n-                throw new SyntaxError();\n-            }\n-        }\n-        return tag;\n-    }\n-\n-    private void checkWrongTag(ConstType tag, ConstType defaultTag, ConstType default2Tag) throws SyntaxError {\n-        if (defaultTag != null) {\n-            if (tag != defaultTag) {\n-                if (default2Tag == null) {\n-                    if (exitImmediately) {\n-                        environment.error(scanner.pos, \"err.wrong.tag\", defaultTag.parseKey());\n-                        throw new SyntaxError().setFatal();\n-                    }\n-                    environment.warning(scanner.pos, \"warn.wrong.tag\", defaultTag.parseKey());\n-                } else if (tag != default2Tag) {\n-                    if (exitImmediately) {\n-                        environment.error(scanner.pos, \"err.wrong.tag2\", defaultTag.parseKey(), default2Tag.parseKey());\n-                        throw new SyntaxError().setFatal();\n-                    }\n-                    environment.warning(scanner.pos, \"warn.wrong.tag2\", defaultTag.parseKey(), default2Tag.parseKey());\n-                }\n-            }\n-        }\n-    }\n-\n-    protected ConstValue<?> parseTagConstValue(ConstType defaultTag, ConstType default2Tag, boolean ignoreKeywords)\n-            throws SyntaxError {\n-        traceMethodInfoLn(format(\"\\t<< DefaultTag: %s 2nd DefaultTag: %s IgnoreKeyword?: %b\",\n-                defaultTag == null ? \"<none>\" : defaultTag,\n-                default2Tag == null ? \"<none>\" : default2Tag, ignoreKeywords));\n-        \/\/ Lookup the Tag from the scanner\n-        ConstType tag = scanConstByID(ignoreKeywords);\n-        traceMethodInfoLn(format(\"\\tResult Tag: %s >>\", tag));\n-        \/\/ If the scanned tag is null\n-        if (tag == null) {\n-            \/\/ and, if the expected tag is null\n-            if (defaultTag == null) {\n-                \/\/ return some other type of constant as the tag\n-                tag = scanConstPrimVal();\n-            } else {\n-                \/\/ otherwise, make the scanned-tag the same constant-type\n-                \/\/ as the expected tag.\n-                tag = defaultTag;\n-            }\n-        } else {\n-            \/\/ If the scanned tag is some constant type\n-            \/\/ and the scanned type does not equal the expected type\n-            checkWrongTag(tag, defaultTag, default2Tag);\n-            scanner.scan();\n-        }\n-        return parseConstValue(tag);\n-    } \/\/ end parseTagConstValue\n-\n-    protected ConstCell<?> parseConstRef(ConstType defaultTag) throws SyntaxError {\n-        return parseConstRef(defaultTag, null, false);\n-    }\n-\n-    protected ConstCell<?> parseConstRef(ConstType defaultTag, ConstType default2Tag) throws SyntaxError {\n-        return parseConstRef(defaultTag, default2Tag, false);\n-    }\n-\n-    \/**\n-     * Parse an instruction argument, one of: * #NUMBER, #NAME, [TAG] CONSTVALUE\n-     *\/\n-    protected ConstCell<?> parseConstRef(ConstType defaultTag,\n-                                         ConstType default2Tag,\n-                                         boolean ignoreKeywords) throws SyntaxError {\n-        if (scanner.token == Token.CPINDEX) {\n-            int cpx = scanner.intValue;\n-            scanner.scan();\n-            return parser.pool.getCell(cpx);\n-        } else {\n-            ConstValue<?> ref = parseTagConstValue(defaultTag, default2Tag, ignoreKeywords);\n-            return parser.pool.findCell(ref);\n-        }\n-    } \/\/ end parseConstRef\n-\n-    \/**\n-     * ParserCPVisitor\n-     * <p>\n-     * This inner class overrides a constant pool visitor to provide specific parsing\n-     * instructions (per method) for each type of Constant.\n-     * <p>\n-     * Note: since the generic visitor throws no exceptions, this derived class tunnels\n-     * the exceptions, rethrown in the visitExcept method.\n-     *\/\n-    class ParserCPVisitor extends CPTagVisitor<ConstValue<?>> {\n-\n-        private SyntaxError syntaxError;\n-\n-        \/\/This is the entry point for a visitor that tunnels exceptions\n-        public ConstValue<?> visitExcept(ConstType tag) throws SyntaxError {\n-            syntaxError = null;\n-            traceMethodInfoLn();\n-            ConstValue<?> ret = visit(tag);\n-            if (syntaxError != null) {\n-                throw syntaxError;\n-            }\n-            return ret;\n-        }\n-\n-        @Override\n-        public ConstValue<?> visitUTF8() {\n-            traceMethodInfoLn();\n-            try {\n-                scanner.expect(Token.STRINGVAL);\n-            } catch (SyntaxError se) {\n-                syntaxError = se;\n-            }\n-            return new ConstValue_UTF8(scanner.stringValue);\n-        }\n-\n-        @Override\n-        public ConstValue<?> visitInteger(ClassFileConst.ConstType tag) {\n-            traceMethodInfoLn();\n-            int v = 0;\n-            try {\n-                if (scanner.token == Token.BITS) {\n-                    scanner.scan();\n-                    scanner.inBits = true;\n-                }\n-                v = scanner.intValue * scanner.sign;\n-                scanner.expect(Token.INTVAL);\n-            } catch (SyntaxError se) {\n-                syntaxError = se;\n-            }\n-            return new ConstValue_Integer(tag, v);\n-        }\n-\n-        @Override\n-        public ConstValue<?> visitLong() {\n-            traceMethodInfoLn();\n-            ConstValue_Long valueLong = null;\n-            try {\n-                long v;\n-                if (scanner.token == Token.BITS) {\n-                    scanner.scan();\n-                    scanner.inBits = true;\n-                }\n-                switch (scanner.token) {\n-                    case INTVAL -> v = scanner.intValue;\n-                    case LONGVAL -> v = scanner.longValue;\n-                    default -> {\n-                        environment.error(scanner.prevPos, \"err.token.expected\", \"Integer\");\n-                        throw new SyntaxError();\n-                    }\n-                }\n-                valueLong = new ConstValue_Long(v * scanner.sign);\n-                scanner.scan();\n-            } catch (SyntaxError se) {\n-                syntaxError = se;\n-            }\n-            return valueLong;\n-        }\n-\n-        @Override\n-        public ConstValue<?> visitFloat() {\n-            traceMethodInfoLn();\n-            ConstValue_Float valueFloat = null;\n-            try {\n-                int v;\n-                float f;\n-                scanner.inBits = false;  \/\/ this needs to be initialized for each float!\n-                if (scanner.token == Token.BITS) {\n-                    scanner.scan();\n-                    scanner.inBits = true;\n-                }\n-                i2f:\n-                {\n-                    switch (scanner.token) {\n-                        case INTVAL -> {\n-                            if (scanner.inBits) {\n-                                v = scanner.intValue;\n-                                break i2f;\n-                            } else {\n-                                f = (float) scanner.intValue;\n-                            }\n-                        }\n-                        case FLOATVAL -> f = scanner.floatValue;\n-                        case DOUBLEVAL -> f = (float) scanner.doubleValue; \/\/ to be excluded?\n-                        case INF -> f = Float.POSITIVE_INFINITY;\n-                        case NAN -> f = Float.NaN;\n-                        default -> {\n-                            environment.traceln(\"token=\" + scanner.token);\n-                            environment.error(scanner.pos, \"err.token.expected\", \"<Float>\");\n-                            throw new SyntaxError();\n-                        }\n-                    }\n-                    v = Float.floatToIntBits(f);\n-                }\n-                if (scanner.sign == -1) {\n-                    v = v ^ 0x80000000;\n-                }\n-                valueFloat = new ConstValue_Float(v);\n-                scanner.scan();\n-            } catch (SyntaxError se) {\n-                syntaxError = se;\n-            }\n-            return valueFloat;\n-        }\n-\n-        @Override\n-        public ConstValue<?> visitDouble() {\n-            traceMethodInfoLn();\n-            ConstValue_Double valueDouble = null;\n-            try {\n-                long v;\n-                double d;\n-                if (scanner.token == Token.BITS) {\n-                    scanner.scan();\n-                    scanner.inBits = true;\n-                }\n-                d2l:\n-                {\n-                    switch (scanner.token) {\n-                        case INTVAL -> {\n-                            if (scanner.inBits) {\n-                                v = scanner.intValue;\n-                                break d2l;\n-                            } else {\n-                                d = scanner.intValue;\n-                            }\n-                        }\n-                        case LONGVAL -> {\n-                            if (scanner.inBits) {\n-                                v = scanner.longValue;\n-                                break d2l;\n-                            } else {\n-                                d = (double) scanner.longValue;\n-                            }\n-                        }\n-                        case FLOATVAL -> d = scanner.floatValue;\n-                        case DOUBLEVAL -> d = scanner.doubleValue;\n-                        case INF -> d = Double.POSITIVE_INFINITY;\n-                        case NAN -> d = Double.NaN;\n-                        default -> {\n-                            environment.error(scanner.pos, \"err.token.expected\", \"Double\");\n-                            throw new SyntaxError();\n-                        }\n-                    }\n-                    v = Double.doubleToLongBits(d);\n-                }\n-                if (scanner.sign == -1) {\n-                    v = v ^ 0x8000000000000000L;\n-                }\n-                valueDouble = new ConstValue_Double(v);\n-                scanner.scan();\n-            } catch (SyntaxError se) {\n-                syntaxError = se;\n-            }\n-            return valueDouble;\n-        }\n-\n-        private ConstCell<?> visitName() {\n-            traceMethodInfoLn();\n-            ConstCell<?> obj = null;\n-            try {\n-                \/\/ Parse an external name: CPINDEX, string, or identifier.\n-                obj = parser.parseName();\n-            } catch (SyntaxError se) {\n-                syntaxError = se;\n-            }\n-            return obj;\n-        }\n-\n-        @Override\n-        public ConstValue<?> visitMethodType() {\n-            traceMethodInfoLn();\n-            ConstValue_MethodType obj = null;\n-            ConstCell<ConstValue_UTF8> cell = (ConstCell<ConstValue_UTF8>) visitName();\n-            if (syntaxError == null) {\n-                obj = new ConstValue_MethodType(cell);\n-            }\n-            return obj;\n-        }\n-\n-        @Override\n-        public ConstValue<?> visitString() {\n-            traceMethodInfoLn();\n-            ConstValue_String obj = null;\n-            ConstCell cell = visitName();\n-            if (syntaxError == null) {\n-                obj = new ConstValue_String(cell);\n-            }\n-            return obj;\n-        }\n-\n-        @Override\n-        public ConstValue<?> visitClass() {\n-            traceMethodInfoLn();\n-            ConstValue_Class obj = null;\n-            try {\n-                ConstCell cell = parser.parseConstantClassInfo(true);\n-                obj = new ConstValue_Class(cell);\n-            } catch (SyntaxError se) {\n-                syntaxError = se;\n-            }\n-            return obj;\n-        }\n-\n-        @Override\n-        public ConstValue<?> visitPackage() {\n-            traceMethodInfoLn();\n-            ConstValue_Package obj = null;\n-            try {\n-                ConstCell cell = parser.parseConstantPackageInfo();\n-                obj = new ConstValue_Package(cell);\n-            } catch (SyntaxError se) {\n-                syntaxError = se;\n-            }\n-            return obj;\n-        }\n-\n-        @Override\n-        public ConstValue<?> visitModule() {\n-            traceMethodInfoLn();\n-            ConstValue_Module obj = null;\n-            try {\n-                ConstCell cell = parser.parseConstantModuleInfo();\n-                obj = new ConstValue_Module(cell);\n-            } catch (SyntaxError se) {\n-                syntaxError = se;\n-            }\n-            return obj;\n-        }\n-\n-\n-        @Override\n-        public ConstValue<?> visitMethodHandle() {\n-            traceMethodInfoLn();\n-            ConstValue_MethodHandle obj = null;\n-            try {\n-                ConstCell refCell;\n-                SubTag subTag;\n-                \/\/ MethodHandle    [INVOKESUBTAG|INVOKESUBTAG_INDEX] :    CONSTANT_FIELD | [FIELDREF|METHODREF|INTERFACEMETHODREF]\n-                if (scanner.token == Token.INTVAL) {\n-                    \/\/ INVOKESUBTAG_INDEX\n-                    \/\/ Handle explicit constant pool form\n-                    subTag = subTag(scanner.intValue);\n-                    scanner.scan();\n-                    scanner.expect(Token.COLON);\n-                    if (scanner.token == Token.CPINDEX) {\n-                        \/\/ CONSTANT_FIELD\n-                        int cpx = scanner.intValue;\n-                        refCell = parser.pool.getCell(cpx);\n-                        scanner.scan();\n-                    } else {\n-                        \/\/ [FIELDREF|METHODREF|INTERFACEMETHODREF]\n-                        refCell = parser.parseMethodHandle(subTag);\n-                    }\n-                } else {\n-                    \/\/ INVOKESUBTAG : REF_INVOKEINTERFACE, REF_NEWINVOKESPECIAL, ...\n-                    \/\/ normal JASM\n-                    subTag = parser.parseSubtag();\n-\/\/                    subtagCell = new ConstCell(subtag.value());\n-                    scanner.expect(Token.COLON);\n-                    if (scanner.token == Token.CPINDEX) {\n-                        \/\/ CODETOOLS-7901522: Jasm doesn't allow creating REF_invoke* referring an InterfaceMethod\n-                        \/\/ Parsing the case when refCell is CP index (#1)\n-                        \/\/ const #1 = InterfaceMethod m:\"()V\";\n-                        \/\/ const #2 = MethodHandle REF_invokeSpecial:#1;\n-                        int cpx = scanner.intValue;\n-                        refCell = parser.pool.getCell(cpx);\n-                        scanner.scan();\n-                    } else {\n-                        refCell = parser.parseMethodHandle(subTag);\n-                    }\n-                }\n-                obj = new ConstValue_MethodHandle(subTag, refCell);\n-            } catch (SyntaxError se) {\n-                syntaxError = se;\n-            }\n-            return obj;\n-        }\n-\n-        private <T extends ConstValue_Pair<ConstValue_Class, ConstValue_NameAndType>> T visitMember(ConstType tag) {\n-            traceMethodInfoLn();\n-            T constValue = null;\n-            try {\n-                Token prevToken = scanner.token;\n-                ConstCell firstName;\n-                ConstCell<ConstValue_Class> ClassCell;\n-                ConstCell<ConstValue_NameAndType> NameCell, NapeCell;\n-                firstName = parser.parseConstantClassInfo(false);\n-                if (scanner.token == Token.FIELD) { \/\/ DOT\n-                    scanner.scan();\n-                    if (prevToken == Token.CPINDEX) {\n-                        ClassCell = firstName;\n-                    } else {\n-                        ClassCell = parser.pool.findCell(ConstType.CONSTANT_CLASS, firstName);\n-                    }\n-                    NameCell = parser.parseName();\n-                } else {\n-                    \/\/ no class provided - assume current class\n-                    if (parser.classData.coreClasses.this_class().isSet() ||\n-                            parser.classData.coreClasses.this_class().ref == null) {\n-                        ClassCell = (ConstCell<ConstValue_Class>) parser.classData.coreClasses.this_class();\n-                    } else {\n-                        ClassCell = parser.pool.findCell((ConstValue_Class) parser.classData.coreClasses.this_class().ref);\n-                    }\n-                    NameCell = firstName;\n-                }\n-                if (scanner.token == Token.COLON) {\n-                    \/\/ name and type separately\n-                    scanner.scan();\n-                    NapeCell = parser.pool.findCell(ConstType.CONSTANT_NAMEANDTYPE, NameCell, parser.parseName());\n-                } else {\n-                    \/\/ name and type as single name\n-                    NapeCell = NameCell;\n-                }\n-                switch (tag) {\n-                    case CONSTANT_INTERFACEMETHODREF -> constValue = (T) new ConstValue_InterfaceMethodRef(ClassCell, NapeCell);\n-                    case CONSTANT_METHODREF -> constValue = (T) new ConstValue_MethodRef(ClassCell, NapeCell);\n-                    case CONSTANT_FIELDREF -> constValue = (T) new ConstValue_FieldRef(ClassCell, NapeCell);\n-                }\n-                if (constValue == null) {\n-                    environment.error(\"err.invalid.type\", tag.printVal());\n-                    throw new SyntaxError().setFatal();\n-                }\n-            } catch (SyntaxError se) {\n-                syntaxError = se;\n-            }\n-\n-            return constValue;\n-        }\n-\n-        @Override\n-        public ConstValue<?> visitField() {\n-            traceMethodInfoLn();\n-            return visitMember(ConstType.CONSTANT_FIELDREF);\n-        }\n-\n-        @Override\n-        public ConstValue<?> visitMethod() {\n-            traceMethodInfoLn();\n-            return visitMember(ConstType.CONSTANT_METHODREF);\n-        }\n-\n-        @Override\n-        public ConstValue<?> visitInterfaceMethod() {\n-            traceMethodInfoLn();\n-            return visitMember(ConstType.CONSTANT_INTERFACEMETHODREF);\n-        }\n-\n-        @Override\n-        public ConstValue<?> visitNameAndType() {\n-            traceMethodInfoLn();\n-            ConstValue_NameAndType obj = null;\n-            try {\n-                ConstCell<?> NameCell = parser.parseName(), TypeCell;\n-                scanner.expect(Token.COLON);\n-                TypeCell = parser.parseName();\n-                obj = new ConstValue_NameAndType((ConstCell<ConstValue_UTF8>) NameCell, (ConstCell<ConstValue_UTF8>) TypeCell);\n-            } catch (SyntaxError se) {\n-                syntaxError = se;\n-            }\n-            return obj;\n-        }\n-\n-        @Override\n-        public ConstValue_InvokeDynamic visitInvokeDynamic() {\n-            traceMethodInfoLn();\n-            final BiFunction<BootstrapMethodData, ConstCell<?>, ConstValue_InvokeDynamic> ctor =\n-                    ConstValue_InvokeDynamic::new;\n-            return visitBsm(ctor);\n-        }\n-\n-        @Override\n-        public ConstValue_Dynamic visitDynamic() {\n-            traceMethodInfoLn();\n-            final BiFunction<BootstrapMethodData, ConstCell<?>, ConstValue_Dynamic> ctor =\n-                    ConstValue_Dynamic::new;\n-            return visitBsm(ctor);\n-        }\n-\n-        private <E extends ConstValue_BootstrapMethod> E visitBsm(BiFunction<BootstrapMethodData, ConstCell<?>, E> ctor) {\n-            E obj = null;\n-            try {\n-                if (scanner.token == Token.INTVAL) {\n-                    \/\/ Handle explicit constant pool form\n-                    int bsmIndex = scanner.intValue;\n-                    scanner.scan();\n-\n-                    scanner.expect(Token.COLON);\n-\n-                    if (scanner.token != Token.CPINDEX) {\n-                        environment.traceln(\"token=\" + scanner.token);\n-                        environment.error(scanner.pos, \"err.token.expected\", \"<CPINDEX>\");\n-                        throw new SyntaxError();\n-                    }\n-                    int cpx = scanner.intValue;\n-                    scanner.scan();\n-                    \/\/ Put a placeholder in place of BSM.\n-                    \/\/ resolve placeholder after the attributes are scanned.\n-                    BootstrapMethodData bsmData = new BootstrapMethodData(bsmIndex);\n-                    obj = ctor.apply(bsmData, parser.pool.getCell(cpx));\n-                } else {\n-                    \/\/ Handle full form\n-                    ConstCell<?> MHCell = parser.pool.findCell(parseConstValue(ConstType.CONSTANT_METHODHANDLE));\n-                    scanner.expect(Token.COLON);\n-                    ConstCell<?> NapeCell = parser.pool.findCell(parseConstValue(ConstType.CONSTANT_NAMEANDTYPE));\n-                    if (scanner.token == Token.LBRACE) {\n-                        ParserCP.this.lbrace++;\n-                        scanner.scan();\n-                    }\n-                    ArrayList<ConstCell<?>> bsm_args = new ArrayList<>(256);\n-                    while (true) {\n-                        if (ParserCP.this.lbrace > 0) {\n-                            if (scanner.token == Token.RBRACE) {\n-                                ParserCP.this.lbrace--;\n-                                scanner.scan();\n-                                break;\n-                            } else if (scanner.token == Token.SEMICOLON) {\n-                                scanner.expect(Token.RBRACE);\n-                            }\n-                        } else if (scanner.token == Token.SEMICOLON) {\n-                            break;\n-                        }\n-                        if (scanner.token == Token.COMMA) {\n-                            scanner.scan();\n-                        }\n-                        bsm_args.add(parseConstRef(null));\n-                    }\n-                    if (ParserCP.this.lbrace == 0) {\n-                        scanner.check(Token.SEMICOLON);\n-                    }\n-                    BootstrapMethodData bsmData = new BootstrapMethodData(MHCell, bsm_args);\n-                    parser.classData.addBootstrapMethod(bsmData);\n-                    obj = ctor.apply(bsmData, NapeCell);\n-                }\n-            } catch (SyntaxError se) {\n-                syntaxError = se;\n-            }\n-            return obj;\n-        }\n-    } \/\/ End Visitor\n-}\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/ParserCP.java","additions":0,"deletions":645,"binary":false,"changes":645,"status":"deleted"},{"patch":"@@ -1,405 +0,0 @@\n-\/*\n- * Copyright (c) 1996, 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.asmtools.jasm;\n-\n-import org.openjdk.asmtools.common.SyntaxError;\n-\n-import static org.openjdk.asmtools.jasm.JasmTokens.*;\n-import static org.openjdk.asmtools.jasm.ClassFileConst.*;\n-import static org.openjdk.asmtools.jasm.OpcodeTables.*;\n-import java.io.IOException;\n-import java.lang.reflect.Modifier;\n-\n-\/**\n- * Instruction Parser\n- *\n- * ParserInstr is a parser class owned by Parser.java. It is primarily responsible for\n- * parsing instruction byte codes.\n- *\/\n-public class ParserInstr extends ParseBase {\n-\n-    \/**\n-     * local handle for the constant parser - needed for parsing constants during\n-     * instruction construction.\n-     *\/\n-    private final ParserCP instructionParser;\n-\n-    \/**\n-     * Constructor\n-     * @param parser    parent, main parser\n-     * @param cpParser  constant pool parser\n-     *\/\n-    protected ParserInstr(Parser parser, ParserCP cpParser) throws IOException {\n-        super.init(parser);\n-        this.instructionParser = cpParser;\n-    }\n-\n-    \/**\n-     * Parse an instruction.\n-     *\/\n-    protected void parseInstr() throws SyntaxError, IOException {\n-        \/\/ ignore possible line numbers after java disassembler\n-        if (scanner.token == Token.INTVAL) {\n-            scanner.scan();\n-        }\n-        \/\/ ignore possible numeric labels after java disassembler\n-        if (scanner.token == Token.INTVAL) {\n-            scanner.scan();\n-        }\n-        if (scanner.token == Token.COLON) {\n-            scanner.scan();\n-        }\n-\n-        String mnemocode;\n-        int mnenoc_pos;\n-        for (;;) { \/\/ read labels\n-            if (scanner.token != Token.IDENT) {\n-                return;\n-            }\n-            mnemocode = scanner.idValue;\n-            mnenoc_pos = scanner.pos;\n-            scanner.scan();\n-            if (scanner.token != Token.COLON) {\n-                break;\n-            }\n-            \/\/ actually it was a label\n-            scanner.scan();\n-            parser.curCodeAttr.LabelDef(mnenoc_pos, mnemocode);\n-        }\n-\n-        Opcode opcode = OpcodeTables.opcode(mnemocode);\n-        if (opcode == null) {\n-            environment.error(mnenoc_pos, \"err.wrong.mnemocode\", mnemocode);\n-            throw new SyntaxError();\n-        }\n-        OpcodeType opcodeType = opcode.type();\n-\n-        Indexer arg = null;\n-        Object arg2 = null;\n-        StackMapData stackMapData;\n-\n-        scanner.debugScan(\" --IIIII---[ParserInstr:[parseInstr]:  (Pos: \" + mnenoc_pos + \") mnemocode: '\" + opcode.parseKey() + \"' \");\n-\n-        switch (opcodeType) {\n-            case NORMAL:\n-                switch (opcode) {\n-\n-                    \/\/ pseudo-instructions:\n-                    case opc_bytecode:\n-                        for (;;) {\n-                            parser.curCodeAttr.addInstr(mnenoc_pos, Opcode.opc_bytecode, parser.parseUInt(1), null);\n-                            if (scanner.token != Token.COMMA) {\n-                                return;\n-                            }\n-                            scanner.scan();\n-                        }\n-                    case opc_try:\n-                        for (;;) {\n-                            parser.curCodeAttr.beginTrap(scanner.pos, parser.parseIdent());\n-                            if (scanner.token != Token.COMMA) {\n-                                return;\n-                            }\n-                            scanner.scan();\n-                        }\n-                    case opc_endtry:\n-                        for (;;) {\n-                            parser.curCodeAttr.endTrap(scanner.pos, parser.parseIdent());\n-                            if (scanner.token != Token.COMMA) {\n-                                return;\n-                            }\n-                            scanner.scan();\n-                        }\n-                    case opc_catch:\n-                        parser.curCodeAttr.trapHandler(scanner.pos, parser.parseIdent(),\n-                                instructionParser.parseConstRef(ConstType.CONSTANT_CLASS));\n-                        return;\n-                    case opc_var:\n-                        for (;;) {\n-                            parser.parseLocVarDef();\n-                            if (scanner.token != Token.COMMA) {\n-                                return;\n-                            }\n-                            scanner.scan();\n-                        }\n-                    case opc_endvar:\n-                        for (;;) {\n-                            parser.parseLocVarEnd();\n-                            if (scanner.token != Token.COMMA) {\n-                                return;\n-                            }\n-                            scanner.scan();\n-                        }\n-                    case opc_locals_map:\n-                        stackMapData = parser.curCodeAttr.getStackMap();\n-                        if (stackMapData.localsMap != null) {\n-                            environment.error(scanner.pos, \"err.localsmap.repeated\");\n-                        }\n-                        DataVector localsMap = new DataVector();\n-                        stackMapData.localsMap = localsMap;\n-                        if (scanner.token == Token.SEMICOLON) {\n-                            return;  \/\/ empty locals_map allowed\n-                        }\n-                        for (;;) {\n-                            parser.parseMapItem(localsMap);\n-                            if (scanner.token != Token.COMMA) {\n-                                return;\n-                            }\n-                            scanner.scan();\n-                        }\n-                    case opc_stack_map:\n-                        stackMapData = parser.curCodeAttr.getStackMap();\n-                        if (stackMapData.stackMap != null) {\n-                            environment.error(scanner.pos, \"err.stackmap.repeated\");\n-                        }\n-                        DataVector stackMap = new DataVector();\n-                        stackMapData.stackMap = stackMap;\n-                        if (scanner.token == Token.SEMICOLON) {\n-                            return;  \/\/ empty stack_map allowed\n-                        }\n-                        for (;;) {\n-                            parser.parseMapItem(stackMap);\n-                            if (scanner.token != Token.COMMA) {\n-                                return;\n-                            }\n-                            scanner.scan();\n-                        }\n-                    case opc_stack_frame_type:\n-                        stackMapData = parser.curCodeAttr.getStackMap();\n-                        if (stackMapData.isSet()) {\n-                            environment.error(scanner.pos, \"err.stackmaptable.repeated\");\n-                        }\n-                        stackMapData.setScannerPosition(scanner.pos).setStackFrameType(parser.parseIdent());\n-                        return;\n-\n-                    \/\/ normal instructions:\n-                    case opc_aload:\n-                    case opc_astore:\n-                    case opc_fload:\n-                    case opc_fstore:\n-                    case opc_iload:\n-                    case opc_istore:\n-                    case opc_lload:\n-                    case opc_lstore:\n-                    case opc_dload:\n-                    case opc_dstore:\n-                    case opc_ret:\n-                    case opc_aload_w:\n-                    case opc_astore_w:\n-                    case opc_fload_w:\n-                    case opc_fstore_w:\n-                    case opc_iload_w:\n-                    case opc_istore_w:\n-                    case opc_lload_w:\n-                    case opc_lstore_w:\n-                    case opc_dload_w:\n-                    case opc_dstore_w:\n-                    case opc_ret_w:\n-                        \/\/ loc var\n-                        arg = parser.parseLocVarRef();\n-                        break;\n-                    case opc_iinc: \/\/ loc var, const\n-                        arg = parser.parseLocVarRef();\n-                        scanner.expect(Token.COMMA);\n-                        arg2 = parser.parseInt(opcode.parseKey(), 1);\n-                        break;\n-                    case opc_tableswitch:\n-                    case opc_lookupswitch:\n-                        arg2 = parseSwitchTable();\n-                        break;\n-                    case opc_newarray: {\n-                        int type;\n-                        if (scanner.token == Token.INTVAL) {\n-                            type = scanner.intValue;\n-                        } else if ((type = ClassFileConst.basicTypeValue(scanner.idValue)) == -1) {\n-                            environment.error(scanner.pos, \"err.array.type.expected\");\n-                            throw new SyntaxError();\n-                        }\n-                        scanner.scan();\n-                        arg = new Indexer(type);\n-                        break;\n-                    }\n-                    case opc_new:\n-                    case opc_anewarray:\n-                    case opc_instanceof:\n-                    case opc_checkcast:\n-                    case opc_aconst_init:  \/\/ Valhalla\n-                        arg = instructionParser.parseConstRef(ConstType.CONSTANT_CLASS);\n-                        break;\n-                    case opc_bipush:\n-                        arg = parser.parseInt(opcode.parseKey(), 1);\n-                        break;\n-                    case opc_sipush:\n-                        arg = parser.parseInt(opcode.parseKey(), 2);\n-                        break;\n-                    case opc_ldc:\n-                    case opc_ldc_w:\n-                    case opc_ldc2_w:\n-                        arg = instructionParser.parseConstRef(null);\n-                        break;\n-                    case opc_putstatic:\n-                    case opc_getstatic:\n-                    case opc_putfield:\n-                    case opc_getfield:\n-                    case opc_withfield:     \/\/ Valhalla\n-                        arg = instructionParser.parseConstRef(ConstType.CONSTANT_FIELDREF);\n-                        break;\n-                    case opc_invokevirtual:\n-                        arg = instructionParser.parseConstRef(ConstType.CONSTANT_METHODREF);\n-                        break;\n-                    case opc_invokestatic:\n-                    case opc_invokespecial:\n-                        ConstType ctype01  = ConstType.CONSTANT_METHODREF;\n-                        ConstType ctype02  = ConstType.CONSTANT_INTERFACEMETHODREF;\n-                        if(Modifier.isInterface(this.parser.classData.access)) {\n-                            ctype01  = ConstType.CONSTANT_INTERFACEMETHODREF;\n-                            ctype02  = ConstType.CONSTANT_METHODREF;\n-                        }\n-                        arg = instructionParser.parseConstRef(ctype01, ctype02);\n-                        break;\n-                    case opc_jsr:\n-                    case opc_goto:\n-                    case opc_ifeq:\n-                    case opc_ifge:\n-                    case opc_ifgt:\n-                    case opc_ifle:\n-                    case opc_iflt:\n-                    case opc_ifne:\n-                    case opc_if_icmpeq:\n-                    case opc_if_icmpne:\n-                    case opc_if_icmpge:\n-                    case opc_if_icmpgt:\n-                    case opc_if_icmple:\n-                    case opc_if_icmplt:\n-                    case opc_if_acmpeq:\n-                    case opc_if_acmpne:\n-                    case opc_ifnull:\n-                    case opc_ifnonnull:\n-                    case opc_jsr_w:\n-                    case opc_goto_w:\n-                        arg = parseLabelRef();\n-                        break;\n-                    case opc_invokeinterface:\n-                        arg = instructionParser.parseConstRef(ConstType.CONSTANT_INTERFACEMETHODREF);\n-                        scanner.expect(Token.COMMA);\n-                        arg2 = parser.parseUInt(1);\n-                        break;\n-                    case opc_invokedynamic:\n-                        arg = instructionParser.parseConstRef(ConstType.CONSTANT_INVOKEDYNAMIC);\n-                        break;\n-\n-                    case opc_multianewarray:\n-                        arg = instructionParser.parseConstRef(ConstType.CONSTANT_CLASS);\n-                        scanner.expect(Token.COMMA);\n-                        arg2 = parser.parseUInt(1);\n-                        break;\n-                    case opc_wide:\n-                    case opc_nonpriv:\n-                    case opc_priv:\n-                        int opc2 = (opcode.value() << 8) | parser.parseUInt(1).cpIndex;\n-                        opcode = opcode(opc2);\n-                        break;\n-                }\n-                break;\n-            case WIDE:\n-                arg = parser.parseLocVarRef();\n-                if (opcode == Opcode.opc_iinc_w) { \/\/ loc var, const\n-                    scanner.expect(Token.COMMA);\n-                    arg2 = parser.parseInt(opcode.parseKey(),2);\n-                }\n-                break;\n-            case NONPRIVELEGED:\n-            case PRIVELEGED:\n-                break;\n-            default:\n-                environment.error(scanner.prevPos, \"err.wrong.mnemocode\", mnemocode);\n-                throw new SyntaxError();\n-        }\n-        parser.curCodeAttr.addInstr(mnenoc_pos, opcode, arg, arg2);\n-    } \/\/end parseInstr\n-\n-    \/**\n-     * Parse a Switch Table. return value: SwitchTable.\n-     *\/\n-    protected SwitchTable parseSwitchTable() throws SyntaxError, IOException {\n-        scanner.expect(Token.LBRACE);\n-        Indexer label;\n-        int numpairs = 0, key;\n-        SwitchTable table = new SwitchTable(environment);\n-tableScan:\n-        {\n-            while (numpairs < 1000) {\n-                switch (scanner.token) {\n-                    case INTVAL:\n-                        key = scanner.intValue * scanner.sign;\n-                        scanner.scan();\n-                        scanner.expect(Token.COLON);\n-                        table.addEntry(key, parseLabelRef());\n-                        numpairs++;\n-                        if (scanner.token != Token.SEMICOLON) {\n-                            break tableScan;\n-                        }\n-                        scanner.scan();\n-                        break;\n-                    case DEFAULT:\n-                        scanner.scan();\n-                        scanner.expect(Token.COLON);\n-                        if (table.defLabel != null) {\n-                            environment.error(\"err.default.redecl\");\n-                        }\n-                        table.defLabel = parseLabelRef();\n-                        if (scanner.token != Token.SEMICOLON) {\n-                            break tableScan;\n-                        }\n-                        scanner.scan();\n-                        break;\n-                    default:\n-                        break tableScan;\n-                } \/\/ end switch\n-            } \/\/ while (numpairs<1000)\n-            environment.error(\"err.long.switchtable\", \"1000\");\n-        } \/\/ end tableScan\n-        scanner.expect(Token.RBRACE);\n-        return table;\n-    } \/\/ end parseSwitchTable\n-\n-    \/**\n-     * Parse a label instruction argument\n-     *\/\n-    protected Indexer parseLabelRef() throws SyntaxError, IOException {\n-        switch (scanner.token) {\n-            case INTVAL: {\n-                int v = scanner.intValue * scanner.sign;\n-                scanner.scan();\n-                return new Indexer(v);\n-            }\n-            case IDENT: {\n-                String label = scanner.stringValue;\n-                scanner.scan();\n-                return parser.curCodeAttr.LabelRef(label);\n-            }\n-        }\n-        environment.error(\"err.label.expected\");\n-        throw new SyntaxError();\n-    }\n-\n-}\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/ParserInstr.java","additions":0,"deletions":405,"binary":false,"changes":405,"status":"deleted"},{"patch":"@@ -39,1 +39,1 @@\n-public class PermittedSubclassesAttr extends ClassArrayAttr {\n+public class PermittedSubclassesAttr extends ArrayAttr {\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/PermittedSubclassesAttr.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,33 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.asmtools.jasm;\n-\n-import org.openjdk.asmtools.common.structure.EAttribute;\n-\n-import java.util.List;\n-\n-public class PreloadAttr extends ClassArrayAttr {\n-    public PreloadAttr(ConstantPool pool, List<ConstCell> classes) {\n-        super(pool, EAttribute.ATT_Preload, classes);\n-    }\n-}\n\\ No newline at end of file\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/PreloadAttr.java","additions":0,"deletions":33,"binary":false,"changes":33,"status":"deleted"},{"patch":"@@ -26,0 +26,1 @@\n+import org.openjdk.asmtools.common.structure.ELocation;\n@@ -91,0 +92,1 @@\n+            this.attributeLocation = ELocation.record_component_info;\n@@ -111,1 +113,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/RecordData.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-\n@@ -29,0 +28,2 @@\n+import java.util.Arrays;\n+import java.util.List;\n@@ -30,0 +31,2 @@\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n@@ -31,1 +34,0 @@\n-import static java.lang.String.format;\n@@ -33,1 +35,0 @@\n-import static org.openjdk.asmtools.common.CompilerConstants.OFFSET_BITS;\n@@ -59,1 +60,1 @@\n-    protected int pos;\n+    protected long pos;\n@@ -75,1 +76,1 @@\n-    protected int prevPos;\n+    protected long prevPos;\n@@ -145,1 +146,1 @@\n-     * Expects a token, scans the next token or throws an exception.\n+     * Expects the token, scans the next token or throws an exception.\n@@ -153,1 +154,53 @@\n-     * Checks a token, throws an exception if not the same\n+     * Expects an identifier token with parsed content of the token,\n+     * scans the next token or throws an exception.\n+     *\/\n+    protected final void expectIdentContent(Token t) throws SyntaxError {\n+        if (token != Token.IDENT || !stringValue.equals(t.parseKey())) {\n+            environment.throwErrorException(pos, \"err.token.expected\", \"\\\"\" + t.parseKey() + \"\\\"\");\n+        }\n+        scan();\n+    }\n+\n+    protected final void expectOneOf(List<String> identifiers, Token... tokens) throws SyntaxError {\n+        boolean foundTokens = expectOneOfToken(tokens),\n+                foundIdents = expectOneOfIdent(identifiers.toArray(new String[0]));\n+\n+        if (!foundTokens && !foundIdents) {\n+            String list = identifiers.stream().map(\"\\\"%s\\\"\"::formatted).\n+                    collect(Collectors.joining(\",\"));\n+            list = \"[ %s,%s ]\".formatted(list, Arrays.stream(tokens).\n+                    map(t -> \"\\\"%s\\\"\".formatted(t.parseKey())).\n+                    collect(Collectors.joining(\",\")));\n+            environment.error(pos, \"err.one.of.tokens.expected\", list);\n+        }\n+    }\n+\n+\n+    \/**\n+     * Expects one of the token in the list, scans the next token or throws an exception.\n+     *\/\n+    protected final boolean expectOneOfToken(Token... tokens) throws SyntaxError {\n+        for (Token t : tokens) {\n+            if (token == t) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    \/**\n+     * Expects one of Identifier in the list, scans the next token or throws an exception.\n+     *\/\n+    protected final boolean expectOneOfIdent(String... identifiers) throws SyntaxError {\n+        if (token == Token.IDENT) {\n+            for (String ident : identifiers) {\n+                if (stringValue.equals(ident)) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    \/**\n+     * Checks the token, throws an exception if different\n@@ -164,2 +217,0 @@\n-                environment.traceln(\"<<<<<PROBLEM>>>>>>>: \");\n-                throw new SyntaxError();\n@@ -286,0 +337,1 @@\n+        int prevCh = ch;\n@@ -324,2 +376,2 @@\n-                stringValue = Character.toString((char) ch);\n-                environment.error(environment.getPosition(), \"err.invalid.number\", stringValue);\n+                stringValue = Character.toString((char) prevCh);\n+                environment.throwErrorException(environment.getPosition(), \"err.invalid.number\", stringValue);\n@@ -551,2 +603,2 @@\n-    private int scanEscapeChar() {\n-        int p = environment.getPosition();\n+    private long scanEscapeChar() {\n+        long p = environment.getPosition();\n@@ -643,1 +695,1 @@\n-                    int c = scanEscapeChar();\n+                    long c = scanEscapeChar();\n@@ -679,1 +731,1 @@\n-                    int p = environment.getPosition();\n+                    long p = environment.getPosition();\n@@ -733,1 +785,1 @@\n-                        int p = environment.getPosition();\n+                        long p = environment.getPosition();\n@@ -743,1 +795,1 @@\n-        traceMethodInfoLn(format(\"token = %s value = '%s'\", token, idValue));\n+        traceMethodInfoLn(\"token = %s value = '%s'\".formatted(token, idValue));\n@@ -871,3 +923,3 @@\n-\n-                environment.traceln(\"Funny char with code=\" + ch + \" at: \" +\n-                        environment.lineNumber(pos) + \"\/\" + (pos & ((1 << OFFSET_BITS) - 1)));\n+                long ln = environment.lineNumber(pos);\n+                long lineOffset = environment.lineOffset(ln, pos);\n+                environment.traceln(() -> \"Funny char with code='%c' at %d:%d\".formatted(ch, ln, lineOffset));\n@@ -877,2 +929,3 @@\n-                environment.traceln(\"Funny char with code=\" + ch + \" at: \" +\n-                        environment.lineNumber(pos) + \"\/\" + (pos & ((1 << OFFSET_BITS) - 1)));\n+                long ln = environment.lineNumber(pos);\n+                long lineOffset = environment.lineOffset(ln, pos);\n+                environment.traceln(() -> \"Funny char with code='%c' at %d:%d\".formatted(ch, ln, lineOffset));\n@@ -885,4 +938,15 @@\n-    protected void debugScan(String dbstr) {\n-        if (token == null) {\n-            environment.traceln(dbstr + \"<<<NULL TOKEN>>>\");\n-            return;\n+    protected void debugScan(String debStr) {\n+        if (environment.isTraceFlag()) {\n+            if (token == null) {\n+                environment.traceln(debStr.concat(\"<<<NULL TOKEN>>>\"));\n+                return;\n+            }\n+            environment.trace(debStr.concat(token.toString()));\n+            switch (token) {\n+                case IDENT -> environment.traceln(\" = '\" + stringValue + \"' {idValue = '\" + idValue + \"'}\");\n+                case STRINGVAL -> environment.traceln(\" = {stringValue}: \\\"\" + stringValue + \"\\\"\");\n+                case INTVAL -> environment.traceln(\" = {intValue}: \" + intValue);\n+                case FLOATVAL -> environment.traceln(\" = {floatValue}: \" + floatValue);\n+                case DOUBLEVAL -> environment.traceln(\" = {doubleValue}: \" + doubleValue);\n+                default -> environment.traceln(\"\");\n+            }\n@@ -890,8 +954,7 @@\n-        environment.trace(dbstr + token);\n-        switch (token) {\n-            case IDENT -> environment.traceln(\" = '\" + stringValue + \"' {idValue = '\" + idValue + \"'}\");\n-            case STRINGVAL -> environment.traceln(\" = {stringValue}: \\\"\" + stringValue + \"\\\"\");\n-            case INTVAL -> environment.traceln(\" = {intValue}: \" + intValue);\n-            case FLOATVAL -> environment.traceln(\" = {floatValue}: \" + floatValue);\n-            case DOUBLEVAL -> environment.traceln(\" = {doubleValue}: \" + doubleValue);\n-            default -> environment.traceln(\"\");\n+    }\n+\n+    protected void debugScan(long position, String debStr) {\n+        if (environment.isTraceFlag()) {\n+            long lineNumber = environment.lineNumber(position);\n+            long linePos =   environment.lineOffset(lineNumber, position);\n+            debugScan(\"[%4d,%-2d] \".formatted(lineNumber,linePos).concat(debStr));\n@@ -900,0 +963,1 @@\n+\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/Scanner.java","additions":99,"deletions":35,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,2 @@\n-import static org.openjdk.asmtools.common.structure.StackMap.FrameType.SAME_FRAME;\n+import static org.openjdk.asmtools.common.structure.StackMap.EntryType.*;\n+import static org.openjdk.asmtools.jasm.JasmTokens.Token.*;\n@@ -40,1 +41,1 @@\n- * stack_map_frame entries[number_of_entries];\n+ * stack_map_entry entries[number_of_entries];\n@@ -44,0 +45,22 @@\n+    static final int UNDEFINED = -1;\n+    final JasmEnvironment environment;\n+    private long scannerPosition = 0;\n+    \/\/ Indicates that a method's Code attribute has a StackMapTable attribute (CFV >= 50.0) or has\n+    \/\/ StackMap_attribute {\n+    \/\/    u2 attribute_name_index;\n+    \/\/    u4 attribute_length;\n+    \/\/    u2 number_of_entries;\n+    \/\/    stack_map_entry entries[number_of_entries];\n+    \/\/} where\n+    \/\/ stack_map_entry {\n+    \/\/    u2 offset;\n+    \/\/    u2 number_of_locals;\n+    \/\/    verification_type_info locals[number_of_locals];\n+    \/\/    u2 number_of_stack_items;\n+    \/\/    verification_type_info stack[number_of_stack_items];\n+    \/\/}\n+    final boolean hasStackMapTable;\n+    private int pc = UNDEFINED;\n+    private int offset = UNDEFINED;\n+    private StackMap.EntryType entryType = UNKNOWN_TYPE;\n+    DataVector<? extends Indexer> localsMap, stackMap, unsetFields;\n@@ -45,11 +68,8 @@\n-    \/\/ Indicates that a method's Code attribute has a StackMapTable attribute\n-    boolean hasStackMapTable = false;\n-    DataVector<? extends Indexer> localsMap, stackMap;\n-    JasmEnvironment environment;\n-    private int pc;\n-    private int scannerPosition = 0;\n-    private int offset;\n-    private int frameTypeTag;\n-    private String stackFrameType = null;\n-\n-    StackMapData(JasmEnvironment environment) {\n+    \/**\n+     * In a class file whose version number is 50.0 or above, if a method's Code attribute does not have a StackMapTable attribute,\n+     * it has an implicit stack map attribute (§4.10.1). This implicit stack map attribute is equivalent to a StackMapTable\n+     * attribute with number_of_entries equal to zero.\n+     *\n+     * @param hasStackMapTable false if a method's Code attribute does not have a StackMapTable attribute\n+     *\/\n+    StackMapData(JasmEnvironment environment, boolean hasStackMapTable) {\n@@ -57,0 +77,1 @@\n+        this.hasStackMapTable = hasStackMapTable;\n@@ -64,3 +85,12 @@\n-    StackMapData setStackFrameType(String stackFrameType) {\n-        \/\/ TODO: check the case stackFrameType == null && \"xxx\" && that pc is valid\n-        Objects.requireNonNull(stackFrameType,\n+    StackMapData setOffset(int offset) {\n+        this.offset = offset;\n+        return this;\n+    }\n+\n+    StackMapData setPC(int pc) {\n+        this.pc = pc;\n+        return this;\n+    }\n+\n+    StackMapData setStackFrameTypeByName(String stackFrameTypeName) {\n+        Objects.requireNonNull(stackFrameTypeName,\n@@ -68,4 +98,3 @@\n-        this.stackFrameType = stackFrameType;\n-        this.frameTypeTag = StackMap.getFrameTypeTag(stackFrameType);\n-        if (!StackMap.isValidFrameType(this.frameTypeTag)) {\n-            environment.error(scannerPosition, \"err.invalid.stack.frame.type\", stackFrameType);\n+        this.entryType = StackMap.getEntryTypeByName(stackFrameTypeName);\n+        if (this.entryType == UNKNOWN_TYPE) {\n+            environment.error(scannerPosition, \"err.invalid.stack.frame.type\", stackFrameTypeName);\n@@ -77,3 +106,1 @@\n-     * In a class file whose version number is 50.0 or above, if a method's Code attribute does not have a StackMapTable attribute,\n-     * it has an implicit stack map attribute (§4.10.1). This implicit stack map attribute is equivalent to a StackMapTable\n-     * attribute with number_of_entries equal to zero.\n+     * Sets Stack Frame type by number in table presentation: frame_type = 252\n@@ -81,1 +108,2 @@\n-     * @param hasStackMapTable false if a method's Code attribute does not have a StackMapTable attribute\n+     * @param stackFrameTypeValue frame type tag\n+     * @return StackMapData object\n@@ -83,7 +111,7 @@\n-    StackMapData setIsStackMapTable(boolean hasStackMapTable) {\n-        this.hasStackMapTable = hasStackMapTable;\n-        return this;\n-    }\n-\n-    StackMapData setPC(int pc) {\n-        this.pc = pc;\n+    StackMapData setStackFrameType(int stackFrameTypeValue) {\n+        this.entryType = StackMap.EntryType.getByTag(stackFrameTypeValue);\n+        if (this.entryType == SAME_FRAME) {\n+            this.offset = stackFrameTypeValue;\n+        } else if (this.entryType == SAME_LOCALS_1_STACK_ITEM_FRAME) {\n+            this.offset = stackFrameTypeValue - SAME_LOCALS_1_STACK_ITEM_FRAME.fromTag();\n+        }\n@@ -93,1 +121,1 @@\n-    StackMapData setScannerPosition(int scannerPosition) {\n+    StackMapData setScannerPosition(long scannerPosition) {\n@@ -103,2 +131,2 @@\n-    boolean isSet() {\n-        return this.stackFrameType != null;\n+    boolean isFrameTypeSet() {\n+        return hasStackMapTable ? this.entryType != UNKNOWN_TYPE : this.pc != UNDEFINED;\n@@ -107,4 +135,9 @@\n-    @Override\n-    public int getLength() {\n-        int length = 0;\n-        StackMap.FrameType frameType = StackMap.FrameType.FULL_FRAME;\n+    \/**\n+     * The early_larval_frame wraps a base_frame.\n+     * As a wrapper, it doesn't supply the offset_delta.\n+     *\n+     * @return true if the StackMapData is a base_frame wrapper.\n+     *\/\n+    boolean isWrapper() {\n+        return hasStackMapTable && entryType == EARLY_LARVAL;\n+    }\n@@ -112,3 +145,47 @@\n-        if (hasStackMapTable) {\n-            if (stackFrameType != null) {\n-                frameType = StackMap.stackMapFrameType(frameTypeTag);\n+    @Override\n+    public boolean isCountable() {\n+        return !isWrapper();\n+    }\n+    \/**\n+     * Checks whether all fields corresponding to the current frame type are set.\n+     *\n+     * @return null if all fields are sufficiently valid to be written for the current stack map entry otherwise\n+     * expected token\n+     *\/\n+    JasmTokens.Token checkIntegrity() {\n+        switch (entryType) {\n+            case SAME_FRAME -> {                                   \/\/ 0-63\n+                return null;\n+            }\n+            case SAME_LOCALS_1_STACK_ITEM_FRAME -> {                \/\/ 64 - 127\n+                return isFull(stackMap) ? null : STACKMAP;\n+            }\n+            case EARLY_LARVAL -> {                                  \/\/ 246\n+                return isFull(unsetFields) ? null : UNSETFIELDS;\n+            }\n+            case SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED -> {       \/\/ 247\n+                if (offset == UNDEFINED) {\n+                    return OFFSETDELTA;\n+                }\n+                return isFull(stackMap) ? null : STACKMAP;\n+            }\n+            case CHOP_1_FRAME, CHOP_2_FRAME, CHOP_3_FRAME,          \/\/ 248-250\n+                 SAME_FRAME_EXTENDED -> {                           \/\/ 251\n+                return (offset == UNDEFINED) ? OFFSETDELTA : null;\n+            }\n+            case APPEND_FRAME -> {                                  \/\/ 252-254\n+                if (offset == UNDEFINED) {\n+                    return OFFSETDELTA;\n+                }\n+                return isFull(localsMap) ? null : LOCALSMAP;\n+            }\n+            case FULL_FRAME -> {                                    \/\/ 255\n+                if (offset == UNDEFINED) {\n+                    return OFFSETDELTA;\n+                }\n+                if (!isFull(localsMap)) {\n+                    return LOCALSMAP;\n+                }\n+                if (!isFull(stackMap)) {\n+                    return STACKMAP;\n+                }\n@@ -116,1 +193,0 @@\n-            length += 1;\n@@ -118,0 +194,2 @@\n+        return null;\n+    }\n@@ -119,1 +197,17 @@\n-        switch (frameType) {\n+    private boolean isFull(DataVector<?>... maps) {\n+        for (DataVector map : maps) {\n+            if (map == null)\n+                return false;\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public int getLength() {\n+        int length = (hasStackMapTable) ? 1 : 0;\n+        if (!isFrameTypeSet() || !hasStackMapTable) {\n+            \/\/ in the case when either stack_frame_type or frame_type wasn't meet or\n+            \/\/ StackMap_attribute instead of StackMapTable_attribute\n+            entryType = FULL_FRAME;\n+        }\n+        switch (entryType) {\n@@ -125,1 +219,1 @@\n-            case SAME_LOCALS_1_STACK_ITEM_EXTENDED_FRAME:\n+            case SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED:\n@@ -128,0 +222,3 @@\n+            case EARLY_LARVAL:\n+                length += 2 + (unsetFields == null ? 0 : unsetFields.getLength()-2);\n+                break;\n@@ -131,1 +228,1 @@\n-            case SAME_FRAME_EX:\n+            case SAME_FRAME_EXTENDED:\n@@ -149,6 +246,17 @@\n-        StackMap.FrameType frameType = StackMap.FrameType.FULL_FRAME;\n-\n-        if (hasStackMapTable) {\n-            if (stackFrameType != null) {\n-                frameType = StackMap.stackMapFrameType(frameTypeTag);\n-            }\n+        if (!hasStackMapTable) {\n+            \/\/ Indicates that a method's Code attribute doesn't have a StackMapTable attribute (CFV >= 50.0)\n+            \/\/ but has\n+            \/\/ StackMap_attribute {\n+            \/\/    u2 attribute_name_index;\n+            \/\/    u4 attribute_length;\n+            \/\/    u2 number_of_entries;\n+            \/\/    stack_map_entry entries[number_of_entries];\n+            \/\/} where\n+            \/\/ stack_map_entry {\n+            \/\/    u2 offset;\n+            \/\/    u2 number_of_locals;\n+            \/\/    verification_type_info locals[number_of_locals];\n+            \/\/    u2 number_of_stack_items;\n+            \/\/    verification_type_info stack[number_of_stack_items];\n+            \/\/}\n+            entryType = FULL_FRAME;\n@@ -157,1 +265,9 @@\n-        switch (frameType) {\n+        switch (entryType) {\n+            case EARLY_LARVAL -> {\n+                out.writeByte(entryType.fromTag());\n+                if (unsetFields == null) {\n+                    out.writeShort(0);\n+                } else {\n+                    unsetFields.write(out);\n+                }\n+            }\n@@ -160,1 +276,1 @@\n-                    environment.error(scannerPosition, \"err.invalid.offset.frame.type\", offset, frameType.printName());\n+                    environment.error(scannerPosition, \"err.invalid.offset.frame.type\", offset, entryType.printName());\n@@ -167,1 +283,1 @@\n-                    environment.error(scannerPosition, \"err.no.stack.map\", frameType.printName());\n+                    environment.error(scannerPosition, \"err.no.stack.map\", entryType.printName());\n@@ -171,1 +287,1 @@\n-                    environment.error(scannerPosition, \"err.should.be.only.one.stack.map.element\", frameType.printName());\n+                    environment.error(scannerPosition, \"err.should.be.only.one.stack.map.element\", entryType.printName());\n@@ -176,1 +292,2 @@\n-                    environment.error(scannerPosition, \"err.invalid.offset.frame.type\", offset, frameType.printName());\n+                    environment.error(scannerPosition, \"err.invalid.offset.frame.type\", offset, entryType.printName());\n+                    break;\n@@ -178,1 +295,1 @@\n-                out.writeByte(frameType.fromTag() + offset);\n+                out.writeByte(entryType.fromTag() + offset);\n@@ -181,1 +298,1 @@\n-            case SAME_LOCALS_1_STACK_ITEM_EXTENDED_FRAME -> {\n+            case SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED -> {\n@@ -183,1 +300,1 @@\n-                    environment.error(scannerPosition, \"err.no.locals.map\", frameType.printName());\n+                    environment.error(scannerPosition, \"err.no.locals.map\", entryType.printName());\n@@ -187,1 +304,1 @@\n-                    environment.error(scannerPosition, \"err.should.be.only.one.stack.map.element\", frameType.printName());\n+                    environment.error(scannerPosition, \"err.should.be.only.one.stack.map.element\", entryType.printName());\n@@ -190,1 +307,1 @@\n-                out.writeByte(frameType.fromTag());\n+                out.writeByte(entryType.fromTag());\n@@ -194,1 +311,1 @@\n-            case CHOP_1_FRAME, CHOP_2_FRAME, CHOP_3_FRAME, SAME_FRAME_EX -> {\n+            case CHOP_1_FRAME, CHOP_2_FRAME, CHOP_3_FRAME, SAME_FRAME_EXTENDED -> {\n@@ -197,1 +314,1 @@\n-                    environment.error(scannerPosition, \"err.unexpected.stack.maps\", frameType.printName());\n+                    environment.error(scannerPosition, \"err.unexpected.stack.maps\", entryType.printName());\n@@ -201,1 +318,1 @@\n-                    environment.error(scannerPosition, \"err.unexpected.locals.maps\", frameType.printName());\n+                    environment.error(scannerPosition, \"err.unexpected.locals.maps\", entryType.printName());\n@@ -207,1 +324,1 @@\n-                out.writeByte(frameType.fromTag());\n+                out.writeByte(entryType.fromTag());\n@@ -212,1 +329,1 @@\n-                    environment.error(scannerPosition, \"err.no.locals.map\", frameType.printName());\n+                    environment.error(scannerPosition, \"err.no.locals.map\", entryType.printName());\n@@ -219,1 +336,1 @@\n-                out.writeByte(frameType.fromTag() + localsMap.elements.size() - 1);\n+                out.writeByte(entryType.fromTag() + localsMap.elements.size() - 1);\n@@ -225,1 +342,2 @@\n-                    out.writeByte(frameType.fromTag());\n+                    \/\/ method's Code attribute has a StackMapTable attribute (CFV >= 50.0)\n+                    out.writeByte(entryType.fromTag());\n@@ -228,0 +346,1 @@\n+                    \/\/ method's Code attribute doesn't  has a StackMap attribute (CFV < 50.0)\n@@ -241,1 +360,1 @@\n-            default -> environment.error(scannerPosition, \"invalid.stack.frame.verificationType\", frameType.tagName());\n+            default -> environment.error(scannerPosition, \"err.stackmap.entry.type.not.set\", entryType.fromTag());\n@@ -245,0 +364,4 @@\n+    public StackMap.EntryType getFrameType() {\n+        return entryType;\n+    }\n+\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/StackMapData.java","additions":193,"deletions":70,"binary":false,"changes":263,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-\n@@ -31,0 +30,15 @@\n+ *  tableswitch\n+ *      <0-3 byte pad>\n+ *      defaultbyte1\n+ *      defaultbyte2\n+ *      defaultbyte3\n+ *      defaultbyte4\n+ *      lowbyte1\n+ *      lowbyte2\n+ *      lowbyte3\n+ *      lowbyte4\n+ *      highbyte1\n+ *      highbyte2\n+ *      highbyte3\n+ *      highbyte4\n+ *      jump offsets...\n@@ -32,1 +46,30 @@\n- *\/\n+ *  tableswitch\n+ *   default:   <default_offset> u4\n+ *   low:       <low_value>      u4\n+ *   high:      <high_value>     u4\n+ *   jump offsets:\n+ *          <offset_1>\n+ *          <offset_2>\n+ *     ...\n+ *          <offset_n>\n+ *  or\n+ *  lookupswitch\n+ *      <0-3 byte pad>\n+ *      defaultbyte1\n+ *      defaultbyte2\n+ *      defaultbyte3\n+ *      defaultbyte4\n+ *      npairs1\n+ *      npairs2\n+ *      npairs3\n+ *      npairs4\n+ *      match-offset pairs...\n+ *\n+ *  lookupswitch\n+ *   default:       <default_offset>        u4\n+ *   match_count:   <number_of_cases>       u4\n+ *          match_1:    <value_1> <case_offset_1>\n+ *          match_2:    <value_2> <case_offset_2>\n+ *          ...\n+ *          match_n:    <value_n> <case_offset_n>\n+ * *\/\n@@ -39,1 +82,1 @@\n-\/\/ for tableswitch:\n+    \/\/ for tableswitch:\n@@ -55,1 +98,1 @@\n-\/\/ for lookupswitch:\n+    \/\/ for lookupswitch:\n@@ -67,1 +110,1 @@\n-        environment.traceln(\"  writeLookupSwitch: pc=\" + pc + \" pad=\" + pad + \" deflabel=\" + defLabel.cpIndex);\n+        environment.traceln(() -> \"  writeLookupSwitch: pc=\" + pc + \" pad=\" + pad + \" deflabel=\" + defLabel.cpIndex);\n@@ -97,1 +140,1 @@\n-        environment.traceln(\"  recalcTableSwitch: low=\" + low1 + \" high=\" + high1);\n+        environment.traceln(\"  recalcTableSwitch: low=%d high=%d\".formatted(low1, high1));\n@@ -109,1 +152,1 @@\n-            environment.traceln(\"   keys.data[\" + k + \"]=\" + keys.get(k));\n+            environment.traceln(\"   keys.data[%d]=%s\".formatted(k, keys.get(k)));\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/SwitchTable.java","additions":51,"deletions":8,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -0,0 +1,107 @@\n+\/*\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.jasm;\n+\n+import org.openjdk.asmtools.common.structure.EAttribute;\n+import org.openjdk.asmtools.jdis.*;\n+import org.openjdk.asmtools.jdis.BootstrapMethodData;\n+import org.openjdk.asmtools.jdis.ConstantPool;\n+import org.openjdk.asmtools.jdis.ExceptionData;\n+import org.openjdk.asmtools.jdis.FieldData;\n+import org.openjdk.asmtools.jdis.InnerClassData;\n+import org.openjdk.asmtools.jdis.LineNumberData;\n+import org.openjdk.asmtools.jdis.LocalVariableData;\n+import org.openjdk.asmtools.jdis.MethodData;\n+import org.openjdk.asmtools.jdis.RecordData;\n+import org.openjdk.asmtools.jdis.StackMapData;\n+\n+\/**\n+ * The TableFormatModel class stores and manages attributes that support a tabular (javap-like) format,\n+ * which can be switched on using the --table option.\n+ *\/\n+public class TableFormatModel {\n+    public enum Token {\n+        NOT_SUPPORTED(\"NotSupported\", null, null, null),\n+        SOURCE_FILE(\"SourceFile\", EAttribute.ATT_SourceFile, JasmTokens.Token.SOURCEFILE, SourceFileData.class),\n+        ENCLOSING_METHOD(\"EnclosingMethod\", EAttribute.ATT_EnclosingMethod, JasmTokens.Token.ENCLOSINGMETHOD, EnclosingMethodData.class),\n+        NEST_MEMBERS(\"NestMembers\", EAttribute.ATT_NestMembers, JasmTokens.Token.NESTMEMBERS, NestMembersData.class),\n+        NEST_HOST(\"NestHost\", EAttribute.ATT_NestHost, JasmTokens.Token.NESTHOST, NestHostData.class),\n+        INNER_CLASSES(\"InnerClasses\", EAttribute.ATT_InnerClasses, JasmTokens.Token.INNERCLASS, InnerClassData.class),\n+        SIGNATURE(\"Signature\", EAttribute.ATT_Signature, JasmTokens.Token.SIGNATURE, SignatureData.class),\n+        CONSTANT_POOL(\"Constant pool\", null, null, ConstantPool.class),\n+        METHOD_DATA(\"Method_info\", null, null, MethodData.class),\n+        FIELD_DATA(\"Field_info\", null, null, FieldData.class),\n+        RECORD_DATA(\"record_component_info\", null, null, RecordData.class),\n+        LINE_NUMBERS(\"LineNumberTable\", EAttribute.ATT_LineNumberTable, JasmTokens.Token.LINETABLE_HEADER, LineNumberData.class),\n+        LOCAL_VARIABLES(\"LocalVariableTable\", EAttribute.ATT_LocalVariableTable, JasmTokens.Token.LOCALVARIABLES_HEADER, LocalVariableData.class),\n+        LOCAL_VARIABLE_TYPES(\"LocalVariableTypeTable\", EAttribute.ATT_LocalVariableTypeTable, JasmTokens.Token.LOCALVARIABLETYPES_HEADER, LocalVariableTypeData.class),\n+        EXCEPTIONS(\"throws\", null, JasmTokens.Token.THROWS, ExceptionData.class),\n+        STACK_MAP(\"StackMap\", EAttribute.ATT_StackMap, JasmTokens.Token.STACKMAP, StackMapData.class),\n+        STACK_MAP_TABLE(\"StackMapTable\", EAttribute.ATT_StackMapTable, JasmTokens.Token.STACKMAPTABLE_HEADER, StackMapData.class),\n+        BOOTSTRAP_METHOD(\"BootstrapMethods\", EAttribute.ATT_BootstrapMethods, JasmTokens.Token.BOOTSTRAPMETHOD, BootstrapMethodData.class);\n+\n+        final private String parseKey;\n+        final private EAttribute attribute;\n+\n+        final private JasmTokens.Token jasmToken;\n+        final private String printKey;\n+        final private Class<? extends Indenter> owner;\n+\n+        Token(String parseKey, EAttribute attribute, JasmTokens.Token jasmToken, Class<? extends Indenter> owner) {\n+            this.parseKey = parseKey;\n+            this.attribute = attribute;\n+            this.jasmToken = jasmToken;\n+            this.printKey = \"%s\".formatted(parseKey);\n+            this.owner = owner;\n+        }\n+\n+        public String parseKey() {\n+            return parseKey;\n+        }\n+\n+        public String printKey() {\n+            return printKey;\n+        }\n+\n+        public boolean isExtendedPrintingSupported() {\n+            return owner != null;\n+        }\n+\n+        public EAttribute getAttribute() {\n+            return attribute;\n+        }\n+\n+        public JasmTokens.Token getJasmToken() {\n+            return jasmToken;\n+        }\n+\n+        public static Token getBy(Class<? extends Indenter> cls) {\n+            for (Token item : Token.values()) {\n+                if (cls.equals(item.owner)) {\n+                    return item;\n+                }\n+            }\n+            return NOT_SUPPORTED;\n+        }\n+    }\n+}\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/TableFormatModel.java","additions":107,"deletions":0,"binary":false,"changes":107,"status":"added"},{"patch":"@@ -1,1 +1,1 @@\n-# Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,0 +49,1 @@\n+err.cannot.create=Cannot create {0}\n@@ -52,1 +53,1 @@\n-err.eof.in.comment=Comment not terminated at end of input\n+err.eof.in.comment=Comment isn't terminated at the end of input\n@@ -57,2 +58,2 @@\n-err.eof.in.string=String not terminated at end of input\n-err.newline.in.string=String not terminated at end of line\n+err.eof.in.string=String isn't terminated at the end of input\n+err.newline.in.string=String isn't terminated at the end of line\n@@ -66,0 +67,1 @@\n+warn.sign.repeated=Signature repeated\n@@ -70,5 +72,8 @@\n-err.token.expected={0} token expected\n-err.identifier.expected=Identifier expected\n-err.grouped.component.expected=Either an annotation or a record component expected\n-err.one.of.two.token.expected=Either \\\"{0}\\\" or \\\"{1}\\\" token expected\n-warn.one.of.two.token.expected=Either \\\"{0}\\\" or \\\"{1}\\\" token expected\n+err.token.expected=\\\"{0}\\\" token is expected\n+err.one.of.tokens.expected=One of the tokens {0} is expected.\n+err.token.isnot.expected=\\\"{0}\\\" token is not expected\n+err.identifier.expected=Jasm identifier expected\n+err.one.of.two.token.expected=Either \\\"{0}\\\" or \\\"{1}\\\" token is expected\n+err.one.of.N.token.expected=One of \\\"{0}\\\" tokens is expected\n+warn.one.of.two.token.expected=Expected \\\"{0}\\\" or \\\"{1}\\\" token; interpreted as \\\"{2}\\\"\n+err.field.descriptor.expected=Either a field descriptor or Constant Pool index expected, got {0}\n@@ -89,0 +94,1 @@\n+#Local type index  #name_index:#signature_index; [ var index name:signature; ]\n@@ -90,4 +96,7 @@\n-err.locvar.wrong.index=An index in the local variable array \\\"{0}\\\" is not in [0..{1}] [0..Code_attribute.max_locals-1]\n-err.locvar.unknown.field.descriptor=Valid field descriptor of a local variable \\\"{0}\\\" expected instead of \\\"{1}\\\"\n-err.locvar.slot.occupied=The slot \\\"{0}\\\" is occupied by other local variable\n-err.locvar.undecl=Local variable not declared for the slot \\\"{0}\\\"\n+err.locvar.wrong.index=The index in the local variable array \\\"{0}\\\" is not in the range [0..{1}] [0..Code_attribute.max_locals-1]\n+err.locvar.unknown.field.descriptor=Valid field descriptor of the local variable \\\"{0}\\\" expected instead of \\\"{1}\\\"\n+warn.loctype.wrong.field.signature=Invalid field signature found for local variable in slot \\\"{0}\\\": \\\"{1}\\\"\n+err.locvar.slot.occupied=The slot \\\"{0}\\\" is occupied by another local variable\n+err.locvar.undecl=Local variable isn't declared for the slot \\\"{0}\\\"\n+err.fieldType.undecl=Field type isn't declared for the slot \\\"{0}\\\"\n+\n@@ -95,0 +104,1 @@\n+warn.loctype.ambiqous=endtype {0}; expected for the local variable\n@@ -99,1 +109,2 @@\n-err.const.redecl=Constant {0} redeclared\n+err.const.redecl=Constant Pool entry {0} has been redeclared or overlaps with entry {1}\n+warn.const.fill=Missing Constant Pool entry(ies) {0} might be auto-filled with Utf8[null] \n@@ -102,0 +113,1 @@\n+warn.redeclared.attribute=The new attribute \\\"{0}\\\" overwrites an already declared one in the \\\"{1}\\\" structure.\n@@ -120,0 +132,2 @@\n+err.constant.kind.expected=Expected one of the valid constant kinds from the constant pool\n+\n@@ -131,2 +145,2 @@\n-err.msig.malformed=Malformed method signature at char {0}. [err={1}]\n-err.no.classname=Class name not defined\n+err.msig.malformed=Malformed method signature at position {0}. {1}\n+err.no.classname=Class name isn't defined\n@@ -135,1 +149,1 @@\n-warn.repeated.modifier=Repeated modifier\n+warn.repeated.modifier=Ambiguous use of similar modifiers\n@@ -137,6 +151,8 @@\n-warn.invalid.modifier.interface.set=If the ACC_INTERFACE flag is set, the ACC_FINAL, ACC_PRIMITIVE, ACC_ENUM, and ACC_MODULE flags must not be set {0}\n-warn.invalid.modifier.int.abs=If the ACC_INTERFACE flag is set, the ACC_ABSTRACT flag must also be set {0}\n-warn.invalid.modifier.int=Invalid modifier(s) for an interface {0}\n-warn.invalid.modifier.class=Invalid modifier(s) for a class {0}\n-warn.invalid.modifier.class.finabs=Class cannot be both abstract and final {0}\n-warn.invalid.modifier.class.intenum=Class cannot be both interface and enum {0}\n+warn.value.object.defined=Class file version {0} does not conform to the new kind of objects; expected version {1}\n+warn.invalid.modifier.interface.set=\\\"{0}\\\": If the ACC_INTERFACE flag is set, the ACC_FINAL, ACC_SUPER, ACC_ENUM, and ACC_MODULE flags must not be set.\n+warn.invalid.modifier.interface.set.vo=\\\"{0}\\\": If the ACC_INTERFACE flag is set, the ACC_FINAL, ACC_IDENTITY, ACC_ENUM, and ACC_MODULE flags must not be set.\n+warn.invalid.modifier.not.interface.set=\\\"{0}\\\": If the ACC_INTERFACE flag is not set ACC_ANNOTATION, and ACC_MODULE flags must not be set.\n+warn.invalid.modifier.not.interface.set.vo=\\\"{0}\\\": If the ACC_INTERFACE flag is not set a value class must have at least one of its ACC_FINAL, ACC_IDENTITY, or ACC_ABSTRACT flags set\n+warn.invalid.modifier.int.abs=\\\"{0}\\\": If the ACC_INTERFACE flag is set, the ACC_ABSTRACT flag must also be set\n+warn.invalid.modifier.class=Invalid modifier(s) for a class: \\\"{0}\\\"\n+warn.invalid.modifier.class.finabs=\\\"{0}\\\": Class cannot be both abstract and final\n@@ -144,1 +160,3 @@\n-warn.invalid.modifier.intfield=Interface field must be public static final only and may have ACC_SYNTHETIC modifier {0}\n+warn.invalid.modifier.intfield=\\\"{0}\\\": Interface field must be ACC_PUBLIC, ACC_STATIC, and ACC_FINAL only and may have ACC_STRICT_INIT or ACC_SYNTHETIC flag set\n+warn.invalid.modifier.for.value=\\\"{0}\\\": Each field of a value class must have at least one of its ACC_STATIC or ACC_STRICT_INIT flags set\n+warn.repeat.signature.field=Signature attribute repeated\n@@ -146,4 +164,2 @@\n-warn.invalid.modifier.acc=Each field of a class may have at most one of its ACC_PUBLIC, ACC_PRIVATE, and ACC_PROTECTED flags set {0}\n-warn.invalid.modifier.fiva=Each field of a class must not have both its ACC_FINAL and ACC_VOLATILE flags set {0}\n-warn.invalid.modifier.primitive.flags=In a primitive class, each field must have at least one of its ACC_STATIC or ACC_FINAL flags set {0}\n-warn.invalid.modifier.primitive.abstract=In an abstract class, each field must have its ACC_STATIC flag set {0}\n+warn.invalid.modifier.acc=\\\"{0}\\\": Each field of a class may have at most one of its ACC_PUBLIC, ACC_PRIVATE, and ACC_PROTECTED flags set\n+warn.invalid.modifier.fiva=\\\"{0}\\\": Each field of a class must not have both its ACC_FINAL and ACC_VOLATILE flags set\n@@ -162,1 +178,1 @@\n-warn.instruction.operand.value.overflow={0} - The argument {2} of the ''{1}'' instruction is written. It is larger than the allowed {3}\n+warn.instruction.operand.value.overflow={0} - The argument {2} of the ''{1}'' instruction is written. It is larger than allowed {3}\n@@ -166,3 +182,3 @@\n-#\n-\n-err.localsmap.repeated=locals_map redeclared\n+warn.invalid.modifier.innerclasses=Modifier(s) are ignored as they cannot be applied to a group of inner classes\n+warn.no.classes.in.innnerclasses=InnerClasses group should have at least one inner class\n+warn.both.modifiers.apply= Combined \\\"{0}\\\" modifiers apply to the InnerClass\n@@ -171,11 +187,21 @@\n-err.invalid.stack.frame.type=Invalid stack frame type scanned \\\"{1}\\\"\n-err.invalid.offset.frame.type=Offset value {0} is not valid  for the \\\"{1}\\\" type frame\n-err.no.stack.map=Stack map element for the \\\"{0}\\\" type frame is absent\n-err.no.locals.map=Locals map element for the \\\"{0}\\\" type frame is absent\n-err.should.be.only.one.stack.map.element=Should be only one stack map element for the \\\"{0}\\\" type frame\n-err.unexpected.stack.maps=There are unexpected stack maps for the \\\"{0}\\\" type frame\n-err.unexpected.locals.maps=There are unexpected locals maps for the \\\"{0}\\\" type frame\n-err.more.locals.map.elements=There are more than 3 locals map element for the \\\"append_frame\\\" type frame\n-err.stackmaptable.repeated=A methods Code attribute already has a StackMapTable attribute\n-err.stackmap.repeated=stack_map redeclared\n-err.itemtype.expected=StackMap item type expected instead of {0}\n+err.invalid.offset.frame.type=Offset value {0} is not valid  for the \\\"{1}\\\" entry type\n+err.no.stack.map=Stack map element for the \\\"{0}\\\" entry type is absent\n+err.no.locals.map=Locals map element for the \\\"{0}\\\" entry type is absent\n+err.should.be.only.one.stack.map.element=Should be only one stack map element for the \\\"{0}\\\" entry type\n+err.unexpected.stack.maps=There are unexpected stack maps for the \\\"{0}\\\" entry type\n+err.unexpected.locals.maps=There are unexpected locals maps for the \\\"{0}\\\" entry type\n+err.more.locals.map.elements=There are more than locals map elements for the \\\"append_frame\\\" entry type\n+err.itemtype.expected=StackMap entry type expected instead of {0}\n+\n+err.stackmap.entity.repeated={0} redeclared\n+err.stackmap.entry.type.not.set=StackMap entry type is not set\n+err.invalid.stack.frame.type=Unknown entry type \\\"{0}\\\" of the StackMapTable\n+err.stackmaptable.repeated=A method''s Code attribute already has a StackMapTable attribute\n+\n+err.stackmap.map.eligible={0} are only eligible in stack_map_frame {1}\n+#\n+err.stackmap.expected={0} is expected\n+warn.stackmap.expected={0} is expected\n+warn.stackmap.redeclared=The {0} overwrites an already declared one.\n+err.base.frame.expected=base_frame is expected\n+err.larvar.frame.expected=early_larval_frame must be declared before the wrapped base_frame.\n@@ -185,1 +211,2 @@\n-err.invalid.bootstrapmethod=Invalid declaration of BootstrapMethod Entry\n+err.bootstrap.arg.expected=BootstrapMethod argument is expected\n+err.bootstrap.arg.is.not.expected=BootstrapMethod argument is not expected\n@@ -194,0 +221,7 @@\n+#LineNumber table\n+err.expected.linetable=The LineNumberTable format is incorrect; \\\"{0}\\\" is expected\n+#LocalValue table\n+err.header.locvars=The table header is incorrect; \\\"Start Length Slot Name {0}\\\" is expected\n+err.header.expected.locvars=The table header is expected: \\\"Start Length Slot Name {0}\\\"\n+err.expected.locvars=The {0} format is incorrect; {1} is expected\n+\n@@ -209,1 +243,1 @@\n-warn.isset.cfv=The class file version is set to {0} by the option \\\"-fixcv {1}\\\"\n+warn.isset.cfv=The class file version is set to {0} using the \\\"-fixcv {1}\\\" option.\n@@ -224,0 +258,1 @@\n+err.entity.not.in.cp=\\\"{0}\\\" not found in Constant Pool\n@@ -226,1 +261,1 @@\n-err.constcell.is.null=ConstCell.value can not be null\n+err.constcell.is.null=ConstCell.value can''t be null\n@@ -233,1 +268,1 @@\n-err.instr.opc.unknown={0} has unknown type\n+err.instr.opc.unknown={0} has an unknown type\n@@ -236,0 +271,2 @@\n+err.instr.oversize=The length of the {0} instruction {1} exceeds the allowed limit of {2} bytes\n+\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/i18n.properties","additions":84,"deletions":47,"binary":false,"changes":131,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-    String myname;\n+    String className;\n@@ -40,1 +40,1 @@\n-     * The size of the increment. If it is 0 the size of the the buffer is doubled\n+     * The size of the increment. If it is 0 the size of the buffer is doubled\n@@ -49,1 +49,1 @@\n-     * @param initialCapacity the initial storage capacity of the vector\n+     * @param initialCapacity   the initial storage capacity of the vector\n@@ -53,1 +53,0 @@\n-\/\/      super();\n@@ -135,1 +134,0 @@\n-\n","filename":"src\/org\/openjdk\/asmtools\/jcoder\/ByteBuffer.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+import org.openjdk.asmtools.jasm.ClassFileConst;\n@@ -27,1 +28,0 @@\n-import java.io.PrintWriter;\n@@ -31,1 +31,0 @@\n- *\n@@ -33,1 +32,1 @@\n- *\n+ * <p>\n@@ -35,1 +34,1 @@\n- *\n+ * <p>\n@@ -39,1 +38,1 @@\n- *\n+ * <p>\n@@ -69,6 +68,6 @@\n-        VALUE               (0, \"Value\"),\n-        KEYWORDS            (1, \"Keywords\"),\n-        PUNCTUATION         (2, \"Punctuation\"),\n-        JDEC                (3, \"JDec\"),\n-        STACKMAP            (4, \"StackMap\"),\n-        MISC                (5, \"Misc\");\n+        VALUE(0, \"Value\"),\n+        KEYWORDS(1, \"Keywords\"),\n+        PUNCTUATION(2, \"Punctuation\"),\n+        JDEC(3, \"JDec\"),\n+        STACKMAP(4, \"StackMap\"),\n+        MISC(5, \"Misc\");\n@@ -89,2 +88,5 @@\n-  \/*-------------------------------------------------------- *\/\n-  \/** Scanner Tokens (Definitive List) *\/\n+    \/*-------------------------------------------------------- *\/\n+\n+    \/**\n+     * Scanner Tokens (Definitive List)\n+     *\/\n@@ -92,34 +94,34 @@\n-        EOF                 (-1, \"EOF\",             \"EOF\",          TokenType.MISC),\n-        IDENT               (60, \"IDENT\",           \"IDENT\",        TokenType.VALUE),\n-        LONGSTRINGVAL       (61, \"LONGSTRINGVAL\",   \"LONGSTRING\",   TokenType.VALUE),\n-        INTVAL              (65, \"INTVAL\",          \"INT\",          TokenType.VALUE),\n-        LONGVAL             (66, \"LONGVAL\",         \"LONG\",         TokenType.VALUE),\n-        STRINGVAL           (69, \"STRINGVAL\",       \"STRING\",       TokenType.VALUE),\n-\n-        CLASS               (70, \"CLASS\",           \"class\",        TokenType.KEYWORDS, KeywordType.KEYWORD),\n-        INTERFACE           (71, \"INTERFACE\",       \"interface\",    TokenType.KEYWORDS, KeywordType.KEYWORD),\n-        DIV                 (72, \"DIV\",             \"div\",          TokenType.KEYWORDS),\n-        EQ                  (73, \"EQ\",              \"eq\",           TokenType.KEYWORDS),\n-        ASSIGN              (74, \"ASSIGN\",          \"assign\",       TokenType.KEYWORDS),\n-        MODULE              (75, \"MODULE\",          \"module\",       TokenType.KEYWORDS, KeywordType.KEYWORD),\n-\n-        COLON               (134, \"COLON\",        \":\",    TokenType.PUNCTUATION),\n-        SEMICOLON           (135, \"SEMICOLON\",    \";\",    TokenType.PUNCTUATION, KeywordType.KEYWORD),\n-        COMMA               (0,   \"COMMA\",        \",\",    TokenType.PUNCTUATION, KeywordType.KEYWORD),\n-        LBRACE              (138, \"LBRACE\",       \"{\",    TokenType.PUNCTUATION, KeywordType.KEYWORD),\n-        RBRACE              (139, \"RBRACE\",       \"}\",    TokenType.PUNCTUATION, KeywordType.KEYWORD),\n-        LPAREN              (140, \"LPAREN\",       \"(\",    TokenType.PUNCTUATION, KeywordType.KEYWORD),\n-        RPAREN              (141, \"RPAREN\",       \")\",    TokenType.PUNCTUATION, KeywordType.KEYWORD),\n-        LSQBRACKET          (142, \"LSQBRACKET\",   \"[\",    TokenType.PUNCTUATION, KeywordType.KEYWORD),\n-        RSQBRACKET          (143, \"RSQBRACKET\",   \"]\",    TokenType.PUNCTUATION, KeywordType.KEYWORD),\n-\n-\n-        BYTEINDEX           (156, \"BYTEINDEX\",   \"b\",       TokenType.JDEC, KeywordType.KEYWORD),\n-        SHORTINDEX          (157, \"SHORTINDEX\",  \"s\",       TokenType.JDEC, KeywordType.KEYWORD),\n-        ATTR                (158, \"ATTR\",        \"Attr\",    TokenType.JDEC, KeywordType.KEYWORD),\n-        BYTES               (159, \"BYTES\",       \"Bytes\",   TokenType.JDEC, KeywordType.KEYWORD),\n-        MACRO               (160, \"MACRO\",        \"Attr\",    TokenType.JDEC),\n-        COMP                (161, \"COMP\",        \"Component\", TokenType.JDEC, KeywordType.KEYWORD),\n-        FILE                (162, \"FILE\",        \"file\",    TokenType.JDEC, KeywordType.KEYWORD),\n-\n-        ZEROINDEX           (163, \"ZEROINDEX\",   \"z\",       TokenType.STACKMAP, KeywordType.KEYWORD);\n+        EOF(-1, \"EOF\", \"EOF\", TokenType.MISC),\n+        IDENT(60, \"IDENT\", \"IDENT\", TokenType.VALUE),\n+        LONGSTRINGVAL(61, \"LONGSTRINGVAL\", \"LONGSTRING\", TokenType.VALUE),\n+        INTVAL(65, \"INTVAL\", \"INT\", TokenType.VALUE),\n+        LONGVAL(66, \"LONGVAL\", \"LONG\", TokenType.VALUE),\n+        STRINGVAL(69, \"STRINGVAL\", \"STRING\", TokenType.VALUE),\n+\n+        CLASS(70, \"CLASS\", \"class\", TokenType.KEYWORDS, KeywordType.KEYWORD),\n+        INTERFACE(71, \"INTERFACE\", \"interface\", TokenType.KEYWORDS, KeywordType.KEYWORD),\n+        DIV(72, \"DIV\", \"div\", TokenType.KEYWORDS),\n+        EQ(73, \"EQ\", \"eq\", TokenType.KEYWORDS),\n+        ASSIGN(74, \"ASSIGN\", \"assign\", TokenType.KEYWORDS),\n+        MODULE(75, \"MODULE\", \"module\", TokenType.KEYWORDS, KeywordType.KEYWORD),\n+\n+        COLON(134, \"COLON\", \":\", TokenType.PUNCTUATION),\n+        SEMICOLON(135, \"SEMICOLON\", \";\", TokenType.PUNCTUATION, KeywordType.KEYWORD),\n+        COMMA(0, \"COMMA\", \",\", TokenType.PUNCTUATION, KeywordType.KEYWORD),\n+        LBRACE(138, \"LBRACE\", \"{\", TokenType.PUNCTUATION, KeywordType.KEYWORD),\n+        RBRACE(139, \"RBRACE\", \"}\", TokenType.PUNCTUATION, KeywordType.KEYWORD),\n+        LPAREN(140, \"LPAREN\", \"(\", TokenType.PUNCTUATION, KeywordType.KEYWORD),\n+        RPAREN(141, \"RPAREN\", \")\", TokenType.PUNCTUATION, KeywordType.KEYWORD),\n+        LSQBRACKET(142, \"LSQBRACKET\", \"[\", TokenType.PUNCTUATION, KeywordType.KEYWORD),\n+        RSQBRACKET(143, \"RSQBRACKET\", \"]\", TokenType.PUNCTUATION, KeywordType.KEYWORD),\n+\n+\n+        BYTEINDEX(156, \"BYTEINDEX\", \"b\", TokenType.JDEC, KeywordType.KEYWORD),\n+        SHORTINDEX(157, \"SHORTINDEX\", \"s\", TokenType.JDEC, KeywordType.KEYWORD),\n+        ATTR(158, \"ATTR\", \"Attr\", TokenType.JDEC, KeywordType.KEYWORD),\n+        BYTES(159, \"BYTES\", \"Bytes\", TokenType.JDEC, KeywordType.KEYWORD),\n+        MACRO(160, \"MACRO\", \"Attr\", TokenType.JDEC),\n+        COMP(161, \"COMP\", \"Component\", TokenType.JDEC, KeywordType.KEYWORD),\n+        FILE(162, \"FILE\", \"file\", TokenType.JDEC, KeywordType.KEYWORD),\n+\n+        ZEROINDEX(163, \"ZEROINDEX\", \"z\", TokenType.STACKMAP, KeywordType.KEYWORD);\n@@ -268,106 +270,4 @@\n-    private static HashMap<String, ConstType> NameToConstantType = new HashMap<>(ConstType.maxTag);\n-    private static HashMap<Integer, ConstType> ConstantTypes = new HashMap<>(ConstType.maxTag);\n-\n-    static {\n-        \/\/ register all of the tokens\n-        for (ConstType ct : ConstType.values()) {\n-            registerConstantType(ct);\n-        }\n-    }\n-\n-    \/**\n-     * ConstType\n-     *\n-     * A (typed) tag (constant) representing the type of Constant in the Constant Pool.\n-     *\n-     * This is more-or-less a copy of jasm.ConstType. Unfortunately, there's no way to\n-     * sub-class (or slightly alter) the members of an enum. This enum set is slightly\n-     * modified from the Jasm one.\n-     *\/\n-    static public enum ConstType {\n-\/\/        CONSTANT_ZERO                       (-3, \"CONSTANT_ZERO\", \"\"),\n-        CONSTANT_UTF8                       (1, \"CONSTANT_UTF8\", \"Asciz\", \"Utf8\"),\n-        CONSTANT_UNICODE                    (2, \"CONSTANT_UNICODE\", \"\"),\n-        CONSTANT_INTEGER                    (3, \"CONSTANT_INTEGER\", \"int\", \"u4\"),\n-        CONSTANT_FLOAT                      (4, \"CONSTANT_FLOAT\", \"float\"),\n-        CONSTANT_LONG                       (5, \"CONSTANT_LONG\", \"long\"),\n-        CONSTANT_DOUBLE                     (6, \"CONSTANT_DOUBLE\", \"double\"),\n-        \/\/ Class is removed for JavaCard (???)\n-        CONSTANT_CLASS                      (7, \"CONSTANT_CLASS\", \"class\"),\n-        CONSTANT_STRING                     (8, \"CONSTANT_STRING\", \"String\"),\n-        CONSTANT_FIELD                      (9, \"CONSTANT_FIELD\", \"Field\"),\n-        CONSTANT_METHOD                     (10, \"CONSTANT_METHOD\", \"Method\"),\n-        CONSTANT_INTERFACEMETHOD            (11, \"CONSTANT_INTERFACEMETHOD\", \"InterfaceMethod\"),\n-        CONSTANT_NAMEANDTYPE                (12, \"CONSTANT_NAMEANDTYPE\", \"NameAndType\"),\n-        \/\/ added for JavaCard\n-        CONSTANT_JAVACARD_PACKAGE           (13, \"CONSTANT_PACKAGE\", \"package\"),  \/\/ in javacard export file\n-        \/\/ Constant 14 reserved\n-        CONSTANT_METHODHANDLE               (15, \"CONSTANT_METHODHANDLE\", \"MethodHandle\"),\n-        CONSTANT_METHODTYPE                 (16, \"CONSTANT_METHODTYPE\", \"MethodType\"),\n-        CONSTANT_DYNAMIC                    (17, \"CONSTANT_DYNAMIC\", \"Dynamic\"),\n-        CONSTANT_INVOKEDYNAMIC              (18, \"CONSTANT_INVOKEDYNAMIC\", \"InvokeDynamic\"),\n-        CONSTANT_MODULE                     (19, \"CONSTANT_MODULE\",  \"Module\"),\n-        CONSTANT_MODULE_PACKAGE             (20, \"CONSTANT_PACKAGE\", \"Package\");\n-\n-        public static final int maxTag = 20;\n-\n-        private final int value;\n-        private final String parseKey;\n-        private final String printVal;\n-        private final String alias;\n-\n-        ConstType(int val, String print, String parse) {\n-            value = val;\n-            parseKey = parse;\n-            printVal = print;\n-            alias = null;\n-        }\n-\n-        ConstType(int val, String print, String parse, String als) {\n-            value = val;\n-            parseKey = parse;\n-            printVal = print;\n-            alias = als;\n-        }\n-\n-        public int value() {\n-            return value;\n-        }\n-\n-        public String parseKey() {\n-            return parseKey;\n-        }\n-\n-        public String printval() {\n-            return printVal;\n-        }\n-\n-        public void print(PrintWriter out) {\n-            out.print(parseKey);\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return \"<\" + printVal + \"> [\" + value + \"]\";\n-        }\n-    };\n-\n-    static public ConstType constType(int i) {\n-        return ConstantTypes.get(i);\n-    }\n-\n-    static public ConstType constType(String parsekey) {\n-        return NameToConstantType.get(parsekey);\n-    }\n-\n-    private static void registerConstantType(ConstType tt) {\n-        NameToConstantType.put(tt.parseKey, tt);\n-        if (tt.alias != null) {\n-            NameToConstantType.put(tt.alias, tt);\n-        }\n-        ConstantTypes.put(tt.value, tt);\n-    }\n-\n-    public static int constValue(String stringValue) {\n-        ConstType constType = constType(stringValue);\n-        return constType != null ? constType.value() : StackMap.VerificationType.getByParseKey(stringValue).tag();\n+    public static int getConstTagByParseString(String stringValue) {\n+        ClassFileConst.ConstType constType = ClassFileConst.getByParseKey(stringValue);\n+        return constType != null ? constType.getTag() :\n+                StackMap.VerificationType.getByParseKey(stringValue).tag();\n","filename":"src\/org\/openjdk\/asmtools\/jcoder\/JcodTokens.java","additions":54,"deletions":154,"binary":false,"changes":208,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+import static org.openjdk.asmtools.jasm.ClassFileConst.ConstType.CONSTANT_CLASS;\n+import static org.openjdk.asmtools.jasm.ClassFileConst.ConstType.CONSTANT_UTF8;\n@@ -33,1 +35,0 @@\n-import static org.openjdk.asmtools.jcoder.JcodTokens.ConstType;\n@@ -48,1 +49,1 @@\n-    private DataOutputStream bufstream;\n+    private DataOutputStream outStream;\n@@ -209,1 +210,0 @@\n-    \/*-------------------------------------------------------- *\/\n@@ -216,1 +216,1 @@\n-            environment.traceln(\"expect:\" + t + \" instead of \" + scanner.token);\n+            environment.traceln(() -> \"expect: %s instead of %s\".formatted(t.printval(), scanner.token.printval()));\n@@ -257,1 +257,2 @@\n-        int length0 = buf.length, pos0 = scanner.pos;\n+        int length0 = buf.length;\n+        long pos0 = scanner.pos;\n@@ -303,1 +304,2 @@\n-        int length0 = buf.length, pos0 = scanner.pos;\n+        int length0 = buf.length;\n+        long pos0 = scanner.pos;\n@@ -362,1 +364,2 @@\n-        int pos0 = scanner.pos, length0 = buf.length;\n+        long pos0 = scanner.pos;\n+        int length0 = buf.length;\n@@ -391,1 +394,2 @@\n-        int pos0 = scanner.pos, length0 = buf.length;\n+        long pos0 = scanner.pos;\n+        int length0 = buf.length;\n@@ -450,1 +454,1 @@\n-                        scanner.addConstDebug(ConstType.CONSTANT_CLASS);\n+                        scanner.addConstDebug(CONSTANT_CLASS);\n@@ -452,1 +456,1 @@\n-                        scanner.longValue = ConstType.CONSTANT_CLASS.value();\n+                        scanner.longValue = CONSTANT_CLASS.getTag();\n@@ -456,1 +460,1 @@\n-                        if (scanner.longValue == 0xCAFEBABEl && environment.cfv.isSetByParameter() ) {\n+                        if (scanner.longValue == 0xCAFEBABEl && environment.cfv.isSetByParameter()) {\n@@ -471,1 +475,1 @@\n-                                    environment.cfv.setFileVersion((short)major, (short)minor);\n+                                    environment.cfv.setFileVersion((short) major, (short) minor);\n@@ -557,1 +561,1 @@\n-                    scanner.addConstDebug(ConstType.CONSTANT_UTF8);\n+                    scanner.addConstDebug(CONSTANT_UTF8);\n@@ -575,1 +579,1 @@\n-                    bufstream.writeUTF(sb.toString());\n+                    outStream.writeUTF(sb.toString());\n@@ -618,2 +622,2 @@\n-        bufstream = new DataOutputStream(buf);\n-        buf.myname = \"module-info.class\";\n+        outStream = new DataOutputStream(buf);\n+        buf.className = \"module-info.class\";\n@@ -621,1 +625,1 @@\n-        environment.traceln(\"starting \" + buf.myname);\n+        environment.traceln(\"starting \" + buf.className);\n@@ -624,1 +628,1 @@\n-        environment.traceln(\"ending \" + buf.myname);\n+        environment.traceln(\"ending \" + buf.className);\n@@ -633,1 +637,1 @@\n-        bufstream = new DataOutputStream(buf);\n+        outStream = new DataOutputStream(buf);\n@@ -638,1 +642,1 @@\n-                    buf.myname = scanner.stringValue;\n+                    buf.className = scanner.stringValue;\n@@ -640,1 +644,1 @@\n-                    buf.myname = scanner.stringValue + \".class\";\n+                    buf.className = scanner.stringValue + \".class\";\n@@ -643,1 +647,1 @@\n-            case STRINGVAL -> buf.myname = scanner.stringValue;\n+            case STRINGVAL -> buf.className = scanner.stringValue;\n@@ -650,1 +654,1 @@\n-        environment.traceln(\"starting class \" + buf.myname);\n+        environment.traceln(\"starting class \" + buf.className);\n@@ -653,1 +657,1 @@\n-        environment.traceln(\"ending class \" + buf.myname);\n+        environment.traceln(\"ending class \" + buf.className);\n@@ -705,1 +709,1 @@\n-                    environment.traceln(\"SyntaxError \" + (msg == null ? \"\" : msg));\n+                    environment.traceln(() -> \"SyntaxError %s\".formatted(msg == null ? \"\" : msg));\n@@ -719,1 +723,1 @@\n-        String myname = cls.myname;\n+        String myname = cls.className;\n@@ -724,7 +728,2 @@\n-\n-        environment.traceln(\"writing \" + myname);\n-\n-        BufferedOutputStream out = new BufferedOutputStream(environment.getToolOutput().getDataOutputStream());\n-        out.write(cls.data, 0, cls.length);\n-        try {\n-            out.close();\n+        try (BufferedOutputStream bos = new BufferedOutputStream(environment.getToolOutput().getDataOutputStream())) {\n+            bos.write(cls.data, 0, cls.length);\n@@ -740,1 +739,1 @@\n-            environment.getToolOutput().startClass(cls.myname, Optional.empty(), environment);\n+            environment.getToolOutput().startClass(cls.className, Optional.empty(), environment);\n@@ -742,1 +741,1 @@\n-            environment.getToolOutput().finishClass(cls.myname);\n+            environment.getToolOutput().finishClass(cls.className);\n","filename":"src\/org\/openjdk\/asmtools\/jcoder\/Jcoder.java","additions":34,"deletions":35,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,1 @@\n-    public void setInputFile(ToolInput inputFileName) throws IOException, URISyntaxException {\n+    public void setToolInput(ToolInput toolInput) throws IOException, URISyntaxException {\n@@ -57,1 +57,1 @@\n-            super.setInputFile(inputFileName);\n+            super.setToolInput(toolInput);\n@@ -60,1 +60,1 @@\n-            error(\"err.cannot.read\", inputFileName);\n+            error(\"err.cannot.read\", toolInput);\n@@ -67,1 +67,1 @@\n-    public void warning(int where, String id, Object... args) {\n+    public void warning(long where, String id, Object... args) {\n@@ -72,1 +72,1 @@\n-    public void error(int where, String id, Object... args) {\n+    public void error(long where, String id, Object... args) {\n@@ -103,1 +103,1 @@\n-    public int getPosition() {\n+    public long getPosition() {\n@@ -126,2 +126,2 @@\n-        \/\/\n-        private int strPos = 0;\n+\n+        private int index = 0;\n@@ -131,1 +131,0 @@\n-            charPos = LINE_INC;\n@@ -136,1 +135,1 @@\n-                return strData.charAt(strPos++);\n+                return strData.charAt(index++);\n@@ -144,1 +143,1 @@\n-            position = charPos;\n+            position = ((long) linepos << OFFSET_BITS) | charPos;\n@@ -189,1 +188,1 @@\n-                    charPos += LINE_INC;\n+                    linepos++;\n@@ -198,1 +197,1 @@\n-                    charPos += LINE_INC;\n+                    linepos++;\n","filename":"src\/org\/openjdk\/asmtools\/jcoder\/JcoderEnvironment.java","additions":13,"deletions":14,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,2 +25,1 @@\n-import org.openjdk.asmtools.common.Tool;\n-import org.openjdk.asmtools.common.outputs.log.DualStreamToolOutput;\n+import org.openjdk.asmtools.common.Compiler;\n@@ -28,0 +27,1 @@\n+import org.openjdk.asmtools.common.outputs.log.DualStreamToolOutput;\n@@ -30,1 +30,1 @@\n-public abstract class JcoderTool extends Tool<JcoderEnvironment> {\n+public abstract class JcoderTool extends Compiler<JcoderEnvironment> {\n","filename":"src\/org\/openjdk\/asmtools\/jcoder\/JcoderTool.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,1 @@\n+import static org.openjdk.asmtools.Main.*;\n@@ -45,0 +46,1 @@\n+import static org.openjdk.asmtools.common.outputs.FSOutput.FSDestination.DIR;\n@@ -122,0 +124,1 @@\n+                \"info.opt.w\",\n@@ -132,6 +135,0 @@\n-    \/\/ Run jcoder compiler with args\n-    public synchronized boolean compile(String... argv) {\n-        parseArgs(argv);\n-        return this.compile() == OK;\n-    }\n-\n@@ -139,0 +136,1 @@\n+    @Override\n@@ -145,1 +143,1 @@\n-                environment.setInputFile(inputFileName);\n+                environment.setToolInput(inputFileName);\n@@ -178,3 +176,9 @@\n-                    case org.openjdk.asmtools.Main.DIR_SWITCH -> setDestDir(++i, argv);\n-                    case org.openjdk.asmtools.Main.DUAL_LOG_SWITCH ->\n-                            environment.setOutputs(new DualOutputStreamOutput());\n+                    case DIR_SWITCH -> {\n+                        setFSDestination(DIR, ++i, argv);\n+                    }\n+                    case WRITE_SWITCH -> {                              \/\/ -w\n+                        environment.setIgnorePackage(true);\n+                        setFSDestination(DIR, ++i, argv);\n+                    }\n+                    case DUAL_LOG_SWITCH -> environment.setOutputs(new DualOutputStreamOutput());\n+                    \/\/ TODO: restore using macro's\n@@ -202,1 +206,1 @@\n-                    case org.openjdk.asmtools.Main.VERSION_SWITCH -> {\n+                    case VERSION_SWITCH -> {\n@@ -210,1 +214,1 @@\n-                    case org.openjdk.asmtools.Main.STDIN_SWITCH -> {\n+                    case STDIN_SWITCH -> {\n@@ -232,1 +236,1 @@\n-                                if( versionsPair.second > 0xFFFF || versionsPair.first > 0xFFFF ) {\n+                                if (versionsPair.second > 0xFFFF || versionsPair.first > 0xFFFF) {\n@@ -237,1 +241,1 @@\n-                                if( versionsPair.second > 0xFFFF || versionsPair.first > 0xFFFF ) {\n+                                if (versionsPair.second > 0xFFFF || versionsPair.first > 0xFFFF) {\n@@ -245,1 +249,1 @@\n-                                    if( versionsPair.second > 0xFFFF || versionsPair.first > 0xFFFF ) {\n+                                    if (versionsPair.second > 0xFFFF || versionsPair.first > 0xFFFF) {\n@@ -255,1 +259,1 @@\n-                                environment.error(\"err.invalid_threshold_major_minor_param\");\n+                            environment.error(\"err.invalid_threshold_major_minor_param\");\n","filename":"src\/org\/openjdk\/asmtools\/jcoder\/Main.java","additions":21,"deletions":17,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import org.openjdk.asmtools.jasm.ClassFileConst;\n@@ -60,1 +61,1 @@\n-    protected int pos;\n+    protected long pos;\n@@ -62,1 +63,1 @@\n-    protected int prevPos;\n+    protected long prevPos;\n@@ -107,1 +108,1 @@\n-    void addConstDebug(ConstType ct) {\n+    void addConstDebug(ClassFileConst.ConstType ct) {\n@@ -109,1 +110,1 @@\n-        environment.traceln(\"\\n Const[\" + numCPentrs + \"] = \" + ct.printval());\n+        environment.traceln(\"\\n Const[\" + numCPentrs + \"] = \" + ct.printVal());\n@@ -389,1 +390,1 @@\n-        int p = inputFile.position;\n+        long p = inputFile.position;\n@@ -565,1 +566,1 @@\n-                intValue = constValue(stringValue);\n+                intValue = getConstTagByParseString(stringValue);\n@@ -569,3 +570,3 @@\n-                        ConstType ct = constType(stringValue);\n-                        if (ct != null) {\n-                            addConstDebug(ct);\n+                        ClassFileConst.ConstType constType = ClassFileConst.getByParseKey(stringValue);\n+                        if (constType != null) {\n+                            addConstDebug(constType);\n@@ -595,2 +596,2 @@\n-    protected int xscan() throws IOException {\n-        int retPos = pos;\n+    protected long xscan() throws IOException {\n+        long retPos = pos;\n@@ -820,3 +821,2 @@\n-    protected int scan() throws IOException {\n-        int retPos = xscan();\n-        return retPos;\n+    protected long scan() throws IOException {\n+        return xscan();\n@@ -830,3 +830,2 @@\n-    protected int scanMacro() throws IOException {\n-        int retPos = xscan();\n-        return retPos;\n+    protected long scanMacro() throws IOException {\n+        return xscan();\n","filename":"src\/org\/openjdk\/asmtools\/jcoder\/Scanner.java","additions":16,"deletions":17,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-# Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,2 +60,2 @@\n-warn.array.wronglength=expected array length \\\"{0}\\\" do not match real length \\\"{1}\\\"; expected length written\n-warn.attr.wronglength=expected attribute length \\\"{0}\\\" do not match real length \\\"{1}\\\"; expected length written\n+warn.array.wronglength=Expected array length \\\"{0}\\\" does not match the actual length \\\"{1}\\\"; expected length written.\n+warn.attr.wronglength=Expected attribute length \\\"{0}\\\" does not match the actual length \\\"{1}\\\"; expected length written.\n","filename":"src\/org\/openjdk\/asmtools\/jcoder\/i18n.properties","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+import org.openjdk.asmtools.common.outputs.StdoutOutput;\n@@ -28,4 +29,1 @@\n-import org.openjdk.asmtools.common.structure.ClassFileContext;\n-import org.openjdk.asmtools.common.structure.EAttribute;\n-import org.openjdk.asmtools.common.structure.EModifier;\n-import org.openjdk.asmtools.common.structure.StackMap;\n+import org.openjdk.asmtools.common.structure.*;\n@@ -34,1 +32,0 @@\n-import java.awt.event.KeyEvent;\n@@ -39,0 +36,1 @@\n+import java.nio.ByteBuffer;\n@@ -41,0 +39,1 @@\n+import static java.lang.Math.min;\n@@ -45,0 +44,1 @@\n+import static org.openjdk.asmtools.common.structure.ClassFileContext.VALUE_OBJECTS;\n@@ -48,0 +48,1 @@\n+import static org.openjdk.asmtools.jasm.ClassFileConst.ConstType.CONSTANT_UTF8;\n@@ -57,1 +58,4 @@\n-    private static final int COMMENT_OFFSET = 32;\n+    private static final int COMMENT_OFFSET = 42;\n+    private static final int BYTES_IN_LINE_SPACED_OUT = 12;    \/\/ Format: 0x04 0x3C 0x04 0x3D;\n+    private static final int BYTES_IN_LINE_CONDENSED = 8;     \/\/ Format: 0x043C043D043E1B1C;\n+\n@@ -78,1 +82,1 @@\n-        try (DataInputStream dis = environment.getInputFile().getDataInputStream(Optional.empty())) {\n+        try (DataInputStream dis = environment.getToolInput().getDataInputStream(Optional.empty())) {\n@@ -113,1 +117,0 @@\n-     *\n@@ -121,1 +124,1 @@\n-        final int BYTES_IN_LINE = printSeparately ? 4 : 8;\n+        final int BYTES_IN_LINE = printSeparately ? BYTES_IN_LINE_SPACED_OUT : BYTES_IN_LINE_CONDENSED;\n@@ -162,3 +165,5 @@\n-                if (i % 8 == 0) {\n-                    out_print(\"0x\");\n-                }\n+                if (i % BYTES_IN_LINE_SPACED_OUT == 0)\n+                    environment.print(INDENT_STRING);\n+                else\n+                    environment.print(\" \");\n+                environment.print(\"0x\");\n@@ -166,1 +171,1 @@\n-                if (i % 8 == 7) {\n+                if (i % BYTES_IN_LINE_SPACED_OUT == BYTES_IN_LINE_SPACED_OUT - 1)\n@@ -168,1 +173,0 @@\n-                }\n@@ -170,0 +174,1 @@\n+                environment.println(\";\");\n@@ -175,0 +180,20 @@\n+    private void printBytes(byte[] buf) {\n+        boolean newline = false;\n+        for (int i = 0; i < buf.length; i++) {\n+            if (i % BYTES_IN_LINE_SPACED_OUT == 0)\n+                environment.print(INDENT_STRING);\n+            else\n+                environment.print(\" \");\n+            environment.print(\"0x\");\n+            printByteHex(buf[i]);\n+            if (i % BYTES_IN_LINE_SPACED_OUT == BYTES_IN_LINE_SPACED_OUT - 1) {\n+                newline = true;\n+                environment.println(\";\");\n+            } else {\n+                newline = false;\n+            }\n+        }\n+        if (!newline)\n+            environment.println(\";\");\n+    }\n+\n@@ -176,1 +201,0 @@\n-        String name = (String) cpool[index];\n@@ -178,4 +202,6 @@\n-        if (environment.printDetailsFlag) {\n-            environment.println(format(\"%-16s\", indexName) + \" : \" + name);\n-        } else {\n-            environment.println(indexName);\n+        String comment = indexName;\n+        try {\n+            if (environment.printDetailsFlag) {\n+                comment = format(\"%-16s\", indexName) + \" : \" + cpool[index];\n+            }\n+        } catch (Exception ignored) {\n@@ -183,0 +209,1 @@\n+        environment.println(comment);\n@@ -220,1 +247,1 @@\n-    private void readCP(DataInputStream in) throws IOException {\n+    private void readCP(byte[] alreadyRead, DataInputStream in) throws IOException {\n@@ -235,1 +262,1 @@\n-            ConstType tg = tag(btag);\n+            ConstType tg = getByTag(btag);\n@@ -237,2 +264,6 @@\n-                case CONSTANT_UTF8 -> cpool[i] = in.readUTF();\n-                case CONSTANT_INTEGER -> {\n+                case CONSTANT_UTF8, CONSTANT_ASCIZ -> cpool[i] = in.readUTF();\n+                case CONSTANT_INTEGER, CONSTANT_INT,\n+                     CONSTANT_BYTE, CONSTANT_C_BYTE,\n+                     CONSTANT_CHAR, CONSTANT_C_CHAR,\n+                     CONSTANT_SHORT, CONSTANT_C_SHORT,\n+                     CONSTANT_C_BOOLEAN, CONSTANT_BOOLEAN -> {\n@@ -242,1 +273,1 @@\n-                case CONSTANT_FLOAT -> {\n+                case CONSTANT_FLOAT, CONSTANT_C_FLOAT -> {\n@@ -246,1 +277,1 @@\n-                case CONSTANT_LONG -> {\n+                case CONSTANT_LONG, CONSTANT_C_LONG -> {\n@@ -251,1 +282,1 @@\n-                case CONSTANT_DOUBLE -> {\n+                case CONSTANT_DOUBLE, CONSTANT_C_DOUBLE -> {\n@@ -256,1 +287,3 @@\n-                case CONSTANT_CLASS, CONSTANT_STRING, CONSTANT_MODULE, CONSTANT_PACKAGE -> {\n+                case CONSTANT_CLASS, CONSTANT_C_CLASS,\n+                     CONSTANT_STRING, CONSTANT_L_STRING,\n+                     CONSTANT_MODULE, CONSTANT_PACKAGE -> {\n@@ -260,2 +293,4 @@\n-                case CONSTANT_INTERFACEMETHODREF, CONSTANT_FIELDREF, CONSTANT_METHODREF, CONSTANT_NAMEANDTYPE ->\n-                        cpool[i] = \"#\" + in.readUnsignedShort() + \" #\" + in.readUnsignedShort();\n+                case CONSTANT_INTERFACEMETHODREF, CONSTANT_INTERFACEMETHOD,\n+                     CONSTANT_FIELDREF, CONSTANT_FIELD,\n+                     CONSTANT_METHODREF, CONSTANT_METHOD,\n+                     CONSTANT_NAMEANDTYPE -> cpool[i] = \"#\" + in.readUnsignedShort() + \" #\" + in.readUnsignedShort();\n@@ -267,4 +302,10 @@\n-                    CPlen = i;\n-                    printCP();\n-                    out_println(toHex(btag, 1) + \"; \/\/ invalid constant type: \" + (int) btag + \" for element \" + i);\n-                    throw new ClassFormatError();\n+                    cpool[i] = in.readUnsignedShort();\n+                    CPlen = ++i;\n+                    \/\/ the output can be not ready if file output is used.\n+                    if (!environment.getToolOutput().isReady()) {\n+                        environment.setToolOutput(new StdoutOutput());\n+                    }\n+                    out_println(\"class {\");\n+                    printBytes(alreadyRead);\n+                    indent++;\n+                    printCP();  \/\/ exception will be thrown here.\n@@ -285,1 +326,1 @@\n-                ConstType tg = tag(btag);\n+                ConstType tg = getByTag(btag);\n@@ -297,3 +338,3 @@\n-                    case CONSTANT_UTF8 -> {\n-                        tagstr = \"Utf8\";\n-                        valstr = StringUtils.Utf8ToString((String) cpool[i], \"\\\"\");\n+                    case CONSTANT_UTF8, CONSTANT_ASCIZ -> {\n+                        tagstr = CONSTANT_UTF8.parseKey();\n+                        valstr = StringUtils.Utf8ToString(getStringByIndex(i), \"\\\"\");\n@@ -301,1 +342,6 @@\n-                    case CONSTANT_FLOAT, CONSTANT_INTEGER -> {\n+                    case CONSTANT_INTEGER, CONSTANT_INT,\n+                         CONSTANT_BYTE, CONSTANT_C_BYTE,\n+                         CONSTANT_CHAR, CONSTANT_C_CHAR,\n+                         CONSTANT_SHORT, CONSTANT_C_SHORT,\n+                         CONSTANT_C_BOOLEAN, CONSTANT_BOOLEAN,\n+                         CONSTANT_FLOAT, CONSTANT_C_FLOAT -> {\n@@ -305,1 +351,1 @@\n-                    case CONSTANT_DOUBLE, CONSTANT_LONG -> {\n+                    case CONSTANT_DOUBLE, CONSTANT_C_DOUBLE, CONSTANT_LONG, CONSTANT_C_LONG -> {\n@@ -310,1 +356,3 @@\n-                    case CONSTANT_CLASS, CONSTANT_MODULE, CONSTANT_PACKAGE, CONSTANT_STRING -> {\n+                    case CONSTANT_MODULE, CONSTANT_PACKAGE,\n+                         CONSTANT_CLASS, CONSTANT_C_CLASS,\n+                         CONSTANT_STRING, CONSTANT_L_STRING -> {\n@@ -314,5 +362,10 @@\n-                    case CONSTANT_INTERFACEMETHODREF, CONSTANT_FIELDREF,\n-                            CONSTANT_METHODREF, CONSTANT_NAMEANDTYPE,\n-                            CONSTANT_METHODHANDLE, CONSTANT_METHODTYPE,\n-                            CONSTANT_DYNAMIC, CONSTANT_INVOKEDYNAMIC -> valstr = (String) cpool[i];\n-                    default -> throw new Error(\"invalid constant type: \" + (int) btag);\n+                    case CONSTANT_INTERFACEMETHODREF, CONSTANT_INTERFACEMETHOD,\n+                         CONSTANT_FIELDREF, CONSTANT_FIELD,\n+                         CONSTANT_METHODREF, CONSTANT_METHOD,\n+                         CONSTANT_NAMEANDTYPE,\n+                         CONSTANT_METHODHANDLE, CONSTANT_METHODTYPE,\n+                         CONSTANT_DYNAMIC, CONSTANT_INVOKEDYNAMIC -> valstr = getStringByIndex(i);\n+                    default -> {\n+                        out_println(toHex(btag, 1) + \"; \/\/ invalid constant type: \" + (int) btag + \" for element \" + i);\n+                        throw new ClassFormatError(\"Invalid constant type: \" + (int) btag + \" for element \" + i);\n+                    }\n@@ -335,2 +388,2 @@\n-     *     u1 tag;              \/\/ == CONSTANT_MODULE(19)\n-     *     u2 name_index;\n+     * u1 tag;              \/\/ == CONSTANT_MODULE(19)\n+     * u2 name_index;\n@@ -352,1 +405,1 @@\n-                name = StringUtils.Utf8ToString((String) cpool[(int) cpool[idx]]);\n+                name = StringUtils.Utf8ToString(getStringByIndex(idx));\n@@ -387,1 +440,1 @@\n-            if (outputString.length() > 0) {\n+            if (!outputString.isEmpty()) {\n@@ -393,0 +446,32 @@\n+    \/**\n+     * Reads from\n+     * early_larval_frame {\n+     * u1 frame_type = EARLY_LARVAL;            \/\/ 246\n+     * u2 number_of_unset_fields;\n+     * u2 unset_fields[number_of_unset_fields];\n+     * base_frame base;\n+     * }\n+     * the structure unset_fields[number_of_unset_fields] and returns its string presentation\n+     *\n+     * @param in input stream\n+     * @return String presentation of the aggregation of [number_of_unset_fields] {unset_fields }\n+     * @throws IOException if IO exception occurs\n+     *\/\n+    private String getUnsetFields(DataInputStream in) throws IOException {\n+        int num = in.readUnsignedShort();\n+        StringBuilder sb = new StringBuilder(20);\n+        sb.append(startArray(num)).append('{');\n+        try {\n+            for (int i = 0; i < num; i++) {\n+                int cpIndex = in.readUnsignedShort();   \/\/ unset_field[i]\n+                sb.append(\"#\").append(cpIndex);\n+                if (i < num - 1) {\n+                    sb.append(\"; \");\n+                }\n+            }\n+        } finally {\n+            sb.append('}');\n+        }\n+        return sb.toString();\n+    }\n+\n@@ -406,1 +491,1 @@\n-                        Optional.of((s) -> environment.printErrorLn(s)));\n+                        Optional.of((s, a) -> environment.printErrorLn(s, a)));\n@@ -418,1 +503,1 @@\n-                    case ITEM_Object, ITEM_NewObject -> maptypeImg = maptypeImg + \",\" + in.readUnsignedShort();\n+                    case ITEM_Object, ITEM_NewObject -> maptypeImg = maptypeImg + \",#\" + in.readUnsignedShort();\n@@ -522,2 +607,2 @@\n-                        AE_INT, AE_LONG, AE_SHORT, AE_BOOLEAN,\n-                        AE_STRING -> decodeCPXAttr(in, 2, \"const_value_index\");\n+                     AE_INT, AE_LONG, AE_SHORT, AE_BOOLEAN,\n+                     AE_STRING -> decodeCPXAttr(in, 2, \"const_value_index\");\n@@ -547,1 +632,2 @@\n-                    String msg = \"invalid element_value\" + (isPrintableChar(tg) ? \" tag type : \" + tg : \"??\");\n+                    String msg = \"invalid element_value\" +\n+                            (StringUtils.isPrintableChar(tg) ? \" tag type : \" + tg : \"??\");\n@@ -557,8 +643,0 @@\n-    public boolean isPrintableChar(char c) {\n-        Character.UnicodeBlock block = Character.UnicodeBlock.of(c);\n-        return (!Character.isISOControl(c)) &&\n-                c != KeyEvent.CHAR_UNDEFINED &&\n-                block != null &&\n-                block != Character.UnicodeBlock.SPECIALS;\n-    }\n-\n@@ -679,1 +757,1 @@\n-            ConstType tag = tag(btag);\n+            ConstType tag = getByTag(btag);\n@@ -682,1 +760,1 @@\n-                AttrName = (String) cpool[name_cpx];\n+                AttrName = getStringByIndex(name_cpx);\n@@ -706,1 +784,1 @@\n-                        printBytes(in, code_len, false);\n+                        printBytes(in, code_len, true);\n@@ -711,0 +789,7 @@\n+                    \/*\n+                    {   u2 start_pc;\n+                        u2 end_pc;\n+                        u2 handler_pc;\n+                        u2 catch_type;\n+                    } exception_table[exception_table_length];\n+                     *\/\n@@ -714,5 +799,5 @@\n-                            out_println(in.readUnsignedShort() + \" \" +\n-                                    in.readUnsignedShort() + \" \" +\n-                                    in.readUnsignedShort() + \" \" +\n-                                    in.readUnsignedShort() + \";\" +\n-                                    getCommentPosCond());\n+                            out_println(\n+                                    \"%4d %4d %4d %3d;\".formatted(in.readUnsignedShort(),\n+                                            in.readUnsignedShort(),\n+                                            in.readUnsignedShort(),\n+                                            in.readUnsignedShort()) + getCommentPosCond());\n@@ -743,3 +828,3 @@\n-                            out_println(in.readUnsignedShort() + \"  \" +\n-                                    in.readUnsignedShort() + \";\" +\n-                                    getCommentPosCond());\n+                            out_println(\n+                                    \"%4d %4d;\".formatted(in.readUnsignedShort(), in.readUnsignedShort()) +\n+                                            getCommentPosCond());\n@@ -756,6 +841,5 @@\n-                            out_println(in.readUnsignedShort() + \" \" +\n-                                    in.readUnsignedShort() + \" \" +\n-                                    in.readUnsignedShort() + \" \" +\n-                                    in.readUnsignedShort() + \" \" +\n-                                    in.readUnsignedShort() + \";\" +\n-                                    getCommentPosCond());\n+                            out_println(\n+                                    \"%4d %4d %4d %4d %3d;\".formatted(in.readUnsignedShort(),\n+                                            in.readUnsignedShort(), in.readUnsignedShort(),\n+                                            in.readUnsignedShort(), in.readUnsignedShort()) +\n+                                            getCommentPosCond());\n@@ -772,4 +856,10 @@\n-                            out_println(\"#\" + in.readUnsignedShort() + \" #\" +\n-                                    in.readUnsignedShort() + \" #\" +\n-                                    in.readUnsignedShort() + \" \" +\n-                                    in.readUnsignedShort() + \";\" + getCommentPosCond());\n+                            int inner_class_info_index = in.readUnsignedShort();\n+                            int outer_class_info_index = in.readUnsignedShort();\n+                            int inner_name_index = in.readUnsignedShort();\n+                            int inner_class_access_flags = in.readUnsignedShort();\n+                            out_println(\"%5s %5s %5s %3s;\".formatted(\n+                                    \"#\" + inner_class_info_index,\n+                                    \"#\" + outer_class_info_index,\n+                                    \"#\" + inner_name_index,\n+                                    \"\" + inner_class_access_flags) +\n+                                    getInnerClassComment(inner_class_access_flags));\n@@ -795,0 +885,1 @@\n+                    int wrappingLevel = 0;\n@@ -798,1 +889,2 @@\n-                        for (int k = 0; k < et_num; k++) {\n+                        int idx = 0;          \/\/ wrapper (early_larval_frame) is skipped.\n+                        while (idx < et_num) {\n@@ -800,1 +892,3 @@\n-                            StackMap.FrameType ftype = StackMap.stackMapFrameType(frame_type);\n+                            StackMap.EntryType ftype = StackMap.stackMapEntryType(frame_type);\n+                            String indentString = (wrappingLevel > 0) ? INDENT_STRING.repeat(min(wrappingLevel, 4)) : \"\";\n+\n@@ -803,2 +897,3 @@\n-                                    \/\/ verificationType is same_frame;\n-                                    out_println(\"\" + frame_type + \"b; \/\/ same_frame\");\n+                                    \/\/ entryType is same_frame;\n+                                    out_println(indentString.concat(frame_type + \"b; \/\/ same_frame\"));\n+                                    wrappingLevel = checkWrapping(wrappingLevel);\n@@ -807,1 +902,1 @@\n-                                    \/\/ verificationType is same_locals_1_stack_item_frame\n+                                    \/\/ entryType is same_locals_1_stack_item_frame\n@@ -809,2 +904,10 @@\n-                                    out_println(format(\"%db, %s; \/\/ same_locals_1_stack_item_frame\",\n-                                            frame_type, getStackMap(in, 1)));\n+                                    out_println(indentString.concat(format(\"%db, %s; \/\/ same_locals_1_stack_item_frame\",\n+                                            frame_type, getStackMap(in, 1))));\n+                                    wrappingLevel = checkWrapping(wrappingLevel);\n+                                }\n+                                case EARLY_LARVAL -> {\n+                                    \/\/ entryType is early_larval_frame\n+                                    out_println(indentString.concat(format(\"%db, %s, { \/\/ early_larval_frame\",\n+                                            frame_type, getUnsetFields(in))));\n+                                    wrappingLevel++;\n+                                    continue;   \/\/ skip idx increasing\n@@ -812,2 +915,2 @@\n-                                case SAME_LOCALS_1_STACK_ITEM_EXTENDED_FRAME -> {\n-                                    \/\/ verificationType is same_locals_1_stack_item_frame_extended\n+                                case SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED -> {\n+                                    \/\/ entryType is same_locals_1_stack_item_frame_extended\n@@ -816,2 +919,3 @@\n-                                    out_println(format(\"%db, %d, %s; \/\/ same_locals_1_stack_item_frame_extended\",\n-                                            frame_type, noffset, getStackMap(in, 1)));\n+                                    out_println(indentString.concat(format(\"%db, %d, %s; \/\/ same_locals_1_stack_item_frame_extended\",\n+                                            frame_type, noffset, getStackMap(in, 1))));\n+                                    wrappingLevel = checkWrapping(wrappingLevel);\n@@ -820,1 +924,1 @@\n-                                    \/\/ verificationType is chop_frame\n+                                    \/\/ entryType is chop_frame\n@@ -822,2 +926,3 @@\n-                                    out_println(format(\"%db, %d; \/\/ chop_frame %d\",\n-                                            frame_type, coffset, 251 - frame_type));\n+                                    out_println(indentString.concat(format(\"%db, %d; \/\/ chop_frame %d\",\n+                                            frame_type, coffset, 251 - frame_type)));\n+                                    wrappingLevel = checkWrapping(wrappingLevel);\n@@ -825,2 +930,2 @@\n-                                case SAME_FRAME_EX -> {\n-                                    \/\/ verificationType is same_frame_extended;\n+                                case SAME_FRAME_EXTENDED -> {\n+                                    \/\/ entryType is same_frame_extended;\n@@ -828,2 +933,3 @@\n-                                    out_println(format(\"%db, %d; \/\/ same_frame_extended\",\n-                                            frame_type, xoffset));\n+                                    out_println(indentString.concat(format(\"%db, %d; \/\/ same_frame_extended\",\n+                                            frame_type, xoffset)));\n+                                    wrappingLevel = checkWrapping(wrappingLevel);\n@@ -832,1 +938,1 @@\n-                                    \/\/ verificationType is append_frame\n+                                    \/\/ entryType is append_frame\n@@ -835,1 +941,1 @@\n-                                    out_println(format(\"%db, %d, %s; \/\/ append_frame %d\",\n+                                    out_println(indentString.concat(format(\"%db, %d, %s; \/\/ append_frame %d\",\n@@ -837,1 +943,2 @@\n-                                            getStackMap(in, frame_type - 251), frame_type - 251));\n+                                            getStackMap(in, frame_type - 251), frame_type - 251)));\n+                                    wrappingLevel = checkWrapping(wrappingLevel);\n@@ -840,1 +947,1 @@\n-                                    \/\/ verificationType is full_frame\n+                                    \/\/ entryType is full_frame\n@@ -842,2 +949,3 @@\n-                                    out_println(format(\"%db, %d, %s, %s; \/\/ full_frame\", frame_type, foffset,\n-                                            getStackMap(in, 0), getStackMap(in, 0)));\n+                                    out_println(indentString.concat(format(\"%db, %d, %s, %s; \/\/ full_frame\", frame_type, foffset,\n+                                            getStackMap(in, 0), getStackMap(in, 0))));\n+                                    wrappingLevel = checkWrapping(wrappingLevel);\n@@ -846,0 +954,1 @@\n+                            idx++;\n@@ -999,2 +1108,1 @@\n-                \/\/ Valhalla\n-                case ATT_NestMembers, ATT_PermittedSubclasses, ATT_Preload -> {\n+                case ATT_NestMembers, ATT_PermittedSubclasses -> {\n@@ -1009,0 +1117,17 @@\n+                \/\/ Valhalla:\n+                \/\/\n+                \/\/ LoadableDescriptors_attribute {\n+                \/\/ u2 attribute_name_index;\n+                \/\/ u4 attribute_length;\n+                \/\/ u2 number_of_descriptors;\n+                \/\/ u2 descriptors[number_of_descriptors];\n+                \/\/ }\n+                case ATT_LoadableDescriptors -> {\n+                    int nsubtypes = in.readUnsignedShort();\n+                    startArrayCmt(nsubtypes, \"Utf8\");\n+                    try {\n+                        decodeTypes(in, nsubtypes);\n+                    } finally {\n+                        out_end(\"}\");\n+                    }\n+                }\n@@ -1016,3 +1141,1 @@\n-                    if (AttrName == null) {\n-                        endingComment = \"Attr(#\" + name_cpx + \")\";\n-                    }\n+                    endingComment = \"Attr(#\" + name_cpx + \")\";\n@@ -1022,3 +1145,1 @@\n-                    if (AttrName == null) {\n-                        endingComment = \"Attr(#\" + name_cpx + \")\";\n-                    }\n+                    endingComment = \"Attr(#\" + name_cpx + \")\";\n@@ -1076,1 +1197,1 @@\n-        entityName = (String) cpool[(Integer) cpool[index]];\n+        entityName = getStringByIndex(index);\n@@ -1183,0 +1304,8 @@\n+    String getInnerClassComment(int inner_class_access_flags) {\n+        StringBuilder sb = new StringBuilder();\n+        if (environment.printDetailsFlag) {\n+            sb.append(\"\/\/ access [ \").append(EModifier.asNames(inner_class_access_flags, ClassFileContext.INNER_CLASS)).append(\" ]\");\n+        }\n+        return sb.toString();\n+    }\n+\n@@ -1184,0 +1313,1 @@\n+        boolean printingStarted = false;\n@@ -1189,0 +1319,3 @@\n+            ByteBuffer byteBuffer = ByteBuffer.allocate(8).putInt(magic).\n+                    putShort((short) min_version).\n+                    putShort((short) version);\n@@ -1191,1 +1324,1 @@\n-            readCP(inputStream);\n+            readCP(byteBuffer.array(), inputStream);\n@@ -1204,1 +1337,2 @@\n-                if (!entityName.isEmpty() && (JcodTokens.keyword_token_ident(entityName) != IDENT || JcodTokens.constValue(entityName) != -1)) {\n+                if (!entityName.isEmpty() && (JcodTokens.keyword_token_ident(entityName) != IDENT ||\n+                        JcodTokens.getConstTagByParseString(entityName) != -1)) {\n@@ -1211,0 +1345,1 @@\n+                printingStarted = true;\n@@ -1212,1 +1347,1 @@\n-                entityName = environment.getInputFile().getFileName();\n+                entityName = environment.getToolInput().getName();\n@@ -1215,0 +1350,1 @@\n+                printingStarted = true;\n@@ -1218,1 +1354,1 @@\n-                out_println(toHex(magic, 4) + \"; \/\/ wrong magic: 0x\" + Integer.toString(JAVA_MAGIC, 16) + \" expected\");\n+                out_println(toHex(magic, 4) + \"; \/\/ wrong magic: \" + toHex(JAVA_MAGIC, 4) + \" expected\");\n@@ -1226,0 +1362,4 @@\n+            if (CFVersion.isValueObjectContext(version, min_version)) {\n+                EModifier.setGlobalContext(VALUE_OBJECTS);\n+            }\n+\n@@ -1257,2 +1397,1 @@\n-            environment.println(\"\/\/------- ClassFormatError\" +\n-                    (msg == null || msg.isEmpty() ? \"\" : \": \" + msg));\n+            environment.println(INDENT_STRING + \"\/\/ ClassFormatError\" + (msg == null || msg.isEmpty() ? \"\" : \": \" + msg));\n@@ -1260,0 +1399,2 @@\n+            printingStarted = true;\n+            throw err;\n@@ -1261,4 +1402,6 @@\n-            if (environment.printDetailsFlag) {\n-                out_end(format(\"} \/\/ end of %s %s\", entityType, entityName));\n-            } else {\n-                out_end(\"}\");\n+            if (printingStarted) {\n+                if (environment.printDetailsFlag && (!entityName.isBlank() || !entityType.isBlank())) {\n+                    out_end(format(\"} \/\/ end of %s %s\", entityType, entityName));\n+                } else {\n+                    out_end(\"}\");\n+                }\n@@ -1270,0 +1413,9 @@\n+    private int checkWrapping(int wrappingLevel) {\n+        if (wrappingLevel > 0) {\n+            for (int i = wrappingLevel-1; i >= 0; i--) {\n+                out_println(INDENT_STRING.repeat(i).concat(\"};\"));\n+            }\n+        }\n+        return 0;\n+    }\n+\n@@ -1276,1 +1428,7 @@\n-                String name = (String) cpool[(int) cpool[type_cpx]];\n+                Object cpObj = cpool[type_cpx];\n+                String name;\n+                if (cpObj instanceof Integer index) {\n+                    name = getStringByIndex(index);\n+                } else {\n+                    name = \"Reference to a ConstantPool Object: %s\".formatted(cpObj);\n+                }\n@@ -1279,1 +1437,1 @@\n-                environment.println(s);\n+                out_println(s);\n@@ -1284,4 +1442,19 @@\n-    private String formatComments(String s, int shift) {\n-        String[] pair = s.split(\"\/\/\");\n-        if (pair.length != 2) {\n-            return s;\n+    private String getStringByIndex(int idx) {\n+        Object str = cpool[idx];\n+        if (str instanceof String) {\n+            return (String) str;\n+        } else {\n+            return \" \/\/ The ConstantPoll Index #%d refers to a ConstantPool Object: %s\".\n+                    formatted(idx, String.valueOf(str));\n+        }\n+    }\n+\n+    private String formatComments(String str, int shift) {\n+        String[] pair = str.split(\"\/\/\");\n+        int len = pair.length;\n+        if (len < 2) {\n+            return str;\n+        }\n+        String s = pair[0];\n+        for (int i = 1; i <= len - 2; i++) {\n+            s = s.concat(\"\/\/\").concat(pair[i]);\n@@ -1289,3 +1462,1 @@\n-        pair[0] = pair[0].trim();\n-        pair[1] = pair[1].trim();\n-        return pair[0] + repeat(\" \", COMMENT_OFFSET - pair[0].length() - shift * INDENT_LENGTH) + \" \/\/ \" + pair[1];\n+        return s + repeat(\" \", COMMENT_OFFSET - s.length() - shift * INDENT_LENGTH) + \" \/\/ \" + pair[len - 1].trim();\n","filename":"src\/org\/openjdk\/asmtools\/jdec\/ClassData.java","additions":307,"deletions":136,"binary":false,"changes":443,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import org.openjdk.asmtools.common.outputs.log.DualStreamToolOutput;\n@@ -29,0 +28,1 @@\n+import org.openjdk.asmtools.common.outputs.log.DualStreamToolOutput;\n","filename":"src\/org\/openjdk\/asmtools\/jdec\/JdecEnvironment.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,2 +25,1 @@\n-import org.openjdk.asmtools.common.Tool;\n-import org.openjdk.asmtools.common.outputs.log.DualStreamToolOutput;\n+import org.openjdk.asmtools.common.Decoder;\n@@ -29,0 +28,1 @@\n+import org.openjdk.asmtools.common.outputs.log.DualStreamToolOutput;\n@@ -33,1 +33,1 @@\n-public abstract class JdecTool extends Tool<JdecEnvironment> {\n+public abstract class JdecTool extends Decoder<JdecEnvironment> {\n","filename":"src\/org\/openjdk\/asmtools\/jdec\/JdecTool.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+import static org.openjdk.asmtools.Main.*;\n@@ -41,0 +42,1 @@\n+import static org.openjdk.asmtools.common.outputs.FSOutput.FSDestination.DIR;\n@@ -88,0 +90,1 @@\n+                \"info.opt.w\",\n@@ -109,2 +112,3 @@\n-                case org.openjdk.asmtools.Main.DIR_SWITCH:\n-                    setDestDir(++i, argv);\n+                case WRITE_SWITCH:                              \/\/ -w\n+                    environment.setIgnorePackage(true);\n+                    setFSDestination(DIR, ++i, argv);\n@@ -112,1 +116,4 @@\n-                case org.openjdk.asmtools.Main.DUAL_LOG_SWITCH:\n+                case DIR_SWITCH:\n+                    setFSDestination(DIR, ++i, argv);\n+                    break;\n+                case DUAL_LOG_SWITCH:\n@@ -115,1 +122,1 @@\n-                case org.openjdk.asmtools.Main.VERSION_SWITCH:\n+                case VERSION_SWITCH:\n@@ -121,1 +128,1 @@\n-                case org.openjdk.asmtools.Main.STDIN_SWITCH:\n+                case STDIN_SWITCH:\n@@ -144,6 +151,0 @@\n-    \/\/ Runs the decoder with args\n-    public synchronized boolean decode(String... argv) {\n-        parseArgs(argv);\n-        return this.decode() == OK;\n-    }\n-\n@@ -153,0 +154,1 @@\n+    @Override\n@@ -154,1 +156,2 @@\n-        for (ToolInput inputFileName : fileList) {\n+        int rc = 0;\n+        for (ToolInput toolInput : fileList) {\n@@ -156,1 +159,1 @@\n-                environment.setInputFile(inputFileName);\n+                environment.setToolInput(toolInput);\n@@ -159,0 +162,3 @@\n+                environment.getOutputs().flush();\n+                rc = environment.getLogger().registerTotalIssues(rc, toolInput);\n+                environment.getLogger().flush();\n@@ -162,1 +168,2 @@\n-                environment.error(\"err.not_found\", inputFileName);\n+                environment.error(\"err.not_found\", toolInput);\n+                rc = FAILED;\n@@ -164,0 +171,1 @@\n+                environment.error(ioe);\n@@ -165,3 +173,1 @@\n-                if (!environment.getVerboseFlag())\n-                    environment.printErrorLn(ioe.getMessage());\n-                environment.error(\"err.fatal_error\", inputFileName);\n+                rc = environment.getLogger().registerTotalIssues(rc, toolInput);\n@@ -169,0 +175,1 @@\n+                environment.error(error);\n@@ -170,1 +177,1 @@\n-                environment.error(\"err.fatal_error\", inputFileName);\n+                rc = environment.getLogger().registerTotalIssues(rc, toolInput);\n@@ -172,0 +179,1 @@\n+                environment.error(ex);\n@@ -173,1 +181,1 @@\n-                environment.error(\"err.fatal_exception\", inputFileName);\n+                rc = environment.getLogger().registerTotalIssues(rc, toolInput);\n@@ -175,1 +183,2 @@\n-            return FAILED;\n+            environment.getLogger().flush();\n+            return rc;\n","filename":"src\/org\/openjdk\/asmtools\/jdec\/Main.java","additions":30,"deletions":21,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -31,2 +31,1 @@\n-err.fatal_error=Fatal error in file: {0}\n-err.fatal_exception=Fatal exception in file: {0}\n+err.count.issues={0}{1}in the file: {2}\n","filename":"src\/org\/openjdk\/asmtools\/jdec\/i18n.properties","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -68,1 +68,0 @@\n-        \/\/ TODO: check Valhalla InlinableReferenceType: Q ClassName ;\n@@ -134,1 +133,0 @@\n-        \/\/ TODO: check 401 InlinableReferenceType: Q ClassName ;\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/AnnotationData.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -89,2 +89,9 @@\n-            default -> throw new FormatError(data.environment.getLogger(),\n-                    \"err.unknown.tag\", isPrintableChar(tg) ? tg : '?', Integer.toHexString(tg));\n+            default -> {\n+                if (data.bestEffort) {\n+                    data.environment.error(\"err.unknown.tag\", isPrintableChar(tg) ? tg : '?', Integer.toHexString(tg));\n+                    val = new Annotation_AnnotationValue<>(tag, data, null);\n+                } else {\n+                    throw new FormatError(data.environment.getLogger(),\n+                            \"err.unknown.tag\", isPrintableChar(tg) ? tg : '?', Integer.toHexString(tg));\n+                }\n+            }\n@@ -108,1 +115,1 @@\n-        if( printCPIndex ) {\n+        if (printCPIndex) {\n@@ -208,1 +215,1 @@\n-                if( skipComments ) {\n+                if (skipComments) {\n@@ -222,1 +229,1 @@\n-            if ( state == HAS_DEFAULT_VALUE) {\n+            if (state == HAS_DEFAULT_VALUE) {\n@@ -224,1 +231,1 @@\n-            } else if( state == RIGHT_OPERAND) {\n+            } else if (state == RIGHT_OPERAND) {\n@@ -257,1 +264,1 @@\n-                    if( skipComments ) {\n+                    if (skipComments) {\n@@ -325,1 +332,1 @@\n-                return getCommentOffset() + DEFAULT_VALUE_PREFIX.length() + 2;\n+                return getCommentOffset() + DEFAULT_VALUE_PREFIX.length() + getIndentSize();\n@@ -342,1 +349,1 @@\n-            printPadLeft(INDENT_STRING, INDENT_OFFSET*2);\n+            printPadLeft(INDENT_STRING, INDENT_OFFSET * 2);\n@@ -349,1 +356,1 @@\n-                        printPadLeft(INDENT_STRING, INDENT_OFFSET*2);\n+                        printPadLeft(INDENT_STRING, INDENT_OFFSET * 2);\n@@ -405,4 +412,6 @@\n-            \/\/ set the same offset, Indent etc.\n-            annotationData.setCommentOffset(this.getCommentOffset());\n-            annotationData.setTheSame(this);\n-            annotationData.print();  \/\/ check off\n+            if (this.annotationData != null) { \/\/ data might be null if -best-effort is set\n+                \/\/ sets the same offset, Indent etc.\n+                annotationData.setCommentOffset(this.getCommentOffset());\n+                annotationData.setTheSame(this);\n+                annotationData.print();  \/\/ check off\n+            }\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/AnnotationElement.java","additions":24,"deletions":15,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -25,0 +25,5 @@\n+import org.openjdk.asmtools.asmutils.HexUtils;\n+import org.openjdk.asmtools.common.Environment;\n+import org.openjdk.asmtools.common.FormatError;\n+import org.openjdk.asmtools.common.structure.EAttribute;\n+\n@@ -27,0 +32,6 @@\n+import java.util.Arrays;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import static java.lang.Math.min;\n+import static org.openjdk.asmtools.asmutils.HexUtils.toHex;\n@@ -30,1 +41,4 @@\n-    private boolean corrupted = false;\n+    private final int MAX_DATA_PRINT_SIZE = 10;\n+\n+    private EAttribute attributeInfo;\n+    \/\/\n@@ -35,1 +49,1 @@\n-    final JdisEnvironment environment;\n+    final Environment environment;\n@@ -37,1 +51,1 @@\n-    public AttrData(JdisEnvironment environment) {\n+    public AttrData(Environment environment, EAttribute attributeInfo) {\n@@ -39,0 +53,1 @@\n+        this.attributeInfo = attributeInfo;\n@@ -49,2 +64,2 @@\n-            corrupted = true;\n-            environment.traceln(\"Corrupted AttrData:#%d length=%d\", name_cpx, attrLength);\n+            throw new FormatError(environment.getLogger(),\n+                    \"err.invalid.attribute.length\", attributeInfo.printValue(), attrLength);\n@@ -54,2 +69,10 @@\n-    public boolean isCorrupted() {\n-        return corrupted;\n+    public String dataAsString() {\n+        if (data != null && data.length > 0) {\n+            int maxLength = min( MAX_DATA_PRINT_SIZE, data.length );\n+            String res = IntStream.range(0, maxLength).mapToObj(i -> HexUtils.toHex(i)).collect(Collectors.joining(\", \"));\n+            if (data.length > MAX_DATA_PRINT_SIZE) {\n+                res += \", ...\";\n+            }\n+            return res;\n+        }\n+        return \"\";\n@@ -58,0 +81,10 @@\n+    \/**\n+     * ATTRIBUTE_NAME_attribute {\n+     * u2 attribute_name_index;\n+     * u4 attribute_length;\n+     * ...\n+     * }\n+     *\n+     * @param name_cpx set the ConstantPool index of the attribute name\n+     * @return the current instance\n+     *\/\n@@ -68,0 +101,9 @@\n+    \/**\n+     * ATTRIBUTE_NAME_attribute {\n+     * u2 attribute_name_index;\n+     * u4 attribute_length;\n+     * ...\n+     * }\n+     *\n+     * @return attribute_name_index\n+     *\/\n@@ -75,0 +117,4 @@\n+\n+    public EAttribute getAttributeInfo() {\n+        return attributeInfo;\n+    }\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/AttrData.java","additions":53,"deletions":7,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -0,0 +1,136 @@\n+\/*\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.jdis;\n+\n+import org.openjdk.asmtools.common.FormatError;\n+import org.openjdk.asmtools.common.ToolLogger;\n+import org.openjdk.asmtools.common.structure.EAttribute;\n+import org.openjdk.asmtools.jasm.TableFormatModel;\n+\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.util.function.Supplier;\n+\n+import static org.openjdk.asmtools.jasm.TableFormatModel.Token.ENCLOSING_METHOD;\n+\n+\/**\n+ * Base class for attributes: SourceFile, NestHost, EnclosingMethod with format:\n+ * <p>\n+ * attribute {\n+ * u2 attribute_name_index;\n+ * u4 attribute_length;     SourceFile, NestHost: 2     EnclosingMethod: 4\n+ * u2 constant_pool_index;  sourcefile_index, host_class_index, class_index\n+ * ****\n+ * u2 method_index;         Only if EnclosingMethod\n+ *\/\n+public abstract class AttributeData<A extends AttributeData<A>> extends Indenter {\n+    protected ConstantPool pool;\n+    protected ToolLogger logger;\n+\n+    protected int attribute_length = 0;\n+    \/\/ Constant pool: SourceFile, NestHost class, Inner class.\n+    protected String name = null;\n+    \/\/ sourcefile_index, host_class_index, class_index\n+    protected int cpx;\n+    \/\/ only applicable to EnclosingMethod\n+    \/\/ EnclosingMethod: If the current class is not immediately enclosed by a method or constructor,\n+    \/\/ then the value of the method_index (that is equal to CONSTANT_NameAndType_info_index;) item must be zero.\n+    protected int methodCpx = 0;\n+\n+    \/\/ Utility functions\n+    Supplier<String> idxStringSupplier;\n+    private Printable indexPrinter = () -> println(idxStringSupplier.get());\n+    private Printable namePrinter;\n+    private Printable indexAndNamePrinter = () -> print(PadRight(idxStringSupplier.get(), getPrintAttributeCommentPadding())).\n+            println((name != null) ? \" \/\/ %s\".formatted(name) : \"\");\n+\n+    protected AttributeData(ClassData classData, TableFormatModel.Token token) {\n+        super(classData.toolOutput);\n+        pool = classData.pool;\n+        logger = classData.data.environment.getLogger();\n+        tableToken = token;\n+        switch (tableToken) {\n+            case NEST_HOST, SOURCE_FILE -> {\n+                attribute_length = 2;\n+                idxStringSupplier = () -> \"#%d;\".formatted(cpx);\n+                namePrinter = () -> println(\"\\\"%s\\\";\".formatted(name != null ? name : \"???\"));\n+            }\n+            case ENCLOSING_METHOD -> {\n+                attribute_length = 4;\n+                idxStringSupplier = () -> \"#%d:#%d;\".formatted(cpx, methodCpx);\n+                namePrinter = () -> println(\"%s;\".formatted(name));\n+            }\n+            default -> throw new RuntimeException(\n+                    \"Implementation of \\\"%s\\\" is not supported\".formatted(tableToken.parseKey()));\n+        }\n+    }\n+\n+    public A read(DataInputStream in, int attribute_length) throws IOException, ClassFormatError {\n+        if (attribute_length != this.attribute_length) {\n+            if (bestEffort) {\n+                logger.error(\"err.invalid.attribute.length\",\n+                        tableToken.getAttribute().printValue(), attribute_length);\n+            } else {\n+                throw new FormatError(logger,\n+                        \"err.invalid.attribute.length\",\n+                        tableToken.getAttribute().printValue(), attribute_length);\n+            }\n+        }\n+        this.cpx = in.readUnsignedShort();\n+        if (tableToken == ENCLOSING_METHOD) {\n+            this.methodCpx = in.readUnsignedShort();\n+        }\n+        return (A) this;\n+    }\n+\n+    @Override\n+    protected void jasmPrint() {\n+        calculateName();\n+        printIndent(PadRight(tableToken.getJasmToken().parseKey(), getPrintAttributeKeyPadding()));\n+        if (printCPIndex) {\n+            if (skipComments) {\n+                indexPrinter.print();\n+            } else {\n+                indexAndNamePrinter.print();\n+            }\n+        } else {\n+            namePrinter.print();\n+        }\n+    }\n+\n+    \/**\n+     * There are no differences between the simple (jasm) and extended (table) presentations of NestHost,\n+     * SourceFile, EnclosingMethod attribute, and NestMembers attribute.\n+     *\/\n+    @Override\n+    protected void tablePrint() {\n+        this.jasmPrint();\n+    }\n+\n+    protected abstract String calculateName();\n+\n+    @FunctionalInterface\n+    public interface Printable {\n+        void print();\n+    }\n+}\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/AttributeData.java","additions":136,"deletions":0,"binary":false,"changes":136,"status":"added"},{"patch":"@@ -25,2 +25,0 @@\n-import org.openjdk.asmtools.jasm.JasmTokens;\n-\n@@ -31,0 +29,4 @@\n+import static java.lang.String.format;\n+import static org.openjdk.asmtools.jasm.JasmTokens.Token.BOOTSTRAPMETHOD;\n+import static org.openjdk.asmtools.jasm.TableFormatModel.Token.BOOTSTRAP_METHOD;\n+\n@@ -32,7 +34,7 @@\n- *  BootstrapMethods_attribute {\n- *     ...\n- *     {   u2 bootstrap_method_ref;\n- *         u2 num_bootstrap_arguments;\n- *         u2 bootstrap_arguments[num_bootstrap_arguments];\n- *     }\n- *  }\n+ * BootstrapMethods_attribute {\n+ * ...\n+ * { u2 bootstrap_method_ref;\n+ * u2 num_bootstrap_arguments;\n+ * u2 bootstrap_arguments[num_bootstrap_arguments];\n+ * }\n+ * }\n@@ -40,2 +42,1 @@\n-public class BootstrapMethodData extends Indenter {\n-\n+public class BootstrapMethodData extends Element<ClassData> {\n@@ -45,0 +46,1 @@\n+    int indexOffset;\n@@ -46,3 +48,6 @@\n-\n-    public BootstrapMethodData(ClassData cls) {\n-        super(cls.toolOutput);\n+    public BootstrapMethodData(ClassData classData, Container<BootstrapMethodData, ClassData> container) {\n+        super(classData, container);\n+        tableToken = BOOTSTRAP_METHOD;\n+        indexOffset = classData.printProgramCounter ?\n+                PROGRAM_COUNTER_PLACEHOLDER_LENGTH :\n+                INSTR_PREFIX_LENGTH - getIndentStep();\n@@ -53,7 +58,1 @@\n-        return printCPIndex && bsmArguments != null && !bsmArguments.isEmpty();\n-    }\n-\n-    \/\/ suppress setting comment offset\n-    @Override\n-    public Indenter setCommentOffset(int commentOffset) {\n-        return this;\n+        return bsmArguments != null && !bsmArguments.isEmpty();\n@@ -75,4 +74,20 @@\n-    public void print() throws IOException {\n-        printIndent(JasmTokens.Token.BOOTSTRAPMETHOD.parseKey() + \" #\" + bsmRef);\n-        for (int i = 0; i < numBsmArgs; i++) {\n-            print(\" #\" + bsmArguments.get(i));\n+    @Override\n+    protected void jasmPrint(int index, int size) throws IOException {\n+        int commentOffset = getCommentOffset() - TABLE_PADDING;\n+        final BsmInfo bsmInfo = getBsmInfo();\n+\n+        printIndent(PadRight(BOOTSTRAPMETHOD.parseKey(), TABLE_PADDING));\n+        if (printCPIndex) {\n+            if (skipComments) {\n+                println(\"#%d;\".formatted(bsmRef));\n+            } else {\n+                printPadRight(\"#%d;\".formatted(bsmRef), commentOffset).\n+                        println(\" \/\/ %s\".formatted(formatOperandLine(bsmInfo.strBsm(),\n+                                getCommentOffset() + getIndentSize(),\n+                                \" \/\/ \", InvokeDynamicBreakPositions)));\n+            }\n+        } else {\n+            println(formatOperandLine(\n+                    \"%s\".formatted(bsmInfo.strBsm()), TABLE_PADDING + getIndentStep(), \"\",\n+                    BootstrapMethodBreakPositions)\n+            );\n@@ -80,1 +95,31 @@\n-        println(\";\");\n+        if (numBsmArgs > 0) {\n+            printIndent(PadRight(\" \", TABLE_PADDING)).println(\"{\");\n+            incIndent(2);\n+            if (printCPIndex) {\n+                for (int i = 0; i < numBsmArgs; i++) {\n+                    int argRef = bsmArguments.get(i);\n+                    String delim = (i != numBsmArgs - 1) ? \",\" : \"\";\n+                    boolean notLastIdx = i != numBsmArgs - 1;\n+                    printIndent(PadRight(\" \", TABLE_PADDING));\n+                    if (skipComments) {\n+                        println(\"#%d%s\".formatted(argRef, delim));\n+                    } else {\n+                        String strArg = bsmInfo.cpx2Const().bsmArgWithoutDelimitersAsString(argRef, notLastIdx);\n+                        strArg = formatOperandLine(strArg, getCommentOffset() + getIndentStep(),\n+                                \" \/\/ \",\n+                                InvokeDynamicBreakPositions);\n+                        printPadRight(\"#%d%s\".formatted(argRef, delim), commentOffset - getIndentStep() * 2).\n+                                println(\" \/\/ %s\".formatted(strArg));\n+                    }\n+                }\n+            } else {\n+                String strArgs = bsmInfo.cpx2Const().bsmArgsAsString(this);\n+                printIndent(PadRight(\" \", TABLE_PADDING - getIndentStep())).\n+                        println(formatOperandLine(strArgs, TABLE_PADDING + getIndentStep() * 2, \"\",\n+                                BootstrapArgumentsBreakPositions));\n+            }\n+            decIndent(2);\n+            printIndent(PadRight(\" \", TABLE_PADDING)).println(\"}\");\n+        }\n+        if (index < size - 1)\n+            println();\n@@ -82,0 +127,81 @@\n+\n+    @Override\n+    protected void tablePrint(int index, int size) throws IOException {\n+        final int commentOffset = getCommentOffset() - indexOffset - getIndentSize();\n+        final BsmInfo bsmInfo = getBsmInfo();\n+\n+        if (index == 0) {\n+            printIndentLn(\"%s {\".formatted(BOOTSTRAPMETHOD.alias()));\n+        }\n+        incIndent();\n+        printIndent(PadRight(format(\"%2d:\", index), indexOffset));\n+        if (printCPIndex) {\n+            if (skipComments) {\n+                println(\"#%d;\".formatted(bsmRef));\n+            } else {\n+                printPadRight(\"#%d;\".formatted(bsmRef), commentOffset).\n+                        println(\" \/\/ %s\".formatted(formatOperandLine(\n+                                \"%s\".formatted(bsmInfo.strBsm()),\n+                                getCommentOffset() + getIndentStep(),\n+                                \" \/\/ \",\n+                                BootstrapMethodBreakPositions)));\n+            }\n+        } else {\n+            println(formatOperandLine(\"%s\".formatted(bsmInfo.strBsm()), indexOffset + getIndentStep() * 2, \"\",\n+                    BootstrapMethodBreakPositions)\n+            );\n+        }\n+\n+        if (numBsmArgs > 0) {\n+            printIndentLn(\" Arguments:\");\n+            if (printCPIndex) {\n+                int argOffs = commentOffset + indexOffset + getIndentStep() * 2;\n+                for (int i = 0; i < numBsmArgs; i++) {\n+                    int argRef = bsmArguments.get(i);\n+                    boolean notLastIdx = i != numBsmArgs - 1;\n+                    String delim = (i != numBsmArgs - 1) ? \",\" : \";\";\n+                    printIndent(PadRight(\"\", indexOffset));\n+                    if (printCPIndex) {\n+                        if (skipComments) {\n+                            println(\"#%d%s\".formatted(argRef, delim));\n+                        } else {\n+                            String strArg = bsmInfo.cpx2Const().bsmArgWithoutDelimitersAsString(argRef, notLastIdx);\n+                            strArg = formatOperandLine(strArg, argOffs, \" \/\/ \", InvokeDynamicBreakPositions);\n+                            printPadRight(\"#%d%s\".formatted(argRef, delim), commentOffset).println(\" \/\/ %s\".formatted(strArg));\n+                        }\n+                    }\n+                }\n+            } else {\n+                String strArgs = bsmInfo.cpx2Const().bsmArgsAsString(this);\n+                printIndent(PadRight(\" \", indexOffset));\n+                println(formatOperandLine(strArgs, indexOffset + getIndentStep() * 2, \"\",\n+                        BootstrapArgumentsBreakPositions) + \";\");\n+            }\n+        }\n+        if (index < size - 1)\n+            println();\n+        else {\n+            decIndent();\n+            printIndentLn(\"}\");\n+        }\n+    }\n+\n+\n+    private BsmInfo getBsmInfo() {\n+        String strBsm;\n+        ConstantPool.Constant<?> cnt = owner.pool.getConst(bsmRef);\n+        ConstantPool.CPX2 cpx2Const = owner.pool.getCPX2(ConstantPool.TAG.CONSTANT_NULL);\n+        if (cnt instanceof ConstantPool.CPX2 cpx) {\n+            cpx2Const = cpx;\n+            strBsm = cpx.stringVal() + \";\";\n+        } else {\n+            strBsm = owner.environment.getInfo(\"info.corrupted_bootstrap_method_ref\");\n+            if(!printCPIndex) {\n+                strBsm = PadRight(\"#%d\".formatted(bsmRef), CIRCULAR_COMMENT_OFFSET).concat(\" \/\/ \").concat(strBsm);\n+            }\n+        }\n+        BsmInfo bsmInfo = new BsmInfo(strBsm, cpx2Const);\n+        return bsmInfo;\n+    }\n+\n+    private record BsmInfo(String strBsm, ConstantPool.CPX2 cpx2Const) {}\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/BootstrapMethodData.java","additions":152,"deletions":26,"binary":false,"changes":178,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,2 @@\n+import org.openjdk.asmtools.jasm.JasmTokens;\n+\n@@ -28,2 +30,0 @@\n-import static java.lang.String.format;\n-\n@@ -31,1 +31,10 @@\n- * Base class of the \"classes[]\" data of attributes\n+ * Base class of the \"classes[]\" data of attributes:\n+ * <p>\n+ * Exceptions_attribute {\n+ * u2 attribute_name_index;\n+ * u4 attribute_length;\n+ * u2 number_of_exceptions;\n+ * u2 exception_index_table[number_of_exceptions];\n+ * }\n+ * The exception_index_table[i] is an index of a CONSTANT_Class_info structure representing a class type\n+ * that this method is declared to throw.\n@@ -51,2 +60,2 @@\n-    String name;\n-    int[] classIndexes;\n+    JasmTokens.Token token;\n+    int[] indexes;\n@@ -54,1 +63,1 @@\n-    protected ClassArrayData(ClassData classData, String attrName) {\n+    protected <M extends MemberData<ClassData>> ClassArrayData(M classData, JasmTokens.Token token) {\n@@ -56,1 +65,1 @@\n-        this.name = attrName;\n+        this.token = token;\n@@ -60,3 +69,3 @@\n-        int number_of_classes = in.readUnsignedShort();\n-        if (attribute_length != 2 + number_of_classes * 2) {\n-            throw new ClassFormatError(name + \"_attribute: Invalid attribute length\");\n+        int number_of_entities = in.readUnsignedShort();\n+        if (attribute_length != 2 + number_of_entities * 2) {\n+            throw new ClassFormatError(\"%s_attribute: Invalid attribute length\".formatted(token.parseKey()));\n@@ -64,3 +73,3 @@\n-        classIndexes = new int[number_of_classes];\n-        for (int i = 0; i < number_of_classes; i++) {\n-            classIndexes[i] = in.readUnsignedShort();\n+        indexes = new int[number_of_entities];\n+        for (int i = 0; i < number_of_entities; i++) {\n+            indexes[i] = in.readUnsignedShort();\n@@ -72,1 +81,9 @@\n-    public void print() {\n+    public void jasmPrint() {\n+        if (indexes.length > 3) {\n+            jasmPrintLong();\n+        } else {\n+            jasmPrintShort();\n+        }\n+    }\n+\n+    public void jasmPrintShort() {\n@@ -75,1 +92,3 @@\n-        for (int classIndex : classIndexes) {\n+        int lastIndex = this.indexes.length - 1;\n+        String eoNames = (printCPIndex) ? \"\" : \";\";\n+        for (int i = 0; i <= lastIndex; i++) {\n@@ -77,1 +96,1 @@\n-                indexes.append((indexes.length() == 0) ? \"\" : \", \").append(\"#\").append(classIndex);\n+                indexes.append(\"#\").append(this.indexes[i]).append(i == lastIndex ? \";\" : \", \");\n@@ -79,1 +98,1 @@\n-            names.append((names.length() == 0) ? \"\" : \", \").append(pool.StringValue(classIndex));\n+            names.append(pool.StringValue(this.indexes[i])).append(i == lastIndex ? eoNames : \", \");\n@@ -81,0 +100,1 @@\n+        printIndent(PadRight(token.parseKey(), getPrintAttributeKeyPadding()));\n@@ -82,4 +102,4 @@\n-            if( skipComments ) {\n-                printIndentLn(\"%s %s;\", name, indexes);\n-            }  else {\n-                printIndent(PadRight(format(\"%s %s;\", name, indexes), getCommentOffset() - 1)).println(\" \/\/ \" + names);\n+            if (skipComments) {\n+                println(indexes.toString());\n+            } else {\n+                print(PadRight(indexes.toString(), getPrintAttributeCommentPadding())).println(\" \/\/ \" + names);\n@@ -88,1 +108,1 @@\n-            printIndentLn(\"%s %s;\", name, names.toString());\n+            println(names.toString());\n@@ -91,0 +111,26 @@\n+\n+    public void jasmPrintLong() {\n+        String name = token.parseKey();\n+        String locIndent = \" \".repeat(name.length());\n+        int lastIndex = indexes.length - 1;\n+        for (int i = 0; i <= lastIndex; i++) {\n+            if (printCPIndex) {\n+                if (skipComments) {\n+                    printIndent(PadRight((i == 0) ? name : locIndent, getPrintAttributeKeyPadding())).\n+                            print(\"#%d\".formatted(indexes[i])).println(i == lastIndex ? \";\" : \",\");\n+                } else {\n+                    printIndent(PadRight((i == 0) ? name : locIndent, getPrintAttributeKeyPadding())).\n+                            print(PadRight(\"#%d%s\".formatted(indexes[i], (i == lastIndex) ? \";\" : \",\"), getPrintAttributeCommentPadding())).\n+                            println(\" \/\/ %s\".formatted(pool.StringValue(indexes[i])));\n+                }\n+            } else {\n+                printIndent(PadRight((i == 0) ? name : locIndent, getPrintAttributeKeyPadding())).\n+                        print(pool.StringValue(indexes[i])).println(i == lastIndex ? \";\" : \",\");\n+            }\n+        }\n+    }\n+\n+    @Override\n+    protected void tablePrint() {\n+        jasmPrint();\n+    }\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/ClassArrayData.java","additions":69,"deletions":23,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,2 @@\n+import org.openjdk.asmtools.common.DecompilerLogger;\n+import org.openjdk.asmtools.common.Environment;\n@@ -28,0 +30,2 @@\n+import org.openjdk.asmtools.common.inputs.FileInput;\n+import org.openjdk.asmtools.common.inputs.ToolInput;\n@@ -31,0 +35,1 @@\n+import org.openjdk.asmtools.jdis.notations.Type;\n@@ -32,1 +37,3 @@\n-import java.io.*;\n+import java.io.DataInputStream;\n+import java.io.EOFException;\n+import java.io.IOException;\n@@ -34,1 +41,4 @@\n-import java.nio.file.Paths;\n+import java.security.MessageDigest;\n+import java.text.DateFormat;\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n@@ -36,0 +46,1 @@\n+import java.util.Date;\n@@ -40,2 +51,1 @@\n-import static org.openjdk.asmtools.common.structure.ClassFileContext.CLASS;\n-import static org.openjdk.asmtools.common.structure.ClassFileContext.MODULE;\n+import static org.openjdk.asmtools.common.structure.ClassFileContext.*;\n@@ -43,0 +53,1 @@\n+import static org.openjdk.asmtools.common.structure.EModifier.ACC_SUPER;\n@@ -44,0 +55,1 @@\n+import static org.openjdk.asmtools.jdis.ClassData.COMPILATION_UNIT.MODULE_INFO;\n@@ -50,3 +62,4 @@\n-    \/\/ -----------------------------------------------------------------------------------------------\n-    \/\/ Header Info\n-    \/\/ -----------------------------------------------------------------------------------------------\n+    \/\/ internal status of the class data\n+    private boolean alreadyPrinted = false;\n+    private boolean canBePrinted = false;           \/\/ Sufficient class info has been read and is now ready to be printed\n+\n@@ -58,0 +71,2 @@\n+    \/\/ Constant Pool index to this classes parent (super)\n+    protected int super_cpx;\n@@ -64,6 +79,0 @@\n-    \/\/ Constant Pool index to this classes parent (super)\n-    protected int super_cpx;\n-\n-    \/\/ -----------------------------------------------------------------------------------------------\n-    \/\/ Interfaces, Fields, Methods && Attributes\n-    \/\/ -----------------------------------------------------------------------------------------------\n@@ -74,1 +83,1 @@\n-    protected Container<FieldData> fields;\n+    protected Container<FieldData, ClassData> fields;\n@@ -77,1 +86,1 @@\n-    protected Container<MethodData> methods;\n+    protected Container<MethodData, ClassData> methods;\n@@ -100,1 +109,3 @@\n-    \/\/ The SourceFile Attribute\n+    private int totalAttributes = 0;\n+\n+    \/\/ The SourceFile Attribute (since 45.3)\n@@ -103,2 +114,5 @@\n-    \/\/ The inner-classes of this class\n-    protected Container<InnerClassData> innerClasses;\n+    \/\/ The inner-classes of this class (since 45.3)\n+    protected Container<InnerClassData, ClassData> innerClasses;\n+\n+    \/\/ The EnclosingMethod Attribute (since 49.0)\n+    protected EnclosingMethodData enclosingMethodData;\n@@ -109,1 +123,0 @@\n-\n@@ -111,1 +124,1 @@\n-    protected Container<BootstrapMethodData> bootstrapMethods;\n+    protected Container<BootstrapMethodData, ClassData> bootstrapMethods;\n@@ -128,1 +141,1 @@\n-    protected PreloadData preloadData;\n+    protected LoadableDescriptorsData loadableDescriptorsData;\n@@ -134,1 +147,1 @@\n-    public ClassData(JdisEnvironment environment) {\n+    public <E extends Environment<DecompilerLogger>> ClassData(E environment) {\n@@ -143,10 +156,2 @@\n-    public void read(File inputFile) throws IOException {\n-        try (DataInputStream dis = new DataInputStream(new FileInputStream(inputFile))) {\n-            read(dis, inputFile.toPath());\n-        }\n-    }\n-\n-    public void read(String inputFileName) throws IOException {\n-        try (DataInputStream dis = new DataInputStream(new FileInputStream(inputFileName))) {\n-            read(dis, Paths.get(inputFileName));\n-        }\n+    public boolean isDetailedOutput() {\n+        return detailedOutput || extraDetailedOutput;\n@@ -161,1 +166,1 @@\n-        fields = new Container<>(nFields);\n+        fields = new Container<>(this, FieldData.class, nFields);\n@@ -176,1 +181,1 @@\n-        methods = new Container<>(nMethods);\n+        methods = new Container<>(this, MethodData.class, nMethods);\n@@ -207,0 +212,1 @@\n+        totalAttributes++;\n@@ -215,5 +221,1 @@\n-                \/\/ Read SourceFile Attr\n-                if (attributeLength != 2) {\n-                    throw new FormatError(environment.getLogger(),\n-                            \"err.invalid.attribute.length\", \"SourceFile_attribute\", attributeLength);\n-                }\n+                \/\/ Read SourceFile attribute\n@@ -225,2 +227,6 @@\n-            case ATT_SourceDebugExtension -> {\n-                sourceDebugExtensionData = new SourceDebugExtensionData(this).read(in, attributeLength);\n+            case ATT_EnclosingMethod -> {\n+                \/\/ Read EnclosingMethod attribute\n+                if (enclosingMethodData != null) {\n+                    environment.warning(\"warn.one.attribute.required\", \"EnclosingMethod\", \"ClassFile\");\n+                }\n+                enclosingMethodData = new EnclosingMethodData(this).read(in, attributeLength);\n@@ -228,0 +234,2 @@\n+            case ATT_SourceDebugExtension ->\n+                    sourceDebugExtensionData = new SourceDebugExtensionData(this).read(in, attributeLength);\n@@ -232,2 +240,7 @@\n-                    throw new FormatError(environment.getLogger(),\n-                            \"err.invalid.attribute.length\", \"InnerClasses_attribute\", attributeLength);\n+                    if (bestEffort) {\n+                        environment.getLogger().error(\n+                                \"err.invalid.attribute.length\", \"InnerClasses_attribute\", attributeLength);\n+                    } else {\n+                        throw new FormatError(environment.getLogger(),\n+                                \"err.invalid.attribute.length\", \"InnerClasses_attribute\", attributeLength);\n+                    }\n@@ -235,1 +248,3 @@\n-                innerClasses = new Container<>(count);\n+                innerClasses = new Container<>(this, InnerClassData.class, count).\n+                        setHasSize(!isTableOutput() && !skipComments && !tableFormat);\n+                innerClasses.setCommentOffset(this.getCommentOffset());\n@@ -237,1 +252,1 @@\n-                    InnerClassData innerClass = new InnerClassData(this);\n+                    InnerClassData innerClass = new InnerClassData(this, innerClasses);\n@@ -245,1 +260,2 @@\n-                bootstrapMethods = new Container<BootstrapMethodData>(count).setPrintable(printCPIndex);\n+                bootstrapMethods = new Container<>(this, BootstrapMethodData.class, count);\n+                bootstrapMethods.setCommentOffset(this.getCommentOffset());\n@@ -247,1 +263,1 @@\n-                    BootstrapMethodData bsmData = new BootstrapMethodData(this);\n+                    BootstrapMethodData bsmData = new BootstrapMethodData(this, bootstrapMethods);\n@@ -267,1 +283,1 @@\n-            case ATT_Preload ->\n+            case ATT_LoadableDescriptors ->\n@@ -269,1 +285,1 @@\n-                    preloadData = new PreloadData(this).read(in, attributeLength);\n+                    loadableDescriptorsData = new LoadableDescriptorsData(this).read(in, attributeLength);\n@@ -283,1 +299,0 @@\n-\n@@ -285,1 +300,1 @@\n-                throw new ClassCastException(\"wrong magic: \" + HexUtils.toHex(magic) + \", expected \" + HexUtils.toHex(JAVA_MAGIC));\n+                environment.warning(\"warn.wrong.magic\", HexUtils.toHex(JAVA_MAGIC), HexUtils.toHex(magic));\n@@ -287,3 +302,2 @@\n-\n-            cfVersion.setMinorVersion( in.readUnsignedShort());\n-            cfVersion.setMajorVersion( in.readUnsignedShort());\n+            cfVersion.setMinorVersion(in.readUnsignedShort());\n+            cfVersion.setMajorVersion(in.readUnsignedShort());\n@@ -292,2 +306,3 @@\n-            pool.read(in);\n-            access = in.readUnsignedShort(); \/\/ & MM_CLASS; \/\/ Q\n+            pool.read(in).InitializePrintData();\n+\n+            access = in.readUnsignedShort();\n@@ -317,0 +332,5 @@\n+            \/\/ Final initialization based on just read class data.\n+            if (cfVersion.isValueObjectContext()) {\n+                EModifier.setGlobalContext(VALUE_OBJECTS);\n+            }\n+\n@@ -318,1 +338,1 @@\n-            throw new FormatError(environment.getLogger(), \"err.eof\");\n+            environment.error(\"err.eof\");\n@@ -339,1 +359,1 @@\n-            sourceFileData.setSourceName();\n+            sourceFileData.getName();\n@@ -349,1 +369,5 @@\n-        return this.packageName.length() != 0;\n+        return !this.packageName.isEmpty();\n+    }\n+\n+    public String getClassName() {\n+        return className;\n@@ -368,10 +392,8 @@\n-    @SafeVarargs\n-    private <T extends AnnotationData> void printAnnotations(List<T>... annotationLists) throws IOException {\n-        if (annotationLists != null) {\n-            for (List<T> list : annotationLists) {\n-                if (list != null) {\n-                    for (T annotation : list) {\n-                        annotation.initIndent(0);\n-                        annotation.print();\n-                        println();\n-                    }\n+    @Override\n+    protected <T extends AnnotationData> void printAnnotations(List<T>... annotationLists) throws IOException {\n+        for (List<T> list : annotationLists) {\n+            if (list != null) {\n+                for (T annotation : list) {\n+                    annotation.initIndent(0);\n+                    annotation.print();\n+                    println();\n@@ -384,1 +406,13 @@\n-     * Print asm file.\n+     * Prints the JASM file as much as it was read if exceptions occur during reading.\n+     *\/\n+    public void postPrint() {\n+        if (!alreadyPrinted && canBePrinted) {\n+            try {\n+                this.print();\n+            } catch (Exception ignored) {\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Print jasm file in simple\/table format.\n@@ -388,3 +422,1 @@\n-        \/\/ Number of read corrupted attributes if any\n-        int numCorruptedAttributes = 0;\n-        if (className.endsWith(\"module-info\") || EModifier.isModule(access)) {          \/\/ module-info compilation unit\n+        if (COMPILATION_UNIT.get(className, access) == MODULE_INFO) {           \/\/ module-info compilation unit\n@@ -405,0 +437,1 @@\n+            canBePrinted = true;\n@@ -412,4 +445,1 @@\n-        } else if (className.endsWith(\"package-info\")) {    \/\/ package-info compilation unit\n-            if (printConstantPool) {\n-                pool.print();\n-            }\n+\n@@ -422,3 +452,10 @@\n-        } else {                                            \/\/ class\/interface compilation unit\n-            if (hasPackage()) {\n-                println(format(\"package %s;%n\", packageName));\n+        } else {                                                                \/\/ class\/interface compilation unit\n+            \/\/ Print either extended(table) or Jasm-formatted Annotations, Header, and ConstantPool.\n+            printClassIntroduction();\n+            canBePrinted = true;\n+            \/\/ Load source file info.\n+            if (printSourceLines && (sourceFileData != null)) {\n+                String sourceName = sourceFileData.calculateName();\n+                if (sourceName != null) {\n+                    sourceLines = new TextLines(classFile.getParent(), sourceName);\n+                }\n@@ -426,3 +463,175 @@\n-            \/\/ Print the Annotations\n-            printAnnotations(visibleAnnotations, invisibleAnnotations);\n-            printAnnotations(visibleTypeAnnotations, invisibleTypeAnnotations);\n+\n+            \/\/ get the list of attributes that would be printed. it might be empty.\n+            final List<? extends Printable> printableAttributes = getListOfPrintableAttributes(\n+                    signature,\n+                    sourceFileData,\n+                    enclosingMethodData,\n+                    sourceDebugExtensionData,\n+                    recordData,                     \/\/ Print the Record (since class file 58.65535 JEP 359)\n+                    nestHost,                       \/\/ Print the NestHost (since class file: 55.0)\n+                    innerClasses,\n+                    nestMembers,                    \/\/ Print the NestMembers (since class file: 55.0)\n+                    permittedSubclassesData,        \/\/ Print PermittedSubclasses Attribute (JEP 360 (Sealed types): class file 59.65535)\n+                    loadableDescriptorsData,\n+                    bootstrapMethods\n+            );\n+\n+            int commentOffset = getCommentOffset();\n+\n+            \/\/ Print the fields\n+            if (printMemberDataList(fields, commentOffset) && isPrintable(methods) && !printableAttributes.isEmpty()) {\n+                println();\n+            }\n+\n+            setCommentOffset(commentOffset -= getIndentSize());\n+\n+            \/\/ Print the methods\n+            if (printMemberDataList(methods, commentOffset) && !printableAttributes.isEmpty()) {\n+                println();\n+            }\n+\n+            \/\/ Print the attributes\n+            printAttributes(printableAttributes, commentOffset);\n+\n+            if (skipComments) {\n+                println(\"}\");\n+            } else {\n+                println(format(\"} \/\/ end Class %s%s\",\n+                        className,\n+                        sourceFileData != null ? \" compiled from \\\"\" + sourceFileData.calculateName() + \"\\\"\" : \"\"));\n+            }\n+            alreadyPrinted = true;\n+        }\n+\n+        List<IOException> issues = pool.getIssues();\n+        if (!issues.isEmpty()) {\n+            for (IOException ioe : issues) {\n+                environment.error(ioe);\n+            }\n+            throw new RuntimeException();\n+        }\n+    }\n+\n+    protected void printClassIntroduction() throws IOException {\n+        printSysInfo();\n+        if (hasPackage()) {\n+            println(format(\"package %s;%n\", packageName));\n+        }\n+        \/\/ Print class annotations\n+        printAnnotations(visibleAnnotations, invisibleAnnotations);\n+        printAnnotations(visibleTypeAnnotations, invisibleTypeAnnotations);\n+        \/\/ Print ClassDeclaration\n+        printJasmClassDeclaration();\n+        println(\"{\");\n+        int thisCommentOffset = pool.getCommentOffset();\n+        \/\/ Print the constant pool\n+        if (printConstantPool) {\n+            pool.print();\n+            setCommentOffset(thisCommentOffset);\n+        }\n+        \/\/ Print (this|super)_class\n+        if (extraDetailedOutput && !dropClasses) {\n+            if (printCPIndex) {\n+                if (skipComments) {\n+                    printIndentLn(\"this_class:  #%d;\".formatted(this_cpx), thisCommentOffset);\n+                    printIndentLn(\"super_class: #%d;\".formatted(super_cpx), thisCommentOffset);\n+                } else {\n+                    thisCommentOffset -= getIndentSize();\n+                    printIndent(PadRight(\"this_class:  #%d;\".formatted(this_cpx), thisCommentOffset)).\n+                            println(\" \/\/ \" + pool.getClassName(this_cpx, cpx -> \"invalid index into the constant_pool table\"));\n+                    printIndent(PadRight(\"super_class: #%d;\".formatted(super_cpx), thisCommentOffset)).\n+                            println(\" \/\/ \" + pool.getClassName(super_cpx, cpx -> \"invalid index into the constant_pool table\"));\n+                }\n+            } else {\n+                printIndentLn(\"this_class:  %s;\".\n+                        formatted(pool.getClassName(this_cpx, cpx -> \"invalid index into the constant_pool table\")));\n+                printIndentLn(\"super_class: %s;\".\n+                        formatted(pool.getClassName(super_cpx, cpx -> \"invalid index into the constant_pool table\")));\n+            }\n+            println();\n+        }\n+    }\n+\n+    @Override\n+    protected void printSysInfo() {\n+        if (sysInfo) {\n+            ToolInput toolInput = environment.getToolInput();\n+            String thisClassName = pool.getJavaClassName(this_cpx, \"<invalid this_cpx #%d>\");\n+            boolean isClass = !EModifier.isInterface(access);\n+            Date lm;\n+            String prefix = \" *  \";\n+            println(\"\/**\");\n+            if (toolInput instanceof FileInput) {\n+                println(prefix + \"Classfile \" + classFile.toAbsolutePath());\n+                lm = new Date(classFile.toFile().lastModified());\n+            } else {\n+                String name = classFile.toString();\n+                println(prefix + \"Classfile \" + name.substring(name.lastIndexOf('\/') + 1));\n+                lm = Date.from(LocalDate.now().atStartOfDay(ZoneId.systemDefault()).toInstant());\n+            }\n+            DateFormat df = DateFormat.getDateInstance();\n+            int length = toolInput.getSize();\n+            if (length > 0) {\n+                println(prefix + INDENT_STRING + \"Last modified %s; size %d bytes\", df.format(lm), length);\n+            } else {\n+                println(prefix + INDENT_STRING + \"Last modified %s\", df.format(lm));\n+            }\n+            MessageDigest msd = toolInput.getMessageDigest();\n+            if (msd != null) {\n+                byte[] digest = msd.digest();\n+                if (digest != null) {\n+                    StringBuilder sb = new StringBuilder();\n+                    for (byte b : digest)\n+                        sb.append(String.format(\"%02x\", b));\n+                    println(prefix + INDENT_STRING + msd.getAlgorithm() + \" checksum \" + sb);\n+                }\n+            }\n+            if (sourceFileData != null) {\n+                println(prefix + INDENT_STRING + \"Compiled from \\\"%s\\\"\".formatted(sourceFileData.calculateName()));\n+            }\n+            \/\/ Print java descriptor of a class\/interface\n+            if (isClass) {\n+                print(prefix + EModifier.asKeywords(access & ~ACC_SUPER.getFlag(), CLASS) +\n+                        \"class \" + thisClassName);\n+            } else {\n+                print(prefix + EModifier.asKeywords(access & ~ACC_ABSTRACT.getFlag() & ~ACC_SUPER.getFlag(), CLASS) +\n+                        \"interface \" + thisClassName);\n+            }\n+            if (signature == null) {\n+                \/\/ use info from class file header\n+                if (isClass && super_cpx != 0) {\n+                    String superClassName = pool.getJavaClassName(this_cpx, \"<invalid super_cpx #%d>\");\n+                    if (!superClassName.equals(\"java.lang.Object\")) {\n+                        print(\" extends \" + superClassName);\n+                    }\n+                }\n+                for (int i = 0; i < interfaces.length; i++) {\n+                    print(i == 0 ? (isClass ? \" implements \" : \" extends \") : \",\");\n+                    print(pool.getJavaClassName(interfaces[i], \"<invalid interface_cpx #%d>\"));\n+                }\n+                println();\n+            } else {\n+                Type signType = signature.getSignatureType();\n+                String sign = signature.getJavaSignature();\n+                if (signType instanceof Type.ClassSigType)\n+                    print(sign);\n+                else if (!signType.isObject()) {\n+                    print(\" extends \" + sign);\n+                }\n+                println();\n+            }\n+            println(prefix + INDENT_STRING + \"minor version: \" + cfVersion.minor_version());\n+            println(prefix + INDENT_STRING + \"major version: \" + cfVersion.major_version());\n+            println(prefix + INDENT_STRING + \"flags: (0x%04x) %s\".formatted(access, EModifier.asNames(access, CLASS)));\n+            println(prefix + INDENT_STRING + \"this_class:  %s\".formatted(pool.getClassName(this_cpx, cpx -> \"invalid index into the constant_pool table\")));\n+            println(prefix + INDENT_STRING + \"super_class: %s\".formatted(pool.getClassName(super_cpx, cpx -> \"invalid index into the constant_pool table\")));\n+\n+            println(prefix + INDENT_STRING + \"interfaces: %d, fields: %d, methods: %d, attributes: %d\",\n+                    interfaces.length, fields.size(), methods.size(), totalAttributes);\n+            println(\" *\/\");\n+        }\n+    }\n+\n+    protected void printJasmClassDeclaration() {\n+        {\n+            String shortClassName = pool.inRange(this_cpx) ? pool.getShortClassName(this_cpx, this.packageName) : \"?? invalid index\";\n@@ -433,2 +642,0 @@\n-\n-            String name = pool.inRange(this_cpx) ? pool.getShortClassName(this_cpx, this.packageName) : \"?? invalid index\";\n@@ -436,1 +643,1 @@\n-                    signature.getPrintInfo((i) -> pool.inRange(i)) :\n+                    signature.getJasmPrintInfo((i) -> pool.inRange(i)) :\n@@ -444,1 +651,1 @@\n-                                format(\"interface #%d%s \/* %s%s *\/\", this_cpx, signInfo.first, name, signInfo.second)\n+                                format(\"interface #%d%s \/* %s%s *\/\", this_cpx, signInfo.first, shortClassName, signInfo.second)\n@@ -446,1 +653,1 @@\n-                        format(\"interface %s\", name, signInfo.second)\n+                        format(\"interface %s\", shortClassName, signInfo.second)\n@@ -454,1 +661,1 @@\n-                                format(\"class #%d%s \/* %s%s *\/\", this_cpx, signInfo.first, name, signInfo.second)\n+                                format(\"class #%d%s \/* %s%s *\/\", this_cpx, signInfo.first, shortClassName, signInfo.second)\n@@ -456,1 +663,1 @@\n-                        format(\"class %s%s\", name, signInfo.second)\n+                        format(\"class %s%s\", shortClassName, signInfo.second)\n@@ -488,1 +695,1 @@\n-                    if( skipComments ) {\n+                    if (skipComments) {\n@@ -499,60 +706,0 @@\n-            println(\"{\");\n-            if (printSourceLines && (sourceFileData != null)) {\n-                String sourceName = sourceFileData.getSourceName();\n-                if (sourceName != null) {\n-                    sourceLines = new TextLines(classFile.getParent(), sourceName);\n-                }\n-            }\n-\n-            \/\/ Print the constant pool\n-            if (printConstantPool) {\n-                pool.print();\n-                setCommentOffset(pool.getCommentOffset());\n-            }\n-\n-            \/\/ get the list of attributes that would be printed. it might be empty.\n-            final List<? extends Printable> printableAttributes = getListOfPrintableAttributes(\n-                    sourceFileData,\n-                    recordData,                     \/\/ Print the Record (since class file 58.65535 JEP 359)\n-                    permittedSubclassesData,        \/\/ Print PermittedSubclasses Attribute (JEP 360 (Sealed types): class file 59.65535)\n-                    nestHost,                       \/\/ Print the NestHost (since class file: 55.0)\n-                    nestMembers,                    \/\/ Print the NestMembers (since class file: 55.0)\n-                    innerClasses,\n-                    preloadData,\n-                    bootstrapMethods,\n-                    sourceDebugExtensionData\n-            );\n-\n-            \/\/ Print the fields\n-            if (printMemberDataList(fields, getCommentOffset()) && isPrintable(methods) && !printableAttributes.isEmpty()) {\n-                println();\n-            }\n-\n-            \/\/ Print the methods\n-            if (printMemberDataList(methods, getCommentOffset() - getIndentSize()) && !printableAttributes.isEmpty()) {\n-                println();\n-            }\n-\n-            \/\/ Print the attributes\n-            numCorruptedAttributes = printAttributes(getCommentOffset() - getIndentSize(), printableAttributes);\n-            if( skipComments ) {\n-                println(\"}\");\n-            } else {\n-                println(format(\"} \/\/ end Class %s%s\",\n-                        name,\n-                        sourceFileData != null ? \" compiled from \\\"\" + sourceFileData.getSourceName() + \"\\\"\" : \"\"));\n-            }\n-        }\n-\n-        \/\/ TODO: This isn't necessary. The warning info is already inlined into the jasm code.\n-        \/\/ TODO: Or the \"-nowarn\" option should be added.\n-        \/\/ if( numCorruptedAttributes > 0 ) {\n-        \/\/      environment.warning(\"warn.corrupted_attributes\", numCorruptedAttributes);\n-        \/\/ }\n-\n-        List<IOException> issues = pool.getIssues();\n-        if (!issues.isEmpty()) {\n-            for (IOException ioe : issues) {\n-                environment.error(ioe);\n-            }\n-            throw new RuntimeException();\n@@ -568,15 +715,2 @@\n-        for (P attribute : attributes)\n-            if (attribute != null) {\n-                if (attribute.isPrintable()) {\n-                    if (attribute instanceof Container<?>) {\n-                        Container<P> container = (Container<P>) attribute;\n-                        for (P item : container) {\n-                            if (item.isPrintable())\n-                                return true;\n-                        }\n-                        return false;\n-                    }\n-                    return true;\n-                }\n-            }\n-        return false;\n+        return Arrays.stream(attributes).\n+                anyMatch(attribute -> attribute != null && attribute.isPrintable());\n@@ -585,4 +719,1 @@\n-    \/**\n-     * Returns number of corrupted attributes if any\n-     *\/\n-    private <P extends Printable> int printAttributes(int commentOffset, List<P> attributeList) throws\n+    private <P extends Printable> void printAttributes(List<P> attributeList, int commentOffset) throws\n@@ -595,12 +726,2 @@\n-                if (Container.class.isAssignableFrom(attribute.getClass())) {\n-                    for (P item : (Container<P>) attribute) {\n-                        if (Indenter.class.isAssignableFrom(item.getClass())) {\n-                            ((Indenter) item).setCommentOffset(commentOffset);\n-                        }\n-                        item.print();\n-                    }\n-                } else {\n-                    if (Indenter.class.isAssignableFrom(attribute.getClass())) {\n-                        ((Indenter) attribute).setCommentOffset(commentOffset);\n-                    }\n-                    attribute.print();\n+                if (Indenter.class.isAssignableFrom(attribute.getClass())) {\n+                    ((Indenter) attribute).setCommentOffset(commentOffset);\n@@ -608,0 +729,1 @@\n+                attribute.print();\n@@ -615,15 +737,1 @@\n-        \/\/ Prints corrupted attributes if any.\n-        List<AttrData> corruptedList = getCorruptedAttributes();\n-        if (!corruptedList.isEmpty()) {\n-            printIndentLn();\n-            printIndentLn(format(\"\/\/ == Ignored %d corrupted attribute(s): ==\", corruptedList.size()));\n-            for (int i = 0; i < corruptedList.size(); i++) {\n-                printIndentLn(\"\/\/ attribute_info {\");\n-                printIndentLn(format(\"\/\/    u2 attribute_name_index: #%d;\", corruptedList.get(i).getNameCpx()));\n-                printIndentLn(format(\"\/\/    u4 attribute_length:     %d;\", corruptedList.get(i).getLength()));\n-                printIndentLn(\"\/\/    u1 info[attribute_length];\");\n-                printIndentLn(\"\/\/ }\");\n-            }\n-            printIndentLn();\n-        }\n-        return corruptedList.size();\n+        \/\/ TODO: Prints corrupted attributes if any.\n@@ -632,2 +740,7 @@\n-    private List<AttrData> getCorruptedAttributes() {\n-        return attributes.stream().filter(AttrData::isCorrupted).toList();\n+    private boolean printMemberDataList(Container<? extends MemberData<ClassData>, ClassData> list,\n+                                        int commentOffset) throws IOException {\n+        if (list != null && list.size() > 0) {\n+            list.setCommentOffset(commentOffset).print();\n+            return true;\n+        }\n+        return false;\n@@ -636,19 +749,17 @@\n-    \/**\n-     * Prints list of either fields or methods\n-     *\n-     * @param list a list of fields or methods to be printed\n-     * @return true if something were printed\n-     * @throws IOException if something goes wrong\n-     *\/\n-    private boolean printMemberDataList(List<? extends MemberData> list, int commentOffset) throws IOException {\n-        if (list != null) {\n-            int count = list.size();\n-            if (count > 0) {\n-                for (int i = 0; i < count; i++) {\n-                    MemberData md = list.get(i);\n-                    md.setCommentOffset(commentOffset);\n-                    if (i != 0 && md.getAnnotationsCount() > 0)\n-                        println();\n-                    md.print();\n-                }\n-                return true;\n+    public enum COMPILATION_UNIT {\n+        MODULE_INFO,\n+        PACKAGE_INFO,\n+        CLASS_UNIT;\n+\n+        \/**\n+         * @param className Pre-initialized Constant Pool name calculated by this_cpx\n+         * @param access    access flags (modifiers)\n+         * @return compilation unit\n+         *\/\n+        public static COMPILATION_UNIT get(String className, int access) {\n+            if (className.endsWith(\"module-info\") || EModifier.isModule(access)) {              \/\/ module-info compilation unit\n+                return MODULE_INFO;\n+            } else if (className.endsWith(\"package-info\") && EModifier.isInterface(access)) {  \/\/ package-info compilation unit\n+                return PACKAGE_INFO;\n+            } else {\n+                return CLASS_UNIT;\n@@ -657,1 +768,0 @@\n-        return false;\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/ClassData.java","additions":330,"deletions":220,"binary":false,"changes":550,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,1 @@\n+import org.openjdk.asmtools.asmutils.HexUtils;\n@@ -26,0 +27,1 @@\n+import org.openjdk.asmtools.common.Environment;\n@@ -27,1 +29,1 @@\n-import org.openjdk.asmtools.jasm.JasmTokens;\n+import org.openjdk.asmtools.common.structure.StackMap;\n@@ -34,1 +36,0 @@\n-import static java.lang.System.lineSeparator;\n@@ -40,0 +41,2 @@\n+import static org.openjdk.asmtools.jasm.JasmTokens.Token.LOCAL;\n+import static org.openjdk.asmtools.jasm.JasmTokens.Token.STACK;\n@@ -41,0 +44,1 @@\n+import static org.openjdk.asmtools.jasm.OpcodeTables.Opcode.opc_bytecode;\n@@ -49,1 +53,1 @@\n-     * (parsed) reversed bytecode index hash, associates labels with ByteCode indexes\n+     * reversed bytecode index hash, associates labels with ByteCode indexes\n@@ -59,21 +63,20 @@\n-    protected ArrayList<AttrData> attrs = new ArrayList<>(0);        \/\/ AttrData\n-\n-    \/\/ (parsed) Trap table, describes exceptions caught\n-    private ArrayList<TrapData> trap_table = new ArrayList<>(0);   \/\/ TrapData\n-    \/**\n-     * (parsed) Line Number table, describes source lines associated with ByteCode indexes\n-     *\/\n-    private ArrayList<LineNumData> lin_num_tb = new ArrayList<>(0);   \/\/ LineNumData\n-    \/**\n-     * (parsed) Local Variable table, describes variable scopes associated with ByteCode\n-     * indexes\n-     *\/\n-    private ArrayList<LocVarData> loc_var_tb = new ArrayList<>(0);   \/\/ LocVarData\n-    \/**\n-     * (parsed) stack map table, describes compiler hints for stack rep, associated with\n-     * ByteCode indexes\n-     *\/\n-    private ArrayList<StackMapData> stack_map = null;\n-    \/**\n-     * The visible type annotations for this method\n-     *\/\n+    protected ArrayList<AttrData> attrs = new ArrayList<>(0);                       \/\/ AttrData\n+    \/\/ Trap table, describes exceptions caught\n+    private ArrayList<TrapData> trap_table = new ArrayList<>(0);                    \/\/ TrapData\n+\n+    \/\/ Line Number table, describes source lines associated with ByteCode indexes\n+    private Container<LineNumberData, CodeData> lineNumberTable;\n+    \/\/ Local Variable table, describes variable scopes associated with ByteCode indexes\n+    private Container<LocalVariableData, CodeData> localVariableTable;\n+\n+    \/\/ Local Variable Type table, describes variable types associated with variables\n+    private Container<LocalVariableTypeData, CodeData> localVariableTypeTable;\n+\n+    \/\/ stack map table, describes compiler hints for stack rep, associated with  ByteCode indexes\n+    private StackMapTable stackMapTable;\n+    \/\/ The boolean firstStackEntry is calculated based on the index of the StackMap entry in the table.\n+    \/\/ Is firstStackEntry the entries[0] in the stack_map_entry structure?\n+    \/\/ In other words, does StackMapData[i] describe the second stack map entry of the method ignoring leading modifiers?\n+    private boolean firstStackEntry = true;\n+\n+    \/\/The visible type annotations for this method\n@@ -81,3 +84,2 @@\n-    \/**\n-     * The invisible type annotations for this method\n-     *\/\n+\n+    \/\/ The invisible type annotations for this method\n@@ -86,0 +88,2 @@\n+    private int instructionOffset, attributeOffset;\n+\n@@ -88,0 +92,7 @@\n+        if (data.printProgramCounter) {\n+            instructionOffset = PROGRAM_COUNTER_PLACEHOLDER_LENGTH;\n+            attributeOffset = instructionOffset;\n+        } else {\n+            instructionOffset = INSTR_PREFIX_LENGTH;\n+            attributeOffset = instructionOffset - getIndentStep();\n+        }\n@@ -125,0 +136,8 @@\n+    protected InstructionAttr getLastInstruction() {\n+        return instructionAttrs.get(Collections.max(instructionAttrs.keySet()));\n+    }\n+\n+    protected InstructionAttr getFirstInstruction() {\n+        return instructionAttrs.get(Collections.min(instructionAttrs.keySet()));\n+    }\n+\n@@ -126,1 +145,1 @@\n-    private void readLineNumTable(DataInputStream in) throws IOException {\n+    private Container<LineNumberData, CodeData> readLineNumberTable(DataInputStream in, boolean ignoreMemorization) throws IOException {\n@@ -129,2 +148,2 @@\n-        lin_num_tb = new ArrayList<>(nLines);\n-        environment.traceln(\"CodeAttr:  LineNumTable[%d] length=%d\", nLines, len);\n+        Container<LineNumberData, CodeData> table = ignoreMemorization ? null : new Container<>(this, LineNumberData.class, nLines);\n+        environment.traceln(\"CodeAttr:  LineNumberTable[%d] length=%d\", nLines, len);\n@@ -132,1 +151,4 @@\n-            lin_num_tb.add(new LineNumData(in));\n+            LineNumberData data = new LineNumberData(in, this.data);\n+            if (!ignoreMemorization) {\n+                table.add(data);\n+            }\n@@ -134,0 +156,1 @@\n+        return table;\n@@ -136,1 +159,1 @@\n-    private void readLocVarTable(DataInputStream in) throws IOException {\n+    private Container<LocalVariableData, CodeData> readLocalVariableTable(DataInputStream in, boolean ignoreMemorization) throws IOException {\n@@ -139,1 +162,1 @@\n-        loc_var_tb = new ArrayList<>(nLines);\n+        Container<LocalVariableData, CodeData> table = ignoreMemorization ? null : new Container<>(this, LocalVariableData.class, nLines);\n@@ -142,1 +165,4 @@\n-            loc_var_tb.add(new LocVarData(in));\n+            LocalVariableData data = new LocalVariableData(owner, in, this.data);\n+            if (!ignoreMemorization) {\n+                table.add(data);\n+            }\n@@ -144,0 +170,15 @@\n+        return table;\n+    }\n+\n+    private Container<LocalVariableTypeData, CodeData> readLocalVariableTypeTable(DataInputStream in, boolean ignoreMemorization) throws IOException {\n+        int len = in.readInt(); \/\/ attr_length\n+        int nLines = in.readUnsignedShort();\n+        Container<LocalVariableTypeData, CodeData> table = ignoreMemorization ? null : new Container<>(this, LocalVariableTypeData.class, nLines);\n+        environment.traceln(\"CodeAttr:  LocalVariableTypeTable[%d] length=%d\", nLines, len);\n+        for (int l = 0; l < nLines; l++) {\n+            LocalVariableTypeData data = new LocalVariableTypeData(owner, in, this.data);\n+            if (!ignoreMemorization) {\n+                table.add(data);\n+            }\n+        }\n+        return table;\n@@ -155,1 +196,1 @@\n-    private void readStackMapEntity(StackMapData.EAttributeType type, DataInputStream in) throws IOException {\n+    private void readStackMapEntity(EAttribute attribute, DataInputStream in) throws IOException {\n@@ -157,3 +198,4 @@\n-        int stack_map_len = in.readUnsignedShort();\n-        stack_map = new ArrayList<>(stack_map_len);\n-        environment.traceln(\"CodeAttr:  %s: attrLength=%d num=%d\", type.getName(), len, stack_map_len);\n+        int stackMapLength = in.readUnsignedShort();\n+        stackMapTable = new StackMapTable(attribute, this, stackMapLength);\n+        firstStackEntry = true;\n+        environment.traceln(() -> \"CodeAttr:  %s: attrLength=%d num=%d\".formatted(attribute.name(), len, stackMapLength));\n@@ -161,2 +203,9 @@\n-        for (int k = 0; k < stack_map_len; k++) {\n-            StackMapData stackMapData =  new StackMapData(type, k == 0, prevFrame_pc, this, in);\n+        int idx = 0;\n+        boolean nextIsWrapped = false;\n+        int wrapLevel = 0;\n+        while (idx < stackMapLength) {\n+            StackMapData stackMapData = switch (attribute) {\n+                case ATT_StackMap -> new StackMapData(this, in);\n+                case ATT_StackMapTable -> new StackMapData(calculateFirstPosition(idx), prevFrame_pc, this, in);\n+                default -> throw new IllegalStateException(\"Unexpected value: \" + attribute);\n+            };\n@@ -164,1 +213,29 @@\n-            stack_map.add(stackMapData);\n+            if (stackMapData.getStackEntryType() == StackMap.EntryType.EARLY_LARVAL) {\n+                stackMapData.isWrapped = nextIsWrapped; \/\/ Negative test case:EARLY_LARVAL belongs to EARLY_LARVAL\n+                stackMapData.wrapLevel = wrapLevel;\n+                stackMapTable.add(stackMapData, true);\n+                nextIsWrapped = true;\n+                wrapLevel++;\n+            } else {\n+                stackMapData.isWrapped = nextIsWrapped;\n+                stackMapData.wrapLevel = wrapLevel;\n+                stackMapTable.add(stackMapData, false);\n+                nextIsWrapped = false;\n+                wrapLevel = 0;\n+                idx++;\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Calculates whether a StackMapTable[index] entry is the first in the table, ignoring wrappers\n+     *\n+     * @param index index of the entry in the StackMapTable\n+     * @return true if index refers to the first entry that isn't wrapper.\n+     *\/\n+    private boolean calculateFirstPosition(int index) {\n+        if (firstStackEntry) {\n+            if (index == 0 || stackMapTable.wrappers.get(index - 1)) {\n+                return true;\n+            }\n+            firstStackEntry = false;\n@@ -166,0 +243,1 @@\n+        return false;\n@@ -168,0 +246,1 @@\n+\n@@ -212,1 +291,1 @@\n-            ConstantPool.Constant name_const = pool.getConst(name_cpx);\n+            ConstantPool.Constant<?> name_const = pool.getConst(name_cpx);\n@@ -219,4 +298,6 @@\n-                    case ATT_LineNumberTable -> readLineNumTable(in);\n-                    case ATT_LocalVariableTable -> readLocVarTable(in);\n-                    case ATT_StackMap -> readStackMapEntity(StackMapData.EAttributeType.STACKMAP, in);\n-                    case ATT_StackMapTable -> readStackMapEntity(StackMapData.EAttributeType.STACKMAPTABLE, in);\n+                    case ATT_LineNumberTable -> lineNumberTable = readLineNumberTable(in, !printLineNumber);\n+                    case ATT_LocalVariableTable ->\n+                            localVariableTable = readLocalVariableTable(in, !printLocalVariables);\n+                    case ATT_LocalVariableTypeTable ->\n+                            localVariableTypeTable = readLocalVariableTypeTable(in, !printLocalVariableTypes);\n+                    case ATT_StackMap, ATT_StackMapTable -> readStackMapEntity(attrTag, in);\n@@ -226,1 +307,1 @@\n-                        AttrData attr = new AttrData(environment);\n+                        AttrData attr = new AttrData(environment, attrTag);\n@@ -240,10 +321,14 @@\n-        switch (opcode) {\n-            case opc_tableswitch -> {\n-                int tb = align(pc + 1);\n-                int default_skip = getInt(tb); \/* default skip pamount *\/\n-\n-                int low = getInt(tb + 4);\n-                int high = getInt(tb + 8);\n-                int count = high - low;\n-                for (int i = 0; i <= count; i++) {\n-                    getInstructionAttribute(pc + getInt(tb + 12 + 4 * i)).referred = true;\n+        try {\n+            switch (opcode) {\n+                case opc_tableswitch -> {\n+                    int tb = align(pc + 1);\n+                    int default_skip = getInt(tb); \/* default skip pamount *\/\n+\n+                    int low = getInt(tb + 4);\n+                    int high = getInt(tb + 8);\n+                    int count = high - low;\n+                    for (int i = 0; i <= count; i++) {\n+                        getInstructionAttribute(pc + getInt(tb + 12 + 4 * i)).referred = true;\n+                    }\n+                    getInstructionAttribute(default_skip + pc).referred = true;\n+                    return tb - pc + 16 + count * 4;\n@@ -251,6 +336,3 @@\n-                getInstructionAttribute(default_skip + pc).referred = true;\n-                return tb - pc + 16 + count * 4;\n-            }\n-            case opc_lookupswitch -> {\n-                int tb = align(pc + 1);\n-                int default_skip = getInt(tb); \/* default skip pamount *\/\n+                case opc_lookupswitch -> {\n+                    int tb = align(pc + 1);\n+                    int default_skip = getInt(tb); \/* default skip pamount *\/\n@@ -258,3 +340,20 @@\n-                int npairs = getInt(tb + 4);\n-                for (int i = 1; i <= npairs; i++) {\n-                    getInstructionAttribute(pc + getInt(tb + 4 + i * 8)).referred = true;\n+                    int npairs = getInt(tb + 4);\n+                    for (int i = 1; i <= npairs; i++) {\n+                        getInstructionAttribute(pc + getInt(tb + 4 + i * 8)).referred = true;\n+                    }\n+                    getInstructionAttribute(default_skip + pc).referred = true;\n+                    return tb - pc + (npairs + 1) * 8;\n+                }\n+                case opc_jsr, opc_goto, opc_ifeq, opc_ifge, opc_ifgt, opc_ifle, opc_iflt, opc_ifne, opc_if_icmpeq,\n+                     opc_if_icmpne, opc_if_icmpge, opc_if_icmpgt, opc_if_icmple, opc_if_icmplt, opc_if_acmpeq,\n+                     opc_if_acmpne, opc_ifnull, opc_ifnonnull -> {\n+                    getInstructionAttribute(pc + getShort(pc + 1)).referred = true;\n+                    return 3;\n+                }\n+                case opc_jsr_w, opc_goto_w -> {\n+                    getInstructionAttribute(pc + getInt(pc + 1)).referred = true;\n+                    return 5;\n+                }\n+                case opc_wide, opc_nonpriv, opc_priv -> {\n+                    int opc2 = (opcode.value() << 8) + getUByte(pc + 1);\n+                    opcode = opcode(opc2);\n@@ -262,16 +361,0 @@\n-                getInstructionAttribute(default_skip + pc).referred = true;\n-                return tb - pc + (npairs + 1) * 8;\n-            }\n-            case opc_jsr, opc_goto, opc_ifeq, opc_ifge, opc_ifgt, opc_ifle, opc_iflt, opc_ifne, opc_if_icmpeq,\n-                    opc_if_icmpne, opc_if_icmpge, opc_if_icmpgt, opc_if_icmple, opc_if_icmplt, opc_if_acmpeq,\n-                    opc_if_acmpne, opc_ifnull, opc_ifnonnull -> {\n-                getInstructionAttribute(pc + getShort(pc + 1)).referred = true;\n-                return 3;\n-            }\n-            case opc_jsr_w, opc_goto_w -> {\n-                getInstructionAttribute(pc + getInt(pc + 1)).referred = true;\n-                return 5;\n-            }\n-            case opc_wide, opc_nonpriv, opc_priv -> {\n-                int opc2 = (opcode.value() << 8) + getUByte(pc + 1);\n-                opcode = opcode(opc2);\n@@ -279,2 +362,0 @@\n-        }\n-        try {\n@@ -295,1 +376,1 @@\n-        for (LineNumData entry : lin_num_tb) {\n+        for (LineNumberData entry : lineNumberTable) {\n@@ -301,2 +382,21 @@\n-        for (StackMapData entry : stack_map) {\n-            getInstructionAttribute(entry.frame_pc).stackMapEntry = entry;\n+        ArrayList<StackMapData> wrappers = null;\n+        boolean firstWrapper = true;\n+        for (int i = 0; i < stackMapTable.size(); i++) {\n+            StackMapData entry = stackMapTable.get(i);\n+            if (stackMapTable.wrappers.get(i)) {\n+                if (wrappers == null) {\n+                    wrappers = new ArrayList<>();\n+                }\n+                wrappers.add(entry);\n+            } else {\n+                firstWrapper = false;\n+                InstructionAttr instr = getInstructionAttribute(entry.frame_pc);\n+                instr.stackMapEntry = entry;\n+                instr.stackMapWrappers = wrappers;\n+                wrappers = null;\n+            }\n+        }\n+        if (wrappers != null) {\n+            \/\/ get either first or last instruction and assign modifiers to it.\n+            InstructionAttr instr = (firstWrapper) ? getFirstInstruction() : getLastInstruction();\n+            instr.stackMapWrappers = wrappers;\n@@ -306,2 +406,2 @@\n-    private void loadLocVarTable() {\n-        for (LocVarData entry : loc_var_tb) {\n+    private void loadLocalVariableTable() {\n+        for (LocalVariableData entry : localVariableTable) {\n@@ -313,0 +413,7 @@\n+    private void loadLocalVariableTypeTable() {\n+        for (LocalVariableTypeData entry : localVariableTypeTable) {\n+            getInstructionAttribute(entry.start_pc).addType(entry);\n+            getInstructionAttribute(entry.start_pc + entry.length).addEndType(entry);\n+        }\n+    }\n+\n@@ -323,4 +430,2 @@\n-        int opc = getUByte(pc);\n-        int opc2;\n-        Opcode opcode = opcode(opc);\n-        Opcode opcode2;\n+        int opc = getUByte(pc), opc2;\n+        Opcode opcode = opcode(opc), opcode2;\n@@ -330,11 +435,16 @@\n-                opc2 = getUByte(pc + 1);\n-                int finalopc = (opc << 8) + opc2;\n-                opcode2 = opcode(finalopc);\n-                if (opcode2 == null) {\n-                    \/\/ assume all (even nonexistent) priv and nonpriv instructions\n-                    \/\/ are 2 bytes long\n-                    mnem = opcode.parseKey() + \" \" + opc2;\n-                } else {\n-                    mnem = opcode2.parseKey();\n-                }\n-                println(mnem);\n+                int count = 1;\n+                List<Byte> validBytes = checkCodeBounds(pc, count);\n+                if (validBytes.size() == count) {\n+                    opc2 = getUByte(pc + 1);\n+                    int finalopc = (opc << 8) + opc2;\n+                    opcode2 = opcode(finalopc);\n+                    if (opcode2 == null) {\n+                        \/\/ assume all (even nonexistent) priv and nonpriv instructions\n+                        \/\/ are 2 bytes long\n+                        mnem = opcode.parseKey() + \" \" + opc2;\n+                    } else {\n+                        mnem = opcode2.parseKey();\n+                    }\n+                    println(mnem);\n+                } else\n+                    printBytes(opcode.byteValue(), validBytes, shift);\n@@ -344,0 +454,6 @@\n+                int count = 1;\n+                List<Byte> validBytes = checkCodeBounds(pc, count);\n+                if (validBytes.size() != count) {\n+                    printBytes(opcode.byteValue(), validBytes, shift);\n+                    return 1;\n+                }\n@@ -349,1 +465,1 @@\n-                    print(PadRight(\"bytecode\", OPERAND_PLACEHOLDER_LENGTH + 1)).println(opcode + \";\");\n+                    print(PadRight(opc_bytecode.parseKey(), OPERAND_PLACEHOLDER_LENGTH + 1)).println(opcode + \";\");\n@@ -355,2 +471,7 @@\n-                    print(PadRight(mnem, OPERAND_PLACEHOLDER_LENGTH + 1));\n-                    println(\"%d, %d;\", getUShort(pc + 2), getUShort(pc + 4));\n+                    count = 5;\n+                    validBytes = checkCodeBounds(pc, 5);\n+                    if (validBytes.size() == count) {\n+                        print(PadRight(mnem, OPERAND_PLACEHOLDER_LENGTH + 1));\n+                        println(\"%d, %d;\", getUShort(pc + 2), getUShort(pc + 4));\n+                    } else\n+                        printBytes(opcode.byteValue(), validBytes, shift);\n@@ -359,1 +480,6 @@\n-                    print(PadRight(mnem, OPERAND_PLACEHOLDER_LENGTH + 1)).println(\"%d;\", getUShort(pc + 2));\n+                    count = 3;\n+                    validBytes = checkCodeBounds(pc, 3);\n+                    if (validBytes.size() == count) {\n+                        print(PadRight(mnem, OPERAND_PLACEHOLDER_LENGTH + 1)).println(\"%d;\", getUShort(pc + 2));\n+                    } else\n+                        printBytes(opcode.byteValue(), validBytes, shift);\n@@ -377,2 +503,8 @@\n-            case opc_aload, opc_astore, opc_fload, opc_fstore, opc_iload, opc_istore, opc_lload, opc_lstore, opc_dload, opc_dstore, opc_ret -> {\n-                print(PadRight(operand, OPERAND_PLACEHOLDER_LENGTH + 1)).println(getUByte(pc + 1) + \";\");\n+            case opc_aload, opc_astore, opc_fload, opc_fstore, opc_iload, opc_istore, opc_lload, opc_lstore, opc_dload,\n+                 opc_dstore, opc_ret -> {\n+                int count = 1;\n+                List<Byte> validBytes = checkCodeBounds(pc, count);\n+                if (validBytes.size() == count)\n+                    print(PadRight(operand, OPERAND_PLACEHOLDER_LENGTH + 1)).println(getUByte(pc + 1) + \";\");\n+                else\n+                    printBytes(opcode.byteValue(), validBytes, shift);\n@@ -382,2 +514,7 @@\n-                print(PadRight(operand, OPERAND_PLACEHOLDER_LENGTH + 1)).\n-                        println(\"%d, %d;\", getUByte(pc + 1), getByte(pc + 2));\n+                int count = 2;\n+                List<Byte> validBytes = checkCodeBounds(pc, count);\n+                if (validBytes.size() == count)\n+                    print(PadRight(operand, OPERAND_PLACEHOLDER_LENGTH + 1)).\n+                            println(\"%d, %d;\", getUByte(pc + 1), getByte(pc + 2));\n+                else\n+                    printBytes(opcode.byteValue(), validBytes, shift);\n@@ -387,0 +524,1 @@\n+                \/\/ TODO:  add checkBounds\n@@ -394,1 +532,1 @@\n-                printPadRight(format(\"%s { \", PadRight(operand, OPERAND_PLACEHOLDER_LENGTH)), getCommentOffset() - 1);\n+                printPadRight(format(\"%s { \", PadRight(operand, OPERAND_PLACEHOLDER_LENGTH)), getCommentOffset());\n@@ -399,1 +537,1 @@\n-                            println(data.lP + (pc + getInt(tb + 12 + 4 * i)) + \";\");\n+                            println(data.getLabelPrefix() + (pc + getInt(tb + 12 + 4 * i)) + \";\");\n@@ -402,1 +540,2 @@\n-                        PadRight(\"default: \" + data.lP + (default_skip + pc), OPERAND_PLACEHOLDER_LENGTH - getIndentStep() - 2), shift)\n+                        PadRight(\"default: \" + data.getLabelPrefix() + (default_skip + pc),\n+                                OPERAND_PLACEHOLDER_LENGTH - getIndentStep() - 2), shift)\n@@ -407,0 +546,1 @@\n+                \/\/ TODO:  add checkBounds\n@@ -408,0 +548,1 @@\n+\n@@ -411,1 +552,1 @@\n-                printPadRight(format(\"%s { \", PadRight(operand, OPERAND_PLACEHOLDER_LENGTH)), getCommentOffset() - 1);\n+                printPadRight(format(\"%s { \", PadRight(operand, OPERAND_PLACEHOLDER_LENGTH)), getCommentOffset());\n@@ -413,1 +554,1 @@\n-                Pair<Integer,Integer>[] lookupswitchPairs = getLookupswitchPairs(tb,nPairs);\n+                Pair<Integer, Integer>[] lookupswitchPairs = getLookupswitchPairs(tb, nPairs);\n@@ -416,1 +557,1 @@\n-                        mapToInt(p->String.valueOf(p.first).length()).max().orElse(0) + 2);\n+                        mapToInt(p -> String.valueOf(p.first).length()).max().orElse(0) + 2);\n@@ -419,1 +560,1 @@\n-                            println(data.lP + (pc + lookupswitchPairs[i].second) + \";\");\n+                            println(data.getLabelPrefix() + (pc + lookupswitchPairs[i].second) + \";\");\n@@ -422,1 +563,1 @@\n-                        PadRight(PadRight(\"default: \", caseLength) + data.lP + (default_skip + pc),\n+                        PadRight(PadRight(\"default: \", caseLength) + data.getLabelPrefix() + (default_skip + pc),\n@@ -427,9 +568,14 @@\n-                int tp = getUByte(pc + 1);\n-                BasicType basicType = getBasicType(tp);\n-                if (basicType == null) {\n-                    print(PadRight(operand, OPERAND_PLACEHOLDER_LENGTH + 1)).\n-                            println(\"BOGUS TYPE: \" + toHex(tp, 8) + \";\");\n-                } else {\n-                    print(PadRight(operand, OPERAND_PLACEHOLDER_LENGTH + 1)).\n-                            println(basicType.printValue() + \";\");\n-                }\n+                int count = 1;\n+                List<Byte> validBytes = checkCodeBounds(pc, count);\n+                if (validBytes.size() == count) {\n+                    int tp = getUByte(pc + 1);\n+                    BasicType basicType = getBasicType(tp);\n+                    if (basicType == null) {\n+                        print(PadRight(operand, OPERAND_PLACEHOLDER_LENGTH + 1)).\n+                                println(\"BOGUS TYPE: \" + toHex(tp, 8) + \";\");\n+                    } else {\n+                        print(PadRight(operand, OPERAND_PLACEHOLDER_LENGTH + 1)).\n+                                println(basicType.printValue() + \";\");\n+                    }\n+                } else\n+                    printBytes(opcode.byteValue(), validBytes, shift);\n@@ -439,0 +585,1 @@\n+                \/\/ TODO:  add checkBounds\n@@ -443,1 +590,1 @@\n-                List<Integer> breakPositions = new ArrayList<>();\n+                Map<Integer, List<Integer>> breakPositions = new HashMap<>();\n@@ -446,1 +593,1 @@\n-                    breakPositions.add(3);\n+                    breakPositions = LdwBreakPositions;\n@@ -450,1 +597,1 @@\n-                    breakPositions.addAll(Set.of(2, 3));\n+                    breakPositions = InvokeDynamicBreakPositions;\n@@ -454,1 +601,1 @@\n-                    breakPositions.add(3);\n+                    breakPositions = LdwBreakPositions;\n@@ -459,1 +606,1 @@\n-                    if( skipComments ) {\n+                    if (skipComments) {\n@@ -463,1 +610,1 @@\n-                                format(\"%s #%d;\", PadRight(operand, OPERAND_PLACEHOLDER_LENGTH), index), getCommentOffset() - 1).\n+                                format(\"%s #%d;\", PadRight(operand, OPERAND_PLACEHOLDER_LENGTH), index), getCommentOffset()).\n@@ -466,1 +613,2 @@\n-                                formatOperandLine(pool.ConstantStrValue(index), getCommentOffset() + shift - 1, \" \/\/ \", breakPositions));\n+                                formatOperandLine(pool.ConstantStrValue(index), getCommentOffset() + shift,\n+                                        \" \/\/ \", breakPositions));\n@@ -469,0 +617,1 @@\n+                    \/\/ TODO: Check Offset calculation\n@@ -470,1 +619,2 @@\n-                    println(formatOperandLine(pool.ConstantStrValue(index), OPERAND_PLACEHOLDER_LENGTH + shift + 1, \"\", breakPositions) + \";\");\n+                    println(formatOperandLine(pool.ConstantStrValue(index), OPERAND_PLACEHOLDER_LENGTH + shift + 1,\n+                            \"\", breakPositions) + \";\");\n@@ -475,1 +625,0 @@\n-            \/\/ Valhalla\n@@ -477,11 +626,8 @@\n-                    opc_getfield, opc_invokevirtual, opc_invokespecial, opc_invokestatic, opc_withfield,\n-                    opc_aconst_init ->   \/\/ Valhalla\n-                    {\n-                        int index = getUShort(pc + 1);\n-                        if (printCPIndex) {\n-                            if( skipComments ) {\n-                                println(format(\"%s #%d;\", PadRight(operand, OPERAND_PLACEHOLDER_LENGTH), index));\n-                            } else {\n-                                printPadRight(format(\"%s #%d;\", PadRight(operand, OPERAND_PLACEHOLDER_LENGTH), index),\n-                                        getCommentOffset() - 1).println(\" \/\/ \" + pool.ConstantStrValue(index));\n-                            }\n+                 opc_getfield, opc_invokevirtual, opc_invokespecial, opc_invokestatic -> {\n+                int count = 2;\n+                List<Byte> validBytes = checkCodeBounds(pc, count);\n+                if (validBytes.size() == count) {\n+                    int index = getUShort(pc + 1);\n+                    if (printCPIndex) {\n+                        if (skipComments) {\n+                            println(format(\"%s #%d;\", PadRight(operand, OPERAND_PLACEHOLDER_LENGTH), index));\n@@ -489,2 +635,2 @@\n-                            print(PadRight(operand, OPERAND_PLACEHOLDER_LENGTH + 1));\n-                            println(pool.ConstantStrValue(index) + \";\");\n+                            printPadRight(format(\"%s #%d;\", PadRight(operand, OPERAND_PLACEHOLDER_LENGTH), index),\n+                                    getCommentOffset()).println(\" \/\/ \" + pool.ConstantStrValue(index));\n@@ -492,1 +638,3 @@\n-                        return 3;\n+                    } else {\n+                        print(PadRight(operand, OPERAND_PLACEHOLDER_LENGTH + 1));\n+                        println(pool.ConstantStrValue(index) + \";\");\n@@ -494,0 +642,4 @@\n+                } else\n+                    printBytes(opcode.byteValue(), validBytes, shift);\n+                return 3;\n+            }\n@@ -495,5 +647,12 @@\n-                int index = getUShort(pc + 1);\n-                int dimensions = getUByte(pc + 3);  \/\/ nargs in case of opc_invokeinterface\n-                if (printCPIndex) {\n-                    if( skipComments ) {\n-                        println(format(\"%s #%d, %d;\", PadRight(operand, OPERAND_PLACEHOLDER_LENGTH), index, dimensions));\n+                int count = opcode == Opcode.opc_multianewarray ? 3 : 4;\n+                List<Byte> validBytes = checkCodeBounds(pc, count);\n+                if (validBytes.size() == count) {\n+                    int index = getUShort(pc + 1);\n+                    int dimensions = getUByte(pc + 3);  \/\/ nargs in case of opc_invokeinterface\n+                    if (printCPIndex) {\n+                        if (skipComments) {\n+                            println(format(\"%s #%d, %d;\", PadRight(operand, OPERAND_PLACEHOLDER_LENGTH), index, dimensions));\n+                        } else {\n+                            printPadRight(format(\"%s #%d, %d;\", PadRight(operand, OPERAND_PLACEHOLDER_LENGTH), index, dimensions),\n+                                    getCommentOffset()).println(\" \/\/ \" + pool.ConstantStrValue(index));\n+                        }\n@@ -501,2 +660,2 @@\n-                        printPadRight(format(\"%s #%d, %d;\", PadRight(operand, OPERAND_PLACEHOLDER_LENGTH), index, dimensions),\n-                                getCommentOffset() - 1).println(\" \/\/ \" + pool.ConstantStrValue(index));\n+                        print(PadRight(operand, OPERAND_PLACEHOLDER_LENGTH + 1));\n+                        println(\"%s, %d;\", pool.ConstantStrValue(index), dimensions);\n@@ -505,2 +664,1 @@\n-                    print(PadRight(operand, OPERAND_PLACEHOLDER_LENGTH + 1));\n-                    println(\"%s, %d;\", pool.ConstantStrValue(index), dimensions);\n+                    printBytes(opcode.byteValue(), validBytes, shift);\n@@ -508,1 +666,1 @@\n-                return opcode == Opcode.opc_multianewarray ? 4 : 5;\n+                return count + 1;\n@@ -511,2 +669,6 @@\n-                print(PadRight(operand, OPERAND_PLACEHOLDER_LENGTH + 1)).\n-                        println(getShort(pc + 1) + \";\");\n+                int count = 2;\n+                List<Byte> validBytes = checkCodeBounds(pc, count);\n+                if (validBytes.size() == count)\n+                    print(PadRight(operand, OPERAND_PLACEHOLDER_LENGTH + 1)).println(getShort(pc + 1) + \";\");\n+                else\n+                    printBytes(opcode.byteValue(), validBytes, shift);\n@@ -516,2 +678,6 @@\n-                print(PadRight(operand, OPERAND_PLACEHOLDER_LENGTH + 1)).\n-                        println(getByte(pc + 1) + \";\");\n+                int count = 1;\n+                List<Byte> validBytes = checkCodeBounds(pc, count);\n+                if (validBytes.size() == count)\n+                    print(PadRight(operand, OPERAND_PLACEHOLDER_LENGTH + 1)).println(getByte(pc + 1) + \";\");\n+                else\n+                    printBytes(opcode.byteValue(), validBytes, shift);\n@@ -521,4 +687,9 @@\n-                    opc_if_icmpne, opc_if_icmpge, opc_if_icmpgt, opc_if_icmple, opc_if_icmplt, opc_if_acmpeq,\n-                    opc_if_acmpne, opc_ifnull, opc_ifnonnull -> {\n-                print(PadRight(operand, OPERAND_PLACEHOLDER_LENGTH + 1)).\n-                        println(data.lP + (pc + getShort(pc + 1)) + \";\");\n+                 opc_if_icmpne, opc_if_icmpge, opc_if_icmpgt, opc_if_icmple, opc_if_icmplt, opc_if_acmpeq,\n+                 opc_if_acmpne, opc_ifnull, opc_ifnonnull -> {\n+                int count = 2;\n+                List<Byte> validBytes = checkCodeBounds(pc, count);\n+                if (validBytes.size() == count)\n+                    print(PadRight(operand, OPERAND_PLACEHOLDER_LENGTH + 1)).\n+                            println(data.getLabelPrefix() + (pc + getShort(pc + 1)) + \";\");\n+                else\n+                    printBytes(opcode.byteValue(), validBytes, shift);\n@@ -528,2 +699,7 @@\n-                print(PadRight(operand, OPERAND_PLACEHOLDER_LENGTH + 1)).\n-                        println(data.lP + (pc + getInt(pc + 1)) + \";\");\n+                int count = 4;\n+                List<Byte> validBytes = checkCodeBounds(pc, count);\n+                if (validBytes.size() == count)\n+                    print(PadRight(operand, OPERAND_PLACEHOLDER_LENGTH + 1)).\n+                            println(data.getLabelPrefix() + (pc + getInt(pc + 1)) + \";\");\n+                else\n+                    printBytes(opcode.byteValue(), validBytes, shift);\n@@ -539,4 +715,12 @@\n-    private Pair<Integer,Integer>[] getLookupswitchPairs(int pad, int count) {\n-        Pair<Integer,Integer>[] pairs = new Pair[count];\n-        for (int i = 1; i <= count; i++) {\n-            pairs[i-1] = new Pair<>(getInt(pad + i * 8), getInt(pad + 4 + i * 8) );\n+    \/**\n+     * @param opcode byte encoding of an instruction\n+     * @param bytes  bytes corresponding to the instruction's parameters\n+     * @param shift  printing indentation for output bytes\n+     *\/\n+    private void printBytes(byte opcode, List<Byte> bytes, int shift) {\n+        print(PadRight(opc_bytecode.parseKey(), OPERAND_PLACEHOLDER_LENGTH + 1)).\n+                println(HexUtils.toHex(opcode) + \";\");\n+        for (byte b : bytes) {\n+            printPadLeft(\" \", shift).\n+                    print(PadRight(opc_bytecode.parseKey(), OPERAND_PLACEHOLDER_LENGTH + 1)).\n+                    println(HexUtils.toHex(b) + \";\");\n@@ -544,1 +728,0 @@\n-        return pairs;\n@@ -548,1 +731,1 @@\n-     * Formats invokedynamic\/ldc dynamic operand line\n+     * Checks whether the bytes corresponding to the instruction's parameters belong to the code attribute.\n@@ -550,5 +733,4 @@\n-     * @param str            non-formatted operand line\n-     * @param offset         indent for new lines\n-     * @param prefix         prefix placed upfront new lines\n-     * @param breakPositions numbers where after \":\" a lineSeparator is added to wrap a very long operand lines\n-     * @return formatted operand line\n+     * @param ind   code index of the instruction\n+     * @param count number of bytes corresponding to the instruction's parameters\n+     * @return The list of bytes corresponds to the instruction's parameters that belong to the code attribute.\n+     * If the count does not match the list size, it indicates that the instruction is truncated.\n@@ -556,59 +738,16 @@\n-    private String formatOperandLine(String str, int offset, String prefix, List<Integer> breakPositions) {\n-        StringTokenizer st = new StringTokenizer(str, \":\\\"{}\\\\\" + ARGUMENT_DELIMITER + LINE_SPLITTER, true);\n-        StringBuilder sb = new StringBuilder(80);\n-        boolean processTokens = true;\n-        String prevToken = \"\";\n-        int nItems = 0, nLevel = 0;\n-        while (st.hasMoreTokens()) {\n-            String token = st.nextToken();\n-            switch (token) {\n-                case \":\":\n-                    sb.append(token);\n-                    if (processTokens) {\n-                        nItems++;\n-                        if (breakPositions.contains(nItems) && nLevel == 0) {\n-                            sb.append(lineSeparator()).append(nCopies(offset)).append(prefix);\n-                        }\n-                    }\n-                    break;\n-                case \"}\":\n-                    if (processTokens) {\n-                        nLevel--;\n-                        sb.append(lineSeparator()).append(nCopies(offset)).\n-                                append(prefix).append(nCopies(getIndentStep() * nLevel)).append(token);\n-                    } else\n-                        sb.append(token);\n-                    break;\n-                case \"{\":\n-                    if (processTokens) {\n-                        nLevel++;\n-                        sb.append(\" {\").append(lineSeparator()).append(nCopies(offset)).\n-                                append(prefix).append(nCopies(getIndentStep() * nLevel));\n-                    } else {\n-                        sb.append(token);\n-                    }\n-                    break;\n-                case \"\\\"\":\n-                    if (!prevToken.equals(\"\\\\\"))\n-                        processTokens = !processTokens;\n-                    sb.append(token);\n-                    break;\n-                case ARGUMENT_DELIMITER:\n-                    if (processTokens)\n-                        sb.append(',').append(lineSeparator()).append(nCopies(offset)).\n-                                append(prefix).append(nCopies(getIndentStep() * nLevel));\n-                    else\n-                        sb.append(ARGUMENT_DELIMITER);\n-                    break;\n-                case LINE_SPLITTER:\n-                    if (processTokens)\n-                        sb.append(lineSeparator()).append(nCopies(offset)).\n-                                append(prefix).append(nCopies(getIndentStep() * nLevel));\n-                    else\n-                        sb.append(ARGUMENT_DELIMITER);\n-                    break;\n-                default:\n-                    sb.append(token);\n-                    break;\n-            }\n-            prevToken = token;\n+    private List<Byte> checkCodeBounds(int ind, int count) {\n+        List<Byte> list = new ArrayList<>();\n+        int codeLength = code.length;\n+        for (int i = 1; i <= count; i++) {\n+            if (ind + i < codeLength)\n+                list.add(code[i]);\n+            else\n+                return list;\n+        }\n+        return list;\n+    }\n+\n+    private Pair<Integer, Integer>[] getLookupswitchPairs(int pad, int count) {\n+        Pair[] pairs = new Pair[count];\n+        for (int i = 1; i <= count; i++) {\n+            pairs[i - 1] = new Pair<>(getInt(pad + i * 8), getInt(pad + 4 + i * 8));\n@@ -616,1 +755,1 @@\n-        return sb.toString();\n+        return pairs;\n@@ -619,0 +758,1 @@\n+\n@@ -620,1 +760,1 @@\n-     * Prints the code data to the current output stream. called from MethodData.\n+     * Prints the code data to the current output stream if code exists (method isn't abstract)\n@@ -624,1 +764,1 @@\n-        if (!lin_num_tb.isEmpty()) {\n+        if (lineNumberTable != null) {\n@@ -627,1 +767,3 @@\n-        if (stack_map != null) {\n+\n+        \/\/ Preparing the inlined StackMapTable to have early_larval_frame tied to other frame types for which it is a wrapper.\n+        if (stackMapTable != null && !tableFormat) {\n@@ -634,2 +776,2 @@\n-        if (!loc_var_tb.isEmpty()) {\n-            loadLocVarTable();\n+        if (localVariableTable != null) {\n+            loadLocalVariableTable();\n@@ -637,0 +779,5 @@\n+        if (localVariableTypeTable != null) {\n+            loadLocalVariableTypeTable();\n+        }\n+        \/\/ stack 3  locals 1\n+        incIndent().printIndentLn(\"%s %d  %s %d\", STACK.parseKey(), max_stack, LOCAL.parseKey(), max_locals).decIndent();\n@@ -638,7 +785,2 @@\n-        println().incIndent().printIndentPadRight(JasmTokens.Token.STACK.parseKey(), PROGRAM_COUNTER_PLACEHOLDER_LENGTH);\n-        println(\"%d locals  %d\", max_stack, max_locals).decIndent();\n-\n-        \/\/ Need to print ParamAnnotations here.\n-        data.incIndent();\n-        data.printPAnnotations();\n-        data.decIndent();\n+        \/\/ Print ParamAnnotations if found.\n+        data.printMethodParameters();\n@@ -646,0 +788,1 @@\n+        \/\/ Print Code Attribute\n@@ -649,9 +792,0 @@\n-        int instructionOffset, attributeOffset;\n-\n-        if (data.printProgramCounter) {\n-            instructionOffset = PROGRAM_COUNTER_PLACEHOLDER_LENGTH;\n-            attributeOffset = instructionOffset;\n-        } else {\n-            instructionOffset = INSTR_PREFIX_LENGTH;\n-            attributeOffset = instructionOffset - getIndentStep();\n-        }\n@@ -674,1 +808,1 @@\n-                printIndent(PadRight(((insAttr != null) && insAttr.referred) ? data.lP + pc + \":\" : \" \", instructionOffset));\n+                printIndent(PadRight(((insAttr != null) && insAttr.referred) ? data.getLabelPrefix() + pc + \":\" : \" \", instructionOffset));\n@@ -679,1 +813,1 @@\n-                if (insAttr.printStackMap(attributeOffset)) {\n+                if (insAttr.printStackMap_Table(attributeOffset)) {\n@@ -694,1 +828,1 @@\n-        if (insAttr != null && insAttr.stackMapEntry != null) {\n+        if (insAttr != null && insAttr.stackMapEntry != null && insAttr.referred) {\n@@ -697,1 +831,2 @@\n-                printIndent(PadRight(format(\"%2d:\", code.length), instructionOffset));\n+                printIndent(PadRight(\"%2d:\".formatted(code.length), 0));\n+                decIndent();\n@@ -699,18 +834,1 @@\n-                printIndent((PadRight((insAttr.referred) ? data.lP + code.length + \":\" : \"?\", instructionOffset)));\n-                incIndent();\n-            }\n-            decIndent();\n-        }\n-        \/\/ print TypeAnnotations\n-        if (visibleTypeAnnotations != null) {\n-            println();\n-            for (TypeAnnotationData<MethodData> vta : visibleTypeAnnotations) {\n-                vta.print();\n-                println();\n-            }\n-        }\n-        if (invisibleTypeAnnotations != null) {\n-            println(() -> visibleTypeAnnotations == null);\n-            for (TypeAnnotationData<MethodData> ita : invisibleTypeAnnotations) {\n-                ita.print();\n-                println();\n+                printIndent(PadRight(\"%s%d:\".formatted(data.getLabelPrefix(), code.length), code.length), 0);\n@@ -719,1 +837,5 @@\n-        \/\/ end of code\n+        \/\/ Print code's type annotations\n+        printAnnotations(visibleTypeAnnotations, invisibleTypeAnnotations);\n+\n+        \/\/ Print\n+        printAttributes(lineNumberTable, localVariableTable, localVariableTypeTable, stackMapTable);\n@@ -723,2 +845,3 @@\n-    public JdisEnvironment getEnvironment() {\n-        return environment;\n+    @Override\n+    public MemberData<MethodData> setSignature(SignatureData signatureData) {\n+        throw new RuntimeException(\"The Code Attribute does not have a signature attribute\");\n@@ -727,10 +850,2 @@\n-    public static class LocVarData {\n-        short start_pc, length, name_cpx, sig_cpx, slot;\n-\n-        public LocVarData(DataInputStream in) throws IOException {\n-            start_pc = in.readShort();\n-            length = in.readShort();\n-            name_cpx = in.readShort();\n-            sig_cpx = in.readShort();\n-            slot = in.readShort();\n-        }\n+    public Environment getEnvironment() {\n+        return environment;\n@@ -739,7 +854,17 @@\n-    \/* Code Data inner classes *\/\n-    static class LineNumData {\n-        short start_pc, line_number;\n-\n-        public LineNumData(DataInputStream in) throws IOException {\n-            start_pc = in.readShort();\n-            line_number = in.readShort();\n+    \/**\n+     * Prints ClassData annotations\n+     *\n+     * @throws IOException signals that an exception of some sort has occurred\n+     *\/\n+    @Override\n+    protected <T extends AnnotationData> void printAnnotations(List<T>... annotationLists) throws IOException {\n+        boolean firstTime = true;\n+        for (List<T> list : annotationLists) {\n+            if (list != null) {\n+                println(firstTime);\n+                for (T annotation : list) {\n+                    firstTime = false;\n+                    annotation.print();\n+                    println();\n+                }\n+            }\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/CodeData.java","additions":432,"deletions":307,"binary":false,"changes":739,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import org.openjdk.asmtools.common.Environment;\n@@ -37,0 +38,1 @@\n+import static org.openjdk.asmtools.jasm.TableFormatModel.Token.CONSTANT_POOL;\n@@ -43,0 +45,3 @@\n+    public static final Function<Integer, String> funcInvalidCPIndex =\n+            index -> \"??? Invalid constant_pool reference #%d\".formatted(index);\n+\n@@ -83,1 +88,1 @@\n-    private JdisEnvironment environment;\n+    private Environment environment;\n@@ -102,0 +107,1 @@\n+        tableToken = CONSTANT_POOL;\n@@ -127,1 +133,1 @@\n-    void read(DataInputStream in) throws IOException {\n+    ConstantPool read(DataInputStream in) throws IOException {\n@@ -141,1 +147,1 @@\n-                                environment.getInputFile(), i, tagByte));\n+                                environment.getToolInput(), i, tagByte));\n@@ -161,1 +167,2 @@\n-                case CONSTANT_FIELD, CONSTANT_METHOD, CONSTANT_INTERFACEMETHOD, CONSTANT_NAMEANDTYPE, CONSTANT_DYNAMIC, CONSTANT_INVOKEDYNAMIC ->\n+                case CONSTANT_FIELD, CONSTANT_METHOD, CONSTANT_INTERFACEMETHOD, CONSTANT_NAMEANDTYPE, CONSTANT_DYNAMIC,\n+                     CONSTANT_INVOKEDYNAMIC ->\n@@ -167,7 +174,1 @@\n-    }\n-\n-    \/**\n-     * bounds-check a CP index.\n-     *\/\n-    private boolean inbounds(int cpx) {\n-        return !(cpx == 0 || cpx >= pool.size());\n+        return this;\n@@ -180,1 +181,1 @@\n-        if (inbounds(cpx)) {\n+        if (inRange(cpx)) {\n@@ -190,1 +191,1 @@\n-     * Returns either the Java Module name, or a default ConstantUTF8 built by CP index\n+     * Returns either the UTF8 string, or a default ConstantUTF8 built by CP index\n@@ -195,1 +196,1 @@\n-        if (inbounds(cpx)) {\n+        if (inRange(cpx)) {\n@@ -213,1 +214,1 @@\n-        if (inbounds(cpx)) {\n+        if (inRange(cpx)) {\n@@ -234,1 +235,1 @@\n-        if (inbounds(cpx)) {\n+        if (inRange(cpx)) {\n@@ -269,0 +270,42 @@\n+    public String getMethodName(int cpx) {\n+        Constant<?> cns = pool.get(cpx);\n+        if (cns != null && cns instanceof CPX2 cpx2) {\n+            return cpx2.stringVal();\n+        } else {\n+            return cns.stringVal();\n+        }\n+    }\n+\n+    \/**\n+     * Gets a string representation of the constant_pool entry at the specified index,\n+     * pointing to a CONSTANT_NameAndType_info structure with a field descriptor.\n+     *\n+     * @param cpx the constant_pool index pointing to CONSTANT_NameAndType_info\n+     * @return a string presentation of the CONSTANT_NameAndType_info structure\n+     *\/\n+    public String getFieldNameTypeAsString(int cpx) {\n+        Constant<?> cns = pool.get(cpx);\n+        if (cns == null || (cns.tag != TAG.CONSTANT_NAMEANDTYPE) || referredBy(cpx, TAG.CONSTANT_METHOD,\n+                TAG.CONSTANT_INTERFACEMETHOD, TAG.CONSTANT_METHODHANDLE, TAG.CONSTANT_DYNAMIC, TAG.CONSTANT_INVOKEDYNAMIC)) {\n+            String msg = environment.getLogger().getResourceString(\"warn.field.nametype.required\", cpx);\n+            return (printCPIndex) ? msg : \"??? #%d %s\".formatted(cpx, msg);\n+        }\n+        return cns.stringVal();\n+    }\n+\n+    public boolean referredBy(int cpx, TAG... tags) {\n+        Optional<Constant> cns = pool.stream().filter(item -> item != null &&\n+                item.tag.belongsTo(tags)).filter(c -> ((CPX2) c).value2 == cpx).findFirst();\n+        return cns.isPresent();\n+    }\n+\n+    \/**\n+     * Safely gets a Java class name from a ConstantClass from the CP at a given index.\n+     * <p>\n+     * Returns either the Java class name, or a message string formatted by cpx: formatString.formatted(cpx)\n+     *\/\n+    public String getJavaClassName(int cpx, String formatString) {\n+        String str = getClassName(cpx, index -> null);\n+        return (str == null) ? formatString.formatted(cpx) : str.replace('\/', '.');\n+    }\n+\n@@ -276,3 +319,10 @@\n-        String res = funcGetDefaultClassName.apply(cpx);\n-        if (cpx == 0 || !inbounds(cpx)) {\n-            return res;\n+        Constant cns = getConstantOfClassName(cpx);\n+        if (cns == null) {\n+            return funcGetDefaultClassName.apply(cpx);\n+        }\n+        return getClassName((CPX) cns);\n+    }\n+\n+    public Constant getConstantOfClassName(int cpx) {\n+        if (!inRange(cpx)) {\n+            return null;\n@@ -282,1 +332,1 @@\n-            return res;\n+            return null;\n@@ -284,1 +334,1 @@\n-        return getClassName((CPX) cns);\n+        return cns;\n@@ -312,1 +362,1 @@\n-        if (!inbounds(nameIndex)) {\n+        if (!inRange(nameIndex)) {\n@@ -315,2 +365,2 @@\n-        Constant nameconst = pool.get(nameIndex);\n-        if (nameconst == null || nameconst.tag != TAG.CONSTANT_UTF8) {\n+        Constant nameConst = pool.get(nameIndex);\n+        if (nameConst == null || nameConst.tag != TAG.CONSTANT_UTF8) {\n@@ -319,1 +369,1 @@\n-        CP_Str name = (CP_Str) nameconst;\n+        CP_Str name = (CP_Str) nameConst;\n@@ -324,1 +374,1 @@\n-            classname = \"\\\"\" + classname + \"\\\"\";\n+            classname = \"\\\"%s\\\"\".formatted(classname);\n@@ -387,5 +437,2 @@\n-        if (cpx == 0) {\n-            return \"#0\";\n-        }\n-        if (!inbounds(cpx)) {\n-            return \"<Incorrect CP index:\" + cpx + \">\";\n+        if (!inRange(cpx)) {\n+            return \"<invalid constant pool index: %d>\".formatted(cpx);\n@@ -395,1 +442,1 @@\n-            return \"<NULL>\";\n+            return \"<null>\";\n@@ -402,1 +449,1 @@\n-     * a Constant's String value, or a CP index reference string. The Constant string has\n+     * a Constant's String value or a CP index reference string. The Constant string has\n@@ -406,1 +453,1 @@\n-        if (cpx == 0 || !inbounds(cpx)) {\n+        if (cpx == 0 || !inRange(cpx)) {\n@@ -421,4 +468,7 @@\n-    \/**\n-     * prints the entire constant pool.\n-     *\/\n-    public void print() throws IOException {\n+    @Override\n+    public boolean isTableOutput() {\n+        return tableFormat;\n+    }\n+\n+    @Override\n+    protected void jasmPrint() {\n@@ -426,2 +476,3 @@\n-        int nSpaces = pool.size() > 100 ? 4 : 3;\n-        int tagPadding = getTagPadding();\n+        if (extraDetailedOutput && !skipComments) {\n+            printIndentLn(\"\/\/ %s:\".formatted(tableToken.printKey()));\n+        }\n@@ -430,1 +481,1 @@\n-            printIndent(\"const %s = \", PadRight(\"#\" + idx, nSpaces));\n+            printIndent(this.CPXPlaceHolder, idx);\n@@ -433,1 +484,1 @@\n-                println(\"null;\");\n+                printIndentLn(\"null;\");\n@@ -437,1 +488,3 @@\n-                cns.print(toolOutput, tagPadding);\n+                \/\/ simple printing\n+                cns.jasmPrint(toolOutput, this.tagPadding);\n+\n@@ -443,2 +496,20 @@\n-    private int getTagPadding() {\n-        return pool.stream().mapToInt(elem -> (elem == null) ? 4 : elem.tag.tagName().length()).max().orElse(10) + 1;\n+    @Override\n+    protected void tablePrint() {\n+        int size;\n+        if (extraDetailedOutput && !skipComments) {\n+            printIndentLn(\"\/\/ %s:\".formatted(tableToken.printKey()));\n+        }\n+        for (int idx = 1; idx < pool.size(); idx += size) {\n+            Constant cns = pool.get(idx);\n+            printIndent(this.CPXPlaceHolder, idx);\n+            if (cns == null) {\n+                size = 0;\n+                printIndentLn(\"null;\");\n+            } else {\n+                size = cns.size();\n+                cns.setCommentPadding(getCommentPadding());\n+                \/\/ extended printing\n+                cns.tablePrint(toolOutput, this.tagPadding);\n+            }\n+        }\n+        printIndentLn();\n@@ -447,3 +518,4 @@\n-    private int getCommentPadding() {\n-        return max(COMMENT_PADDING, getTagPadding());\n-    }\n+    private String CPXPlaceHolder = \"\";\n+    private int CPXPlaceHolderLength = 0;\n+    private int CPXLength = 0;\n+    private int tagPadding = 0;\n@@ -451,2 +523,20 @@\n-    @Override\n-    public int getCommentOffset() {\n+    \/**\n+     * Initialize printing data once the pool was read.\n+     * Prepare offsets, paddings, etc. needed for printing\n+     *\/\n+    protected ConstantPool InitializePrintData() {\n+        int maxTagNameLength = pool.stream().mapToInt(elem -> (elem == null) ? 4 :\n+                elem.tag.getPrintWidth(tableFormat)).max().orElse(10);\n+        this.CPXLength = pool.size() > 100 ? 4 : 3;\n+        \/\/ similar to javap format like this:\n+        \/\/ Constant pool:\n+        \/\/    #1 = Methodref          #2.#3         \/\/ java\/lang\/Object.\"<init>\":()V\n+        \/\/    #2 = Class              #4            \/\/ java\/lang\/Object\n+        \/\/ if (javap-like format) ::\n+        \/\/ int maxTagAliasLength = pool.stream().mapToInt(elem -> (elem == null) ? 4 :\n+        \/\/      elem.tag.tagAlias().length()).max().orElse(10);\n+        \/\/      this.tagPadding = maxTagAliasLength + 1;\n+        \/\/      this.CPXPlaceHolder = \"%\" + CPXLength + \"s = \".formatted(\"#%d\");\n+        this.tagPadding = maxTagNameLength + 1;\n+        this.CPXPlaceHolder = \"const #%-\" + CPXLength + \"d = \";\n+        this.CPXPlaceHolderLength = this.CPXPlaceHolder.formatted(pool.size()).length();\n@@ -455,0 +545,2 @@\n+        \/\/ --#XX       =\n+        \/\/ IIhhhhhhhhhhhhTTTTTTTTTTTTTCCCCCCCCCCCCCCCCCCCC\n@@ -456,1 +548,7 @@\n-        return getIndentSize() + max(String.valueOf(pool.size()).length(), 2) + 10 + getTagPadding() + getCommentPadding();\n+        \/\/     II              + hhhhhhhhhhhhhhhhhhhhhhhh  + TTTTTTTTTT + CCCCCCCCCCCCCCCCCCC\n+        this.commentOffset = getIndentSize() + this.CPXPlaceHolderLength + tagPadding + this.getCommentPadding();\n+        return this;\n+    }\n+\n+    public int getCommentPadding() {\n+        return max(COMMENT_PADDING, tagPadding);\n@@ -465,0 +563,21 @@\n+    public CPX2 getCPX2(TAG tag) {\n+        return new CPX2(tag);\n+    }\n+\n+    public boolean CheckEntryType(int cpIndex, TAG... tags) {\n+        Constant cell = getConst(cpIndex);\n+        if (cell != null) {\n+            return cell.tag.belongsTo(tags);\n+        }\n+        return false;\n+    }\n+\n+    public TAG getTag(int cpIndex) {\n+        Constant cell = getConst(cpIndex);\n+        if (cell != null) {\n+            return cell.tag;\n+        }\n+        return null;\n+    }\n+\n+\n@@ -472,5 +591,5 @@\n-        CONSTANT_INTEGER((byte) 3, \"int\", \"CONSTANT_INTEGER\", 1),\n-        CONSTANT_FLOAT((byte) 4, \"float\", \"CONSTANT_FLOAT\", 1),\n-        CONSTANT_LONG((byte) 5, \"long\", \"CONSTANT_LONG\", 2),\n-        CONSTANT_DOUBLE((byte) 6, \"double\", \"CONSTANT_DOUBLE\", 2),\n-        CONSTANT_CLASS((byte) 7, \"class\", \"CONSTANT_CLASS\", 1),\n+        CONSTANT_INTEGER((byte) 3, \"int\", \"Integer\", \"CONSTANT_INTEGER\", 1),\n+        CONSTANT_FLOAT((byte) 4, \"float\", \"Float\", \"CONSTANT_FLOAT\", 1),\n+        CONSTANT_LONG((byte) 5, \"long\", \"Long\", \"CONSTANT_LONG\", 2),\n+        CONSTANT_DOUBLE((byte) 6, \"double\", \"Double\", \"CONSTANT_DOUBLE\", 2),\n+        CONSTANT_CLASS((byte) 7, \"class\", \"Class\", \"CONSTANT_CLASS\", 1),\n@@ -478,3 +597,3 @@\n-        CONSTANT_FIELD((byte) 9, \"Field\", \"CONSTANT_FIELD\", 1),\n-        CONSTANT_METHOD((byte) 10, \"Method\", \"CONSTANT_METHOD\", 1),\n-        CONSTANT_INTERFACEMETHOD((byte) 11, \"InterfaceMethod\", \"CONSTANT_INTERFACEMETHOD\", 1),\n+        CONSTANT_FIELD((byte) 9, \"Field\", \"Fieldref\", \"CONSTANT_FIELD\", 1),\n+        CONSTANT_METHOD((byte) 10, \"Method\", \"Methodref\", \"CONSTANT_METHOD\", 1),\n+        CONSTANT_INTERFACEMETHOD((byte) 11, \"InterfaceMethod\", \"InterfaceMethodref\", \"CONSTANT_INTERFACEMETHOD\", 1),\n@@ -491,0 +610,1 @@\n+        private final String tagAlias;\n@@ -497,0 +617,1 @@\n+            this.tagAlias = \"\";\n@@ -501,0 +622,24 @@\n+        TAG(byte value, String tagName, String tagAlias, String printValue, int size) {\n+            this.value = value;\n+            this.tagName = tagName;\n+            this.tagAlias = tagAlias;\n+            this.printValue = printValue;\n+            this.size = size;\n+        }\n+\n+        public String printValue() {\n+            String[] strings = this.name().split(\"_\");\n+            return strings[0] + \"_\" +\n+                    strings[1].substring(0, 1).toUpperCase() +\n+                    strings[1].substring(1).toLowerCase();\n+        }\n+\n+        public boolean belongsTo(TAG... tags) {\n+            for (TAG tag : tags) {\n+                if (this.value.equals(tag.value)) {\n+                    return true;\n+                }\n+            }\n+            return false;\n+        }\n+\n@@ -509,0 +654,9 @@\n+        public int getPrintWidth(boolean tableFormat) {\n+            String str = tableFormat ? this.tagAlias() : this.tagName;\n+            return str.length();\n+        }\n+\n+        public String tagAlias() {\n+            return tagAlias.isEmpty() ? tagName : tagAlias;\n+        }\n+\n@@ -573,1 +727,1 @@\n-        public void print(ToolOutput out, int spacePadding) {\n+        public void jasmPrint(ToolOutput out, int spacePadding) {\n@@ -577,0 +731,4 @@\n+        public void tablePrint(ToolOutput out, int spacePadding) {\n+            out.prints(PadRight(tag.tagAlias(), spacePadding));\n+        }\n+\n@@ -594,1 +752,1 @@\n-            return \"\";\n+            return String.valueOf(value);\n@@ -615,1 +773,1 @@\n-            return \"<CONSTANT \" + tag.toString() + \" \" + stringVal() + \">\";\n+            return \"<CONSTANT %s %s>\".formatted(tag, stringVal());\n@@ -628,1 +786,0 @@\n-        @Override\n@@ -633,0 +790,7 @@\n+\n+        @Override\n+        public void jasmPrint(ToolOutput out, int spacePadding) {\n+            super.jasmPrint(out, spacePadding);\n+            out.printlns(stringVal() + \";\");\n+        }\n+\n@@ -634,2 +798,3 @@\n-        public void print(ToolOutput out, int spacePadding) {\n-            super.print(out, spacePadding);\n+        public void tablePrint(ToolOutput out, int spacePadding) {\n+            super.tablePrint(out, spacePadding);\n+            \/\/ out.printlns(StringUtils.Utf8ToString(value));\n@@ -655,2 +820,9 @@\n-        public void print(ToolOutput out, int spacePadding) {\n-            super.print(out, spacePadding);\n+        public void jasmPrint(ToolOutput out, int spacePadding) {\n+            super.jasmPrint(out, spacePadding);\n+            out.printlns(stringVal() + \";\");\n+        }\n+\n+        @Override\n+        public void tablePrint(ToolOutput out, int spacePadding) {\n+            super.tablePrint(out, spacePadding);\n+            \/\/ out.printlns(stringVal());\n@@ -676,0 +848,7 @@\n+\n+        @Override\n+        public void jasmPrint(ToolOutput out, int spacePadding) {\n+            super.jasmPrint(out, spacePadding);\n+            out.printlns(stringVal() + \";\");\n+        }\n+\n@@ -677,2 +856,3 @@\n-        public void print(ToolOutput out, int spacePadding) {\n-            super.print(out, spacePadding);\n+        public void tablePrint(ToolOutput out, int spacePadding) {\n+            super.tablePrint(out, spacePadding);\n+            \/\/ out.printlns(stringVal());\n@@ -710,2 +890,2 @@\n-        public void print(ToolOutput out, int spacePadding) {\n-            super.print(out, spacePadding);\n+        public void jasmPrint(ToolOutput out, int spacePadding) {\n+            super.jasmPrint(out, spacePadding);\n@@ -714,0 +894,8 @@\n+\n+        @Override\n+        public void tablePrint(ToolOutput out, int spacePadding) {\n+            super.tablePrint(out, spacePadding);\n+            \/\/ out.printlns(stringVal());\n+            out.printlns(stringVal() + \";\");\n+\n+        }\n@@ -739,2 +927,9 @@\n-        public void print(ToolOutput out, int spacePadding) {\n-            super.print(out, spacePadding);\n+        public void jasmPrint(ToolOutput out, int spacePadding) {\n+            super.jasmPrint(out, spacePadding);\n+            out.printlns(stringVal() + \";\");\n+        }\n+\n+        @Override\n+        public void tablePrint(ToolOutput out, int spacePadding) {\n+            super.tablePrint(out, spacePadding);\n+            \/\/ out.printlns(stringVal());\n@@ -751,1 +946,1 @@\n-     * CPX- Constant entries that contain a single constant-pool index. Usually, this includes:\n+     * CPX - Constant entries that contain a single constant-pool index. Usually, this includes:\n@@ -775,2 +970,13 @@\n-        public void print(ToolOutput out, int spacePadding) {\n-            super.print(out, spacePadding);\n+        public void jasmPrint(ToolOutput out, int spacePadding) {\n+            super.jasmPrint(out, spacePadding);\n+            print();\n+        }\n+\n+        @Override\n+        public void tablePrint(ToolOutput out, int spacePadding) {\n+            super.tablePrint(out, spacePadding);\n+            print();\n+        }\n+\n+        \/\/ Identical printing part for both JASM (simple) and extended (table) formats.\n+        private void print() {\n@@ -782,1 +988,1 @@\n-                        printPadRight(\"#\" + value + \";\", commentPadding).println(\"\/\/ \" + stringVal());\n+                        printPadRight(\"#\" + value + \";\", commentPadding).println(\" \/\/ \" + stringVal());\n@@ -789,0 +995,1 @@\n+\n@@ -796,1 +1003,1 @@\n-    class CPX2 extends Constant<Integer> {\n+    public class CPX2 extends Constant<Integer> {\n@@ -808,0 +1015,5 @@\n+        CPX2(TAG tag) {\n+            super(tag, 0);\n+            this.value2 = 0;\n+        }\n+\n@@ -860,1 +1072,3 @@\n-                    str = StringValue(bsm_ref) + \":\" + StringValue(nameTypeIndex) + bsmArgsAsString(bsmData);\n+                    str = \"%s:%s%s\".formatted(StringValue(bsm_ref),\n+                            StringValue(nameTypeIndex),\n+                            bsmArgsAsString(bsmData, \"{\", \"}\"));\n@@ -867,1 +1081,5 @@\n-        private String bsmArgsAsString(BootstrapMethodData bsmData) {\n+        public String bsmArgsAsString(BootstrapMethodData bsmData) {\n+            return bsmArgsAsString(bsmData, \"\", \"\");\n+        }\n+\n+        public String bsmArgsAsString(BootstrapMethodData bsmData, String LeftBracket, String RightBracket) {\n@@ -871,1 +1089,1 @@\n-                sb.append(\"{\");\n+                sb.append(LeftBracket);\n@@ -873,6 +1091,30 @@\n-                    int bsm_arg_idx = bsmData.bsmArguments.get(i);\n-                    Constant cnt = pool.get(bsm_arg_idx);\n-                    if (stack.search(this) == -1) {\n-                        stack.push(this);\n-                        sb.append(ConstantStrValue(bsm_arg_idx)).append((i + 1 < bsmArgsLen) ? ARGUMENT_DELIMITER : \"\");\n-                        stack.pop();\n+                    int bsmArgIdx = bsmData.bsmArguments.get(i);\n+                    boolean notLastIdx = i != bsmArgsLen - 1;\n+                    sb.append(bsmArgAsString(bsmArgIdx, notLastIdx));\n+                }\n+                sb.append(RightBracket);\n+            }\n+            return sb.toString();\n+        }\n+\n+        public String bsmArgAsString(int bsmArgIdx, boolean notLastIdx) {\n+            return bsmArgAsString(bsmArgIdx, notLastIdx ? ARGUMENT_DELIMITER : \"\", notLastIdx ? LINE_SPLITTER : \"\");\n+        }\n+\n+        public String bsmArgWithoutDelimitersAsString(int bsmArgIdx, boolean notLastIdx) {\n+            return bsmArgAsString(bsmArgIdx, \"\", notLastIdx ? LINE_SPLITTER : \"\");\n+        }\n+\n+\n+        public String bsmArgAsString(int bsmArgIdx, String argDelimiter, String lineSplitter) {\n+            String str = \"\";\n+            if (inRange(bsmArgIdx)) {\n+                Constant cnt = pool.get(bsmArgIdx);\n+                if (stack.search(this) == -1) {\n+                    stack.push(this);\n+                    str = str.concat(ConstantStrValue(bsmArgIdx)).concat(argDelimiter);\n+                    stack.pop();\n+                } else {\n+                    String ref;\n+                    if (cnt instanceof CPX2) {\n+                        ref = format(\"%-8s %d:#%d; \", cnt.tag.tagName(), cnt.value, ((CPX2) cnt).value2);\n@@ -880,15 +1122,1 @@\n-                        String ref;\n-                        if (cnt instanceof CPX2) {\n-                            ref = format(\"%-8s %d:#%d; \", cnt.tag.tagName(), cnt.value, ((CPX2) cnt).value2);\n-                        } else {\n-                            ref = format(\"%-8s #%d; \", cnt.tag.tagName(), cnt.value);\n-                        }\n-                        String msg = \"circular reference to \" + cnt.tag.tagName() + \" #\" + bsm_arg_idx;\n-                        if (printCPIndex) {\n-                            sb.append(ref).append(\"<\").append(msg).append(\">\").\n-                                    append((i + 1 < bsmArgsLen) ? ARGUMENT_DELIMITER : \"\");\n-                        } else {\n-                            sb.append(ref).append(\" \/\/ <\").append(msg).append(\">\").\n-                                    append((i + 1 < bsmArgsLen) ? LINE_SPLITTER : \"\");\n-                        }\n-                        cnt.setIssue(new IOException(msg));\n+                        ref = format(\"%-8s #%d; \", cnt.tag.tagName(), cnt.value);\n@@ -896,0 +1124,7 @@\n+                    String msg = \"circular reference to \" + cnt.tag.tagName() + \" #\" + bsmArgIdx;\n+                    if (printCPIndex) {\n+                        str = str.concat(PadRight(ref, CIRCULAR_COMMENT_OFFSET)).concat(\"<\").concat(msg).concat(\">\").concat(argDelimiter);\n+                    } else {\n+                        str = str.concat(PadRight(ref, CIRCULAR_COMMENT_OFFSET)).concat(\" \/\/ <\").concat(msg).concat(\">\").concat(lineSplitter);\n+                    }\n+                    cnt.setIssue(new IOException(msg));\n@@ -897,1 +1132,2 @@\n-                sb.append(\"}\");\n+            } else {\n+                str = environment.getInfo(\"info.corrupted_cp_entry\");\n@@ -899,1 +1135,7 @@\n-            return sb.toString();\n+            return str;\n+        }\n+\n+        @Override\n+        public void jasmPrint(ToolOutput out, int spacePadding) {\n+            super.jasmPrint(out, spacePadding);\n+            print();\n@@ -903,2 +1145,7 @@\n-        public void print(ToolOutput out, int spacePadding) {\n-            super.print(out, spacePadding);\n+        public void tablePrint(ToolOutput out, int spacePadding) {\n+            super.tablePrint(out, spacePadding);\n+            print();\n+        }\n+\n+        \/\/ Identical printing part for both JASM (simple) and extended (table) formats.\n+        private void print() {\n@@ -907,3 +1154,5 @@\n-                    case CONSTANT_FIELD, CONSTANT_METHOD, CONSTANT_INTERFACEMETHOD -> println(\"#%d.#%d;\", value, value2);\n-                    case CONSTANT_METHODHANDLE, CONSTANT_NAMEANDTYPE, CONSTANT_DYNAMIC, CONSTANT_INVOKEDYNAMIC ->\n-                            println(\"#%d:#%d;\", value, value2);\n+                    case CONSTANT_FIELD, CONSTANT_METHOD, CONSTANT_INTERFACEMETHOD ->\n+                            println(\"#%d.#%d;\", value, value2);\n+                    case CONSTANT_METHODHANDLE, CONSTANT_DYNAMIC, CONSTANT_INVOKEDYNAMIC ->\n+                            println(\"%d:#%d;\", value, value2);\n+                    case CONSTANT_NAMEANDTYPE -> println(\"#%d:#%d;\", value, value2);\n@@ -911,1 +1160,1 @@\n-                            printPadRight(format(\"%d:#%d;\", value, value2), commentPadding).println(\"\/\/ unknown tag: \" + tag.tagName);\n+                            printPadRight(format(\"%d:#%d;\", value, value2), commentPadding).println(\" \/\/ unknown tag: \" + tag.tagName);\n@@ -916,1 +1165,1 @@\n-                            printPadRight(format(\"#%d.#%d;\", value, value2), commentPadding).println(\"\/\/ \" + stringVal());\n+                            printPadRight(format(\"#%d.#%d;\", value, value2), commentPadding).println(\" \/\/ \" + stringVal());\n@@ -918,1 +1167,1 @@\n-                            printPadRight(format(\"%d:#%d;\", value, value2), commentPadding).println(\"\/\/ \" + stringVal());\n+                            printPadRight(format(\"%d:#%d;\", value, value2), commentPadding).println(\" \/\/ \" + stringVal());\n@@ -920,1 +1169,1 @@\n-                            printPadRight(format(\"#%d:#%d;\", value, value2), commentPadding).println(\"\/\/ \" + stringVal());\n+                            printPadRight(format(\"#%d:#%d;\", value, value2), commentPadding).println(\" \/\/ \" + stringVal());\n@@ -922,1 +1171,1 @@\n-                            printPadRight(format(\"%d:#%d;\", value, value2), commentPadding).println(\"\/\/ #%d:%s\", value, StringValue(value2));\n+                            printPadRight(format(\"%d:#%d;\", value, value2), commentPadding).println(\" \/\/ #%d:%s\", value, StringValue(value2));\n@@ -924,1 +1173,1 @@\n-                            printPadRight(format(\"%d:#%d;\", value, value2), commentPadding).println(\"\/\/ unknown tag: \" + tag.tagName);\n+                            printPadRight(format(\"%d:#%d;\", value, value2), commentPadding).println(\" \/\/ unknown tag: \" + tag.tagName);\n@@ -929,0 +1178,1 @@\n+\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/ConstantPool.java","additions":366,"deletions":116,"binary":false,"changes":482,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,2 @@\n+import org.openjdk.asmtools.jasm.TableFormatModel;\n+\n@@ -28,0 +30,4 @@\n+import java.util.Spliterator;\n+import java.util.function.Consumer;\n+\n+public class Container<T extends Indenter, M extends MemberData<?>> extends Indenter implements Iterable<T>, Measurable {\n@@ -29,1 +35,2 @@\n-public class Container<T extends Printable> extends ArrayList<T> implements Printable  {\n+    protected final ArrayList<T> elements;\n+    protected M owner;\n@@ -31,1 +38,5 @@\n-    protected boolean printable = true;\n+    public Container(M owner, Class<T> elementClass, int initialCapacity) {\n+        this.owner = owner;\n+        this.elements = new ArrayList<>(initialCapacity);\n+        this.tableToken = TableFormatModel.Token.getBy(elementClass);\n+    }\n@@ -33,2 +44,2 @@\n-    public Container(int initialCapacity) {\n-        super(initialCapacity);\n+    protected final boolean isCollectionMeasurable() {\n+        return (!this.elements.isEmpty() && elements.getFirst() instanceof Measurable);\n@@ -39,2 +50,21 @@\n-        for (Iterator<T> item = super.iterator(); item.hasNext(); ) {\n-            item.next().print();\n+        int size = this.size();\n+        if (size > 0) {\n+            boolean isExtendedPrintingSupported = tableToken.isExtendedPrintingSupported();\n+            setMaxPrintSize(getPrintSize());\n+            for (int i = 0; i < size; i++) {\n+                T element = elements.get(i);\n+                if (element instanceof Measurable measurable) {\n+                    measurable.setMaxPrintSize(this.getMaxPrintSize());\n+                }\n+                element.setCommentOffset(this.getCommentOffset());\n+                if (isExtendedPrintingSupported && isTableOutput())\n+                    element.tablePrint(i, size);\n+                else\n+                    element.jasmPrint(i, size);\n+            }\n+        }\n+    }\n+\n+    public void add(T element) throws IOException {\n+        if (element instanceof MemberData<?> md) {\n+            ((MemberData) md).setOwner(this.owner);\n@@ -42,0 +72,9 @@\n+        elements.add(element);\n+    }\n+\n+    public int size() {\n+        return elements.size();\n+    }\n+\n+    public T get(int index) {\n+        return elements.get(index);\n@@ -46,1 +85,40 @@\n-        return !super.isEmpty() && printable;\n+        return !elements.isEmpty() &&\n+                elements.stream().anyMatch(Printable::isPrintable);\n+    }\n+\n+    \/**\n+     * Calculates max print size of elements in a collection if they are measurable\n+     * In the case of s collection the print size is equal to max print size\n+     *\n+     * @return maxSize or 0\n+     *\/\n+    @Override\n+    public int getPrintSize() {\n+        if (!maxSizeCalculated && isCollectionMeasurable()) {\n+            this.maxSize = isCollectionMeasurable() ?\n+                    elements.stream().map(e -> (Measurable) e).\n+                            mapToInt(Measurable::getPrintSize).max().orElse(0) : 0;\n+            maxSizeCalculated = true;\n+        }\n+        return this.maxSize;\n+    }\n+\n+    \/**\n+     * Sets max print size to all elements of the collection\n+     *\/\n+    @Override\n+    public void setMaxPrintSize(int maxSize) {\n+        if (maxSize > 0 && isCollectionMeasurable()) {\n+            elements.stream().map(e -> (Measurable) e).peek(e -> e.setMaxPrintSize(maxSize));\n+        }\n+    }\n+\n+    \/**\n+     * Calculates max print size of elements in a collection if they are measurable\n+     * In the case of s collection the print size is equal to max print size\n+     *\n+     * @return maxSize or 0\n+     *\/\n+    @Override\n+    public int getMaxPrintSize() {\n+        return getPrintSize();\n@@ -52,1 +130,12 @@\n-     * @param printable print-ability\n+     * @param value print-ability\n+     * @return the instance\n+     *\/\n+    public Container<T, M> setPrintable(boolean value) {\n+        printable = value;\n+        return this;\n+    }\n+\n+    \/**\n+     * Set up measure-ability of cartage\n+     *\n+     * @param value can be measured\n@@ -55,2 +144,2 @@\n-    public Container<T> setPrintable(boolean printable) {\n-        this.printable = printable;\n+    public Container<T, M> setHasSize(boolean value) {\n+        hasSize = true;\n@@ -59,0 +148,15 @@\n+\n+    @Override\n+    public Iterator<T> iterator() {\n+        return elements.iterator();\n+    }\n+\n+    @Override\n+    public void forEach(Consumer<? super T> action) {\n+        elements.forEach(action);\n+    }\n+\n+    @Override\n+    public Spliterator<T> spliterator() {\n+        return elements.spliterator();\n+    }\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/Container.java","additions":115,"deletions":11,"binary":false,"changes":126,"status":"modified"},{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.jdis;\n+\n+\/**\n+ * The element of the class Container that belongs to the owner M\n+ *\/\n+public class Element<M extends MemberData<?>> extends Indenter {\n+    protected M owner;\n+    protected Container<?, M> container;\n+\n+    public Element(M owner, Container<?, M> container) {\n+        super(owner.toolOutput);\n+        this.owner = owner;\n+        this.container = container;\n+    }\n+\n+    @Override\n+    public int getCommentOffset() {\n+        return container.getCommentOffset();\n+    }\n+}\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/Element.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.jdis;\n+\n+import static org.openjdk.asmtools.jasm.TableFormatModel.Token.ENCLOSING_METHOD;\n+\n+\/**\n+ * The EnclosingMethod attribute since 45.3\n+ * <p>\n+ * EnclosingMethod_attribute {\n+ * u2 attribute_name_index;\n+ * u4 attribute_length;\n+ * u2 class_index;\n+ * u2 method_index; that is equal to CONSTANT_NameAndType_info_index;\n+ * }\n+ *\/\n+public class EnclosingMethodData extends AttributeData<EnclosingMethodData> {\n+\n+    public EnclosingMethodData(ClassData classData) {\n+        super(classData, ENCLOSING_METHOD);\n+    }\n+\n+    public String calculateName() {\n+        if (this.name == null) {\n+            if (printCPIndex) {\n+                this.name = (pool.getClassName(cpx, index -> logger.getResourceString(\"info.invalid_cp_entry\")));\n+            } else {\n+                this.name = \"\\\"\".\n+                        concat(pool.getClassName(cpx, index -> \"%s #%d\".\n+                                formatted(logger.getResourceString(\"info.invalid_cp_entry\"), index))).\n+                        concat(\"\\\"\");\n+            }\n+            if (this.methodCpx != 0) {\n+                this.name += \":\" + pool.getMethodName(this.methodCpx);\n+            }\n+        }\n+        return this.name;\n+    }\n+\n+    public EnclosingMethodData getName() {\n+        name = pool.getString(cpx, index -> \"#%d\".formatted(index));\n+        return this;\n+    }\n+}\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/EnclosingMethodData.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -0,0 +1,37 @@\n+package org.openjdk.asmtools.jdis;\n+\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+\n+import static org.openjdk.asmtools.jasm.JasmTokens.Token.THROWS;\n+import static org.openjdk.asmtools.jasm.TableFormatModel.Token.EXCEPTIONS;\n+\n+\/**\n+ * Exceptions_attribute {\n+ *     u2 attribute_name_index;\n+ *     u4 attribute_length;\n+ *     u2 number_of_exceptions;\n+ *     u2 exception_index_table[number_of_exceptions];\n+ * }\n+ *\/\n+public class ExceptionData extends ClassArrayData {\n+    private int keywordPadding = -1;\n+\n+    public ExceptionData(ClassData classData) {\n+        super(classData, THROWS);\n+        tableToken = EXCEPTIONS;\n+    }\n+\n+    public ExceptionData read(DataInputStream in, int attribute_length) throws IOException, ClassFormatError {\n+        return (ExceptionData) super.read(in, attribute_length);\n+    }\n+\n+    public ExceptionData setKeywordPadding(int keywordPadding) {\n+        this.keywordPadding = keywordPadding;\n+        return this;\n+    }\n+    @Override\n+    protected int getPrintAttributeKeyPadding() {\n+        return keywordPadding == -1  ? super.getPrintAttributeKeyPadding() : keywordPadding;\n+    }\n+}\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/ExceptionData.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import org.openjdk.asmtools.common.structure.ELocation;\n@@ -33,0 +34,5 @@\n+import java.util.List;\n+\n+import static java.lang.Math.max;\n+import static org.openjdk.asmtools.jasm.TableFormatModel.Token.SIGNATURE;\n+import static org.openjdk.asmtools.jdis.ConstantPool.TAG.*;\n@@ -37,1 +43,1 @@\n-public class FieldData extends MemberData<ClassData> {\n+public class FieldData extends MemberData<ClassData> implements Measurable {\n@@ -44,1 +50,1 @@\n-    protected int value_cpx = 0;\n+    protected int value_cpx = UNDEFINED;\n@@ -58,1 +64,2 @@\n-                    environment.warning(\"warn.one.attribute.required\", \"Signature\", \"field_info\");\n+                    environment.warning(\"warn.one.attribute.required\",\n+                            EAttribute.ATT_Signature.printValue(), ELocation.field_info.toString());\n@@ -64,3 +71,10 @@\n-                    throw new FormatError(environment.getLogger(),\n-                            \"err.invalid.attribute.length\",\n-                            EAttribute.ATT_ConstantValue.printValue(), attributeLength);\n+                    if (bestEffort) {\n+                        environment.error(\"err.invalid.attribute.length\", EAttribute.ATT_ConstantValue.printValue(), attributeLength);\n+                    } else {\n+                        throw new FormatError(environment.getLogger(),\n+                                \"err.invalid.attribute.length\", EAttribute.ATT_ConstantValue.printValue(), attributeLength);\n+                    }\n+                }\n+                if (getListOf(EAttribute.ATT_ConstantValue).size() > 1) {\n+                    environment.warning(\"warn.one.attribute.required\",\n+                            EAttribute.ATT_ConstantValue.printValue(), ELocation.field_info.toString());\n@@ -69,0 +83,9 @@\n+                if (!pool.inRange(value_cpx)) {\n+                    environment.warning(\"warn.attribute.constantvalue.incorrect\", value_cpx);\n+                } else {\n+                    if (!pool.CheckEntryType(value_cpx, CONSTANT_INTEGER, CONSTANT_FLOAT, CONSTANT_DOUBLE, CONSTANT_LONG, CONSTANT_STRING)) {\n+                        ConstantPool.TAG tag = pool.getTag(value_cpx);\n+                        String tagName = tag == null ? \"unknown\" : tag.printValue();\n+                        environment.warning(\"warn.attribute.type.incorrect\", tagName);\n+                    }\n+                }\n@@ -75,0 +98,10 @@\n+    @Override\n+    protected boolean handleUnrecognizedAttributes(DataInputStream in, int attributeNameCpx, int attributeLength) throws IOException {\n+        if (!data.pool.inRange(attributeNameCpx)) {\n+            environment.warning(\"warn.attribute.name.corrupted\", attributeNameCpx);\n+        } else {\n+            environment.warning(\"warn.attribute.name.incorrect\", attributeNameCpx);\n+        }\n+        return false;\n+    }\n+\n@@ -87,4 +120,5 @@\n-        environment.traceln(\"FieldData: name[%d]=%s type[%d]=%s%s\",\n-                name_cpx, data.pool.getString(name_cpx, index -> \"#\" + index + \"?\"),\n-                type_cpx, data.pool.getString(type_cpx, index -> \"#\" + index + \"?\"),\n-                signature != null ? signature : \"\");\n+        environment.traceln(() ->\n+                \"FieldData: name[%d]=%s type[%d]=%s%s\".formatted(\n+                        name_cpx, data.pool.getString(name_cpx, index -> \"#%d?\".formatted(index)),\n+                        type_cpx, data.pool.getString(type_cpx, index -> \"#%d?\".formatted(index)),\n+                        signature != null ? signature : \"\"));\n@@ -94,1 +128,1 @@\n-     * Prints the field data to the current output stream. called from ClassData.\n+     * Prints the field data to the current output stream called from ClassData.\n@@ -97,1 +131,2 @@\n-    public void print() throws IOException {\n+    protected void jasmPrint(int index, int size) throws IOException {\n+        boolean printSignature = signature != null && signature.isPrintable() && tableFormat;\n@@ -99,1 +134,16 @@\n-        super.printAnnotations();\n+        super.printAnnotations(visibleAnnotations, invisibleAnnotations);\n+        super.printAnnotations(visibleTypeAnnotations, invisibleTypeAnnotations);\n+        if (getListOf(EAttribute.ATT_Unrecognized).size() > 0) {\n+            List<AttrData> list = getListOf(EAttribute.ATT_Unrecognized);\n+            for (AttrData attr : list) {\n+                printIndentLn(\"\/\/ Ignored unrecognized attribute: { u2 #%d; u4 %d; u1[ %s ]; }\".\n+                        formatted(attr.getNameCpx(), attr.getLength(), attr.dataAsString()));\n+            }\n+        }\n+\n+        if (!printCPIndex && value_cpx != UNDEFINED && !pool.CheckEntryType(value_cpx, CONSTANT_INTEGER, CONSTANT_FLOAT,\n+                CONSTANT_DOUBLE, CONSTANT_LONG, CONSTANT_STRING)) {\n+            ConstantPool.TAG tag = pool.getTag(value_cpx);\n+            String tagName = tag == null ? \"unknown\" : tag.printValue();\n+            printIndentLn(\"\/\/ \".concat(environment.getInfo(\"warn.attribute.constantvalue.unrecognized\",value_cpx, tagName)));\n+        }\n@@ -107,1 +157,4 @@\n-        printVar(prefix, (value_cpx != 0) ? (\" = \").concat(data.pool.ConstantStrValue(value_cpx)) : null,\n+        int keywordPadding = max(prefix.length() - getIndentSize() * 2, SIGNATURE.parseKey().length() + getIndentSize());\n+        printVar(prefix,\n+                (value_cpx != UNDEFINED) ? getConstantValue(\" = \") : null,\n+                printSignature ? \":\" : \";\",\n@@ -109,0 +162,68 @@\n+        \/\/ print Signature if necessary\n+        if (printSignature) {\n+            signature.setKeywordPadding(keywordPadding).\n+                    incIndent().\n+                    setCommentOffset(this.getCommentOffset() - getIndentStep() * 2);\n+            signature.print();\n+        }\n+    }\n+\n+    private String getConstantValue(String prefix) {\n+        if (!printCPIndex &&\n+                value_cpx != UNDEFINED &&\n+                !pool.CheckEntryType(value_cpx, CONSTANT_INTEGER, CONSTANT_FLOAT, CONSTANT_DOUBLE, CONSTANT_LONG, CONSTANT_STRING)) {\n+            return \"\";\n+        } else {\n+            return prefix.concat(data.pool.ConstantStrValue(value_cpx));\n+        }\n+    }\n+\n+\n+    \/**\n+     * Prints the field data to the current output stream called from ClassData.\n+     *\/\n+    @Override\n+    protected void tablePrint(int index, int size) throws IOException {\n+        \/\/There are no differences between the simple (jasm) and extended (table) presentations of field info.\n+        this.jasmPrint(index, size);\n+    }\n+\n+    private String getFieldDefinitionString() {\n+        if (printCPIndex && !skipComments) {\n+            StringBuilder sb = new StringBuilder(EModifier.asKeywords(access, ClassFileContext.FIELD));\n+            \/\/ add synthetic, deprecated if necessary\n+            sb.append(getPseudoFlagsAsString());\n+            \/\/ field\n+            sb.append(JasmTokens.Token.FIELDREF.parseKey()).append(' ');\n+            sb.append('#').append(name_cpx).append(\":#\").append(type_cpx);\n+            if (signature != null && !signature.isPrintable()) {\n+                sb.append(\":#\").append(signature.getCPIndex());\n+            }\n+            if (value_cpx != UNDEFINED) {\n+                sb.append(\" = #\").append(value_cpx);\n+            }\n+            sb.append(';');\n+            return sb.toString();\n+        }\n+        return \"\";\n+    }\n+\n+    @Override\n+    public int getCommentOffset() {\n+        return Math.max(super.getCommentOffset(), this.maxSize + getIndentSize());\n+    }\n+\n+    @Override\n+    public int getPrintSize() {\n+        String line = getFieldDefinitionString();\n+        return line.length();\n+    }\n+\n+    @Override\n+    public void setMaxPrintSize(int size) {\n+        this.maxSize = size;\n+    }\n+\n+    @Override\n+    public int getMaxPrintSize() {\n+        return this.maxSize;\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/FieldData.java","additions":136,"deletions":15,"binary":false,"changes":151,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+import org.openjdk.asmtools.jasm.TableFormatModel;\n@@ -28,4 +29,1 @@\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.Formatter;\n-import java.util.function.Supplier;\n+import java.util.*;\n@@ -33,1 +31,2 @@\n-import static org.openjdk.asmtools.jdis.Options.PR.*;\n+import static java.lang.System.lineSeparator;\n+import static org.openjdk.asmtools.jdis.Options.PrintOption.*;\n@@ -35,1 +34,2 @@\n-public class Indenter implements Printable {\n+public abstract class Indenter implements Printable {\n+    public static final int UNDEFINED = -1;\n@@ -39,1 +39,2 @@\n-    public static final String INDENT_STRING =  \" \";\n+    public static final String INDENT_CHAR = \" \";\n+    public static final String INDENT_STRING = INDENT_CHAR.repeat(INDENT_STEP);\n@@ -48,1 +49,1 @@\n-    public static final int STACKMAP_TYPE_PLACEHOLDER_LENGTH = 17;\n+    public static final int STACKMAP_TYPE_PLACEHOLDER_LENGTH = 18;\n@@ -50,2 +51,22 @@\n-    public static final int COMMENT_PADDING = 16;\n-    public static final int COMMENT_OFFSET = 0;     \/\/ Initial offset that will be dynamically updated\n+    public static int TABLE_PADDING = OPERAND_PLACEHOLDER_LENGTH + INSTR_PREFIX_LENGTH + 1;\n+    public static final int COMMENT_PADDING = (Options.contains(TABLE)) ? 16 : 20;\n+    public static final int INITIAL_COMMENT_OFFSET = 0;     \/\/ Initial offset that will be dynamically updated\n+\n+    public static final int CIRCULAR_COMMENT_OFFSET = 25;\n+\n+    protected final boolean tableFormat = Options.contains(TABLE);\n+    protected final boolean sysInfo = Options.contains(SYSINFO);\n+    protected final boolean detailedOutput = Options.contains(DETAILED_Output);\n+    protected final boolean extraDetailedOutput = Options.contains(EXTRA_DETAILED_Output);\n+    protected final boolean bestEffort = Options.contains(BEST_EFFORT);\n+\n+    \/\/ Discard printing attributes\n+    protected final boolean dropSourceFile = Options.contains(DROP_Source);\n+    protected final boolean dropClasses = Options.contains(DROP_Classes);\n+    protected final boolean dropSignatures = Options.contains(DROP_Signatures);\n+    protected final boolean dropCharacterRange = Options.contains(DROP_CharacterRange);\n+\n+    \/\/ Extra printing instruction\n+    protected final boolean printLocalVariables = Options.contains(LOCAL_VARIABLE_All, LOCAL_VARIABLE_Vars);\n+    protected final boolean printLocalVariableTypes = Options.contains(LOCAL_VARIABLE_All, LOCAL_VARIABLE_Types);\n+    protected final boolean printLineNumber = Options.contains(LINE_NUMBER_TABLE_Numbers, LINE_NUMBER_TABLE_Lines, LINE_NUMBER_TABLE_Table, TABLE);\n@@ -54,8 +75,9 @@\n-    protected final boolean printCPIndex = Options.contains(CPX);\n-    protected final boolean skipComments = Options.contains(NC);\n-    protected final boolean printProgramCounter = Options.contains(PC);\n-    protected final boolean printLabelAsIdentifiers = Options.contains(LABS) && !printProgramCounter;\n-    protected final boolean printConstantPool = Options.contains(CP);\n-    protected final boolean printSourceLines = Options.contains(SRC);\n-    protected final boolean printLocalVars = Options.contains(VAR);\n-    protected final boolean printLineTable = Options.contains(LNT);\n+    protected final boolean printCPIndex = Options.contains(CP_INDEX);\n+    protected final boolean skipComments = Options.contains(NO_COMMENTS);\n+    protected final boolean printProgramCounter = Options.contains(PRINT_BCI);\n+    protected final boolean printLabelAsIdentifiers = Options.contains(LABELS) && !printProgramCounter;\n+    protected final boolean printConstantPool = Options.contains(CONSTANT_POOL);\n+    protected final boolean printSourceLines = Options.contains(LINE_NUMBER_TABLE_Lines);\n+    protected final boolean printLineTable = Options.contains(LINE_NUMBER_TABLE_Table);\n+    protected final boolean printLineTableLines = Options.contains(LINE_NUMBER_TABLE_Lines);\n+    protected final boolean printLineTableNumbers = Options.contains(LINE_NUMBER_TABLE_Numbers);\n@@ -64,0 +86,10 @@\n+    protected boolean printable = true;\n+    \/\/ indicated that an entity has a size in a collection\n+    protected boolean hasSize = false;\n+    protected TableFormatModel.Token tableToken = TableFormatModel.Token.NOT_SUPPORTED;\n+    \/\/\n+    \/\/ the maximum size of the same elements in the collection to calculate printing bounds\n+    \/\/ applies only to entities that implement Measurable interface.\n+    protected int maxSize = 0;\n+    protected boolean maxSizeCalculated = false;\n+    \/\/\n@@ -66,1 +98,3 @@\n-    private int commentOffset = COMMENT_OFFSET;\n+    private final String LabelPrefix = printLabelAsIdentifiers ? \"L\" : \"\";\n+    \/\/\n+    protected int commentOffset = INITIAL_COMMENT_OFFSET;\n@@ -70,0 +104,3 @@\n+    \/**\n+     * If a table format is supported and the tool option TABLE is set, prints an object as a table entry.\n+     *\/\n@@ -71,1 +108,18 @@\n-        throw new RuntimeException(\"not yet implemented\");\n+        if (isTableOutput()) {\n+            tablePrint();\n+        } else {\n+            jasmPrint();\n+        }\n+    }\n+\n+    public boolean isTableOutput() {\n+        return this.tableFormatSupported() && tableFormat;\n+    }\n+\n+    @Override\n+    public boolean tableFormatSupported() {\n+        return tableToken.isExtendedPrintingSupported();\n+    }\n+\n+    protected String getTitle() {\n+        throw new NotImplementedException(this.getClass().getName());\n@@ -74,0 +128,25 @@\n+    protected void tablePrint() throws IOException {\n+        throw new NotImplementedException(this.getClass().getName());\n+    }\n+\n+    protected void jasmPrint() throws IOException {\n+        throw new NotImplementedException(this.getClass().getName());\n+    }\n+\n+    protected void tablePrint(int index, int size) throws IOException {\n+        throw new NotImplementedException(this.getClass().getName());\n+    }\n+\n+    protected void jasmPrint(int index, int size) throws IOException {\n+        throw new NotImplementedException(this.getClass().getName());\n+    }\n+\n+    public void print(int index, int size) throws IOException {\n+        if (isTableOutput()) {\n+            tablePrint(index, size);\n+        } else {\n+            jasmPrint(index, size);\n+        }\n+    }\n+\n+\n@@ -83,1 +162,5 @@\n-        this.fillString = INDENT_STRING;\n+        this.fillString = INDENT_CHAR;\n+    }\n+\n+    protected String getLabelPrefix() {\n+        return LabelPrefix;\n@@ -111,1 +194,2 @@\n-        toolOutput.prints(Indent(s));\n+        String str = Indent(s);\n+        toolOutput.prints(str);\n@@ -135,0 +219,5 @@\n+    public Indenter printIndentPadLeft(String str, int totalWidth) {\n+        toolOutput.prints(IndentPadLeft(str, totalWidth));\n+        return this;\n+    }\n+\n@@ -155,2 +244,2 @@\n-    public Indenter println(Supplier<Boolean> isPrint) {\n-        if(isPrint.get()) {\n+    public Indenter println(boolean isPrint) {\n+        if (isPrint) {\n@@ -162,1 +251,0 @@\n-\n@@ -169,2 +257,1 @@\n-        length += step;\n-        return this;\n+        return incIndent(1);\n@@ -174,1 +261,10 @@\n-        length -= step;\n+        return decIndent(1);\n+    }\n+\n+    public Indenter incIndent(int count) {\n+        length += step * count;\n+        return this;\n+    }\n+\n+    public Indenter decIndent(int count) {\n+        length -= step * count;\n@@ -189,4 +285,0 @@\n-    public Indenter resetIndent() {\n-        return initIndent(INDENT_OFFSET);\n-    }\n-\n@@ -197,1 +289,1 @@\n-        this.fillString = INDENT_STRING;\n+        this.fillString = INDENT_CHAR;\n@@ -207,1 +299,1 @@\n-        return String.join(\"\", Collections.nCopies(n, this.fillString));\n+        return String.join(\"\", Collections.nCopies(n < 0 ? 0 : n, this.fillString));\n@@ -317,0 +409,124 @@\n+\n+    \/**\n+     * Calculates offsets for Class's attributes:\n+     * <p>\n+     * 12AAAAAAAAAAAAAAAAAAAAAAAAAAACCCCCCCCCCCCCCCCC\n+     * SourceFile                 #126;             \/\/ TestMethods0.java\n+     * 12       - Indent\n+     * AAA.A   - getPrintAttributeKeyPadding()\n+     * CCC.C   - getPrintAttributeCommentPadding()\n+     *\n+     * @return\n+     *\/\n+    protected int getPrintAttributeKeyPadding() {\n+        int instructionOffset = (printProgramCounter) ? PROGRAM_COUNTER_PLACEHOLDER_LENGTH : INSTR_PREFIX_LENGTH;\n+        int attributeOffset = (printProgramCounter) ? instructionOffset : (instructionOffset - getIndentStep());\n+        return instructionOffset + attributeOffset + OPERAND_PLACEHOLDER_LENGTH - getIndentSize() * 2;\n+    }\n+\n+    protected int getPrintAttributeCommentPadding() {\n+        return getCommentOffset() - getPrintAttributeKeyPadding();\n+    }\n+\n+    public Indenter setHasSize(boolean hasSize) {\n+        this.hasSize = hasSize;\n+        return this;\n+    }\n+\n+    protected final static Map<Integer, List<Integer>> InvokeDynamicBreakPositions = Map.of(\n+            0, List.of(2, 3),\n+            1, List.of(3),\n+            2, List.of(3));\n+    protected final static Map<Integer, List<Integer>> LdwBreakPositions = Map.of(\n+            0, List.of(3),\n+            1, List.of(3),\n+            2, List.of(3));\n+    protected final static Map<Integer, List<Integer>> BootstrapMethodBreakPositions = Map.of(0, List.of(2, 3));\n+    protected final static Map<Integer, List<Integer>> BootstrapArgumentsBreakPositions = Map.of(0, List.of(3));\n+\n+    \/**\n+     * Formats invokedynamic\/ldc dynamic operand line and Bootstrap arguments\n+     *\n+     * @param str            non-formatted operand line\n+     * @param offset         indent for new lines\n+     * @param prefix         prefix placed upfront new lines\n+     * @param breakPositions numbers where after \":\" a lineSeparator is added to wrap a very long operand lines\n+     * @return formatted operand line\n+     *\/\n+    protected String formatOperandLine(String str, int offset, String prefix, Map<Integer, List<Integer>> breakPositions) {\n+        StringTokenizer st = new StringTokenizer(str, \":\\\"{}\\\\\" + ARGUMENT_DELIMITER + LINE_SPLITTER, true);\n+        StringBuilder sb = new StringBuilder(80);\n+        boolean processTokens = true;\n+        String prevToken = \"\";\n+        int nItems = 0, nLevel = 0;\n+        while (st.hasMoreTokens()) {\n+            String token = st.nextToken();\n+            List<Integer> breaks = breakPositions.getOrDefault(nLevel, Collections.emptyList());\n+            switch (token) {\n+                case \":\":\n+                    sb.append(token);\n+                    if (processTokens) {\n+                        nItems++;\n+                        if (breaks.contains(nItems)) {\n+                            sb.append(lineSeparator()).append(nCopies(offset)).append(prefix).\n+                                    append(nCopies(getIndentStep() * nLevel));\n+                        }\n+                    }\n+                    break;\n+                case \"}\":\n+                    if (processTokens) {\n+                        nLevel = (nLevel == 0) ? nLevel : nLevel - 1;\n+                        nItems = 0;\n+                        sb.append(lineSeparator()).append(nCopies(offset)).\n+                                append(prefix).append(nCopies(getIndentStep() * nLevel)).append(token);\n+                    } else\n+                        sb.append(token);\n+                    break;\n+                case \"{\":\n+                    if (processTokens) {\n+                        nLevel++;\n+                        nItems = 0;\n+                        sb.append(\" {\").append(lineSeparator()).append(nCopies(offset)).\n+                                append(prefix).append(nCopies(getIndentStep() * nLevel));\n+                    } else {\n+                        sb.append(token);\n+                    }\n+                    break;\n+                case \"\\\"\":\n+                    if (!prevToken.equals(\"\\\\\"))\n+                        processTokens = !processTokens;\n+                    sb.append(token);\n+                    break;\n+                case ARGUMENT_DELIMITER:\n+                    if (processTokens) {\n+                        sb.append(',').append(lineSeparator()).append(nCopies(offset)).\n+                                append(prefix).append(nCopies(getIndentStep() * nLevel));\n+                        nItems = 0;\n+                    } else {\n+                        sb.append(ARGUMENT_DELIMITER);\n+                    }\n+                    break;\n+                case LINE_SPLITTER:\n+                    if (processTokens) {\n+                        sb.append(lineSeparator()).append(nCopies(offset)).\n+                                append(prefix).append(nCopies(getIndentStep() * nLevel));\n+                    } else {\n+                        sb.append(ARGUMENT_DELIMITER);\n+                    }\n+                    break;\n+                default:\n+                    sb.append(token);\n+                    break;\n+            }\n+            prevToken = token;\n+        }\n+        return sb.toString();\n+    }\n+\n+    public static class NotImplementedException extends RuntimeException {\n+        private static final long serialVersionUID = 1L;\n+\n+        public NotImplementedException(String where) {\n+            super(\"\".formatted(where));\n+        }\n+    }\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/Indenter.java","additions":251,"deletions":35,"binary":false,"changes":286,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-import org.openjdk.asmtools.jasm.JasmTokens;\n@@ -32,0 +31,1 @@\n+import static java.lang.Math.max;\n@@ -33,0 +33,2 @@\n+import static org.openjdk.asmtools.jasm.JasmTokens.Token.INNERCLASS;\n+import static org.openjdk.asmtools.jasm.TableFormatModel.Token.INNER_CLASSES;\n@@ -37,3 +39,1 @@\n-class InnerClassData extends Indenter {\n-\n-    ClassData cls;\n+public class InnerClassData extends Element<ClassData> implements Measurable {\n@@ -45,3 +45,20 @@\n-    public InnerClassData(ClassData cls) {\n-        super(cls.toolOutput);\n-        this.cls = cls;\n+    private int calculatedCommentOffset = 0;\n+    private String jasmPrefix = Indent(PadRight(INNERCLASS.parseKey(), TABLE_PADDING));\n+\n+    public InnerClassData(ClassData classData, Container<InnerClassData, ClassData> container) {\n+        super(classData, container);\n+        this.tableToken = INNER_CLASSES;\n+    }\n+\n+    @Override\n+    public int getCommentOffset() {\n+        if (this.calculatedCommentOffset == 0) {\n+            if (isTableOutput()) {\n+                this.calculatedCommentOffset = container.getCommentOffset() - getIndentStep();\n+                this.calculatedCommentOffset = max(this.calculatedCommentOffset, getMaxPrintSize());\n+            } else {\n+                this.calculatedCommentOffset = container.getCommentOffset() - getIndentStep();\n+                calculatedCommentOffset = max(this.calculatedCommentOffset, getMaxPrintSize() + jasmPrefix.length());\n+            }\n+        }\n+        return calculatedCommentOffset;\n@@ -58,3 +75,2 @@\n-    public void print() throws IOException {\n-        String prefix = EModifier.asKeywords(access, ClassFileContext.INNER_CLASS).\n-                concat(JasmTokens.Token.INNERCLASS.parseKey()).concat(\" \");\n+    public void jasmPrint(int index, int size) throws IOException {\n+        String line = jasmPrefix.concat(EModifier.asKeywords(access, ClassFileContext.INNER_CLASS));\n@@ -62,0 +78,10 @@\n+            line = getClassDefinitionString(line);\n+            if (skipComments) {\n+                print(line);\n+            } else {\n+                print(PadRight(line, this.getCommentOffset())).print(\" \/\/ \");\n+            }\n+        } else {\n+            print(line);\n+        }\n+        if (!printCPIndex || (printCPIndex && !skipComments)) {\n@@ -63,1 +89,1 @@\n-                prefix = prefix.concat(\"#\" + inner_name_index + \" = \");\n+                print(owner.pool.getName(inner_name_index) + \" = \");\n@@ -65,6 +91,19 @@\n-                prefix = prefix.concat(\"#\" + inner_class_info_index);\n-            if (outer_class_info_index != 0) {\n-                prefix = prefix.concat(\" of #\" + outer_class_info_index);\n-            }\n-            prefix = prefix.concat(\";\");\n-            if( skipComments ) {\n+                print(owner.pool.ConstantStrValue(inner_class_info_index));\n+            if (outer_class_info_index != 0)\n+                print(format(\" of %s\", owner.pool.ConstantStrValue(outer_class_info_index)));\n+            println(owner.printCPIndex && !skipComments ? \"\" : \";\");\n+        } else {\n+            println();\n+        }\n+    }\n+\n+    @Override\n+    public void tablePrint(int index, int size) throws IOException {\n+        if (index == 0) {\n+            printIndentLn(\"%s {\".formatted(INNERCLASS.alias()));\n+        }\n+        incIndent();\n+        String prefix = EModifier.asKeywords(access, ClassFileContext.INNER_CLASS);\n+        if (printCPIndex) {\n+            prefix = getClassDefinitionString(prefix);\n+            if (skipComments) {\n@@ -73,1 +112,1 @@\n-                printIndentPadRight(prefix, getCommentOffset() - 1).print(\" \/\/ \");\n+                printIndentPadRight(prefix, this.getCommentOffset()).print(\" \/\/ \");\n@@ -78,1 +117,2 @@\n-        if( !printCPIndex || (printCPIndex && !skipComments) ) {\n+\n+        if (!printCPIndex || (printCPIndex && !skipComments)) {\n@@ -80,1 +120,1 @@\n-                print(cls.pool.getName(inner_name_index) + \" = \");\n+                print(\"%s = \".formatted(owner.pool.getName(inner_name_index)));\n@@ -82,1 +122,1 @@\n-                print(cls.pool.ConstantStrValue(inner_class_info_index));\n+                print(owner.pool.ConstantStrValue(inner_class_info_index));\n@@ -84,2 +124,2 @@\n-                print(format(\" of %s\", cls.pool.ConstantStrValue(outer_class_info_index)));\n-            println(cls.printCPIndex && !skipComments ? \"\" : \";\");\n+                print(format(\" of %s\", owner.pool.ConstantStrValue(outer_class_info_index)));\n+            println(owner.printCPIndex && !skipComments ? \"\" : \";\");\n@@ -89,0 +129,31 @@\n+        decIndent();\n+        if (index == size - 1) {\n+            printIndentLn(\"}\");\n+        }\n+    }\n+\n+    private String getClassDefinitionString(String line) {\n+        if (inner_name_index != 0)\n+            line = line.concat(\"#%d = \".formatted(inner_name_index));\n+        if (inner_class_info_index != 0)\n+            line = line.concat(\"#%d\".formatted(inner_class_info_index));\n+        if (outer_class_info_index != 0) {\n+            line = line.concat(\" of #%d\".formatted(outer_class_info_index));\n+        }\n+        return line.concat(\";\");\n+    }\n+\n+    @Override\n+    public int getPrintSize() {\n+        String line = getClassDefinitionString(EModifier.asKeywords(access, ClassFileContext.INNER_CLASS));\n+        return line.length() + 1;\n+    }\n+\n+    @Override\n+    public void setMaxPrintSize(int size) {\n+        this.maxSize = size;\n+    }\n+\n+    @Override\n+    public int getMaxPrintSize() {\n+        return this.maxSize;\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/InnerClassData.java","additions":95,"deletions":24,"binary":false,"changes":119,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-import org.openjdk.asmtools.common.structure.StackMap;\n@@ -28,1 +27,0 @@\n-import java.io.IOException;\n@@ -30,1 +28,1 @@\n-import java.util.Optional;\n+import java.util.List;\n@@ -35,0 +33,1 @@\n+import static org.openjdk.asmtools.jasm.JasmTokens.Token.FRAMETYPE;\n@@ -36,1 +35,0 @@\n-import static org.openjdk.asmtools.jdis.StackMapData.EAttributeType.STACKMAPTABLE;\n@@ -42,1 +40,0 @@\n-\n@@ -45,2 +42,4 @@\n-    ArrayList<CodeData.LocVarData> vars;\n-    ArrayList<CodeData.LocVarData> endVars;\n+    ArrayList<LocalVariableData> vars;\n+    ArrayList<LocalVariableTypeData> types;\n+    ArrayList<LocalVariableData> endVars;\n+    ArrayList<LocalVariableTypeData> endTypes;\n@@ -50,0 +49,1 @@\n+    List<StackMapData> stackMapWrappers;\n@@ -52,0 +52,1 @@\n+    private int attributeOffset;\n@@ -58,14 +59,0 @@\n-    void addVar(CodeData.LocVarData var) {\n-        if (vars == null) {\n-            vars = new ArrayList<>(4);\n-        }\n-        vars.add(var);\n-    }\n-\n-    void addEndVar(CodeData.LocVarData endVar) {\n-        if (endVars == null) {\n-            endVars = new ArrayList<>(4);\n-        }\n-        endVars.add(endVar);\n-    }\n-\n@@ -93,5 +80,22 @@\n-    public void printEnds(int shift) throws IOException {\n-\/\/ prints additional information for instruction:\n-\/\/  end of local variable and trap scopes;\n-        if ((endVars != null) && data.printLocalVars) {\n-            print(enlargedIndent(PadRight(Opcode.opc_endvar.parseKey(), STACKMAP_TYPE_PLACEHOLDER_LENGTH + 1), shift));\n+    public void printBegins(int shift) {\n+        this.attributeOffset = shift;\n+        \/\/ Prints additional information for instruction:\n+        \/\/ source line number;\n+        printInlinedLineNumber();\n+        \/\/ begin of exception handler;\n+        printBeginOfExceptionHandlers(shift);\n+        \/\/ begin of trap scores;\n+        printBeginOfTrapScores(shift);\n+        \/\/ begin of locVar and locVarTypes\n+        printBeginOfLocVars(shift);\n+    }\n+\n+    public void printEnds(int shift) {\n+        \/\/ Prints additional information for instruction:\n+        \/\/ end of local variables, local variable types and trap scopes;\n+        if (endTypes != null && !tableFormat) {\n+            print(enlargedIndent(PadRight(Opcode.opc_endtype.parseKey(), STACKMAP_TYPE_PLACEHOLDER_LENGTH), shift));\n+            println(endTypes.stream().map(ev -> Short.toString(ev.slot)).collect(Collectors.joining(\",\")) + \";\");\n+        }\n+        if (endVars != null && !tableFormat) {\n+            print(enlargedIndent(PadRight(Opcode.opc_endvar.parseKey(), STACKMAP_TYPE_PLACEHOLDER_LENGTH), shift));\n@@ -101,1 +105,1 @@\n-            print(enlargedIndent(PadRight(Opcode.opc_endtry.parseKey(), STACKMAP_TYPE_PLACEHOLDER_LENGTH + 1), shift));\n+            print(enlargedIndent(PadRight(Opcode.opc_endtry.parseKey(), STACKMAP_TYPE_PLACEHOLDER_LENGTH), shift));\n@@ -106,7 +110,197 @@\n-    public void printBegins(int shift) {\n-\/\/ prints additional information for instruction:\n-\/\/ source line number;\n-\/\/ start of exception handler;\n-\/\/ begin of locVar and trap scopes;\n-        boolean eitherOpt = data.printLineTable || data.printSourceLines;\n-        boolean bothOpt = data.printLineTable && data.printSourceLines;\n+    \/**\n+     * @param shift how is shifted a list of verification types of locals_map\/stack_map\n+     * @return true if something is printed\n+     *\/\n+    public boolean printStackMap_Table(int shift) {\n+        \/\/ will the stackmap(table) be printed as table if the table is chosen?\n+        if (tableFormat || (stackMapEntry == null && stackMapWrappers == null)) {\n+            return false;\n+        } else if (stackMapEntry != null) {\n+            return stackMapEntry.belongsToStackMapTable() ? printStackMapTable(shift) : printStackMap(shift);\n+        } else {\n+            return stackMapWrappers.getFirst().belongsToStackMapTable() ? printStackMapTable(shift) : printStackMap(shift);\n+        }\n+    }\n+\n+    private boolean printStackMapTable(int shift) {\n+        int mapShift = getCommentOffset() - STACKMAP_TYPE_PLACEHOLDER_LENGTH;\n+        boolean wrapped = stackMapWrappers != null;\n+        String opCodeName = Opcode.opc_stack_frame_type.parseKey();\n+        String prefix = \"\";\n+        String listPrefix = INDENT_STRING;\n+        \/\/ print wrappers if found\n+        if (wrapped) {\n+            for (int i = 0; i < stackMapWrappers.size(); i++) {\n+                StackMapData smd = stackMapWrappers.get(i);\n+                if (i > 0) {\n+                    opCodeName = Opcode.opc_frame_type.parseKey();\n+                    prefix = INDENT_STRING;\n+                    listPrefix = prefix + INDENT_STRING;\n+                }\n+                printPadRight(prefix + opCodeName, STACKMAP_TYPE_PLACEHOLDER_LENGTH);\n+                if (printCPIndex && !skipComments) {\n+                    print(PadRight(smd.stackEntryType.tagName() + \";\", mapShift)).\n+                            println(\" \/\/ %s %s\".formatted(FRAMETYPE.parseKey(), smd.stackEntryTypeValue));\n+                } else {\n+                    println(smd.stackEntryType.tagName() + \";\");\n+                }\n+                int[] unsetFields = smd.unsetFields;\n+                printFields(unsetFields, shift);\n+                if ((unsetFields == null) || (unsetFields.length == 0)) {\n+                    println(this.enlargedIndent(listPrefix + Opcode.opc_unset_fields.parseKey() + \";\", shift));\n+                }\n+                print(enlargedIndent(attributeOffset));\n+            }\n+        }\n+        opCodeName = Opcode.opc_stack_frame_type.parseKey();\n+        \/\/ print StackMap entry\n+        if (stackMapEntry != null) {\n+            if (wrapped) {\n+                opCodeName = Opcode.opc_frame_type.parseKey();\n+                prefix += INDENT_STRING;\n+\/\/              println(\"{\").print(enlargedIndent(attributeOffset));\n+            }\n+            listPrefix = prefix + INDENT_STRING;;\n+            printPadRight(prefix + opCodeName, STACKMAP_TYPE_PLACEHOLDER_LENGTH);\n+            if (printCPIndex && !skipComments) {\n+                print(PadRight(stackMapEntry.stackEntryType.tagName() + \";\", mapShift)).\n+                        println(\" \/\/ %s %s\".formatted(FRAMETYPE.parseKey(), stackMapEntry.stackEntryTypeValue));\n+            } else {\n+                println(stackMapEntry.stackEntryType.tagName() + \";\");\n+            }\n+\n+            int[] lockMap = stackMapEntry.lockMap;\n+            if ((lockMap == null) || (lockMap.length == 0)) {\n+                if (stackMapEntry.stackEntryType.hasLocalMap()) {\n+                    println(this.enlargedIndent(listPrefix + Opcode.opc_locals_map.parseKey() + \";\", shift));\n+                }\n+            } else {\n+                mapShift = printEntries(stackMapEntry.getMapListAsString(lockMap, \"\"),\n+                        listPrefix + Opcode.opc_locals_map.parseKey(), shift, mapShift);\n+            }\n+\n+            int[] stackMap = stackMapEntry.stackMap;\n+            if ((stackMap == null) || (stackMap.length == 0)) {\n+                if (stackMapEntry.stackEntryType.hasStackMap()) {\n+                    println(this.enlargedIndent(listPrefix + Opcode.opc_stack_map.parseKey() + \";\", shift));\n+                }\n+            } else {\n+                printEntries(stackMapEntry.getMapListAsString(stackMap, \"\"),\n+                        listPrefix + Opcode.opc_stack_map.parseKey(), shift, mapShift);\n+            }\n+\/\/        if (wrapped) {\n+\/\/            println(enlargedIndent(attributeOffset) + \"}\");\n+\/\/        }\n+        }\n+        return stackMapWrappers != null || stackMapEntry != null;\n+    }\n+\n+    private boolean printStackMap(int shift) {\n+        int mapShift = getCommentOffset() - STACKMAP_TYPE_PLACEHOLDER_LENGTH;\n+        printPadRight(Opcode.opc_stack_map_frame.parseKey() + \";\", STACKMAP_TYPE_PLACEHOLDER_LENGTH);\n+        if (printCPIndex && !skipComments) {\n+            print(PadRight(\" \", mapShift)).println(\" \/\/ offset \" + stackMapEntry.frame_pc);\n+        } else {\n+            println();\n+        }\n+        mapShift = printEntries(stackMapEntry.getMapListAsString(stackMapEntry.lockMap, \"\"),\n+                Opcode.opc_locals_map.parseKey(), shift, mapShift);\n+        printEntries(stackMapEntry.getMapListAsString(stackMapEntry.stackMap, \"\"),\n+                Opcode.opc_stack_map.parseKey(), shift, mapShift);\n+        return true;\n+    }\n+\n+    private void printFields(int[] unsetFields, int shift) {\n+        int mapShift = getCommentOffset() - STACKMAP_TYPE_PLACEHOLDER_LENGTH;\n+        if (unsetFields != null && (unsetFields.length > 0)) {\n+            final int limit = unsetFields.length - 1;\n+            Pair<List<String>, List<String>> line = stackMapEntry.getFieldListAsString(unsetFields);\n+            String left = line.first.stream().collect(Collectors.joining(\", \")).concat(\";\");\n+            String right = line.second.stream().collect(Collectors.joining(\", \")).concat(\";\");\n+            String title = enlargedIndent(PadRight(INDENT_STRING + Opcode.opc_unset_fields.parseKey(), STACKMAP_TYPE_PLACEHOLDER_LENGTH), shift);\n+            print(title);\n+            \/\/ empties the title to use it as indent.\n+            title = nCopies(title.length());\n+            if (printCPIndex) {\n+                if (skipComments) {\n+                    println(left);\n+                } else {\n+                    if (limit == 0) {\n+                        print(PadRight(left, mapShift)).println(\" \/\/ \" + right);\n+                    } else {\n+                        print(PadRight(line.first.get(0).concat(\",\"), mapShift)).println(\" \/\/ \" + line.second.get(0).concat(\",\"));\n+                        for (int i = 1; i <= limit; i++) {\n+                            String delim = i == limit ? \";\" : \",\";\n+                            String id = line.first.get(i).concat(delim);\n+                            String field = line.second.get(i).concat(delim);\n+                            print(title).print(PadRight(id, mapShift)).println(\" \/\/ \" + field);\n+                        }\n+                    }\n+                }\n+            } else {\n+                if (limit == 0) {\n+                    println(right);\n+                } else {\n+                    println(line.second.getFirst().concat(\",\"));\n+                    for (int i = 1; i <= limit; i++) {\n+                        String delim = i == limit ? \";\" : \",\";\n+                        String field = line.second.get(i).concat(delim);\n+                        print(title).println(field);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+\n+    private int printEntries(Pair<String, String> entriesLine, String title, int shift, int mapShift) {\n+        if (entriesLine != null) {\n+            print(this.enlargedIndent(PadRight(title, STACKMAP_TYPE_PLACEHOLDER_LENGTH), shift));\n+            if (printCPIndex) {\n+                if (skipComments) {\n+                    println(entriesLine.first);\n+                } else {\n+                    print(PadRight(entriesLine.first, mapShift));\n+                    mapShift = max(mapShift, entriesLine.first.length());\n+                    print(\" \/\/ \");\n+                }\n+            }\n+            if (!printCPIndex || (printCPIndex && !skipComments)) {\n+                println(entriesLine.second);\n+            }\n+        }\n+        return mapShift;\n+    }\n+\n+    void addVar(LocalVariableData var) {\n+        if (vars == null) {\n+            vars = new ArrayList<>(4);\n+        }\n+        vars.add(var);\n+    }\n+\n+    void addType(LocalVariableTypeData type) {\n+        if (types == null) {\n+            types = new ArrayList<>(4);\n+        }\n+        types.add(type);\n+    }\n+\n+\n+    void addEndType(LocalVariableTypeData endType) {\n+        if (endTypes == null) {\n+            endTypes = new ArrayList<>(4);\n+        }\n+        endTypes.add(endType);\n+    }\n+\n+    void addEndVar(LocalVariableData endVar) {\n+        if (endVars == null) {\n+            endVars = new ArrayList<>(4);\n+        }\n+        endVars.add(endVar);\n+    }\n+\n+    private void printInlinedLineNumber() {\n+        boolean eitherOpt = data.printLineTableNumbers || data.printLineTableLines;\n+        boolean bothOpt = data.printLineTableNumbers && data.printLineTableLines;\n@@ -118,1 +312,1 @@\n-            } else if (data.printLineTable) {\n+            } else if (data.printLineTableNumbers) {\n@@ -120,1 +314,1 @@\n-            } else if (data.printSourceLines) {\n+            } else if (data.printLineTableLines) {\n@@ -126,0 +320,1 @@\n+    }\n@@ -127,0 +322,1 @@\n+    private void printBeginOfExceptionHandlers(int shift) {\n@@ -129,1 +325,1 @@\n-                print(this.enlargedIndent(PadRight(Opcode.opc_catch.parseKey(), STACKMAP_TYPE_PLACEHOLDER_LENGTH + 1), shift));\n+                print(this.enlargedIndent(PadRight(Opcode.opc_catch.parseKey(), STACKMAP_TYPE_PLACEHOLDER_LENGTH), shift));\n@@ -131,1 +327,1 @@\n-                    if( skipComments ) {\n+                    if (skipComments) {\n@@ -135,1 +331,1 @@\n-                                getCommentOffset() - STACKMAP_TYPE_PLACEHOLDER_LENGTH - getIndentStep()));\n+                                getCommentOffset() - STACKMAP_TYPE_PLACEHOLDER_LENGTH));\n@@ -143,0 +339,1 @@\n+    }\n@@ -144,0 +341,1 @@\n+    private void printBeginOfTrapScores(int shift) {\n@@ -145,1 +343,1 @@\n-            print(this.enlargedIndent(PadRight(Opcode.opc_try.parseKey(), STACKMAP_TYPE_PLACEHOLDER_LENGTH + 1), shift));\n+            print(this.enlargedIndent(PadRight(Opcode.opc_try.parseKey(), STACKMAP_TYPE_PLACEHOLDER_LENGTH), shift));\n@@ -148,0 +346,1 @@\n+    }\n@@ -149,3 +348,4 @@\n-        if ((vars != null) && data.printLocalVars) {\n-            for (CodeData.LocVarData line : vars) {\n-                print(this.enlargedIndent(PadRight(Opcode.opc_var.parseKey(), STACKMAP_TYPE_PLACEHOLDER_LENGTH + 1), shift));\n+    private void printBeginOfLocVars(int shift) {\n+        if ((vars != null) && !tableFormat) {\n+            for (LocalVariableData line : vars) {\n+                print(this.enlargedIndent(PadRight(Opcode.opc_var.parseKey(), STACKMAP_TYPE_PLACEHOLDER_LENGTH), shift));\n@@ -153,1 +353,1 @@\n-                    if( skipComments ) {\n+                    if (skipComments) {\n@@ -157,1 +357,1 @@\n-                                getCommentOffset() - STACKMAP_TYPE_PLACEHOLDER_LENGTH - getIndentStep()));\n+                                getCommentOffset() - STACKMAP_TYPE_PLACEHOLDER_LENGTH));\n@@ -165,30 +365,10 @@\n-    }\n-\n-    public Pair<String, String> getMapListAsString(int[] map) {\n-        StringBuilder left = new StringBuilder();\n-        StringBuilder right = new StringBuilder();\n-        for (int k = 0; k < map.length; k++) {\n-            int fullMapType = map[k];\n-            int mtVal = fullMapType & 0xFF;\n-            StackMap.VerificationType mapVerificationType = StackMap.getVerificationType(mtVal,\n-                    Optional.of((s)-> environment.printErrorLn(s)));\n-            String prefix = k == 0 ? \"\" : \" \";\n-            int argument = fullMapType >> 8;\n-            switch (mapVerificationType) {\n-                case ITEM_Object -> {\n-                    if (data.printCPIndex) {\n-                        left.append(prefix).append(\"#\").append(argument);\n-                    }\n-                    right.append(prefix).append(data.pool.ConstantStrValue(argument));\n-                }\n-                case ITEM_NewObject -> {\n-                    if (data.printCPIndex) {\n-                        left.append(prefix).append(mtVal);\n-                        left.append(\" \").append(data.lP).append(argument);\n-                    }\n-                    right.append(prefix).append(mapVerificationType.printName());\n-                    right.append(\" \").append(data.lP).append(argument);\n-                }\n-                default -> {\n-                    if (data.printCPIndex) {\n-                        left.append(prefix).append(mtVal);\n+        if (types != null && !tableFormat) {\n+            for (LocalVariableTypeData type : types) {\n+                print(this.enlargedIndent(PadRight(Opcode.opc_type.parseKey(), STACKMAP_TYPE_PLACEHOLDER_LENGTH), shift));\n+                if (printCPIndex) {\n+                    if (skipComments) {\n+                        println(\"%d #%d:#%d;\", type.slot, type.name_cpx, type.sig_cpx);\n+                    } else {\n+                        print(PadRight(format(\"%d #%d:#%d;\", type.slot, type.name_cpx, type.sig_cpx),\n+                                getCommentOffset() - STACKMAP_TYPE_PLACEHOLDER_LENGTH));\n+                        println(\" \/\/ %s:%s\", data.pool.getName(type.name_cpx), data.pool.getName(type.sig_cpx));\n@@ -196,66 +376,0 @@\n-                    right.append(prefix).append(mapVerificationType.printName());\n-                }\n-            }\n-            if (data.printCPIndex) {\n-                left.append((k == (map.length - 1) ? ';' : ','));\n-            }\n-            right.append((k == (map.length - 1) ? ';' : ','));\n-        }\n-        return new Pair<>(left.toString(), right.toString());\n-    }\n-\n-    \/**\n-     * @param shift how are shifted a list of verification types of locals_map\/stack_map\n-     * @return true if something is printed\n-     *\/\n-    public boolean printStackMap(int shift) {\n-        if (stackMapEntry == null) {\n-            return false;\n-        }\n-        boolean printed = false;\n-        int mapShift = getCommentOffset() - STACKMAP_TYPE_PLACEHOLDER_LENGTH - getIndentStep();\n-        if (stackMapEntry.stackFrameType != null) {\n-            printPadRight(Opcode.opc_stack_frame_type.parseKey(), STACKMAP_TYPE_PLACEHOLDER_LENGTH + 1);\n-            if( printCPIndex && !skipComments ) {\n-                print(PadRight(stackMapEntry.stackFrameType.tagName() + \";\", mapShift)).\n-                        println(\" \/\/ frame_type \" + stackMapEntry.stackFrameTypeValue);\n-            } else {\n-                println(stackMapEntry.stackFrameType.tagName() + \";\");\n-            }\n-            printed = true;\n-        }\n-        int[] map = stackMapEntry.lockMap;\n-        if ((map != null) && (map.length > 0)) {\n-            Pair<String, String> line = getMapListAsString(map);\n-            if (stackMapEntry.type == STACKMAPTABLE) {  \/\/ StackMapTable exists\n-                print(this.enlargedIndent(PadRight(Opcode.opc_locals_map.parseKey(), STACKMAP_TYPE_PLACEHOLDER_LENGTH + 1), shift));\n-            } else {                                    \/\/ == StackMap version < 50 Class file has an implicit stack map attribute\n-                print(PadRight(Opcode.opc_locals_map.parseKey(), STACKMAP_TYPE_PLACEHOLDER_LENGTH + 1));\n-            }\n-            if (printCPIndex) {\n-                if( skipComments ) {\n-                    println(line.first);\n-                } else {\n-                    print(PadRight(line.first, mapShift));\n-                    mapShift = max(mapShift, line.first.length());\n-                    print(\" \/\/ \");\n-                }\n-            }\n-            if( !printCPIndex || (printCPIndex && !skipComments) ) {\n-                println(line.second);\n-            }\n-            printed = true;\n-        }\n-        map = stackMapEntry.stackMap;\n-        if ((map != null) && (map.length > 0)) {\n-            Pair<String, String> line = getMapListAsString(map);\n-            if (stackMapEntry.type == STACKMAPTABLE) {\n-                print(this.enlargedIndent(\n-                        PadRight(Opcode.opc_stack_map.parseKey(), STACKMAP_TYPE_PLACEHOLDER_LENGTH + 1), shift));\n-            } else {   \/\/ version < 50 Class file has an implicit stack map attribute\n-                print(this.enlargedIndent(\n-                        PadRight(Opcode.opc_stack_map.parseKey(), STACKMAP_TYPE_PLACEHOLDER_LENGTH + 1), shift));\n-            }\n-            if (printCPIndex) {\n-                if( skipComments ) {\n-                    println(line.first);\n@@ -263,2 +377,1 @@\n-                    print(PadRight(line.first, mapShift));\n-                    print(\" \/\/ \");\n+                    println(\"%d %s:%s;\", type.slot, data.pool.getName(type.name_cpx), data.pool.getName(type.sig_cpx));\n@@ -267,4 +380,0 @@\n-            if( !printCPIndex || (printCPIndex && !skipComments) ) {\n-                println(line.second);\n-            }\n-            printed = true;\n@@ -272,9 +381,0 @@\n-        if (!printed) {\n-            \/\/ empty attribute should be printed anyway - it should not be eliminated after jdis\/jasm cycle\n-            if (stackMapEntry.type == STACKMAPTABLE) {\n-                println(this.enlargedIndent(Opcode.opc_locals_map.parseKey() + \";\", STACKMAP_TYPE_PLACEHOLDER_LENGTH + 1));\n-            } else {\n-                println(Opcode.opc_locals_map.parseKey() + \";\");\n-            }\n-        }\n-        return true;\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/InstructionAttr.java","additions":257,"deletions":157,"binary":false,"changes":414,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+import org.openjdk.asmtools.common.inputs.ToolInput;\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/JdisEnvironment.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,2 +25,1 @@\n-import org.openjdk.asmtools.common.Tool;\n-import org.openjdk.asmtools.common.outputs.log.DualStreamToolOutput;\n+import org.openjdk.asmtools.common.Decoder;\n@@ -28,0 +27,1 @@\n+import org.openjdk.asmtools.common.outputs.log.DualStreamToolOutput;\n@@ -31,1 +31,1 @@\n-public abstract class JdisTool extends Tool<JdisEnvironment> {\n+public abstract class JdisTool extends Decoder<JdisEnvironment> {\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/JdisTool.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+package org.openjdk.asmtools.jdis;\n+\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+\n+import static org.openjdk.asmtools.jasm.JasmTokens.Token.LINETABLE_HEADER;\n+import static org.openjdk.asmtools.jasm.TableFormatModel.Token.LINE_NUMBERS;\n+\n+\/**\n+ * Represents a single line number data entry within a Line Number Table attribute.\n+ * This class extends the Indenter class to provide indentation functionality.\n+ *\/\n+public class LineNumberData extends Indenter {\n+    \/**\n+     * The starting program counter of this line number entry.\n+     *\/\n+    protected short start_pc;\n+\n+    \/**\n+     * The line number corresponding to the start_pc.\n+     *\/\n+    protected short line_number;\n+\n+    \/**\n+     * A format string used for printing the line number data.\n+     *\/\n+    protected String format;\n+\n+    \/**\n+     * Checks if this LineNumberData instance should be printed.\n+     *\n+     * @return true if either printLineTable or tableFormat is enabled, false otherwise.\n+     *\/\n+    @Override\n+    public boolean isPrintable() {\n+        return printLineTable;\n+    }\n+\n+    \/**\n+     * Prints this LineNumberData instance in JASM format.\n+     *\n+     * @param index the index of this entry in the Line Number Table\n+     * @param size the total number of entries in the Line Number Table\n+     * @throws IOException if an I\/O error occurs during printing\n+     *\/\n+    @Override\n+    protected void jasmPrint(int index, int size) throws IOException {\n+        incIndent();\n+        if (index == 0) {\n+            printIndentLn(getTitle());\n+        }\n+        printIndentLn(format.formatted(\"line\", line_number, start_pc));\n+    }\n+\n+    @Override\n+    protected String getTitle() {\n+        return LINETABLE_HEADER.parseKey() + \":\";\n+    }\n+\n+    \/**\n+     * Prints this LineNumberData instance in Table(javap) format.\n+     *\n+     * @param index the index of this entry in the Line Number Table\n+     * @param size the total number of entries in the Line Number Table\n+     * @throws IOException if an I\/O error occurs during printing\n+     *\/\n+    @Override\n+    protected void tablePrint(int index, int size) throws IOException {\n+        \/\/There are no differences between the simple (jasm) and extended (table) presentations of LineNumberTable info.\n+        this.jasmPrint(index, size);\n+    }\n+\n+    \/**\n+     * Constructs a new LineNumberData instance from the given DataInputStream and MethodData.\n+     *\n+     * @param in the DataInputStream containing the line number data\n+     * @param methodData the MethodData instance associated with this LineNumberData\n+     * @throws IOException if an I\/O error occurs during construction\n+     *\/\n+    public LineNumberData(DataInputStream in, MethodData methodData) throws IOException {\n+        start_pc = in.readShort();\n+        line_number = in.readShort();\n+        super.toolOutput = methodData.toolOutput;\n+        int n = methodData.printProgramCounter ? PROGRAM_COUNTER_PLACEHOLDER_LENGTH + 4 : INSTR_PREFIX_LENGTH + 2;\n+        format = \"%\" + n + \"s %4d:  %7d\";\n+    }\n+}\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/LineNumberData.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.jdis;\n+\n+import org.openjdk.asmtools.jasm.JasmTokens;\n+\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+\n+\/**\n+ * Valhalla:\n+ * <p>\n+ * LoadableDescriptors_attribute {\n+ * u2 attribute_name_index;\n+ * u4 attribute_length;\n+ * u2 number_of_descriptors;\n+ * u2 descriptors[number_of_descriptors];\n+ * }\n+ *\/\n+public class LoadableDescriptorsData extends Utf8ArrayData {\n+    public LoadableDescriptorsData(ClassData cls) {\n+        super(cls, JasmTokens.Token.LOADABLEDESCRIPTORS);\n+    }\n+\n+    public LoadableDescriptorsData read(DataInputStream in, int attribute_length) throws IOException, ClassFormatError {\n+        return (LoadableDescriptorsData) super.read(in, attribute_length);\n+    }\n+}\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/LoadableDescriptorsData.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.jdis;\n+\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.text.MessageFormat;\n+\n+\/**\n+ * LocalTable_attribute {\n+ * u2 attribute_name_index;\n+ * u4 attribute_length;\n+ * u2 local_table_length;\n+ * {    u2 start_pc;\n+ * u2 length;\n+ * u2 name_index;\n+ * u2 descriptor\/signature_index;\n+ * u2 index;\n+ * } local_table[local__table_length];\n+ * }\n+ *\/\n+public abstract class LocalData<M extends MemberData<?>> extends Indenter {\n+    protected short start_pc, length, name_cpx, sig_cpx, slot;\n+    protected ConstantPool pool;\n+    protected String header;\n+    protected String format;\n+\n+    public LocalData(MemberData<M> owner, DataInputStream in, MethodData methodData, String fieldFacet) throws IOException {\n+        start_pc = in.readShort();\n+        length = in.readShort();\n+        name_cpx = in.readShort();\n+        sig_cpx = in.readShort();\n+        slot = in.readShort();\n+        super.toolOutput = methodData.toolOutput;\n+        pool = methodData.getConstantPool();\n+        int shift = methodData.calculateInlinedTitleShift(\"Start\");\n+        header = (MessageFormat.format(\"%{0}s  Length  Slot  Name    %s\", shift)).\n+                formatted(\"Start\", fieldFacet);\n+        format = MessageFormat.format(\"%{0}d  %6d  %4d  %4s  %s\", shift);\n+    }\n+\n+    @Override\n+    public int getCommentOffset() {\n+        return super.getCommentOffset() + PROGRAM_COUNTER_PLACEHOLDER_LENGTH;\n+    }\n+\n+    @Override\n+    protected void tablePrint(int index, int size) throws IOException {\n+        incIndent();\n+        if (index == 0) {\n+            printIndentLn(getTitle());\n+            printIndentLn(header);\n+        }\n+        String nameCpx = PadRight(\"#%s\".formatted(name_cpx), 6);\n+        String name = pool.StringValue(name_cpx);\n+        String type = pool.StringValue(sig_cpx);\n+        if (printCPIndex) {\n+            if (skipComments) {\n+                printIndentLn(format.formatted(start_pc, length, slot, nameCpx, \"#%s\".formatted(sig_cpx)));\n+            } else {\n+                String str = format.formatted(start_pc, length, slot, nameCpx, \"%-4s\".formatted(\"#\" + sig_cpx));\n+                printIndent(PadRight(str, getCommentOffset()));\n+                println(\" \/\/ %s:%s\".formatted(name, type));\n+            }\n+        } else {\n+            printIndentLn(format.formatted(start_pc, length, slot, PadRight(name, 6), type));\n+        }\n+    }\n+}\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/LocalData.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.jdis;\n+\n+import org.openjdk.asmtools.jasm.TableFormatModel;\n+\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+\n+import static org.openjdk.asmtools.jasm.JasmTokens.Token.*;\n+\n+\/**\n+ * LocalVariableTable_attribute {\n+ * u2 attribute_name_index;\n+ * u4 attribute_length;\n+ * u2 local_variable_table_length;\n+ * {   u2 start_pc;\n+ * u2 length;\n+ * u2 name_index;\n+ * u2 descriptor_index;\n+ * u2 index;\n+ * } local_variable_table[local_variable_table_length];\n+ * }\n+ *\/\n+public class LocalVariableData<M extends MemberData<?>> extends LocalData {\n+\n+    @Override\n+    public boolean isPrintable() {\n+        return printLocalVariables && tableFormat;\n+    }\n+\n+    public LocalVariableData(M owner, DataInputStream in, MethodData methodData) throws IOException {\n+        super(owner, in, methodData, DESCRIPTOR.parseKey());\n+    }\n+\n+    @Override\n+    protected String getTitle() {\n+        return LOCALVARIABLES_HEADER.parseKey() + \":\";\n+    }\n+}\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/LocalVariableData.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.jdis;\n+\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+\n+import static org.openjdk.asmtools.jasm.JasmTokens.Token.LOCALVARIABLETYPES_HEADER;\n+import static org.openjdk.asmtools.jasm.JasmTokens.Token.SIGNATURE;\n+\n+\/**\n+ * LocalVariableTypeTable_attribute {\n+ * u2 attribute_name_index;\n+ * u4 attribute_length;\n+ * u2 local_variable_type_table_length;\n+ * {   u2 start_pc;\n+ * u2 length;\n+ * u2 name_index;\n+ * u2 signature_index;\n+ * u2 index;\n+ * } local_variable_type_table[local_variable_type_table_length];\n+ * }\n+ *\/\n+public class LocalVariableTypeData<M extends MemberData<?>> extends LocalData {\n+\n+    public boolean isPrintable() {\n+        return printLocalVariableTypes && tableFormat;\n+    }\n+\n+    public LocalVariableTypeData(M owner, DataInputStream in, MethodData methodData) throws IOException {\n+        super(owner, in, methodData, SIGNATURE.parseKey());\n+    }\n+\n+    @Override\n+    protected String getTitle() {\n+        return LOCALVARIABLETYPES_HEADER.parseKey() + \":\";\n+    }\n+}\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/LocalVariableTypeData.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import org.openjdk.asmtools.common.outputs.log.DualStreamToolOutput;\n-import org.openjdk.asmtools.common.outputs.log.DualOutputStreamOutput;\n@@ -31,0 +29,2 @@\n+import org.openjdk.asmtools.common.outputs.log.DualOutputStreamOutput;\n+import org.openjdk.asmtools.common.outputs.log.DualStreamToolOutput;\n@@ -40,0 +40,1 @@\n+import static org.openjdk.asmtools.Main.WRITE_SWITCH;\n@@ -42,0 +43,4 @@\n+import static org.openjdk.asmtools.common.outputs.FSOutput.FSDestination.DIR;\n+import static org.openjdk.asmtools.common.outputs.FSOutput.FSDestination.FILE;\n+import static org.openjdk.asmtools.jdis.Options.PrintOption;\n+import static org.openjdk.asmtools.jdis.Options.PrintOption.*;\n@@ -92,0 +97,9 @@\n+    @Override\n+    public synchronized int decode() {\n+        return this.disasm();\n+    }\n+\n+    public synchronized boolean decode(String... argv) {\n+        return this.disasm(argv);\n+    }\n+\n@@ -94,1 +108,3 @@\n-        for (ToolInput inputFileName : fileList) {\n+        int rc = 0;\n+        for (ToolInput toolInput : fileList) {\n+            ClassData classData = null;\n@@ -96,4 +112,5 @@\n-                environment.setInputFile(inputFileName);\n-                ClassData classData = new ClassData(environment);\n-                try(DataInputStream dis=inputFileName.getDataInputStream(Optional.of(environment))) {\n-                    classData.read(dis, Paths.get(inputFileName.getFileName()));\n+                environment.setToolInput(toolInput);\n+                classData = new ClassData(environment);\n+                toolInput.setDetailedInput(classData.isDetailedOutput());\n+                try (DataInputStream dis = toolInput.getDataInputStream(Optional.of(environment))) {\n+                    classData.read(dis, Paths.get(toolInput.getName()));\n@@ -101,0 +118,1 @@\n+                environment.traceln(() -> \"Options:\\n%s\\n\".formatted(Options.getPrintOptions()));\n@@ -105,0 +123,2 @@\n+                rc = environment.getLogger().registerTotalIssues(rc, toolInput);\n+                environment.getLogger().flush();\n@@ -108,1 +128,2 @@\n-                environment.error(\"err.not_found\", inputFileName);\n+                environment.error(\"err.not_found\", toolInput);\n+                rc = FAILED;\n@@ -110,0 +131,2 @@\n+                classData.postPrint();\n+                environment.error(ioe);\n@@ -111,3 +134,1 @@\n-                if (!environment.getVerboseFlag())\n-                    environment.printErrorLn(ioe.getMessage());\n-                environment.error(\"err.fatal_error\", inputFileName);\n+                rc = environment.getLogger().registerTotalIssues(rc, toolInput);\n@@ -115,0 +136,2 @@\n+                classData.postPrint();\n+                environment.error(error);\n@@ -116,1 +139,1 @@\n-                environment.error(\"err.fatal_error\", inputFileName);\n+                rc = environment.getLogger().registerTotalIssues(rc, toolInput);\n@@ -118,0 +141,2 @@\n+                classData.postPrint();\n+                environment.error(ex);\n@@ -119,1 +144,1 @@\n-                environment.error(\"err.fatal_exception\", inputFileName);\n+                rc = environment.getLogger().registerTotalIssues(rc, toolInput);\n@@ -121,1 +146,2 @@\n-            return FAILED;\n+            environment.getLogger().flush();\n+            return rc;\n@@ -129,13 +155,18 @@\n-        \"info.usage\",\n-        \"info.opt.d\",\n-        \"info.opt.g\",\n-        \"info.opt.nc\",\n-        \"info.opt.lt\",\n-        \"info.opt.lv\",\n-        \"info.opt.instr.offset\",\n-        \"info.opt.hx\",\n-        \"info.opt.sl\",\n-\/\/ TODO \"info.opt.table\",\n-        \"info.opt.t\",\n-        \"info.opt.v\",\n-        \"info.opt.version\"));\n+                \"info.usage\",\n+                \"info.opt.d\",\n+                \"info.opt.w\",\n+                \"info.opt.g\",\n+                \"info.opt.gg\",\n+                \"info.opt.nc\",\n+                \"info.opt.table\",\n+                \"info.opt.hx\",\n+                \"info.opt.instr.offset\",\n+                \"info.opt.sysinfo\",\n+                \"info.opt.lnt\",\n+                \"info.opt.lvt\",\n+                \"info.opt.drop\",\n+                \"info.opt.b\",\n+                \"info.opt.version\",\n+                \"info.opt.t\",\n+                \"info.opt.v\"\n+        ));\n@@ -146,0 +177,1 @@\n+        Options.setDefaultOutputOptions();\n@@ -154,1 +186,1 @@\n-                    Options.set(Options.PR.VERBOSE);\n+                    Options.set(VERBOSE);\n@@ -157,0 +189,3 @@\n+                case \"-sysinfo\":\n+                    Options.set(SYSINFO);\n+                    break;\n@@ -158,2 +193,2 @@\n-                    Options.set(Options.PR.VERBOSE);\n-                    Options.set(Options.PR.TRACE);\n+                    Options.set(VERBOSE);\n+                    Options.set(TRACE);\n@@ -164,7 +199,1 @@\n-                    Options.set(Options.PR.PC);\n-                    break;\n-                case \"-sl\":\n-                    Options.set(Options.PR.SRC);\n-                    break;\n-                case \"-lt\":\n-                    Options.set(Options.PR.LNT);\n+                    Options.set(PRINT_BCI);\n@@ -173,4 +202,1 @@\n-                    Options.set(Options.PR.NC);\n-                    break;\n-                case \"-lv\":\n-                    Options.set(Options.PR.VAR);\n+                    Options.set(NO_COMMENTS);\n@@ -179,1 +205,1 @@\n-                    Options.set(Options.PR.HEX);\n+                    Options.set(HEX);\n@@ -181,2 +207,2 @@\n-                case org.openjdk.asmtools.Main.DIR_SWITCH:\n-                    setDestDir(++i, argv);\n+                case \"-f\":                                          \/\/ -f <file>\n+                    setFSDestination(FILE, ++i, argv);\n@@ -184,1 +210,8 @@\n-                case org.openjdk.asmtools.Main.DUAL_LOG_SWITCH:\n+                case org.openjdk.asmtools.Main.DIR_SWITCH:          \/\/ -d <directory>\n+                    setFSDestination(DIR, ++i, argv);\n+                    break;\n+                case WRITE_SWITCH:                                  \/\/ -w\n+                    environment.setIgnorePackage(true);\n+                    setFSDestination(DIR, ++i, argv);\n+                    break;\n+                case org.openjdk.asmtools.Main.DUAL_LOG_SWITCH:     \/\/ -dls\n@@ -187,1 +220,1 @@\n-                case org.openjdk.asmtools.Main.VERSION_SWITCH:\n+                case org.openjdk.asmtools.Main.VERSION_SWITCH:      \/\/ -version\n@@ -190,1 +223,1 @@\n-                case org.openjdk.asmtools.Main.STDIN_SWITCH:\n+                case org.openjdk.asmtools.Main.STDIN_SWITCH:        \/\/ -\n@@ -196,0 +229,10 @@\n+                case \"-best-effort\":\n+                    Options.set(BEST_EFFORT);\n+                    break;\n+                case \"-gg\":\n+                    Options.setDetailedOutputOptions();\n+                    Options.set(EXTRA_DETAILED_Output);\n+                    break;\n+                case \"-table\":\n+                    Options.set(PrintOption.TABLE);\n+                    break;\n@@ -198,3 +241,20 @@\n-                        environment.error(\"err.invalid_option\", arg);\n-                        usage();\n-                        System.exit(FAILED);\n+                        if (arg.startsWith(\"-drop\")) {\n+                            if (!parseParameters(\"-drop\", arg, \"DROP\", DROP_All)) {\n+                                usage();\n+                                System.exit(FAILED);\n+                            }\n+                        } else if (arg.startsWith(\"-lnt\")) {\n+                            if (!parseParameters(\"-lnt\", arg, \"LINE_NUMBER_TABLE\", LINE_NUMBER_TABLE_All)) {\n+                                usage();\n+                                System.exit(FAILED);\n+                            }\n+                        } else if (arg.startsWith(\"-lvt\")) {\n+                            if (!parseParameters(\"-lvt\", arg, \"LOCAL_VARIABLE\", LOCAL_VARIABLE_All)) {\n+                                usage();\n+                                System.exit(FAILED);\n+                            }\n+                        } else {\n+                            environment.error(\"err.invalid_option\", arg);\n+                            usage();\n+                            System.exit(FAILED);\n+                        }\n@@ -211,0 +271,43 @@\n+\n+    \/**\n+     * Parse parameters group -option:parameters [parameters=option1,option2]\n+     *\n+     * @param option      one of the options [-lvt, -drop, -lnt]\n+     * @param parameters  one of combinations corresponded to the option:\n+     *                    <all,numbers,lines,table>, <all,vars,types> or\n+     *                    <all|debug|SourceFile,LocalVariable,LocalVariableType,CharacterRange>\n+     * @param optPrefix   prefix of the PR: LINE_NUMBER_TABLE, LOCAL_VARIABLE or DROP\n+     * @param blankOption option that is used if there are no parameters option1,option2... attached to the -option\n+     * @return true if parameters group parsed successfully\n+     *\/\n+    private boolean parseParameters(String option, String parameters, String optPrefix, PrintOption blankOption) {\n+        parameters = parameters.substring(option.length());\n+        if (parameters.isBlank()) {\n+            if (!blankOption.isActive()) {\n+                environment.error(\"err.option.unsupported\", option + \":all\");\n+                return false;\n+            }\n+            blankOption.apply();\n+        } else if (parameters.matches(\"^[:=-]+.*\")) {\n+            parameters = parameters.substring(1);\n+            String[] prmArray = parameters.split(\",\");\n+            for (int i = 0; i < prmArray.length; i++) {\n+                PrintOption printOption = getStringFlag(optPrefix, prmArray[i]);\n+                if (printOption == null || !printOption.name().startsWith(optPrefix)) {\n+                    environment.error(\"err.invalid_parameter_of_option\", prmArray[i], option);\n+                    return false;\n+                } else if (!printOption.isActive()) {\n+                    environment.error(\"err.option.unsupported\", \"%s:%s\".formatted(option, prmArray[i]));\n+                    return false;\n+                }\n+                printOption.apply();\n+                if (printOption.equals(blankOption)) { \/\/ blank options is equal to\n+                    return true;\n+                }\n+            }\n+        } else {\n+            environment.error(\"err.option.unsupported\", option + parameters);\n+            return false;\n+        }\n+        return true;\n+    }\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/Main.java","additions":154,"deletions":51,"binary":false,"changes":205,"status":"modified"},{"patch":"@@ -0,0 +1,34 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.jdis;\n+\n+\/**\n+ * Indicates that the element has a specific printable measurement\/size.\n+ *\/\n+public interface Measurable {\n+    int getPrintSize();\n+\n+    void setMaxPrintSize(int size);\n+\n+    int getMaxPrintSize();\n+}\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/Measurable.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+import org.openjdk.asmtools.common.Environment;\n@@ -33,0 +34,1 @@\n+import java.util.List;\n@@ -39,1 +41,1 @@\n-public abstract class  MemberData<T extends MemberData> extends Indenter {\n+public abstract class MemberData<T extends MemberData> extends Indenter {\n@@ -45,3 +47,10 @@\n-    protected JdisEnvironment environment;          \/\/ Environment of this data\n-    protected ConstantPool  pool;\n-    protected String        memberType = \"\";\n+    protected Environment environment;          \/\/ Environment of this data\n+    protected ConstantPool pool;\n+    protected String memberType = \"\";\n+\n+    public MemberData<T> setOwner(MemberData<? extends MemberData<T>> owner) {\n+        this.owner = owner;\n+        return this;\n+    }\n+\n+    MemberData<? extends MemberData<T>> owner;\n@@ -91,1 +100,1 @@\n-    public MemberData(JdisEnvironment environment) {\n+    public MemberData(Environment environment) {\n@@ -96,1 +105,1 @@\n-    public void init( T data) {\n+    public void init(T data) {\n@@ -101,0 +110,14 @@\n+    \/**\n+     * Prints system comments if the option -sysinfo is used.\n+     *\/\n+    protected void printSysInfo() {\n+        if (sysInfo) {\n+            throw new RuntimeException(\"Not implemented yet\");\n+        }\n+    }\n+\n+    public MemberData<T> setSignature(SignatureData signatureData) {\n+        this.signature = signatureData;\n+        return this;\n+    }\n+\n@@ -112,0 +135,7 @@\n+    protected boolean handleUnrecognizedAttributes(DataInputStream in,\n+                                       int attributeNameCpx,\n+                                       int attributeLength) throws IOException {\n+        \/\/ sub-classes override\n+        return false;\n+    }\n+\n@@ -115,1 +145,1 @@\n-            s += JasmTokens.Token.SYNTHETIC.parseKey() + \" \";\n+            s += \"%s \".formatted(JasmTokens.Token.SYNTHETIC.parseKey());\n@@ -117,1 +147,1 @@\n-            s += JasmTokens.Token.DEPRECATED.parseKey() + \" \";\n+            s += \"%s \".formatted(JasmTokens.Token.DEPRECATED.parseKey());\n@@ -136,2 +166,2 @@\n-    final protected int getAnnotationsCount() {\n-        return  ((visibleAnnotations == null) ? 0 : visibleAnnotations.size()) +\n+    protected int getAnnotationsCount() {\n+        return ((visibleAnnotations == null) ? 0 : visibleAnnotations.size()) +\n@@ -143,17 +173,11 @@\n-    final protected void printAnnotations() throws IOException {\n-        if( getAnnotationsCount() > 0 ) {\n-            if (visibleAnnotations != null) {\n-                for (AnnotationData va : visibleAnnotations) {\n-                    va.setTheSame(this).print();\n-                    println();\n-                }\n-            }\n-            if (invisibleAnnotations != null) {\n-                for (AnnotationData ia : invisibleAnnotations) {\n-                    ia.setTheSame(this).print();\n-                    println();\n-                }\n-            }\n-            if (visibleTypeAnnotations != null) {\n-                for (TypeAnnotationData vta : visibleTypeAnnotations) {\n-                    vta.setTheSame(this).print();\n+    \/**\n+     * Print member's (ClassData, MethodData, FieldData and RecordData) annotations\n+     *\n+     * @throws IOException signals that an exception to some sort has occurred\n+     *\/\n+\n+    protected <T extends AnnotationData> void printAnnotations(List<T>... annotationLists) throws IOException {\n+        for (List<T> list : annotationLists) {\n+            if (list != null) {\n+                for (T annotation : list) {\n+                    annotation.setTheSame(this).print();\n@@ -163,5 +187,7 @@\n-            if (invisibleTypeAnnotations != null) {\n-                for (TypeAnnotationData ita : invisibleTypeAnnotations) {\n-                    ita.setTheSame(this).print();\n-                    println();\n-                }\n+        }\n+    }\n+\n+    protected void printAttributes(Container<? extends Indenter, CodeData>... tables) throws IOException {\n+        for (Container<?, ?> table : tables) {\n+            if (table != null && table.isPrintable()) {\n+                table.setCommentOffset(this.getCommentOffset()).print();\n@@ -174,6 +200,7 @@\n-     * @param prefix      the field prefix: \"private static final Field\" or the component prefix: \"synthetic Component\"\n-     * @param postfix     String presentation of the initial value if exists ( = String \"ABC\" )\n-     * @param name_cpx    Field\/Component name cpIndex\n-     * @param type_cpx    Field\/Component type cpIndex\n-     * @param value_cpx   either cpIndex of an initial value of a field or 0\n-     *                    if it's a component or the field doesn't have an initial value.\n+     *\n+     * @param prefix    the field prefix: \"private static final Field\" or the component prefix: \"synthetic Component\"\n+     * @param postfix   String presentation of the end of line (either \":\" or \";\")\n+     * @param name_cpx  Field\/Component name cpIndex\n+     * @param type_cpx  Field\/Component type cpIndex\n+     * @param value_cpx either cpIndex of an initial field's value or 0\n+     *                  if it's a component or the field doesn't have an initial value.\n@@ -181,1 +208,1 @@\n-    protected void printVar(StringBuilder prefix, String postfix, int name_cpx, int type_cpx, int value_cpx) {\n+    protected void printVar(StringBuilder prefix, String postfix, String eol, int name_cpx, int type_cpx, int value_cpx) {\n@@ -183,2 +210,2 @@\n-        Pair<String, String> signInfo = ( signature != null) ?\n-                signature.getPrintInfo((i)->pool.inRange(i)) :\n+        Pair<String, String> signInfo = (this.signature != null) ?\n+                this.signature.getJasmPrintInfo((i) -> pool.inRange(i)) :\n@@ -187,1 +214,1 @@\n-        if(printCPIndex) {\n+        if (printCPIndex) {\n@@ -189,1 +216,1 @@\n-            if(value_cpx != 0) {\n+            if (value_cpx != UNDEFINED ) {\n@@ -192,3 +219,3 @@\n-            prefix.append(';');\n-            if( skipComments ) {\n-               print(prefix.toString());\n+            prefix.append(eol);\n+            if (skipComments) {\n+                print(prefix.toString());\n@@ -196,5 +223,6 @@\n-                printPadRight(prefix.toString(), getCommentOffset() - 1).print(\" \/\/ \");\n-                print(data.pool.getName(name_cpx) + \":\" +\n-                        data.pool.getName(type_cpx) +\n-                        signInfo.second +\n-                        (postfix != null ? postfix : \"\"));\n+                printPadRight(prefix.toString(), getCommentOffset()).print(\" \/\/ \");\n+                print(\"%s:%s%s%s\".formatted(\n+                        data.pool.getName(name_cpx),\n+                        data.pool.getName(type_cpx),\n+                        signInfo.second,\n+                        postfix != null ? postfix : \"\"));\n@@ -206,1 +234,1 @@\n-            if( postfix != null ) {\n+            if (postfix != null) {\n@@ -209,1 +237,1 @@\n-            print(prefix+\";\");\n+            print(\"%s%s\".formatted(prefix, eol));\n@@ -218,1 +246,1 @@\n-        environment.traceln(format(\"%s - Attributes[%d]\", memberType , attributesCount));\n+        environment.traceln(format(\"%s - Attributes[%d]\", memberType, attributesCount));\n@@ -222,3 +250,1 @@\n-            attrData = new AttrData(this.environment);\n-            attributes.add(attrData);\n-            String attr_name = data.pool.getString(name_cpx, index->\"#\"+index);\n+            String attr_name = data.pool.getString(name_cpx, index -> \"#\" + index);\n@@ -228,0 +254,2 @@\n+            attrData = new AttrData(environment, tag);\n+            attributes.add(attrData);\n@@ -232,2 +260,7 @@\n-                        throw new FormatError(environment.getLogger(),\n-                                \"err.invalid.attribute.length\",  tag.printValue(), attrLength);\n+                        if (bestEffort) {\n+                            environment.getLogger().error(\n+                                    \"err.invalid.attribute.length\", tag.printValue(), attrLength);\n+                        } else {\n+                            throw new FormatError(environment.getLogger(),\n+                                    \"err.invalid.attribute.length\", tag.printValue(), attrLength);\n+                        }\n@@ -240,2 +273,7 @@\n-                        throw new FormatError(environment.getLogger(),\n-                                \"err.invalid.attribute.length\", tag.printValue(), attrLength);\n+                        if (bestEffort) {\n+                            environment.getLogger().error(\n+                                    \"err.invalid.attribute.length\", tag.printValue(), attrLength);\n+                        } else {\n+                            throw new FormatError(environment.getLogger(),\n+                                    \"err.invalid.attribute.length\", tag.printValue(), attrLength);\n+                        }\n@@ -279,0 +317,4 @@\n+                case ATT_Unrecognized:\n+                    handleUnrecognizedAttributes(in,name_cpx, attrLength);\n+                    attrData.read(name_cpx, attrLength, in);\n+                    break;\n@@ -290,0 +332,17 @@\n+\n+    public List<AttrData> getListOf(EAttribute attributeTag) {\n+        return attributes.stream().filter(a -> a.getAttributeInfo().equals(attributeTag)).toList();\n+    }\n+\n+    \/**\n+     * |  012:       aad\n+     * |iiSSSSSHeader....\n+     * ii - indent SSSS - shift that is returned.\n+     *\/\n+    public int calculateInlinedTitleShift(String Header) {\n+        return (\n+                (printProgramCounter)\n+                        ? PROGRAM_COUNTER_PLACEHOLDER_LENGTH + getIndentStep() * 2 + Header.length() - getIndentSize()\n+                        : INSTR_PREFIX_LENGTH + getIndentStep() * 2 + Header.length() - getIndentSize() * 2\n+        ) - getIndentSize();\n+    }\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/MemberData.java","additions":121,"deletions":62,"binary":false,"changes":183,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+import org.openjdk.asmtools.jdis.notations.Signature;\n+import org.openjdk.asmtools.jdis.notations.Type;\n@@ -37,0 +39,1 @@\n+import static org.openjdk.asmtools.common.structure.ClassFileContext.METHOD;\n@@ -38,0 +41,3 @@\n+import static org.openjdk.asmtools.jasm.TableFormatModel.Token.METHOD_DATA;\n+import static org.openjdk.asmtools.jasm.TableFormatModel.Token.SIGNATURE;\n+import static org.openjdk.asmtools.jdis.ConstantPool.funcInvalidCPIndex;\n@@ -49,5 +55,3 @@\n-    \/\/ConstantPool index to the method type\n-    protected int sig_cpx;\n-\n-    \/\/ labelPrefix\n-    protected String lP;\n+    \/\/ConstantPool index to the method descriptor, representing the types of parameters that the method takes,\n+    \/\/ and a return descriptor, representing the type of the value (if any) that the method returns.\n+    protected int descriptor_cpx;\n@@ -56,1 +60,1 @@\n-    protected ArrayList<ParamNameData> paramNameDates;\n+    protected ArrayList<MethodParameterData> methodParameters;\n@@ -67,2 +71,2 @@\n-    \/\/ The code data for this method. May be null\n-    private CodeData code;\n+    \/\/ The exception table (thrown exceptions) for this method. Maybe null\n+    protected ExceptionData exceptions;\n@@ -70,2 +74,2 @@\n-    \/\/ The exception table (thrown exceptions) for this method. May be null\n-    private int[] exc_table = null;\n+    \/\/ The code data for this method. Maybe null\n+    private CodeData code;\n@@ -75,0 +79,1 @@\n+        tableToken = METHOD_DATA;\n@@ -77,2 +82,1 @@\n-        lP = printLabelAsIdentifiers ? \"L\" : \"\";\n-        paramNameDates = null;\n+        methodParameters = null;\n@@ -92,1 +96,1 @@\n-                if (signature != null) {\n+                if (this.signature != null) {\n@@ -95,1 +99,1 @@\n-                signature = new SignatureData(data).read(in, attributeLength);\n+                setSignature(new SignatureData(data).read(in, attributeLength));\n@@ -97,1 +101,1 @@\n-            case ATT_Exceptions -> readExceptions(in);\n+            case ATT_Exceptions -> exceptions = new ExceptionData(data).read(in, attributeLength);\n@@ -117,1 +121,1 @@\n-     * Precondition: NumFields has already been read from the stream.\n+     * Precondition: Meth has already been read from the stream.\n@@ -123,7 +127,7 @@\n-        sig_cpx = in.readUnsignedShort();\n-        environment.traceln(\"MethodData: {modifiers[%d]}:%s name[%d]=%s signature[%d]=%s\",\n-                access,\n-                EModifier.asNames(access, ClassFileContext.METHOD).isEmpty() ? \"<none>\" :\n-                        EModifier.asNames(access, ClassFileContext.METHOD).isEmpty(),\n-                name_cpx, data.pool.getString(name_cpx, index -> \"???\"),\n-                sig_cpx, data.pool.getString(sig_cpx, index -> \"???\"));\n+        descriptor_cpx = in.readUnsignedShort();\n+        environment.traceln(() -> \"MethodData: {modifiers[%d]}:%s name[%d]=%s signature[%d]=%s\"\n+                .formatted(access,\n+                        EModifier.asNames(access, ClassFileContext.METHOD).isEmpty() ? \"<none>\" :\n+                                EModifier.asNames(access, ClassFileContext.METHOD).isEmpty(),\n+                        name_cpx, data.pool.getString(name_cpx, index -> \"???\"),\n+                        descriptor_cpx, data.pool.getString(descriptor_cpx, index -> \"???\")));\n@@ -134,12 +138,0 @@\n-    private void readExceptions(DataInputStream in) throws IOException {\n-        \/\/ this is not really a CodeAttr attribute, it's part of the CodeAttr\n-        int exc_table_len = in.readUnsignedShort();\n-        environment.traceln(\"ExceptionsAttr[%d]\", exc_table_len);\n-        exc_table = new int[exc_table_len];\n-        for (int l = 0; l < exc_table_len; l++) {\n-            int exc = in.readShort();\n-            environment.traceln(\"throws: #\" + exc);\n-            exc_table[l] = exc;\n-        }\n-    }\n-\n@@ -149,2 +141,2 @@\n-        environment.traceln(\"MethodParametersAttr[%d]\", num_params);\n-        paramNameDates = new ArrayList<>(num_params);\n+        environment.traceln(() -> \"MethodParametersAttr[%d]\".formatted(num_params));\n+        methodParameters = new ArrayList<>(num_params);\n@@ -154,4 +146,5 @@\n-            environment.traceln(\"Param[%d] = { name[%d]: \\\"%s\\\" modifiers[%d]: %s}\", i, paramNameCpx,\n-                    pool.getString(paramNameCpx, index -> \"???\"),\n-                    paramAccess, EModifier.asNames(paramAccess, ClassFileContext.METHOD));\n-            paramNameDates.add(i, new ParamNameData(paramNameCpx, paramAccess));\n+            environment.traceln(\"()->MethodParameter[%d] = { name[%d]: \\\"%s\\\" modifiers[%d]: %s}\".\n+                    formatted(i, paramNameCpx,\n+                            pool.getString(paramNameCpx, index -> \"???\"),\n+                            paramAccess, EModifier.asNames(paramAccess, ClassFileContext.METHOD)));\n+            methodParameters.add(i, new MethodParameterData(paramNameCpx, paramAccess));\n@@ -161,11 +154,4 @@\n-    \/**\n-     * prints the parameter annotations for this method. called from CodeAttr (since JASM\n-     * code integrates the PAnnotation Syntax inside the method body).\n-     *\/\n-    public void printPAnnotations() throws IOException {\n-        int visSize = 0;\n-        int invisSize = 0;\n-        int pNumSize = 0;\n-\n-        if (visibleParameterAnnotations != null) {\n-            visSize = visibleParameterAnnotations.numParams();\n+    private record ParameterAnnotationsSizes(int visibleParameterAnnotationsCount,\n+                                             int invisibleParameterAnnotationsCount) {\n+        boolean hasParameterAnnotations() {\n+            return visibleParameterAnnotationsCount > 0 || invisibleParameterAnnotationsCount > 0;\n@@ -173,5 +159,9 @@\n-        if (invisibleParameterAnnotations != null) {\n-            invisSize = invisibleParameterAnnotations.numParams();\n-        }\n-        if (paramNameDates != null) {\n-            pNumSize = paramNameDates.size();\n+    }\n+\n+    private ParameterAnnotationsSizes parameterAnnotationsSizes = null;\n+\n+    private ParameterAnnotationsSizes ParameterAnnotationsSizes() {\n+        if (parameterAnnotationsSizes == null) {\n+            parameterAnnotationsSizes = new ParameterAnnotationsSizes(\n+                    visibleParameterAnnotations != null ? visibleParameterAnnotations.numParameters() : 0,\n+                    invisibleParameterAnnotations != null ? invisibleParameterAnnotations.numParameters() : 0);\n@@ -179,0 +169,2 @@\n+        return parameterAnnotationsSizes;\n+    }\n@@ -180,3 +172,4 @@\n-        int maxParams;\n-        maxParams = max(pNumSize, invisSize);\n-        maxParams = max(visSize, maxParams);\n+    private boolean hasAnnotationParameters() {\n+        return ParameterAnnotationsSizes().hasParameterAnnotations() ||\n+                methodParameters != null && methodParameters.size() > 0;\n+    }\n@@ -184,2 +177,3 @@\n-        String[] paramNames = getPrintableParameterNames(maxParams);\n-        int annotOffset = Arrays.stream(paramNames).mapToInt(name -> name == null ? 0 : name.length()).max().orElse(0) + 1;\n+    private boolean hasDefaultAnnotation() {\n+        return defaultAnnotation != null;\n+    }\n@@ -187,3 +181,12 @@\n-        for (int paramNum = 0; paramNum < maxParams; paramNum++) {\n-            ArrayList<AnnotationData> visAnnotationDataList = (visibleParameterAnnotations != null && paramNum < visSize) ?\n-                    visibleParameterAnnotations.get(paramNum) : null;\n+    \/**\n+     * Print The MethodParameters Attribute and the parameter annotations for this method.\n+     * Called from CodeAttr (since JASM code integrates the ParameterAnnotation Syntax inside the method body).\n+     *\/\n+    public void printMethodParameters() throws IOException {\n+        \/\/ ParameterAnnotation(s) or MethodParameters found.\n+        if (hasAnnotationParameters()) {\n+            incIndent();\n+            int totalWidth = printProgramCounter ? 7 : 5;\n+            int pNumSize = methodParameters != null ? methodParameters.size() : 0;\n+            int maxParams = max(pNumSize, parameterAnnotationsSizes.invisibleParameterAnnotationsCount());\n+            maxParams = max(parameterAnnotationsSizes.visibleParameterAnnotationsCount(), maxParams);\n@@ -191,2 +194,1 @@\n-            ArrayList<AnnotationData> invisAnnotationDataList = (invisibleParameterAnnotations != null && paramNum < invisSize) ?\n-                    invisibleParameterAnnotations.get(paramNum) : null;\n+            String[] paramNames = getPrintableParameterNames(maxParams);\n@@ -194,2 +196,4 @@\n-            ParamNameData paramNameData = (paramNameDates != null) ? paramNameDates.get(paramNum) : null;\n-            boolean hasAnnotations = ((visAnnotationDataList != null) || (invisAnnotationDataList != null));\n+            for (int paramNum = 0; paramNum < maxParams; paramNum++) {\n+                ArrayList<AnnotationData> visAnnotationDataList =\n+                        (visibleParameterAnnotations != null && paramNum < parameterAnnotationsSizes.visibleParameterAnnotationsCount()) ?\n+                                visibleParameterAnnotations.get(paramNum) : null;\n@@ -197,3 +201,3 @@\n-            if (paramNameData != null && paramNameData.name_cpx == 0) {\n-                paramNameData = null;\n-            }\n+                ArrayList<AnnotationData> invisAnnotationDataList =\n+                        (invisibleParameterAnnotations != null && paramNum < parameterAnnotationsSizes.invisibleParameterAnnotationsCount()) ?\n+                                invisibleParameterAnnotations.get(paramNum) : null;\n@@ -201,1 +205,2 @@\n-            if ((paramNameData != null) || hasAnnotations) {\n+                MethodParameterData methodParameterData = (methodParameters != null) ? methodParameters.get(paramNum) : null;\n+                boolean hasAnnotations = ((visAnnotationDataList != null) || (invisAnnotationDataList != null));\n@@ -203,2 +208,4 @@\n-                \/\/ Print the Param number (header)\n-                printIndent(PadRight(paramNum + \": \", 5));\n+                if ((methodParameterData != null) || hasAnnotations) {\n+                    \/\/ Print the Param number (header)\n+                    int annotOffset = 3;\n+                    printIndent(PadRight(\"%2d: \".formatted(paramNum), totalWidth));\n@@ -206,6 +213,4 @@\n-                int offset = annotOffset + 4;\n-                \/\/ Print the Parameter name\n-                if (paramNameData != null) {\n-                    printPadRight(paramNames[paramNum], annotOffset);\n-                    offset++;\n-                }\n+                    \/\/ Print the Parameter name\n+                    if (methodParameterData != null) {\n+                        printPadRight(paramNames[paramNum], annotOffset);\n+                    }\n@@ -213,2 +218,2 @@\n-                \/\/ Print any visible param annotations\n-                boolean firstTime = printAnnotationDataList(visAnnotationDataList, true, offset);\n+                    \/\/ Print any visible param annotations\n+                    printAnnotationDataList(visAnnotationDataList, annotOffset);\n@@ -216,2 +221,2 @@\n-                \/\/ Print any invisible param annotations\n-                printAnnotationDataList(invisAnnotationDataList, firstTime, annotOffset);\n+                    \/\/ Print any invisible param annotations\n+                    printAnnotationDataList(invisAnnotationDataList, annotOffset);\n@@ -219,2 +224,3 @@\n-                \/\/ Reset the line, if there were parameters\n-                println();\n+                    \/\/ Reset the line if there were parameters\n+                    println();\n+                }\n@@ -222,0 +228,1 @@\n+            decIndent();\n@@ -228,1 +235,1 @@\n-    private boolean printAnnotationDataList(List<AnnotationData> annotationDataList, boolean firstTime, int offset)\n+    private void printAnnotationDataList(List<AnnotationData> annotationDataList, int offset)\n@@ -232,5 +239,1 @@\n-                if (!firstTime) {\n-                    println().print(enlargedIndent(offset));\n-                } else {\n-                    firstTime = false;\n-                }\n+                println().print(enlargedIndent(offset));\n@@ -240,1 +243,0 @@\n-        return firstTime;\n@@ -245,1 +247,1 @@\n-        if (paramNameDates != null) {\n+        if (methodParameters != null) {\n@@ -247,5 +249,1 @@\n-                ParamNameData paramNameData = paramNameDates.get(paramNum);\n-                if (paramNameData == null || paramNameData.name_cpx == 0) {\n-                    names[paramNum] = \"\";\n-                    continue;\n-                }\n+                MethodParameterData methodParameterData = methodParameters.get(paramNum);\n@@ -253,4 +251,20 @@\n-                names[paramNum] = Token.PARAM_NAME.parseKey() + \"{ \" +\n-                        data.pool.getString(paramNameData.name_cpx, index -> \"#\" + index) + ' ' +\n-                        EModifier.asKeywords(paramNameData.access, ClassFileContext.METHOD_PARAMETERS) +\n-                        \"}\";\n+                names[paramNum] = Token.PARAM_NAME.parseKey() + \"{ \";\n+                if (printCPIndex) {\n+                    names[paramNum] += \"#%d \".formatted(methodParameterData.name_cpx);\n+                    if (!skipComments && methodParameterData.name_cpx != 0) {\n+                        names[paramNum] += \"\/* %s *\/ \".formatted(data.pool.getString(methodParameterData.name_cpx, index -> \"#\" + index));\n+                    }\n+                    if (methodParameterData.access != 0) {\n+                        names[paramNum] += EModifier.asKeywords(methodParameterData.access, ClassFileContext.METHOD_PARAMETERS);\n+                    }\n+                } else {\n+                    if (methodParameterData.name_cpx != 0) {\n+                        names[paramNum] += data.pool.getString(methodParameterData.name_cpx, index -> \"#\" + index) + \" \";\n+                    } else {\n+                        names[paramNum] += \"#0 \";\n+                    }\n+                    if (methodParameterData.access != 0) {\n+                        names[paramNum] += EModifier.asKeywords(methodParameterData.access, ClassFileContext.METHOD_PARAMETERS);\n+                    }\n+                }\n+                names[paramNum] += \"}\";\n@@ -262,0 +276,6 @@\n+    private String getMethodModifiers() {\n+        return EModifier.asKeywords(access, ClassFileContext.METHOD).\n+                \/\/ add synthetic, deprecated if necessary\n+                        concat(getPseudoFlagsAsString());\n+    }\n+\n@@ -263,1 +283,1 @@\n-     * Prints the method data to the current output stream. called from ClassData.\n+     * Prints the method data to the current output stream. Called from ClassData.\n@@ -266,11 +286,20 @@\n-    public void print() throws IOException {\n-\n-        printAnnotations();\n-\n-        String methSignature = EModifier.asKeywords(access, ClassFileContext.METHOD);\n-        \/\/ add synthetic, deprecated if necessary\n-        methSignature = methSignature.concat(getPseudoFlagsAsString());\n-        methSignature = methSignature.concat(Token.METHODREF.parseKey() + \" \");\n-\n-        Pair<String, String> signInfo = (signature != null) ?\n-                signature.getPrintInfo((i) -> pool.inRange(i)) :\n+    protected void jasmPrint(int index, int size) throws IOException {\n+        boolean isSignaturePrintable = this.signature != null && this.signature.isPrintable();\n+        boolean tableSignatureFormat = isSignaturePrintable && this.signature.isTableOutput();\n+        boolean hasExceptions = exceptions != null;\n+        boolean hasCodeInfo = code != null || hasAnnotationParameters() || hasExceptions;\n+        boolean noExtraInfo = !hasCodeInfo && !tableSignatureFormat;\n+        if (index > 0) {\n+            \/\/ Print empty line between methods\n+            println();\n+        }\n+        printSysInfo();\n+        super.printAnnotations(visibleAnnotations, invisibleAnnotations);\n+        super.printAnnotations(visibleTypeAnnotations, invisibleTypeAnnotations);\n+        String methSignature = getMethodModifiers();\n+        methSignature = methSignature.concat(Token.METHODREF.parseKey());\n+        methSignature = PadRight(methSignature, max(methSignature.length() + 1, SIGNATURE.parseKey().length() + getIndentSize() * 2));\n+        int keywordPadding = methSignature.length() - getIndentSize();\n+        \/\/ get JASM Signature info\n+        Pair<String, String> jasmSignInfo = (isSignaturePrintable) ?\n+                signature.getJasmPrintInfo((i) -> pool.inRange(i)) :\n@@ -279,2 +308,0 @@\n-        boolean extraMethodInfo = code != null || exc_table != null || defaultAnnotation != null;\n-        int newLineIdent;\n@@ -283,1 +310,4 @@\n-            methSignature = methSignature.concat(\"#\" + name_cpx + \":#\" + sig_cpx + signInfo.first + (extraMethodInfo ? \"\" : \";\"));\n+            methSignature = methSignature.concat(\"#%d:#%d\".formatted(name_cpx, descriptor_cpx)).concat(jasmSignInfo.first);\n+            if (noExtraInfo) {\n+                methSignature = methSignature.concat(\";\");\n+            }\n@@ -286,1 +316,1 @@\n-                    printIndent(PadRight(methSignature, getCommentOffset() - 1));\n+                    printIndent(PadRight(methSignature, getCommentOffset()));\n@@ -290,1 +320,0 @@\n-                newLineIdent = methSignature.length();\n@@ -292,1 +321,1 @@\n-                printIndent(PadRight(methSignature, getCommentOffset() - 1));\n+                printIndent(PadRight(methSignature, getCommentOffset()));\n@@ -294,4 +323,3 @@\n-\/\/                  concat(String.format(\"0x%04X \", access)).\n-                    concat(data.pool.getName(name_cpx) + \":\" + data.pool.getName(sig_cpx) + signInfo.second).\n-                    concat(defaultAnnotation != null ? \" *\/ \" : \" \");\n-                newLineIdent = getCommentOffset() + comment.length() - 1;\n+                        concat(\"%s:%s\".formatted(data.pool.getName(name_cpx), data.pool.getName(descriptor_cpx), jasmSignInfo.second)).\n+                        concat(jasmSignInfo.second).\n+                        concat(defaultAnnotation != null ? \" *\/ \" : \" \");\n@@ -302,1 +330,9 @@\n-                    concat(data.pool.getName(sig_cpx) + signInfo.second + (extraMethodInfo ? \" \" : \";\"));\n+                    concat(data.pool.getName(descriptor_cpx)).\n+                    concat(jasmSignInfo.second);\n+            if (noExtraInfo) {\n+                methSignature = methSignature.concat(\";\");\n+            } else if (!hasAnnotationParameters() && tableSignatureFormat) {\n+                methSignature = methSignature.concat(\": \");\n+            } else {\n+                methSignature = methSignature.concat(\" \");\n+            }\n@@ -304,1 +340,0 @@\n-            newLineIdent = methSignature.length();\n@@ -307,3 +342,5 @@\n-        \/\/ followed by default annotation\n-        if (defaultAnnotation != null) {\n-            defaultAnnotation.setCommentOffset(newLineIdent);\n+        \/\/ followed by default annotation (JLS 9.6.2)\n+        \/\/ public abstract Method #7:#8       \/* ivalue:\"()I\" *\/ default { #10 \/* 1 *\/ };\n+        if (hasDefaultAnnotation()) {\n+            \/\/ printIndent(PadRight(methSignature, getCommentOffset()));\n+            defaultAnnotation.incIndent().setCommentOffset(getIndentSize() - getIndentStep());\n@@ -312,1 +349,12 @@\n-            print(((code == null && exc_table == null) ? \";\" : \" \"));\n+            \/\/ finish up the method declaration\n+            if (noExtraInfo) {\n+                print(\";\");\n+            }\n+        }\n+\n+        if (tableSignatureFormat) {\n+            \/\/ print separately\n+            println();\n+            signature.disableNewLine().setKeywordPadding(keywordPadding).incIndent().\n+                    setCommentOffset(this.getCommentOffset() - getIndentStep());\n+            signature.print();\n@@ -314,0 +362,1 @@\n+\n@@ -315,2 +364,6 @@\n-        if (exc_table != null) {\n-            printExceptionTable(code == null);\n+        if (exceptions != null) {\n+            println();\n+            exceptions.setKeywordPadding(keywordPadding).incIndent().setCommentOffset(this.getCommentOffset() - getIndentStep());\n+            exceptions.print();\n+        } else {\n+            println();\n@@ -323,2 +376,4 @@\n-            if (exc_table != null) {\n-                print(\";\");\n+            if (hasAnnotationParameters()) {\n+                printMethodParameters();\n+            } else if (index == size - 1) {\n+                println();\n@@ -326,1 +381,0 @@\n-            println();\n@@ -330,13 +384,25 @@\n-    private void printExceptionTable(boolean abstractMethod) {\n-        String indexes = \"\",\n-                names = \"\",\n-                throwsClause = PadRight(Token.THROWS.parseKey(), PROGRAM_COUNTER_PLACEHOLDER_LENGTH);\n-        for (int i : exc_table) {\n-            if (printCPIndex)\n-                indexes = indexes.concat(indexes.isEmpty() ? \"\" : \", \").concat(\"#\" + i);\n-            names = names.concat(names.isEmpty() ? \"\" : \", \").concat(data.pool.getClassName(i));\n-        }\n-        println().incIndent();\n-        if (printCPIndex) {\n-            if (skipComments) {\n-                printIndent(throwsClause + indexes + (abstractMethod ? \";\" : \"\"));\n+    @Override\n+    public void tablePrint(int index, int size) throws IOException {\n+        \/\/There are no differences between the simple (jasm) and extended (table) presentations of record_component_info.\n+        jasmPrint(index, size);\n+    }\n+\n+\n+    @Override\n+    protected void printSysInfo() {\n+        if (sysInfo) {\n+            int paramCount = EModifier.isStatic(access) ? 0 : 1;\n+            String prefix = getIndentString() + \" *  \";\n+            String methodModifiers = getMethodModifiers();\n+            Type signatureType = signature != null ? signature.getSignatureType() :\n+                    new Signature<>(environment.getLogger(), descriptor_cpx).getType(pool);\n+            String methodName = data.pool.getString(name_cpx, funcInvalidCPIndex);\n+            boolean isConstructor = methodName.equals(\"<init>\");\n+            String methodSignature = signatureType.toString();\n+            if (signatureType instanceof Type.MethodType methodType) {\n+                paramCount += methodType.paramTypes.size();\n+            }\n+            int i = 0;\n+            if (isConstructor) {\n+                methodName = data.getClassName();\n+                methodSignature = methodSignature.substring(methodSignature.indexOf(\"(\"));\n@@ -344,4 +410,1 @@\n-                printIndent(PadRight(throwsClause +\n-                        indexes +\n-                        (abstractMethod ? \";\" : \"\"), getCommentOffset() - getIndentStep() - 1)).\n-                        print(\" \/\/ \" + names);\n+                i = methodSignature.indexOf('(');\n@@ -349,2 +412,15 @@\n-        } else {\n-            printIndent(throwsClause + names);\n+            methodName = methodSignature.substring(0, i).concat(methodName).\n+                    concat(methodSignature.substring(i)).replaceAll(\"\/\", \".\");\n+            String descriptor = data.pool.getString(descriptor_cpx, funcInvalidCPIndex);\n+\n+            printIndentLn(\"\/**\");\n+            println(prefix + methodModifiers + methodName);\n+            prefix = prefix.concat(getIndentString());\n+            println(prefix + \"descriptor: \" + descriptor);\n+            if (signature != null) {\n+                println(prefix + \"signature:  \" + data.pool.getString(signature.getCPIndex(), funcInvalidCPIndex));\n+            }\n+            println(prefix + \"flags: (0x%04x) %s\".formatted(access, EModifier.asNames(access, METHOD)));\n+            println(prefix + \"stack: %d, locals: %d, args_size: %d\".formatted(this.code.max_stack,\n+                    this.code.max_locals, paramCount));\n+            printIndentLn(\" *\/\");\n@@ -352,1 +428,0 @@\n-        decIndent();\n@@ -358,1 +433,1 @@\n-    static class ParamNameData {\n+    static class MethodParameterData {\n@@ -363,1 +438,1 @@\n-        public ParamNameData(int name, int access) {\n+        public MethodParameterData(int name, int access) {\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/MethodData.java","additions":234,"deletions":159,"binary":false,"changes":393,"status":"modified"},{"patch":"@@ -313,1 +313,1 @@\n-            return (Options.contains(Options.PR.CPX)) ? String.format(\"#%-4d \/* %s *\/\", getCPIndex(), name()) : name();\n+            return (Options.contains(Options.PrintOption.CP_INDEX)) ? String.format(\"#%-4d \/* %s *\/\", getCPIndex(), name()) : name();\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/ModuleContent.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n-import static org.openjdk.asmtools.jdis.Options.PR.CPX;\n+import static org.openjdk.asmtools.jdis.Options.PrintOption.CP_INDEX;\n@@ -40,1 +40,1 @@\n-public class ModuleData extends MemberData<ClassData>{\n+public class ModuleData extends MemberData<ClassData> {\n@@ -42,1 +42,1 @@\n-    protected final boolean printCPIndex = Options.contains(CPX);\n+    protected final boolean printCPIndex = Options.contains(CP_INDEX);\n@@ -98,1 +98,1 @@\n-        ModuleContent.Builder builder;\n+        ModuleContent.Builder builder = null;\n@@ -110,1 +110,0 @@\n-\n@@ -112,1 +111,0 @@\n-\n@@ -114,1 +112,8 @@\n-            throw new FormatError(environment.getLogger(), \"err.invalid_header\");\n+            if (bestEffort) {\n+                environment.getLogger().error(\"err.invalid_header\");\n+                if (builder == null) {\n+                    return;\n+                }\n+            } else {\n+                throw new FormatError(environment.getLogger(), \"err.invalid_header\");\n+            }\n@@ -116,1 +121,0 @@\n-\n@@ -129,1 +133,5 @@\n-            throw new FormatError(environment.getLogger(), \"err.invalid_requires\");\n+            if (bestEffort) {\n+                environment.getLogger().error(\"err.invalid_requires\");\n+            } else {\n+                throw new FormatError(environment.getLogger(), \"err.invalid_requires\");\n+            }\n@@ -153,1 +161,5 @@\n-            throw new FormatError(environment.getLogger(), \"err.invalid_exports\");\n+            if (bestEffort) {\n+                environment.getLogger().error(\"err.invalid_exports\");\n+            } else {\n+                throw new FormatError(environment.getLogger(), \"err.invalid_exports\");\n+            }\n@@ -177,1 +189,5 @@\n-            throw new FormatError(environment.getLogger(), \"err.invalid_opens\");\n+            if (bestEffort) {\n+                environment.getLogger().error(\"err.invalid_opens\");\n+            } else {\n+                throw new FormatError(environment.getLogger(), \"err.invalid_opens\");\n+            }\n@@ -190,1 +206,5 @@\n-            throw new FormatError(environment.getLogger(), \"err.invalid_uses\");\n+            if (bestEffort) {\n+                environment.getLogger().error(\"err.invalid_uses\");\n+            } else {\n+                throw new FormatError(environment.getLogger(), \"err.invalid_uses\");\n+            }\n@@ -209,1 +229,5 @@\n-            throw new FormatError(environment.getLogger(), \"err.invalid_provides\");\n+            if (bestEffort) {\n+                environment.getLogger().error(\"err.invalid_provides\");\n+            } else {\n+                throw new FormatError(environment.getLogger(), \"err.invalid_provides\");\n+            }\n@@ -216,1 +240,1 @@\n-        if (moduleContent != null ) {\n+        if (moduleContent != null) {\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/ModuleData.java","additions":39,"deletions":15,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,7 +25,1 @@\n-import org.openjdk.asmtools.jasm.JasmTokens;\n-\n-import java.io.DataInputStream;\n-import java.io.IOException;\n-\n-import static java.lang.String.format;\n-import static org.openjdk.asmtools.jasm.JasmTokens.Token.NESTHOST;\n+import static org.openjdk.asmtools.jasm.TableFormatModel.Token.NEST_HOST;\n@@ -36,0 +30,5 @@\n+ * NestHost_attribute {\n+ * u2 attribute_name_index;\n+ * u4 attribute_length;\n+ * u2 host_class_index;\n+ * }\n@@ -38,3 +37,1 @@\n-public class NestHostData extends Indenter {\n-    ClassData cls;\n-    int host_class_index;\n+public class NestHostData extends AttributeData<NestHostData> {\n@@ -42,11 +39,2 @@\n-    public NestHostData(ClassData cls) {\n-        super(cls.toolOutput);\n-        this.cls = cls;\n-    }\n-\n-    public NestHostData read(DataInputStream in, int attribute_length) throws IOException, ClassFormatError {\n-        if (attribute_length != 2) {\n-            throw new ClassFormatError(\"ATT_NestHost: Invalid attribute length\");\n-        }\n-        host_class_index = in.readUnsignedShort();\n-        return this;\n+    public NestHostData(ClassData classData) {\n+        super(classData, NEST_HOST);\n@@ -55,11 +43,4 @@\n-    @Override\n-    public void print() {\n-        if (printCPIndex) {\n-            if( skipComments ) {\n-                printIndent(\"%s #%d;\", NESTHOST.parseKey(), host_class_index);\n-            } else {\n-                printIndent(PadRight(format(\"%s #%d;\", NESTHOST.parseKey(), host_class_index),\n-                        getCommentOffset() - 1)).println(\" \/\/ \" + cls.pool.ConstantStrValue(host_class_index));\n-            }\n-        } else {\n-            printIndent(\"%s %s;\", NESTHOST.parseKey(), cls.pool.StringValue(host_class_index));\n+    public String calculateName() {\n+        if (this.name == null) {\n+            this.name = pool.getClassName(cpx,\n+                            index -> \"%s #%d\".formatted(logger.getResourceString(\"info.invalid_cp_entry\"), index));\n@@ -67,0 +48,1 @@\n+        return this.name;\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/NestHostData.java","additions":15,"deletions":33,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -30,0 +30,3 @@\n+import static java.lang.String.format;\n+import static org.openjdk.asmtools.jasm.TableFormatModel.Token.NEST_MEMBERS;\n+\n@@ -43,1 +46,2 @@\n-        super(cls, JasmTokens.Token.NESTMEMBERS.parseKey());\n+        super(cls, JasmTokens.Token.NESTMEMBERS);\n+        tableToken = NEST_MEMBERS;\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/NestMembersData.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+import java.util.function.Consumer;\n@@ -29,0 +30,2 @@\n+import static org.openjdk.asmtools.jdis.Indenter.*;\n+import static org.openjdk.asmtools.jdis.Options.PrintOption.*;\n@@ -35,7 +38,24 @@\n-     public enum PR {\n-        CP(\"Constant Pool\"),\n-        LNT(\"Line Number table\"),\n-        PC(\"Program Counter - for all instructions\"),\n-        LABS(\"Labels (as identifiers)\"),\n-        CPX(\"CP index along with arguments\"),\n-        SRC(\"Source Line as comment\"),\n+    \/\/ Initial options correspond to calling the tool without options.\n+    static private final EnumSet<PrintOption> PRINT_OPTIONS = EnumSet.of(\n+            \/\/ default option(s)\n+            LABELS);\n+\n+    public static String getPrintOptions() {\n+        return PRINT_OPTIONS.stream().map(op -> format(\"%-26s: \\\"%s\\\"\", op.name(), op.descriptor)).\n+                collect(Collectors.joining(\"\\n\"));\n+    }\n+\n+    \/\/ Print Options\n+    public enum PrintOption {\n+        NONE(\"No options\"),\n+        CONSTANT_POOL(\"Constant Pool\"),\n+        PRINT_BCI(\"Program Counter - for all instructions\"),\n+        LABELS(\"Labels (as identifiers)\"),\n+        CP_INDEX(\"CP index along with arguments\"),\n+        LINE_NUMBER_TABLE_Numbers(\"Line Numbers in comments\"),\n+        LINE_NUMBER_TABLE_Lines(\"Java Source Lines in comments\"),\n+        LINE_NUMBER_TABLE_Table(\"LineNumberTable attribute as table\"),\n+        LINE_NUMBER_TABLE_All(\"Line Numbers, Source Lines, attribute as Table\", (option) -> setGroupOption(option)),\n+        LOCAL_VARIABLE_Vars(\"Print LocalVariableTable attribute\"),\n+        LOCAL_VARIABLE_Types(\"Print LocalVariableTypeTable attribute\"),\n+        LOCAL_VARIABLE_All(\"Print both LocalVariableTable and LocalVariableTypeTable attributes\", (option) -> setGroupOption(option)),\n@@ -43,1 +63,0 @@\n-        VAR(\"Local variables declarations\"),\n@@ -45,2 +64,13 @@\n-        NC(\"No comments, suppress printing comments\"),\n-        VERBOSE(\"Verbose information\");\n+        SYSINFO(\"system information\"),\n+        NO_COMMENTS(\"No comments, suppress printing comments\"),\n+        VERBOSE(\"Verbose information\"),\n+        TABLE(\"Attributes as table\"),\n+        DROP_Source(\"Discard SourceFile attribute\"),\n+        DROP_Signatures(\"Discard Signature attribute\"),\n+        DROP_Classes(\"Discard this_class and super_class pair\"),\n+        DROP_CharacterRange(\"Discard CharacterRangeTable attribute\"),\n+        DROP_All(\"Discard SourceFile, CharacterRangeTable attributes, this_class and super_class pair\", (option) -> setGroupOption(option)),\n+        DETAILED_Output(\"Detailed output\"),\n+        EXTRA_DETAILED_Output(\"Detailed output, this_class and super_class pair\"),\n+        BEST_EFFORT(\"Print as much as possible despite errors\");\n+\n@@ -48,0 +78,51 @@\n+        final Consumer<PrintOption> action;\n+\n+        PrintOption(String descriptor) {\n+            this.descriptor = descriptor;\n+            this.action = null;\n+        }\n+\n+        PrintOption(String descriptor, Consumer<PrintOption> action) {\n+            this.descriptor = descriptor;\n+            this.action = action;\n+        }\n+\n+        public void apply() {\n+            if (this.action != null)\n+                action.accept(this);\n+            else\n+                set(this);\n+        }\n+\n+        \/**\n+         * @return PR if PR value has format {Prefix}{Any Chars}_{flag} and flag == postfix otherwise null\n+         *\/\n+        public static PrintOption getStringFlag(String prefix, String flag) {\n+            for (PrintOption item : PrintOption.values()) {\n+                String name = item.name();\n+                if (name.startsWith(prefix)) {\n+                    int ind = item.name().lastIndexOf('_');\n+                    if (ind > 0 && name.substring(ind + 1).equalsIgnoreCase(flag)) {\n+                        return item;\n+                    }\n+                }\n+            }\n+            return null;\n+        }\n+\n+        private static final EnumSet<PrintOption> inProgresses = EnumSet.of(\n+                DROP_CharacterRange);\n+\n+        public boolean isActive() {\n+            return !PrintOption.inProgresses.contains(this);\n+        }\n+    }\n+\n+    static private final EnumSet<PrintOption> DETAILED_OUTPUT = EnumSet.of(      \/\/ -g:              detailed output format\n+            CONSTANT_POOL,\n+            PRINT_BCI,\n+            CP_INDEX,\n+            \/\/ Print LocalVariables, LocalVariableTypes only if it's specified.\n+            \/\/ LOCAL_VARIABLE_Vars, LOCAL_VARIABLE_Types,\n+            DETAILED_Output\n+    );\n@@ -49,11 +130,15 @@\n-         PR(String descriptor) {\n-             this.descriptor=descriptor;\n-         }\n-     };\n-\n-    static private final EnumSet<PR> JASM = EnumSet.of(PR.LABS);    \/\/ <no options>: default option(s)\n-    static private final EnumSet<PR> DETAILED_OUTPUT = EnumSet.of(  \/\/ -g:           detailed output format\n-            PR.CP,\n-            PR.PC,\n-            PR.CPX,\n-            PR.VAR\n+    static private final EnumSet<PrintOption> DROP_ALL = EnumSet.of(             \/\/ -drop || -drop:all\n+            DROP_Source,\n+            DROP_Classes,\n+            DROP_CharacterRange\n+    );\n+\n+    static private final EnumSet<PrintOption> LINE_NUMBER_TABLE_ALL = EnumSet.of(\n+            LINE_NUMBER_TABLE_Numbers,\n+            LINE_NUMBER_TABLE_Lines,\n+            LINE_NUMBER_TABLE_Table\n+    );\n+\n+    static private final EnumSet<PrintOption> LOCAL_VARIABLE_ALL = EnumSet.of(\n+            LOCAL_VARIABLE_Vars,\n+            LOCAL_VARIABLE_Types\n@@ -62,2 +147,0 @@\n-    static private EnumSet<PR> printOptions = JASM;\n-    \/* -------------------------------------------------------- *\/\n@@ -65,2 +148,5 @@\n-    public static  void set(PR val) {\n-        printOptions.add(val);\n+    public static void set(PrintOption val) {\n+        if (val == PRINT_BCI) {\n+            TABLE_PADDING = OPERAND_PLACEHOLDER_LENGTH + INSTR_PREFIX_LENGTH + 3;\n+        }\n+        PRINT_OPTIONS.add(val);\n@@ -69,3 +155,5 @@\n-    public static  void setDetailedOutputOptions() {\n-        printOptions.addAll(DETAILED_OUTPUT);\n-        printOptions.remove(PR.LABS);\n+    public static void unset(PrintOption val) {\n+        if (val == PRINT_BCI) {\n+            TABLE_PADDING = OPERAND_PLACEHOLDER_LENGTH + INSTR_PREFIX_LENGTH + 1;\n+        }\n+        PRINT_OPTIONS.remove(val);\n@@ -74,3 +162,3 @@\n-    public static  void unsetDetailedOutputOptions() {\n-        printOptions.removeAll(DETAILED_OUTPUT);\n-        printOptions.add(PR.LABS);\n+    public static void setDetailedOutputOptions() {\n+        set(DETAILED_OUTPUT);\n+        unset(PrintOption.LABELS);\n@@ -79,1 +167,5 @@\n-    public static boolean contains(PR val) { return printOptions.contains(val); }\n+    public static void set(EnumSet<PrintOption> vals) {\n+        for (PrintOption val : vals) {\n+            set(val);\n+        }\n+    }\n@@ -81,1 +173,5 @@\n-    public static boolean traceEnabled() { return printOptions.contains(PR.TRACE); }\n+    public static void unset(EnumSet<PrintOption> vals) {\n+        for (PrintOption val : vals) {\n+            unset(val);\n+        }\n+    }\n@@ -83,3 +179,7 @@\n-    public static String asShortString() {\n-        return  format(\"[ %s ]\",\n-                printOptions.stream().map(item -> item.name()).collect(Collectors.joining(\", \")));\n+    public static void setGroupOption(PrintOption option) {\n+        switch (option) {\n+            case LOCAL_VARIABLE_All -> set(LOCAL_VARIABLE_ALL);\n+            case LINE_NUMBER_TABLE_All -> set(LINE_NUMBER_TABLE_ALL);\n+            case DROP_All -> set(DROP_ALL);\n+            default -> throw new RuntimeException(\"%s ia not group option\".formatted(option.name()));\n+        }\n@@ -87,3 +187,18 @@\n-    public static String asLongString() {\n-        return format(\"Prints: [ %s ]\",\n-                printOptions.stream().map(item -> item.descriptor).collect(Collectors.joining(\", \")));\n+\n+    public static void setDefaultOutputOptions() {\n+        PRINT_OPTIONS.clear();\n+        set(PrintOption.LABELS);\n+    }\n+\n+    public static boolean contains(PrintOption... vals) {\n+        for (PrintOption val : vals) {\n+            if (PRINT_OPTIONS.contains(val)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    public static String asShortString() {\n+        return format(\"[ %s ]\",\n+                PRINT_OPTIONS.stream().map(item -> item.name()).collect(Collectors.joining(\", \")));\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/Options.java","additions":155,"deletions":40,"binary":false,"changes":195,"status":"modified"},{"patch":"@@ -32,0 +32,10 @@\n+ *\n+ *  RuntimeVisibleParameterAnnotations | RuntimeInvisibleParameterAnnotations_attribute {\n+ *     u2 attribute_name_index;\n+ *     u4 attribute_length;\n+ *     u1 num_parameters;\n+ *     {   u2         num_annotations;\n+ *         annotation annotations[num_annotations];\n+ *     } parameter_annotations[num_parameters];\n+ * }\n+ *\n@@ -43,1 +53,1 @@\n-    public int numParams() {\n+    public int numParameters() {\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/ParameterAnnotationData.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-        super(cls, JasmTokens.Token.PERMITTEDSUBCLASSES.parseKey());\n+        super(cls, JasmTokens.Token.PERMITTEDSUBCLASSES);\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/PermittedSubclassesData.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,38 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.asmtools.jdis;\n-\n-import org.openjdk.asmtools.jasm.JasmTokens;\n-\n-import java.io.DataInputStream;\n-import java.io.IOException;\n-\n-public class PreloadData extends ClassArrayData {\n-    public PreloadData(ClassData cls) {\n-        super(cls, JasmTokens.Token.PRELOAD.parseKey());\n-    }\n-\n-    public PreloadData read(DataInputStream in, int attribute_length) throws IOException, ClassFormatError {\n-        return (PreloadData) super.read(in, attribute_length);\n-    }\n-}\n\\ No newline at end of file\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/PreloadData.java","additions":0,"deletions":38,"binary":false,"changes":38,"status":"deleted"},{"patch":"@@ -28,0 +28,1 @@\n+\n@@ -33,0 +34,8 @@\n+\n+    \/**\n+     * @return true if a table format is supported\n+     *\/\n+    default boolean tableFormatSupported() {\n+        return false;\n+    }\n+\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/Printable.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import org.openjdk.asmtools.jasm.TableFormatModel;\n@@ -33,1 +34,1 @@\n-import static org.openjdk.asmtools.jasm.JasmTokens.Token.*;\n+import static org.openjdk.asmtools.jasm.JasmTokens.Token.RECORD;\n@@ -40,1 +41,1 @@\n-public class RecordData extends  MemberData<ClassData> {\n+public class RecordData extends MemberData<ClassData> {\n@@ -46,0 +47,1 @@\n+        this.tableToken = TableFormatModel.Token.RECORD_DATA;\n@@ -59,1 +61,1 @@\n-     * Prints the record data to the current output stream. called from ClassData.\n+     * Prints the record data to the current output stream. Called from ClassData.\n@@ -61,0 +63,1 @@\n+    @Override\n@@ -64,1 +67,2 @@\n-            printIndentLn(RECORD.parseKey() + \" {\");\n+            boolean isExtendedPrintingSupported = tableToken.isExtendedPrintingSupported();\n+            printIndentLn(\"%s {\".formatted(RECORD.parseKey()));\n@@ -68,3 +72,4 @@\n-                if (i != 0 && cn.getAnnotationsCount() > 0)\n-                    cn.toolOutput.printlns(\"\");\n-                cn.print();\n+                if (isExtendedPrintingSupported && isTableOutput())\n+                    cn.tablePrint(i, count);\n+                else\n+                    cn.jasmPrint(i, count);\n@@ -78,4 +83,4 @@\n-     *     u2             name_index;\n-     *     u2             descriptor_index;\n-     *     u2             attributes_count;\n-     *     attribute_info attributes[attributes_count];\n+     * u2             name_index;\n+     * u2             descriptor_index;\n+     * u2             attributes_count;\n+     * attribute_info attributes[attributes_count];\n@@ -84,1 +89,1 @@\n-    private static class Component extends MemberData<ClassData> {\n+    public static class Component extends MemberData<ClassData> {\n@@ -117,2 +122,3 @@\n-            environment.traceln(\"RecordComponent: name[\" + name_cpx + \"]=\" + data.pool.getString(name_cpx, index->\"?\")\n-                    + \" descriptor[\" + descriptor_cpx + \"]=\" + data.pool.getString(descriptor_cpx, index->\"?\"));\n+            environment.traceln(\"RecordComponent: name[%d]=%s descriptor[%d]=%s\".\n+                    formatted(name_cpx, data.pool.getString(name_cpx, index -> \"?\"),\n+                            descriptor_cpx, data.pool.getString(descriptor_cpx, index -> \"?\")));\n@@ -125,1 +131,1 @@\n-         * Prints the component data to the current output stream. called from RecordData.\n+         * Prints the component data to the current output stream. Called from RecordData.\n@@ -127,1 +133,3 @@\n-        public void print() throws IOException {\n+        @Override\n+        public void jasmPrint(int index, int size) throws IOException {\n+            boolean printSignature = signature != null && signature.isPrintable() && tableFormat;\n@@ -129,8 +137,22 @@\n-                super.printAnnotations();\n-            \/\/ print component\n-            StringBuilder prefix = new StringBuilder(getIndentString());\n-            \/\/ add synthetic, deprecated if necessary\n-            prefix.append(getPseudoFlagsAsString());\n-            \/\/ component\n-            prefix.append(JasmTokens.Token.COMPONENT.parseKey()).append(' ');\n-            printVar(prefix, null, name_cpx, descriptor_cpx, 0);\n+            super.printAnnotations(visibleAnnotations, invisibleAnnotations);\n+            super.printAnnotations(visibleTypeAnnotations, invisibleTypeAnnotations);\n+            \/\/ print component: add synthetic, deprecated if necessary\n+            int keywordPadding = getPrintAttributeKeyPadding() + getIndentSize() * 2 - INDENT_STEP;\n+            String prefix = PadRight(\n+                    Indent(getPseudoFlagsAsString()).concat(JasmTokens.Token.COMPONENT.parseKey()), keywordPadding);\n+            printVar(new StringBuilder(prefix), null,\n+                    printSignature ? \":\" : \";\",\n+                    name_cpx, descriptor_cpx, UNDEFINED);\n+            \/\/ print Signature if necessary\n+            if (printSignature) {\n+                keywordPadding -= getIndentSize() + INDENT_STEP;\n+                signature.setKeywordPadding(keywordPadding).incIndent().incIndent().\n+                        setCommentOffset(this.getCommentOffset() - getIndentStep() * 2 - INDENT_STEP);\n+                signature.print();\n+            }\n+        }\n+\n+        @Override\n+        public void tablePrint(int index, int size) throws IOException {\n+            \/\/There are no differences between the simple (jasm) and extended (table) presentations of record_component_info.\n+            jasmPrint(index, size);\n@@ -139,0 +161,1 @@\n+\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/RecordData.java","additions":47,"deletions":24,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,2 @@\n+import org.openjdk.asmtools.jdis.notations.Signature;\n+import org.openjdk.asmtools.jdis.notations.Type;\n@@ -35,0 +37,1 @@\n+import static org.openjdk.asmtools.jasm.TableFormatModel.Token.SIGNATURE;\n@@ -37,1 +40,1 @@\n- * The Signature attribute data\n+ * The Signature attribute data since class file 49.0\n@@ -39,1 +42,5 @@\n- * since class file 49.0\n+ * Signature_attribute {\n+ * u2 attribute_name_index;\n+ * u4 attribute_length;\n+ * u2 signature_index;\n+ * }\n@@ -42,0 +49,3 @@\n+    private int cpIndex;\n+    private Type signatureType = null;\n+    private int keywordPadding = -1;\n@@ -43,1 +53,2 @@\n-    private int index;\n+    \/\/ in some cases, the new line should not end the printed signature\n+    private String eol = System.getProperty(\"line.separator\");\n@@ -47,0 +58,10 @@\n+        this.tableToken = SIGNATURE;\n+    }\n+\n+    public int getCPIndex() {\n+        return cpIndex;\n+    }\n+\n+    @Override\n+    public boolean isPrintable() {\n+        return !dropSignatures;\n@@ -51,2 +72,7 @@\n-            throw new FormatError(environment.getLogger(),\n-                    \"err.invalid.attribute.length\", EAttribute.ATT_Signature.printValue(), attribute_length);\n+            if (bestEffort) {\n+                environment.getLogger().error(\n+                        \"err.invalid.attribute.length\", EAttribute.ATT_Signature.printValue(), attribute_length);\n+            } else {\n+                throw new FormatError(environment.getLogger(),\n+                        \"err.invalid.attribute.length\", EAttribute.ATT_Signature.printValue(), attribute_length);\n+            }\n@@ -54,1 +80,1 @@\n-        index = in.readUnsignedShort();\n+        cpIndex = in.readUnsignedShort();\n@@ -60,1 +86,10 @@\n-        return format(\"signature[%d]=%s\", getIndex(), pool.StringValue(getIndex()));\n+        return format(\"signature[%d]=%s\", cpIndex, pool.StringValue(cpIndex));\n+    }\n+\n+    public String getJavaSignature() {\n+        if (signatureType == null) {\n+            signatureType = new Signature(environment.getLogger(), cpIndex).getType(pool);\n+        }\n+        return signatureType != null ?\n+                signatureType.toString().replace('\/', '.') :\n+                pool.StringValue(cpIndex);\n@@ -63,2 +98,5 @@\n-    public int getIndex() {\n-        return index;\n+    public Type getSignatureType() {\n+        if (signatureType == null) {\n+            signatureType = new Signature(environment.getLogger(), cpIndex).getType(pool);\n+        }\n+        return signatureType;\n@@ -67,2 +105,50 @@\n-    public String asString() {\n-        return pool.StringValue(index);\n+    public SignatureData setKeywordPadding(int keywordPadding) {\n+        this.keywordPadding = keywordPadding;\n+        return this;\n+    }\n+\n+    @Override\n+    protected int getPrintAttributeKeyPadding() {\n+        return keywordPadding == -1 ? super.getPrintAttributeKeyPadding() : keywordPadding;\n+    }\n+\n+    public SignatureData disableNewLine() {\n+        this.eol = \"\";\n+        return this;\n+    }\n+\n+    public SignatureData enableNewLine() {\n+        this.eol = System.getProperty(\"line.separator\");\n+        return this;\n+    }\n+\n+    @Override\n+    protected void tablePrint() {\n+        printIndent(PadRight(tableToken.printKey(), getPrintAttributeKeyPadding()));\n+        String sign = pool.StringValue(cpIndex);\n+        if (printCPIndex) {\n+            if (skipComments) {\n+                print(\"#%d;\".formatted(cpIndex).concat(eol));\n+            } else {\n+                print(PadRight(\"#%d;\".formatted(cpIndex), getPrintAttributeCommentPadding())).\n+                        print(\" \/\/ \".concat(sign).concat(eol));\n+            }\n+        } else {\n+            print(sign.concat(\";\").concat(eol));\n+        }\n+    }\n+\n+    @Override\n+    protected void jasmPrint() {\n+        printIndent(PadRight(SIGNATURE.parseKey(), getPrintAttributeKeyPadding()));\n+        String sign = pool.StringValue(cpIndex);\n+        if (printCPIndex) {\n+            if (skipComments) {\n+                print(\"#%d;\".formatted(cpIndex).concat(eol));\n+            } else {\n+                print(PadRight(\"#%d;\".formatted(cpIndex), getPrintAttributeCommentPadding())).\n+                        print(\" \/\/ \".concat(sign).concat(eol));\n+            }\n+        } else {\n+            print(sign.concat(\";\").concat(eol));\n+        }\n@@ -73,2 +159,3 @@\n-     * @return string presentation of index and signature used to print\n-     * ClassFile, field_info, method_info, or record_component_info\n+     * @return a string representation of the index and signature used to print the JASM-specific signature\n+     * of ClassFile, field_info, method_info, or record_component_info.\n+     * Alternatively, return an empty pair (new Pair(\"\", \"\")) if extended (table-specific) printing is requested.\n@@ -76,3 +163,6 @@\n-    public Pair<String, String> getPrintInfo(Function<Integer, Boolean> checkRange) {\n-        return new Pair<>(format(\":#%d\", index),\n-                checkRange.apply(index) ? format(\":%s\", pool.StringValue(index)) : \":?? invalid index\");\n+    public Pair<String, String> getJasmPrintInfo(Function<Integer, Boolean> checkRange) {\n+        return (tableFormat) ?\n+                new Pair<>(\"\", \"\") :\n+                new Pair<>(format(\":#%d\", cpIndex),\n+                        checkRange.apply(cpIndex) ? \":\" + pool.StringValue(cpIndex) :\n+                                \":?%d Invalid constant_pool index\".formatted(cpIndex));\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/SignatureData.java","additions":107,"deletions":17,"binary":false,"changes":124,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,7 +25,1 @@\n-import org.openjdk.asmtools.jasm.JasmTokens;\n-\n-import java.io.DataInputStream;\n-import java.io.IOException;\n-\n-import static java.lang.String.format;\n-import static org.openjdk.asmtools.jasm.JasmTokens.Token.SOURCEFILE;\n+import static org.openjdk.asmtools.jasm.TableFormatModel.Token.SOURCE_FILE;\n@@ -34,0 +28,2 @@\n+ * The SourceFile attribute since 45.3\n+ * <p>\n@@ -35,3 +31,3 @@\n- *     u2 attribute_name_index;\n- *     u4 attribute_length;\n- *     u2 sourcefile_index;\n+ * u2 attribute_name_index;\n+ * u4 attribute_length;\n+ * u2 sourcefile_index;\n@@ -40,5 +36,1 @@\n-public class SourceFileData extends Indenter {\n-    private ConstantPool pool;\n-    \/\/ Constant Pool index to a file reference to the Java source\n-    private int source_cpx = 0;\n-    private String sourceName = null;\n+public class SourceFileData extends AttributeData<SourceFileData> {\n@@ -47,7 +39,1 @@\n-        super(classData.toolOutput);\n-        pool = classData.pool;\n-    }\n-\n-    public SourceFileData read(DataInputStream in, int attribute_length) throws IOException, ClassFormatError {\n-        this.source_cpx = in.readUnsignedShort();\n-        return this;\n+        super(classData, SOURCE_FILE);\n@@ -58,16 +44,1 @@\n-        return getSourceName() != null;\n-    }\n-\n-    @Override\n-    public void print() {\n-        if (printCPIndex) {\n-            if(skipComments ) {\n-                printIndentLn(format(\"%s #%d;\", SOURCEFILE.parseKey(), source_cpx));\n-            } else {\n-                printIndent(PadRight(format(\"%s #%d;\", SOURCEFILE.parseKey(), source_cpx), getCommentOffset() - 1)).\n-                        println((sourceName != null) ? \" \/\/ \" + sourceName : \"\");\n-            }\n-        } else {\n-            printIndent(PadRight(SOURCEFILE.parseKey(),OPERAND_PLACEHOLDER_LENGTH + INSTR_PREFIX_LENGTH + 1)).\n-                    println( \"\\\"\" + (sourceName != null ? sourceName : \"???\") + \"\\\";\");\n-        }\n+        return !dropSourceFile && calculateName() != null;\n@@ -76,3 +47,3 @@\n-    public String getSourceName() {\n-        if( sourceName == null ) {\n-            this.sourceName = pool.getString(source_cpx, index -> null);\n+    public String calculateName() {\n+        if (this.name == null) {\n+            this.name = pool.getString(cpx, index -> null);\n@@ -80,1 +51,1 @@\n-        return this.sourceName;\n+        return this.name;\n@@ -83,2 +54,2 @@\n-    public SourceFileData setSourceName() {\n-        this.sourceName = pool.getString(source_cpx, index -> \"#\" + index);\n+    public SourceFileData getName() {\n+        name = pool.getString(cpx, index -> \"#%d\".formatted(index));\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/SourceFileData.java","additions":16,"deletions":45,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,3 @@\n-import org.openjdk.asmtools.common.FormatError;\n+import org.openjdk.asmtools.asmutils.Pair;\n+import org.openjdk.asmtools.asmutils.Range;\n+import org.openjdk.asmtools.common.structure.EAttribute;\n@@ -30,0 +32,3 @@\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n@@ -31,0 +36,1 @@\n+import java.util.stream.Collectors;\n@@ -33,0 +39,7 @@\n+import static org.openjdk.asmtools.common.structure.EAttribute.ATT_StackMap;\n+import static org.openjdk.asmtools.common.structure.EAttribute.ATT_StackMapTable;\n+import static org.openjdk.asmtools.common.structure.StackMap.EntryType.EARLY_LARVAL;\n+import static org.openjdk.asmtools.common.structure.StackMap.EntryType.FULL_FRAME;\n+import static org.openjdk.asmtools.jasm.JasmTokens.Token.*;\n+import static org.openjdk.asmtools.jasm.TableFormatModel.Token.STACK_MAP;\n+import static org.openjdk.asmtools.jasm.TableFormatModel.Token.STACK_MAP_TABLE;\n@@ -35,1 +48,24 @@\n- * represents one entry of StackMap attribute\n+ * Represents one entry of StackMapTable  attribute:\n+ * <p>\n+ * union stack_map_entry {\n+ * same_frame;\n+ * same_locals_1_stack_item_frame;\n+ * same_locals_1_stack_item_frame_extended;\n+ * chop_frame;\n+ * same_frame_extended;\n+ * append_frame;\n+ * full_frame;\n+ * }\n+ * <p>\n+ * or StackMap attribute\n+ * <p>\n+ * stack_map_entry {\n+ * u2 offset;\n+ * u2 number_of_locals;\n+ * verification_type_info locals[number_of_locals];\n+ * u2 number_of_stack_items;\n+ * verification_type_info stack[number_of_stack_items];\n+ * }\n+ *\n+ * @see <a href=\"https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se17\/html\/jvms-4.html#jvms-4.7.3\">Code Attribute<\/a>\n+ * @see <a href=\"https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se17\/html\/jvms-4.html#jvms-4.7.4\">StackMapTable Attribute<\/a>\n@@ -37,3 +73,7 @@\n-class StackMapData extends MemberData<CodeData> {\n-    EAttributeType type;\n-    StackMap.FrameType stackFrameType = null;\n+public class StackMapData extends MemberData<CodeData> {\n+\n+    static Range<Integer> range = new Range<>(247, 255);\n+\n+    private final EAttribute attribute;\n+\n+    StackMap.EntryType stackEntryType;\n@@ -41,1 +81,3 @@\n-    int stackFrameTypeValue;\n+    int stackEntryTypeValue;\n+    boolean isWrapped = false;\n+    int wrapLevel = 0;   \/\/ isWrapped == false\n@@ -46,0 +88,166 @@\n+    int[] unsetFields;\n+\n+    private Printer printer;\n+    private int doubleIndent = getIndentStep() * 2;\n+    private int tripleIndent = getIndentStep() * 3;\n+    private String intLine = \"\";\n+    private String strLine = \"\";\n+    private int shift;\n+    private String tableHeader = \"\";\n+\n+    @FunctionalInterface\n+    public interface Printer {\n+        void accept(Integer t, Integer u) throws IOException;\n+    }\n+\n+    \/**\n+     * Prints the StackMap data in Jasm format.\n+     *\n+     * @param index the index of the current entry\n+     * @param size  the total number of entries\n+     * @throws IOException if an I\/O error occurs while printing\n+     *\/\n+    @Override\n+    protected void jasmPrint(int index, int size) throws IOException {\n+        incIndent();\n+        if (index == 0) {\n+            printIndentLn(tableHeader);\n+        }\n+        printer.accept(index, size);\n+        decIndent();\n+    }\n+\n+    private void stackMapPrinter(int index, int size) throws IOException {\n+        println(enlargedIndent(intLine.formatted(BYTECODEOFFSET.parseKey(), frame_pc), getIndentStep()));\n+        for (Map.Entry<String, Pair<Boolean, int[]>> entry : Map.of(\n+                \"%-10s\".formatted(STACKMAP.parseKey()), new Pair<>(stackMap != null, stackMap),\n+                \"%-10s\".formatted(LOCALSMAP.parseKey()), new Pair<>(lockMap != null, lockMap)).entrySet()) {\n+            if (entry.getValue().first) {\n+                int[] map = entry.getValue().second;\n+                Pair<String, String> line = getMapListAsString(map, \" \");\n+                String record = strLine.formatted(entry.getKey(), \"[\" + (printCPIndex ? line.first : line.second) + \"]\");\n+                if (printCPIndex) {\n+                    if (skipComments) {\n+                        println(enlargedIndent(record, getIndentStep() * 2));\n+                    } else {\n+                        print(PadRight(enlargedIndent(record, getIndentStep()), getCommentOffsetFor(27, 2)));\n+                        println(map.length == 0 ? \"\" : \" \/\/\" + line.second);\n+                    }\n+                } else {\n+                    println(enlargedIndent(record, getIndentStep() * 2));\n+                }\n+            }\n+        }\n+    }\n+\n+    private void stackMapTablePrinter(int index, int size) {\n+        String strFrameType = intLine.formatted(FRAMETYPE.parseKey(), stackEntryTypeValue);\n+        int padding = 0;\n+\n+        if (isWrapped) {\n+            incIndent(wrapLevel);\n+        }\n+\n+        if (skipComments && printCPIndex) {\n+            printIndentLn(strFrameType);\n+        } else {\n+            padding = doubleIndent + ((printCPIndex) ?\n+                    getCommentOffsetFor(strFrameType, 2) :\n+                    strFrameType.length() + padding * getIndentStep());\n+            if (printCPIndex) {\n+                printIndent(PadRight(strFrameType, padding - getIndentStep() * (wrapLevel + 2)));\n+                println(skipComments ? \"\" : \" \/\/ \" + stackEntryType.printName());\n+            } else {\n+                printIndent(PadRight(strFrameType, padding - getIndentStep() * wrapLevel));\n+                println(skipComments ? \"\" : \" \/\/ \" + stackEntryType.printName());\n+            }\n+        }\n+        if (range.in(stackEntryTypeValue)) {\n+            println(enlargedIndent(intLine.formatted(OFFSETDELTA.parseKey(), offset), doubleIndent));\n+        }\n+\n+        if (stackEntryType == EARLY_LARVAL) {\n+            if (unsetFields != null) {\n+                final int limit = unsetFields.length - 1;\n+                String delim = limit >= 0 ? \"; \" : \"\";\n+                String prefix = \"%-12s\".formatted(UNSETFIELDS.parseKey());\n+                Pair<List<String>, List<String>> line = getFieldListAsString(unsetFields);\n+                String left = line.first.stream().collect(Collectors.joining(\", \")).concat(delim);\n+                String right = line.second.stream().collect(Collectors.joining(\", \")).concat(delim);\n+                String record = strLine.formatted(prefix, \"[ \" + (printCPIndex ? left : right) + \"] {\");\n+                if (printCPIndex) {\n+                    if (skipComments) {\n+                        println(enlargedIndent(record, doubleIndent));\n+                    } else {\n+                        if (limit <= 0) {\n+                            print(PadRight(enlargedIndent(record, doubleIndent), padding));\n+                            println(unsetFields.length == 0 ? \"\" : \" \/\/ \" + right);\n+                        } else {\n+                            String str = PadRight(enlargedIndent(strLine.formatted(\n+                                    prefix, \"[ \" + line.first.getFirst().concat(\",\")), doubleIndent), padding);\n+                            int offs = str.indexOf('[') - INDENT_STEP * (wrapLevel + 1);\n+                            print(str).println(\" \/\/ \" + line.second.getFirst());\n+                            for (int i = 1; i <= limit; i++) {\n+                                delim = i == limit ? \"; ]  {\" : \",\";\n+                                String id = line.first.get(i);\n+                                String field = line.second.get(i);\n+                                print(PadRight(enlargedIndent(id.concat(delim), offs), padding)).\n+                                        println(\" \/\/ \" + field);\n+                            }\n+                        }\n+                    }\n+                } else {\n+                    if (limit <= 0) {\n+                        println(enlargedIndent(record, doubleIndent));\n+                    } else {\n+                        \/\/ first element\n+                        println(enlargedIndent(strLine.formatted(\n+                                prefix, \"[ \" + line.second.getFirst().concat(\",\")), doubleIndent));\n+                        for (int i = 1; i <= limit; i++) {\n+                            delim = i == limit ? \"; ] {\" : \",\";\n+                            String field = line.second.get(i);\n+                            println(enlargedIndent(\" %s%s\".formatted(field, delim), padding - 2));\n+                        }\n+                    }\n+                }\n+            }\n+        } else {\n+            for (Map.Entry<String, Pair<Boolean, int[]>> entry : Map.of(\n+                    STACKMAP.parseKey(), new Pair<>(stackMap != null, stackMap),\n+                    LOCALSMAP.parseKey(), new Pair<>(lockMap != null, lockMap)).entrySet()) {\n+                if (entry.getValue().first) {\n+                    \/\/ map found\n+                    int[] map = entry.getValue().second;\n+                    Pair<String, String> line = getMapListAsString(map, \" \");\n+                    String record = \"[\" + (printCPIndex ? line.first : line.second) + \"]\";\n+                    if (printCPIndex) {\n+                        if (skipComments) {\n+                            println(enlargedIndent(strLine.formatted(entry.getKey(), record), doubleIndent));\n+                        } else {\n+                            print(PadRight(enlargedIndent(strLine.formatted(entry.getKey(), record), doubleIndent), padding)).\n+                                    println(\" \/\/\" + line.second);\n+                        }\n+                    } else {\n+                        println(enlargedIndent(strLine.formatted(entry.getKey(), record), doubleIndent));\n+                    }\n+                }\n+            }\n+            if (isWrapped) {\n+                for (int i = 0; i < wrapLevel; i++) {\n+                    println(enlargedIndent(\" }\", (printCPIndex) ? tripleIndent : doubleIndent));\n+                    decIndent();\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    protected void tablePrint(int index, int size) throws IOException {\n+        \/\/There are no differences between the simple (jasm) and extended (table) presentations of StackMapTable attribute.\n+        this.jasmPrint(index, size);\n+    }\n+\n+    @Override\n+    public boolean isPrintable() {\n+        return tableFormat;\n+    }\n@@ -48,2 +256,26 @@\n-     * @param type          either Implicit stack map attribute or the StackMapTable attribute\n-     * @param firstStackMap is it an entries[0] in the stack_map_frame structure? i.e. Does the StackMapData describe\n+     * Constructor for ATT_StackMap (Java 5,6)\n+     *\n+     * @param code the code attribute where this attribute is located\n+     * @param in   the input stream\n+     * @throws IOException the exception if something went wrong\n+     *\/\n+    public StackMapData(CodeData code, DataInputStream in) throws IOException {\n+        super(code);\n+        this.attribute = ATT_StackMap;\n+\n+        super.memberType = ATT_StackMap.parseKey();\n+        super.tableToken = STACK_MAP;\n+        this.printer = this::stackMapPrinter;\n+        this.stackEntryType = FULL_FRAME;\n+        this.stackEntryTypeValue = FULL_FRAME.fromTag();\n+        this.frame_pc = in.readUnsignedShort();\n+        this.lockMap = readMap(in);\n+        this.stackMap = readMap(in);\n+        environment.traceln(() -> \" stack_map_entry:pc=%d numloc=%s  numstack=%s\".formatted(frame_pc,\n+                mapToHexString(lockMap), mapToHexString(stackMap)));\n+    }\n+\n+    \/**\n+     * Constructor for ATT_StackMapTable (Java 6, 7+)\n+     *\n+     * @param firstStackMap is it an entries[0] in the stack_map_entry structure? i.e. Does the StackMapData describe\n@@ -54,1 +286,1 @@\n-     * @throws IOException  the exception if something went wrong\n+     * @throws IOException the exception if something went wrong\n@@ -56,1 +288,1 @@\n-    public StackMapData(EAttributeType type, boolean firstStackMap, int prevFrame_pc, CodeData code, DataInputStream in) throws IOException {\n+    public StackMapData(boolean firstStackMap, int prevFrame_pc, CodeData code, DataInputStream in) throws IOException {\n@@ -58,56 +290,13 @@\n-        this.type = type;\n-        if (type == EAttributeType.STACKMAP) {\n-            frame_pc = in.readUnsignedShort();\n-            lockMap = readMap(in);\n-            stackMap = readMap(in);\n-            environment.traceln(\" stack_map_entry:pc=%d numloc=%s  numstack=%s\",\n-                    frame_pc, mapToHexString(lockMap), mapToHexString(stackMap));\n-        } else { \/\/ if (type == EDataType.STACKMAPTABLE)\n-            stackFrameTypeValue = in.readUnsignedByte();\n-            StackMap.FrameType frame_type = StackMap.stackMapFrameType(stackFrameTypeValue);\n-            switch (frame_type) {\n-                case SAME_FRAME -> {\n-                    \/\/ verificationType is same_frame;\n-                    offset = stackFrameTypeValue;\n-                    environment.traceln(\" same_frame=%d\", stackFrameTypeValue);\n-                }\n-                case SAME_FRAME_EX -> {\n-                    \/\/ verificationType is same_frame_extended;\n-                    offset = in.readUnsignedShort();\n-                    environment.traceln(\" same_frame_extended=%d, offset=%d\", stackFrameTypeValue, offset);\n-                }\n-                case SAME_LOCALS_1_STACK_ITEM_FRAME -> {\n-                    \/\/ verificationType is same_locals_1_stack_item_frame\n-                    offset = stackFrameTypeValue - 64;\n-                    stackMap = readMapElements(in, 1);\n-                    environment.traceln(\" same_locals_1_stack_item_frame=%d, offset=%d, numstack=%s\",\n-                            stackFrameTypeValue, offset, mapToHexString(stackMap));\n-                }\n-                case SAME_LOCALS_1_STACK_ITEM_EXTENDED_FRAME -> {\n-                    \/\/ verificationType is same_locals_1_stack_item_frame_extended\n-                    offset = in.readUnsignedShort();\n-                    stackMap = readMapElements(in, 1);\n-                    environment.traceln(\" same_locals_1_stack_item_frame_extended=%d, offset=%d, numstack=%s\",\n-                            stackFrameTypeValue, offset, mapToHexString(stackMap));\n-                }\n-                case CHOP_1_FRAME, CHOP_2_FRAME, CHOP_3_FRAME -> {\n-                    \/\/ verificationType is chop_frame\n-                    offset = in.readUnsignedShort();\n-                    environment.traceln(\" chop_frame=%d offset=%d\", stackFrameTypeValue, offset);\n-                }\n-                case APPEND_FRAME -> {\n-                    \/\/ verificationType is append_frame\n-                    offset = in.readUnsignedShort();\n-                    lockMap = readMapElements(in, stackFrameTypeValue - 251);\n-                    environment.traceln(\" append_frame=%d offset=%d numlock=%s\",\n-                            stackFrameTypeValue, offset, mapToHexString(lockMap));\n-                }\n-                case FULL_FRAME -> {\n-                    \/\/ verificationType is full_frame\n-                    offset = in.readUnsignedShort();\n-                    lockMap = readMap(in);\n-                    stackMap = readMap(in);\n-                    environment.traceln(\" full_frame=%d offset=%d numloc=%s  numstack=%s\",\n-                            stackFrameTypeValue, offset, mapToHexString(lockMap), mapToHexString(stackMap));\n-                }\n-                default -> environment.traceln(\"incorrect frame_type argument\");\n+        this.attribute = ATT_StackMapTable;\n+\n+        super.memberType = ATT_StackMapTable.parseKey();\n+        super.tableToken = STACK_MAP_TABLE;\n+        stackEntryTypeValue = in.readUnsignedByte();\n+        stackEntryType = StackMap.stackMapEntryType(stackEntryTypeValue);\n+        printer = this::stackMapTablePrinter;\n+        switch (stackEntryType) {\n+            case EARLY_LARVAL -> {\n+                \/\/ Valhalla: The entry type is early_larval_frame (246)\n+                offset = UNDEFINED;\n+                this.unsetFields = readFields(in);\n+                environment.traceln(() -> \" early_larval_frame=%d\".formatted(stackEntryTypeValue));\n@@ -115,5 +304,28 @@\n-            stackFrameType = frame_type;\n-            if( prevFrame_pc == 0 && firstStackMap) {\n-                frame_pc = offset;\n-            } else {\n-                frame_pc = prevFrame_pc + offset + 1;\n+            case SAME_FRAME -> {\n+                \/\/ The entry type is same_frame;\n+                offset = stackEntryTypeValue;\n+                environment.traceln(() -> \" same_frame=%d\".formatted(stackEntryTypeValue));\n+            }\n+            case SAME_FRAME_EXTENDED -> {\n+                \/\/ The entry type is same_frame_extended;\n+                offset = in.readUnsignedShort();\n+                environment.traceln(() -> \" same_frame_extended=%d, offset=%d\".formatted(stackEntryTypeValue, offset));\n+            }\n+            case SAME_LOCALS_1_STACK_ITEM_FRAME -> {\n+                \/\/ The entry type is same_locals_1_stack_item_frame\n+                offset = stackEntryTypeValue - 64;\n+                stackMap = readMapElements(in, 1);\n+                environment.traceln(() -> \" same_locals_1_stack_item_frame=%d, offset=%d, numstack=%s\".formatted(\n+                        stackEntryTypeValue, offset, mapToHexString(stackMap)));\n+            }\n+            case SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED -> {\n+                \/\/ The entry type is same_locals_1_stack_item_frame_extended\n+                offset = in.readUnsignedShort();\n+                stackMap = readMapElements(in, 1);\n+                environment.traceln(() -> \" same_locals_1_stack_item_frame_extended=%d, offset=%d, numstack=%s\".formatted(\n+                        stackEntryTypeValue, offset, mapToHexString(stackMap)));\n+            }\n+            case CHOP_1_FRAME, CHOP_2_FRAME, CHOP_3_FRAME -> {\n+                \/\/ The entry type is chop_frame\n+                offset = in.readUnsignedShort();\n+                environment.traceln(() -> \" chop_frame=%d offset=%d\".formatted(stackEntryTypeValue, offset));\n@@ -121,0 +333,21 @@\n+            case APPEND_FRAME -> {\n+                \/\/ The entry type is append_frame\n+                offset = in.readUnsignedShort();\n+                lockMap = readMapElements(in, stackEntryTypeValue - 251);\n+                environment.traceln(() -> \" append_frame=%d offset=%d numlock=%s\".formatted(\n+                        stackEntryTypeValue, offset, mapToHexString(lockMap)));\n+            }\n+            case FULL_FRAME -> {\n+                \/\/ The entry type is full_frame\n+                offset = in.readUnsignedShort();\n+                lockMap = readMap(in);\n+                stackMap = readMap(in);\n+                environment.traceln(() -> \" full_frame=%d offset=%d numloc=%s  numstack=%s\".formatted(\n+                        stackEntryTypeValue, offset, mapToHexString(lockMap), mapToHexString(stackMap)));\n+            }\n+            default -> environment.traceln(() -> \"incorrect entry_type argument\");\n+        }\n+        if (prevFrame_pc <= 0 && firstStackMap) {\n+            frame_pc = offset;\n+        } else {\n+            frame_pc = prevFrame_pc + offset + 1;\n@@ -131,0 +364,93 @@\n+    public StackMap.EntryType getStackEntryType() {\n+        return stackEntryType;\n+    }\n+\n+    public Pair<List<String>, List<String>> getFieldListAsString(int[] fields) {\n+        int count = fields.length;\n+        ArrayList<String> left = new ArrayList<>(count);\n+        ArrayList<String> right = new ArrayList<>(count);\n+        for (int index : fields) {\n+            if (data.printCPIndex) {\n+                left.add(\"#%d\".formatted(index));\n+            }\n+            right.add(data.pool.getFieldNameTypeAsString(index));\n+        }\n+        return new Pair<>(left, right);\n+    }\n+\n+    public Pair<String, String> getMapListAsString(int[] map, String delimiter) {\n+        if (map == null || map.length == 0) {\n+            return new Pair<>(\"\", \"\");\n+        }\n+        StringBuilder left = new StringBuilder();\n+        StringBuilder right = new StringBuilder();\n+        int count = map.length - 1;\n+        for (int k = 0; k <= count; k++) {\n+            if (k == 0) {\n+                left.append(delimiter);\n+                right.append(delimiter);\n+            }\n+            int fullMapType = map[k];\n+            int mtVal = fullMapType & 0xFF;\n+            StackMap.VerificationType mapVerificationType = StackMap.getVerificationType(mtVal, Optional.of((s, a) -> environment.error(s, a)));\n+            String prefix = k == 0 ? \"\" : \" \";\n+            int argument = fullMapType >> 8;\n+            switch (mapVerificationType) {\n+                case ITEM_Object -> {\n+                    if (data.printCPIndex) {\n+                        left.append(prefix).append(\"#\").append(argument);\n+                    }\n+                    right.append(prefix).append(data.pool.ConstantStrValue(argument));\n+                }\n+                case ITEM_NewObject -> {\n+                    if (data.printCPIndex) {\n+                        left.append(prefix).append(mtVal);\n+                        left.append(\" \").append(getLabelPrefix()).append(argument);\n+                    }\n+                    right.append(prefix).append(mapVerificationType.printName());\n+                    right.append(\" \").append(getLabelPrefix()).append(argument);\n+                }\n+                default -> {\n+                    if (data.printCPIndex) {\n+                        left.append(prefix).append(mtVal);\n+                    }\n+                    right.append(prefix).append(mapVerificationType.printName());\n+                }\n+            }\n+            if (data.printCPIndex) {\n+                left.append(k == count ? ';' : ',');\n+            }\n+            right.append((k == count ? ';' : ','));\n+            if (k == count) {\n+                left.append(delimiter);\n+                right.append(delimiter);\n+            }\n+        }\n+        return new Pair<>(left.toString(), right.toString());\n+    }\n+\n+    \/**\n+     * @return true if the entity presents a StackMapTable since Java 6\n+     *\/\n+    public boolean belongsToStackMapTable() {\n+        return attribute == ATT_StackMapTable;\n+    }\n+\n+    \/**\n+     * Sets helper printing particles\n+     *\/\n+    public StackMapData setPrintParticles(String intLine, String strLine, int shift) {\n+        this.intLine = intLine;\n+        this.strLine = strLine;\n+        this.shift = shift;\n+        return this;\n+    }\n+\n+    \/**\n+     * Sets table header\n+     *\/\n+    public StackMapData setHeader(String header) {\n+        this.tableHeader = header;\n+        return this;\n+    }\n+\n@@ -136,0 +462,9 @@\n+    private int[] readFields(DataInputStream in) throws IOException {\n+        int num = in.readUnsignedShort();\n+        int[] fields = new int[num];\n+        for (int i = 0; i < num; i++) {\n+            fields[i] = in.readUnsignedShort();\n+        }\n+        return fields;\n+    }\n+\n@@ -141,4 +476,1 @@\n-            StackMap.VerificationType stackMapVerificationType =\n-                    StackMap.getVerificationType(mt_val, Optional.of((s) -> {\n-                        throw new FormatError(environment.getLogger(), s);\n-                    }));\n+            StackMap.VerificationType stackMapVerificationType = StackMap.getVerificationType(mt_val, Optional.of((s, a) -> environment.error(s, a)));\n@@ -158,18 +490,6 @@\n-    \/*\n-     *  In a class file whose version number is 50.0 or above, if a method's Code attribute does not have a StackMapTable attribute,\n-     *  it has an implicit stack map attribute (chapter 4.10.1). This implicit stack map attribute is equivalent to a StackMapTable\n-     *  attribute with number_of_entries equal to zero.\n-     *\/\n-    enum EAttributeType {\n-        \/\/ Implicit stack map attribute\n-        \/\/ This implicit stack map attribute is equivalent to a StackMapTable attribute with number_of_entries equal to zero.\n-        STACKMAP(\"ImplicitStackMap\"),\n-        \/\/ The StackMapTable attribute\n-        STACKMAPTABLE(\"StackMapTable\");\n-        private final String name;\n-        EAttributeType(String name) {\n-            this.name = name;\n-        }\n-        public String getName() {\n-            return name;\n-        }\n+    private int getCommentOffsetFor(String line, int shiftCount) {\n+        return owner.getPrintAttributeCommentPadding() + shift + line.length() - shiftCount * getIndentStep() - 2;\n+    }\n+\n+    private int getCommentOffsetFor(int lineLength, int shiftCount) {\n+        return owner.getPrintAttributeCommentPadding() + shift + lineLength - shiftCount * getIndentStep() - 2;\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/StackMapData.java","additions":414,"deletions":94,"binary":false,"changes":508,"status":"modified"},{"patch":"@@ -0,0 +1,113 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.jdis;\n+\n+import org.openjdk.asmtools.common.structure.EAttribute;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+\n+import static org.openjdk.asmtools.jasm.JasmTokens.Token.*;\n+\n+\/**\n+ * StackMapTable_attribute {\n+ *     u2              attribute_name_index;\n+ *     u4              attribute_length;\n+ *     u2              number_of_entries;\n+ *     stack_map_frame entries[number_of_entries];\n+ * }\n+ *\/\n+public class StackMapTable extends Container<StackMapData, CodeData> {\n+\n+    private final EAttribute attribute;\n+    \/\/ Container for flags of elements: true is for a container element is a wrapper\n+    \/\/ (i.e. early_larval_frame) for the next one.\n+    protected final ArrayList<Boolean> wrappers;\n+    private String jasmHeader = \": number_of_entries = %d\";\n+    private String intLine = \"n\/a\";\n+    private String strLine = \"n\/a\";\n+    private int shift;\n+\n+    \/**\n+     * @param attribute       either Implicit stack map attribute or the StackMapTable attribute of the container\n+     * @param owner\n+     * @param initialCapacity initial capacity of the  stack_map_frame entries[number_of_entries];\n+     *\/\n+    public StackMapTable(EAttribute attribute, CodeData owner, int initialCapacity) {\n+        super(owner, StackMapData.class, initialCapacity);\n+        this.wrappers = new ArrayList<>(initialCapacity);\n+        this.attribute = attribute;\n+        switch (this.attribute) {\n+            case ATT_StackMap -> {\n+                shift = owner.calculateInlinedTitleShift(LOCALSMAP.parseKey());\n+                jasmHeader = STACKMAP_HEADER.parseKey() + jasmHeader;\n+            }\n+            case ATT_StackMapTable -> {\n+                shift = owner.calculateInlinedTitleShift(FRAMETYPE.parseKey());\n+                jasmHeader = STACKMAPTABLE_HEADER.parseKey() + jasmHeader;\n+            }\n+            default -> throw new IllegalStateException(\"Unexpected value: \" + this.attribute);\n+        }\n+        intLine = \"%\" + shift + \"s = %-3d\";\n+        strLine = \"%\" + shift + \"s = %s\";\n+    }\n+\n+    public void add(StackMapData element, boolean isWrapper) throws IOException {\n+        element.setPrintParticles(intLine, strLine, shift);\n+        super.add(element);\n+        wrappers.add(isWrapper);\n+    }\n+\n+    public int real_size() {\n+        int mWrappers = (int) wrappers.stream()\n+                .filter(Boolean::booleanValue)\n+                .count();\n+        return elements.size() - mWrappers;\n+    }\n+\n+    \/**\n+     * Prints StackMapTable_attribute {\n+     *     u2              attribute_name_index;\n+     *     u4              attribute_length;\n+     *     u2              number_of_entries;\n+     *     stack_map_frame entries[number_of_entries];\n+     * }\n+     *\n+     * There are no differences between the simple (jasm) and extended (table) presentations of StackMapTable attribute.\n+     *\n+     * @throws IOException if an I\/O error occurs while printing\n+     *\/\n+    @Override\n+    public void print() throws IOException {\n+        int size = this.size();\n+        if (size > 0) {\n+            elements.get(0).setHeader(jasmHeader.formatted(real_size()));\n+            setMaxPrintSize(getPrintSize());\n+            for (int i = 0; i < size; i++) {\n+                StackMapData element = elements.get(i);\n+                element.setCommentOffset(this.getCommentOffset());\n+                element.jasmPrint(i, size);\n+            }\n+        }\n+    }\n+}\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/StackMapTable.java","additions":113,"deletions":0,"binary":false,"changes":113,"status":"added"},{"patch":"@@ -0,0 +1,57 @@\n+package org.openjdk.asmtools.jdis;\n+\n+import org.openjdk.asmtools.common.Environment;\n+import org.openjdk.asmtools.jasm.ConstantPool;\n+import org.openjdk.asmtools.jasm.DataVector;\n+import org.openjdk.asmtools.jasm.JasmTokens;\n+\n+public class Utf8ArrayData extends ClassArrayData {\n+    protected <M extends MemberData<ClassData>> Utf8ArrayData(M classData, JasmTokens.Token token) {\n+        super(classData, token);\n+    }\n+\n+    public void jasmPrintShort() {\n+        StringBuilder indexes = new StringBuilder();\n+        StringBuilder names = new StringBuilder();\n+        int lastIndex = this.indexes.length - 1;\n+        String eoNames = (printCPIndex) ? \"\" : \";\";\n+        for (int i = 0; i <= lastIndex; i++) {\n+            if (printCPIndex) {\n+                indexes.append(\"#\").append(this.indexes[i]).append(i == lastIndex ? \";\" : \", \");\n+            }\n+            names.append(pool.StringValue(this.indexes[i])).append(i == lastIndex ? eoNames : \", \");\n+        }\n+        printIndent(PadRight(token.parseKey(), getPrintAttributeKeyPadding()));\n+        if (printCPIndex) {\n+            if (skipComments) {\n+                println(indexes.toString());\n+            } else {\n+                print(PadRight(indexes.toString(), getPrintAttributeCommentPadding())).println(\" \/\/ \" + names);\n+            }\n+        } else {\n+            println(names.toString());\n+        }\n+    }\n+\n+    public void jasmPrintLong() {\n+        String name = token.parseKey();\n+        String locIndent = \" \".repeat(name.length());\n+        int lastIndex = indexes.length - 1;\n+        for (int i = 0; i <= lastIndex; i++) {\n+            if (printCPIndex) {\n+                if (skipComments) {\n+                    printIndent(PadRight((i == 0) ? name : locIndent, getPrintAttributeKeyPadding())).\n+                            print(\"#%d\".formatted(indexes[i])).println(i == lastIndex ? \";\" : \",\");\n+                } else {\n+                    printIndent(PadRight((i == 0) ? name : locIndent, getPrintAttributeKeyPadding())).\n+                            print(PadRight(\"#%d%s\".formatted(indexes[i], (i == lastIndex) ? \";\" : \",\"), getPrintAttributeCommentPadding())).\n+                            println(\" \/\/ %s\".formatted(pool.StringValue(indexes[i])));\n+                }\n+            } else {\n+                printIndent(PadRight((i == 0) ? name : locIndent, getPrintAttributeKeyPadding())).\n+                        print(pool.StringValue(indexes[i])).println(i == lastIndex ? \";\" : \",\");\n+            }\n+        }\n+    }\n+\n+}\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/Utf8ArrayData.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -1,1 +1,1 @@\n-# Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,7 +28,19 @@\n-\\     -g Generate a detailed output format\n-info.opt.sl=\\\n-\\     -sl Print source lines if a source java file is in the same folder and class file contains the LineNumberTable attribute\n-info.opt.lt=\\\n-\\     -lt Print source line numbers in comments\n-info.opt.lv=\\\n-\\     -lv Print local variable table(s)\n+\\     -g Generate a detailed output format.\n+info.opt.b=\\\n+\\     -best-effort Print as much information as possible despite errors; suppresses the -v option.\n+info.opt.gg=\\\n+\\     -gg Generate a detailed output format. This includes displaying\\\n+\\nthe pair of this_class and super_class.\n+info.opt.lnt=\\\n+\\     -lnt:<numbers,lines,table,all>\\n Print the LineNumberTable attribute in a Code attribute:\\\n+\\n table   - print the LineNumberTable attribute as a table \\\n+\\n numbers - print numbers of source lines in inlined comments\\\n+\\n lines   - print Java source lines if a class file with LineNumberTable attribute and Java source file are in the same folder\\\n+\\n all     - print both line numbers and Java source lines in inlined comments, and LineNumberTable attribute as a table\\\n+\\nThe ''-lnt'' without parameters functions the same way as ''-lnt:all''\n+info.opt.lvt=\\\n+\\     -lvt:<vars,types,all>\\n Print LocalVariableTable,LocalVariableTypeTable attributes in a Code attribute:\\\n+\\n vars    - print LocalVariableTable attribute\\\n+\\n types   - print LocalVariableTypeTable attribute\\\n+\\n all     - print both LocalVariableTable and LocalVariableTypeTable attributes\\\n+\\nThe ''-lvt'' without parameters functions the same way as ''-lvt:all''\n@@ -36,1 +48,1 @@\n-\\     -pc Print instruction offsets while the output is not detailed\n+\\     -pc Print instruction offsets when the output is not detailed with the options -g or -gg.\n@@ -40,1 +52,15 @@\n-\\     -hx Generate floating-point constants in hexadecimal format\n+\\     -hx Generate floating-point constants in hexadecimal format.\n+info.opt.table=\\\n+\\     -table Print specific attributes in a table format resembling the style of the ''javap'' command.\n+info.opt.sysinfo=\\\n+\\     -sysinfo Show system info (path, size, date, SHA-256 hash) of class being processed\n+info.opt.drop=\\\n+\\     -drop:<source,classes,all>\\n Discard some attributes or their groups where:\\\n+\\n source  - SourceFile attribute\\\n+\\n classes - this_class, super_class pair\\\n+\\n all     - SourceFile attribute, this_class and super_class pair\\\n+\\n The ''-drop'' without parameters functions the same way as ''-drop:all''\n+#info.opt.drop.ex=\\\n+#\\     -drop:<all|SourceFile,CharacterRange>\\n Discard some attributes or their groups where:\\\n+#\\n all=SourceFile,CharacterRange\\\n+#\\nThe ''-drop'' without parameters functions the same way as ''-drop:all''\n@@ -42,2 +68,1 @@\n-#TODO info.opt.table=\\\n-#TODO \\     -ct Print code attributes (Exception, LocalVariable, LineNumber, StackMap) as tables\n+err.cannot.write=Cannot write to {0}\n@@ -46,0 +71,2 @@\n+err.invalid_parameter_of_option=Invalid parameter \\\"{0}\\\" of option: {1}\n+err.option.unsupported=Not implemented yet: {0}\n@@ -47,2 +74,1 @@\n-err.fatal_error=Fatal error in file: {0}\n-err.fatal_exception=Fatal exception in file: {0}\n+err.count.issues={0}{1}in the file: {2}\n@@ -51,1 +77,8 @@\n-warn.one.attribute.required=There may be at most one \\\"{0}\\\" attribute in the attributes table of a \\\"{1}\\\" structure\n+warn.one.attribute.required=There is more than one \\\"{0}\\\" attribute in the attributes table of a \\\"{1}\\\" structure. The last one is used.\n+warn.attribute.name.corrupted=The value of the attribute_name_index #{0} item is not a valid index into the constant_pool table. The attribute is ignored.\n+warn.attribute.name.incorrect=The attribute_name_index #{0} refers to an unknown attribute name. The attribute is ignored.\n+warn.attribute.type.incorrect=The constant_pool entry \\\"{0}\\\" is not of an appropriate type for the field.\n+warn.attribute.constantvalue.incorrect=The constantvalue_index \\\"{0}\\\" is not a valid index into the constant_pool table.\n+warn.attribute.constantvalue.unrecognized=Unrecognized constantvalue_index: #{0} [ {1} ]\n+\n+warn.field.nametype.required=The ConstantPool[{0}] must be a CONSTANT_NameAndType_info structure with a field descriptor\n@@ -58,2 +91,7 @@\n-err.eof=An end of file has been reached unexpectedly during class data reading\n-warn.corrupted_attributes={0} corrupted attribute(s) ignored.\n+err.invalid.desc=Invalid descriptor \\\"{0}\\\"\n+err.invalid.desc.at=Descriptor is invalid at offset \\\"{0}\\\" in \\\"{1}\\\"\n+err.eof=The end of the file was unexpectedly reached while reading class data\n+info.corrupted_cp_entry=??? The entry is missing from the constant_pool table\n+info.invalid_cp_entry=??? Invalid constant_pool reference\n+info.corrupted_bootstrap_method_ref=??? Invalid bootstrap method reference\n+warn.wrong.magic=The magic number identifying the class file format is expected to be {0}. The invalid magic number {1} will be ignored.\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/i18n.properties","additions":55,"deletions":17,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -0,0 +1,201 @@\n+\/*\n+ * Copyright (c) 2007, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.asmtools.jdis.notations;\n+\n+import org.openjdk.asmtools.common.FormatError;\n+import org.openjdk.asmtools.common.ToolLogger;\n+import org.openjdk.asmtools.jdis.ConstantPool;\n+\n+\/**\n+ * See JVMS, section 4.4.\n+ *\/\n+public class Descriptor<T extends ToolLogger> {\n+    private static final int UNDEF = -1;\n+\n+    public static class InvalidDescriptor extends FormatError {\n+        <T extends ToolLogger> InvalidDescriptor(T logger, String desc) {\n+            super(logger, \"err.invalid.desc\", desc);\n+        }\n+\n+        <T extends ToolLogger> InvalidDescriptor(T logger, String desc, int index) {\n+            super(logger, \"err.invalid.desc.at\", index, desc);\n+        }\n+    }\n+\n+\n+    public final int index;\n+    public final String descriptor;\n+    public final T logger;\n+\n+    \/**\n+     * Constructor for the descriptor placed in the constant_pool\n+     *\n+     * @param logger to log any exceptions if they occur.\n+     * @param index a valid reference into the constant_pool table\n+     *\/\n+    public Descriptor(T logger, int index) {\n+        this.index = index;\n+        this.descriptor = null;\n+        this.logger = logger;\n+    }\n+\n+    \/**\n+     * Constructor for the descriptor presented as String\n+     *\n+     * @param logger to log any exceptions if they occur.\n+     * @param descriptor the string presentation of the descriptor\n+     *\/\n+    public Descriptor(T logger, String descriptor) {\n+        this.index = UNDEF;\n+        this.descriptor = descriptor;\n+        this.logger = logger;\n+    }\n+\n+\n+    public String getValue(ConstantPool pool) {\n+        return pool == null ? this.descriptor : pool.getString(index, i -> \"#\" + index);\n+    }\n+\n+\n+\n+    public int getParameterCount(ConstantPool constant_pool) throws InvalidDescriptor {\n+        String desc = getValue(constant_pool);\n+        int end = desc.indexOf(\")\");\n+        if (end == -1)\n+            throw new InvalidDescriptor(logger, desc);\n+        parse(desc, 0, end + 1);\n+        return count;\n+\n+    }\n+\n+    public String getParameterTypes(ConstantPool constant_pool) throws InvalidDescriptor {\n+        String desc = getValue(constant_pool);\n+\n+        int end = desc.indexOf(\")\");\n+        if (end == -1)\n+            throw new InvalidDescriptor(logger, desc);\n+        return parse(desc, 0, end + 1);\n+    }\n+\n+    public String getReturnType(ConstantPool constant_pool)\n+            throws InvalidDescriptor {\n+        String desc = getValue(constant_pool);\n+        int end = desc.indexOf(\")\");\n+        if (end == -1)\n+            throw new InvalidDescriptor(logger, desc);\n+        return parse(desc, end + 1, desc.length());\n+    }\n+\n+    public String getFieldType(ConstantPool constant_pool)\n+            throws InvalidDescriptor {\n+        String desc = getValue(constant_pool);\n+        return parse(desc, 0, desc.length());\n+    }\n+\n+    private String parse(String desc, int start, int end)\n+            throws InvalidDescriptor {\n+        int p = start;\n+        StringBuilder sb = new StringBuilder();\n+        int dims = 0;\n+        count = 0;\n+\n+        while (p < end) {\n+            String type;\n+            char ch;\n+            switch (ch = desc.charAt(p++)) {\n+                case '(':\n+                    sb.append('(');\n+                    continue;\n+\n+                case ')':\n+                    sb.append(')');\n+                    continue;\n+\n+                case '[':\n+                    dims++;\n+                    continue;\n+\n+                case 'B':\n+                    type = \"byte\";\n+                    break;\n+\n+                case 'C':\n+                    type = \"char\";\n+                    break;\n+\n+                case 'D':\n+                    type = \"double\";\n+                    break;\n+\n+                case 'F':\n+                    type = \"float\";\n+                    break;\n+\n+                case 'I':\n+                    type = \"int\";\n+                    break;\n+\n+                case 'J':\n+                    type = \"long\";\n+                    break;\n+\n+                case 'L':\n+                    int sep = desc.indexOf(';', p);\n+                    if (sep == -1)\n+                        throw new InvalidDescriptor(logger, desc, p - 1);\n+                    type = desc.substring(p, sep).replace('\/', '.');\n+                    p = sep + 1;\n+                    break;\n+\n+                case 'S':\n+                    type = \"short\";\n+                    break;\n+\n+                case 'Z':\n+                    type = \"boolean\";\n+                    break;\n+\n+                case 'V':\n+                    type = \"void\";\n+                    break;\n+\n+                default:\n+                    throw new InvalidDescriptor(logger, desc, p - 1);\n+            }\n+\n+            if (sb.length() > 1 && sb.charAt(0) == '(')\n+                sb.append(\", \");\n+            sb.append(type);\n+            for (; dims > 0; dims--)\n+                sb.append(\"[]\");\n+\n+            count++;\n+        }\n+        return sb.toString();\n+    }\n+\n+    private int count;\n+}\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/notations\/Descriptor.java","additions":201,"deletions":0,"binary":false,"changes":201,"status":"added"},{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * Copyright (c) 2008, 2009, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.asmtools.jdis.notations;\n+public class DescriptorException extends Exception {\n+    private static final long serialVersionUID = 2411890273788901032L;\n+}\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/notations\/DescriptorException.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -0,0 +1,285 @@\n+\/*\n+ * Copyright (c) 2007, 2008, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.asmtools.jdis.notations;\n+\n+import org.openjdk.asmtools.common.ToolLogger;\n+import org.openjdk.asmtools.jdis.ConstantPool;\n+import org.openjdk.asmtools.jdis.notations.Type.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+\/**\n+ * See JVMS 4.4.4.\n+ *\/\n+public class Signature<T extends ToolLogger> extends Descriptor<T> {\n+\n+    \/**\n+     * Constructor for the signature placed in the constant_pool\n+     *\n+     * @param logger to log any exceptions, if they occur.\n+     * @param index a valid reference into the constant_pool table\n+     *\/\n+    public Signature(T logger, int index) {\n+        super(logger, index);\n+    }\n+\n+    \/**\n+     * Constructor for the descriptor presented as String\n+     *\n+     * @param logger to log any exceptions if they occur.\n+     * @param signature the string presentation of the descriptor\n+     *\/\n+    public Signature(T logger, String signature) {\n+        super(logger, signature);\n+    }\n+\n+    public Type getType(ConstantPool pool) {\n+        if (type == null)\n+            type = parse(getValue(pool));\n+        return type;\n+    }\n+\n+    @Override\n+    public int getParameterCount(ConstantPool pool) {\n+        MethodType m = (MethodType) getType(pool);\n+        return m.paramTypes.size();\n+    }\n+\n+    @Override\n+    public String getParameterTypes(ConstantPool pool) {\n+        MethodType m = (MethodType) getType(pool);\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"(\");\n+        String sep = \"\";\n+        for (Type paramType : m.paramTypes) {\n+            sb.append(sep);\n+            sb.append(paramType);\n+            sep = \", \";\n+        }\n+        sb.append(\")\");\n+        return sb.toString();\n+    }\n+\n+    @Override\n+    public String getReturnType(ConstantPool pool) {\n+        MethodType m = (MethodType) getType(pool);\n+        return m.returnType.toString();\n+    }\n+\n+    @Override\n+    public String getFieldType(ConstantPool pool) {\n+        return getType(pool).toString();\n+    }\n+\n+    private Type parse(String sig) {\n+        this.sig = sig;\n+        sigp = 0;\n+\n+        List<TypeParamType> typeParamTypes = null;\n+        if (sig.charAt(sigp) == '<')\n+            typeParamTypes = parseTypeParamTypes();\n+\n+        if (sig.charAt(sigp) == '(') {\n+            List<Type> paramTypes = parseTypeSignatures(')');\n+            Type returnType = parseTypeSignature();\n+            List<Type> throwsTypes = null;\n+            while (sigp < sig.length() && sig.charAt(sigp) == '^') {\n+                sigp++;\n+                if (throwsTypes == null)\n+                    throwsTypes = new ArrayList<>();\n+                throwsTypes.add(parseTypeSignature());\n+            }\n+            return new MethodType(typeParamTypes, paramTypes, returnType, throwsTypes);\n+        } else {\n+            Type t = parseTypeSignature();\n+            if (typeParamTypes == null && sigp == sig.length())\n+                return t;\n+            Type superclass = t;\n+            List<Type> superinterfaces = null;\n+            while (sigp < sig.length()) {\n+                if (superinterfaces == null)\n+                    superinterfaces = new ArrayList<>();\n+                superinterfaces.add(parseTypeSignature());\n+            }\n+            return new ClassSigType(typeParamTypes, superclass, superinterfaces);\n+        }\n+    }\n+\n+    private Type parseTypeSignature() {\n+        switch (sig.charAt(sigp)) {\n+            case 'B':\n+                sigp++;\n+                return new SimpleType(\"byte\");\n+\n+            case 'C':\n+                sigp++;\n+                return new SimpleType(\"char\");\n+\n+            case 'D':\n+                sigp++;\n+                return new SimpleType(\"double\");\n+\n+            case 'F':\n+                sigp++;\n+                return new SimpleType(\"float\");\n+\n+            case 'I':\n+                sigp++;\n+                return new SimpleType(\"int\");\n+\n+            case 'J':\n+                sigp++;\n+                return new SimpleType(\"long\");\n+\n+            case 'L':\n+                return parseClassTypeSignature();\n+\n+            case 'S':\n+                sigp++;\n+                return new SimpleType(\"short\");\n+\n+            case 'T':\n+                return parseTypeVariableSignature();\n+\n+            case 'V':\n+                sigp++;\n+                return new SimpleType(\"void\");\n+\n+            case 'Z':\n+                sigp++;\n+                return new SimpleType(\"boolean\");\n+\n+            case '[':\n+                sigp++;\n+                return new ArrayType(parseTypeSignature());\n+\n+            case '*':\n+                sigp++;\n+                return new WildcardType();\n+\n+            case '+':\n+                sigp++;\n+                return new WildcardType(WildcardType.Kind.EXTENDS, parseTypeSignature());\n+\n+            case '-':\n+                sigp++;\n+                return new WildcardType(WildcardType.Kind.SUPER, parseTypeSignature());\n+\n+            default:\n+                throw new IllegalStateException(debugInfo());\n+        }\n+    }\n+\n+    private List<Type> parseTypeSignatures(char term) {\n+        sigp++;\n+        List<Type> types = new ArrayList<>();\n+        while (sig.charAt(sigp) != term)\n+            types.add(parseTypeSignature());\n+        sigp++;\n+        return types;\n+    }\n+\n+    private Type parseClassTypeSignature() {\n+        assert sig.charAt(sigp) == 'L';\n+        sigp++;\n+        return parseClassTypeSignatureRest();\n+    }\n+\n+    private Type parseClassTypeSignatureRest() {\n+        StringBuilder sb = new StringBuilder();\n+        List<Type> argTypes = null;\n+        ClassType t = null;\n+        char sigch;\n+\n+        do {\n+            switch (sigch = sig.charAt(sigp)) {\n+                case '<':\n+                    argTypes = parseTypeSignatures('>');\n+                    break;\n+\n+                case '.':\n+                case ';':\n+                    sigp++;\n+                    t = new ClassType(t, sb.toString(), argTypes);\n+                    sb.setLength(0);\n+                    argTypes = null;\n+                    break;\n+\n+                default:\n+                    sigp++;\n+                    sb.append(sigch);\n+                    break;\n+            }\n+        } while (sigch != ';');\n+\n+        return t;\n+    }\n+\n+    private List<TypeParamType> parseTypeParamTypes() {\n+        assert sig.charAt(sigp) == '<';\n+        sigp++;\n+        List<TypeParamType> types = new ArrayList<>();\n+        while (sig.charAt(sigp) != '>')\n+            types.add(parseTypeParamType());\n+        sigp++;\n+        return types;\n+    }\n+\n+    private TypeParamType parseTypeParamType() {\n+        int sep = sig.indexOf(\":\", sigp);\n+        String name = sig.substring(sigp, sep);\n+        Type classBound = null;\n+        List<Type> interfaceBounds = null;\n+        sigp = sep + 1;\n+        if (sig.charAt(sigp) != ':')\n+            classBound = parseTypeSignature();\n+        while (sig.charAt(sigp) == ':') {\n+            sigp++;\n+            if (interfaceBounds == null)\n+                interfaceBounds = new ArrayList<>();\n+            interfaceBounds.add(parseTypeSignature());\n+        }\n+        return new TypeParamType(name, classBound, interfaceBounds);\n+    }\n+\n+    private Type parseTypeVariableSignature() {\n+        sigp++;\n+        int sep = sig.indexOf(';', sigp);\n+        Type t = new SimpleType(sig.substring(sigp, sep));\n+        sigp = sep + 1;\n+        return t;\n+    }\n+\n+    private String debugInfo() {\n+        return sig.substring(0, sigp) + \"!\" + sig.charAt(sigp) + \"!\" + sig.substring(sigp + 1);\n+    }\n+\n+    private String sig;\n+    private int sigp;\n+\n+    private Type type;\n+}\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/notations\/Signature.java","additions":285,"deletions":0,"binary":false,"changes":285,"status":"added"},{"patch":"@@ -0,0 +1,382 @@\n+\/*\n+ * Copyright (c) 2008, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.asmtools.jdis.notations;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+\/**\n+ * Family of classes used to represent the parsed form of a {@link Descriptor}\n+ * or {@link Signature}.\n+ *\/\n+public abstract class Type {\n+    protected Type() {\n+    }\n+\n+    public boolean isObject() {\n+        return false;\n+    }\n+\n+    public abstract <R, D> R accept(Visitor<R, D> visitor, D data);\n+\n+    protected static void append(StringBuilder sb, String prefix, List<? extends Type> types, String suffix) {\n+        sb.append(prefix);\n+        String sep = \"\";\n+        for (Type t : types) {\n+            sb.append(sep);\n+            sb.append(t);\n+            sep = \", \";\n+        }\n+        sb.append(suffix);\n+    }\n+\n+    protected static void appendIfNotEmpty(StringBuilder sb, String prefix, List<? extends Type> types, String suffix) {\n+        if (types != null && types.size() > 0)\n+            append(sb, prefix, types, suffix);\n+    }\n+\n+    public interface Visitor<R, P> {\n+        R visitSimpleType(SimpleType type, P p);\n+\n+        R visitArrayType(ArrayType type, P p);\n+\n+        R visitMethodType(MethodType type, P p);\n+\n+        R visitClassSigType(ClassSigType type, P p);\n+\n+        R visitClassType(ClassType type, P p);\n+\n+        R visitTypeParamType(TypeParamType type, P p);\n+\n+        R visitWildcardType(WildcardType type, P p);\n+    }\n+\n+    \/**\n+     * Represents a type signature with a simple name. The name may be that of a\n+     * primitive type, such \"{@code int}, {@code float}, etc\n+     * or that of a type argument, such as {@code T}, {@code K}, {@code V}, etc.\n+     * <p>\n+     * See:\n+     * JVMS 4.3.2\n+     * BaseType:\n+     * {@code B}, {@code C}, {@code D}, {@code F}, {@code I},\n+     * {@code J}, {@code S}, {@code Z};\n+     * VoidDescriptor:\n+     * {@code V};\n+     * JVMS 4.3.4\n+     * TypeVariableSignature:\n+     * {@code T} Identifier {@code ;}\n+     *\/\n+    public static class SimpleType extends Type {\n+        public SimpleType(String name) {\n+            this.name = name;\n+        }\n+\n+        public <R, D> R accept(Visitor<R, D> visitor, D data) {\n+            return visitor.visitSimpleType(this, data);\n+        }\n+\n+        public boolean isPrimitiveType() {\n+            return primitiveTypes.contains(name);\n+        }\n+\n+        \/\/ where\n+        private static final Set<String> primitiveTypes = new HashSet<>(Arrays.asList(\n+                \"boolean\", \"byte\", \"char\", \"double\", \"float\", \"int\", \"long\", \"short\", \"void\"));\n+\n+        @Override\n+        public String toString() {\n+            return name;\n+        }\n+\n+        public final String name;\n+    }\n+\n+    \/**\n+     * Represents an array type signature.\n+     * <p>\n+     * See:\n+     * JVMS 4.3.4\n+     * ArrayTypeSignature:\n+     * {@code [} TypeSignature {@code ]}\n+     *\/\n+    public static class ArrayType extends Type {\n+        public ArrayType(Type elemType) {\n+            this.elemType = elemType;\n+        }\n+\n+        public <R, D> R accept(Visitor<R, D> visitor, D data) {\n+            return visitor.visitArrayType(this, data);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return elemType + \"[]\";\n+        }\n+\n+        public final Type elemType;\n+    }\n+\n+    \/**\n+     * Represents a method type signature.\n+     * <p>\n+     * See;\n+     * JVMS 4.3.4\n+     * MethodTypeSignature:\n+     * FormalTypeParameters_opt {@code (} TypeSignature* {@code)} ReturnType\n+     * ThrowsSignature*\n+     *\/\n+    public static class MethodType extends Type {\n+        public MethodType(List<? extends Type> paramTypes, Type resultType) {\n+            this(null, paramTypes, resultType, null);\n+        }\n+\n+        public MethodType(List<? extends TypeParamType> typeParamTypes,\n+                          List<? extends Type> paramTypes,\n+                          Type returnType,\n+                          List<? extends Type> throwsTypes) {\n+            this.typeParamTypes = typeParamTypes;\n+            this.paramTypes = paramTypes;\n+            this.returnType = returnType;\n+            this.throwsTypes = throwsTypes;\n+        }\n+\n+        public <R, D> R accept(Visitor<R, D> visitor, D data) {\n+            return visitor.visitMethodType(this, data);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            StringBuilder sb = new StringBuilder();\n+            appendIfNotEmpty(sb, \"<\", typeParamTypes, \"> \");\n+            sb.append(returnType);\n+            append(sb, \" (\", paramTypes, \")\");\n+            appendIfNotEmpty(sb, \" throws \", throwsTypes, \"\");\n+            return sb.toString();\n+        }\n+\n+        public final List<? extends TypeParamType> typeParamTypes;\n+        public final List<? extends Type> paramTypes;\n+        public final Type returnType;\n+        public final List<? extends Type> throwsTypes;\n+    }\n+\n+    \/**\n+     * Represents a class signature. These describe the signature of\n+     * a class that has type arguments.\n+     * <p>\n+     * See:\n+     * JVMS 4.3.4\n+     * ClassSignature:\n+     * FormalTypeParameters_opt SuperclassSignature SuperinterfaceSignature*\n+     *\/\n+    public static class ClassSigType extends Type {\n+        public ClassSigType(List<TypeParamType> typeParamTypes, Type superclassType,\n+                            List<Type> superinterfaceTypes) {\n+            this.typeParamTypes = typeParamTypes;\n+            this.superclassType = superclassType;\n+            this.superinterfaceTypes = superinterfaceTypes;\n+        }\n+\n+        public <R, D> R accept(Visitor<R, D> visitor, D data) {\n+            return visitor.visitClassSigType(this, data);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            StringBuilder sb = new StringBuilder();\n+            appendIfNotEmpty(sb, \"<\", typeParamTypes, \">\");\n+            if (superclassType != null) {\n+                sb.append(\" extends \");\n+                sb.append(superclassType);\n+            }\n+            appendIfNotEmpty(sb, \" implements \", superinterfaceTypes, \"\");\n+            return sb.toString();\n+        }\n+\n+        public final List<TypeParamType> typeParamTypes;\n+        public final Type superclassType;\n+        public final List<Type> superinterfaceTypes;\n+    }\n+\n+    \/**\n+     * Represents a class type signature. This is used to represent a\n+     * reference to a class, such as in a field, parameter, return type, etc.\n+     * <p>\n+     * See:\n+     * JVMS 4.3.4\n+     * ClassTypeSignature:\n+     * {@code L} PackageSpecifier_opt SimpleClassTypeSignature\n+     * ClassTypeSignatureSuffix* {@code ;}\n+     * PackageSpecifier:\n+     * Identifier {@code \/} PackageSpecifier*\n+     * SimpleClassTypeSignature:\n+     * Identifier TypeArguments_opt }\n+     * ClassTypeSignatureSuffix:\n+     * {@code .} SimpleClassTypeSignature\n+     *\/\n+    public static class ClassType extends Type {\n+        public ClassType(ClassType outerType, String name, List<Type> typeArgs) {\n+            this.outerType = outerType;\n+            this.name = name;\n+            this.typeArgs = typeArgs;\n+        }\n+\n+        public <R, D> R accept(Visitor<R, D> visitor, D data) {\n+            return visitor.visitClassType(this, data);\n+        }\n+\n+        public String getBinaryName() {\n+            if (outerType == null)\n+                return name;\n+            else\n+                return (outerType.getBinaryName() + \"$\" + name);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            StringBuilder sb = new StringBuilder();\n+            if (outerType != null) {\n+                sb.append(outerType);\n+                sb.append(\".\");\n+            }\n+            sb.append(name);\n+            appendIfNotEmpty(sb, \"<\", typeArgs, \">\");\n+            return sb.toString();\n+        }\n+\n+        @Override\n+        public boolean isObject() {\n+            return (outerType == null)\n+                    && name.equals(\"java\/lang\/Object\")\n+                    && (typeArgs == null || typeArgs.isEmpty());\n+        }\n+\n+        public final ClassType outerType;\n+        public final String name;\n+        public final List<Type> typeArgs;\n+    }\n+\n+    \/**\n+     * Represents a FormalTypeParameter. These are used to declare the type\n+     * parameters for generic classes and methods.\n+     * <p>\n+     * See:\n+     * JVMS 4.3.4\n+     * FormalTypeParameters:\n+     * {@code <} FormalTypeParameter+ {@code >}\n+     * FormalTypeParameter:\n+     * Identifier ClassBound InterfaceBound*\n+     * ClassBound:\n+     * {@code :} FieldTypeSignature_opt\n+     * InterfaceBound:\n+     * {@code :} FieldTypeSignature\n+     *\/\n+    public static class TypeParamType extends Type {\n+        public TypeParamType(String name, Type classBound, List<Type> interfaceBounds) {\n+            this.name = name;\n+            this.classBound = classBound;\n+            this.interfaceBounds = interfaceBounds;\n+        }\n+\n+        public <R, D> R accept(Visitor<R, D> visitor, D data) {\n+            return visitor.visitTypeParamType(this, data);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            StringBuilder sb = new StringBuilder();\n+            sb.append(name);\n+            String sep = \" extends \";\n+            if (classBound != null) {\n+                sb.append(sep);\n+                sb.append(classBound);\n+                sep = \" & \";\n+            }\n+            if (interfaceBounds != null) {\n+                for (Type bound : interfaceBounds) {\n+                    sb.append(sep);\n+                    sb.append(bound);\n+                    sep = \" & \";\n+                }\n+            }\n+            return sb.toString();\n+        }\n+\n+        public final String name;\n+        public final Type classBound;\n+        public final List<Type> interfaceBounds;\n+    }\n+\n+    \/**\n+     * Represents a wildcard type argument.  A type argument that is not a\n+     * wildcard type argument will be represented by a ClassType, ArrayType, etc.\n+     * <p>\n+     * See:\n+     * JVMS 4.3.4\n+     * TypeArgument:\n+     * WildcardIndicator_opt FieldTypeSignature\n+     * {@code *}\n+     * WildcardIndicator:\n+     * {@code +}\n+     * {@code -}\n+     *\/\n+    public static class WildcardType extends Type {\n+        public enum Kind {UNBOUNDED, EXTENDS, SUPER}\n+\n+        public WildcardType() {\n+            this(Kind.UNBOUNDED, null);\n+        }\n+\n+        public WildcardType(Kind kind, Type boundType) {\n+            this.kind = kind;\n+            this.boundType = boundType;\n+        }\n+\n+        public <R, D> R accept(Visitor<R, D> visitor, D data) {\n+            return visitor.visitWildcardType(this, data);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            switch (kind) {\n+                case UNBOUNDED:\n+                    return \"?\";\n+                case EXTENDS:\n+                    return \"? extends \" + boundType;\n+                case SUPER:\n+                    return \"? super \" + boundType;\n+                default:\n+                    throw new AssertionError();\n+            }\n+        }\n+\n+        public final Kind kind;\n+        public final Type boundType;\n+    }\n+}\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/notations\/Type.java","additions":382,"deletions":0,"binary":false,"changes":382,"status":"added"},{"patch":"@@ -28,1 +28,1 @@\n- * Class providing an access to the product info.\n+ * Class providing access to the product info.\n@@ -37,2 +37,0 @@\n-    ;\n-\n","filename":"src\/org\/openjdk\/asmtools\/util\/ProductInfo.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,189 +0,0 @@\n-package org.openjdk.asmtools;\n-\n-import org.junit.jupiter.api.Assertions;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.net.URL;\n-import java.net.URLClassLoader;\n-import java.nio.file.FileVisitResult;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.SimpleFileVisitor;\n-import java.nio.file.attribute.BasicFileAttributes;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.Comparator;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n-\n-public class BruteForceHelper {\n-\n-    public static final String FRESHLY_BUILT_ASMTOOLS = \"target\/classes\";\n-\n-    private final ClassProvider classProvider;\n-\n-    private final Map<File, ThreeStringWriters> failedJdis = new HashMap<>();\n-    private final Map<File, ThreeStringWriters> passedJdis = new HashMap<>();\n-    private final Map<File, ThreeStringWriters> failedJasm = new HashMap<>();\n-    private final Map<File, ThreeStringWriters> passedJasm = new HashMap<>();\n-    private final Map<File, ThreeStringWriters> failedLoad = new HashMap<>();\n-    private final Map<File, ThreeStringWriters> passedLoad = new HashMap<>();\n-    private final File compileDir;\n-\n-    public BruteForceHelper() throws IOException {\n-        this(FRESHLY_BUILT_ASMTOOLS);\n-    }\n-\n-    public BruteForceHelper(String dir) throws IOException {\n-        this(new SearchingClassProvider(new File(dir)));\n-    }\n-\n-    public BruteForceHelper(ClassProvider cp) throws IOException {\n-        compileDir = Files.createTempDirectory(\"JdisJasmWorks\").toFile();\n-        compileDir.deleteOnExit();\n-        classProvider = cp;\n-    }\n-\n-    public void work(AsmToolsExecutable diasm, AsmToolsExecutable asm) throws IOException {\n-        List<File> classes = classProvider.getClasses();\n-        tryAll(classes, failedJdis, passedJdis, diasm);\n-        diasm.ensure(classes, failedJdis);\n-\n-        tryAll(classes, failedJasm, passedJasm, asm);\n-        asm.ensure(classes, failedJasm);\n-\n-        AsmToolsExecutable loadClass = new AsmToolsExecutable() {\n-            @Override\n-            public int run(ThreeStringWriters outs, File clazz) throws IOException {\n-                try {\n-                    URL url = compileDir.toURI().toURL();\n-                    URL[] urls = new URL[]{url};\n-                    URLClassLoader cl = new URLClassLoader(urls);\n-                    String[] metadata = passedJasm.get(clazz).getToolBos().split(\"\\n\"); \/\/npe on this get means, that passedJasm dont contains all so  the missing peace is in failedJasm, which's assert is commented out?\n-                    String origFile = metadata[0].replaceFirst(\".*: \", \"\");\n-                    String baseDir = metadata[2].replaceFirst(\".*: \", \"\");\n-                    String fqn = origFile.replaceFirst(baseDir + \"\/\", \"\").replaceFirst(\"\\\\.class$\", \"\").replaceAll(\"\/\", \".\");\n-                    Class cls = cl.loadClass(fqn);\n-                    return 0;\n-                } catch (Exception e) {\n-                    e.printStackTrace(outs.getToolOutput());\n-                    return 1;\n-                }\n-            }\n-\n-            @Override\n-            public void ensure(List<File> all, Map<File, ThreeStringWriters> failures) {\n-                Assertions.assertEquals(0, failedLoad.size(), \"from \" + classes.size() + \" failed to produce valid bytecode \" + failedLoad.size() + \": \" + keySetToString(failedLoad, getClassesRoot()));\n-            }\n-        };\n-        tryAll(classes, failedLoad, passedLoad, loadClass);\n-    }\n-\n-    public static String keySetToString(Map<File, ThreeStringWriters> failedJdis, File classesRoot) {\n-        return failedJdis.keySet().stream().map(f -> f.getAbsolutePath().replaceFirst(classesRoot.getAbsolutePath(), \"\")).collect(Collectors.joining(\", \"));\n-    }\n-\n-    private void tryAll(List<File> classes, Map<File, ThreeStringWriters> failed, Map<File, ThreeStringWriters> passed, AsmToolsExecutable ex) throws IOException {\n-        for (File clazz : classes) {\n-            ThreeStringWriters outs = new ThreeStringWriters();\n-            int i = ex.run(outs, clazz);\n-            outs.flush();\n-            if (i != 0) {\n-                Object o = failed.put(clazz, outs);\n-                Assertions.assertNull(o, \" duplicated class - \" + o);\n-                continue;\n-            }\n-            Object o = passed.put(clazz, outs);\n-            Assertions.assertNull(o, \" duplicated class - \" + o);\n-        }\n-        for (Map.Entry<File, ThreeStringWriters> failure : failed.entrySet().stream().sorted(new Comparator<Map.Entry<File, ThreeStringWriters>>() {\n-            @Override\n-            public int compare(Map.Entry<File, ThreeStringWriters> t0, Map.Entry<File, ThreeStringWriters> t1) {\n-                return t0.getKey().compareTo(t1.getKey());\n-            }\n-        }).collect(Collectors.toList())) {\n-            System.err.println(failure.getKey());\n-            System.err.println(failure.getValue().getErrorBos());\n-            System.err.println(failure.getValue().getLoggerBos());\n-            System.err.println(failure.getValue().getToolBos());\n-        }\n-    }\n-\n-    private static List<File> findClasses(File classesRoot) throws IOException {\n-        List<File> classes = new ArrayList<>();\n-        Files.walkFileTree(classesRoot.toPath(), new SimpleFileVisitor<>() {\n-            @Override\n-            public FileVisitResult visitFile(Path path, BasicFileAttributes basicFileAttributes) throws IOException {\n-                if (path.toString().endsWith(\".class\")) {\n-                    classes.add(path.toFile().getAbsoluteFile());\n-                }\n-                return FileVisitResult.CONTINUE;\n-            }\n-        });\n-        Assertions.assertNotEquals(0, classes.size(), \"There must be more then 0 class compiled in \" + classesRoot + \" before running this tests!\");\n-        Collections.sort(classes);\n-        return classes;\n-    }\n-\n-    public String getDecompiledClass(File clazz) {\n-        return passedJdis.get(clazz).getToolBos();\n-    }\n-\n-    public File getCompileDir() {\n-        return compileDir;\n-    }\n-\n-    public File getClassesRoot() {\n-        return classProvider.getClassesRoot();\n-    }\n-\n-    public static void createMetadata(ThreeStringWriters outs, File clazz, File savedAsm, File compileDir, File classesRoot) {\n-        outs.getToolOutput().println(\"Orig: \" + clazz.getAbsolutePath());\n-        outs.getToolOutput().println(\"To: \" + compileDir.getAbsolutePath());\n-        outs.getToolOutput().println(\"Base: \" + classesRoot.getAbsolutePath());\n-        outs.getToolOutput().println(\"From: \" + savedAsm.getAbsolutePath());\n-    }\n-\n-    public static File saveDecompiledCode(String body, String tmpPRefix) throws IOException {\n-        File savedFresh = File.createTempFile(tmpPRefix, \".java\");\n-        Files.writeString(savedFresh.toPath(), body);\n-        savedFresh.deleteOnExit();\n-        return savedFresh;\n-    }\n-\n-    public static class SearchingClassProvider implements ClassProvider {\n-        private final File root;\n-\n-        public SearchingClassProvider(File root) {\n-            this.root = root.getAbsoluteFile();\n-        }\n-\n-        @Override\n-        public File getClassesRoot() {\n-            return root;\n-        }\n-\n-        @Override\n-        public List<File> getClasses() throws IOException {\n-            return findClasses(root);\n-        }\n-    }\n-\n-    public interface ClassProvider {\n-\n-        File getClassesRoot();\n-\n-        List<File> getClasses() throws IOException;\n-    }\n-\n-    public interface AsmToolsExecutable {\n-        \n-        int run(ThreeStringWriters out, File clazz) throws IOException;\n-\n-        void ensure(List<File> all, Map<File, ThreeStringWriters> failures);\n-    }\n-\n-}\n\\ No newline at end of file\n","filename":"test\/java\/org\/openjdk\/asmtools\/BruteForceHelper.java","additions":0,"deletions":189,"binary":false,"changes":189,"status":"deleted"},{"patch":"@@ -1,33 +0,0 @@\n-package org.openjdk.asmtools;\n-\n-import org.junit.jupiter.api.Assertions;\n-\n-import java.io.File;\n-import java.util.regex.Pattern;\n-\n-public class ClassPathClassWork {\n-\n-    protected static Class clazz;\n-    protected static String classFile;\n-    protected static Pattern className;\n-    protected static Pattern packageName;\n-\n-    public static void initMainClassData(Class testsClass) {\n-        initGenericClassData(testsClass,\"classes\");\n-    }\n-\n-    public static void initTestClassData(Class testsClass) {\n-        initGenericClassData(testsClass,\"test-classes\");\n-    }\n-\n-    private static void initGenericClassData(Class testsClass, String subdir) {\n-        clazz = testsClass;\n-        classFile = \".\/target\/\"+subdir+\"\/\" + clazz.getName().replace('.', '\/') + \".class\";\n-        Assertions.assertTrue(new File(classFile).exists());\n-        className  = Pattern.compile(\"public .*class .*\" + clazz.getSimpleName() + \" extends .*\");\n-        packageName = Pattern.compile(\"package \"+clazz.getPackageName() + \";\");\n-    }\n-\n-\n-\n-}\n","filename":"test\/java\/org\/openjdk\/asmtools\/ClassPathClassWork.java","additions":0,"deletions":33,"binary":false,"changes":33,"status":"deleted"},{"patch":"@@ -1,182 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.asmtools;\n-\n-\n-import org.junit.jupiter.api.Assertions;\n-import org.junit.jupiter.api.BeforeAll;\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.TestInstance;\n-import org.openjdk.asmtools.lib.action.CompileAction;\n-import org.opentest4j.MultipleFailuresError;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.Executors;\n-import java.util.concurrent.atomic.AtomicInteger;\n-import java.util.stream.Collectors;\n-\n-import static org.junit.jupiter.api.Assertions.assertAll;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-\n-@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n-public class SequenceCallsTests {\n-    final String TEST_RESOURCE_FOLDER = \"sequence\" + File.separator;\n-\n-    private final List<Error> errors = Collections.synchronizedList(new ArrayList<>());\n-    private final List<Integer> results = Collections.synchronizedList(new ArrayList<>());\n-\n-    CompileAction sequenceCompiler;\n-    File resourceDir;\n-    HashMap<String, List<List<String>>> cases = new HashMap<>() {{\n-        put(\"jasm\",\n-                List.of(\n-                        List.of(\"EnclMethTest.jcod\"),\n-                        List.of(\"ConstantPoolTestDummy.jasm\"),\n-                        List.of(\"Not_Found_1.jasm\"),\n-                        List.of(\"nonvoidinit.jasm\", \"nonvoidinit.jasm\"),\n-                        List.of(\"Not_Found_2.jasm\"),\n-                        List.of(\"TestInterface01n01.jasm\")\n-                )\n-        );\n-        put(\"jcoder\",\n-                List.of(\n-                        List.of(\"EnclMethTest.jcod\"),\n-                        List.of(\"ConstantPoolTestDummy.jasm\"),\n-                        List.of(\"Not_Found_I.jcod\"),\n-                        List.of(\"module-info.jcod\"),\n-                        List.of(\"atrcod00402m1n.jcod\", \"stackmap00601m1n.jcod\"),\n-                        List.of(\"Not_Found_II.jcod\")\n-                )\n-        );\n-    }};\n-\n-    @BeforeAll\n-    public void init() throws IOException {\n-        String resName = TEST_RESOURCE_FOLDER + \"EnclMethTest.jcod\";        \/\/ must exist to get a correct path to files\n-        File file = new File(this.getClass().getResource(resName).getFile());\n-        resourceDir = file.getParentFile();\n-        sequenceCompiler = new CompileAction();\n-    }\n-\n-    public class CaseExecutor implements Runnable {\n-        private AtomicInteger counter = new AtomicInteger(0);\n-\n-        public void run() throws MultipleFailuresError {\n-            int index = counter.getAndIncrement();\n-            List<String> jasmFiles = cases.get(\"jasm\").get(index).stream().\n-                    map(f -> resourceDir + File.separator + f).collect(Collectors.toList());\n-            List<String> jcodFiles = cases.get(\"jcoder\").get(index).stream().\n-                    map(f -> resourceDir + File.separator + f).collect(Collectors.toList());\n-            if (index % 2 == 0) {\n-                assertAll(() -> {\n-                            var l = sequenceCompiler.jasm(jasmFiles);\n-                            results.add(l.result);\n-                        },\n-                        () -> {\n-                            var l = sequenceCompiler.jcoder(jcodFiles);\n-                            results.add(l.result);\n-                        }\n-                );\n-            } else {\n-                assertAll(() -> {\n-                            var l = sequenceCompiler.jcoder(jcodFiles);\n-                            results.add(l.result);\n-                        },\n-                        () -> {\n-                            var l = sequenceCompiler.jasm(jasmFiles);\n-                            results.add(l.result);\n-                        }\n-                );\n-            }\n-        }\n-    }\n-\n-    \/**\n-     * This is the test for CODETOOLS-7903401 (https:\/\/bugs.openjdk.org\/browse\/CODETOOLS-7903401)\n-     * jtreg fails if set of jdk tests process jasm,jdis files with defects\n-     * <p>\n-     * jib make -- test TEST=test\/hotspot\/jtreg\/runtime\n-     * Passed: runtime\/classFileParserBug\/BadInitMethod.java\n-     * nonvoidinit.jasm (29:20) Warning: <init> method cannot be an interface method\n-     * public abstract Method \"<init>\":\"()I\";\n-     * ^\n-     * Passed: runtime\/cds\/SharedBaseAddress.java#id1\n-     * Passed: runtime\/classFileParserBug\/FakeMethodAcc.java\n-     * switch from jcoder to jcoder\n-     * 1 warning(s)\n-     * jcoder- ERROR: (I18NResourceBundle) The warning message 'warn.init.in_int' not found\n-     * 1 error(s)\n-     * --------------------------------------------------\n-     * TEST: runtime\/classFileParserBug\/InitInInterface.java\n-     * TEST JDK: \/Users\/lkuskov\/dev\/openjdk\/build\/macosx-x64\/images\/jdk\n-     * <p>\n-     * ACTION: compile -- Failed. jasm failed\n-     * REASON: User specified action: run compile nonvoidinit.jasm voidinit.jasm\n-     * TIME: 0.257 seconds\n-     * messages:\n-     * command: compile \/Users\/lkuskov\/dev\/openjdk\/test\/hotspot\/jtreg\/runtime\/classFileParserBug\/nonvoidinit.jasm\n-     * \/Users\/lkuskov\/dev\/openjdk\/test\/hotspot\/jtreg\/runtime\/classFileParserBug\/voidinit.jasm\n-     * reason: User specified action: run compile nonvoidinit.jasm voidinit.jasm\n-     * <p>\n-     * The jtreg uses a single instance of asmtool during a test run that leads to error in switching between jasm\n-     * and jcoder environment. I.e. the environment is set to Jcod while jasm is processing sources\n-     * and therefore jasm can't find jasm-specific message in Jcoder environment.\n-     *\/\n-    @Test\n-    public void testCompilersWithConcurrency() throws InterruptedException {\n-        int numberOfThreads = cases.get(\"jasm\").size();\n-        ExecutorService service = Executors.newFixedThreadPool(numberOfThreads);\n-        CountDownLatch latch = new CountDownLatch(numberOfThreads);\n-        CaseExecutor caseExecutor = new CaseExecutor();\n-        for (int i = 0; i < numberOfThreads; i++) {\n-            service.execute(() -> {\n-                        try {\n-                            caseExecutor.run();\n-                        } catch (MultipleFailuresError error) {\n-                            errors.add(error);\n-                        }\n-                        latch.countDown();\n-                    }\n-            );\n-        }\n-        latch.await();\n-        \/\/ check OK's results\n-        \/\/\"Expected 4 missing plus 2 wrong format files.\");\n-        assertEquals(12, results.size());\n-        Collections.sort(results);\n-        assertEquals(results.get(0), 0);\n-        assertEquals(results.get(5), 0);\n-        assertEquals(results.get(6), 1);\n-        assertEquals(results.get(8), 1);\n-        assertEquals(results.get(9), 2);\n-        assertEquals(results.get(10), 2);\n-        assertEquals(results.get(11), 8);\n-    }\n-}\n","filename":"test\/java\/org\/openjdk\/asmtools\/SequenceCallsTests.java","additions":0,"deletions":182,"binary":false,"changes":182,"status":"deleted"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.attribute.BootstrapMethods;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.ArgumentsProvider;\n+import org.junit.jupiter.params.provider.ArgumentsSource;\n+import org.openjdk.asmtools.lib.action.EAsmTool;\n+import org.openjdk.asmtools.lib.action.EToolArguments;\n+import org.openjdk.asmtools.lib.action.Jdis;\n+import org.openjdk.asmtools.lib.attributes.Attribute;\n+import org.openjdk.asmtools.lib.ext.CaptureSystemOutput;\n+import org.openjdk.asmtools.lib.log.LogAndReturn;\n+\n+import java.io.IOException;\n+import java.util.stream.Stream;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.openjdk.asmtools.lib.ext.CaptureSystemOutput.Kind.OUTPUT;\n+\n+public class BootstrapMethodsAttributeTests {\n+\n+    private static Jdis jdis = new Jdis();\n+\n+    @ParameterizedTest\n+    @ArgumentsSource(BootstrapMethodsAttributeProvider.class)\n+    @CaptureSystemOutput(value = OUTPUT, mute = true)\n+    void testOutput(Attribute data, CaptureSystemOutput.OutputCapture outputCapture) throws IOException {\n+        outputCapture.expect(containsString(data.getClassName()));\n+        int rc = data.run();\n+        Assertions.assertEquals(data.getExpectedRc(), rc);\n+        for (EToolArguments args : EToolArguments.ofTool(EAsmTool.JDIS)) {\n+            String fname = data.getSimpleClassName() + args.getPostfix();\n+            LogAndReturn res = jdis.setArgs(args).decode(data.getContent());\n+        }\n+    }\n+\n+    @BeforeAll\n+    public static void setUp() throws IOException {\n+        jdis.setDestDir().setDebug(true);\n+    }\n+\n+    @AfterAll\n+    public static void tearDown() throws IOException {\n+    }\n+}\n+\n+class BootstrapMethodsAttributeProvider implements ArgumentsProvider {\n+\n+    @Override\n+    public Stream<? extends Arguments> provideArguments(ExtensionContext context) {\n+        String packageName = BootstrapMethodsAttributeTests.class.getPackage().getName();\n+        return Stream.of(\n+                Arguments.of(new Attribute(Attribute.Kind.CLASS_MAIN, packageName.concat(\".data.BootstrapExample01\"), 1)),\n+                Arguments.of(new Attribute(Attribute.Kind.CLASS_MAIN, packageName.concat(\".data.BootstrapExample02\"), 4))\n+        );\n+    }\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/attribute\/BootstrapMethods\/BootstrapMethodsAttributeTests.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.attribute.BootstrapMethods.data;\n+\n+import java.lang.invoke.*;\n+\n+public class BootstrapExample01 {\n+\n+    public static int main(String[] args) throws Throwable {\n+        \/\/ Dynamically resolve and invoke a method\n+        MethodHandle dynamicHandle = getDynamicInvoker();\n+        \/\/ Expected multiline output:\n+        \/\/ Bootstrap method called with:\n+        \/\/ Lookup: BootstrapExample01\n+        \/\/ Method Name: dynamicInvoke\n+        \/\/ Method Type: (String)void\n+        \/\/ Target method called with message: Hello, BootstrapExample01!\n+        dynamicHandle.invokeExact(\"Hello, BootstrapExample01!\");\n+        return 1;\n+    }\n+\n+    \/\/ Bootstrap method - this defines the linkage for invokedynamic\n+    public static CallSite bootstrap(MethodHandles.Lookup lookup, String methodName, MethodType methodType) throws Throwable {\n+        System.out.println(\"Bootstrap method called with:\");\n+        System.out.println(\"Lookup: \" + lookup);\n+        System.out.println(\"Method Name: \" + methodName);\n+        System.out.println(\"Method Type: \" + methodType);\n+\n+        \/\/ Resolve the target method (example: static method in this class)\n+        MethodHandle targetHandle = lookup.findStatic(BootstrapExample01.class, \"targetMethod\", methodType);\n+        return new ConstantCallSite(targetHandle);\n+    }\n+\n+    \/\/ Target method to be invoked dynamically\n+    public static void targetMethod(String message) {\n+        System.out.println(\"Target method called with message: \" + message);\n+    }\n+\n+    \/\/ Invokedynamic simulation for demonstration\n+    public static MethodHandle getDynamicInvoker() throws Throwable {\n+        MethodType bootstrapMethodType = MethodType.methodType(CallSite.class, MethodHandles.Lookup.class, String.class, MethodType.class);\n+        MethodHandle bootstrapHandle = MethodHandles.lookup().findStatic(BootstrapExample01.class, \"bootstrap\", bootstrapMethodType);\n+\n+        \/\/ Define the signature of the invokedynamic target\n+        MethodType targetMethodType = MethodType.methodType(void.class, String.class);\n+        CallSite callSite = (CallSite) bootstrapHandle.invoke(MethodHandles.lookup(), \"dynamicInvoke\", targetMethodType);\n+        return callSite.dynamicInvoker();\n+    }\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/attribute\/BootstrapMethods\/data\/BootstrapExample01.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.attribute.BootstrapMethods.data;\n+\n+import java.util.function.Function;\n+\n+public class BootstrapExample02 {\n+    public static int main(String[] args) {\n+        Function<String, String> string = s -> \" = 2 x \" + s;\n+        Function<Integer, Integer> square = i -> (int) Math.pow(i, 2);\n+\n+        Integer result = square.apply(2);\n+        String message = string.apply(\"2\");\n+        \/\/ expected: 4 = 2 x 2\n+        System.out.println(\"%s %s%s\".formatted(BootstrapExample02.class.getName(), result, message));\n+        return result;\n+    }\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/attribute\/BootstrapMethods\/data\/BootstrapExample02.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"},{"patch":"@@ -0,0 +1,403 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.attribute.ConstantValue;\n+\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.ArgumentsProvider;\n+import org.junit.jupiter.params.provider.ArgumentsSource;\n+import org.openjdk.asmtools.lib.action.Jcoder;\n+import org.openjdk.asmtools.lib.log.LogAndBinResults;\n+import org.openjdk.asmtools.lib.transform.ResultChecker;\n+import org.openjdk.asmtools.lib.transform.TransformLoader;\n+import org.openjdk.asmtools.lib.transform.pipeline.*;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+@Disabled\n+\/\/ TODO: The -g option should be added to JDIS. It will allow keeping incorrect references to CP, and after the JASM-to-class step, the class will be loaded with CFE.\n+public class ConstantValueAttributeTests extends ResultChecker {\n+    private static final boolean DEBUG = false;\n+\n+    private static final String PACKAGE_PREFIX = \"javasoft.sqe.tests.vm.classfmt.atr\";\n+\n+    @ParameterizedTest(name = \"{0} - {2}\")\n+    @ArgumentsSource(ConstantValueAttributeJcodProvider_1.class)\n+    void testClassJasmClassChaining(String jcodFileName, String fqClassName,\n+                                    Class<Throwable> expectedException) throws IOException {\n+        JcodToClassConverter inputConverter = new JcodToClassConverter();\n+\n+        \/\/ Define the pipeline\n+        Pipeline<Jcod, Clazz> pipeline = new Pipeline<>(inputConverter)\n+                .addStage(new ClassToJasmConverter())\n+                .addStage(new JasmToClassConverter())\n+                .addStage(new ClassToJcodConverter())\n+                .addStage(new JcodToClassConverter());\n+\n+        Path jcodFilePath = Path.of(loadJcodFile(jcodFileName));\n+        Jcod jcodInput = new Jcod(new Pipeline.Status(jcodFilePath), true);\n+\n+        \/\/ Execute the pipeline\n+        Clazz finalOutput = pipeline.execute(jcodInput);\n+\n+        byte[] classBytes = finalOutput.record().byteOutput().getOutputs().get(0).getBody();\n+\n+        \/\/ Step 3: Load the transformed class\n+        TransformLoader transformLoader = new TransformLoader(ConstantValueAttributeTests.class.getClassLoader())\n+                .setTransformFilter(className -> className.contains(PACKAGE_PREFIX));\n+\n+        if (expectedException == null) {\n+            \/\/ Positive scenario: Class file should load successfully\n+            Optional<Object> loadedClass = Optional.empty();\n+            try {\n+                loadedClass = transformLoader.loadClassFromBuffer(\n+                        PACKAGE_PREFIX.concat(\".\").concat(fqClassName), classBytes, false\n+                );\n+            } catch (Exception e) {\n+                fail(e);\n+            }\n+            assertTrue(loadedClass.isPresent(), \"Class loading failed: No object returned.\");\n+            assertEquals(Class.class, loadedClass.get().getClass(), \"Loaded object is not a Class.\");\n+        } else {\n+            \/\/ Negative scenario: Class file fails to load and throws an expected exception\n+            assertThrows(expectedException,\n+                    () -> transformLoader.loadClassFromBuffer(\n+                            PACKAGE_PREFIX.concat(\".\").concat(fqClassName), classBytes, false)\n+\n+            );\n+        }\n+    }\n+\n+    \/**\n+     * The test tries to use 'jdis' tool to compile jasm file that is illegal in content. Generation should fail.\n+     * <ul>\n+     *     <li>Setup: Locate the JCod file. Resolves the jcod file path stored in the test repository and compile this using 'jcoder' tool<\/li>\n+     *     <li>Step 1: Generate (Class -> Jasm). Generate jasm file from the class file 'jdis' tool<\/li>\n+     *     <ul>\n+     *         <li>Positive scenario: None<\/li>\n+     *         <li>Negative scenario: 'jdis' operation fails with Fatal error in file<\/li>\n+     *     <\/ul>\n+     * <\/ul>\n+     *\n+     * @param jcodFileName - jcod File in the test resources repository\n+     * @throws IOException - Thrown from the GeneratorAction, CompileAction and temporary file operations.\n+     *\/\n+    @ParameterizedTest(name = \"{0}\")\n+    @ArgumentsSource(ProviderForToolError_1.class)\n+    void testJdisError_InvalidAttrLength_01(String jcodFileName) throws IOException {\n+        final String expectedStageToFail = \"classToJasm2\";\n+        var jcodToClass = new JcodToClassConverter(\"jcodToClass1\");\n+        var classToJasmFails = new ClassToJasmConverter(expectedStageToFail); \/\/Failure is expected here\n+        var jasmToClass = new JasmToClassConverter(\"jasmToClass3\");\n+        var classToJcod = new ClassToJcodConverter(\"classToJcod4\");\n+        \/\/ Define the pipeline\n+        Pipeline<Jcod, Jcod> pipeline = new Pipeline<>(jcodToClass)\n+                .addStage(classToJasmFails)\n+                .addStage(jasmToClass)\n+                .addStage(classToJcod);\n+\n+        Path jcodFilePath = Path.of(loadJcodFile(jcodFileName));\n+        Jcod jcodInput = new Jcod(new Pipeline.Status(jcodFilePath), true);\n+\n+        \/\/ Execute the pipeline\n+        Jcod finalOutput = pipeline.execute(jcodInput);\n+\n+        \/\/ Step 1.1: Verify jdis output\n+        assertThat(classToJasmFails.record().log().toString(), Matchers.allOf(\n+                        Matchers.containsString(\"jdis   - ERROR: ATT_ConstantValue: Invalid attribute length #4\"),\n+                        Matchers.containsString(\"1 error(s) in the file: bytes\/bytes\")\n+                )\n+        );\n+\n+        assertThat(finalOutput.record().log().toString(), Matchers.allOf(\n+                        Matchers.containsString(\"jdis   - ERROR: ATT_ConstantValue: Invalid attribute length #4\"),\n+                        Matchers.containsString(\"1 error(s) in the file: bytes\/bytes\")\n+                )\n+        );\n+    }\n+\n+    @Disabled\n+    @Test\n+        \/\/The field_info structure contains two ConstantValue attributes in the attributes table.\n+    void testClassJasmClassChainingX() throws IOException {\n+        String jcodFileName = \"atrcvl00301m1n.jcod\";\n+        String fqClassName = \"atrcvl003.atrcvl00301m1.atrcvl00301m1n\";\n+\n+        JcodToClassConverter inputConverter = new JcodToClassConverter();\n+        ClassToJasmConverter warningConverter = new ClassToJasmConverter();\n+        JasmToClassConverter xx = new JasmToClassConverter();\n+        \/\/ Define the pipeline\n+        Pipeline<Jcod, Clazz> pipeline = new Pipeline<>(inputConverter)\n+                .addStage(warningConverter)\n+                .addStage(new JasmToClassConverter())\n+                .addStage(new ClassToJcodConverter())\n+                .addStage(new JcodToClassConverter());\n+\n+        Path jcodFilePath = Path.of(loadJcodFile(jcodFileName));\n+        Jcod jcodInput = new Jcod(new Pipeline.Status(jcodFilePath), true);\n+\n+        \/\/ Execute the pipeline\n+        Clazz finalOutput = pipeline.execute(jcodInput);\n+        byte[] classBytes = finalOutput.record().byteOutput().getOutputs().get(0).getBody();\n+\n+        assertThat(warningConverter.record().log().toString(), Matchers.allOf(\n+                        Matchers.containsString(\"WARN: There is more than one \\\"ATT_ConstantValue\\\" \" +\n+                                \"attribute in the attributes table of a \\\"field_info\\\" structure. \" +\n+                                \"The last one is used\")\n+                )\n+        );\n+\n+        \/\/ Step 3: Load the transformed class\n+        TransformLoader transformLoader = new TransformLoader(ConstantValueAttributeTests.class.getClassLoader())\n+                .setTransformFilter(className -> className.contains(PACKAGE_PREFIX));\n+\n+        Optional<Object> loadedClass = Optional.empty();\n+        try {\n+            loadedClass = transformLoader.loadClassFromBuffer(\n+                    PACKAGE_PREFIX.concat(\".\").concat(fqClassName), classBytes, false\n+            );\n+        } catch (Exception e) {\n+            fail(e);\n+        }\n+        assertTrue(loadedClass.isPresent(), \"Class loading failed: No object returned.\");\n+        assertEquals(Class.class, loadedClass.get().getClass(), \"Loaded object is not a Class.\");\n+    }\n+\n+    \/**\n+     * Locate the JCod file. Resolves the jcod file path stored in the test repository and compile this using 'jcoder' tool\n+     *\n+     * @param jcodFileName jcod File in the test resources repository\n+     * @return Output of the CompileAction\n+     * @throws IOException CompileAction fails\n+     *\/\n+    private LogAndBinResults produceClassInputFromJcod(String jcodFileName) throws IOException {\n+        \/\/ Step 1: Locate the JCod file\n+        String jcodFilePath = loadJcodFile(jcodFileName);\n+\n+        \/\/ Step 1.1: Compile JCod -> Class\n+        LogAndBinResults compileResult = new Jcoder().compile(List.of(jcodFilePath));\n+        println(\"Compile JCod to Class\", compileResult.log.toString());\n+        return compileResult;\n+    }\n+\n+    \/**\n+     * Loads a JCOD file from the resources' directory.\n+     *\n+     * @param jcodFileName The name of the JCOD file.\n+     * @return The JCOD file content as a byte array.\n+     *\/\n+    private String loadJcodFile(String jcodFileName) {\n+        String resourceName = String.format(\"\/jcod-files\/%s\", jcodFileName);\n+        File resourceDir = new File(Objects.requireNonNull(this.getClass().getResource(resourceName)).getFile()).getParentFile();\n+        return resourceDir + File.separator + jcodFileName;\n+    }\n+\n+    \/**\n+     * Writes the given byte array to a temporary file with the specified file name and extension.\n+     *\n+     * @param fileName The prefix for the temporary file name.\n+     * @param ext      The suffix (extension) for the temporary file.\n+     * @param buffer   The byte array to write to the file.\n+     * @return The path to the created temporary file.\n+     * @throws IOException          If an I\/O error occurs.\n+     * @throws NullPointerException If any of the arguments are null.\n+     *\/\n+    public static Path writeBytesToFile(String fileName, String ext, byte[] buffer) throws IOException {\n+        \/\/ Validate input parameters\n+        Objects.requireNonNull(fileName, \"File name must not be null\");\n+        Objects.requireNonNull(ext, \"File extension must not be null\");\n+        Objects.requireNonNull(buffer, \"Buffer must not be null\");\n+\n+        \/\/ Create a temporary file with the given prefix and suffix\n+        Path tempFile = Files.createTempFile(fileName, ext);\n+\n+        \/\/ Write the byte array to the file\n+        Files.write(tempFile, buffer, StandardOpenOption.WRITE);\n+\n+        return tempFile;\n+    }\n+\n+    \/**\n+     * Provides test arguments for the parameterized test.\n+     *\/\n+    static class ConstantValueAttributeJcodProvider_1 implements ArgumentsProvider {\n+        @Override\n+        public Stream<? extends Arguments> provideArguments(ExtensionContext extensionContext) {\n+            return Stream.of(\n+                    Arguments.of(\"atrcvl00101m10p.jcod\", \"atrcvl001.atrcvl00101m1.atrcvl00101m10p\", null),\n+                    Arguments.of(\"atrcvl00101m1t0p.jcod\", \"atrcvl001.atrcvl00101m1t.atrcvl00101m1t0p\", null),\n+                    Arguments.of(\"atrcvl00102m10p.jcod\", \"atrcvl001.atrcvl00102m1.atrcvl00102m10p\", null),\n+                    Arguments.of(\"atrcvl00102m1t0p.jcod\", \"atrcvl001.atrcvl00102m1t.atrcvl00102m1t0p\", null),\n+                    \/\/ The field_info structure contains two ConstantValue attributes in the attributes table.\n+                    \/\/TODO:  Warning is thrown (not error)\n+                    Arguments.of(\"atrcvl00301m1n.jcod\", \"atrcvl003.atrcvl00301m1.atrcvl00301m1n\", null),\n+                    Arguments.of(\"atrcvl00301m1p.jcod\", \"atrcvl003.atrcvl00301m1.atrcvl00301m1p\", null),\n+                    \/\/ TODO: Need a way to compile a .java file for p to access n file\n+                    \/\/ Arguments.of(\"atrcvl00401m1p.jcod\", \"atrcvl004.atrcvl00401m1.atrcvl00401m1p\", null),\n+                    \/\/ The value of the attribute_name_index item is equal to zero.\n+                    \/\/TODO:  Warning is thrown (not error)\n+                    Arguments.of(\"atrcvl00501m1n.jcod\", \"atrcvl005.atrcvl00501m1.atrcvl00501m1n\", null),\n+                    Arguments.of(\"atrcvl00501m1p.jcod\", \"atrcvl005.atrcvl00501m1.atrcvl00501m1p\", null),\n+                    \/\/ The value of the attribute_name_index item is equal to constant_pool_length.\n+                    \/\/TODO:  Warning is thrown (not error)\n+                    Arguments.of(\"atrcvl00502m1n.jcod\", \"atrcvl005.atrcvl00502m1.atrcvl00502m1n\", null),\n+                    Arguments.of(\"atrcvl00502m1p.jcod\", \"atrcvl005.atrcvl00502m1.atrcvl00502m1p\", null),\n+                    \/\/ The constant_pool entry at the attribute_name_index is not a CONSTANT_Utf8_info structure.\n+                    \/\/TODO:  Warning is thrown (not error)\n+                    Arguments.of(\"atrcvl00601m1n.jcod\", \"atrcvl006.atrcvl00601m1.atrcvl00601m1n\", null),\n+                    Arguments.of(\"atrcvl00601m1p.jcod\", \"atrcvl006.atrcvl00601m1.atrcvl00601m1p\", null),\n+                    Arguments.of(\"atrcvl00701m10p.jcod\", \"atrcvl007.atrcvl00701m1.atrcvl00701m10p\", null),\n+                    Arguments.of(\"atrcvl00702m10p.jcod\", \"atrcvl007.atrcvl00702m1.atrcvl00702m10p\", null),\n+                    Arguments.of(\"atrcvl00702m11p.jcod\", \"atrcvl007.atrcvl00702m1.atrcvl00702m11p\", null),\n+                    \/\/TODO:  Warning is thrown (not error)\n+                    Arguments.of(\"atrcvl00801m1n.jcod\", \"atrcvl008.atrcvl00801m1.atrcvl00801m1n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl00801m1p.jcod\", \"atrcvl008.atrcvl00801m1.atrcvl00801m1p\", null),\n+                    Arguments.of(\"atrcvl00802m1n.jcod\", \"atrcvl008.atrcvl00802m1.atrcvl00802m1n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl00802m1p.jcod\", \"atrcvl008.atrcvl00802m1.atrcvl00802m1p\", null),\n+                    Arguments.of(\"atrcvl00901m1n.jcod\", \"atrcvl009.atrcvl00901m1.atrcvl00901m1n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl00901m1p.jcod\", \"atrcvl009.atrcvl00901m1.atrcvl00901m1p\", null),\n+                    Arguments.of(\"atrcvl00902m1n.jcod\", \"atrcvl009.atrcvl00902m1.atrcvl00902m1n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl00902m1p.jcod\", \"atrcvl009.atrcvl00902m1.atrcvl00902m1p\", null),\n+                    Arguments.of(\"atrcvl00903m1n.jcod\", \"atrcvl009.atrcvl00903m1.atrcvl00903m1n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl00903m1p.jcod\", \"atrcvl009.atrcvl00903m1.atrcvl00903m1p\", null),\n+                    Arguments.of(\"atrcvl00904m1n.jcod\", \"atrcvl009.atrcvl00904m1.atrcvl00904m1n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl00904m1p.jcod\", \"atrcvl009.atrcvl00904m1.atrcvl00904m1p\", null),\n+                    Arguments.of(\"atrcvl00905m1n.jcod\", \"atrcvl009.atrcvl00905m1.atrcvl00905m1n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl00905m1p.jcod\", \"atrcvl009.atrcvl00905m1.atrcvl00905m1p\", null),\n+                    Arguments.of(\"atrcvl00906m1n.jcod\", \"atrcvl009.atrcvl00906m1.atrcvl00906m1n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl00906m1p.jcod\", \"atrcvl009.atrcvl00906m1.atrcvl00906m1p\", null),\n+                    Arguments.of(\"atrcvl00907m1n.jcod\", \"atrcvl009.atrcvl00907m1.atrcvl00907m1n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl00907m1p.jcod\", \"atrcvl009.atrcvl00907m1.atrcvl00907m1p\", null),\n+                    Arguments.of(\"atrcvl00908m1n.jcod\", \"atrcvl009.atrcvl00908m1.atrcvl00908m1n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl00908m1p.jcod\", \"atrcvl009.atrcvl00908m1.atrcvl00908m1p\", null),\n+                    Arguments.of(\"atrcvl00909m1n.jcod\", \"atrcvl009.atrcvl00909m1.atrcvl00909m1n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl00909m1p.jcod\", \"atrcvl009.atrcvl00909m1.atrcvl00909m1p\", null),\n+                    Arguments.of(\"atrcvl01001m1n.jcod\", \"atrcvl010.atrcvl01001m1.atrcvl01001m1n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01001m1p.jcod\", \"atrcvl010.atrcvl01001m1.atrcvl01001m1p\", null),\n+                    Arguments.of(\"atrcvl01002m10p.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m10p\", null),\n+                    Arguments.of(\"atrcvl01002m110p.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m110p\", null),\n+                    Arguments.of(\"atrcvl01002m111n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m111n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m112n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m112n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m113n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m113n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m114n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m114n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m115p.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m115p\", null),\n+                    Arguments.of(\"atrcvl01002m116n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m116n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m117n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m117n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m118n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m118n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m119n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m119n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m11n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m11n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m120p.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m120p\", null),\n+                    Arguments.of(\"atrcvl01002m121n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m121n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m122n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m122n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m123n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m123n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m124n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m124n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m125n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m125n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m126n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m126n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m127n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m127n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m128n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m128n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m129n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m129n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m12n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m12n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m130p.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m130p\", null),\n+                    Arguments.of(\"atrcvl01002m131n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m131n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m132n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m132n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m133n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m133n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m134n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m134n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m135n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m135n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m136n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m136n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m137n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m137n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m138n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m138n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m139n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m139n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m13n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m13n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m140p.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m140p\", null),\n+                    Arguments.of(\"atrcvl01002m141n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m141n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m142n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m142n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m143n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m143n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m144n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m144n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m145n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m145n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m146n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m146n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m147n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m147n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m148n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m148n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m149n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m149n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m14n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m14n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m150p.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m150p\", null),\n+                    Arguments.of(\"atrcvl01002m151n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m151n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m152n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m152n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m153n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m153n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m154n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m154n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m155n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m155n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m156n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m156n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m157n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m157n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m158n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m158n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m159n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m159n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m15p.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m15p\", null),\n+                    Arguments.of(\"atrcvl01002m160p.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m160p\", null),\n+                    Arguments.of(\"atrcvl01002m16n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m16n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m17n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m17n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m18n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m18n\", ClassFormatError.class),\n+                    Arguments.of(\"atrcvl01002m19n.jcod\", \"atrcvl010.atrcvl01002m1.atrcvl01002m19n\", ClassFormatError.class),\n+\n+                    Arguments.of(\"atrcod00101m1p.jcod\", \"atrcod001.atrcod00101m1.atrcod00101m1p\", null),\n+                    \/\/ TODO: CFE not found\n+                    Arguments.of(\"atrcod00101m1n.jcod\", \"atrcod001.atrcod00101m1.atrcod00101m1n\", null)\n+            );\n+        }\n+    }\n+\n+    \/**\n+     * Provides test arguments for the parameterized test.\n+     *\/\n+    static class ProviderForToolError_1 implements ArgumentsProvider {\n+        @Override\n+        public Stream<? extends Arguments> provideArguments(ExtensionContext extensionContext) {\n+            return Stream.of(\n+                    \/\/ Instead of 2, length of the ConstantValue attribute is set to 4.\n+                    Arguments.of(\"atrcvl00701m11n.jcod\", \"atrcvl007.atrcvl00701m1.atrcvl00701m11n\", null),\n+                    \/\/ Length of an attribute with a name like \"ConstantValue\" is set to 4.\n+                    Arguments.of(\"atrcvl00702m12n.jcod\", \"atrcvl007.atrcvl00702m1.atrcvl00702m12n\", ClassFormatError.class)\n+            );\n+        }\n+    }\n+\n+    \/*\n+    Debug logger\n+    *\/\n+    private void println(String context, String text) {\n+        if (DEBUG && text != null && !text.isEmpty())\n+            System.out.printf(\"[%s] %s%n\", context, text);\n+    }\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/attribute\/ConstantValue\/ConstantValueAttributeTests.java","additions":403,"deletions":0,"binary":false,"changes":403,"status":"added"},{"patch":"@@ -0,0 +1,163 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.attribute.StackMapTable;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.openjdk.asmtools.common.inputs.StringInput;\n+import org.openjdk.asmtools.lib.action.*;\n+import org.openjdk.asmtools.lib.log.LogAndBinResults;\n+import org.openjdk.asmtools.lib.log.LogAndTextResults;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.stream.Stream;\n+\n+import static org.openjdk.asmtools.lib.utility.StringUtils.funcSubStrCount;\n+\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+public class StackMapTableTests {\n+    private Jasm jasm = new Jasm();\n+    private Jcoder jcoder = new Jcoder();\n+    private File resourceDir;\n+\n+\n+    private static Stream<Arguments> getJasmParameters() {\n+        return Stream.of(\n+                Arguments.of(\"StackMapData.g.jasm\", EToolArguments.JDIS_G, List.of(\n+                        (Function<String, Boolean>) (text) -> funcSubStrCount.apply(text, \"early_larval\") == 14,\n+                        (Function<String, Boolean>) (text) -> funcSubStrCount.apply(text, \"unset_fields\") == 14,\n+                        (Function<String, Boolean>) (text) -> funcSubStrCount.apply(text, \"stack_map\") == 6)\n+                ),\n+                Arguments.of(\"StackMapData.g.t.jasm\", EToolArguments.JDIS_G_T, List.of(\n+                        (Function<String, Boolean>) (text) -> funcSubStrCount.apply(text, \"early_larval\") == 14,\n+                        (Function<String, Boolean>) (text) -> funcSubStrCount.apply(text, \"number_of_entries\") == 4,\n+                        (Function<String, Boolean>) (text) -> funcSubStrCount.apply(text, \"offset_delta\") == 15)\n+                ),\n+                Arguments.of(\"StackMapData.jasm\", EToolArguments.JDIS, List.of(\n+                        (Function<String, Boolean>) (text) -> funcSubStrCount.apply(text, \"early_larval\") == 14,\n+                        (Function<String, Boolean>) (text) -> funcSubStrCount.apply(text, \"unset_fields;\") == 4)\n+                ),\n+                Arguments.of(\"StackMapData.t.jasm\", EToolArguments.JDIS_T, List.of(\n+                        (Function<String, Boolean>) (text) -> funcSubStrCount.apply(text, \"early_larval\") == 14,\n+                        (Function<String, Boolean>) (text) -> funcSubStrCount.apply(text, \"frame_type\") == 54)\n+                ),\n+                Arguments.of(\"StackMapData01.g.jasm\", EToolArguments.JDIS_G, List.of(\n+                        (Function<String, Boolean>) (text) ->\n+                                funcSubStrCount.apply(text, \"The ConstantPool[15] must be a CONSTANT_NameAndType_info\") == 1)\n+                ),\n+                Arguments.of(\"StackMapData02.g.jasm\", EToolArguments.JDIS_T, List.of(\n+                        (Function<String, Boolean>) (text) -> funcSubStrCount.apply(text, \"early_larval\") == 13,\n+                        (Function<String, Boolean>) (text) -> funcSubStrCount.apply(text, \"frame_type\") == 39)\n+                )\n+\n+        );\n+    }\n+\n+    private static Stream<Arguments> getJcodParameters() {\n+        return Stream.of(\n+                Arguments.of(\"StackMapData.g.jcod\", EToolArguments.JDEC, List.of(\n+                        (Function<String, Boolean>) (text) -> funcSubStrCount.apply(text, \"early_larval_frame\") == 14,\n+                        (Function<String, Boolean>) (text) -> funcSubStrCount.apply(text, \"246b,\") == 14\n+                )),\n+                Arguments.of(\"StackMapData.jcod\", EToolArguments.JDEC_G, List.of(\n+                        (Function<String, Boolean>) (text) -> funcSubStrCount.apply(text, \"early_larval_frame\") == 14,\n+                        (Function<String, Boolean>) (text) -> funcSubStrCount.apply(text, \"246b,\") == 14,\n+                        (Function<String, Boolean>) (text) -> funcSubStrCount.apply(text, \"[25]\") == 1\n+                )),\n+                Arguments.of(\"StackMapData02.g.jcod\", EToolArguments.JDEC_G, List.of(\n+                        (Function<String, Boolean>) (text) -> funcSubStrCount.apply(text, \"early_larval_frame\") == 13,\n+                        (Function<String, Boolean>) (text) -> funcSubStrCount.apply(text, \"246b,\") == 13,\n+                        (Function<String, Boolean>) (text) -> funcSubStrCount.apply(text, \"[11]\") == 1\n+                ))\n+        );\n+    }\n+\n+    @BeforeAll\n+    public void init() throws IOException {\n+        resourceDir = new File(Objects.requireNonNull(this.getClass().getResource(\"StackMapData.g.jasm\")).getFile()).getParentFile();\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"getJasmParameters\")\n+    public void jasmTest(String resourceName, EToolArguments args, List<Function<String, Boolean>> tests) {\n+        \/\/ jasm to class in memory\n+        LogAndBinResults binResult = jasm.compile(List.of(resourceDir + File.separator + resourceName));\n+        \/\/ class produced correctly\n+        Assertions.assertTrue(binResult.log.toString().isEmpty());\n+        Assertions.assertEquals(0, binResult.result);\n+        \/\/ class to jasm\n+        LogAndTextResults textResult = new Jdis().setArgs(args).decode(binResult.getAsByteInput());\n+        Assertions.assertEquals(0, textResult.result);\n+        String jasmText = textResult.getResultAsString(Function.identity());\n+        for (Function<String, Boolean> testFunction : tests) {\n+            Assertions.assertTrue(testFunction.apply(jasmText));\n+        }\n+        \/\/ jasm to class\n+        binResult = jasm.compile(new StringInput(jasmText));\n+        \/\/ class produced correctly\n+        Assertions.assertTrue(binResult.log.toString().isEmpty());\n+        Assertions.assertEquals(0, binResult.result);\n+        \/\/ class to jasm\n+        textResult = new Jdis().setArgs(args).decode(binResult.getAsByteInput());\n+        Assertions.assertEquals(0, textResult.result);\n+        jasmText = textResult.getResultAsString(Function.identity());\n+        for (Function<String, Boolean> testFunction : tests) {\n+            Assertions.assertTrue(testFunction.apply(jasmText));\n+        }\n+        \/\/ class to jcod\n+        textResult = new Jdec().setArgs(EToolArguments.JDEC_G).decode(binResult.getAsByteInput());\n+        Assertions.assertEquals(0, textResult.result);\n+        \/\/ jcod to class\n+        binResult = jcoder.compile(new StringInput(textResult.getResultAsString(Function.identity())));\n+        Assertions.assertEquals(0, binResult.result);\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"getJcodParameters\")\n+    public void jcoderTest(String resourceName, EToolArguments args, List<Function<String, Boolean>> tests) {\n+        \/\/ jcod to class in memory\n+        LogAndBinResults binResult = jcoder.compile(List.of(resourceDir + File.separator + resourceName));\n+        \/\/ class produced correctly\n+        Assertions.assertEquals(0, binResult.result);\n+        Assertions.assertTrue(binResult.log.toString().isEmpty());\n+        \/\/ class to jcod\n+        LogAndTextResults textResult = new Jdec().setArgs(args).decode(binResult.getAsByteInput());\n+        Assertions.assertEquals(0, textResult.result);\n+        for (Function<String, Boolean> testFunction : tests) {\n+            Assertions.assertTrue(testFunction.apply(textResult.getResultAsString(Function.identity())));\n+        }\n+        \/\/ class to jasm twice\n+        textResult = new Jdis().setArgs(EToolArguments.JDIS_G_T_LNT_LVT).decode(binResult.getAsByteInput());\n+        Assertions.assertEquals(0, textResult.result);\n+        textResult = new Jdis().setArgs(EToolArguments.JDIS_GG_NC_LNT_LVT).decode(binResult.getAsByteInput());\n+        Assertions.assertEquals(0, textResult.result);\n+    }\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/attribute\/StackMapTable\/StackMapTableTests.java","additions":163,"deletions":0,"binary":false,"changes":163,"status":"added"},{"patch":"@@ -0,0 +1,210 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.attribute.StackMapTable.data;\n+\n+import static java.lang.Math.round;\n+\n+public class StackMapData {\n+    static final int fldI = 0;\n+    static long fldL = 1;\n+\n+    protected String fldS = \"string\";\n+    public final String fldFS = \"string\";\n+\n+    public void generateFrames(int y) {\n+        int x = 0;\n+        Object obj = null;\n+\n+        try {\n+            x = 1 \/ x;\n+        } catch (ArithmeticException e) {\n+            obj = new Object();\n+        } finally {\n+            obj.toString();\n+        }\n+\n+        if (x == 0) {\n+            obj = null;\n+        }\n+\n+        switch (x) {\n+            case 1:\n+                obj = new Object();\n+                break;\n+            case 2:\n+                break;\n+        }\n+\n+        if (y == 0) {\n+            System.out.println(\"frame\");\n+        }\n+\n+        if (y == 1) {\n+            int temp = 42;\n+            System.out.println(\"item_frame\" + (int) (temp * round(100)));\n+        }\n+\n+        if (y == 2) {\n+            int a = 0;\n+            for (int i = 0; i < 3000; i++) {\n+                float temp = 3.14f;\n+                a += (int) (temp * round(100));\n+            }\n+            System.out.println(\"item_frame_\" + a);\n+        }\n+        int d = round(10);\n+        if (y == 3) {\n+            int a = round(110f);\n+            long b = round(100d);\n+            System.out.println(\"_frame: \" + (a + b) * d);\n+        }\n+\n+        if (y == 4) {\n+            int c = 50 * d;\n+            double dd = 99.99 * d;\n+            System.out.println(\"Before chop_frame: \" + (c + dd));\n+        } else {\n+            System.out.println(\"chop_frame\");\n+        }\n+\n+        if (y == 5) {\n+            int n = 0;\n+            for (int i = 0; i < 2500; i++) {\n+                float temp = 3.14f;\n+                n += (int) (temp * round(i));\n+            }\n+            if (n > 100) {\n+                System.out.println(\"_frame_\");\n+            } else if (n < 50) {\n+                int c = 50 * d;\n+                double dd = 99.99 * d;\n+                System.out.println(c + dd);\n+            }\n+        }\n+\n+        if (y == 6) {\n+            String str = \"n_frame\";\n+            char ch = 'F';\n+            int num = 100;\n+            System.out.println(str + \": \" + ch + num);\n+        }\n+\n+        int z = 0;\n+        Object obj1 = null;\n+\n+        try {\n+            z = 1 \/ z;\n+        } catch (ArithmeticException e) {\n+            obj1 = new Object();\n+        } finally {\n+            obj1.toString();\n+        }\n+\n+        if (z == 0) {\n+            obj1 = null;\n+        }\n+\n+        switch (x) {\n+            case 1:\n+                obj1 = new Object();\n+                break;\n+            case 2:\n+                break;\n+        }\n+    }\n+\n+    public int complexMethod(int x, Object o) {\n+        int a = 0;\n+        int b = 1;\n+        Object c = null;\n+\n+        try {\n+            if (x > 0) {\n+                a = x + 1;\n+                if (o instanceof String) {\n+                    c = (String) o;\n+                    b = c.hashCode();\n+                    return b; \/\/ Stack has one item (return value)\n+                }\n+                b = a * 2;\n+            } else if (x == -1) {\n+                a = -x;\n+                b = a + 3;\n+                throw new RuntimeException(\"Test exception\"); \/\/ Jumps to catch\n+            } else {\n+                for (int i = 0; i < 2; i++) {\n+                    a += i;\n+                    if (a > 1) {\n+                        b = a - i;\n+                        break; \/\/ Early exit from loop\n+                    }\n+                }\n+            }\n+        } catch (RuntimeException e) {\n+            c = e; \/\/ New local variable (exception)\n+            b = a + 5;\n+        }\n+\n+        return a + b; \/\/ Final return\n+    }\n+\n+    public int generateFullFrame(int x) {\n+        int result;\n+        Object temp;\n+        boolean flag;\n+\n+        try {\n+            if (x > 0) {\n+                \/\/ Path 1: Push something onto the stack and set locals\n+                temp = \"positive\";\n+                flag = true;\n+                result = temp.hashCode(); \/\/ Pushes an int onto the stack\n+            } else {\n+                \/\/ Path 2: Different stack state and locals\n+                result = x * 2; \/\/ Simple computation, stack briefly has an int\n+                throw new RuntimeException(\"non-positive\");\n+            }\n+        } catch (RuntimeException e) {\n+            \/\/ Path 3: Exception path with different locals\n+            temp = e;\n+            flag = false;\n+            result = -x;\n+        }\n+        \/\/ Merge point after try-catch\n+        if (flag) {\n+            return result + 1; \/\/ Stack has one item from Path 1 or 3\n+        }\n+        \/\/ Simulate a different stack state by adding a method call\n+        System.out.println(\"Computing result\");\n+        return result; \/\/ Stack is empty after println\n+    }\n+\n+    public static void main(String[] args) {\n+        StackMapData data = new StackMapData();\n+        for (int i = 0; i <= 6; i++) {\n+            data.generateFrames(i);\n+        }\n+        data.complexMethod(fldI, \"test\");\n+        data.generateFullFrame(fldI + 23);\n+    }\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/attribute\/StackMapTable\/data\/StackMapData.java","additions":210,"deletions":0,"binary":false,"changes":210,"status":"added"},{"patch":"@@ -1,88 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.asmtools.common;\n-\n-import org.junit.jupiter.api.Assertions;\n-\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.nio.charset.StandardCharsets;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.util.Optional;\n-import java.util.function.Consumer;\n-import java.util.stream.Stream;\n-\n-public class FileUtils {\n-\n-    public static File getResourceFilePath(Class<?> cls, String relativePath) {\n-        return new File(cls.getResource(relativePath).getFile());\n-    }\n-\n-    public static byte[] getResourceFile(String s) throws IOException {\n-        byte[] bytes;\n-        try (InputStream is = FileUtils.class.getResourceAsStream(s)) {\n-            bytes = is.readAllBytes();\n-            Assertions.assertNotNull(bytes);\n-        } catch (Exception ex) {\n-            System.err.println(\"Can't get resource file \" + s);\n-            throw ex;\n-        }\n-        return bytes;\n-    }\n-\n-    public static byte[] getBinaryFile(File file) throws ClassNotFoundException {\n-        long byteCount = file.length();\n-        byte[] bytes = new byte[(int) byteCount];\n-        try {\n-            FileInputStream f = new FileInputStream(file);\n-            f.read(bytes);\n-            f.close();\n-        } catch (Exception e) {\n-            throw new ClassNotFoundException();\n-        }\n-        Assertions.assertNotNull(bytes);\n-        return bytes;\n-    }\n-\n-    public static String getStringFile(File file) throws ClassNotFoundException {\n-        byte[] bytes = getBinaryFile(file);\n-        String str = new String(bytes, StandardCharsets.UTF_8);\n-        Assertions.assertNotNull(str);\n-        return str;\n-    }\n-\n-    public static Optional<Path> findFile(String root, String fileName, Consumer<String> printer) {\n-        try (\n-                Stream<Path> stream = Files.find(Paths.get(root), 20,\n-                        (path, attr) -> path.toString().endsWith(fileName))) {\n-            return stream.findAny();\n-        } catch (IOException e) {\n-            printer.accept(e.getMessage());\n-        }\n-        return Optional.empty();\n-    }\n-}\n","filename":"test\/java\/org\/openjdk\/asmtools\/common\/FileUtils.java","additions":0,"deletions":88,"binary":false,"changes":88,"status":"deleted"},{"patch":"@@ -1,1 +1,1 @@\n-package org.openjdk.asmtools;\n+package org.openjdk.asmtools.common;\n@@ -4,1 +4,0 @@\n-import org.junit.jupiter.api.AfterEach;\n@@ -8,0 +7,1 @@\n+import org.openjdk.asmtools.common.data.TestedHelloWorld;\n@@ -15,2 +15,3 @@\n-import org.openjdk.asmtools.lib.LogAndBinResults;\n-import org.openjdk.asmtools.lib.LogAndTextResults;\n+import org.openjdk.asmtools.lib.helper.ClassPathClassWork;\n+import org.openjdk.asmtools.lib.log.LogAndBinResults;\n+import org.openjdk.asmtools.lib.log.LogAndTextResults;\n@@ -22,0 +23,2 @@\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n@@ -26,1 +29,1 @@\n-        Options.unsetDetailedOutputOptions();\n+        Options.setDefaultOutputOptions();\n@@ -75,1 +78,1 @@\n-            Options.unsetDetailedOutputOptions();\n+            Options.setDefaultOutputOptions();\n@@ -123,0 +126,3 @@\n+        if ( o1.result != 0 ) {\n+            fail(\"jdec TestedHelloWorld.class failed.\\n%s\".formatted(o1.log));\n+        }\n","filename":"test\/java\/org\/openjdk\/asmtools\/common\/InputOutputTests.java","additions":12,"deletions":6,"binary":false,"changes":18,"previous_filename":"test\/java\/org\/openjdk\/asmtools\/InputOutputTests.java","status":"renamed"},{"patch":"@@ -0,0 +1,251 @@\n+\/*\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.common;\n+\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+import org.openjdk.asmtools.lib.action.Jasm;\n+import org.openjdk.asmtools.lib.action.Jcoder;\n+import org.openjdk.asmtools.lib.ext.CaptureSystemOutput;\n+import org.openjdk.asmtools.lib.log.LogAndBinResults;\n+import org.opentest4j.MultipleFailuresError;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertAll;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.openjdk.asmtools.lib.ext.CaptureSystemOutput.Kind.ERROR;\n+\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+public class SequenceCallsTests {\n+    final String TEST_RESOURCE_FOLDER = \"sequence\" + File.separator;\n+\n+    private final List<Error> errors = Collections.synchronizedList(new ArrayList<>());\n+    private final List<Integer> intResults = Collections.synchronizedList(new ArrayList<>());\n+    private final List<Boolean> boolResults = Collections.synchronizedList(new ArrayList<>());\n+\n+    private final Jasm jasmCompiler = new Jasm();\n+    private final Jcoder jcodCompiler = new Jcoder();\n+    private final Function<List<String>, LogAndBinResults> jasm = files -> jasmCompiler.compile(files);\n+    private final Function<List<String>, LogAndBinResults> jcoder = files -> jcodCompiler.compile(files);\n+    private final Function<List<String>, Boolean> reflectiveJasm = files -> jasmCompiler.reflectiveCompile(files);\n+    private final Function<List<String>, Boolean> reflectiveJcoder = files -> jcodCompiler.reflectiveCompile(files);\n+\n+    File resourceDir;\n+    HashMap<String, List<List<String>>> cases = new HashMap<>() {{\n+        put(\"jasm\",\n+                List.of(\n+                        List.of(\"EnclMethTest.jcod\"),\n+                        List.of(\"ConstantPoolTestDummy.jasm\"),\n+                        List.of(\"Not_Found_1.jasm\"),\n+                        List.of(\"nonvoidinit.jasm\", \"nonvoidinit.jasm\"),\n+                        List.of(\"Not_Found_2.jasm\"),\n+                        List.of(\"TestInterface01n01.jasm\")\n+                )\n+        );\n+        put(\"jcoder\",\n+                List.of(\n+                        List.of(\"EnclMethTest.jcod\"),\n+                        List.of(\"ConstantPoolTestDummy.jasm\"),\n+                        List.of(\"Not_Found_I.jcod\"),\n+                        List.of(\"module-info.jcod\"),\n+                        List.of(\"atrcod00402m1n.jcod\", \"stackmap00601m1n.jcod\"),\n+                        List.of(\"Not_Found_II.jcod\")\n+                )\n+        );\n+    }};\n+\n+    @BeforeAll\n+    public void init() throws IOException {\n+        String resName = TEST_RESOURCE_FOLDER + \"EnclMethTest.jcod\";        \/\/ must exist to get a correct path to files\n+        File file = new File(this.getClass().getResource(resName).getFile());\n+        resourceDir = file.getParentFile();\n+\n+    }\n+\n+    public class CaseExecutor01 implements Runnable {\n+        private AtomicInteger counter = new AtomicInteger(0);\n+\n+        public void run() throws MultipleFailuresError {\n+            int index = counter.getAndIncrement();\n+            List<String> jasmFiles = cases.get(\"jasm\").get(index).stream().\n+                    map(f -> resourceDir + File.separator + f).collect(Collectors.toList());\n+            List<String> jcodFiles = cases.get(\"jcoder\").get(index).stream().\n+                    map(f -> resourceDir + File.separator + f).collect(Collectors.toList());\n+            if (index % 2 == 0) {\n+                assertAll(() -> {\n+                            var l = jasm.apply(jasmFiles);\n+                            intResults.add(l.result);\n+                        },\n+                        () -> {\n+                            var l = jcoder.apply(jcodFiles);\n+                            intResults.add(l.result);\n+                        }\n+                );\n+            } else {\n+                assertAll(() -> {\n+                            var l = jcoder.apply(jcodFiles);\n+                            intResults.add(l.result);\n+                        },\n+                        () -> {\n+                            var l = jasm.apply(jasmFiles);\n+                            intResults.add(l.result);\n+                        }\n+                );\n+            }\n+        }\n+    }\n+\n+    public class CaseExecutor02 implements Runnable {\n+        private AtomicInteger counter = new AtomicInteger(0);\n+\n+        public void run() throws MultipleFailuresError {\n+            int index = counter.getAndIncrement();\n+            List<String> jasmFiles = cases.get(\"jasm\").get(index).stream().\n+                    map(f -> resourceDir + File.separator + f).collect(Collectors.toList());\n+            List<String> jcodFiles = cases.get(\"jcoder\").get(index).stream().\n+                    map(f -> resourceDir + File.separator + f).collect(Collectors.toList());\n+            if (index % 2 == 0) {\n+                assertAll(() -> {\n+                            var l = reflectiveJasm.apply(jasmFiles);\n+                            boolResults.add(l);\n+                        },\n+                        () -> {\n+                            var l = reflectiveJcoder.apply(jcodFiles);\n+                            boolResults.add(l);\n+                        }\n+                );\n+            } else {\n+                assertAll(() -> {\n+                            var l = reflectiveJcoder.apply(jcodFiles);\n+                            boolResults.add(l);\n+                        },\n+                        () -> {\n+                            var l = reflectiveJasm.apply(jasmFiles);\n+                            boolResults.add(l);\n+                        }\n+                );\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * This is the test for CODETOOLS-7903401 (https:\/\/bugs.openjdk.org\/browse\/CODETOOLS-7903401)\n+     * jtreg fails if set of jdk tests process jasm,jdis files with defects\n+     * <p>\n+     * jib make -- test TEST=test\/hotspot\/jtreg\/runtime\n+     * Passed: runtime\/classFileParserBug\/BadInitMethod.java\n+     * nonvoidinit.jasm (29:20) Warning: <init> method cannot be an interface method\n+     * public abstract Method \"<init>\":\"()I\";\n+     * ^\n+     * Passed: runtime\/cds\/SharedBaseAddress.java#id1\n+     * Passed: runtime\/classFileParserBug\/FakeMethodAcc.java\n+     * switch from jcoder to jcoder\n+     * 1 warning(s)\n+     * jcoder- ERROR: (I18NResourceBundle) The warning message 'warn.init.in_int' not found\n+     * 1 error(s)\n+     * --------------------------------------------------\n+     * TEST: runtime\/classFileParserBug\/InitInInterface.java\n+     * TEST JDK: \/Users\/lkuskov\/dev\/openjdk\/build\/macosx-x64\/images\/jdk\n+     * <p>\n+     * ACTION: compile -- Failed. jasm failed\n+     * REASON: User specified action: run compile nonvoidinit.jasm voidinit.jasm\n+     * TIME: 0.257 seconds\n+     * messages:\n+     * command: compile \/Users\/lkuskov\/dev\/openjdk\/test\/hotspot\/jtreg\/runtime\/classFileParserBug\/nonvoidinit.jasm\n+     * \/Users\/lkuskov\/dev\/openjdk\/test\/hotspot\/jtreg\/runtime\/classFileParserBug\/voidinit.jasm\n+     * reason: User specified action: run compile nonvoidinit.jasm voidinit.jasm\n+     * <p>\n+     * The jtreg uses a single instance of asmtool during a test run that leads to error in switching between jasm\n+     * and jcoder environment. I.e. the environment is set to Jcod while jasm is processing sources\n+     * and therefore jasm can't find jasm-specific message in Jcoder environment.\n+     *\/\n+    @Test\n+    public void testCompilersWithConcurrency01() throws InterruptedException {\n+        int numberOfThreads = cases.get(\"jasm\").size();\n+        ExecutorService service = Executors.newFixedThreadPool(numberOfThreads);\n+        CountDownLatch latch = new CountDownLatch(numberOfThreads);\n+        CaseExecutor01 caseExecutor01 = new CaseExecutor01();\n+        for (int i = 0; i < numberOfThreads; i++) {\n+            service.execute(() -> {\n+                        try {\n+                            caseExecutor01.run();\n+                        } catch (MultipleFailuresError error) {\n+                            errors.add(error);\n+                        }\n+                        latch.countDown();\n+                    }\n+            );\n+        }\n+        latch.await();\n+        \/\/ check OK's results\n+        \/\/\"Expected 4 miss plus 2 wrong format files.\");\n+        assertEquals(12, intResults.size());\n+        Collections.sort(intResults);\n+        assertEquals(0, intResults.get(0));\n+        assertEquals(0, intResults.get(5));\n+        assertEquals(1, intResults.get(6));\n+        assertEquals(1, intResults.get(8));\n+        assertEquals(2, intResults.get(9));\n+        assertEquals(2, intResults.get(10));\n+        assertEquals(8, intResults.get(11));\n+    }\n+\n+    @Test\n+    @CaptureSystemOutput(value = ERROR, mute = true)\n+    public void testCompilersWithConcurrency02() throws InterruptedException {\n+        int numberOfThreads = cases.get(\"jasm\").size();\n+        jasmCompiler.setDestDir();\n+        jcodCompiler.setDestDir();\n+        ExecutorService service = Executors.newFixedThreadPool(numberOfThreads);\n+        CountDownLatch latch = new CountDownLatch(numberOfThreads);\n+        CaseExecutor02 caseExecutor02 = new CaseExecutor02();\n+        for (int i = 0; i < numberOfThreads; i++) {\n+            service.execute(() -> {\n+                        try {\n+                            caseExecutor02.run();\n+                        } catch (MultipleFailuresError error) {\n+                            errors.add(error);\n+                        }\n+                        latch.countDown();\n+                    }\n+            );\n+        }\n+        latch.await();\n+        assertEquals(12, boolResults.size());\n+        assertEquals(6, boolResults.stream().filter(res -> res).count());\n+    }\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/common\/SequenceCallsTests.java","additions":251,"deletions":0,"binary":false,"changes":251,"status":"added"},{"patch":"@@ -1,56 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.asmtools.common;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-public class StringUtils {\n-\n-    public static List<String> substrBetween(final String str, final String startStr, final String endStr) {\n-        if (isEmpty(str) || isEmpty(startStr) || isEmpty(endStr)) {\n-            return new ArrayList<>();\n-        }\n-        final int strLen = str.length();\n-        final int startLen = endStr.length();\n-        final int endLen = startStr.length();\n-        final List<String> list = new ArrayList<>();\n-        int pos = 0;\n-        while (pos < strLen - startLen) {\n-            int start = str.indexOf(startStr, pos);\n-            if (start < 0)\n-                break;\n-            start += endLen;\n-            final int end = str.indexOf(endStr, start);\n-            if (end < 0)\n-                break;\n-            list.add(str.substring(start, end));\n-            pos = end + startLen;\n-        }\n-        return list;\n-    }\n-\n-    public static boolean isEmpty(String s) {\n-        return s == null || s.isEmpty();\n-    }\n-}\n","filename":"test\/java\/org\/openjdk\/asmtools\/common\/StringUtils.java","additions":0,"deletions":56,"binary":false,"changes":56,"status":"deleted"},{"patch":"@@ -1,1 +1,1 @@\n-package org.openjdk.asmtools;\n+package org.openjdk.asmtools.common.data;\n","filename":"test\/java\/org\/openjdk\/asmtools\/common\/data\/TestedHelloWorld.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/java\/org\/openjdk\/asmtools\/TestedHelloWorld.java","status":"renamed"},{"patch":"@@ -32,1 +32,1 @@\n-import org.openjdk.asmtools.ext.CaptureSystemOutput;\n+import org.openjdk.asmtools.lib.ext.CaptureSystemOutput;\n@@ -39,1 +39,1 @@\n-import static org.openjdk.asmtools.ext.CaptureSystemOutput.Kind.ERROR;\n+import static org.openjdk.asmtools.lib.ext.CaptureSystemOutput.Kind.ERROR;\n@@ -52,1 +52,1 @@\n-        outputCapture.expect(containsString(\"Invalid modifier(s) for a class 0x0002\"));\n+        outputCapture.expect(containsString(\"Class file version not specified in file or by -cv parameter\"));\n","filename":"test\/java\/org\/openjdk\/asmtools\/jasm\/MultipleFilesInSingleJasmTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023,2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,4 +29,5 @@\n-import org.openjdk.asmtools.lib.LogAndBinResults;\n-import org.openjdk.asmtools.lib.LogAndTextResults;\n-import org.openjdk.asmtools.lib.action.CompileAction;\n-import org.openjdk.asmtools.lib.action.GenerateAction;\n+import org.openjdk.asmtools.lib.action.EToolArguments;\n+import org.openjdk.asmtools.lib.action.Jasm;\n+import org.openjdk.asmtools.lib.action.Jdis;\n+import org.openjdk.asmtools.lib.log.LogAndBinResults;\n+import org.openjdk.asmtools.lib.log.LogAndTextResults;\n@@ -39,0 +40,1 @@\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -50,2 +52,0 @@\n-    private CompileAction compiler;\n-    private GenerateAction generator;\n@@ -60,2 +60,0 @@\n-        compiler = new CompileAction();\n-        generator = new GenerateAction();\n@@ -67,10 +65,18 @@\n-            \/\/jasm to class\n-            LogAndBinResults binResult = compiler.getJasmResult(List.of(jasmFiles[i]));\n-            \/\/ class to jasm\n-            LogAndTextResults textResult = generator.setToolArgs(\"-g\").getJdisResult(binResult.getAsByteInput());\n-            \/\/ Check that it is a module-info.jasm with removed spaces, tabs and new lines\n-            String jasmOutput = textResult.getResultAsString(s -> s.replaceAll(\"[ \\t\\n]*\", \"\"));\n-            assertThat(jasmOutput, Matchers.allOf(Matchers.startsWith(\"module#6\/*java.base*\/version65:0\"),\n-                    Matchers.matchesRegex(\".*const#.*=class#.*;..module-info.*\"),\n-                    Matchers.matchesRegex(\".*exports#.*java.util.spi..;.*\"),\n-                    Matchers.matchesRegex(\".*provides#.*java.util.random.RandomGenerator..with.*\")));\n+            try {\n+                \/\/jasm to class\n+                LogAndBinResults binResult = new Jasm().compile(List.of(jasmFiles[i]));\n+                \/\/ class to jasm\n+                LogAndTextResults textResult = new Jdis().setArgs(EToolArguments.JDIS_G).decode(binResult.getAsByteInput());\n+\n+                \/\/ Check that it is a module-info.jasm with removed spaces, tabs and new lines\n+                String jasmOutput = textResult.getResultAsString(s -> s.replaceAll(\"[ \\t\\n]*\", \"\"));\n+                assertThat(jasmOutput, Matchers.allOf(\n+                        Matchers.startsWith(\"module#6\/*java.base*\/version65\"),\n+                        Matchers.matchesRegex(\".*const#100.*\"),\n+                        Matchers.matchesRegex(\".*const.*[Cc]lass.*\"),\n+                        Matchers.matchesRegex(\".*const.*Package.*\"),\n+                        Matchers.matchesRegex(\".*uses.*java.text.spi.DateFormatSymbolsProvider.*\"),\n+                        Matchers.matchesRegex(\".*provides.*java.nio.file.spi.FileSystemProvider.*\")));\n+            } catch (Exception ex) {\n+                fail(\"Unexpected exception: \" + ex);\n+            }\n","filename":"test\/java\/org\/openjdk\/asmtools\/jasm\/case7903031\/TransformationTest.java","additions":25,"deletions":19,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,2 @@\n-import org.openjdk.asmtools.lib.LogAndReturn;\n-import org.openjdk.asmtools.lib.action.CompileAction;\n+import org.openjdk.asmtools.lib.action.Jasm;\n+import org.openjdk.asmtools.lib.log.LogAndReturn;\n@@ -36,1 +36,1 @@\n-import static org.openjdk.asmtools.lib.action.EAsmTools.Tool.TOOL_PASSED;\n+import static org.openjdk.asmtools.common.Environment.OK;\n@@ -41,3 +41,4 @@\n-    CompileAction compiler;\n-    File resourceDir;\n-    String resName = \"ifge_overflow.jasm\";\n+    private final Jasm jasm = new Jasm();\n+\n+    private File resourceDir;\n+    private String resName = \"ifge_overflow.jasm\";\n@@ -49,1 +50,0 @@\n-        compiler = new CompileAction();\n@@ -75,2 +75,1 @@\n-        final LogAndReturn logAndReturn = compiler.jasm(\n-                List.of(resourceDir + File.separator + resName));\n+        final LogAndReturn logAndReturn = jasm.compile(List.of(resourceDir + File.separator + resName));\n@@ -78,1 +77,1 @@\n-        Assertions.assertEquals(logAndReturn.result, TOOL_PASSED);\n+        Assertions.assertEquals(logAndReturn.result, OK);\n","filename":"test\/java\/org\/openjdk\/asmtools\/jasm\/case7903405\/NegativeJasmTests.java","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,3 +31,3 @@\n-import org.openjdk.asmtools.lib.LogAndTextResults;\n-import org.openjdk.asmtools.lib.action.CompileAction;\n-import org.openjdk.asmtools.lib.action.GenerateAction;\n+import org.openjdk.asmtools.lib.action.Jasm;\n+import org.openjdk.asmtools.lib.action.Jdis;\n+import org.openjdk.asmtools.lib.log.LogAndTextResults;\n@@ -43,1 +43,1 @@\n-import static org.openjdk.asmtools.lib.action.EAsmTools.Tool.TOOL_PASSED;\n+import static org.openjdk.asmtools.common.Environment.OK;\n@@ -64,2 +64,2 @@\n-    private CompileAction compiler;\n-    private GenerateAction generator;\n+    private Jasm jasm = new Jasm();\n+    private Jdis jdis = new Jdis();\n@@ -67,1 +67,1 @@\n-    private File resultDir;\n+    private Path resultDir;\n@@ -86,2 +86,2 @@\n-        resultDir = Files.createTempDirectory(\"JdisJasmWorks\").toFile();\n-        resultDir.deleteOnExit();\n+        resultDir = Files.createTempDirectory(\"JdisJasmWorks\");\n+        resultDir.toFile().deleteOnExit();\n@@ -89,3 +89,1 @@\n-        compiler = new CompileAction();\n-        compiler.setToolArgs(\"-d\", resultDir.getAbsolutePath());\n-        generator = new GenerateAction();\n+        jasm.setDestDir(resultDir);\n@@ -98,1 +96,1 @@\n-        compiler.getJasmResult(List.of(resourceDir + File.separator + resourceName));\n+        jasm.compile(List.of(resourceDir + File.separator + resourceName));\n@@ -102,2 +100,2 @@\n-        LogAndTextResults textResult = generator.getJdisResult(List.of(resultPath.toString()));\n-        Assertions.assertEquals(textResult.result, TOOL_PASSED);\n+        LogAndTextResults textResult = jdis.decode(List.of(resultPath.toString()));\n+        Assertions.assertEquals(textResult.result, OK);\n","filename":"test\/java\/org\/openjdk\/asmtools\/jasm\/case7903558\/Tests.java","additions":14,"deletions":16,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.jasm.case7903976;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.openjdk.asmtools.lib.action.Jasm;\n+import org.openjdk.asmtools.lib.log.LogAndBinResults;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+\/**\n+ * This is the test for the issue CODETOOLS-7903976 (https:\/\/bugs.openjdk.org\/browse\/CODETOOLS-7903976)\n+ * \"The jasm parser should permit malformed method signatures for JCK tests\"\n+ * <p>\n+ *\/\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+public class Tests {\n+    private Jasm jasm = new Jasm();\n+    private File resourceDir;\n+\n+    private static Stream<Arguments> getTestParameters() {\n+        return Stream.of(\n+                \/\/ Detailed jasm\n+                Arguments.of(\"Test01.jasm\", \"Warning: Malformed method signature at position 1. \\\"({JavaTypeSignature})Result\\\" is missing.\"),\n+                Arguments.of(\"Test02.jasm\", \"Warning: Malformed method signature at position 38. \\\"({JavaTypeSignature})Result\\\" is missing.\"),\n+                Arguments.of(\"Test03.jasm\", \"Warning: Malformed method signature at position 3. Unknown token \\\"X\\\" in \\\"({JavaTypeSignature})Result\\\"\"),\n+                Arguments.of(\"Test04.jasm\", \"Warning: Malformed method signature at position 2. Unknown token \\\"X\\\" in \\\"({JavaTypeSignature})Result\\\"\"),\n+                Arguments.of(\"Test05.jasm\", \"Warning: Malformed method signature at position 38. \\\"({JavaTypeSignature})Result\\\" is missing.\"),\n+                Arguments.of(\"Test06.jasm\", \"Warning: Malformed method signature at position 1. A \\\"(\\\" token is expected in \\\"({JavaTypeSignature})Result\\\"\"),\n+                Arguments.of(\"Test07.jasm\", \"Warning: Malformed method signature at position 3. Unknown token \\\"X\\\" in \\\"({JavaTypeSignature})Result\\\"\"),\n+                Arguments.of(\"Test08.jasm\", \"Warning: Malformed method signature at position 3. An array type signature is expected: \\\"[JavaTypeSignature\\\"\"),\n+                Arguments.of(\"Test09.jasm\", \"Warning: Malformed method signature at position 39. \\\"({JavaTypeSignature})Result\\\" is missing.\"),\n+                Arguments.of(\"Test10.jasm\", \"Warning: Malformed method signature at position 19. ClassTypeSignature is not properly terminated: L{PackageSpecifier\/}SimpleClassTypeSignature;\")\n+        );\n+    }\n+\n+    @BeforeAll\n+    public void init() throws IOException {\n+        resourceDir = new File(this.getClass().getResource(\"Test01.jasm\").getFile()).getParentFile();\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"getTestParameters\")\n+    public void methodSignatureTest(String resourceName, String jasmSubString) {\n+        \/\/ jasm to class on the disk\n+        LogAndBinResults res = jasm.compile(List.of(resourceDir + File.separator + resourceName));\n+        String log = res.log.toString();\n+        Assertions.assertTrue(log.contains(jasmSubString));\n+        \/\/ jasm file was created\n+        Assertions.assertEquals(0, res.result);\n+    }\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/jasm\/case7903976\/Tests.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.jasm.case7903987;\n+\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.openjdk.asmtools.lib.action.EToolArguments;\n+import org.openjdk.asmtools.lib.action.Jasm;\n+import org.openjdk.asmtools.lib.action.Jdis;\n+import org.openjdk.asmtools.lib.log.LogAndBinResults;\n+import org.openjdk.asmtools.lib.log.LogAndTextResults;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.matchesRegex;\n+\n+\/**\n+ * This is the test for the enhancement CODETOOLS-7903987 https:\/\/bugs.openjdk.org\/browse\/CODETOOLS-7903987)\n+ * \"The jasm parser should allow the use of primitive types in Constant Pool.\"\n+ *   const #1=true;\n+ *   const #2=192837465;\n+ *   const #3=1l;\n+ *   const #6=2.1f;\n+ *   const #8=\"utf 8 entry\";\n+ * <p>\n+ *\/\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+public class Tests {\n+    private Jasm jasm = new Jasm();\n+    private Jdis jdis = new Jdis().setArgs(EToolArguments.JDIS_G);\n+    private File resourceDir;\n+\n+    private static Stream<Arguments> getTestParameters() {\n+        return Stream.of(\n+                \/\/ Detailed jasm\n+                Arguments.of(\"Test00.jasm\", \"\")\n+        );\n+    }\n+\n+    @BeforeAll\n+    public void init() throws IOException {\n+        resourceDir = new File(this.getClass().getResource(\"Test00.jasm\").getFile()).getParentFile();\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"getTestParameters\")\n+    public void test00(String resourceName, String jasmSubString) {\n+        \/\/ jasm to class on the disk\n+        LogAndBinResults binResults = jasm.compile(List.of(resourceDir + File.separator + resourceName));\n+        \/\/ jasm file was created\n+        Assertions.assertEquals(0, binResults.result);\n+        LogAndTextResults  textResults = jdis.decode(binResults.getAsByteInput());\n+        Assertions.assertEquals(0, textResults.result);\n+        String buf = textResults.output.toString();\n+        assertThat(buf, matchesRegex(\"(?s).*const.*#1.*int.*1;.*\"));\n+        assertThat(buf, matchesRegex(\"(?s).*const.*#2.*int.*192837465;.*\"));\n+        assertThat(buf, matchesRegex(\"(?s).*const.*#3.*long.*1l;.*\"));\n+        assertThat(buf, matchesRegex(\"(?s).*const.*#5.*float.*2.1f;.*\"));\n+        assertThat(buf, matchesRegex(\"(?s).*const.*#6.*double.*2.2d;.*\"));\n+        assertThat(buf, matchesRegex(\"(?s).*const.*#8.*Utf8.*Long utf-8.*\"));\n+        assertThat(buf, matchesRegex(\"(?s).*const.*#9.*int.*0;.*\"));\n+    }\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/jasm\/case7903987\/Tests.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"},{"patch":"@@ -4,2 +4,2 @@\n-import org.openjdk.asmtools.BruteForceHelper;\n-import org.openjdk.asmtools.ThreeStringWriters;\n+import org.openjdk.asmtools.lib.helper.BruteForceHelper;\n+import org.openjdk.asmtools.lib.helper.ThreeStringWriters;\n@@ -75,1 +75,0 @@\n-\n","filename":"test\/java\/org\/openjdk\/asmtools\/jdec\/JdecJcod.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n-import org.openjdk.asmtools.BruteForceHelper;\n+import org.openjdk.asmtools.lib.helper.BruteForceHelper;\n@@ -8,1 +8,0 @@\n-\n@@ -24,1 +23,0 @@\n-\n","filename":"test\/java\/org\/openjdk\/asmtools\/jdec\/JdecJcodTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,0 @@\n-\n@@ -4,1 +3,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +27,4 @@\n-import org.openjdk.asmtools.ClassPathClassWork;\n-import org.openjdk.asmtools.ThreeStringWriters;\n+import org.openjdk.asmtools.lib.action.Jcoder;\n+import org.openjdk.asmtools.lib.helper.ClassPathClassWork;\n+import org.openjdk.asmtools.lib.helper.ThreeStringWriters;\n+import org.openjdk.asmtools.lib.log.LogAndBinResults;\n@@ -35,0 +36,1 @@\n+import java.util.List;\n@@ -58,0 +60,17 @@\n+    @Test\n+    public void main3StreamsCorruptedFileError() throws IOException {\n+        ThreeStringWriters outs = new ThreeStringWriters();\n+        String badJcodFile = getFile(\"\/org\/openjdk\/asmtools\/jcoder\/bad.jcod\");\n+        \/\/ jcod to class\n+        LogAndBinResults compileResult = new Jcoder().compile(List.of(badJcodFile));\n+        \/\/ class to jcod\n+        Main decoder = new Main(outs.getToolOutputWrapper(), outs.getLoggers(), compileResult.getAsByteInput());\n+        int i = decoder.decode();\n+        outs.flush();\n+        Assertions.assertEquals(1, i);\n+        Assertions.assertTrue(outs.getErrorBos().contains(\"jdec   - ERROR: Invalid constant type: 0 for element 1\"));\n+        Assertions.assertTrue(outs.getErrorBos().contains(\"1 error(s) in the file: bytes\/bytes\"));\n+        Assertions.assertTrue(outs.getToolBos().contains(\"0xCA 0xFE 0xBA 0x00 0x03 0x00 0x2D 0x00;\"));\n+        Assertions.assertTrue(outs.getLoggerBos().isEmpty());\n+    }\n+\n@@ -74,1 +93,1 @@\n-        File in =  new File(classFile);\n+        File in = new File(classFile);\n@@ -86,1 +105,1 @@\n-        }finally {\n+        } finally {\n","filename":"test\/java\/org\/openjdk\/asmtools\/jdec\/MainTest.java","additions":25,"deletions":6,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n@@ -4,2 +26,2 @@\n-import org.openjdk.asmtools.BruteForceHelper;\n-import org.openjdk.asmtools.ThreeStringWriters;\n+import org.openjdk.asmtools.lib.helper.BruteForceHelper;\n+import org.openjdk.asmtools.lib.helper.ThreeStringWriters;\n@@ -12,0 +34,3 @@\n+import static org.openjdk.asmtools.common.Environment.OK;\n+import static org.openjdk.asmtools.lib.utility.StringUtils.addTail;\n+\n@@ -14,1 +39,2 @@\n-    private final boolean g;\n+    private final String[] jdisArgs;\n+    private  String[] jasmArgs = new String[0];\n@@ -17,2 +43,2 @@\n-    public JdisJasm(boolean g, BruteForceHelper worker) {\n-        this.g = g;\n+    public JdisJasm(BruteForceHelper worker, String... jdisArgs) {\n+        this.jdisArgs = jdisArgs;\n@@ -22,0 +48,5 @@\n+    public JdisJasm setJasmArgs(String... jasmArgs) {\n+        this.jasmArgs = jasmArgs;\n+        return this;\n+    }\n+\n@@ -27,3 +58,1 @@\n-                if (g) {\n-                    disassem = new Main(outs.getToolOutputWrapper(), outs.getLoggers(), \"-g\", clazz.getAbsolutePath());\n-                } else {\n+                if (jdisArgs.length == 0) {\n@@ -31,0 +60,2 @@\n+                } else {\n+                    disassem = new Main(outs.getToolOutputWrapper(), outs.getLoggers(), addTail(jdisArgs, clazz.getAbsolutePath()));\n@@ -37,5 +68,4 @@\n-                String gs = \"\";\n-                if (g) {\n-                    gs = \"with -g \";\n-                }\n-                Assertions.assertEquals(0, failures.size(), \"from \" + all.size() + \"(\" + worker.getClassesRoot() + \") failed to disassemble \" + gs + failures.size() + \": \" + BruteForceHelper.keySetToString(failures, worker.getClassesRoot()));\n+                String gs = (jdisArgs.length == 0) ? \"\" : \"with %s \".formatted(String.join(\",\", jdisArgs));\n+                Assertions.assertEquals(0, failures.size(), \"from \" + all.size() + \"(\" + worker.getClassesRoot() +\n+                        \") failed to disassemble \" + gs + failures.size() + \": \" +\n+                        BruteForceHelper.keySetToString(failures, worker.getClassesRoot()));\n@@ -44,1 +74,1 @@\n-        BruteForceHelper.AsmToolsExecutable jasm = new JasmToolExecutable(worker, g);\n+        BruteForceHelper.AsmToolsExecutable jasm = new JasmToolExecutable(worker, jasmArgs);\n@@ -50,1 +80,1 @@\n-        private final String g;\n+        private final String[] arguments;\n@@ -52,1 +82,1 @@\n-        public JasmToolExecutable(BruteForceHelper worker, boolean g) {\n+        public JasmToolExecutable(BruteForceHelper worker, String[] arguments) {\n@@ -54,5 +84,1 @@\n-            if (g) {\n-                this.g = \" (from -g disasm) \";\n-            } else {\n-                this.g = \"\";\n-            }\n+            this.arguments = arguments;\n@@ -64,1 +90,2 @@\n-            org.openjdk.asmtools.jasm.Main asm = new org.openjdk.asmtools.jasm.Main(outs.getLoggers(), savedAsm.getAbsolutePath(), \"-d\", worker.getCompileDir().getAbsolutePath());\n+            org.openjdk.asmtools.jasm.Main asm = new org.openjdk.asmtools.jasm.Main(outs.getLoggers(),\n+                    addTail(arguments, savedAsm.getAbsolutePath(), \"-d\", worker.getCompileDir().getAbsolutePath()));\n@@ -66,1 +93,6 @@\n-            return asm.compile();\n+            int rc = asm.compile();\n+            if (rc != OK) {\n+                outs.getToolOutput().println(\"Failed to compile %s\".formatted(savedAsm));\n+                outs.getToolOutput().flush();\n+            }\n+            return rc;\n@@ -71,2 +103,4 @@\n-            \/\/three classes now fails, they will fail again in attempt to be loaded on NPE\n-            Assertions.assertEquals(0, failures.size(), \"from \" + all.size() + \" failed to assemble \" + g + \" to (\" + worker.getCompileDir() + \") \" + failures.size() + \": \" + BruteForceHelper.keySetToString(failures, worker.getClassesRoot()));\n+            \/\/three classes now fails; they will fail again in an attempt to be loaded on NPE\n+            Assertions.assertEquals(0, failures.size(),\n+                    \"from \" + all.size() + \" failed to assemble \" + String.join(\",\", arguments) + \" to (\" + worker.getCompileDir() + \") \" +\n+                            failures.size() + \": \" + BruteForceHelper.keySetToString(failures, worker.getClassesRoot()));\n@@ -76,1 +110,0 @@\n-\n","filename":"test\/java\/org\/openjdk\/asmtools\/jdis\/JdisJasm.java","additions":59,"deletions":26,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-import org.openjdk.asmtools.BruteForceHelper;\n+import org.openjdk.asmtools.lib.helper.BruteForceHelper;\n@@ -31,1 +31,0 @@\n-\n@@ -35,1 +34,2 @@\n-        new JdisJasm(false, worker).run();\n+        JdisJasm task = new JdisJasm(worker);\n+        task.run();\n@@ -37,0 +37,7 @@\n+\n+    @Test\n+    public void jdisTJasmAllDecompileCompileAndLoad() throws IOException {\n+        BruteForceHelper worker = new BruteForceHelper();\n+        new JdisJasm(worker, \"-table\").run();\n+    }\n+\n@@ -40,1 +47,2 @@\n-        new JdisJasm(true, worker).run();\n+        new JdisJasm(worker, \"-g\").run();\n+    }\n@@ -42,0 +50,4 @@\n+    @Test\n+    public void jdisGTJasmAllDecompileCompileAndLoad() throws IOException {\n+        BruteForceHelper worker = new BruteForceHelper();\n+        new JdisJasm(worker, \"-g\", \"-table\").run();\n","filename":"test\/java\/org\/openjdk\/asmtools\/jdis\/JdisJasmTest.java","additions":16,"deletions":4,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n@@ -6,2 +28,2 @@\n-import org.openjdk.asmtools.ClassPathClassWork;\n-import org.openjdk.asmtools.ThreeStringWriters;\n+import org.openjdk.asmtools.lib.helper.ClassPathClassWork;\n+import org.openjdk.asmtools.lib.helper.ThreeStringWriters;\n@@ -22,1 +44,1 @@\n-        Options.unsetDetailedOutputOptions();\n+        Options.setDefaultOutputOptions();\n@@ -29,1 +51,1 @@\n-        String nonExisitngFile = \"someNonExiostingFile\";\n+        String nonExisitngFile = \"someNonExistingFile\";\n@@ -79,1 +101,1 @@\n-    public void superIsNotOmited() throws IOException {\n+    public void superIsNotOmitted() throws IOException {\n@@ -94,1 +116,1 @@\n-                checkSupperIsOmitedIfNotPresent(clazz, testClazz);\n+                checkSupperIsOmittedIfNotPresent(clazz, testClazz);\n@@ -101,1 +123,1 @@\n-    private void checkSupperIsOmitedIfNotPresent(String clazzWithSuper, String fqn) throws IOException {\n+    private void checkSupperIsOmittedIfNotPresent(String clazzWithSuper, String fqn) throws IOException {\n@@ -104,1 +126,1 @@\n-        File sourceWithoutSuper = File.createTempFile(\"jasmTest\", name + \".java\");\n+        File sourceWithoutSuper = File.createTempFile(\"jasmTest\", name + \".jasm\");\n@@ -111,1 +133,3 @@\n-        org.openjdk.asmtools.jasm.Main jasmTool = new org.openjdk.asmtools.jasm.Main(new StdoutOutput(), new StderrLog(), sourceWithoutSuper.getAbsolutePath(), \"-d\", dir.getAbsolutePath());\n+        org.openjdk.asmtools.jasm.Main jasmTool = new org.openjdk.asmtools.jasm.Main(\n+                new StdoutOutput(), new StderrLog(), sourceWithoutSuper.getAbsolutePath(),\n+                \"-d\", dir.getAbsolutePath());\n@@ -115,1 +139,2 @@\n-        Main decoder = new Main(outs.getToolOutputWrapper(), outs.getLoggers(), dir.getAbsolutePath() + \"\/\" + fqn + \".class\");\n+        Main decoder = new Main(\n+                outs.getToolOutputWrapper(), outs.getLoggers(), dir.getAbsolutePath() + \"\/\" + fqn + \".class\");\n@@ -155,1 +180,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/jdis\/MainTest.java","additions":36,"deletions":11,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -0,0 +1,122 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.lib.action;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class Action {\n+\n+    private final EAsmTool tool;\n+    protected final String toolName;\n+    private DebugHelper debugHelper = new DebugHelper();\n+    private FSAction fsAction = new FSAction();\n+\n+    protected EToolArguments currentToolArgs;\n+\n+    public Action(EAsmTool tool) {\n+        this.tool = tool;\n+        toolName = tool.getName();\n+        currentToolArgs = EToolArguments.getArgumentsByPriority(tool, 0);\n+    }\n+\n+    public Action(EAsmTool tool, Path destDir) {\n+        this(tool);\n+        this.fsAction = new FSAction().setupDestDir(destDir);\n+    }\n+\n+    public Action setArgs(EToolArguments args) {\n+        if (args.tool != this.tool) {\n+            fail(\"Arguments mismatch for the tool \" + args.tool);\n+        }\n+        currentToolArgs = args;\n+        return this;\n+    }\n+\n+    public final List<EToolArguments> getListOfToolArgs() {\n+        return EToolArguments.ofTool(tool);\n+    }\n+\n+    \/**\n+     * Sets up the output directory.\n+     *\n+     * @param destDir the directory to be used for output\n+     * @return the instance\n+     *\/\n+    public Action setDestDir(Path destDir) {\n+        fsAction.setupDestDir(destDir);\n+        return this;\n+    }\n+\n+    \/**\n+     * Sets the type of output, either to the file system or a memory buffer.\n+     *\n+     * @param value true if the output destination is the file system; otherwise, it is a memory buffer.\n+     * @return the instance\n+     *\/\n+    public Action FSOtput(boolean value) {\n+        if (value) {\n+            fsAction.setupDestDir(null);\n+        } else {\n+            fsAction.createDestDir();\n+        }\n+        return this;\n+    }\n+\n+    public boolean isFSOutput() {\n+        return fsAction.getDestDir() != null;\n+    }\n+\n+    \/**\n+     * Sets up the temporary output directory that will be created\n+     *\n+     * @return the instance\n+     *\/\n+    public Action setDestDir() {\n+        fsAction.createDestDir();\n+        return this;\n+    }\n+\n+    public List<String> getDestDirParams() {\n+        return fsAction.getDestDirParams();\n+    }\n+\n+\n+    public String getDestDir() {\n+        return fsAction.getDestDir().toString();\n+    }\n+\n+    public Action setDebug(boolean value) {\n+        this.debugHelper.setDebug(value);\n+        return this;\n+    }\n+\n+    public void trace(Supplier<String> info) {\n+        this.debugHelper.trace(info);\n+    }\n+\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/action\/Action.java","additions":122,"deletions":0,"binary":false,"changes":122,"status":"added"},{"patch":"@@ -1,272 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.asmtools.lib.action;\n-\n-import org.openjdk.asmtools.common.Environment;\n-import org.openjdk.asmtools.common.inputs.ToolInput;\n-import org.openjdk.asmtools.common.outputs.ByteOutput;\n-import org.openjdk.asmtools.common.outputs.log.StringLog;\n-import org.openjdk.asmtools.lib.LogAndBinResults;\n-import org.openjdk.asmtools.lib.LogAndReturn;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.io.PrintStream;\n-import java.lang.reflect.Constructor;\n-import java.lang.reflect.Method;\n-import java.nio.file.Files;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.stream.Collectors;\n-\n-import static org.junit.jupiter.api.Assertions.fail;\n-\n-public class CompileAction {\n-    private static CompileAction entry;\n-    private final File destDir;\n-    private List<String> toolArgs = new ArrayList<>();\n-\n-    public CompileAction() throws IOException {\n-        destDir = Files.createTempDirectory(\"compile\").toFile();\n-        destDir.deleteOnExit();\n-    }\n-\n-    public static LogAndReturn JAsm(List<String> files, String... args) {\n-        return getEntry().setToolArgs().setToolArgs(args).jasm(files);\n-    }\n-\n-    public static LogAndReturn JCoder(List<String> files, String... args) {\n-        return getEntry().setToolArgs().setToolArgs(args).jcoder(files);\n-    }\n-\n-    public static LogAndReturn JAsm(ToolInput[] inputs, String... args) {\n-        return getEntry().setToolArgs().setToolArgs(args).jasm(inputs);\n-    }\n-\n-    public static LogAndReturn JCoder(ToolInput[] inputs, String... args) {\n-        return getEntry().setToolArgs().setToolArgs(args).jcoder(inputs);\n-    }\n-\n-    public CompileAction(File destDir) {\n-        this.destDir = destDir;\n-    }\n-\n-    public void reflectionJasm(List<String> files) {\n-        reflectionAction(\"jasm\", files);\n-    }\n-\n-    public void reflectionJcoder(List<String> files) {\n-        reflectionAction(\"jcoder\", files);\n-    }\n-\n-    public LogAndReturn jasm(List<String> files) {\n-        return getLogAndReturn(\"jasm\", files);\n-    }\n-\n-    public LogAndReturn jcoder(List<String> files) {\n-        return getLogAndReturn(\"jcoder\", files);\n-    }\n-\n-    public LogAndReturn jasm(ToolInput... toolInputs) {\n-        return getLogAndReturn(\"jasm\", toolInputs);\n-    }\n-\n-    public LogAndReturn jcoder(ToolInput... toolInputs) {\n-        return getLogAndReturn(\"jcoder\", toolInputs);\n-    }\n-\n-\n-    public LogAndBinResults getJasmResult(List<String> files) {\n-        return getLogAndBinResults(\"jasm\", files);\n-    }\n-\n-    public LogAndBinResults getJcoderResult(List<String> files) {\n-        return getLogAndBinResults(\"jcoder\", files);\n-    }\n-\n-    public LogAndBinResults getJasmResult(ToolInput... toolInputs) {\n-        return getLogAndBinResults(\"jasm\", toolInputs);\n-    }\n-\n-    public LogAndBinResults getJcoderResult(ToolInput... toolInputs) {\n-        return getLogAndBinResults(\"jcoder\", toolInputs);\n-    }\n-\n-    \/**\n-     * Moderator method based on reflection API to call tools\n-     *\/\n-    public void reflectionAction(String toolName, List<String> files) {\n-        if (files.isEmpty())\n-            fail(toolName + \": no files\");\n-        List<String> args = toolArgs.stream().collect(Collectors.toList());\n-        args.add(\"-d\");\n-        args.add(destDir.getPath());\n-        args.addAll(files);\n-        try {\n-            String toolClassName = \"org.openjdk.asmtools.\" + toolName + \".Main\";\n-            Class<?> toolClass = Class.forName(toolClassName);\n-            Constructor<?> constr = toolClass.getConstructor(PrintStream.class, String.class);\n-            PrintStream ps = new PrintStream(System.out);\n-            Object tool = constr.newInstance(ps, toolName);\n-            Method m = toolClass.getMethod(\"compile\", String[].class);\n-            Object r = m.invoke(tool, new Object[]{args.toArray(String[]::new)});\n-            if (r instanceof Boolean) {\n-                boolean ok = (Boolean) r;\n-                if (!ok) {\n-                    fail(toolName + \" failed\");\n-                }\n-                System.out.println(toolName + \" OK\");\n-            } else\n-                fail(\"unexpected result from \" + toolName + \": \" + r.toString());\n-        } catch (ClassNotFoundException e) {\n-            fail(\"can't find \" + toolName);\n-        } catch (ReflectiveOperationException t) {\n-            fail(\"error invoking \" + toolName + \": \" + t);\n-        }\n-    }\n-\n-    \/**\n-     * @return InputOutputTests.LogAndReturn wrapping both a log stream as a string and return code\n-     *\/\n-    public LogAndReturn getLogAndReturn(String toolName, List<String> files) {\n-        if (files.isEmpty())\n-            fail(toolName + \": no files\");\n-        List<String> args = toolArgs.stream().collect(Collectors.toList());\n-        args.add(\"-d\");\n-        args.add(destDir.getPath());\n-        args.addAll(files);\n-        int rc = 0;\n-        ByteOutput encodedFiles = new ByteOutput();\n-        StringLog encodeLog = new StringLog();\n-        if (toolName.equals(\"jcoder\")) {\n-            org.openjdk.asmtools.jcoder.Main jcod = new org.openjdk.asmtools.jcoder.Main(encodedFiles, encodeLog,\n-                    args.toArray(String[]::new));\n-            rc = jcod.compile();\n-        } else if (toolName.equals(\"jasm\")) {\n-            org.openjdk.asmtools.jasm.Main jasm = new org.openjdk.asmtools.jasm.Main(encodedFiles, encodeLog,\n-                    args.toArray(String[]::new));\n-            rc = jasm.compile();\n-        } else {\n-            fail(new IllegalArgumentException(\"Unknown tools name: \" + toolName));\n-        }\n-        return new LogAndReturn(encodeLog, rc);\n-    }\n-\n-    \/**\n-     * @return InputOutputTests.LogAndReturn wrapping both a log stream as a string and return code\n-     *\/\n-    public LogAndReturn getLogAndReturn(String toolName, ToolInput... toolInputs) {\n-        if (toolInputs.length == 0)\n-            fail(\"no tool input\");\n-        List<String> args = toolArgs.stream().collect(Collectors.toList());\n-        args.add(\"-d\");\n-        args.add(destDir.getPath());\n-        int rc = 0;\n-        ByteOutput encodedFiles = new ByteOutput();\n-        StringLog encodeLog = new StringLog();\n-        if (toolName.equals(\"jcoder\")) {\n-            org.openjdk.asmtools.jcoder.Main jcod = new org.openjdk.asmtools.jcoder.Main(encodedFiles, encodeLog, toolInputs);\n-            rc = jcod.compile(args.toArray(String[]::new)) ? Environment.OK : Environment.FAILED;\n-        } else if (toolName.equals(\"jasm\")) {\n-            org.openjdk.asmtools.jasm.Main jasm = new org.openjdk.asmtools.jasm.Main(encodedFiles, encodeLog, toolInputs);\n-            rc = jasm.compile(args.toArray(String[]::new)) ? Environment.OK : Environment.FAILED;\n-        } else {\n-            fail(new IllegalArgumentException(\"Unknown tools name: \" + toolName));\n-        }\n-        return new LogAndReturn(encodeLog, rc);\n-    }\n-\n-    \/**\n-     * @return InputOutputTests.LogAndBinResults wrapping the binary result, a log stream as a string and return code\n-     *\/\n-    private LogAndBinResults getLogAndBinResults(String toolName, ToolInput... toolInputs) {\n-        if (toolInputs.length == 0)\n-            fail(\"no tool input\");\n-        List<String> args = toolArgs.stream().collect(Collectors.toList());\n-\/\/        args.add(\"-d\");\n-\/\/        args.add(destDir.getPath());\n-        int rc = 0;\n-        ByteOutput encodedFiles = new ByteOutput();\n-        StringLog encodeLog = new StringLog();\n-        if (toolName.equals(\"jcoder\")) {\n-            org.openjdk.asmtools.jcoder.Main jcod = new org.openjdk.asmtools.jcoder.Main(encodedFiles, encodeLog, toolInputs);\n-            rc = jcod.compile(args.toArray(String[]::new)) ? Environment.OK : Environment.FAILED;\n-        } else if (toolName.equals(\"jasm\")) {\n-            org.openjdk.asmtools.jasm.Main jasm = new org.openjdk.asmtools.jasm.Main(encodedFiles, encodeLog, toolInputs);\n-            rc = jasm.compile(args.toArray(String[]::new)) ? Environment.OK : Environment.FAILED;\n-        } else {\n-            fail(new IllegalArgumentException(\"Either unknown tools name or tool doesn't return a binary result: \" + toolName));\n-        }\n-        return new LogAndBinResults(encodedFiles, encodeLog, rc);\n-    }\n-\n-\n-    \/**\n-     * @return InputOutputTests.LogAndBinResults wrapping the binary result, a log stream as a string and return code\n-     *\/\n-    private LogAndBinResults getLogAndBinResults(String toolName, List<String> files) {\n-        if (files.isEmpty())\n-            fail(toolName + \": no files\");\n-        List<String> args = toolArgs.stream().collect(Collectors.toList());\n-\/\/        args.add(\"-d\");\n-\/\/        args.add(destDir.getPath());\n-        args.addAll(files);\n-        int rc = 0;\n-        ByteOutput encodedFiles = new ByteOutput();\n-        StringLog encodeLog = new StringLog();\n-        if (toolName.equals(\"jcoder\")) {\n-            org.openjdk.asmtools.jcoder.Main jcod = new org.openjdk.asmtools.jcoder.Main(encodedFiles, encodeLog,\n-                    args.toArray(String[]::new));\n-            rc = jcod.compile();\n-        } else if (toolName.equals(\"jasm\")) {\n-            org.openjdk.asmtools.jasm.Main jasm = new org.openjdk.asmtools.jasm.Main(encodedFiles, encodeLog,\n-                    args.toArray(String[]::new));\n-            rc = jasm.compile();\n-        } else {\n-            fail(new IllegalArgumentException(\"Either unknown tools name or tool doesn't return a binary result: \" + toolName));\n-        }\n-        return new LogAndBinResults(encodedFiles, encodeLog, rc);\n-    }\n-\n-    public CompileAction setToolArgs(String... args) {\n-        if (args != null && args.length > 0) {\n-            Collections.addAll(this.toolArgs, args);\n-        } else {\n-            this.toolArgs.clear();\n-        }\n-        return this;\n-    }\n-\n-    private static CompileAction getEntry() {\n-        if (CompileAction.entry == null) {\n-            try {\n-                entry = new CompileAction();\n-            } catch (IOException e) {\n-                fail(e.toString());\n-                throw new RuntimeException(e); \/\/ \/\/ appeasing the compiler: this line will never be executed.\n-            }\n-        }\n-        return entry;\n-    }\n-}\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/action\/CompileAction.java","additions":0,"deletions":272,"binary":false,"changes":272,"status":"deleted"},{"patch":"@@ -0,0 +1,116 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.lib.action;\n+\n+import org.openjdk.asmtools.common.Compiler;\n+import org.openjdk.asmtools.common.Environment;\n+import org.openjdk.asmtools.common.TriFunction;\n+import org.openjdk.asmtools.common.inputs.ToolInput;\n+import org.openjdk.asmtools.common.outputs.ByteOutput;\n+import org.openjdk.asmtools.common.outputs.log.StringLog;\n+import org.openjdk.asmtools.lib.log.LogAndBinResults;\n+import org.openjdk.asmtools.lib.log.LogAndReturn;\n+\n+import java.io.PrintStream;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Method;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.openjdk.asmtools.asmutils.StringUtils.ListToString;\n+\n+public abstract sealed class CompileActor<C extends Compiler<?>,\n+        R extends LogAndReturn> extends Action permits Jasm, Jcoder {\n+\n+    protected TriFunction<ByteOutput, StringLog, ToolInput[], C> inputsCompiler;\n+    protected TriFunction<ByteOutput, StringLog, String[], C> filesCompiler;\n+\n+    protected CompileActor(EAsmTool tool) {\n+        super(tool);\n+    }\n+\n+    protected CompileActor(EAsmTool tool, Path destDir) {\n+        super(tool, destDir);\n+    }\n+\n+    \/**\n+     * Moderator method based on reflection API to call compiler\n+     *\/\n+    public boolean reflectiveCompile(List<String> files) {\n+        boolean result = false;\n+        if (files.isEmpty())\n+            fail(toolName + \": no files\");\n+        ArrayList<String> args = new ArrayList<>(Arrays.asList(currentToolArgs.getArgs()));\n+        args.addAll(getDestDirParams());\n+        args.addAll(files);\n+        try {\n+            String toolClassName = \"org.openjdk.asmtools.\" + toolName + \".Main\";\n+            Class<?> toolClass = Class.forName(toolClassName);\n+            Constructor<?> constr = toolClass.getConstructor(PrintStream.class, String.class);\n+            PrintStream ps = new PrintStream(System.out);\n+            Object tool = constr.newInstance(ps, toolName);\n+            Method m = toolClass.getMethod(\"compile\", String[].class);\n+            Object r = m.invoke(tool, new Object[]{args.toArray(String[]::new)});\n+            if (r instanceof Boolean) {\n+                result = (Boolean) r;\n+            } else {\n+                fail(\"unexpected result from \" + toolName + \": \" + r.toString());\n+            }\n+        } catch (ClassNotFoundException e) {\n+            fail(\"can't find \" + toolName);\n+        } catch (ReflectiveOperationException t) {\n+            fail(\"error invoking \" + toolName + \": \" + t);\n+        }\n+        return result;\n+    }\n+\n+    public R compile(List<String> files) {\n+        if (files.size() == 0)\n+            fail(\"%s: tool inputs are missing\".formatted(toolName));\n+        ArrayList<String> args = new ArrayList<>(Arrays.asList(currentToolArgs.getArgs()));\n+        args.addAll(getDestDirParams());\n+        args.addAll(files);\n+        super.trace(()->\"%s.compile%s\".formatted(toolName, ListToString(args)));\n+        ByteOutput encodedFiles = new ByteOutput();\n+        StringLog encodeLog = new StringLog();\n+        C compiler = filesCompiler.apply(encodedFiles, encodeLog, args.toArray(String[]::new));\n+        int rc = compiler.compile();\n+        return (R) new LogAndBinResults(encodedFiles, encodeLog, rc);\n+    }\n+\n+    public R compile(ToolInput... toolInputs) {\n+        if (toolInputs.length == 0)\n+            fail(\"%s: tool inputs are missing\".formatted(toolName));\n+        ArrayList<String> args = new ArrayList<>(Arrays.asList(currentToolArgs.getArgs()));\n+        args.addAll(getDestDirParams());\n+        super.trace(()->\"%s.compile%s\".formatted(toolName, ListToString(args)));\n+        ByteOutput encodedFiles = new ByteOutput();\n+        StringLog encodeLog = new StringLog();\n+        C compiler = inputsCompiler.apply(encodedFiles, encodeLog, toolInputs);\n+        int rc = compiler.compile(args.toArray(String[]::new)) ? Environment.OK : Environment.FAILED;\n+        return (R) new LogAndBinResults(encodedFiles, encodeLog, rc);\n+    }\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/action\/CompileActor.java","additions":116,"deletions":0,"binary":false,"changes":116,"status":"added"},{"patch":"@@ -0,0 +1,45 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.lib.action;\n+\n+import java.util.function.Supplier;\n+\n+public class DebugHelper {\n+    protected boolean Debug = false;\n+\n+    public DebugHelper setDebug(boolean debug) {\n+        Debug = debug;\n+        return this;\n+    }\n+\n+    public boolean isDebug() {\n+        return Debug;\n+    }\n+\n+\n+    public void trace(Supplier<String> info) {\n+        if (Debug) {\n+            System.out.format(\"TRACE: %s%n\".formatted(info.get()));\n+        }\n+    }\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/action\/DebugHelper.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"},{"patch":"@@ -0,0 +1,113 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.lib.action;\n+\n+import org.openjdk.asmtools.common.Decoder;\n+import org.openjdk.asmtools.common.Environment;\n+import org.openjdk.asmtools.common.TriFunction;\n+import org.openjdk.asmtools.common.inputs.ToolInput;\n+import org.openjdk.asmtools.common.outputs.StdoutOutput;\n+import org.openjdk.asmtools.common.outputs.TextOutput;\n+import org.openjdk.asmtools.common.outputs.ToolOutput;\n+import org.openjdk.asmtools.common.outputs.log.StringLog;\n+import org.openjdk.asmtools.lib.log.LogAndReturn;\n+import org.openjdk.asmtools.lib.log.LogAndTextResults;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Method;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.openjdk.asmtools.asmutils.StringUtils.ListToString;\n+import static org.openjdk.asmtools.common.Environment.OK;\n+\n+public abstract sealed class DecodeActor<D extends Decoder<?>,\n+        R extends LogAndReturn> extends Action permits Jdis, Jdec {\n+\n+    protected TriFunction<TextOutput, StringLog, ToolInput[], D> inputsDecoder;\n+    protected TriFunction<TextOutput, StringLog, String[], D> filesDecoder;\n+\n+    protected DecodeActor(EAsmTool tool) {\n+        super(tool);\n+    }\n+\n+    protected DecodeActor(EAsmTool tool, Path destDir) {\n+        super(tool, destDir);\n+    }\n+\n+    \/**\n+     * Moderator method based on reflection API to call tools\n+     *\/\n+    public boolean reflectiveCompile(List<String> files) {\n+        boolean result = false;\n+        if (files.isEmpty())\n+            fail(toolName + \": no files\");\n+        ArrayList<String> args = new ArrayList<>(Arrays.asList(currentToolArgs.getArgs()));\n+        args.addAll(getDestDirParams());\n+        args.addAll(files);\n+        try {\n+            String toolClassName = \"org.openjdk.asmtools.\" + toolName + \".Main\";\n+            Class<?> toolClass = Class.forName(toolClassName);\n+            Constructor<?> constr = toolClass.getConstructor(ToolOutput.class, String[].class);\n+            Object tool = constr.newInstance(new StdoutOutput(), args.toArray(String[]::new));\n+            Method m = toolClass.getMethod(\"decode\");\n+            int r = (int) m.invoke(tool);\n+            return r == OK;\n+        } catch (ClassNotFoundException e) {\n+            fail(\"can't find \" + toolName);\n+        } catch (ReflectiveOperationException t) {\n+            fail(\"error invoking \" + toolName + \": \" + t);\n+        }\n+        return result;\n+    }\n+\n+    public R decode(List<String> files) {\n+        if (files.size() == 0)\n+            fail(\"%s: tool inputs are missing\".formatted(toolName));\n+        ArrayList<String> args = new ArrayList<>(Arrays.asList(currentToolArgs.getArgs()));\n+        args.addAll(getDestDirParams());\n+        args.addAll(files);\n+        super.trace(()->\"%s.decode%s\".formatted(toolName, ListToString(args)));\n+        TextOutput encodedFiles = new TextOutput();\n+        StringLog encodeLog = new StringLog();\n+        D decoder = filesDecoder.apply(encodedFiles, encodeLog, args.toArray(String[]::new));\n+        int rc = decoder.decode();\n+        return (R) new LogAndTextResults(encodedFiles, encodeLog, rc);\n+    }\n+\n+    public R decode(ToolInput... toolInputs) {\n+        if (toolInputs.length == 0)\n+            fail(\"%s: tool inputs are missing\".formatted(toolName));\n+        ArrayList<String> args = new ArrayList<>(Arrays.asList(currentToolArgs.getArgs()));\n+        args.addAll(getDestDirParams());\n+        super.trace(()->\"%s.decode%s\".formatted(toolName, ListToString(args)));\n+        TextOutput encodedFiles = new TextOutput();\n+        StringLog encodeLog = new StringLog();\n+        D decoder = inputsDecoder.apply(encodedFiles, encodeLog, toolInputs);\n+        int rc = decoder.decode(args.toArray(String[]::new)) ? OK : Environment.FAILED;\n+        return (R) new LogAndTextResults(encodedFiles, encodeLog, rc);\n+    }\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/action\/DecodeActor.java","additions":113,"deletions":0,"binary":false,"changes":113,"status":"added"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2023, 2025, Oracle, Red Hat  and\/or theirs affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.lib.action;\n+\n+import org.openjdk.asmtools.common.inputs.ToolInput;\n+import org.openjdk.asmtools.lib.log.LogAndReturn;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public enum EAsmTool {\n+    UNDEF(\"\", null, null),\n+    JASM(\".jasm\",\n+            (files) -> new Jasm().compile(files),\n+            (inputs) -> new Jasm().compile(inputs)),\n+    JCODER(\".jcod\",\n+            (files) -> new Jcoder().compile(files),\n+            (inputs) -> new Jcoder().compile(inputs)),\n+    JDEC(\".class\",\n+            (files) -> new Jdec().decode(files),\n+            (inputs) -> new Jdec().decode(inputs)),\n+    JDIS(\".class\",\n+            (files) -> new Jdis().decode(files),\n+            (inputs) -> new Jdis().decode(inputs));\n+    private final String fileExtension;\n+    private final Function<List<String>, LogAndReturn> filesTool;\n+    private final Function<ToolInput[], LogAndReturn> inputsTool;\n+\n+    EAsmTool(String fileExtension, Function<List<String>, LogAndReturn> filesTool,\n+             Function<ToolInput[], LogAndReturn> inputsTool) {\n+        this.fileExtension = fileExtension;\n+        this.filesTool = filesTool;\n+        this.inputsTool = inputsTool;\n+    }\n+\n+    public LogAndReturn call(List<String> files) {\n+        return filesTool.apply(files);\n+    }\n+\n+    public LogAndReturn call(ToolInput[] inputs) {\n+        return inputsTool.apply(inputs);\n+    }\n+\n+    public String getName() {\n+        return this.name().toLowerCase();\n+    }\n+\n+    public String getFileExtension() {\n+        return fileExtension;\n+    }\n+\n+    public static EAsmTool getToolBy(String toolName) {\n+        for (EAsmTool t : values()) {\n+            if (toolName.compareToIgnoreCase(t.name()) == 0)\n+                return t;\n+        }\n+        fail(\"The tool %s isn't yet supported.\".formatted(toolName));\n+        return null;\n+    }\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/action\/EAsmTool.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"patch":"@@ -1,78 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle, Red Hat  and\/or theirs affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.asmtools.lib.action;\n-\n-import org.openjdk.asmtools.common.inputs.ToolInput;\n-import org.openjdk.asmtools.lib.LogAndBinResults;\n-import org.openjdk.asmtools.lib.LogAndReturn;\n-\n-import java.util.List;\n-\n-import static org.junit.jupiter.api.Assertions.fail;\n-\n-public enum EAsmTools {\n-    JASM(\".jasm\",\n-            (files, args) -> CompileAction.JAsm(files, args),\n-            (inputs, args) ->  CompileAction.JAsm(inputs, args)),\n-    JCODER(\".jcod\",\n-            (files, args) -> CompileAction.JCoder(files, args),\n-            (inputs, args) ->  CompileAction.JCoder(inputs, args)),\n-    JDEC(\".class\", (files, args) -> GenerateAction.JDec(files, args),\n-            (inputs, args) ->  CompileAction.JAsm(inputs, args)),\n-    JDIS(\".class\", (files, args) -> GenerateAction.JDis(files, args),\n-            (inputs, args) ->  CompileAction.JAsm(inputs, args));\n-    private final String fileExtension;\n-    private final Tool tool;\n-    private final ToolResult toolResult;\n-\n-    EAsmTools(String fileExtension, Tool tool, ToolResult toolResult) {\n-        this.fileExtension = fileExtension;\n-        this.toolResult = toolResult;\n-        this.tool = tool;\n-    }\n-\n-    public String getFileExtension() {\n-        return fileExtension;\n-    }\n-\n-    public static Tool getTool(String toolName) {\n-        for (EAsmTools t : values()) {\n-            if (toolName.compareToIgnoreCase(t.name()) == 0)\n-                return t.tool;\n-        }\n-        fail(\"The tool \" + toolName + \" isn't yet implemented.\");\n-        return null;\n-    }\n-\n-    @FunctionalInterface\n-    public interface Tool {\n-        int TOOL_PASSED = 0;\n-\n-        LogAndReturn call(List<String> files, String... args);\n-    }\n-\n-    @FunctionalInterface\n-    public interface ToolResult<T extends LogAndReturn> {\n-        T call(ToolInput[] toolInputs, String... args);\n-    }\n-}\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/action\/EAsmTools.java","additions":0,"deletions":78,"binary":false,"changes":78,"status":"deleted"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.lib.action;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+public enum EToolArguments {\n+    NONE(new String[0], EAsmTool.UNDEF, 0),\n+    JDIS(new String[0], EAsmTool.JDIS, 0),\n+    JDIS_T(new String[]{\"-table\"}, EAsmTool.JDIS, 1),\n+    JDIS_G(new String[]{\"-g\"}, EAsmTool.JDIS, 2),\n+    JDIS_GG(new String[]{\"-gg\"}, EAsmTool.JDIS, 3),\n+    JDIS_G_T(new String[]{\"-g\", \"-table\"}, EAsmTool.JDIS, 4),\n+    JDIS_GG_T_NC(new String[]{\"-gg\", \"-table\", \"-nc\"}, EAsmTool.JDIS, 5),\n+    JDIS_G_T_LNT_LVT(new String[]{\"-g\", \"-table\", \"-lnt\", \"-lvt\"}, EAsmTool.JDIS, 6),\n+    JDIS_GG_NC_LNT_LVT(new String[]{\"-gg\", \"-table\", \"-lnt\", \"-lvt\", \"-nc\"}, EAsmTool.JDIS, 7),\n+\n+    JDEC(new String[0], EAsmTool.JDEC, 1),\n+    JDEC_G(new String[]{\"-g\"}, EAsmTool.JDEC, 2),\n+\n+    JASM(new String[0], EAsmTool.JASM, 0),\n+    JASM_STRICT(new String[]{\"-strict\"}, EAsmTool.JASM, 1),\n+    JASM_NOWARN(new String[]{\"-nowarn\"}, EAsmTool.JASM, 2);\n+\n+    final String[] args;\n+    final EAsmTool tool;\n+    final int priority;\n+\n+    EToolArguments(String[] args, EAsmTool tool, int priority) {\n+        this.args = args;\n+        this.tool = tool;\n+        this.priority = priority;\n+    }\n+\n+    public String getPostfix() {\n+        String str = Arrays.stream(args).map(s -> s.replace(\"-\", \"\")).\n+                collect(Collectors.joining(\".\"));\n+        return (!str.isEmpty()) ? \".\" + str : \"\";\n+    }\n+\n+    public String[] getArgs() {\n+        return args;\n+    }\n+\n+    public static List<EToolArguments> ofTool(EAsmTool eAsmTool) {\n+        return Arrays.stream(values()).\n+                filter(v -> v.tool == eAsmTool).\n+                collect(Collectors.toCollection(ArrayList::new));\n+    }\n+\n+    public static EToolArguments getArgumentsByPriority(EAsmTool tool, int priority) {\n+        return Arrays.stream(values()).filter(v -> v.tool == tool && v.priority == priority).\n+                findFirst().orElse(NONE);\n+    }\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/action\/EToolArguments.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"},{"patch":"@@ -0,0 +1,139 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.lib.action;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class FSAction {\n+\n+    public static Function<String, Path> getTmpPath = subDir ->\n+            Path.of(System.getProperty(\"user.home\"), \"tmp\", subDir);\n+\n+    \/\/ -d <directory>        Specify where to place generated class files, otherwise <stdout>\n+    \/\/ -w <directory>        Specify where to place generated class files, without considering the classpath, otherwise <stdout>\n+    private boolean ignorePackage = false;\n+    private Path destDir = null;\n+    private boolean deleteOnExit = false;\n+\n+\n+    \/**\n+     * @param destDir\n+     * @return this class instance\n+     *\/\n+    public FSAction setupDestDir(Path destDir) {\n+        if (destDir != null) {\n+            if (this.destDir == null) {\n+                this.destDir = createDestDir(destDir);\n+            } else if (!this.destDir.equals(destDir)) {\n+                if (!deleteOnExit) {\n+                    delDestDir();\n+                    this.destDir = createDestDir(destDir);\n+                } else {\n+                    this.destDir = createDestDir(destDir);\n+                    this.destDir.toFile().deleteOnExit();\n+                }\n+            }\n+        } else {\n+            \/\/ Deletes the previously set destDir and deactivates it.\n+            if (this.destDir != null && !deleteOnExit) {\n+                delDestDir();\n+            }\n+            this.destDir = null;\n+        }\n+        return this;\n+    }\n+\n+    public FSAction setupDestDir() {\n+        this.destDir = createDestDir();\n+        return this;\n+    }\n+\n+    public Path createDestDir() {\n+        if (this.destDir == null) {\n+            try {\n+                this.destDir = Files.createTempDirectory(\"asmtools-tests\").toAbsolutePath();\n+                this.destDir.toFile().deleteOnExit();\n+                deleteOnExit = true;\n+            } catch (IOException e) {\n+                fail(\"Unable to create temporary directory\");\n+            }\n+        }\n+        return this.destDir;\n+    }\n+\n+    private Path createDestDir(Path destDir) {\n+        if (!Files.exists(destDir)) {\n+            try {\n+                Files.createDirectories(destDir);\n+            } catch (IOException e) {\n+                fail(\"Unable to create destination directory %s\".formatted(destDir.toString()));\n+            }\n+        }\n+        return destDir;\n+    }\n+\n+    private FSAction delDestDir() {\n+        if (this.destDir != null && Files.exists(this.destDir)) {\n+            \/\/ Cleanup: Delete temporary directory and its contents\n+            try {\n+                Files.walk(this.destDir)\n+                        .map(Path::toFile)\n+                        .forEach(file -> {\n+                            System.out.println(\"Deleting: \" + file);\n+                            file.delete();\n+                        });\n+            } catch (IOException e) {\n+                throw new RuntimeException(\"Can't clean up the dest dir: %s\".formatted(destDir));\n+            }\n+        }\n+        return this;\n+    }\n+\n+    public FSAction setDeleteOnExit(boolean deleteOnExit) {\n+        this.deleteOnExit = deleteOnExit;\n+        return this;\n+    }\n+\n+    public Path getDestDir() {\n+        return destDir;\n+    }\n+\n+    public FSAction setIgnorePackage(boolean value) {\n+        this.ignorePackage = value;\n+        return this;\n+    }\n+\n+    public List<String> getDestDirParams() {\n+        return (this.destDir == null) ?\n+                List.of() :\n+                List.of(\n+                (this.ignorePackage ? \"-w\" : \"-d\"),\n+                this.destDir.toString());\n+    }\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/action\/FSAction.java","additions":139,"deletions":0,"binary":false,"changes":139,"status":"added"},{"patch":"@@ -1,240 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.asmtools.lib.action;\n-\n-import org.openjdk.asmtools.common.Environment;\n-import org.openjdk.asmtools.common.inputs.ToolInput;\n-import org.openjdk.asmtools.common.outputs.ByteOutput;\n-import org.openjdk.asmtools.common.outputs.TextOutput;\n-import org.openjdk.asmtools.common.outputs.log.StringLog;\n-import org.openjdk.asmtools.jdis.Options;\n-import org.openjdk.asmtools.lib.LogAndReturn;\n-import org.openjdk.asmtools.lib.LogAndTextResults;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.nio.file.Files;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.stream.Collectors;\n-\n-import static org.junit.jupiter.api.Assertions.fail;\n-\n-public class GenerateAction {\n-    private static GenerateAction entry;\n-    private final File destDir;\n-    private final List<String> toolArgs = new ArrayList<>();\n-    private final boolean detailedOutputOptions;\n-\n-    public GenerateAction() throws IOException {\n-        this(false);\n-    }\n-    public GenerateAction(boolean detailedOutputOptions) throws IOException {\n-        destDir = Files.createTempDirectory(\"generate\").toFile();\n-        destDir.deleteOnExit();\n-        this.detailedOutputOptions = detailedOutputOptions;\n-    }\n-\n-    public static LogAndReturn JDis(List<String> files, String... args) {\n-        return getEntry().setToolArgs().setToolArgs(args).jdis(files);\n-    }\n-\n-    public static LogAndReturn JDec(List<String> files, String... args) {\n-        return getEntry().setToolArgs().setToolArgs(args).jdec(files);\n-    }\n-\n-    public LogAndReturn jdis(List<String> files) {\n-        return getLogAndReturn(\"jdis\", files);\n-    }\n-\n-    public LogAndReturn jdis(ToolInput... toolInputs) {\n-        return getLogAndReturn(\"jdis\", toolInputs);\n-    }\n-\n-    public LogAndReturn jdec(List<String> files) {\n-        return getLogAndReturn(\"jdec\", files);\n-    }\n-\n-    public LogAndReturn jdec(ToolInput... toolInputs) {\n-        return getLogAndReturn(\"jdec\", toolInputs);\n-    }\n-\n-    public LogAndTextResults getJdecResult(List<String> files) {\n-        return getLogAndTextResult(\"jdec\", files);\n-    }\n-\n-    public LogAndTextResults getJdisResult(List<String> files) {\n-        return getLogAndTextResult(\"jdis\", files);\n-    }\n-\n-    public LogAndTextResults getJdecResult(ToolInput... toolInputs) {\n-        return getLogAndTextResult(\"jdec\", toolInputs);\n-    }\n-\n-    public LogAndTextResults getJdisResult(ToolInput... toolInputs) {\n-        return getLogAndTextResult(\"jdis\", toolInputs);\n-    }\n-\n-    \/**\n-     * @return InputOutputTests.LogAndReturn wrapping both a log stream as a string and return code\n-     *\/\n-    private LogAndReturn getLogAndReturn(String toolName, List<String> files) {\n-        if (files.isEmpty())\n-            fail(toolName + \": no files\");\n-        List<String> args = toolArgs.stream().collect(Collectors.toList());\n-        args.add(\"-d\");\n-        args.add(destDir.getPath());\n-        args.addAll(files);\n-        int rc = 0;\n-        ByteOutput encodedFiles = new ByteOutput();\n-        StringLog encodeLog = new StringLog();\n-        if (toolName.equals(\"jdec\")) {\n-            org.openjdk.asmtools.jdec.Main jdec = new org.openjdk.asmtools.jdec.Main(encodedFiles, encodeLog,\n-                    args.toArray(new String[0]));\n-            setDetailedOutputOptions();\n-            rc = jdec.decode();\n-        } else if (toolName.equals(\"jdis\")) {\n-            org.openjdk.asmtools.jdis.Main jdis = new org.openjdk.asmtools.jdis.Main(encodedFiles, encodeLog,\n-                    args.toArray(new String[0]));\n-            setDetailedOutputOptions();\n-            rc = jdis.disasm();\n-        } else {\n-            fail(new IllegalArgumentException(\"Unknown tools name: \" + toolName));\n-        }\n-        return new LogAndReturn(encodeLog, rc);\n-    }\n-\n-    \/**\n-     * @return InputOutputTests.LogAndReturn wrapping both a log stream as a string and return code\n-     *\/\n-    private LogAndReturn getLogAndReturn(String toolName, ToolInput... toolInputs) {\n-        if (toolInputs.length == 0)\n-            fail(\"no tool input\");\n-        List<String> args = toolArgs.stream().collect(Collectors.toList());\n-        args.add(\"-d\");\n-        args.add(destDir.getPath());\n-        int rc = 0;\n-        ByteOutput encodedFiles = new ByteOutput();\n-        StringLog encodeLog = new StringLog();\n-        if (toolName.equals(\"jdec\")) {\n-            org.openjdk.asmtools.jdec.Main jdec = new org.openjdk.asmtools.jdec.Main(encodedFiles,encodeLog, toolInputs);\n-            setDetailedOutputOptions();\n-            rc = jdec.decode(args.toArray(String[]::new)) ? Environment.OK : Environment.FAILED;\n-        } else if (toolName.equals(\"jdis\")) {\n-            org.openjdk.asmtools.jdis.Main jdis = new org.openjdk.asmtools.jdis.Main(encodedFiles,encodeLog, toolInputs);\n-            setDetailedOutputOptions();\n-            rc = jdis.disasm(args.toArray(String[]::new)) ? Environment.OK : Environment.FAILED;\n-        } else {\n-            fail(new IllegalArgumentException(\"Unknown tools name: \" + toolName));\n-        }\n-        return new LogAndReturn(encodeLog, rc);\n-    }\n-\n-    \/**\n-     * @return InputOutputTests.LogAndBinResults wrapping the text result, a log stream as a string and return code\n-     *\/\n-    private LogAndTextResults getLogAndTextResult(String toolName, List<String> files) {\n-        if (files.isEmpty())\n-            fail(toolName + \": no files\");\n-        List<String> args = toolArgs.stream().collect(Collectors.toList());\n-\/\/        args.add(\"-d\");\n-\/\/        args.add(destDir.getPath());\n-        args.addAll(files);\n-        int rc = 0;\n-        TextOutput encodedFiles = new TextOutput();\n-        StringLog encodeLog = new StringLog();\n-        if (toolName.equals(\"jdec\")) {\n-            org.openjdk.asmtools.jdec.Main jdec = new org.openjdk.asmtools.jdec.Main(encodedFiles,encodeLog,\n-                    args.toArray(String[]::new));\n-            setDetailedOutputOptions();\n-            rc = jdec.decode();\n-        } else if (toolName.equals(\"jdis\")) {\n-            org.openjdk.asmtools.jdis.Main jdis = new org.openjdk.asmtools.jdis.Main(encodedFiles,encodeLog,\n-                    args.toArray(String[]::new));\n-            setDetailedOutputOptions();\n-            rc = jdis.disasm();\n-        } else {\n-            fail(new IllegalArgumentException(\"Either unknown tools name or the tool doesn't return a text result: \" + toolName));\n-        }\n-        return new LogAndTextResults(encodedFiles, encodeLog, rc);\n-    }\n-\n-    \/**\n-     * @return InputOutputTests.LogAndBinResults wrapping the text result, a log stream as a string and return code\n-     *\/\n-    public LogAndTextResults getLogAndTextResult(String toolName, ToolInput... toolInputs) {\n-        if (toolInputs.length == 0)\n-            fail(\"no tool input\");\n-        List<String> args = toolArgs.stream().collect(Collectors.toList());\n-\/\/        args.add(\"-d\");\n-\/\/        args.add(destDir.getPath());\n-        int rc = 0;\n-        TextOutput encodedFiles = new TextOutput();\n-        StringLog encodeLog = new StringLog();\n-        if (toolName.equals(\"jdec\")) {\n-            org.openjdk.asmtools.jdec.Main jdec = new org.openjdk.asmtools.jdec.Main(encodedFiles,encodeLog, toolInputs);\n-            setDetailedOutputOptions();\n-            rc = jdec.decode(args.toArray(String[]::new)) ? Environment.OK : Environment.FAILED;\n-        } else if (toolName.equals(\"jdis\")) {\n-            org.openjdk.asmtools.jdis.Main jdis =\n-                    new org.openjdk.asmtools.jdis.Main(encodedFiles, encodeLog, toolInputs);\n-            setDetailedOutputOptions();\n-            rc = jdis.disasm(args.toArray(String[]::new)) ? Environment.OK : Environment.FAILED;\n-        } else {\n-            fail(new IllegalArgumentException(\"Either unknown tools name or the tool doesn't return a text result: \" + toolName));\n-        }\n-        return new LogAndTextResults(encodedFiles, encodeLog, rc);\n-    }\n-\n-\n-    public GenerateAction setToolArgs(String... args) {\n-        if (args != null && args.length > 0) {\n-            Collections.addAll(this.toolArgs, args);\n-        } else {\n-            this.toolArgs.clear();\n-        }\n-        return this;\n-    }\n-\n-    private static GenerateAction getEntry() {\n-        if (GenerateAction.entry == null) {\n-            try {\n-                entry = new GenerateAction();\n-            } catch (IOException e) {\n-                fail(e.toString());\n-                throw new RuntimeException(e); \/\/ \/\/ appeasing the compiler: this line will never be executed.\n-            }\n-        }\n-        return entry;\n-    }\n-\n-    private void setDetailedOutputOptions() {\n-        if (detailedOutputOptions) {\n-            Options.setDetailedOutputOptions();\n-        } else {\n-            Options.unsetDetailedOutputOptions();\n-        }\n-    }\n-\n-}\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/action\/GenerateAction.java","additions":0,"deletions":240,"binary":false,"changes":240,"status":"deleted"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.lib.action;\n+\n+import org.openjdk.asmtools.jasm.Main;\n+import org.openjdk.asmtools.lib.log.LogAndBinResults;\n+\n+import java.nio.file.Path;\n+\n+import static org.openjdk.asmtools.lib.action.EAsmTool.JASM;\n+\n+public final class Jasm extends CompileActor<Main, LogAndBinResults> {\n+    public Jasm() {\n+        super(JASM);\n+        inputsCompiler = (encodedFiles, encodeLog, inputs) ->\n+                new Main(encodedFiles, encodeLog, inputs);\n+        filesCompiler = (encodedFiles, encodeLog, args) ->\n+                new Main(encodedFiles, encodeLog, args);\n+    }\n+\n+    public Jasm(Path destDir) {\n+        super(JASM, destDir);\n+        inputsCompiler = (encodedFiles, encodeLog, inputs) ->\n+                new Main(encodedFiles, encodeLog, inputs);\n+        filesCompiler = (encodedFiles, encodeLog, args) ->\n+                new Main(encodedFiles, encodeLog, args);\n+    }\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/action\/Jasm.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.lib.action;\n+\n+import org.openjdk.asmtools.jcoder.Main;\n+import org.openjdk.asmtools.lib.log.LogAndBinResults;\n+\n+import java.nio.file.Path;\n+\n+import static org.openjdk.asmtools.lib.action.EAsmTool.JCODER;\n+\n+public final class Jcoder extends CompileActor<Main, LogAndBinResults> {\n+\n+    public Jcoder() {\n+        super(JCODER);\n+        inputsCompiler = (encodedFiles, encodeLog, inputs) ->\n+                new Main(encodedFiles, encodeLog, inputs);\n+        filesCompiler = (encodedFiles, encodeLog, args) ->\n+                new Main(encodedFiles, encodeLog, args);\n+    }\n+\n+    public Jcoder(Path destDir) {\n+        super(JCODER, destDir);\n+        inputsCompiler = (encodedFiles, encodeLog, inputs) ->\n+                new Main(encodedFiles, encodeLog, inputs);\n+        filesCompiler = (encodedFiles, encodeLog, args) ->\n+                new Main(encodedFiles, encodeLog, args);\n+    }\n+\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/action\/Jcoder.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.lib.action;\n+\n+import org.openjdk.asmtools.jdec.Main;\n+import org.openjdk.asmtools.lib.log.LogAndBinResults;\n+import org.openjdk.asmtools.lib.log.LogAndTextResults;\n+\n+import java.nio.file.Path;\n+\n+import static org.openjdk.asmtools.lib.action.EAsmTool.JDEC;\n+\n+public final class Jdec extends DecodeActor<Main, LogAndTextResults> {\n+    public Jdec() {\n+        super(JDEC);\n+        inputsDecoder = (encodedFiles, encodeLog, inputs) ->\n+                new Main(encodedFiles, encodeLog, inputs);\n+        filesDecoder = (encodedFiles, encodeLog, args) ->\n+                new Main(encodedFiles, encodeLog, args);\n+    }\n+\n+    public Jdec(Path destDir) {\n+        super(JDEC, destDir);\n+        inputsDecoder = (encodedFiles, encodeLog, inputs) ->\n+                new Main(encodedFiles, encodeLog, inputs);\n+        filesDecoder = (encodedFiles, encodeLog, args) ->\n+                new Main(encodedFiles, encodeLog, args);\n+    }\n+\n+    @Override\n+    public Jdec setArgs(EToolArguments args) {\n+        super.setArgs(args);\n+        return this;\n+    }\n+\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/action\/Jdec.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.lib.action;\n+\n+import org.openjdk.asmtools.jdis.Main;\n+import org.openjdk.asmtools.lib.log.LogAndBinResults;\n+import org.openjdk.asmtools.lib.log.LogAndTextResults;\n+\n+import java.nio.file.Path;\n+\n+import static org.openjdk.asmtools.lib.action.EAsmTool.JDIS;\n+\n+public final class Jdis extends DecodeActor<Main, LogAndTextResults> {\n+    public Jdis() {\n+        super(JDIS);\n+        inputsDecoder = (encodedFiles, encodeLog, inputs) ->\n+                new Main(encodedFiles, encodeLog, inputs);\n+        filesDecoder = (encodedFiles, encodeLog, args) ->\n+                new Main(encodedFiles, encodeLog, args);\n+    }\n+\n+    public Jdis(Path destDir) {\n+        super(JDIS, destDir);\n+        inputsDecoder = (encodedFiles, encodeLog, inputs) ->\n+                new Main(encodedFiles, encodeLog, inputs);\n+        filesDecoder = (encodedFiles, encodeLog, args) ->\n+                new Main(encodedFiles, encodeLog, args);\n+    }\n+\n+    public Jdis setArgs(EToolArguments args) {\n+        super.setArgs(args);\n+        return this;\n+    }\n+\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/action\/Jdis.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -0,0 +1,132 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.lib.attributes;\n+\n+import org.openjdk.asmtools.common.inputs.ByteInput;\n+import org.openjdk.asmtools.common.inputs.ToolInput;\n+import org.openjdk.asmtools.lib.action.Jasm;\n+\n+import java.io.IOException;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.util.Arrays;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class Attribute {\n+\n+    static MethodHandles.Lookup lookup = MethodHandles.lookup();\n+\n+    Jasm jasm = null;\n+\n+    private final Attribute.Kind kind;\n+    private final int expectedRc;\n+    private String[] classParams = new String[0];\n+\n+    private String attributeName;\n+    private String className;\n+    private String resourceName;\n+    private String outputFileName;\n+\n+    public Attribute(Attribute.Kind kind, String className, int expectedRc) {\n+        this.kind = kind;\n+        this.className = className;\n+        this.resourceName = \"\/\".concat(className.replace('.', '\/')).concat(\".class\");\n+        this.expectedRc = expectedRc;\n+        this.attributeName = this.getClass().getSimpleName();\n+        int ind = attributeName.lastIndexOf(\"Attribute\");\n+        if (ind != -1) {\n+            attributeName = attributeName.substring(0, ind);\n+        }\n+    }\n+\n+    public String getSimpleClassName() {\n+        int ind = className.lastIndexOf(\".\");\n+        return (ind != -1) ? className.substring(ind + 1) : className;\n+    }\n+\n+    public String getClassName() {\n+        return className;\n+    }\n+\n+    public int getExpectedRc() {\n+        return expectedRc;\n+    }\n+\n+    public ToolInput getContent() {\n+        byte[] bytes = null;\n+        try {\n+            bytes = getClass().getResourceAsStream(resourceName).readAllBytes();\n+        } catch (IOException e) {\n+            fail(\"Can't read the class  %s\\ndue to %s\".formatted(className,\n+                    e.toString()));\n+        }\n+        return new ByteInput(bytes);\n+    }\n+\n+    public int run() {\n+        int returnCode = -1;\n+        try {\n+            Class<?> clazz = Class.forName(className);\n+            MethodHandle methodHandle;\n+            if (kind == Attribute.Kind.CLASS_MAIN || kind == Attribute.Kind.CLASS_RUN) {\n+                methodHandle = Attribute.lookup.findStatic(clazz, kind.methodName, kind.methodType);\n+                returnCode = (Integer) methodHandle.invoke(this.classParams);\n+            } else {\n+                methodHandle = Attribute.lookup.findVirtual(clazz, kind.methodName, kind.methodType);\n+                \/\/ Create an instance of the class\n+                Object instance = clazz.getDeclaredConstructor().newInstance();\n+                \/\/ Invoke the method (non-static, so pass the instance)\n+                returnCode = (Integer) methodHandle.invoke(instance, this.classParams);\n+            }\n+        } catch (Throwable e) {\n+            fail(\"Can't run %s::%s\\ndue to %s\".formatted(className,\n+                    kind.toString(),\n+                    e.toString()));\n+        }\n+        return returnCode;\n+    }\n+\n+    public enum Kind {\n+        CLASS_MAIN(\"main\", MethodType.methodType(int.class, String[].class)),\n+        CLASS_RUN(\"run\", MethodType.methodType(int.class, String[].class)),\n+        INSTANCE_RUN(\"run\", MethodType.methodType(int.class, String[].class));\n+        final String methodName;\n+        final MethodType methodType;\n+\n+        Kind(String methodName, MethodType methodType) {\n+            this.methodName = methodName;\n+            this.methodType = methodType;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"%s %s(%s)\".formatted(methodType.returnType().getCanonicalName(),\n+                    methodName,\n+                    Arrays.stream(methodType.parameterArray()).\n+                            map(clazz -> clazz.getCanonicalName()).collect(Collectors.joining(\", \")));\n+        }\n+    }\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/attributes\/Attribute.java","additions":132,"deletions":0,"binary":false,"changes":132,"status":"added"},{"patch":"@@ -23,1 +23,1 @@\n-package org.openjdk.asmtools.ext;\n+package org.openjdk.asmtools.lib.ext;\n@@ -105,2 +105,5 @@\n-        public void expect(Matcher<? super String> matcher) {\n-            this.strMatchers.add(matcher);\n+        public OutputCapture expect(Matcher<? super String>... matchers) {\n+            for (Matcher<? super String> m : matchers) {\n+                this.strMatchers.add(m);\n+            }\n+            return this;\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/ext\/CaptureSystemOutput.java","additions":6,"deletions":3,"binary":false,"changes":9,"previous_filename":"test\/java\/org\/openjdk\/asmtools\/ext\/CaptureSystemOutput.java","status":"renamed"},{"patch":"@@ -23,1 +23,1 @@\n-package org.openjdk.asmtools.ext;\n+package org.openjdk.asmtools.lib.ext;\n@@ -28,1 +28,1 @@\n-import org.openjdk.asmtools.ext.CaptureSystemOutput.OutputCapture;\n+import org.openjdk.asmtools.lib.ext.CaptureSystemOutput.OutputCapture;\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/ext\/CaptureSystemOutputExtension.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/java\/org\/openjdk\/asmtools\/ext\/CaptureSystemOutputExtension.java","status":"renamed"},{"patch":"@@ -0,0 +1,191 @@\n+package org.openjdk.asmtools.lib.helper;\n+\n+import org.junit.jupiter.api.Assertions;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.file.FileVisitResult;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.SimpleFileVisitor;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+public class BruteForceHelper {\n+\n+    public static HashSet<String> excludeSet = new HashSet<>() {{\n+        add(\"SourceDebugExtensionNegative01.class\");\n+        add(\"SourceDebugExtensionNegative02.class\");\n+    }};\n+\n+    public static final String FRESHLY_BUILT_ASMTOOLS = \"target\/classes\";\n+\n+    private final ClassProvider classProvider;\n+\n+    private final Map<File, ThreeStringWriters> failedJdis = new HashMap<>();\n+    private final Map<File, ThreeStringWriters> passedJdis = new HashMap<>();\n+    private final Map<File, ThreeStringWriters> failedJasm = new HashMap<>();\n+    private final Map<File, ThreeStringWriters> passedJasm = new HashMap<>();\n+    private final Map<File, ThreeStringWriters> failedLoad = new HashMap<>();\n+    private final Map<File, ThreeStringWriters> passedLoad = new HashMap<>();\n+    private final File compileDir;\n+\n+    public BruteForceHelper() throws IOException {\n+        this(FRESHLY_BUILT_ASMTOOLS);\n+    }\n+\n+    public BruteForceHelper(String dir) throws IOException {\n+        this(new SearchingClassProvider(new File(dir)));\n+    }\n+\n+    public BruteForceHelper(ClassProvider cp) throws IOException {\n+        compileDir = Files.createTempDirectory(\"JdisJasmWorks\").toFile();\n+        compileDir.deleteOnExit();\n+        classProvider = cp;\n+    }\n+\n+    public void work(AsmToolsExecutable diasm, AsmToolsExecutable asm) throws IOException {\n+        List<File> classes = classProvider.getClasses();\n+        tryAll(classes, failedJdis, passedJdis, diasm);\n+        diasm.ensure(classes, failedJdis);\n+\n+        tryAll(classes, failedJasm, passedJasm, asm);\n+        asm.ensure(classes, failedJasm);\n+\n+        AsmToolsExecutable loadClass = new AsmToolsExecutable() {\n+            @Override\n+            public int run(ThreeStringWriters outs, File clazz) throws IOException {\n+                try {\n+                    URL url = compileDir.toURI().toURL();\n+                    URL[] urls = new URL[]{url};\n+                    URLClassLoader cl = new URLClassLoader(urls);\n+                    String origFile = clazz.toString();\n+                    String fqn = origFile.substring(origFile.indexOf(\"org\/openjdk\")).\n+                            replaceFirst(\"\\\\.class$\", \"\").\n+                            replaceAll(\"\/\", \".\");\n+                    cl.loadClass(fqn);\n+                    return 0;\n+                } catch (Exception e) {\n+                    e.printStackTrace(outs.getToolOutput());\n+                    return 1;\n+                }\n+            }\n+\n+            @Override\n+            public void ensure(List<File> all, Map<File, ThreeStringWriters> failures) {\n+                Assertions.assertEquals(0, failedLoad.size(), \"from \" + classes.size() +\n+                        \" failed to produce valid bytecode \" + failedLoad.size() + \": \" + keySetToString(failedLoad, getClassesRoot()));\n+            }\n+        };\n+        tryAll(classes, failedLoad, passedLoad, loadClass);\n+    }\n+\n+    public static String keySetToString(Map<File, ThreeStringWriters> failedJdis, File classesRoot) {\n+        return failedJdis.keySet().stream().map(f -> f.getAbsolutePath().replaceFirst(classesRoot.getAbsolutePath(), \"\")).collect(Collectors.joining(\", \"));\n+    }\n+\n+    private void tryAll(List<File> classes, Map<File, ThreeStringWriters> failed, Map<File, ThreeStringWriters> passed, AsmToolsExecutable ex) throws IOException {\n+        for (File clazz : classes) {\n+            ThreeStringWriters outs = new ThreeStringWriters();\n+            int i = ex.run(outs, clazz);\n+            outs.flush();\n+            if (i != 0) {\n+                Object o = failed.put(clazz, outs);\n+                Assertions.assertNull(o, \" duplicated class - \" + o);\n+                System.out.printf(\"File %s failed\\n\", clazz);\n+                continue;\n+            }\n+            Object o = passed.put(clazz, outs);\n+            Assertions.assertNull(o, \" duplicated class - \" + o);\n+        }\n+        for (Map.Entry<File, ThreeStringWriters> failure : failed.entrySet().stream().sorted(new Comparator<Map.Entry<File, ThreeStringWriters>>() {\n+            @Override\n+            public int compare(Map.Entry<File, ThreeStringWriters> t0, Map.Entry<File, ThreeStringWriters> t1) {\n+                return t0.getKey().compareTo(t1.getKey());\n+            }\n+        }).collect(Collectors.toList())) {\n+            System.err.println(failure.getKey());\n+            System.err.println(failure.getValue().getErrorBos());\n+            System.err.println(failure.getValue().getLoggerBos());\n+            System.err.println(failure.getValue().getToolBos());\n+        }\n+    }\n+\n+    private static List<File> findClasses(File classesRoot) throws IOException {\n+        List<File> classes = new ArrayList<>();\n+        Files.walkFileTree(classesRoot.toPath(), new SimpleFileVisitor<>() {\n+            @Override\n+            public FileVisitResult visitFile(Path path, BasicFileAttributes basicFileAttributes) throws IOException {\n+                if (path.toString().endsWith(\".class\") && !excludeSet.contains(path.toFile().getName())) {\n+                    classes.add(path.toFile().getAbsoluteFile());\n+                }\n+                return FileVisitResult.CONTINUE;\n+            }\n+        });\n+        Assertions.assertNotEquals(0, classes.size(), \"There must be more then 0 class compiled in \" + classesRoot + \" before running this tests!\");\n+        Collections.sort(classes);\n+        return classes;\n+    }\n+\n+    public String getDecompiledClass(File clazz) {\n+        return passedJdis.get(clazz).getToolBos();\n+    }\n+\n+    public File getCompileDir() {\n+        return compileDir;\n+    }\n+\n+    public File getClassesRoot() {\n+        return classProvider.getClassesRoot();\n+    }\n+\n+    public static void createMetadata(ThreeStringWriters outs, File clazz, File savedAsm, File compileDir, File classesRoot) {\n+        outs.getToolOutput().println(\"Orig: \" + clazz.getAbsolutePath());\n+        outs.getToolOutput().println(\"To: \" + compileDir.getAbsolutePath());\n+        outs.getToolOutput().println(\"Base: \" + classesRoot.getAbsolutePath());\n+        outs.getToolOutput().println(\"From: \" + savedAsm.getAbsolutePath());\n+    }\n+\n+    public static File saveDecompiledCode(String body, String tmpPRefix) throws IOException {\n+        File savedFresh = File.createTempFile(tmpPRefix, \".java\");\n+        Files.writeString(savedFresh.toPath(), body);\n+        savedFresh.deleteOnExit();\n+        return savedFresh;\n+    }\n+\n+    public static class SearchingClassProvider implements ClassProvider {\n+        private final File root;\n+\n+        public SearchingClassProvider(File root) {\n+            this.root = root.getAbsoluteFile();\n+        }\n+\n+        @Override\n+        public File getClassesRoot() {\n+            return root;\n+        }\n+\n+        @Override\n+        public List<File> getClasses() throws IOException {\n+            return findClasses(root);\n+        }\n+    }\n+\n+    public interface ClassProvider {\n+\n+        File getClassesRoot();\n+\n+        List<File> getClasses() throws IOException;\n+    }\n+\n+    public interface AsmToolsExecutable {\n+\n+        int run(ThreeStringWriters out, File clazz) throws IOException;\n+\n+        void ensure(List<File> all, Map<File, ThreeStringWriters> failures);\n+    }\n+\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/helper\/BruteForceHelper.java","additions":191,"deletions":0,"binary":false,"changes":191,"status":"added"},{"patch":"@@ -0,0 +1,37 @@\n+package org.openjdk.asmtools.lib.helper;\n+\n+import org.junit.jupiter.api.Assertions;\n+\n+import java.io.File;\n+import java.nio.file.Paths;\n+import java.util.Objects;\n+import java.util.regex.Pattern;\n+\n+public class ClassPathClassWork {\n+\n+    protected static Class clazz;\n+    protected static String classFile;\n+    protected static Pattern className;\n+    protected static Pattern packageName;\n+\n+    public static void initMainClassData(Class testsClass) {\n+        initGenericClassData(testsClass,\"classes\");\n+    }\n+\n+    public static void initTestClassData(Class testsClass) {\n+        initGenericClassData(testsClass,\"test-classes\");\n+    }\n+\n+    private static void initGenericClassData(Class testsClass, String subdir) {\n+        clazz = testsClass;\n+        classFile = \".\/target\/\"+subdir+\"\/\" + clazz.getName().replace('.', '\/') + \".class\";\n+        Assertions.assertTrue(new File(classFile).exists(), \"\\\"%s\\\" not found\".formatted(Paths.get(classFile).toFile().getAbsolutePath()));\n+        className  = Pattern.compile(\"public .*class .*\" + clazz.getSimpleName() + \" extends .*\");\n+        packageName = Pattern.compile(\"package \"+clazz.getPackageName() + \";\");\n+    }\n+\n+    protected String getFile(String fileResource) {\n+        File resourceDir = new File(Objects.requireNonNull(this.getClass().getResource(fileResource)).getFile()).getParentFile();\n+        return resourceDir + File.separator + new File(fileResource).getName();\n+    }\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/helper\/ClassPathClassWork.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -1,1 +1,1 @@\n-package org.openjdk.asmtools;\n+package org.openjdk.asmtools.lib.helper;\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/helper\/ThreeStringWriters.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/java\/org\/openjdk\/asmtools\/ThreeStringWriters.java","status":"renamed"},{"patch":"@@ -23,1 +23,1 @@\n-package org.openjdk.asmtools.lib;\n+package org.openjdk.asmtools.lib.log;\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/log\/LogAndBinResults.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/java\/org\/openjdk\/asmtools\/lib\/LogAndBinResults.java","status":"renamed"},{"patch":"@@ -23,1 +23,1 @@\n-package org.openjdk.asmtools.lib;\n+package org.openjdk.asmtools.lib.log;\n@@ -25,1 +25,1 @@\n-import org.openjdk.asmtools.common.StringUtils;\n+import org.openjdk.asmtools.lib.utility.StringUtils;\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/log\/LogAndReturn.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/java\/org\/openjdk\/asmtools\/lib\/LogAndReturn.java","status":"renamed"},{"patch":"@@ -23,1 +23,1 @@\n-package org.openjdk.asmtools.lib;\n+package org.openjdk.asmtools.lib.log;\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/log\/LogAndTextResults.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/java\/org\/openjdk\/asmtools\/lib\/LogAndTextResults.java","status":"renamed"},{"patch":"@@ -0,0 +1,26 @@\n+\/*\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/**\n+ * Helper frameworks, utilities, base classes designed to support JUnit testing of ASM tools.\n+ *\/\n+package org.openjdk.asmtools.lib;\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/package-info.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"added"},{"patch":"@@ -29,0 +29,1 @@\n+import java.util.Optional;\n@@ -44,0 +45,10 @@\n+    public Optional<Object> load() {\n+        try {\n+            Object obj = trClass.getDeclaredConstructor().newInstance();\n+            return Optional.of(obj);\n+        } catch (InstantiationException | IllegalAccessException |\n+                 InvocationTargetException | NoSuchMethodException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/transform\/ResultChecker.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -26,2 +26,0 @@\n-import org.openjdk.asmtools.lib.action.EAsmTools;\n-import org.openjdk.asmtools.common.FileUtils;\n@@ -33,0 +31,2 @@\n+import org.openjdk.asmtools.lib.action.EAsmTool;\n+import org.openjdk.asmtools.lib.utility.FileUtils;\n@@ -37,0 +37,1 @@\n+import java.lang.reflect.InvocationTargetException;\n@@ -44,2 +45,2 @@\n-import static org.openjdk.asmtools.lib.action.EAsmTools.*;\n-import static org.openjdk.asmtools.common.FileUtils.findFile;\n+import static org.openjdk.asmtools.lib.action.EAsmTool.*;\n+import static org.openjdk.asmtools.lib.utility.FileUtils.findFile;\n@@ -54,1 +55,1 @@\n-        \/\/ a class, jasm and jacob files are placed in the same directory.\n+        \/\/ a class, jasm and jcov files are placed in the same directory.\n@@ -56,1 +57,4 @@\n-        CLASS_TO_JCOD_TO_CLASS_LOAD }\n+        CLASS_TO_JCOD_TO_CLASS_LOAD\n+    }\n+\n+    private static boolean debug;\n@@ -60,0 +64,12 @@\n+        \/\/ might affect a test result - Must be false once a development is done\n+        String str = System.getenv(\"DEBUG\");\n+        str = str == null ? \"false\" : str;\n+        debug = List.of(\"true\", \"on\", \"yes\").stream().anyMatch(str::equalsIgnoreCase);\n+    }\n+\n+    public static void debugOn() {\n+        debug = true;\n+    }\n+\n+    public static void debugOff() {\n+        debug = false;\n@@ -62,2 +78,2 @@\n-    public TransformLoader setToolsOptions(EAsmTools tool, String... options) {\n-        if( options != null && options.length > 0 ) {\n+    public TransformLoader setToolsOptions(EAsmTool tool, String... options) {\n+        if (options != null && options.length > 0) {\n@@ -74,1 +90,1 @@\n-    Map<EAsmTools,String[]> toolsOptions = new HashMap<>();\n+    Map<EAsmTool, String[]> toolsOptions = new HashMap<>();\n@@ -82,3 +98,0 @@\n-    \/\/ might affect a test result - Must be false once a development is done\n-    private boolean DEBUG = false;\n-\n@@ -86,1 +99,1 @@\n-    private String    dumpDir;\n+    private String dumpDir;\n@@ -119,8 +132,0 @@\n-    public TransformLoader setDEBUG(boolean DEBUG) {\n-        this.DEBUG = DEBUG;\n-        if( dumpDir == null && DEBUG) {\n-            dumpDir = Paths.get(\"\").toAbsolutePath().toString();\n-        }\n-        return this;\n-    }\n-\n@@ -161,1 +166,1 @@\n-                        if(  excludeList.contains(name) ) {\n+                        if (excludeList.contains(name)) {\n@@ -167,2 +172,4 @@\n-                                case CLASS_TO_JASM_TO_CLASS_LOAD -> loadClassFromGeneratedJasmFile(name, checkFile(fileName + \".class\"));\n-                                case CLASS_TO_JCOD_TO_CLASS_LOAD -> loadClassFromGeneratedJcodFile(name, checkFile(fileName + \".class\"));\n+                                case CLASS_TO_JASM_TO_CLASS_LOAD ->\n+                                        loadClassFromGeneratedJasmFile(name, checkFile(fileName + \".class\"));\n+                                case CLASS_TO_JCOD_TO_CLASS_LOAD ->\n+                                        loadClassFromGeneratedJcodFile(name, checkFile(fileName + \".class\"));\n@@ -195,0 +202,31 @@\n+    \/**\n+     * Loads a class from a byte buffer and optionally instantiates it.\n+     *\n+     * @param name        The name of the class.\n+     * @param buffer      The byte buffer containing the class definition.\n+     * @param instantiate Whether to instantiate the class.\n+     * @param <T>         The type of the class.\n+     * @return An Optional containing the class or an instance of the class.\n+     *\/\n+    public <T> Optional<T> loadClassFromBuffer(String name, byte[] buffer, boolean instantiate) throws InvocationTargetException, NoSuchMethodException, InstantiationException, IllegalAccessException {\n+        if (name == null || buffer == null) {\n+            throw new IllegalArgumentException(\"Name and buffer must not be null\");\n+        }\n+\n+        try {\n+            long byteCount = buffer.length;\n+            Class<?> clazz = defineClass(name, buffer);\n+            println(\"[Loaded {%s} from buffer ({%d} bytes)]\".formatted(name, byteCount));\n+\n+            if (instantiate) {\n+                T instance = (T) clazz.getDeclaredConstructor().newInstance();\n+                return Optional.of(instance);\n+            } else {\n+                return Optional.of((T) clazz);\n+            }\n+        } catch (NoSuchMethodException | InstantiationException | IllegalAccessException |\n+                 InvocationTargetException e) {\n+            throw e;\n+        }\n+    }\n+\n@@ -201,1 +239,1 @@\n-        if( DEBUG ) {\n+        if (TransformLoader.debug) {\n@@ -325,0 +363,4 @@\n+        } catch (ClassFormatError cfe) {\n+            if (TransformLoader.debug)\n+                printError(\"ClassFormatError: \" + cfe.getMessage());\n+            throw cfe;\n@@ -330,1 +372,1 @@\n-            printError( e.getClass().getName() + \": \" + e.getMessage());\n+            printError(e.getClass().getName() + \": \" + e.getMessage());\n@@ -332,1 +374,1 @@\n-            if( DEBUG ) {\n+            if (TransformLoader.debug) {\n@@ -334,1 +376,1 @@\n-                Path dumpFile = Path.of(dumpDir, name.substring(idx == -1 ? 0 : idx+1) + \".class.dump\");\n+                Path dumpFile = Path.of(dumpDir, name.substring(idx == -1 ? 0 : idx + 1) + \".class.dump\");\n@@ -375,1 +417,1 @@\n-        System.err.println( (DEBUG ? MSG_PREFIX : \"\") + s);\n+        System.err.println((TransformLoader.debug ? MSG_PREFIX : \"\") + s);\n@@ -383,1 +425,1 @@\n-        if (DEBUG) {\n+        if (TransformLoader.debug) {\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/transform\/TransformLoader.java","additions":72,"deletions":30,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.lib.transform.pipeline;\n+\n+public class AsmtoolsType {\n+    private final FileType type;\n+    private final boolean isFirstInput;\n+    private Pipeline.Status status;\n+\n+    public AsmtoolsType(Pipeline.Status status, FileType type, boolean isFirstInput) {\n+        this.status = status;\n+        this.type = type;\n+        this.isFirstInput = isFirstInput;\n+    }\n+\n+    public AsmtoolsType(Pipeline.Status status, FileType type) {\n+        this(status, type, false);\n+    }\n+\n+    public boolean firstInput() {\n+        return isFirstInput;\n+    }\n+\n+    public void setRecord(Pipeline.Status status) {\n+        this.status = status;\n+    }\n+\n+    public Pipeline.Status record() {\n+        return status;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return type + \"{\" +\n+               \"status=\" + status +\n+               \", isFirstInput=\" + isFirstInput +\n+               '}';\n+    }\n+\n+    enum FileType {\n+        JCOD(\".jcod\"), JASM(\".jasm\"), JAVA(\".java\"), CLAZZ(\".class\");\n+        private final String ext;\n+\n+        FileType(String ext) {\n+            this.ext = ext;\n+        }\n+\n+        public String extension() {\n+            return ext;\n+        }\n+    }\n+\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/transform\/pipeline\/AsmtoolsType.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,105 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.asmtools.lib.transform.pipeline;\n+\n+import org.openjdk.asmtools.common.inputs.ByteInput;\n+import org.openjdk.asmtools.common.outputs.ByteOutput;\n+import org.openjdk.asmtools.common.outputs.log.StringLog;\n+import org.openjdk.asmtools.jdis.Main;\n+import org.openjdk.asmtools.lib.utility.FileUtils;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+import static org.openjdk.asmtools.lib.transform.pipeline.AsmtoolsType.FileType.JASM;\n+import static org.openjdk.asmtools.lib.transform.pipeline.Pipeline.*;\n+\n+public class ClassToJasmConverter extends Converter implements Function<Clazz, Jasm> {\n+    private static final String DEFAULT_STAGE_NAME = \"ClassToJasm\";\n+    private static final String JDIS_DETAILED_OUTPUT = \"-g\";\n+\n+    public ClassToJasmConverter(String stageName) {\n+        super(Objects.requireNonNullElse(stageName, DEFAULT_STAGE_NAME));\n+    }\n+\n+    public ClassToJasmConverter() {\n+        this(null);\n+    }\n+\n+\n+    @Override\n+    public Jasm apply(Clazz incoming) {\n+        System.out.println(\"Generating: class -> jasm\");\n+        Objects.requireNonNull(incoming, \"Incoming Clazz cannot be null\");\n+\n+        logDebug(stageName(), incoming.firstInput() ? \"Received first input: \" + incoming : \"Received from previous stage: \" + incoming);\n+\n+        if (!incoming.firstInput() && incoming.record().toolReturn() != SUCCESS) {\n+            return handleError(\"Previous stage failed\", incoming, incoming.record().log(), incoming.record().toolReturn());\n+        }\n+\n+        if (incoming.record().file() == null) {\n+            return handleError(\"Incoming Clazz file is null\", incoming, null, -1);\n+        }\n+\n+        try {\n+            byte[] clazzBytes = FileUtils.readBytesFromFile(incoming.record().file());\n+            ByteOutput output = new ByteOutput();\n+            StringLog log = new StringLog();\n+            Main compiler = new Main(output, log, new ByteInput(clazzBytes), JDIS_DETAILED_OUTPUT);\n+            int result = compiler.disasm();\n+\n+            if (result != SUCCESS) {\n+                return handleError(stageName() + \" failed.\", incoming, log, result);\n+            }\n+\n+            if (output.getOutputs() == null || output.getOutputs().isEmpty() || output.getOutputs().get(0) == null) {\n+                return handleError(\"jdis ToolOutput not available\", incoming, null, result);\n+            }\n+\n+            logDebug(stageName(), \"jdis succeeded.\");\n+            Path classFilePath = FileUtils.writeBytesToFile(\"temp\", JASM.extension(), output.getOutputs().get(0).getBody());\n+            Jasm r = handleOutput(incoming, classFilePath, log, result, output);\n+            logDebug(stageName(), \"Sending next stage: \" + r);\n+            return r;\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Failed to convert JASM to CLASS\", e);\n+        }\n+    }\n+\n+    protected Jasm handleError(String errorMessage, Clazz type, StringLog log, int result) {\n+        logWarn(errorMessage);\n+        Pipeline.Status status = new Pipeline.Status(stageName(), type.record().file(), log, result, null);\n+        setRecord(status);\n+        return new Jasm(status);\n+    }\n+\n+    protected Jasm handleOutput(Clazz type, Path classFilePath, StringLog log, int result, ByteOutput output) {\n+        Pipeline.Status status = new Pipeline.Status(stageName(), classFilePath, log, result, output);\n+        setRecord(status);\n+        return new Jasm(status);\n+    }\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/transform\/pipeline\/ClassToJasmConverter.java","additions":105,"deletions":0,"binary":false,"changes":105,"status":"added"},{"patch":"@@ -0,0 +1,100 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.asmtools.lib.transform.pipeline;\n+\n+import org.openjdk.asmtools.common.inputs.ByteInput;\n+import org.openjdk.asmtools.common.outputs.ByteOutput;\n+import org.openjdk.asmtools.common.outputs.log.StringLog;\n+import org.openjdk.asmtools.jdec.Main;\n+import org.openjdk.asmtools.lib.utility.FileUtils;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+import static org.openjdk.asmtools.lib.transform.pipeline.AsmtoolsType.FileType.JCOD;\n+import static org.openjdk.asmtools.lib.transform.pipeline.Pipeline.*;\n+\n+public class ClassToJcodConverter extends Converter implements Function<Clazz, Jcod> {\n+    private static final String DEFAULT_STAGE_NAME = \"ClassToJcod\";\n+\n+    public ClassToJcodConverter(String stageName) {\n+        super(Objects.requireNonNullElse(stageName, DEFAULT_STAGE_NAME));\n+    }\n+\n+    public ClassToJcodConverter() {\n+        this(null);\n+    }\n+\n+    @Override\n+    public Jcod apply(Clazz incoming) {\n+        System.out.println(\"Generating: class -> jcod\");\n+        Objects.requireNonNull(incoming, \"Incoming Jcod cannot be null\");\n+\n+        if (incoming.firstInput()) {\n+            logDebug(stageName(), \"Received first input: \" + incoming);\n+        } else {\n+            logDebug(stageName(), \"Received from previous stage: \" + incoming);\n+        }\n+\n+        if (!incoming.firstInput() && incoming.record().toolReturn() != SUCCESS) {\n+            logWarn(stageName(), \"Previous stage failed. Delegating...\");\n+            return handleError(\"Previous stage failed\", incoming, incoming.record().log(), incoming.record().toolReturn());\n+        }\n+\n+        if (incoming.record().file() == null) {\n+            return handleError(\"Incoming Clazz file is null\", incoming, null, -1);\n+        }\n+\n+        try {\n+            byte[] classBytes = FileUtils.readBytesFromFile(incoming.record().file());\n+            ByteOutput output = new ByteOutput();\n+            StringLog log = new StringLog();\n+            Main compiler = new Main(output, log, new ByteInput(classBytes));\n+            int result = compiler.decode();\n+            if (result != SUCCESS) {\n+                return handleError(stageName() + \" failed.\", incoming, log, result);\n+            }\n+            if (output.getOutputs() == null || output.getOutputs().isEmpty() || output.getOutputs().get(0) == null) {\n+                return handleError(\"jdec ToolOutput not available\", incoming, log, result);\n+            } else {\n+                logDebug(stageName(), \"jdec succeeded.\");\n+            }\n+            Path jcodFilePath = FileUtils.writeBytesToFile(\"temp\", JCOD.extension(), output.getOutputs().get(0).getBody());\n+            Jcod r = new Jcod(new Pipeline.Status(stageName(), jcodFilePath, log, result, output));\n+            logDebug(stageName(), \"Sending next stage: \" + r);\n+            return r;\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Failed to convert CLASS to JCOD\", e);\n+        }\n+    }\n+\n+    protected Jcod handleError(String errorMessage, Clazz type, StringLog log, int result) {\n+        logWarn(errorMessage);\n+        Pipeline.Status status = new Pipeline.Status(stageName(), type.record().file(), log, result, null);\n+        setRecord(status);\n+        return new Jcod(status);\n+    }\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/transform\/pipeline\/ClassToJcodConverter.java","additions":100,"deletions":0,"binary":false,"changes":100,"status":"added"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.lib.transform.pipeline;\n+\n+public class Clazz extends AsmtoolsType {\n+\n+    public Clazz(Pipeline.Status status) {\n+        super(status, FileType.CLAZZ);\n+    }\n+\n+    public Clazz(Pipeline.Status status, boolean isInput) {\n+        super(status, FileType.CLAZZ, isInput);\n+    }\n+\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/transform\/pipeline\/Clazz.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.lib.transform.pipeline;\n+\n+import org.openjdk.asmtools.common.outputs.log.StringLog;\n+\n+public class Converter {\n+\n+    private Pipeline.Status record;\n+    private final String stageName;\n+    private StringLog log;\n+\n+    public Converter(String stageName) {\n+        this.stageName = stageName;\n+        this.log = new StringLog();\n+    }\n+\n+    public StringLog log() {\n+        return log;\n+    }\n+\n+    public Converter setLog(StringLog log) {\n+        this.log = log;\n+        return this;\n+    }\n+\n+    public String stageName() {\n+        return stageName;\n+    }\n+\n+    public Pipeline.Status record() {\n+        return record;\n+    }\n+\n+    public Converter setRecord(Pipeline.Status record) {\n+        this.record = record;\n+        return this;\n+    }\n+\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/transform\/pipeline\/Converter.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -0,0 +1,34 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.lib.transform.pipeline;\n+\n+public class Jasm extends AsmtoolsType {\n+\n+    public Jasm(Pipeline.Status status) {\n+        super(status, FileType.JASM);\n+    }\n+\n+    public Jasm(Pipeline.Status status, boolean isInput) {\n+        super(status, FileType.JASM, isInput);\n+    }\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/transform\/pipeline\/Jasm.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.lib.transform.pipeline;\n+\n+import org.openjdk.asmtools.common.inputs.ByteInput;\n+import org.openjdk.asmtools.common.outputs.ByteOutput;\n+import org.openjdk.asmtools.common.outputs.log.StringLog;\n+import org.openjdk.asmtools.jasm.Main;\n+import org.openjdk.asmtools.lib.utility.FileUtils;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+import static org.openjdk.asmtools.lib.transform.pipeline.AsmtoolsType.FileType.CLAZZ;\n+import static org.openjdk.asmtools.lib.transform.pipeline.Pipeline.*;\n+\n+public class JasmToClassConverter extends Converter implements Function<Jasm, Clazz> {\n+    private static final String DEFAULT_STAGE_NAME = \"JcodToClass\";\n+\n+    public JasmToClassConverter(String stageName) {\n+        super(Objects.requireNonNullElse(stageName, DEFAULT_STAGE_NAME));\n+    }\n+\n+    public JasmToClassConverter() {\n+        this(null);\n+    }\n+\n+    @Override\n+    public Clazz apply(Jasm incoming) {\n+        System.out.println(\"Compiling: jasm -> class\");\n+        Objects.requireNonNull(incoming, \"Incoming Jcod cannot be null\");\n+\n+        if (incoming.firstInput()) {\n+            logDebug(stageName(), \"Received first input: \" + incoming);\n+        } else {\n+            logDebug(stageName(), \"Received from previous stage: \" + incoming);\n+        }\n+\n+        if (!incoming.firstInput() && incoming.record().toolReturn() != SUCCESS) {\n+            logWarn(stageName(), \"Previous stage failed. Delegating...\");\n+            return handleError(\"Previous stage failed\", incoming, incoming.record().log(), incoming.record().toolReturn());\n+        }\n+\n+        if (incoming.record().file() == null || !Files.exists(incoming.record().file()) || !Files.isRegularFile(incoming.record().file())) {\n+            return handleError(\"Incoming Jasm file is null\", incoming, null, -1);\n+        }\n+        try {\n+            byte[] jasmBytes = FileUtils.readBytesFromFile(incoming.record().file());\n+            ByteOutput output = new ByteOutput();\n+            StringLog log = new StringLog();\n+            Main compiler = new Main(output, log, new ByteInput(jasmBytes));\n+            int result = compiler.compile();\n+            if (result != SUCCESS) {\n+                return handleError(stageName() + \" failed.\", incoming, log, result);\n+            }\n+            if (output.getOutputs() == null || output.getOutputs().isEmpty() || output.getOutputs().get(0) == null) {\n+                return handleError(\"jasm ToolOutput not available\", incoming, log, result);\n+\n+            }\n+            logDebug(stageName(), \"jasm succeeded.\");\n+            Path classFilePath = FileUtils.writeBytesToFile(\"temp\", CLAZZ.extension(), output.getOutputs().get(0).getBody());\n+            Clazz r = new Clazz(new Pipeline.Status(stageName(), classFilePath, log, result, output));\n+            logDebug(stageName(), \"Sending next stage: \" + r);\n+            return r;\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Failed to convert JASM to CLASS\", e);\n+        }\n+    }\n+\n+    protected Clazz handleError(String errorMessage, Jasm type, StringLog log, int result) {\n+        logWarn(errorMessage);\n+        Pipeline.Status status = new Pipeline.Status(stageName(), type.record().file(), log, result, null);\n+        setRecord(status);\n+        return new Clazz(status);\n+    }\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/transform\/pipeline\/JasmToClassConverter.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.lib.transform.pipeline;\n+\n+public class Jcod extends AsmtoolsType {\n+\n+    public Jcod(Pipeline.Status status) {\n+        super(status, FileType.JCOD);\n+    }\n+\n+    public Jcod(Pipeline.Status status, boolean isInput) {\n+        super(status, FileType.JCOD, isInput);\n+    }\n+}\n+\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/transform\/pipeline\/Jcod.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.lib.transform.pipeline;\n+\n+import org.openjdk.asmtools.common.inputs.ByteInput;\n+import org.openjdk.asmtools.common.outputs.ByteOutput;\n+import org.openjdk.asmtools.common.outputs.log.StringLog;\n+import org.openjdk.asmtools.jcoder.Main;\n+import org.openjdk.asmtools.lib.utility.FileUtils;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+import static org.openjdk.asmtools.lib.transform.pipeline.AsmtoolsType.FileType.CLAZZ;\n+import static org.openjdk.asmtools.lib.transform.pipeline.Pipeline.*;\n+\n+public class JcodToClassConverter extends Converter implements Function<Jcod, Clazz> {\n+    private static final String DEFAULT_STAGE_NAME = \"JcodToClass\";\n+\n+    public JcodToClassConverter(String stageName) {\n+        super(Objects.requireNonNullElse(stageName, DEFAULT_STAGE_NAME));\n+    }\n+\n+    public JcodToClassConverter() {\n+        this(null);\n+    }\n+\n+    @Override\n+    public Clazz apply(Jcod incoming) {\n+        System.out.println(\"Compiling: jcod -> class\");\n+        Objects.requireNonNull(incoming, \"Incoming Jcod cannot be null\");\n+\n+        if (incoming.firstInput()) {\n+            logDebug(stageName(), \"Received first input: \" + incoming);\n+        } else {\n+            logDebug(stageName(), \"Received from previous stage: \" + incoming);\n+        }\n+\n+        if (!incoming.firstInput() && incoming.record().toolReturn() != SUCCESS) {\n+            logWarn(stageName(), \"Previous stage failed. Delegating...\");\n+            return handleError(\"Previous stage failed\", incoming, null, -1);\n+        }\n+\n+        if (incoming.record().file() == null) {\n+            return handleError(\"Incoming JCod file is null\", incoming, null, -1);\n+        }\n+        try {\n+            byte[] jcodBytes = FileUtils.readBytesFromFile(incoming.record().file());\n+            ByteOutput output = new ByteOutput();\n+            StringLog log = new StringLog();\n+            Main compiler = new Main(output, log, new ByteInput(jcodBytes));\n+            int result = compiler.compile();\n+            if (result != SUCCESS) {\n+                return handleError(stageName() + \" failed.\", incoming, log, result);\n+            }\n+            if (output.getOutputs() == null || output.getOutputs().isEmpty() || output.getOutputs().get(0) == null) {\n+                return handleError(\"jcoder ToolOutput not available\", incoming, null, result);\n+\n+            }\n+            logDebug(stageName(), \"jcoder succeeded.\");\n+            Path classFilePath = FileUtils.writeBytesToFile(\"temp\", CLAZZ.extension(), output.getOutputs().get(0).getBody());\n+            Clazz r = new Clazz(new Status(stageName(), classFilePath, log, result, output));\n+            logDebug(stageName(), \"Sending next stage: \" + r);\n+            return r;\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Failed to convert JCOD to CLASS\", e);\n+        }\n+    }\n+\n+    protected Clazz handleError(String errorMessage, Jcod type, StringLog log, int result) {\n+        logWarn(errorMessage);\n+        Pipeline.Status status = new Pipeline.Status(stageName(), type.record().file(), log, result, null);\n+        setRecord(status);\n+        return new Clazz(status);\n+    }\n+}\n+\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/transform\/pipeline\/JcodToClassConverter.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.lib.transform.pipeline;\n+\n+import org.openjdk.asmtools.common.outputs.ByteOutput;\n+import org.openjdk.asmtools.common.outputs.log.StringLog;\n+\n+import java.nio.file.Path;\n+import java.util.function.Function;\n+\n+public class Pipeline<T, R> {\n+    static final int SUCCESS = 0;\n+    static final int INIT_STAGE = 65_535;\n+    static final String CLASS_EXT = \".class\";\n+    static final String JASM_EXT = \".jasm\";\n+    static final String JCOD_EXT = \".jcod\";\n+    static final String JAVA_EXT = \".java\";\n+    private static final boolean DEBUG = true;\n+    private static final boolean WARN = true;\n+    private final Function<T, R> currentStage;\n+\n+    public Pipeline(Function<T, R> initialStage) {\n+        this.currentStage = initialStage;\n+    }\n+\n+    static void logDebug(String context, String msg) {\n+        if (DEBUG)\n+            System.out.printf(\"DEBUG: <%s> [%s]%n\", context, msg);\n+    }\n+\n+    static void logWarn(String context, String msg) {\n+        if (WARN)\n+            System.out.printf(\"WARN : <%s> [%s]%n\", context, msg);\n+    }\n+\n+    static void logWarn(String msg) {\n+        if (WARN)\n+            System.out.printf(\"WARN : [%s]%n\", msg);\n+    }\n+\n+    public <K> Pipeline<T, K> addStage(Function<R, K> nextStage) {\n+        return new Pipeline<>(input -> nextStage.apply(currentStage.apply(input)));\n+    }\n+\n+    public R execute(T input) {\n+        return currentStage.apply(input);\n+    }\n+\n+    public record Status(String stage, Path file, StringLog log, int toolReturn, ByteOutput byteOutput) {\n+        public Status(Path file) {\n+            this(null, file, null, -1, null);\n+        }\n+\n+        public Status(StringLog log) {\n+            this(null, null, log, -1, null);\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/transform\/pipeline\/Pipeline.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"},{"patch":"@@ -0,0 +1,159 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.lib.transform.pipeline;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.util.Objects;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.openjdk.asmtools.lib.transform.pipeline.Pipeline.SUCCESS;\n+\n+\/**\n+ * Class to play around pipeline implementation\n+ *\/\n+public class TestPipeline {\n+    JcodToClassConverter jcodToClass = new JcodToClassConverter(\"jcodToClass\");\n+    ClassToJasmConverter classToJasm = new ClassToJasmConverter(\"classToJasm\");\n+    JasmToClassConverter jasmToClass = new JasmToClassConverter(\"jasmToClass\");\n+    ClassToJcodConverter classToJcod = new ClassToJcodConverter(\"classToJcod\");\n+    JcodToClassConverter jcodToClass2 = new JcodToClassConverter(\"jcodToClass_2\");\n+\n+    private static String getInputFile(String fileName) {\n+        String resourceName = String.format(\"\/jcod-files\/%s\", fileName);\n+        File resourceDir = new File(Objects.requireNonNull(TestPipeline.class.getResource(resourceName)).getFile()).getParentFile();\n+        return resourceDir + File.separator + fileName;\n+    }\n+\n+    @Test\n+    public void testJcodClass01() {\n+        Pipeline<Jcod, Clazz> pipeline = new Pipeline<>(jcodToClass);\n+\n+        \/\/ Input file\n+        String jcodFileName = \"atrcvl00101m10p.jcod\";\n+        Jcod jcodInput = new Jcod(new Pipeline.Status(Path.of(getInputFile(jcodFileName))), true);\n+\n+        \/\/ Execute the pipeline\n+        Clazz finalOutput = pipeline.execute(jcodInput);\n+\n+        \/\/ Output the result\n+        System.out.println(\"Final output file: \" + finalOutput);\n+        assertTrue(finalOutput.record().log().toString().isEmpty());\n+        assertEquals(SUCCESS, finalOutput.record().toolReturn());\n+        assertTrue(jcodToClass.log().toString().isEmpty());\n+    }\n+\n+    @Test\n+    public void testJcodClass02() {\n+        Pipeline<Jcod, Clazz> pipeline = new Pipeline<>(jcodToClass);\n+\n+        \/\/ Input file\n+        String jcodFileName = \"atrcvl00101m10p.jcod\";\n+\n+        \/\/ Execute the pipeline\n+        assertThrows(NullPointerException.class, () -> pipeline.execute(null));\n+    }\n+\n+    @Test\n+    public void testJcodClass03() {\n+        JcodToClassConverter j2c = new JcodToClassConverter();\n+        Pipeline<Jcod, Clazz> pipeline = new Pipeline<>(jcodToClass);\n+\n+        \/\/ Input file\n+        String jcodFileName = \"abc.txt\";\n+        Jcod jcodInput = new Jcod(new Pipeline.Status(Path.of(getInputFile(jcodFileName))), true);\n+\n+        \/\/ Execute the pipeline\n+        Clazz finalOutput = pipeline.execute(jcodInput);\n+\n+        \/\/ Output the result\n+        assertFalse(finalOutput.record().log().toString().isEmpty());\n+        assertNotEquals(SUCCESS, finalOutput.record().toolReturn());\n+        assertFalse(jcodToClass.record().log().toString().isEmpty());\n+    }\n+\n+    @Disabled       \/\/ TODO: \"atrcvl00101m10p.jasm not found\n+    @Test\n+    public void testJasmClass01() {\n+        Pipeline<Jasm, Clazz> pipeline = new Pipeline<>(jasmToClass);\n+\n+        \/\/ Input file\n+        String jasmFileName = \"atrcvl00101m10p.jasm\";\n+\n+        \/\/ Execute the pipeline\n+        Clazz finalOutput = pipeline.execute(new Jasm(new Pipeline.Status(Path.of(getInputFile(jasmFileName))), true));\n+\n+        \/\/ Output the result\n+        System.out.println(\"Final output file: \" + finalOutput.record().file());\n+        assertTrue(jasmToClass.log().toString().isEmpty());\n+        assertEquals(SUCCESS, finalOutput.record().toolReturn());\n+    }\n+\n+    @Disabled       \/\/ TODO: atrcvl00101m10p.jasm not found\n+    @Test\n+    public void testJasmClassJcod() {\n+        Pipeline<Jasm, Jcod> pipeline = new Pipeline<>(jasmToClass).addStage(classToJcod);\n+\n+        \/\/ Input file\n+        String jasmFileName = \"atrcvl00101m10p.jasm\";\n+        jasmFileName = \"abc.txt\";\n+        Jasm input = new Jasm(new Pipeline.Status(Path.of(getInputFile(jasmFileName))));\n+\n+        \/\/ Execute the pipeline\n+        Jcod finalOutput = pipeline.execute(input);\n+\n+        \/\/ Output the result\n+        System.out.println(\"Final output file: \" + finalOutput);\n+    }\n+\n+    @Test\n+    public void testJcodClassJasmClassJcodClass() {\n+        JcodToClassConverter jcodToClass = new JcodToClassConverter();\n+        ClassToJasmConverter classToJasm = new ClassToJasmConverter();\n+        JasmToClassConverter jasmToClass = new JasmToClassConverter();\n+        ClassToJcodConverter classToJcod = new ClassToJcodConverter();\n+        JcodToClassConverter jcodToClass2 = new JcodToClassConverter();\n+\n+        \/\/ Define the pipeline\n+        Pipeline<Jcod, Clazz> pipeline = new Pipeline<>(jcodToClass)\n+                .addStage(classToJasm)\n+                .addStage(jasmToClass)\n+                .addStage(classToJcod)\n+                .addStage(jcodToClass2);\n+\n+        \/\/ Input file\n+        String jcodFileName = \"atrcvl00101m10p.jcod\";\n+\n+        Path jcodFilePath = Path.of(getInputFile(jcodFileName));\n+        Jcod jcodInput = new Jcod(new Pipeline.Status(jcodFilePath));\n+\n+        \/\/ Execute the pipeline\n+        Clazz finalOutput = pipeline.execute(jcodInput);\n+\n+        \/\/ Output the result\n+        System.out.println(\"Final output file: \" + finalOutput.record().file());\n+    }\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/transform\/pipeline\/TestPipeline.java","additions":159,"deletions":0,"binary":false,"changes":159,"status":"added"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.lib.utility;\n+\n+import org.junit.jupiter.api.Assertions;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardOpenOption;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+import java.util.stream.Stream;\n+\n+public class FileUtils {\n+\n+    public static byte[] readBytesFromFile(Path filePath) throws IOException {\n+        return Files.readAllBytes(filePath);\n+    }\n+\n+    public static Path writeBytesToFile(String prefix, String suffix, byte[] bytes) throws IOException {\n+        Path tempFile = Files.createTempFile(prefix, suffix);\n+        Files.write(tempFile, bytes, StandardOpenOption.WRITE);\n+        return tempFile;\n+    }\n+\n+    public static File getResourceFilePath(Class<?> cls, String relativePath) {\n+        return new File(cls.getResource(relativePath).getFile());\n+    }\n+\n+    public static byte[] getResourceFile(String s) throws IOException {\n+        byte[] bytes;\n+        try (InputStream is = FileUtils.class.getResourceAsStream(s)) {\n+            bytes = is.readAllBytes();\n+            Assertions.assertNotNull(bytes);\n+        } catch (Exception ex) {\n+            System.err.println(\"Can't get resource file \" + s);\n+            throw ex;\n+        }\n+        return bytes;\n+    }\n+\n+    public static byte[] getBinaryFile(File file) throws ClassNotFoundException {\n+        long byteCount = file.length();\n+        byte[] bytes = new byte[(int) byteCount];\n+        try {\n+            FileInputStream f = new FileInputStream(file);\n+            f.read(bytes);\n+            f.close();\n+        } catch (Exception e) {\n+            throw new ClassNotFoundException();\n+        }\n+        Assertions.assertNotNull(bytes);\n+        return bytes;\n+    }\n+\n+    public static String getStringFile(File file) throws ClassNotFoundException {\n+        byte[] bytes = getBinaryFile(file);\n+        String str = new String(bytes, StandardCharsets.UTF_8);\n+        Assertions.assertNotNull(str);\n+        return str;\n+    }\n+\n+    public static Optional<Path> findFile(String root, String fileName, Consumer<String> printer) {\n+        try (\n+                Stream<Path> stream = Files.find(Paths.get(root), 20,\n+                        (path, attr) -> path.toString().endsWith(fileName))) {\n+            return stream.findAny();\n+        } catch (IOException e) {\n+            printer.accept(e.getMessage());\n+        }\n+        return Optional.empty();\n+    }\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/utility\/FileUtils.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.lib.utility;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.BiFunction;\n+import java.util.stream.IntStream;\n+\n+public class StringUtils {\n+\n+    public static BiFunction<String, String, Long> funcSubStrCount = (text, subStr) -> {\n+        return IntStream.range(0, text.length() - subStr.length() + 1)\n+                .filter(i -> text.substring(i, i + subStr.length()).equals(subStr))\n+                .count();\n+    };\n+\n+    public static List<String> substrBetween(final String str, final String startStr, final String endStr) {\n+        if (isEmpty(str) || isEmpty(startStr) || isEmpty(endStr)) {\n+            return new ArrayList<>();\n+        }\n+        final int strLen = str.length();\n+        final int startLen = endStr.length();\n+        final int endLen = startStr.length();\n+        final List<String> list = new ArrayList<>();\n+        int pos = 0;\n+        while (pos < strLen - startLen) {\n+            int start = str.indexOf(startStr, pos);\n+            if (start < 0)\n+                break;\n+            start += endLen;\n+            final int end = str.indexOf(endStr, start);\n+            if (end < 0)\n+                break;\n+            list.add(str.substring(start, end));\n+            pos = end + startLen;\n+        }\n+        return list;\n+    }\n+\n+    public static boolean isEmpty(String s) {\n+        return s == null || s.isEmpty();\n+    }\n+\n+    public static String[] addTail(String[] elements, String... extras) {\n+        int length = extras.length;\n+        if (length == 0) {\n+            return elements;\n+        }\n+        String[] result = new String[elements.length + length];\n+        System.arraycopy(elements, 0, result, 0, elements.length);\n+        System.arraycopy(extras, 0, result, elements.length, length);\n+        return result;\n+    }\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/utility\/StringUtils.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"},{"patch":"@@ -0,0 +1,145 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.structure.ClassFile;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.openjdk.asmtools.common.structure.CFVersion;\n+import org.openjdk.asmtools.lib.action.Jasm;\n+import org.openjdk.asmtools.lib.log.LogAndBinResults;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import static org.openjdk.asmtools.lib.utility.StringUtils.funcSubStrCount;\n+\n+\/**\n+ * This is the test for class\/interface\/field modifiers.\n+ *\/\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+public class ClassFileTests {\n+    private Jasm jasm = new Jasm();\n+    private File resourceDir;\n+\n+    private static Stream<Arguments> getTestParameters() {\n+        return Stream.of(\n+                \/\/ jasm\n+                Arguments.of(\"ClassFile00.jasm\",\n+                        List.of(\"\\\"ACC_VALUE, ACC_PUBLIC\\\": If the ACC_INTERFACE flag is not set a value class must have at least one of its ACC_FINAL, ACC_IDENTITY, or ACC_ABSTRACT flags set\",\n+                                \"Class file version 69:0 does not conform to the new kind of objects; expected version\")),\n+                Arguments.of(\"ClassFile01.jasm\",\n+                        List.of(\"Class file version 69:0 does not conform to the new kind of objects; expected version\")),\n+                Arguments.of(\"ClassFile02.jasm\",\n+                        List.of(\"Class file version not specified in file or by -cv parameter. Defaulting to version \\\"%s\\\"\".\n+                                formatted(CFVersion.ValueObjectsVersion().asString()))),\n+                Arguments.of(\"ClassFile03.jasm\",\n+                        List.of(\n+                                \"\\\"ACC_VALUE, ACC_PUBLIC\\\": If the ACC_INTERFACE flag is not set a value class must have at least one of its ACC_FINAL, ACC_IDENTITY, or ACC_ABSTRACT flags set\",\n+                                \"Class file version not specified in file or by -cv parameter. Defaulting to version \\\"%s\\\"\".\n+                                        formatted(CFVersion.ValueObjectsVersion().asString()))),\n+                Arguments.of(\"ClassFile04.jasm\",\n+                        List.of(\"Ambiguous use of similar modifiers\")),\n+                Arguments.of(\"ClassFile05.jasm\",\n+                        List.of(\"Ambiguous use of similar modifiers\")),\n+                Arguments.of(\"ClassFile06.jasm\",\n+                        List.of(\n+                                \"\\\"ACC_PUBLIC, ACC_IDENTITY, ACC_INTERFACE, ACC_ENUM\\\": If the ACC_INTERFACE flag is set, the ACC_ABSTRACT flag must also be set\",\n+                                \"\\\"ACC_PUBLIC, ACC_IDENTITY, ACC_INTERFACE, ACC_ENUM\\\": If the ACC_INTERFACE flag is set, the ACC_FINAL, ACC_IDENTITY, ACC_ENUM, and ACC_MODULE flags must not be set\",\n+                                \"\\\"ACC_PRIVATE, ACC_STRICT\\\": Interface field must be ACC_PUBLIC, ACC_STATIC, and ACC_FINAL only and may have ACC_STRICT_INIT or ACC_SYNTHETIC flag set\",\n+                                \"<init> method cannot be an interface method\"\n+                        )),\n+                Arguments.of(\"ClassFile07.jasm\",\n+                        List.of(\n+                                \"\\\"ACC_PUBLIC, ACC_ANNOTATION\\\": If the ACC_INTERFACE flag is not set ACC_ANNOTATION, and ACC_MODULE flags must not be set.\"\n+                        )),\n+                Arguments.of(\"ClassFile08.jasm\",\n+                        List.of(\n+                                \"\\\"ACC_INTERFACE, ACC_ENUM\\\": If the ACC_INTERFACE flag is set, the ACC_ABSTRACT flag must also be set\",\n+                                \"\\\"ACC_INTERFACE, ACC_ENUM\\\": If the ACC_INTERFACE flag is set, the ACC_FINAL, ACC_SUPER, ACC_ENUM, and ACC_MODULE flags must not be set.\"\n+                        )),\n+                Arguments.of(\"ClassFile09.jasm\",\n+                        List.of(\n+                                \"\\\"ACC_VALUE\\\": If the ACC_INTERFACE flag is not set a value class must have at least one of its ACC_FINAL, ACC_IDENTITY, or ACC_ABSTRACT flags set\",\n+                                \"\\\"ACC_PUBLIC\\\": Each field of a value class must have at least one of its ACC_STATIC or ACC_STRICT_INIT flags set\"\n+                        )),\n+                Arguments.of(\"ClassFile10.jasm\",\n+                        List.of(\n+                                \"\\\"ACC_FINAL, ACC_ABSTRACT\\\": Class cannot be both abstract and final\"\n+                        )),\n+                Arguments.of(\"ClassFile11.jasm\",\n+                        List.of()),\n+                Arguments.of(\"ClassFile12.jasm\",\n+                        List.of()),\n+                Arguments.of(\"ClassFile13.jasm\",\n+                        List.of()),\n+                Arguments.of(\"ClassFile14.jasm\",\n+                        List.of(\"Warning: Invalid modifier(s) for a field 0x0800\")),\n+                Arguments.of(\"ClassFile15.jasm\",\n+                        List.of()),\n+                Arguments.of(\"ClassField00.jasm\",\n+                        List.of(\n+                                \"\\\"ACC_PUBLIC, ACC_PROTECTED, ACC_STATIC\\\": Interface field must be ACC_PUBLIC, ACC_STATIC, and ACC_FINAL only and may have ACC_STRICT_INIT or ACC_SYNTHETIC flag set\",\n+                                \"\\\"ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_TRANSIENT\\\": Interface field must be ACC_PUBLIC, ACC_STATIC, and ACC_FINAL only and may have ACC_STRICT_INIT or ACC_SYNTHETIC flag set\"\n+                        )),\n+                Arguments.of(\"ClassField01.jasm\",\n+                        List.of(\n+                                \"\\\"ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_VOLATILE\\\": Each field of a class must not have both its ACC_FINAL and ACC_VOLATILE flags set\")),\n+                Arguments.of(\"ClassField02.jasm\",\n+                        List.of(\n+                                \"\\\"ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC, ACC_ENUM\\\": Interface field must be ACC_PUBLIC, ACC_STATIC, and ACC_FINAL only and may have ACC_STRICT_INIT or ACC_SYNTHETIC flag set\",\n+                                \"\\\"ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_TRANSIENT\\\": Interface field must be ACC_PUBLIC, ACC_STATIC, and ACC_FINAL only and may have ACC_STRICT_INIT or ACC_SYNTHETIC flag set\",\n+                                \"\\\"ACC_STATIC, ACC_FINAL, ACC_STRICT\\\": Interface field must be ACC_PUBLIC, ACC_STATIC, and ACC_FINAL only and may have ACC_STRICT_INIT or ACC_SYNTHETIC flag set\")),\n+                Arguments.of(\"ClassField03.jasm\",\n+                        List.of()),\n+                Arguments.of(\"ClassField04.jasm\",\n+                        List.of(\"\\\"ACC_PUBLIC, ACC_FINAL\\\": Each field of a value class must have at least one of its ACC_STATIC or ACC_STRICT_INIT flags set\",\n+                                \"\\\"\\\": Each field of a value class must have at least one of its ACC_STATIC or ACC_STRICT_INIT flags set\"))\n+        );\n+    }\n+\n+    @BeforeAll\n+    public void init() throws IOException {\n+        resourceDir = new File(this.getClass().getResource(\"ClassFile00.jasm\").getFile()).getParentFile();\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"getTestParameters\")\n+    public void methodSignatureTest(String resourceName, List<String> jasmSubStrings) {\n+        \/\/ jasm to class on the disk\n+        LogAndBinResults res = jasm.compile(List.of(resourceDir + File.separator + resourceName));\n+        String log = res.log.toString();\n+        for (String jasmSubString : jasmSubStrings) {\n+            Assertions.assertTrue(log.contains(jasmSubString));\n+        }\n+        \/\/ exact number of warnings\n+        Assertions.assertEquals(jasmSubStrings.size(), funcSubStrCount.apply(log, \"Warning:\"));\n+        \/\/ jasm file was created\n+        Assertions.assertEquals(0, res.result);\n+    }\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/structure\/ClassFile\/ClassFileTests.java","additions":145,"deletions":0,"binary":false,"changes":145,"status":"added"},{"patch":"@@ -27,1 +27,1 @@\n-import org.openjdk.asmtools.ext.CaptureSystemOutput;\n+import org.openjdk.asmtools.lib.ext.CaptureSystemOutput;\n@@ -33,2 +33,2 @@\n-import static org.openjdk.asmtools.ext.CaptureSystemOutput.Kind.ERROR;\n-import static org.openjdk.asmtools.ext.CaptureSystemOutput.Kind.OUTPUT;\n+import static org.openjdk.asmtools.lib.ext.CaptureSystemOutput.Kind.ERROR;\n+import static org.openjdk.asmtools.lib.ext.CaptureSystemOutput.Kind.OUTPUT;\n@@ -77,2 +77,1 @@\n-                containsString(\"Warning: expected attribute length \\\"2,147,483,647\\\" do not match real\" +\n-                        \" length \\\"6\\\"; expected length written\"));\n+                containsString(\"Warning: Expected attribute length \\\"2,147,483,647\\\" does not match the actual length \\\"6\\\"; expected length written\"));\n@@ -80,8 +79,2 @@\n-                containsString(\"Warning: expected attribute length \\\"2\\\" do not match real length \\\"6\\\";\" +\n-                        \" expected length written\"));\n-        errorCapture.expect(\n-                containsString(\"java.lang.ClassFormatError: Extra bytes at the end of class file\" +\n-                        \" org\/openjdk\/asmtools\/transform\/case7902820\/data\/SourceDebugExtensionNegative01\"));\n-        errorCapture.expect(\n-                containsString(\"java.lang.ClassFormatError: Extra bytes at the end of class file\" +\n-                        \" org\/openjdk\/asmtools\/transform\/case7902820\/data\/SourceDebugExtensionNegative02\"));\n+                containsString(\"Warning: Expected attribute length \\\"2\\\" does not match the actual length \\\"6\\\"; expected length written\"));\n+        errorCapture.expect(containsString(\"1 warning(s)\"));\n","filename":"test\/java\/org\/openjdk\/asmtools\/transform\/case7902820Tests.java","additions":6,"deletions":13,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n-import org.openjdk.asmtools.lib.LogAndReturn;\n-import org.openjdk.asmtools.lib.action.EAsmTools;\n+import org.openjdk.asmtools.lib.action.EAsmTool;\n+import org.openjdk.asmtools.lib.log.LogAndReturn;\n@@ -37,1 +37,2 @@\n-import static org.junit.jupiter.api.Assertions.*;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -39,1 +40,1 @@\n-import static org.openjdk.asmtools.common.FileUtils.getResourceFilePath;\n+import static org.openjdk.asmtools.lib.utility.FileUtils.getResourceFilePath;\n@@ -63,1 +64,1 @@\n-        EAsmTools.Tool tool;\n+        EAsmTool tool;\n@@ -66,1 +67,1 @@\n-            tool = EAsmTools.getTool(fileName);\n+            tool = EAsmTool.getToolBy(fileName);\n@@ -79,1 +80,1 @@\n-            return fileName+\".bin\";\n+            return fileName.concat(\".bin\");\n","filename":"test\/java\/org\/openjdk\/asmtools\/transform\/case7903259Tests.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import org.hamcrest.Matchers;\n@@ -27,1 +28,1 @@\n-import org.openjdk.asmtools.ext.CaptureSystemOutput;\n+import org.openjdk.asmtools.lib.ext.CaptureSystemOutput;\n@@ -31,1 +32,1 @@\n-import static org.hamcrest.Matchers.matchesPattern;\n+import static org.hamcrest.Matchers.*;\n@@ -33,2 +34,2 @@\n-import static org.openjdk.asmtools.ext.CaptureSystemOutput.Kind.ERROR;\n-import static org.openjdk.asmtools.ext.CaptureSystemOutput.Kind.OUTPUT;\n+import static org.openjdk.asmtools.lib.ext.CaptureSystemOutput.Kind.ERROR;\n+import static org.openjdk.asmtools.lib.ext.CaptureSystemOutput.Kind.OUTPUT;\n@@ -57,1 +58,6 @@\n-        outputCapture.expect(matchesPattern(\"(?s).*test 4.*A.*\"));\n+        outputCapture.useStringTransformer(s -> s.replaceAll(\"[ \\t\\n]*\", \"\")).\n+                expect(Matchers.allOf(\n+                        containsString(\"test4\"),\n+                        matchesPattern(\".*A.BC.D.E..FGH.*\"),\n+                        matchesPattern(\".*test4.*test4.*\")\n+                ));\n@@ -73,1 +79,6 @@\n-        outputCapture.expect(matchesPattern(\"(?s).*test 4.*A.*\"));\n+        outputCapture.useStringTransformer(s -> s.replaceAll(\"[ \\t\\n]*\", \"\")).\n+                expect(Matchers.allOf(\n+                        containsString(\"test4\"),\n+                        matchesPattern(\".*A.BC.D.E..FGH.*\"),\n+                        matchesPattern(\".*test4.*test4.*\")\n+                        ));\n","filename":"test\/java\/org\/openjdk\/asmtools\/transform\/case7903454Tests.java","additions":17,"deletions":6,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import org.openjdk.asmtools.ext.CaptureSystemOutput;\n+import org.openjdk.asmtools.lib.ext.CaptureSystemOutput;\n@@ -37,3 +37,3 @@\n-import static org.openjdk.asmtools.lib.action.EAsmTools.JDEC;\n-import static org.openjdk.asmtools.lib.action.EAsmTools.JDIS;\n-import static org.openjdk.asmtools.ext.CaptureSystemOutput.Kind.*;\n+import static org.openjdk.asmtools.lib.action.EAsmTool.JDEC;\n+import static org.openjdk.asmtools.lib.action.EAsmTool.JDIS;\n+import static org.openjdk.asmtools.lib.ext.CaptureSystemOutput.Kind.*;\n@@ -62,1 +62,1 @@\n-                clearOptions().setDeleteInterimFile(false).setDEBUG(false);\n+                clearOptions().setDeleteInterimFile(false);\n@@ -100,0 +100,8 @@\n+    @Test\n+    @CaptureSystemOutput(value = BOTH, mute = true)\n+    void systemOutputCheck_CLASS_TO_JCOD_TO_CLASS_LOAD_DETAILED_TABLE(CaptureSystemOutput.OutputCapture outputCapture) {\n+        transformLoader.setTransformRule(CLASS_TO_JCOD_TO_CLASS_LOAD).setToolsOptions(JDEC, \"-g\", \"-table\");\n+        commonTestCase(outputCapture, transformLoader);\n+    }\n+\n+\n","filename":"test\/java\/org\/openjdk\/asmtools\/transform\/case8302260Tests.java","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -0,0 +1,1 @@\n+some random text\n\\ No newline at end of file\n","filename":"test\/resources\/jcod-files\/abc.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"added"},{"patch":"@@ -0,0 +1,69 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcod001\/atrcod00101m1\/atrcod00101m1n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Class #12;                             \/\/ #1\n+    Class #6;                              \/\/ #2\n+    Method #1 #4;                          \/\/ #3\n+    NameAndType #14 #15;                   \/\/ #4\n+    Utf8 \"ConstantValue\";                  \/\/ #5\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcod001\/atrcod00101m1\/atrcod00101m1n\";  \/\/ #6\n+    Utf8 \"Exceptions\";                     \/\/ #7\n+    Utf8 \"LineNumberTable\";                \/\/ #8\n+    Utf8 \"SourceFile\";                     \/\/ #9\n+    Utf8 \"LocalVariables\";                 \/\/ #10\n+    Utf8 \"Code\";                           \/\/ #11\n+    Utf8 \"java\/lang\/Object\";               \/\/ #12\n+    Utf8 \"attr003.jcod\";                   \/\/ #13\n+    Utf8 \"<init>\";                         \/\/ #14\n+    Utf8 \"()V\";                            \/\/ #15\n+  }\n+\n+  0x0001;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #1;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #14;                                 \/\/ name_index\n+      #15;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#11) {                        \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x03 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+        ;\n+        Attr(#11) {                        \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x03 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcod00101m1n.jcod","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -0,0 +1,57 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcod001\/atrcod00101m1\/atrcod00101m1p {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [16] {                                   \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Class #12;                             \/\/ #1     at 0x0A\n+    Class #6;                              \/\/ #2     at 0x0D\n+    Method #1 #4;                          \/\/ #3     at 0x10\n+    NameAndType #14 #15;                   \/\/ #4     at 0x15\n+    Utf8 \"ConstantValue\";                  \/\/ #5     at 0x1A\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcod001\/atrcod00101m1\/atrcod00101m1p\";  \/\/ #6     at 0x2A\n+    Utf8 \"Exceptions\";                     \/\/ #7     at 0x76\n+    Utf8 \"LineNumberTable\";                \/\/ #8     at 0x83\n+    Utf8 \"SourceFile\";                     \/\/ #9     at 0x95\n+    Utf8 \"LocalVariables\";                 \/\/ #10     at 0xA2\n+    Utf8 \"Code\";                           \/\/ #11     at 0xB3\n+    Utf8 \"java\/lang\/Object\";               \/\/ #12     at 0xBA\n+    Utf8 \"attr003.jcod\";                   \/\/ #13     at 0xCD\n+    Utf8 \"<init>\";                         \/\/ #14     at 0xDC\n+    Utf8 \"()V\";                            \/\/ #15     at 0xE5\n+  }                                        \/\/ end of Constant Pool\n+\n+  0x0001;                                  \/\/ access [ ACC_PUBLIC  ]\n+  #2;                                      \/\/ this_cpx\n+  #1;                                      \/\/ super_cpx\n+\n+  [0] {                                    \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [0] {                                    \/\/ Fields\n+  }                                        \/\/ end of Fields\n+\n+  [1] {                                    \/\/ Methods\n+    {                                      \/\/ method at 0xF7\n+      0x0001;                              \/\/ access\n+      #14;                                 \/\/ name_index       : <init>\n+      #15;                                 \/\/ descriptor_index : ()V\n+      [1] {                                \/\/ Attributes\n+        Attr(#11, 17) {                    \/\/ Code at 0xFF\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[5]{\n+            0x2A 0xB7 0x00 0x03 0xB1;\n+          }\n+          [0] {                            \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [0] {                            \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [0] {                                    \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}                                          \/\/ end of class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcod001\/atrcod00101m1\/atrcod00101m1p\n","filename":"test\/resources\/jcod-files\/atrcod00101m1p.jcod","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -0,0 +1,287 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl001\/atrcvl00101m1\/atrcvl00101m1 {\n+  0xCAFEBABE;\n+  0;                                       \/\/ minor version\n+  67;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Method #2 #3;                          \/\/ #1\n+    Class #4;                              \/\/ #2\n+    NameAndType #5 #6;                     \/\/ #3\n+    Utf8 \"java\/lang\/Object\";               \/\/ #4\n+    Utf8 \"<init>\";                         \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    String #8;                             \/\/ #7\n+    Utf8 \"atrcvl00101m10p\";                \/\/ #8\n+    Method #10 #11;                        \/\/ #9\n+    Class #12;                             \/\/ #10\n+    NameAndType #13 #14;                   \/\/ #11\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl001\/atrcvl00101m1\/atrcvl00101m1\";  \/\/ #12\n+    Utf8 \"instantiatePositive\";            \/\/ #13\n+    Utf8 \"(Ljava\/lang\/String;[Ljava\/lang\/String;Ljava\/io\/PrintStream;)I\";  \/\/ #14\n+    InvokeDynamic 0s #16;                  \/\/ #15\n+    NameAndType #17 #18;                   \/\/ #16\n+    Utf8 \"makeConcatWithConstants\";        \/\/ #17\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/String;\";  \/\/ #18\n+    Method #20 #21;                        \/\/ #19\n+    Class #22;                             \/\/ #20\n+    NameAndType #23 #24;                   \/\/ #21\n+    Utf8 \"java\/lang\/Class\";                \/\/ #22\n+    Utf8 \"forName\";                        \/\/ #23\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/Class;\";  \/\/ #24\n+    Class #26;                             \/\/ #25\n+    Utf8 \"java\/lang\/ThreadDeath\";          \/\/ #26\n+    Class #28;                             \/\/ #27\n+    Utf8 \"java\/lang\/Throwable\";            \/\/ #28\n+    Method #30 #31;                        \/\/ #29\n+    Class #32;                             \/\/ #30\n+    NameAndType #33 #34;                   \/\/ #31\n+    Utf8 \"java\/lang\/String\";               \/\/ #32\n+    Utf8 \"valueOf\";                        \/\/ #33\n+    Utf8 \"(Ljava\/lang\/Object;)Ljava\/lang\/String;\";  \/\/ #34\n+    InvokeDynamic 1s #16;                  \/\/ #35\n+    Method #37 #38;                        \/\/ #36\n+    Class #39;                             \/\/ #37\n+    NameAndType #40 #41;                   \/\/ #38\n+    Utf8 \"java\/io\/PrintStream\";            \/\/ #39\n+    Utf8 \"println\";                        \/\/ #40\n+    Utf8 \"(Ljava\/lang\/String;)V\";          \/\/ #41\n+    Method #20 #43;                        \/\/ #42\n+    NameAndType #44 #45;                   \/\/ #43\n+    Utf8 \"newInstance\";                    \/\/ #44\n+    Utf8 \"()Ljava\/lang\/Object;\";           \/\/ #45\n+    InvokeDynamic 2s #16;                  \/\/ #46\n+    Field #48 #49;                         \/\/ #47\n+    Class #50;                             \/\/ #48\n+    NameAndType #51 #52;                   \/\/ #49\n+    Utf8 \"java\/lang\/System\";               \/\/ #50\n+    Utf8 \"out\";                            \/\/ #51\n+    Utf8 \"Ljava\/io\/PrintStream;\";          \/\/ #52\n+    Method #10 #54;                        \/\/ #53\n+    NameAndType #55 #56;                   \/\/ #54\n+    Utf8 \"run\";                            \/\/ #55\n+    Utf8 \"([Ljava\/lang\/String;Ljava\/io\/PrintStream;)I\";  \/\/ #56\n+    Method #48 #58;                        \/\/ #57\n+    NameAndType #59 #60;                   \/\/ #58\n+    Utf8 \"exit\";                           \/\/ #59\n+    Utf8 \"(I)V\";                           \/\/ #60\n+    Utf8 \"Code\";                           \/\/ #61\n+    Utf8 \"LineNumberTable\";                \/\/ #62\n+    Utf8 \"StackMapTable\";                  \/\/ #63\n+    Class #65;                             \/\/ #64\n+    Utf8 \"[Ljava\/lang\/String;\";            \/\/ #65\n+    Utf8 \"main\";                           \/\/ #66\n+    Utf8 \"([Ljava\/lang\/String;)V\";         \/\/ #67\n+    Utf8 \"SourceFile\";                     \/\/ #68\n+    Utf8 \"atrcvl00101m1.java\";             \/\/ #69\n+    Utf8 \"BootstrapMethods\";               \/\/ #70\n+    String #72;                            \/\/ #71\n+    Utf8 \"javasoft.sqe.tests.vm.classfmt.atr.atrcvl001.atrcvl00101m1.\\u0001\";  \/\/ #72\n+    String #74;                            \/\/ #73\n+    Utf8 \"Failed with loading exception: \\u0001\";  \/\/ #74\n+    String #76;                            \/\/ #75\n+    Utf8 \"Failed with runtime exception: \\u0001\";  \/\/ #76\n+    MethodHandle 6b #78;                   \/\/ #77\n+    Method #79 #80;                        \/\/ #78\n+    Class #81;                             \/\/ #79\n+    NameAndType #17 #82;                   \/\/ #80\n+    Utf8 \"java\/lang\/invoke\/StringConcatFactory\";  \/\/ #81\n+    Utf8 \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";  \/\/ #82\n+    Utf8 \"InnerClasses\";                   \/\/ #83\n+    Class #85;                             \/\/ #84\n+    Utf8 \"java\/lang\/invoke\/MethodHandles$Lookup\";  \/\/ #85\n+    Class #87;                             \/\/ #86\n+    Utf8 \"java\/lang\/invoke\/MethodHandles\";  \/\/ #87\n+    Utf8 \"Lookup\";                         \/\/ #88\n+  }\n+\n+  0x0021;                                  \/\/ access\n+  #10;                                     \/\/ this_cpx\n+  #2;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #5;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#61) {                        \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x01 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#62) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   12;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #55;                                 \/\/ name_index\n+      #56;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#61) {                        \/\/ Code\n+          3;                               \/\/ max_stack\n+          2;                               \/\/ max_locals\n+          Bytes[]{\n+            0x12 0x07 0x2A 0x2B 0xB8 0x00 0x09 0x99 0x00 0x05 0x05 0xAC;\n+            0x03 0xAC;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#62) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   16;\n+                  10   17;\n+                  12   19;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+            ;\n+            Attr(#63) {                    \/\/ StackMapTable\n+              [] {                         \/\/ \n+                12b;                       \/\/ same_frame\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #13;                                 \/\/ name_index\n+      #14;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#61) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          5;                               \/\/ max_locals\n+          Bytes[]{\n+            0x01 0x4E 0x2A 0xBA 0x00 0x0F 0x00 0x00 0xB8 0x00 0x13 0x4E;\n+            0xA7 0x00 0x1A 0x3A 0x04 0x19 0x04 0xBF 0x3A 0x04 0x2C 0x19;\n+            0x04 0xB8 0x00 0x1D 0xBA 0x00 0x23 0x00 0x00 0xB6 0x00 0x24;\n+            0x05 0xAC 0x2D 0xB6 0x00 0x2A 0x3A 0x04 0xA7 0x00 0x1A 0x3A;\n+            0x04 0x19 0x04 0xBF 0x3A 0x04 0x2C 0x19 0x04 0xB8 0x00 0x1D;\n+            0xBA 0x00 0x2E 0x00 0x00 0xB6 0x00 0x24 0x05 0xAC 0x03 0xAC;\n+          }\n+          [] {                             \/\/ Traps\n+               2   12   15  25;\n+               2   12   20  27;\n+              38   44   47  25;\n+              38   44   52  27;\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#62) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   24;\n+                   2   26;\n+                  12   32;\n+                  15   27;\n+                  17   28;\n+                  20   29;\n+                  22   30;\n+                  36   31;\n+                  38   35;\n+                  44   41;\n+                  47   36;\n+                  49   37;\n+                  52   38;\n+                  54   39;\n+                  68   40;\n+                  70   43;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+            ;\n+            Attr(#63) {                    \/\/ StackMapTable\n+              [] {                         \/\/ \n+                255b, 15, []{O,#30; O,#64; O,#37; O,#20}, []{O,#25};  \/\/ full_frame\n+                68b, []z{O,#27};           \/\/ same_locals_1_stack_item_frame\n+                17b;                       \/\/ same_frame\n+                72b, []z{O,#25};           \/\/ same_locals_1_stack_item_frame\n+                68b, []z{O,#27};           \/\/ same_locals_1_stack_item_frame\n+                17b;                       \/\/ same_frame\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #66;                                 \/\/ name_index\n+      #67;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#61) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB2 0x00 0x2F 0xB8 0x00 0x35 0x10 0x5F 0x60 0xB8 0x00;\n+            0x39 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#62) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   47;\n+                  13   48;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#68) {                            \/\/ SourceFile\n+      #69;\n+    }                                      \/\/ end of SourceFile\n+    ;\n+    Attr(#70) {                            \/\/ BootstrapMethods\n+      [] {                                 \/\/ bootstrap_methods\n+        {                                  \/\/ bootstrap_method\n+          #77;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #71;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #77;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #73;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #77;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #75;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+      }\n+    }                                      \/\/ end of BootstrapMethods\n+    ;\n+    Attr(#83) {                            \/\/ InnerClasses\n+      [] {                                 \/\/ classes\n+          #84   #86   #88  25;\n+      }\n+    }                                      \/\/ end of InnerClasses\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00101m1.jcod","additions":287,"deletions":0,"binary":false,"changes":287,"status":"added"},{"patch":"@@ -0,0 +1,83 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl001\/atrcvl00101m1\/atrcvl00101m10p {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Method #2 #8;                          \/\/ #1\n+    Class #15;                             \/\/ #2\n+    Field #21 #10;                         \/\/ #3\n+    Method #17 #8;                         \/\/ #4\n+    Utf8 \"atrcvl00101m10p.jasm\";           \/\/ #5\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl001\/atrcvl00101m1\/atrcvl00101m10p\";  \/\/ #6\n+    Utf8 \"SourceFile\";                     \/\/ #7\n+    NameAndType #9 #11;                    \/\/ #8\n+    Utf8 \"<init>\";                         \/\/ #9\n+    NameAndType #20 #13;                   \/\/ #10\n+    Utf8 \"()V\";                            \/\/ #11\n+    Utf8 \"ConstantValue\";                  \/\/ #12\n+    Utf8 \"I\";                              \/\/ #13\n+    Utf8 \"java\/lang\/Object\";               \/\/ #14\n+    Utf8 \"java\/lang\/Exception\";            \/\/ #15\n+    Utf8 \"Code\";                           \/\/ #16\n+    Class #14;                             \/\/ #17\n+    Integer 0x00030D40;                    \/\/ #18\n+    Utf8 \"Exceptions\";                     \/\/ #19\n+    Utf8 \"ifi\";                            \/\/ #20\n+    Class #6;                              \/\/ #21\n+  }\n+\n+  0x0001;                                  \/\/ access\n+  #21;                                     \/\/ this_cpx\n+  #17;                                     \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0010;                              \/\/ access\n+      #20;                                 \/\/ name_index\n+      #13;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#12) {                        \/\/ ConstantValue\n+          #18;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #9;                                  \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#19) {                        \/\/ Exceptions\n+          [] {                             \/\/ Exceptions\n+            #2;\n+          }\n+        }                                  \/\/ end of Exceptions\n+        ;\n+        Attr(#16) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0x2A 0xB4 0x00 0x03 0x99 0x00 0x0B 0xBB;\n+            0x00 0x02 0x59 0xB7 0x00 0x01 0xBF 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#7) {                             \/\/ SourceFile\n+      #5;\n+    }                                      \/\/ end of SourceFile\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00101m10p.jcod","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"},{"patch":"@@ -0,0 +1,287 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl001\/atrcvl00101m1t\/atrcvl00101m1t {\n+  0xCAFEBABE;\n+  0;                                       \/\/ minor version\n+  67;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Method #2 #3;                          \/\/ #1\n+    Class #4;                              \/\/ #2\n+    NameAndType #5 #6;                     \/\/ #3\n+    Utf8 \"java\/lang\/Object\";               \/\/ #4\n+    Utf8 \"<init>\";                         \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    String #8;                             \/\/ #7\n+    Utf8 \"atrcvl00101m1t0p\";               \/\/ #8\n+    Method #10 #11;                        \/\/ #9\n+    Class #12;                             \/\/ #10\n+    NameAndType #13 #14;                   \/\/ #11\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl001\/atrcvl00101m1t\/atrcvl00101m1t\";  \/\/ #12\n+    Utf8 \"instantiatePositive\";            \/\/ #13\n+    Utf8 \"(Ljava\/lang\/String;[Ljava\/lang\/String;Ljava\/io\/PrintStream;)I\";  \/\/ #14\n+    InvokeDynamic 0s #16;                  \/\/ #15\n+    NameAndType #17 #18;                   \/\/ #16\n+    Utf8 \"makeConcatWithConstants\";        \/\/ #17\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/String;\";  \/\/ #18\n+    Method #20 #21;                        \/\/ #19\n+    Class #22;                             \/\/ #20\n+    NameAndType #23 #24;                   \/\/ #21\n+    Utf8 \"java\/lang\/Class\";                \/\/ #22\n+    Utf8 \"forName\";                        \/\/ #23\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/Class;\";  \/\/ #24\n+    Class #26;                             \/\/ #25\n+    Utf8 \"java\/lang\/ThreadDeath\";          \/\/ #26\n+    Class #28;                             \/\/ #27\n+    Utf8 \"java\/lang\/Throwable\";            \/\/ #28\n+    Method #30 #31;                        \/\/ #29\n+    Class #32;                             \/\/ #30\n+    NameAndType #33 #34;                   \/\/ #31\n+    Utf8 \"java\/lang\/String\";               \/\/ #32\n+    Utf8 \"valueOf\";                        \/\/ #33\n+    Utf8 \"(Ljava\/lang\/Object;)Ljava\/lang\/String;\";  \/\/ #34\n+    InvokeDynamic 1s #16;                  \/\/ #35\n+    Method #37 #38;                        \/\/ #36\n+    Class #39;                             \/\/ #37\n+    NameAndType #40 #41;                   \/\/ #38\n+    Utf8 \"java\/io\/PrintStream\";            \/\/ #39\n+    Utf8 \"println\";                        \/\/ #40\n+    Utf8 \"(Ljava\/lang\/String;)V\";          \/\/ #41\n+    Method #20 #43;                        \/\/ #42\n+    NameAndType #44 #45;                   \/\/ #43\n+    Utf8 \"newInstance\";                    \/\/ #44\n+    Utf8 \"()Ljava\/lang\/Object;\";           \/\/ #45\n+    InvokeDynamic 2s #16;                  \/\/ #46\n+    Field #48 #49;                         \/\/ #47\n+    Class #50;                             \/\/ #48\n+    NameAndType #51 #52;                   \/\/ #49\n+    Utf8 \"java\/lang\/System\";               \/\/ #50\n+    Utf8 \"out\";                            \/\/ #51\n+    Utf8 \"Ljava\/io\/PrintStream;\";          \/\/ #52\n+    Method #10 #54;                        \/\/ #53\n+    NameAndType #55 #56;                   \/\/ #54\n+    Utf8 \"run\";                            \/\/ #55\n+    Utf8 \"([Ljava\/lang\/String;Ljava\/io\/PrintStream;)I\";  \/\/ #56\n+    Method #48 #58;                        \/\/ #57\n+    NameAndType #59 #60;                   \/\/ #58\n+    Utf8 \"exit\";                           \/\/ #59\n+    Utf8 \"(I)V\";                           \/\/ #60\n+    Utf8 \"Code\";                           \/\/ #61\n+    Utf8 \"LineNumberTable\";                \/\/ #62\n+    Utf8 \"StackMapTable\";                  \/\/ #63\n+    Class #65;                             \/\/ #64\n+    Utf8 \"[Ljava\/lang\/String;\";            \/\/ #65\n+    Utf8 \"main\";                           \/\/ #66\n+    Utf8 \"([Ljava\/lang\/String;)V\";         \/\/ #67\n+    Utf8 \"SourceFile\";                     \/\/ #68\n+    Utf8 \"atrcvl00101m1t.java\";            \/\/ #69\n+    Utf8 \"BootstrapMethods\";               \/\/ #70\n+    String #72;                            \/\/ #71\n+    Utf8 \"javasoft.sqe.tests.vm.classfmt.atr.atrcvl001.atrcvl00101m1t.\\u0001\";  \/\/ #72\n+    String #74;                            \/\/ #73\n+    Utf8 \"Failed with loading exception: \\u0001\";  \/\/ #74\n+    String #76;                            \/\/ #75\n+    Utf8 \"Failed with runtime exception: \\u0001\";  \/\/ #76\n+    MethodHandle 6b #78;                   \/\/ #77\n+    Method #79 #80;                        \/\/ #78\n+    Class #81;                             \/\/ #79\n+    NameAndType #17 #82;                   \/\/ #80\n+    Utf8 \"java\/lang\/invoke\/StringConcatFactory\";  \/\/ #81\n+    Utf8 \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";  \/\/ #82\n+    Utf8 \"InnerClasses\";                   \/\/ #83\n+    Class #85;                             \/\/ #84\n+    Utf8 \"java\/lang\/invoke\/MethodHandles$Lookup\";  \/\/ #85\n+    Class #87;                             \/\/ #86\n+    Utf8 \"java\/lang\/invoke\/MethodHandles\";  \/\/ #87\n+    Utf8 \"Lookup\";                         \/\/ #88\n+  }\n+\n+  0x0021;                                  \/\/ access\n+  #10;                                     \/\/ this_cpx\n+  #2;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #5;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#61) {                        \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x01 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#62) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   12;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #55;                                 \/\/ name_index\n+      #56;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#61) {                        \/\/ Code\n+          3;                               \/\/ max_stack\n+          2;                               \/\/ max_locals\n+          Bytes[]{\n+            0x12 0x07 0x2A 0x2B 0xB8 0x00 0x09 0x99 0x00 0x05 0x05 0xAC;\n+            0x03 0xAC;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#62) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   16;\n+                  10   17;\n+                  12   19;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+            ;\n+            Attr(#63) {                    \/\/ StackMapTable\n+              [] {                         \/\/ \n+                12b;                       \/\/ same_frame\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #13;                                 \/\/ name_index\n+      #14;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#61) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          5;                               \/\/ max_locals\n+          Bytes[]{\n+            0x01 0x4E 0x2A 0xBA 0x00 0x0F 0x00 0x00 0xB8 0x00 0x13 0x4E;\n+            0xA7 0x00 0x1A 0x3A 0x04 0x19 0x04 0xBF 0x3A 0x04 0x2C 0x19;\n+            0x04 0xB8 0x00 0x1D 0xBA 0x00 0x23 0x00 0x00 0xB6 0x00 0x24;\n+            0x05 0xAC 0x2D 0xB6 0x00 0x2A 0x3A 0x04 0xA7 0x00 0x1A 0x3A;\n+            0x04 0x19 0x04 0xBF 0x3A 0x04 0x2C 0x19 0x04 0xB8 0x00 0x1D;\n+            0xBA 0x00 0x2E 0x00 0x00 0xB6 0x00 0x24 0x05 0xAC 0x03 0xAC;\n+          }\n+          [] {                             \/\/ Traps\n+               2   12   15  25;\n+               2   12   20  27;\n+              38   44   47  25;\n+              38   44   52  27;\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#62) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   24;\n+                   2   26;\n+                  12   32;\n+                  15   27;\n+                  17   28;\n+                  20   29;\n+                  22   30;\n+                  36   31;\n+                  38   35;\n+                  44   41;\n+                  47   36;\n+                  49   37;\n+                  52   38;\n+                  54   39;\n+                  68   40;\n+                  70   43;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+            ;\n+            Attr(#63) {                    \/\/ StackMapTable\n+              [] {                         \/\/ \n+                255b, 15, []{O,#30; O,#64; O,#37; O,#20}, []{O,#25};  \/\/ full_frame\n+                68b, []z{O,#27};           \/\/ same_locals_1_stack_item_frame\n+                17b;                       \/\/ same_frame\n+                72b, []z{O,#25};           \/\/ same_locals_1_stack_item_frame\n+                68b, []z{O,#27};           \/\/ same_locals_1_stack_item_frame\n+                17b;                       \/\/ same_frame\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #66;                                 \/\/ name_index\n+      #67;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#61) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB2 0x00 0x2F 0xB8 0x00 0x35 0x10 0x5F 0x60 0xB8 0x00;\n+            0x39 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#62) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   47;\n+                  13   48;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#68) {                            \/\/ SourceFile\n+      #69;\n+    }                                      \/\/ end of SourceFile\n+    ;\n+    Attr(#70) {                            \/\/ BootstrapMethods\n+      [] {                                 \/\/ bootstrap_methods\n+        {                                  \/\/ bootstrap_method\n+          #77;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #71;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #77;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #73;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #77;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #75;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+      }\n+    }                                      \/\/ end of BootstrapMethods\n+    ;\n+    Attr(#83) {                            \/\/ InnerClasses\n+      [] {                                 \/\/ classes\n+          #84   #86   #88  25;\n+      }\n+    }                                      \/\/ end of InnerClasses\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00101m1t.jcod","additions":287,"deletions":0,"binary":false,"changes":287,"status":"added"},{"patch":"@@ -0,0 +1,89 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl001\/atrcvl00101m1t\/atrcvl00101m1t0p {\n+  0xCAFEBABE;\n+  0;                                       \/\/ minor version\n+  50;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Field #6 #7;                           \/\/ #1\n+    Class #17;                             \/\/ #2\n+    Method #10 #8;                         \/\/ #3\n+    Method #2 #8;                          \/\/ #4\n+    Utf8 \"atrcvl00101m1t0p.jasm\";          \/\/ #5\n+    Class #22;                             \/\/ #6\n+    NameAndType #21 #14;                   \/\/ #7\n+    NameAndType #11 #12;                   \/\/ #8\n+    Integer 0x00030D40;                    \/\/ #9\n+    Class #16;                             \/\/ #10\n+    Utf8 \"<init>\";                         \/\/ #11\n+    Utf8 \"()V\";                            \/\/ #12\n+    Utf8 \"SourceFile\";                     \/\/ #13\n+    Utf8 \"I\";                              \/\/ #14\n+    Utf8 \"StackMapTable\";                  \/\/ #15\n+    Utf8 \"java\/lang\/Object\";               \/\/ #16\n+    Utf8 \"java\/lang\/Exception\";            \/\/ #17\n+    Utf8 \"Code\";                           \/\/ #18\n+    Utf8 \"ConstantValue\";                  \/\/ #19\n+    Utf8 \"Exceptions\";                     \/\/ #20\n+    Utf8 \"ifi\";                            \/\/ #21\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl001\/atrcvl00101m1t\/atrcvl00101m1t0p\";  \/\/ #22\n+  }\n+\n+  0x0001;                                  \/\/ access\n+  #6;                                      \/\/ this_cpx\n+  #10;                                     \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0010;                              \/\/ access\n+      #21;                                 \/\/ name_index\n+      #14;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#19) {                        \/\/ ConstantValue\n+          #9;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #11;                                 \/\/ name_index\n+      #12;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#20) {                        \/\/ Exceptions\n+          [] {                             \/\/ Exceptions\n+            #2;\n+          }\n+        }                                  \/\/ end of Exceptions\n+        ;\n+        Attr(#18) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x03 0x2A 0xB4 0x00 0x01 0x99 0x00 0x0B 0xBB;\n+            0x00 0x02 0x59 0xB7 0x00 0x04 0xBF 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#15) {                    \/\/ StackMapTable\n+              [] {                         \/\/ \n+                255b, 19, []{O,#6}, []{};  \/\/ full_frame\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#13) {                            \/\/ SourceFile\n+      #5;\n+    }                                      \/\/ end of SourceFile\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00101m1t0p.jcod","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"},{"patch":"@@ -0,0 +1,287 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl001\/atrcvl00102m1\/atrcvl00102m1 {\n+  0xCAFEBABE;\n+  0;                                       \/\/ minor version\n+  67;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Method #2 #3;                          \/\/ #1\n+    Class #4;                              \/\/ #2\n+    NameAndType #5 #6;                     \/\/ #3\n+    Utf8 \"java\/lang\/Object\";               \/\/ #4\n+    Utf8 \"<init>\";                         \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    String #8;                             \/\/ #7\n+    Utf8 \"atrcvl00102m10p\";                \/\/ #8\n+    Method #10 #11;                        \/\/ #9\n+    Class #12;                             \/\/ #10\n+    NameAndType #13 #14;                   \/\/ #11\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl001\/atrcvl00102m1\/atrcvl00102m1\";  \/\/ #12\n+    Utf8 \"instantiatePositive\";            \/\/ #13\n+    Utf8 \"(Ljava\/lang\/String;[Ljava\/lang\/String;Ljava\/io\/PrintStream;)I\";  \/\/ #14\n+    InvokeDynamic 0s #16;                  \/\/ #15\n+    NameAndType #17 #18;                   \/\/ #16\n+    Utf8 \"makeConcatWithConstants\";        \/\/ #17\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/String;\";  \/\/ #18\n+    Method #20 #21;                        \/\/ #19\n+    Class #22;                             \/\/ #20\n+    NameAndType #23 #24;                   \/\/ #21\n+    Utf8 \"java\/lang\/Class\";                \/\/ #22\n+    Utf8 \"forName\";                        \/\/ #23\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/Class;\";  \/\/ #24\n+    Class #26;                             \/\/ #25\n+    Utf8 \"java\/lang\/ThreadDeath\";          \/\/ #26\n+    Class #28;                             \/\/ #27\n+    Utf8 \"java\/lang\/Throwable\";            \/\/ #28\n+    Method #30 #31;                        \/\/ #29\n+    Class #32;                             \/\/ #30\n+    NameAndType #33 #34;                   \/\/ #31\n+    Utf8 \"java\/lang\/String\";               \/\/ #32\n+    Utf8 \"valueOf\";                        \/\/ #33\n+    Utf8 \"(Ljava\/lang\/Object;)Ljava\/lang\/String;\";  \/\/ #34\n+    InvokeDynamic 1s #16;                  \/\/ #35\n+    Method #37 #38;                        \/\/ #36\n+    Class #39;                             \/\/ #37\n+    NameAndType #40 #41;                   \/\/ #38\n+    Utf8 \"java\/io\/PrintStream\";            \/\/ #39\n+    Utf8 \"println\";                        \/\/ #40\n+    Utf8 \"(Ljava\/lang\/String;)V\";          \/\/ #41\n+    Method #20 #43;                        \/\/ #42\n+    NameAndType #44 #45;                   \/\/ #43\n+    Utf8 \"newInstance\";                    \/\/ #44\n+    Utf8 \"()Ljava\/lang\/Object;\";           \/\/ #45\n+    InvokeDynamic 2s #16;                  \/\/ #46\n+    Field #48 #49;                         \/\/ #47\n+    Class #50;                             \/\/ #48\n+    NameAndType #51 #52;                   \/\/ #49\n+    Utf8 \"java\/lang\/System\";               \/\/ #50\n+    Utf8 \"out\";                            \/\/ #51\n+    Utf8 \"Ljava\/io\/PrintStream;\";          \/\/ #52\n+    Method #10 #54;                        \/\/ #53\n+    NameAndType #55 #56;                   \/\/ #54\n+    Utf8 \"run\";                            \/\/ #55\n+    Utf8 \"([Ljava\/lang\/String;Ljava\/io\/PrintStream;)I\";  \/\/ #56\n+    Method #48 #58;                        \/\/ #57\n+    NameAndType #59 #60;                   \/\/ #58\n+    Utf8 \"exit\";                           \/\/ #59\n+    Utf8 \"(I)V\";                           \/\/ #60\n+    Utf8 \"Code\";                           \/\/ #61\n+    Utf8 \"LineNumberTable\";                \/\/ #62\n+    Utf8 \"StackMapTable\";                  \/\/ #63\n+    Class #65;                             \/\/ #64\n+    Utf8 \"[Ljava\/lang\/String;\";            \/\/ #65\n+    Utf8 \"main\";                           \/\/ #66\n+    Utf8 \"([Ljava\/lang\/String;)V\";         \/\/ #67\n+    Utf8 \"SourceFile\";                     \/\/ #68\n+    Utf8 \"atrcvl00102m1.java\";             \/\/ #69\n+    Utf8 \"BootstrapMethods\";               \/\/ #70\n+    String #72;                            \/\/ #71\n+    Utf8 \"javasoft.sqe.tests.vm.classfmt.atr.atrcvl001.atrcvl00102m1.\\u0001\";  \/\/ #72\n+    String #74;                            \/\/ #73\n+    Utf8 \"Failed with loading exception: \\u0001\";  \/\/ #74\n+    String #76;                            \/\/ #75\n+    Utf8 \"Failed with runtime exception: \\u0001\";  \/\/ #76\n+    MethodHandle 6b #78;                   \/\/ #77\n+    Method #79 #80;                        \/\/ #78\n+    Class #81;                             \/\/ #79\n+    NameAndType #17 #82;                   \/\/ #80\n+    Utf8 \"java\/lang\/invoke\/StringConcatFactory\";  \/\/ #81\n+    Utf8 \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";  \/\/ #82\n+    Utf8 \"InnerClasses\";                   \/\/ #83\n+    Class #85;                             \/\/ #84\n+    Utf8 \"java\/lang\/invoke\/MethodHandles$Lookup\";  \/\/ #85\n+    Class #87;                             \/\/ #86\n+    Utf8 \"java\/lang\/invoke\/MethodHandles\";  \/\/ #87\n+    Utf8 \"Lookup\";                         \/\/ #88\n+  }\n+\n+  0x0021;                                  \/\/ access\n+  #10;                                     \/\/ this_cpx\n+  #2;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #5;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#61) {                        \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x01 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#62) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   12;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #55;                                 \/\/ name_index\n+      #56;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#61) {                        \/\/ Code\n+          3;                               \/\/ max_stack\n+          2;                               \/\/ max_locals\n+          Bytes[]{\n+            0x12 0x07 0x2A 0x2B 0xB8 0x00 0x09 0x99 0x00 0x05 0x05 0xAC;\n+            0x03 0xAC;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#62) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   16;\n+                  10   17;\n+                  12   19;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+            ;\n+            Attr(#63) {                    \/\/ StackMapTable\n+              [] {                         \/\/ \n+                12b;                       \/\/ same_frame\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #13;                                 \/\/ name_index\n+      #14;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#61) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          5;                               \/\/ max_locals\n+          Bytes[]{\n+            0x01 0x4E 0x2A 0xBA 0x00 0x0F 0x00 0x00 0xB8 0x00 0x13 0x4E;\n+            0xA7 0x00 0x1A 0x3A 0x04 0x19 0x04 0xBF 0x3A 0x04 0x2C 0x19;\n+            0x04 0xB8 0x00 0x1D 0xBA 0x00 0x23 0x00 0x00 0xB6 0x00 0x24;\n+            0x05 0xAC 0x2D 0xB6 0x00 0x2A 0x3A 0x04 0xA7 0x00 0x1A 0x3A;\n+            0x04 0x19 0x04 0xBF 0x3A 0x04 0x2C 0x19 0x04 0xB8 0x00 0x1D;\n+            0xBA 0x00 0x2E 0x00 0x00 0xB6 0x00 0x24 0x05 0xAC 0x03 0xAC;\n+          }\n+          [] {                             \/\/ Traps\n+               2   12   15  25;\n+               2   12   20  27;\n+              38   44   47  25;\n+              38   44   52  27;\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#62) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   24;\n+                   2   26;\n+                  12   32;\n+                  15   27;\n+                  17   28;\n+                  20   29;\n+                  22   30;\n+                  36   31;\n+                  38   35;\n+                  44   41;\n+                  47   36;\n+                  49   37;\n+                  52   38;\n+                  54   39;\n+                  68   40;\n+                  70   43;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+            ;\n+            Attr(#63) {                    \/\/ StackMapTable\n+              [] {                         \/\/ \n+                255b, 15, []{O,#30; O,#64; O,#37; O,#20}, []{O,#25};  \/\/ full_frame\n+                68b, []z{O,#27};           \/\/ same_locals_1_stack_item_frame\n+                17b;                       \/\/ same_frame\n+                72b, []z{O,#25};           \/\/ same_locals_1_stack_item_frame\n+                68b, []z{O,#27};           \/\/ same_locals_1_stack_item_frame\n+                17b;                       \/\/ same_frame\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #66;                                 \/\/ name_index\n+      #67;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#61) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB2 0x00 0x2F 0xB8 0x00 0x35 0x10 0x5F 0x60 0xB8 0x00;\n+            0x39 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#62) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   47;\n+                  13   48;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#68) {                            \/\/ SourceFile\n+      #69;\n+    }                                      \/\/ end of SourceFile\n+    ;\n+    Attr(#70) {                            \/\/ BootstrapMethods\n+      [] {                                 \/\/ bootstrap_methods\n+        {                                  \/\/ bootstrap_method\n+          #77;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #71;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #77;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #73;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #77;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #75;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+      }\n+    }                                      \/\/ end of BootstrapMethods\n+    ;\n+    Attr(#83) {                            \/\/ InnerClasses\n+      [] {                                 \/\/ classes\n+          #84   #86   #88  25;\n+      }\n+    }                                      \/\/ end of InnerClasses\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00102m1.jcod","additions":287,"deletions":0,"binary":false,"changes":287,"status":"added"},{"patch":"@@ -0,0 +1,83 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl001\/atrcvl00102m1\/atrcvl00102m10p {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Method #18 #16;                        \/\/ #1\n+    Method #3 #16;                         \/\/ #2\n+    Class #12;                             \/\/ #3\n+    Field #9 #17;                          \/\/ #4\n+    Utf8 \"<init>\";                         \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"ConstantValue\";                  \/\/ #7\n+    Utf8 \"SourceFile\";                     \/\/ #8\n+    Class #20;                             \/\/ #9\n+    Utf8 \"I\";                              \/\/ #10\n+    Utf8 \"java\/lang\/Object\";               \/\/ #11\n+    Utf8 \"java\/lang\/Exception\";            \/\/ #12\n+    Utf8 \"Code\";                           \/\/ #13\n+    Utf8 \"Exceptions\";                     \/\/ #14\n+    Utf8 \"ifi\";                            \/\/ #15\n+    NameAndType #5 #6;                     \/\/ #16\n+    NameAndType #15 #10;                   \/\/ #17\n+    Class #11;                             \/\/ #18\n+    Integer 0x00030D40;                    \/\/ #19\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl001\/atrcvl00102m1\/atrcvl00102m10p\";  \/\/ #20\n+    Utf8 \"atrcvl00102m10p.jasm\";           \/\/ #21\n+  }\n+\n+  0x0001;                                  \/\/ access\n+  #9;                                      \/\/ this_cpx\n+  #18;                                     \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0000;                              \/\/ access\n+      #15;                                 \/\/ name_index\n+      #10;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#7) {                         \/\/ ConstantValue\n+          #19;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #5;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#14) {                        \/\/ Exceptions\n+          [] {                             \/\/ Exceptions\n+            #3;\n+          }\n+        }                                  \/\/ end of Exceptions\n+        ;\n+        Attr(#13) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x01 0x2A 0xB4 0x00 0x04 0x99 0x00 0x0B 0xBB;\n+            0x00 0x03 0x59 0xB7 0x00 0x02 0xBF 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#8) {                             \/\/ SourceFile\n+      #21;\n+    }                                      \/\/ end of SourceFile\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00102m10p.jcod","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"},{"patch":"@@ -0,0 +1,287 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl001\/atrcvl00102m1t\/atrcvl00102m1t {\n+  0xCAFEBABE;\n+  0;                                       \/\/ minor version\n+  67;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Method #2 #3;                          \/\/ #1\n+    Class #4;                              \/\/ #2\n+    NameAndType #5 #6;                     \/\/ #3\n+    Utf8 \"java\/lang\/Object\";               \/\/ #4\n+    Utf8 \"<init>\";                         \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    String #8;                             \/\/ #7\n+    Utf8 \"atrcvl00102m1t0p\";               \/\/ #8\n+    Method #10 #11;                        \/\/ #9\n+    Class #12;                             \/\/ #10\n+    NameAndType #13 #14;                   \/\/ #11\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl001\/atrcvl00102m1t\/atrcvl00102m1t\";  \/\/ #12\n+    Utf8 \"instantiatePositive\";            \/\/ #13\n+    Utf8 \"(Ljava\/lang\/String;[Ljava\/lang\/String;Ljava\/io\/PrintStream;)I\";  \/\/ #14\n+    InvokeDynamic 0s #16;                  \/\/ #15\n+    NameAndType #17 #18;                   \/\/ #16\n+    Utf8 \"makeConcatWithConstants\";        \/\/ #17\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/String;\";  \/\/ #18\n+    Method #20 #21;                        \/\/ #19\n+    Class #22;                             \/\/ #20\n+    NameAndType #23 #24;                   \/\/ #21\n+    Utf8 \"java\/lang\/Class\";                \/\/ #22\n+    Utf8 \"forName\";                        \/\/ #23\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/Class;\";  \/\/ #24\n+    Class #26;                             \/\/ #25\n+    Utf8 \"java\/lang\/ThreadDeath\";          \/\/ #26\n+    Class #28;                             \/\/ #27\n+    Utf8 \"java\/lang\/Throwable\";            \/\/ #28\n+    Method #30 #31;                        \/\/ #29\n+    Class #32;                             \/\/ #30\n+    NameAndType #33 #34;                   \/\/ #31\n+    Utf8 \"java\/lang\/String\";               \/\/ #32\n+    Utf8 \"valueOf\";                        \/\/ #33\n+    Utf8 \"(Ljava\/lang\/Object;)Ljava\/lang\/String;\";  \/\/ #34\n+    InvokeDynamic 1s #16;                  \/\/ #35\n+    Method #37 #38;                        \/\/ #36\n+    Class #39;                             \/\/ #37\n+    NameAndType #40 #41;                   \/\/ #38\n+    Utf8 \"java\/io\/PrintStream\";            \/\/ #39\n+    Utf8 \"println\";                        \/\/ #40\n+    Utf8 \"(Ljava\/lang\/String;)V\";          \/\/ #41\n+    Method #20 #43;                        \/\/ #42\n+    NameAndType #44 #45;                   \/\/ #43\n+    Utf8 \"newInstance\";                    \/\/ #44\n+    Utf8 \"()Ljava\/lang\/Object;\";           \/\/ #45\n+    InvokeDynamic 2s #16;                  \/\/ #46\n+    Field #48 #49;                         \/\/ #47\n+    Class #50;                             \/\/ #48\n+    NameAndType #51 #52;                   \/\/ #49\n+    Utf8 \"java\/lang\/System\";               \/\/ #50\n+    Utf8 \"out\";                            \/\/ #51\n+    Utf8 \"Ljava\/io\/PrintStream;\";          \/\/ #52\n+    Method #10 #54;                        \/\/ #53\n+    NameAndType #55 #56;                   \/\/ #54\n+    Utf8 \"run\";                            \/\/ #55\n+    Utf8 \"([Ljava\/lang\/String;Ljava\/io\/PrintStream;)I\";  \/\/ #56\n+    Method #48 #58;                        \/\/ #57\n+    NameAndType #59 #60;                   \/\/ #58\n+    Utf8 \"exit\";                           \/\/ #59\n+    Utf8 \"(I)V\";                           \/\/ #60\n+    Utf8 \"Code\";                           \/\/ #61\n+    Utf8 \"LineNumberTable\";                \/\/ #62\n+    Utf8 \"StackMapTable\";                  \/\/ #63\n+    Class #65;                             \/\/ #64\n+    Utf8 \"[Ljava\/lang\/String;\";            \/\/ #65\n+    Utf8 \"main\";                           \/\/ #66\n+    Utf8 \"([Ljava\/lang\/String;)V\";         \/\/ #67\n+    Utf8 \"SourceFile\";                     \/\/ #68\n+    Utf8 \"atrcvl00102m1t.java\";            \/\/ #69\n+    Utf8 \"BootstrapMethods\";               \/\/ #70\n+    String #72;                            \/\/ #71\n+    Utf8 \"javasoft.sqe.tests.vm.classfmt.atr.atrcvl001.atrcvl00102m1t.\\u0001\";  \/\/ #72\n+    String #74;                            \/\/ #73\n+    Utf8 \"Failed with loading exception: \\u0001\";  \/\/ #74\n+    String #76;                            \/\/ #75\n+    Utf8 \"Failed with runtime exception: \\u0001\";  \/\/ #76\n+    MethodHandle 6b #78;                   \/\/ #77\n+    Method #79 #80;                        \/\/ #78\n+    Class #81;                             \/\/ #79\n+    NameAndType #17 #82;                   \/\/ #80\n+    Utf8 \"java\/lang\/invoke\/StringConcatFactory\";  \/\/ #81\n+    Utf8 \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";  \/\/ #82\n+    Utf8 \"InnerClasses\";                   \/\/ #83\n+    Class #85;                             \/\/ #84\n+    Utf8 \"java\/lang\/invoke\/MethodHandles$Lookup\";  \/\/ #85\n+    Class #87;                             \/\/ #86\n+    Utf8 \"java\/lang\/invoke\/MethodHandles\";  \/\/ #87\n+    Utf8 \"Lookup\";                         \/\/ #88\n+  }\n+\n+  0x0021;                                  \/\/ access\n+  #10;                                     \/\/ this_cpx\n+  #2;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #5;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#61) {                        \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x01 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#62) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   12;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #55;                                 \/\/ name_index\n+      #56;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#61) {                        \/\/ Code\n+          3;                               \/\/ max_stack\n+          2;                               \/\/ max_locals\n+          Bytes[]{\n+            0x12 0x07 0x2A 0x2B 0xB8 0x00 0x09 0x99 0x00 0x05 0x05 0xAC;\n+            0x03 0xAC;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#62) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   16;\n+                  10   17;\n+                  12   19;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+            ;\n+            Attr(#63) {                    \/\/ StackMapTable\n+              [] {                         \/\/ \n+                12b;                       \/\/ same_frame\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #13;                                 \/\/ name_index\n+      #14;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#61) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          5;                               \/\/ max_locals\n+          Bytes[]{\n+            0x01 0x4E 0x2A 0xBA 0x00 0x0F 0x00 0x00 0xB8 0x00 0x13 0x4E;\n+            0xA7 0x00 0x1A 0x3A 0x04 0x19 0x04 0xBF 0x3A 0x04 0x2C 0x19;\n+            0x04 0xB8 0x00 0x1D 0xBA 0x00 0x23 0x00 0x00 0xB6 0x00 0x24;\n+            0x05 0xAC 0x2D 0xB6 0x00 0x2A 0x3A 0x04 0xA7 0x00 0x1A 0x3A;\n+            0x04 0x19 0x04 0xBF 0x3A 0x04 0x2C 0x19 0x04 0xB8 0x00 0x1D;\n+            0xBA 0x00 0x2E 0x00 0x00 0xB6 0x00 0x24 0x05 0xAC 0x03 0xAC;\n+          }\n+          [] {                             \/\/ Traps\n+               2   12   15  25;\n+               2   12   20  27;\n+              38   44   47  25;\n+              38   44   52  27;\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#62) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   24;\n+                   2   26;\n+                  12   32;\n+                  15   27;\n+                  17   28;\n+                  20   29;\n+                  22   30;\n+                  36   31;\n+                  38   35;\n+                  44   41;\n+                  47   36;\n+                  49   37;\n+                  52   38;\n+                  54   39;\n+                  68   40;\n+                  70   43;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+            ;\n+            Attr(#63) {                    \/\/ StackMapTable\n+              [] {                         \/\/ \n+                255b, 15, []{O,#30; O,#64; O,#37; O,#20}, []{O,#25};  \/\/ full_frame\n+                68b, []z{O,#27};           \/\/ same_locals_1_stack_item_frame\n+                17b;                       \/\/ same_frame\n+                72b, []z{O,#25};           \/\/ same_locals_1_stack_item_frame\n+                68b, []z{O,#27};           \/\/ same_locals_1_stack_item_frame\n+                17b;                       \/\/ same_frame\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #66;                                 \/\/ name_index\n+      #67;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#61) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB2 0x00 0x2F 0xB8 0x00 0x35 0x10 0x5F 0x60 0xB8 0x00;\n+            0x39 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#62) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   47;\n+                  13   48;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#68) {                            \/\/ SourceFile\n+      #69;\n+    }                                      \/\/ end of SourceFile\n+    ;\n+    Attr(#70) {                            \/\/ BootstrapMethods\n+      [] {                                 \/\/ bootstrap_methods\n+        {                                  \/\/ bootstrap_method\n+          #77;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #71;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #77;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #73;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #77;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #75;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+      }\n+    }                                      \/\/ end of BootstrapMethods\n+    ;\n+    Attr(#83) {                            \/\/ InnerClasses\n+      [] {                                 \/\/ classes\n+          #84   #86   #88  25;\n+      }\n+    }                                      \/\/ end of InnerClasses\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00102m1t.jcod","additions":287,"deletions":0,"binary":false,"changes":287,"status":"added"},{"patch":"@@ -0,0 +1,89 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl001\/atrcvl00102m1t\/atrcvl00102m1t0p {\n+  0xCAFEBABE;\n+  0;                                       \/\/ minor version\n+  50;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Class #22;                             \/\/ #1\n+    Method #9 #5;                          \/\/ #2\n+    Field #18 #8;                          \/\/ #3\n+    Method #1 #5;                          \/\/ #4\n+    NameAndType #20 #16;                   \/\/ #5\n+    Utf8 \"Code\";                           \/\/ #6\n+    Utf8 \"ConstantValue\";                  \/\/ #7\n+    NameAndType #12 #19;                   \/\/ #8\n+    Class #21;                             \/\/ #9\n+    Utf8 \"StackMapTable\";                  \/\/ #10\n+    Utf8 \"Exceptions\";                     \/\/ #11\n+    Utf8 \"ifi\";                            \/\/ #12\n+    Utf8 \"atrcvl00102m1t0p.jasm\";          \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl001\/atrcvl00102m1t\/atrcvl00102m1t0p\";  \/\/ #14\n+    Integer 0x00030D40;                    \/\/ #15\n+    Utf8 \"()V\";                            \/\/ #16\n+    Utf8 \"SourceFile\";                     \/\/ #17\n+    Class #14;                             \/\/ #18\n+    Utf8 \"I\";                              \/\/ #19\n+    Utf8 \"<init>\";                         \/\/ #20\n+    Utf8 \"java\/lang\/Object\";               \/\/ #21\n+    Utf8 \"java\/lang\/Exception\";            \/\/ #22\n+  }\n+\n+  0x0001;                                  \/\/ access\n+  #18;                                     \/\/ this_cpx\n+  #9;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0000;                              \/\/ access\n+      #12;                                 \/\/ name_index\n+      #19;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#7) {                         \/\/ ConstantValue\n+          #15;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #20;                                 \/\/ name_index\n+      #16;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#11) {                        \/\/ Exceptions\n+          [] {                             \/\/ Exceptions\n+            #1;\n+          }\n+        }                                  \/\/ end of Exceptions\n+        ;\n+        Attr(#6) {                         \/\/ Code\n+          2;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x02 0x2A 0xB4 0x00 0x03 0x99 0x00 0x0B 0xBB;\n+            0x00 0x01 0x59 0xB7 0x00 0x04 0xBF 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#10) {                    \/\/ StackMapTable\n+              [] {                         \/\/ \n+                255b, 19, []{O,#18}, []{};  \/\/ full_frame\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#17) {                            \/\/ SourceFile\n+      #13;\n+    }                                      \/\/ end of SourceFile\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00102m1t0p.jcod","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"},{"patch":"@@ -0,0 +1,239 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl003\/atrcvl00301m1\/atrcvl00301m1 {\n+  0xCAFEBABE;\n+  0;                                       \/\/ minor version\n+  67;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Method #2 #3;                          \/\/ #1\n+    Class #4;                              \/\/ #2\n+    NameAndType #5 #6;                     \/\/ #3\n+    Utf8 \"java\/lang\/Object\";               \/\/ #4\n+    Utf8 \"<init>\";                         \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    String #8;                             \/\/ #7\n+    Utf8 \"javasoft.sqe.tests.vm.classfmt.atr.atrcvl003.atrcvl00301m1.atrcvl00301m1p\";  \/\/ #8\n+    Method #10 #11;                        \/\/ #9\n+    Class #12;                             \/\/ #10\n+    NameAndType #13 #14;                   \/\/ #11\n+    Utf8 \"java\/lang\/Class\";                \/\/ #12\n+    Utf8 \"forName\";                        \/\/ #13\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/Class;\";  \/\/ #14\n+    Method #10 #16;                        \/\/ #15\n+    NameAndType #17 #18;                   \/\/ #16\n+    Utf8 \"newInstance\";                    \/\/ #17\n+    Utf8 \"()Ljava\/lang\/Object;\";           \/\/ #18\n+    Class #20;                             \/\/ #19\n+    Utf8 \"java\/lang\/Throwable\";            \/\/ #20\n+    Method #22 #23;                        \/\/ #21\n+    Class #24;                             \/\/ #22\n+    NameAndType #25 #26;                   \/\/ #23\n+    Utf8 \"java\/lang\/String\";               \/\/ #24\n+    Utf8 \"valueOf\";                        \/\/ #25\n+    Utf8 \"(Ljava\/lang\/Object;)Ljava\/lang\/String;\";  \/\/ #26\n+    InvokeDynamic 0s #28;                  \/\/ #27\n+    NameAndType #29 #30;                   \/\/ #28\n+    Utf8 \"makeConcatWithConstants\";        \/\/ #29\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/String;\";  \/\/ #30\n+    Method #32 #33;                        \/\/ #31\n+    Class #34;                             \/\/ #32\n+    NameAndType #35 #36;                   \/\/ #33\n+    Utf8 \"java\/io\/PrintStream\";            \/\/ #34\n+    Utf8 \"println\";                        \/\/ #35\n+    Utf8 \"(Ljava\/lang\/String;)V\";          \/\/ #36\n+    String #38;                            \/\/ #37\n+    Utf8 \"javasoft.sqe.tests.vm.classfmt.atr.atrcvl003.atrcvl00301m1.atrcvl00301m1n\";  \/\/ #38\n+    String #40;                            \/\/ #39\n+    Utf8 \"test atrcvl00301m1 failed to reject bad classfile atrcvl00301m1n\";  \/\/ #40\n+    Class #42;                             \/\/ #41\n+    Utf8 \"java\/lang\/ClassFormatError\";     \/\/ #42\n+    InvokeDynamic 1s #28;                  \/\/ #43\n+    Field #45 #46;                         \/\/ #44\n+    Class #47;                             \/\/ #45\n+    NameAndType #48 #49;                   \/\/ #46\n+    Utf8 \"java\/lang\/System\";               \/\/ #47\n+    Utf8 \"out\";                            \/\/ #48\n+    Utf8 \"Ljava\/io\/PrintStream;\";          \/\/ #49\n+    Method #51 #52;                        \/\/ #50\n+    Class #53;                             \/\/ #51\n+    NameAndType #54 #55;                   \/\/ #52\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl003\/atrcvl00301m1\/atrcvl00301m1\";  \/\/ #53\n+    Utf8 \"run\";                            \/\/ #54\n+    Utf8 \"([Ljava\/lang\/String;Ljava\/io\/PrintStream;)I\";  \/\/ #55\n+    Method #45 #57;                        \/\/ #56\n+    NameAndType #58 #59;                   \/\/ #57\n+    Utf8 \"exit\";                           \/\/ #58\n+    Utf8 \"(I)V\";                           \/\/ #59\n+    Utf8 \"Code\";                           \/\/ #60\n+    Utf8 \"LineNumberTable\";                \/\/ #61\n+    Utf8 \"StackMapTable\";                  \/\/ #62\n+    Utf8 \"main\";                           \/\/ #63\n+    Utf8 \"([Ljava\/lang\/String;)V\";         \/\/ #64\n+    Utf8 \"SourceFile\";                     \/\/ #65\n+    Utf8 \"atrcvl00301m1.java\";             \/\/ #66\n+    Utf8 \"BootstrapMethods\";               \/\/ #67\n+    String #69;                            \/\/ #68\n+    Utf8 \"test atrcvl00301m1 failed to load or instantiate good classfile atrcvl00301m1p: \\u0001\";  \/\/ #69\n+    String #71;                            \/\/ #70\n+    Utf8 \"test atrcvl00301m1 failed with unexpected loading exception: \\u0001\";  \/\/ #71\n+    MethodHandle 6b #73;                   \/\/ #72\n+    Method #74 #75;                        \/\/ #73\n+    Class #76;                             \/\/ #74\n+    NameAndType #29 #77;                   \/\/ #75\n+    Utf8 \"java\/lang\/invoke\/StringConcatFactory\";  \/\/ #76\n+    Utf8 \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";  \/\/ #77\n+    Utf8 \"InnerClasses\";                   \/\/ #78\n+    Class #80;                             \/\/ #79\n+    Utf8 \"java\/lang\/invoke\/MethodHandles$Lookup\";  \/\/ #80\n+    Class #82;                             \/\/ #81\n+    Utf8 \"java\/lang\/invoke\/MethodHandles\";  \/\/ #82\n+    Utf8 \"Lookup\";                         \/\/ #83\n+  }\n+\n+  0x0021;                                  \/\/ access\n+  #51;                                     \/\/ this_cpx\n+  #2;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #5;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#60) {                        \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x01 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#61) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   11;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #54;                                 \/\/ name_index\n+      #55;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#60) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          4;                               \/\/ max_locals\n+          Bytes[]{\n+            0x12 0x07 0xB8 0x00 0x09 0x4D 0x2C 0xB6 0x00 0x0F 0x4E 0xA7;\n+            0x00 0x13 0x4D 0x2B 0x2C 0xB8 0x00 0x15 0xBA 0x00 0x1B 0x00;\n+            0x00 0xB6 0x00 0x1F 0x05 0xAC 0x12 0x25 0xB8 0x00 0x09 0x4D;\n+            0x2B 0x12 0x27 0xB6 0x00 0x1F 0x05 0xAC 0x4D 0xA7 0x00 0x13;\n+            0x4D 0x2B 0x2C 0xB8 0x00 0x15 0xBA 0x00 0x2B 0x00 0x00 0xB6;\n+            0x00 0x1F 0x05 0xAC 0x03 0xAC;\n+          }\n+          [] {                             \/\/ Traps\n+               0   11   14  19;\n+              30   43   44  41;\n+              30   43   48  19;\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#61) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   16;\n+                   6   17;\n+                  11   21;\n+                  14   18;\n+                  15   19;\n+                  28   20;\n+                  30   24;\n+                  36   25;\n+                  42   26;\n+                  44   27;\n+                  45   32;\n+                  48   29;\n+                  49   30;\n+                  62   31;\n+                  64   34;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+            ;\n+            Attr(#62) {                    \/\/ StackMapTable\n+              [] {                         \/\/ \n+                78b, []z{O,#19};           \/\/ same_locals_1_stack_item_frame\n+                15b;                       \/\/ same_frame\n+                77b, []z{O,#41};           \/\/ same_locals_1_stack_item_frame\n+                67b, []z{O,#19};           \/\/ same_locals_1_stack_item_frame\n+                15b;                       \/\/ same_frame\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #63;                                 \/\/ name_index\n+      #64;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#60) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB2 0x00 0x2C 0xB8 0x00 0x32 0x10 0x5F 0x60 0xB8 0x00;\n+            0x38 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#61) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   38;\n+                  13   39;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#65) {                            \/\/ SourceFile\n+      #66;\n+    }                                      \/\/ end of SourceFile\n+    ;\n+    Attr(#67) {                            \/\/ BootstrapMethods\n+      [] {                                 \/\/ bootstrap_methods\n+        {                                  \/\/ bootstrap_method\n+          #72;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #68;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #72;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #70;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+      }\n+    }                                      \/\/ end of BootstrapMethods\n+    ;\n+    Attr(#78) {                            \/\/ InnerClasses\n+      [] {                                 \/\/ classes\n+          #79   #81   #83  25;\n+      }\n+    }                                      \/\/ end of InnerClasses\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00301m1.jcod","additions":239,"deletions":0,"binary":false,"changes":239,"status":"added"},{"patch":"@@ -0,0 +1,75 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl003\/atrcvl00301m1\/atrcvl00301m1n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"I\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl003\/atrcvl00301m1\/atrcvl00301m1n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #19;\n+        }                                  \/\/ end of ConstantValue\n+        ;\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #1;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00301m1n.jcod","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"},{"patch":"@@ -0,0 +1,71 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl003\/atrcvl00301m1\/atrcvl00301m1p {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"I\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl003\/atrcvl00301m1\/atrcvl00301m1p\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #1;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00301m1p.jcod","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -0,0 +1,252 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl004\/atrcvl00401m1\/atrcvl00401m1 {\n+  0xCAFEBABE;\n+  0;                                       \/\/ minor version\n+  67;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Method #2 #3;                          \/\/ #1\n+    Class #4;                              \/\/ #2\n+    NameAndType #5 #6;                     \/\/ #3\n+    Utf8 \"java\/lang\/Object\";               \/\/ #4\n+    Utf8 \"<init>\";                         \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    String #8;                             \/\/ #7\n+    Utf8 \"javasoft.sqe.tests.vm.classfmt.atr.atrcvl004.atrcvl00401m1.atrcvl00401m1p\";  \/\/ #8\n+    Method #10 #11;                        \/\/ #9\n+    Class #12;                             \/\/ #10\n+    NameAndType #13 #14;                   \/\/ #11\n+    Utf8 \"java\/lang\/Class\";                \/\/ #12\n+    Utf8 \"forName\";                        \/\/ #13\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/Class;\";  \/\/ #14\n+    Method #10 #16;                        \/\/ #15\n+    NameAndType #17 #18;                   \/\/ #16\n+    Utf8 \"newInstance\";                    \/\/ #17\n+    Utf8 \"()Ljava\/lang\/Object;\";           \/\/ #18\n+    Class #20;                             \/\/ #19\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl004\/atrcvl00401m1\/atrcvl00401m1n\";  \/\/ #20\n+    Class #22;                             \/\/ #21\n+    Utf8 \"java\/lang\/Exception\";            \/\/ #22\n+    Method #24 #25;                        \/\/ #23\n+    Class #26;                             \/\/ #24\n+    NameAndType #27 #28;                   \/\/ #25\n+    Utf8 \"java\/lang\/String\";               \/\/ #26\n+    Utf8 \"valueOf\";                        \/\/ #27\n+    Utf8 \"(Ljava\/lang\/Object;)Ljava\/lang\/String;\";  \/\/ #28\n+    InvokeDynamic 0s #30;                  \/\/ #29\n+    NameAndType #31 #32;                   \/\/ #30\n+    Utf8 \"makeConcatWithConstants\";        \/\/ #31\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/String;\";  \/\/ #32\n+    Method #34 #35;                        \/\/ #33\n+    Class #36;                             \/\/ #34\n+    NameAndType #37 #38;                   \/\/ #35\n+    Utf8 \"java\/io\/PrintStream\";            \/\/ #36\n+    Utf8 \"println\";                        \/\/ #37\n+    Utf8 \"(Ljava\/lang\/String;)V\";          \/\/ #38\n+    Class #40;                             \/\/ #39\n+    Utf8 \"java\/lang\/Throwable\";            \/\/ #40\n+    InvokeDynamic 1s #30;                  \/\/ #41\n+    InterfaceMethod #19 #43;               \/\/ #42\n+    NameAndType #44 #45;                   \/\/ #43\n+    Utf8 \"get_i1\";                         \/\/ #44\n+    Utf8 \"()I\";                            \/\/ #45\n+    Integer 0x0130BF9D;                    \/\/ #46\n+    String #48;                            \/\/ #47\n+    Utf8 \"invalid value i1\";               \/\/ #48\n+    InterfaceMethod #19 #50;               \/\/ #49\n+    NameAndType #51 #45;                   \/\/ #50\n+    Utf8 \"get_i2\";                         \/\/ #51\n+    Integer 0x0130E6AE;                    \/\/ #52\n+    String #54;                            \/\/ #53\n+    Utf8 \"invalid value i2\";               \/\/ #54\n+    Field #56 #57;                         \/\/ #55\n+    Class #58;                             \/\/ #56\n+    NameAndType #59 #60;                   \/\/ #57\n+    Utf8 \"java\/lang\/System\";               \/\/ #58\n+    Utf8 \"out\";                            \/\/ #59\n+    Utf8 \"Ljava\/io\/PrintStream;\";          \/\/ #60\n+    Method #62 #63;                        \/\/ #61\n+    Class #64;                             \/\/ #62\n+    NameAndType #65 #66;                   \/\/ #63\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl004\/atrcvl00401m1\/atrcvl00401m1\";  \/\/ #64\n+    Utf8 \"run\";                            \/\/ #65\n+    Utf8 \"([Ljava\/lang\/String;Ljava\/io\/PrintStream;)I\";  \/\/ #66\n+    Method #56 #68;                        \/\/ #67\n+    NameAndType #69 #70;                   \/\/ #68\n+    Utf8 \"exit\";                           \/\/ #69\n+    Utf8 \"(I)V\";                           \/\/ #70\n+    Utf8 \"Code\";                           \/\/ #71\n+    Utf8 \"LineNumberTable\";                \/\/ #72\n+    Utf8 \"StackMapTable\";                  \/\/ #73\n+    Utf8 \"main\";                           \/\/ #74\n+    Utf8 \"([Ljava\/lang\/String;)V\";         \/\/ #75\n+    Utf8 \"SourceFile\";                     \/\/ #76\n+    Utf8 \"atrcvl00401m1.java\";             \/\/ #77\n+    Utf8 \"BootstrapMethods\";               \/\/ #78\n+    String #80;                            \/\/ #79\n+    Utf8 \"failed create an instance of atrcvl00401m1p:\\u0001\";  \/\/ #80\n+    String #82;                            \/\/ #81\n+    Utf8 \"failed to load class atrcvl00401m1p:\\u0001\";  \/\/ #82\n+    MethodHandle 6b #84;                   \/\/ #83\n+    Method #85 #86;                        \/\/ #84\n+    Class #87;                             \/\/ #85\n+    NameAndType #31 #88;                   \/\/ #86\n+    Utf8 \"java\/lang\/invoke\/StringConcatFactory\";  \/\/ #87\n+    Utf8 \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";  \/\/ #88\n+    Utf8 \"InnerClasses\";                   \/\/ #89\n+    Class #91;                             \/\/ #90\n+    Utf8 \"java\/lang\/invoke\/MethodHandles$Lookup\";  \/\/ #91\n+    Class #93;                             \/\/ #92\n+    Utf8 \"java\/lang\/invoke\/MethodHandles\";  \/\/ #93\n+    Utf8 \"Lookup\";                         \/\/ #94\n+  }\n+\n+  0x0021;                                  \/\/ access\n+  #62;                                     \/\/ this_cpx\n+  #2;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #5;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#71) {                        \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x01 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#72) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   13;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #65;                                 \/\/ name_index\n+      #66;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#71) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          5;                               \/\/ max_locals\n+          Bytes[]{\n+            0x12 0x07 0xB8 0x00 0x09 0x4D 0x2C 0xB6 0x00 0x0F 0xC0 0x00;\n+            0x13 0x4E 0xA7 0x00 0x27 0x3A 0x04 0x2B 0x19 0x04 0xB8 0x00;\n+            0x17 0xBA 0x00 0x1D 0x00 0x00 0xB6 0x00 0x21 0x05 0xAC 0x3A;\n+            0x04 0x2B 0x19 0x04 0xB8 0x00 0x17 0xBA 0x00 0x29 0x00 0x00;\n+            0xB6 0x00 0x21 0x05 0xAC 0x2D 0xB9 0x00 0x2A 0x01 0x00 0x12;\n+            0x2E 0x9F 0x00 0x0B 0x2B 0x12 0x2F 0xB6 0x00 0x21 0x05 0xAC;\n+            0x2D 0xB9 0x00 0x31 0x01 0x00 0x12 0x34 0x9F 0x00 0x0B 0x2B;\n+            0x12 0x35 0xB6 0x00 0x21 0x05 0xAC 0x03 0xAC;\n+          }\n+          [] {                             \/\/ Traps\n+               0   14   17  21;\n+               0   14   35  39;\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#72) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   18;\n+                   6   19;\n+                  14   26;\n+                  17   20;\n+                  19   21;\n+                  33   22;\n+                  35   23;\n+                  37   24;\n+                  51   25;\n+                  53   27;\n+                  64   28;\n+                  70   29;\n+                  72   31;\n+                  83   32;\n+                  89   33;\n+                  91   35;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+            ;\n+            Attr(#73) {                    \/\/ StackMapTable\n+              [] {                         \/\/ \n+                81b, []z{O,#21};           \/\/ same_locals_1_stack_item_frame\n+                81b, []z{O,#39};           \/\/ same_locals_1_stack_item_frame\n+                253b, 17, []z{O,#10; O,#19};  \/\/ append_frame 2\n+                18b;                       \/\/ same_frame\n+                18b;                       \/\/ same_frame\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #74;                                 \/\/ name_index\n+      #75;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#71) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB2 0x00 0x37 0xB8 0x00 0x3D 0x10 0x5F 0x60 0xB8 0x00;\n+            0x43 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#72) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   39;\n+                  13   40;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#76) {                            \/\/ SourceFile\n+      #77;\n+    }                                      \/\/ end of SourceFile\n+    ;\n+    Attr(#78) {                            \/\/ BootstrapMethods\n+      [] {                                 \/\/ bootstrap_methods\n+        {                                  \/\/ bootstrap_method\n+          #83;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #79;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #83;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #81;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+      }\n+    }                                      \/\/ end of BootstrapMethods\n+    ;\n+    Attr(#89) {                            \/\/ InnerClasses\n+      [] {                                 \/\/ classes\n+          #90   #92   #94  25;\n+      }\n+    }                                      \/\/ end of InnerClasses\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00401m1.jcod","additions":252,"deletions":0,"binary":false,"changes":252,"status":"added"},{"patch":"@@ -0,0 +1,51 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl004\/atrcvl00401m1\/atrcvl00401m1n {\n+  0xCAFEBABE;\n+  0;                                       \/\/ minor version\n+  67;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Class #2;                              \/\/ #1\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl004\/atrcvl00401m1\/atrcvl00401m1n\";  \/\/ #2\n+    Class #4;                              \/\/ #3\n+    Utf8 \"java\/lang\/Object\";               \/\/ #4\n+    Utf8 \"get_i1\";                         \/\/ #5\n+    Utf8 \"()I\";                            \/\/ #6\n+    Utf8 \"get_i2\";                         \/\/ #7\n+    Utf8 \"SourceFile\";                     \/\/ #8\n+    Utf8 \"atrcvl00401m1n.java\";            \/\/ #9\n+  }\n+\n+  0x0600;                                  \/\/ access\n+  #1;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0401;                              \/\/ access\n+      #5;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0401;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#8) {                             \/\/ SourceFile\n+      #9;\n+    }                                      \/\/ end of SourceFile\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00401m1n.jcod","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -0,0 +1,131 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl004\/atrcvl00401m1\/atrcvl00401m1p {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Field #6 #18;                          \/\/ #1\n+    Field #6 #20;                          \/\/ #2\n+    Method #21 #13;                        \/\/ #3\n+    Utf8 \"i2\";                             \/\/ #4\n+    Utf8 \"atrcvl00401m1p.jasm\";            \/\/ #5\n+    Class #14;                             \/\/ #6\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl004\/atrcvl00401m1\/atrcvl00401m1n\";  \/\/ #7\n+    Utf8 \"get_i1\";                         \/\/ #8\n+    Integer 0x0130BF9D;                    \/\/ #9\n+    Utf8 \"get_i2\";                         \/\/ #10\n+    Utf8 \"SourceFile\";                     \/\/ #11\n+    Integer 0x0130E6AE;                    \/\/ #12\n+    NameAndType #15 #17;                   \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl004\/atrcvl00401m1\/atrcvl00401m1p\";  \/\/ #14\n+    Utf8 \"<init>\";                         \/\/ #15\n+    Class #7;                              \/\/ #16\n+    Utf8 \"()V\";                            \/\/ #17\n+    NameAndType #4 #24;                    \/\/ #18\n+    Utf8 \"ConstantValue\";                  \/\/ #19\n+    NameAndType #23 #24;                   \/\/ #20\n+    Class #25;                             \/\/ #21\n+    Utf8 \"()I\";                            \/\/ #22\n+    Utf8 \"i1\";                             \/\/ #23\n+    Utf8 \"I\";                              \/\/ #24\n+    Utf8 \"java\/lang\/Object\";               \/\/ #25\n+    Utf8 \"Code\";                           \/\/ #26\n+  }\n+\n+  0x0000;                                  \/\/ access\n+  #6;                                      \/\/ this_cpx\n+  #21;                                     \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+    #16;\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #23;                                 \/\/ name_index\n+      #24;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#19) {                        \/\/ ConstantValue\n+          #9;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ field\n+      0x0008;                              \/\/ access\n+      #4;                                  \/\/ name_index\n+      #24;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#19) {                        \/\/ ConstantValue\n+          #12;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #8;                                  \/\/ name_index\n+      #22;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#26) {                        \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0xB2 0x00 0x02 0xAC;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #10;                                 \/\/ name_index\n+      #22;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#26) {                        \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0xB2 0x00 0x01 0xAC;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #15;                                 \/\/ name_index\n+      #17;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#26) {                        \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x03 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#11) {                            \/\/ SourceFile\n+      #5;\n+    }                                      \/\/ end of SourceFile\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00401m1p.jcod","additions":131,"deletions":0,"binary":false,"changes":131,"status":"added"},{"patch":"@@ -0,0 +1,692 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl004\/atrcvl00402m1\/atrcvl00402m1 {\n+  0xCAFEBABE;\n+  0;                                       \/\/ minor version\n+  67;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Method #2 #3;                          \/\/ #1\n+    Class #4;                              \/\/ #2\n+    NameAndType #5 #6;                     \/\/ #3\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl004\/atrcvl00402m1\/atrcvl00402m1t\";  \/\/ #4\n+    Utf8 \"<init>\";                         \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Field #8 #9;                           \/\/ #7\n+    Class #10;                             \/\/ #8\n+    NameAndType #11 #12;                   \/\/ #9\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl004\/atrcvl00402m1\/atrcvl00402m1\";  \/\/ #10\n+    Utf8 \"sfStringMirror\";                 \/\/ #11\n+    Utf8 \"Ljava\/lang\/String;\";             \/\/ #12\n+    String #14;                            \/\/ #13\n+    Utf8 \"sfString\";                       \/\/ #14\n+    Method #16 #17;                        \/\/ #15\n+    Class #18;                             \/\/ #16\n+    NameAndType #19 #20;                   \/\/ #17\n+    Utf8 \"java\/lang\/String\";               \/\/ #18\n+    Utf8 \"equals\";                         \/\/ #19\n+    Utf8 \"(Ljava\/lang\/Object;)Z\";          \/\/ #20\n+    InvokeDynamic 0s #22;                  \/\/ #21\n+    NameAndType #23 #24;                   \/\/ #22\n+    Utf8 \"makeConcatWithConstants\";        \/\/ #23\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/String;\";  \/\/ #24\n+    Method #26 #27;                        \/\/ #25\n+    Class #28;                             \/\/ #26\n+    NameAndType #29 #30;                   \/\/ #27\n+    Utf8 \"java\/io\/PrintStream\";            \/\/ #28\n+    Utf8 \"println\";                        \/\/ #29\n+    Utf8 \"(Ljava\/lang\/String;)V\";          \/\/ #30\n+    Field #8 #32;                          \/\/ #31\n+    NameAndType #33 #12;                   \/\/ #32\n+    Utf8 \"sStringMirror\";                  \/\/ #33\n+    Field #8 #35;                          \/\/ #34\n+    NameAndType #36 #12;                   \/\/ #35\n+    Utf8 \"sString\";                        \/\/ #36\n+    InvokeDynamic 1s #38;                  \/\/ #37\n+    NameAndType #23 #39;                   \/\/ #38\n+    Utf8 \"(Ljava\/lang\/String;Ljava\/lang\/String;)Ljava\/lang\/String;\";  \/\/ #39\n+    String #36;                            \/\/ #40\n+    InvokeDynamic 2s #22;                  \/\/ #41\n+    Field #8 #43;                          \/\/ #42\n+    NameAndType #44 #45;                   \/\/ #43\n+    Utf8 \"sfBooleanMirror\";                \/\/ #44\n+    Utf8 \"Z\";                              \/\/ #45\n+    InvokeDynamic 3s #47;                  \/\/ #46\n+    NameAndType #23 #48;                   \/\/ #47\n+    Utf8 \"(Z)Ljava\/lang\/String;\";          \/\/ #48\n+    Field #8 #50;                          \/\/ #49\n+    NameAndType #51 #45;                   \/\/ #50\n+    Utf8 \"sBooleanMirror\";                 \/\/ #51\n+    Field #8 #53;                          \/\/ #52\n+    NameAndType #54 #45;                   \/\/ #53\n+    Utf8 \"sBoolean\";                       \/\/ #54\n+    InvokeDynamic 1s #56;                  \/\/ #55\n+    NameAndType #23 #57;                   \/\/ #56\n+    Utf8 \"(ZZ)Ljava\/lang\/String;\";         \/\/ #57\n+    InvokeDynamic 4s #47;                  \/\/ #58\n+    Field #8 #60;                          \/\/ #59\n+    NameAndType #61 #62;                   \/\/ #60\n+    Utf8 \"sfShortMirror\";                  \/\/ #61\n+    Utf8 \"S\";                              \/\/ #62\n+    InvokeDynamic 5s #64;                  \/\/ #63\n+    NameAndType #23 #65;                   \/\/ #64\n+    Utf8 \"(S)Ljava\/lang\/String;\";          \/\/ #65\n+    Field #8 #67;                          \/\/ #66\n+    NameAndType #68 #62;                   \/\/ #67\n+    Utf8 \"sShortMirror\";                   \/\/ #68\n+    Field #8 #70;                          \/\/ #69\n+    NameAndType #71 #62;                   \/\/ #70\n+    Utf8 \"sShort\";                         \/\/ #71\n+    InvokeDynamic 1s #73;                  \/\/ #72\n+    NameAndType #23 #74;                   \/\/ #73\n+    Utf8 \"(SS)Ljava\/lang\/String;\";         \/\/ #74\n+    InvokeDynamic 6s #64;                  \/\/ #75\n+    Field #8 #77;                          \/\/ #76\n+    NameAndType #78 #79;                   \/\/ #77\n+    Utf8 \"sfCharMirror\";                   \/\/ #78\n+    Utf8 \"C\";                              \/\/ #79\n+    InvokeDynamic 7s #81;                  \/\/ #80\n+    NameAndType #23 #82;                   \/\/ #81\n+    Utf8 \"(C)Ljava\/lang\/String;\";          \/\/ #82\n+    InvokeDynamic 8s #81;                  \/\/ #83\n+    Field #8 #85;                          \/\/ #84\n+    NameAndType #86 #79;                   \/\/ #85\n+    Utf8 \"sCharMirror\";                    \/\/ #86\n+    Field #8 #88;                          \/\/ #87\n+    NameAndType #89 #79;                   \/\/ #88\n+    Utf8 \"sChar\";                          \/\/ #89\n+    InvokeDynamic 1s #91;                  \/\/ #90\n+    NameAndType #23 #92;                   \/\/ #91\n+    Utf8 \"(CC)Ljava\/lang\/String;\";         \/\/ #92\n+    InvokeDynamic 9s #81;                  \/\/ #93\n+    Field #8 #95;                          \/\/ #94\n+    NameAndType #96 #97;                   \/\/ #95\n+    Utf8 \"sfByteMirror\";                   \/\/ #96\n+    Utf8 \"B\";                              \/\/ #97\n+    InvokeDynamic 10s #99;                 \/\/ #98\n+    NameAndType #23 #100;                  \/\/ #99\n+    Utf8 \"(B)Ljava\/lang\/String;\";          \/\/ #100\n+    Field #8 #102;                         \/\/ #101\n+    NameAndType #103 #97;                  \/\/ #102\n+    Utf8 \"sByteMirror\";                    \/\/ #103\n+    Field #8 #105;                         \/\/ #104\n+    NameAndType #106 #97;                  \/\/ #105\n+    Utf8 \"sByte\";                          \/\/ #106\n+    InvokeDynamic 1s #108;                 \/\/ #107\n+    NameAndType #23 #109;                  \/\/ #108\n+    Utf8 \"(BB)Ljava\/lang\/String;\";         \/\/ #109\n+    InvokeDynamic 11s #99;                 \/\/ #110\n+    Field #8 #112;                         \/\/ #111\n+    NameAndType #113 #114;                 \/\/ #112\n+    Utf8 \"sfLongMirror\";                   \/\/ #113\n+    Utf8 \"J\";                              \/\/ #114\n+    Long 0x0000000000000005;;              \/\/ #115\n+    InvokeDynamic 12s #118;                \/\/ #117\n+    NameAndType #23 #119;                  \/\/ #118\n+    Utf8 \"(J)Ljava\/lang\/String;\";          \/\/ #119\n+    Field #8 #121;                         \/\/ #120\n+    NameAndType #122 #114;                 \/\/ #121\n+    Utf8 \"sLongMirror\";                    \/\/ #122\n+    Field #8 #124;                         \/\/ #123\n+    NameAndType #125 #114;                 \/\/ #124\n+    Utf8 \"sLong\";                          \/\/ #125\n+    InvokeDynamic 1s #127;                 \/\/ #126\n+    NameAndType #23 #128;                  \/\/ #127\n+    Utf8 \"(JJ)Ljava\/lang\/String;\";         \/\/ #128\n+    Long 0x000000000000000F;;              \/\/ #129\n+    InvokeDynamic 13s #118;                \/\/ #131\n+    Field #8 #133;                         \/\/ #132\n+    NameAndType #134 #135;                 \/\/ #133\n+    Utf8 \"sfFloatMirror\";                  \/\/ #134\n+    Utf8 \"F\";                              \/\/ #135\n+    Float 0x40C00000;                      \/\/ #136\n+    InvokeDynamic 14s #138;                \/\/ #137\n+    NameAndType #23 #139;                  \/\/ #138\n+    Utf8 \"(F)Ljava\/lang\/String;\";          \/\/ #139\n+    InvokeDynamic 15s #138;                \/\/ #140\n+    Field #8 #142;                         \/\/ #141\n+    NameAndType #143 #135;                 \/\/ #142\n+    Utf8 \"sFloatMirror\";                   \/\/ #143\n+    Field #8 #145;                         \/\/ #144\n+    NameAndType #146 #135;                 \/\/ #145\n+    Utf8 \"sFloat\";                         \/\/ #146\n+    InvokeDynamic 1s #148;                 \/\/ #147\n+    NameAndType #23 #149;                  \/\/ #148\n+    Utf8 \"(FF)Ljava\/lang\/String;\";         \/\/ #149\n+    Float 0x41800000;                      \/\/ #150\n+    InvokeDynamic 16s #138;                \/\/ #151\n+    Field #8 #153;                         \/\/ #152\n+    NameAndType #154 #155;                 \/\/ #153\n+    Utf8 \"sfDoubleMirror\";                 \/\/ #154\n+    Utf8 \"D\";                              \/\/ #155\n+    Double 0x401C000000000000;;            \/\/ #156\n+    InvokeDynamic 17s #159;                \/\/ #158\n+    NameAndType #23 #160;                  \/\/ #159\n+    Utf8 \"(D)Ljava\/lang\/String;\";          \/\/ #160\n+    InvokeDynamic 18s #159;                \/\/ #161\n+    Field #8 #163;                         \/\/ #162\n+    NameAndType #164 #155;                 \/\/ #163\n+    Utf8 \"sDoubleMirror\";                  \/\/ #164\n+    Field #8 #166;                         \/\/ #165\n+    NameAndType #167 #155;                 \/\/ #166\n+    Utf8 \"sDouble\";                        \/\/ #167\n+    InvokeDynamic 1s #169;                 \/\/ #168\n+    NameAndType #23 #170;                  \/\/ #169\n+    Utf8 \"(DD)Ljava\/lang\/String;\";         \/\/ #170\n+    Double 0x4031000000000000;;            \/\/ #171\n+    InvokeDynamic 19s #159;                \/\/ #173\n+    Field #175 #176;                       \/\/ #174\n+    Class #177;                            \/\/ #175\n+    NameAndType #178 #179;                 \/\/ #176\n+    Utf8 \"java\/lang\/System\";               \/\/ #177\n+    Utf8 \"out\";                            \/\/ #178\n+    Utf8 \"Ljava\/io\/PrintStream;\";          \/\/ #179\n+    Method #8 #181;                        \/\/ #180\n+    NameAndType #182 #183;                 \/\/ #181\n+    Utf8 \"run\";                            \/\/ #182\n+    Utf8 \"([Ljava\/lang\/String;Ljava\/io\/PrintStream;)I\";  \/\/ #183\n+    Method #175 #185;                      \/\/ #184\n+    NameAndType #186 #187;                 \/\/ #185\n+    Utf8 \"exit\";                           \/\/ #186\n+    Utf8 \"(I)V\";                           \/\/ #187\n+    Utf8 \"Code\";                           \/\/ #188\n+    Utf8 \"LineNumberTable\";                \/\/ #189\n+    Utf8 \"StackMapTable\";                  \/\/ #190\n+    Utf8 \"main\";                           \/\/ #191\n+    Utf8 \"([Ljava\/lang\/String;)V\";         \/\/ #192\n+    Utf8 \"SourceFile\";                     \/\/ #193\n+    Utf8 \"atrcvl00402m1.java\";             \/\/ #194\n+    Utf8 \"BootstrapMethods\";               \/\/ #195\n+    String #197;                           \/\/ #196\n+    Utf8 \"\\u0001 != sfString\";             \/\/ #197\n+    String #199;                           \/\/ #198\n+    Utf8 \"\\u0001 != \\u0001\";               \/\/ #199\n+    String #201;                           \/\/ #200\n+    Utf8 \"\\u0001 != sString\";              \/\/ #201\n+    String #203;                           \/\/ #202\n+    Utf8 \"\\u0001 != true\";                 \/\/ #203\n+    String #205;                           \/\/ #204\n+    Utf8 \"\\u0001 != false\";                \/\/ #205\n+    String #207;                           \/\/ #206\n+    Utf8 \"\\u0001 != 2\";                    \/\/ #207\n+    String #209;                           \/\/ #208\n+    Utf8 \"\\u0001 != 12\";                   \/\/ #209\n+    String #211;                           \/\/ #210\n+    Utf8 \"\\u0001 != \\u0002\";               \/\/ #211\n+    String #213;                           \/\/ #212\n+    Utf8 \"\\u0001\";                         \/\/ #213\n+    String #215;                           \/\/ #214\n+    Utf8 \"\\u0001 != 1\";                    \/\/ #215\n+    String #217;                           \/\/ #216\n+    Utf8 \"\\u0001 != 11\";                   \/\/ #217\n+    String #219;                           \/\/ #218\n+    Utf8 \"\\u0001 != 4\";                    \/\/ #219\n+    String #221;                           \/\/ #220\n+    Utf8 \"\\u0001 != 14\";                   \/\/ #221\n+    String #223;                           \/\/ #222\n+    Utf8 \"\\u0001 != 5\";                    \/\/ #223\n+    String #225;                           \/\/ #224\n+    Utf8 \"\\u0001 != 15\";                   \/\/ #225\n+    String #227;                           \/\/ #226\n+    Utf8 \"\\u0001 != 6.0\";                  \/\/ #227\n+    String #229;                           \/\/ #228\n+    Utf8 \"\\u0001 != 6.0F\";                 \/\/ #229\n+    String #231;                           \/\/ #230\n+    Utf8 \"\\u0001 != 16.0F\";                \/\/ #231\n+    String #233;                           \/\/ #232\n+    Utf8 \"\\u0001 != 7.0\";                  \/\/ #233\n+    String #235;                           \/\/ #234\n+    Utf8 \"\\u0001 != 7.0D\";                 \/\/ #235\n+    String #237;                           \/\/ #236\n+    Utf8 \"\\u0001 != 17.0D\";                \/\/ #237\n+    MethodHandle 6b #239;                  \/\/ #238\n+    Method #240 #241;                      \/\/ #239\n+    Class #242;                            \/\/ #240\n+    NameAndType #23 #243;                  \/\/ #241\n+    Utf8 \"java\/lang\/invoke\/StringConcatFactory\";  \/\/ #242\n+    Utf8 \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";  \/\/ #243\n+    Utf8 \"InnerClasses\";                   \/\/ #244\n+    Class #246;                            \/\/ #245\n+    Utf8 \"java\/lang\/invoke\/MethodHandles$Lookup\";  \/\/ #246\n+    Class #248;                            \/\/ #247\n+    Utf8 \"java\/lang\/invoke\/MethodHandles\";  \/\/ #248\n+    Utf8 \"Lookup\";                         \/\/ #249\n+  }\n+\n+  0x0021;                                  \/\/ access\n+  #8;                                      \/\/ this_cpx\n+  #2;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #5;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#188) {                       \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x01 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#189) {                   \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   13;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #182;                                \/\/ name_index\n+      #183;                                \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#188) {                       \/\/ Code\n+          5;                               \/\/ max_stack\n+          2;                               \/\/ max_locals\n+          Bytes[]{\n+            0xB2 0x00 0x07 0x12 0x0D 0xB6 0x00 0x0F 0x9A 0x00 0x11 0x2B;\n+            0xB2 0x00 0x07 0xBA 0x00 0x15 0x00 0x00 0xB6 0x00 0x19 0x05;\n+            0xAC 0xB2 0x00 0x07 0x12 0x0D 0xB6 0x00 0x0F 0x9A 0x00 0x11;\n+            0x2B 0xB2 0x00 0x07 0xBA 0x00 0x15 0x00 0x00 0xB6 0x00 0x19;\n+            0x05 0xAC 0xB2 0x00 0x1F 0xB2 0x00 0x22 0xB6 0x00 0x0F 0x9A;\n+            0x00 0x14 0x2B 0xB2 0x00 0x1F 0xB2 0x00 0x22 0xBA 0x00 0x25;\n+            0x00 0x00 0xB6 0x00 0x19 0x05 0xAC 0xB2 0x00 0x1F 0x12 0x28;\n+            0xB6 0x00 0x0F 0x9A 0x00 0x11 0x2B 0xB2 0x00 0x1F 0xBA 0x00;\n+            0x29 0x00 0x00 0xB6 0x00 0x19 0x05 0xAC 0xB2 0x00 0x2A 0x04;\n+            0x9F 0x00 0x11 0x2B 0xB2 0x00 0x2A 0xBA 0x00 0x2E 0x00 0x00;\n+            0xB6 0x00 0x19 0x05 0xAC 0xB2 0x00 0x2A 0x04 0x9F 0x00 0x11;\n+            0x2B 0xB2 0x00 0x2A 0xBA 0x00 0x2E 0x00 0x00 0xB6 0x00 0x19;\n+            0x05 0xAC 0xB2 0x00 0x31 0xB2 0x00 0x34 0x9F 0x00 0x14 0x2B;\n+            0xB2 0x00 0x31 0xB2 0x00 0x34 0xBA 0x00 0x37 0x00 0x00 0xB6;\n+            0x00 0x19 0x05 0xAC 0xB2 0x00 0x31 0x99 0x00 0x11 0x2B 0xB2;\n+            0x00 0x31 0xBA 0x00 0x3A 0x00 0x00 0xB6 0x00 0x19 0x05 0xAC;\n+            0xB2 0x00 0x3B 0x05 0x9F 0x00 0x11 0x2B 0xB2 0x00 0x3B 0xBA;\n+            0x00 0x3F 0x00 0x00 0xB6 0x00 0x19 0x05 0xAC 0xB2 0x00 0x3B;\n+            0x05 0x9F 0x00 0x11 0x2B 0xB2 0x00 0x3B 0xBA 0x00 0x3F 0x00;\n+            0x00 0xB6 0x00 0x19 0x05 0xAC 0xB2 0x00 0x42 0xB2 0x00 0x45;\n+            0x9F 0x00 0x14 0x2B 0xB2 0x00 0x42 0xB2 0x00 0x45 0xBA 0x00;\n+            0x48 0x00 0x00 0xB6 0x00 0x19 0x05 0xAC 0xB2 0x00 0x42 0x10;\n+            0x0C 0x9F 0x00 0x11 0x2B 0xB2 0x00 0x42 0xBA 0x00 0x4B 0x00;\n+            0x00 0xB6 0x00 0x19 0x05 0xAC 0xB2 0x00 0x4C 0x04 0x9F 0x00;\n+            0x11 0x2B 0xB2 0x00 0x4C 0xBA 0x00 0x50 0x00 0x00 0xB6 0x00;\n+            0x19 0x05 0xAC 0xB2 0x00 0x4C 0x04 0x9F 0x00 0x11 0x2B 0xB2;\n+            0x00 0x4C 0xBA 0x00 0x53 0x00 0x00 0xB6 0x00 0x19 0x05 0xAC;\n+            0xB2 0x00 0x54 0xB2 0x00 0x57 0x9F 0x00 0x14 0x2B 0xB2 0x00;\n+            0x54 0xB2 0x00 0x57 0xBA 0x00 0x5A 0x00 0x00 0xB6 0x00 0x19;\n+            0x05 0xAC 0xB2 0x00 0x54 0x10 0x0B 0x9F 0x00 0x11 0x2B 0xB2;\n+            0x00 0x54 0xBA 0x00 0x5D 0x00 0x00 0xB6 0x00 0x19 0x05 0xAC;\n+            0xB2 0x00 0x5E 0x07 0x9F 0x00 0x11 0x2B 0xB2 0x00 0x5E 0xBA;\n+            0x00 0x62 0x00 0x00 0xB6 0x00 0x19 0x05 0xAC 0xB2 0x00 0x5E;\n+            0x07 0x9F 0x00 0x11 0x2B 0xB2 0x00 0x5E 0xBA 0x00 0x62 0x00;\n+            0x00 0xB6 0x00 0x19 0x05 0xAC 0xB2 0x00 0x65 0xB2 0x00 0x68;\n+            0x9F 0x00 0x14 0x2B 0xB2 0x00 0x65 0xB2 0x00 0x68 0xBA 0x00;\n+            0x6B 0x00 0x00 0xB6 0x00 0x19 0x05 0xAC 0xB2 0x00 0x65 0x10;\n+            0x0E 0x9F 0x00 0x11 0x2B 0xB2 0x00 0x65 0xBA 0x00 0x6E 0x00;\n+            0x00 0xB6 0x00 0x19 0x05 0xAC 0xB2 0x00 0x6F 0x14 0x00 0x73;\n+            0x94 0x99 0x00 0x11 0x2B 0xB2 0x00 0x6F 0xBA 0x00 0x75 0x00;\n+            0x00 0xB6 0x00 0x19 0x05 0xAC 0xB2 0x00 0x6F 0x14 0x00 0x73;\n+            0x94 0x99 0x00 0x11 0x2B 0xB2 0x00 0x6F 0xBA 0x00 0x75 0x00;\n+            0x00 0xB6 0x00 0x19 0x05 0xAC 0xB2 0x00 0x78 0xB2 0x00 0x7B;\n+            0x94 0x99 0x00 0x14 0x2B 0xB2 0x00 0x78 0xB2 0x00 0x7B 0xBA;\n+            0x00 0x7E 0x00 0x00 0xB6 0x00 0x19 0x05 0xAC 0xB2 0x00 0x78;\n+            0x14 0x00 0x81 0x94 0x99 0x00 0x11 0x2B 0xB2 0x00 0x78 0xBA;\n+            0x00 0x83 0x00 0x00 0xB6 0x00 0x19 0x05 0xAC 0xB2 0x00 0x84;\n+            0x12 0x88 0x95 0x99 0x00 0x11 0x2B 0xB2 0x00 0x84 0xBA 0x00;\n+            0x89 0x00 0x00 0xB6 0x00 0x19 0x05 0xAC 0xB2 0x00 0x84 0x12;\n+            0x88 0x95 0x99 0x00 0x11 0x2B 0xB2 0x00 0x84 0xBA 0x00 0x8C;\n+            0x00 0x00 0xB6 0x00 0x19 0x05 0xAC 0xB2 0x00 0x8D 0xB2 0x00;\n+            0x90 0x95 0x99 0x00 0x14 0x2B 0xB2 0x00 0x8D 0xB2 0x00 0x90;\n+            0xBA 0x00 0x93 0x00 0x00 0xB6 0x00 0x19 0x05 0xAC 0xB2 0x00;\n+            0x8D 0x12 0x96 0x95 0x99 0x00 0x11 0x2B 0xB2 0x00 0x8D 0xBA;\n+            0x00 0x97 0x00 0x00 0xB6 0x00 0x19 0x05 0xAC 0xB2 0x00 0x98;\n+            0x14 0x00 0x9C 0x97 0x99 0x00 0x11 0x2B 0xB2 0x00 0x98 0xBA;\n+            0x00 0x9E 0x00 0x00 0xB6 0x00 0x19 0x05 0xAC 0xB2 0x00 0x98;\n+            0x14 0x00 0x9C 0x97 0x99 0x00 0x11 0x2B 0xB2 0x00 0x98 0xBA;\n+            0x00 0xA1 0x00 0x00 0xB6 0x00 0x19 0x05 0xAC 0xB2 0x00 0xA2;\n+            0xB2 0x00 0xA5 0x97 0x99 0x00 0x14 0x2B 0xB2 0x00 0xA2 0xB2;\n+            0x00 0xA5 0xBA 0x00 0xA8 0x00 0x00 0xB6 0x00 0x19 0x05 0xAC;\n+            0xB2 0x00 0xA2 0x14 0x00 0xAB 0x97 0x99 0x00 0x11 0x2B 0xB2;\n+            0x00 0xA2 0xBA 0x00 0xAD 0x00 0x00 0xB6 0x00 0x19 0x05 0xAC;\n+            0x03 0xAC;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#189) {                   \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   17;\n+                  11   18;\n+                  23   19;\n+                  25   21;\n+                  36   22;\n+                  48   23;\n+                  50   27;\n+                  62   28;\n+                  77   29;\n+                  79   31;\n+                  90   32;\n+                 102   33;\n+                 104   37;\n+                 111   38;\n+                 123   39;\n+                 125   41;\n+                 132   42;\n+                 144   43;\n+                 146   47;\n+                 155   48;\n+                 170   49;\n+                 172   51;\n+                 178   52;\n+                 190   53;\n+                 192   57;\n+                 199   58;\n+                 211   59;\n+                 213   61;\n+                 220   62;\n+                 232   63;\n+                 234   67;\n+                 243   68;\n+                 258   69;\n+                 260   71;\n+                 268   72;\n+                 280   73;\n+                 282   77;\n+                 289   78;\n+                 301   79;\n+                 303   81;\n+                 310   82;\n+                 322   83;\n+                 324   87;\n+                 333   88;\n+                 348   89;\n+                 350   91;\n+                 358   92;\n+                 370   93;\n+                 372   97;\n+                 379   98;\n+                 391   99;\n+                 393  101;\n+                 400  102;\n+                 412  103;\n+                 414  107;\n+                 423  108;\n+                 438  109;\n+                 440  111;\n+                 448  112;\n+                 460  113;\n+                 462  117;\n+                 472  118;\n+                 484  119;\n+                 486  121;\n+                 496  122;\n+                 508  123;\n+                 510  127;\n+                 520  128;\n+                 535  129;\n+                 537  131;\n+                 547  132;\n+                 559  133;\n+                 561  137;\n+                 570  138;\n+                 582  139;\n+                 584  141;\n+                 593  142;\n+                 605  143;\n+                 607  147;\n+                 617  148;\n+                 632  149;\n+                 634  151;\n+                 643  152;\n+                 655  153;\n+                 657  157;\n+                 667  158;\n+                 679  159;\n+                 681  161;\n+                 691  162;\n+                 703  163;\n+                 705  167;\n+                 715  168;\n+                 730  169;\n+                 732  171;\n+                 742  172;\n+                 754  173;\n+                 756  176;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+            ;\n+            Attr(#190) {                   \/\/ StackMapTable\n+              [] {                         \/\/ \n+                25b;                       \/\/ same_frame\n+                24b;                       \/\/ same_frame\n+                28b;                       \/\/ same_frame\n+                24b;                       \/\/ same_frame\n+                20b;                       \/\/ same_frame\n+                20b;                       \/\/ same_frame\n+                25b;                       \/\/ same_frame\n+                19b;                       \/\/ same_frame\n+                20b;                       \/\/ same_frame\n+                20b;                       \/\/ same_frame\n+                25b;                       \/\/ same_frame\n+                21b;                       \/\/ same_frame\n+                20b;                       \/\/ same_frame\n+                20b;                       \/\/ same_frame\n+                25b;                       \/\/ same_frame\n+                21b;                       \/\/ same_frame\n+                20b;                       \/\/ same_frame\n+                20b;                       \/\/ same_frame\n+                25b;                       \/\/ same_frame\n+                21b;                       \/\/ same_frame\n+                23b;                       \/\/ same_frame\n+                23b;                       \/\/ same_frame\n+                26b;                       \/\/ same_frame\n+                23b;                       \/\/ same_frame\n+                22b;                       \/\/ same_frame\n+                22b;                       \/\/ same_frame\n+                26b;                       \/\/ same_frame\n+                22b;                       \/\/ same_frame\n+                23b;                       \/\/ same_frame\n+                23b;                       \/\/ same_frame\n+                26b;                       \/\/ same_frame\n+                23b;                       \/\/ same_frame\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #191;                                \/\/ name_index\n+      #192;                                \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#188) {                       \/\/ Code\n+          2;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB2 0x00 0xAE 0xB8 0x00 0xB4 0x10 0x5F 0x60 0xB8 0x00;\n+            0xB8 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#189) {                   \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0  180;\n+                  13  181;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#193) {                           \/\/ SourceFile\n+      #194;\n+    }                                      \/\/ end of SourceFile\n+    ;\n+    Attr(#195) {                           \/\/ BootstrapMethods\n+      [] {                                 \/\/ bootstrap_methods\n+        {                                  \/\/ bootstrap_method\n+          #238;                            \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #196;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #238;                            \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #198;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #238;                            \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #200;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #238;                            \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #202;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #238;                            \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #204;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #238;                            \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #206;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #238;                            \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #208;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #238;                            \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #210;\n+            #212;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #238;                            \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #214;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #238;                            \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #216;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #238;                            \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #218;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #238;                            \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #220;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #238;                            \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #222;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #238;                            \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #224;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #238;                            \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #226;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #238;                            \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #228;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #238;                            \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #230;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #238;                            \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #232;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #238;                            \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #234;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #238;                            \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #236;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+      }\n+    }                                      \/\/ end of BootstrapMethods\n+    ;\n+    Attr(#244) {                           \/\/ InnerClasses\n+      [] {                                 \/\/ classes\n+         #245  #247  #249  25;\n+      }\n+    }                                      \/\/ end of InnerClasses\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00402m1.jcod","additions":692,"deletions":0,"binary":false,"changes":692,"status":"added"},{"patch":"@@ -0,0 +1,507 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl004\/atrcvl00402m1\/atrcvl00402m1t {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Field #112 #54;                        \/\/ #1\n+    Field #112 #56;                        \/\/ #2\n+    Field #112 #109;                       \/\/ #3\n+    Field #112 #38;                        \/\/ #4\n+    Field #112 #50;                        \/\/ #5\n+    Field #112 #89;                        \/\/ #6\n+    Field #112 #105;                       \/\/ #7\n+    Field #112 #61;                        \/\/ #8\n+    Field #112 #47;                        \/\/ #9\n+    Field #112 #74;                        \/\/ #10\n+    Field #112 #110;                       \/\/ #11\n+    Field #112 #136;                       \/\/ #12\n+    Field #112 #77;                        \/\/ #13\n+    Field #112 #101;                       \/\/ #14\n+    Field #112 #113;                       \/\/ #15\n+    Field #112 #76;                        \/\/ #16\n+    Field #112 #124;                       \/\/ #17\n+    Field #112 #85;                        \/\/ #18\n+    Field #112 #96;                        \/\/ #19\n+    Field #112 #57;                        \/\/ #20\n+    Field #112 #60;                        \/\/ #21\n+    Field #112 #95;                        \/\/ #22\n+    Field #112 #42;                        \/\/ #23\n+    Field #112 #43;                        \/\/ #24\n+    Method #46 #106;                       \/\/ #25\n+    Field #112 #98;                        \/\/ #26\n+    Field #112 #68;                        \/\/ #27\n+    Field #112 #119;                       \/\/ #28\n+    Field #112 #102;                       \/\/ #29\n+    Field #112 #111;                       \/\/ #30\n+    Field #112 #84;                        \/\/ #31\n+    Field #112 #127;                       \/\/ #32\n+    Field #112 #37;                        \/\/ #33\n+    Utf8 \"sfByteMirror\";                   \/\/ #34\n+    Utf8 \"sfChar\";                         \/\/ #35\n+    Utf8 \"sLongMirror\";                    \/\/ #36\n+    NameAndType #94 #116;                  \/\/ #37\n+    NameAndType #83 #128;                  \/\/ #38\n+    Utf8 \"ConstantValue\";                  \/\/ #39\n+    Utf8 \"B\";                              \/\/ #40\n+    Utf8 \"sBooleanMirror\";                 \/\/ #41\n+    NameAndType #70 #81;                   \/\/ #42\n+    NameAndType #73 #134;                  \/\/ #43\n+    Utf8 \"sfLong\";                         \/\/ #44\n+    Float 0x40C00000;                      \/\/ #45\n+    Class #92;                             \/\/ #46\n+    NameAndType #71 #135;                  \/\/ #47\n+    Integer 0x00000004;                    \/\/ #48\n+    Utf8 \"sfString\";                       \/\/ #49\n+    NameAndType #66 #128;                  \/\/ #50\n+    Integer 0x0000000E;                    \/\/ #51\n+    Utf8 \"sfBoolean\";                      \/\/ #52\n+    Utf8 \"sfDouble\";                       \/\/ #53\n+    NameAndType #93 #81;                   \/\/ #54\n+    Utf8 \"sByte\";                          \/\/ #55\n+    NameAndType #41 #125;                  \/\/ #56\n+    NameAndType #107 #135;                 \/\/ #57\n+    Utf8 \"sfDoubleMirror\";                 \/\/ #58\n+    Utf8 \"J\";                              \/\/ #59\n+    NameAndType #34 #40;                   \/\/ #60\n+    NameAndType #91 #59;                   \/\/ #61\n+    Utf8 \"sfFloatMirror\";                  \/\/ #62\n+    Double 0x401C000000000000;;            \/\/ #63\n+    Integer 0x00000002;                    \/\/ #65\n+    Utf8 \"sDoubleMirror\";                  \/\/ #66\n+    Utf8 \"Code\";                           \/\/ #67\n+    NameAndType #75 #116;                  \/\/ #68\n+    Utf8 \"sFloatMirror\";                   \/\/ #69\n+    Utf8 \"sShort\";                         \/\/ #70\n+    Utf8 \"sChar\";                          \/\/ #71\n+    Integer 0x0000000C;                    \/\/ #72\n+    Utf8 \"sString\";                        \/\/ #73\n+    NameAndType #121 #134;                 \/\/ #74\n+    Utf8 \"sFloat\";                         \/\/ #75\n+    NameAndType #117 #125;                 \/\/ #76\n+    NameAndType #49 #134;                  \/\/ #77\n+    Long 0x0000000000000005;;              \/\/ #78\n+    Integer 0x00000001;                    \/\/ #80\n+    Utf8 \"S\";                              \/\/ #81\n+    String #49;                            \/\/ #82\n+    Utf8 \"sDouble\";                        \/\/ #83\n+    NameAndType #118 #134;                 \/\/ #84\n+    NameAndType #132 #59;                  \/\/ #85\n+    Long 0x000000000000000F;;              \/\/ #86\n+    Utf8 \"sfShort\";                        \/\/ #88\n+    NameAndType #120 #135;                 \/\/ #89\n+    Integer 0x0000000B;                    \/\/ #90\n+    Utf8 \"sLong\";                          \/\/ #91\n+    Utf8 \"java\/lang\/Object\";               \/\/ #92\n+    Utf8 \"sfShortMirror\";                  \/\/ #93\n+    Utf8 \"sfFloat\";                        \/\/ #94\n+    NameAndType #126 #81;                  \/\/ #95\n+    NameAndType #133 #40;                  \/\/ #96\n+    Utf8 \"()V\";                            \/\/ #97\n+    NameAndType #58 #128;                  \/\/ #98\n+    Integer 0x00000000;                    \/\/ #99\n+    Utf8 \"<clinit>\";                       \/\/ #100\n+    NameAndType #52 #125;                  \/\/ #101\n+    NameAndType #44 #59;                   \/\/ #102\n+    Double 0x4031000000000000;;            \/\/ #103\n+    NameAndType #62 #116;                  \/\/ #105\n+    NameAndType #108 #97;                  \/\/ #106\n+    Utf8 \"sfCharMirror\";                   \/\/ #107\n+    Utf8 \"<init>\";                         \/\/ #108\n+    NameAndType #53 #128;                  \/\/ #109\n+    NameAndType #129 #125;                 \/\/ #110\n+    NameAndType #35 #135;                  \/\/ #111\n+    Class #131;                            \/\/ #112\n+    NameAndType #36 #59;                   \/\/ #113\n+    Utf8 \"atrcvl00402m1t.jasm\";            \/\/ #114\n+    Float 0x41800000;                      \/\/ #115\n+    Utf8 \"F\";                              \/\/ #116\n+    Utf8 \"sBoolean\";                       \/\/ #117\n+    Utf8 \"sfStringMirror\";                 \/\/ #118\n+    NameAndType #55 #40;                   \/\/ #119\n+    Utf8 \"sCharMirror\";                    \/\/ #120\n+    Utf8 \"sStringMirror\";                  \/\/ #121\n+    Utf8 \"SourceFile\";                     \/\/ #122\n+    String #73;                            \/\/ #123\n+    NameAndType #88 #81;                   \/\/ #124\n+    Utf8 \"Z\";                              \/\/ #125\n+    Utf8 \"sShortMirror\";                   \/\/ #126\n+    NameAndType #69 #116;                  \/\/ #127\n+    Utf8 \"D\";                              \/\/ #128\n+    Utf8 \"sfBooleanMirror\";                \/\/ #129\n+    Utf8 \"sfByte\";                         \/\/ #130\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl004\/atrcvl00402m1\/atrcvl00402m1t\";  \/\/ #131\n+    Utf8 \"sfLongMirror\";                   \/\/ #132\n+    Utf8 \"sByteMirror\";                    \/\/ #133\n+    Utf8 \"Ljava\/lang\/String;\";             \/\/ #134\n+    Utf8 \"C\";                              \/\/ #135\n+    NameAndType #130 #40;                  \/\/ #136\n+  }\n+\n+  0x0000;                                  \/\/ access\n+  #112;                                    \/\/ this_cpx\n+  #46;                                     \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #49;                                 \/\/ name_index\n+      #134;                                \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#39) {                        \/\/ ConstantValue\n+          #82;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ field\n+      0x0008;                              \/\/ access\n+      #118;                                \/\/ name_index\n+      #134;                                \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ field\n+      0x0008;                              \/\/ access\n+      #73;                                 \/\/ name_index\n+      #134;                                \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#39) {                        \/\/ ConstantValue\n+          #123;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ field\n+      0x0008;                              \/\/ access\n+      #121;                                \/\/ name_index\n+      #134;                                \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #52;                                 \/\/ name_index\n+      #125;                                \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#39) {                        \/\/ ConstantValue\n+          #80;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ field\n+      0x0008;                              \/\/ access\n+      #129;                                \/\/ name_index\n+      #125;                                \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ field\n+      0x0008;                              \/\/ access\n+      #117;                                \/\/ name_index\n+      #125;                                \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#39) {                        \/\/ ConstantValue\n+          #99;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ field\n+      0x0008;                              \/\/ access\n+      #41;                                 \/\/ name_index\n+      #125;                                \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #88;                                 \/\/ name_index\n+      #81;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#39) {                        \/\/ ConstantValue\n+          #65;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ field\n+      0x0008;                              \/\/ access\n+      #93;                                 \/\/ name_index\n+      #81;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ field\n+      0x0008;                              \/\/ access\n+      #70;                                 \/\/ name_index\n+      #81;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#39) {                        \/\/ ConstantValue\n+          #72;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ field\n+      0x0008;                              \/\/ access\n+      #126;                                \/\/ name_index\n+      #81;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #35;                                 \/\/ name_index\n+      #135;                                \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#39) {                        \/\/ ConstantValue\n+          #80;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ field\n+      0x0008;                              \/\/ access\n+      #107;                                \/\/ name_index\n+      #135;                                \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ field\n+      0x0008;                              \/\/ access\n+      #71;                                 \/\/ name_index\n+      #135;                                \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#39) {                        \/\/ ConstantValue\n+          #90;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ field\n+      0x0008;                              \/\/ access\n+      #120;                                \/\/ name_index\n+      #135;                                \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #130;                                \/\/ name_index\n+      #40;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#39) {                        \/\/ ConstantValue\n+          #48;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ field\n+      0x0008;                              \/\/ access\n+      #34;                                 \/\/ name_index\n+      #40;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ field\n+      0x0008;                              \/\/ access\n+      #55;                                 \/\/ name_index\n+      #40;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#39) {                        \/\/ ConstantValue\n+          #51;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ field\n+      0x0008;                              \/\/ access\n+      #133;                                \/\/ name_index\n+      #40;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #44;                                 \/\/ name_index\n+      #59;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#39) {                        \/\/ ConstantValue\n+          #78;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ field\n+      0x0008;                              \/\/ access\n+      #132;                                \/\/ name_index\n+      #59;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ field\n+      0x0008;                              \/\/ access\n+      #91;                                 \/\/ name_index\n+      #59;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#39) {                        \/\/ ConstantValue\n+          #86;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ field\n+      0x0008;                              \/\/ access\n+      #36;                                 \/\/ name_index\n+      #59;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #94;                                 \/\/ name_index\n+      #116;                                \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#39) {                        \/\/ ConstantValue\n+          #45;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ field\n+      0x0008;                              \/\/ access\n+      #62;                                 \/\/ name_index\n+      #116;                                \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ field\n+      0x0008;                              \/\/ access\n+      #75;                                 \/\/ name_index\n+      #116;                                \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#39) {                        \/\/ ConstantValue\n+          #115;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ field\n+      0x0008;                              \/\/ access\n+      #69;                                 \/\/ name_index\n+      #116;                                \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #53;                                 \/\/ name_index\n+      #128;                                \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#39) {                        \/\/ ConstantValue\n+          #63;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ field\n+      0x0008;                              \/\/ access\n+      #58;                                 \/\/ name_index\n+      #128;                                \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ field\n+      0x0008;                              \/\/ access\n+      #83;                                 \/\/ name_index\n+      #128;                                \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#39) {                        \/\/ ConstantValue\n+          #103;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ field\n+      0x0008;                              \/\/ access\n+      #66;                                 \/\/ name_index\n+      #128;                                \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #108;                                \/\/ name_index\n+      #97;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#67) {                        \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x19 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0008;                              \/\/ access\n+      #100;                                \/\/ name_index\n+      #97;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#67) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          0;                               \/\/ max_locals\n+          Bytes[]{\n+            0xB2 0x00 0x0D 0xB3 0x00 0x1F 0xB2 0x00 0x18 0xB3 0x00 0x0A;\n+            0xB2 0x00 0x0E 0xB3 0x00 0x0B 0xB2 0x00 0x10 0xB3 0x00 0x02;\n+            0xB2 0x00 0x11 0xB3 0x00 0x01 0xB2 0x00 0x17 0xB3 0x00 0x16;\n+            0xB2 0x00 0x1E 0xB3 0x00 0x14 0xB2 0x00 0x09 0xB3 0x00 0x06;\n+            0xB2 0x00 0x0C 0xB3 0x00 0x15 0xB2 0x00 0x1C 0xB3 0x00 0x13;\n+            0xB2 0x00 0x1D 0xB3 0x00 0x12 0xB2 0x00 0x08 0xB3 0x00 0x0F;\n+            0xB2 0x00 0x21 0xB3 0x00 0x07 0xB2 0x00 0x1B 0xB3 0x00 0x20;\n+            0xB2 0x00 0x03 0xB3 0x00 0x1A 0xB2 0x00 0x04 0xB3 0x00 0x05;\n+            0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#122) {                           \/\/ SourceFile\n+      #114;\n+    }                                      \/\/ end of SourceFile\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00402m1t.jcod","additions":507,"deletions":0,"binary":false,"changes":507,"status":"added"},{"patch":"@@ -0,0 +1,239 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl005\/atrcvl00501m1\/atrcvl00501m1 {\n+  0xCAFEBABE;\n+  0;                                       \/\/ minor version\n+  67;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Method #2 #3;                          \/\/ #1\n+    Class #4;                              \/\/ #2\n+    NameAndType #5 #6;                     \/\/ #3\n+    Utf8 \"java\/lang\/Object\";               \/\/ #4\n+    Utf8 \"<init>\";                         \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    String #8;                             \/\/ #7\n+    Utf8 \"javasoft.sqe.tests.vm.classfmt.atr.atrcvl005.atrcvl00501m1.atrcvl00501m1p\";  \/\/ #8\n+    Method #10 #11;                        \/\/ #9\n+    Class #12;                             \/\/ #10\n+    NameAndType #13 #14;                   \/\/ #11\n+    Utf8 \"java\/lang\/Class\";                \/\/ #12\n+    Utf8 \"forName\";                        \/\/ #13\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/Class;\";  \/\/ #14\n+    Method #10 #16;                        \/\/ #15\n+    NameAndType #17 #18;                   \/\/ #16\n+    Utf8 \"newInstance\";                    \/\/ #17\n+    Utf8 \"()Ljava\/lang\/Object;\";           \/\/ #18\n+    Class #20;                             \/\/ #19\n+    Utf8 \"java\/lang\/Throwable\";            \/\/ #20\n+    Method #22 #23;                        \/\/ #21\n+    Class #24;                             \/\/ #22\n+    NameAndType #25 #26;                   \/\/ #23\n+    Utf8 \"java\/lang\/String\";               \/\/ #24\n+    Utf8 \"valueOf\";                        \/\/ #25\n+    Utf8 \"(Ljava\/lang\/Object;)Ljava\/lang\/String;\";  \/\/ #26\n+    InvokeDynamic 0s #28;                  \/\/ #27\n+    NameAndType #29 #30;                   \/\/ #28\n+    Utf8 \"makeConcatWithConstants\";        \/\/ #29\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/String;\";  \/\/ #30\n+    Method #32 #33;                        \/\/ #31\n+    Class #34;                             \/\/ #32\n+    NameAndType #35 #36;                   \/\/ #33\n+    Utf8 \"java\/io\/PrintStream\";            \/\/ #34\n+    Utf8 \"println\";                        \/\/ #35\n+    Utf8 \"(Ljava\/lang\/String;)V\";          \/\/ #36\n+    String #38;                            \/\/ #37\n+    Utf8 \"javasoft.sqe.tests.vm.classfmt.atr.atrcvl005.atrcvl00501m1.atrcvl00501m1n\";  \/\/ #38\n+    String #40;                            \/\/ #39\n+    Utf8 \"test atrcvl00501m1 failed to reject bad classfile atrcvl00501m1n\";  \/\/ #40\n+    Class #42;                             \/\/ #41\n+    Utf8 \"java\/lang\/ClassFormatError\";     \/\/ #42\n+    InvokeDynamic 1s #28;                  \/\/ #43\n+    Field #45 #46;                         \/\/ #44\n+    Class #47;                             \/\/ #45\n+    NameAndType #48 #49;                   \/\/ #46\n+    Utf8 \"java\/lang\/System\";               \/\/ #47\n+    Utf8 \"out\";                            \/\/ #48\n+    Utf8 \"Ljava\/io\/PrintStream;\";          \/\/ #49\n+    Method #51 #52;                        \/\/ #50\n+    Class #53;                             \/\/ #51\n+    NameAndType #54 #55;                   \/\/ #52\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl005\/atrcvl00501m1\/atrcvl00501m1\";  \/\/ #53\n+    Utf8 \"run\";                            \/\/ #54\n+    Utf8 \"([Ljava\/lang\/String;Ljava\/io\/PrintStream;)I\";  \/\/ #55\n+    Method #45 #57;                        \/\/ #56\n+    NameAndType #58 #59;                   \/\/ #57\n+    Utf8 \"exit\";                           \/\/ #58\n+    Utf8 \"(I)V\";                           \/\/ #59\n+    Utf8 \"Code\";                           \/\/ #60\n+    Utf8 \"LineNumberTable\";                \/\/ #61\n+    Utf8 \"StackMapTable\";                  \/\/ #62\n+    Utf8 \"main\";                           \/\/ #63\n+    Utf8 \"([Ljava\/lang\/String;)V\";         \/\/ #64\n+    Utf8 \"SourceFile\";                     \/\/ #65\n+    Utf8 \"atrcvl00501m1.java\";             \/\/ #66\n+    Utf8 \"BootstrapMethods\";               \/\/ #67\n+    String #69;                            \/\/ #68\n+    Utf8 \"test atrcvl00501m1 failed to load or instantiate good classfile atrcvl00501m1p: \\u0001\";  \/\/ #69\n+    String #71;                            \/\/ #70\n+    Utf8 \"test atrcvl00501m1 failed with unexpected loading exception: \\u0001\";  \/\/ #71\n+    MethodHandle 6b #73;                   \/\/ #72\n+    Method #74 #75;                        \/\/ #73\n+    Class #76;                             \/\/ #74\n+    NameAndType #29 #77;                   \/\/ #75\n+    Utf8 \"java\/lang\/invoke\/StringConcatFactory\";  \/\/ #76\n+    Utf8 \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";  \/\/ #77\n+    Utf8 \"InnerClasses\";                   \/\/ #78\n+    Class #80;                             \/\/ #79\n+    Utf8 \"java\/lang\/invoke\/MethodHandles$Lookup\";  \/\/ #80\n+    Class #82;                             \/\/ #81\n+    Utf8 \"java\/lang\/invoke\/MethodHandles\";  \/\/ #82\n+    Utf8 \"Lookup\";                         \/\/ #83\n+  }\n+\n+  0x0021;                                  \/\/ access\n+  #51;                                     \/\/ this_cpx\n+  #2;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #5;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#60) {                        \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x01 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#61) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   11;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #54;                                 \/\/ name_index\n+      #55;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#60) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          4;                               \/\/ max_locals\n+          Bytes[]{\n+            0x12 0x07 0xB8 0x00 0x09 0x4D 0x2C 0xB6 0x00 0x0F 0x4E 0xA7;\n+            0x00 0x13 0x4D 0x2B 0x2C 0xB8 0x00 0x15 0xBA 0x00 0x1B 0x00;\n+            0x00 0xB6 0x00 0x1F 0x05 0xAC 0x12 0x25 0xB8 0x00 0x09 0x4D;\n+            0x2B 0x12 0x27 0xB6 0x00 0x1F 0x05 0xAC 0x4D 0xA7 0x00 0x13;\n+            0x4D 0x2B 0x2C 0xB8 0x00 0x15 0xBA 0x00 0x2B 0x00 0x00 0xB6;\n+            0x00 0x1F 0x05 0xAC 0x03 0xAC;\n+          }\n+          [] {                             \/\/ Traps\n+               0   11   14  19;\n+              30   43   44  41;\n+              30   43   48  19;\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#61) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   16;\n+                   6   17;\n+                  11   21;\n+                  14   18;\n+                  15   19;\n+                  28   20;\n+                  30   24;\n+                  36   25;\n+                  42   26;\n+                  44   27;\n+                  45   32;\n+                  48   29;\n+                  49   30;\n+                  62   31;\n+                  64   34;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+            ;\n+            Attr(#62) {                    \/\/ StackMapTable\n+              [] {                         \/\/ \n+                78b, []z{O,#19};           \/\/ same_locals_1_stack_item_frame\n+                15b;                       \/\/ same_frame\n+                77b, []z{O,#41};           \/\/ same_locals_1_stack_item_frame\n+                67b, []z{O,#19};           \/\/ same_locals_1_stack_item_frame\n+                15b;                       \/\/ same_frame\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #63;                                 \/\/ name_index\n+      #64;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#60) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB2 0x00 0x2C 0xB8 0x00 0x32 0x10 0x5F 0x60 0xB8 0x00;\n+            0x38 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#61) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   38;\n+                  13   39;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#65) {                            \/\/ SourceFile\n+      #66;\n+    }                                      \/\/ end of SourceFile\n+    ;\n+    Attr(#67) {                            \/\/ BootstrapMethods\n+      [] {                                 \/\/ bootstrap_methods\n+        {                                  \/\/ bootstrap_method\n+          #72;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #68;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #72;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #70;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+      }\n+    }                                      \/\/ end of BootstrapMethods\n+    ;\n+    Attr(#78) {                            \/\/ InnerClasses\n+      [] {                                 \/\/ classes\n+          #79   #81   #83  25;\n+      }\n+    }                                      \/\/ end of InnerClasses\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00501m1.jcod","additions":239,"deletions":0,"binary":false,"changes":239,"status":"added"},{"patch":"@@ -0,0 +1,71 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl005\/atrcvl00501m1\/atrcvl00501m1n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"I\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl005\/atrcvl00501m1\/atrcvl00501m1n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#0) {                         \/\/ #0\n+          0x00 0x01;\n+        }                                  \/\/ end of #0\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00501m1n.jcod","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -0,0 +1,71 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl005\/atrcvl00501m1\/atrcvl00501m1p {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"I\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl005\/atrcvl00501m1\/atrcvl00501m1p\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #1;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00501m1p.jcod","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -0,0 +1,239 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl005\/atrcvl00502m1\/atrcvl00502m1 {\n+  0xCAFEBABE;\n+  0;                                       \/\/ minor version\n+  67;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Method #2 #3;                          \/\/ #1\n+    Class #4;                              \/\/ #2\n+    NameAndType #5 #6;                     \/\/ #3\n+    Utf8 \"java\/lang\/Object\";               \/\/ #4\n+    Utf8 \"<init>\";                         \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    String #8;                             \/\/ #7\n+    Utf8 \"javasoft.sqe.tests.vm.classfmt.atr.atrcvl005.atrcvl00502m1.atrcvl00502m1p\";  \/\/ #8\n+    Method #10 #11;                        \/\/ #9\n+    Class #12;                             \/\/ #10\n+    NameAndType #13 #14;                   \/\/ #11\n+    Utf8 \"java\/lang\/Class\";                \/\/ #12\n+    Utf8 \"forName\";                        \/\/ #13\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/Class;\";  \/\/ #14\n+    Method #10 #16;                        \/\/ #15\n+    NameAndType #17 #18;                   \/\/ #16\n+    Utf8 \"newInstance\";                    \/\/ #17\n+    Utf8 \"()Ljava\/lang\/Object;\";           \/\/ #18\n+    Class #20;                             \/\/ #19\n+    Utf8 \"java\/lang\/Throwable\";            \/\/ #20\n+    Method #22 #23;                        \/\/ #21\n+    Class #24;                             \/\/ #22\n+    NameAndType #25 #26;                   \/\/ #23\n+    Utf8 \"java\/lang\/String\";               \/\/ #24\n+    Utf8 \"valueOf\";                        \/\/ #25\n+    Utf8 \"(Ljava\/lang\/Object;)Ljava\/lang\/String;\";  \/\/ #26\n+    InvokeDynamic 0s #28;                  \/\/ #27\n+    NameAndType #29 #30;                   \/\/ #28\n+    Utf8 \"makeConcatWithConstants\";        \/\/ #29\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/String;\";  \/\/ #30\n+    Method #32 #33;                        \/\/ #31\n+    Class #34;                             \/\/ #32\n+    NameAndType #35 #36;                   \/\/ #33\n+    Utf8 \"java\/io\/PrintStream\";            \/\/ #34\n+    Utf8 \"println\";                        \/\/ #35\n+    Utf8 \"(Ljava\/lang\/String;)V\";          \/\/ #36\n+    String #38;                            \/\/ #37\n+    Utf8 \"javasoft.sqe.tests.vm.classfmt.atr.atrcvl005.atrcvl00502m1.atrcvl00502m1n\";  \/\/ #38\n+    String #40;                            \/\/ #39\n+    Utf8 \"test atrcvl00502m1 failed to reject bad classfile atrcvl00502m1n\";  \/\/ #40\n+    Class #42;                             \/\/ #41\n+    Utf8 \"java\/lang\/ClassFormatError\";     \/\/ #42\n+    InvokeDynamic 1s #28;                  \/\/ #43\n+    Field #45 #46;                         \/\/ #44\n+    Class #47;                             \/\/ #45\n+    NameAndType #48 #49;                   \/\/ #46\n+    Utf8 \"java\/lang\/System\";               \/\/ #47\n+    Utf8 \"out\";                            \/\/ #48\n+    Utf8 \"Ljava\/io\/PrintStream;\";          \/\/ #49\n+    Method #51 #52;                        \/\/ #50\n+    Class #53;                             \/\/ #51\n+    NameAndType #54 #55;                   \/\/ #52\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl005\/atrcvl00502m1\/atrcvl00502m1\";  \/\/ #53\n+    Utf8 \"run\";                            \/\/ #54\n+    Utf8 \"([Ljava\/lang\/String;Ljava\/io\/PrintStream;)I\";  \/\/ #55\n+    Method #45 #57;                        \/\/ #56\n+    NameAndType #58 #59;                   \/\/ #57\n+    Utf8 \"exit\";                           \/\/ #58\n+    Utf8 \"(I)V\";                           \/\/ #59\n+    Utf8 \"Code\";                           \/\/ #60\n+    Utf8 \"LineNumberTable\";                \/\/ #61\n+    Utf8 \"StackMapTable\";                  \/\/ #62\n+    Utf8 \"main\";                           \/\/ #63\n+    Utf8 \"([Ljava\/lang\/String;)V\";         \/\/ #64\n+    Utf8 \"SourceFile\";                     \/\/ #65\n+    Utf8 \"atrcvl00502m1.java\";             \/\/ #66\n+    Utf8 \"BootstrapMethods\";               \/\/ #67\n+    String #69;                            \/\/ #68\n+    Utf8 \"test atrcvl00502m1 failed to load or instantiate good classfile atrcvl00502m1p: \\u0001\";  \/\/ #69\n+    String #71;                            \/\/ #70\n+    Utf8 \"test atrcvl00502m1 failed with unexpected loading exception: \\u0001\";  \/\/ #71\n+    MethodHandle 6b #73;                   \/\/ #72\n+    Method #74 #75;                        \/\/ #73\n+    Class #76;                             \/\/ #74\n+    NameAndType #29 #77;                   \/\/ #75\n+    Utf8 \"java\/lang\/invoke\/StringConcatFactory\";  \/\/ #76\n+    Utf8 \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";  \/\/ #77\n+    Utf8 \"InnerClasses\";                   \/\/ #78\n+    Class #80;                             \/\/ #79\n+    Utf8 \"java\/lang\/invoke\/MethodHandles$Lookup\";  \/\/ #80\n+    Class #82;                             \/\/ #81\n+    Utf8 \"java\/lang\/invoke\/MethodHandles\";  \/\/ #82\n+    Utf8 \"Lookup\";                         \/\/ #83\n+  }\n+\n+  0x0021;                                  \/\/ access\n+  #51;                                     \/\/ this_cpx\n+  #2;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #5;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#60) {                        \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x01 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#61) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   11;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #54;                                 \/\/ name_index\n+      #55;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#60) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          4;                               \/\/ max_locals\n+          Bytes[]{\n+            0x12 0x07 0xB8 0x00 0x09 0x4D 0x2C 0xB6 0x00 0x0F 0x4E 0xA7;\n+            0x00 0x13 0x4D 0x2B 0x2C 0xB8 0x00 0x15 0xBA 0x00 0x1B 0x00;\n+            0x00 0xB6 0x00 0x1F 0x05 0xAC 0x12 0x25 0xB8 0x00 0x09 0x4D;\n+            0x2B 0x12 0x27 0xB6 0x00 0x1F 0x05 0xAC 0x4D 0xA7 0x00 0x13;\n+            0x4D 0x2B 0x2C 0xB8 0x00 0x15 0xBA 0x00 0x2B 0x00 0x00 0xB6;\n+            0x00 0x1F 0x05 0xAC 0x03 0xAC;\n+          }\n+          [] {                             \/\/ Traps\n+               0   11   14  19;\n+              30   43   44  41;\n+              30   43   48  19;\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#61) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   16;\n+                   6   17;\n+                  11   21;\n+                  14   18;\n+                  15   19;\n+                  28   20;\n+                  30   24;\n+                  36   25;\n+                  42   26;\n+                  44   27;\n+                  45   32;\n+                  48   29;\n+                  49   30;\n+                  62   31;\n+                  64   34;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+            ;\n+            Attr(#62) {                    \/\/ StackMapTable\n+              [] {                         \/\/ \n+                78b, []z{O,#19};           \/\/ same_locals_1_stack_item_frame\n+                15b;                       \/\/ same_frame\n+                77b, []z{O,#41};           \/\/ same_locals_1_stack_item_frame\n+                67b, []z{O,#19};           \/\/ same_locals_1_stack_item_frame\n+                15b;                       \/\/ same_frame\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #63;                                 \/\/ name_index\n+      #64;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#60) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB2 0x00 0x2C 0xB8 0x00 0x32 0x10 0x5F 0x60 0xB8 0x00;\n+            0x38 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#61) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   38;\n+                  13   39;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#65) {                            \/\/ SourceFile\n+      #66;\n+    }                                      \/\/ end of SourceFile\n+    ;\n+    Attr(#67) {                            \/\/ BootstrapMethods\n+      [] {                                 \/\/ bootstrap_methods\n+        {                                  \/\/ bootstrap_method\n+          #72;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #68;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #72;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #70;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+      }\n+    }                                      \/\/ end of BootstrapMethods\n+    ;\n+    Attr(#78) {                            \/\/ InnerClasses\n+      [] {                                 \/\/ classes\n+          #79   #81   #83  25;\n+      }\n+    }                                      \/\/ end of InnerClasses\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00502m1.jcod","additions":239,"deletions":0,"binary":false,"changes":239,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl005\/atrcvl00502m1\/atrcvl00502m1n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"dummy\";                          \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"I\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl005\/atrcvl00502m1\/atrcvl00502m1n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"ConstantValue\";                  \/\/ #20\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        \/\/ == Corrupted class file. The bytes do not represent a valid class attribute. ==\n+        Attr(#21) {                        \/\/ #21\n+          0x00 0x01;\n+        }                                  \/\/ end of #21\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00502m1n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,72 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl005\/atrcvl00502m1\/atrcvl00502m1p {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"dummy\";                          \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"I\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl005\/atrcvl00502m1\/atrcvl00502m1p\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"ConstantValue\";                  \/\/ #20\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ dummy\n+          0x00 0x01;\n+        }                                  \/\/ end of dummy\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00502m1p.jcod","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -0,0 +1,239 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl006\/atrcvl00601m1\/atrcvl00601m1 {\n+  0xCAFEBABE;\n+  0;                                       \/\/ minor version\n+  67;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Method #2 #3;                          \/\/ #1\n+    Class #4;                              \/\/ #2\n+    NameAndType #5 #6;                     \/\/ #3\n+    Utf8 \"java\/lang\/Object\";               \/\/ #4\n+    Utf8 \"<init>\";                         \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    String #8;                             \/\/ #7\n+    Utf8 \"javasoft.sqe.tests.vm.classfmt.atr.atrcvl006.atrcvl00601m1.atrcvl00601m1p\";  \/\/ #8\n+    Method #10 #11;                        \/\/ #9\n+    Class #12;                             \/\/ #10\n+    NameAndType #13 #14;                   \/\/ #11\n+    Utf8 \"java\/lang\/Class\";                \/\/ #12\n+    Utf8 \"forName\";                        \/\/ #13\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/Class;\";  \/\/ #14\n+    Method #10 #16;                        \/\/ #15\n+    NameAndType #17 #18;                   \/\/ #16\n+    Utf8 \"newInstance\";                    \/\/ #17\n+    Utf8 \"()Ljava\/lang\/Object;\";           \/\/ #18\n+    Class #20;                             \/\/ #19\n+    Utf8 \"java\/lang\/Throwable\";            \/\/ #20\n+    Method #22 #23;                        \/\/ #21\n+    Class #24;                             \/\/ #22\n+    NameAndType #25 #26;                   \/\/ #23\n+    Utf8 \"java\/lang\/String\";               \/\/ #24\n+    Utf8 \"valueOf\";                        \/\/ #25\n+    Utf8 \"(Ljava\/lang\/Object;)Ljava\/lang\/String;\";  \/\/ #26\n+    InvokeDynamic 0s #28;                  \/\/ #27\n+    NameAndType #29 #30;                   \/\/ #28\n+    Utf8 \"makeConcatWithConstants\";        \/\/ #29\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/String;\";  \/\/ #30\n+    Method #32 #33;                        \/\/ #31\n+    Class #34;                             \/\/ #32\n+    NameAndType #35 #36;                   \/\/ #33\n+    Utf8 \"java\/io\/PrintStream\";            \/\/ #34\n+    Utf8 \"println\";                        \/\/ #35\n+    Utf8 \"(Ljava\/lang\/String;)V\";          \/\/ #36\n+    String #38;                            \/\/ #37\n+    Utf8 \"javasoft.sqe.tests.vm.classfmt.atr.atrcvl006.atrcvl00601m1.atrcvl00601m1n\";  \/\/ #38\n+    String #40;                            \/\/ #39\n+    Utf8 \"test atrcvl00601m1 failed to reject bad classfile atrcvl00601m1n\";  \/\/ #40\n+    Class #42;                             \/\/ #41\n+    Utf8 \"java\/lang\/ClassFormatError\";     \/\/ #42\n+    InvokeDynamic 1s #28;                  \/\/ #43\n+    Field #45 #46;                         \/\/ #44\n+    Class #47;                             \/\/ #45\n+    NameAndType #48 #49;                   \/\/ #46\n+    Utf8 \"java\/lang\/System\";               \/\/ #47\n+    Utf8 \"out\";                            \/\/ #48\n+    Utf8 \"Ljava\/io\/PrintStream;\";          \/\/ #49\n+    Method #51 #52;                        \/\/ #50\n+    Class #53;                             \/\/ #51\n+    NameAndType #54 #55;                   \/\/ #52\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl006\/atrcvl00601m1\/atrcvl00601m1\";  \/\/ #53\n+    Utf8 \"run\";                            \/\/ #54\n+    Utf8 \"([Ljava\/lang\/String;Ljava\/io\/PrintStream;)I\";  \/\/ #55\n+    Method #45 #57;                        \/\/ #56\n+    NameAndType #58 #59;                   \/\/ #57\n+    Utf8 \"exit\";                           \/\/ #58\n+    Utf8 \"(I)V\";                           \/\/ #59\n+    Utf8 \"Code\";                           \/\/ #60\n+    Utf8 \"LineNumberTable\";                \/\/ #61\n+    Utf8 \"StackMapTable\";                  \/\/ #62\n+    Utf8 \"main\";                           \/\/ #63\n+    Utf8 \"([Ljava\/lang\/String;)V\";         \/\/ #64\n+    Utf8 \"SourceFile\";                     \/\/ #65\n+    Utf8 \"atrcvl00601m1.java\";             \/\/ #66\n+    Utf8 \"BootstrapMethods\";               \/\/ #67\n+    String #69;                            \/\/ #68\n+    Utf8 \"test atrcvl00601m1 failed to load or instantiate good classfile atrcvl00601m1p: \\u0001\";  \/\/ #69\n+    String #71;                            \/\/ #70\n+    Utf8 \"test atrcvl00601m1 failed with unexpected loading exception: \\u0001\";  \/\/ #71\n+    MethodHandle 6b #73;                   \/\/ #72\n+    Method #74 #75;                        \/\/ #73\n+    Class #76;                             \/\/ #74\n+    NameAndType #29 #77;                   \/\/ #75\n+    Utf8 \"java\/lang\/invoke\/StringConcatFactory\";  \/\/ #76\n+    Utf8 \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";  \/\/ #77\n+    Utf8 \"InnerClasses\";                   \/\/ #78\n+    Class #80;                             \/\/ #79\n+    Utf8 \"java\/lang\/invoke\/MethodHandles$Lookup\";  \/\/ #80\n+    Class #82;                             \/\/ #81\n+    Utf8 \"java\/lang\/invoke\/MethodHandles\";  \/\/ #82\n+    Utf8 \"Lookup\";                         \/\/ #83\n+  }\n+\n+  0x0021;                                  \/\/ access\n+  #51;                                     \/\/ this_cpx\n+  #2;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #5;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#60) {                        \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x01 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#61) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   11;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #54;                                 \/\/ name_index\n+      #55;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#60) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          4;                               \/\/ max_locals\n+          Bytes[]{\n+            0x12 0x07 0xB8 0x00 0x09 0x4D 0x2C 0xB6 0x00 0x0F 0x4E 0xA7;\n+            0x00 0x13 0x4D 0x2B 0x2C 0xB8 0x00 0x15 0xBA 0x00 0x1B 0x00;\n+            0x00 0xB6 0x00 0x1F 0x05 0xAC 0x12 0x25 0xB8 0x00 0x09 0x4D;\n+            0x2B 0x12 0x27 0xB6 0x00 0x1F 0x05 0xAC 0x4D 0xA7 0x00 0x13;\n+            0x4D 0x2B 0x2C 0xB8 0x00 0x15 0xBA 0x00 0x2B 0x00 0x00 0xB6;\n+            0x00 0x1F 0x05 0xAC 0x03 0xAC;\n+          }\n+          [] {                             \/\/ Traps\n+               0   11   14  19;\n+              30   43   44  41;\n+              30   43   48  19;\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#61) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   16;\n+                   6   17;\n+                  11   21;\n+                  14   18;\n+                  15   19;\n+                  28   20;\n+                  30   24;\n+                  36   25;\n+                  42   26;\n+                  44   27;\n+                  45   32;\n+                  48   29;\n+                  49   30;\n+                  62   31;\n+                  64   34;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+            ;\n+            Attr(#62) {                    \/\/ StackMapTable\n+              [] {                         \/\/ \n+                78b, []z{O,#19};           \/\/ same_locals_1_stack_item_frame\n+                15b;                       \/\/ same_frame\n+                77b, []z{O,#41};           \/\/ same_locals_1_stack_item_frame\n+                67b, []z{O,#19};           \/\/ same_locals_1_stack_item_frame\n+                15b;                       \/\/ same_frame\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #63;                                 \/\/ name_index\n+      #64;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#60) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB2 0x00 0x2C 0xB8 0x00 0x32 0x10 0x5F 0x60 0xB8 0x00;\n+            0x38 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#61) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   38;\n+                  13   39;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#65) {                            \/\/ SourceFile\n+      #66;\n+    }                                      \/\/ end of SourceFile\n+    ;\n+    Attr(#67) {                            \/\/ BootstrapMethods\n+      [] {                                 \/\/ bootstrap_methods\n+        {                                  \/\/ bootstrap_method\n+          #72;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #68;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #72;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #70;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+      }\n+    }                                      \/\/ end of BootstrapMethods\n+    ;\n+    Attr(#78) {                            \/\/ InnerClasses\n+      [] {                                 \/\/ classes\n+          #79   #81   #83  25;\n+      }\n+    }                                      \/\/ end of InnerClasses\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00601m1.jcod","additions":239,"deletions":0,"binary":false,"changes":239,"status":"added"},{"patch":"@@ -0,0 +1,71 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl006\/atrcvl00601m1\/atrcvl00601m1n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"I\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl006\/atrcvl00601m1\/atrcvl00601m1n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#1) {                         \/\/ #1\n+          0x00 0x01;\n+        }                                  \/\/ end of #1\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00601m1n.jcod","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -0,0 +1,71 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl006\/atrcvl00601m1\/atrcvl00601m1p {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"I\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl006\/atrcvl00601m1\/atrcvl00601m1p\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #1;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00601m1p.jcod","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -0,0 +1,357 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl007\/atrcvl00701m1\/atrcvl00701m1 {\n+  0xCAFEBABE;\n+  0;                                       \/\/ minor version\n+  67;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Method #2 #3;                          \/\/ #1\n+    Class #4;                              \/\/ #2\n+    NameAndType #5 #6;                     \/\/ #3\n+    Utf8 \"java\/lang\/Object\";               \/\/ #4\n+    Utf8 \"<init>\";                         \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    String #8;                             \/\/ #7\n+    Utf8 \"atrcvl00701m10p\";                \/\/ #8\n+    Method #10 #11;                        \/\/ #9\n+    Class #12;                             \/\/ #10\n+    NameAndType #13 #14;                   \/\/ #11\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl007\/atrcvl00701m1\/atrcvl00701m1\";  \/\/ #12\n+    Utf8 \"loadPositive\";                   \/\/ #13\n+    Utf8 \"(Ljava\/lang\/String;[Ljava\/lang\/String;Ljava\/io\/PrintStream;)I\";  \/\/ #14\n+    String #16;                            \/\/ #15\n+    Utf8 \"atrcvl00701m11n\";                \/\/ #16\n+    Class #18;                             \/\/ #17\n+    Utf8 \"java\/lang\/ClassFormatError\";     \/\/ #18\n+    Method #10 #20;                        \/\/ #19\n+    NameAndType #21 #22;                   \/\/ #20\n+    Utf8 \"loadNegative\";                   \/\/ #21\n+    Utf8 \"(Ljava\/lang\/String;Ljava\/lang\/Class;[Ljava\/lang\/String;Ljava\/io\/PrintStream;)I\";  \/\/ #22\n+    InvokeDynamic 0s #24;                  \/\/ #23\n+    NameAndType #25 #26;                   \/\/ #24\n+    Utf8 \"makeConcatWithConstants\";        \/\/ #25\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/String;\";  \/\/ #26\n+    Method #28 #29;                        \/\/ #27\n+    Class #30;                             \/\/ #28\n+    NameAndType #31 #32;                   \/\/ #29\n+    Utf8 \"java\/lang\/Class\";                \/\/ #30\n+    Utf8 \"forName\";                        \/\/ #31\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/Class;\";  \/\/ #32\n+    Class #34;                             \/\/ #33\n+    Utf8 \"java\/lang\/ThreadDeath\";          \/\/ #34\n+    Class #36;                             \/\/ #35\n+    Utf8 \"java\/lang\/Throwable\";            \/\/ #36\n+    Method #38 #39;                        \/\/ #37\n+    Class #40;                             \/\/ #38\n+    NameAndType #41 #42;                   \/\/ #39\n+    Utf8 \"java\/lang\/String\";               \/\/ #40\n+    Utf8 \"valueOf\";                        \/\/ #41\n+    Utf8 \"(Ljava\/lang\/Object;)Ljava\/lang\/String;\";  \/\/ #42\n+    InvokeDynamic 1s #24;                  \/\/ #43\n+    Method #45 #46;                        \/\/ #44\n+    Class #47;                             \/\/ #45\n+    NameAndType #48 #49;                   \/\/ #46\n+    Utf8 \"java\/io\/PrintStream\";            \/\/ #47\n+    Utf8 \"println\";                        \/\/ #48\n+    Utf8 \"(Ljava\/lang\/String;)V\";          \/\/ #49\n+    Method #28 #51;                        \/\/ #50\n+    NameAndType #52 #53;                   \/\/ #51\n+    Utf8 \"isInstance\";                     \/\/ #52\n+    Utf8 \"(Ljava\/lang\/Object;)Z\";          \/\/ #53\n+    InvokeDynamic 2s #24;                  \/\/ #54\n+    InvokeDynamic 3s #24;                  \/\/ #55\n+    InvokeDynamic 4s #24;                  \/\/ #56\n+    Field #58 #59;                         \/\/ #57\n+    Class #60;                             \/\/ #58\n+    NameAndType #61 #62;                   \/\/ #59\n+    Utf8 \"java\/lang\/System\";               \/\/ #60\n+    Utf8 \"out\";                            \/\/ #61\n+    Utf8 \"Ljava\/io\/PrintStream;\";          \/\/ #62\n+    Method #10 #64;                        \/\/ #63\n+    NameAndType #65 #66;                   \/\/ #64\n+    Utf8 \"run\";                            \/\/ #65\n+    Utf8 \"([Ljava\/lang\/String;Ljava\/io\/PrintStream;)I\";  \/\/ #66\n+    Method #58 #68;                        \/\/ #67\n+    NameAndType #69 #70;                   \/\/ #68\n+    Utf8 \"exit\";                           \/\/ #69\n+    Utf8 \"(I)V\";                           \/\/ #70\n+    Utf8 \"Code\";                           \/\/ #71\n+    Utf8 \"LineNumberTable\";                \/\/ #72\n+    Utf8 \"StackMapTable\";                  \/\/ #73\n+    Class #75;                             \/\/ #74\n+    Utf8 \"[Ljava\/lang\/String;\";            \/\/ #75\n+    Utf8 \"main\";                           \/\/ #76\n+    Utf8 \"([Ljava\/lang\/String;)V\";         \/\/ #77\n+    Utf8 \"SourceFile\";                     \/\/ #78\n+    Utf8 \"atrcvl00701m1.java\";             \/\/ #79\n+    Utf8 \"BootstrapMethods\";               \/\/ #80\n+    String #82;                            \/\/ #81\n+    Utf8 \"javasoft.sqe.tests.vm.classfmt.atr.atrcvl007.atrcvl00701m1.\\u0001\";  \/\/ #82\n+    String #84;                            \/\/ #83\n+    Utf8 \"Failed with loading exception: \\u0001\";  \/\/ #84\n+    String #86;                            \/\/ #85\n+    Utf8 \"Passed with loading exception: \\u0001\";  \/\/ #86\n+    String #88;                            \/\/ #87\n+    Utf8 \"Failed with unexpected loading exception: \\u0001\";  \/\/ #88\n+    String #90;                            \/\/ #89\n+    Utf8 \"Failed to reject invalid class \\u0001\";  \/\/ #90\n+    MethodHandle 6b #92;                   \/\/ #91\n+    Method #93 #94;                        \/\/ #92\n+    Class #95;                             \/\/ #93\n+    NameAndType #25 #96;                   \/\/ #94\n+    Utf8 \"java\/lang\/invoke\/StringConcatFactory\";  \/\/ #95\n+    Utf8 \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";  \/\/ #96\n+    Utf8 \"InnerClasses\";                   \/\/ #97\n+    Class #99;                             \/\/ #98\n+    Utf8 \"java\/lang\/invoke\/MethodHandles$Lookup\";  \/\/ #99\n+    Class #101;                            \/\/ #100\n+    Utf8 \"java\/lang\/invoke\/MethodHandles\";  \/\/ #101\n+    Utf8 \"Lookup\";                         \/\/ #102\n+  }\n+\n+  0x0021;                                  \/\/ access\n+  #10;                                     \/\/ this_cpx\n+  #2;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #5;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#71) {                        \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x01 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#72) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   12;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #65;                                 \/\/ name_index\n+      #66;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#71) {                        \/\/ Code\n+          4;                               \/\/ max_stack\n+          2;                               \/\/ max_locals\n+          Bytes[]{\n+            0x12 0x07 0x2A 0x2B 0xB8 0x00 0x09 0x99 0x00 0x05 0x05 0xAC;\n+            0x12 0x0F 0x12 0x11 0x2A 0x2B 0xB8 0x00 0x13 0x99 0x00 0x05;\n+            0x05 0xAC 0x03 0xAC;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#72) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   16;\n+                  10   17;\n+                  12   18;\n+                  24   19;\n+                  26   21;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+            ;\n+            Attr(#73) {                    \/\/ StackMapTable\n+              [] {                         \/\/ \n+                12b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #13;                                 \/\/ name_index\n+      #14;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#71) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          5;                               \/\/ max_locals\n+          Bytes[]{\n+            0x01 0x4E 0x2A 0xBA 0x00 0x17 0x00 0x00 0xB8 0x00 0x1B 0x4E;\n+            0xA7 0x00 0x1A 0x3A 0x04 0x19 0x04 0xBF 0x3A 0x04 0x2C 0x19;\n+            0x04 0xB8 0x00 0x25 0xBA 0x00 0x2B 0x00 0x00 0xB6 0x00 0x2C;\n+            0x05 0xAC 0x03 0xAC          }\n+          [] {                             \/\/ Traps\n+               2   12   15  33;\n+               2   12   20  35;\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#72) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   26;\n+                   2   28;\n+                  12   34;\n+                  15   29;\n+                  17   30;\n+                  20   31;\n+                  22   32;\n+                  36   33;\n+                  38   36;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+            ;\n+            Attr(#73) {                    \/\/ StackMapTable\n+              [] {                         \/\/ \n+                255b, 15, []{O,#38; O,#74; O,#45; O,#28}, []{O,#33};  \/\/ full_frame\n+                68b, []z{O,#35};           \/\/ same_locals_1_stack_item_frame\n+                17b;                       \/\/ same_frame\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #21;                                 \/\/ name_index\n+      #22;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#71) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          6;                               \/\/ max_locals\n+          Bytes[]{\n+            0x01 0x3A 0x04 0x2A 0xBA 0x00 0x17 0x00 0x00 0xB8 0x00 0x1B;\n+            0x3A 0x04 0xA7 0x00 0x33 0x3A 0x05 0x19 0x05 0xBF 0x3A 0x05;\n+            0x2B 0x19 0x05 0xB6 0x00 0x32 0x99 0x00 0x13 0x2D 0x19 0x05;\n+            0xB8 0x00 0x25 0xBA 0x00 0x36 0x00 0x00 0xB6 0x00 0x2C 0x03;\n+            0xAC 0x2D 0x19 0x05 0xB8 0x00 0x25 0xBA 0x00 0x37 0x00 0x00;\n+            0xB6 0x00 0x2C 0x05 0xAC 0x2D 0x2A 0xBA 0x00 0x38 0x00 0x00;\n+            0xB6 0x00 0x2C 0x05 0xAC;\n+          }\n+          [] {                             \/\/ Traps\n+               3   14   17  33;\n+               3   14   22  35;\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#72) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   41;\n+                   3   43;\n+                  14   54;\n+                  17   44;\n+                  19   45;\n+                  22   46;\n+                  24   47;\n+                  33   48;\n+                  47   49;\n+                  49   51;\n+                  63   52;\n+                  65   55;\n+                  75   56;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+            ;\n+            Attr(#73) {                    \/\/ StackMapTable\n+              [] {                         \/\/ \n+                255b, 17, []{O,#38; O,#28; O,#74; O,#45; O,#28}, []{O,#33};  \/\/ full_frame\n+                68b, []z{O,#35};           \/\/ same_locals_1_stack_item_frame\n+                252b, 26, []z{O,#35};      \/\/ append_frame 1\n+                250b, 15;                  \/\/ chop_frame 1\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #76;                                 \/\/ name_index\n+      #77;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#71) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB2 0x00 0x39 0xB8 0x00 0x3F 0x10 0x5F 0x60 0xB8 0x00;\n+            0x43 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#72) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   60;\n+                  13   61;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#78) {                            \/\/ SourceFile\n+      #79;\n+    }                                      \/\/ end of SourceFile\n+    ;\n+    Attr(#80) {                            \/\/ BootstrapMethods\n+      [] {                                 \/\/ bootstrap_methods\n+        {                                  \/\/ bootstrap_method\n+          #91;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #81;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #91;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #83;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #91;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #85;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #91;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #87;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #91;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #89;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+      }\n+    }                                      \/\/ end of BootstrapMethods\n+    ;\n+    Attr(#97) {                            \/\/ InnerClasses\n+      [] {                                 \/\/ classes\n+          #98  #100  #102  25;\n+      }\n+    }                                      \/\/ end of InnerClasses\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00701m1.jcod","additions":357,"deletions":0,"binary":false,"changes":357,"status":"added"},{"patch":"@@ -0,0 +1,44 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl007\/atrcvl00701m1\/atrcvl00701m10p {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Class #4;                              \/\/ #1\n+    Class #5;                              \/\/ #2\n+    Field #2 #6;                           \/\/ #3\n+    Utf8 \"java\/lang\/Object\";               \/\/ #4\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl007\/atrcvl00701m1\/atrcvl00701m10p\";  \/\/ #5\n+    NameAndType #8 #9;                     \/\/ #6\n+    Utf8 \"ConstantValue\";                  \/\/ #7\n+    Utf8 \"number\";                         \/\/ #8\n+    Utf8 \"I\";                              \/\/ #9\n+    Integer 0x0000007B;                    \/\/ #10\n+  }\n+\n+  0x0001;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #1;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0009;                              \/\/ access\n+      #8;                                  \/\/ name_index\n+      #9;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#7) {                         \/\/ ConstantValue\n+          #10;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00701m10p.jcod","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -0,0 +1,45 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl007\/atrcvl00701m1\/atrcvl00701m11n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Class #4;                              \/\/ #1\n+    Class #5;                              \/\/ #2\n+    Field #2 #6;                           \/\/ #3\n+    Utf8 \"java\/lang\/Object\";               \/\/ #4\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl007\/atrcvl00701m1\/atrcvl00701m11n\";  \/\/ #5\n+    NameAndType #8 #9;                     \/\/ #6\n+    Utf8 \"ConstantValue\";                  \/\/ #7\n+    Utf8 \"number\";                         \/\/ #8\n+    Utf8 \"I\";                              \/\/ #9\n+    Integer 0x0000007B;                    \/\/ #10\n+  }\n+\n+  0x0001;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #1;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0009;                              \/\/ access\n+      #8;                                  \/\/ name_index\n+      #9;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#7) {                         \/\/ ConstantValue\n+                                           \/\/ == invalid length of ConstantValue attr: 4 (should be 2) ==\n+          0x0000000A;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00701m11n.jcod","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"},{"patch":"@@ -0,0 +1,362 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl007\/atrcvl00702m1\/atrcvl00702m1 {\n+  0xCAFEBABE;\n+  0;                                       \/\/ minor version\n+  67;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Method #2 #3;                          \/\/ #1\n+    Class #4;                              \/\/ #2\n+    NameAndType #5 #6;                     \/\/ #3\n+    Utf8 \"java\/lang\/Object\";               \/\/ #4\n+    Utf8 \"<init>\";                         \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    String #8;                             \/\/ #7\n+    Utf8 \"atrcvl00702m10p\";                \/\/ #8\n+    Method #10 #11;                        \/\/ #9\n+    Class #12;                             \/\/ #10\n+    NameAndType #13 #14;                   \/\/ #11\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl007\/atrcvl00702m1\/atrcvl00702m1\";  \/\/ #12\n+    Utf8 \"loadPositive\";                   \/\/ #13\n+    Utf8 \"(Ljava\/lang\/String;[Ljava\/lang\/String;Ljava\/io\/PrintStream;)I\";  \/\/ #14\n+    String #16;                            \/\/ #15\n+    Utf8 \"atrcvl00702m11p\";                \/\/ #16\n+    String #18;                            \/\/ #17\n+    Utf8 \"atrcvl00702m12n\";                \/\/ #18\n+    Class #20;                             \/\/ #19\n+    Utf8 \"java\/lang\/ClassFormatError\";     \/\/ #20\n+    Method #10 #22;                        \/\/ #21\n+    NameAndType #23 #24;                   \/\/ #22\n+    Utf8 \"loadNegative\";                   \/\/ #23\n+    Utf8 \"(Ljava\/lang\/String;Ljava\/lang\/Class;[Ljava\/lang\/String;Ljava\/io\/PrintStream;)I\";  \/\/ #24\n+    InvokeDynamic 0s #26;                  \/\/ #25\n+    NameAndType #27 #28;                   \/\/ #26\n+    Utf8 \"makeConcatWithConstants\";        \/\/ #27\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/String;\";  \/\/ #28\n+    Method #30 #31;                        \/\/ #29\n+    Class #32;                             \/\/ #30\n+    NameAndType #33 #34;                   \/\/ #31\n+    Utf8 \"java\/lang\/Class\";                \/\/ #32\n+    Utf8 \"forName\";                        \/\/ #33\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/Class;\";  \/\/ #34\n+    Class #36;                             \/\/ #35\n+    Utf8 \"java\/lang\/ThreadDeath\";          \/\/ #36\n+    Class #38;                             \/\/ #37\n+    Utf8 \"java\/lang\/Throwable\";            \/\/ #38\n+    Method #40 #41;                        \/\/ #39\n+    Class #42;                             \/\/ #40\n+    NameAndType #43 #44;                   \/\/ #41\n+    Utf8 \"java\/lang\/String\";               \/\/ #42\n+    Utf8 \"valueOf\";                        \/\/ #43\n+    Utf8 \"(Ljava\/lang\/Object;)Ljava\/lang\/String;\";  \/\/ #44\n+    InvokeDynamic 1s #26;                  \/\/ #45\n+    Method #47 #48;                        \/\/ #46\n+    Class #49;                             \/\/ #47\n+    NameAndType #50 #51;                   \/\/ #48\n+    Utf8 \"java\/io\/PrintStream\";            \/\/ #49\n+    Utf8 \"println\";                        \/\/ #50\n+    Utf8 \"(Ljava\/lang\/String;)V\";          \/\/ #51\n+    Method #30 #53;                        \/\/ #52\n+    NameAndType #54 #55;                   \/\/ #53\n+    Utf8 \"isInstance\";                     \/\/ #54\n+    Utf8 \"(Ljava\/lang\/Object;)Z\";          \/\/ #55\n+    InvokeDynamic 2s #26;                  \/\/ #56\n+    InvokeDynamic 3s #26;                  \/\/ #57\n+    InvokeDynamic 4s #26;                  \/\/ #58\n+    Field #60 #61;                         \/\/ #59\n+    Class #62;                             \/\/ #60\n+    NameAndType #63 #64;                   \/\/ #61\n+    Utf8 \"java\/lang\/System\";               \/\/ #62\n+    Utf8 \"out\";                            \/\/ #63\n+    Utf8 \"Ljava\/io\/PrintStream;\";          \/\/ #64\n+    Method #10 #66;                        \/\/ #65\n+    NameAndType #67 #68;                   \/\/ #66\n+    Utf8 \"run\";                            \/\/ #67\n+    Utf8 \"([Ljava\/lang\/String;Ljava\/io\/PrintStream;)I\";  \/\/ #68\n+    Method #60 #70;                        \/\/ #69\n+    NameAndType #71 #72;                   \/\/ #70\n+    Utf8 \"exit\";                           \/\/ #71\n+    Utf8 \"(I)V\";                           \/\/ #72\n+    Utf8 \"Code\";                           \/\/ #73\n+    Utf8 \"LineNumberTable\";                \/\/ #74\n+    Utf8 \"StackMapTable\";                  \/\/ #75\n+    Class #77;                             \/\/ #76\n+    Utf8 \"[Ljava\/lang\/String;\";            \/\/ #77\n+    Utf8 \"main\";                           \/\/ #78\n+    Utf8 \"([Ljava\/lang\/String;)V\";         \/\/ #79\n+    Utf8 \"SourceFile\";                     \/\/ #80\n+    Utf8 \"atrcvl00702m1.java\";             \/\/ #81\n+    Utf8 \"BootstrapMethods\";               \/\/ #82\n+    String #84;                            \/\/ #83\n+    Utf8 \"javasoft.sqe.tests.vm.classfmt.atr.atrcvl007.atrcvl00702m1.\\u0001\";  \/\/ #84\n+    String #86;                            \/\/ #85\n+    Utf8 \"Failed with loading exception: \\u0001\";  \/\/ #86\n+    String #88;                            \/\/ #87\n+    Utf8 \"Passed with loading exception: \\u0001\";  \/\/ #88\n+    String #90;                            \/\/ #89\n+    Utf8 \"Failed with unexpected loading exception: \\u0001\";  \/\/ #90\n+    String #92;                            \/\/ #91\n+    Utf8 \"Failed to reject invalid class \\u0001\";  \/\/ #92\n+    MethodHandle 6b #94;                   \/\/ #93\n+    Method #95 #96;                        \/\/ #94\n+    Class #97;                             \/\/ #95\n+    NameAndType #27 #98;                   \/\/ #96\n+    Utf8 \"java\/lang\/invoke\/StringConcatFactory\";  \/\/ #97\n+    Utf8 \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";  \/\/ #98\n+    Utf8 \"InnerClasses\";                   \/\/ #99\n+    Class #101;                            \/\/ #100\n+    Utf8 \"java\/lang\/invoke\/MethodHandles$Lookup\";  \/\/ #101\n+    Class #103;                            \/\/ #102\n+    Utf8 \"java\/lang\/invoke\/MethodHandles\";  \/\/ #103\n+    Utf8 \"Lookup\";                         \/\/ #104\n+  }\n+\n+  0x0021;                                  \/\/ access\n+  #10;                                     \/\/ this_cpx\n+  #2;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #5;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#73) {                        \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x01 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#74) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   12;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #67;                                 \/\/ name_index\n+      #68;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#73) {                        \/\/ Code\n+          4;                               \/\/ max_stack\n+          2;                               \/\/ max_locals\n+          Bytes[]{\n+            0x12 0x07 0x2A 0x2B 0xB8 0x00 0x09 0x99 0x00 0x05 0x05 0xAC;\n+            0x12 0x0F 0x2A 0x2B 0xB8 0x00 0x09 0x99 0x00 0x05 0x05 0xAC;\n+            0x12 0x11 0x12 0x13 0x2A 0x2B 0xB8 0x00 0x15 0x99 0x00 0x05;\n+            0x05 0xAC 0x03 0xAC          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#74) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   16;\n+                  10   17;\n+                  12   18;\n+                  22   19;\n+                  24   20;\n+                  36   21;\n+                  38   23;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+            ;\n+            Attr(#75) {                    \/\/ StackMapTable\n+              [] {                         \/\/ \n+                12b;                       \/\/ same_frame\n+                11b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #13;                                 \/\/ name_index\n+      #14;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#73) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          5;                               \/\/ max_locals\n+          Bytes[]{\n+            0x01 0x4E 0x2A 0xBA 0x00 0x19 0x00 0x00 0xB8 0x00 0x1D 0x4E;\n+            0xA7 0x00 0x1A 0x3A 0x04 0x19 0x04 0xBF 0x3A 0x04 0x2C 0x19;\n+            0x04 0xB8 0x00 0x27 0xBA 0x00 0x2D 0x00 0x00 0xB6 0x00 0x2E;\n+            0x05 0xAC 0x03 0xAC          }\n+          [] {                             \/\/ Traps\n+               2   12   15  35;\n+               2   12   20  37;\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#74) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   28;\n+                   2   30;\n+                  12   36;\n+                  15   31;\n+                  17   32;\n+                  20   33;\n+                  22   34;\n+                  36   35;\n+                  38   38;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+            ;\n+            Attr(#75) {                    \/\/ StackMapTable\n+              [] {                         \/\/ \n+                255b, 15, []{O,#40; O,#76; O,#47; O,#30}, []{O,#35};  \/\/ full_frame\n+                68b, []z{O,#37};           \/\/ same_locals_1_stack_item_frame\n+                17b;                       \/\/ same_frame\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #23;                                 \/\/ name_index\n+      #24;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#73) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          6;                               \/\/ max_locals\n+          Bytes[]{\n+            0x01 0x3A 0x04 0x2A 0xBA 0x00 0x19 0x00 0x00 0xB8 0x00 0x1D;\n+            0x3A 0x04 0xA7 0x00 0x33 0x3A 0x05 0x19 0x05 0xBF 0x3A 0x05;\n+            0x2B 0x19 0x05 0xB6 0x00 0x34 0x99 0x00 0x13 0x2D 0x19 0x05;\n+            0xB8 0x00 0x27 0xBA 0x00 0x38 0x00 0x00 0xB6 0x00 0x2E 0x03;\n+            0xAC 0x2D 0x19 0x05 0xB8 0x00 0x27 0xBA 0x00 0x39 0x00 0x00;\n+            0xB6 0x00 0x2E 0x05 0xAC 0x2D 0x2A 0xBA 0x00 0x3A 0x00 0x00;\n+            0xB6 0x00 0x2E 0x05 0xAC;\n+          }\n+          [] {                             \/\/ Traps\n+               3   14   17  35;\n+               3   14   22  37;\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#74) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   43;\n+                   3   45;\n+                  14   56;\n+                  17   46;\n+                  19   47;\n+                  22   48;\n+                  24   49;\n+                  33   50;\n+                  47   51;\n+                  49   53;\n+                  63   54;\n+                  65   57;\n+                  75   58;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+            ;\n+            Attr(#75) {                    \/\/ StackMapTable\n+              [] {                         \/\/ \n+                255b, 17, []{O,#40; O,#30; O,#76; O,#47; O,#30}, []{O,#35};  \/\/ full_frame\n+                68b, []z{O,#37};           \/\/ same_locals_1_stack_item_frame\n+                252b, 26, []z{O,#37};      \/\/ append_frame 1\n+                250b, 15;                  \/\/ chop_frame 1\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #78;                                 \/\/ name_index\n+      #79;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#73) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB2 0x00 0x3B 0xB8 0x00 0x41 0x10 0x5F 0x60 0xB8 0x00;\n+            0x45 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#74) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   62;\n+                  13   63;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#80) {                            \/\/ SourceFile\n+      #81;\n+    }                                      \/\/ end of SourceFile\n+    ;\n+    Attr(#82) {                            \/\/ BootstrapMethods\n+      [] {                                 \/\/ bootstrap_methods\n+        {                                  \/\/ bootstrap_method\n+          #93;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #83;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #93;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #85;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #93;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #87;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #93;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #89;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #93;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #91;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+      }\n+    }                                      \/\/ end of BootstrapMethods\n+    ;\n+    Attr(#99) {                            \/\/ InnerClasses\n+      [] {                                 \/\/ classes\n+         #100  #102  #104  25;\n+      }\n+    }                                      \/\/ end of InnerClasses\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00702m1.jcod","additions":362,"deletions":0,"binary":false,"changes":362,"status":"added"},{"patch":"@@ -0,0 +1,44 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl007\/atrcvl00702m1\/atrcvl00702m10p {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Class #4;                              \/\/ #1\n+    Class #5;                              \/\/ #2\n+    Field #2 #6;                           \/\/ #3\n+    Utf8 \"java\/lang\/Object\";               \/\/ #4\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl007\/atrcvl00702m1\/atrcvl00702m10p\";  \/\/ #5\n+    NameAndType #8 #9;                     \/\/ #6\n+    Utf8 \"constantValue\";                  \/\/ #7\n+    Utf8 \"number\";                         \/\/ #8\n+    Utf8 \"I\";                              \/\/ #9\n+    Integer 0x0000007B;                    \/\/ #10\n+  }\n+\n+  0x0001;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #1;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0009;                              \/\/ access\n+      #8;                                  \/\/ name_index\n+      #9;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#7) {                         \/\/ constantValue\n+          0x00 0x00 0x00 0x0A;\n+        }                                  \/\/ end of constantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00702m10p.jcod","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -0,0 +1,44 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl007\/atrcvl00702m1\/atrcvl00702m11p {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Class #4;                              \/\/ #1\n+    Class #5;                              \/\/ #2\n+    Field #2 #6;                           \/\/ #3\n+    Utf8 \"java\/lang\/Object\";               \/\/ #4\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl007\/atrcvl00702m1\/atrcvl00702m11p\";  \/\/ #5\n+    NameAndType #8 #9;                     \/\/ #6\n+    Utf8 \"ConstantValue1\";                 \/\/ #7\n+    Utf8 \"number\";                         \/\/ #8\n+    Utf8 \"I\";                              \/\/ #9\n+    Integer 0x0000007B;                    \/\/ #10\n+  }\n+\n+  0x0001;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #1;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0009;                              \/\/ access\n+      #8;                                  \/\/ name_index\n+      #9;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#7) {                         \/\/ ConstantValue1\n+          0x00 0x00 0x00 0x0A;\n+        }                                  \/\/ end of ConstantValue1\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00702m11p.jcod","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -0,0 +1,45 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl007\/atrcvl00702m1\/atrcvl00702m12n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Class #4;                              \/\/ #1\n+    Class #5;                              \/\/ #2\n+    Field #2 #6;                           \/\/ #3\n+    Utf8 \"java\/lang\/Object\";               \/\/ #4\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl007\/atrcvl00702m1\/atrcvl00702m12n\";  \/\/ #5\n+    NameAndType #8 #9;                     \/\/ #6\n+    Utf8 \"ConstantValue\";                  \/\/ #7\n+    Utf8 \"number\";                         \/\/ #8\n+    Utf8 \"I\";                              \/\/ #9\n+    Integer 0x0000007B;                    \/\/ #10\n+  }\n+\n+  0x0001;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #1;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0009;                              \/\/ access\n+      #8;                                  \/\/ name_index\n+      #9;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#7) {                         \/\/ ConstantValue\n+                                           \/\/ == invalid length of ConstantValue attr: 4 (should be 2) ==\n+          0x0000000A;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00702m12n.jcod","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"},{"patch":"@@ -0,0 +1,239 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl008\/atrcvl00801m1\/atrcvl00801m1 {\n+  0xCAFEBABE;\n+  0;                                       \/\/ minor version\n+  67;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Method #2 #3;                          \/\/ #1\n+    Class #4;                              \/\/ #2\n+    NameAndType #5 #6;                     \/\/ #3\n+    Utf8 \"java\/lang\/Object\";               \/\/ #4\n+    Utf8 \"<init>\";                         \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    String #8;                             \/\/ #7\n+    Utf8 \"javasoft.sqe.tests.vm.classfmt.atr.atrcvl008.atrcvl00801m1.atrcvl00801m1p\";  \/\/ #8\n+    Method #10 #11;                        \/\/ #9\n+    Class #12;                             \/\/ #10\n+    NameAndType #13 #14;                   \/\/ #11\n+    Utf8 \"java\/lang\/Class\";                \/\/ #12\n+    Utf8 \"forName\";                        \/\/ #13\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/Class;\";  \/\/ #14\n+    Method #10 #16;                        \/\/ #15\n+    NameAndType #17 #18;                   \/\/ #16\n+    Utf8 \"newInstance\";                    \/\/ #17\n+    Utf8 \"()Ljava\/lang\/Object;\";           \/\/ #18\n+    Class #20;                             \/\/ #19\n+    Utf8 \"java\/lang\/Throwable\";            \/\/ #20\n+    Method #22 #23;                        \/\/ #21\n+    Class #24;                             \/\/ #22\n+    NameAndType #25 #26;                   \/\/ #23\n+    Utf8 \"java\/lang\/String\";               \/\/ #24\n+    Utf8 \"valueOf\";                        \/\/ #25\n+    Utf8 \"(Ljava\/lang\/Object;)Ljava\/lang\/String;\";  \/\/ #26\n+    InvokeDynamic 0s #28;                  \/\/ #27\n+    NameAndType #29 #30;                   \/\/ #28\n+    Utf8 \"makeConcatWithConstants\";        \/\/ #29\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/String;\";  \/\/ #30\n+    Method #32 #33;                        \/\/ #31\n+    Class #34;                             \/\/ #32\n+    NameAndType #35 #36;                   \/\/ #33\n+    Utf8 \"java\/io\/PrintStream\";            \/\/ #34\n+    Utf8 \"println\";                        \/\/ #35\n+    Utf8 \"(Ljava\/lang\/String;)V\";          \/\/ #36\n+    String #38;                            \/\/ #37\n+    Utf8 \"javasoft.sqe.tests.vm.classfmt.atr.atrcvl008.atrcvl00801m1.atrcvl00801m1n\";  \/\/ #38\n+    String #40;                            \/\/ #39\n+    Utf8 \"test atrcvl00801m1 failed to reject bad classfile atrcvl00801m1n\";  \/\/ #40\n+    Class #42;                             \/\/ #41\n+    Utf8 \"java\/lang\/ClassFormatError\";     \/\/ #42\n+    InvokeDynamic 1s #28;                  \/\/ #43\n+    Field #45 #46;                         \/\/ #44\n+    Class #47;                             \/\/ #45\n+    NameAndType #48 #49;                   \/\/ #46\n+    Utf8 \"java\/lang\/System\";               \/\/ #47\n+    Utf8 \"out\";                            \/\/ #48\n+    Utf8 \"Ljava\/io\/PrintStream;\";          \/\/ #49\n+    Method #51 #52;                        \/\/ #50\n+    Class #53;                             \/\/ #51\n+    NameAndType #54 #55;                   \/\/ #52\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl008\/atrcvl00801m1\/atrcvl00801m1\";  \/\/ #53\n+    Utf8 \"run\";                            \/\/ #54\n+    Utf8 \"([Ljava\/lang\/String;Ljava\/io\/PrintStream;)I\";  \/\/ #55\n+    Method #45 #57;                        \/\/ #56\n+    NameAndType #58 #59;                   \/\/ #57\n+    Utf8 \"exit\";                           \/\/ #58\n+    Utf8 \"(I)V\";                           \/\/ #59\n+    Utf8 \"Code\";                           \/\/ #60\n+    Utf8 \"LineNumberTable\";                \/\/ #61\n+    Utf8 \"StackMapTable\";                  \/\/ #62\n+    Utf8 \"main\";                           \/\/ #63\n+    Utf8 \"([Ljava\/lang\/String;)V\";         \/\/ #64\n+    Utf8 \"SourceFile\";                     \/\/ #65\n+    Utf8 \"atrcvl00801m1.java\";             \/\/ #66\n+    Utf8 \"BootstrapMethods\";               \/\/ #67\n+    String #69;                            \/\/ #68\n+    Utf8 \"test atrcvl00801m1 failed to load or instantiate good classfile atrcvl00801m1p: \\u0001\";  \/\/ #69\n+    String #71;                            \/\/ #70\n+    Utf8 \"test atrcvl00801m1 failed with unexpected loading exception: \\u0001\";  \/\/ #71\n+    MethodHandle 6b #73;                   \/\/ #72\n+    Method #74 #75;                        \/\/ #73\n+    Class #76;                             \/\/ #74\n+    NameAndType #29 #77;                   \/\/ #75\n+    Utf8 \"java\/lang\/invoke\/StringConcatFactory\";  \/\/ #76\n+    Utf8 \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";  \/\/ #77\n+    Utf8 \"InnerClasses\";                   \/\/ #78\n+    Class #80;                             \/\/ #79\n+    Utf8 \"java\/lang\/invoke\/MethodHandles$Lookup\";  \/\/ #80\n+    Class #82;                             \/\/ #81\n+    Utf8 \"java\/lang\/invoke\/MethodHandles\";  \/\/ #82\n+    Utf8 \"Lookup\";                         \/\/ #83\n+  }\n+\n+  0x0021;                                  \/\/ access\n+  #51;                                     \/\/ this_cpx\n+  #2;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #5;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#60) {                        \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x01 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#61) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   11;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #54;                                 \/\/ name_index\n+      #55;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#60) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          4;                               \/\/ max_locals\n+          Bytes[]{\n+            0x12 0x07 0xB8 0x00 0x09 0x4D 0x2C 0xB6 0x00 0x0F 0x4E 0xA7;\n+            0x00 0x13 0x4D 0x2B 0x2C 0xB8 0x00 0x15 0xBA 0x00 0x1B 0x00;\n+            0x00 0xB6 0x00 0x1F 0x05 0xAC 0x12 0x25 0xB8 0x00 0x09 0x4D;\n+            0x2B 0x12 0x27 0xB6 0x00 0x1F 0x05 0xAC 0x4D 0xA7 0x00 0x13;\n+            0x4D 0x2B 0x2C 0xB8 0x00 0x15 0xBA 0x00 0x2B 0x00 0x00 0xB6;\n+            0x00 0x1F 0x05 0xAC 0x03 0xAC;\n+          }\n+          [] {                             \/\/ Traps\n+               0   11   14  19;\n+              30   43   44  41;\n+              30   43   48  19;\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#61) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   16;\n+                   6   17;\n+                  11   21;\n+                  14   18;\n+                  15   19;\n+                  28   20;\n+                  30   24;\n+                  36   25;\n+                  42   26;\n+                  44   27;\n+                  45   32;\n+                  48   29;\n+                  49   30;\n+                  62   31;\n+                  64   34;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+            ;\n+            Attr(#62) {                    \/\/ StackMapTable\n+              [] {                         \/\/ \n+                78b, []z{O,#19};           \/\/ same_locals_1_stack_item_frame\n+                15b;                       \/\/ same_frame\n+                77b, []z{O,#41};           \/\/ same_locals_1_stack_item_frame\n+                67b, []z{O,#19};           \/\/ same_locals_1_stack_item_frame\n+                15b;                       \/\/ same_frame\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #63;                                 \/\/ name_index\n+      #64;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#60) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB2 0x00 0x2C 0xB8 0x00 0x32 0x10 0x5F 0x60 0xB8 0x00;\n+            0x38 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#61) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   38;\n+                  13   39;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#65) {                            \/\/ SourceFile\n+      #66;\n+    }                                      \/\/ end of SourceFile\n+    ;\n+    Attr(#67) {                            \/\/ BootstrapMethods\n+      [] {                                 \/\/ bootstrap_methods\n+        {                                  \/\/ bootstrap_method\n+          #72;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #68;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #72;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #70;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+      }\n+    }                                      \/\/ end of BootstrapMethods\n+    ;\n+    Attr(#78) {                            \/\/ InnerClasses\n+      [] {                                 \/\/ classes\n+          #79   #81   #83  25;\n+      }\n+    }                                      \/\/ end of InnerClasses\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00801m1.jcod","additions":239,"deletions":0,"binary":false,"changes":239,"status":"added"},{"patch":"@@ -0,0 +1,71 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl008\/atrcvl00801m1\/atrcvl00801m1n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"I\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl008\/atrcvl00801m1\/atrcvl00801m1n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #0;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00801m1n.jcod","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -0,0 +1,71 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl008\/atrcvl00801m1\/atrcvl00801m1p {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"I\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl008\/atrcvl00801m1\/atrcvl00801m1p\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #1;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00801m1p.jcod","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -0,0 +1,239 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl008\/atrcvl00802m1\/atrcvl00802m1 {\n+  0xCAFEBABE;\n+  0;                                       \/\/ minor version\n+  67;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Method #2 #3;                          \/\/ #1\n+    Class #4;                              \/\/ #2\n+    NameAndType #5 #6;                     \/\/ #3\n+    Utf8 \"java\/lang\/Object\";               \/\/ #4\n+    Utf8 \"<init>\";                         \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    String #8;                             \/\/ #7\n+    Utf8 \"javasoft.sqe.tests.vm.classfmt.atr.atrcvl008.atrcvl00802m1.atrcvl00802m1p\";  \/\/ #8\n+    Method #10 #11;                        \/\/ #9\n+    Class #12;                             \/\/ #10\n+    NameAndType #13 #14;                   \/\/ #11\n+    Utf8 \"java\/lang\/Class\";                \/\/ #12\n+    Utf8 \"forName\";                        \/\/ #13\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/Class;\";  \/\/ #14\n+    Method #10 #16;                        \/\/ #15\n+    NameAndType #17 #18;                   \/\/ #16\n+    Utf8 \"newInstance\";                    \/\/ #17\n+    Utf8 \"()Ljava\/lang\/Object;\";           \/\/ #18\n+    Class #20;                             \/\/ #19\n+    Utf8 \"java\/lang\/Throwable\";            \/\/ #20\n+    Method #22 #23;                        \/\/ #21\n+    Class #24;                             \/\/ #22\n+    NameAndType #25 #26;                   \/\/ #23\n+    Utf8 \"java\/lang\/String\";               \/\/ #24\n+    Utf8 \"valueOf\";                        \/\/ #25\n+    Utf8 \"(Ljava\/lang\/Object;)Ljava\/lang\/String;\";  \/\/ #26\n+    InvokeDynamic 0s #28;                  \/\/ #27\n+    NameAndType #29 #30;                   \/\/ #28\n+    Utf8 \"makeConcatWithConstants\";        \/\/ #29\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/String;\";  \/\/ #30\n+    Method #32 #33;                        \/\/ #31\n+    Class #34;                             \/\/ #32\n+    NameAndType #35 #36;                   \/\/ #33\n+    Utf8 \"java\/io\/PrintStream\";            \/\/ #34\n+    Utf8 \"println\";                        \/\/ #35\n+    Utf8 \"(Ljava\/lang\/String;)V\";          \/\/ #36\n+    String #38;                            \/\/ #37\n+    Utf8 \"javasoft.sqe.tests.vm.classfmt.atr.atrcvl008.atrcvl00802m1.atrcvl00802m1n\";  \/\/ #38\n+    String #40;                            \/\/ #39\n+    Utf8 \"test atrcvl00802m1 failed to reject bad classfile atrcvl00802m1n\";  \/\/ #40\n+    Class #42;                             \/\/ #41\n+    Utf8 \"java\/lang\/ClassFormatError\";     \/\/ #42\n+    InvokeDynamic 1s #28;                  \/\/ #43\n+    Field #45 #46;                         \/\/ #44\n+    Class #47;                             \/\/ #45\n+    NameAndType #48 #49;                   \/\/ #46\n+    Utf8 \"java\/lang\/System\";               \/\/ #47\n+    Utf8 \"out\";                            \/\/ #48\n+    Utf8 \"Ljava\/io\/PrintStream;\";          \/\/ #49\n+    Method #51 #52;                        \/\/ #50\n+    Class #53;                             \/\/ #51\n+    NameAndType #54 #55;                   \/\/ #52\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl008\/atrcvl00802m1\/atrcvl00802m1\";  \/\/ #53\n+    Utf8 \"run\";                            \/\/ #54\n+    Utf8 \"([Ljava\/lang\/String;Ljava\/io\/PrintStream;)I\";  \/\/ #55\n+    Method #45 #57;                        \/\/ #56\n+    NameAndType #58 #59;                   \/\/ #57\n+    Utf8 \"exit\";                           \/\/ #58\n+    Utf8 \"(I)V\";                           \/\/ #59\n+    Utf8 \"Code\";                           \/\/ #60\n+    Utf8 \"LineNumberTable\";                \/\/ #61\n+    Utf8 \"StackMapTable\";                  \/\/ #62\n+    Utf8 \"main\";                           \/\/ #63\n+    Utf8 \"([Ljava\/lang\/String;)V\";         \/\/ #64\n+    Utf8 \"SourceFile\";                     \/\/ #65\n+    Utf8 \"atrcvl00802m1.java\";             \/\/ #66\n+    Utf8 \"BootstrapMethods\";               \/\/ #67\n+    String #69;                            \/\/ #68\n+    Utf8 \"test atrcvl00802m1 failed to load or instantiate good classfile atrcvl00802m1p: \\u0001\";  \/\/ #69\n+    String #71;                            \/\/ #70\n+    Utf8 \"test atrcvl00802m1 failed with unexpected loading exception: \\u0001\";  \/\/ #71\n+    MethodHandle 6b #73;                   \/\/ #72\n+    Method #74 #75;                        \/\/ #73\n+    Class #76;                             \/\/ #74\n+    NameAndType #29 #77;                   \/\/ #75\n+    Utf8 \"java\/lang\/invoke\/StringConcatFactory\";  \/\/ #76\n+    Utf8 \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";  \/\/ #77\n+    Utf8 \"InnerClasses\";                   \/\/ #78\n+    Class #80;                             \/\/ #79\n+    Utf8 \"java\/lang\/invoke\/MethodHandles$Lookup\";  \/\/ #80\n+    Class #82;                             \/\/ #81\n+    Utf8 \"java\/lang\/invoke\/MethodHandles\";  \/\/ #82\n+    Utf8 \"Lookup\";                         \/\/ #83\n+  }\n+\n+  0x0021;                                  \/\/ access\n+  #51;                                     \/\/ this_cpx\n+  #2;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #5;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#60) {                        \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x01 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#61) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   11;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #54;                                 \/\/ name_index\n+      #55;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#60) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          4;                               \/\/ max_locals\n+          Bytes[]{\n+            0x12 0x07 0xB8 0x00 0x09 0x4D 0x2C 0xB6 0x00 0x0F 0x4E 0xA7;\n+            0x00 0x13 0x4D 0x2B 0x2C 0xB8 0x00 0x15 0xBA 0x00 0x1B 0x00;\n+            0x00 0xB6 0x00 0x1F 0x05 0xAC 0x12 0x25 0xB8 0x00 0x09 0x4D;\n+            0x2B 0x12 0x27 0xB6 0x00 0x1F 0x05 0xAC 0x4D 0xA7 0x00 0x13;\n+            0x4D 0x2B 0x2C 0xB8 0x00 0x15 0xBA 0x00 0x2B 0x00 0x00 0xB6;\n+            0x00 0x1F 0x05 0xAC 0x03 0xAC;\n+          }\n+          [] {                             \/\/ Traps\n+               0   11   14  19;\n+              30   43   44  41;\n+              30   43   48  19;\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#61) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   16;\n+                   6   17;\n+                  11   21;\n+                  14   18;\n+                  15   19;\n+                  28   20;\n+                  30   24;\n+                  36   25;\n+                  42   26;\n+                  44   27;\n+                  45   32;\n+                  48   29;\n+                  49   30;\n+                  62   31;\n+                  64   34;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+            ;\n+            Attr(#62) {                    \/\/ StackMapTable\n+              [] {                         \/\/ \n+                78b, []z{O,#19};           \/\/ same_locals_1_stack_item_frame\n+                15b;                       \/\/ same_frame\n+                77b, []z{O,#41};           \/\/ same_locals_1_stack_item_frame\n+                67b, []z{O,#19};           \/\/ same_locals_1_stack_item_frame\n+                15b;                       \/\/ same_frame\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #63;                                 \/\/ name_index\n+      #64;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#60) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB2 0x00 0x2C 0xB8 0x00 0x32 0x10 0x5F 0x60 0xB8 0x00;\n+            0x38 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#61) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   38;\n+                  13   39;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#65) {                            \/\/ SourceFile\n+      #66;\n+    }                                      \/\/ end of SourceFile\n+    ;\n+    Attr(#67) {                            \/\/ BootstrapMethods\n+      [] {                                 \/\/ bootstrap_methods\n+        {                                  \/\/ bootstrap_method\n+          #72;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #68;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #72;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #70;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+      }\n+    }                                      \/\/ end of BootstrapMethods\n+    ;\n+    Attr(#78) {                            \/\/ InnerClasses\n+      [] {                                 \/\/ classes\n+          #79   #81   #83  25;\n+      }\n+    }                                      \/\/ end of InnerClasses\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00802m1.jcod","additions":239,"deletions":0,"binary":false,"changes":239,"status":"added"},{"patch":"@@ -0,0 +1,71 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl008\/atrcvl00802m1\/atrcvl00802m1n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"I\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl008\/atrcvl00802m1\/atrcvl00802m1n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #20;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00802m1n.jcod","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -0,0 +1,71 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl008\/atrcvl00802m1\/atrcvl00802m1p {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"I\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl008\/atrcvl00802m1\/atrcvl00802m1p\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #1;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00802m1p.jcod","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -0,0 +1,239 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00901m1\/atrcvl00901m1 {\n+  0xCAFEBABE;\n+  0;                                       \/\/ minor version\n+  67;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Method #2 #3;                          \/\/ #1\n+    Class #4;                              \/\/ #2\n+    NameAndType #5 #6;                     \/\/ #3\n+    Utf8 \"java\/lang\/Object\";               \/\/ #4\n+    Utf8 \"<init>\";                         \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    String #8;                             \/\/ #7\n+    Utf8 \"javasoft.sqe.tests.vm.classfmt.atr.atrcvl009.atrcvl00901m1.atrcvl00901m1p\";  \/\/ #8\n+    Method #10 #11;                        \/\/ #9\n+    Class #12;                             \/\/ #10\n+    NameAndType #13 #14;                   \/\/ #11\n+    Utf8 \"java\/lang\/Class\";                \/\/ #12\n+    Utf8 \"forName\";                        \/\/ #13\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/Class;\";  \/\/ #14\n+    Method #10 #16;                        \/\/ #15\n+    NameAndType #17 #18;                   \/\/ #16\n+    Utf8 \"newInstance\";                    \/\/ #17\n+    Utf8 \"()Ljava\/lang\/Object;\";           \/\/ #18\n+    Class #20;                             \/\/ #19\n+    Utf8 \"java\/lang\/Throwable\";            \/\/ #20\n+    Method #22 #23;                        \/\/ #21\n+    Class #24;                             \/\/ #22\n+    NameAndType #25 #26;                   \/\/ #23\n+    Utf8 \"java\/lang\/String\";               \/\/ #24\n+    Utf8 \"valueOf\";                        \/\/ #25\n+    Utf8 \"(Ljava\/lang\/Object;)Ljava\/lang\/String;\";  \/\/ #26\n+    InvokeDynamic 0s #28;                  \/\/ #27\n+    NameAndType #29 #30;                   \/\/ #28\n+    Utf8 \"makeConcatWithConstants\";        \/\/ #29\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/String;\";  \/\/ #30\n+    Method #32 #33;                        \/\/ #31\n+    Class #34;                             \/\/ #32\n+    NameAndType #35 #36;                   \/\/ #33\n+    Utf8 \"java\/io\/PrintStream\";            \/\/ #34\n+    Utf8 \"println\";                        \/\/ #35\n+    Utf8 \"(Ljava\/lang\/String;)V\";          \/\/ #36\n+    String #38;                            \/\/ #37\n+    Utf8 \"javasoft.sqe.tests.vm.classfmt.atr.atrcvl009.atrcvl00901m1.atrcvl00901m1n\";  \/\/ #38\n+    String #40;                            \/\/ #39\n+    Utf8 \"test atrcvl00901m1 failed to reject bad classfile atrcvl00901m1n\";  \/\/ #40\n+    Class #42;                             \/\/ #41\n+    Utf8 \"java\/lang\/ClassFormatError\";     \/\/ #42\n+    InvokeDynamic 1s #28;                  \/\/ #43\n+    Field #45 #46;                         \/\/ #44\n+    Class #47;                             \/\/ #45\n+    NameAndType #48 #49;                   \/\/ #46\n+    Utf8 \"java\/lang\/System\";               \/\/ #47\n+    Utf8 \"out\";                            \/\/ #48\n+    Utf8 \"Ljava\/io\/PrintStream;\";          \/\/ #49\n+    Method #51 #52;                        \/\/ #50\n+    Class #53;                             \/\/ #51\n+    NameAndType #54 #55;                   \/\/ #52\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00901m1\/atrcvl00901m1\";  \/\/ #53\n+    Utf8 \"run\";                            \/\/ #54\n+    Utf8 \"([Ljava\/lang\/String;Ljava\/io\/PrintStream;)I\";  \/\/ #55\n+    Method #45 #57;                        \/\/ #56\n+    NameAndType #58 #59;                   \/\/ #57\n+    Utf8 \"exit\";                           \/\/ #58\n+    Utf8 \"(I)V\";                           \/\/ #59\n+    Utf8 \"Code\";                           \/\/ #60\n+    Utf8 \"LineNumberTable\";                \/\/ #61\n+    Utf8 \"StackMapTable\";                  \/\/ #62\n+    Utf8 \"main\";                           \/\/ #63\n+    Utf8 \"([Ljava\/lang\/String;)V\";         \/\/ #64\n+    Utf8 \"SourceFile\";                     \/\/ #65\n+    Utf8 \"atrcvl00901m1.java\";             \/\/ #66\n+    Utf8 \"BootstrapMethods\";               \/\/ #67\n+    String #69;                            \/\/ #68\n+    Utf8 \"test atrcvl00901m1 failed to load or instantiate good classfile atrcvl00901m1p: \\u0001\";  \/\/ #69\n+    String #71;                            \/\/ #70\n+    Utf8 \"test atrcvl00901m1 failed with unexpected loading exception: \\u0001\";  \/\/ #71\n+    MethodHandle 6b #73;                   \/\/ #72\n+    Method #74 #75;                        \/\/ #73\n+    Class #76;                             \/\/ #74\n+    NameAndType #29 #77;                   \/\/ #75\n+    Utf8 \"java\/lang\/invoke\/StringConcatFactory\";  \/\/ #76\n+    Utf8 \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";  \/\/ #77\n+    Utf8 \"InnerClasses\";                   \/\/ #78\n+    Class #80;                             \/\/ #79\n+    Utf8 \"java\/lang\/invoke\/MethodHandles$Lookup\";  \/\/ #80\n+    Class #82;                             \/\/ #81\n+    Utf8 \"java\/lang\/invoke\/MethodHandles\";  \/\/ #82\n+    Utf8 \"Lookup\";                         \/\/ #83\n+  }\n+\n+  0x0021;                                  \/\/ access\n+  #51;                                     \/\/ this_cpx\n+  #2;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #5;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#60) {                        \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x01 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#61) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   11;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #54;                                 \/\/ name_index\n+      #55;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#60) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          4;                               \/\/ max_locals\n+          Bytes[]{\n+            0x12 0x07 0xB8 0x00 0x09 0x4D 0x2C 0xB6 0x00 0x0F 0x4E 0xA7;\n+            0x00 0x13 0x4D 0x2B 0x2C 0xB8 0x00 0x15 0xBA 0x00 0x1B 0x00;\n+            0x00 0xB6 0x00 0x1F 0x05 0xAC 0x12 0x25 0xB8 0x00 0x09 0x4D;\n+            0x2B 0x12 0x27 0xB6 0x00 0x1F 0x05 0xAC 0x4D 0xA7 0x00 0x13;\n+            0x4D 0x2B 0x2C 0xB8 0x00 0x15 0xBA 0x00 0x2B 0x00 0x00 0xB6;\n+            0x00 0x1F 0x05 0xAC 0x03 0xAC;\n+          }\n+          [] {                             \/\/ Traps\n+               0   11   14  19;\n+              30   43   44  41;\n+              30   43   48  19;\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#61) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   16;\n+                   6   17;\n+                  11   21;\n+                  14   18;\n+                  15   19;\n+                  28   20;\n+                  30   24;\n+                  36   25;\n+                  42   26;\n+                  44   27;\n+                  45   32;\n+                  48   29;\n+                  49   30;\n+                  62   31;\n+                  64   34;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+            ;\n+            Attr(#62) {                    \/\/ StackMapTable\n+              [] {                         \/\/ \n+                78b, []z{O,#19};           \/\/ same_locals_1_stack_item_frame\n+                15b;                       \/\/ same_frame\n+                77b, []z{O,#41};           \/\/ same_locals_1_stack_item_frame\n+                67b, []z{O,#19};           \/\/ same_locals_1_stack_item_frame\n+                15b;                       \/\/ same_frame\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #63;                                 \/\/ name_index\n+      #64;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#60) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB2 0x00 0x2C 0xB8 0x00 0x32 0x10 0x5F 0x60 0xB8 0x00;\n+            0x38 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#61) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   38;\n+                  13   39;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#65) {                            \/\/ SourceFile\n+      #66;\n+    }                                      \/\/ end of SourceFile\n+    ;\n+    Attr(#67) {                            \/\/ BootstrapMethods\n+      [] {                                 \/\/ bootstrap_methods\n+        {                                  \/\/ bootstrap_method\n+          #72;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #68;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #72;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #70;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+      }\n+    }                                      \/\/ end of BootstrapMethods\n+    ;\n+    Attr(#78) {                            \/\/ InnerClasses\n+      [] {                                 \/\/ classes\n+          #79   #81   #83  25;\n+      }\n+    }                                      \/\/ end of InnerClasses\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00901m1.jcod","additions":239,"deletions":0,"binary":false,"changes":239,"status":"added"},{"patch":"@@ -0,0 +1,70 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00901m1\/atrcvl00901m1n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"I\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00901m1\/atrcvl00901m1n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #2;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00901m1n.jcod","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"},{"patch":"@@ -0,0 +1,70 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00901m1\/atrcvl00901m1p {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"I\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00901m1\/atrcvl00901m1p\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #1;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00901m1p.jcod","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"},{"patch":"@@ -0,0 +1,239 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00902m1\/atrcvl00902m1 {\n+  0xCAFEBABE;\n+  0;                                       \/\/ minor version\n+  67;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Method #2 #3;                          \/\/ #1\n+    Class #4;                              \/\/ #2\n+    NameAndType #5 #6;                     \/\/ #3\n+    Utf8 \"java\/lang\/Object\";               \/\/ #4\n+    Utf8 \"<init>\";                         \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    String #8;                             \/\/ #7\n+    Utf8 \"javasoft.sqe.tests.vm.classfmt.atr.atrcvl009.atrcvl00902m1.atrcvl00902m1p\";  \/\/ #8\n+    Method #10 #11;                        \/\/ #9\n+    Class #12;                             \/\/ #10\n+    NameAndType #13 #14;                   \/\/ #11\n+    Utf8 \"java\/lang\/Class\";                \/\/ #12\n+    Utf8 \"forName\";                        \/\/ #13\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/Class;\";  \/\/ #14\n+    Method #10 #16;                        \/\/ #15\n+    NameAndType #17 #18;                   \/\/ #16\n+    Utf8 \"newInstance\";                    \/\/ #17\n+    Utf8 \"()Ljava\/lang\/Object;\";           \/\/ #18\n+    Class #20;                             \/\/ #19\n+    Utf8 \"java\/lang\/Throwable\";            \/\/ #20\n+    Method #22 #23;                        \/\/ #21\n+    Class #24;                             \/\/ #22\n+    NameAndType #25 #26;                   \/\/ #23\n+    Utf8 \"java\/lang\/String\";               \/\/ #24\n+    Utf8 \"valueOf\";                        \/\/ #25\n+    Utf8 \"(Ljava\/lang\/Object;)Ljava\/lang\/String;\";  \/\/ #26\n+    InvokeDynamic 0s #28;                  \/\/ #27\n+    NameAndType #29 #30;                   \/\/ #28\n+    Utf8 \"makeConcatWithConstants\";        \/\/ #29\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/String;\";  \/\/ #30\n+    Method #32 #33;                        \/\/ #31\n+    Class #34;                             \/\/ #32\n+    NameAndType #35 #36;                   \/\/ #33\n+    Utf8 \"java\/io\/PrintStream\";            \/\/ #34\n+    Utf8 \"println\";                        \/\/ #35\n+    Utf8 \"(Ljava\/lang\/String;)V\";          \/\/ #36\n+    String #38;                            \/\/ #37\n+    Utf8 \"javasoft.sqe.tests.vm.classfmt.atr.atrcvl009.atrcvl00902m1.atrcvl00902m1n\";  \/\/ #38\n+    String #40;                            \/\/ #39\n+    Utf8 \"test atrcvl00902m1 failed to reject bad classfile atrcvl00902m1n\";  \/\/ #40\n+    Class #42;                             \/\/ #41\n+    Utf8 \"java\/lang\/ClassFormatError\";     \/\/ #42\n+    InvokeDynamic 1s #28;                  \/\/ #43\n+    Field #45 #46;                         \/\/ #44\n+    Class #47;                             \/\/ #45\n+    NameAndType #48 #49;                   \/\/ #46\n+    Utf8 \"java\/lang\/System\";               \/\/ #47\n+    Utf8 \"out\";                            \/\/ #48\n+    Utf8 \"Ljava\/io\/PrintStream;\";          \/\/ #49\n+    Method #51 #52;                        \/\/ #50\n+    Class #53;                             \/\/ #51\n+    NameAndType #54 #55;                   \/\/ #52\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00902m1\/atrcvl00902m1\";  \/\/ #53\n+    Utf8 \"run\";                            \/\/ #54\n+    Utf8 \"([Ljava\/lang\/String;Ljava\/io\/PrintStream;)I\";  \/\/ #55\n+    Method #45 #57;                        \/\/ #56\n+    NameAndType #58 #59;                   \/\/ #57\n+    Utf8 \"exit\";                           \/\/ #58\n+    Utf8 \"(I)V\";                           \/\/ #59\n+    Utf8 \"Code\";                           \/\/ #60\n+    Utf8 \"LineNumberTable\";                \/\/ #61\n+    Utf8 \"StackMapTable\";                  \/\/ #62\n+    Utf8 \"main\";                           \/\/ #63\n+    Utf8 \"([Ljava\/lang\/String;)V\";         \/\/ #64\n+    Utf8 \"SourceFile\";                     \/\/ #65\n+    Utf8 \"atrcvl00902m1.java\";             \/\/ #66\n+    Utf8 \"BootstrapMethods\";               \/\/ #67\n+    String #69;                            \/\/ #68\n+    Utf8 \"test atrcvl00902m1 failed to load or instantiate good classfile atrcvl00902m1p: \\u0001\";  \/\/ #69\n+    String #71;                            \/\/ #70\n+    Utf8 \"test atrcvl00902m1 failed with unexpected loading exception: \\u0001\";  \/\/ #71\n+    MethodHandle 6b #73;                   \/\/ #72\n+    Method #74 #75;                        \/\/ #73\n+    Class #76;                             \/\/ #74\n+    NameAndType #29 #77;                   \/\/ #75\n+    Utf8 \"java\/lang\/invoke\/StringConcatFactory\";  \/\/ #76\n+    Utf8 \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";  \/\/ #77\n+    Utf8 \"InnerClasses\";                   \/\/ #78\n+    Class #80;                             \/\/ #79\n+    Utf8 \"java\/lang\/invoke\/MethodHandles$Lookup\";  \/\/ #80\n+    Class #82;                             \/\/ #81\n+    Utf8 \"java\/lang\/invoke\/MethodHandles\";  \/\/ #82\n+    Utf8 \"Lookup\";                         \/\/ #83\n+  }\n+\n+  0x0021;                                  \/\/ access\n+  #51;                                     \/\/ this_cpx\n+  #2;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #5;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#60) {                        \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x01 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#61) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   11;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #54;                                 \/\/ name_index\n+      #55;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#60) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          4;                               \/\/ max_locals\n+          Bytes[]{\n+            0x12 0x07 0xB8 0x00 0x09 0x4D 0x2C 0xB6 0x00 0x0F 0x4E 0xA7;\n+            0x00 0x13 0x4D 0x2B 0x2C 0xB8 0x00 0x15 0xBA 0x00 0x1B 0x00;\n+            0x00 0xB6 0x00 0x1F 0x05 0xAC 0x12 0x25 0xB8 0x00 0x09 0x4D;\n+            0x2B 0x12 0x27 0xB6 0x00 0x1F 0x05 0xAC 0x4D 0xA7 0x00 0x13;\n+            0x4D 0x2B 0x2C 0xB8 0x00 0x15 0xBA 0x00 0x2B 0x00 0x00 0xB6;\n+            0x00 0x1F 0x05 0xAC 0x03 0xAC;\n+          }\n+          [] {                             \/\/ Traps\n+               0   11   14  19;\n+              30   43   44  41;\n+              30   43   48  19;\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#61) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   16;\n+                   6   17;\n+                  11   21;\n+                  14   18;\n+                  15   19;\n+                  28   20;\n+                  30   24;\n+                  36   25;\n+                  42   26;\n+                  44   27;\n+                  45   32;\n+                  48   29;\n+                  49   30;\n+                  62   31;\n+                  64   34;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+            ;\n+            Attr(#62) {                    \/\/ StackMapTable\n+              [] {                         \/\/ \n+                78b, []z{O,#19};           \/\/ same_locals_1_stack_item_frame\n+                15b;                       \/\/ same_frame\n+                77b, []z{O,#41};           \/\/ same_locals_1_stack_item_frame\n+                67b, []z{O,#19};           \/\/ same_locals_1_stack_item_frame\n+                15b;                       \/\/ same_frame\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #63;                                 \/\/ name_index\n+      #64;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#60) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB2 0x00 0x2C 0xB8 0x00 0x32 0x10 0x5F 0x60 0xB8 0x00;\n+            0x38 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#61) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   38;\n+                  13   39;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#65) {                            \/\/ SourceFile\n+      #66;\n+    }                                      \/\/ end of SourceFile\n+    ;\n+    Attr(#67) {                            \/\/ BootstrapMethods\n+      [] {                                 \/\/ bootstrap_methods\n+        {                                  \/\/ bootstrap_method\n+          #72;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #68;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #72;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #70;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+      }\n+    }                                      \/\/ end of BootstrapMethods\n+    ;\n+    Attr(#78) {                            \/\/ InnerClasses\n+      [] {                                 \/\/ classes\n+          #79   #81   #83  25;\n+      }\n+    }                                      \/\/ end of InnerClasses\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00902m1.jcod","additions":239,"deletions":0,"binary":false,"changes":239,"status":"added"},{"patch":"@@ -0,0 +1,76 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00902m1\/atrcvl00902m1n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00000010;                    \/\/ #1\n+    Class #13;                             \/\/ #2\n+    Class #16;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"I\";                              \/\/ #10\n+    Utf8 \"LineNumberTable\";                \/\/ #11\n+    Utf8 \"SourceFile\";                     \/\/ #12\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00902m1\/atrcvl00902m1n\";  \/\/ #13\n+    Utf8 \"Test.java\";                      \/\/ #14\n+    Utf8 \"i\";                              \/\/ #15\n+    Utf8 \"java\/lang\/Object\";               \/\/ #16\n+  }\n+\n+  0x0021;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #15;                                 \/\/ name_index\n+      #10;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #7;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#11) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0    2;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#12) {                            \/\/ SourceFile\n+      #14;\n+    }                                      \/\/ end of SourceFile\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00902m1n.jcod","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -0,0 +1,76 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00902m1\/atrcvl00902m1p {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00000010;                    \/\/ #1\n+    Class #13;                             \/\/ #2\n+    Class #16;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"I\";                              \/\/ #10\n+    Utf8 \"LineNumberTable\";                \/\/ #11\n+    Utf8 \"SourceFile\";                     \/\/ #12\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00902m1\/atrcvl00902m1p\";  \/\/ #13\n+    Utf8 \"Test.java\";                      \/\/ #14\n+    Utf8 \"i\";                              \/\/ #15\n+    Utf8 \"java\/lang\/Object\";               \/\/ #16\n+  }\n+\n+  0x0021;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #15;                                 \/\/ name_index\n+      #10;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #1;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#11) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0    2;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#12) {                            \/\/ SourceFile\n+      #14;\n+    }                                      \/\/ end of SourceFile\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00902m1p.jcod","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -0,0 +1,239 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00903m1\/atrcvl00903m1 {\n+  0xCAFEBABE;\n+  0;                                       \/\/ minor version\n+  67;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Method #2 #3;                          \/\/ #1\n+    Class #4;                              \/\/ #2\n+    NameAndType #5 #6;                     \/\/ #3\n+    Utf8 \"java\/lang\/Object\";               \/\/ #4\n+    Utf8 \"<init>\";                         \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    String #8;                             \/\/ #7\n+    Utf8 \"javasoft.sqe.tests.vm.classfmt.atr.atrcvl009.atrcvl00903m1.atrcvl00903m1p\";  \/\/ #8\n+    Method #10 #11;                        \/\/ #9\n+    Class #12;                             \/\/ #10\n+    NameAndType #13 #14;                   \/\/ #11\n+    Utf8 \"java\/lang\/Class\";                \/\/ #12\n+    Utf8 \"forName\";                        \/\/ #13\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/Class;\";  \/\/ #14\n+    Method #10 #16;                        \/\/ #15\n+    NameAndType #17 #18;                   \/\/ #16\n+    Utf8 \"newInstance\";                    \/\/ #17\n+    Utf8 \"()Ljava\/lang\/Object;\";           \/\/ #18\n+    Class #20;                             \/\/ #19\n+    Utf8 \"java\/lang\/Throwable\";            \/\/ #20\n+    Method #22 #23;                        \/\/ #21\n+    Class #24;                             \/\/ #22\n+    NameAndType #25 #26;                   \/\/ #23\n+    Utf8 \"java\/lang\/String\";               \/\/ #24\n+    Utf8 \"valueOf\";                        \/\/ #25\n+    Utf8 \"(Ljava\/lang\/Object;)Ljava\/lang\/String;\";  \/\/ #26\n+    InvokeDynamic 0s #28;                  \/\/ #27\n+    NameAndType #29 #30;                   \/\/ #28\n+    Utf8 \"makeConcatWithConstants\";        \/\/ #29\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/String;\";  \/\/ #30\n+    Method #32 #33;                        \/\/ #31\n+    Class #34;                             \/\/ #32\n+    NameAndType #35 #36;                   \/\/ #33\n+    Utf8 \"java\/io\/PrintStream\";            \/\/ #34\n+    Utf8 \"println\";                        \/\/ #35\n+    Utf8 \"(Ljava\/lang\/String;)V\";          \/\/ #36\n+    String #38;                            \/\/ #37\n+    Utf8 \"javasoft.sqe.tests.vm.classfmt.atr.atrcvl009.atrcvl00903m1.atrcvl00903m1n\";  \/\/ #38\n+    String #40;                            \/\/ #39\n+    Utf8 \"test atrcvl00903m1 failed to reject bad classfile atrcvl00903m1n\";  \/\/ #40\n+    Class #42;                             \/\/ #41\n+    Utf8 \"java\/lang\/ClassFormatError\";     \/\/ #42\n+    InvokeDynamic 1s #28;                  \/\/ #43\n+    Field #45 #46;                         \/\/ #44\n+    Class #47;                             \/\/ #45\n+    NameAndType #48 #49;                   \/\/ #46\n+    Utf8 \"java\/lang\/System\";               \/\/ #47\n+    Utf8 \"out\";                            \/\/ #48\n+    Utf8 \"Ljava\/io\/PrintStream;\";          \/\/ #49\n+    Method #51 #52;                        \/\/ #50\n+    Class #53;                             \/\/ #51\n+    NameAndType #54 #55;                   \/\/ #52\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00903m1\/atrcvl00903m1\";  \/\/ #53\n+    Utf8 \"run\";                            \/\/ #54\n+    Utf8 \"([Ljava\/lang\/String;Ljava\/io\/PrintStream;)I\";  \/\/ #55\n+    Method #45 #57;                        \/\/ #56\n+    NameAndType #58 #59;                   \/\/ #57\n+    Utf8 \"exit\";                           \/\/ #58\n+    Utf8 \"(I)V\";                           \/\/ #59\n+    Utf8 \"Code\";                           \/\/ #60\n+    Utf8 \"LineNumberTable\";                \/\/ #61\n+    Utf8 \"StackMapTable\";                  \/\/ #62\n+    Utf8 \"main\";                           \/\/ #63\n+    Utf8 \"([Ljava\/lang\/String;)V\";         \/\/ #64\n+    Utf8 \"SourceFile\";                     \/\/ #65\n+    Utf8 \"atrcvl00903m1.java\";             \/\/ #66\n+    Utf8 \"BootstrapMethods\";               \/\/ #67\n+    String #69;                            \/\/ #68\n+    Utf8 \"test atrcvl00903m1 failed to load or instantiate good classfile atrcvl00903m1p: \\u0001\";  \/\/ #69\n+    String #71;                            \/\/ #70\n+    Utf8 \"test atrcvl00903m1 failed with unexpected loading exception: \\u0001\";  \/\/ #71\n+    MethodHandle 6b #73;                   \/\/ #72\n+    Method #74 #75;                        \/\/ #73\n+    Class #76;                             \/\/ #74\n+    NameAndType #29 #77;                   \/\/ #75\n+    Utf8 \"java\/lang\/invoke\/StringConcatFactory\";  \/\/ #76\n+    Utf8 \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";  \/\/ #77\n+    Utf8 \"InnerClasses\";                   \/\/ #78\n+    Class #80;                             \/\/ #79\n+    Utf8 \"java\/lang\/invoke\/MethodHandles$Lookup\";  \/\/ #80\n+    Class #82;                             \/\/ #81\n+    Utf8 \"java\/lang\/invoke\/MethodHandles\";  \/\/ #82\n+    Utf8 \"Lookup\";                         \/\/ #83\n+  }\n+\n+  0x0021;                                  \/\/ access\n+  #51;                                     \/\/ this_cpx\n+  #2;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #5;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#60) {                        \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x01 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#61) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   11;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #54;                                 \/\/ name_index\n+      #55;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#60) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          4;                               \/\/ max_locals\n+          Bytes[]{\n+            0x12 0x07 0xB8 0x00 0x09 0x4D 0x2C 0xB6 0x00 0x0F 0x4E 0xA7;\n+            0x00 0x13 0x4D 0x2B 0x2C 0xB8 0x00 0x15 0xBA 0x00 0x1B 0x00;\n+            0x00 0xB6 0x00 0x1F 0x05 0xAC 0x12 0x25 0xB8 0x00 0x09 0x4D;\n+            0x2B 0x12 0x27 0xB6 0x00 0x1F 0x05 0xAC 0x4D 0xA7 0x00 0x13;\n+            0x4D 0x2B 0x2C 0xB8 0x00 0x15 0xBA 0x00 0x2B 0x00 0x00 0xB6;\n+            0x00 0x1F 0x05 0xAC 0x03 0xAC;\n+          }\n+          [] {                             \/\/ Traps\n+               0   11   14  19;\n+              30   43   44  41;\n+              30   43   48  19;\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#61) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   16;\n+                   6   17;\n+                  11   21;\n+                  14   18;\n+                  15   19;\n+                  28   20;\n+                  30   24;\n+                  36   25;\n+                  42   26;\n+                  44   27;\n+                  45   32;\n+                  48   29;\n+                  49   30;\n+                  62   31;\n+                  64   34;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+            ;\n+            Attr(#62) {                    \/\/ StackMapTable\n+              [] {                         \/\/ \n+                78b, []z{O,#19};           \/\/ same_locals_1_stack_item_frame\n+                15b;                       \/\/ same_frame\n+                77b, []z{O,#41};           \/\/ same_locals_1_stack_item_frame\n+                67b, []z{O,#19};           \/\/ same_locals_1_stack_item_frame\n+                15b;                       \/\/ same_frame\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #63;                                 \/\/ name_index\n+      #64;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#60) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB2 0x00 0x2C 0xB8 0x00 0x32 0x10 0x5F 0x60 0xB8 0x00;\n+            0x38 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#61) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   38;\n+                  13   39;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#65) {                            \/\/ SourceFile\n+      #66;\n+    }                                      \/\/ end of SourceFile\n+    ;\n+    Attr(#67) {                            \/\/ BootstrapMethods\n+      [] {                                 \/\/ bootstrap_methods\n+        {                                  \/\/ bootstrap_method\n+          #72;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #68;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #72;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #70;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+      }\n+    }                                      \/\/ end of BootstrapMethods\n+    ;\n+    Attr(#78) {                            \/\/ InnerClasses\n+      [] {                                 \/\/ classes\n+          #79   #81   #83  25;\n+      }\n+    }                                      \/\/ end of InnerClasses\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00903m1.jcod","additions":239,"deletions":0,"binary":false,"changes":239,"status":"added"},{"patch":"@@ -0,0 +1,76 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00903m1\/atrcvl00903m1n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00000001;                    \/\/ #1\n+    Class #13;                             \/\/ #2\n+    Class #16;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Z\";                              \/\/ #10\n+    Utf8 \"LineNumberTable\";                \/\/ #11\n+    Utf8 \"SourceFile\";                     \/\/ #12\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00903m1\/atrcvl00903m1n\";  \/\/ #13\n+    Utf8 \"Test.java\";                      \/\/ #14\n+    Utf8 \"i\";                              \/\/ #15\n+    Utf8 \"java\/lang\/Object\";               \/\/ #16\n+  }\n+\n+  0x0021;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #15;                                 \/\/ name_index\n+      #10;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #7;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#11) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0    2;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#12) {                            \/\/ SourceFile\n+      #14;\n+    }                                      \/\/ end of SourceFile\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00903m1n.jcod","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -0,0 +1,76 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00903m1\/atrcvl00903m1p {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00000001;                    \/\/ #1\n+    Class #13;                             \/\/ #2\n+    Class #16;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Z\";                              \/\/ #10\n+    Utf8 \"LineNumberTable\";                \/\/ #11\n+    Utf8 \"SourceFile\";                     \/\/ #12\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00903m1\/atrcvl00903m1p\";  \/\/ #13\n+    Utf8 \"Test.java\";                      \/\/ #14\n+    Utf8 \"i\";                              \/\/ #15\n+    Utf8 \"java\/lang\/Object\";               \/\/ #16\n+  }\n+\n+  0x0021;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #15;                                 \/\/ name_index\n+      #10;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #1;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#11) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0    2;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#12) {                            \/\/ SourceFile\n+      #14;\n+    }                                      \/\/ end of SourceFile\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00903m1p.jcod","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -0,0 +1,239 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00904m1\/atrcvl00904m1 {\n+  0xCAFEBABE;\n+  0;                                       \/\/ minor version\n+  67;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Method #2 #3;                          \/\/ #1\n+    Class #4;                              \/\/ #2\n+    NameAndType #5 #6;                     \/\/ #3\n+    Utf8 \"java\/lang\/Object\";               \/\/ #4\n+    Utf8 \"<init>\";                         \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    String #8;                             \/\/ #7\n+    Utf8 \"javasoft.sqe.tests.vm.classfmt.atr.atrcvl009.atrcvl00904m1.atrcvl00904m1p\";  \/\/ #8\n+    Method #10 #11;                        \/\/ #9\n+    Class #12;                             \/\/ #10\n+    NameAndType #13 #14;                   \/\/ #11\n+    Utf8 \"java\/lang\/Class\";                \/\/ #12\n+    Utf8 \"forName\";                        \/\/ #13\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/Class;\";  \/\/ #14\n+    Method #10 #16;                        \/\/ #15\n+    NameAndType #17 #18;                   \/\/ #16\n+    Utf8 \"newInstance\";                    \/\/ #17\n+    Utf8 \"()Ljava\/lang\/Object;\";           \/\/ #18\n+    Class #20;                             \/\/ #19\n+    Utf8 \"java\/lang\/Throwable\";            \/\/ #20\n+    Method #22 #23;                        \/\/ #21\n+    Class #24;                             \/\/ #22\n+    NameAndType #25 #26;                   \/\/ #23\n+    Utf8 \"java\/lang\/String\";               \/\/ #24\n+    Utf8 \"valueOf\";                        \/\/ #25\n+    Utf8 \"(Ljava\/lang\/Object;)Ljava\/lang\/String;\";  \/\/ #26\n+    InvokeDynamic 0s #28;                  \/\/ #27\n+    NameAndType #29 #30;                   \/\/ #28\n+    Utf8 \"makeConcatWithConstants\";        \/\/ #29\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/String;\";  \/\/ #30\n+    Method #32 #33;                        \/\/ #31\n+    Class #34;                             \/\/ #32\n+    NameAndType #35 #36;                   \/\/ #33\n+    Utf8 \"java\/io\/PrintStream\";            \/\/ #34\n+    Utf8 \"println\";                        \/\/ #35\n+    Utf8 \"(Ljava\/lang\/String;)V\";          \/\/ #36\n+    String #38;                            \/\/ #37\n+    Utf8 \"javasoft.sqe.tests.vm.classfmt.atr.atrcvl009.atrcvl00904m1.atrcvl00904m1n\";  \/\/ #38\n+    String #40;                            \/\/ #39\n+    Utf8 \"test atrcvl00904m1 failed to reject bad classfile atrcvl00904m1n\";  \/\/ #40\n+    Class #42;                             \/\/ #41\n+    Utf8 \"java\/lang\/ClassFormatError\";     \/\/ #42\n+    InvokeDynamic 1s #28;                  \/\/ #43\n+    Field #45 #46;                         \/\/ #44\n+    Class #47;                             \/\/ #45\n+    NameAndType #48 #49;                   \/\/ #46\n+    Utf8 \"java\/lang\/System\";               \/\/ #47\n+    Utf8 \"out\";                            \/\/ #48\n+    Utf8 \"Ljava\/io\/PrintStream;\";          \/\/ #49\n+    Method #51 #52;                        \/\/ #50\n+    Class #53;                             \/\/ #51\n+    NameAndType #54 #55;                   \/\/ #52\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00904m1\/atrcvl00904m1\";  \/\/ #53\n+    Utf8 \"run\";                            \/\/ #54\n+    Utf8 \"([Ljava\/lang\/String;Ljava\/io\/PrintStream;)I\";  \/\/ #55\n+    Method #45 #57;                        \/\/ #56\n+    NameAndType #58 #59;                   \/\/ #57\n+    Utf8 \"exit\";                           \/\/ #58\n+    Utf8 \"(I)V\";                           \/\/ #59\n+    Utf8 \"Code\";                           \/\/ #60\n+    Utf8 \"LineNumberTable\";                \/\/ #61\n+    Utf8 \"StackMapTable\";                  \/\/ #62\n+    Utf8 \"main\";                           \/\/ #63\n+    Utf8 \"([Ljava\/lang\/String;)V\";         \/\/ #64\n+    Utf8 \"SourceFile\";                     \/\/ #65\n+    Utf8 \"atrcvl00904m1.java\";             \/\/ #66\n+    Utf8 \"BootstrapMethods\";               \/\/ #67\n+    String #69;                            \/\/ #68\n+    Utf8 \"test atrcvl00904m1 failed to load or instantiate good classfile atrcvl00904m1p: \\u0001\";  \/\/ #69\n+    String #71;                            \/\/ #70\n+    Utf8 \"test atrcvl00904m1 failed with unexpected loading exception: \\u0001\";  \/\/ #71\n+    MethodHandle 6b #73;                   \/\/ #72\n+    Method #74 #75;                        \/\/ #73\n+    Class #76;                             \/\/ #74\n+    NameAndType #29 #77;                   \/\/ #75\n+    Utf8 \"java\/lang\/invoke\/StringConcatFactory\";  \/\/ #76\n+    Utf8 \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";  \/\/ #77\n+    Utf8 \"InnerClasses\";                   \/\/ #78\n+    Class #80;                             \/\/ #79\n+    Utf8 \"java\/lang\/invoke\/MethodHandles$Lookup\";  \/\/ #80\n+    Class #82;                             \/\/ #81\n+    Utf8 \"java\/lang\/invoke\/MethodHandles\";  \/\/ #82\n+    Utf8 \"Lookup\";                         \/\/ #83\n+  }\n+\n+  0x0021;                                  \/\/ access\n+  #51;                                     \/\/ this_cpx\n+  #2;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #5;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#60) {                        \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x01 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#61) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   11;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #54;                                 \/\/ name_index\n+      #55;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#60) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          4;                               \/\/ max_locals\n+          Bytes[]{\n+            0x12 0x07 0xB8 0x00 0x09 0x4D 0x2C 0xB6 0x00 0x0F 0x4E 0xA7;\n+            0x00 0x13 0x4D 0x2B 0x2C 0xB8 0x00 0x15 0xBA 0x00 0x1B 0x00;\n+            0x00 0xB6 0x00 0x1F 0x05 0xAC 0x12 0x25 0xB8 0x00 0x09 0x4D;\n+            0x2B 0x12 0x27 0xB6 0x00 0x1F 0x05 0xAC 0x4D 0xA7 0x00 0x13;\n+            0x4D 0x2B 0x2C 0xB8 0x00 0x15 0xBA 0x00 0x2B 0x00 0x00 0xB6;\n+            0x00 0x1F 0x05 0xAC 0x03 0xAC;\n+          }\n+          [] {                             \/\/ Traps\n+               0   11   14  19;\n+              30   43   44  41;\n+              30   43   48  19;\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#61) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   16;\n+                   6   17;\n+                  11   21;\n+                  14   18;\n+                  15   19;\n+                  28   20;\n+                  30   24;\n+                  36   25;\n+                  42   26;\n+                  44   27;\n+                  45   32;\n+                  48   29;\n+                  49   30;\n+                  62   31;\n+                  64   34;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+            ;\n+            Attr(#62) {                    \/\/ StackMapTable\n+              [] {                         \/\/ \n+                78b, []z{O,#19};           \/\/ same_locals_1_stack_item_frame\n+                15b;                       \/\/ same_frame\n+                77b, []z{O,#41};           \/\/ same_locals_1_stack_item_frame\n+                67b, []z{O,#19};           \/\/ same_locals_1_stack_item_frame\n+                15b;                       \/\/ same_frame\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #63;                                 \/\/ name_index\n+      #64;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#60) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB2 0x00 0x2C 0xB8 0x00 0x32 0x10 0x5F 0x60 0xB8 0x00;\n+            0x38 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#61) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   38;\n+                  13   39;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#65) {                            \/\/ SourceFile\n+      #66;\n+    }                                      \/\/ end of SourceFile\n+    ;\n+    Attr(#67) {                            \/\/ BootstrapMethods\n+      [] {                                 \/\/ bootstrap_methods\n+        {                                  \/\/ bootstrap_method\n+          #72;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #68;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #72;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #70;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+      }\n+    }                                      \/\/ end of BootstrapMethods\n+    ;\n+    Attr(#78) {                            \/\/ InnerClasses\n+      [] {                                 \/\/ classes\n+          #79   #81   #83  25;\n+      }\n+    }                                      \/\/ end of InnerClasses\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00904m1.jcod","additions":239,"deletions":0,"binary":false,"changes":239,"status":"added"},{"patch":"@@ -0,0 +1,76 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00904m1\/atrcvl00904m1n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00000010;                    \/\/ #1\n+    Class #13;                             \/\/ #2\n+    Class #16;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"S\";                              \/\/ #10\n+    Utf8 \"LineNumberTable\";                \/\/ #11\n+    Utf8 \"SourceFile\";                     \/\/ #12\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00904m1\/atrcvl00904m1n\";  \/\/ #13\n+    Utf8 \"Test.java\";                      \/\/ #14\n+    Utf8 \"i\";                              \/\/ #15\n+    Utf8 \"java\/lang\/Object\";               \/\/ #16\n+  }\n+\n+  0x0021;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #15;                                 \/\/ name_index\n+      #10;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #7;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#11) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0    2;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#12) {                            \/\/ SourceFile\n+      #14;\n+    }                                      \/\/ end of SourceFile\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00904m1n.jcod","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -0,0 +1,76 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00904m1\/atrcvl00904m1p {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00000010;                    \/\/ #1\n+    Class #13;                             \/\/ #2\n+    Class #16;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"S\";                              \/\/ #10\n+    Utf8 \"LineNumberTable\";                \/\/ #11\n+    Utf8 \"SourceFile\";                     \/\/ #12\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00904m1\/atrcvl00904m1p\";  \/\/ #13\n+    Utf8 \"Test.java\";                      \/\/ #14\n+    Utf8 \"i\";                              \/\/ #15\n+    Utf8 \"java\/lang\/Object\";               \/\/ #16\n+  }\n+\n+  0x0021;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #15;                                 \/\/ name_index\n+      #10;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #1;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#11) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0    2;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#12) {                            \/\/ SourceFile\n+      #14;\n+    }                                      \/\/ end of SourceFile\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00904m1p.jcod","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -0,0 +1,239 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00905m1\/atrcvl00905m1 {\n+  0xCAFEBABE;\n+  0;                                       \/\/ minor version\n+  67;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Method #2 #3;                          \/\/ #1\n+    Class #4;                              \/\/ #2\n+    NameAndType #5 #6;                     \/\/ #3\n+    Utf8 \"java\/lang\/Object\";               \/\/ #4\n+    Utf8 \"<init>\";                         \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    String #8;                             \/\/ #7\n+    Utf8 \"javasoft.sqe.tests.vm.classfmt.atr.atrcvl009.atrcvl00905m1.atrcvl00905m1p\";  \/\/ #8\n+    Method #10 #11;                        \/\/ #9\n+    Class #12;                             \/\/ #10\n+    NameAndType #13 #14;                   \/\/ #11\n+    Utf8 \"java\/lang\/Class\";                \/\/ #12\n+    Utf8 \"forName\";                        \/\/ #13\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/Class;\";  \/\/ #14\n+    Method #10 #16;                        \/\/ #15\n+    NameAndType #17 #18;                   \/\/ #16\n+    Utf8 \"newInstance\";                    \/\/ #17\n+    Utf8 \"()Ljava\/lang\/Object;\";           \/\/ #18\n+    Class #20;                             \/\/ #19\n+    Utf8 \"java\/lang\/Throwable\";            \/\/ #20\n+    Method #22 #23;                        \/\/ #21\n+    Class #24;                             \/\/ #22\n+    NameAndType #25 #26;                   \/\/ #23\n+    Utf8 \"java\/lang\/String\";               \/\/ #24\n+    Utf8 \"valueOf\";                        \/\/ #25\n+    Utf8 \"(Ljava\/lang\/Object;)Ljava\/lang\/String;\";  \/\/ #26\n+    InvokeDynamic 0s #28;                  \/\/ #27\n+    NameAndType #29 #30;                   \/\/ #28\n+    Utf8 \"makeConcatWithConstants\";        \/\/ #29\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/String;\";  \/\/ #30\n+    Method #32 #33;                        \/\/ #31\n+    Class #34;                             \/\/ #32\n+    NameAndType #35 #36;                   \/\/ #33\n+    Utf8 \"java\/io\/PrintStream\";            \/\/ #34\n+    Utf8 \"println\";                        \/\/ #35\n+    Utf8 \"(Ljava\/lang\/String;)V\";          \/\/ #36\n+    String #38;                            \/\/ #37\n+    Utf8 \"javasoft.sqe.tests.vm.classfmt.atr.atrcvl009.atrcvl00905m1.atrcvl00905m1n\";  \/\/ #38\n+    String #40;                            \/\/ #39\n+    Utf8 \"test atrcvl00905m1 failed to reject bad classfile atrcvl00905m1n\";  \/\/ #40\n+    Class #42;                             \/\/ #41\n+    Utf8 \"java\/lang\/ClassFormatError\";     \/\/ #42\n+    InvokeDynamic 1s #28;                  \/\/ #43\n+    Field #45 #46;                         \/\/ #44\n+    Class #47;                             \/\/ #45\n+    NameAndType #48 #49;                   \/\/ #46\n+    Utf8 \"java\/lang\/System\";               \/\/ #47\n+    Utf8 \"out\";                            \/\/ #48\n+    Utf8 \"Ljava\/io\/PrintStream;\";          \/\/ #49\n+    Method #51 #52;                        \/\/ #50\n+    Class #53;                             \/\/ #51\n+    NameAndType #54 #55;                   \/\/ #52\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00905m1\/atrcvl00905m1\";  \/\/ #53\n+    Utf8 \"run\";                            \/\/ #54\n+    Utf8 \"([Ljava\/lang\/String;Ljava\/io\/PrintStream;)I\";  \/\/ #55\n+    Method #45 #57;                        \/\/ #56\n+    NameAndType #58 #59;                   \/\/ #57\n+    Utf8 \"exit\";                           \/\/ #58\n+    Utf8 \"(I)V\";                           \/\/ #59\n+    Utf8 \"Code\";                           \/\/ #60\n+    Utf8 \"LineNumberTable\";                \/\/ #61\n+    Utf8 \"StackMapTable\";                  \/\/ #62\n+    Utf8 \"main\";                           \/\/ #63\n+    Utf8 \"([Ljava\/lang\/String;)V\";         \/\/ #64\n+    Utf8 \"SourceFile\";                     \/\/ #65\n+    Utf8 \"atrcvl00905m1.java\";             \/\/ #66\n+    Utf8 \"BootstrapMethods\";               \/\/ #67\n+    String #69;                            \/\/ #68\n+    Utf8 \"test atrcvl00905m1 failed to load or instantiate good classfile atrcvl00905m1p: \\u0001\";  \/\/ #69\n+    String #71;                            \/\/ #70\n+    Utf8 \"test atrcvl00905m1 failed with unexpected loading exception: \\u0001\";  \/\/ #71\n+    MethodHandle 6b #73;                   \/\/ #72\n+    Method #74 #75;                        \/\/ #73\n+    Class #76;                             \/\/ #74\n+    NameAndType #29 #77;                   \/\/ #75\n+    Utf8 \"java\/lang\/invoke\/StringConcatFactory\";  \/\/ #76\n+    Utf8 \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";  \/\/ #77\n+    Utf8 \"InnerClasses\";                   \/\/ #78\n+    Class #80;                             \/\/ #79\n+    Utf8 \"java\/lang\/invoke\/MethodHandles$Lookup\";  \/\/ #80\n+    Class #82;                             \/\/ #81\n+    Utf8 \"java\/lang\/invoke\/MethodHandles\";  \/\/ #82\n+    Utf8 \"Lookup\";                         \/\/ #83\n+  }\n+\n+  0x0021;                                  \/\/ access\n+  #51;                                     \/\/ this_cpx\n+  #2;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #5;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#60) {                        \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x01 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#61) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   11;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #54;                                 \/\/ name_index\n+      #55;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#60) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          4;                               \/\/ max_locals\n+          Bytes[]{\n+            0x12 0x07 0xB8 0x00 0x09 0x4D 0x2C 0xB6 0x00 0x0F 0x4E 0xA7;\n+            0x00 0x13 0x4D 0x2B 0x2C 0xB8 0x00 0x15 0xBA 0x00 0x1B 0x00;\n+            0x00 0xB6 0x00 0x1F 0x05 0xAC 0x12 0x25 0xB8 0x00 0x09 0x4D;\n+            0x2B 0x12 0x27 0xB6 0x00 0x1F 0x05 0xAC 0x4D 0xA7 0x00 0x13;\n+            0x4D 0x2B 0x2C 0xB8 0x00 0x15 0xBA 0x00 0x2B 0x00 0x00 0xB6;\n+            0x00 0x1F 0x05 0xAC 0x03 0xAC;\n+          }\n+          [] {                             \/\/ Traps\n+               0   11   14  19;\n+              30   43   44  41;\n+              30   43   48  19;\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#61) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   16;\n+                   6   17;\n+                  11   21;\n+                  14   18;\n+                  15   19;\n+                  28   20;\n+                  30   24;\n+                  36   25;\n+                  42   26;\n+                  44   27;\n+                  45   32;\n+                  48   29;\n+                  49   30;\n+                  62   31;\n+                  64   34;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+            ;\n+            Attr(#62) {                    \/\/ StackMapTable\n+              [] {                         \/\/ \n+                78b, []z{O,#19};           \/\/ same_locals_1_stack_item_frame\n+                15b;                       \/\/ same_frame\n+                77b, []z{O,#41};           \/\/ same_locals_1_stack_item_frame\n+                67b, []z{O,#19};           \/\/ same_locals_1_stack_item_frame\n+                15b;                       \/\/ same_frame\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #63;                                 \/\/ name_index\n+      #64;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#60) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB2 0x00 0x2C 0xB8 0x00 0x32 0x10 0x5F 0x60 0xB8 0x00;\n+            0x38 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#61) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   38;\n+                  13   39;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#65) {                            \/\/ SourceFile\n+      #66;\n+    }                                      \/\/ end of SourceFile\n+    ;\n+    Attr(#67) {                            \/\/ BootstrapMethods\n+      [] {                                 \/\/ bootstrap_methods\n+        {                                  \/\/ bootstrap_method\n+          #72;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #68;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #72;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #70;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+      }\n+    }                                      \/\/ end of BootstrapMethods\n+    ;\n+    Attr(#78) {                            \/\/ InnerClasses\n+      [] {                                 \/\/ classes\n+          #79   #81   #83  25;\n+      }\n+    }                                      \/\/ end of InnerClasses\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00905m1.jcod","additions":239,"deletions":0,"binary":false,"changes":239,"status":"added"},{"patch":"@@ -0,0 +1,76 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00905m1\/atrcvl00905m1n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Float 0x41200000;                      \/\/ #1\n+    Class #13;                             \/\/ #2\n+    Class #16;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"F\";                              \/\/ #10\n+    Utf8 \"LineNumberTable\";                \/\/ #11\n+    Utf8 \"SourceFile\";                     \/\/ #12\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00905m1\/atrcvl00905m1n\";  \/\/ #13\n+    Utf8 \"Test.java\";                      \/\/ #14\n+    Utf8 \"i\";                              \/\/ #15\n+    Utf8 \"java\/lang\/Object\";               \/\/ #16\n+  }\n+\n+  0x0021;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #15;                                 \/\/ name_index\n+      #10;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #7;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#11) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0    2;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#12) {                            \/\/ SourceFile\n+      #14;\n+    }                                      \/\/ end of SourceFile\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00905m1n.jcod","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -0,0 +1,76 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00905m1\/atrcvl00905m1p {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Float 0x41200000;                      \/\/ #1\n+    Class #13;                             \/\/ #2\n+    Class #16;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"F\";                              \/\/ #10\n+    Utf8 \"LineNumberTable\";                \/\/ #11\n+    Utf8 \"SourceFile\";                     \/\/ #12\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00905m1\/atrcvl00905m1p\";  \/\/ #13\n+    Utf8 \"Test.java\";                      \/\/ #14\n+    Utf8 \"i\";                              \/\/ #15\n+    Utf8 \"java\/lang\/Object\";               \/\/ #16\n+  }\n+\n+  0x0021;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #15;                                 \/\/ name_index\n+      #10;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #1;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#11) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0    2;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#12) {                            \/\/ SourceFile\n+      #14;\n+    }                                      \/\/ end of SourceFile\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00905m1p.jcod","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -0,0 +1,239 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00906m1\/atrcvl00906m1 {\n+  0xCAFEBABE;\n+  0;                                       \/\/ minor version\n+  67;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Method #2 #3;                          \/\/ #1\n+    Class #4;                              \/\/ #2\n+    NameAndType #5 #6;                     \/\/ #3\n+    Utf8 \"java\/lang\/Object\";               \/\/ #4\n+    Utf8 \"<init>\";                         \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    String #8;                             \/\/ #7\n+    Utf8 \"javasoft.sqe.tests.vm.classfmt.atr.atrcvl009.atrcvl00906m1.atrcvl00906m1p\";  \/\/ #8\n+    Method #10 #11;                        \/\/ #9\n+    Class #12;                             \/\/ #10\n+    NameAndType #13 #14;                   \/\/ #11\n+    Utf8 \"java\/lang\/Class\";                \/\/ #12\n+    Utf8 \"forName\";                        \/\/ #13\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/Class;\";  \/\/ #14\n+    Method #10 #16;                        \/\/ #15\n+    NameAndType #17 #18;                   \/\/ #16\n+    Utf8 \"newInstance\";                    \/\/ #17\n+    Utf8 \"()Ljava\/lang\/Object;\";           \/\/ #18\n+    Class #20;                             \/\/ #19\n+    Utf8 \"java\/lang\/Throwable\";            \/\/ #20\n+    Method #22 #23;                        \/\/ #21\n+    Class #24;                             \/\/ #22\n+    NameAndType #25 #26;                   \/\/ #23\n+    Utf8 \"java\/lang\/String\";               \/\/ #24\n+    Utf8 \"valueOf\";                        \/\/ #25\n+    Utf8 \"(Ljava\/lang\/Object;)Ljava\/lang\/String;\";  \/\/ #26\n+    InvokeDynamic 0s #28;                  \/\/ #27\n+    NameAndType #29 #30;                   \/\/ #28\n+    Utf8 \"makeConcatWithConstants\";        \/\/ #29\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/String;\";  \/\/ #30\n+    Method #32 #33;                        \/\/ #31\n+    Class #34;                             \/\/ #32\n+    NameAndType #35 #36;                   \/\/ #33\n+    Utf8 \"java\/io\/PrintStream\";            \/\/ #34\n+    Utf8 \"println\";                        \/\/ #35\n+    Utf8 \"(Ljava\/lang\/String;)V\";          \/\/ #36\n+    String #38;                            \/\/ #37\n+    Utf8 \"javasoft.sqe.tests.vm.classfmt.atr.atrcvl009.atrcvl00906m1.atrcvl00906m1n\";  \/\/ #38\n+    String #40;                            \/\/ #39\n+    Utf8 \"test atrcvl00906m1 failed to reject bad classfile atrcvl00906m1n\";  \/\/ #40\n+    Class #42;                             \/\/ #41\n+    Utf8 \"java\/lang\/ClassFormatError\";     \/\/ #42\n+    InvokeDynamic 1s #28;                  \/\/ #43\n+    Field #45 #46;                         \/\/ #44\n+    Class #47;                             \/\/ #45\n+    NameAndType #48 #49;                   \/\/ #46\n+    Utf8 \"java\/lang\/System\";               \/\/ #47\n+    Utf8 \"out\";                            \/\/ #48\n+    Utf8 \"Ljava\/io\/PrintStream;\";          \/\/ #49\n+    Method #51 #52;                        \/\/ #50\n+    Class #53;                             \/\/ #51\n+    NameAndType #54 #55;                   \/\/ #52\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00906m1\/atrcvl00906m1\";  \/\/ #53\n+    Utf8 \"run\";                            \/\/ #54\n+    Utf8 \"([Ljava\/lang\/String;Ljava\/io\/PrintStream;)I\";  \/\/ #55\n+    Method #45 #57;                        \/\/ #56\n+    NameAndType #58 #59;                   \/\/ #57\n+    Utf8 \"exit\";                           \/\/ #58\n+    Utf8 \"(I)V\";                           \/\/ #59\n+    Utf8 \"Code\";                           \/\/ #60\n+    Utf8 \"LineNumberTable\";                \/\/ #61\n+    Utf8 \"StackMapTable\";                  \/\/ #62\n+    Utf8 \"main\";                           \/\/ #63\n+    Utf8 \"([Ljava\/lang\/String;)V\";         \/\/ #64\n+    Utf8 \"SourceFile\";                     \/\/ #65\n+    Utf8 \"atrcvl00906m1.java\";             \/\/ #66\n+    Utf8 \"BootstrapMethods\";               \/\/ #67\n+    String #69;                            \/\/ #68\n+    Utf8 \"test atrcvl00906m1 failed to load or instantiate good classfile atrcvl00906m1p: \\u0001\";  \/\/ #69\n+    String #71;                            \/\/ #70\n+    Utf8 \"test atrcvl00906m1 failed with unexpected loading exception: \\u0001\";  \/\/ #71\n+    MethodHandle 6b #73;                   \/\/ #72\n+    Method #74 #75;                        \/\/ #73\n+    Class #76;                             \/\/ #74\n+    NameAndType #29 #77;                   \/\/ #75\n+    Utf8 \"java\/lang\/invoke\/StringConcatFactory\";  \/\/ #76\n+    Utf8 \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";  \/\/ #77\n+    Utf8 \"InnerClasses\";                   \/\/ #78\n+    Class #80;                             \/\/ #79\n+    Utf8 \"java\/lang\/invoke\/MethodHandles$Lookup\";  \/\/ #80\n+    Class #82;                             \/\/ #81\n+    Utf8 \"java\/lang\/invoke\/MethodHandles\";  \/\/ #82\n+    Utf8 \"Lookup\";                         \/\/ #83\n+  }\n+\n+  0x0021;                                  \/\/ access\n+  #51;                                     \/\/ this_cpx\n+  #2;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #5;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#60) {                        \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x01 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#61) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   11;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #54;                                 \/\/ name_index\n+      #55;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#60) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          4;                               \/\/ max_locals\n+          Bytes[]{\n+            0x12 0x07 0xB8 0x00 0x09 0x4D 0x2C 0xB6 0x00 0x0F 0x4E 0xA7;\n+            0x00 0x13 0x4D 0x2B 0x2C 0xB8 0x00 0x15 0xBA 0x00 0x1B 0x00;\n+            0x00 0xB6 0x00 0x1F 0x05 0xAC 0x12 0x25 0xB8 0x00 0x09 0x4D;\n+            0x2B 0x12 0x27 0xB6 0x00 0x1F 0x05 0xAC 0x4D 0xA7 0x00 0x13;\n+            0x4D 0x2B 0x2C 0xB8 0x00 0x15 0xBA 0x00 0x2B 0x00 0x00 0xB6;\n+            0x00 0x1F 0x05 0xAC 0x03 0xAC;\n+          }\n+          [] {                             \/\/ Traps\n+               0   11   14  19;\n+              30   43   44  41;\n+              30   43   48  19;\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#61) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   16;\n+                   6   17;\n+                  11   21;\n+                  14   18;\n+                  15   19;\n+                  28   20;\n+                  30   24;\n+                  36   25;\n+                  42   26;\n+                  44   27;\n+                  45   32;\n+                  48   29;\n+                  49   30;\n+                  62   31;\n+                  64   34;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+            ;\n+            Attr(#62) {                    \/\/ StackMapTable\n+              [] {                         \/\/ \n+                78b, []z{O,#19};           \/\/ same_locals_1_stack_item_frame\n+                15b;                       \/\/ same_frame\n+                77b, []z{O,#41};           \/\/ same_locals_1_stack_item_frame\n+                67b, []z{O,#19};           \/\/ same_locals_1_stack_item_frame\n+                15b;                       \/\/ same_frame\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #63;                                 \/\/ name_index\n+      #64;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#60) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB2 0x00 0x2C 0xB8 0x00 0x32 0x10 0x5F 0x60 0xB8 0x00;\n+            0x38 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#61) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   38;\n+                  13   39;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#65) {                            \/\/ SourceFile\n+      #66;\n+    }                                      \/\/ end of SourceFile\n+    ;\n+    Attr(#67) {                            \/\/ BootstrapMethods\n+      [] {                                 \/\/ bootstrap_methods\n+        {                                  \/\/ bootstrap_method\n+          #72;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #68;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #72;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #70;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+      }\n+    }                                      \/\/ end of BootstrapMethods\n+    ;\n+    Attr(#78) {                            \/\/ InnerClasses\n+      [] {                                 \/\/ classes\n+          #79   #81   #83  25;\n+      }\n+    }                                      \/\/ end of InnerClasses\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00906m1.jcod","additions":239,"deletions":0,"binary":false,"changes":239,"status":"added"},{"patch":"@@ -0,0 +1,76 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00906m1\/atrcvl00906m1n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00000010;                    \/\/ #1\n+    Class #13;                             \/\/ #2\n+    Class #16;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"B\";                              \/\/ #10\n+    Utf8 \"LineNumberTable\";                \/\/ #11\n+    Utf8 \"SourceFile\";                     \/\/ #12\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00906m1\/atrcvl00906m1n\";  \/\/ #13\n+    Utf8 \"Test.java\";                      \/\/ #14\n+    Utf8 \"i\";                              \/\/ #15\n+    Utf8 \"java\/lang\/Object\";               \/\/ #16\n+  }\n+\n+  0x0021;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #15;                                 \/\/ name_index\n+      #10;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #7;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#11) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0    2;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#12) {                            \/\/ SourceFile\n+      #14;\n+    }                                      \/\/ end of SourceFile\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00906m1n.jcod","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -0,0 +1,76 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00906m1\/atrcvl00906m1p {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00000010;                    \/\/ #1\n+    Class #13;                             \/\/ #2\n+    Class #16;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"B\";                              \/\/ #10\n+    Utf8 \"LineNumberTable\";                \/\/ #11\n+    Utf8 \"SourceFile\";                     \/\/ #12\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00906m1\/atrcvl00906m1p\";  \/\/ #13\n+    Utf8 \"Test.java\";                      \/\/ #14\n+    Utf8 \"i\";                              \/\/ #15\n+    Utf8 \"java\/lang\/Object\";               \/\/ #16\n+  }\n+\n+  0x0021;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #15;                                 \/\/ name_index\n+      #10;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #1;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#11) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0    2;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#12) {                            \/\/ SourceFile\n+      #14;\n+    }                                      \/\/ end of SourceFile\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00906m1p.jcod","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -0,0 +1,239 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00907m1\/atrcvl00907m1 {\n+  0xCAFEBABE;\n+  0;                                       \/\/ minor version\n+  67;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Method #2 #3;                          \/\/ #1\n+    Class #4;                              \/\/ #2\n+    NameAndType #5 #6;                     \/\/ #3\n+    Utf8 \"java\/lang\/Object\";               \/\/ #4\n+    Utf8 \"<init>\";                         \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    String #8;                             \/\/ #7\n+    Utf8 \"javasoft.sqe.tests.vm.classfmt.atr.atrcvl009.atrcvl00907m1.atrcvl00907m1p\";  \/\/ #8\n+    Method #10 #11;                        \/\/ #9\n+    Class #12;                             \/\/ #10\n+    NameAndType #13 #14;                   \/\/ #11\n+    Utf8 \"java\/lang\/Class\";                \/\/ #12\n+    Utf8 \"forName\";                        \/\/ #13\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/Class;\";  \/\/ #14\n+    Method #10 #16;                        \/\/ #15\n+    NameAndType #17 #18;                   \/\/ #16\n+    Utf8 \"newInstance\";                    \/\/ #17\n+    Utf8 \"()Ljava\/lang\/Object;\";           \/\/ #18\n+    Class #20;                             \/\/ #19\n+    Utf8 \"java\/lang\/Throwable\";            \/\/ #20\n+    Method #22 #23;                        \/\/ #21\n+    Class #24;                             \/\/ #22\n+    NameAndType #25 #26;                   \/\/ #23\n+    Utf8 \"java\/lang\/String\";               \/\/ #24\n+    Utf8 \"valueOf\";                        \/\/ #25\n+    Utf8 \"(Ljava\/lang\/Object;)Ljava\/lang\/String;\";  \/\/ #26\n+    InvokeDynamic 0s #28;                  \/\/ #27\n+    NameAndType #29 #30;                   \/\/ #28\n+    Utf8 \"makeConcatWithConstants\";        \/\/ #29\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/String;\";  \/\/ #30\n+    Method #32 #33;                        \/\/ #31\n+    Class #34;                             \/\/ #32\n+    NameAndType #35 #36;                   \/\/ #33\n+    Utf8 \"java\/io\/PrintStream\";            \/\/ #34\n+    Utf8 \"println\";                        \/\/ #35\n+    Utf8 \"(Ljava\/lang\/String;)V\";          \/\/ #36\n+    String #38;                            \/\/ #37\n+    Utf8 \"javasoft.sqe.tests.vm.classfmt.atr.atrcvl009.atrcvl00907m1.atrcvl00907m1n\";  \/\/ #38\n+    String #40;                            \/\/ #39\n+    Utf8 \"test atrcvl00907m1 failed to reject bad classfile atrcvl00907m1n\";  \/\/ #40\n+    Class #42;                             \/\/ #41\n+    Utf8 \"java\/lang\/ClassFormatError\";     \/\/ #42\n+    InvokeDynamic 1s #28;                  \/\/ #43\n+    Field #45 #46;                         \/\/ #44\n+    Class #47;                             \/\/ #45\n+    NameAndType #48 #49;                   \/\/ #46\n+    Utf8 \"java\/lang\/System\";               \/\/ #47\n+    Utf8 \"out\";                            \/\/ #48\n+    Utf8 \"Ljava\/io\/PrintStream;\";          \/\/ #49\n+    Method #51 #52;                        \/\/ #50\n+    Class #53;                             \/\/ #51\n+    NameAndType #54 #55;                   \/\/ #52\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00907m1\/atrcvl00907m1\";  \/\/ #53\n+    Utf8 \"run\";                            \/\/ #54\n+    Utf8 \"([Ljava\/lang\/String;Ljava\/io\/PrintStream;)I\";  \/\/ #55\n+    Method #45 #57;                        \/\/ #56\n+    NameAndType #58 #59;                   \/\/ #57\n+    Utf8 \"exit\";                           \/\/ #58\n+    Utf8 \"(I)V\";                           \/\/ #59\n+    Utf8 \"Code\";                           \/\/ #60\n+    Utf8 \"LineNumberTable\";                \/\/ #61\n+    Utf8 \"StackMapTable\";                  \/\/ #62\n+    Utf8 \"main\";                           \/\/ #63\n+    Utf8 \"([Ljava\/lang\/String;)V\";         \/\/ #64\n+    Utf8 \"SourceFile\";                     \/\/ #65\n+    Utf8 \"atrcvl00907m1.java\";             \/\/ #66\n+    Utf8 \"BootstrapMethods\";               \/\/ #67\n+    String #69;                            \/\/ #68\n+    Utf8 \"test atrcvl00907m1 failed to load or instantiate good classfile atrcvl00907m1p: \\u0001\";  \/\/ #69\n+    String #71;                            \/\/ #70\n+    Utf8 \"test atrcvl00907m1 failed with unexpected loading exception: \\u0001\";  \/\/ #71\n+    MethodHandle 6b #73;                   \/\/ #72\n+    Method #74 #75;                        \/\/ #73\n+    Class #76;                             \/\/ #74\n+    NameAndType #29 #77;                   \/\/ #75\n+    Utf8 \"java\/lang\/invoke\/StringConcatFactory\";  \/\/ #76\n+    Utf8 \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";  \/\/ #77\n+    Utf8 \"InnerClasses\";                   \/\/ #78\n+    Class #80;                             \/\/ #79\n+    Utf8 \"java\/lang\/invoke\/MethodHandles$Lookup\";  \/\/ #80\n+    Class #82;                             \/\/ #81\n+    Utf8 \"java\/lang\/invoke\/MethodHandles\";  \/\/ #82\n+    Utf8 \"Lookup\";                         \/\/ #83\n+  }\n+\n+  0x0021;                                  \/\/ access\n+  #51;                                     \/\/ this_cpx\n+  #2;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #5;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#60) {                        \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x01 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#61) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   11;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #54;                                 \/\/ name_index\n+      #55;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#60) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          4;                               \/\/ max_locals\n+          Bytes[]{\n+            0x12 0x07 0xB8 0x00 0x09 0x4D 0x2C 0xB6 0x00 0x0F 0x4E 0xA7;\n+            0x00 0x13 0x4D 0x2B 0x2C 0xB8 0x00 0x15 0xBA 0x00 0x1B 0x00;\n+            0x00 0xB6 0x00 0x1F 0x05 0xAC 0x12 0x25 0xB8 0x00 0x09 0x4D;\n+            0x2B 0x12 0x27 0xB6 0x00 0x1F 0x05 0xAC 0x4D 0xA7 0x00 0x13;\n+            0x4D 0x2B 0x2C 0xB8 0x00 0x15 0xBA 0x00 0x2B 0x00 0x00 0xB6;\n+            0x00 0x1F 0x05 0xAC 0x03 0xAC;\n+          }\n+          [] {                             \/\/ Traps\n+               0   11   14  19;\n+              30   43   44  41;\n+              30   43   48  19;\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#61) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   16;\n+                   6   17;\n+                  11   21;\n+                  14   18;\n+                  15   19;\n+                  28   20;\n+                  30   24;\n+                  36   25;\n+                  42   26;\n+                  44   27;\n+                  45   32;\n+                  48   29;\n+                  49   30;\n+                  62   31;\n+                  64   34;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+            ;\n+            Attr(#62) {                    \/\/ StackMapTable\n+              [] {                         \/\/ \n+                78b, []z{O,#19};           \/\/ same_locals_1_stack_item_frame\n+                15b;                       \/\/ same_frame\n+                77b, []z{O,#41};           \/\/ same_locals_1_stack_item_frame\n+                67b, []z{O,#19};           \/\/ same_locals_1_stack_item_frame\n+                15b;                       \/\/ same_frame\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #63;                                 \/\/ name_index\n+      #64;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#60) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB2 0x00 0x2C 0xB8 0x00 0x32 0x10 0x5F 0x60 0xB8 0x00;\n+            0x38 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#61) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   38;\n+                  13   39;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#65) {                            \/\/ SourceFile\n+      #66;\n+    }                                      \/\/ end of SourceFile\n+    ;\n+    Attr(#67) {                            \/\/ BootstrapMethods\n+      [] {                                 \/\/ bootstrap_methods\n+        {                                  \/\/ bootstrap_method\n+          #72;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #68;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #72;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #70;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+      }\n+    }                                      \/\/ end of BootstrapMethods\n+    ;\n+    Attr(#78) {                            \/\/ InnerClasses\n+      [] {                                 \/\/ classes\n+          #79   #81   #83  25;\n+      }\n+    }                                      \/\/ end of InnerClasses\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00907m1.jcod","additions":239,"deletions":0,"binary":false,"changes":239,"status":"added"},{"patch":"@@ -0,0 +1,76 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00907m1\/atrcvl00907m1n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Class #14;                             \/\/ #1\n+    Class #17;                             \/\/ #2\n+    Method #2 #6;                          \/\/ #3\n+    Long 0x000000000000000A;;              \/\/ #4\n+    NameAndType #8 #7;                     \/\/ #6\n+    Utf8 \"()V\";                            \/\/ #7\n+    Utf8 \"<init>\";                         \/\/ #8\n+    Utf8 \"Code\";                           \/\/ #9\n+    Utf8 \"ConstantValue\";                  \/\/ #10\n+    Utf8 \"J\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"SourceFile\";                     \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00907m1\/atrcvl00907m1n\";  \/\/ #14\n+    Utf8 \"Test.java\";                      \/\/ #15\n+    Utf8 \"i\";                              \/\/ #16\n+    Utf8 \"java\/lang\/Object\";               \/\/ #17\n+  }\n+\n+  0x0021;                                  \/\/ access\n+  #1;                                      \/\/ this_cpx\n+  #2;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #16;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#10) {                        \/\/ ConstantValue\n+          #7;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #8;                                  \/\/ name_index\n+      #7;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x03 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#12) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0    2;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#13) {                            \/\/ SourceFile\n+      #15;\n+    }                                      \/\/ end of SourceFile\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00907m1n.jcod","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -0,0 +1,76 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00907m1\/atrcvl00907m1p {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Class #14;                             \/\/ #1\n+    Class #17;                             \/\/ #2\n+    Method #2 #6;                          \/\/ #3\n+    Long 0x000000000000000A;;              \/\/ #4\n+    NameAndType #8 #7;                     \/\/ #6\n+    Utf8 \"()V\";                            \/\/ #7\n+    Utf8 \"<init>\";                         \/\/ #8\n+    Utf8 \"Code\";                           \/\/ #9\n+    Utf8 \"ConstantValue\";                  \/\/ #10\n+    Utf8 \"J\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"SourceFile\";                     \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00907m1\/atrcvl00907m1p\";  \/\/ #14\n+    Utf8 \"Test.java\";                      \/\/ #15\n+    Utf8 \"i\";                              \/\/ #16\n+    Utf8 \"java\/lang\/Object\";               \/\/ #17\n+  }\n+\n+  0x0021;                                  \/\/ access\n+  #1;                                      \/\/ this_cpx\n+  #2;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #16;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#10) {                        \/\/ ConstantValue\n+          #4;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #8;                                  \/\/ name_index\n+      #7;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x03 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#12) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0    2;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#13) {                            \/\/ SourceFile\n+      #15;\n+    }                                      \/\/ end of SourceFile\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00907m1p.jcod","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -0,0 +1,239 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00908m1\/atrcvl00908m1 {\n+  0xCAFEBABE;\n+  0;                                       \/\/ minor version\n+  67;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Method #2 #3;                          \/\/ #1\n+    Class #4;                              \/\/ #2\n+    NameAndType #5 #6;                     \/\/ #3\n+    Utf8 \"java\/lang\/Object\";               \/\/ #4\n+    Utf8 \"<init>\";                         \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    String #8;                             \/\/ #7\n+    Utf8 \"javasoft.sqe.tests.vm.classfmt.atr.atrcvl009.atrcvl00908m1.atrcvl00908m1p\";  \/\/ #8\n+    Method #10 #11;                        \/\/ #9\n+    Class #12;                             \/\/ #10\n+    NameAndType #13 #14;                   \/\/ #11\n+    Utf8 \"java\/lang\/Class\";                \/\/ #12\n+    Utf8 \"forName\";                        \/\/ #13\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/Class;\";  \/\/ #14\n+    Method #10 #16;                        \/\/ #15\n+    NameAndType #17 #18;                   \/\/ #16\n+    Utf8 \"newInstance\";                    \/\/ #17\n+    Utf8 \"()Ljava\/lang\/Object;\";           \/\/ #18\n+    Class #20;                             \/\/ #19\n+    Utf8 \"java\/lang\/Throwable\";            \/\/ #20\n+    Method #22 #23;                        \/\/ #21\n+    Class #24;                             \/\/ #22\n+    NameAndType #25 #26;                   \/\/ #23\n+    Utf8 \"java\/lang\/String\";               \/\/ #24\n+    Utf8 \"valueOf\";                        \/\/ #25\n+    Utf8 \"(Ljava\/lang\/Object;)Ljava\/lang\/String;\";  \/\/ #26\n+    InvokeDynamic 0s #28;                  \/\/ #27\n+    NameAndType #29 #30;                   \/\/ #28\n+    Utf8 \"makeConcatWithConstants\";        \/\/ #29\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/String;\";  \/\/ #30\n+    Method #32 #33;                        \/\/ #31\n+    Class #34;                             \/\/ #32\n+    NameAndType #35 #36;                   \/\/ #33\n+    Utf8 \"java\/io\/PrintStream\";            \/\/ #34\n+    Utf8 \"println\";                        \/\/ #35\n+    Utf8 \"(Ljava\/lang\/String;)V\";          \/\/ #36\n+    String #38;                            \/\/ #37\n+    Utf8 \"javasoft.sqe.tests.vm.classfmt.atr.atrcvl009.atrcvl00908m1.atrcvl00908m1n\";  \/\/ #38\n+    String #40;                            \/\/ #39\n+    Utf8 \"test atrcvl00908m1 failed to reject bad classfile atrcvl00908m1n\";  \/\/ #40\n+    Class #42;                             \/\/ #41\n+    Utf8 \"java\/lang\/ClassFormatError\";     \/\/ #42\n+    InvokeDynamic 1s #28;                  \/\/ #43\n+    Field #45 #46;                         \/\/ #44\n+    Class #47;                             \/\/ #45\n+    NameAndType #48 #49;                   \/\/ #46\n+    Utf8 \"java\/lang\/System\";               \/\/ #47\n+    Utf8 \"out\";                            \/\/ #48\n+    Utf8 \"Ljava\/io\/PrintStream;\";          \/\/ #49\n+    Method #51 #52;                        \/\/ #50\n+    Class #53;                             \/\/ #51\n+    NameAndType #54 #55;                   \/\/ #52\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00908m1\/atrcvl00908m1\";  \/\/ #53\n+    Utf8 \"run\";                            \/\/ #54\n+    Utf8 \"([Ljava\/lang\/String;Ljava\/io\/PrintStream;)I\";  \/\/ #55\n+    Method #45 #57;                        \/\/ #56\n+    NameAndType #58 #59;                   \/\/ #57\n+    Utf8 \"exit\";                           \/\/ #58\n+    Utf8 \"(I)V\";                           \/\/ #59\n+    Utf8 \"Code\";                           \/\/ #60\n+    Utf8 \"LineNumberTable\";                \/\/ #61\n+    Utf8 \"StackMapTable\";                  \/\/ #62\n+    Utf8 \"main\";                           \/\/ #63\n+    Utf8 \"([Ljava\/lang\/String;)V\";         \/\/ #64\n+    Utf8 \"SourceFile\";                     \/\/ #65\n+    Utf8 \"atrcvl00908m1.java\";             \/\/ #66\n+    Utf8 \"BootstrapMethods\";               \/\/ #67\n+    String #69;                            \/\/ #68\n+    Utf8 \"test atrcvl00908m1 failed to load or instantiate good classfile atrcvl00908m1p: \\u0001\";  \/\/ #69\n+    String #71;                            \/\/ #70\n+    Utf8 \"test atrcvl00908m1 failed with unexpected loading exception: \\u0001\";  \/\/ #71\n+    MethodHandle 6b #73;                   \/\/ #72\n+    Method #74 #75;                        \/\/ #73\n+    Class #76;                             \/\/ #74\n+    NameAndType #29 #77;                   \/\/ #75\n+    Utf8 \"java\/lang\/invoke\/StringConcatFactory\";  \/\/ #76\n+    Utf8 \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";  \/\/ #77\n+    Utf8 \"InnerClasses\";                   \/\/ #78\n+    Class #80;                             \/\/ #79\n+    Utf8 \"java\/lang\/invoke\/MethodHandles$Lookup\";  \/\/ #80\n+    Class #82;                             \/\/ #81\n+    Utf8 \"java\/lang\/invoke\/MethodHandles\";  \/\/ #82\n+    Utf8 \"Lookup\";                         \/\/ #83\n+  }\n+\n+  0x0021;                                  \/\/ access\n+  #51;                                     \/\/ this_cpx\n+  #2;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #5;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#60) {                        \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x01 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#61) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   11;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #54;                                 \/\/ name_index\n+      #55;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#60) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          4;                               \/\/ max_locals\n+          Bytes[]{\n+            0x12 0x07 0xB8 0x00 0x09 0x4D 0x2C 0xB6 0x00 0x0F 0x4E 0xA7;\n+            0x00 0x13 0x4D 0x2B 0x2C 0xB8 0x00 0x15 0xBA 0x00 0x1B 0x00;\n+            0x00 0xB6 0x00 0x1F 0x05 0xAC 0x12 0x25 0xB8 0x00 0x09 0x4D;\n+            0x2B 0x12 0x27 0xB6 0x00 0x1F 0x05 0xAC 0x4D 0xA7 0x00 0x13;\n+            0x4D 0x2B 0x2C 0xB8 0x00 0x15 0xBA 0x00 0x2B 0x00 0x00 0xB6;\n+            0x00 0x1F 0x05 0xAC 0x03 0xAC;\n+          }\n+          [] {                             \/\/ Traps\n+               0   11   14  19;\n+              30   43   44  41;\n+              30   43   48  19;\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#61) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   16;\n+                   6   17;\n+                  11   21;\n+                  14   18;\n+                  15   19;\n+                  28   20;\n+                  30   24;\n+                  36   25;\n+                  42   26;\n+                  44   27;\n+                  45   32;\n+                  48   29;\n+                  49   30;\n+                  62   31;\n+                  64   34;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+            ;\n+            Attr(#62) {                    \/\/ StackMapTable\n+              [] {                         \/\/ \n+                78b, []z{O,#19};           \/\/ same_locals_1_stack_item_frame\n+                15b;                       \/\/ same_frame\n+                77b, []z{O,#41};           \/\/ same_locals_1_stack_item_frame\n+                67b, []z{O,#19};           \/\/ same_locals_1_stack_item_frame\n+                15b;                       \/\/ same_frame\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #63;                                 \/\/ name_index\n+      #64;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#60) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB2 0x00 0x2C 0xB8 0x00 0x32 0x10 0x5F 0x60 0xB8 0x00;\n+            0x38 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#61) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   38;\n+                  13   39;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#65) {                            \/\/ SourceFile\n+      #66;\n+    }                                      \/\/ end of SourceFile\n+    ;\n+    Attr(#67) {                            \/\/ BootstrapMethods\n+      [] {                                 \/\/ bootstrap_methods\n+        {                                  \/\/ bootstrap_method\n+          #72;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #68;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #72;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #70;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+      }\n+    }                                      \/\/ end of BootstrapMethods\n+    ;\n+    Attr(#78) {                            \/\/ InnerClasses\n+      [] {                                 \/\/ classes\n+          #79   #81   #83  25;\n+      }\n+    }                                      \/\/ end of InnerClasses\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00908m1.jcod","additions":239,"deletions":0,"binary":false,"changes":239,"status":"added"},{"patch":"@@ -0,0 +1,76 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00908m1\/atrcvl00908m1n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Class #14;                             \/\/ #1\n+    Class #17;                             \/\/ #2\n+    Method #2 #6;                          \/\/ #3\n+    Double 0x4024000000000000;;            \/\/ #4\n+    NameAndType #8 #7;                     \/\/ #6\n+    Utf8 \"()V\";                            \/\/ #7\n+    Utf8 \"<init>\";                         \/\/ #8\n+    Utf8 \"Code\";                           \/\/ #9\n+    Utf8 \"ConstantValue\";                  \/\/ #10\n+    Utf8 \"D\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"SourceFile\";                     \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00908m1\/atrcvl00908m1n\";  \/\/ #14\n+    Utf8 \"Test.java\";                      \/\/ #15\n+    Utf8 \"i\";                              \/\/ #16\n+    Utf8 \"java\/lang\/Object\";               \/\/ #17\n+  }\n+\n+  0x0021;                                  \/\/ access\n+  #1;                                      \/\/ this_cpx\n+  #2;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #16;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#10) {                        \/\/ ConstantValue\n+          #7;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #8;                                  \/\/ name_index\n+      #7;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x03 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#12) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0    2;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#13) {                            \/\/ SourceFile\n+      #15;\n+    }                                      \/\/ end of SourceFile\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00908m1n.jcod","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -0,0 +1,76 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00908m1\/atrcvl00908m1p {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Class #14;                             \/\/ #1\n+    Class #17;                             \/\/ #2\n+    Method #2 #6;                          \/\/ #3\n+    Double 0x4024000000000000;;            \/\/ #4\n+    NameAndType #8 #7;                     \/\/ #6\n+    Utf8 \"()V\";                            \/\/ #7\n+    Utf8 \"<init>\";                         \/\/ #8\n+    Utf8 \"Code\";                           \/\/ #9\n+    Utf8 \"ConstantValue\";                  \/\/ #10\n+    Utf8 \"D\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"SourceFile\";                     \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00908m1\/atrcvl00908m1p\";  \/\/ #14\n+    Utf8 \"Test.java\";                      \/\/ #15\n+    Utf8 \"i\";                              \/\/ #16\n+    Utf8 \"java\/lang\/Object\";               \/\/ #17\n+  }\n+\n+  0x0021;                                  \/\/ access\n+  #1;                                      \/\/ this_cpx\n+  #2;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #16;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#10) {                        \/\/ ConstantValue\n+          #4;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #8;                                  \/\/ name_index\n+      #7;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x03 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#12) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0    2;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#13) {                            \/\/ SourceFile\n+      #15;\n+    }                                      \/\/ end of SourceFile\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00908m1p.jcod","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -0,0 +1,239 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00909m1\/atrcvl00909m1 {\n+  0xCAFEBABE;\n+  0;                                       \/\/ minor version\n+  67;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Method #2 #3;                          \/\/ #1\n+    Class #4;                              \/\/ #2\n+    NameAndType #5 #6;                     \/\/ #3\n+    Utf8 \"java\/lang\/Object\";               \/\/ #4\n+    Utf8 \"<init>\";                         \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    String #8;                             \/\/ #7\n+    Utf8 \"javasoft.sqe.tests.vm.classfmt.atr.atrcvl009.atrcvl00909m1.atrcvl00909m1p\";  \/\/ #8\n+    Method #10 #11;                        \/\/ #9\n+    Class #12;                             \/\/ #10\n+    NameAndType #13 #14;                   \/\/ #11\n+    Utf8 \"java\/lang\/Class\";                \/\/ #12\n+    Utf8 \"forName\";                        \/\/ #13\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/Class;\";  \/\/ #14\n+    Method #10 #16;                        \/\/ #15\n+    NameAndType #17 #18;                   \/\/ #16\n+    Utf8 \"newInstance\";                    \/\/ #17\n+    Utf8 \"()Ljava\/lang\/Object;\";           \/\/ #18\n+    Class #20;                             \/\/ #19\n+    Utf8 \"java\/lang\/Throwable\";            \/\/ #20\n+    Method #22 #23;                        \/\/ #21\n+    Class #24;                             \/\/ #22\n+    NameAndType #25 #26;                   \/\/ #23\n+    Utf8 \"java\/lang\/String\";               \/\/ #24\n+    Utf8 \"valueOf\";                        \/\/ #25\n+    Utf8 \"(Ljava\/lang\/Object;)Ljava\/lang\/String;\";  \/\/ #26\n+    InvokeDynamic 0s #28;                  \/\/ #27\n+    NameAndType #29 #30;                   \/\/ #28\n+    Utf8 \"makeConcatWithConstants\";        \/\/ #29\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/String;\";  \/\/ #30\n+    Method #32 #33;                        \/\/ #31\n+    Class #34;                             \/\/ #32\n+    NameAndType #35 #36;                   \/\/ #33\n+    Utf8 \"java\/io\/PrintStream\";            \/\/ #34\n+    Utf8 \"println\";                        \/\/ #35\n+    Utf8 \"(Ljava\/lang\/String;)V\";          \/\/ #36\n+    String #38;                            \/\/ #37\n+    Utf8 \"javasoft.sqe.tests.vm.classfmt.atr.atrcvl009.atrcvl00909m1.atrcvl00909m1n\";  \/\/ #38\n+    String #40;                            \/\/ #39\n+    Utf8 \"test atrcvl00909m1 failed to reject bad classfile atrcvl00909m1n\";  \/\/ #40\n+    Class #42;                             \/\/ #41\n+    Utf8 \"java\/lang\/ClassFormatError\";     \/\/ #42\n+    InvokeDynamic 1s #28;                  \/\/ #43\n+    Field #45 #46;                         \/\/ #44\n+    Class #47;                             \/\/ #45\n+    NameAndType #48 #49;                   \/\/ #46\n+    Utf8 \"java\/lang\/System\";               \/\/ #47\n+    Utf8 \"out\";                            \/\/ #48\n+    Utf8 \"Ljava\/io\/PrintStream;\";          \/\/ #49\n+    Method #51 #52;                        \/\/ #50\n+    Class #53;                             \/\/ #51\n+    NameAndType #54 #55;                   \/\/ #52\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00909m1\/atrcvl00909m1\";  \/\/ #53\n+    Utf8 \"run\";                            \/\/ #54\n+    Utf8 \"([Ljava\/lang\/String;Ljava\/io\/PrintStream;)I\";  \/\/ #55\n+    Method #45 #57;                        \/\/ #56\n+    NameAndType #58 #59;                   \/\/ #57\n+    Utf8 \"exit\";                           \/\/ #58\n+    Utf8 \"(I)V\";                           \/\/ #59\n+    Utf8 \"Code\";                           \/\/ #60\n+    Utf8 \"LineNumberTable\";                \/\/ #61\n+    Utf8 \"StackMapTable\";                  \/\/ #62\n+    Utf8 \"main\";                           \/\/ #63\n+    Utf8 \"([Ljava\/lang\/String;)V\";         \/\/ #64\n+    Utf8 \"SourceFile\";                     \/\/ #65\n+    Utf8 \"atrcvl00909m1.java\";             \/\/ #66\n+    Utf8 \"BootstrapMethods\";               \/\/ #67\n+    String #69;                            \/\/ #68\n+    Utf8 \"test atrcvl00909m1 failed to load or instantiate good classfile atrcvl00909m1p: \\u0001\";  \/\/ #69\n+    String #71;                            \/\/ #70\n+    Utf8 \"test atrcvl00909m1 failed with unexpected loading exception: \\u0001\";  \/\/ #71\n+    MethodHandle 6b #73;                   \/\/ #72\n+    Method #74 #75;                        \/\/ #73\n+    Class #76;                             \/\/ #74\n+    NameAndType #29 #77;                   \/\/ #75\n+    Utf8 \"java\/lang\/invoke\/StringConcatFactory\";  \/\/ #76\n+    Utf8 \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";  \/\/ #77\n+    Utf8 \"InnerClasses\";                   \/\/ #78\n+    Class #80;                             \/\/ #79\n+    Utf8 \"java\/lang\/invoke\/MethodHandles$Lookup\";  \/\/ #80\n+    Class #82;                             \/\/ #81\n+    Utf8 \"java\/lang\/invoke\/MethodHandles\";  \/\/ #82\n+    Utf8 \"Lookup\";                         \/\/ #83\n+  }\n+\n+  0x0021;                                  \/\/ access\n+  #51;                                     \/\/ this_cpx\n+  #2;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #5;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#60) {                        \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x01 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#61) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   11;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #54;                                 \/\/ name_index\n+      #55;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#60) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          4;                               \/\/ max_locals\n+          Bytes[]{\n+            0x12 0x07 0xB8 0x00 0x09 0x4D 0x2C 0xB6 0x00 0x0F 0x4E 0xA7;\n+            0x00 0x13 0x4D 0x2B 0x2C 0xB8 0x00 0x15 0xBA 0x00 0x1B 0x00;\n+            0x00 0xB6 0x00 0x1F 0x05 0xAC 0x12 0x25 0xB8 0x00 0x09 0x4D;\n+            0x2B 0x12 0x27 0xB6 0x00 0x1F 0x05 0xAC 0x4D 0xA7 0x00 0x13;\n+            0x4D 0x2B 0x2C 0xB8 0x00 0x15 0xBA 0x00 0x2B 0x00 0x00 0xB6;\n+            0x00 0x1F 0x05 0xAC 0x03 0xAC;\n+          }\n+          [] {                             \/\/ Traps\n+               0   11   14  19;\n+              30   43   44  41;\n+              30   43   48  19;\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#61) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   16;\n+                   6   17;\n+                  11   21;\n+                  14   18;\n+                  15   19;\n+                  28   20;\n+                  30   24;\n+                  36   25;\n+                  42   26;\n+                  44   27;\n+                  45   32;\n+                  48   29;\n+                  49   30;\n+                  62   31;\n+                  64   34;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+            ;\n+            Attr(#62) {                    \/\/ StackMapTable\n+              [] {                         \/\/ \n+                78b, []z{O,#19};           \/\/ same_locals_1_stack_item_frame\n+                15b;                       \/\/ same_frame\n+                77b, []z{O,#41};           \/\/ same_locals_1_stack_item_frame\n+                67b, []z{O,#19};           \/\/ same_locals_1_stack_item_frame\n+                15b;                       \/\/ same_frame\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #63;                                 \/\/ name_index\n+      #64;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#60) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB2 0x00 0x2C 0xB8 0x00 0x32 0x10 0x5F 0x60 0xB8 0x00;\n+            0x38 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#61) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   38;\n+                  13   39;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#65) {                            \/\/ SourceFile\n+      #66;\n+    }                                      \/\/ end of SourceFile\n+    ;\n+    Attr(#67) {                            \/\/ BootstrapMethods\n+      [] {                                 \/\/ bootstrap_methods\n+        {                                  \/\/ bootstrap_method\n+          #72;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #68;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #72;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #70;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+      }\n+    }                                      \/\/ end of BootstrapMethods\n+    ;\n+    Attr(#78) {                            \/\/ InnerClasses\n+      [] {                                 \/\/ classes\n+          #79   #81   #83  25;\n+      }\n+    }                                      \/\/ end of InnerClasses\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00909m1.jcod","additions":239,"deletions":0,"binary":false,"changes":239,"status":"added"},{"patch":"@@ -0,0 +1,103 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00909m1\/atrcvl00909m1n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Class #14;                             \/\/ #1\n+    Class #17;                             \/\/ #2\n+    Method #2 #5;                          \/\/ #3\n+    Field #1 #6;                           \/\/ #4\n+    NameAndType #9 #7;                     \/\/ #5\n+    NameAndType #16 #12;                   \/\/ #6\n+    Utf8 \"()V\";                            \/\/ #7\n+    Utf8 \"<clinit>\";                       \/\/ #8\n+    Utf8 \"<init>\";                         \/\/ #9\n+    Utf8 \"Code\";                           \/\/ #10\n+    Utf8 \"LineNumberTable\";                \/\/ #11\n+    Utf8 \"Ljava\/lang\/Object;\";             \/\/ #12\n+    Utf8 \"SourceFile\";                     \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00909m1\/atrcvl00909m1n\";  \/\/ #14\n+    Utf8 \"Test.java\";                      \/\/ #15\n+    Utf8 \"i\";                              \/\/ #16\n+    Utf8 \"java\/lang\/Object\";               \/\/ #17\n+    Utf8 \"ConstantValue\";                  \/\/ #18\n+  }\n+\n+  0x0021;                                  \/\/ access\n+  #1;                                      \/\/ this_cpx\n+  #2;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #16;                                 \/\/ name_index\n+      #12;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#18) {                        \/\/ ConstantValue\n+          #1;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0008;                              \/\/ access\n+      #8;                                  \/\/ name_index\n+      #7;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#10) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          0;                               \/\/ max_locals\n+          Bytes[]{\n+            0xBB 0x00 0x02 0x59 0xB7 0x00 0x03 0xB3 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#11) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0    3;\n+                  10    2;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #9;                                  \/\/ name_index\n+      #7;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#10) {                        \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x03 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#11) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0    2;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#13) {                            \/\/ SourceFile\n+      #15;\n+    }                                      \/\/ end of SourceFile\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00909m1n.jcod","additions":103,"deletions":0,"binary":false,"changes":103,"status":"added"},{"patch":"@@ -0,0 +1,100 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00909m1\/atrcvl00909m1p {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Class #14;                             \/\/ #1\n+    Class #17;                             \/\/ #2\n+    Method #2 #5;                          \/\/ #3\n+    Field #1 #6;                           \/\/ #4\n+    NameAndType #9 #7;                     \/\/ #5\n+    NameAndType #16 #12;                   \/\/ #6\n+    Utf8 \"()V\";                            \/\/ #7\n+    Utf8 \"<clinit>\";                       \/\/ #8\n+    Utf8 \"<init>\";                         \/\/ #9\n+    Utf8 \"Code\";                           \/\/ #10\n+    Utf8 \"LineNumberTable\";                \/\/ #11\n+    Utf8 \"Ljava\/lang\/Object;\";             \/\/ #12\n+    Utf8 \"SourceFile\";                     \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl009\/atrcvl00909m1\/atrcvl00909m1p\";  \/\/ #14\n+    Utf8 \"Test.java\";                      \/\/ #15\n+    Utf8 \"i\";                              \/\/ #16\n+    Utf8 \"java\/lang\/Object\";               \/\/ #17\n+    Utf8 \"ConstantValue\";                  \/\/ #18\n+  }\n+\n+  0x0021;                                  \/\/ access\n+  #1;                                      \/\/ this_cpx\n+  #2;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #16;                                 \/\/ name_index\n+      #12;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0008;                              \/\/ access\n+      #8;                                  \/\/ name_index\n+      #7;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#10) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          0;                               \/\/ max_locals\n+          Bytes[]{\n+            0xBB 0x00 0x02 0x59 0xB7 0x00 0x03 0xB3 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#11) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0    3;\n+                  10    2;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #9;                                  \/\/ name_index\n+      #7;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#10) {                        \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x03 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#11) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0    2;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#13) {                            \/\/ SourceFile\n+      #15;\n+    }                                      \/\/ end of SourceFile\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl00909m1p.jcod","additions":100,"deletions":0,"binary":false,"changes":100,"status":"added"},{"patch":"@@ -0,0 +1,239 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01001m1\/atrcvl01001m1 {\n+  0xCAFEBABE;\n+  0;                                       \/\/ minor version\n+  67;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Method #2 #3;                          \/\/ #1\n+    Class #4;                              \/\/ #2\n+    NameAndType #5 #6;                     \/\/ #3\n+    Utf8 \"java\/lang\/Object\";               \/\/ #4\n+    Utf8 \"<init>\";                         \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    String #8;                             \/\/ #7\n+    Utf8 \"javasoft.sqe.tests.vm.classfmt.atr.atrcvl010.atrcvl01001m1.atrcvl01001m1p\";  \/\/ #8\n+    Method #10 #11;                        \/\/ #9\n+    Class #12;                             \/\/ #10\n+    NameAndType #13 #14;                   \/\/ #11\n+    Utf8 \"java\/lang\/Class\";                \/\/ #12\n+    Utf8 \"forName\";                        \/\/ #13\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/Class;\";  \/\/ #14\n+    Method #10 #16;                        \/\/ #15\n+    NameAndType #17 #18;                   \/\/ #16\n+    Utf8 \"newInstance\";                    \/\/ #17\n+    Utf8 \"()Ljava\/lang\/Object;\";           \/\/ #18\n+    Class #20;                             \/\/ #19\n+    Utf8 \"java\/lang\/Throwable\";            \/\/ #20\n+    Method #22 #23;                        \/\/ #21\n+    Class #24;                             \/\/ #22\n+    NameAndType #25 #26;                   \/\/ #23\n+    Utf8 \"java\/lang\/String\";               \/\/ #24\n+    Utf8 \"valueOf\";                        \/\/ #25\n+    Utf8 \"(Ljava\/lang\/Object;)Ljava\/lang\/String;\";  \/\/ #26\n+    InvokeDynamic 0s #28;                  \/\/ #27\n+    NameAndType #29 #30;                   \/\/ #28\n+    Utf8 \"makeConcatWithConstants\";        \/\/ #29\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/String;\";  \/\/ #30\n+    Method #32 #33;                        \/\/ #31\n+    Class #34;                             \/\/ #32\n+    NameAndType #35 #36;                   \/\/ #33\n+    Utf8 \"java\/io\/PrintStream\";            \/\/ #34\n+    Utf8 \"println\";                        \/\/ #35\n+    Utf8 \"(Ljava\/lang\/String;)V\";          \/\/ #36\n+    String #38;                            \/\/ #37\n+    Utf8 \"javasoft.sqe.tests.vm.classfmt.atr.atrcvl010.atrcvl01001m1.atrcvl01001m1n\";  \/\/ #38\n+    String #40;                            \/\/ #39\n+    Utf8 \"test atrcvl01001m1 failed to reject bad classfile atrcvl01001m1n\";  \/\/ #40\n+    Class #42;                             \/\/ #41\n+    Utf8 \"java\/lang\/ClassFormatError\";     \/\/ #42\n+    InvokeDynamic 1s #28;                  \/\/ #43\n+    Field #45 #46;                         \/\/ #44\n+    Class #47;                             \/\/ #45\n+    NameAndType #48 #49;                   \/\/ #46\n+    Utf8 \"java\/lang\/System\";               \/\/ #47\n+    Utf8 \"out\";                            \/\/ #48\n+    Utf8 \"Ljava\/io\/PrintStream;\";          \/\/ #49\n+    Method #51 #52;                        \/\/ #50\n+    Class #53;                             \/\/ #51\n+    NameAndType #54 #55;                   \/\/ #52\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01001m1\/atrcvl01001m1\";  \/\/ #53\n+    Utf8 \"run\";                            \/\/ #54\n+    Utf8 \"([Ljava\/lang\/String;Ljava\/io\/PrintStream;)I\";  \/\/ #55\n+    Method #45 #57;                        \/\/ #56\n+    NameAndType #58 #59;                   \/\/ #57\n+    Utf8 \"exit\";                           \/\/ #58\n+    Utf8 \"(I)V\";                           \/\/ #59\n+    Utf8 \"Code\";                           \/\/ #60\n+    Utf8 \"LineNumberTable\";                \/\/ #61\n+    Utf8 \"StackMapTable\";                  \/\/ #62\n+    Utf8 \"main\";                           \/\/ #63\n+    Utf8 \"([Ljava\/lang\/String;)V\";         \/\/ #64\n+    Utf8 \"SourceFile\";                     \/\/ #65\n+    Utf8 \"atrcvl01001m1.java\";             \/\/ #66\n+    Utf8 \"BootstrapMethods\";               \/\/ #67\n+    String #69;                            \/\/ #68\n+    Utf8 \"test atrcvl01001m1 failed to load or instantiate good classfile atrcvl01001m1p: \\u0001\";  \/\/ #69\n+    String #71;                            \/\/ #70\n+    Utf8 \"test atrcvl01001m1 failed with unexpected loading exception: \\u0001\";  \/\/ #71\n+    MethodHandle 6b #73;                   \/\/ #72\n+    Method #74 #75;                        \/\/ #73\n+    Class #76;                             \/\/ #74\n+    NameAndType #29 #77;                   \/\/ #75\n+    Utf8 \"java\/lang\/invoke\/StringConcatFactory\";  \/\/ #76\n+    Utf8 \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";  \/\/ #77\n+    Utf8 \"InnerClasses\";                   \/\/ #78\n+    Class #80;                             \/\/ #79\n+    Utf8 \"java\/lang\/invoke\/MethodHandles$Lookup\";  \/\/ #80\n+    Class #82;                             \/\/ #81\n+    Utf8 \"java\/lang\/invoke\/MethodHandles\";  \/\/ #82\n+    Utf8 \"Lookup\";                         \/\/ #83\n+  }\n+\n+  0x0021;                                  \/\/ access\n+  #51;                                     \/\/ this_cpx\n+  #2;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #5;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#60) {                        \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x01 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#61) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   11;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #54;                                 \/\/ name_index\n+      #55;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#60) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          4;                               \/\/ max_locals\n+          Bytes[]{\n+            0x12 0x07 0xB8 0x00 0x09 0x4D 0x2C 0xB6 0x00 0x0F 0x4E 0xA7;\n+            0x00 0x13 0x4D 0x2B 0x2C 0xB8 0x00 0x15 0xBA 0x00 0x1B 0x00;\n+            0x00 0xB6 0x00 0x1F 0x05 0xAC 0x12 0x25 0xB8 0x00 0x09 0x4D;\n+            0x2B 0x12 0x27 0xB6 0x00 0x1F 0x05 0xAC 0x4D 0xA7 0x00 0x13;\n+            0x4D 0x2B 0x2C 0xB8 0x00 0x15 0xBA 0x00 0x2B 0x00 0x00 0xB6;\n+            0x00 0x1F 0x05 0xAC 0x03 0xAC;\n+          }\n+          [] {                             \/\/ Traps\n+               0   11   14  19;\n+              30   43   44  41;\n+              30   43   48  19;\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#61) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   16;\n+                   6   17;\n+                  11   21;\n+                  14   18;\n+                  15   19;\n+                  28   20;\n+                  30   24;\n+                  36   25;\n+                  42   26;\n+                  44   27;\n+                  45   32;\n+                  48   29;\n+                  49   30;\n+                  62   31;\n+                  64   34;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+            ;\n+            Attr(#62) {                    \/\/ StackMapTable\n+              [] {                         \/\/ \n+                78b, []z{O,#19};           \/\/ same_locals_1_stack_item_frame\n+                15b;                       \/\/ same_frame\n+                77b, []z{O,#41};           \/\/ same_locals_1_stack_item_frame\n+                67b, []z{O,#19};           \/\/ same_locals_1_stack_item_frame\n+                15b;                       \/\/ same_frame\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #63;                                 \/\/ name_index\n+      #64;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#60) {                        \/\/ Code\n+          2;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB2 0x00 0x2C 0xB8 0x00 0x32 0x10 0x5F 0x60 0xB8 0x00;\n+            0x38 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#61) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   38;\n+                  13   39;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#65) {                            \/\/ SourceFile\n+      #66;\n+    }                                      \/\/ end of SourceFile\n+    ;\n+    Attr(#67) {                            \/\/ BootstrapMethods\n+      [] {                                 \/\/ bootstrap_methods\n+        {                                  \/\/ bootstrap_method\n+          #72;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #68;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #72;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #70;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+      }\n+    }                                      \/\/ end of BootstrapMethods\n+    ;\n+    Attr(#78) {                            \/\/ InnerClasses\n+      [] {                                 \/\/ classes\n+          #79   #81   #83  25;\n+      }\n+    }                                      \/\/ end of InnerClasses\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01001m1.jcod","additions":239,"deletions":0,"binary":false,"changes":239,"status":"added"},{"patch":"@@ -0,0 +1,71 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01001m1\/atrcvl01001m1n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Float 0x40490FD8;                      \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"I\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01001m1\/atrcvl01001m1n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #1;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01001m1n.jcod","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -0,0 +1,71 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01001m1\/atrcvl01001m1p {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"I\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01001m1\/atrcvl01001m1p\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #1;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01001m1p.jcod","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -0,0 +1,719 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m1 {\n+  0xCAFEBABE;\n+  0;                                       \/\/ minor version\n+  67;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Method #2 #3;                          \/\/ #1\n+    Class #4;                              \/\/ #2\n+    NameAndType #5 #6;                     \/\/ #3\n+    Utf8 \"java\/lang\/Object\";               \/\/ #4\n+    Utf8 \"<init>\";                         \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    String #8;                             \/\/ #7\n+    Utf8 \"atrcvl01002m10p\";                \/\/ #8\n+    Method #10 #11;                        \/\/ #9\n+    Class #12;                             \/\/ #10\n+    NameAndType #13 #14;                   \/\/ #11\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m1\";  \/\/ #12\n+    Utf8 \"loadPositive\";                   \/\/ #13\n+    Utf8 \"(Ljava\/lang\/String;[Ljava\/lang\/String;Ljava\/io\/PrintStream;)I\";  \/\/ #14\n+    String #16;                            \/\/ #15\n+    Utf8 \"atrcvl01002m11n\";                \/\/ #16\n+    Class #18;                             \/\/ #17\n+    Utf8 \"java\/lang\/ClassFormatError\";     \/\/ #18\n+    Method #10 #20;                        \/\/ #19\n+    NameAndType #21 #22;                   \/\/ #20\n+    Utf8 \"loadNegative\";                   \/\/ #21\n+    Utf8 \"(Ljava\/lang\/String;Ljava\/lang\/Class;[Ljava\/lang\/String;Ljava\/io\/PrintStream;)I\";  \/\/ #22\n+    String #24;                            \/\/ #23\n+    Utf8 \"atrcvl01002m12n\";                \/\/ #24\n+    String #26;                            \/\/ #25\n+    Utf8 \"atrcvl01002m13n\";                \/\/ #26\n+    String #28;                            \/\/ #27\n+    Utf8 \"atrcvl01002m14n\";                \/\/ #28\n+    String #30;                            \/\/ #29\n+    Utf8 \"atrcvl01002m15p\";                \/\/ #30\n+    String #32;                            \/\/ #31\n+    Utf8 \"atrcvl01002m16n\";                \/\/ #32\n+    String #34;                            \/\/ #33\n+    Utf8 \"atrcvl01002m17n\";                \/\/ #34\n+    String #36;                            \/\/ #35\n+    Utf8 \"atrcvl01002m18n\";                \/\/ #36\n+    String #38;                            \/\/ #37\n+    Utf8 \"atrcvl01002m19n\";                \/\/ #38\n+    String #40;                            \/\/ #39\n+    Utf8 \"atrcvl01002m110p\";               \/\/ #40\n+    String #42;                            \/\/ #41\n+    Utf8 \"atrcvl01002m111n\";               \/\/ #42\n+    String #44;                            \/\/ #43\n+    Utf8 \"atrcvl01002m112n\";               \/\/ #44\n+    String #46;                            \/\/ #45\n+    Utf8 \"atrcvl01002m113n\";               \/\/ #46\n+    String #48;                            \/\/ #47\n+    Utf8 \"atrcvl01002m114n\";               \/\/ #48\n+    String #50;                            \/\/ #49\n+    Utf8 \"atrcvl01002m115p\";               \/\/ #50\n+    String #52;                            \/\/ #51\n+    Utf8 \"atrcvl01002m116n\";               \/\/ #52\n+    String #54;                            \/\/ #53\n+    Utf8 \"atrcvl01002m117n\";               \/\/ #54\n+    String #56;                            \/\/ #55\n+    Utf8 \"atrcvl01002m118n\";               \/\/ #56\n+    String #58;                            \/\/ #57\n+    Utf8 \"atrcvl01002m119n\";               \/\/ #58\n+    String #60;                            \/\/ #59\n+    Utf8 \"atrcvl01002m120p\";               \/\/ #60\n+    String #62;                            \/\/ #61\n+    Utf8 \"atrcvl01002m121n\";               \/\/ #62\n+    String #64;                            \/\/ #63\n+    Utf8 \"atrcvl01002m122n\";               \/\/ #64\n+    String #66;                            \/\/ #65\n+    Utf8 \"atrcvl01002m123n\";               \/\/ #66\n+    String #68;                            \/\/ #67\n+    Utf8 \"atrcvl01002m124n\";               \/\/ #68\n+    String #70;                            \/\/ #69\n+    Utf8 \"atrcvl01002m125n\";               \/\/ #70\n+    String #72;                            \/\/ #71\n+    Utf8 \"atrcvl01002m126n\";               \/\/ #72\n+    String #74;                            \/\/ #73\n+    Utf8 \"atrcvl01002m127n\";               \/\/ #74\n+    String #76;                            \/\/ #75\n+    Utf8 \"atrcvl01002m128n\";               \/\/ #76\n+    String #78;                            \/\/ #77\n+    Utf8 \"atrcvl01002m129n\";               \/\/ #78\n+    String #80;                            \/\/ #79\n+    Utf8 \"atrcvl01002m130p\";               \/\/ #80\n+    String #82;                            \/\/ #81\n+    Utf8 \"atrcvl01002m131n\";               \/\/ #82\n+    String #84;                            \/\/ #83\n+    Utf8 \"atrcvl01002m132n\";               \/\/ #84\n+    String #86;                            \/\/ #85\n+    Utf8 \"atrcvl01002m133n\";               \/\/ #86\n+    String #88;                            \/\/ #87\n+    Utf8 \"atrcvl01002m134n\";               \/\/ #88\n+    String #90;                            \/\/ #89\n+    Utf8 \"atrcvl01002m135n\";               \/\/ #90\n+    String #92;                            \/\/ #91\n+    Utf8 \"atrcvl01002m136n\";               \/\/ #92\n+    String #94;                            \/\/ #93\n+    Utf8 \"atrcvl01002m137n\";               \/\/ #94\n+    String #96;                            \/\/ #95\n+    Utf8 \"atrcvl01002m138n\";               \/\/ #96\n+    String #98;                            \/\/ #97\n+    Utf8 \"atrcvl01002m139n\";               \/\/ #98\n+    String #100;                           \/\/ #99\n+    Utf8 \"atrcvl01002m140p\";               \/\/ #100\n+    String #102;                           \/\/ #101\n+    Utf8 \"atrcvl01002m141n\";               \/\/ #102\n+    String #104;                           \/\/ #103\n+    Utf8 \"atrcvl01002m142n\";               \/\/ #104\n+    String #106;                           \/\/ #105\n+    Utf8 \"atrcvl01002m143n\";               \/\/ #106\n+    String #108;                           \/\/ #107\n+    Utf8 \"atrcvl01002m144n\";               \/\/ #108\n+    String #110;                           \/\/ #109\n+    Utf8 \"atrcvl01002m145n\";               \/\/ #110\n+    String #112;                           \/\/ #111\n+    Utf8 \"atrcvl01002m146n\";               \/\/ #112\n+    String #114;                           \/\/ #113\n+    Utf8 \"atrcvl01002m147n\";               \/\/ #114\n+    String #116;                           \/\/ #115\n+    Utf8 \"atrcvl01002m148n\";               \/\/ #116\n+    String #118;                           \/\/ #117\n+    Utf8 \"atrcvl01002m149n\";               \/\/ #118\n+    String #120;                           \/\/ #119\n+    Utf8 \"atrcvl01002m150p\";               \/\/ #120\n+    String #122;                           \/\/ #121\n+    Utf8 \"atrcvl01002m151n\";               \/\/ #122\n+    String #124;                           \/\/ #123\n+    Utf8 \"atrcvl01002m152n\";               \/\/ #124\n+    String #126;                           \/\/ #125\n+    Utf8 \"atrcvl01002m153n\";               \/\/ #126\n+    String #128;                           \/\/ #127\n+    Utf8 \"atrcvl01002m154n\";               \/\/ #128\n+    String #130;                           \/\/ #129\n+    Utf8 \"atrcvl01002m155n\";               \/\/ #130\n+    String #132;                           \/\/ #131\n+    Utf8 \"atrcvl01002m156n\";               \/\/ #132\n+    String #134;                           \/\/ #133\n+    Utf8 \"atrcvl01002m157n\";               \/\/ #134\n+    String #136;                           \/\/ #135\n+    Utf8 \"atrcvl01002m158n\";               \/\/ #136\n+    String #138;                           \/\/ #137\n+    Utf8 \"atrcvl01002m159n\";               \/\/ #138\n+    String #140;                           \/\/ #139\n+    Utf8 \"atrcvl01002m160p\";               \/\/ #140\n+    InvokeDynamic 0s #142;                 \/\/ #141\n+    NameAndType #143 #144;                 \/\/ #142\n+    Utf8 \"makeConcatWithConstants\";        \/\/ #143\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/String;\";  \/\/ #144\n+    Method #146 #147;                      \/\/ #145\n+    Class #148;                            \/\/ #146\n+    NameAndType #149 #150;                 \/\/ #147\n+    Utf8 \"java\/lang\/Class\";                \/\/ #148\n+    Utf8 \"forName\";                        \/\/ #149\n+    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/Class;\";  \/\/ #150\n+    Class #152;                            \/\/ #151\n+    Utf8 \"java\/lang\/ThreadDeath\";          \/\/ #152\n+    Class #154;                            \/\/ #153\n+    Utf8 \"java\/lang\/Throwable\";            \/\/ #154\n+    Method #156 #157;                      \/\/ #155\n+    Class #158;                            \/\/ #156\n+    NameAndType #159 #160;                 \/\/ #157\n+    Utf8 \"java\/lang\/String\";               \/\/ #158\n+    Utf8 \"valueOf\";                        \/\/ #159\n+    Utf8 \"(Ljava\/lang\/Object;)Ljava\/lang\/String;\";  \/\/ #160\n+    InvokeDynamic 1s #142;                 \/\/ #161\n+    Method #163 #164;                      \/\/ #162\n+    Class #165;                            \/\/ #163\n+    NameAndType #166 #167;                 \/\/ #164\n+    Utf8 \"java\/io\/PrintStream\";            \/\/ #165\n+    Utf8 \"println\";                        \/\/ #166\n+    Utf8 \"(Ljava\/lang\/String;)V\";          \/\/ #167\n+    Method #146 #169;                      \/\/ #168\n+    NameAndType #170 #171;                 \/\/ #169\n+    Utf8 \"isInstance\";                     \/\/ #170\n+    Utf8 \"(Ljava\/lang\/Object;)Z\";          \/\/ #171\n+    InvokeDynamic 2s #142;                 \/\/ #172\n+    InvokeDynamic 3s #142;                 \/\/ #173\n+    InvokeDynamic 4s #142;                 \/\/ #174\n+    Field #176 #177;                       \/\/ #175\n+    Class #178;                            \/\/ #176\n+    NameAndType #179 #180;                 \/\/ #177\n+    Utf8 \"java\/lang\/System\";               \/\/ #178\n+    Utf8 \"out\";                            \/\/ #179\n+    Utf8 \"Ljava\/io\/PrintStream;\";          \/\/ #180\n+    Method #10 #182;                       \/\/ #181\n+    NameAndType #183 #184;                 \/\/ #182\n+    Utf8 \"run\";                            \/\/ #183\n+    Utf8 \"([Ljava\/lang\/String;Ljava\/io\/PrintStream;)I\";  \/\/ #184\n+    Method #176 #186;                      \/\/ #185\n+    NameAndType #187 #188;                 \/\/ #186\n+    Utf8 \"exit\";                           \/\/ #187\n+    Utf8 \"(I)V\";                           \/\/ #188\n+    Utf8 \"Code\";                           \/\/ #189\n+    Utf8 \"LineNumberTable\";                \/\/ #190\n+    Utf8 \"StackMapTable\";                  \/\/ #191\n+    Class #193;                            \/\/ #192\n+    Utf8 \"[Ljava\/lang\/String;\";            \/\/ #193\n+    Utf8 \"main\";                           \/\/ #194\n+    Utf8 \"([Ljava\/lang\/String;)V\";         \/\/ #195\n+    Utf8 \"SourceFile\";                     \/\/ #196\n+    Utf8 \"atrcvl01002m1.java\";             \/\/ #197\n+    Utf8 \"BootstrapMethods\";               \/\/ #198\n+    String #200;                           \/\/ #199\n+    Utf8 \"javasoft.sqe.tests.vm.classfmt.atr.atrcvl010.atrcvl01002m1.\\u0001\";  \/\/ #200\n+    String #202;                           \/\/ #201\n+    Utf8 \"Failed with loading exception: \\u0001\";  \/\/ #202\n+    String #204;                           \/\/ #203\n+    Utf8 \"Passed with loading exception: \\u0001\";  \/\/ #204\n+    String #206;                           \/\/ #205\n+    Utf8 \"Failed with unexpected loading exception: \\u0001\";  \/\/ #206\n+    String #208;                           \/\/ #207\n+    Utf8 \"Failed to reject invalid class \\u0001\";  \/\/ #208\n+    MethodHandle 6b #210;                  \/\/ #209\n+    Method #211 #212;                      \/\/ #210\n+    Class #213;                            \/\/ #211\n+    NameAndType #143 #214;                 \/\/ #212\n+    Utf8 \"java\/lang\/invoke\/StringConcatFactory\";  \/\/ #213\n+    Utf8 \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";  \/\/ #214\n+    Utf8 \"InnerClasses\";                   \/\/ #215\n+    Class #217;                            \/\/ #216\n+    Utf8 \"java\/lang\/invoke\/MethodHandles$Lookup\";  \/\/ #217\n+    Class #219;                            \/\/ #218\n+    Utf8 \"java\/lang\/invoke\/MethodHandles\";  \/\/ #219\n+    Utf8 \"Lookup\";                         \/\/ #220\n+  }\n+\n+  0x0021;                                  \/\/ access\n+  #10;                                     \/\/ this_cpx\n+  #2;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #5;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#189) {                       \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x01 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#190) {                   \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   12;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #183;                                \/\/ name_index\n+      #184;                                \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#189) {                       \/\/ Code\n+          4;                               \/\/ max_stack\n+          2;                               \/\/ max_locals\n+          Bytes[]{\n+            0x12 0x07 0x2A 0x2B 0xB8 0x00 0x09 0x99 0x00 0x05 0x05 0xAC;\n+            0x12 0x0F 0x12 0x11 0x2A 0x2B 0xB8 0x00 0x13 0x99 0x00 0x05;\n+            0x05 0xAC 0x12 0x17 0x12 0x11 0x2A 0x2B 0xB8 0x00 0x13 0x99;\n+            0x00 0x05 0x05 0xAC 0x12 0x19 0x12 0x11 0x2A 0x2B 0xB8 0x00;\n+            0x13 0x99 0x00 0x05 0x05 0xAC 0x12 0x1B 0x12 0x11 0x2A 0x2B;\n+            0xB8 0x00 0x13 0x99 0x00 0x05 0x05 0xAC 0x12 0x1D 0x2A 0x2B;\n+            0xB8 0x00 0x09 0x99 0x00 0x05 0x05 0xAC 0x12 0x1F 0x12 0x11;\n+            0x2A 0x2B 0xB8 0x00 0x13 0x99 0x00 0x05 0x05 0xAC 0x12 0x21;\n+            0x12 0x11 0x2A 0x2B 0xB8 0x00 0x13 0x99 0x00 0x05 0x05 0xAC;\n+            0x12 0x23 0x12 0x11 0x2A 0x2B 0xB8 0x00 0x13 0x99 0x00 0x05;\n+            0x05 0xAC 0x12 0x25 0x12 0x11 0x2A 0x2B 0xB8 0x00 0x13 0x99;\n+            0x00 0x05 0x05 0xAC 0x12 0x27 0x2A 0x2B 0xB8 0x00 0x09 0x99;\n+            0x00 0x05 0x05 0xAC 0x12 0x29 0x12 0x11 0x2A 0x2B 0xB8 0x00;\n+            0x13 0x99 0x00 0x05 0x05 0xAC 0x12 0x2B 0x12 0x11 0x2A 0x2B;\n+            0xB8 0x00 0x13 0x99 0x00 0x05 0x05 0xAC 0x12 0x2D 0x12 0x11;\n+            0x2A 0x2B 0xB8 0x00 0x13 0x99 0x00 0x05 0x05 0xAC 0x12 0x2F;\n+            0x12 0x11 0x2A 0x2B 0xB8 0x00 0x13 0x99 0x00 0x05 0x05 0xAC;\n+            0x12 0x31 0x2A 0x2B 0xB8 0x00 0x09 0x99 0x00 0x05 0x05 0xAC;\n+            0x12 0x33 0x12 0x11 0x2A 0x2B 0xB8 0x00 0x13 0x99 0x00 0x05;\n+            0x05 0xAC 0x12 0x35 0x12 0x11 0x2A 0x2B 0xB8 0x00 0x13 0x99;\n+            0x00 0x05 0x05 0xAC 0x12 0x37 0x12 0x11 0x2A 0x2B 0xB8 0x00;\n+            0x13 0x99 0x00 0x05 0x05 0xAC 0x12 0x39 0x12 0x11 0x2A 0x2B;\n+            0xB8 0x00 0x13 0x99 0x00 0x05 0x05 0xAC 0x12 0x3B 0x2A 0x2B;\n+            0xB8 0x00 0x09 0x99 0x00 0x05 0x05 0xAC 0x12 0x3D 0x12 0x11;\n+            0x2A 0x2B 0xB8 0x00 0x13 0x99 0x00 0x05 0x05 0xAC 0x12 0x3F;\n+            0x12 0x11 0x2A 0x2B 0xB8 0x00 0x13 0x99 0x00 0x05 0x05 0xAC;\n+            0x12 0x41 0x12 0x11 0x2A 0x2B 0xB8 0x00 0x13 0x99 0x00 0x05;\n+            0x05 0xAC 0x12 0x43 0x12 0x11 0x2A 0x2B 0xB8 0x00 0x13 0x99;\n+            0x00 0x05 0x05 0xAC 0x12 0x45 0x12 0x11 0x2A 0x2B 0xB8 0x00;\n+            0x13 0x99 0x00 0x05 0x05 0xAC 0x12 0x47 0x12 0x11 0x2A 0x2B;\n+            0xB8 0x00 0x13 0x99 0x00 0x05 0x05 0xAC 0x12 0x49 0x12 0x11;\n+            0x2A 0x2B 0xB8 0x00 0x13 0x99 0x00 0x05 0x05 0xAC 0x12 0x4B;\n+            0x12 0x11 0x2A 0x2B 0xB8 0x00 0x13 0x99 0x00 0x05 0x05 0xAC;\n+            0x12 0x4D 0x12 0x11 0x2A 0x2B 0xB8 0x00 0x13 0x99 0x00 0x05;\n+            0x05 0xAC 0x12 0x4F 0x2A 0x2B 0xB8 0x00 0x09 0x99 0x00 0x05;\n+            0x05 0xAC 0x12 0x51 0x12 0x11 0x2A 0x2B 0xB8 0x00 0x13 0x99;\n+            0x00 0x05 0x05 0xAC 0x12 0x53 0x12 0x11 0x2A 0x2B 0xB8 0x00;\n+            0x13 0x99 0x00 0x05 0x05 0xAC 0x12 0x55 0x12 0x11 0x2A 0x2B;\n+            0xB8 0x00 0x13 0x99 0x00 0x05 0x05 0xAC 0x12 0x57 0x12 0x11;\n+            0x2A 0x2B 0xB8 0x00 0x13 0x99 0x00 0x05 0x05 0xAC 0x12 0x59;\n+            0x12 0x11 0x2A 0x2B 0xB8 0x00 0x13 0x99 0x00 0x05 0x05 0xAC;\n+            0x12 0x5B 0x12 0x11 0x2A 0x2B 0xB8 0x00 0x13 0x99 0x00 0x05;\n+            0x05 0xAC 0x12 0x5D 0x12 0x11 0x2A 0x2B 0xB8 0x00 0x13 0x99;\n+            0x00 0x05 0x05 0xAC 0x12 0x5F 0x12 0x11 0x2A 0x2B 0xB8 0x00;\n+            0x13 0x99 0x00 0x05 0x05 0xAC 0x12 0x61 0x12 0x11 0x2A 0x2B;\n+            0xB8 0x00 0x13 0x99 0x00 0x05 0x05 0xAC 0x12 0x63 0x2A 0x2B;\n+            0xB8 0x00 0x09 0x99 0x00 0x05 0x05 0xAC 0x12 0x65 0x12 0x11;\n+            0x2A 0x2B 0xB8 0x00 0x13 0x99 0x00 0x05 0x05 0xAC 0x12 0x67;\n+            0x12 0x11 0x2A 0x2B 0xB8 0x00 0x13 0x99 0x00 0x05 0x05 0xAC;\n+            0x12 0x69 0x12 0x11 0x2A 0x2B 0xB8 0x00 0x13 0x99 0x00 0x05;\n+            0x05 0xAC 0x12 0x6B 0x12 0x11 0x2A 0x2B 0xB8 0x00 0x13 0x99;\n+            0x00 0x05 0x05 0xAC 0x12 0x6D 0x12 0x11 0x2A 0x2B 0xB8 0x00;\n+            0x13 0x99 0x00 0x05 0x05 0xAC 0x12 0x6F 0x12 0x11 0x2A 0x2B;\n+            0xB8 0x00 0x13 0x99 0x00 0x05 0x05 0xAC 0x12 0x71 0x12 0x11;\n+            0x2A 0x2B 0xB8 0x00 0x13 0x99 0x00 0x05 0x05 0xAC 0x12 0x73;\n+            0x12 0x11 0x2A 0x2B 0xB8 0x00 0x13 0x99 0x00 0x05 0x05 0xAC;\n+            0x12 0x75 0x12 0x11 0x2A 0x2B 0xB8 0x00 0x13 0x99 0x00 0x05;\n+            0x05 0xAC 0x12 0x77 0x2A 0x2B 0xB8 0x00 0x09 0x99 0x00 0x05;\n+            0x05 0xAC 0x12 0x79 0x12 0x11 0x2A 0x2B 0xB8 0x00 0x13 0x99;\n+            0x00 0x05 0x05 0xAC 0x12 0x7B 0x12 0x11 0x2A 0x2B 0xB8 0x00;\n+            0x13 0x99 0x00 0x05 0x05 0xAC 0x12 0x7D 0x12 0x11 0x2A 0x2B;\n+            0xB8 0x00 0x13 0x99 0x00 0x05 0x05 0xAC 0x12 0x7F 0x12 0x11;\n+            0x2A 0x2B 0xB8 0x00 0x13 0x99 0x00 0x05 0x05 0xAC 0x12 0x81;\n+            0x12 0x11 0x2A 0x2B 0xB8 0x00 0x13 0x99 0x00 0x05 0x05 0xAC;\n+            0x12 0x83 0x12 0x11 0x2A 0x2B 0xB8 0x00 0x13 0x99 0x00 0x05;\n+            0x05 0xAC 0x12 0x85 0x12 0x11 0x2A 0x2B 0xB8 0x00 0x13 0x99;\n+            0x00 0x05 0x05 0xAC 0x12 0x87 0x12 0x11 0x2A 0x2B 0xB8 0x00;\n+            0x13 0x99 0x00 0x05 0x05 0xAC 0x12 0x89 0x12 0x11 0x2A 0x2B;\n+            0xB8 0x00 0x13 0x99 0x00 0x05 0x05 0xAC 0x12 0x8B 0x2A 0x2B;\n+            0xB8 0x00 0x09 0x99 0x00 0x05 0x05 0xAC 0x03 0xAC;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#190) {                   \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0   16;\n+                  10   17;\n+                  12   18;\n+                  24   19;\n+                  26   20;\n+                  38   21;\n+                  40   22;\n+                  52   23;\n+                  54   24;\n+                  66   25;\n+                  68   26;\n+                  78   27;\n+                  80   28;\n+                  92   29;\n+                  94   30;\n+                 106   31;\n+                 108   32;\n+                 120   33;\n+                 122   34;\n+                 134   35;\n+                 136   36;\n+                 146   37;\n+                 148   38;\n+                 160   39;\n+                 162   40;\n+                 174   41;\n+                 176   42;\n+                 188   43;\n+                 190   44;\n+                 202   45;\n+                 204   46;\n+                 214   47;\n+                 216   48;\n+                 228   49;\n+                 230   50;\n+                 242   51;\n+                 244   52;\n+                 256   53;\n+                 258   54;\n+                 270   55;\n+                 272   56;\n+                 282   57;\n+                 284   58;\n+                 296   59;\n+                 298   60;\n+                 310   61;\n+                 312   62;\n+                 324   63;\n+                 326   64;\n+                 338   65;\n+                 340   66;\n+                 352   67;\n+                 354   68;\n+                 366   69;\n+                 368   70;\n+                 380   71;\n+                 382   72;\n+                 394   73;\n+                 396   74;\n+                 408   75;\n+                 410   76;\n+                 420   77;\n+                 422   78;\n+                 434   79;\n+                 436   80;\n+                 448   81;\n+                 450   82;\n+                 462   83;\n+                 464   84;\n+                 476   85;\n+                 478   86;\n+                 490   87;\n+                 492   88;\n+                 504   89;\n+                 506   90;\n+                 518   91;\n+                 520   92;\n+                 532   93;\n+                 534   94;\n+                 546   95;\n+                 548   96;\n+                 558   97;\n+                 560   98;\n+                 572   99;\n+                 574  100;\n+                 586  101;\n+                 588  102;\n+                 600  103;\n+                 602  104;\n+                 614  105;\n+                 616  106;\n+                 628  107;\n+                 630  108;\n+                 642  109;\n+                 644  110;\n+                 656  111;\n+                 658  112;\n+                 670  113;\n+                 672  114;\n+                 684  115;\n+                 686  116;\n+                 696  117;\n+                 698  118;\n+                 710  119;\n+                 712  120;\n+                 724  121;\n+                 726  122;\n+                 738  123;\n+                 740  124;\n+                 752  125;\n+                 754  126;\n+                 766  127;\n+                 768  128;\n+                 780  129;\n+                 782  130;\n+                 794  131;\n+                 796  132;\n+                 808  133;\n+                 810  134;\n+                 822  135;\n+                 824  136;\n+                 834  137;\n+                 836  139;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+            ;\n+            Attr(#191) {                   \/\/ StackMapTable\n+              [] {                         \/\/ \n+                12b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                11b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                11b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                11b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                11b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                11b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                11b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                11b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                13b;                       \/\/ same_frame\n+                11b;                       \/\/ same_frame\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #13;                                 \/\/ name_index\n+      #14;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#189) {                       \/\/ Code\n+          2;                               \/\/ max_stack\n+          5;                               \/\/ max_locals\n+          Bytes[]{\n+            0x01 0x4E 0x2A 0xBA 0x00 0x8D 0x00 0x00 0xB8 0x00 0x91 0x4E;\n+            0xA7 0x00 0x1A 0x3A 0x04 0x19 0x04 0xBF 0x3A 0x04 0x2C 0x19;\n+            0x04 0xB8 0x00 0x9B 0xBA 0x00 0xA1 0x00 0x00 0xB6 0x00 0xA2;\n+            0x05 0xAC 0x03 0xAC          }\n+          [] {                             \/\/ Traps\n+               2   12   15 151;\n+               2   12   20 153;\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#190) {                   \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0  144;\n+                   2  146;\n+                  12  152;\n+                  15  147;\n+                  17  148;\n+                  20  149;\n+                  22  150;\n+                  36  151;\n+                  38  154;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+            ;\n+            Attr(#191) {                   \/\/ StackMapTable\n+              [] {                         \/\/ \n+                255b, 15, []{O,#156; O,#192; O,#163; O,#146}, []{O,#151};  \/\/ full_frame\n+                68b, []z{O,#153};          \/\/ same_locals_1_stack_item_frame\n+                17b;                       \/\/ same_frame\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #21;                                 \/\/ name_index\n+      #22;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#189) {                       \/\/ Code\n+          2;                               \/\/ max_stack\n+          6;                               \/\/ max_locals\n+          Bytes[]{\n+            0x01 0x3A 0x04 0x2A 0xBA 0x00 0x8D 0x00 0x00 0xB8 0x00 0x91;\n+            0x3A 0x04 0xA7 0x00 0x33 0x3A 0x05 0x19 0x05 0xBF 0x3A 0x05;\n+            0x2B 0x19 0x05 0xB6 0x00 0xA8 0x99 0x00 0x13 0x2D 0x19 0x05;\n+            0xB8 0x00 0x9B 0xBA 0x00 0xAC 0x00 0x00 0xB6 0x00 0xA2 0x03;\n+            0xAC 0x2D 0x19 0x05 0xB8 0x00 0x9B 0xBA 0x00 0xAD 0x00 0x00;\n+            0xB6 0x00 0xA2 0x05 0xAC 0x2D 0x2A 0xBA 0x00 0xAE 0x00 0x00;\n+            0xB6 0x00 0xA2 0x05 0xAC;\n+          }\n+          [] {                             \/\/ Traps\n+               3   14   17 151;\n+               3   14   22 153;\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#190) {                   \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0  159;\n+                   3  161;\n+                  14  172;\n+                  17  162;\n+                  19  163;\n+                  22  164;\n+                  24  165;\n+                  33  166;\n+                  47  167;\n+                  49  169;\n+                  63  170;\n+                  65  173;\n+                  75  174;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+            ;\n+            Attr(#191) {                   \/\/ StackMapTable\n+              [] {                         \/\/ \n+                255b, 17, []{O,#156; O,#146; O,#192; O,#163; O,#146}, []{O,#151};  \/\/ full_frame\n+                68b, []z{O,#153};          \/\/ same_locals_1_stack_item_frame\n+                252b, 26, []z{O,#153};     \/\/ append_frame 1\n+                250b, 15;                  \/\/ chop_frame 1\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #194;                                \/\/ name_index\n+      #195;                                \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#189) {                       \/\/ Code\n+          2;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB2 0x00 0xAF 0xB8 0x00 0xB5 0x10 0x5F 0x60 0xB8 0x00;\n+            0xB9 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#190) {                   \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0  178;\n+                  13  179;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#196) {                           \/\/ SourceFile\n+      #197;\n+    }                                      \/\/ end of SourceFile\n+    ;\n+    Attr(#198) {                           \/\/ BootstrapMethods\n+      [] {                                 \/\/ bootstrap_methods\n+        {                                  \/\/ bootstrap_method\n+          #209;                            \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #199;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #209;                            \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #201;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #209;                            \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #203;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #209;                            \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #205;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #209;                            \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #207;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+      }\n+    }                                      \/\/ end of BootstrapMethods\n+    ;\n+    Attr(#215) {                           \/\/ InnerClasses\n+      [] {                                 \/\/ classes\n+         #216  #218  #220  25;\n+      }\n+    }                                      \/\/ end of InnerClasses\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m1.jcod","additions":719,"deletions":0,"binary":false,"changes":719,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m10p {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"I\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m10p\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Integer 0x00000001;                    \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m10p.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m110p {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"C\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m110p\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Integer 0x00000001;                    \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m110p.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m111n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"J\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m111n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Integer 0x00000001;                    \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m111n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m112n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"F\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m112n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Integer 0x00000001;                    \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m112n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m113n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"D\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m113n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Integer 0x00000001;                    \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m113n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m114n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"Ljava\/lang\/String;\";             \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m114n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Integer 0x00000001;                    \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m114n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m115p {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"B\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m115p\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Integer 0x00000000;                    \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m115p.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m116n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"J\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m116n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Integer 0x00000000;                    \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m116n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m117n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"F\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m117n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Integer 0x00000000;                    \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m117n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m118n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"D\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m118n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Integer 0x00000000;                    \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m118n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m119n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"Ljava\/lang\/String;\";             \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m119n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Integer 0x00000000;                    \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m119n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m11n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"J\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m11n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Integer 0x00000001;                    \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m11n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m120p {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"Z\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m120p\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Integer 0x00000001;                    \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m120p.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m121n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"J\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m121n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Integer 0x00000001;                    \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m121n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m122n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"F\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m122n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Integer 0x00000001;                    \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m122n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m123n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"D\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m123n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Integer 0x00000001;                    \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m123n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m124n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"Ljava\/lang\/String;\";             \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m124n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Integer 0x00000001;                    \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m124n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m125n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"I\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m125n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Long 0x0000000000000005;;              \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m125n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m126n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"S\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m126n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Long 0x0000000000000005;;              \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m126n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m127n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"C\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m127n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Long 0x0000000000000005;;              \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m127n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m128n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"B\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m128n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Long 0x0000000000000005;;              \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m128n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m129n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"Z\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m129n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Long 0x0000000000000005;;              \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m129n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m12n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"F\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m12n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Integer 0x00000001;                    \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m12n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m130p {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"J\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m130p\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Long 0x0000000000000005;;              \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m130p.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m131n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"F\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m131n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Long 0x0000000000000005;;              \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m131n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m132n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"D\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m132n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Long 0x0000000000000005;;              \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m132n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m133n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"Ljava\/lang\/String;\";             \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m133n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Long 0x0000000000000005;;              \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m133n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m134n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"I\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m134n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Float 0x00000006;                      \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m134n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m135n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"S\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m135n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Float 0x00000006;                      \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m135n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m136n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"C\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m136n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Float 0x00000006;                      \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m136n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m137n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"B\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m137n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Float 0x00000006;                      \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m137n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m138n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"Z\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m138n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Float 0x00000006;                      \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m138n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m139n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"J\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m139n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Float 0x00000006;                      \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m139n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m13n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"D\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m13n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Integer 0x00000001;                    \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m13n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m140p {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"F\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m140p\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Float 0x00000006;                      \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m140p.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m141n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"D\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m141n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Float 0x00000006;                      \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m141n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m142n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"Ljava\/lang\/String;\";             \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m142n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Float 0x00000006;                      \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m142n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m143n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"I\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m143n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Double 0x0000000000000007;;            \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m143n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m144n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"S\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m144n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Double 0x0000000000000007;;            \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m144n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m145n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"C\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m145n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Double 0x0000000000000007;;            \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m145n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m146n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"B\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m146n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Double 0x0000000000000007;;            \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m146n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m147n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"Z\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m147n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Double 0x0000000000000007;;            \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m147n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m148n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"J\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m148n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Double 0x0000000000000007;;            \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m148n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m149n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"F\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m149n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Double 0x0000000000000007;;            \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m149n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m14n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"Ljava\/lang\/String;\";             \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m14n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Integer 0x00000001;                    \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m14n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m150p {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"D\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m150p\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Double 0x0000000000000007;;            \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m150p.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m151n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"Ljava\/lang\/String;\";             \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m151n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Double 0x0000000000000007;;            \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m151n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m152n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"I\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m152n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    String #20;                            \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m152n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m153n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"S\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m153n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    String #20;                            \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m153n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m154n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"C\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m154n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    String #20;                            \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m154n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m155n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"B\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m155n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    String #20;                            \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m155n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m156n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"Z\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m156n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    String #20;                            \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m156n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m157n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"J\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m157n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    String #20;                            \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m157n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m158n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"F\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m158n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    String #20;                            \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m158n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m159n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"D\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m159n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    String #20;                            \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m159n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m15p {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"S\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m15p\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Integer 0x00000000;                    \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m15p.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m160p {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"Ljava\/lang\/String;\";             \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m160p\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    String #20;                            \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m160p.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m16n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"J\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m16n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Integer 0x00000000;                    \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m16n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m17n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"F\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m17n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Integer 0x00000000;                    \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m17n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m18n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"D\";                              \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m18n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Integer 0x00000000;                    \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m18n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m19n {\n+  0xCAFEBABE;\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Integer 0x00030D40;                    \/\/ #1\n+    Class #14;                             \/\/ #2\n+    Class #18;                             \/\/ #3\n+    Method #3 #5;                          \/\/ #4\n+    NameAndType #7 #6;                     \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    Utf8 \"<init>\";                         \/\/ #7\n+    Utf8 \"Code\";                           \/\/ #8\n+    Utf8 \"ConstantValue\";                  \/\/ #9\n+    Utf8 \"Exceptions\";                     \/\/ #10\n+    Utf8 \"Ljava\/lang\/String;\";             \/\/ #11\n+    Utf8 \"LineNumberTable\";                \/\/ #12\n+    Utf8 \"LocalVariables\";                 \/\/ #13\n+    Utf8 \"javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl010\/atrcvl01002m1\/atrcvl01002m19n\";  \/\/ #14\n+    Utf8 \"SourceFile\";                     \/\/ #15\n+    Utf8 \"f.java\";                         \/\/ #16\n+    Utf8 \"i\";                              \/\/ #17\n+    Utf8 \"java\/lang\/Object\";               \/\/ #18\n+    Integer 0x00000D40;                    \/\/ #19\n+    Utf8 \"Hello, World!\";                  \/\/ #20\n+    Integer 0x00000000;                    \/\/ #21\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #3;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #11;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#9) {                         \/\/ ConstantValue\n+          #21;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #7;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#8) {                         \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x04 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/jcod-files\/atrcvl01002m19n.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,759 @@\n+package org\/openjdk\/asmtools\/attribute\/StackMapTable\/data;\n+\n+public super class #10 \/* StackMapData *\/ version 69:0\n+{\n+  const #1    = Method        #2.#3;               \/\/ java\/lang\/Object.\"<init>\":\"()V\"\n+  const #2    = class         #4;                  \/\/ java\/lang\/Object\n+  const #3    = NameAndType   #5:#6;               \/\/ \"<init>\":\"()V\"\n+  const #4    = Utf8          \"java\/lang\/Object\";\n+  const #5    = Utf8          \"<init>\";\n+  const #6    = Utf8          \"()V\";\n+  const #7    = String        #8;                  \/\/ \"string\"\n+  const #8    = Utf8          \"string\";\n+  const #9    = Field         #10.#11;             \/\/ StackMapData.fldS:\"Ljava\/lang\/String;\"\n+  const #10   = class         #12;                 \/\/ StackMapData\n+  const #11   = NameAndType   #13:#14;             \/\/ fldS:\"Ljava\/lang\/String;\"\n+  const #12   = Utf8          \"org\/openjdk\/asmtools\/attribute\/StackMapTable\/data\/StackMapData\";\n+  const #13   = Utf8          \"fldS\";\n+  const #14   = Utf8          \"Ljava\/lang\/String;\";\n+  const #15   = Field         #10.#16;             \/\/ StackMapData.fldFS:\"Ljava\/lang\/String;\"\n+  const #16   = NameAndType   #17:#14;             \/\/ fldFS:\"Ljava\/lang\/String;\"\n+  const #17   = Utf8          \"fldFS\";\n+  const #18   = Method        #2.#19;              \/\/ java\/lang\/Object.toString:\"()Ljava\/lang\/String;\"\n+  const #19   = NameAndType   #20:#21;             \/\/ toString:\"()Ljava\/lang\/String;\"\n+  const #20   = Utf8          \"toString\";\n+  const #21   = Utf8          \"()Ljava\/lang\/String;\";\n+  const #22   = class         #23;                 \/\/ java\/lang\/ArithmeticException\n+  const #23   = Utf8          \"java\/lang\/ArithmeticException\";\n+  const #24   = Field         #25.#26;             \/\/ java\/lang\/System.out:\"Ljava\/io\/PrintStream;\"\n+  const #25   = class         #27;                 \/\/ java\/lang\/System\n+  const #26   = NameAndType   #28:#29;             \/\/ out:\"Ljava\/io\/PrintStream;\"\n+  const #27   = Utf8          \"java\/lang\/System\";\n+  const #28   = Utf8          \"out\";\n+  const #29   = Utf8          \"Ljava\/io\/PrintStream;\";\n+  const #30   = String        #31;                 \/\/ \"frame\"\n+  const #31   = Utf8          \"frame\";\n+  const #32   = Method        #33.#34;             \/\/ java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\"\n+  const #33   = class         #35;                 \/\/ java\/io\/PrintStream\n+  const #34   = NameAndType   #36:#37;             \/\/ println:\"(Ljava\/lang\/String;)V\"\n+  const #35   = Utf8          \"java\/io\/PrintStream\";\n+  const #36   = Utf8          \"println\";\n+  const #37   = Utf8          \"(Ljava\/lang\/String;)V\";\n+  const #38   = float         100.0f;\n+  const #39   = Method        #40.#41;             \/\/ java\/lang\/Math.round:\"(F)I\"\n+  const #40   = class         #42;                 \/\/ java\/lang\/Math\n+  const #41   = NameAndType   #43:#44;             \/\/ round:\"(F)I\"\n+  const #42   = Utf8          \"java\/lang\/Math\";\n+  const #43   = Utf8          \"round\";\n+  const #44   = Utf8          \"(F)I\";\n+  const #45   = InvokeDynamic 0:#46;               \/\/ #0:makeConcatWithConstants:\"(I)Ljava\/lang\/String;\"\n+  const #46   = NameAndType   #47:#48;             \/\/ makeConcatWithConstants:\"(I)Ljava\/lang\/String;\"\n+  const #47   = Utf8          \"makeConcatWithConstants\";\n+  const #48   = Utf8          \"(I)Ljava\/lang\/String;\";\n+  const #49   = float         3.14f;\n+  const #50   = InvokeDynamic 1:#46;               \/\/ #1:makeConcatWithConstants:\"(I)Ljava\/lang\/String;\"\n+  const #51   = float         10.0f;\n+  const #52   = float         110.0f;\n+  const #53   = double        100.0d;\n+  const #55   = Method        #40.#56;             \/\/ java\/lang\/Math.round:\"(D)J\"\n+  const #56   = NameAndType   #43:#57;             \/\/ round:\"(D)J\"\n+  const #57   = Utf8          \"(D)J\";\n+  const #58   = InvokeDynamic 2:#59;               \/\/ #2:makeConcatWithConstants:\"(J)Ljava\/lang\/String;\"\n+  const #59   = NameAndType   #47:#60;             \/\/ makeConcatWithConstants:\"(J)Ljava\/lang\/String;\"\n+  const #60   = Utf8          \"(J)Ljava\/lang\/String;\";\n+  const #61   = double        99.99d;\n+  const #63   = InvokeDynamic 3:#64;               \/\/ #3:makeConcatWithConstants:\"(D)Ljava\/lang\/String;\"\n+  const #64   = NameAndType   #47:#65;             \/\/ makeConcatWithConstants:\"(D)Ljava\/lang\/String;\"\n+  const #65   = Utf8          \"(D)Ljava\/lang\/String;\";\n+  const #66   = String        #67;                 \/\/ \"chop_frame\"\n+  const #67   = Utf8          \"chop_frame\";\n+  const #68   = String        #69;                 \/\/ \"_frame_\"\n+  const #69   = Utf8          \"_frame_\";\n+  const #70   = Method        #33.#71;             \/\/ java\/io\/PrintStream.println:\"(D)V\"\n+  const #71   = NameAndType   #36:#72;             \/\/ println:\"(D)V\"\n+  const #72   = Utf8          \"(D)V\";\n+  const #73   = String        #74;                 \/\/ \"n_frame\"\n+  const #74   = Utf8          \"n_frame\";\n+  const #75   = InvokeDynamic 4:#76;               \/\/ #4:makeConcatWithConstants:\"(Ljava\/lang\/String;CI)Ljava\/lang\/String;\"\n+  const #76   = NameAndType   #47:#77;             \/\/ makeConcatWithConstants:\"(Ljava\/lang\/String;CI)Ljava\/lang\/String;\"\n+  const #77   = Utf8          \"(Ljava\/lang\/String;CI)Ljava\/lang\/String;\";\n+  const #78   = class         #79;                 \/\/ java\/lang\/String\n+  const #79   = Utf8          \"java\/lang\/String\";\n+  const #80   = Method        #2.#81;              \/\/ java\/lang\/Object.hashCode:\"()I\"\n+  const #81   = NameAndType   #82:#83;             \/\/ hashCode:\"()I\"\n+  const #82   = Utf8          \"hashCode\";\n+  const #83   = Utf8          \"()I\";\n+  const #84   = class         #85;                 \/\/ java\/lang\/RuntimeException\n+  const #85   = Utf8          \"java\/lang\/RuntimeException\";\n+  const #86   = String        #87;                 \/\/ \"Test exception\"\n+  const #87   = Utf8          \"Test exception\";\n+  const #88   = Method        #84.#89;             \/\/ java\/lang\/RuntimeException.\"<init>\":\"(Ljava\/lang\/String;)V\"\n+  const #89   = NameAndType   #5:#37;              \/\/ \"<init>\":\"(Ljava\/lang\/String;)V\"\n+  const #90   = String        #91;                 \/\/ \"positive\"\n+  const #91   = Utf8          \"positive\";\n+  const #92   = String        #93;                 \/\/ \"non-positive\"\n+  const #93   = Utf8          \"non-positive\";\n+  const #94   = String        #95;                 \/\/ \"Computing result\"\n+  const #95   = Utf8          \"Computing result\";\n+  const #96   = Method        #10.#3;              \/\/ StackMapData.\"<init>\":\"()V\"\n+  const #97   = Method        #10.#98;             \/\/ StackMapData.generateFrames:\"(I)V\"\n+  const #98   = NameAndType   #99:#100;            \/\/ generateFrames:\"(I)V\"\n+  const #99   = Utf8          \"generateFrames\";\n+  const #100  = Utf8          \"(I)V\";\n+  const #101  = String        #102;                \/\/ \"test\"\n+  const #102  = Utf8          \"test\";\n+  const #103  = Method        #10.#104;            \/\/ StackMapData.complexMethod:\"(ILjava\/lang\/Object;)I\"\n+  const #104  = NameAndType   #105:#106;           \/\/ complexMethod:\"(ILjava\/lang\/Object;)I\"\n+  const #105  = Utf8          \"complexMethod\";\n+  const #106  = Utf8          \"(ILjava\/lang\/Object;)I\";\n+  const #107  = Method        #10.#108;            \/\/ StackMapData.generateFullFrame:\"(I)I\"\n+  const #108  = NameAndType   #109:#110;           \/\/ generateFullFrame:\"(I)I\"\n+  const #109  = Utf8          \"generateFullFrame\";\n+  const #110  = Utf8          \"(I)I\";\n+  const #111  = Field         #10.#112;            \/\/ StackMapData.fldL:\"J\"\n+  const #112  = NameAndType   #113:#114;           \/\/ fldL:\"J\"\n+  const #113  = Utf8          \"fldL\";\n+  const #114  = Utf8          \"J\";\n+  const #115  = Utf8          \"fldI\";\n+  const #116  = Utf8          \"I\";\n+  const #117  = Utf8          \"ConstantValue\";\n+  const #118  = int           0;\n+  const #119  = Utf8          \"Code\";\n+  const #120  = Utf8          \"StackMapTable\";\n+  const #121  = class         #122;                \/\/ java\/lang\/Throwable\n+  const #122  = Utf8          \"java\/lang\/Throwable\";\n+  const #123  = Utf8          \"main\";\n+  const #124  = Utf8          \"([Ljava\/lang\/String;)V\";\n+  const #125  = Utf8          \"<clinit>\";\n+  const #126  = Utf8          \"BootstrapMethods\";\n+  const #127  = String        #128;                \/\/ \"item_frame\\u0001\"\n+  const #128  = Utf8          \"item_frame\\u0001\";\n+  const #129  = String        #130;                \/\/ \"item_frame_\\u0001\"\n+  const #130  = Utf8          \"item_frame_\\u0001\";\n+  const #131  = String        #132;                \/\/ \"_frame: \\u0001\"\n+  const #132  = Utf8          \"_frame: \\u0001\";\n+  const #133  = String        #134;                \/\/ \"Before chop_frame: \\u0001\"\n+  const #134  = Utf8          \"Before chop_frame: \\u0001\";\n+  const #135  = String        #136;                \/\/ \"\\u0001: \\u0001\\u0001\"\n+  const #136  = Utf8          \"\\u0001: \\u0001\\u0001\";\n+  const #137  = MethodHandle  6:#138;              \/\/ REF_invokeStatic:java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\"\n+  const #138  = Method        #139.#140;           \/\/ java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\"\n+  const #139  = class         #141;                \/\/ java\/lang\/invoke\/StringConcatFactory\n+  const #140  = NameAndType   #47:#142;            \/\/ makeConcatWithConstants:\"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\"\n+  const #141  = Utf8          \"java\/lang\/invoke\/StringConcatFactory\";\n+  const #142  = Utf8          \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";\n+  const #143  = Utf8          \"InnerClasses\";\n+  const #144  = class         #145;                \/\/ java\/lang\/invoke\/MethodHandles$Lookup\n+  const #145  = Utf8          \"java\/lang\/invoke\/MethodHandles$Lookup\";\n+  const #146  = class         #147;                \/\/ java\/lang\/invoke\/MethodHandles\n+  const #147  = Utf8          \"java\/lang\/invoke\/MethodHandles\";\n+  const #148  = Utf8          \"Lookup\";\n+\n+  static final Field #115:#116 = #118;             \/\/ fldI:I = int 0\n+  static Field #113:#114;                          \/\/ fldL:J\n+  protected Field #13:#14;                         \/\/ fldS:\"Ljava\/lang\/String;\"\n+  public final Field #17:#14 = #7;                 \/\/ fldFS:\"Ljava\/lang\/String;\" = String \"string\"\n+\n+  public Method #5:#6                              \/\/ \"<init>\":\"()V\" \n+    stack 2  locals 1\n+  {\n+     0:    aload_0;\n+     1:    invokespecial     #1;                   \/\/ Method java\/lang\/Object.\"<init>\":\"()V\"\n+     4:    aload_0;\n+     5:    ldc               #7;                   \/\/ String \"string\"\n+     7:    putfield          #9;                   \/\/ Field fldS:\"Ljava\/lang\/String;\"\n+    10:    aload_0;\n+    11:    ldc               #7;                   \/\/ String \"string\"\n+    13:    putfield          #15;                  \/\/ Field fldFS:\"Ljava\/lang\/String;\"\n+    16:    return;\n+  }\n+\n+  public Method #99:#100                           \/\/ generateFrames:\"(I)V\" \n+    stack 5  locals 10\n+  {\n+     0:    iconst_0;\n+     1:    istore_2;\n+     2:    aconst_null;\n+     3:    astore_3;\n+           try               T0, T1;\n+     4:    iconst_1;\n+     5:    iload_2;\n+     6:    idiv;\n+     7:    istore_2;\n+           endtry            T0,T1;\n+     8:    aload_3;\n+     9:    invokevirtual     #18;                  \/\/ Method java\/lang\/Object.toString:\"()Ljava\/lang\/String;\"\n+    12:    pop;\n+    13:    goto              44;\n+           catch             T0 #22;               \/\/ java\/lang\/ArithmeticException\n+           try               T2;\n+    16:    stack_frame_type  early_larval;         \/\/ frame_type 246\n+             unset_fields    #11,                  \/\/ fldS:\"Ljava\/lang\/String;\",\n+                             #16;                  \/\/ fldFS:\"Ljava\/lang\/String;\";\n+             frame_type      full;                 \/\/ frame_type 255\n+               locals_map    #10, 1, 1, #2;        \/\/ class StackMapData, int, int, class java\/lang\/Object;\n+               stack_map     #22;                  \/\/ class java\/lang\/ArithmeticException;\n+           astore            4;\n+    18:    new               #2;                   \/\/ class java\/lang\/Object\n+    21:    dup;\n+    22:    invokespecial     #1;                   \/\/ Method java\/lang\/Object.\"<init>\":\"()V\"\n+    25:    astore_3;\n+           endtry            T2;\n+    26:    aload_3;\n+    27:    invokevirtual     #18;                  \/\/ Method java\/lang\/Object.toString:\"()Ljava\/lang\/String;\"\n+    30:    pop;\n+    31:    goto              44;\n+           catch             T1 #0;                \/\/ any\n+           catch             T2 #0;                \/\/ any\n+           catch             T3 #0;                \/\/ any\n+           try               T3;\n+    34:    stack_frame_type  early_larval;         \/\/ frame_type 246\n+             unset_fields    #11,                  \/\/ fldS:\"Ljava\/lang\/String;\",\n+                             #16;                  \/\/ fldFS:\"Ljava\/lang\/String;\";\n+             frame_type      stack1;               \/\/ frame_type 81\n+               stack_map     #121;                 \/\/ class java\/lang\/Throwable;\n+           astore            5;\n+           endtry            T3;\n+    36:    aload_3;\n+    37:    invokevirtual     #18;                  \/\/ Method java\/lang\/Object.toString:\"()Ljava\/lang\/String;\"\n+    40:    pop;\n+    41:    aload             5;\n+    43:    athrow;\n+    44:    stack_frame_type  early_larval;         \/\/ frame_type 246\n+             unset_fields    #26,                  \/\/ out:\"Ljava\/io\/PrintStream;\",\n+                             #16;                  \/\/ fldFS:\"Ljava\/lang\/String;\";\n+             frame_type      same;                 \/\/ frame_type 9\n+           iload_2;\n+    45:    ifne              50;\n+    48:    aconst_null;\n+    49:    astore_3;\n+    50:    stack_frame_type  same;                 \/\/ frame_type 5\n+           iload_2;\n+    51:    lookupswitch      {                     \/\/ 2\n+                1:      76;\n+                2:      87;\n+               default: 87   };\n+    76:    stack_frame_type  same;                 \/\/ frame_type 25\n+           new               #2;                   \/\/ class java\/lang\/Object\n+    79:    dup;\n+    80:    invokespecial     #1;                   \/\/ Method java\/lang\/Object.\"<init>\":\"()V\"\n+    83:    astore_3;\n+    84:    goto              87;\n+    87:    stack_frame_type  same;                 \/\/ frame_type 10\n+           iload_1;\n+    88:    ifne              99;\n+    91:    getstatic         #24;                  \/\/ Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\"\n+    94:    ldc               #30;                  \/\/ String \"frame\"\n+    96:    invokevirtual     #32;                  \/\/ Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\"\n+    99:    stack_frame_type  same;                 \/\/ frame_type 11\n+           iload_1;\n+    100:   iconst_1;\n+    101:   if_icmpne         127;\n+    104:   bipush            42;\n+    106:   istore            4;\n+    108:   getstatic         #24;                  \/\/ Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\"\n+    111:   iload             4;\n+    113:   ldc               #38;                  \/\/ float 100.0f\n+    115:   invokestatic      #39;                  \/\/ Method java\/lang\/Math.round:\"(F)I\"\n+    118:   imul;\n+    119:   invokedynamic     #45;                  \/\/ InvokeDynamic REF_invokeStatic:Method java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                                                   \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\":\n+                                                   \/\/ makeConcatWithConstants:\"(I)Ljava\/lang\/String;\" {\n+                                                   \/\/   String \"item_frame\\u0001\"\n+                                                   \/\/ }\n+    124:   invokevirtual     #32;                  \/\/ Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\"\n+    127:   stack_frame_type  same;                 \/\/ frame_type 27\n+           iload_1;\n+    128:   iconst_2;\n+    129:   if_icmpne         184;\n+    132:   iconst_0;\n+    133:   istore            4;\n+    135:   iconst_0;\n+    136:   istore            5;\n+    138:   stack_frame_type  early_larval;         \/\/ frame_type 246\n+             unset_fields;\n+             frame_type      append;               \/\/ frame_type 253\n+               locals_map    1, 1;                 \/\/ int, int;\n+           iload             5;\n+    140:   sipush            3000;\n+    143:   if_icmpge         171;\n+    146:   ldc               #49;                  \/\/ float 3.14f\n+    148:   fstore            6;\n+    150:   iload             4;\n+    152:   fload             6;\n+    154:   ldc               #38;                  \/\/ float 100.0f\n+    156:   invokestatic      #39;                  \/\/ Method java\/lang\/Math.round:\"(F)I\"\n+    159:   i2f;\n+    160:   fmul;\n+    161:   f2i;\n+    162:   iadd;\n+    163:   istore            4;\n+    165:   iinc              5, 1;\n+    168:   goto              138;\n+    171:   stack_frame_type  chop1;                \/\/ frame_type 250\n+           getstatic         #24;                  \/\/ Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\"\n+    174:   iload             4;\n+    176:   invokedynamic     #50;                  \/\/ InvokeDynamic REF_invokeStatic:Method java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                                                   \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\":\n+                                                   \/\/ makeConcatWithConstants:\"(I)Ljava\/lang\/String;\" {\n+                                                   \/\/   String \"item_frame_\\u0001\"\n+                                                   \/\/ }\n+    181:   invokevirtual     #32;                  \/\/ Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\"\n+    184:   stack_frame_type  chop1;                \/\/ frame_type 250\n+           ldc               #51;                  \/\/ float 10.0f\n+    186:   invokestatic      #39;                  \/\/ Method java\/lang\/Math.round:\"(F)I\"\n+    189:   istore            4;\n+    191:   iload_1;\n+    192:   iconst_3;\n+    193:   if_icmpne         232;\n+    196:   ldc               #52;                  \/\/ float 110.0f\n+    198:   invokestatic      #39;                  \/\/ Method java\/lang\/Math.round:\"(F)I\"\n+    201:   istore            5;\n+    203:   ldc2_w            #53;                  \/\/ double 100.0d\n+    206:   invokestatic      #55;                  \/\/ Method java\/lang\/Math.round:\"(D)J\"\n+    209:   lstore            6;\n+    211:   getstatic         #24;                  \/\/ Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\"\n+    214:   iload             5;\n+    216:   i2l;\n+    217:   lload             6;\n+    219:   ladd;\n+    220:   iload             4;\n+    222:   i2l;\n+    223:   lmul;\n+    224:   invokedynamic     #58;                  \/\/ InvokeDynamic REF_invokeStatic:Method java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                                                   \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\":\n+                                                   \/\/ makeConcatWithConstants:\"(J)Ljava\/lang\/String;\" {\n+                                                   \/\/   String \"_frame: \\u0001\"\n+                                                   \/\/ }\n+    229:   invokevirtual     #32;                  \/\/ Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\"\n+    232:   stack_frame_type  append;               \/\/ frame_type 252\n+             locals_map      1;                    \/\/ int;\n+           iload_1;\n+    233:   iconst_4;\n+    234:   if_icmpne         273;\n+    237:   bipush            50;\n+    239:   iload             4;\n+    241:   imul;\n+    242:   istore            5;\n+    244:   ldc2_w            #61;                  \/\/ double 99.99d\n+    247:   iload             4;\n+    249:   i2d;\n+    250:   dmul;\n+    251:   dstore            6;\n+    253:   getstatic         #24;                  \/\/ Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\"\n+    256:   iload             5;\n+    258:   i2d;\n+    259:   dload             6;\n+    261:   dadd;\n+    262:   invokedynamic     #63;                  \/\/ InvokeDynamic REF_invokeStatic:Method java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                                                   \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\":\n+                                                   \/\/ makeConcatWithConstants:\"(D)Ljava\/lang\/String;\" {\n+                                                   \/\/   String \"Before chop_frame: \\u0001\"\n+                                                   \/\/ }\n+    267:   invokevirtual     #32;                  \/\/ Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\"\n+    270:   goto              281;\n+    273:   stack_frame_type  same;                 \/\/ frame_type 40\n+           getstatic         #24;                  \/\/ Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\"\n+    276:   ldc               #66;                  \/\/ String \"chop_frame\"\n+    278:   invokevirtual     #32;                  \/\/ Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\"\n+    281:   stack_frame_type  same;                 \/\/ frame_type 7\n+           iload_1;\n+    282:   iconst_5;\n+    283:   if_icmpne         379;\n+    286:   iconst_0;\n+    287:   istore            5;\n+    289:   iconst_0;\n+    290:   istore            6;\n+    292:   stack_frame_type  append;               \/\/ frame_type 253\n+             locals_map      1, 1;                 \/\/ int, int;\n+           iload             6;\n+    294:   sipush            2500;\n+    297:   if_icmpge         326;\n+    300:   ldc               #49;                  \/\/ float 3.14f\n+    302:   fstore            7;\n+    304:   iload             5;\n+    306:   fload             7;\n+    308:   iload             6;\n+    310:   i2f;\n+    311:   invokestatic      #39;                  \/\/ Method java\/lang\/Math.round:\"(F)I\"\n+    314:   i2f;\n+    315:   fmul;\n+    316:   f2i;\n+    317:   iadd;\n+    318:   istore            5;\n+    320:   iinc              6, 1;\n+    323:   goto              292;\n+    326:   stack_frame_type  early_larval;         \/\/ frame_type 246\n+             unset_fields;\n+             frame_type      chop1;                \/\/ frame_type 250\n+           iload             5;\n+    328:   bipush            100;\n+    330:   if_icmple         344;\n+    333:   getstatic         #24;                  \/\/ Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\"\n+    336:   ldc               #68;                  \/\/ String \"_frame_\"\n+    338:   invokevirtual     #32;                  \/\/ Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\"\n+    341:   goto              379;\n+    344:   stack_frame_type  same;                 \/\/ frame_type 17\n+           iload             5;\n+    346:   bipush            50;\n+    348:   if_icmpge         379;\n+    351:   bipush            50;\n+    353:   iload             4;\n+    355:   imul;\n+    356:   istore            6;\n+    358:   ldc2_w            #61;                  \/\/ double 99.99d\n+    361:   iload             4;\n+    363:   i2d;\n+    364:   dmul;\n+    365:   dstore            7;\n+    367:   getstatic         #24;                  \/\/ Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\"\n+    370:   iload             6;\n+    372:   i2d;\n+    373:   dload             7;\n+    375:   dadd;\n+    376:   invokevirtual     #70;                  \/\/ Method java\/io\/PrintStream.println:\"(D)V\"\n+    379:   stack_frame_type  chop1;                \/\/ frame_type 250\n+           iload_1;\n+    380:   bipush            6;\n+    382:   if_icmpne         414;\n+    385:   ldc               #73;                  \/\/ String \"n_frame\"\n+    387:   astore            5;\n+    389:   bipush            70;\n+    391:   istore            6;\n+    393:   bipush            100;\n+    395:   istore            7;\n+    397:   getstatic         #24;                  \/\/ Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\"\n+    400:   aload             5;\n+    402:   iload             6;\n+    404:   iload             7;\n+    406:   invokedynamic     #75;                  \/\/ InvokeDynamic REF_invokeStatic:Method java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                                                   \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\":\n+                                                   \/\/ makeConcatWithConstants:\"(Ljava\/lang\/String;CI)Ljava\/lang\/String;\" {\n+                                                   \/\/   String \"\\u0001: \\u0001\\u0001\"\n+                                                   \/\/ }\n+    411:   invokevirtual     #32;                  \/\/ Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\"\n+    414:   stack_frame_type  same;                 \/\/ frame_type 34\n+           iconst_0;\n+    415:   istore            5;\n+    417:   aconst_null;\n+    418:   astore            6;\n+           try               T4, T5;\n+    420:   iconst_1;\n+    421:   iload             5;\n+    423:   idiv;\n+    424:   istore            5;\n+           endtry            T4,T5;\n+    426:   aload             6;\n+    428:   invokevirtual     #18;                  \/\/ Method java\/lang\/Object.toString:\"()Ljava\/lang\/String;\"\n+    431:   pop;\n+    432:   goto              466;\n+           catch             T4 #22;               \/\/ java\/lang\/ArithmeticException\n+           try               T6;\n+    435:   stack_frame_type  full;                 \/\/ frame_type 255\n+             locals_map      #10, 1, 1, #2, 1, 1, #2; \/\/ class StackMapData, int, int, class java\/lang\/Object, int, int, class java\/lang\/Object;\n+             stack_map       #22;                     \/\/ class java\/lang\/ArithmeticException;\n+           astore            7;\n+    437:   new               #2;                   \/\/ class java\/lang\/Object\n+    440:   dup;\n+    441:   invokespecial     #1;                   \/\/ Method java\/lang\/Object.\"<init>\":\"()V\"\n+    444:   astore            6;\n+           endtry            T6;\n+    446:   aload             6;\n+    448:   invokevirtual     #18;                  \/\/ Method java\/lang\/Object.toString:\"()Ljava\/lang\/String;\"\n+    451:   pop;\n+    452:   goto              466;\n+           catch             T5 #0;                \/\/ any\n+           catch             T6 #0;                \/\/ any\n+           catch             T7 #0;                \/\/ any\n+           try               T7;\n+    455:   stack_frame_type  stack1;               \/\/ frame_type 83\n+             stack_map       #121;                 \/\/ class java\/lang\/Throwable;\n+           astore            9;\n+           endtry            T7;\n+    457:   aload             6;\n+    459:   invokevirtual     #18;                  \/\/ Method java\/lang\/Object.toString:\"()Ljava\/lang\/String;\"\n+    462:   pop;\n+    463:   aload             9;\n+    465:   athrow;\n+    466:   stack_frame_type  same;                 \/\/ frame_type 10\n+           iload             5;\n+    468:   ifne              474;\n+    471:   aconst_null;\n+    472:   astore            6;\n+    474:   stack_frame_type  same;                 \/\/ frame_type 7\n+           iload_2;\n+    475:   lookupswitch      {                     \/\/ 2\n+                1:      500;\n+                2:      512;\n+               default: 512  };\n+    500:   stack_frame_type  same;                 \/\/ frame_type 25\n+           new               #2;                   \/\/ class java\/lang\/Object\n+    503:   dup;\n+    504:   invokespecial     #1;                   \/\/ Method java\/lang\/Object.\"<init>\":\"()V\"\n+    507:   astore            6;\n+    509:   goto              512;\n+    512:   stack_frame_type  early_larval;         \/\/ frame_type 246\n+             unset_fields    #11,                  \/\/ fldS:\"Ljava\/lang\/String;\",\n+                             #16,                  \/\/ fldFS:\"Ljava\/lang\/String;\",\n+                             #26,                  \/\/ out:\"Ljava\/io\/PrintStream;\",\n+                             #112;                 \/\/ fldL:\"J\";\n+             frame_type      same;                 \/\/ frame_type 11\n+           return;\n+  }\n+\n+  public Method #105:#106                          \/\/ complexMethod:\"(ILjava\/lang\/Object;)I\" \n+    stack 3  locals 7\n+  {\n+     0:    iconst_0;\n+     1:    istore_3;\n+     2:    iconst_1;\n+     3:    istore            4;\n+     5:    aconst_null;\n+     6:    astore            5;\n+           try               T0;\n+     8:    iload_1;\n+     9:    ifle              47;\n+    12:    iload_1;\n+    13:    iconst_1;\n+    14:    iadd;\n+    15:    istore_3;\n+    16:    aload_2;\n+    17:    instanceof        #78;                  \/\/ class java\/lang\/String\n+    20:    ifeq              39;\n+    23:    aload_2;\n+    24:    checkcast         #78;                  \/\/ class java\/lang\/String\n+    27:    astore            5;\n+    29:    aload             5;\n+    31:    invokevirtual     #80;                  \/\/ Method java\/lang\/Object.hashCode:\"()I\"\n+    34:    istore            4;\n+    36:    iload             4;\n+           endtry            T0;\n+    38:    ireturn;\n+           try               T1;\n+    39:    stack_frame_type  append;               \/\/ frame_type 254\n+             locals_map      1, 1, #2;             \/\/ int, int, class java\/lang\/Object;\n+           iload_3;\n+    40:    iconst_2;\n+    41:    imul;\n+    42:    istore            4;\n+    44:    goto              104;\n+    47:    stack_frame_type  same;                 \/\/ frame_type 7\n+           iload_1;\n+    48:    iconst_m1;\n+    49:    if_icmpne         70;\n+    52:    iload_1;\n+    53:    ineg;\n+    54:    istore_3;\n+    55:    iload_3;\n+    56:    iconst_3;\n+    57:    iadd;\n+    58:    istore            4;\n+    60:    new               #84;                  \/\/ class java\/lang\/RuntimeException\n+    63:    dup;\n+    64:    ldc               #86;                  \/\/ String \"Test exception\"\n+    66:    invokespecial     #88;                  \/\/ Method java\/lang\/RuntimeException.\"<init>\":\"(Ljava\/lang\/String;)V\"\n+    69:    athrow;\n+    70:    stack_frame_type  same;                 \/\/ frame_type 22\n+           iconst_0;\n+    71:    istore            6;\n+    73:    stack_frame_type  early_larval;         \/\/ frame_type 246\n+             unset_fields    #11,                  \/\/ fldS:\"Ljava\/lang\/String;\",\n+                             #16,                  \/\/ fldFS:\"Ljava\/lang\/String;\",\n+                             #26,                  \/\/ out:\"Ljava\/io\/PrintStream;\",\n+                             #112;                 \/\/ fldL:\"J\";\n+             frame_type      append;               \/\/ frame_type 252\n+               locals_map    1;                    \/\/ int;\n+           iload             6;\n+    75:    iconst_2;\n+    76:    if_icmpge         104;\n+    79:    iload_3;\n+    80:    iload             6;\n+    82:    iadd;\n+    83:    istore_3;\n+    84:    iload_3;\n+    85:    iconst_1;\n+    86:    if_icmple         98;\n+    89:    iload_3;\n+    90:    iload             6;\n+    92:    isub;\n+    93:    istore            4;\n+    95:    goto              104;\n+    98:    stack_frame_type  same;                 \/\/ frame_type 24\n+           iinc              6, 1;\n+    101:   goto              73;\n+           endtry            T1;\n+    104:   stack_frame_type  chop1;                \/\/ frame_type 250\n+           goto              118;\n+           catch             T0 #84;               \/\/ java\/lang\/RuntimeException\n+           catch             T1 #84;               \/\/ java\/lang\/RuntimeException\n+    107:   stack_frame_type  early_larval;         \/\/ frame_type 246\n+             unset_fields    #11,                  \/\/ fldS:\"Ljava\/lang\/String;\",\n+                             #16,                  \/\/ fldFS:\"Ljava\/lang\/String;\",\n+                             #26,                  \/\/ out:\"Ljava\/io\/PrintStream;\",\n+                             #112;                 \/\/ fldL:\"J\";\n+             frame_type      stack1;               \/\/ frame_type 66\n+               stack_map     #84;                  \/\/ class java\/lang\/RuntimeException;\n+           astore            6;\n+    109:   aload             6;\n+    111:   astore            5;\n+    113:   iload_3;\n+    114:   iconst_5;\n+    115:   iadd;\n+    116:   istore            4;\n+    118:   stack_frame_type  same;                 \/\/ frame_type 10\n+           iload_3;\n+    119:   iload             4;\n+    121:   iadd;\n+    122:   ireturn;\n+  }\n+\n+  public Method #109:#110                          \/\/ generateFullFrame:\"(I)I\" \n+    stack 3  locals 6\n+  {\n+     0:    iconst_0;\n+     1:    istore_2;\n+     2:    aconst_null;\n+     3:    astore_3;\n+     4:    iconst_0;\n+     5:    istore            4;\n+           try               T0;\n+     7:    iload_1;\n+     8:    ifle              25;\n+    11:    ldc               #90;                  \/\/ String \"positive\"\n+    13:    astore_3;\n+    14:    iconst_1;\n+    15:    istore            4;\n+    17:    aload_3;\n+    18:    invokevirtual     #80;                  \/\/ Method java\/lang\/Object.hashCode:\"()I\"\n+    21:    istore_2;\n+    22:    goto              39;\n+    25:    stack_frame_type  early_larval;         \/\/ frame_type 246\n+             unset_fields    #11,                  \/\/ fldS:\"Ljava\/lang\/String;\",\n+                             #16,                  \/\/ fldFS:\"Ljava\/lang\/String;\",\n+                             #26,                  \/\/ out:\"Ljava\/io\/PrintStream;\",\n+                             #112;                 \/\/ fldL:\"J\";\n+             frame_type      append;               \/\/ frame_type 254\n+               locals_map    1, #2, 1;             \/\/ int, class java\/lang\/Object, int;\n+           iload_1;\n+    26:    iconst_2;\n+    27:    imul;\n+    28:    istore_2;\n+    29:    new               #84;                  \/\/ class java\/lang\/RuntimeException\n+    32:    dup;\n+    33:    ldc               #92;                  \/\/ String \"non-positive\"\n+    35:    invokespecial     #88;                  \/\/ Method java\/lang\/RuntimeException.\"<init>\":\"(Ljava\/lang\/String;)V\"\n+    38:    athrow;\n+           endtry            T0;\n+    39:    stack_frame_type  early_larval;         \/\/ frame_type 246\n+             unset_fields    #11,                  \/\/ fldS:\"Ljava\/lang\/String;\",\n+                             #16,                  \/\/ fldFS:\"Ljava\/lang\/String;\",\n+                             #26;                  \/\/ out:\"Ljava\/io\/PrintStream;\";\n+             frame_type      same;                 \/\/ frame_type 13\n+           goto              53;\n+           catch             T0 #84;               \/\/ java\/lang\/RuntimeException\n+    42:    stack_frame_type  early_larval;         \/\/ frame_type 246\n+             unset_fields    #11,                  \/\/ fldS:\"Ljava\/lang\/String;\",\n+                             #16;                  \/\/ fldFS:\"Ljava\/lang\/String;\";\n+             frame_type      stack1;               \/\/ frame_type 66\n+               stack_map     #84;                  \/\/ class java\/lang\/RuntimeException;\n+           astore            5;\n+    44:    aload             5;\n+    46:    astore_3;\n+    47:    iconst_0;\n+    48:    istore            4;\n+    50:    iload_1;\n+    51:    ineg;\n+    52:    istore_2;\n+    53:    stack_frame_type  early_larval;         \/\/ frame_type 246\n+             unset_fields    #11;                  \/\/ fldS:\"Ljava\/lang\/String;\";\n+             frame_type      same;                 \/\/ frame_type 10\n+           iload             4;\n+    55:    ifeq              62;\n+    58:    iload_2;\n+    59:    iconst_1;\n+    60:    iadd;\n+    61:    ireturn;\n+    62:    stack_frame_type  early_larval;         \/\/ frame_type 246\n+             unset_fields;\n+             frame_type      same;                 \/\/ frame_type 8\n+           getstatic         #24;                  \/\/ Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\"\n+    65:    ldc               #94;                  \/\/ String \"Computing result\"\n+    67:    invokevirtual     #32;                  \/\/ Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\"\n+    70:    iload_2;\n+    71:    ireturn;\n+  }\n+\n+  public static Method #123:#124                   \/\/ main:\"([Ljava\/lang\/String;)V\" \n+    stack 3  locals 3\n+  {\n+     0:    new               #10;                  \/\/ class StackMapData\n+     3:    dup;\n+     4:    invokespecial     #96;                  \/\/ Method \"<init>\":\"()V\"\n+     7:    astore_1;\n+     8:    iconst_0;\n+     9:    istore_2;\n+    10:    stack_frame_type  early_larval;         \/\/ frame_type 246\n+             unset_fields;\n+             frame_type      append;               \/\/ frame_type 253\n+               locals_map    #10, 1;               \/\/ class StackMapData, int;\n+           iload_2;\n+    11:    bipush            6;\n+    13:    if_icmpgt         27;\n+    16:    aload_1;\n+    17:    iload_2;\n+    18:    invokevirtual     #97;                  \/\/ Method generateFrames:\"(I)V\"\n+    21:    iinc              2, 1;\n+    24:    goto              10;\n+    27:    stack_frame_type  chop1;                \/\/ frame_type 250\n+           aload_1;\n+    28:    iconst_0;\n+    29:    ldc               #101;                 \/\/ String \"test\"\n+    31:    invokevirtual     #103;                 \/\/ Method complexMethod:\"(ILjava\/lang\/Object;)I\"\n+    34:    pop;\n+    35:    aload_1;\n+    36:    bipush            23;\n+    38:    invokevirtual     #107;                 \/\/ Method generateFullFrame:\"(I)I\"\n+    41:    pop;\n+    42:    return;\n+  }\n+\n+  static Method #125:#6                            \/\/ \"<clinit>\":\"()V\" \n+    stack 2  locals 0\n+  {\n+     0:    lconst_1;\n+     1:    putstatic         #111;                 \/\/ Field fldL:\"J\"\n+     4:    return;\n+  }\n+\n+  InnerClass                 public static final #148 = #144 of #146;  \/\/ Lookup = class java\/lang\/invoke\/MethodHandles$Lookup of class java\/lang\/invoke\/MethodHandles\n+\n+  BootstrapMethod            #137;                 \/\/ REF_invokeStatic:java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                                                   \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";\n+                             {\n+                                 #127              \/\/ String \"item_frame\\u0001\"\n+                             }\n+\n+  BootstrapMethod            #137;                 \/\/ REF_invokeStatic:java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                                                   \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";\n+                             {\n+                                 #129              \/\/ String \"item_frame_\\u0001\"\n+                             }\n+\n+  BootstrapMethod            #137;                 \/\/ REF_invokeStatic:java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                                                   \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";\n+                             {\n+                                 #131              \/\/ String \"_frame: \\u0001\"\n+                             }\n+\n+  BootstrapMethod            #137;                 \/\/ REF_invokeStatic:java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                                                   \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";\n+                             {\n+                                 #133              \/\/ String \"Before chop_frame: \\u0001\"\n+                             }\n+\n+  BootstrapMethod            #137;                 \/\/ REF_invokeStatic:java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                                                   \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";\n+                             {\n+                                 #135              \/\/ String \"\\u0001: \\u0001\\u0001\"\n+                             }\n+} \/\/ end Class org\/openjdk\/asmtools\/attribute\/StackMapTable\/data\/StackMapData\n","filename":"test\/resources\/org\/openjdk\/asmtools\/attribute\/StackMapTable\/StackMapData.g.jasm","additions":759,"deletions":0,"binary":false,"changes":759,"status":"added"},{"patch":"@@ -0,0 +1,520 @@\n+class org\/openjdk\/asmtools\/attribute\/StackMapTable\/data\/StackMapData {\n+  0xCAFEBABE;\n+  0;                                       \/\/ minor version\n+  69;                                      \/\/ version\n+  [149] {                                  \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Method #2 #3;                          \/\/ #1     at 0x0A\n+    Class #4;                              \/\/ #2     at 0x0F\n+    NameAndType #5 #6;                     \/\/ #3     at 0x12\n+    Utf8 \"java\/lang\/Object\";               \/\/ #4     at 0x17\n+    Utf8 \"<init>\";                         \/\/ #5     at 0x2A\n+    Utf8 \"()V\";                            \/\/ #6     at 0x33\n+    String #8;                             \/\/ #7     at 0x39\n+    Utf8 \"string\";                         \/\/ #8     at 0x3C\n+    Field #10 #11;                         \/\/ #9     at 0x45\n+    Class #12;                             \/\/ #10     at 0x4A\n+    NameAndType #13 #14;                   \/\/ #11     at 0x4D\n+    Utf8 \"org\/openjdk\/asmtools\/attribute\/StackMapTable\/data\/StackMapData\";  \/\/ #12     at 0x52\n+    Utf8 \"fldS\";                           \/\/ #13     at 0x93\n+    Utf8 \"Ljava\/lang\/String;\";             \/\/ #14     at 0x9A\n+    Field #10 #16;                         \/\/ #15     at 0xAF\n+    NameAndType #17 #14;                   \/\/ #16     at 0xB4\n+    Utf8 \"fldFS\";                          \/\/ #17     at 0xB9\n+    Method #2 #19;                         \/\/ #18     at 0xC1\n+    NameAndType #20 #21;                   \/\/ #19     at 0xC6\n+    Utf8 \"toString\";                       \/\/ #20     at 0xCB\n+    Utf8 \"()Ljava\/lang\/String;\";           \/\/ #21     at 0xD6\n+    Class #23;                             \/\/ #22     at 0xED\n+    Utf8 \"java\/lang\/ArithmeticException\";  \/\/ #23     at 0xF0\n+    Field #25 #26;                         \/\/ #24     at 0x0110\n+    Class #27;                             \/\/ #25     at 0x0115\n+    NameAndType #28 #29;                   \/\/ #26     at 0x0118\n+    Utf8 \"java\/lang\/System\";               \/\/ #27     at 0x011D\n+    Utf8 \"out\";                            \/\/ #28     at 0x0130\n+    Utf8 \"Ljava\/io\/PrintStream;\";          \/\/ #29     at 0x0136\n+    String #31;                            \/\/ #30     at 0x014E\n+    Utf8 \"frame\";                          \/\/ #31     at 0x0151\n+    Method #33 #34;                        \/\/ #32     at 0x0159\n+    Class #35;                             \/\/ #33     at 0x015E\n+    NameAndType #36 #37;                   \/\/ #34     at 0x0161\n+    Utf8 \"java\/io\/PrintStream\";            \/\/ #35     at 0x0166\n+    Utf8 \"println\";                        \/\/ #36     at 0x017C\n+    Utf8 \"(Ljava\/lang\/String;)V\";          \/\/ #37     at 0x0186\n+    Float 0x42C80000;                      \/\/ #38     at 0x019E\n+    Method #40 #41;                        \/\/ #39     at 0x01A3\n+    Class #42;                             \/\/ #40     at 0x01A8\n+    NameAndType #43 #44;                   \/\/ #41     at 0x01AB\n+    Utf8 \"java\/lang\/Math\";                 \/\/ #42     at 0x01B0\n+    Utf8 \"round\";                          \/\/ #43     at 0x01C1\n+    Utf8 \"(F)I\";                           \/\/ #44     at 0x01C9\n+    InvokeDynamic 0s #46;                  \/\/ #45     at 0x01D0\n+    NameAndType #47 #48;                   \/\/ #46     at 0x01D5\n+    Utf8 \"makeConcatWithConstants\";        \/\/ #47     at 0x01DA\n+    Utf8 \"(I)Ljava\/lang\/String;\";          \/\/ #48     at 0x01F4\n+    Float 0x4048F5C3;                      \/\/ #49     at 0x020C\n+    InvokeDynamic 1s #46;                  \/\/ #50     at 0x0211\n+    Float 0x41200000;                      \/\/ #51     at 0x0216\n+    Float 0x42DC0000;                      \/\/ #52     at 0x021B\n+    Double 0x4059000000000000;;            \/\/ #53     at 0x0220\n+    Method #40 #56;                        \/\/ #55     at 0x0229\n+    NameAndType #43 #57;                   \/\/ #56     at 0x022E\n+    Utf8 \"(D)J\";                           \/\/ #57     at 0x0233\n+    InvokeDynamic 2s #59;                  \/\/ #58     at 0x023A\n+    NameAndType #47 #60;                   \/\/ #59     at 0x023F\n+    Utf8 \"(J)Ljava\/lang\/String;\";          \/\/ #60     at 0x0244\n+    Double 0x4058FF5C28F5C28F;;            \/\/ #61     at 0x025C\n+    InvokeDynamic 3s #64;                  \/\/ #63     at 0x0265\n+    NameAndType #47 #65;                   \/\/ #64     at 0x026A\n+    Utf8 \"(D)Ljava\/lang\/String;\";          \/\/ #65     at 0x026F\n+    String #67;                            \/\/ #66     at 0x0287\n+    Utf8 \"chop_frame\";                     \/\/ #67     at 0x028A\n+    String #69;                            \/\/ #68     at 0x0297\n+    Utf8 \"_frame_\";                        \/\/ #69     at 0x029A\n+    Method #33 #71;                        \/\/ #70     at 0x02A4\n+    NameAndType #36 #72;                   \/\/ #71     at 0x02A9\n+    Utf8 \"(D)V\";                           \/\/ #72     at 0x02AE\n+    String #74;                            \/\/ #73     at 0x02B5\n+    Utf8 \"n_frame\";                        \/\/ #74     at 0x02B8\n+    InvokeDynamic 4s #76;                  \/\/ #75     at 0x02C2\n+    NameAndType #47 #77;                   \/\/ #76     at 0x02C7\n+    Utf8 \"(Ljava\/lang\/String;CI)Ljava\/lang\/String;\";  \/\/ #77     at 0x02CC\n+    Class #79;                             \/\/ #78     at 0x02F7\n+    Utf8 \"java\/lang\/String\";               \/\/ #79     at 0x02FA\n+    Method #2 #81;                         \/\/ #80     at 0x030D\n+    NameAndType #82 #83;                   \/\/ #81     at 0x0312\n+    Utf8 \"hashCode\";                       \/\/ #82     at 0x0317\n+    Utf8 \"()I\";                            \/\/ #83     at 0x0322\n+    Class #85;                             \/\/ #84     at 0x0328\n+    Utf8 \"java\/lang\/RuntimeException\";     \/\/ #85     at 0x032B\n+    String #87;                            \/\/ #86     at 0x0348\n+    Utf8 \"Test exception\";                 \/\/ #87     at 0x034B\n+    Method #84 #89;                        \/\/ #88     at 0x035C\n+    NameAndType #5 #37;                    \/\/ #89     at 0x0361\n+    String #91;                            \/\/ #90     at 0x0366\n+    Utf8 \"positive\";                       \/\/ #91     at 0x0369\n+    String #93;                            \/\/ #92     at 0x0374\n+    Utf8 \"non-positive\";                   \/\/ #93     at 0x0377\n+    String #95;                            \/\/ #94     at 0x0386\n+    Utf8 \"Computing result\";               \/\/ #95     at 0x0389\n+    Method #10 #3;                         \/\/ #96     at 0x039C\n+    Method #10 #98;                        \/\/ #97     at 0x03A1\n+    NameAndType #99 #100;                  \/\/ #98     at 0x03A6\n+    Utf8 \"generateFrames\";                 \/\/ #99     at 0x03AB\n+    Utf8 \"(I)V\";                           \/\/ #100     at 0x03BC\n+    String #102;                           \/\/ #101     at 0x03C3\n+    Utf8 \"test\";                           \/\/ #102     at 0x03C6\n+    Method #10 #104;                       \/\/ #103     at 0x03CD\n+    NameAndType #105 #106;                 \/\/ #104     at 0x03D2\n+    Utf8 \"complexMethod\";                  \/\/ #105     at 0x03D7\n+    Utf8 \"(ILjava\/lang\/Object;)I\";         \/\/ #106     at 0x03E7\n+    Method #10 #108;                       \/\/ #107     at 0x0400\n+    NameAndType #109 #110;                 \/\/ #108     at 0x0405\n+    Utf8 \"generateFullFrame\";              \/\/ #109     at 0x040A\n+    Utf8 \"(I)I\";                           \/\/ #110     at 0x041E\n+    Field #10 #112;                        \/\/ #111     at 0x0425\n+    NameAndType #113 #114;                 \/\/ #112     at 0x042A\n+    Utf8 \"fldL\";                           \/\/ #113     at 0x042F\n+    Utf8 \"J\";                              \/\/ #114     at 0x0436\n+    Utf8 \"fldI\";                           \/\/ #115     at 0x043A\n+    Utf8 \"I\";                              \/\/ #116     at 0x0441\n+    Utf8 \"ConstantValue\";                  \/\/ #117     at 0x0445\n+    Integer 0x00000000;                    \/\/ #118     at 0x0455\n+    Utf8 \"Code\";                           \/\/ #119     at 0x045A\n+    Utf8 \"StackMapTable\";                  \/\/ #120     at 0x0461\n+    Class #122;                            \/\/ #121     at 0x0471\n+    Utf8 \"java\/lang\/Throwable\";            \/\/ #122     at 0x0474\n+    Utf8 \"main\";                           \/\/ #123     at 0x048A\n+    Utf8 \"([Ljava\/lang\/String;)V\";         \/\/ #124     at 0x0491\n+    Utf8 \"<clinit>\";                       \/\/ #125     at 0x04AA\n+    Utf8 \"BootstrapMethods\";               \/\/ #126     at 0x04B5\n+    String #128;                           \/\/ #127     at 0x04C8\n+    Utf8 \"item_frame\\u0001\";               \/\/ #128     at 0x04CB\n+    String #130;                           \/\/ #129     at 0x04D9\n+    Utf8 \"item_frame_\\u0001\";              \/\/ #130     at 0x04DC\n+    String #132;                           \/\/ #131     at 0x04EB\n+    Utf8 \"_frame: \\u0001\";                 \/\/ #132     at 0x04EE\n+    String #134;                           \/\/ #133     at 0x04FA\n+    Utf8 \"Before chop_frame: \\u0001\";      \/\/ #134     at 0x04FD\n+    String #136;                           \/\/ #135     at 0x0514\n+    Utf8 \"\\u0001: \\u0001\\u0001\";           \/\/ #136     at 0x0517\n+    MethodHandle 6b #138;                  \/\/ #137     at 0x051F\n+    Method #139 #140;                      \/\/ #138     at 0x0523\n+    Class #141;                            \/\/ #139     at 0x0528\n+    NameAndType #47 #142;                  \/\/ #140     at 0x052B\n+    Utf8 \"java\/lang\/invoke\/StringConcatFactory\";  \/\/ #141     at 0x0530\n+    Utf8 \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";  \/\/ #142     at 0x0557\n+    Utf8 \"InnerClasses\";                   \/\/ #143     at 0x05F2\n+    Class #145;                            \/\/ #144     at 0x0601\n+    Utf8 \"java\/lang\/invoke\/MethodHandles$Lookup\";  \/\/ #145     at 0x0604\n+    Class #147;                            \/\/ #146     at 0x062C\n+    Utf8 \"java\/lang\/invoke\/MethodHandles\";  \/\/ #147     at 0x062F\n+    Utf8 \"Lookup\";                         \/\/ #148     at 0x0650\n+  }                                        \/\/ end of Constant Pool\n+\n+  0x0021;                                  \/\/ access [ ACC_PUBLIC, ACC_SUPER  ]\n+  #10;                                     \/\/ this_cpx\n+  #2;                                      \/\/ super_cpx\n+\n+  [0] {                                    \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [4] {                                    \/\/ Fields\n+    {                                      \/\/ field at 0x0663\n+      0x0018;                              \/\/ access\n+      #115;                                \/\/ name_index       : fldI\n+      #116;                                \/\/ descriptor_index : I\n+      [1] {                                \/\/ Attributes\n+        Attr(#117, 2) {                    \/\/ ConstantValue at 0x066B\n+          #118;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ field at 0x0673\n+      0x0008;                              \/\/ access\n+      #113;                                \/\/ name_index       : fldL\n+      #114;                                \/\/ descriptor_index : J\n+      [0] {                                \/\/ Attributes\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ field at 0x067B\n+      0x0004;                              \/\/ access\n+      #13;                                 \/\/ name_index       : fldS\n+      #14;                                 \/\/ descriptor_index : Ljava\/lang\/String;\n+      [0] {                                \/\/ Attributes\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ field at 0x0683\n+      0x0011;                              \/\/ access\n+      #17;                                 \/\/ name_index       : fldFS\n+      #14;                                 \/\/ descriptor_index : Ljava\/lang\/String;\n+      [1] {                                \/\/ Attributes\n+        Attr(#117, 2) {                    \/\/ ConstantValue at 0x068B\n+          #7;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [6] {                                    \/\/ Methods\n+    {                                      \/\/ method at 0x0695\n+      0x0001;                              \/\/ access\n+      #5;                                  \/\/ name_index       : <init>\n+      #6;                                  \/\/ descriptor_index : ()V\n+      [1] {                                \/\/ Attributes\n+        Attr(#119, 29) {                   \/\/ Code at 0x069D\n+          2;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[17]{\n+            0x2A 0xB7 0x00 0x01 0x2A 0x12 0x07 0xB5 0x00 0x09 0x2A 0x12;\n+            0x07 0xB5 0x00 0x0F 0xB1;\n+          }\n+          [0] {                            \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [0] {                            \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method at 0x06C0\n+      0x0001;                              \/\/ access\n+      #99;                                 \/\/ name_index       : generateFrames\n+      #100;                                \/\/ descriptor_index : (I)V\n+      [1] {                                \/\/ Attributes\n+        Attr(#119, 724) {                  \/\/ Code at 0x06C8\n+          5;                               \/\/ max_stack\n+          10;                              \/\/ max_locals\n+          Bytes[513]{\n+            0x03 0x3D 0x01 0x4E 0x04 0x1C 0x6C 0x3D 0x2D 0xB6 0x00 0x12;\n+            0x57 0xA7 0x00 0x1F 0x3A 0x04 0xBB 0x00 0x02 0x59 0xB7 0x00;\n+            0x01 0x4E 0x2D 0xB6 0x00 0x12 0x57 0xA7 0x00 0x0D 0x3A 0x05;\n+            0x2D 0xB6 0x00 0x12 0x57 0x19 0x05 0xBF 0x1C 0x9A 0x00 0x05;\n+            0x01 0x4E 0x1C 0xAB 0x00 0x00 0x00 0x24 0x00 0x00 0x00 0x02;\n+            0x00 0x00 0x00 0x01 0x00 0x00 0x00 0x19 0x00 0x00 0x00 0x02;\n+            0x00 0x00 0x00 0x24 0xBB 0x00 0x02 0x59 0xB7 0x00 0x01 0x4E;\n+            0xA7 0x00 0x03 0x1B 0x9A 0x00 0x0B 0xB2 0x00 0x18 0x12 0x1E;\n+            0xB6 0x00 0x20 0x1B 0x04 0xA0 0x00 0x1A 0x10 0x2A 0x36 0x04;\n+            0xB2 0x00 0x18 0x15 0x04 0x12 0x26 0xB8 0x00 0x27 0x68 0xBA;\n+            0x00 0x2D 0x00 0x00 0xB6 0x00 0x20 0x1B 0x05 0xA0 0x00 0x37;\n+            0x03 0x36 0x04 0x03 0x36 0x05 0x15 0x05 0x11 0x0B 0xB8 0xA2;\n+            0x00 0x1C 0x12 0x31 0x38 0x06 0x15 0x04 0x17 0x06 0x12 0x26;\n+            0xB8 0x00 0x27 0x86 0x6A 0x8B 0x60 0x36 0x04 0x84 0x05 0x01;\n+            0xA7 0xFF 0xE2 0xB2 0x00 0x18 0x15 0x04 0xBA 0x00 0x32 0x00;\n+            0x00 0xB6 0x00 0x20 0x12 0x33 0xB8 0x00 0x27 0x36 0x04 0x1B;\n+            0x06 0xA0 0x00 0x27 0x12 0x34 0xB8 0x00 0x27 0x36 0x05 0x14;\n+            0x00 0x35 0xB8 0x00 0x37 0x37 0x06 0xB2 0x00 0x18 0x15 0x05;\n+            0x85 0x16 0x06 0x61 0x15 0x04 0x85 0x69 0xBA 0x00 0x3A 0x00;\n+            0x00 0xB6 0x00 0x20 0x1B 0x07 0xA0 0x00 0x27 0x10 0x32 0x15;\n+            0x04 0x68 0x36 0x05 0x14 0x00 0x3D 0x15 0x04 0x87 0x6B 0x39;\n+            0x06 0xB2 0x00 0x18 0x15 0x05 0x87 0x18 0x06 0x63 0xBA 0x00;\n+            0x3F 0x00 0x00 0xB6 0x00 0x20 0xA7 0x00 0x0B 0xB2 0x00 0x18;\n+            0x12 0x42 0xB6 0x00 0x20 0x1B 0x08 0xA0 0x00 0x60 0x03 0x36;\n+            0x05 0x03 0x36 0x06 0x15 0x06 0x11 0x09 0xC4 0xA2 0x00 0x1D;\n+            0x12 0x31 0x38 0x07 0x15 0x05 0x17 0x07 0x15 0x06 0x86 0xB8;\n+            0x00 0x27 0x86 0x6A 0x8B 0x60 0x36 0x05 0x84 0x06 0x01 0xA7;\n+            0xFF 0xE1 0x15 0x05 0x10 0x64 0xA4 0x00 0x0E 0xB2 0x00 0x18;\n+            0x12 0x44 0xB6 0x00 0x20 0xA7 0x00 0x26 0x15 0x05 0x10 0x32;\n+            0xA2 0x00 0x1F 0x10 0x32 0x15 0x04 0x68 0x36 0x06 0x14 0x00;\n+            0x3D 0x15 0x04 0x87 0x6B 0x39 0x07 0xB2 0x00 0x18 0x15 0x06;\n+            0x87 0x18 0x07 0x63 0xB6 0x00 0x46 0x1B 0x10 0x06 0xA0 0x00;\n+            0x20 0x12 0x49 0x3A 0x05 0x10 0x46 0x36 0x06 0x10 0x64 0x36;\n+            0x07 0xB2 0x00 0x18 0x19 0x05 0x15 0x06 0x15 0x07 0xBA 0x00;\n+            0x4B 0x00 0x00 0xB6 0x00 0x20 0x03 0x36 0x05 0x01 0x3A 0x06;\n+            0x04 0x15 0x05 0x6C 0x36 0x05 0x19 0x06 0xB6 0x00 0x12 0x57;\n+            0xA7 0x00 0x22 0x3A 0x07 0xBB 0x00 0x02 0x59 0xB7 0x00 0x01;\n+            0x3A 0x06 0x19 0x06 0xB6 0x00 0x12 0x57 0xA7 0x00 0x0E 0x3A;\n+            0x09 0x19 0x06 0xB6 0x00 0x12 0x57 0x19 0x09 0xBF 0x15 0x05;\n+            0x9A 0x00 0x06 0x01 0x3A 0x06 0x1C 0xAB 0x00 0x00 0x00 0x25;\n+            0x00 0x00 0x00 0x02 0x00 0x00 0x00 0x01 0x00 0x00 0x00 0x19;\n+            0x00 0x00 0x00 0x02 0x00 0x00 0x00 0x25 0xBB 0x00 0x02 0x59;\n+            0xB7 0x00 0x01 0x3A 0x06 0xA7 0x00 0x03 0xB1;\n+          }\n+          [8] {                            \/\/ Traps\n+               4    8   16  22;            \/\/ at 0x08E1\n+               4    8   34   0;            \/\/ at 0x08E9\n+              16   26   34   0;            \/\/ at 0x08F1\n+              34   36   34   0;            \/\/ at 0x08F9\n+             420  426  435  22;            \/\/ at 0x0901\n+             420  426  455   0;            \/\/ at 0x0909\n+             435  446  455   0;            \/\/ at 0x0911\n+             455  457  455   0;            \/\/ at 0x0919\n+          }                                \/\/ end of Traps\n+          [1] {                            \/\/ Attributes\n+            Attr(#120, 129) {              \/\/ StackMapTable at 0x091B\n+              [25] {                       \/\/ \n+                246b, [2]{#11; #16}, {     \/\/ early_larval_frame\n+                  255b, 16, [4]{7b,#10; 1b; 1b; 7b,#2}, [1]{7b,#22};  \/\/ full_frame\n+                };\n+                246b, [2]{#11; #16}, {     \/\/ early_larval_frame\n+                  81b, [1]z{7b,#121};      \/\/ same_locals_1_stack_item_frame\n+                };\n+                246b, [2]{#26; #16}, {     \/\/ early_larval_frame\n+                  9b;                      \/\/ same_frame\n+                };\n+                5b;                        \/\/ same_frame\n+                25b;                       \/\/ same_frame\n+                10b;                       \/\/ same_frame\n+                11b;                       \/\/ same_frame\n+                27b;                       \/\/ same_frame\n+                246b, [0]{}, {             \/\/ early_larval_frame\n+                  253b, 10, [2]z{1b; 1b};  \/\/ append_frame 2\n+                };\n+                250b, 32;                  \/\/ chop_frame 1\n+                250b, 12;                  \/\/ chop_frame 1\n+                252b, 47, [1]z{1b};        \/\/ append_frame 1\n+                40b;                       \/\/ same_frame\n+                7b;                        \/\/ same_frame\n+                253b, 10, [2]z{1b; 1b};    \/\/ append_frame 2\n+                246b, [0]{}, {             \/\/ early_larval_frame\n+                  250b, 33;                \/\/ chop_frame 1\n+                };\n+                17b;                       \/\/ same_frame\n+                250b, 34;                  \/\/ chop_frame 1\n+                34b;                       \/\/ same_frame\n+                255b, 20, [7]{7b,#10; 1b; 1b; 7b,#2; 1b; 1b; 7b,#2}, [1]{7b,#22};  \/\/ full_frame\n+                83b, [1]z{7b,#121};        \/\/ same_locals_1_stack_item_frame\n+                10b;                       \/\/ same_frame\n+                7b;                        \/\/ same_frame\n+                25b;                       \/\/ same_frame\n+                246b, [4]{#11; #16; #26; #112}, {  \/\/ early_larval_frame\n+                  11b;                     \/\/ same_frame\n+                };\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method at 0x09A2\n+      0x0001;                              \/\/ access\n+      #105;                                \/\/ name_index       : complexMethod\n+      #106;                                \/\/ descriptor_index : (ILjava\/lang\/Object;)I\n+      [1] {                                \/\/ Attributes\n+        Attr(#119, 204) {                  \/\/ Code at 0x09AA\n+          3;                               \/\/ max_stack\n+          7;                               \/\/ max_locals\n+          Bytes[123]{\n+            0x03 0x3E 0x04 0x36 0x04 0x01 0x3A 0x05 0x1B 0x9E 0x00 0x26;\n+            0x1B 0x04 0x60 0x3E 0x2C 0xC1 0x00 0x4E 0x99 0x00 0x13 0x2C;\n+            0xC0 0x00 0x4E 0x3A 0x05 0x19 0x05 0xB6 0x00 0x50 0x36 0x04;\n+            0x15 0x04 0xAC 0x1D 0x05 0x68 0x36 0x04 0xA7 0x00 0x3C 0x1B;\n+            0x02 0xA0 0x00 0x15 0x1B 0x74 0x3E 0x1D 0x06 0x60 0x36 0x04;\n+            0xBB 0x00 0x54 0x59 0x12 0x56 0xB7 0x00 0x58 0xBF 0x03 0x36;\n+            0x06 0x15 0x06 0x05 0xA2 0x00 0x1C 0x1D 0x15 0x06 0x60 0x3E;\n+            0x1D 0x04 0xA4 0x00 0x0C 0x1D 0x15 0x06 0x64 0x36 0x04 0xA7;\n+            0x00 0x09 0x84 0x06 0x01 0xA7 0xFF 0xE4 0xA7 0x00 0x0E 0x3A;\n+            0x06 0x19 0x06 0x3A 0x05 0x1D 0x08 0x60 0x36 0x04 0x1D 0x15;\n+            0x04 0x60 0xAC;\n+          }\n+          [2] {                            \/\/ Traps\n+               8   38  107  84;            \/\/ at 0x0A3D\n+              39  104  107  84;            \/\/ at 0x0A45\n+          }                                \/\/ end of Traps\n+          [1] {                            \/\/ Attributes\n+            Attr(#120, 47) {               \/\/ StackMapTable at 0x0A47\n+              [8] {                        \/\/ \n+                254b, 39, [3]z{1b; 1b; 7b,#2};  \/\/ append_frame 3\n+                7b;                        \/\/ same_frame\n+                22b;                       \/\/ same_frame\n+                246b, [4]{#11; #16; #26; #112}, {  \/\/ early_larval_frame\n+                  252b, 2, [1]z{1b};       \/\/ append_frame 1\n+                };\n+                24b;                       \/\/ same_frame\n+                250b, 5;                   \/\/ chop_frame 1\n+                246b, [4]{#11; #16; #26; #112}, {  \/\/ early_larval_frame\n+                  66b, [1]z{7b,#84};       \/\/ same_locals_1_stack_item_frame\n+                };\n+                10b;                       \/\/ same_frame\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method at 0x0A7C\n+      0x0001;                              \/\/ access\n+      #109;                                \/\/ name_index       : generateFullFrame\n+      #110;                                \/\/ descriptor_index : (I)I\n+      [1] {                                \/\/ Attributes\n+        Attr(#119, 150) {                  \/\/ Code at 0x0A84\n+          3;                               \/\/ max_stack\n+          6;                               \/\/ max_locals\n+          Bytes[72]{\n+            0x03 0x3D 0x01 0x4E 0x03 0x36 0x04 0x1B 0x9E 0x00 0x11 0x12;\n+            0x5A 0x4E 0x04 0x36 0x04 0x2D 0xB6 0x00 0x50 0x3D 0xA7 0x00;\n+            0x11 0x1B 0x05 0x68 0x3D 0xBB 0x00 0x54 0x59 0x12 0x5C 0xB7;\n+            0x00 0x58 0xBF 0xA7 0x00 0x0E 0x3A 0x05 0x19 0x05 0x4E 0x03;\n+            0x36 0x04 0x1B 0x74 0x3D 0x15 0x04 0x99 0x00 0x07 0x1C 0x04;\n+            0x60 0xAC 0xB2 0x00 0x18 0x12 0x5E 0xB6 0x00 0x20 0x1C 0xAC;\n+          }\n+          [1] {                            \/\/ Traps\n+               7   39   42  84;            \/\/ at 0x0AE4\n+          }                                \/\/ end of Traps\n+          [1] {                            \/\/ Attributes\n+            Attr(#120, 52) {               \/\/ StackMapTable at 0x0AE6\n+              [5] {                        \/\/ \n+                246b, [4]{#11; #16; #26; #112}, {  \/\/ early_larval_frame\n+                  254b, 25, [3]z{1b; 7b,#2; 1b};  \/\/ append_frame 3\n+                };\n+                246b, [3]{#11; #16; #26}, {  \/\/ early_larval_frame\n+                  13b;                     \/\/ same_frame\n+                };\n+                246b, [2]{#11; #16}, {     \/\/ early_larval_frame\n+                  66b, [1]z{7b,#84};       \/\/ same_locals_1_stack_item_frame\n+                };\n+                246b, [1]{#11}, {          \/\/ early_larval_frame\n+                  10b;                     \/\/ same_frame\n+                };\n+                246b, [0]{}, {             \/\/ early_larval_frame\n+                  8b;                      \/\/ same_frame\n+                };\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method at 0x0B20\n+      0x0009;                              \/\/ access\n+      #123;                                \/\/ name_index       : main\n+      #124;                                \/\/ descriptor_index : ([Ljava\/lang\/String;)V\n+      [1] {                                \/\/ Attributes\n+        Attr(#119, 76) {                   \/\/ Code at 0x0B28\n+          3;                               \/\/ max_stack\n+          3;                               \/\/ max_locals\n+          Bytes[43]{\n+            0xBB 0x00 0x0A 0x59 0xB7 0x00 0x60 0x4C 0x03 0x3D 0x1C 0x10;\n+            0x06 0xA3 0x00 0x0E 0x2B 0x1C 0xB6 0x00 0x61 0x84 0x02 0x01;\n+            0xA7 0xFF 0xF2 0x2B 0x03 0x12 0x65 0xB6 0x00 0x67 0x57 0x2B;\n+            0x10 0x17 0xB6 0x00 0x6B 0x57 0xB1;\n+          }\n+          [0] {                            \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [1] {                            \/\/ Attributes\n+            Attr(#120, 15) {               \/\/ StackMapTable at 0x0B65\n+              [2] {                        \/\/ \n+                246b, [0]{}, {             \/\/ early_larval_frame\n+                  253b, 10, [2]z{7b,#10; 1b};  \/\/ append_frame 2\n+                };\n+                250b, 16;                  \/\/ chop_frame 1\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method at 0x0B7A\n+      0x0008;                              \/\/ access\n+      #125;                                \/\/ name_index       : <clinit>\n+      #6;                                  \/\/ descriptor_index : ()V\n+      [1] {                                \/\/ Attributes\n+        Attr(#119, 17) {                   \/\/ Code at 0x0B82\n+          2;                               \/\/ max_stack\n+          0;                               \/\/ max_locals\n+          Bytes[5]{\n+            0x0A 0xB3 0x00 0x6F 0xB1;\n+          }\n+          [0] {                            \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [0] {                            \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [2] {                                    \/\/ Attributes\n+    Attr(#126, 32) {                       \/\/ BootstrapMethods at 0x0B9B\n+      [5] {                                \/\/ bootstrap_methods\n+        {                                  \/\/ bootstrap_method\n+          #137;                            \/\/ bootstrap_method_ref\n+          [1] {                            \/\/ bootstrap_arguments\n+            #127;                          \/\/ at 0x0BA9\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #137;                            \/\/ bootstrap_method_ref\n+          [1] {                            \/\/ bootstrap_arguments\n+            #129;                          \/\/ at 0x0BAF\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #137;                            \/\/ bootstrap_method_ref\n+          [1] {                            \/\/ bootstrap_arguments\n+            #131;                          \/\/ at 0x0BB5\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #137;                            \/\/ bootstrap_method_ref\n+          [1] {                            \/\/ bootstrap_arguments\n+            #133;                          \/\/ at 0x0BBB\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #137;                            \/\/ bootstrap_method_ref\n+          [1] {                            \/\/ bootstrap_arguments\n+            #135;                          \/\/ at 0x0BC1\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+      }\n+    }                                      \/\/ end of BootstrapMethods\n+    ;\n+    Attr(#143, 10) {                       \/\/ InnerClasses at 0x0BC1\n+      [1] {                                \/\/ classes\n+         #144  #146  #148  25;             \/\/ access [ ACC_PUBLIC, ACC_STATIC, ACC_FINAL  ]\n+      }\n+    }                                      \/\/ end of InnerClasses\n+  }                                        \/\/ end of Attributes\n+}                                          \/\/ end of class org\/openjdk\/asmtools\/attribute\/StackMapTable\/data\/StackMapData\n","filename":"test\/resources\/org\/openjdk\/asmtools\/attribute\/StackMapTable\/StackMapData.g.jcod","additions":520,"deletions":0,"binary":false,"changes":520,"status":"added"},{"patch":"@@ -0,0 +1,791 @@\n+package org\/openjdk\/asmtools\/attribute\/StackMapTable\/data;\n+\n+public super class #10 \/* StackMapData *\/ version 69:0\n+{\n+  const #1    = Methodref     #2.#3;               \/\/ java\/lang\/Object.\"<init>\":\"()V\"\n+  const #2    = Class         #4;                  \/\/ java\/lang\/Object\n+  const #3    = NameAndType   #5:#6;               \/\/ \"<init>\":\"()V\"\n+  const #4    = Utf8          \"java\/lang\/Object\";\n+  const #5    = Utf8          \"<init>\";\n+  const #6    = Utf8          \"()V\";\n+  const #7    = String        #8;                  \/\/ \"string\"\n+  const #8    = Utf8          \"string\";\n+  const #9    = Fieldref      #10.#11;             \/\/ StackMapData.fldS:\"Ljava\/lang\/String;\"\n+  const #10   = Class         #12;                 \/\/ StackMapData\n+  const #11   = NameAndType   #13:#14;             \/\/ fldS:\"Ljava\/lang\/String;\"\n+  const #12   = Utf8          \"org\/openjdk\/asmtools\/attribute\/StackMapTable\/data\/StackMapData\";\n+  const #13   = Utf8          \"fldS\";\n+  const #14   = Utf8          \"Ljava\/lang\/String;\";\n+  const #15   = Fieldref      #10.#16;             \/\/ StackMapData.fldFS:\"Ljava\/lang\/String;\"\n+  const #16   = NameAndType   #17:#14;             \/\/ fldFS:\"Ljava\/lang\/String;\"\n+  const #17   = Utf8          \"fldFS\";\n+  const #18   = Methodref     #2.#19;              \/\/ java\/lang\/Object.toString:\"()Ljava\/lang\/String;\"\n+  const #19   = NameAndType   #20:#21;             \/\/ toString:\"()Ljava\/lang\/String;\"\n+  const #20   = Utf8          \"toString\";\n+  const #21   = Utf8          \"()Ljava\/lang\/String;\";\n+  const #22   = Class         #23;                 \/\/ java\/lang\/ArithmeticException\n+  const #23   = Utf8          \"java\/lang\/ArithmeticException\";\n+  const #24   = Fieldref      #25.#26;             \/\/ java\/lang\/System.out:\"Ljava\/io\/PrintStream;\"\n+  const #25   = Class         #27;                 \/\/ java\/lang\/System\n+  const #26   = NameAndType   #28:#29;             \/\/ out:\"Ljava\/io\/PrintStream;\"\n+  const #27   = Utf8          \"java\/lang\/System\";\n+  const #28   = Utf8          \"out\";\n+  const #29   = Utf8          \"Ljava\/io\/PrintStream;\";\n+  const #30   = String        #31;                 \/\/ \"frame\"\n+  const #31   = Utf8          \"frame\";\n+  const #32   = Methodref     #33.#34;             \/\/ java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\"\n+  const #33   = Class         #35;                 \/\/ java\/io\/PrintStream\n+  const #34   = NameAndType   #36:#37;             \/\/ println:\"(Ljava\/lang\/String;)V\"\n+  const #35   = Utf8          \"java\/io\/PrintStream\";\n+  const #36   = Utf8          \"println\";\n+  const #37   = Utf8          \"(Ljava\/lang\/String;)V\";\n+  const #38   = Float         100.0f;\n+  const #39   = Methodref     #40.#41;             \/\/ java\/lang\/Math.round:\"(F)I\"\n+  const #40   = Class         #42;                 \/\/ java\/lang\/Math\n+  const #41   = NameAndType   #43:#44;             \/\/ round:\"(F)I\"\n+  const #42   = Utf8          \"java\/lang\/Math\";\n+  const #43   = Utf8          \"round\";\n+  const #44   = Utf8          \"(F)I\";\n+  const #45   = InvokeDynamic 0:#46;               \/\/ #0:makeConcatWithConstants:\"(I)Ljava\/lang\/String;\"\n+  const #46   = NameAndType   #47:#48;             \/\/ makeConcatWithConstants:\"(I)Ljava\/lang\/String;\"\n+  const #47   = Utf8          \"makeConcatWithConstants\";\n+  const #48   = Utf8          \"(I)Ljava\/lang\/String;\";\n+  const #49   = Float         3.14f;\n+  const #50   = InvokeDynamic 1:#46;               \/\/ #1:makeConcatWithConstants:\"(I)Ljava\/lang\/String;\"\n+  const #51   = Float         10.0f;\n+  const #52   = Float         110.0f;\n+  const #53   = Double        100.0d;\n+  const #55   = Methodref     #40.#56;             \/\/ java\/lang\/Math.round:\"(D)J\"\n+  const #56   = NameAndType   #43:#57;             \/\/ round:\"(D)J\"\n+  const #57   = Utf8          \"(D)J\";\n+  const #58   = InvokeDynamic 2:#59;               \/\/ #2:makeConcatWithConstants:\"(J)Ljava\/lang\/String;\"\n+  const #59   = NameAndType   #47:#60;             \/\/ makeConcatWithConstants:\"(J)Ljava\/lang\/String;\"\n+  const #60   = Utf8          \"(J)Ljava\/lang\/String;\";\n+  const #61   = Double        99.99d;\n+  const #63   = InvokeDynamic 3:#64;               \/\/ #3:makeConcatWithConstants:\"(D)Ljava\/lang\/String;\"\n+  const #64   = NameAndType   #47:#65;             \/\/ makeConcatWithConstants:\"(D)Ljava\/lang\/String;\"\n+  const #65   = Utf8          \"(D)Ljava\/lang\/String;\";\n+  const #66   = String        #67;                 \/\/ \"chop_frame\"\n+  const #67   = Utf8          \"chop_frame\";\n+  const #68   = String        #69;                 \/\/ \"_frame_\"\n+  const #69   = Utf8          \"_frame_\";\n+  const #70   = Methodref     #33.#71;             \/\/ java\/io\/PrintStream.println:\"(D)V\"\n+  const #71   = NameAndType   #36:#72;             \/\/ println:\"(D)V\"\n+  const #72   = Utf8          \"(D)V\";\n+  const #73   = String        #74;                 \/\/ \"n_frame\"\n+  const #74   = Utf8          \"n_frame\";\n+  const #75   = InvokeDynamic 4:#76;               \/\/ #4:makeConcatWithConstants:\"(Ljava\/lang\/String;CI)Ljava\/lang\/String;\"\n+  const #76   = NameAndType   #47:#77;             \/\/ makeConcatWithConstants:\"(Ljava\/lang\/String;CI)Ljava\/lang\/String;\"\n+  const #77   = Utf8          \"(Ljava\/lang\/String;CI)Ljava\/lang\/String;\";\n+  const #78   = Class         #79;                 \/\/ java\/lang\/String\n+  const #79   = Utf8          \"java\/lang\/String\";\n+  const #80   = Methodref     #2.#81;              \/\/ java\/lang\/Object.hashCode:\"()I\"\n+  const #81   = NameAndType   #82:#83;             \/\/ hashCode:\"()I\"\n+  const #82   = Utf8          \"hashCode\";\n+  const #83   = Utf8          \"()I\";\n+  const #84   = Class         #85;                 \/\/ java\/lang\/RuntimeException\n+  const #85   = Utf8          \"java\/lang\/RuntimeException\";\n+  const #86   = String        #87;                 \/\/ \"Test exception\"\n+  const #87   = Utf8          \"Test exception\";\n+  const #88   = Methodref     #84.#89;             \/\/ java\/lang\/RuntimeException.\"<init>\":\"(Ljava\/lang\/String;)V\"\n+  const #89   = NameAndType   #5:#37;              \/\/ \"<init>\":\"(Ljava\/lang\/String;)V\"\n+  const #90   = String        #91;                 \/\/ \"positive\"\n+  const #91   = Utf8          \"positive\";\n+  const #92   = String        #93;                 \/\/ \"non-positive\"\n+  const #93   = Utf8          \"non-positive\";\n+  const #94   = String        #95;                 \/\/ \"Computing result\"\n+  const #95   = Utf8          \"Computing result\";\n+  const #96   = Methodref     #10.#3;              \/\/ StackMapData.\"<init>\":\"()V\"\n+  const #97   = Methodref     #10.#98;             \/\/ StackMapData.generateFrames:\"(I)V\"\n+  const #98   = NameAndType   #99:#100;            \/\/ generateFrames:\"(I)V\"\n+  const #99   = Utf8          \"generateFrames\";\n+  const #100  = Utf8          \"(I)V\";\n+  const #101  = String        #102;                \/\/ \"test\"\n+  const #102  = Utf8          \"test\";\n+  const #103  = Methodref     #10.#104;            \/\/ StackMapData.complexMethod:\"(ILjava\/lang\/Object;)I\"\n+  const #104  = NameAndType   #105:#106;           \/\/ complexMethod:\"(ILjava\/lang\/Object;)I\"\n+  const #105  = Utf8          \"complexMethod\";\n+  const #106  = Utf8          \"(ILjava\/lang\/Object;)I\";\n+  const #107  = Methodref     #10.#108;            \/\/ StackMapData.generateFullFrame:\"(I)I\"\n+  const #108  = NameAndType   #109:#110;           \/\/ generateFullFrame:\"(I)I\"\n+  const #109  = Utf8          \"generateFullFrame\";\n+  const #110  = Utf8          \"(I)I\";\n+  const #111  = Fieldref      #10.#112;            \/\/ StackMapData.fldL:\"J\"\n+  const #112  = NameAndType   #113:#114;           \/\/ fldL:\"J\"\n+  const #113  = Utf8          \"fldL\";\n+  const #114  = Utf8          \"J\";\n+  const #115  = Utf8          \"fldI\";\n+  const #116  = Utf8          \"I\";\n+  const #117  = Utf8          \"ConstantValue\";\n+  const #118  = Integer       0;\n+  const #119  = Utf8          \"Code\";\n+  const #120  = Utf8          \"StackMapTable\";\n+  const #121  = Class         #122;                \/\/ java\/lang\/Throwable\n+  const #122  = Utf8          \"java\/lang\/Throwable\";\n+  const #123  = Utf8          \"main\";\n+  const #124  = Utf8          \"([Ljava\/lang\/String;)V\";\n+  const #125  = Utf8          \"<clinit>\";\n+  const #126  = Utf8          \"BootstrapMethods\";\n+  const #127  = String        #128;                \/\/ \"item_frame\\u0001\"\n+  const #128  = Utf8          \"item_frame\\u0001\";\n+  const #129  = String        #130;                \/\/ \"item_frame_\\u0001\"\n+  const #130  = Utf8          \"item_frame_\\u0001\";\n+  const #131  = String        #132;                \/\/ \"_frame: \\u0001\"\n+  const #132  = Utf8          \"_frame: \\u0001\";\n+  const #133  = String        #134;                \/\/ \"Before chop_frame: \\u0001\"\n+  const #134  = Utf8          \"Before chop_frame: \\u0001\";\n+  const #135  = String        #136;                \/\/ \"\\u0001: \\u0001\\u0001\"\n+  const #136  = Utf8          \"\\u0001: \\u0001\\u0001\";\n+  const #137  = MethodHandle  6:#138;              \/\/ REF_invokeStatic:java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\"\n+  const #138  = Methodref     #139.#140;           \/\/ java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\"\n+  const #139  = Class         #141;                \/\/ java\/lang\/invoke\/StringConcatFactory\n+  const #140  = NameAndType   #47:#142;            \/\/ makeConcatWithConstants:\"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\"\n+  const #141  = Utf8          \"java\/lang\/invoke\/StringConcatFactory\";\n+  const #142  = Utf8          \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";\n+  const #143  = Utf8          \"InnerClasses\";\n+  const #144  = Class         #145;                \/\/ java\/lang\/invoke\/MethodHandles$Lookup\n+  const #145  = Utf8          \"java\/lang\/invoke\/MethodHandles$Lookup\";\n+  const #146  = Class         #147;                \/\/ java\/lang\/invoke\/MethodHandles\n+  const #147  = Utf8          \"java\/lang\/invoke\/MethodHandles\";\n+  const #148  = Utf8          \"Lookup\";\n+\n+  static final Field #115:#116 = #118;             \/\/ fldI:I = int 0\n+  static Field #113:#114;                          \/\/ fldL:J\n+  protected Field #13:#14;                         \/\/ fldS:\"Ljava\/lang\/String;\"\n+  public final Field #17:#14 = #7;                 \/\/ fldFS:\"Ljava\/lang\/String;\" = String \"string\"\n+\n+  public Method #5:#6                              \/\/ \"<init>\":\"()V\" \n+    stack 2  locals 1\n+  {\n+     0:    aload_0;\n+     1:    invokespecial     #1;                   \/\/ Method java\/lang\/Object.\"<init>\":\"()V\"\n+     4:    aload_0;\n+     5:    ldc               #7;                   \/\/ String \"string\"\n+     7:    putfield          #9;                   \/\/ Field fldS:\"Ljava\/lang\/String;\"\n+    10:    aload_0;\n+    11:    ldc               #7;                   \/\/ String \"string\"\n+    13:    putfield          #15;                  \/\/ Field fldFS:\"Ljava\/lang\/String;\"\n+    16:    return;\n+  }\n+\n+  public Method #99:#100                           \/\/ generateFrames:\"(I)V\" \n+    stack 5  locals 10\n+  {\n+     0:    iconst_0;\n+     1:    istore_2;\n+     2:    aconst_null;\n+     3:    astore_3;\n+           try               T0, T1;\n+     4:    iconst_1;\n+     5:    iload_2;\n+     6:    idiv;\n+     7:    istore_2;\n+           endtry            T0,T1;\n+     8:    aload_3;\n+     9:    invokevirtual     #18;                  \/\/ Method java\/lang\/Object.toString:\"()Ljava\/lang\/String;\"\n+    12:    pop;\n+    13:    goto              44;\n+           catch             T0 #22;               \/\/ java\/lang\/ArithmeticException\n+           try               T2;\n+    16:    astore            4;\n+    18:    new               #2;                   \/\/ class java\/lang\/Object\n+    21:    dup;\n+    22:    invokespecial     #1;                   \/\/ Method java\/lang\/Object.\"<init>\":\"()V\"\n+    25:    astore_3;\n+           endtry            T2;\n+    26:    aload_3;\n+    27:    invokevirtual     #18;                  \/\/ Method java\/lang\/Object.toString:\"()Ljava\/lang\/String;\"\n+    30:    pop;\n+    31:    goto              44;\n+           catch             T1 #0;                \/\/ any\n+           catch             T2 #0;                \/\/ any\n+           catch             T3 #0;                \/\/ any\n+           try               T3;\n+    34:    astore            5;\n+           endtry            T3;\n+    36:    aload_3;\n+    37:    invokevirtual     #18;                  \/\/ Method java\/lang\/Object.toString:\"()Ljava\/lang\/String;\"\n+    40:    pop;\n+    41:    aload             5;\n+    43:    athrow;\n+    44:    iload_2;\n+    45:    ifne              50;\n+    48:    aconst_null;\n+    49:    astore_3;\n+    50:    iload_2;\n+    51:    lookupswitch      {                     \/\/ 2\n+                1:      76;\n+                2:      87;\n+               default: 87   };\n+    76:    new               #2;                   \/\/ class java\/lang\/Object\n+    79:    dup;\n+    80:    invokespecial     #1;                   \/\/ Method java\/lang\/Object.\"<init>\":\"()V\"\n+    83:    astore_3;\n+    84:    goto              87;\n+    87:    iload_1;\n+    88:    ifne              99;\n+    91:    getstatic         #24;                  \/\/ Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\"\n+    94:    ldc               #30;                  \/\/ String \"frame\"\n+    96:    invokevirtual     #32;                  \/\/ Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\"\n+    99:    iload_1;\n+    100:   iconst_1;\n+    101:   if_icmpne         127;\n+    104:   bipush            42;\n+    106:   istore            4;\n+    108:   getstatic         #24;                  \/\/ Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\"\n+    111:   iload             4;\n+    113:   ldc               #38;                  \/\/ float 100.0f\n+    115:   invokestatic      #39;                  \/\/ Method java\/lang\/Math.round:\"(F)I\"\n+    118:   imul;\n+    119:   invokedynamic     #45;                  \/\/ InvokeDynamic REF_invokeStatic:Method java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                                                   \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\":\n+                                                   \/\/ makeConcatWithConstants:\"(I)Ljava\/lang\/String;\" {\n+                                                   \/\/   String \"item_frame\\u0001\"\n+                                                   \/\/ }\n+    124:   invokevirtual     #32;                  \/\/ Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\"\n+    127:   iload_1;\n+    128:   iconst_2;\n+    129:   if_icmpne         184;\n+    132:   iconst_0;\n+    133:   istore            4;\n+    135:   iconst_0;\n+    136:   istore            5;\n+    138:   iload             5;\n+    140:   sipush            3000;\n+    143:   if_icmpge         171;\n+    146:   ldc               #49;                  \/\/ float 3.14f\n+    148:   fstore            6;\n+    150:   iload             4;\n+    152:   fload             6;\n+    154:   ldc               #38;                  \/\/ float 100.0f\n+    156:   invokestatic      #39;                  \/\/ Method java\/lang\/Math.round:\"(F)I\"\n+    159:   i2f;\n+    160:   fmul;\n+    161:   f2i;\n+    162:   iadd;\n+    163:   istore            4;\n+    165:   iinc              5, 1;\n+    168:   goto              138;\n+    171:   getstatic         #24;                  \/\/ Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\"\n+    174:   iload             4;\n+    176:   invokedynamic     #50;                  \/\/ InvokeDynamic REF_invokeStatic:Method java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                                                   \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\":\n+                                                   \/\/ makeConcatWithConstants:\"(I)Ljava\/lang\/String;\" {\n+                                                   \/\/   String \"item_frame_\\u0001\"\n+                                                   \/\/ }\n+    181:   invokevirtual     #32;                  \/\/ Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\"\n+    184:   ldc               #51;                  \/\/ float 10.0f\n+    186:   invokestatic      #39;                  \/\/ Method java\/lang\/Math.round:\"(F)I\"\n+    189:   istore            4;\n+    191:   iload_1;\n+    192:   iconst_3;\n+    193:   if_icmpne         232;\n+    196:   ldc               #52;                  \/\/ float 110.0f\n+    198:   invokestatic      #39;                  \/\/ Method java\/lang\/Math.round:\"(F)I\"\n+    201:   istore            5;\n+    203:   ldc2_w            #53;                  \/\/ double 100.0d\n+    206:   invokestatic      #55;                  \/\/ Method java\/lang\/Math.round:\"(D)J\"\n+    209:   lstore            6;\n+    211:   getstatic         #24;                  \/\/ Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\"\n+    214:   iload             5;\n+    216:   i2l;\n+    217:   lload             6;\n+    219:   ladd;\n+    220:   iload             4;\n+    222:   i2l;\n+    223:   lmul;\n+    224:   invokedynamic     #58;                  \/\/ InvokeDynamic REF_invokeStatic:Method java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                                                   \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\":\n+                                                   \/\/ makeConcatWithConstants:\"(J)Ljava\/lang\/String;\" {\n+                                                   \/\/   String \"_frame: \\u0001\"\n+                                                   \/\/ }\n+    229:   invokevirtual     #32;                  \/\/ Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\"\n+    232:   iload_1;\n+    233:   iconst_4;\n+    234:   if_icmpne         273;\n+    237:   bipush            50;\n+    239:   iload             4;\n+    241:   imul;\n+    242:   istore            5;\n+    244:   ldc2_w            #61;                  \/\/ double 99.99d\n+    247:   iload             4;\n+    249:   i2d;\n+    250:   dmul;\n+    251:   dstore            6;\n+    253:   getstatic         #24;                  \/\/ Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\"\n+    256:   iload             5;\n+    258:   i2d;\n+    259:   dload             6;\n+    261:   dadd;\n+    262:   invokedynamic     #63;                  \/\/ InvokeDynamic REF_invokeStatic:Method java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                                                   \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\":\n+                                                   \/\/ makeConcatWithConstants:\"(D)Ljava\/lang\/String;\" {\n+                                                   \/\/   String \"Before chop_frame: \\u0001\"\n+                                                   \/\/ }\n+    267:   invokevirtual     #32;                  \/\/ Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\"\n+    270:   goto              281;\n+    273:   getstatic         #24;                  \/\/ Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\"\n+    276:   ldc               #66;                  \/\/ String \"chop_frame\"\n+    278:   invokevirtual     #32;                  \/\/ Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\"\n+    281:   iload_1;\n+    282:   iconst_5;\n+    283:   if_icmpne         379;\n+    286:   iconst_0;\n+    287:   istore            5;\n+    289:   iconst_0;\n+    290:   istore            6;\n+    292:   iload             6;\n+    294:   sipush            2500;\n+    297:   if_icmpge         326;\n+    300:   ldc               #49;                  \/\/ float 3.14f\n+    302:   fstore            7;\n+    304:   iload             5;\n+    306:   fload             7;\n+    308:   iload             6;\n+    310:   i2f;\n+    311:   invokestatic      #39;                  \/\/ Method java\/lang\/Math.round:\"(F)I\"\n+    314:   i2f;\n+    315:   fmul;\n+    316:   f2i;\n+    317:   iadd;\n+    318:   istore            5;\n+    320:   iinc              6, 1;\n+    323:   goto              292;\n+    326:   iload             5;\n+    328:   bipush            100;\n+    330:   if_icmple         344;\n+    333:   getstatic         #24;                  \/\/ Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\"\n+    336:   ldc               #68;                  \/\/ String \"_frame_\"\n+    338:   invokevirtual     #32;                  \/\/ Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\"\n+    341:   goto              379;\n+    344:   iload             5;\n+    346:   bipush            50;\n+    348:   if_icmpge         379;\n+    351:   bipush            50;\n+    353:   iload             4;\n+    355:   imul;\n+    356:   istore            6;\n+    358:   ldc2_w            #61;                  \/\/ double 99.99d\n+    361:   iload             4;\n+    363:   i2d;\n+    364:   dmul;\n+    365:   dstore            7;\n+    367:   getstatic         #24;                  \/\/ Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\"\n+    370:   iload             6;\n+    372:   i2d;\n+    373:   dload             7;\n+    375:   dadd;\n+    376:   invokevirtual     #70;                  \/\/ Method java\/io\/PrintStream.println:\"(D)V\"\n+    379:   iload_1;\n+    380:   bipush            6;\n+    382:   if_icmpne         414;\n+    385:   ldc               #73;                  \/\/ String \"n_frame\"\n+    387:   astore            5;\n+    389:   bipush            70;\n+    391:   istore            6;\n+    393:   bipush            100;\n+    395:   istore            7;\n+    397:   getstatic         #24;                  \/\/ Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\"\n+    400:   aload             5;\n+    402:   iload             6;\n+    404:   iload             7;\n+    406:   invokedynamic     #75;                  \/\/ InvokeDynamic REF_invokeStatic:Method java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                                                   \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\":\n+                                                   \/\/ makeConcatWithConstants:\"(Ljava\/lang\/String;CI)Ljava\/lang\/String;\" {\n+                                                   \/\/   String \"\\u0001: \\u0001\\u0001\"\n+                                                   \/\/ }\n+    411:   invokevirtual     #32;                  \/\/ Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\"\n+    414:   iconst_0;\n+    415:   istore            5;\n+    417:   aconst_null;\n+    418:   astore            6;\n+           try               T4, T5;\n+    420:   iconst_1;\n+    421:   iload             5;\n+    423:   idiv;\n+    424:   istore            5;\n+           endtry            T4,T5;\n+    426:   aload             6;\n+    428:   invokevirtual     #18;                  \/\/ Method java\/lang\/Object.toString:\"()Ljava\/lang\/String;\"\n+    431:   pop;\n+    432:   goto              466;\n+           catch             T4 #22;               \/\/ java\/lang\/ArithmeticException\n+           try               T6;\n+    435:   astore            7;\n+    437:   new               #2;                   \/\/ class java\/lang\/Object\n+    440:   dup;\n+    441:   invokespecial     #1;                   \/\/ Method java\/lang\/Object.\"<init>\":\"()V\"\n+    444:   astore            6;\n+           endtry            T6;\n+    446:   aload             6;\n+    448:   invokevirtual     #18;                  \/\/ Method java\/lang\/Object.toString:\"()Ljava\/lang\/String;\"\n+    451:   pop;\n+    452:   goto              466;\n+           catch             T5 #0;                \/\/ any\n+           catch             T6 #0;                \/\/ any\n+           catch             T7 #0;                \/\/ any\n+           try               T7;\n+    455:   astore            9;\n+           endtry            T7;\n+    457:   aload             6;\n+    459:   invokevirtual     #18;                  \/\/ Method java\/lang\/Object.toString:\"()Ljava\/lang\/String;\"\n+    462:   pop;\n+    463:   aload             9;\n+    465:   athrow;\n+    466:   iload             5;\n+    468:   ifne              474;\n+    471:   aconst_null;\n+    472:   astore            6;\n+    474:   iload_2;\n+    475:   lookupswitch      {                     \/\/ 2\n+                1:      500;\n+                2:      512;\n+               default: 512  };\n+    500:   new               #2;                   \/\/ class java\/lang\/Object\n+    503:   dup;\n+    504:   invokespecial     #1;                   \/\/ Method java\/lang\/Object.\"<init>\":\"()V\"\n+    507:   astore            6;\n+    509:   goto              512;\n+    512:   return;\n+    StackMapTable: number_of_entries = 25\n+           frame_type = 246                        \/\/ early_larval\n+             unset_fields = [ #11,                 \/\/ fldS:\"Ljava\/lang\/String;\"\n+                              #16; ]  {            \/\/ fldFS:\"Ljava\/lang\/String;\"\n+             frame_type = 255                      \/\/ full\n+               offset_delta = 16\n+                 stack_map  = [ #22; ]             \/\/ class java\/lang\/ArithmeticException; \n+                 locals_map = [ #10, 1, 1, #2; ]   \/\/ class StackMapData, int, int, class java\/lang\/Object; \n+           }\n+           frame_type = 246                        \/\/ early_larval\n+             unset_fields = [ #11,                 \/\/ fldS:\"Ljava\/lang\/String;\"\n+                              #16; ]  {            \/\/ fldFS:\"Ljava\/lang\/String;\"\n+             frame_type = 81                       \/\/ same_locals_1_stack_item\n+                 stack_map  = [ #121; ]            \/\/ class java\/lang\/Throwable; \n+           }\n+           frame_type = 246                        \/\/ early_larval\n+             unset_fields = [ #26,                 \/\/ out:\"Ljava\/io\/PrintStream;\"\n+                              #16; ]  {            \/\/ fldFS:\"Ljava\/lang\/String;\"\n+             frame_type = 9                        \/\/ same\n+           }\n+           frame_type = 5                          \/\/ same\n+           frame_type = 25                         \/\/ same\n+           frame_type = 10                         \/\/ same\n+           frame_type = 11                         \/\/ same\n+           frame_type = 27                         \/\/ same\n+           frame_type = 246                        \/\/ early_larval\n+             unset_fields = [ ] {                 \n+             frame_type = 253                      \/\/ append\n+               offset_delta = 10\n+                 locals_map = [ 1, 1; ]            \/\/ int, int; \n+           }\n+           frame_type = 250                        \/\/ chop1\n+             offset_delta = 32\n+           frame_type = 250                        \/\/ chop1\n+             offset_delta = 12\n+           frame_type = 252                        \/\/ append\n+             offset_delta = 47\n+             locals_map   = [ 1; ]                 \/\/ int; \n+           frame_type = 40                         \/\/ same\n+           frame_type = 7                          \/\/ same\n+           frame_type = 253                        \/\/ append\n+             offset_delta = 10\n+             locals_map   = [ 1, 1; ]              \/\/ int, int; \n+           frame_type = 246                        \/\/ early_larval\n+             unset_fields = [ ] {                 \n+             frame_type = 250                      \/\/ chop1\n+               offset_delta = 33\n+           }\n+           frame_type = 17                         \/\/ same\n+           frame_type = 250                        \/\/ chop1\n+             offset_delta = 34\n+           frame_type = 34                         \/\/ same\n+           frame_type = 255                        \/\/ full\n+             offset_delta = 20\n+             stack_map    = [ #22; ]               \/\/ class java\/lang\/ArithmeticException; \n+             locals_map   = [ #10, 1, 1, #2, 1, 1, #2; ] \/\/ class StackMapData, int, int, class java\/lang\/Object, int, int, class java\/lang\/Object; \n+           frame_type = 83                         \/\/ same_locals_1_stack_item\n+             stack_map    = [ #121; ]              \/\/ class java\/lang\/Throwable; \n+           frame_type = 10                         \/\/ same\n+           frame_type = 7                          \/\/ same\n+           frame_type = 25                         \/\/ same\n+           frame_type = 246                        \/\/ early_larval\n+             unset_fields = [ #11,                 \/\/ fldS:\"Ljava\/lang\/String;\"\n+                              #16,                 \/\/ fldFS:\"Ljava\/lang\/String;\"\n+                              #26,                 \/\/ out:\"Ljava\/io\/PrintStream;\"\n+                              #112; ]  {           \/\/ fldL:\"J\"\n+             frame_type = 11                       \/\/ same\n+           }\n+  }\n+\n+  public Method #105:#106                          \/\/ complexMethod:\"(ILjava\/lang\/Object;)I\" \n+    stack 3  locals 7\n+  {\n+     0:    iconst_0;\n+     1:    istore_3;\n+     2:    iconst_1;\n+     3:    istore            4;\n+     5:    aconst_null;\n+     6:    astore            5;\n+           try               T0;\n+     8:    iload_1;\n+     9:    ifle              47;\n+    12:    iload_1;\n+    13:    iconst_1;\n+    14:    iadd;\n+    15:    istore_3;\n+    16:    aload_2;\n+    17:    instanceof        #78;                  \/\/ class java\/lang\/String\n+    20:    ifeq              39;\n+    23:    aload_2;\n+    24:    checkcast         #78;                  \/\/ class java\/lang\/String\n+    27:    astore            5;\n+    29:    aload             5;\n+    31:    invokevirtual     #80;                  \/\/ Method java\/lang\/Object.hashCode:\"()I\"\n+    34:    istore            4;\n+    36:    iload             4;\n+           endtry            T0;\n+    38:    ireturn;\n+           try               T1;\n+    39:    iload_3;\n+    40:    iconst_2;\n+    41:    imul;\n+    42:    istore            4;\n+    44:    goto              104;\n+    47:    iload_1;\n+    48:    iconst_m1;\n+    49:    if_icmpne         70;\n+    52:    iload_1;\n+    53:    ineg;\n+    54:    istore_3;\n+    55:    iload_3;\n+    56:    iconst_3;\n+    57:    iadd;\n+    58:    istore            4;\n+    60:    new               #84;                  \/\/ class java\/lang\/RuntimeException\n+    63:    dup;\n+    64:    ldc               #86;                  \/\/ String \"Test exception\"\n+    66:    invokespecial     #88;                  \/\/ Method java\/lang\/RuntimeException.\"<init>\":\"(Ljava\/lang\/String;)V\"\n+    69:    athrow;\n+    70:    iconst_0;\n+    71:    istore            6;\n+    73:    iload             6;\n+    75:    iconst_2;\n+    76:    if_icmpge         104;\n+    79:    iload_3;\n+    80:    iload             6;\n+    82:    iadd;\n+    83:    istore_3;\n+    84:    iload_3;\n+    85:    iconst_1;\n+    86:    if_icmple         98;\n+    89:    iload_3;\n+    90:    iload             6;\n+    92:    isub;\n+    93:    istore            4;\n+    95:    goto              104;\n+    98:    iinc              6, 1;\n+    101:   goto              73;\n+           endtry            T1;\n+    104:   goto              118;\n+           catch             T0 #84;               \/\/ java\/lang\/RuntimeException\n+           catch             T1 #84;               \/\/ java\/lang\/RuntimeException\n+    107:   astore            6;\n+    109:   aload             6;\n+    111:   astore            5;\n+    113:   iload_3;\n+    114:   iconst_5;\n+    115:   iadd;\n+    116:   istore            4;\n+    118:   iload_3;\n+    119:   iload             4;\n+    121:   iadd;\n+    122:   ireturn;\n+    StackMapTable: number_of_entries = 8\n+           frame_type = 254                        \/\/ append\n+             offset_delta = 39\n+             locals_map   = [ 1, 1, #2; ]          \/\/ int, int, class java\/lang\/Object; \n+           frame_type = 7                          \/\/ same\n+           frame_type = 22                         \/\/ same\n+           frame_type = 246                        \/\/ early_larval\n+             unset_fields = [ #11,                 \/\/ fldS:\"Ljava\/lang\/String;\"\n+                              #16,                 \/\/ fldFS:\"Ljava\/lang\/String;\"\n+                              #26,                 \/\/ out:\"Ljava\/io\/PrintStream;\"\n+                              #112; ]  {           \/\/ fldL:\"J\"\n+             frame_type = 252                      \/\/ append\n+               offset_delta = 2\n+                 locals_map = [ 1; ]               \/\/ int; \n+           }\n+           frame_type = 24                         \/\/ same\n+           frame_type = 250                        \/\/ chop1\n+             offset_delta = 5\n+           frame_type = 246                        \/\/ early_larval\n+             unset_fields = [ #11,                 \/\/ fldS:\"Ljava\/lang\/String;\"\n+                              #16,                 \/\/ fldFS:\"Ljava\/lang\/String;\"\n+                              #26,                 \/\/ out:\"Ljava\/io\/PrintStream;\"\n+                              #112; ]  {           \/\/ fldL:\"J\"\n+             frame_type = 66                       \/\/ same_locals_1_stack_item\n+                 stack_map  = [ #84; ]             \/\/ class java\/lang\/RuntimeException; \n+           }\n+           frame_type = 10                         \/\/ same\n+  }\n+\n+  public Method #109:#110                          \/\/ generateFullFrame:\"(I)I\" \n+    stack 3  locals 6\n+  {\n+     0:    iconst_0;\n+     1:    istore_2;\n+     2:    aconst_null;\n+     3:    astore_3;\n+     4:    iconst_0;\n+     5:    istore            4;\n+           try               T0;\n+     7:    iload_1;\n+     8:    ifle              25;\n+    11:    ldc               #90;                  \/\/ String \"positive\"\n+    13:    astore_3;\n+    14:    iconst_1;\n+    15:    istore            4;\n+    17:    aload_3;\n+    18:    invokevirtual     #80;                  \/\/ Method java\/lang\/Object.hashCode:\"()I\"\n+    21:    istore_2;\n+    22:    goto              39;\n+    25:    iload_1;\n+    26:    iconst_2;\n+    27:    imul;\n+    28:    istore_2;\n+    29:    new               #84;                  \/\/ class java\/lang\/RuntimeException\n+    32:    dup;\n+    33:    ldc               #92;                  \/\/ String \"non-positive\"\n+    35:    invokespecial     #88;                  \/\/ Method java\/lang\/RuntimeException.\"<init>\":\"(Ljava\/lang\/String;)V\"\n+    38:    athrow;\n+           endtry            T0;\n+    39:    goto              53;\n+           catch             T0 #84;               \/\/ java\/lang\/RuntimeException\n+    42:    astore            5;\n+    44:    aload             5;\n+    46:    astore_3;\n+    47:    iconst_0;\n+    48:    istore            4;\n+    50:    iload_1;\n+    51:    ineg;\n+    52:    istore_2;\n+    53:    iload             4;\n+    55:    ifeq              62;\n+    58:    iload_2;\n+    59:    iconst_1;\n+    60:    iadd;\n+    61:    ireturn;\n+    62:    getstatic         #24;                  \/\/ Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\"\n+    65:    ldc               #94;                  \/\/ String \"Computing result\"\n+    67:    invokevirtual     #32;                  \/\/ Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\"\n+    70:    iload_2;\n+    71:    ireturn;\n+    StackMapTable: number_of_entries = 5\n+           frame_type = 246                        \/\/ early_larval\n+             unset_fields = [ #11,                 \/\/ fldS:\"Ljava\/lang\/String;\"\n+                              #16,                 \/\/ fldFS:\"Ljava\/lang\/String;\"\n+                              #26,                 \/\/ out:\"Ljava\/io\/PrintStream;\"\n+                              #112; ]  {           \/\/ fldL:\"J\"\n+             frame_type = 254                      \/\/ append\n+               offset_delta = 25\n+                 locals_map = [ 1, #2, 1; ]        \/\/ int, class java\/lang\/Object, int; \n+           }\n+           frame_type = 246                        \/\/ early_larval\n+             unset_fields = [ #11,                 \/\/ fldS:\"Ljava\/lang\/String;\"\n+                              #16,                 \/\/ fldFS:\"Ljava\/lang\/String;\"\n+                              #26; ]  {            \/\/ out:\"Ljava\/io\/PrintStream;\"\n+             frame_type = 13                       \/\/ same\n+           }\n+           frame_type = 246                        \/\/ early_larval\n+             unset_fields = [ #11,                 \/\/ fldS:\"Ljava\/lang\/String;\"\n+                              #16; ]  {            \/\/ fldFS:\"Ljava\/lang\/String;\"\n+             frame_type = 66                       \/\/ same_locals_1_stack_item\n+                 stack_map  = [ #84; ]             \/\/ class java\/lang\/RuntimeException; \n+           }\n+           frame_type = 246                        \/\/ early_larval\n+             unset_fields = [ #11; ] {             \/\/fldS:\"Ljava\/lang\/String;\"; \n+             frame_type = 10                       \/\/ same\n+           }\n+           frame_type = 246                        \/\/ early_larval\n+             unset_fields = [ ] {                 \n+             frame_type = 8                        \/\/ same\n+           }\n+  }\n+\n+  public static Method #123:#124                   \/\/ main:\"([Ljava\/lang\/String;)V\" \n+    stack 3  locals 3\n+  {\n+     0:    new               #10;                  \/\/ class StackMapData\n+     3:    dup;\n+     4:    invokespecial     #96;                  \/\/ Method \"<init>\":\"()V\"\n+     7:    astore_1;\n+     8:    iconst_0;\n+     9:    istore_2;\n+    10:    iload_2;\n+    11:    bipush            6;\n+    13:    if_icmpgt         27;\n+    16:    aload_1;\n+    17:    iload_2;\n+    18:    invokevirtual     #97;                  \/\/ Method generateFrames:\"(I)V\"\n+    21:    iinc              2, 1;\n+    24:    goto              10;\n+    27:    aload_1;\n+    28:    iconst_0;\n+    29:    ldc               #101;                 \/\/ String \"test\"\n+    31:    invokevirtual     #103;                 \/\/ Method complexMethod:\"(ILjava\/lang\/Object;)I\"\n+    34:    pop;\n+    35:    aload_1;\n+    36:    bipush            23;\n+    38:    invokevirtual     #107;                 \/\/ Method generateFullFrame:\"(I)I\"\n+    41:    pop;\n+    42:    return;\n+    StackMapTable: number_of_entries = 2\n+           frame_type = 246                        \/\/ early_larval\n+             unset_fields = [ ] {                 \n+             frame_type = 253                      \/\/ append\n+               offset_delta = 10\n+                 locals_map = [ #10, 1; ]          \/\/ class StackMapData, int; \n+           }\n+           frame_type = 250                        \/\/ chop1\n+             offset_delta = 16\n+  }\n+\n+  static Method #125:#6                            \/\/ \"<clinit>\":\"()V\" \n+    stack 2  locals 0\n+  {\n+     0:    lconst_1;\n+     1:    putstatic         #111;                 \/\/ Field fldL:\"J\"\n+     4:    return;\n+  }\n+\n+  InnerClasses {\n+    public static final #148 = #144 of #146;       \/\/ Lookup = class java\/lang\/invoke\/MethodHandles$Lookup of class java\/lang\/invoke\/MethodHandles\n+  }\n+\n+  BootstrapMethods {\n+     0:    #137;                                   \/\/ REF_invokeStatic:java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                                                   \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";\n+     Arguments:\n+           #127;                                   \/\/ String \"item_frame\\u0001\"\n+\n+     1:    #137;                                   \/\/ REF_invokeStatic:java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                                                   \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";\n+     Arguments:\n+           #129;                                   \/\/ String \"item_frame_\\u0001\"\n+\n+     2:    #137;                                   \/\/ REF_invokeStatic:java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                                                   \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";\n+     Arguments:\n+           #131;                                   \/\/ String \"_frame: \\u0001\"\n+\n+     3:    #137;                                   \/\/ REF_invokeStatic:java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                                                   \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";\n+     Arguments:\n+           #133;                                   \/\/ String \"Before chop_frame: \\u0001\"\n+\n+     4:    #137;                                   \/\/ REF_invokeStatic:java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                                                   \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";\n+     Arguments:\n+           #135;                                   \/\/ String \"\\u0001: \\u0001\\u0001\"\n+  }\n+} \/\/ end Class org\/openjdk\/asmtools\/attribute\/StackMapTable\/data\/StackMapData\n","filename":"test\/resources\/org\/openjdk\/asmtools\/attribute\/StackMapTable\/StackMapData.g.t.jasm","additions":791,"deletions":0,"binary":false,"changes":791,"status":"added"},{"patch":"@@ -0,0 +1,612 @@\n+package org\/openjdk\/asmtools\/attribute\/StackMapTable\/data;\n+\n+public super class StackMapData version 69:0\n+{\n+  static final Field fldI:I = int 0;\n+  static Field fldL:J;\n+  protected Field fldS:\"Ljava\/lang\/String;\";\n+  public final Field fldFS:\"Ljava\/lang\/String;\" = String \"string\";\n+\n+  public Method \"<init>\":\"()V\" \n+    stack 2  locals 1\n+  {\n+         aload_0;\n+         invokespecial     Method java\/lang\/Object.\"<init>\":\"()V\";\n+         aload_0;\n+         ldc               String \"string\";\n+         putfield          Field fldS:\"Ljava\/lang\/String;\";\n+         aload_0;\n+         ldc               String \"string\";\n+         putfield          Field fldFS:\"Ljava\/lang\/String;\";\n+         return;\n+  }\n+\n+  public Method generateFrames:\"(I)V\" \n+    stack 5  locals 10\n+  {\n+         iconst_0;\n+         istore_2;\n+         aconst_null;\n+         astore_3;\n+         try               T0, T1;\n+         iconst_1;\n+         iload_2;\n+         idiv;\n+         istore_2;\n+         endtry            T0,T1;\n+         aload_3;\n+         invokevirtual     Method java\/lang\/Object.toString:\"()Ljava\/lang\/String;\";\n+         pop;\n+         goto              L44;\n+         catch             T0 java\/lang\/ArithmeticException;\n+         try               T2;\n+         stack_frame_type  early_larval;\n+           unset_fields    fldS:\"Ljava\/lang\/String;\",\n+                           fldFS:\"Ljava\/lang\/String;\";\n+           frame_type      full;\n+             locals_map    class StackMapData, int, int, class java\/lang\/Object;\n+             stack_map     class java\/lang\/ArithmeticException;\n+         astore            4;\n+         new               class java\/lang\/Object;\n+         dup;\n+         invokespecial     Method java\/lang\/Object.\"<init>\":\"()V\";\n+         astore_3;\n+         endtry            T2;\n+         aload_3;\n+         invokevirtual     Method java\/lang\/Object.toString:\"()Ljava\/lang\/String;\";\n+         pop;\n+         goto              L44;\n+         catch             T1 #0;\n+         catch             T2 #0;\n+         catch             T3 #0;\n+         try               T3;\n+         stack_frame_type  early_larval;\n+           unset_fields    fldS:\"Ljava\/lang\/String;\",\n+                           fldFS:\"Ljava\/lang\/String;\";\n+           frame_type      stack1;\n+             stack_map     class java\/lang\/Throwable;\n+         astore            5;\n+         endtry            T3;\n+         aload_3;\n+         invokevirtual     Method java\/lang\/Object.toString:\"()Ljava\/lang\/String;\";\n+         pop;\n+         aload             5;\n+         athrow;\n+  L44:   stack_frame_type  early_larval;\n+           unset_fields    out:\"Ljava\/io\/PrintStream;\",\n+                           fldFS:\"Ljava\/lang\/String;\";\n+           frame_type      same;\n+         iload_2;\n+         ifne              L50;\n+         aconst_null;\n+         astore_3;\n+  L50:   stack_frame_type  same;\n+         iload_2;\n+         lookupswitch      { \n+              1:      L76;\n+              2:      L87;\n+             default: L87  };\n+  L76:   stack_frame_type  same;\n+         new               class java\/lang\/Object;\n+         dup;\n+         invokespecial     Method java\/lang\/Object.\"<init>\":\"()V\";\n+         astore_3;\n+         goto              L87;\n+  L87:   stack_frame_type  same;\n+         iload_1;\n+         ifne              L99;\n+         getstatic         Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\";\n+         ldc               String \"frame\";\n+         invokevirtual     Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\";\n+  L99:   stack_frame_type  same;\n+         iload_1;\n+         iconst_1;\n+         if_icmpne         L127;\n+         bipush            42;\n+         istore            4;\n+         getstatic         Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\";\n+         iload             4;\n+         ldc               float 100.0f;\n+         invokestatic      Method java\/lang\/Math.round:\"(F)I\";\n+         imul;\n+         invokedynamic     InvokeDynamic REF_invokeStatic:Method java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                           \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\":\n+                           makeConcatWithConstants:\"(I)Ljava\/lang\/String;\" {\n+                             String \"item_frame\\u0001\"\n+                           };\n+         invokevirtual     Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\";\n+  L127:  stack_frame_type  same;\n+         iload_1;\n+         iconst_2;\n+         if_icmpne         L184;\n+         iconst_0;\n+         istore            4;\n+         iconst_0;\n+         istore            5;\n+  L138:  stack_frame_type  early_larval;\n+           unset_fields;\n+           frame_type      append;\n+             locals_map    int, int;\n+         iload             5;\n+         sipush            3000;\n+         if_icmpge         L171;\n+         ldc               float 3.14f;\n+         fstore            6;\n+         iload             4;\n+         fload             6;\n+         ldc               float 100.0f;\n+         invokestatic      Method java\/lang\/Math.round:\"(F)I\";\n+         i2f;\n+         fmul;\n+         f2i;\n+         iadd;\n+         istore            4;\n+         iinc              5, 1;\n+         goto              L138;\n+  L171:  stack_frame_type  chop1;\n+         getstatic         Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\";\n+         iload             4;\n+         invokedynamic     InvokeDynamic REF_invokeStatic:Method java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                           \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\":\n+                           makeConcatWithConstants:\"(I)Ljava\/lang\/String;\" {\n+                             String \"item_frame_\\u0001\"\n+                           };\n+         invokevirtual     Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\";\n+  L184:  stack_frame_type  chop1;\n+         ldc               float 10.0f;\n+         invokestatic      Method java\/lang\/Math.round:\"(F)I\";\n+         istore            4;\n+         iload_1;\n+         iconst_3;\n+         if_icmpne         L232;\n+         ldc               float 110.0f;\n+         invokestatic      Method java\/lang\/Math.round:\"(F)I\";\n+         istore            5;\n+         ldc2_w            double 100.0d;\n+         invokestatic      Method java\/lang\/Math.round:\"(D)J\";\n+         lstore            6;\n+         getstatic         Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\";\n+         iload             5;\n+         i2l;\n+         lload             6;\n+         ladd;\n+         iload             4;\n+         i2l;\n+         lmul;\n+         invokedynamic     InvokeDynamic REF_invokeStatic:Method java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                           \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\":\n+                           makeConcatWithConstants:\"(J)Ljava\/lang\/String;\" {\n+                             String \"_frame: \\u0001\"\n+                           };\n+         invokevirtual     Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\";\n+  L232:  stack_frame_type  append;\n+           locals_map      int;\n+         iload_1;\n+         iconst_4;\n+         if_icmpne         L273;\n+         bipush            50;\n+         iload             4;\n+         imul;\n+         istore            5;\n+         ldc2_w            double 99.99d;\n+         iload             4;\n+         i2d;\n+         dmul;\n+         dstore            6;\n+         getstatic         Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\";\n+         iload             5;\n+         i2d;\n+         dload             6;\n+         dadd;\n+         invokedynamic     InvokeDynamic REF_invokeStatic:Method java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                           \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\":\n+                           makeConcatWithConstants:\"(D)Ljava\/lang\/String;\" {\n+                             String \"Before chop_frame: \\u0001\"\n+                           };\n+         invokevirtual     Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\";\n+         goto              L281;\n+  L273:  stack_frame_type  same;\n+         getstatic         Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\";\n+         ldc               String \"chop_frame\";\n+         invokevirtual     Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\";\n+  L281:  stack_frame_type  same;\n+         iload_1;\n+         iconst_5;\n+         if_icmpne         L379;\n+         iconst_0;\n+         istore            5;\n+         iconst_0;\n+         istore            6;\n+  L292:  stack_frame_type  append;\n+           locals_map      int, int;\n+         iload             6;\n+         sipush            2500;\n+         if_icmpge         L326;\n+         ldc               float 3.14f;\n+         fstore            7;\n+         iload             5;\n+         fload             7;\n+         iload             6;\n+         i2f;\n+         invokestatic      Method java\/lang\/Math.round:\"(F)I\";\n+         i2f;\n+         fmul;\n+         f2i;\n+         iadd;\n+         istore            5;\n+         iinc              6, 1;\n+         goto              L292;\n+  L326:  stack_frame_type  early_larval;\n+           unset_fields;\n+           frame_type      chop1;\n+         iload             5;\n+         bipush            100;\n+         if_icmple         L344;\n+         getstatic         Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\";\n+         ldc               String \"_frame_\";\n+         invokevirtual     Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\";\n+         goto              L379;\n+  L344:  stack_frame_type  same;\n+         iload             5;\n+         bipush            50;\n+         if_icmpge         L379;\n+         bipush            50;\n+         iload             4;\n+         imul;\n+         istore            6;\n+         ldc2_w            double 99.99d;\n+         iload             4;\n+         i2d;\n+         dmul;\n+         dstore            7;\n+         getstatic         Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\";\n+         iload             6;\n+         i2d;\n+         dload             7;\n+         dadd;\n+         invokevirtual     Method java\/io\/PrintStream.println:\"(D)V\";\n+  L379:  stack_frame_type  chop1;\n+         iload_1;\n+         bipush            6;\n+         if_icmpne         L414;\n+         ldc               String \"n_frame\";\n+         astore            5;\n+         bipush            70;\n+         istore            6;\n+         bipush            100;\n+         istore            7;\n+         getstatic         Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\";\n+         aload             5;\n+         iload             6;\n+         iload             7;\n+         invokedynamic     InvokeDynamic REF_invokeStatic:Method java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                           \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\":\n+                           makeConcatWithConstants:\"(Ljava\/lang\/String;CI)Ljava\/lang\/String;\" {\n+                             String \"\\u0001: \\u0001\\u0001\"\n+                           };\n+         invokevirtual     Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\";\n+  L414:  stack_frame_type  same;\n+         iconst_0;\n+         istore            5;\n+         aconst_null;\n+         astore            6;\n+         try               T4, T5;\n+         iconst_1;\n+         iload             5;\n+         idiv;\n+         istore            5;\n+         endtry            T4,T5;\n+         aload             6;\n+         invokevirtual     Method java\/lang\/Object.toString:\"()Ljava\/lang\/String;\";\n+         pop;\n+         goto              L466;\n+         catch             T4 java\/lang\/ArithmeticException;\n+         try               T6;\n+         stack_frame_type  full;\n+           locals_map      class StackMapData, int, int, class java\/lang\/Object, int, int, class java\/lang\/Object;\n+           stack_map       class java\/lang\/ArithmeticException;\n+         astore            7;\n+         new               class java\/lang\/Object;\n+         dup;\n+         invokespecial     Method java\/lang\/Object.\"<init>\":\"()V\";\n+         astore            6;\n+         endtry            T6;\n+         aload             6;\n+         invokevirtual     Method java\/lang\/Object.toString:\"()Ljava\/lang\/String;\";\n+         pop;\n+         goto              L466;\n+         catch             T5 #0;\n+         catch             T6 #0;\n+         catch             T7 #0;\n+         try               T7;\n+         stack_frame_type  stack1;\n+           stack_map       class java\/lang\/Throwable;\n+         astore            9;\n+         endtry            T7;\n+         aload             6;\n+         invokevirtual     Method java\/lang\/Object.toString:\"()Ljava\/lang\/String;\";\n+         pop;\n+         aload             9;\n+         athrow;\n+  L466:  stack_frame_type  same;\n+         iload             5;\n+         ifne              L474;\n+         aconst_null;\n+         astore            6;\n+  L474:  stack_frame_type  same;\n+         iload_2;\n+         lookupswitch      { \n+              1:      L500;\n+              2:      L512;\n+             default: L512 };\n+  L500:  stack_frame_type  same;\n+         new               class java\/lang\/Object;\n+         dup;\n+         invokespecial     Method java\/lang\/Object.\"<init>\":\"()V\";\n+         astore            6;\n+         goto              L512;\n+  L512:  stack_frame_type  early_larval;\n+           unset_fields    fldS:\"Ljava\/lang\/String;\",\n+                           fldFS:\"Ljava\/lang\/String;\",\n+                           out:\"Ljava\/io\/PrintStream;\",\n+                           fldL:\"J\";\n+           frame_type      same;\n+         return;\n+  }\n+\n+  public Method complexMethod:\"(ILjava\/lang\/Object;)I\" \n+    stack 3  locals 7\n+  {\n+         iconst_0;\n+         istore_3;\n+         iconst_1;\n+         istore            4;\n+         aconst_null;\n+         astore            5;\n+         try               T0;\n+         iload_1;\n+         ifle              L47;\n+         iload_1;\n+         iconst_1;\n+         iadd;\n+         istore_3;\n+         aload_2;\n+         instanceof        class java\/lang\/String;\n+         ifeq              L39;\n+         aload_2;\n+         checkcast         class java\/lang\/String;\n+         astore            5;\n+         aload             5;\n+         invokevirtual     Method java\/lang\/Object.hashCode:\"()I\";\n+         istore            4;\n+         iload             4;\n+         endtry            T0;\n+         ireturn;\n+         try               T1;\n+  L39:   stack_frame_type  append;\n+           locals_map      int, int, class java\/lang\/Object;\n+         iload_3;\n+         iconst_2;\n+         imul;\n+         istore            4;\n+         goto              L104;\n+  L47:   stack_frame_type  same;\n+         iload_1;\n+         iconst_m1;\n+         if_icmpne         L70;\n+         iload_1;\n+         ineg;\n+         istore_3;\n+         iload_3;\n+         iconst_3;\n+         iadd;\n+         istore            4;\n+         new               class java\/lang\/RuntimeException;\n+         dup;\n+         ldc               String \"Test exception\";\n+         invokespecial     Method java\/lang\/RuntimeException.\"<init>\":\"(Ljava\/lang\/String;)V\";\n+         athrow;\n+  L70:   stack_frame_type  same;\n+         iconst_0;\n+         istore            6;\n+  L73:   stack_frame_type  early_larval;\n+           unset_fields    fldS:\"Ljava\/lang\/String;\",\n+                           fldFS:\"Ljava\/lang\/String;\",\n+                           out:\"Ljava\/io\/PrintStream;\",\n+                           fldL:\"J\";\n+           frame_type      append;\n+             locals_map    int;\n+         iload             6;\n+         iconst_2;\n+         if_icmpge         L104;\n+         iload_3;\n+         iload             6;\n+         iadd;\n+         istore_3;\n+         iload_3;\n+         iconst_1;\n+         if_icmple         L98;\n+         iload_3;\n+         iload             6;\n+         isub;\n+         istore            4;\n+         goto              L104;\n+  L98:   stack_frame_type  same;\n+         iinc              6, 1;\n+         goto              L73;\n+         endtry            T1;\n+  L104:  stack_frame_type  chop1;\n+         goto              L118;\n+         catch             T0 java\/lang\/RuntimeException;\n+         catch             T1 java\/lang\/RuntimeException;\n+         stack_frame_type  early_larval;\n+           unset_fields    fldS:\"Ljava\/lang\/String;\",\n+                           fldFS:\"Ljava\/lang\/String;\",\n+                           out:\"Ljava\/io\/PrintStream;\",\n+                           fldL:\"J\";\n+           frame_type      stack1;\n+             stack_map     class java\/lang\/RuntimeException;\n+         astore            6;\n+         aload             6;\n+         astore            5;\n+         iload_3;\n+         iconst_5;\n+         iadd;\n+         istore            4;\n+  L118:  stack_frame_type  same;\n+         iload_3;\n+         iload             4;\n+         iadd;\n+         ireturn;\n+  }\n+\n+  public Method generateFullFrame:\"(I)I\" \n+    stack 3  locals 6\n+  {\n+         iconst_0;\n+         istore_2;\n+         aconst_null;\n+         astore_3;\n+         iconst_0;\n+         istore            4;\n+         try               T0;\n+         iload_1;\n+         ifle              L25;\n+         ldc               String \"positive\";\n+         astore_3;\n+         iconst_1;\n+         istore            4;\n+         aload_3;\n+         invokevirtual     Method java\/lang\/Object.hashCode:\"()I\";\n+         istore_2;\n+         goto              L39;\n+  L25:   stack_frame_type  early_larval;\n+           unset_fields    fldS:\"Ljava\/lang\/String;\",\n+                           fldFS:\"Ljava\/lang\/String;\",\n+                           out:\"Ljava\/io\/PrintStream;\",\n+                           fldL:\"J\";\n+           frame_type      append;\n+             locals_map    int, class java\/lang\/Object, int;\n+         iload_1;\n+         iconst_2;\n+         imul;\n+         istore_2;\n+         new               class java\/lang\/RuntimeException;\n+         dup;\n+         ldc               String \"non-positive\";\n+         invokespecial     Method java\/lang\/RuntimeException.\"<init>\":\"(Ljava\/lang\/String;)V\";\n+         athrow;\n+         endtry            T0;\n+  L39:   stack_frame_type  early_larval;\n+           unset_fields    fldS:\"Ljava\/lang\/String;\",\n+                           fldFS:\"Ljava\/lang\/String;\",\n+                           out:\"Ljava\/io\/PrintStream;\";\n+           frame_type      same;\n+         goto              L53;\n+         catch             T0 java\/lang\/RuntimeException;\n+         stack_frame_type  early_larval;\n+           unset_fields    fldS:\"Ljava\/lang\/String;\",\n+                           fldFS:\"Ljava\/lang\/String;\";\n+           frame_type      stack1;\n+             stack_map     class java\/lang\/RuntimeException;\n+         astore            5;\n+         aload             5;\n+         astore_3;\n+         iconst_0;\n+         istore            4;\n+         iload_1;\n+         ineg;\n+         istore_2;\n+  L53:   stack_frame_type  early_larval;\n+           unset_fields    fldS:\"Ljava\/lang\/String;\";\n+           frame_type      same;\n+         iload             4;\n+         ifeq              L62;\n+         iload_2;\n+         iconst_1;\n+         iadd;\n+         ireturn;\n+  L62:   stack_frame_type  early_larval;\n+           unset_fields;\n+           frame_type      same;\n+         getstatic         Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\";\n+         ldc               String \"Computing result\";\n+         invokevirtual     Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\";\n+         iload_2;\n+         ireturn;\n+  }\n+\n+  public static Method main:\"([Ljava\/lang\/String;)V\" \n+    stack 3  locals 3\n+  {\n+         new               class StackMapData;\n+         dup;\n+         invokespecial     Method \"<init>\":\"()V\";\n+         astore_1;\n+         iconst_0;\n+         istore_2;\n+  L10:   stack_frame_type  early_larval;\n+           unset_fields;\n+           frame_type      append;\n+             locals_map    class StackMapData, int;\n+         iload_2;\n+         bipush            6;\n+         if_icmpgt         L27;\n+         aload_1;\n+         iload_2;\n+         invokevirtual     Method generateFrames:\"(I)V\";\n+         iinc              2, 1;\n+         goto              L10;\n+  L27:   stack_frame_type  chop1;\n+         aload_1;\n+         iconst_0;\n+         ldc               String \"test\";\n+         invokevirtual     Method complexMethod:\"(ILjava\/lang\/Object;)I\";\n+         pop;\n+         aload_1;\n+         bipush            23;\n+         invokevirtual     Method generateFullFrame:\"(I)I\";\n+         pop;\n+         return;\n+  }\n+\n+  static Method \"<clinit>\":\"()V\" \n+    stack 2  locals 0\n+  {\n+         lconst_1;\n+         putstatic         Field fldL:\"J\";\n+         return;\n+  }\n+\n+  InnerClass               public static final Lookup = class java\/lang\/invoke\/MethodHandles$Lookup of class java\/lang\/invoke\/MethodHandles;\n+\n+  BootstrapMethod          REF_invokeStatic:java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                           \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";\n+                           {\n+                             String \"item_frame\\u0001\"\n+                           }\n+\n+  BootstrapMethod          REF_invokeStatic:java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                           \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";\n+                           {\n+                             String \"item_frame_\\u0001\"\n+                           }\n+\n+  BootstrapMethod          REF_invokeStatic:java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                           \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";\n+                           {\n+                             String \"_frame: \\u0001\"\n+                           }\n+\n+  BootstrapMethod          REF_invokeStatic:java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                           \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";\n+                           {\n+                             String \"Before chop_frame: \\u0001\"\n+                           }\n+\n+  BootstrapMethod          REF_invokeStatic:java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                           \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";\n+                           {\n+                             String \"\\u0001: \\u0001\\u0001\"\n+                           }\n+} \/\/ end Class org\/openjdk\/asmtools\/attribute\/StackMapTable\/data\/StackMapData\n","filename":"test\/resources\/org\/openjdk\/asmtools\/attribute\/StackMapTable\/StackMapData.jasm","additions":612,"deletions":0,"binary":false,"changes":612,"status":"added"},{"patch":"@@ -0,0 +1,520 @@\n+class org\/openjdk\/asmtools\/attribute\/StackMapTable\/data\/StackMapData {\n+  0xCAFEBABE;\n+  0;                                       \/\/ minor version\n+  69;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Method #2 #3;                          \/\/ #1\n+    Class #4;                              \/\/ #2\n+    NameAndType #5 #6;                     \/\/ #3\n+    Utf8 \"java\/lang\/Object\";               \/\/ #4\n+    Utf8 \"<init>\";                         \/\/ #5\n+    Utf8 \"()V\";                            \/\/ #6\n+    String #8;                             \/\/ #7\n+    Utf8 \"string\";                         \/\/ #8\n+    Field #10 #11;                         \/\/ #9\n+    Class #12;                             \/\/ #10\n+    NameAndType #13 #14;                   \/\/ #11\n+    Utf8 \"org\/openjdk\/asmtools\/attribute\/StackMapTable\/data\/StackMapData\";  \/\/ #12\n+    Utf8 \"fldS\";                           \/\/ #13\n+    Utf8 \"Ljava\/lang\/String;\";             \/\/ #14\n+    Field #10 #16;                         \/\/ #15\n+    NameAndType #17 #14;                   \/\/ #16\n+    Utf8 \"fldFS\";                          \/\/ #17\n+    Method #2 #19;                         \/\/ #18\n+    NameAndType #20 #21;                   \/\/ #19\n+    Utf8 \"toString\";                       \/\/ #20\n+    Utf8 \"()Ljava\/lang\/String;\";           \/\/ #21\n+    Class #23;                             \/\/ #22\n+    Utf8 \"java\/lang\/ArithmeticException\";  \/\/ #23\n+    Field #25 #26;                         \/\/ #24\n+    Class #27;                             \/\/ #25\n+    NameAndType #28 #29;                   \/\/ #26\n+    Utf8 \"java\/lang\/System\";               \/\/ #27\n+    Utf8 \"out\";                            \/\/ #28\n+    Utf8 \"Ljava\/io\/PrintStream;\";          \/\/ #29\n+    String #31;                            \/\/ #30\n+    Utf8 \"frame\";                          \/\/ #31\n+    Method #33 #34;                        \/\/ #32\n+    Class #35;                             \/\/ #33\n+    NameAndType #36 #37;                   \/\/ #34\n+    Utf8 \"java\/io\/PrintStream\";            \/\/ #35\n+    Utf8 \"println\";                        \/\/ #36\n+    Utf8 \"(Ljava\/lang\/String;)V\";          \/\/ #37\n+    Float 0x42C80000;                      \/\/ #38\n+    Method #40 #41;                        \/\/ #39\n+    Class #42;                             \/\/ #40\n+    NameAndType #43 #44;                   \/\/ #41\n+    Utf8 \"java\/lang\/Math\";                 \/\/ #42\n+    Utf8 \"round\";                          \/\/ #43\n+    Utf8 \"(F)I\";                           \/\/ #44\n+    InvokeDynamic 0s #46;                  \/\/ #45\n+    NameAndType #47 #48;                   \/\/ #46\n+    Utf8 \"makeConcatWithConstants\";        \/\/ #47\n+    Utf8 \"(I)Ljava\/lang\/String;\";          \/\/ #48\n+    Float 0x4048F5C3;                      \/\/ #49\n+    InvokeDynamic 1s #46;                  \/\/ #50\n+    Float 0x41200000;                      \/\/ #51\n+    Float 0x42DC0000;                      \/\/ #52\n+    Double 0x4059000000000000;;            \/\/ #53\n+    Method #40 #56;                        \/\/ #55\n+    NameAndType #43 #57;                   \/\/ #56\n+    Utf8 \"(D)J\";                           \/\/ #57\n+    InvokeDynamic 2s #59;                  \/\/ #58\n+    NameAndType #47 #60;                   \/\/ #59\n+    Utf8 \"(J)Ljava\/lang\/String;\";          \/\/ #60\n+    Double 0x4058FF5C28F5C28F;;            \/\/ #61\n+    InvokeDynamic 3s #64;                  \/\/ #63\n+    NameAndType #47 #65;                   \/\/ #64\n+    Utf8 \"(D)Ljava\/lang\/String;\";          \/\/ #65\n+    String #67;                            \/\/ #66\n+    Utf8 \"chop_frame\";                     \/\/ #67\n+    String #69;                            \/\/ #68\n+    Utf8 \"_frame_\";                        \/\/ #69\n+    Method #33 #71;                        \/\/ #70\n+    NameAndType #36 #72;                   \/\/ #71\n+    Utf8 \"(D)V\";                           \/\/ #72\n+    String #74;                            \/\/ #73\n+    Utf8 \"n_frame\";                        \/\/ #74\n+    InvokeDynamic 4s #76;                  \/\/ #75\n+    NameAndType #47 #77;                   \/\/ #76\n+    Utf8 \"(Ljava\/lang\/String;CI)Ljava\/lang\/String;\";  \/\/ #77\n+    Class #79;                             \/\/ #78\n+    Utf8 \"java\/lang\/String\";               \/\/ #79\n+    Method #2 #81;                         \/\/ #80\n+    NameAndType #82 #83;                   \/\/ #81\n+    Utf8 \"hashCode\";                       \/\/ #82\n+    Utf8 \"()I\";                            \/\/ #83\n+    Class #85;                             \/\/ #84\n+    Utf8 \"java\/lang\/RuntimeException\";     \/\/ #85\n+    String #87;                            \/\/ #86\n+    Utf8 \"Test exception\";                 \/\/ #87\n+    Method #84 #89;                        \/\/ #88\n+    NameAndType #5 #37;                    \/\/ #89\n+    String #91;                            \/\/ #90\n+    Utf8 \"positive\";                       \/\/ #91\n+    String #93;                            \/\/ #92\n+    Utf8 \"non-positive\";                   \/\/ #93\n+    String #95;                            \/\/ #94\n+    Utf8 \"Computing result\";               \/\/ #95\n+    Method #10 #3;                         \/\/ #96\n+    Method #10 #98;                        \/\/ #97\n+    NameAndType #99 #100;                  \/\/ #98\n+    Utf8 \"generateFrames\";                 \/\/ #99\n+    Utf8 \"(I)V\";                           \/\/ #100\n+    String #102;                           \/\/ #101\n+    Utf8 \"test\";                           \/\/ #102\n+    Method #10 #104;                       \/\/ #103\n+    NameAndType #105 #106;                 \/\/ #104\n+    Utf8 \"complexMethod\";                  \/\/ #105\n+    Utf8 \"(ILjava\/lang\/Object;)I\";         \/\/ #106\n+    Method #10 #108;                       \/\/ #107\n+    NameAndType #109 #110;                 \/\/ #108\n+    Utf8 \"generateFullFrame\";              \/\/ #109\n+    Utf8 \"(I)I\";                           \/\/ #110\n+    Field #10 #112;                        \/\/ #111\n+    NameAndType #113 #114;                 \/\/ #112\n+    Utf8 \"fldL\";                           \/\/ #113\n+    Utf8 \"J\";                              \/\/ #114\n+    Utf8 \"fldI\";                           \/\/ #115\n+    Utf8 \"I\";                              \/\/ #116\n+    Utf8 \"ConstantValue\";                  \/\/ #117\n+    Integer 0x00000000;                    \/\/ #118\n+    Utf8 \"Code\";                           \/\/ #119\n+    Utf8 \"StackMapTable\";                  \/\/ #120\n+    Class #122;                            \/\/ #121\n+    Utf8 \"java\/lang\/Throwable\";            \/\/ #122\n+    Utf8 \"main\";                           \/\/ #123\n+    Utf8 \"([Ljava\/lang\/String;)V\";         \/\/ #124\n+    Utf8 \"<clinit>\";                       \/\/ #125\n+    Utf8 \"BootstrapMethods\";               \/\/ #126\n+    String #128;                           \/\/ #127\n+    Utf8 \"item_frame\\u0001\";               \/\/ #128\n+    String #130;                           \/\/ #129\n+    Utf8 \"item_frame_\\u0001\";              \/\/ #130\n+    String #132;                           \/\/ #131\n+    Utf8 \"_frame: \\u0001\";                 \/\/ #132\n+    String #134;                           \/\/ #133\n+    Utf8 \"Before chop_frame: \\u0001\";      \/\/ #134\n+    String #136;                           \/\/ #135\n+    Utf8 \"\\u0001: \\u0001\\u0001\";           \/\/ #136\n+    MethodHandle 6b #138;                  \/\/ #137\n+    Method #139 #140;                      \/\/ #138\n+    Class #141;                            \/\/ #139\n+    NameAndType #47 #142;                  \/\/ #140\n+    Utf8 \"java\/lang\/invoke\/StringConcatFactory\";  \/\/ #141\n+    Utf8 \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";  \/\/ #142\n+    Utf8 \"InnerClasses\";                   \/\/ #143\n+    Class #145;                            \/\/ #144\n+    Utf8 \"java\/lang\/invoke\/MethodHandles$Lookup\";  \/\/ #145\n+    Class #147;                            \/\/ #146\n+    Utf8 \"java\/lang\/invoke\/MethodHandles\";  \/\/ #147\n+    Utf8 \"Lookup\";                         \/\/ #148\n+  }\n+\n+  0x0021;                                  \/\/ access\n+  #10;                                     \/\/ this_cpx\n+  #2;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0018;                              \/\/ access\n+      #115;                                \/\/ name_index\n+      #116;                                \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#117) {                       \/\/ ConstantValue\n+          #118;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ field\n+      0x0008;                              \/\/ access\n+      #113;                                \/\/ name_index\n+      #114;                                \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ field\n+      0x0004;                              \/\/ access\n+      #13;                                 \/\/ name_index\n+      #14;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ field\n+      0x0011;                              \/\/ access\n+      #17;                                 \/\/ name_index\n+      #14;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#117) {                       \/\/ ConstantValue\n+          #7;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #5;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#119) {                       \/\/ Code\n+          2;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x01 0x2A 0x12 0x07 0xB5 0x00 0x09 0x2A 0x12;\n+            0x07 0xB5 0x00 0x0F 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #99;                                 \/\/ name_index\n+      #100;                                \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#119) {                       \/\/ Code\n+          5;                               \/\/ max_stack\n+          10;                              \/\/ max_locals\n+          Bytes[]{\n+            0x03 0x3D 0x01 0x4E 0x04 0x1C 0x6C 0x3D 0x2D 0xB6 0x00 0x12;\n+            0x57 0xA7 0x00 0x1F 0x3A 0x04 0xBB 0x00 0x02 0x59 0xB7 0x00;\n+            0x01 0x4E 0x2D 0xB6 0x00 0x12 0x57 0xA7 0x00 0x0D 0x3A 0x05;\n+            0x2D 0xB6 0x00 0x12 0x57 0x19 0x05 0xBF 0x1C 0x9A 0x00 0x05;\n+            0x01 0x4E 0x1C 0xAB 0x00 0x00 0x00 0x24 0x00 0x00 0x00 0x02;\n+            0x00 0x00 0x00 0x01 0x00 0x00 0x00 0x19 0x00 0x00 0x00 0x02;\n+            0x00 0x00 0x00 0x24 0xBB 0x00 0x02 0x59 0xB7 0x00 0x01 0x4E;\n+            0xA7 0x00 0x03 0x1B 0x9A 0x00 0x0B 0xB2 0x00 0x18 0x12 0x1E;\n+            0xB6 0x00 0x20 0x1B 0x04 0xA0 0x00 0x1A 0x10 0x2A 0x36 0x04;\n+            0xB2 0x00 0x18 0x15 0x04 0x12 0x26 0xB8 0x00 0x27 0x68 0xBA;\n+            0x00 0x2D 0x00 0x00 0xB6 0x00 0x20 0x1B 0x05 0xA0 0x00 0x37;\n+            0x03 0x36 0x04 0x03 0x36 0x05 0x15 0x05 0x11 0x0B 0xB8 0xA2;\n+            0x00 0x1C 0x12 0x31 0x38 0x06 0x15 0x04 0x17 0x06 0x12 0x26;\n+            0xB8 0x00 0x27 0x86 0x6A 0x8B 0x60 0x36 0x04 0x84 0x05 0x01;\n+            0xA7 0xFF 0xE2 0xB2 0x00 0x18 0x15 0x04 0xBA 0x00 0x32 0x00;\n+            0x00 0xB6 0x00 0x20 0x12 0x33 0xB8 0x00 0x27 0x36 0x04 0x1B;\n+            0x06 0xA0 0x00 0x27 0x12 0x34 0xB8 0x00 0x27 0x36 0x05 0x14;\n+            0x00 0x35 0xB8 0x00 0x37 0x37 0x06 0xB2 0x00 0x18 0x15 0x05;\n+            0x85 0x16 0x06 0x61 0x15 0x04 0x85 0x69 0xBA 0x00 0x3A 0x00;\n+            0x00 0xB6 0x00 0x20 0x1B 0x07 0xA0 0x00 0x27 0x10 0x32 0x15;\n+            0x04 0x68 0x36 0x05 0x14 0x00 0x3D 0x15 0x04 0x87 0x6B 0x39;\n+            0x06 0xB2 0x00 0x18 0x15 0x05 0x87 0x18 0x06 0x63 0xBA 0x00;\n+            0x3F 0x00 0x00 0xB6 0x00 0x20 0xA7 0x00 0x0B 0xB2 0x00 0x18;\n+            0x12 0x42 0xB6 0x00 0x20 0x1B 0x08 0xA0 0x00 0x60 0x03 0x36;\n+            0x05 0x03 0x36 0x06 0x15 0x06 0x11 0x09 0xC4 0xA2 0x00 0x1D;\n+            0x12 0x31 0x38 0x07 0x15 0x05 0x17 0x07 0x15 0x06 0x86 0xB8;\n+            0x00 0x27 0x86 0x6A 0x8B 0x60 0x36 0x05 0x84 0x06 0x01 0xA7;\n+            0xFF 0xE1 0x15 0x05 0x10 0x64 0xA4 0x00 0x0E 0xB2 0x00 0x18;\n+            0x12 0x44 0xB6 0x00 0x20 0xA7 0x00 0x26 0x15 0x05 0x10 0x32;\n+            0xA2 0x00 0x1F 0x10 0x32 0x15 0x04 0x68 0x36 0x06 0x14 0x00;\n+            0x3D 0x15 0x04 0x87 0x6B 0x39 0x07 0xB2 0x00 0x18 0x15 0x06;\n+            0x87 0x18 0x07 0x63 0xB6 0x00 0x46 0x1B 0x10 0x06 0xA0 0x00;\n+            0x20 0x12 0x49 0x3A 0x05 0x10 0x46 0x36 0x06 0x10 0x64 0x36;\n+            0x07 0xB2 0x00 0x18 0x19 0x05 0x15 0x06 0x15 0x07 0xBA 0x00;\n+            0x4B 0x00 0x00 0xB6 0x00 0x20 0x03 0x36 0x05 0x01 0x3A 0x06;\n+            0x04 0x15 0x05 0x6C 0x36 0x05 0x19 0x06 0xB6 0x00 0x12 0x57;\n+            0xA7 0x00 0x22 0x3A 0x07 0xBB 0x00 0x02 0x59 0xB7 0x00 0x01;\n+            0x3A 0x06 0x19 0x06 0xB6 0x00 0x12 0x57 0xA7 0x00 0x0E 0x3A;\n+            0x09 0x19 0x06 0xB6 0x00 0x12 0x57 0x19 0x09 0xBF 0x15 0x05;\n+            0x9A 0x00 0x06 0x01 0x3A 0x06 0x1C 0xAB 0x00 0x00 0x00 0x25;\n+            0x00 0x00 0x00 0x02 0x00 0x00 0x00 0x01 0x00 0x00 0x00 0x19;\n+            0x00 0x00 0x00 0x02 0x00 0x00 0x00 0x25 0xBB 0x00 0x02 0x59;\n+            0xB7 0x00 0x01 0x3A 0x06 0xA7 0x00 0x03 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+               4    8   16  22;\n+               4    8   34   0;\n+              16   26   34   0;\n+              34   36   34   0;\n+             420  426  435  22;\n+             420  426  455   0;\n+             435  446  455   0;\n+             455  457  455   0;\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#120) {                   \/\/ StackMapTable\n+              [] {                         \/\/ \n+                246b, []{#11; #16}, {      \/\/ early_larval_frame\n+                  255b, 16, []{O,#10; I; I; O,#2}, []{O,#22};  \/\/ full_frame\n+                };\n+                246b, []{#11; #16}, {      \/\/ early_larval_frame\n+                  81b, []z{O,#121};        \/\/ same_locals_1_stack_item_frame\n+                };\n+                246b, []{#26; #16}, {      \/\/ early_larval_frame\n+                  9b;                      \/\/ same_frame\n+                };\n+                5b;                        \/\/ same_frame\n+                25b;                       \/\/ same_frame\n+                10b;                       \/\/ same_frame\n+                11b;                       \/\/ same_frame\n+                27b;                       \/\/ same_frame\n+                246b, []{}, {              \/\/ early_larval_frame\n+                  253b, 10, []z{I; I};     \/\/ append_frame 2\n+                };\n+                250b, 32;                  \/\/ chop_frame 1\n+                250b, 12;                  \/\/ chop_frame 1\n+                252b, 47, []z{I};          \/\/ append_frame 1\n+                40b;                       \/\/ same_frame\n+                7b;                        \/\/ same_frame\n+                253b, 10, []z{I; I};       \/\/ append_frame 2\n+                246b, []{}, {              \/\/ early_larval_frame\n+                  250b, 33;                \/\/ chop_frame 1\n+                };\n+                17b;                       \/\/ same_frame\n+                250b, 34;                  \/\/ chop_frame 1\n+                34b;                       \/\/ same_frame\n+                255b, 20, []{O,#10; I; I; O,#2; I; I; O,#2}, []{O,#22};  \/\/ full_frame\n+                83b, []z{O,#121};          \/\/ same_locals_1_stack_item_frame\n+                10b;                       \/\/ same_frame\n+                7b;                        \/\/ same_frame\n+                25b;                       \/\/ same_frame\n+                246b, []{#11; #16; #26; #112}, {  \/\/ early_larval_frame\n+                  11b;                     \/\/ same_frame\n+                };\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #105;                                \/\/ name_index\n+      #106;                                \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#119) {                       \/\/ Code\n+          3;                               \/\/ max_stack\n+          7;                               \/\/ max_locals\n+          Bytes[]{\n+            0x03 0x3E 0x04 0x36 0x04 0x01 0x3A 0x05 0x1B 0x9E 0x00 0x26;\n+            0x1B 0x04 0x60 0x3E 0x2C 0xC1 0x00 0x4E 0x99 0x00 0x13 0x2C;\n+            0xC0 0x00 0x4E 0x3A 0x05 0x19 0x05 0xB6 0x00 0x50 0x36 0x04;\n+            0x15 0x04 0xAC 0x1D 0x05 0x68 0x36 0x04 0xA7 0x00 0x3C 0x1B;\n+            0x02 0xA0 0x00 0x15 0x1B 0x74 0x3E 0x1D 0x06 0x60 0x36 0x04;\n+            0xBB 0x00 0x54 0x59 0x12 0x56 0xB7 0x00 0x58 0xBF 0x03 0x36;\n+            0x06 0x15 0x06 0x05 0xA2 0x00 0x1C 0x1D 0x15 0x06 0x60 0x3E;\n+            0x1D 0x04 0xA4 0x00 0x0C 0x1D 0x15 0x06 0x64 0x36 0x04 0xA7;\n+            0x00 0x09 0x84 0x06 0x01 0xA7 0xFF 0xE4 0xA7 0x00 0x0E 0x3A;\n+            0x06 0x19 0x06 0x3A 0x05 0x1D 0x08 0x60 0x36 0x04 0x1D 0x15;\n+            0x04 0x60 0xAC;\n+          }\n+          [] {                             \/\/ Traps\n+               8   38  107  84;\n+              39  104  107  84;\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#120) {                   \/\/ StackMapTable\n+              [] {                         \/\/ \n+                254b, 39, []z{I; I; O,#2};  \/\/ append_frame 3\n+                7b;                        \/\/ same_frame\n+                22b;                       \/\/ same_frame\n+                246b, []{#11; #16; #26; #112}, {  \/\/ early_larval_frame\n+                  252b, 2, []z{I};         \/\/ append_frame 1\n+                };\n+                24b;                       \/\/ same_frame\n+                250b, 5;                   \/\/ chop_frame 1\n+                246b, []{#11; #16; #26; #112}, {  \/\/ early_larval_frame\n+                  66b, []z{O,#84};         \/\/ same_locals_1_stack_item_frame\n+                };\n+                10b;                       \/\/ same_frame\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #109;                                \/\/ name_index\n+      #110;                                \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#119) {                       \/\/ Code\n+          3;                               \/\/ max_stack\n+          6;                               \/\/ max_locals\n+          Bytes[]{\n+            0x03 0x3D 0x01 0x4E 0x03 0x36 0x04 0x1B 0x9E 0x00 0x11 0x12;\n+            0x5A 0x4E 0x04 0x36 0x04 0x2D 0xB6 0x00 0x50 0x3D 0xA7 0x00;\n+            0x11 0x1B 0x05 0x68 0x3D 0xBB 0x00 0x54 0x59 0x12 0x5C 0xB7;\n+            0x00 0x58 0xBF 0xA7 0x00 0x0E 0x3A 0x05 0x19 0x05 0x4E 0x03;\n+            0x36 0x04 0x1B 0x74 0x3D 0x15 0x04 0x99 0x00 0x07 0x1C 0x04;\n+            0x60 0xAC 0xB2 0x00 0x18 0x12 0x5E 0xB6 0x00 0x20 0x1C 0xAC;\n+          }\n+          [] {                             \/\/ Traps\n+               7   39   42  84;\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#120) {                   \/\/ StackMapTable\n+              [] {                         \/\/ \n+                246b, []{#11; #16; #26; #112}, {  \/\/ early_larval_frame\n+                  254b, 25, []z{I; O,#2; I};  \/\/ append_frame 3\n+                };\n+                246b, []{#11; #16; #26}, {  \/\/ early_larval_frame\n+                  13b;                     \/\/ same_frame\n+                };\n+                246b, []{#11; #16}, {      \/\/ early_larval_frame\n+                  66b, []z{O,#84};         \/\/ same_locals_1_stack_item_frame\n+                };\n+                246b, []{#11}, {           \/\/ early_larval_frame\n+                  10b;                     \/\/ same_frame\n+                };\n+                246b, []{}, {              \/\/ early_larval_frame\n+                  8b;                      \/\/ same_frame\n+                };\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0009;                              \/\/ access\n+      #123;                                \/\/ name_index\n+      #124;                                \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#119) {                       \/\/ Code\n+          3;                               \/\/ max_stack\n+          3;                               \/\/ max_locals\n+          Bytes[]{\n+            0xBB 0x00 0x0A 0x59 0xB7 0x00 0x60 0x4C 0x03 0x3D 0x1C 0x10;\n+            0x06 0xA3 0x00 0x0E 0x2B 0x1C 0xB6 0x00 0x61 0x84 0x02 0x01;\n+            0xA7 0xFF 0xF2 0x2B 0x03 0x12 0x65 0xB6 0x00 0x67 0x57 0x2B;\n+            0x10 0x17 0xB6 0x00 0x6B 0x57 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#120) {                   \/\/ StackMapTable\n+              [] {                         \/\/ \n+                246b, []{}, {              \/\/ early_larval_frame\n+                  253b, 10, []z{O,#10; I};  \/\/ append_frame 2\n+                };\n+                250b, 16;                  \/\/ chop_frame 1\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0008;                              \/\/ access\n+      #125;                                \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#119) {                       \/\/ Code\n+          2;                               \/\/ max_stack\n+          0;                               \/\/ max_locals\n+          Bytes[]{\n+            0x0A 0xB3 0x00 0x6F 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#126) {                           \/\/ BootstrapMethods\n+      [] {                                 \/\/ bootstrap_methods\n+        {                                  \/\/ bootstrap_method\n+          #137;                            \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #127;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #137;                            \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #129;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #137;                            \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #131;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #137;                            \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #133;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #137;                            \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #135;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+      }\n+    }                                      \/\/ end of BootstrapMethods\n+    ;\n+    Attr(#143) {                           \/\/ InnerClasses\n+      [] {                                 \/\/ classes\n+         #144  #146  #148  25;\n+      }\n+    }                                      \/\/ end of InnerClasses\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/org\/openjdk\/asmtools\/attribute\/StackMapTable\/StackMapData.jcod","additions":520,"deletions":0,"binary":false,"changes":520,"status":"added"},{"patch":"@@ -0,0 +1,644 @@\n+package org\/openjdk\/asmtools\/attribute\/StackMapTable\/data;\n+\n+public super class StackMapData version 69:0\n+{\n+  static final Field fldI:I = int 0;\n+  static Field fldL:J;\n+  protected Field fldS:\"Ljava\/lang\/String;\";\n+  public final Field fldFS:\"Ljava\/lang\/String;\" = String \"string\";\n+\n+  public Method \"<init>\":\"()V\" \n+    stack 2  locals 1\n+  {\n+         aload_0;\n+         invokespecial     Method java\/lang\/Object.\"<init>\":\"()V\";\n+         aload_0;\n+         ldc               String \"string\";\n+         putfield          Field fldS:\"Ljava\/lang\/String;\";\n+         aload_0;\n+         ldc               String \"string\";\n+         putfield          Field fldFS:\"Ljava\/lang\/String;\";\n+         return;\n+  }\n+\n+  public Method generateFrames:\"(I)V\" \n+    stack 5  locals 10\n+  {\n+         iconst_0;\n+         istore_2;\n+         aconst_null;\n+         astore_3;\n+         try               T0, T1;\n+         iconst_1;\n+         iload_2;\n+         idiv;\n+         istore_2;\n+         endtry            T0,T1;\n+         aload_3;\n+         invokevirtual     Method java\/lang\/Object.toString:\"()Ljava\/lang\/String;\";\n+         pop;\n+         goto              L44;\n+         catch             T0 java\/lang\/ArithmeticException;\n+         try               T2;\n+         astore            4;\n+         new               class java\/lang\/Object;\n+         dup;\n+         invokespecial     Method java\/lang\/Object.\"<init>\":\"()V\";\n+         astore_3;\n+         endtry            T2;\n+         aload_3;\n+         invokevirtual     Method java\/lang\/Object.toString:\"()Ljava\/lang\/String;\";\n+         pop;\n+         goto              L44;\n+         catch             T1 #0;\n+         catch             T2 #0;\n+         catch             T3 #0;\n+         try               T3;\n+         astore            5;\n+         endtry            T3;\n+         aload_3;\n+         invokevirtual     Method java\/lang\/Object.toString:\"()Ljava\/lang\/String;\";\n+         pop;\n+         aload             5;\n+         athrow;\n+  L44:   iload_2;\n+         ifne              L50;\n+         aconst_null;\n+         astore_3;\n+  L50:   iload_2;\n+         lookupswitch      { \n+              1:      L76;\n+              2:      L87;\n+             default: L87  };\n+  L76:   new               class java\/lang\/Object;\n+         dup;\n+         invokespecial     Method java\/lang\/Object.\"<init>\":\"()V\";\n+         astore_3;\n+         goto              L87;\n+  L87:   iload_1;\n+         ifne              L99;\n+         getstatic         Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\";\n+         ldc               String \"frame\";\n+         invokevirtual     Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\";\n+  L99:   iload_1;\n+         iconst_1;\n+         if_icmpne         L127;\n+         bipush            42;\n+         istore            4;\n+         getstatic         Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\";\n+         iload             4;\n+         ldc               float 100.0f;\n+         invokestatic      Method java\/lang\/Math.round:\"(F)I\";\n+         imul;\n+         invokedynamic     InvokeDynamic REF_invokeStatic:Method java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                           \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\":\n+                           makeConcatWithConstants:\"(I)Ljava\/lang\/String;\" {\n+                             String \"item_frame\\u0001\"\n+                           };\n+         invokevirtual     Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\";\n+  L127:  iload_1;\n+         iconst_2;\n+         if_icmpne         L184;\n+         iconst_0;\n+         istore            4;\n+         iconst_0;\n+         istore            5;\n+  L138:  iload             5;\n+         sipush            3000;\n+         if_icmpge         L171;\n+         ldc               float 3.14f;\n+         fstore            6;\n+         iload             4;\n+         fload             6;\n+         ldc               float 100.0f;\n+         invokestatic      Method java\/lang\/Math.round:\"(F)I\";\n+         i2f;\n+         fmul;\n+         f2i;\n+         iadd;\n+         istore            4;\n+         iinc              5, 1;\n+         goto              L138;\n+  L171:  getstatic         Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\";\n+         iload             4;\n+         invokedynamic     InvokeDynamic REF_invokeStatic:Method java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                           \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\":\n+                           makeConcatWithConstants:\"(I)Ljava\/lang\/String;\" {\n+                             String \"item_frame_\\u0001\"\n+                           };\n+         invokevirtual     Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\";\n+  L184:  ldc               float 10.0f;\n+         invokestatic      Method java\/lang\/Math.round:\"(F)I\";\n+         istore            4;\n+         iload_1;\n+         iconst_3;\n+         if_icmpne         L232;\n+         ldc               float 110.0f;\n+         invokestatic      Method java\/lang\/Math.round:\"(F)I\";\n+         istore            5;\n+         ldc2_w            double 100.0d;\n+         invokestatic      Method java\/lang\/Math.round:\"(D)J\";\n+         lstore            6;\n+         getstatic         Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\";\n+         iload             5;\n+         i2l;\n+         lload             6;\n+         ladd;\n+         iload             4;\n+         i2l;\n+         lmul;\n+         invokedynamic     InvokeDynamic REF_invokeStatic:Method java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                           \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\":\n+                           makeConcatWithConstants:\"(J)Ljava\/lang\/String;\" {\n+                             String \"_frame: \\u0001\"\n+                           };\n+         invokevirtual     Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\";\n+  L232:  iload_1;\n+         iconst_4;\n+         if_icmpne         L273;\n+         bipush            50;\n+         iload             4;\n+         imul;\n+         istore            5;\n+         ldc2_w            double 99.99d;\n+         iload             4;\n+         i2d;\n+         dmul;\n+         dstore            6;\n+         getstatic         Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\";\n+         iload             5;\n+         i2d;\n+         dload             6;\n+         dadd;\n+         invokedynamic     InvokeDynamic REF_invokeStatic:Method java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                           \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\":\n+                           makeConcatWithConstants:\"(D)Ljava\/lang\/String;\" {\n+                             String \"Before chop_frame: \\u0001\"\n+                           };\n+         invokevirtual     Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\";\n+         goto              L281;\n+  L273:  getstatic         Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\";\n+         ldc               String \"chop_frame\";\n+         invokevirtual     Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\";\n+  L281:  iload_1;\n+         iconst_5;\n+         if_icmpne         L379;\n+         iconst_0;\n+         istore            5;\n+         iconst_0;\n+         istore            6;\n+  L292:  iload             6;\n+         sipush            2500;\n+         if_icmpge         L326;\n+         ldc               float 3.14f;\n+         fstore            7;\n+         iload             5;\n+         fload             7;\n+         iload             6;\n+         i2f;\n+         invokestatic      Method java\/lang\/Math.round:\"(F)I\";\n+         i2f;\n+         fmul;\n+         f2i;\n+         iadd;\n+         istore            5;\n+         iinc              6, 1;\n+         goto              L292;\n+  L326:  iload             5;\n+         bipush            100;\n+         if_icmple         L344;\n+         getstatic         Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\";\n+         ldc               String \"_frame_\";\n+         invokevirtual     Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\";\n+         goto              L379;\n+  L344:  iload             5;\n+         bipush            50;\n+         if_icmpge         L379;\n+         bipush            50;\n+         iload             4;\n+         imul;\n+         istore            6;\n+         ldc2_w            double 99.99d;\n+         iload             4;\n+         i2d;\n+         dmul;\n+         dstore            7;\n+         getstatic         Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\";\n+         iload             6;\n+         i2d;\n+         dload             7;\n+         dadd;\n+         invokevirtual     Method java\/io\/PrintStream.println:\"(D)V\";\n+  L379:  iload_1;\n+         bipush            6;\n+         if_icmpne         L414;\n+         ldc               String \"n_frame\";\n+         astore            5;\n+         bipush            70;\n+         istore            6;\n+         bipush            100;\n+         istore            7;\n+         getstatic         Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\";\n+         aload             5;\n+         iload             6;\n+         iload             7;\n+         invokedynamic     InvokeDynamic REF_invokeStatic:Method java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                           \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\":\n+                           makeConcatWithConstants:\"(Ljava\/lang\/String;CI)Ljava\/lang\/String;\" {\n+                             String \"\\u0001: \\u0001\\u0001\"\n+                           };\n+         invokevirtual     Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\";\n+  L414:  iconst_0;\n+         istore            5;\n+         aconst_null;\n+         astore            6;\n+         try               T4, T5;\n+         iconst_1;\n+         iload             5;\n+         idiv;\n+         istore            5;\n+         endtry            T4,T5;\n+         aload             6;\n+         invokevirtual     Method java\/lang\/Object.toString:\"()Ljava\/lang\/String;\";\n+         pop;\n+         goto              L466;\n+         catch             T4 java\/lang\/ArithmeticException;\n+         try               T6;\n+         astore            7;\n+         new               class java\/lang\/Object;\n+         dup;\n+         invokespecial     Method java\/lang\/Object.\"<init>\":\"()V\";\n+         astore            6;\n+         endtry            T6;\n+         aload             6;\n+         invokevirtual     Method java\/lang\/Object.toString:\"()Ljava\/lang\/String;\";\n+         pop;\n+         goto              L466;\n+         catch             T5 #0;\n+         catch             T6 #0;\n+         catch             T7 #0;\n+         try               T7;\n+         astore            9;\n+         endtry            T7;\n+         aload             6;\n+         invokevirtual     Method java\/lang\/Object.toString:\"()Ljava\/lang\/String;\";\n+         pop;\n+         aload             9;\n+         athrow;\n+  L466:  iload             5;\n+         ifne              L474;\n+         aconst_null;\n+         astore            6;\n+  L474:  iload_2;\n+         lookupswitch      { \n+              1:      L500;\n+              2:      L512;\n+             default: L512 };\n+  L500:  new               class java\/lang\/Object;\n+         dup;\n+         invokespecial     Method java\/lang\/Object.\"<init>\":\"()V\";\n+         astore            6;\n+         goto              L512;\n+  L512:  return;\n+    StackMapTable: number_of_entries = 25\n+         frame_type = 246   \/\/ early_larval\n+           unset_fields = [ fldS:\"Ljava\/lang\/String;\",\n+                            fldFS:\"Ljava\/lang\/String;\"; ] {\n+           frame_type = 255 \/\/ full\n+             offset_delta = 16\n+             stack_map  = [ class java\/lang\/ArithmeticException; ]\n+             locals_map = [ class StackMapData, int, int, class java\/lang\/Object; ]\n+         }\n+         frame_type = 246   \/\/ early_larval\n+           unset_fields = [ fldS:\"Ljava\/lang\/String;\",\n+                            fldFS:\"Ljava\/lang\/String;\"; ] {\n+           frame_type = 81  \/\/ same_locals_1_stack_item\n+             stack_map  = [ class java\/lang\/Throwable; ]\n+         }\n+         frame_type = 246   \/\/ early_larval\n+           unset_fields = [ out:\"Ljava\/io\/PrintStream;\",\n+                            fldFS:\"Ljava\/lang\/String;\"; ] {\n+           frame_type = 9   \/\/ same\n+         }\n+         frame_type = 5     \/\/ same\n+         frame_type = 25    \/\/ same\n+         frame_type = 10    \/\/ same\n+         frame_type = 11    \/\/ same\n+         frame_type = 27    \/\/ same\n+         frame_type = 246   \/\/ early_larval\n+           unset_fields = [ ] {\n+           frame_type = 253 \/\/ append\n+             offset_delta = 10\n+             locals_map = [ int, int; ]\n+         }\n+         frame_type = 250   \/\/ chop1\n+           offset_delta = 32\n+         frame_type = 250   \/\/ chop1\n+           offset_delta = 12\n+         frame_type = 252   \/\/ append\n+           offset_delta = 47\n+           locals_map   = [ int; ]\n+         frame_type = 40    \/\/ same\n+         frame_type = 7     \/\/ same\n+         frame_type = 253   \/\/ append\n+           offset_delta = 10\n+           locals_map   = [ int, int; ]\n+         frame_type = 246   \/\/ early_larval\n+           unset_fields = [ ] {\n+           frame_type = 250 \/\/ chop1\n+             offset_delta = 33\n+         }\n+         frame_type = 17    \/\/ same\n+         frame_type = 250   \/\/ chop1\n+           offset_delta = 34\n+         frame_type = 34    \/\/ same\n+         frame_type = 255   \/\/ full\n+           offset_delta = 20\n+           stack_map    = [ class java\/lang\/ArithmeticException; ]\n+           locals_map   = [ class StackMapData, int, int, class java\/lang\/Object, int, int, class java\/lang\/Object; ]\n+         frame_type = 83    \/\/ same_locals_1_stack_item\n+           stack_map    = [ class java\/lang\/Throwable; ]\n+         frame_type = 10    \/\/ same\n+         frame_type = 7     \/\/ same\n+         frame_type = 25    \/\/ same\n+         frame_type = 246   \/\/ early_larval\n+           unset_fields = [ fldS:\"Ljava\/lang\/String;\",\n+                            fldFS:\"Ljava\/lang\/String;\",\n+                            out:\"Ljava\/io\/PrintStream;\",\n+                            fldL:\"J\"; ] {\n+           frame_type = 11  \/\/ same\n+         }\n+  }\n+\n+  public Method complexMethod:\"(ILjava\/lang\/Object;)I\" \n+    stack 3  locals 7\n+  {\n+         iconst_0;\n+         istore_3;\n+         iconst_1;\n+         istore            4;\n+         aconst_null;\n+         astore            5;\n+         try               T0;\n+         iload_1;\n+         ifle              L47;\n+         iload_1;\n+         iconst_1;\n+         iadd;\n+         istore_3;\n+         aload_2;\n+         instanceof        class java\/lang\/String;\n+         ifeq              L39;\n+         aload_2;\n+         checkcast         class java\/lang\/String;\n+         astore            5;\n+         aload             5;\n+         invokevirtual     Method java\/lang\/Object.hashCode:\"()I\";\n+         istore            4;\n+         iload             4;\n+         endtry            T0;\n+         ireturn;\n+         try               T1;\n+  L39:   iload_3;\n+         iconst_2;\n+         imul;\n+         istore            4;\n+         goto              L104;\n+  L47:   iload_1;\n+         iconst_m1;\n+         if_icmpne         L70;\n+         iload_1;\n+         ineg;\n+         istore_3;\n+         iload_3;\n+         iconst_3;\n+         iadd;\n+         istore            4;\n+         new               class java\/lang\/RuntimeException;\n+         dup;\n+         ldc               String \"Test exception\";\n+         invokespecial     Method java\/lang\/RuntimeException.\"<init>\":\"(Ljava\/lang\/String;)V\";\n+         athrow;\n+  L70:   iconst_0;\n+         istore            6;\n+  L73:   iload             6;\n+         iconst_2;\n+         if_icmpge         L104;\n+         iload_3;\n+         iload             6;\n+         iadd;\n+         istore_3;\n+         iload_3;\n+         iconst_1;\n+         if_icmple         L98;\n+         iload_3;\n+         iload             6;\n+         isub;\n+         istore            4;\n+         goto              L104;\n+  L98:   iinc              6, 1;\n+         goto              L73;\n+         endtry            T1;\n+  L104:  goto              L118;\n+         catch             T0 java\/lang\/RuntimeException;\n+         catch             T1 java\/lang\/RuntimeException;\n+         astore            6;\n+         aload             6;\n+         astore            5;\n+         iload_3;\n+         iconst_5;\n+         iadd;\n+         istore            4;\n+  L118:  iload_3;\n+         iload             4;\n+         iadd;\n+         ireturn;\n+    StackMapTable: number_of_entries = 8\n+         frame_type = 254   \/\/ append\n+           offset_delta = 39\n+           locals_map   = [ int, int, class java\/lang\/Object; ]\n+         frame_type = 7     \/\/ same\n+         frame_type = 22    \/\/ same\n+         frame_type = 246   \/\/ early_larval\n+           unset_fields = [ fldS:\"Ljava\/lang\/String;\",\n+                            fldFS:\"Ljava\/lang\/String;\",\n+                            out:\"Ljava\/io\/PrintStream;\",\n+                            fldL:\"J\"; ] {\n+           frame_type = 252 \/\/ append\n+             offset_delta = 2\n+             locals_map = [ int; ]\n+         }\n+         frame_type = 24    \/\/ same\n+         frame_type = 250   \/\/ chop1\n+           offset_delta = 5\n+         frame_type = 246   \/\/ early_larval\n+           unset_fields = [ fldS:\"Ljava\/lang\/String;\",\n+                            fldFS:\"Ljava\/lang\/String;\",\n+                            out:\"Ljava\/io\/PrintStream;\",\n+                            fldL:\"J\"; ] {\n+           frame_type = 66  \/\/ same_locals_1_stack_item\n+             stack_map  = [ class java\/lang\/RuntimeException; ]\n+         }\n+         frame_type = 10    \/\/ same\n+  }\n+\n+  public Method generateFullFrame:\"(I)I\" \n+    stack 3  locals 6\n+  {\n+         iconst_0;\n+         istore_2;\n+         aconst_null;\n+         astore_3;\n+         iconst_0;\n+         istore            4;\n+         try               T0;\n+         iload_1;\n+         ifle              L25;\n+         ldc               String \"positive\";\n+         astore_3;\n+         iconst_1;\n+         istore            4;\n+         aload_3;\n+         invokevirtual     Method java\/lang\/Object.hashCode:\"()I\";\n+         istore_2;\n+         goto              L39;\n+  L25:   iload_1;\n+         iconst_2;\n+         imul;\n+         istore_2;\n+         new               class java\/lang\/RuntimeException;\n+         dup;\n+         ldc               String \"non-positive\";\n+         invokespecial     Method java\/lang\/RuntimeException.\"<init>\":\"(Ljava\/lang\/String;)V\";\n+         athrow;\n+         endtry            T0;\n+  L39:   goto              L53;\n+         catch             T0 java\/lang\/RuntimeException;\n+         astore            5;\n+         aload             5;\n+         astore_3;\n+         iconst_0;\n+         istore            4;\n+         iload_1;\n+         ineg;\n+         istore_2;\n+  L53:   iload             4;\n+         ifeq              L62;\n+         iload_2;\n+         iconst_1;\n+         iadd;\n+         ireturn;\n+  L62:   getstatic         Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\";\n+         ldc               String \"Computing result\";\n+         invokevirtual     Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\";\n+         iload_2;\n+         ireturn;\n+    StackMapTable: number_of_entries = 5\n+         frame_type = 246   \/\/ early_larval\n+           unset_fields = [ fldS:\"Ljava\/lang\/String;\",\n+                            fldFS:\"Ljava\/lang\/String;\",\n+                            out:\"Ljava\/io\/PrintStream;\",\n+                            fldL:\"J\"; ] {\n+           frame_type = 254 \/\/ append\n+             offset_delta = 25\n+             locals_map = [ int, class java\/lang\/Object, int; ]\n+         }\n+         frame_type = 246   \/\/ early_larval\n+           unset_fields = [ fldS:\"Ljava\/lang\/String;\",\n+                            fldFS:\"Ljava\/lang\/String;\",\n+                            out:\"Ljava\/io\/PrintStream;\"; ] {\n+           frame_type = 13  \/\/ same\n+         }\n+         frame_type = 246   \/\/ early_larval\n+           unset_fields = [ fldS:\"Ljava\/lang\/String;\",\n+                            fldFS:\"Ljava\/lang\/String;\"; ] {\n+           frame_type = 66  \/\/ same_locals_1_stack_item\n+             stack_map  = [ class java\/lang\/RuntimeException; ]\n+         }\n+         frame_type = 246   \/\/ early_larval\n+           unset_fields = [ fldS:\"Ljava\/lang\/String;\"; ] {\n+           frame_type = 10  \/\/ same\n+         }\n+         frame_type = 246   \/\/ early_larval\n+           unset_fields = [ ] {\n+           frame_type = 8   \/\/ same\n+         }\n+  }\n+\n+  public static Method main:\"([Ljava\/lang\/String;)V\" \n+    stack 3  locals 3\n+  {\n+         new               class StackMapData;\n+         dup;\n+         invokespecial     Method \"<init>\":\"()V\";\n+         astore_1;\n+         iconst_0;\n+         istore_2;\n+  L10:   iload_2;\n+         bipush            6;\n+         if_icmpgt         L27;\n+         aload_1;\n+         iload_2;\n+         invokevirtual     Method generateFrames:\"(I)V\";\n+         iinc              2, 1;\n+         goto              L10;\n+  L27:   aload_1;\n+         iconst_0;\n+         ldc               String \"test\";\n+         invokevirtual     Method complexMethod:\"(ILjava\/lang\/Object;)I\";\n+         pop;\n+         aload_1;\n+         bipush            23;\n+         invokevirtual     Method generateFullFrame:\"(I)I\";\n+         pop;\n+         return;\n+    StackMapTable: number_of_entries = 2\n+         frame_type = 246   \/\/ early_larval\n+           unset_fields = [ ] {\n+           frame_type = 253 \/\/ append\n+             offset_delta = 10\n+             locals_map = [ class StackMapData, int; ]\n+         }\n+         frame_type = 250   \/\/ chop1\n+           offset_delta = 16\n+  }\n+\n+  static Method \"<clinit>\":\"()V\" \n+    stack 2  locals 0\n+  {\n+         lconst_1;\n+         putstatic         Field fldL:\"J\";\n+         return;\n+  }\n+\n+  InnerClasses {\n+    public static final Lookup = class java\/lang\/invoke\/MethodHandles$Lookup of class java\/lang\/invoke\/MethodHandles;\n+  }\n+\n+  BootstrapMethods {\n+     0:  REF_invokeStatic:java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+         \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";\n+     Arguments:\n+         String \"item_frame\\u0001\";\n+\n+     1:  REF_invokeStatic:java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+         \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";\n+     Arguments:\n+         String \"item_frame_\\u0001\";\n+\n+     2:  REF_invokeStatic:java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+         \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";\n+     Arguments:\n+         String \"_frame: \\u0001\";\n+\n+     3:  REF_invokeStatic:java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+         \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";\n+     Arguments:\n+         String \"Before chop_frame: \\u0001\";\n+\n+     4:  REF_invokeStatic:java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+         \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";\n+     Arguments:\n+         String \"\\u0001: \\u0001\\u0001\";\n+  }\n+} \/\/ end Class org\/openjdk\/asmtools\/attribute\/StackMapTable\/data\/StackMapData\n","filename":"test\/resources\/org\/openjdk\/asmtools\/attribute\/StackMapTable\/StackMapData.t.jasm","additions":644,"deletions":0,"binary":false,"changes":644,"status":"added"},{"patch":"@@ -0,0 +1,759 @@\n+package org\/openjdk\/asmtools\/attribute\/StackMapTable\/data;\n+\n+public super class #10 \/* StackMapData01 *\/ version 69:0\n+{\n+  const #1    = Method        #2.#3;               \/\/ java\/lang\/Object.\"<init>\":\"()V\"\n+  const #2    = class         #4;                  \/\/ java\/lang\/Object\n+  const #3    = NameAndType   #5:#6;               \/\/ \"<init>\":\"()V\"\n+  const #4    = Utf8          \"java\/lang\/Object\";\n+  const #5    = Utf8          \"<init>\";\n+  const #6    = Utf8          \"()V\";\n+  const #7    = String        #8;                  \/\/ \"string\"\n+  const #8    = Utf8          \"string\";\n+  const #9    = Field         #10.#11;             \/\/ StackMapData01.fldS:\"Ljava\/lang\/String;\"\n+  const #10   = class         #12;                 \/\/ StackMapData01\n+  const #11   = NameAndType   #13:#14;             \/\/ fldS:\"Ljava\/lang\/String;\"\n+  const #12   = Utf8          \"org\/openjdk\/asmtools\/attribute\/StackMapTable\/data\/StackMapData01\";\n+  const #13   = Utf8          \"fldS\";\n+  const #14   = Utf8          \"Ljava\/lang\/String;\";\n+  const #15   = Field         #10.#16;             \/\/ StackMapData01.fldFS:\"Ljava\/lang\/String;\"\n+  const #16   = NameAndType   #17:#14;             \/\/ fldFS:\"Ljava\/lang\/String;\"\n+  const #17   = Utf8          \"fldFS\";\n+  const #18   = Method        #2.#19;              \/\/ java\/lang\/Object.toString:\"()Ljava\/lang\/String;\"\n+  const #19   = NameAndType   #20:#21;             \/\/ toString:\"()Ljava\/lang\/String;\"\n+  const #20   = Utf8          \"toString\";\n+  const #21   = Utf8          \"()Ljava\/lang\/String;\";\n+  const #22   = class         #23;                 \/\/ java\/lang\/ArithmeticException\n+  const #23   = Utf8          \"java\/lang\/ArithmeticException\";\n+  const #24   = Field         #25.#26;             \/\/ java\/lang\/System.out:\"Ljava\/io\/PrintStream;\"\n+  const #25   = class         #27;                 \/\/ java\/lang\/System\n+  const #26   = NameAndType   #28:#29;             \/\/ out:\"Ljava\/io\/PrintStream;\"\n+  const #27   = Utf8          \"java\/lang\/System\";\n+  const #28   = Utf8          \"out\";\n+  const #29   = Utf8          \"Ljava\/io\/PrintStream;\";\n+  const #30   = String        #31;                 \/\/ \"frame\"\n+  const #31   = Utf8          \"frame\";\n+  const #32   = Method        #33.#34;             \/\/ java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\"\n+  const #33   = class         #35;                 \/\/ java\/io\/PrintStream\n+  const #34   = NameAndType   #36:#37;             \/\/ println:\"(Ljava\/lang\/String;)V\"\n+  const #35   = Utf8          \"java\/io\/PrintStream\";\n+  const #36   = Utf8          \"println\";\n+  const #37   = Utf8          \"(Ljava\/lang\/String;)V\";\n+  const #38   = float         100.0f;\n+  const #39   = Method        #40.#41;             \/\/ java\/lang\/Math.round:\"(F)I\"\n+  const #40   = class         #42;                 \/\/ java\/lang\/Math\n+  const #41   = NameAndType   #43:#44;             \/\/ round:\"(F)I\"\n+  const #42   = Utf8          \"java\/lang\/Math\";\n+  const #43   = Utf8          \"round\";\n+  const #44   = Utf8          \"(F)I\";\n+  const #45   = InvokeDynamic 0:#46;               \/\/ #0:makeConcatWithConstants:\"(I)Ljava\/lang\/String;\"\n+  const #46   = NameAndType   #47:#48;             \/\/ makeConcatWithConstants:\"(I)Ljava\/lang\/String;\"\n+  const #47   = Utf8          \"makeConcatWithConstants\";\n+  const #48   = Utf8          \"(I)Ljava\/lang\/String;\";\n+  const #49   = float         3.14f;\n+  const #50   = InvokeDynamic 1:#46;               \/\/ #1:makeConcatWithConstants:\"(I)Ljava\/lang\/String;\"\n+  const #51   = float         10.0f;\n+  const #52   = float         110.0f;\n+  const #53   = double        100.0d;\n+  const #55   = Method        #40.#56;             \/\/ java\/lang\/Math.round:\"(D)J\"\n+  const #56   = NameAndType   #43:#57;             \/\/ round:\"(D)J\"\n+  const #57   = Utf8          \"(D)J\";\n+  const #58   = InvokeDynamic 2:#59;               \/\/ #2:makeConcatWithConstants:\"(J)Ljava\/lang\/String;\"\n+  const #59   = NameAndType   #47:#60;             \/\/ makeConcatWithConstants:\"(J)Ljava\/lang\/String;\"\n+  const #60   = Utf8          \"(J)Ljava\/lang\/String;\";\n+  const #61   = double        99.99d;\n+  const #63   = InvokeDynamic 3:#64;               \/\/ #3:makeConcatWithConstants:\"(D)Ljava\/lang\/String;\"\n+  const #64   = NameAndType   #47:#65;             \/\/ makeConcatWithConstants:\"(D)Ljava\/lang\/String;\"\n+  const #65   = Utf8          \"(D)Ljava\/lang\/String;\";\n+  const #66   = String        #67;                 \/\/ \"chop_frame\"\n+  const #67   = Utf8          \"chop_frame\";\n+  const #68   = String        #69;                 \/\/ \"_frame_\"\n+  const #69   = Utf8          \"_frame_\";\n+  const #70   = Method        #33.#71;             \/\/ java\/io\/PrintStream.println:\"(D)V\"\n+  const #71   = NameAndType   #36:#72;             \/\/ println:\"(D)V\"\n+  const #72   = Utf8          \"(D)V\";\n+  const #73   = String        #74;                 \/\/ \"n_frame\"\n+  const #74   = Utf8          \"n_frame\";\n+  const #75   = InvokeDynamic 4:#76;               \/\/ #4:makeConcatWithConstants:\"(Ljava\/lang\/String;CI)Ljava\/lang\/String;\"\n+  const #76   = NameAndType   #47:#77;             \/\/ makeConcatWithConstants:\"(Ljava\/lang\/String;CI)Ljava\/lang\/String;\"\n+  const #77   = Utf8          \"(Ljava\/lang\/String;CI)Ljava\/lang\/String;\";\n+  const #78   = class         #79;                 \/\/ java\/lang\/String\n+  const #79   = Utf8          \"java\/lang\/String\";\n+  const #80   = Method        #2.#81;              \/\/ java\/lang\/Object.hashCode:\"()I\"\n+  const #81   = NameAndType   #82:#83;             \/\/ hashCode:\"()I\"\n+  const #82   = Utf8          \"hashCode\";\n+  const #83   = Utf8          \"()I\";\n+  const #84   = class         #85;                 \/\/ java\/lang\/RuntimeException\n+  const #85   = Utf8          \"java\/lang\/RuntimeException\";\n+  const #86   = String        #87;                 \/\/ \"Test exception\"\n+  const #87   = Utf8          \"Test exception\";\n+  const #88   = Method        #84.#89;             \/\/ java\/lang\/RuntimeException.\"<init>\":\"(Ljava\/lang\/String;)V\"\n+  const #89   = NameAndType   #5:#37;              \/\/ \"<init>\":\"(Ljava\/lang\/String;)V\"\n+  const #90   = String        #91;                 \/\/ \"positive\"\n+  const #91   = Utf8          \"positive\";\n+  const #92   = String        #93;                 \/\/ \"non-positive\"\n+  const #93   = Utf8          \"non-positive\";\n+  const #94   = String        #95;                 \/\/ \"Computing result\"\n+  const #95   = Utf8          \"Computing result\";\n+  const #96   = Method        #10.#3;              \/\/ StackMapData01.\"<init>\":\"()V\"\n+  const #97   = Method        #10.#98;             \/\/ StackMapData01.generateFrames:\"(I)V\"\n+  const #98   = NameAndType   #99:#100;            \/\/ generateFrames:\"(I)V\"\n+  const #99   = Utf8          \"generateFrames\";\n+  const #100  = Utf8          \"(I)V\";\n+  const #101  = String        #102;                \/\/ \"test\"\n+  const #102  = Utf8          \"test\";\n+  const #103  = Method        #10.#104;            \/\/ StackMapData01.complexMethod:\"(ILjava\/lang\/Object;)I\"\n+  const #104  = NameAndType   #105:#106;           \/\/ complexMethod:\"(ILjava\/lang\/Object;)I\"\n+  const #105  = Utf8          \"complexMethod\";\n+  const #106  = Utf8          \"(ILjava\/lang\/Object;)I\";\n+  const #107  = Method        #10.#108;            \/\/ StackMapData01.generateFullFrame:\"(I)I\"\n+  const #108  = NameAndType   #109:#110;           \/\/ generateFullFrame:\"(I)I\"\n+  const #109  = Utf8          \"generateFullFrame\";\n+  const #110  = Utf8          \"(I)I\";\n+  const #111  = Field         #10.#112;            \/\/ StackMapData01.fldL:\"J\"\n+  const #112  = NameAndType   #113:#114;           \/\/ fldL:\"J\"\n+  const #113  = Utf8          \"fldL\";\n+  const #114  = Utf8          \"J\";\n+  const #115  = Utf8          \"fldI\";\n+  const #116  = Utf8          \"I\";\n+  const #117  = Utf8          \"ConstantValue\";\n+  const #118  = int           0;\n+  const #119  = Utf8          \"Code\";\n+  const #120  = Utf8          \"StackMapTable\";\n+  const #121  = class         #122;                \/\/ java\/lang\/Throwable\n+  const #122  = Utf8          \"java\/lang\/Throwable\";\n+  const #123  = Utf8          \"main\";\n+  const #124  = Utf8          \"([Ljava\/lang\/String;)V\";\n+  const #125  = Utf8          \"<clinit>\";\n+  const #126  = Utf8          \"BootstrapMethods\";\n+  const #127  = String        #128;                \/\/ \"item_frame\\u0001\"\n+  const #128  = Utf8          \"item_frame\\u0001\";\n+  const #129  = String        #130;                \/\/ \"item_frame_\\u0001\"\n+  const #130  = Utf8          \"item_frame_\\u0001\";\n+  const #131  = String        #132;                \/\/ \"_frame: \\u0001\"\n+  const #132  = Utf8          \"_frame: \\u0001\";\n+  const #133  = String        #134;                \/\/ \"Before chop_frame: \\u0001\"\n+  const #134  = Utf8          \"Before chop_frame: \\u0001\";\n+  const #135  = String        #136;                \/\/ \"\\u0001: \\u0001\\u0001\"\n+  const #136  = Utf8          \"\\u0001: \\u0001\\u0001\";\n+  const #137  = MethodHandle  6:#138;              \/\/ REF_invokeStatic:java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\"\n+  const #138  = Method        #139.#140;           \/\/ java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\"\n+  const #139  = class         #141;                \/\/ java\/lang\/invoke\/StringConcatFactory\n+  const #140  = NameAndType   #47:#142;            \/\/ makeConcatWithConstants:\"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\"\n+  const #141  = Utf8          \"java\/lang\/invoke\/StringConcatFactory\";\n+  const #142  = Utf8          \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";\n+  const #143  = Utf8          \"InnerClasses\";\n+  const #144  = class         #145;                \/\/ java\/lang\/invoke\/MethodHandles$Lookup\n+  const #145  = Utf8          \"java\/lang\/invoke\/MethodHandles$Lookup\";\n+  const #146  = class         #147;                \/\/ java\/lang\/invoke\/MethodHandles\n+  const #147  = Utf8          \"java\/lang\/invoke\/MethodHandles\";\n+  const #148  = Utf8          \"Lookup\";\n+\n+  static final Field #115:#116 = #118;             \/\/ fldI:I = int 0\n+  static Field #113:#114;                          \/\/ fldL:J\n+  protected Field #13:#14;                         \/\/ fldS:\"Ljava\/lang\/String;\"\n+  public final Field #17:#14 = #7;                 \/\/ fldFS:\"Ljava\/lang\/String;\" = String \"string\"\n+\n+  public Method #5:#6                              \/\/ \"<init>\":\"()V\"\n+    stack 2  locals 1\n+  {\n+     0:    aload_0;\n+     1:    invokespecial     #1;                   \/\/ Method java\/lang\/Object.\"<init>\":\"()V\"\n+     4:    aload_0;\n+     5:    ldc               #7;                   \/\/ String \"string\"\n+     7:    putfield          #9;                   \/\/ Field fldS:\"Ljava\/lang\/String;\"\n+    10:    aload_0;\n+    11:    ldc               #7;                   \/\/ String \"string\"\n+    13:    putfield          #15;                  \/\/ Field fldFS:\"Ljava\/lang\/String;\"\n+    16:    return;\n+  }\n+\n+  public Method #99:#100                           \/\/ generateFrames:\"(I)V\"\n+    stack 5  locals 10\n+  {\n+     0:    iconst_0;\n+     1:    istore_2;\n+     2:    aconst_null;\n+     3:    astore_3;\n+           try               T0, T1;\n+     4:    iconst_1;\n+     5:    iload_2;\n+     6:    idiv;\n+     7:    istore_2;\n+           endtry            T0,T1;\n+     8:    aload_3;\n+     9:    invokevirtual     #18;                  \/\/ Method java\/lang\/Object.toString:\"()Ljava\/lang\/String;\"\n+    12:    pop;\n+    13:    goto              44;\n+           catch             T0 #22;               \/\/ java\/lang\/ArithmeticException\n+           try               T2;\n+    16:    stack_frame_type  early_larval;         \/\/ frame_type 246\n+             unset_fields    #15,                  \/\/ Field #10.#16,\n+                             #16;                  \/\/ fldFS:\"Ljava\/lang\/String;\";\n+             frame_type      full;                 \/\/ frame_type 255\n+               locals_map    #10, 1, 1, #2;        \/\/ class StackMapData01, int, int, class java\/lang\/Object;\n+               stack_map     #22;                  \/\/ class java\/lang\/ArithmeticException;\n+           astore            4;\n+    18:    new               #2;                   \/\/ class java\/lang\/Object\n+    21:    dup;\n+    22:    invokespecial     #1;                   \/\/ Method java\/lang\/Object.\"<init>\":\"()V\"\n+    25:    astore_3;\n+           endtry            T2;\n+    26:    aload_3;\n+    27:    invokevirtual     #18;                  \/\/ Method java\/lang\/Object.toString:\"()Ljava\/lang\/String;\"\n+    30:    pop;\n+    31:    goto              44;\n+           catch             T1 #0;                \/\/ any\n+           catch             T2 #0;                \/\/ any\n+           catch             T3 #0;                \/\/ any\n+           try               T3;\n+    34:    stack_frame_type  early_larval;         \/\/ frame_type 246\n+             unset_fields    #11,                  \/\/ fldS:\"Ljava\/lang\/String;\",\n+                             #16;                  \/\/ fldFS:\"Ljava\/lang\/String;\";\n+             frame_type      stack1;               \/\/ frame_type 81\n+               stack_map     #121;                 \/\/ class java\/lang\/Throwable;\n+           astore            5;\n+           endtry            T3;\n+    36:    aload_3;\n+    37:    invokevirtual     #18;                  \/\/ Method java\/lang\/Object.toString:\"()Ljava\/lang\/String;\"\n+    40:    pop;\n+    41:    aload             5;\n+    43:    athrow;\n+    44:    stack_frame_type  early_larval;         \/\/ frame_type 246\n+             unset_fields    #26,                  \/\/ out:\"Ljava\/io\/PrintStream;\",\n+                             #16;                  \/\/ fldFS:\"Ljava\/lang\/String;\";\n+             frame_type      same;                 \/\/ frame_type 9\n+           iload_2;\n+    45:    ifne              50;\n+    48:    aconst_null;\n+    49:    astore_3;\n+    50:    stack_frame_type  same;                 \/\/ frame_type 5\n+           iload_2;\n+    51:    lookupswitch      {                     \/\/ 2\n+                1:      76;\n+                2:      87;\n+               default: 87   };\n+    76:    stack_frame_type  same;                 \/\/ frame_type 25\n+           new               #2;                   \/\/ class java\/lang\/Object\n+    79:    dup;\n+    80:    invokespecial     #1;                   \/\/ Method java\/lang\/Object.\"<init>\":\"()V\"\n+    83:    astore_3;\n+    84:    goto              87;\n+    87:    stack_frame_type  same;                 \/\/ frame_type 10\n+           iload_1;\n+    88:    ifne              99;\n+    91:    getstatic         #24;                  \/\/ Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\"\n+    94:    ldc               #30;                  \/\/ String \"frame\"\n+    96:    invokevirtual     #32;                  \/\/ Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\"\n+    99:    stack_frame_type  same;                 \/\/ frame_type 11\n+           iload_1;\n+    100:   iconst_1;\n+    101:   if_icmpne         127;\n+    104:   bipush            42;\n+    106:   istore            4;\n+    108:   getstatic         #24;                  \/\/ Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\"\n+    111:   iload             4;\n+    113:   ldc               #38;                  \/\/ float 100.0f\n+    115:   invokestatic      #39;                  \/\/ Method java\/lang\/Math.round:\"(F)I\"\n+    118:   imul;\n+    119:   invokedynamic     #45;                  \/\/ InvokeDynamic REF_invokeStatic:Method java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                                                   \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\":\n+                                                   \/\/ makeConcatWithConstants:\"(I)Ljava\/lang\/String;\" {\n+                                                   \/\/   String \"item_frame\\u0001\"\n+                                                   \/\/ }\n+    124:   invokevirtual     #32;                  \/\/ Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\"\n+    127:   stack_frame_type  same;                 \/\/ frame_type 27\n+           iload_1;\n+    128:   iconst_2;\n+    129:   if_icmpne         184;\n+    132:   iconst_0;\n+    133:   istore            4;\n+    135:   iconst_0;\n+    136:   istore            5;\n+    138:   stack_frame_type  early_larval;         \/\/ frame_type 246\n+             unset_fields;\n+             frame_type      append;               \/\/ frame_type 253\n+               locals_map    1, 1;                 \/\/ int, int;\n+           iload             5;\n+    140:   sipush            3000;\n+    143:   if_icmpge         171;\n+    146:   ldc               #49;                  \/\/ float 3.14f\n+    148:   fstore            6;\n+    150:   iload             4;\n+    152:   fload             6;\n+    154:   ldc               #38;                  \/\/ float 100.0f\n+    156:   invokestatic      #39;                  \/\/ Method java\/lang\/Math.round:\"(F)I\"\n+    159:   i2f;\n+    160:   fmul;\n+    161:   f2i;\n+    162:   iadd;\n+    163:   istore            4;\n+    165:   iinc              5, 1;\n+    168:   goto              138;\n+    171:   stack_frame_type  chop1;                \/\/ frame_type 250\n+           getstatic         #24;                  \/\/ Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\"\n+    174:   iload             4;\n+    176:   invokedynamic     #50;                  \/\/ InvokeDynamic REF_invokeStatic:Method java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                                                   \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\":\n+                                                   \/\/ makeConcatWithConstants:\"(I)Ljava\/lang\/String;\" {\n+                                                   \/\/   String \"item_frame_\\u0001\"\n+                                                   \/\/ }\n+    181:   invokevirtual     #32;                  \/\/ Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\"\n+    184:   stack_frame_type  chop1;                \/\/ frame_type 250\n+           ldc               #51;                  \/\/ float 10.0f\n+    186:   invokestatic      #39;                  \/\/ Method java\/lang\/Math.round:\"(F)I\"\n+    189:   istore            4;\n+    191:   iload_1;\n+    192:   iconst_3;\n+    193:   if_icmpne         232;\n+    196:   ldc               #52;                  \/\/ float 110.0f\n+    198:   invokestatic      #39;                  \/\/ Method java\/lang\/Math.round:\"(F)I\"\n+    201:   istore            5;\n+    203:   ldc2_w            #53;                  \/\/ double 100.0d\n+    206:   invokestatic      #55;                  \/\/ Method java\/lang\/Math.round:\"(D)J\"\n+    209:   lstore            6;\n+    211:   getstatic         #24;                  \/\/ Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\"\n+    214:   iload             5;\n+    216:   i2l;\n+    217:   lload             6;\n+    219:   ladd;\n+    220:   iload             4;\n+    222:   i2l;\n+    223:   lmul;\n+    224:   invokedynamic     #58;                  \/\/ InvokeDynamic REF_invokeStatic:Method java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                                                   \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\":\n+                                                   \/\/ makeConcatWithConstants:\"(J)Ljava\/lang\/String;\" {\n+                                                   \/\/   String \"_frame: \\u0001\"\n+                                                   \/\/ }\n+    229:   invokevirtual     #32;                  \/\/ Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\"\n+    232:   stack_frame_type  append;               \/\/ frame_type 252\n+             locals_map      1;                    \/\/ int;\n+           iload_1;\n+    233:   iconst_4;\n+    234:   if_icmpne         273;\n+    237:   bipush            50;\n+    239:   iload             4;\n+    241:   imul;\n+    242:   istore            5;\n+    244:   ldc2_w            #61;                  \/\/ double 99.99d\n+    247:   iload             4;\n+    249:   i2d;\n+    250:   dmul;\n+    251:   dstore            6;\n+    253:   getstatic         #24;                  \/\/ Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\"\n+    256:   iload             5;\n+    258:   i2d;\n+    259:   dload             6;\n+    261:   dadd;\n+    262:   invokedynamic     #63;                  \/\/ InvokeDynamic REF_invokeStatic:Method java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                                                   \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\":\n+                                                   \/\/ makeConcatWithConstants:\"(D)Ljava\/lang\/String;\" {\n+                                                   \/\/   String \"Before chop_frame: \\u0001\"\n+                                                   \/\/ }\n+    267:   invokevirtual     #32;                  \/\/ Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\"\n+    270:   goto              281;\n+    273:   stack_frame_type  same;                 \/\/ frame_type 40\n+           getstatic         #24;                  \/\/ Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\"\n+    276:   ldc               #66;                  \/\/ String \"chop_frame\"\n+    278:   invokevirtual     #32;                  \/\/ Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\"\n+    281:   stack_frame_type  same;                 \/\/ frame_type 7\n+           iload_1;\n+    282:   iconst_5;\n+    283:   if_icmpne         379;\n+    286:   iconst_0;\n+    287:   istore            5;\n+    289:   iconst_0;\n+    290:   istore            6;\n+    292:   stack_frame_type  append;               \/\/ frame_type 253\n+             locals_map      1, 1;                 \/\/ int, int;\n+           iload             6;\n+    294:   sipush            2500;\n+    297:   if_icmpge         326;\n+    300:   ldc               #49;                  \/\/ float 3.14f\n+    302:   fstore            7;\n+    304:   iload             5;\n+    306:   fload             7;\n+    308:   iload             6;\n+    310:   i2f;\n+    311:   invokestatic      #39;                  \/\/ Method java\/lang\/Math.round:\"(F)I\"\n+    314:   i2f;\n+    315:   fmul;\n+    316:   f2i;\n+    317:   iadd;\n+    318:   istore            5;\n+    320:   iinc              6, 1;\n+    323:   goto              292;\n+    326:   stack_frame_type  early_larval;         \/\/ frame_type 246\n+             unset_fields;\n+             frame_type      chop1;                \/\/ frame_type 250\n+           iload             5;\n+    328:   bipush            100;\n+    330:   if_icmple         344;\n+    333:   getstatic         #24;                  \/\/ Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\"\n+    336:   ldc               #68;                  \/\/ String \"_frame_\"\n+    338:   invokevirtual     #32;                  \/\/ Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\"\n+    341:   goto              379;\n+    344:   stack_frame_type  same;                 \/\/ frame_type 17\n+           iload             5;\n+    346:   bipush            50;\n+    348:   if_icmpge         379;\n+    351:   bipush            50;\n+    353:   iload             4;\n+    355:   imul;\n+    356:   istore            6;\n+    358:   ldc2_w            #61;                  \/\/ double 99.99d\n+    361:   iload             4;\n+    363:   i2d;\n+    364:   dmul;\n+    365:   dstore            7;\n+    367:   getstatic         #24;                  \/\/ Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\"\n+    370:   iload             6;\n+    372:   i2d;\n+    373:   dload             7;\n+    375:   dadd;\n+    376:   invokevirtual     #70;                  \/\/ Method java\/io\/PrintStream.println:\"(D)V\"\n+    379:   stack_frame_type  chop1;                \/\/ frame_type 250\n+           iload_1;\n+    380:   bipush            6;\n+    382:   if_icmpne         414;\n+    385:   ldc               #73;                  \/\/ String \"n_frame\"\n+    387:   astore            5;\n+    389:   bipush            70;\n+    391:   istore            6;\n+    393:   bipush            100;\n+    395:   istore            7;\n+    397:   getstatic         #24;                  \/\/ Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\"\n+    400:   aload             5;\n+    402:   iload             6;\n+    404:   iload             7;\n+    406:   invokedynamic     #75;                  \/\/ InvokeDynamic REF_invokeStatic:Method java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                                                   \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\":\n+                                                   \/\/ makeConcatWithConstants:\"(Ljava\/lang\/String;CI)Ljava\/lang\/String;\" {\n+                                                   \/\/   String \"\\u0001: \\u0001\\u0001\"\n+                                                   \/\/ }\n+    411:   invokevirtual     #32;                  \/\/ Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\"\n+    414:   stack_frame_type  same;                 \/\/ frame_type 34\n+           iconst_0;\n+    415:   istore            5;\n+    417:   aconst_null;\n+    418:   astore            6;\n+           try               T4, T5;\n+    420:   iconst_1;\n+    421:   iload             5;\n+    423:   idiv;\n+    424:   istore            5;\n+           endtry            T4,T5;\n+    426:   aload             6;\n+    428:   invokevirtual     #18;                  \/\/ Method java\/lang\/Object.toString:\"()Ljava\/lang\/String;\"\n+    431:   pop;\n+    432:   goto              466;\n+           catch             T4 #22;               \/\/ java\/lang\/ArithmeticException\n+           try               T6;\n+    435:   stack_frame_type  full;                 \/\/ frame_type 255\n+             locals_map      #10, 1, 1, #2, 1, 1, #2; \/\/ class StackMapData01, int, int, class java\/lang\/Object, int, int, class java\/lang\/Object;\n+             stack_map       #22;                     \/\/ class java\/lang\/ArithmeticException;\n+           astore            7;\n+    437:   new               #2;                   \/\/ class java\/lang\/Object\n+    440:   dup;\n+    441:   invokespecial     #1;                   \/\/ Method java\/lang\/Object.\"<init>\":\"()V\"\n+    444:   astore            6;\n+           endtry            T6;\n+    446:   aload             6;\n+    448:   invokevirtual     #18;                  \/\/ Method java\/lang\/Object.toString:\"()Ljava\/lang\/String;\"\n+    451:   pop;\n+    452:   goto              466;\n+           catch             T5 #0;                \/\/ any\n+           catch             T6 #0;                \/\/ any\n+           catch             T7 #0;                \/\/ any\n+           try               T7;\n+    455:   stack_frame_type  stack1;               \/\/ frame_type 83\n+             stack_map       #121;                 \/\/ class java\/lang\/Throwable;\n+           astore            9;\n+           endtry            T7;\n+    457:   aload             6;\n+    459:   invokevirtual     #18;                  \/\/ Method java\/lang\/Object.toString:\"()Ljava\/lang\/String;\"\n+    462:   pop;\n+    463:   aload             9;\n+    465:   athrow;\n+    466:   stack_frame_type  same;                 \/\/ frame_type 10\n+           iload             5;\n+    468:   ifne              474;\n+    471:   aconst_null;\n+    472:   astore            6;\n+    474:   stack_frame_type  same;                 \/\/ frame_type 7\n+           iload_2;\n+    475:   lookupswitch      {                     \/\/ 2\n+                1:      500;\n+                2:      512;\n+               default: 512  };\n+    500:   stack_frame_type  same;                 \/\/ frame_type 25\n+           new               #2;                   \/\/ class java\/lang\/Object\n+    503:   dup;\n+    504:   invokespecial     #1;                   \/\/ Method java\/lang\/Object.\"<init>\":\"()V\"\n+    507:   astore            6;\n+    509:   goto              512;\n+    512:   stack_frame_type  early_larval;         \/\/ frame_type 246\n+             unset_fields    #11,                  \/\/ fldS:\"Ljava\/lang\/String;\",\n+                             #16,                  \/\/ fldFS:\"Ljava\/lang\/String;\",\n+                             #26,                  \/\/ out:\"Ljava\/io\/PrintStream;\",\n+                             #112;                 \/\/ fldL:\"J\";\n+             frame_type      same;                 \/\/ frame_type 11\n+           return;\n+  }\n+\n+  public Method #105:#106                          \/\/ complexMethod:\"(ILjava\/lang\/Object;)I\"\n+    stack 3  locals 7\n+  {\n+     0:    iconst_0;\n+     1:    istore_3;\n+     2:    iconst_1;\n+     3:    istore            4;\n+     5:    aconst_null;\n+     6:    astore            5;\n+           try               T0;\n+     8:    iload_1;\n+     9:    ifle              47;\n+    12:    iload_1;\n+    13:    iconst_1;\n+    14:    iadd;\n+    15:    istore_3;\n+    16:    aload_2;\n+    17:    instanceof        #78;                  \/\/ class java\/lang\/String\n+    20:    ifeq              39;\n+    23:    aload_2;\n+    24:    checkcast         #78;                  \/\/ class java\/lang\/String\n+    27:    astore            5;\n+    29:    aload             5;\n+    31:    invokevirtual     #80;                  \/\/ Method java\/lang\/Object.hashCode:\"()I\"\n+    34:    istore            4;\n+    36:    iload             4;\n+           endtry            T0;\n+    38:    ireturn;\n+           try               T1;\n+    39:    stack_frame_type  append;               \/\/ frame_type 254\n+             locals_map      1, 1, #2;             \/\/ int, int, class java\/lang\/Object;\n+           iload_3;\n+    40:    iconst_2;\n+    41:    imul;\n+    42:    istore            4;\n+    44:    goto              104;\n+    47:    stack_frame_type  same;                 \/\/ frame_type 7\n+           iload_1;\n+    48:    iconst_m1;\n+    49:    if_icmpne         70;\n+    52:    iload_1;\n+    53:    ineg;\n+    54:    istore_3;\n+    55:    iload_3;\n+    56:    iconst_3;\n+    57:    iadd;\n+    58:    istore            4;\n+    60:    new               #84;                  \/\/ class java\/lang\/RuntimeException\n+    63:    dup;\n+    64:    ldc               #86;                  \/\/ String \"Test exception\"\n+    66:    invokespecial     #88;                  \/\/ Method java\/lang\/RuntimeException.\"<init>\":\"(Ljava\/lang\/String;)V\"\n+    69:    athrow;\n+    70:    stack_frame_type  same;                 \/\/ frame_type 22\n+           iconst_0;\n+    71:    istore            6;\n+    73:    stack_frame_type  early_larval;         \/\/ frame_type 246\n+             unset_fields    #11,                  \/\/ fldS:\"Ljava\/lang\/String;\",\n+                             #16,                  \/\/ fldFS:\"Ljava\/lang\/String;\",\n+                             #26,                  \/\/ out:\"Ljava\/io\/PrintStream;\",\n+                             #112;                 \/\/ fldL:\"J\";\n+             frame_type      append;               \/\/ frame_type 252\n+               locals_map    1;                    \/\/ int;\n+           iload             6;\n+    75:    iconst_2;\n+    76:    if_icmpge         104;\n+    79:    iload_3;\n+    80:    iload             6;\n+    82:    iadd;\n+    83:    istore_3;\n+    84:    iload_3;\n+    85:    iconst_1;\n+    86:    if_icmple         98;\n+    89:    iload_3;\n+    90:    iload             6;\n+    92:    isub;\n+    93:    istore            4;\n+    95:    goto              104;\n+    98:    stack_frame_type  same;                 \/\/ frame_type 24\n+           iinc              6, 1;\n+    101:   goto              73;\n+           endtry            T1;\n+    104:   stack_frame_type  chop1;                \/\/ frame_type 250\n+           goto              118;\n+           catch             T0 #84;               \/\/ java\/lang\/RuntimeException\n+           catch             T1 #84;               \/\/ java\/lang\/RuntimeException\n+    107:   stack_frame_type  early_larval;         \/\/ frame_type 246\n+             unset_fields    #11,                  \/\/ fldS:\"Ljava\/lang\/String;\",\n+                             #16,                  \/\/ fldFS:\"Ljava\/lang\/String;\",\n+                             #26,                  \/\/ out:\"Ljava\/io\/PrintStream;\",\n+                             #112;                 \/\/ fldL:\"J\";\n+             frame_type      stack1;               \/\/ frame_type 66\n+               stack_map     #84;                  \/\/ class java\/lang\/RuntimeException;\n+           astore            6;\n+    109:   aload             6;\n+    111:   astore            5;\n+    113:   iload_3;\n+    114:   iconst_5;\n+    115:   iadd;\n+    116:   istore            4;\n+    118:   stack_frame_type  same;                 \/\/ frame_type 10\n+           iload_3;\n+    119:   iload             4;\n+    121:   iadd;\n+    122:   ireturn;\n+  }\n+\n+  public Method #109:#110                          \/\/ generateFullFrame:\"(I)I\"\n+    stack 3  locals 6\n+  {\n+     0:    iconst_0;\n+     1:    istore_2;\n+     2:    aconst_null;\n+     3:    astore_3;\n+     4:    iconst_0;\n+     5:    istore            4;\n+           try               T0;\n+     7:    iload_1;\n+     8:    ifle              25;\n+    11:    ldc               #90;                  \/\/ String \"positive\"\n+    13:    astore_3;\n+    14:    iconst_1;\n+    15:    istore            4;\n+    17:    aload_3;\n+    18:    invokevirtual     #80;                  \/\/ Method java\/lang\/Object.hashCode:\"()I\"\n+    21:    istore_2;\n+    22:    goto              39;\n+    25:    stack_frame_type  early_larval;         \/\/ frame_type 246\n+             unset_fields    #11,                  \/\/ fldS:\"Ljava\/lang\/String;\",\n+                             #16,                  \/\/ fldFS:\"Ljava\/lang\/String;\",\n+                             #26,                  \/\/ out:\"Ljava\/io\/PrintStream;\",\n+                             #112;                 \/\/ fldL:\"J\";\n+             frame_type      append;               \/\/ frame_type 254\n+               locals_map    1, #2, 1;             \/\/ int, class java\/lang\/Object, int;\n+           iload_1;\n+    26:    iconst_2;\n+    27:    imul;\n+    28:    istore_2;\n+    29:    new               #84;                  \/\/ class java\/lang\/RuntimeException\n+    32:    dup;\n+    33:    ldc               #92;                  \/\/ String \"non-positive\"\n+    35:    invokespecial     #88;                  \/\/ Method java\/lang\/RuntimeException.\"<init>\":\"(Ljava\/lang\/String;)V\"\n+    38:    athrow;\n+           endtry            T0;\n+    39:    stack_frame_type  early_larval;         \/\/ frame_type 246\n+             unset_fields    #11,                  \/\/ fldS:\"Ljava\/lang\/String;\",\n+                             #16,                  \/\/ fldFS:\"Ljava\/lang\/String;\",\n+                             #26;                  \/\/ out:\"Ljava\/io\/PrintStream;\";\n+             frame_type      same;                 \/\/ frame_type 13\n+           goto              53;\n+           catch             T0 #84;               \/\/ java\/lang\/RuntimeException\n+    42:    stack_frame_type  early_larval;         \/\/ frame_type 246\n+             unset_fields    #11,                  \/\/ fldS:\"Ljava\/lang\/String;\",\n+                             #16;                  \/\/ fldFS:\"Ljava\/lang\/String;\";\n+             frame_type      stack1;               \/\/ frame_type 66\n+               stack_map     #84;                  \/\/ class java\/lang\/RuntimeException;\n+           astore            5;\n+    44:    aload             5;\n+    46:    astore_3;\n+    47:    iconst_0;\n+    48:    istore            4;\n+    50:    iload_1;\n+    51:    ineg;\n+    52:    istore_2;\n+    53:    stack_frame_type  early_larval;         \/\/ frame_type 246\n+             unset_fields    #11;                  \/\/ fldS:\"Ljava\/lang\/String;\";\n+             frame_type      same;                 \/\/ frame_type 10\n+           iload             4;\n+    55:    ifeq              62;\n+    58:    iload_2;\n+    59:    iconst_1;\n+    60:    iadd;\n+    61:    ireturn;\n+    62:    stack_frame_type  early_larval;         \/\/ frame_type 246\n+             unset_fields;\n+             frame_type      same;                 \/\/ frame_type 8\n+           getstatic         #24;                  \/\/ Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\"\n+    65:    ldc               #94;                  \/\/ String \"Computing result\"\n+    67:    invokevirtual     #32;                  \/\/ Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\"\n+    70:    iload_2;\n+    71:    ireturn;\n+  }\n+\n+  public static Method #123:#124                   \/\/ main:\"([Ljava\/lang\/String;)V\"\n+    stack 3  locals 3\n+  {\n+     0:    new               #10;                  \/\/ class StackMapData01\n+     3:    dup;\n+     4:    invokespecial     #96;                  \/\/ Method \"<init>\":\"()V\"\n+     7:    astore_1;\n+     8:    iconst_0;\n+     9:    istore_2;\n+    10:    stack_frame_type  early_larval;         \/\/ frame_type 246\n+             unset_fields;\n+             frame_type      append;               \/\/ frame_type 253\n+               locals_map    #10, 1;               \/\/ class StackMapData01, int;\n+           iload_2;\n+    11:    bipush            6;\n+    13:    if_icmpgt         27;\n+    16:    aload_1;\n+    17:    iload_2;\n+    18:    invokevirtual     #97;                  \/\/ Method generateFrames:\"(I)V\"\n+    21:    iinc              2, 1;\n+    24:    goto              10;\n+    27:    stack_frame_type  chop1;                \/\/ frame_type 250\n+           aload_1;\n+    28:    iconst_0;\n+    29:    ldc               #101;                 \/\/ String \"test\"\n+    31:    invokevirtual     #103;                 \/\/ Method complexMethod:\"(ILjava\/lang\/Object;)I\"\n+    34:    pop;\n+    35:    aload_1;\n+    36:    bipush            23;\n+    38:    invokevirtual     #107;                 \/\/ Method generateFullFrame:\"(I)I\"\n+    41:    pop;\n+    42:    return;\n+  }\n+\n+  static Method #125:#6                            \/\/ \"<clinit>\":\"()V\"\n+    stack 2  locals 0\n+  {\n+     0:    lconst_1;\n+     1:    putstatic         #111;                 \/\/ Field fldL:\"J\"\n+     4:    return;\n+  }\n+\n+  InnerClass                 public static final #148 = #144 of #146;  \/\/ Lookup = class java\/lang\/invoke\/MethodHandles$Lookup of class java\/lang\/invoke\/MethodHandles\n+\n+  BootstrapMethod            #137;                 \/\/ REF_invokeStatic:java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                                                   \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";\n+                             {\n+                                 #127              \/\/ String \"item_frame\\u0001\"\n+                             }\n+\n+  BootstrapMethod            #137;                 \/\/ REF_invokeStatic:java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                                                   \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";\n+                             {\n+                                 #129              \/\/ String \"item_frame_\\u0001\"\n+                             }\n+\n+  BootstrapMethod            #137;                 \/\/ REF_invokeStatic:java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                                                   \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";\n+                             {\n+                                 #131              \/\/ String \"_frame: \\u0001\"\n+                             }\n+\n+  BootstrapMethod            #137;                 \/\/ REF_invokeStatic:java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                                                   \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";\n+                             {\n+                                 #133              \/\/ String \"Before chop_frame: \\u0001\"\n+                             }\n+\n+  BootstrapMethod            #137;                 \/\/ REF_invokeStatic:java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                                                   \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";\n+                             {\n+                                 #135              \/\/ String \"\\u0001: \\u0001\\u0001\"\n+                             }\n+} \/\/ end Class org\/openjdk\/asmtools\/attribute\/StackMapTable\/data\/StackMapData01\n","filename":"test\/resources\/org\/openjdk\/asmtools\/attribute\/StackMapTable\/StackMapData01.g.jasm","additions":759,"deletions":0,"binary":false,"changes":759,"status":"added"},{"patch":"@@ -0,0 +1,768 @@\n+package org\/openjdk\/asmtools\/attribute\/StackMapTable\/data;\n+\n+public super class #10 \/* StackMapData02 *\/ version 69:0\n+{\n+  const #1    = Methodref     #2.#3;               \/\/ java\/lang\/Object.\"<init>\":\"()V\"\n+  const #2    = Class         #4;                  \/\/ java\/lang\/Object\n+  const #3    = NameAndType   #5:#6;               \/\/ \"<init>\":\"()V\"\n+  const #4    = Utf8          \"java\/lang\/Object\";\n+  const #5    = Utf8          \"<init>\";\n+  const #6    = Utf8          \"()V\";\n+  const #7    = String        #8;                  \/\/ \"string\"\n+  const #8    = Utf8          \"string\";\n+  const #9    = Fieldref      #10.#11;             \/\/ StackMapData02.fldS:\"Ljava\/lang\/String;\"\n+  const #10   = Class         #12;                 \/\/ StackMapData02\n+  const #11   = NameAndType   #13:#14;             \/\/ fldS:\"Ljava\/lang\/String;\"\n+  const #12   = Utf8          \"org\/openjdk\/asmtools\/attribute\/StackMapTable\/data\/StackMapData02\";\n+  const #13   = Utf8          \"fldS\";\n+  const #14   = Utf8          \"Ljava\/lang\/String;\";\n+  const #15   = Fieldref      #10.#16;             \/\/ StackMapData02.fldFS:\"Ljava\/lang\/String;\"\n+  const #16   = NameAndType   #17:#14;             \/\/ fldFS:\"Ljava\/lang\/String;\"\n+  const #17   = Utf8          \"fldFS\";\n+  const #18   = Methodref     #2.#19;              \/\/ java\/lang\/Object.toString:\"()Ljava\/lang\/String;\"\n+  const #19   = NameAndType   #20:#21;             \/\/ toString:\"()Ljava\/lang\/String;\"\n+  const #20   = Utf8          \"toString\";\n+  const #21   = Utf8          \"()Ljava\/lang\/String;\";\n+  const #22   = Class         #23;                 \/\/ java\/lang\/ArithmeticException\n+  const #23   = Utf8          \"java\/lang\/ArithmeticException\";\n+  const #24   = Fieldref      #25.#26;             \/\/ java\/lang\/System.out:\"Ljava\/io\/PrintStream;\"\n+  const #25   = Class         #27;                 \/\/ java\/lang\/System\n+  const #26   = NameAndType   #28:#29;             \/\/ out:\"Ljava\/io\/PrintStream;\"\n+  const #27   = Utf8          \"java\/lang\/System\";\n+  const #28   = Utf8          \"out\";\n+  const #29   = Utf8          \"Ljava\/io\/PrintStream;\";\n+  const #30   = String        #31;                 \/\/ \"frame\"\n+  const #31   = Utf8          \"frame\";\n+  const #32   = Methodref     #33.#34;             \/\/ java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\"\n+  const #33   = Class         #35;                 \/\/ java\/io\/PrintStream\n+  const #34   = NameAndType   #36:#37;             \/\/ println:\"(Ljava\/lang\/String;)V\"\n+  const #35   = Utf8          \"java\/io\/PrintStream\";\n+  const #36   = Utf8          \"println\";\n+  const #37   = Utf8          \"(Ljava\/lang\/String;)V\";\n+  const #38   = Float         100.0f;\n+  const #39   = Methodref     #40.#41;             \/\/ java\/lang\/Math.round:\"(F)I\"\n+  const #40   = Class         #42;                 \/\/ java\/lang\/Math\n+  const #41   = NameAndType   #43:#44;             \/\/ round:\"(F)I\"\n+  const #42   = Utf8          \"java\/lang\/Math\";\n+  const #43   = Utf8          \"round\";\n+  const #44   = Utf8          \"(F)I\";\n+  const #45   = InvokeDynamic 0:#46;               \/\/ #0:makeConcatWithConstants:\"(I)Ljava\/lang\/String;\"\n+  const #46   = NameAndType   #47:#48;             \/\/ makeConcatWithConstants:\"(I)Ljava\/lang\/String;\"\n+  const #47   = Utf8          \"makeConcatWithConstants\";\n+  const #48   = Utf8          \"(I)Ljava\/lang\/String;\";\n+  const #49   = Float         3.14f;\n+  const #50   = InvokeDynamic 1:#46;               \/\/ #1:makeConcatWithConstants:\"(I)Ljava\/lang\/String;\"\n+  const #51   = Float         10.0f;\n+  const #52   = Float         110.0f;\n+  const #53   = Double        100.0d;\n+  const #55   = Methodref     #40.#56;             \/\/ java\/lang\/Math.round:\"(D)J\"\n+  const #56   = NameAndType   #43:#57;             \/\/ round:\"(D)J\"\n+  const #57   = Utf8          \"(D)J\";\n+  const #58   = InvokeDynamic 2:#59;               \/\/ #2:makeConcatWithConstants:\"(J)Ljava\/lang\/String;\"\n+  const #59   = NameAndType   #47:#60;             \/\/ makeConcatWithConstants:\"(J)Ljava\/lang\/String;\"\n+  const #60   = Utf8          \"(J)Ljava\/lang\/String;\";\n+  const #61   = Double        99.99d;\n+  const #63   = InvokeDynamic 3:#64;               \/\/ #3:makeConcatWithConstants:\"(D)Ljava\/lang\/String;\"\n+  const #64   = NameAndType   #47:#65;             \/\/ makeConcatWithConstants:\"(D)Ljava\/lang\/String;\"\n+  const #65   = Utf8          \"(D)Ljava\/lang\/String;\";\n+  const #66   = String        #67;                 \/\/ \"chop_frame\"\n+  const #67   = Utf8          \"chop_frame\";\n+  const #68   = String        #69;                 \/\/ \"_frame_\"\n+  const #69   = Utf8          \"_frame_\";\n+  const #70   = Methodref     #33.#71;             \/\/ java\/io\/PrintStream.println:\"(D)V\"\n+  const #71   = NameAndType   #36:#72;             \/\/ println:\"(D)V\"\n+  const #72   = Utf8          \"(D)V\";\n+  const #73   = String        #74;                 \/\/ \"n_frame\"\n+  const #74   = Utf8          \"n_frame\";\n+  const #75   = InvokeDynamic 4:#76;               \/\/ #4:makeConcatWithConstants:\"(Ljava\/lang\/String;CI)Ljava\/lang\/String;\"\n+  const #76   = NameAndType   #47:#77;             \/\/ makeConcatWithConstants:\"(Ljava\/lang\/String;CI)Ljava\/lang\/String;\"\n+  const #77   = Utf8          \"(Ljava\/lang\/String;CI)Ljava\/lang\/String;\";\n+  const #78   = Class         #79;                 \/\/ java\/lang\/String\n+  const #79   = Utf8          \"java\/lang\/String\";\n+  const #80   = Methodref     #2.#81;              \/\/ java\/lang\/Object.hashCode:\"()I\"\n+  const #81   = NameAndType   #82:#83;             \/\/ hashCode:\"()I\"\n+  const #82   = Utf8          \"hashCode\";\n+  const #83   = Utf8          \"()I\";\n+  const #84   = Class         #85;                 \/\/ java\/lang\/RuntimeException\n+  const #85   = Utf8          \"java\/lang\/RuntimeException\";\n+  const #86   = String        #87;                 \/\/ \"Test exception\"\n+  const #87   = Utf8          \"Test exception\";\n+  const #88   = Methodref     #84.#89;             \/\/ java\/lang\/RuntimeException.\"<init>\":\"(Ljava\/lang\/String;)V\"\n+  const #89   = NameAndType   #5:#37;              \/\/ \"<init>\":\"(Ljava\/lang\/String;)V\"\n+  const #90   = String        #91;                 \/\/ \"positive\"\n+  const #91   = Utf8          \"positive\";\n+  const #92   = String        #93;                 \/\/ \"non-positive\"\n+  const #93   = Utf8          \"non-positive\";\n+  const #94   = String        #95;                 \/\/ \"Computing result\"\n+  const #95   = Utf8          \"Computing result\";\n+  const #96   = Methodref     #10.#3;              \/\/ StackMapData02.\"<init>\":\"()V\"\n+  const #97   = Methodref     #10.#98;             \/\/ StackMapData02.generateFrames:\"(I)V\"\n+  const #98   = NameAndType   #99:#100;            \/\/ generateFrames:\"(I)V\"\n+  const #99   = Utf8          \"generateFrames\";\n+  const #100  = Utf8          \"(I)V\";\n+  const #101  = String        #102;                \/\/ \"test\"\n+  const #102  = Utf8          \"test\";\n+  const #103  = Methodref     #10.#104;            \/\/ StackMapData02.complexMethod:\"(ILjava\/lang\/Object;)I\"\n+  const #104  = NameAndType   #105:#106;           \/\/ complexMethod:\"(ILjava\/lang\/Object;)I\"\n+  const #105  = Utf8          \"complexMethod\";\n+  const #106  = Utf8          \"(ILjava\/lang\/Object;)I\";\n+  const #107  = Methodref     #10.#108;            \/\/ StackMapData02.generateFullFrame:\"(I)I\"\n+  const #108  = NameAndType   #109:#110;           \/\/ generateFullFrame:\"(I)I\"\n+  const #109  = Utf8          \"generateFullFrame\";\n+  const #110  = Utf8          \"(I)I\";\n+  const #111  = Fieldref      #10.#112;            \/\/ StackMapData02.fldL:\"J\"\n+  const #112  = NameAndType   #113:#114;           \/\/ fldL:\"J\"\n+  const #113  = Utf8          \"fldL\";\n+  const #114  = Utf8          \"J\";\n+  const #115  = Utf8          \"fldI\";\n+  const #116  = Utf8          \"I\";\n+  const #117  = Utf8          \"ConstantValue\";\n+  const #118  = Integer       0;\n+  const #119  = Utf8          \"Code\";\n+  const #120  = Utf8          \"StackMapTable\";\n+  const #121  = Class         #122;                \/\/ java\/lang\/Throwable\n+  const #122  = Utf8          \"java\/lang\/Throwable\";\n+  const #123  = Utf8          \"main\";\n+  const #124  = Utf8          \"([Ljava\/lang\/String;)V\";\n+  const #125  = Utf8          \"<clinit>\";\n+  const #126  = Utf8          \"BootstrapMethods\";\n+  const #127  = String        #128;                \/\/ \"item_frame\\u0001\"\n+  const #128  = Utf8          \"item_frame\\u0001\";\n+  const #129  = String        #130;                \/\/ \"item_frame_\\u0001\"\n+  const #130  = Utf8          \"item_frame_\\u0001\";\n+  const #131  = String        #132;                \/\/ \"_frame: \\u0001\"\n+  const #132  = Utf8          \"_frame: \\u0001\";\n+  const #133  = String        #134;                \/\/ \"Before chop_frame: \\u0001\"\n+  const #134  = Utf8          \"Before chop_frame: \\u0001\";\n+  const #135  = String        #136;                \/\/ \"\\u0001: \\u0001\\u0001\"\n+  const #136  = Utf8          \"\\u0001: \\u0001\\u0001\";\n+  const #137  = MethodHandle  6:#138;              \/\/ REF_invokeStatic:java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\"\n+  const #138  = Methodref     #139.#140;           \/\/ java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\"\n+  const #139  = Class         #141;                \/\/ java\/lang\/invoke\/StringConcatFactory\n+  const #140  = NameAndType   #47:#142;            \/\/ makeConcatWithConstants:\"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\"\n+  const #141  = Utf8          \"java\/lang\/invoke\/StringConcatFactory\";\n+  const #142  = Utf8          \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";\n+  const #143  = Utf8          \"InnerClasses\";\n+  const #144  = Class         #145;                \/\/ java\/lang\/invoke\/MethodHandles$Lookup\n+  const #145  = Utf8          \"java\/lang\/invoke\/MethodHandles$Lookup\";\n+  const #146  = Class         #147;                \/\/ java\/lang\/invoke\/MethodHandles\n+  const #147  = Utf8          \"java\/lang\/invoke\/MethodHandles\";\n+  const #148  = Utf8          \"Lookup\";\n+  const #149  = Utf8          \"SourceFile\";\n+  const #150  = Utf8          \"StackMapData02.g.t.jasm\";\n+\n+  static final Field #115:#116 = #118;             \/\/ fldI:I = int 0\n+  static Field #113:#114;                          \/\/ fldL:J\n+  protected Field #13:#14;                         \/\/ fldS:\"Ljava\/lang\/String;\"\n+  public final Field #17:#14 = #7;                 \/\/ fldFS:\"Ljava\/lang\/String;\" = String \"string\"\n+\n+  public Method #5:#6                              \/\/ \"<init>\":\"()V\" \n+    stack 2  locals 1\n+  {\n+     0:    aload_0;\n+     1:    invokespecial     #1;                   \/\/ Method java\/lang\/Object.\"<init>\":\"()V\"\n+     4:    aload_0;\n+     5:    ldc               #7;                   \/\/ String \"string\"\n+     7:    putfield          #9;                   \/\/ Field fldS:\"Ljava\/lang\/String;\"\n+    10:    aload_0;\n+    11:    ldc               #7;                   \/\/ String \"string\"\n+    13:    putfield          #15;                  \/\/ Field fldFS:\"Ljava\/lang\/String;\"\n+    16:    return;\n+  }\n+\n+  public Method #99:#100                           \/\/ generateFrames:\"(I)V\" \n+    stack 5  locals 10\n+  {\n+     0:    iconst_0;\n+     1:    istore_2;\n+     2:    aconst_null;\n+     3:    astore_3;\n+           try               T0, T1;\n+     4:    iconst_1;\n+     5:    iload_2;\n+     6:    idiv;\n+     7:    istore_2;\n+           endtry            T0,T1;\n+     8:    aload_3;\n+     9:    invokevirtual     #18;                  \/\/ Method java\/lang\/Object.toString:\"()Ljava\/lang\/String;\"\n+    12:    pop;\n+    13:    goto              44;\n+           catch             T0 #22;               \/\/ java\/lang\/ArithmeticException\n+           try               T2;\n+    16:    astore            4;\n+    18:    new               #2;                   \/\/ class java\/lang\/Object\n+    21:    dup;\n+    22:    invokespecial     #1;                   \/\/ Method java\/lang\/Object.\"<init>\":\"()V\"\n+    25:    astore_3;\n+           endtry            T2;\n+    26:    aload_3;\n+    27:    invokevirtual     #18;                  \/\/ Method java\/lang\/Object.toString:\"()Ljava\/lang\/String;\"\n+    30:    pop;\n+    31:    goto              44;\n+           catch             T1 #0;                \/\/ any\n+           catch             T2 #0;                \/\/ any\n+           catch             T3 #0;                \/\/ any\n+           try               T3;\n+    34:    astore            5;\n+           endtry            T3;\n+    36:    aload_3;\n+    37:    invokevirtual     #18;                  \/\/ Method java\/lang\/Object.toString:\"()Ljava\/lang\/String;\"\n+    40:    pop;\n+    41:    aload             5;\n+    43:    athrow;\n+    44:    iload_2;\n+    45:    ifne              50;\n+    48:    aconst_null;\n+    49:    astore_3;\n+    50:    iload_2;\n+    51:    lookupswitch      {                     \/\/ 2\n+                1:      76;\n+                2:      87;\n+               default: 87   };\n+    76:    new               #2;                   \/\/ class java\/lang\/Object\n+    79:    dup;\n+    80:    invokespecial     #1;                   \/\/ Method java\/lang\/Object.\"<init>\":\"()V\"\n+    83:    astore_3;\n+    84:    goto              87;\n+    87:    iload_1;\n+    88:    ifne              99;\n+    91:    getstatic         #24;                  \/\/ Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\"\n+    94:    ldc               #30;                  \/\/ String \"frame\"\n+    96:    invokevirtual     #32;                  \/\/ Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\"\n+    99:    iload_1;\n+    100:   iconst_1;\n+    101:   if_icmpne         127;\n+    104:   bipush            42;\n+    106:   istore            4;\n+    108:   getstatic         #24;                  \/\/ Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\"\n+    111:   iload             4;\n+    113:   ldc               #38;                  \/\/ float 100.0f\n+    115:   invokestatic      #39;                  \/\/ Method java\/lang\/Math.round:\"(F)I\"\n+    118:   imul;\n+    119:   invokedynamic     #45;                  \/\/ InvokeDynamic REF_invokeStatic:Method java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                                                   \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\":\n+                                                   \/\/ makeConcatWithConstants:\"(I)Ljava\/lang\/String;\" {\n+                                                   \/\/   String \"\\u0001: \\u0001\\u0001\"\n+                                                   \/\/ }\n+    124:   invokevirtual     #32;                  \/\/ Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\"\n+    127:   iload_1;\n+    128:   iconst_2;\n+    129:   if_icmpne         184;\n+    132:   iconst_0;\n+    133:   istore            4;\n+    135:   iconst_0;\n+    136:   istore            5;\n+    138:   iload             5;\n+    140:   sipush            3000;\n+    143:   if_icmpge         171;\n+    146:   ldc               #49;                  \/\/ float 3.14f\n+    148:   fstore            6;\n+    150:   iload             4;\n+    152:   fload             6;\n+    154:   ldc               #38;                  \/\/ float 100.0f\n+    156:   invokestatic      #39;                  \/\/ Method java\/lang\/Math.round:\"(F)I\"\n+    159:   i2f;\n+    160:   fmul;\n+    161:   f2i;\n+    162:   iadd;\n+    163:   istore            4;\n+    165:   iinc              5, 1;\n+    168:   goto              138;\n+    171:   getstatic         #24;                  \/\/ Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\"\n+    174:   iload             4;\n+    176:   invokedynamic     #50;                  \/\/ InvokeDynamic REF_invokeStatic:Method java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                                                   \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\":\n+                                                   \/\/ makeConcatWithConstants:\"(I)Ljava\/lang\/String;\" {\n+                                                   \/\/   String \"\\u0001: \\u0001\\u0001\"\n+                                                   \/\/ }\n+    181:   invokevirtual     #32;                  \/\/ Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\"\n+    184:   ldc               #51;                  \/\/ float 10.0f\n+    186:   invokestatic      #39;                  \/\/ Method java\/lang\/Math.round:\"(F)I\"\n+    189:   istore            4;\n+    191:   iload_1;\n+    192:   iconst_3;\n+    193:   if_icmpne         232;\n+    196:   ldc               #52;                  \/\/ float 110.0f\n+    198:   invokestatic      #39;                  \/\/ Method java\/lang\/Math.round:\"(F)I\"\n+    201:   istore            5;\n+    203:   ldc2_w            #53;                  \/\/ double 100.0d\n+    206:   invokestatic      #55;                  \/\/ Method java\/lang\/Math.round:\"(D)J\"\n+    209:   lstore            6;\n+    211:   getstatic         #24;                  \/\/ Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\"\n+    214:   iload             5;\n+    216:   i2l;\n+    217:   lload             6;\n+    219:   ladd;\n+    220:   iload             4;\n+    222:   i2l;\n+    223:   lmul;\n+    224:   invokedynamic     #58;                  \/\/ InvokeDynamic REF_invokeStatic:Method java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                                                   \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\":\n+                                                   \/\/ makeConcatWithConstants:\"(J)Ljava\/lang\/String;\" {\n+                                                   \/\/   String \"\\u0001: \\u0001\\u0001\"\n+                                                   \/\/ }\n+    229:   invokevirtual     #32;                  \/\/ Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\"\n+    232:   iload_1;\n+    233:   iconst_4;\n+    234:   if_icmpne         273;\n+    237:   bipush            50;\n+    239:   iload             4;\n+    241:   imul;\n+    242:   istore            5;\n+    244:   ldc2_w            #61;                  \/\/ double 99.99d\n+    247:   iload             4;\n+    249:   i2d;\n+    250:   dmul;\n+    251:   dstore            6;\n+    253:   getstatic         #24;                  \/\/ Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\"\n+    256:   iload             5;\n+    258:   i2d;\n+    259:   dload             6;\n+    261:   dadd;\n+    262:   invokedynamic     #63;                  \/\/ InvokeDynamic REF_invokeStatic:Method java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                                                   \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\":\n+                                                   \/\/ makeConcatWithConstants:\"(D)Ljava\/lang\/String;\" {\n+                                                   \/\/   String \"\\u0001: \\u0001\\u0001\"\n+                                                   \/\/ }\n+    267:   invokevirtual     #32;                  \/\/ Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\"\n+    270:   goto              281;\n+    273:   getstatic         #24;                  \/\/ Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\"\n+    276:   ldc               #66;                  \/\/ String \"chop_frame\"\n+    278:   invokevirtual     #32;                  \/\/ Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\"\n+    281:   iload_1;\n+    282:   iconst_5;\n+    283:   if_icmpne         379;\n+    286:   iconst_0;\n+    287:   istore            5;\n+    289:   iconst_0;\n+    290:   istore            6;\n+    292:   iload             6;\n+    294:   sipush            2500;\n+    297:   if_icmpge         326;\n+    300:   ldc               #49;                  \/\/ float 3.14f\n+    302:   fstore            7;\n+    304:   iload             5;\n+    306:   fload             7;\n+    308:   iload             6;\n+    310:   i2f;\n+    311:   invokestatic      #39;                  \/\/ Method java\/lang\/Math.round:\"(F)I\"\n+    314:   i2f;\n+    315:   fmul;\n+    316:   f2i;\n+    317:   iadd;\n+    318:   istore            5;\n+    320:   iinc              6, 1;\n+    323:   goto              292;\n+    326:   iload             5;\n+    328:   bipush            100;\n+    330:   if_icmple         344;\n+    333:   getstatic         #24;                  \/\/ Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\"\n+    336:   ldc               #68;                  \/\/ String \"_frame_\"\n+    338:   invokevirtual     #32;                  \/\/ Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\"\n+    341:   goto              379;\n+    344:   iload             5;\n+    346:   bipush            50;\n+    348:   if_icmpge         379;\n+    351:   bipush            50;\n+    353:   iload             4;\n+    355:   imul;\n+    356:   istore            6;\n+    358:   ldc2_w            #61;                  \/\/ double 99.99d\n+    361:   iload             4;\n+    363:   i2d;\n+    364:   dmul;\n+    365:   dstore            7;\n+    367:   getstatic         #24;                  \/\/ Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\"\n+    370:   iload             6;\n+    372:   i2d;\n+    373:   dload             7;\n+    375:   dadd;\n+    376:   invokevirtual     #70;                  \/\/ Method java\/io\/PrintStream.println:\"(D)V\"\n+    379:   iload_1;\n+    380:   bipush            6;\n+    382:   if_icmpne         414;\n+    385:   ldc               #73;                  \/\/ String \"n_frame\"\n+    387:   astore            5;\n+    389:   bipush            70;\n+    391:   istore            6;\n+    393:   bipush            100;\n+    395:   istore            7;\n+    397:   getstatic         #24;                  \/\/ Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\"\n+    400:   aload             5;\n+    402:   iload             6;\n+    404:   iload             7;\n+    406:   invokedynamic     #75;                  \/\/ InvokeDynamic REF_invokeStatic:Method java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                                                   \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\":\n+                                                   \/\/ makeConcatWithConstants:\"(Ljava\/lang\/String;CI)Ljava\/lang\/String;\" {\n+                                                   \/\/   String \"\\u0001: \\u0001\\u0001\"\n+                                                   \/\/ }\n+    411:   invokevirtual     #32;                  \/\/ Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\"\n+    414:   iconst_0;\n+    415:   istore            5;\n+    417:   aconst_null;\n+    418:   astore            6;\n+           try               T4, T5;\n+    420:   iconst_1;\n+    421:   iload             5;\n+    423:   idiv;\n+    424:   istore            5;\n+           endtry            T4,T5;\n+    426:   aload             6;\n+    428:   invokevirtual     #18;                  \/\/ Method java\/lang\/Object.toString:\"()Ljava\/lang\/String;\"\n+    431:   pop;\n+    432:   goto              466;\n+           catch             T4 #22;               \/\/ java\/lang\/ArithmeticException\n+           try               T6;\n+    435:   astore            7;\n+    437:   new               #2;                   \/\/ class java\/lang\/Object\n+    440:   dup;\n+    441:   invokespecial     #1;                   \/\/ Method java\/lang\/Object.\"<init>\":\"()V\"\n+    444:   astore            6;\n+           endtry            T6;\n+    446:   aload             6;\n+    448:   invokevirtual     #18;                  \/\/ Method java\/lang\/Object.toString:\"()Ljava\/lang\/String;\"\n+    451:   pop;\n+    452:   goto              466;\n+           catch             T5 #0;                \/\/ any\n+           catch             T6 #0;                \/\/ any\n+           catch             T7 #0;                \/\/ any\n+           try               T7;\n+    455:   astore            9;\n+           endtry            T7;\n+    457:   aload             6;\n+    459:   invokevirtual     #18;                  \/\/ Method java\/lang\/Object.toString:\"()Ljava\/lang\/String;\"\n+    462:   pop;\n+    463:   aload             9;\n+    465:   athrow;\n+    466:   iload             5;\n+    468:   ifne              474;\n+    471:   aconst_null;\n+    472:   astore            6;\n+    474:   iload_2;\n+    475:   lookupswitch      {                     \/\/ 2\n+                1:      500;\n+                2:      512;\n+               default: 512  };\n+    500:   new               #2;                   \/\/ class java\/lang\/Object\n+    503:   dup;\n+    504:   invokespecial     #1;                   \/\/ Method java\/lang\/Object.\"<init>\":\"()V\"\n+    507:   astore            6;\n+    509:   goto              512;\n+    512:   return;\n+    StackMapTable: number_of_entries = 11\n+           frame_type = 246                        \/\/ early_larval\n+             unset_fields = [ #11,                 \/\/ fldS:\"Ljava\/lang\/String;\"\n+                              #16; ]  {            \/\/ fldFS:\"Ljava\/lang\/String;\"\n+             frame_type = 255                      \/\/ full\n+               offset_delta = 16 \n+                  stack_map = [ #22; ]             \/\/ class java\/lang\/ArithmeticException; \n+                 locals_map = [ #10, 1, 1, #2; ]   \/\/ class StackMapData02, int, int, class java\/lang\/Object; \n+             }\n+           frame_type = 246                        \/\/ early_larval\n+             unset_fields = [ #11,                 \/\/ fldS:\"Ljava\/lang\/String;\"\n+                              #16; ]  {            \/\/ fldFS:\"Ljava\/lang\/String;\"\n+             frame_type = 81                       \/\/ same_locals_1_stack_item\n+                  stack_map = [ #121; ]            \/\/ class java\/lang\/Throwable; \n+             }\n+           frame_type = 246                        \/\/ early_larval\n+             unset_fields = [ #26,                 \/\/ out:\"Ljava\/io\/PrintStream;\"\n+                              #16; ]  {            \/\/ fldFS:\"Ljava\/lang\/String;\"\n+             frame_type = 246                      \/\/ early_larval\n+               unset_fields = [ #11,               \/\/ fldS:\"Ljava\/lang\/String;\"\n+                                #16; ]  {          \/\/ fldFS:\"Ljava\/lang\/String;\"\n+               frame_type = 246                    \/\/ early_larval\n+                 unset_fields = [ #11; ] {         \/\/ fldS:\"Ljava\/lang\/String;\"; \n+                 frame_type = 255                  \/\/ full\n+                   offset_delta = 16 \n+                      stack_map = [ #22; ]         \/\/ class java\/lang\/ArithmeticException; \n+                     locals_map = [ #10, 1, 1, #2; ] \/\/ class StackMapData02, int, int, class java\/lang\/Object; \n+                 }\n+               }\n+             }\n+           frame_type = 36                         \/\/ same\n+           frame_type = 11                         \/\/ same\n+           frame_type = 27                         \/\/ same\n+           frame_type = 252                        \/\/ append\n+             offset_delta = 104\n+               locals_map = [ 1; ]                 \/\/ int; \n+           frame_type = 48                         \/\/ same\n+           frame_type = 250                        \/\/ chop1\n+             offset_delta = 97 \n+           frame_type = 34                         \/\/ same\n+           frame_type = 59                         \/\/ same\n+  }\n+\n+  public Method #105:#106                          \/\/ complexMethod:\"(ILjava\/lang\/Object;)I\" \n+    stack 3  locals 7\n+  {\n+     0:    iconst_0;\n+     1:    istore_3;\n+     2:    iconst_1;\n+     3:    istore            4;\n+     5:    aconst_null;\n+     6:    astore            5;\n+           try               T0;\n+     8:    iload_1;\n+     9:    ifle              47;\n+    12:    iload_1;\n+    13:    iconst_1;\n+    14:    iadd;\n+    15:    istore_3;\n+    16:    aload_2;\n+    17:    instanceof        #78;                  \/\/ class java\/lang\/String\n+    20:    ifeq              39;\n+    23:    aload_2;\n+    24:    checkcast         #78;                  \/\/ class java\/lang\/String\n+    27:    astore            5;\n+    29:    aload             5;\n+    31:    invokevirtual     #80;                  \/\/ Method java\/lang\/Object.hashCode:\"()I\"\n+    34:    istore            4;\n+    36:    iload             4;\n+           endtry            T0;\n+    38:    ireturn;\n+           try               T1;\n+    39:    iload_3;\n+    40:    iconst_2;\n+    41:    imul;\n+    42:    istore            4;\n+    44:    goto              104;\n+    47:    iload_1;\n+    48:    iconst_m1;\n+    49:    if_icmpne         70;\n+    52:    iload_1;\n+    53:    ineg;\n+    54:    istore_3;\n+    55:    iload_3;\n+    56:    iconst_3;\n+    57:    iadd;\n+    58:    istore            4;\n+    60:    new               #84;                  \/\/ class java\/lang\/RuntimeException\n+    63:    dup;\n+    64:    ldc               #86;                  \/\/ String \"Test exception\"\n+    66:    invokespecial     #88;                  \/\/ Method java\/lang\/RuntimeException.\"<init>\":\"(Ljava\/lang\/String;)V\"\n+    69:    athrow;\n+    70:    iconst_0;\n+    71:    istore            6;\n+    73:    iload             6;\n+    75:    iconst_2;\n+    76:    if_icmpge         104;\n+    79:    iload_3;\n+    80:    iload             6;\n+    82:    iadd;\n+    83:    istore_3;\n+    84:    iload_3;\n+    85:    iconst_1;\n+    86:    if_icmple         98;\n+    89:    iload_3;\n+    90:    iload             6;\n+    92:    isub;\n+    93:    istore            4;\n+    95:    goto              104;\n+    98:    iinc              6, 1;\n+    101:   goto              73;\n+           endtry            T1;\n+    104:   goto              118;\n+           catch             T0 #84;               \/\/ java\/lang\/RuntimeException\n+           catch             T1 #84;               \/\/ java\/lang\/RuntimeException\n+    107:   astore            6;\n+    109:   aload             6;\n+    111:   astore            5;\n+    113:   iload_3;\n+    114:   iconst_5;\n+    115:   iadd;\n+    116:   istore            4;\n+    118:   iload_3;\n+    119:   iload             4;\n+    121:   iadd;\n+    122:   ireturn;\n+    StackMapTable: number_of_entries = 8\n+           frame_type = 254                        \/\/ append\n+             offset_delta = 39 \n+               locals_map = [ 1, 1, #2; ]          \/\/ int, int, class java\/lang\/Object; \n+           frame_type = 7                          \/\/ same\n+           frame_type = 22                         \/\/ same\n+           frame_type = 246                        \/\/ early_larval\n+             unset_fields = [ #11,                 \/\/ fldS:\"Ljava\/lang\/String;\"\n+                              #16,                 \/\/ fldFS:\"Ljava\/lang\/String;\"\n+                              #26,                 \/\/ out:\"Ljava\/io\/PrintStream;\"\n+                              #112; ]  {           \/\/ fldL:\"J\"\n+             frame_type = 252                      \/\/ append\n+               offset_delta = 2  \n+                 locals_map = [ 1; ]               \/\/ int; \n+             }\n+           frame_type = 24                         \/\/ same\n+           frame_type = 250                        \/\/ chop1\n+             offset_delta = 5  \n+           frame_type = 246                        \/\/ early_larval\n+             unset_fields = [ #11,                 \/\/ fldS:\"Ljava\/lang\/String;\"\n+                              #16,                 \/\/ fldFS:\"Ljava\/lang\/String;\"\n+                              #26,                 \/\/ out:\"Ljava\/io\/PrintStream;\"\n+                              #112; ]  {           \/\/ fldL:\"J\"\n+             frame_type = 66                       \/\/ same_locals_1_stack_item\n+                  stack_map = [ #84; ]             \/\/ class java\/lang\/RuntimeException; \n+             }\n+           frame_type = 10                         \/\/ same\n+  }\n+\n+  public Method #109:#110                          \/\/ generateFullFrame:\"(I)I\" \n+    stack 3  locals 6\n+  {\n+     0:    iconst_0;\n+     1:    istore_2;\n+     2:    aconst_null;\n+     3:    astore_3;\n+     4:    iconst_0;\n+     5:    istore            4;\n+           try               T0;\n+     7:    iload_1;\n+     8:    ifle              25;\n+    11:    ldc               #90;                  \/\/ String \"positive\"\n+    13:    astore_3;\n+    14:    iconst_1;\n+    15:    istore            4;\n+    17:    aload_3;\n+    18:    invokevirtual     #80;                  \/\/ Method java\/lang\/Object.hashCode:\"()I\"\n+    21:    istore_2;\n+    22:    goto              39;\n+    25:    iload_1;\n+    26:    iconst_2;\n+    27:    imul;\n+    28:    istore_2;\n+    29:    new               #84;                  \/\/ class java\/lang\/RuntimeException\n+    32:    dup;\n+    33:    ldc               #92;                  \/\/ String \"non-positive\"\n+    35:    invokespecial     #88;                  \/\/ Method java\/lang\/RuntimeException.\"<init>\":\"(Ljava\/lang\/String;)V\"\n+    38:    athrow;\n+           endtry            T0;\n+    39:    goto              53;\n+           catch             T0 #84;               \/\/ java\/lang\/RuntimeException\n+    42:    astore            5;\n+    44:    aload             5;\n+    46:    astore_3;\n+    47:    iconst_0;\n+    48:    istore            4;\n+    50:    iload_1;\n+    51:    ineg;\n+    52:    istore_2;\n+    53:    iload             4;\n+    55:    ifeq              62;\n+    58:    iload_2;\n+    59:    iconst_1;\n+    60:    iadd;\n+    61:    ireturn;\n+    62:    getstatic         #24;                  \/\/ Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\"\n+    65:    ldc               #94;                  \/\/ String \"Computing result\"\n+    67:    invokevirtual     #32;                  \/\/ Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\"\n+    70:    iload_2;\n+    71:    ireturn;\n+    StackMapTable: number_of_entries = 5\n+           frame_type = 246                        \/\/ early_larval\n+             unset_fields = [ #11,                 \/\/ fldS:\"Ljava\/lang\/String;\"\n+                              #16,                 \/\/ fldFS:\"Ljava\/lang\/String;\"\n+                              #26,                 \/\/ out:\"Ljava\/io\/PrintStream;\"\n+                              #112; ]  {           \/\/ fldL:\"J\"\n+             frame_type = 254                      \/\/ append\n+               offset_delta = 25 \n+                 locals_map = [ 1, #2, 1; ]        \/\/ int, class java\/lang\/Object, int; \n+             }\n+           frame_type = 246                        \/\/ early_larval\n+             unset_fields = [ #11,                 \/\/ fldS:\"Ljava\/lang\/String;\"\n+                              #16,                 \/\/ fldFS:\"Ljava\/lang\/String;\"\n+                              #26; ]  {            \/\/ out:\"Ljava\/io\/PrintStream;\"\n+             frame_type = 13                       \/\/ same\n+             }\n+           frame_type = 246                        \/\/ early_larval\n+             unset_fields = [ #11,                 \/\/ fldS:\"Ljava\/lang\/String;\"\n+                              #16; ]  {            \/\/ fldFS:\"Ljava\/lang\/String;\"\n+             frame_type = 66                       \/\/ same_locals_1_stack_item\n+                  stack_map = [ #84; ]             \/\/ class java\/lang\/RuntimeException; \n+             }\n+           frame_type = 246                        \/\/ early_larval\n+             unset_fields = [ #11; ] {             \/\/ fldS:\"Ljava\/lang\/String;\"; \n+             frame_type = 10                       \/\/ same\n+             }\n+           frame_type = 246                        \/\/ early_larval\n+             unset_fields = [ ] {                 \n+             frame_type = 8                        \/\/ same\n+             }\n+  }\n+\n+  public static Method #123:#124                   \/\/ main:\"([Ljava\/lang\/String;)V\" \n+    stack 3  locals 3\n+  {\n+     0:    new               #10;                  \/\/ class StackMapData02\n+     3:    dup;\n+     4:    invokespecial     #96;                  \/\/ Method \"<init>\":\"()V\"\n+     7:    astore_1;\n+     8:    iconst_0;\n+     9:    istore_2;\n+    10:    iload_2;\n+    11:    bipush            6;\n+    13:    if_icmpgt         27;\n+    16:    aload_1;\n+    17:    iload_2;\n+    18:    invokevirtual     #97;                  \/\/ Method generateFrames:\"(I)V\"\n+    21:    iinc              2, 1;\n+    24:    goto              10;\n+    27:    aload_1;\n+    28:    iconst_0;\n+    29:    ldc               #101;                 \/\/ String \"test\"\n+    31:    invokevirtual     #103;                 \/\/ Method complexMethod:\"(ILjava\/lang\/Object;)I\"\n+    34:    pop;\n+    35:    aload_1;\n+    36:    bipush            23;\n+    38:    invokevirtual     #107;                 \/\/ Method generateFullFrame:\"(I)I\"\n+    41:    pop;\n+    42:    return;\n+    StackMapTable: number_of_entries = 2\n+           frame_type = 246                        \/\/ early_larval\n+             unset_fields = [ ] {                 \n+             frame_type = 253                      \/\/ append\n+               offset_delta = 10 \n+                 locals_map = [ #10, 1; ]          \/\/ class StackMapData02, int; \n+             }\n+           frame_type = 250                        \/\/ chop1\n+             offset_delta = 16 \n+  }\n+\n+  static Method #125:#6                            \/\/ \"<clinit>\":\"()V\" \n+    stack 2  locals 0\n+  {\n+     0:    lconst_1;\n+     1:    putstatic         #111;                 \/\/ Field fldL:\"J\"\n+     4:    return;\n+  }\n+\n+  SourceFile                 #150;                 \/\/ StackMapData02.g.t.jasm\n+\n+  InnerClasses {\n+    public static final #148 = #144 of #146;       \/\/ Lookup = class java\/lang\/invoke\/MethodHandles$Lookup of class java\/lang\/invoke\/MethodHandles\n+  }\n+\n+  BootstrapMethods {\n+     0:    #137;                                   \/\/ REF_invokeStatic:java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                                                   \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";\n+     Arguments:\n+           #135;                                   \/\/ String \"\\u0001: \\u0001\\u0001\"\n+\n+     1:    #137;                                   \/\/ REF_invokeStatic:java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                                                   \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";\n+     Arguments:\n+           #135;                                   \/\/ String \"\\u0001: \\u0001\\u0001\"\n+\n+     2:    #137;                                   \/\/ REF_invokeStatic:java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                                                   \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";\n+     Arguments:\n+           #135;                                   \/\/ String \"\\u0001: \\u0001\\u0001\"\n+\n+     3:    #137;                                   \/\/ REF_invokeStatic:java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                                                   \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";\n+     Arguments:\n+           #135;                                   \/\/ String \"\\u0001: \\u0001\\u0001\"\n+\n+     4:    #137;                                   \/\/ REF_invokeStatic:java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                                                   \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";\n+     Arguments:\n+           #135;                                   \/\/ String \"\\u0001: \\u0001\\u0001\"\n+  }\n+} \/\/ end Class org\/openjdk\/asmtools\/attribute\/StackMapTable\/data\/StackMapData02 compiled from \"StackMapData02.g.t.jasm\"\n","filename":"test\/resources\/org\/openjdk\/asmtools\/attribute\/StackMapTable\/StackMapData02.g.jasm","additions":768,"deletions":0,"binary":false,"changes":768,"status":"added"},{"patch":"@@ -0,0 +1,510 @@\n+class org\/openjdk\/asmtools\/attribute\/StackMapTable\/data\/StackMapData02 {\n+  0xCAFEBABE;\n+  0;                                       \/\/ minor version\n+  69;                                      \/\/ version\n+  [151] {                                  \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Method #2 #3;                          \/\/ #1     at 0x0A\n+    Class #4;                              \/\/ #2     at 0x0F\n+    NameAndType #5 #6;                     \/\/ #3     at 0x12\n+    Utf8 \"java\/lang\/Object\";               \/\/ #4     at 0x17\n+    Utf8 \"<init>\";                         \/\/ #5     at 0x2A\n+    Utf8 \"()V\";                            \/\/ #6     at 0x33\n+    String #8;                             \/\/ #7     at 0x39\n+    Utf8 \"string\";                         \/\/ #8     at 0x3C\n+    Field #10 #11;                         \/\/ #9     at 0x45\n+    Class #12;                             \/\/ #10     at 0x4A\n+    NameAndType #13 #14;                   \/\/ #11     at 0x4D\n+    Utf8 \"org\/openjdk\/asmtools\/attribute\/StackMapTable\/data\/StackMapData02\";  \/\/ #12     at 0x52\n+    Utf8 \"fldS\";                           \/\/ #13     at 0x95\n+    Utf8 \"Ljava\/lang\/String;\";             \/\/ #14     at 0x9C\n+    Field #10 #16;                         \/\/ #15     at 0xB1\n+    NameAndType #17 #14;                   \/\/ #16     at 0xB6\n+    Utf8 \"fldFS\";                          \/\/ #17     at 0xBB\n+    Method #2 #19;                         \/\/ #18     at 0xC3\n+    NameAndType #20 #21;                   \/\/ #19     at 0xC8\n+    Utf8 \"toString\";                       \/\/ #20     at 0xCD\n+    Utf8 \"()Ljava\/lang\/String;\";           \/\/ #21     at 0xD8\n+    Class #23;                             \/\/ #22     at 0xEF\n+    Utf8 \"java\/lang\/ArithmeticException\";  \/\/ #23     at 0xF2\n+    Field #25 #26;                         \/\/ #24     at 0x0112\n+    Class #27;                             \/\/ #25     at 0x0117\n+    NameAndType #28 #29;                   \/\/ #26     at 0x011A\n+    Utf8 \"java\/lang\/System\";               \/\/ #27     at 0x011F\n+    Utf8 \"out\";                            \/\/ #28     at 0x0132\n+    Utf8 \"Ljava\/io\/PrintStream;\";          \/\/ #29     at 0x0138\n+    String #31;                            \/\/ #30     at 0x0150\n+    Utf8 \"frame\";                          \/\/ #31     at 0x0153\n+    Method #33 #34;                        \/\/ #32     at 0x015B\n+    Class #35;                             \/\/ #33     at 0x0160\n+    NameAndType #36 #37;                   \/\/ #34     at 0x0163\n+    Utf8 \"java\/io\/PrintStream\";            \/\/ #35     at 0x0168\n+    Utf8 \"println\";                        \/\/ #36     at 0x017E\n+    Utf8 \"(Ljava\/lang\/String;)V\";          \/\/ #37     at 0x0188\n+    Float 0x42C80000;                      \/\/ #38     at 0x01A0\n+    Method #40 #41;                        \/\/ #39     at 0x01A5\n+    Class #42;                             \/\/ #40     at 0x01AA\n+    NameAndType #43 #44;                   \/\/ #41     at 0x01AD\n+    Utf8 \"java\/lang\/Math\";                 \/\/ #42     at 0x01B2\n+    Utf8 \"round\";                          \/\/ #43     at 0x01C3\n+    Utf8 \"(F)I\";                           \/\/ #44     at 0x01CB\n+    InvokeDynamic 0s #46;                  \/\/ #45     at 0x01D2\n+    NameAndType #47 #48;                   \/\/ #46     at 0x01D7\n+    Utf8 \"makeConcatWithConstants\";        \/\/ #47     at 0x01DC\n+    Utf8 \"(I)Ljava\/lang\/String;\";          \/\/ #48     at 0x01F6\n+    Float 0x4048F5C3;                      \/\/ #49     at 0x020E\n+    InvokeDynamic 1s #46;                  \/\/ #50     at 0x0213\n+    Float 0x41200000;                      \/\/ #51     at 0x0218\n+    Float 0x42DC0000;                      \/\/ #52     at 0x021D\n+    Double 0x4059000000000000;;            \/\/ #53     at 0x0222\n+    Method #40 #56;                        \/\/ #55     at 0x022B\n+    NameAndType #43 #57;                   \/\/ #56     at 0x0230\n+    Utf8 \"(D)J\";                           \/\/ #57     at 0x0235\n+    InvokeDynamic 2s #59;                  \/\/ #58     at 0x023C\n+    NameAndType #47 #60;                   \/\/ #59     at 0x0241\n+    Utf8 \"(J)Ljava\/lang\/String;\";          \/\/ #60     at 0x0246\n+    Double 0x4058FF5C28F5C28F;;            \/\/ #61     at 0x025E\n+    InvokeDynamic 3s #64;                  \/\/ #63     at 0x0267\n+    NameAndType #47 #65;                   \/\/ #64     at 0x026C\n+    Utf8 \"(D)Ljava\/lang\/String;\";          \/\/ #65     at 0x0271\n+    String #67;                            \/\/ #66     at 0x0289\n+    Utf8 \"chop_frame\";                     \/\/ #67     at 0x028C\n+    String #69;                            \/\/ #68     at 0x0299\n+    Utf8 \"_frame_\";                        \/\/ #69     at 0x029C\n+    Method #33 #71;                        \/\/ #70     at 0x02A6\n+    NameAndType #36 #72;                   \/\/ #71     at 0x02AB\n+    Utf8 \"(D)V\";                           \/\/ #72     at 0x02B0\n+    String #74;                            \/\/ #73     at 0x02B7\n+    Utf8 \"n_frame\";                        \/\/ #74     at 0x02BA\n+    InvokeDynamic 4s #76;                  \/\/ #75     at 0x02C4\n+    NameAndType #47 #77;                   \/\/ #76     at 0x02C9\n+    Utf8 \"(Ljava\/lang\/String;CI)Ljava\/lang\/String;\";  \/\/ #77     at 0x02CE\n+    Class #79;                             \/\/ #78     at 0x02F9\n+    Utf8 \"java\/lang\/String\";               \/\/ #79     at 0x02FC\n+    Method #2 #81;                         \/\/ #80     at 0x030F\n+    NameAndType #82 #83;                   \/\/ #81     at 0x0314\n+    Utf8 \"hashCode\";                       \/\/ #82     at 0x0319\n+    Utf8 \"()I\";                            \/\/ #83     at 0x0324\n+    Class #85;                             \/\/ #84     at 0x032A\n+    Utf8 \"java\/lang\/RuntimeException\";     \/\/ #85     at 0x032D\n+    String #87;                            \/\/ #86     at 0x034A\n+    Utf8 \"Test exception\";                 \/\/ #87     at 0x034D\n+    Method #84 #89;                        \/\/ #88     at 0x035E\n+    NameAndType #5 #37;                    \/\/ #89     at 0x0363\n+    String #91;                            \/\/ #90     at 0x0368\n+    Utf8 \"positive\";                       \/\/ #91     at 0x036B\n+    String #93;                            \/\/ #92     at 0x0376\n+    Utf8 \"non-positive\";                   \/\/ #93     at 0x0379\n+    String #95;                            \/\/ #94     at 0x0388\n+    Utf8 \"Computing result\";               \/\/ #95     at 0x038B\n+    Method #10 #3;                         \/\/ #96     at 0x039E\n+    Method #10 #98;                        \/\/ #97     at 0x03A3\n+    NameAndType #99 #100;                  \/\/ #98     at 0x03A8\n+    Utf8 \"generateFrames\";                 \/\/ #99     at 0x03AD\n+    Utf8 \"(I)V\";                           \/\/ #100     at 0x03BE\n+    String #102;                           \/\/ #101     at 0x03C5\n+    Utf8 \"test\";                           \/\/ #102     at 0x03C8\n+    Method #10 #104;                       \/\/ #103     at 0x03CF\n+    NameAndType #105 #106;                 \/\/ #104     at 0x03D4\n+    Utf8 \"complexMethod\";                  \/\/ #105     at 0x03D9\n+    Utf8 \"(ILjava\/lang\/Object;)I\";         \/\/ #106     at 0x03E9\n+    Method #10 #108;                       \/\/ #107     at 0x0402\n+    NameAndType #109 #110;                 \/\/ #108     at 0x0407\n+    Utf8 \"generateFullFrame\";              \/\/ #109     at 0x040C\n+    Utf8 \"(I)I\";                           \/\/ #110     at 0x0420\n+    Field #10 #112;                        \/\/ #111     at 0x0427\n+    NameAndType #113 #114;                 \/\/ #112     at 0x042C\n+    Utf8 \"fldL\";                           \/\/ #113     at 0x0431\n+    Utf8 \"J\";                              \/\/ #114     at 0x0438\n+    Utf8 \"fldI\";                           \/\/ #115     at 0x043C\n+    Utf8 \"I\";                              \/\/ #116     at 0x0443\n+    Utf8 \"ConstantValue\";                  \/\/ #117     at 0x0447\n+    Integer 0x00000000;                    \/\/ #118     at 0x0457\n+    Utf8 \"Code\";                           \/\/ #119     at 0x045C\n+    Utf8 \"StackMapTable\";                  \/\/ #120     at 0x0463\n+    Class #122;                            \/\/ #121     at 0x0473\n+    Utf8 \"java\/lang\/Throwable\";            \/\/ #122     at 0x0476\n+    Utf8 \"main\";                           \/\/ #123     at 0x048C\n+    Utf8 \"([Ljava\/lang\/String;)V\";         \/\/ #124     at 0x0493\n+    Utf8 \"<clinit>\";                       \/\/ #125     at 0x04AC\n+    Utf8 \"BootstrapMethods\";               \/\/ #126     at 0x04B7\n+    String #128;                           \/\/ #127     at 0x04CA\n+    Utf8 \"item_frame\\u0001\";               \/\/ #128     at 0x04CD\n+    String #130;                           \/\/ #129     at 0x04DB\n+    Utf8 \"item_frame_\\u0001\";              \/\/ #130     at 0x04DE\n+    String #132;                           \/\/ #131     at 0x04ED\n+    Utf8 \"_frame: \\u0001\";                 \/\/ #132     at 0x04F0\n+    String #134;                           \/\/ #133     at 0x04FC\n+    Utf8 \"Before chop_frame: \\u0001\";      \/\/ #134     at 0x04FF\n+    String #136;                           \/\/ #135     at 0x0516\n+    Utf8 \"\\u0001: \\u0001\\u0001\";           \/\/ #136     at 0x0519\n+    MethodHandle 6b #138;                  \/\/ #137     at 0x0521\n+    Method #139 #140;                      \/\/ #138     at 0x0525\n+    Class #141;                            \/\/ #139     at 0x052A\n+    NameAndType #47 #142;                  \/\/ #140     at 0x052D\n+    Utf8 \"java\/lang\/invoke\/StringConcatFactory\";  \/\/ #141     at 0x0532\n+    Utf8 \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";  \/\/ #142     at 0x0559\n+    Utf8 \"InnerClasses\";                   \/\/ #143     at 0x05F4\n+    Class #145;                            \/\/ #144     at 0x0603\n+    Utf8 \"java\/lang\/invoke\/MethodHandles$Lookup\";  \/\/ #145     at 0x0606\n+    Class #147;                            \/\/ #146     at 0x062E\n+    Utf8 \"java\/lang\/invoke\/MethodHandles\";  \/\/ #147     at 0x0631\n+    Utf8 \"Lookup\";                         \/\/ #148     at 0x0652\n+    Utf8 \"SourceFile\";                     \/\/ #149     at 0x065B\n+    Utf8 \"StackMapData02.g.t.jasm\";        \/\/ #150     at 0x0668\n+  }                                        \/\/ end of Constant Pool\n+\n+  0x0021;                                  \/\/ access [ ACC_PUBLIC, ACC_SUPER ]\n+  #10;                                     \/\/ this_cpx\n+  #2;                                      \/\/ super_cpx\n+\n+  [0] {                                    \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [4] {                                    \/\/ Fields\n+    {                                      \/\/ field at 0x068C\n+      0x0018;                              \/\/ access\n+      #115;                                \/\/ name_index       : fldI\n+      #116;                                \/\/ descriptor_index : I\n+      [1] {                                \/\/ Attributes\n+        Attr(#117, 2) {                    \/\/ ConstantValue at 0x0694\n+          #118;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ field at 0x069C\n+      0x0008;                              \/\/ access\n+      #113;                                \/\/ name_index       : fldL\n+      #114;                                \/\/ descriptor_index : J\n+      [0] {                                \/\/ Attributes\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ field at 0x06A4\n+      0x0004;                              \/\/ access\n+      #13;                                 \/\/ name_index       : fldS\n+      #14;                                 \/\/ descriptor_index : Ljava\/lang\/String;\n+      [0] {                                \/\/ Attributes\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ field at 0x06AC\n+      0x0011;                              \/\/ access\n+      #17;                                 \/\/ name_index       : fldFS\n+      #14;                                 \/\/ descriptor_index : Ljava\/lang\/String;\n+      [1] {                                \/\/ Attributes\n+        Attr(#117, 2) {                    \/\/ ConstantValue at 0x06B4\n+          #7;\n+        }                                  \/\/ end of ConstantValue\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [6] {                                    \/\/ Methods\n+    {                                      \/\/ method at 0x06BE\n+      0x0001;                              \/\/ access\n+      #5;                                  \/\/ name_index       : <init>\n+      #6;                                  \/\/ descriptor_index : ()V\n+      [1] {                                \/\/ Attributes\n+        Attr(#119, 29) {                   \/\/ Code at 0x06C6\n+          2;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[17]{\n+            0x2A 0xB7 0x00 0x01 0x2A 0x12 0x07 0xB5 0x00 0x09 0x2A 0x12;\n+            0x07 0xB5 0x00 0x0F 0xB1;\n+          }\n+          [0] {                            \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [0] {                            \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method at 0x06E9\n+      0x0001;                              \/\/ access\n+      #99;                                 \/\/ name_index       : generateFrames\n+      #100;                                \/\/ descriptor_index : (I)V\n+      [1] {                                \/\/ Attributes\n+        Attr(#119, 683) {                  \/\/ Code at 0x06F1\n+          5;                               \/\/ max_stack\n+          10;                              \/\/ max_locals\n+          Bytes[513]{\n+            0x03 0x3D 0x01 0x4E 0x04 0x1C 0x6C 0x3D 0x2D 0xB6 0x00 0x12;\n+            0x57 0xA7 0x00 0x1F 0x3A 0x04 0xBB 0x00 0x02 0x59 0xB7 0x00;\n+            0x01 0x4E 0x2D 0xB6 0x00 0x12 0x57 0xA7 0x00 0x0D 0x3A 0x05;\n+            0x2D 0xB6 0x00 0x12 0x57 0x19 0x05 0xBF 0x1C 0x9A 0x00 0x05;\n+            0x01 0x4E 0x1C 0xAB 0x00 0x00 0x00 0x24 0x00 0x00 0x00 0x02;\n+            0x00 0x00 0x00 0x01 0x00 0x00 0x00 0x19 0x00 0x00 0x00 0x02;\n+            0x00 0x00 0x00 0x24 0xBB 0x00 0x02 0x59 0xB7 0x00 0x01 0x4E;\n+            0xA7 0x00 0x03 0x1B 0x9A 0x00 0x0B 0xB2 0x00 0x18 0x12 0x1E;\n+            0xB6 0x00 0x20 0x1B 0x04 0xA0 0x00 0x1A 0x10 0x2A 0x36 0x04;\n+            0xB2 0x00 0x18 0x15 0x04 0x12 0x26 0xB8 0x00 0x27 0x68 0xBA;\n+            0x00 0x2D 0x00 0x00 0xB6 0x00 0x20 0x1B 0x05 0xA0 0x00 0x37;\n+            0x03 0x36 0x04 0x03 0x36 0x05 0x15 0x05 0x11 0x0B 0xB8 0xA2;\n+            0x00 0x1C 0x12 0x31 0x38 0x06 0x15 0x04 0x17 0x06 0x12 0x26;\n+            0xB8 0x00 0x27 0x86 0x6A 0x8B 0x60 0x36 0x04 0x84 0x05 0x01;\n+            0xA7 0xFF 0xE2 0xB2 0x00 0x18 0x15 0x04 0xBA 0x00 0x32 0x00;\n+            0x00 0xB6 0x00 0x20 0x12 0x33 0xB8 0x00 0x27 0x36 0x04 0x1B;\n+            0x06 0xA0 0x00 0x27 0x12 0x34 0xB8 0x00 0x27 0x36 0x05 0x14;\n+            0x00 0x35 0xB8 0x00 0x37 0x37 0x06 0xB2 0x00 0x18 0x15 0x05;\n+            0x85 0x16 0x06 0x61 0x15 0x04 0x85 0x69 0xBA 0x00 0x3A 0x00;\n+            0x00 0xB6 0x00 0x20 0x1B 0x07 0xA0 0x00 0x27 0x10 0x32 0x15;\n+            0x04 0x68 0x36 0x05 0x14 0x00 0x3D 0x15 0x04 0x87 0x6B 0x39;\n+            0x06 0xB2 0x00 0x18 0x15 0x05 0x87 0x18 0x06 0x63 0xBA 0x00;\n+            0x3F 0x00 0x00 0xB6 0x00 0x20 0xA7 0x00 0x0B 0xB2 0x00 0x18;\n+            0x12 0x42 0xB6 0x00 0x20 0x1B 0x08 0xA0 0x00 0x60 0x03 0x36;\n+            0x05 0x03 0x36 0x06 0x15 0x06 0x11 0x09 0xC4 0xA2 0x00 0x1D;\n+            0x12 0x31 0x38 0x07 0x15 0x05 0x17 0x07 0x15 0x06 0x86 0xB8;\n+            0x00 0x27 0x86 0x6A 0x8B 0x60 0x36 0x05 0x84 0x06 0x01 0xA7;\n+            0xFF 0xE1 0x15 0x05 0x10 0x64 0xA4 0x00 0x0E 0xB2 0x00 0x18;\n+            0x12 0x44 0xB6 0x00 0x20 0xA7 0x00 0x26 0x15 0x05 0x10 0x32;\n+            0xA2 0x00 0x1F 0x10 0x32 0x15 0x04 0x68 0x36 0x06 0x14 0x00;\n+            0x3D 0x15 0x04 0x87 0x6B 0x39 0x07 0xB2 0x00 0x18 0x15 0x06;\n+            0x87 0x18 0x07 0x63 0xB6 0x00 0x46 0x1B 0x10 0x06 0xA0 0x00;\n+            0x20 0x12 0x49 0x3A 0x05 0x10 0x46 0x36 0x06 0x10 0x64 0x36;\n+            0x07 0xB2 0x00 0x18 0x19 0x05 0x15 0x06 0x15 0x07 0xBA 0x00;\n+            0x4B 0x00 0x00 0xB6 0x00 0x20 0x03 0x36 0x05 0x01 0x3A 0x06;\n+            0x04 0x15 0x05 0x6C 0x36 0x05 0x19 0x06 0xB6 0x00 0x12 0x57;\n+            0xA7 0x00 0x22 0x3A 0x07 0xBB 0x00 0x02 0x59 0xB7 0x00 0x01;\n+            0x3A 0x06 0x19 0x06 0xB6 0x00 0x12 0x57 0xA7 0x00 0x0E 0x3A;\n+            0x09 0x19 0x06 0xB6 0x00 0x12 0x57 0x19 0x09 0xBF 0x15 0x05;\n+            0x9A 0x00 0x06 0x01 0x3A 0x06 0x1C 0xAB 0x00 0x00 0x00 0x25;\n+            0x00 0x00 0x00 0x02 0x00 0x00 0x00 0x01 0x00 0x00 0x00 0x19;\n+            0x00 0x00 0x00 0x02 0x00 0x00 0x00 0x25 0xBB 0x00 0x02 0x59;\n+            0xB7 0x00 0x01 0x3A 0x06 0xA7 0x00 0x03 0xB1;\n+          }\n+          [8] {                            \/\/ Traps\n+               4    8   16  22;            \/\/ at 0x090A\n+               4    8   34   0;            \/\/ at 0x0912\n+              16   26   34   0;            \/\/ at 0x091A\n+              34   36   34   0;            \/\/ at 0x0922\n+             420  426  435  22;            \/\/ at 0x092A\n+             420  426  455   0;            \/\/ at 0x0932\n+             435  446  455   0;            \/\/ at 0x093A\n+             455  457  455   0;            \/\/ at 0x0942\n+          }                                \/\/ end of Traps\n+          [1] {                            \/\/ Attributes\n+            Attr(#120, 88) {               \/\/ StackMapTable at 0x0944\n+              [11] {                       \/\/\n+                246b, [2]{#11; #16}, {     \/\/ early_larval_frame\n+                  255b, 16, [4]{7b,#10; 1b; 1b; 7b,#2}, [1]{7b,#22};  \/\/ full_frame\n+                };\n+                246b, [2]{#11; #16}, {     \/\/ early_larval_frame\n+                  81b, [1]z{7b,#121};      \/\/ same_locals_1_stack_item_frame\n+                };\n+                246b, [2]{#26; #16}, {     \/\/ early_larval_frame\n+                  246b, [2]{#11; #16}, {   \/\/ early_larval_frame\n+                    246b, [1]{#11}, {      \/\/ early_larval_frame\n+                      255b, 16, [4]{7b,#10; 1b; 1b; 7b,#2}, [1]{7b,#22};  \/\/ full_frame\n+                    };\n+                  };\n+                };\n+                36b;                       \/\/ same_frame\n+                11b;                       \/\/ same_frame\n+                27b;                       \/\/ same_frame\n+                252b, 104, [1]z{1b};       \/\/ append_frame 1\n+                48b;                       \/\/ same_frame\n+                250b, 97;                  \/\/ chop_frame 1\n+                34b;                       \/\/ same_frame\n+                59b;                       \/\/ same_frame\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method at 0x09A2\n+      0x0001;                              \/\/ access\n+      #105;                                \/\/ name_index       : complexMethod\n+      #106;                                \/\/ descriptor_index : (ILjava\/lang\/Object;)I\n+      [1] {                                \/\/ Attributes\n+        Attr(#119, 204) {                  \/\/ Code at 0x09AA\n+          3;                               \/\/ max_stack\n+          7;                               \/\/ max_locals\n+          Bytes[123]{\n+            0x03 0x3E 0x04 0x36 0x04 0x01 0x3A 0x05 0x1B 0x9E 0x00 0x26;\n+            0x1B 0x04 0x60 0x3E 0x2C 0xC1 0x00 0x4E 0x99 0x00 0x13 0x2C;\n+            0xC0 0x00 0x4E 0x3A 0x05 0x19 0x05 0xB6 0x00 0x50 0x36 0x04;\n+            0x15 0x04 0xAC 0x1D 0x05 0x68 0x36 0x04 0xA7 0x00 0x3C 0x1B;\n+            0x02 0xA0 0x00 0x15 0x1B 0x74 0x3E 0x1D 0x06 0x60 0x36 0x04;\n+            0xBB 0x00 0x54 0x59 0x12 0x56 0xB7 0x00 0x58 0xBF 0x03 0x36;\n+            0x06 0x15 0x06 0x05 0xA2 0x00 0x1C 0x1D 0x15 0x06 0x60 0x3E;\n+            0x1D 0x04 0xA4 0x00 0x0C 0x1D 0x15 0x06 0x64 0x36 0x04 0xA7;\n+            0x00 0x09 0x84 0x06 0x01 0xA7 0xFF 0xE4 0xA7 0x00 0x0E 0x3A;\n+            0x06 0x19 0x06 0x3A 0x05 0x1D 0x08 0x60 0x36 0x04 0x1D 0x15;\n+            0x04 0x60 0xAC;\n+          }\n+          [2] {                            \/\/ Traps\n+               8   38  107  84;            \/\/ at 0x0A3D\n+              39  104  107  84;            \/\/ at 0x0A45\n+          }                                \/\/ end of Traps\n+          [1] {                            \/\/ Attributes\n+            Attr(#120, 47) {               \/\/ StackMapTable at 0x0A47\n+              [8] {                        \/\/\n+                254b, 39, [3]z{1b; 1b; 7b,#2};  \/\/ append_frame 3\n+                7b;                        \/\/ same_frame\n+                22b;                       \/\/ same_frame\n+                246b, [4]{#11; #16; #26; #112}, {  \/\/ early_larval_frame\n+                  252b, 2, [1]z{1b};       \/\/ append_frame 1\n+                };\n+                24b;                       \/\/ same_frame\n+                250b, 5;                   \/\/ chop_frame 1\n+                246b, [4]{#11; #16; #26; #112}, {  \/\/ early_larval_frame\n+                  66b, [1]z{7b,#84};       \/\/ same_locals_1_stack_item_frame\n+                };\n+                10b;                       \/\/ same_frame\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method at 0x0A7C\n+      0x0001;                              \/\/ access\n+      #109;                                \/\/ name_index       : generateFullFrame\n+      #110;                                \/\/ descriptor_index : (I)I\n+      [1] {                                \/\/ Attributes\n+        Attr(#119, 150) {                  \/\/ Code at 0x0A84\n+          3;                               \/\/ max_stack\n+          6;                               \/\/ max_locals\n+          Bytes[72]{\n+            0x03 0x3D 0x01 0x4E 0x03 0x36 0x04 0x1B 0x9E 0x00 0x11 0x12;\n+            0x5A 0x4E 0x04 0x36 0x04 0x2D 0xB6 0x00 0x50 0x3D 0xA7 0x00;\n+            0x11 0x1B 0x05 0x68 0x3D 0xBB 0x00 0x54 0x59 0x12 0x5C 0xB7;\n+            0x00 0x58 0xBF 0xA7 0x00 0x0E 0x3A 0x05 0x19 0x05 0x4E 0x03;\n+            0x36 0x04 0x1B 0x74 0x3D 0x15 0x04 0x99 0x00 0x07 0x1C 0x04;\n+            0x60 0xAC 0xB2 0x00 0x18 0x12 0x5E 0xB6 0x00 0x20 0x1C 0xAC;\n+          }\n+          [1] {                            \/\/ Traps\n+               7   39   42  84;            \/\/ at 0x0AE4\n+          }                                \/\/ end of Traps\n+          [1] {                            \/\/ Attributes\n+            Attr(#120, 52) {               \/\/ StackMapTable at 0x0AE6\n+              [5] {                        \/\/\n+                246b, [4]{#11; #16; #26; #112}, {  \/\/ early_larval_frame\n+                  254b, 25, [3]z{1b; 7b,#2; 1b};  \/\/ append_frame 3\n+                };\n+                246b, [3]{#11; #16; #26}, {  \/\/ early_larval_frame\n+                  13b;                     \/\/ same_frame\n+                };\n+                246b, [2]{#11; #16}, {     \/\/ early_larval_frame\n+                  66b, [1]z{7b,#84};       \/\/ same_locals_1_stack_item_frame\n+                };\n+                246b, [1]{#11}, {          \/\/ early_larval_frame\n+                  10b;                     \/\/ same_frame\n+                };\n+                246b, [0]{}, {             \/\/ early_larval_frame\n+                  8b;                      \/\/ same_frame\n+                };\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method at 0x0B20\n+      0x0009;                              \/\/ access\n+      #123;                                \/\/ name_index       : main\n+      #124;                                \/\/ descriptor_index : ([Ljava\/lang\/String;)V\n+      [1] {                                \/\/ Attributes\n+        Attr(#119, 76) {                   \/\/ Code at 0x0B28\n+          3;                               \/\/ max_stack\n+          3;                               \/\/ max_locals\n+          Bytes[43]{\n+            0xBB 0x00 0x0A 0x59 0xB7 0x00 0x60 0x4C 0x03 0x3D 0x1C 0x10;\n+            0x06 0xA3 0x00 0x0E 0x2B 0x1C 0xB6 0x00 0x61 0x84 0x02 0x01;\n+            0xA7 0xFF 0xF2 0x2B 0x03 0x12 0x65 0xB6 0x00 0x67 0x57 0x2B;\n+            0x10 0x17 0xB6 0x00 0x6B 0x57 0xB1;\n+          }\n+          [0] {                            \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [1] {                            \/\/ Attributes\n+            Attr(#120, 15) {               \/\/ StackMapTable at 0x0B65\n+              [2] {                        \/\/\n+                246b, [0]{}, {             \/\/ early_larval_frame\n+                  253b, 10, [2]z{7b,#10; 1b};  \/\/ append_frame 2\n+                };\n+                250b, 16;                  \/\/ chop_frame 1\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method at 0x0B7A\n+      0x0008;                              \/\/ access\n+      #125;                                \/\/ name_index       : <clinit>\n+      #6;                                  \/\/ descriptor_index : ()V\n+      [1] {                                \/\/ Attributes\n+        Attr(#119, 17) {                   \/\/ Code at 0x0B82\n+          2;                               \/\/ max_stack\n+          0;                               \/\/ max_locals\n+          Bytes[5]{\n+            0x0A 0xB3 0x00 0x6F 0xB1;\n+          }\n+          [0] {                            \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [0] {                            \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [3] {                                    \/\/ Attributes\n+    Attr(#149, 2) {                        \/\/ SourceFile at 0x0B9B\n+      #150;\n+    }                                      \/\/ end of SourceFile\n+    ;\n+    Attr(#143, 10) {                       \/\/ InnerClasses at 0x0BA3\n+      [1] {                                \/\/ classes\n+         #144  #146  #148  25;             \/\/ access [ ACC_PUBLIC, ACC_STATIC, ACC_FINAL ]\n+      }\n+    }                                      \/\/ end of InnerClasses\n+    ;\n+    Attr(#126, 32) {                       \/\/ BootstrapMethods at 0x0BB3\n+      [5] {                                \/\/ bootstrap_methods\n+        {                                  \/\/ bootstrap_method\n+          #137;                            \/\/ bootstrap_method_ref\n+          [1] {                            \/\/ bootstrap_arguments\n+            #135;                          \/\/ at 0x0BC1\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #137;                            \/\/ bootstrap_method_ref\n+          [1] {                            \/\/ bootstrap_arguments\n+            #135;                          \/\/ at 0x0BC7\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #137;                            \/\/ bootstrap_method_ref\n+          [1] {                            \/\/ bootstrap_arguments\n+            #135;                          \/\/ at 0x0BCD\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #137;                            \/\/ bootstrap_method_ref\n+          [1] {                            \/\/ bootstrap_arguments\n+            #135;                          \/\/ at 0x0BD3\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #137;                            \/\/ bootstrap_method_ref\n+          [1] {                            \/\/ bootstrap_arguments\n+            #135;                          \/\/ at 0x0BD9\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+      }\n+    }                                      \/\/ end of BootstrapMethods\n+  }                                        \/\/ end of Attributes\n+}                                          \/\/ end of class org\/openjdk\/asmtools\/attribute\/StackMapTable\/data\/StackMapData02\n","filename":"test\/resources\/org\/openjdk\/asmtools\/attribute\/StackMapTable\/StackMapData02.g.jcod","additions":510,"deletions":0,"binary":false,"changes":510,"status":"added"},{"patch":"","filename":"test\/resources\/org\/openjdk\/asmtools\/common\/sequence\/ConstantPoolTestDummy.jasm","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/resources\/org\/openjdk\/asmtools\/sequence\/ConstantPoolTestDummy.jasm","status":"renamed"},{"patch":"","filename":"test\/resources\/org\/openjdk\/asmtools\/common\/sequence\/EnclMethTest.jcod","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/resources\/org\/openjdk\/asmtools\/sequence\/EnclMethTest.jcod","status":"renamed"},{"patch":"","filename":"test\/resources\/org\/openjdk\/asmtools\/common\/sequence\/TestInterface01n01.jasm","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/resources\/org\/openjdk\/asmtools\/sequence\/TestInterface01n01.jasm","status":"renamed"},{"patch":"","filename":"test\/resources\/org\/openjdk\/asmtools\/common\/sequence\/atrcod00402m1n.jcod","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/resources\/org\/openjdk\/asmtools\/sequence\/atrcod00402m1n.jcod","status":"renamed"},{"patch":"","filename":"test\/resources\/org\/openjdk\/asmtools\/common\/sequence\/module-info.jcod","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/resources\/org\/openjdk\/asmtools\/sequence\/module-info.jcod","status":"renamed"},{"patch":"","filename":"test\/resources\/org\/openjdk\/asmtools\/common\/sequence\/nonvoidinit.jasm","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/resources\/org\/openjdk\/asmtools\/sequence\/nonvoidinit.jasm","status":"renamed"},{"patch":"","filename":"test\/resources\/org\/openjdk\/asmtools\/common\/sequence\/stackmap00601m1n.jcod","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/resources\/org\/openjdk\/asmtools\/sequence\/stackmap00601m1n.jcod","status":"renamed"},{"patch":"","filename":"test\/resources\/org\/openjdk\/asmtools\/common\/sequence\/voidinit.jasm","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/resources\/org\/openjdk\/asmtools\/sequence\/voidinit.jasm","status":"renamed"},{"patch":"@@ -0,0 +1,17 @@\n+identity class Test00 version 69:0\n+{\n+  Method       \"<init>\":\"()V\"\n+    stack 1  locals 1\n+  {\n+         aload_0;\n+         invokespecial     Method java\/lang\/Object.\"<init>\":\"()V\";\n+         return;\n+  }\n+\n+  Method       m:\"(Ljava\/lang\/String;)Ljava\/lang\/String;\"\n+    stack 1  locals 2\n+  {\n+         aconst_null;\n+         areturn;\n+  }\n+}\n","filename":"test\/resources\/org\/openjdk\/asmtools\/jasm\/case7903976\/Test00.jasm","additions":17,"deletions":0,"binary":false,"changes":17,"status":"added"},{"patch":"@@ -0,0 +1,17 @@\n+identity class Test00 version 69:0\n+{\n+  Method       \"<init>\":\"()V\"\n+    stack 1  locals 1\n+  {\n+         aload_0;\n+         invokespecial     Method java\/lang\/Object.\"<init>\":\"()V\";\n+         return;\n+  }\n+\n+  Method       m:\"\"\n+    stack 1  locals 2\n+  {\n+         aconst_null;\n+         areturn;\n+  }\n+}\n","filename":"test\/resources\/org\/openjdk\/asmtools\/jasm\/case7903976\/Test01.jasm","additions":17,"deletions":0,"binary":false,"changes":17,"status":"added"},{"patch":"@@ -0,0 +1,17 @@\n+identity class Test00 version 69:0\n+{\n+  Method       \"<init>\":\"()V\"\n+    stack 1  locals 1\n+  {\n+         aload_0;\n+         invokespecial     Method java\/lang\/Object.\"<init>\":\"()V\";\n+         return;\n+  }\n+\n+  Method       m:\"(Ljava\/lang\/String)Ljava\/lang\/String;\"\n+    stack 1  locals 2\n+  {\n+         aconst_null;\n+         areturn;\n+  }\n+}\n","filename":"test\/resources\/org\/openjdk\/asmtools\/jasm\/case7903976\/Test02.jasm","additions":17,"deletions":0,"binary":false,"changes":17,"status":"added"},{"patch":"@@ -0,0 +1,17 @@\n+identity class Test00 version 69:0\n+{\n+  Method       \"<init>\":\"()V\"\n+    stack 1  locals 1\n+  {\n+         aload_0;\n+         invokespecial     Method java\/lang\/Object.\"<init>\":\"()V\";\n+         return;\n+  }\n+\n+  Method       m:\"([X\"\n+    stack 1  locals 2\n+  {\n+         aconst_null;\n+         areturn;\n+  }\n+}\n","filename":"test\/resources\/org\/openjdk\/asmtools\/jasm\/case7903976\/Test03.jasm","additions":17,"deletions":0,"binary":false,"changes":17,"status":"added"},{"patch":"@@ -0,0 +1,17 @@\n+identity class Test00 version 69:0\n+{\n+  Method       \"<init>\":\"()V\"\n+    stack 1  locals 1\n+  {\n+         aload_0;\n+         invokespecial     Method java\/lang\/Object.\"<init>\":\"()V\";\n+         return;\n+  }\n+\n+  Method       m:\"(X)Ljava\/lang\/String;\"\n+    stack 1  locals 2\n+  {\n+         aconst_null;\n+         areturn;\n+  }\n+}\n","filename":"test\/resources\/org\/openjdk\/asmtools\/jasm\/case7903976\/Test04.jasm","additions":17,"deletions":0,"binary":false,"changes":17,"status":"added"},{"patch":"@@ -0,0 +1,17 @@\n+identity class Test00 version 69:0\n+{\n+  Method       \"<init>\":\"()V\"\n+    stack 1  locals 1\n+  {\n+         aload_0;\n+         invokespecial     Method java\/lang\/Object.\"<init>\":\"()V\";\n+         return;\n+  }\n+\n+  Method       m:\"(Ljava\/lang\/String)Ljava\/lang\/String;\"\n+    stack 1  locals 2\n+  {\n+         aconst_null;\n+         areturn;\n+  }\n+}\n","filename":"test\/resources\/org\/openjdk\/asmtools\/jasm\/case7903976\/Test05.jasm","additions":17,"deletions":0,"binary":false,"changes":17,"status":"added"},{"patch":"@@ -0,0 +1,17 @@\n+identity class Test00 version 69:0\n+{\n+  Method       \"<init>\":\"()V\"\n+    stack 1  locals 1\n+  {\n+         aload_0;\n+         invokespecial     Method java\/lang\/Object.\"<init>\":\"()V\";\n+         return;\n+  }\n+\n+  Method       m:\"Ljava\/lang\/String;)Ljava\/lang\/String;\"\n+    stack 1  locals 2\n+  {\n+         aconst_null;\n+         areturn;\n+  }\n+}\n","filename":"test\/resources\/org\/openjdk\/asmtools\/jasm\/case7903976\/Test06.jasm","additions":17,"deletions":0,"binary":false,"changes":17,"status":"added"},{"patch":"@@ -0,0 +1,17 @@\n+identity class Test00 version 69:0\n+{\n+  Method       \"<init>\":\"()V\"\n+    stack 1  locals 1\n+  {\n+         aload_0;\n+         invokespecial     Method java\/lang\/Object.\"<init>\":\"()V\";\n+         return;\n+  }\n+\n+  Method       m:\"([X)Ljava\/lang\/String;\"\n+    stack 1  locals 2\n+  {\n+         aconst_null;\n+         areturn;\n+  }\n+}\n","filename":"test\/resources\/org\/openjdk\/asmtools\/jasm\/case7903976\/Test07.jasm","additions":17,"deletions":0,"binary":false,"changes":17,"status":"added"},{"patch":"@@ -0,0 +1,17 @@\n+identity class Test00 version 69:0\n+{\n+  Method       \"<init>\":\"()V\"\n+    stack 1  locals 1\n+  {\n+         aload_0;\n+         invokespecial     Method java\/lang\/Object.\"<init>\":\"()V\";\n+         return;\n+  }\n+\n+  Method       m:\"([)Ljava\/lang\/String;\"\n+    stack 1  locals 2\n+  {\n+         aconst_null;\n+         areturn;\n+  }\n+}\n","filename":"test\/resources\/org\/openjdk\/asmtools\/jasm\/case7903976\/Test08.jasm","additions":17,"deletions":0,"binary":false,"changes":17,"status":"added"},{"patch":"@@ -0,0 +1,17 @@\n+identity class Test00 version 69:0\n+{\n+  Method       \"<init>\":\"()V\"\n+    stack 1  locals 1\n+  {\n+         aload_0;\n+         invokespecial     Method java\/lang\/Object.\"<init>\":\"()V\";\n+         return;\n+  }\n+\n+  Method       m:\"(Ljava\/lang\/String[)Ljava\/lang\/String;\"\n+    stack 1  locals 2\n+  {\n+         aconst_null;\n+         areturn;\n+  }\n+}\n","filename":"test\/resources\/org\/openjdk\/asmtools\/jasm\/case7903976\/Test09.jasm","additions":17,"deletions":0,"binary":false,"changes":17,"status":"added"},{"patch":"@@ -0,0 +1,17 @@\n+identity class Test00 version 69:0\n+{\n+  Method       \"<init>\":\"()V\"\n+    stack 1  locals 1\n+  {\n+         aload_0;\n+         invokespecial     Method java\/lang\/Object.\"<init>\":\"()V\";\n+         return;\n+  }\n+\n+  Method       m:\"(Ljava\/lang\/String\"\n+    stack 1  locals 2\n+  {\n+         aconst_null;\n+         areturn;\n+  }\n+}\n","filename":"test\/resources\/org\/openjdk\/asmtools\/jasm\/case7903976\/Test10.jasm","additions":17,"deletions":0,"binary":false,"changes":17,"status":"added"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2025, Oracle, Red Hat  and\/or theirs affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+identity class Test00 version 69:0\n+{\n+  const #1=true;\n+  const #2=192837465;\n+  const #3=1l;\n+  const #5=2.1f;\n+  const #6=2.2d;\n+  const #8=\"Long utf-8\";\n+  const #9=false;\n+\n+  Field v1:I;\n+\n+  Method       \"<init>\":\"()V\"\n+    stack 1  locals 1\n+  {\n+         aload_0;\n+         invokespecial     Method java\/lang\/Object.\"<init>\":\"()V\";\n+         return;\n+  }\n+\n+  Method       m:\"(Ljava\/lang\/String;)Ljava\/lang\/String;\"\n+    stack 1  locals 2\n+  {\n+         aconst_null;\n+         areturn;\n+  }\n+}\n","filename":"test\/resources\/org\/openjdk\/asmtools\/jasm\/case7903987\/Test00.jasm","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -0,0 +1,69 @@\n+class negative\/bad {\n+  0xCAFEBA;                                \/\/ -- 0xCAFEBABE\n+  3;                                       \/\/ minor version\n+  45;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Class #12;                             \/\/ #1\n+    Class #6;                              \/\/ #2\n+    Method #1 #4;                          \/\/ #3\n+    NameAndType #14 #15;                   \/\/ #4\n+    Utf8 \"ConstantValue\";                  \/\/ #5\n+    Utf8 \"negative\/bad\";                   \/\/ #6\n+    Utf8 \"Exceptions\";                     \/\/ #7\n+    Utf8 \"LineNumberTable\";                \/\/ #8\n+    Utf8 \"SourceFile\";                     \/\/ #9\n+    Utf8 \"LocalVariables\";                 \/\/ #10\n+    Utf8 \"Code\";                           \/\/ #11\n+    Utf8 \"java\/lang\/Object\";               \/\/ #12\n+    Utf8 \"attr003.jcod\";                   \/\/ #13\n+    Utf8 \"<init>\";                         \/\/ #14\n+    Utf8 \"()V\";                            \/\/ #15\n+  }\n+\n+  0x0001;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #1;                                      \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #14;                                 \/\/ name_index\n+      #15;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#11) {                        \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x03 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+        ;\n+        Attr(#11) {                        \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB7 0x00 0x03 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/resources\/org\/openjdk\/asmtools\/jcoder\/bad.jcod","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -0,0 +1,41 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package javasoft\/sqe\/tests;\n+\n+abstract interface class ClassField00 version 69:0\n+{\n+   static public protected Field field0:\"I\";\n+\n+   static public final transient Field field1:\"I\";\n+\n+   Method \"init\":\"()V\"\n+     stack 4 locals 1\n+   {\n+        aload_0;\n+        invokespecial    Method java\/lang\/Object.\"<init>\":\"()V\";\n+        return;\n+        stack_map class ClassField00, float;\n+        putfield  Field field:\"I\";\n+        return;\n+   }\n+}\n","filename":"test\/resources\/org\/openjdk\/asmtools\/structure\/ClassFile\/ClassField00.jasm","additions":41,"deletions":0,"binary":false,"changes":41,"status":"added"},{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package javasoft\/sqe\/tests;\n+\n+value abstract class ClassField01 version 69:65535\n+{\n+\n+   static public final volatile Field field0:\"I\";\n+\n+   static public final strict transient Field field1:\"I\";\n+\n+   Method \"init\":\"()V\"\n+     stack 4 locals 1\n+   {\n+        aload_0;\n+        invokespecial    Method java\/lang\/Object.\"<init>\":\"()V\";\n+        return;\n+        stack_map class ClassField01, float;\n+        putfield  Field field:\"I\";\n+        return;\n+   }\n+}\n","filename":"test\/resources\/org\/openjdk\/asmtools\/structure\/ClassFile\/ClassField01.jasm","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package javasoft\/sqe\/tests;\n+\n+\/\/ Fields of interfaces must have their ACC_PUBLIC, ACC_STATIC, and ACC_FINAL flags set;\n+\/\/ they may have their ACC_STRICT_INIT or ACC_SYNTHETIC flag set,\n+\/\/ and must not have any of the other flags in Table 4.5-A set (JLS §9.3):\n+\/\/ ACC_PUBLIC\t    0x0001\tDeclared public; may be accessed from outside its package.\n+\/\/ ACC_PRIVATE\t    0x0002\tDeclared private; accessible only within the defining class and other classes belonging to the same nest (5.4.4).\n+\/\/ ACC_PROTECTED\t0x0004\tDeclared protected; may be accessed within subclasses.\n+\/\/ ACC_STATIC\t    0x0008\tDeclared static.\n+\/\/ ACC_FINAL\t    0x0010\tDeclared final; never directly assigned to after object construction (JLS §17.5).\n+\/\/ ACC_VOLATILE\t    0x0040\tDeclared volatile; cannot be cached.\n+\/\/ ACC_TRANSIENT\t0x0080\tDeclared transient; not written or read by a persistent object manager.\n+\/\/ ACC_STRICT_INIT\t0x0800\tA strictly-initialized field; must be initialized before it can be read.\n+\/\/ ACC_SYNTHETIC\t0x1000\tDeclared synthetic; not present in the source code.\n+\/\/ ACC_ENUM\t        0x4000\tDeclared as an element of an enum class.\n+\n+\n+abstract interface class ClassField04 version 69:65535\n+{\n+   \/\/ OK\n+   static public final strict    Field field0:\"I\";\n+   static public final synthetic Field field1:\"I\";\n+   \/\/ negative\n+   static public final synthetic enum Field field2:\"I\";\n+   static public final transient Field field3:\"I\";\n+   static final strict Field field4:\"I\";\n+\n+   Method \"init\":\"()V\"\n+     stack 4 locals 1\n+   {\n+        aload_0;\n+        invokespecial    Method java\/lang\/Object.\"<init>\":\"()V\";\n+        return;\n+        stack_map class ClassField04, float;\n+        putfield  Field field:\"I\";\n+        return;\n+   }\n+}\n","filename":"test\/resources\/org\/openjdk\/asmtools\/structure\/ClassFile\/ClassField02.jasm","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package javasoft\/sqe\/tests;\n+\n+abstract interface class ClassField03 version 69:0\n+{\n+\n+   static public final Field field0:\"I\";\n+\n+   static public final strict Field field1:\"I\";\n+\n+   Method \"init\":\"()V\"\n+     stack 4 locals 1\n+   {\n+        aload_0;\n+        invokespecial    Method java\/lang\/Object.\"<init>\":\"()V\";\n+        return;\n+        stack_map class ClassField03, float;\n+        putfield  Field field:\"I\";\n+        return;\n+   }\n+}\n","filename":"test\/resources\/org\/openjdk\/asmtools\/structure\/ClassFile\/ClassField03.jasm","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package javasoft\/sqe\/tests;\n+\n+\/\/  Each field of a value class must have at least one of its ACC_STATIC or ACC_STRICT_INIT flags set.\n+\n+value final class ClassField04 version 69:65535\n+{\n+   \/\/ OK\n+   static public final strict       Field field0:\"I\";\n+   public strict synthetic          Field field1:\"I\";\n+   public static enum               Field field2:\"I\";\n+\n+   \/\/ negative\n+   public final                     Field field3:\"I\";\n+                                    Field field4:\"I\";\n+\n+   Method \"init\":\"()V\"\n+     stack 4 locals 1\n+   {\n+        aload_0;\n+        invokespecial    Method java\/lang\/Object.\"<init>\":\"()V\";\n+        return;\n+        stack_map class ClassField04, float;\n+        putfield  Field field:\"I\";\n+        return;\n+   }\n+}\n","filename":"test\/resources\/org\/openjdk\/asmtools\/structure\/ClassFile\/ClassField04.jasm","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package javasoft\/sqe\/tests;\n+\n+public value class ClassFile00 version 69:0\n+{\n+   strict private Field field:\"I\";\n+\n+   Method \"<init>\":\"()V\"\n+     stack 4 locals 1\n+   {\n+        aload_0;\n+        invokespecial    Method java\/lang\/Object.\"<init>\":\"()V\";\n+        return;\n+        stack_map class ClassFile00, float;\n+        putfield  Field field:\"I\";\n+        return;\n+   }\n+}\n","filename":"test\/resources\/org\/openjdk\/asmtools\/structure\/ClassFile\/ClassFile00.jasm","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package javasoft\/sqe\/tests;\n+\n+public identity class ClassFile01 version 69:0\n+{\n+   strict private Field field:\"I\";\n+\n+   Method \"<init>\":\"()V\"\n+     stack 4 locals 1\n+   {\n+        aload_0;\n+        invokespecial    Method java\/lang\/Object.\"<init>\":\"()V\";\n+        return;\n+        stack_map class ClassFile01, float;\n+        putfield  Field field:\"I\";\n+        return;\n+   }\n+}\n","filename":"test\/resources\/org\/openjdk\/asmtools\/structure\/ClassFile\/ClassFile01.jasm","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package javasoft\/sqe\/tests;\n+\n+public identity class ClassFile02\n+{\n+   strict private Field field:\"I\";\n+\n+   Method \"<init>\":\"()V\"\n+     stack 4 locals 1\n+   {\n+        aload_0;\n+        invokespecial    Method java\/lang\/Object.\"<init>\":\"()V\";\n+        return;\n+        stack_map class ClassFile02, float;\n+        putfield  Field field:\"I\";\n+        return;\n+   }\n+}\n","filename":"test\/resources\/org\/openjdk\/asmtools\/structure\/ClassFile\/ClassFile02.jasm","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package javasoft\/sqe\/tests;\n+\n+public value class ClassFile03 {\n+\n+   strict private Field field:\"I\";\n+\n+   Method \"<init>\":\"()V\"\n+     stack 4 locals 1\n+   {\n+        aload_0;\n+        invokespecial    Method java\/lang\/Object.\"<init>\":\"()V\";\n+        return;\n+        stack_map class ClassFile03, float;\n+        putfield  Field field:\"I\";\n+        return;\n+   }\n+}\n","filename":"test\/resources\/org\/openjdk\/asmtools\/structure\/ClassFile\/ClassFile03.jasm","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package javasoft\/sqe\/tests;\n+\n+public identity value class ClassFile04 version 69:65535\n+{\n+   strict private Field field:\"I\";\n+\n+   Method \"<init>\":\"()V\"\n+     stack 4 locals 1\n+   {\n+        aload_0;\n+        invokespecial    Method java\/lang\/Object.\"<init>\":\"()V\";\n+        return;\n+        stack_map class ClassFile04, float;\n+        putfield  Field field:\"I\";\n+        return;\n+   }\n+}\n","filename":"test\/resources\/org\/openjdk\/asmtools\/structure\/ClassFile\/ClassFile04.jasm","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package javasoft\/sqe\/tests;\n+\n+private public identity class ClassFile05 version 69:65535\n+{\n+   strict private Field field:\"I\";\n+\n+   Method \"<init>\":\"()V\"\n+     stack 4 locals 1\n+   {\n+        aload_0;\n+        invokespecial    Method java\/lang\/Object.\"<init>\":\"()V\";\n+        return;\n+        stack_map class ClassFile05, float;\n+        putfield  Field field:\"I\";\n+        return;\n+   }\n+}\n","filename":"test\/resources\/org\/openjdk\/asmtools\/structure\/ClassFile\/ClassFile05.jasm","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package javasoft\/sqe\/tests;\n+\n+public identity enum interface class ClassFile06 version 69:65535\n+{\n+   strict private Field field:\"I\";\n+\n+   Method \"<init>\":\"()V\"\n+     stack 4 locals 1\n+   {\n+        aload_0;\n+        invokespecial    Method java\/lang\/Object.\"<init>\":\"()V\";\n+        return;\n+        stack_map class ClassFile06, float;\n+        putfield  Field field:\"I\";\n+        return;\n+   }\n+}\n","filename":"test\/resources\/org\/openjdk\/asmtools\/structure\/ClassFile\/ClassFile06.jasm","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -0,0 +1,41 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package javasoft\/sqe\/tests;\n+\n+\/\/  If the ACC_ANNOTATION flag is set, the ACC_INTERFACE flag must also be set.\n+\n+public annotation class ClassFile06 version 69:65535\n+{\n+   strict private Field field:\"I\";\n+\n+   Method \"<init>\":\"()V\"\n+     stack 4 locals 1\n+   {\n+        aload_0;\n+        invokespecial    Method java\/lang\/Object.\"<init>\":\"()V\";\n+        return;\n+        stack_map class ClassFile07, float;\n+        putfield  Field field:\"I\";\n+        return;\n+   }\n+}\n","filename":"test\/resources\/org\/openjdk\/asmtools\/structure\/ClassFile\/ClassFile07.jasm","additions":41,"deletions":0,"binary":false,"changes":41,"status":"added"},{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package javasoft\/sqe\/tests;\n+\n+\/\/  If the ACC_INTERFACE flag is set, the ACC_ABSTRACT flag must also be set,\n+\/\/  and the ACC_FINAL, ACC_SUPER ACC_IDENTITY, ACC_ENUM, and ACC_MODULE flags set must not be set.\n+\n+interface enum class ClassFile08 version 69:65535\n+{\n+   public Field field:\"I\";\n+\n+   Method \"init\":\"()V\"\n+     stack 4 locals 1\n+   {\n+        aload_0;\n+        invokespecial    Method java\/lang\/Object.\"<init>\":\"()V\";\n+        return;\n+        stack_map class ClassFile08, float;\n+        putfield  Field field:\"I\";\n+        return;\n+   }\n+}\n","filename":"test\/resources\/org\/openjdk\/asmtools\/structure\/ClassFile\/ClassFile08.jasm","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -0,0 +1,43 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package javasoft\/sqe\/tests;\n+\n+\/\/ If the ACC_INTERFACE flag is not set, any of the other flags in Table 4.1-B may be set except ACC_ANNOTATION and ACC_MODULE.\n+\/\/ However, such a class file must have at least one of its ACC_FINAL, ACC_IDENTITY, or ACC_ABSTRACT flags set,\n+\/\/ and must not have both its ACC_FINAL and ACC_ABSTRACT flags set (JLS §8.1.1.2).\n+\n+value class ClassFile09 version 69:65535\n+{\n+   public Field field:\"I\";\n+\n+   Method \"init\":\"()V\"\n+     stack 4 locals 1\n+   {\n+        aload_0;\n+        invokespecial    Method java\/lang\/Object.\"<init>\":\"()V\";\n+        return;\n+        stack_map class ClassFile09, float;\n+        putfield  Field field:\"I\";\n+        return;\n+   }\n+}\n","filename":"test\/resources\/org\/openjdk\/asmtools\/structure\/ClassFile\/ClassFile09.jasm","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -0,0 +1,43 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package javasoft\/sqe\/tests;\n+\n+\/\/ If the ACC_INTERFACE flag is not set, any of the other flags in Table 4.1-B may be set except ACC_ANNOTATION and ACC_MODULE.\n+\/\/ However, such a class file must have at least one of its ACC_FINAL, ACC_IDENTITY, or ACC_ABSTRACT flags set,\n+\/\/ and must not have both its ACC_FINAL and ACC_ABSTRACT flags set (JLS §8.1.1.2).\n+\n+value abstract final class ClassFile10 version 69:65535\n+{\n+   static public Field field:\"I\";\n+\n+   Method \"init\":\"()V\"\n+     stack 4 locals 1\n+   {\n+        aload_0;\n+        invokespecial    Method java\/lang\/Object.\"<init>\":\"()V\";\n+        return;\n+        stack_map class ClassFile10, float;\n+        putfield  Field field:\"I\";\n+        return;\n+   }\n+}\n","filename":"test\/resources\/org\/openjdk\/asmtools\/structure\/ClassFile\/ClassFile10.jasm","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package javasoft\/sqe\/tests;\n+\n+final value class ClassFile11 version 69:65535\n+{\n+   strict private Field field:\"I\";\n+\n+   Method \"<init>\":\"()V\"\n+     stack 4 locals 1\n+   {\n+        aload_0;\n+        invokespecial    Method java\/lang\/Object.\"<init>\":\"()V\";\n+        return;\n+        stack_map class ClassFile11, float;\n+        putfield  Field field:\"I\";\n+        return;\n+   }\n+}\n","filename":"test\/resources\/org\/openjdk\/asmtools\/structure\/ClassFile\/ClassFile11.jasm","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package javasoft\/sqe\/tests;\n+\n+identity class ClassFile12 version 69:65535\n+{\n+   strict private Field field:\"I\";\n+\n+   Method \"<init>\":\"()V\"\n+     stack 4 locals 1\n+   {\n+        aload_0;\n+        invokespecial    Method java\/lang\/Object.\"<init>\":\"()V\";\n+        return;\n+        stack_map class ClassFile12, float;\n+        putfield  Field field:\"I\";\n+        return;\n+   }\n+}\n","filename":"test\/resources\/org\/openjdk\/asmtools\/structure\/ClassFile\/ClassFile12.jasm","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package javasoft\/sqe\/tests;\n+\n+value interface ClassFile13 version 69:65535\n+{\n+   strict public static final Field field:\"I\";\n+\n+   Method \"init\":\"()V\"\n+     stack 4 locals 1\n+   {\n+        aload_0;\n+        invokespecial    Method java\/lang\/Object.\"<init>\":\"()V\";\n+        return;\n+        stack_map class ClassFile13, float;\n+        putfield  Field field:\"I\";\n+        return;\n+   }\n+}\n","filename":"test\/resources\/org\/openjdk\/asmtools\/structure\/ClassFile\/ClassFile13.jasm","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -0,0 +1,40 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package javasoft\/sqe\/tests;\n+\n+public super class ClassFile14 version 69:0\n+{\n+   strict private Field field00:\"I\";\n+   private Field field01:\"I\";\n+\n+   Method \"<init>\":\"()V\"\n+     stack 4 locals 1\n+   {\n+        aload_0;\n+        invokespecial    Method java\/lang\/Object.\"<init>\":\"()V\";\n+        return;\n+        stack_map class ClassFile00, float;\n+        putfield  Field field:\"I\";\n+        return;\n+   }\n+}\n","filename":"test\/resources\/org\/openjdk\/asmtools\/structure\/ClassFile\/ClassFile14.jasm","additions":40,"deletions":0,"binary":false,"changes":40,"status":"added"},{"patch":"@@ -0,0 +1,40 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package javasoft\/sqe\/tests;\n+\n+public super class ClassFile15 version 69:65535\n+{\n+   strict private Field field00:\"I\";\n+   private Field field01:\"I\";\n+\n+   Method \"<init>\":\"()V\"\n+     stack 4 locals 1\n+   {\n+        aload_0;\n+        invokespecial    Method java\/lang\/Object.\"<init>\":\"()V\";\n+        return;\n+        stack_map class ClassFile00, float;\n+        putfield  Field field:\"I\";\n+        return;\n+   }\n+}\n","filename":"test\/resources\/org\/openjdk\/asmtools\/structure\/ClassFile\/ClassFile15.jasm","additions":40,"deletions":0,"binary":false,"changes":40,"status":"added"}]}