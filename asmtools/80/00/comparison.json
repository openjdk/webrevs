{"files":[{"patch":"@@ -30,1 +30,1 @@\n-PRODUCT_BUILDNUMBER =06\n+PRODUCT_BUILDNUMBER =07\n","filename":"build\/productinfo.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -170,1 +170,1 @@\n-            return triFunc.apply(kind, name, format(format, args));\n+            return (format == null || name == null) ? \"\" : triFunc.apply(kind, name, format(format, args));\n","filename":"src\/org\/openjdk\/asmtools\/common\/ToolLogger.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import static org.openjdk.asmtools.common.structure.ClassFileContext.ORDINARY;\n@@ -60,0 +61,1 @@\n+        EModifier.setGlobalContext(ORDINARY);\n@@ -69,0 +71,5 @@\n+        if (isValueObjectContext()) {\n+            EModifier.setGlobalContext(VALUE_OBJECTS);\n+        } else {\n+            EModifier.setGlobalContext(ORDINARY);\n+        }\n@@ -77,0 +84,2 @@\n+        } else {\n+            EModifier.setGlobalContext(ORDINARY);\n","filename":"src\/org\/openjdk\/asmtools\/common\/structure\/CFVersion.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/org\/openjdk\/asmtools\/common\/structure\/EModifier.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+import java.util.ArrayList;\n@@ -47,1 +48,1 @@\n-        this.arguments = null;\n+        this.arguments = new ArrayList<>();\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/BootstrapMethodData.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -660,1 +660,1 @@\n-                    \/\/ Put a placeholder in place of BSM.\n+                      \/\/ Put a placeholder in place of BSM.\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/ParseConstPool.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -111,1 +111,0 @@\n-        EModifier.setGlobalContext(ClassFileContext.ORDINARY);\n@@ -1012,1 +1011,1 @@\n-        ArrayList<ConstCell<?>> bsm_args = new ArrayList<>(256);\n+        ArrayList<ConstCell<?>> bsm_args = new ArrayList<>(10);\n@@ -1041,1 +1040,1 @@\n-                    bsm_args.clear();\n+                    bsm_args = new ArrayList<>(10);\n@@ -1076,0 +1075,1 @@\n+                    bsm_args = new ArrayList<>(10);\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/Parser.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -95,0 +95,1 @@\n+        printIndent(PadRight(\" \", TABLE_PADDING)).print(\"{ \");\n@@ -96,1 +97,1 @@\n-            printIndent(PadRight(\" \", TABLE_PADDING)).println(\"{\");\n+            println();\n@@ -122,1 +123,1 @@\n-            printIndent(PadRight(\" \", TABLE_PADDING)).println(\"}\");\n+            printIndent(PadRight(\" \", TABLE_PADDING));\n@@ -124,0 +125,1 @@\n+        println(\"}\");\n@@ -189,1 +191,0 @@\n-\n@@ -199,1 +200,1 @@\n-            if(!printCPIndex) {\n+            if (!printCPIndex) {\n@@ -207,1 +208,2 @@\n-    private record BsmInfo(String strBsm, ConstantPool.CPX2 cpx2Const) {}\n+    private record BsmInfo(String strBsm, ConstantPool.CPX2 cpx2Const) {\n+    }\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/BootstrapMethodData.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import org.openjdk.asmtools.common.SyntaxError;\n@@ -511,1 +512,1 @@\n-            throw new RuntimeException();\n+            throw new SyntaxError();\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/ClassData.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1088,0 +1088,1 @@\n+            sb.append(LeftBracket);\n@@ -1089,1 +1090,0 @@\n-                sb.append(LeftBracket);\n@@ -1095,1 +1095,0 @@\n-                sb.append(RightBracket);\n@@ -1097,0 +1096,1 @@\n+            sb.append(RightBracket);\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/ConstantPool.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -45,0 +45,3 @@\n+    public static final String NO_BSM_ARGUMENTS = \"{}\";\n+    public static final String NO_BSM_ARGUMENTS_REGEX = \"\\\\{\\\\}\";\n+    public static final String REPLACEMENT_NO_BSM_ARGUMENTS = \"<!>\";\n@@ -457,0 +460,4 @@\n+        boolean noArgs = str.contains(NO_BSM_ARGUMENTS);\n+        if (noArgs) {\n+            str = str.replaceAll(NO_BSM_ARGUMENTS_REGEX, REPLACEMENT_NO_BSM_ARGUMENTS);\n+        }\n@@ -523,1 +530,5 @@\n-        return sb.toString();\n+        str = sb.toString();\n+        if (noArgs) {\n+            str = str.replaceAll(REPLACEMENT_NO_BSM_ARGUMENTS, NO_BSM_ARGUMENTS);\n+        }\n+        return str;\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/Indenter.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-        jdis.setDestDir().setDebug(true);\n+        jdis.setDestDir().setDebug(false);\n","filename":"test\/java\/org\/openjdk\/asmtools\/attribute\/BootstrapMethods\/BootstrapMethodsAttributeTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,180 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.attribute.BootstrapMethods;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.openjdk.asmtools.common.inputs.StringInput;\n+import org.openjdk.asmtools.lib.action.*;\n+import org.openjdk.asmtools.lib.log.LogAndBinResults;\n+import org.openjdk.asmtools.lib.log.LogAndTextResults;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.stream.Stream;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.core.AllOf.allOf;\n+import static org.openjdk.asmtools.lib.utility.StringUtils.funcNormalizeText;\n+import static org.openjdk.asmtools.lib.utility.StringUtils.funcSubStrCount;\n+\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+public class Case7903791 {\n+\n+    private Jasm jasm = new Jasm();\n+    private Jcoder jcoder = new Jcoder();\n+    private File resourceDir;\n+\n+    private static Stream<Arguments> getJasmParameters() {\n+        return Stream.of(\n+                Arguments.of(\"BSMCase7903791.jasm\", EToolArguments.JDIS_G, List.of(\n+                                (Consumer<String>) (text) -> assertThat(text, allOf(\n+                                        containsString(\"_:\\\"()Ljava\/lang\/String;\\\"{}\"),\n+                                        containsString(\"I:\\\"Ljava\/lang\/Class;\\\"{},\")\n+                                )),\n+                                (Consumer<String>) (text) ->\n+                                        Assertions.assertEquals(3, funcSubStrCount.apply(text, \"{}\")),\n+                                (Consumer<String>) (text) ->\n+                                        Assertions.assertEquals(2, funcSubStrCount.apply(text, \"{ }\"))\n+                        )\n+                ),\n+                Arguments.of(\"BSMCase7903791.g.jasm\", EToolArguments.JDIS_G_T, List.of(\n+                                (Consumer<String>) (text) -> assertThat(text, allOf(\n+                                        containsString(\"_:\\\"()Ljava\/lang\/String;\\\"{}\"),\n+                                        containsString(\"I:\\\"Ljava\/lang\/Class;\\\"{},\")\n+                                )),\n+                                (Consumer<String>) (text) ->\n+                                        Assertions.assertEquals(1, funcSubStrCount.apply(text, \"Arguments\")),\n+                                (Consumer<String>) (text) ->\n+                                        Assertions.assertEquals(3, funcSubStrCount.apply(text, \"{}\")),\n+                                (Consumer<String>) (text) ->\n+                                        Assertions.assertEquals(0, funcSubStrCount.apply(text, \"{ }\"))\n+                        )\n+                ),\n+                Arguments.of(\"BSMCase7903791.g.t.jasm\", EToolArguments.JDIS, List.of(\n+                                (Consumer<String>) (text) -> assertThat(text, allOf(\n+                                        containsString(\"_:\\\"()Ljava\/lang\/String;\\\"{}\"),\n+                                        containsString(\"I:\\\"Ljava\/lang\/Class;\\\"{},\")\n+                                )),\n+                                (Consumer<String>) (text) ->\n+                                        Assertions.assertEquals(3, funcSubStrCount.apply(text, \"{}\")),\n+                                (Consumer<String>) (text) ->\n+                                        Assertions.assertEquals(2, funcSubStrCount.apply(text, \"{ }\"))\n+                        )\n+                )\n+        );\n+    }\n+\n+    private static Stream<Arguments> getJcodParameters() {\n+        return Stream.of(\n+                Arguments.of(\"BSMCase7903791.g.jcod\", EToolArguments.JDEC_G, List.of(\n+                                (Consumer<String>) (text) -> assertThat(text, allOf(\n+                                        containsString(\"[3] { \/\/ bootstrap_methods\"),\n+                                        containsString(\"[4] { \/\/ bootstrap_arguments\")\n+                                )),\n+                                (Consumer<String>) (text) ->\n+                                        Assertions.assertEquals(1, funcSubStrCount.apply(text, \"[4] { \/\/ bootstrap_arguments\")),\n+                                (Consumer<String>) (text) ->\n+                                        Assertions.assertEquals(2, funcSubStrCount.apply(text, \"[0] { \/\/ bootstrap_arguments\"))\n+                        )\n+                )\n+        );\n+    }\n+\n+    @BeforeAll\n+    public void init() throws IOException {\n+        resourceDir = new File(Objects.requireNonNull(this.getClass().\n+                getResource(\"BSMCase7903791.jasm\")).getFile()).getParentFile();\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"getJasmParameters\")\n+    public void jasmTest(String resourceName, EToolArguments args, List<Consumer<String>> tests) {\n+        \/\/ jasm to class in memory\n+        \/\/ jasm.setDebug(true);\n+        LogAndBinResults binResult = jasm.compile(List.of(resourceDir + File.separator + resourceName));\n+        \/\/ class produced correctly\n+        Assertions.assertTrue(binResult.log.toString().isEmpty());\n+        Assertions.assertEquals(0, binResult.result);\n+\n+        \/\/ class to jasm\n+        LogAndTextResults textResult = new Jdis().setArgs(args).decode(binResult.getAsByteInput());\n+\n+        Assertions.assertEquals(0, textResult.result);\n+        String jasmText = textResult.getResultAsString(Function.identity());\n+        String normJasmText = funcNormalizeText.apply(jasmText);\n+        for (Consumer<String> testConsumer : tests) {\n+            testConsumer.accept(normJasmText);\n+        }\n+        \/\/ jasm to class\n+        binResult = jasm.compile(new StringInput(jasmText));\n+        \/\/ class produced correctly\n+        Assertions.assertEquals(0, binResult.result);\n+        Assertions.assertTrue(binResult.log.toString().isEmpty());\n+        \/\/ class to jasm\n+        textResult = new Jdis().setArgs(args).decode(binResult.getAsByteInput());\n+        Assertions.assertEquals(0, textResult.result);\n+        jasmText = textResult.getResultAsString(Function.identity());\n+        normJasmText = funcNormalizeText.apply(jasmText);\n+        for (Consumer<String> testConsumer : tests) {\n+            testConsumer.accept(normJasmText);\n+        }\n+        \/\/ class to jcod\n+        textResult = new Jdec().setArgs(EToolArguments.JDEC_G).decode(binResult.getAsByteInput());\n+        Assertions.assertEquals(0, textResult.result);\n+        \/\/ jcod to class\n+        binResult = jcoder.compile(new StringInput(textResult.getResultAsString(Function.identity())));\n+        Assertions.assertEquals(0, binResult.result);\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"getJcodParameters\")\n+    public void jcoderTest(String resourceName, EToolArguments args, List<Consumer<String>> tests) {\n+        \/\/ jcod to class in memory\n+        LogAndBinResults binResult = jcoder.compile(List.of(resourceDir + File.separator + resourceName));\n+        \/\/ class produced correctly\n+        Assertions.assertEquals(0, binResult.result);\n+        Assertions.assertTrue(binResult.log.toString().isEmpty());\n+        \/\/ class to jcod\n+        LogAndTextResults textResult = new Jdec().setArgs(args).decode(binResult.getAsByteInput());\n+        String jcoderText = textResult.getResultAsString(funcNormalizeText);\n+        Assertions.assertEquals(0, textResult.result);\n+        for (Consumer<String> testConsumer : tests) {\n+            testConsumer.accept(jcoderText);\n+        }\n+        \/\/ class to jasm twice\n+        textResult = new Jdis().setArgs(EToolArguments.JDIS_G_T_LNT_LVT).decode(binResult.getAsByteInput());\n+        Assertions.assertEquals(0, textResult.result);\n+        textResult = new Jdis().setArgs(EToolArguments.JDIS_GG_NC_LNT_LVT).decode(binResult.getAsByteInput());\n+        Assertions.assertEquals(0, textResult.result);\n+    }\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/attribute\/BootstrapMethods\/Case7903791.java","additions":180,"deletions":0,"binary":false,"changes":180,"status":"added"},{"patch":"@@ -26,1 +26,0 @@\n-import org.junit.jupiter.api.Disabled;\n@@ -52,1 +51,0 @@\n-@Disabled\n@@ -154,1 +152,0 @@\n-    @Disabled\n","filename":"test\/java\/org\/openjdk\/asmtools\/attribute\/ConstantValue\/ConstantValueAttributeTests.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n","filename":"test\/java\/org\/openjdk\/asmtools\/jdec\/JdecJcodTest.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-    private DebugHelper debugHelper = new DebugHelper();\n@@ -114,1 +113,1 @@\n-        this.debugHelper.setDebug(value);\n+        DebugHelper.setDebug(value);\n@@ -119,1 +118,1 @@\n-        this.debugHelper.trace(info);\n+        DebugHelper.trace(info);\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/action\/Action.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-    protected boolean Debug = false;\n@@ -30,1 +29,3 @@\n-    public DebugHelper setDebug(boolean debug) {\n+    protected static boolean Debug = false;\n+\n+    public static void setDebug(boolean debug) {\n@@ -32,1 +33,0 @@\n-        return this;\n@@ -35,1 +35,1 @@\n-    public boolean isDebug() {\n+    public static boolean isDebug() {\n@@ -40,1 +40,1 @@\n-    public void trace(Supplier<String> info) {\n+    public static void trace(Supplier<String> info) {\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/action\/DebugHelper.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n@@ -22,0 +44,2 @@\n+        add(\"SourceDebugExtensionNegative03.class\");\n+        add(\"LoadableDescriptorsAttributeTest$X.class\");\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/helper\/BruteForceHelper.java","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -55,1 +55,2 @@\n-        System.out.println(\"Generating: class -> jasm\");\n+\n+        logInfo(\"Generating: class -> jasm\");\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/transform\/pipeline\/ClassToJasmConverter.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-        System.out.println(\"Generating: class -> jcod\");\n+        logInfo(\"Generating: class -> jcod\");\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/transform\/pipeline\/ClassToJcodConverter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-        System.out.println(\"Compiling: jasm -> class\");\n+        logInfo(\"Compiling: jasm -> class\");\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/transform\/pipeline\/JasmToClassConverter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-        System.out.println(\"Compiling: jcod -> class\");\n+        logInfo(\"Compiling: jcod -> class\");\n@@ -99,1 +99,0 @@\n-\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/transform\/pipeline\/JcodToClassConverter.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -38,2 +38,2 @@\n-    private static final boolean DEBUG = true;\n-    private static final boolean WARN = true;\n+    private static final boolean DEBUG = false;\n+    private static final boolean WARN = false;\n@@ -61,0 +61,6 @@\n+    static void logInfo(String msg) {\n+        if (WARN)\n+            System.out.printf(\"INFO : [%s]%n\", msg);\n+    }\n+\n+\n@@ -78,1 +84,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/transform\/pipeline\/Pipeline.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import static org.openjdk.asmtools.lib.transform.pipeline.Pipeline.logInfo;\n@@ -63,1 +64,1 @@\n-        System.out.println(\"Final output file: \" + finalOutput);\n+        logInfo(\"Final output file: \" + finalOutput);\n@@ -98,1 +99,0 @@\n-    @Disabled       \/\/ TODO: \"atrcvl00101m10p.jasm not found\n@@ -110,1 +110,1 @@\n-        System.out.println(\"Final output file: \" + finalOutput.record().file());\n+        logInfo(\"Final output file: \" + finalOutput.record().file());\n@@ -115,1 +115,0 @@\n-    @Disabled       \/\/ TODO: atrcvl00101m10p.jasm not found\n@@ -129,1 +128,1 @@\n-        System.out.println(\"Final output file: \" + finalOutput);\n+        logInfo(\"Final output file: \" + finalOutput);\n@@ -157,1 +156,1 @@\n-        System.out.println(\"Final output file: \" + finalOutput.record().file());\n+        logInfo(\"Final output file: \" + finalOutput.record().file());\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/transform\/pipeline\/TestPipeline.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -25,0 +25,2 @@\n+import org.openjdk.asmtools.lib.action.DebugHelper;\n+\n@@ -28,0 +30,1 @@\n+import java.util.function.Function;\n@@ -32,0 +35,2 @@\n+\n+\n@@ -33,1 +38,1 @@\n-        return IntStream.range(0, text.length() - subStr.length() + 1)\n+        Long count =IntStream.range(0, text.length() - subStr.length() + 1)\n@@ -36,0 +41,4 @@\n+        if(DebugHelper.isDebug()) {\n+            System.out.println(\"count(\\\"%s\\\") = %d\".formatted(subStr, count));\n+        }\n+        return count;\n@@ -38,0 +47,3 @@\n+    public static Function<String, String> funcNormalizeText = s -> s.replaceAll(\"[\\\\r\\\\n]+\", \"\")\n+            .replaceAll(\"\\\\t\", \" \").replaceAll(\" {2,}\", \" \");\n+\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/utility\/StringUtils.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -58,0 +58,1 @@\n+\n","filename":"test\/java\/org\/openjdk\/asmtools\/structure\/ClassFile\/ClassFileTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Ident: @(#)atrcvl00101m10p.jasm generated from: @(#)atrcvl00101m.jmpp 03\/11\/19\n+ *\n+ * Copyright (c) 1997, 2003, Oracle and\/or its affiliates. All rights reserved.\n+ * ORACLE PROPRIETARY\/CONFIDENTIAL. Use is subject to license terms.\n+ *\/\n+\n+package javasoft\/sqe\/tests\/vm\/classfmt\/atr\/atrcvl001\/atrcvl00101m1;\n+\n+public class atrcvl00101m10p\n+\tversion 45:3\n+{\n+\n+final Field ifi:\"I\"\t= int 200000;\n+\n+public Method \"<init>\":\"()V\"\n+\tthrows java\/lang\/Exception\n+\tstack 2 locals 1\n+{\n+\taload_0;\n+\tinvokespecial\tMethod java\/lang\/Object.\"<init>\":\"()V\";\n+\taload_0;\n+\tgetfield\tField ifi:\"I\";\n+\tifeq\tOK;\n+\tnew\tclass java\/lang\/Exception;\n+\tdup;\n+\tinvokespecial\tMethod java\/lang\/Exception.\"<init>\":\"()V\";\n+\tathrow;\n+OK:\n+\treturn;\n+}\n+} \/\/ end Class atrcvl00101m10p\n","filename":"test\/resources\/jcod-files\/atrcvl00101m10p.jasm","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -0,0 +1,119 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * ORACLE PROPRIETARY\/CONFIDENTIAL. Use is subject to license terms.\n+ *\/\n+package javasoft\/sqe\/tests\/package;\n+\n+public super class #6 \/* BSMCase7903791 *\/ version 50:0\n+{\n+  const #1   = Method        #13.#14;             \/\/ java\/lang\/Object.\"<init>\":\"()V\"\n+  const #2   = Field         #6.#15;              \/\/ BSMCase7903791.field:\"I\"\n+  const #3   = InvokeDynamic 0:#28;               \/\/ #0:_:\"()Ljava\/lang\/String;\"\n+  const #4   = InvokeDynamic 1:#35;               \/\/ #1:_:\"()[I\"\n+  const #5   = Utf8          \"javasoft\/sqe\/tests\/package\/BSMCase7903791\";\n+  const #6   = class         #5;                  \/\/ BSMCase7903791\n+  const #7   = Utf8          \"field\";\n+  const #8   = Utf8          \"I\";\n+  const #9   = Utf8          \"<init>\";\n+  const #10  = Utf8          \"()V\";\n+  const #11  = Utf8          \"Code\";\n+  const #12  = Utf8          \"java\/lang\/Object\";\n+  const #13  = class         #12;                 \/\/ java\/lang\/Object\n+  const #14  = NameAndType   #9:#10;              \/\/ \"<init>\":\"()V\"\n+  const #15  = NameAndType   #7:#8;               \/\/ field:\"I\"\n+  const #16  = Utf8          \"StackMapTable\";\n+  const #17  = Utf8          \"constantFilled2I\";\n+  const #18  = Utf8          \"()[I\";\n+  const #19  = Utf8          \"java\/lang\/runtime\/ArrayCreation\";\n+  const #20  = class         #19;                 \/\/ java\/lang\/runtime\/ArrayCreation\n+  const #21  = Utf8          \"constantFilled01\";\n+  const #22  = Utf8          \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/reflect\/RuntimeType;IILjava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";\n+  const #23  = NameAndType   #21:#22;             \/\/ constantFilled01:\"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/reflect\/RuntimeType;IILjava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\"\n+  const #24  = Method        #20.#23;             \/\/ java\/lang\/runtime\/ArrayCreation.constantFilled01:\"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/reflect\/RuntimeType;IILjava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\"\n+  const #25  = MethodHandle  6:#24;               \/\/ REF_invokeStatic:java\/lang\/runtime\/ArrayCreation.constantFilled01:\"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/reflect\/RuntimeType;IILjava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\"\n+  const #26  = Utf8          \"_\";\n+  const #27  = Utf8          \"()Ljava\/lang\/String;\";\n+  const #28  = NameAndType   #26:#27;             \/\/ _:\"()Ljava\/lang\/String;\"\n+  const #29  = Utf8          \"BootstrapMethods\";\n+  const #30  = Utf8          \"constantFilled3I\";\n+  const #31  = Utf8          \"constantFilled\";\n+  const #32  = NameAndType   #31:#22;             \/\/ constantFilled:\"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/reflect\/RuntimeType;IILjava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\"\n+  const #33  = Method        #20.#32;             \/\/ java\/lang\/runtime\/ArrayCreation.constantFilled:\"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/reflect\/RuntimeType;IILjava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\"\n+  const #34  = MethodHandle  6:#33;               \/\/ REF_invokeStatic:java\/lang\/runtime\/ArrayCreation.constantFilled:\"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/reflect\/RuntimeType;IILjava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\"\n+  const #35  = NameAndType   #26:#18;             \/\/ _:\"()[I\"\n+  const #36  = Utf8          \"java\/lang\/invoke\/ConstantBootstraps\";\n+  const #37  = class         #36;                 \/\/ java\/lang\/invoke\/ConstantBootstraps\n+  const #38  = Utf8          \"primitiveClass\";\n+  const #39  = Utf8          \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/Class;)Ljava\/lang\/Class;\";\n+  const #40  = NameAndType   #38:#39;             \/\/ primitiveClass:\"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/Class;)Ljava\/lang\/Class;\"\n+  const #41  = Method        #37.#40;             \/\/ java\/lang\/invoke\/ConstantBootstraps.primitiveClass:\"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/Class;)Ljava\/lang\/Class;\"\n+  const #42  = MethodHandle  6:#41;               \/\/ REF_invokeStatic:java\/lang\/invoke\/ConstantBootstraps.primitiveClass:\"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/Class;)Ljava\/lang\/Class;\"\n+  const #43  = Utf8          \"Ljava\/lang\/Class;\";\n+  const #44  = NameAndType   #8:#43;              \/\/ I:\"Ljava\/lang\/Class;\"\n+  const #45  = Dynamic       2:#44;               \/\/ #2:I:\"Ljava\/lang\/Class;\"\n+  const #46  = int           0;\n+  const #47  = int           3;\n+  const #48  = int           -3;\n+  const #49  = Utf8          \"SourceFile\";\n+  const #50  = Utf8          \"BSMCase7903791.jasm\";\n+\n+  private Field #7:#8;                            \/\/ field:I\n+\n+  Method       #9:#10                             \/\/ \"<init>\":\"()V\"\n+    stack 4  locals 1\n+  {\n+     0:    aload_0;\n+     1:    invokespecial     #1;                  \/\/ Method java\/lang\/Object.\"<init>\":\"()V\"\n+     4:    return;\n+     5:    stack_frame_type  full;                \/\/ frame_type 255\n+             locals_map;\n+             stack_map       #6, 2;               \/\/ class BSMCase7903791, float;\n+           putfield          #2;                  \/\/ Field field:\"I\"\n+     8:    return;\n+  }\n+\n+  public static Method #17:#18                    \/\/ constantFilled2I:\"()[I\"\n+    stack 1  locals 0\n+  {\n+     0:    invokedynamic     #3;                  \/\/ InvokeDynamic REF_invokeStatic:Method java\/lang\/runtime\/ArrayCreation.constantFilled01:\n+                                                  \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/reflect\/RuntimeType;IILjava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\":\n+                                                  \/\/ _:\"()Ljava\/lang\/String;\"{}\n+     5:    areturn;\n+  }\n+\n+  public static Method #30:#18                    \/\/ constantFilled3I:\"()[I\"\n+    stack 1  locals 0\n+  {\n+     0:    invokedynamic     #4;                  \/\/ InvokeDynamic REF_invokeStatic:Method java\/lang\/runtime\/ArrayCreation.constantFilled:\n+                                                  \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/reflect\/RuntimeType;IILjava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\":\n+                                                  \/\/ _:\"()[I\" {\n+                                                  \/\/   Dynamic REF_invokeStatic:Method java\/lang\/invoke\/ConstantBootstraps.primitiveClass:\"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/Class;)Ljava\/lang\/Class;\":\n+                                                  \/\/   I:\"Ljava\/lang\/Class;\"{},\n+                                                  \/\/   int 0,\n+                                                  \/\/   int 3,\n+                                                  \/\/   int -3\n+                                                  \/\/ }\n+     5:    areturn;\n+  }\n+\n+  SourceFile                 #50;                 \/\/ BSMCase7903791.jasm\n+\n+  BootstrapMethod            #25;                 \/\/ REF_invokeStatic:java\/lang\/runtime\/ArrayCreation.constantFilled01:\n+                                                  \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/reflect\/RuntimeType;IILjava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";\n+                             { }\n+\n+  BootstrapMethod            #34;                 \/\/ REF_invokeStatic:java\/lang\/runtime\/ArrayCreation.constantFilled:\n+                                                  \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/reflect\/RuntimeType;IILjava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";\n+                             {\n+                                 #45,             \/\/ Dynamic REF_invokeStatic:java\/lang\/invoke\/ConstantBootstraps.primitiveClass:\n+                                                  \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/Class;)Ljava\/lang\/Class;\":\n+                                                  \/\/ I:\"Ljava\/lang\/Class;\"{}\n+                                 #46,             \/\/ int 0\n+                                 #47,             \/\/ int 3\n+                                 #48              \/\/ int -3\n+                             }\n+\n+  BootstrapMethod            #42;                 \/\/ REF_invokeStatic:java\/lang\/invoke\/ConstantBootstraps.primitiveClass:\n+                                                  \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/Class;)Ljava\/lang\/Class;\";\n+                             { }\n+} \/\/ end Class javasoft\/sqe\/tests\/package\/BSMCase7903791 compiled from \"BSMCase7903791.jasm\"\n","filename":"test\/resources\/org\/openjdk\/asmtools\/attribute\/BootstrapMethods\/BSMCase7903791.g.jasm","additions":119,"deletions":0,"binary":false,"changes":119,"status":"added"},{"patch":"@@ -0,0 +1,175 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * ORACLE PROPRIETARY\/CONFIDENTIAL. Use is subject to license terms.\n+ *\/\n+class javasoft\/sqe\/tests\/package\/BSMCase7903791 {\n+  0xCAFEBABE;\n+  0;                                       \/\/ minor version\n+  50;                                      \/\/ version\n+  [51] {                                   \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Method #13 #14;                        \/\/ #1     at 0x0A\n+    Field #6 #15;                          \/\/ #2     at 0x0F\n+    InvokeDynamic 0s #28;                  \/\/ #3     at 0x14\n+    InvokeDynamic 1s #35;                  \/\/ #4     at 0x19\n+    Utf8 \"javasoft\/sqe\/tests\/package\/BSMCase7903791\";  \/\/ #5     at 0x1E\n+    Class #5;                              \/\/ #6     at 0x4A\n+    Utf8 \"field\";                          \/\/ #7     at 0x4D\n+    Utf8 \"I\";                              \/\/ #8     at 0x55\n+    Utf8 \"<init>\";                         \/\/ #9     at 0x59\n+    Utf8 \"()V\";                            \/\/ #10     at 0x62\n+    Utf8 \"Code\";                           \/\/ #11     at 0x68\n+    Utf8 \"java\/lang\/Object\";               \/\/ #12     at 0x6F\n+    Class #12;                             \/\/ #13     at 0x82\n+    NameAndType #9 #10;                    \/\/ #14     at 0x85\n+    NameAndType #7 #8;                     \/\/ #15     at 0x8A\n+    Utf8 \"StackMapTable\";                  \/\/ #16     at 0x8F\n+    Utf8 \"constantFilled2I\";               \/\/ #17     at 0x9F\n+    Utf8 \"()[I\";                           \/\/ #18     at 0xB2\n+    Utf8 \"java\/lang\/runtime\/ArrayCreation\";  \/\/ #19     at 0xB9\n+    Class #19;                             \/\/ #20     at 0xDB\n+    Utf8 \"constantFilled01\";               \/\/ #21     at 0xDE\n+    Utf8 \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/reflect\/RuntimeType;IILjava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";  \/\/ #22     at 0xF1\n+    NameAndType #21 #22;                   \/\/ #23     at 0x019A\n+    Method #20 #23;                        \/\/ #24     at 0x019F\n+    MethodHandle 6b #24;                   \/\/ #25     at 0x01A4\n+    Utf8 \"_\";                              \/\/ #26     at 0x01A8\n+    Utf8 \"()Ljava\/lang\/String;\";           \/\/ #27     at 0x01AC\n+    NameAndType #26 #27;                   \/\/ #28     at 0x01C3\n+    Utf8 \"BootstrapMethods\";               \/\/ #29     at 0x01C8\n+    Utf8 \"constantFilled3I\";               \/\/ #30     at 0x01DB\n+    Utf8 \"constantFilled\";                 \/\/ #31     at 0x01EE\n+    NameAndType #31 #22;                   \/\/ #32     at 0x01FF\n+    Method #20 #32;                        \/\/ #33     at 0x0204\n+    MethodHandle 6b #33;                   \/\/ #34     at 0x0209\n+    NameAndType #26 #18;                   \/\/ #35     at 0x020D\n+    Utf8 \"java\/lang\/invoke\/ConstantBootstraps\";  \/\/ #36     at 0x0212\n+    Class #36;                             \/\/ #37     at 0x0238\n+    Utf8 \"primitiveClass\";                 \/\/ #38     at 0x023B\n+    Utf8 \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/Class;)Ljava\/lang\/Class;\";  \/\/ #39     at 0x024C\n+    NameAndType #38 #39;                   \/\/ #40     at 0x02AC\n+    Method #37 #40;                        \/\/ #41     at 0x02B1\n+    MethodHandle 6b #41;                   \/\/ #42     at 0x02B6\n+    Utf8 \"Ljava\/lang\/Class;\";              \/\/ #43     at 0x02BA\n+    NameAndType #8 #43;                    \/\/ #44     at 0x02CE\n+    Dynamic 2s #44;                        \/\/ #45     at 0x02D3\n+    Integer 0x00000000;                    \/\/ #46     at 0x02D8\n+    Integer 0x00000003;                    \/\/ #47     at 0x02DD\n+    Integer 0xFFFFFFFD;                    \/\/ #48     at 0x02E2\n+    Utf8 \"SourceFile\";                     \/\/ #49     at 0x02E7\n+    Utf8 \"BSMCase7903791.jasm\";            \/\/ #50     at 0x02F4\n+  }                                        \/\/ end of Constant Pool\n+\n+  0x0021;                                  \/\/ access [ ACC_PUBLIC, ACC_SUPER ]\n+  #6;                                      \/\/ this_cpx\n+  #13;                                     \/\/ super_cpx\n+\n+  [0] {                                    \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [1] {                                    \/\/ Fields\n+    {                                      \/\/ field at 0x0314\n+      0x0002;                              \/\/ access\n+      #7;                                  \/\/ name_index       : field\n+      #8;                                  \/\/ descriptor_index : I\n+      [0] {                                \/\/ Attributes\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [3] {                                    \/\/ Methods\n+    {                                      \/\/ method at 0x031E\n+      0x0000;                              \/\/ access\n+      #9;                                  \/\/ name_index       : <init>\n+      #10;                                 \/\/ descriptor_index : ()V\n+      [1] {                                \/\/ Attributes\n+        Attr(#11, 40) {                    \/\/ Code at 0x0326\n+          4;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[9]{\n+            0x2A 0xB7 0x00 0x01 0xB1 0xB5 0x00 0x02 0xB1;\n+          }\n+          [0] {                            \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [1] {                            \/\/ Attributes\n+            Attr(#16, 13) {                \/\/ StackMapTable at 0x0341\n+              [1] {                        \/\/\n+                255b, 5, [0]{}, [2]{7b,#6; 2b};  \/\/ full_frame\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method at 0x0354\n+      0x0009;                              \/\/ access\n+      #17;                                 \/\/ name_index       : constantFilled2I\n+      #18;                                 \/\/ descriptor_index : ()[I\n+      [1] {                                \/\/ Attributes\n+        Attr(#11, 18) {                    \/\/ Code at 0x035C\n+          1;                               \/\/ max_stack\n+          0;                               \/\/ max_locals\n+          Bytes[6]{\n+            0xBA 0x00 0x03 0x00 0x00 0xB0;\n+          }\n+          [0] {                            \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [0] {                            \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method at 0x0374\n+      0x0009;                              \/\/ access\n+      #30;                                 \/\/ name_index       : constantFilled3I\n+      #18;                                 \/\/ descriptor_index : ()[I\n+      [1] {                                \/\/ Attributes\n+        Attr(#11, 18) {                    \/\/ Code at 0x037C\n+          1;                               \/\/ max_stack\n+          0;                               \/\/ max_locals\n+          Bytes[6]{\n+            0xBA 0x00 0x04 0x00 0x00 0xB0;\n+          }\n+          [0] {                            \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [0] {                            \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [2] {                                    \/\/ Attributes\n+    Attr(#49, 2) {                         \/\/ SourceFile at 0x0396\n+      #50;\n+    }                                      \/\/ end of SourceFile\n+    ;\n+    Attr(#29, 22) {                        \/\/ BootstrapMethods at 0x039E\n+      [3] {                                \/\/ bootstrap_methods\n+        {                                  \/\/ bootstrap_method\n+          #25;                             \/\/ bootstrap_method_ref\n+          [0] {                            \/\/ bootstrap_arguments\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #34;                             \/\/ bootstrap_method_ref\n+          [4] {                            \/\/ bootstrap_arguments\n+            #45;                           \/\/ at 0x03B0\n+            #46;                           \/\/ at 0x03B2\n+            #47;                           \/\/ at 0x03B4\n+            #48;                           \/\/ at 0x03B6\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+        ;\n+        {                                  \/\/ bootstrap_method\n+          #42;                             \/\/ bootstrap_method_ref\n+          [0] {                            \/\/ bootstrap_arguments\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+      }\n+    }                                      \/\/ end of BootstrapMethods\n+  }                                        \/\/ end of Attributes\n+}                                          \/\/ end of class javasoft\/sqe\/tests\/package\/BSMCase7903791\n","filename":"test\/resources\/org\/openjdk\/asmtools\/attribute\/BootstrapMethods\/BSMCase7903791.g.jcod","additions":175,"deletions":0,"binary":false,"changes":175,"status":"added"},{"patch":"@@ -0,0 +1,120 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * ORACLE PROPRIETARY\/CONFIDENTIAL. Use is subject to license terms.\n+ *\/\n+package javasoft\/sqe\/tests\/package;\n+\n+public super class #6 \/* BSMCase7903791 *\/ version 50:0\n+{\n+  const #1   = Methodref     #13.#14;             \/\/ java\/lang\/Object.\"<init>\":\"()V\"\n+  const #2   = Fieldref      #6.#15;              \/\/ BSMCase7903791.field:\"I\"\n+  const #3   = InvokeDynamic 0:#28;               \/\/ #0:_:\"()Ljava\/lang\/String;\"\n+  const #4   = InvokeDynamic 1:#35;               \/\/ #1:_:\"()[I\"\n+  const #5   = Utf8          \"javasoft\/sqe\/tests\/package\/BSMCase7903791\";\n+  const #6   = Class         #5;                  \/\/ BSMCase7903791\n+  const #7   = Utf8          \"field\";\n+  const #8   = Utf8          \"I\";\n+  const #9   = Utf8          \"<init>\";\n+  const #10  = Utf8          \"()V\";\n+  const #11  = Utf8          \"Code\";\n+  const #12  = Utf8          \"java\/lang\/Object\";\n+  const #13  = Class         #12;                 \/\/ java\/lang\/Object\n+  const #14  = NameAndType   #9:#10;              \/\/ \"<init>\":\"()V\"\n+  const #15  = NameAndType   #7:#8;               \/\/ field:\"I\"\n+  const #16  = Utf8          \"StackMapTable\";\n+  const #17  = Utf8          \"constantFilled2I\";\n+  const #18  = Utf8          \"()[I\";\n+  const #19  = Utf8          \"java\/lang\/runtime\/ArrayCreation\";\n+  const #20  = Class         #19;                 \/\/ java\/lang\/runtime\/ArrayCreation\n+  const #21  = Utf8          \"constantFilled01\";\n+  const #22  = Utf8          \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/reflect\/RuntimeType;IILjava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";\n+  const #23  = NameAndType   #21:#22;             \/\/ constantFilled01:\"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/reflect\/RuntimeType;IILjava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\"\n+   const #24  = Methodref     #20.#23;             \/\/ java\/lang\/runtime\/ArrayCreation.constantFilled01:\"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/reflect\/RuntimeType;IILjava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\"\n+  const #25  = MethodHandle  6:#24;               \/\/ REF_invokeStatic:java\/lang\/runtime\/ArrayCreation.constantFilled01:\"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/reflect\/RuntimeType;IILjava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\"\n+  const #26  = Utf8          \"_\";\n+  const #27  = Utf8          \"()Ljava\/lang\/String;\";\n+  const #28  = NameAndType   #26:#27;             \/\/ _:\"()Ljava\/lang\/String;\"\n+  const #29  = Utf8          \"BootstrapMethods\";\n+  const #30  = Utf8          \"constantFilled3I\";\n+  const #31  = Utf8          \"constantFilled\";\n+  const #32  = NameAndType   #31:#22;             \/\/ constantFilled:\"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/reflect\/RuntimeType;IILjava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\"\n+  const #33  = Methodref     #20.#32;             \/\/ java\/lang\/runtime\/ArrayCreation.constantFilled:\"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/reflect\/RuntimeType;IILjava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\"\n+  const #34  = MethodHandle  6:#33;               \/\/ REF_invokeStatic:java\/lang\/runtime\/ArrayCreation.constantFilled:\"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/reflect\/RuntimeType;IILjava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\"\n+  const #35  = NameAndType   #26:#18;             \/\/ _:\"()[I\"\n+  const #36  = Utf8          \"java\/lang\/invoke\/ConstantBootstraps\";\n+  const #37  = Class         #36;                 \/\/ java\/lang\/invoke\/ConstantBootstraps\n+  const #38  = Utf8          \"primitiveClass\";\n+  const #39  = Utf8          \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/Class;)Ljava\/lang\/Class;\";\n+  const #40  = NameAndType   #38:#39;             \/\/ primitiveClass:\"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/Class;)Ljava\/lang\/Class;\"\n+  const #41  = Methodref     #37.#40;             \/\/ java\/lang\/invoke\/ConstantBootstraps.primitiveClass:\"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/Class;)Ljava\/lang\/Class;\"\n+  const #42  = MethodHandle  6:#41;               \/\/ REF_invokeStatic:java\/lang\/invoke\/ConstantBootstraps.primitiveClass:\"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/Class;)Ljava\/lang\/Class;\"\n+  const #43  = Utf8          \"Ljava\/lang\/Class;\";\n+  const #44  = NameAndType   #8:#43;              \/\/ I:\"Ljava\/lang\/Class;\"\n+  const #45  = Dynamic       2:#44;               \/\/ #2:I:\"Ljava\/lang\/Class;\"\n+  const #46  = Integer       0;\n+  const #47  = Integer       3;\n+  const #48  = Integer       -3;\n+  const #49  = Utf8          \"SourceFile\";\n+  const #50  = Utf8          \"BSMCase7903791.jasm\";\n+\n+  private Field #7:#8;                            \/\/ field:I\n+\n+  Method       #9:#10                             \/\/ \"<init>\":\"()V\"\n+    stack 4  locals 1\n+  {\n+     0:    aload_0;\n+     1:    invokespecial     #1;                  \/\/ Method java\/lang\/Object.\"<init>\":\"()V\"\n+     4:    return;\n+     5:    putfield          #2;                  \/\/ Field field:\"I\"\n+     8:    return;\n+    StackMapTable: number_of_entries = 1\n+           frame_type = 255                       \/\/ full\n+             offset_delta = 5\n+               locals_map = []                    \/\/\n+                stack_map = [ #6, 2; ]            \/\/ class BSMCase7903791, float;\n+  }\n+\n+  public static Method #17:#18                    \/\/ constantFilled2I:\"()[I\"\n+    stack 1  locals 0\n+  {\n+     0:    invokedynamic     #3;                  \/\/ InvokeDynamic REF_invokeStatic:Method java\/lang\/runtime\/ArrayCreation.constantFilled01:\n+                                                  \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/reflect\/RuntimeType;IILjava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\":\n+                                                  \/\/ _:\"()Ljava\/lang\/String;\"{}\n+     5:    areturn;\n+  }\n+\n+  public static Method #30:#18                    \/\/ constantFilled3I:\"()[I\"\n+    stack 1  locals 0\n+  {\n+     0:    invokedynamic     #4;                  \/\/ InvokeDynamic REF_invokeStatic:Method java\/lang\/runtime\/ArrayCreation.constantFilled:\n+                                                  \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/reflect\/RuntimeType;IILjava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\":\n+                                                  \/\/ _:\"()[I\" {\n+                                                  \/\/   Dynamic REF_invokeStatic:Method java\/lang\/invoke\/ConstantBootstraps.primitiveClass:\"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/Class;)Ljava\/lang\/Class;\":\n+                                                  \/\/   I:\"Ljava\/lang\/Class;\"{},\n+                                                  \/\/   int 0,\n+                                                  \/\/   int 3,\n+                                                  \/\/   int -3\n+                                                  \/\/ }\n+     5:    areturn;\n+  }\n+\n+  SourceFile                 #50;                 \/\/ BSMCase7903791.jasm\n+\n+  BootstrapMethods {\n+     0:    #25;                                   \/\/ REF_invokeStatic:java\/lang\/runtime\/ArrayCreation.constantFilled01:\n+                                                  \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/reflect\/RuntimeType;IILjava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";\n+\n+     1:    #34;                                   \/\/ REF_invokeStatic:java\/lang\/runtime\/ArrayCreation.constantFilled:\n+                                                  \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/reflect\/RuntimeType;IILjava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";\n+     Arguments:\n+           #45,                                   \/\/ Dynamic REF_invokeStatic:java\/lang\/invoke\/ConstantBootstraps.primitiveClass:\n+                                                  \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/Class;)Ljava\/lang\/Class;\":\n+                                                  \/\/ I:\"Ljava\/lang\/Class;\"{}\n+           #46,                                   \/\/ int 0\n+           #47,                                   \/\/ int 3\n+           #48;                                   \/\/ int -3\n+\n+     2:    #42;                                   \/\/ REF_invokeStatic:java\/lang\/invoke\/ConstantBootstraps.primitiveClass:\n+                                                  \/\/ \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/Class;)Ljava\/lang\/Class;\";\n+  }\n+} \/\/ end Class javasoft\/sqe\/tests\/package\/BSMCase7903791 compiled from \"BSMCase7903791.jasm\"\n","filename":"test\/resources\/org\/openjdk\/asmtools\/attribute\/BootstrapMethods\/BSMCase7903791.g.t.jasm","additions":120,"deletions":0,"binary":false,"changes":120,"status":"added"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * ORACLE PROPRIETARY\/CONFIDENTIAL. Use is subject to license terms.\n+ *\/\n+package javasoft\/sqe\/tests\/package;\n+\n+public super class BSMCase7903791 version 50:0\n+{\n+  private Field field:I;\n+\n+  Method       \"<init>\":\"()V\"\n+    stack 4  locals 1\n+  {\n+         aload_0;\n+         invokespecial     Method java\/lang\/Object.\"<init>\":\"()V\";\n+         return;\n+         stack_frame_type  full;\n+           locals_map;\n+           stack_map       class BSMCase7903791, float;\n+         putfield          Field field:\"I\";\n+         return;\n+  }\n+\n+  public static Method constantFilled2I:\"()[I\"\n+    stack 1  locals 0\n+  {\n+         invokedynamic     InvokeDynamic REF_invokeStatic:Method java\/lang\/runtime\/ArrayCreation.constantFilled01:\n+                           \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/reflect\/RuntimeType;IILjava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\":\n+                           _:\"()Ljava\/lang\/String;\"{};\n+         areturn;\n+  }\n+\n+  public static Method constantFilled3I:\"()[I\"\n+    stack 1  locals 0\n+  {\n+         invokedynamic     InvokeDynamic REF_invokeStatic:Method java\/lang\/runtime\/ArrayCreation.constantFilled:\n+                           \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/reflect\/RuntimeType;IILjava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\":\n+                           _:\"()[I\" {\n+                             Dynamic REF_invokeStatic:Method java\/lang\/invoke\/ConstantBootstraps.primitiveClass:\"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/Class;)Ljava\/lang\/Class;\":\n+                             I:\"Ljava\/lang\/Class;\"{},\n+                             int 0,\n+                             int 3,\n+                             int -3\n+                           };\n+         areturn;\n+  }\n+\n+  SourceFile               \"BSMCase7903791.jasm\";\n+} \/\/ end Class javasoft\/sqe\/tests\/package\/BSMCase7903791 compiled from \"BSMCase7903791.jasm\"\n","filename":"test\/resources\/org\/openjdk\/asmtools\/attribute\/BootstrapMethods\/BSMCase7903791.jasm","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"}]}