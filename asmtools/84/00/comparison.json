{"files":[{"patch":"@@ -30,1 +30,1 @@\n-PRODUCT_BUILDNUMBER =07\n+PRODUCT_BUILDNUMBER =08\n","filename":"build\/productinfo.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -152,1 +152,2 @@\n-            ret = max(rc, nWarnings + nErrors);\n+            \/\/ don't take into account warnings\n+            ret = max(rc, nErrors);\n","filename":"src\/org\/openjdk\/asmtools\/common\/DecompilerLogger.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -299,1 +299,1 @@\n-        opc_wide(196, null, 0),\n+        opc_wide(196, null, \"wide\", 0),\n@@ -523,0 +523,7 @@\n+        public String getPrintName() {\n+            if (alias != null) {\n+                return alias;\n+            }\n+            return parseKey;\n+        }\n+\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/OpcodeTables.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -120,1 +120,11 @@\n-                            parser.curCodeAttr.addInstr(mnenoc_pos, Opcode.opc_bytecode, parser.parseUInt(1), null);\n+                            if (scanner.token == Token.IDENT) {\n+                                Opcode oc = OpcodeTables.opcode(scanner.stringValue);\n+                                if (oc == null) {\n+                                    environment.error(scanner.pos, \"err.unknown.bytecode\", scanner.stringValue);\n+                                    throw new SyntaxError();\n+                                }\n+                                parser.curCodeAttr.addInstr(mnenoc_pos, opc_bytecode, new Indexer(oc.value()), null);\n+                                scanner.scan();\n+                            } else {\n+                                parser.curCodeAttr.addInstr(mnenoc_pos, Opcode.opc_bytecode, parser.parseUInt(1), null);\n+                            }\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/ParseInstruction.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -124,0 +124,1 @@\n+err.unknown.bytecode=Unknown bytecode ({0})\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/i18n.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -150,1 +150,2 @@\n-                if (environment.hasMessages()) rc += environment.flush(true);\n+                if (environment.hasMessages())\n+                    rc += environment.flush(true);\n@@ -159,1 +160,2 @@\n-        if (environment.hasMessages()) rc += environment.flush(true);\n+        if (environment.hasMessages())\n+            rc += environment.flush(true);\n","filename":"src\/org\/openjdk\/asmtools\/jcoder\/Main.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -156,1 +156,1 @@\n-        int rc = 0;\n+        int rc = OK;\n@@ -163,1 +163,1 @@\n-                rc = environment.getLogger().registerTotalIssues(rc, toolInput);\n+                rc += environment.getLogger().registerTotalIssues(rc, toolInput);\n@@ -173,1 +173,1 @@\n-                rc = environment.getLogger().registerTotalIssues(rc, toolInput);\n+                rc += environment.getLogger().registerTotalIssues(rc, toolInput);\n@@ -177,1 +177,1 @@\n-                rc = environment.getLogger().registerTotalIssues(rc, toolInput);\n+                rc += environment.getLogger().registerTotalIssues(rc, toolInput);\n@@ -181,1 +181,1 @@\n-                rc = environment.getLogger().registerTotalIssues(rc, toolInput);\n+                rc += environment.getLogger().registerTotalIssues(rc, toolInput);\n@@ -184,1 +184,1 @@\n-            return rc;\n+            break;\n@@ -186,1 +186,1 @@\n-        return OK;\n+        return rc;\n","filename":"src\/org\/openjdk\/asmtools\/jdec\/Main.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -105,1 +105,5 @@\n-    private int getByte(int pc) {\n+    private int getByte(int pc) throws IndexOutOfBoundsException {\n+        if (pc < 0 || pc >= code.length) {\n+            throw new IndexOutOfBoundsException(environment.getInfo(\"err.out.of.range\", pc));\n+\n+        }\n@@ -109,1 +113,5 @@\n-    private int getUByte(int pc) {\n+    private int getUByte(int pc) throws IndexOutOfBoundsException {\n+        if (pc < 0 || pc >= code.length) {\n+            throw new IndexOutOfBoundsException(environment.getInfo(\"err.out.of.range\", pc));\n+\n+        }\n@@ -113,1 +121,4 @@\n-    private int getShort(int pc) {\n+    private int getShort(int pc) throws IndexOutOfBoundsException {\n+        if (pc < 0 || pc + 1 >= code.length) {\n+            throw new IndexOutOfBoundsException(environment.getInfo(\"err.out.of.range\", pc));\n+        }\n@@ -117,1 +128,4 @@\n-    private int getUShort(int pc) {\n+    private int getUShort(int pc) throws IndexOutOfBoundsException {\n+        if (pc < 0 || pc + 1 >= code.length) {\n+            throw new IndexOutOfBoundsException(environment.getInfo(\"err.out.of.range\", pc));\n+        }\n@@ -121,1 +135,1 @@\n-    private int getInt(int pc) {\n+    private int getInt(int pc) throws IndexOutOfBoundsException {\n@@ -322,0 +336,5 @@\n+            if (opcode == null) {\n+                \/\/ nonexistent opcode - but we have to print something\n+                getInstructionAttribute(pc).referred = true;\n+                return 1;\n+            }\n@@ -324,8 +343,16 @@\n-                    int tb = align(pc + 1);\n-                    int default_skip = getInt(tb); \/* default skip pamount *\/\n-\n-                    int low = getInt(tb + 4);\n-                    int high = getInt(tb + 8);\n-                    int count = high - low;\n-                    for (int i = 0; i <= count; i++) {\n-                        getInstructionAttribute(pc + getInt(tb + 12 + 4 * i)).referred = true;\n+                    try {\n+                        int tb = align(pc + 1);\n+                        int default_skip = getInt(tb); \/* default skip pamount *\/\n+\n+                        int low = getInt(tb + 4);\n+                        int high = getInt(tb + 8);\n+                        int count = high - low;\n+                        for (int i = 0; i <= count; i++) {\n+                            getInstructionAttribute(pc + getInt(tb + 12 + 4 * i)).referred = true;\n+                        }\n+                        getInstructionAttribute(default_skip + pc).referred = true;\n+                        return tb - pc + 16 + count * 4;\n+                    } catch (IndexOutOfBoundsException e) {\n+                        environment.error(e);\n+                        getInstructionAttribute(pc).referred = true;\n+                        return 1;\n@@ -333,2 +360,0 @@\n-                    getInstructionAttribute(default_skip + pc).referred = true;\n-                    return tb - pc + 16 + count * 4;\n@@ -337,2 +362,3 @@\n-                    int tb = align(pc + 1);\n-                    int default_skip = getInt(tb); \/* default skip pamount *\/\n+                    try {\n+                        int tb = align(pc + 1);\n+                        int default_skip = getInt(tb); \/* default skip pamount *\/\n@@ -340,3 +366,10 @@\n-                    int npairs = getInt(tb + 4);\n-                    for (int i = 1; i <= npairs; i++) {\n-                        getInstructionAttribute(pc + getInt(tb + 4 + i * 8)).referred = true;\n+                        int npairs = getInt(tb + 4);\n+                        for (int i = 1; i <= npairs; i++) {\n+                            getInstructionAttribute(pc + getInt(tb + 4 + i * 8)).referred = true;\n+                        }\n+                        getInstructionAttribute(default_skip + pc).referred = true;\n+                        return tb - pc + (npairs + 1) * 8;\n+                    } catch (IndexOutOfBoundsException e) {\n+                        environment.error(e);\n+                        getInstructionAttribute(pc).referred = true;\n+                        return 1;\n@@ -344,2 +377,0 @@\n-                    getInstructionAttribute(default_skip + pc).referred = true;\n-                    return tb - pc + (npairs + 1) * 8;\n@@ -350,2 +381,8 @@\n-                    getInstructionAttribute(pc + getShort(pc + 1)).referred = true;\n-                    return 3;\n+                    try {\n+                        getInstructionAttribute(pc + getShort(pc + 1)).referred = true;\n+                        return 3;\n+                    } catch (IndexOutOfBoundsException e) {\n+                        environment.error(e);\n+                        getInstructionAttribute(pc).referred = true;\n+                        return 1;\n+                    }\n@@ -362,2 +399,6 @@\n-            int opclen = opcode.length();\n-            return opclen == 0 ? 1 : opclen;  \/\/ bugfix for 4614404\n+            if (opcode != null) {\n+                int opclen = opcode.length();\n+                return opclen == 0 ? 1 : opclen;  \/\/ bugfix for 4614404\n+            } else {\n+                return 1;\n+            }\n@@ -433,0 +474,6 @@\n+        if (opcode == null) {\n+            \/\/ nonexistent opcode - but we have to print something\n+            print(PadRight(\"bytecode\", OPERAND_PLACEHOLDER_LENGTH + 1)).\n+                    println((printHEX ? toHex(opc) : opc) + \";\");\n+            return 1;\n+        }\n@@ -441,0 +488,1 @@\n+\n@@ -444,1 +492,2 @@\n-                        mnem = opcode.parseKey() + \" \" + opc2;\n+                        print(PadRight(opcode.parseKey(), OPERAND_PLACEHOLDER_LENGTH + 1)).\n+                                println((printHEX ? toHex(opc2) : opc2) + \";\");\n@@ -446,1 +495,1 @@\n-                        mnem = opcode2.parseKey();\n+                        println(opcode2.parseKey() + \";\");\n@@ -448,1 +497,0 @@\n-                    println(mnem);\n@@ -465,1 +513,2 @@\n-                    print(PadRight(opc_bytecode.parseKey(), OPERAND_PLACEHOLDER_LENGTH + 1)).println(opcode + \";\");\n+                    print(PadRight(opc_bytecode.parseKey(), OPERAND_PLACEHOLDER_LENGTH + 1)).\n+                            println(opcode.getPrintName() + \";\");\n@@ -524,7 +573,4 @@\n-                \/\/ TODO:  add checkBounds\n-                int tb = align(pc + 1);\n-                int default_skip = getInt(tb); \/* default skip pamount *\/\n-\n-                int low = getInt(tb + 4);\n-                int high = getInt(tb + 8);\n-                int count = high - low;\n+                boolean notPrinted = true;\n+                try {\n+                    int tb = align(pc + 1);\n+                    int default_skip = getInt(tb); \/* default skip pamount *\/\n@@ -532,6 +578,26 @@\n-                printPadRight(format(\"%s { \", PadRight(operand, OPERAND_PLACEHOLDER_LENGTH)), getCommentOffset());\n-                println(printCPIndex && !skipComments ? \" \/\/ \" + low + \" to \" + high : \"\");\n-                for (int i = 0; i <= count; i++) {\n-                    \/\/ 9 == \"default: \".length()\n-                    print(enlargedIndent(PadRight(format(\"%2d: \", i + low), 9), shift)).\n-                            println(data.getLabelPrefix() + (pc + getInt(tb + 12 + 4 * i)) + \";\");\n+                    int low = getInt(tb + 4);\n+                    int high = getInt(tb + 8);\n+                    int count = high - low;\n+                    printPadRight(format(\"%s { \", PadRight(operand, OPERAND_PLACEHOLDER_LENGTH)), getCommentOffset());\n+                    println(printCPIndex && !skipComments ? \" \/\/ \" + low + \" to \" + high : \"\");\n+                    notPrinted = false;\n+                    for (int i = 0; i <= count; i++) {\n+                        \/\/ 9 == \"default: \".length()\n+                        print(enlargedIndent(PadRight(format(\"%2d: \", i + low), 9), shift)).\n+                                println(data.getLabelPrefix() + (pc + getInt(tb + 12 + 4 * i)) + \";\");\n+                    }\n+                    print(enlargedIndent(\n+                            PadRight(\"default: \" + data.getLabelPrefix() + (default_skip + pc),\n+                                    OPERAND_PLACEHOLDER_LENGTH - getIndentStep() - 2), shift)\n+                    ).println(\" };\");\n+                    return tb - pc + 16 + count * 4;\n+                } catch (IndexOutOfBoundsException e) {\n+                    if (notPrinted) {\n+                        println(\"%s { \".formatted(operand));\n+                        printIndentLn(enlargedIndent(\"BOGUS;\", shift));\n+                        println(enlargedIndent(\" };\", shift));\n+                    } else {\n+                        println(\"BOGUS;\").println(enlargedIndent(\" };\", shift));\n+                    }\n+                    environment.error(e);\n+                    return 1;\n@@ -539,5 +605,0 @@\n-                print(enlargedIndent(\n-                        PadRight(\"default: \" + data.getLabelPrefix() + (default_skip + pc),\n-                                OPERAND_PLACEHOLDER_LENGTH - getIndentStep() - 2), shift)\n-                ).println(\" };\");\n-                return tb - pc + 16 + count * 4;\n@@ -546,15 +607,29 @@\n-                \/\/ TODO:  add checkBounds\n-                int tb = align(pc + 1);\n-\n-                int default_skip = getInt(tb);\n-                int nPairs = getInt(tb + 4);\n-\n-                printPadRight(format(\"%s { \", PadRight(operand, OPERAND_PLACEHOLDER_LENGTH)), getCommentOffset());\n-                println(printCPIndex && !skipComments ? \" \/\/ \" + nPairs : \"\");\n-                Pair<Integer, Integer>[] lookupswitchPairs = getLookupswitchPairs(tb, nPairs);\n-                \/\/ 9 == \"default: \".length()\n-                int caseLength = Math.max(9, Arrays.stream(lookupswitchPairs).\n-                        mapToInt(p -> String.valueOf(p.first).length()).max().orElse(0) + 2);\n-                for (int i = 0; i < nPairs; i++) {\n-                    print(enlargedIndent(PadRight(format(\"%2d:\", lookupswitchPairs[i].first), caseLength), shift)).\n-                            println(data.getLabelPrefix() + (pc + lookupswitchPairs[i].second) + \";\");\n+                boolean notPrinted = true;\n+                try {\n+                    int tb = align(pc + 1);\n+\n+                    int default_skip = getInt(tb);\n+                    int nPairs = getInt(tb + 4);\n+                    printPadRight(format(\"%s { \", PadRight(operand, OPERAND_PLACEHOLDER_LENGTH)), getCommentOffset());\n+                    println(printCPIndex && !skipComments ? \" \/\/ \" + nPairs : \"\");\n+                    notPrinted = false;\n+                    Pair<Integer, Integer>[] lookupswitchPairs = getLookupswitchPairs(tb, nPairs);\n+                    \/\/ 9 == \"default: \".length()\n+                    int caseLength = Math.max(9, Arrays.stream(lookupswitchPairs).\n+                            mapToInt(p -> String.valueOf(p.first).length()).max().orElse(0) + 2);\n+                    for (int i = 0; i < nPairs; i++) {\n+                        print(enlargedIndent(PadRight(format(\"%2d:\", lookupswitchPairs[i].first), caseLength), shift)).\n+                                println(data.getLabelPrefix() + (pc + lookupswitchPairs[i].second) + \";\");\n+                    }\n+                    print(enlargedIndent(\n+                            PadRight(PadRight(\"default: \", caseLength) + data.getLabelPrefix() + (default_skip + pc),\n+                                    OPERAND_PLACEHOLDER_LENGTH - getIndentStep() - 2), shift)).println(\" };\");\n+                    return tb - pc + (nPairs + 1) * 8;\n+                } catch (IndexOutOfBoundsException e) {\n+                    if (notPrinted) {\n+                        println(\"%s { \".formatted(operand));\n+                    }\n+                    printIndentLn(enlargedIndent(\"BOGUS;\", shift));\n+                    println(enlargedIndent(\" };\", shift));\n+                    environment.error(e);\n+                    return 1;\n@@ -562,4 +637,0 @@\n-                print(enlargedIndent(\n-                        PadRight(PadRight(\"default: \", caseLength) + data.getLabelPrefix() + (default_skip + pc),\n-                                OPERAND_PLACEHOLDER_LENGTH - getIndentStep() - 2), shift)).println(\" };\");\n-                return tb - pc + (nPairs + 1) * 8;\n@@ -585,23 +656,28 @@\n-                \/\/ TODO:  add checkBounds\n-                \/\/ added printing of the tag: Method\/Interface to clarify\n-                \/\/ interpreting CONSTANT_MethodHandle_info:reference_kind\n-                \/\/ Example: ldc_w Dynamic REF_invokeStatic:Method CondyIndy.condy_bsm\n-                int index, opLength;\n-                Map<Integer, List<Integer>> breakPositions = new HashMap<>();\n-                if (opcode == Opcode.opc_ldc) {\n-                    opLength = 2;\n-                    breakPositions = LdwBreakPositions;\n-                    index = getUByte(pc + 1);\n-                } else if (opcode == Opcode.opc_invokedynamic) {\n-                    opLength = 5;\n-                    breakPositions = InvokeDynamicBreakPositions;\n-                    index = getUShort(pc + 1); \/\/ getUbyte(pc + 3); \/\/ getUbyte(pc + 4); \/\/ reserved bytes\n-                } else {    \/\/ opc_ldc*_w\n-                    opLength = 3;\n-                    breakPositions = LdwBreakPositions;\n-                    index = getUShort(pc + 1);\n-                }\n-                pool.setPrintTAG(true);\n-                if (printCPIndex) {\n-                    if (skipComments) {\n-                        println(format(\"%s #%d;\", PadRight(operand, OPERAND_PLACEHOLDER_LENGTH), index));\n+                try {\n+                    int index, opLength;\n+                    Map<Integer, List<Integer>> breakPositions = new HashMap<>();\n+                    if (opcode == Opcode.opc_ldc) {\n+                        opLength = 2;\n+                        breakPositions = LdwBreakPositions;\n+                        index = getUByte(pc + 1);\n+                    } else if (opcode == Opcode.opc_invokedynamic) {\n+                        opLength = 5;\n+                        breakPositions = InvokeDynamicBreakPositions;\n+                        index = getUShort(pc + 1); \/\/ getUbyte(pc + 3); \/\/ getUbyte(pc + 4); \/\/ reserved bytes\n+                    } else {    \/\/ opc_ldc*_w\n+                        opLength = 3;\n+                        breakPositions = LdwBreakPositions;\n+                        index = getUShort(pc + 1);\n+                    }\n+                    pool.setPrintTAG(true);\n+                    if (printCPIndex) {\n+                        if (skipComments) {\n+                            println(format(\"%s #%d;\", PadRight(operand, OPERAND_PLACEHOLDER_LENGTH), index));\n+                        } else {\n+                            printPadRight(\n+                                    format(\"%s #%d;\", PadRight(operand, OPERAND_PLACEHOLDER_LENGTH), index), getCommentOffset()).\n+                                    print(\" \/\/ \");\n+                            println(\n+                                    formatOperandLine(pool.ConstantStrValue(index), getCommentOffset() + shift,\n+                                            \" \/\/ \", breakPositions));\n+                        }\n@@ -609,6 +685,4 @@\n-                        printPadRight(\n-                                format(\"%s #%d;\", PadRight(operand, OPERAND_PLACEHOLDER_LENGTH), index), getCommentOffset()).\n-                                print(\" \/\/ \");\n-                        println(\n-                                formatOperandLine(pool.ConstantStrValue(index), getCommentOffset() + shift,\n-                                        \" \/\/ \", breakPositions));\n+                        \/\/ TODO: Check Offset calculation\n+                        print(PadRight(operand, OPERAND_PLACEHOLDER_LENGTH + 1));\n+                        println(formatOperandLine(pool.ConstantStrValue(index), OPERAND_PLACEHOLDER_LENGTH + shift + 1,\n+                                \"\", breakPositions) + \";\");\n@@ -616,5 +690,15 @@\n-                } else {\n-                    \/\/ TODO: Check Offset calculation\n-                    print(PadRight(operand, OPERAND_PLACEHOLDER_LENGTH + 1));\n-                    println(formatOperandLine(pool.ConstantStrValue(index), OPERAND_PLACEHOLDER_LENGTH + shift + 1,\n-                            \"\", breakPositions) + \";\");\n+                    pool.setPrintTAG(false);\n+                    return opLength;\n+                } catch (IndexOutOfBoundsException e) {\n+                    if (printCPIndex) {\n+                        if (skipComments) {\n+                            println(format(\"%s BOGUS;\", PadRight(operand, OPERAND_PLACEHOLDER_LENGTH)));\n+                        } else {\n+                            printPadRight(format(\"%s BOGUS;\", PadRight(operand, OPERAND_PLACEHOLDER_LENGTH)),\n+                                    getCommentOffset()).println(\" \/\/ \" + e.getMessage());\n+                        }\n+                    } else {\n+                        print(PadRight(operand, OPERAND_PLACEHOLDER_LENGTH + 1)).println(\"BOGUS;\");\n+                    }\n+                    environment.error(e);\n+                    return 1;\n@@ -622,2 +706,0 @@\n-                pool.setPrintTAG(false);\n-                return opLength;\n@@ -750,4 +832,9 @@\n-    private Pair<Integer, Integer>[] getLookupswitchPairs(int pad, int count) {\n-        Pair[] pairs = new Pair[count];\n-        for (int i = 1; i <= count; i++) {\n-            pairs[i - 1] = new Pair<>(getInt(pad + i * 8), getInt(pad + 4 + i * 8));\n+    private Pair<Integer, Integer>[] getLookupswitchPairs(int pad, int count)  {\n+        try {\n+            Pair[] pairs = new Pair[count];\n+            for (int i = 1; i <= count; i++) {\n+                pairs[i - 1] = new Pair<>(getInt(pad + i * 8), getInt(pad + 4 + i * 8));\n+            }\n+            return pairs;\n+        } catch (NegativeArraySizeException e) {\n+            throw new IndexOutOfBoundsException(environment.getInfo(\"err.out.of.range\", count));\n@@ -755,1 +842,0 @@\n-        return pairs;\n@@ -758,1 +844,0 @@\n-\n@@ -808,1 +893,2 @@\n-                printIndent(PadRight(((insAttr != null) && insAttr.referred) ? data.getLabelPrefix() + pc + \":\" : \" \", instructionOffset));\n+                printIndent(PadRight(((insAttr != null) && insAttr.referred) ? data.getLabelPrefix() + pc + \":\" : \" \",\n+                        instructionOffset));\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/CodeData.java","additions":196,"deletions":110,"binary":false,"changes":306,"status":"modified"},{"patch":"@@ -163,1 +163,1 @@\n-            listPrefix = prefix + INDENT_STRING;;\n+            listPrefix = prefix + INDENT_STRING;\n@@ -258,1 +258,2 @@\n-            print(this.enlargedIndent(PadRight(title, STACKMAP_TYPE_PLACEHOLDER_LENGTH), shift));\n+            boolean isEmpty = entriesLine.first.isEmpty() && entriesLine.second.isEmpty();\n+            print(this.enlargedIndent(PadRight(title + (isEmpty ? \";\" : \"\"), STACKMAP_TYPE_PLACEHOLDER_LENGTH), shift));\n@@ -265,1 +266,3 @@\n-                    print(\" \/\/ \");\n+                    if( !isEmpty ) {\n+                        print(\" \/\/ \");\n+                    }\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/InstructionAttr.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -108,1 +108,1 @@\n-        int rc = 0;\n+        int rc = OK;\n@@ -123,1 +123,1 @@\n-                rc = environment.getLogger().registerTotalIssues(rc, toolInput);\n+                rc += environment.getLogger().registerTotalIssues(rc, toolInput);\n@@ -134,1 +134,1 @@\n-                rc = environment.getLogger().registerTotalIssues(rc, toolInput);\n+                rc += environment.getLogger().registerTotalIssues(rc, toolInput);\n@@ -139,1 +139,1 @@\n-                rc = environment.getLogger().registerTotalIssues(rc, toolInput);\n+                rc += environment.getLogger().registerTotalIssues(rc, toolInput);\n@@ -144,1 +144,1 @@\n-                rc = environment.getLogger().registerTotalIssues(rc, toolInput);\n+                rc += environment.getLogger().registerTotalIssues(rc, toolInput);\n@@ -147,1 +147,1 @@\n-            return rc;\n+            break;\n@@ -149,1 +149,1 @@\n-        return OK;\n+        return rc;\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/Main.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -98,0 +98,1 @@\n+err.out.of.range=The index {0} is out of range for the code array of the method.\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/i18n.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}