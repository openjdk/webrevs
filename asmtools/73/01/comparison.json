{"files":[{"patch":"@@ -92,2 +92,2 @@\n-    \/\/ Valhalla\n-    ATT_Preload(36, \"ATT_Preload\", \"Preload\", CONSTANT_CLASS);\n+    \/\/ JEP 401\n+    ATT_LoadableDescriptors(36, \"ATT_LoadableDescriptors\", \"LoadableDescriptors\", CONSTANT_UTF8);\n","filename":"src\/org\/openjdk\/asmtools\/common\/structure\/EAttribute.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+    ACC_IDENTITY(0x0020, \"identity\", CLASS, INNER_CLASS),\n@@ -59,1 +60,0 @@\n-    ACC_PERMITS_VALUE(0x0040, \"permits_value\", CLASS, INNER_CLASS),       \/\/ valhalla\n@@ -65,1 +65,0 @@\n-    ACC_VALUE(0x0100, \"value\", CLASS, INNER_CLASS),                         \/\/ valhalla\n@@ -71,2 +70,1 @@\n-    ACC_STRICT(0x0800, \"strict\", METHOD),\n-    ACC_PRIMITIVE(0x0800, \"primitive\", CLASS, INNER_CLASS),                  \/\/ valhalla\n+    ACC_STRICT(0x0800, \"strict\", FIELD, METHOD),\n@@ -91,3 +89,3 @@\n-    public static final EModifier[] MM_CLASS = {ACC_PUBLIC, ACC_FINAL, ACC_SUPER,\n-            ACC_PRIMITIVE, ACC_INTERFACE, ACC_ABSTRACT, ACC_SYNTHETIC,\n-            ACC_ANNOTATION, ACC_ENUM, ACC_MODULE, ACC_VALUE, ACC_PERMITS_VALUE, ACC_PRIMITIVE};\n+    public static final EModifier[] MM_CLASS = {ACC_PUBLIC, ACC_FINAL, ACC_IDENTITY, ACC_SUPER,\n+            ACC_INTERFACE, ACC_ABSTRACT, ACC_SYNTHETIC,\n+            ACC_ANNOTATION, ACC_ENUM, ACC_MODULE};\n@@ -101,1 +99,1 @@\n-            ACC_SYNTHETIC, ACC_ENUM};\n+            ACC_STRICT, ACC_SYNTHETIC, ACC_ENUM};\n@@ -110,1 +108,1 @@\n-            ACC_INTERFACE, ACC_ABSTRACT, ACC_SYNTHETIC, ACC_ANNOTATION, ACC_ENUM};\n+            ACC_IDENTITY, ACC_INTERFACE, ACC_ABSTRACT, ACC_SYNTHETIC, ACC_ANNOTATION, ACC_ENUM};\n@@ -237,10 +235,2 @@\n-    public static boolean isValue(int flags) {\n-        return (flags & ACC_VALUE.flag) != 0;\n-    }\n-\n-    public static boolean isPermitsValue(int flags) {\n-        return (flags & ACC_PERMITS_VALUE.flag) != 0;\n-    }\n-\n-    public static boolean isPrimitive(int flags) {\n-        return (flags & ACC_PRIMITIVE.flag) != 0;\n+    public static boolean isIdentity(int flags) {\n+        return (flags & ACC_IDENTITY.flag) != 0;\n@@ -367,2 +357,2 @@\n-        \/\/ ACC_TRANSITIVE ACC_SUPER ACC_SYNCHRONIZED ACC_OPEN\n-        if (isSuper(flags)) {                          \/\/  == isTransitive(flags) == isSynchronized(flags) == isOpen(flags)\n+        \/\/ ACC_TRANSITIVE ACC_SUPER ACC_SYNCHRONIZED ACC_OPEN ACC_IDENTITY\n+        if (isIdentity(flags)) {                          \/\/  == isTransitive(flags) == isSynchronized(flags) == isOpen(flags) == isSuper(flags)\n@@ -374,2 +364,2 @@\n-                    \/\/ still we have to keep it in here (if it was here), as if the new class is used for hotswap, it s absence would casue\n-                    \/\/ java.lang.UnsupportedOperationException: class redefinition failed: attempted to change the class modifiers\n+                    \/\/ In JEP 401, the class flag is renamed ACC_IDENTITY, and\n+                    \/\/ is used to distinguish value and identity classes.\n@@ -378,0 +368,1 @@\n+                case INNER_CLASS -> flags = addTo(list, flags, isName, ACC_IDENTITY);\n@@ -383,2 +374,2 @@\n-        \/\/ ACC_VOLATILE ACC_BRIDGE ACC_STATIC_PHASE ACC_PERMITS_VALUE\n-        if (isVolatile(flags)) {                         \/\/ == isBridge(flags) ==isStaticPhase(flags) == isPermitsValue(flags)\n+        \/\/ ACC_VOLATILE ACC_BRIDGE ACC_STATIC_PHASE\n+        if (isVolatile(flags)) {                         \/\/ == isBridge(flags) ==isStaticPhase(flags)\n@@ -389,1 +380,0 @@\n-                case CLASS, INNER_CLASS -> flags = addTo(list, flags, isName, ACC_PERMITS_VALUE);\n@@ -399,6 +389,3 @@\n-        \/\/ ACC_NATIVE    ACC_VALUE\n-        if (isNative(flags)) {                           \/\/ == isValue(flags)\n-            switch (context) {\n-                case METHOD -> flags = addTo(list, flags, isName, ACC_NATIVE);\n-                case CLASS, INNER_CLASS -> flags = addTo(list, flags, isName, ACC_VALUE);\n-            }\n+        \/\/ ACC_NATIVE\n+        if (isNative(flags) && context == METHOD) {\n+            flags = addTo(list, flags, isName, ACC_NATIVE);\n@@ -419,6 +406,3 @@\n-        \/\/ ACC_STRICT ACC_PRIMITIVE\n-        if (isStrict(flags)) {                          \/\/ == isPrimitive(flags)\n-            switch (context) {\n-                case METHOD -> flags = addTo(list, flags, isName, ACC_STRICT);\n-                case CLASS, INNER_CLASS -> flags = addTo(list, flags, isName, ACC_PRIMITIVE);\n-            }\n+        \/\/ ACC_STRICT\n+        if (isStrict(flags) && context.isOneOf(FIELD, METHOD)) {\n+            flags = addTo(list, flags, isName, ACC_STRICT);\n","filename":"src\/org\/openjdk\/asmtools\/common\/structure\/EModifier.java","additions":22,"deletions":38,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -113,2 +113,2 @@\n-            \/\/ If the ACC_INTERFACE flag is set, the ACC_FINAL, ACC_PRIMITIVE, ACC_ENUM, and ACC_MODULE flags must not be set.\n-            if (anyOf(mod, ACC_FINAL, ACC_PRIMITIVE, ACC_ENUM, ACC_MODULE)) {\n+            \/\/ If the ACC_INTERFACE flag is set, the ACC_FINAL, ACC_IDENTITY, ACC_ENUM, and ACC_MODULE flags must not be set.\n+            if (anyOf(mod, ACC_FINAL, ACC_IDENTITY, ACC_ENUM, ACC_MODULE)) {\n@@ -173,9 +173,4 @@\n-            \/\/ In a primitive class, each field must have at least one of its ACC_STATIC or ACC_FINAL flags set.\n-            if (classData.isPrimitive()) {\n-                if (!EModifier.anyOf(mod, ACC_STATIC, ACC_FINAL) || !EModifier.both(mod, ACC_STATIC, ACC_FINAL)) {\n-                    environment.warning(pos, \"warn.invalid.modifier.primitive.flags\",\n-                            EModifier.asNames(mod, ClassFileContext.FIELD));\n-                }\n-                \/\/ In an abstract class, each field must have its ACC_STATIC flag set.\n-                if (classData.isAbstract() && !isStatic(mod)) {\n-                    environment.warning(pos, \"warn.invalid.modifier.primitive.abstract\",\n+            \/\/ In a value class, each field must have at least one of its ACC_STATIC or ACC_FINAL flags set.\n+            if (!classData.isIdentity()) {\n+                if (!EModifier.anyOf(mod, ACC_STATIC, ACC_FINAL)) {\n+                    environment.warning(pos, \"warn.invalid.modifier.value.flags\",\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/Checker.java","additions":6,"deletions":11,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -81,2 +81,2 @@\n-    \/\/ Valhalla\n-    private PreloadAttr preloadAttr;\n+    \/\/ JEP 401\n+    private LoadableDescriptorsAttr loadableDescriptorsAttr;\n@@ -134,1 +134,1 @@\n-     * @return True if the classes access flag indicates it is an interface.\n+     * @return True if the class's access flag indicates it is an interface.\n@@ -141,1 +141,1 @@\n-     * Predicate that describes if this class has a primitive flag indicating that it is the primitive class.\n+     * Predicate that describes if this class has an abstract flag indicating that it is the abstract class.\n@@ -143,1 +143,1 @@\n-     * @return True if the classes access flag indicates it is the primitive class.\n+     * @return True if the class's access flag indicates it is an abstract class.\n@@ -145,2 +145,2 @@\n-    public final boolean isPrimitive() {\n-        return EModifier.isPrimitive(access);\n+    public final boolean isAbstract() {\n+        return EModifier.isAbstract(access);\n@@ -150,1 +150,1 @@\n-     * Predicate that describes if this class has an abstract flag indicating that it is the abstract class.\n+     * Predicate that describes if this class has an identity flag indicating that it is an identity class.\n@@ -152,1 +152,1 @@\n-     * @return True if the classes access flag indicates it is the abstract class.\n+     * @return True if the classes access flag indicates it is an identity class.\n@@ -154,2 +154,2 @@\n-    public final boolean isAbstract() {\n-        return EModifier.isAbstract(access);\n+    public final boolean isIdentity() {\n+        return EModifier.isIdentity(access);\n@@ -364,3 +364,3 @@\n-    public void addPreloads(List<ConstCell> classes) {\n-        environment.traceln(\"addPreloads\");\n-        preloadAttr = new PreloadAttr(pool, classes);\n+    public void addLoadableDescriptors(List<ConstCell> descriptors) {\n+        environment.traceln(\"addLoadableDescriptors\");\n+        loadableDescriptorsAttr = new LoadableDescriptorsAttr(pool, descriptors);\n@@ -521,1 +521,1 @@\n-                    preloadAttr                                     \/\/ Valhalla\n+                    loadableDescriptorsAttr                         \/\/ JEP 401\n@@ -566,2 +566,2 @@\n-    public boolean preloadAttributeExists() {\n-        return preloadAttr != null;\n+    public boolean loadableDescriptorsAttributeExists() {\n+        return loadableDescriptorsAttr != null;\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/ClassData.java","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -404,6 +404,3 @@\n-        \/\/ Valhalla\n-        VALUE                   (200, \"VALUE\",     \"value\",     EnumSet.of(TokenType.MODIFIER, TokenType.CLASS_NAME, TokenType.MODULE_NAME, TokenType.JASM_IDENT), KeywordType.KEYWORD),\n-        PERMITS_VALUE           (201, \"PERMITS_VALUE\", \"permits_value\", EnumSet.of(TokenType.MODIFIER, TokenType.CLASS_NAME, TokenType.MODULE_NAME ), KeywordType.KEYWORD),\n-        PRIMITIVE               (202, \"PRIMITIVE\", \"primitive\", EnumSet.of(TokenType.MODIFIER, TokenType.CLASS_NAME, TokenType.MODULE_NAME, TokenType.JASM_IDENT ), KeywordType.KEYWORD),\n-        \/\/ Valhalla  Declaration keyword(s)\n-        PRELOAD                 (203, \"PRELOAD\",    \"Preload\",  EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME ), KeywordType.KEYWORD);\n+        \/\/ JEP 401\n+        IDENTITY            (200, \"IDENTITY\", \"identity\", EnumSet.of(TokenType.MODIFIER, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME), KeywordType.KEYWORD),\n+        LOADABLE_DESCRIPTORS(201, \"LOADABLE_DESCRIPTORS\", \"LoadableDescriptors\", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.CLASS_NAME, TokenType.MODULE_NAME ), KeywordType.KEYWORD);\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/JasmTokens.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.jasm;\n+\n+import org.openjdk.asmtools.common.structure.EAttribute;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+\/**\n+ * The LodableDescriptors attribute (JEP 401)\n+ * <pre>\n+ * LoadableDescriptors_attribute {\n+ *   u2 attribute_name_index;\n+ *   u4 attribute_length;\n+ *   u2 number_of_descriptors;\n+ *   u2 descriptors[number_of_descriptors];\n+ * }\n+ * <\/pre>\n+ *\/\n+public class LoadableDescriptorsAttr extends AttrData {\n+\n+    List<ConstCell> descriptors = new ArrayList<>();\n+\n+    public LoadableDescriptorsAttr(ConstantPool pool, List<ConstCell> constCellList) {\n+        super(pool, EAttribute.ATT_LoadableDescriptors);\n+        descriptors.addAll(constCellList);\n+    }\n+\n+    @Override\n+    public int attrLength() {\n+        return 2 + descriptors.size() * 2;\n+    }\n+\n+    @Override\n+    public void write(CheckedDataOutputStream out) throws IOException {\n+        super.write(out);\n+        out.writeShort(descriptors.size());\n+        for (ConstCell c : descriptors) {\n+            out.writeShort(c.cpIndex);\n+        }\n+    }\n+}\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/LoadableDescriptorsAttr.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"patch":"@@ -307,3 +307,0 @@\n-        \/\/ Valhalla instructions:     aconst_init, withfield\n-        opc_aconst_init(203, \"aconst_init\", 3),\n-        opc_withfield(204, \"withfield\", 3),\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/OpcodeTables.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -653,8 +653,2 @@\n-                case VALUE:\n-                    nextmod = EModifier.ACC_VALUE.getFlag();\n-                    break;\n-                case PERMITS_VALUE:\n-                    nextmod = EModifier.ACC_PERMITS_VALUE.getFlag();\n-                    break;\n-                case PRIMITIVE:\n-                    nextmod = EModifier.ACC_PRIMITIVE.getFlag();\n+                case IDENTITY:\n+                    nextmod = EModifier.ACC_IDENTITY.getFlag();\n@@ -788,1 +782,0 @@\n-                    case 'Q':\n@@ -822,2 +815,1 @@\n-        \/\/ TODO: not a good way to detect factories...\n-        boolean is_init = name.equals(\"<init>\") && !EModifier.isStatic(mod);\n+        boolean is_init = name.equals(\"<init>\");\n@@ -1104,1 +1096,1 @@\n-     * Parse a list of classes belonging to the [NestMembers | PermittedSubclasses | Preload]  entry\n+     * Parse a list of classes belonging to the [NestMembers | PermittedSubclasses]  entry\n@@ -1109,1 +1101,1 @@\n-        \/\/ (NESTMEMBERS|PERMITTEDSUBCLASSES|PRELOAD)? IDENT(, IDENT)*;\n+        \/\/ (NESTMEMBERS|PERMITTEDSUBCLASSES)? IDENT(, IDENT)*;\n@@ -1127,0 +1119,21 @@\n+    \/**\n+     * Parse a list of names belonging to the LoadableDescriptors entry\n+     *\/\n+    private void parseNames(Consumer<ArrayList<ConstCell>> namesConsumer) throws SyntaxError {\n+        ArrayList<ConstCell> names = new ArrayList<>();\n+        \/\/ Parses in the form:\n+        \/\/ LOADABLE_DESCRIPTORS? NAME(, NAME)*;\n+        traceMethodInfoLn(\"Begin\");\n+        while (true) {\n+            ConstCell<?> cell = parseName();\n+            names.add(cell);\n+            traceMethodInfoLn(\"Added cell: \" + cell);\n+            if (scanner.token != COMMA) {\n+                scanner.expect(SEMICOLON);\n+                namesConsumer.accept(names);\n+                return;\n+            }\n+            scanner.scan();\n+        }\n+    }\n+\n@@ -2056,3 +2069,3 @@\n-                case PRELOAD -> {\n-                    if (classData.preloadAttributeExists()) {\n-                        environment.error(scanner.pos, \"err.extra.attribute\", PRELOAD.parseKey(), \"ClassData\");\n+                case LOADABLE_DESCRIPTORS -> {      \/\/ JEP 401\n+                    if (classData.loadableDescriptorsAttributeExists()) {\n+                        environment.error(scanner.pos, \"err.extra.attribute\", LOADABLE_DESCRIPTORS.parseKey(), \"ClassData\");\n@@ -2062,1 +2075,1 @@\n-                    parseClasses(list -> classData.addPreloads(list));\n+                    parseNames(list -> classData.addLoadableDescriptors(list));\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/Parser.java","additions":30,"deletions":17,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -245,1 +245,0 @@\n-                    case opc_aconst_init:  \/\/ Valhalla\n@@ -263,1 +262,0 @@\n-                    case opc_withfield:     \/\/ Valhalla\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/ParserInstr.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,33 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.asmtools.jasm;\n-\n-import org.openjdk.asmtools.common.structure.EAttribute;\n-\n-import java.util.List;\n-\n-public class PreloadAttr extends ClassArrayAttr {\n-    public PreloadAttr(ConstantPool pool, List<ConstCell> classes) {\n-        super(pool, EAttribute.ATT_Preload, classes);\n-    }\n-}\n\\ No newline at end of file\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/PreloadAttr.java","additions":0,"deletions":33,"binary":false,"changes":33,"status":"deleted"},{"patch":"@@ -137,1 +137,1 @@\n-warn.invalid.modifier.interface.set=If the ACC_INTERFACE flag is set, the ACC_FINAL, ACC_PRIMITIVE, ACC_ENUM, and ACC_MODULE flags must not be set {0}\n+warn.invalid.modifier.interface.set=If the ACC_INTERFACE flag is set, the ACC_FINAL, ACC_IDENTITY, ACC_ENUM, and ACC_MODULE flags must not be set {0}\n@@ -148,2 +148,1 @@\n-warn.invalid.modifier.primitive.flags=In a primitive class, each field must have at least one of its ACC_STATIC or ACC_FINAL flags set {0}\n-warn.invalid.modifier.primitive.abstract=In an abstract class, each field must have its ACC_STATIC flag set {0}\n+warn.invalid.modifier.value.flags=In a value class, each field must have at least one of its ACC_STATIC or ACC_FINAL flags set {0}\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/i18n.properties","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -999,2 +999,1 @@\n-                \/\/ Valhalla\n-                case ATT_NestMembers, ATT_PermittedSubclasses, ATT_Preload -> {\n+                case ATT_NestMembers, ATT_PermittedSubclasses -> {\n@@ -1009,0 +1008,16 @@\n+                \/\/ JEP 401\n+                \/\/ LoadableDescriptors_attribute {\n+                \/\/     u2 attribute_name_index;\n+                \/\/     u4 attribute_length;\n+                \/\/     u2 number_of_descriptors;\n+                \/\/     u2 descriptors[number_of_descriptors];\n+                \/\/ }\n+                case ATT_LoadableDescriptors -> {\n+                    int ndescriptors = in.readUnsignedShort();\n+                    startArrayCmt(ndescriptors, \"descriptors\");\n+                    try {\n+                        decodeNames(in, ndescriptors);\n+                    } finally {\n+                        out_end(\"}\");\n+                    }\n+                }\n@@ -1284,0 +1299,14 @@\n+    private void decodeNames(DataInputStream in, int count) throws IOException {\n+        for (int i = 0; i < count; i++) {\n+            int name_cpx = in.readUnsignedShort();\n+            environment.traceln(\"jdec.trace.type\", i, name_cpx);\n+            String s = \"#\" + name_cpx + \";\";\n+            if (environment.printDetailsFlag) {\n+                String name = (String) cpool[name_cpx];\n+                out_println(s + \" \/\/ \" + name + getStringPos());\n+            } else {\n+                environment.println(s);\n+            }\n+        }\n+    }\n+\n","filename":"src\/org\/openjdk\/asmtools\/jdec\/ClassData.java","additions":31,"deletions":2,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -127,2 +127,2 @@\n-    \/\/ Valhalla\n-    protected PreloadData preloadData;\n+    \/\/ JEP 401\n+    protected LoadableDescriptorsData loadableDescriptorsData;\n@@ -267,3 +267,3 @@\n-            case ATT_Preload ->\n-                \/\/ Valhalla\n-                    preloadData = new PreloadData(this).read(in, attributeLength);\n+            case ATT_LoadableDescriptors ->\n+                \/\/ JEP 401\n+                    loadableDescriptorsData = new LoadableDescriptorsData(this).read(in, attributeLength);\n@@ -521,1 +521,1 @@\n-                    preloadData,\n+                    loadableDescriptorsData,\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/ClassData.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -475,1 +475,0 @@\n-            \/\/ Valhalla\n@@ -477,2 +476,1 @@\n-                    opc_getfield, opc_invokevirtual, opc_invokespecial, opc_invokestatic, opc_withfield,\n-                    opc_aconst_init ->   \/\/ Valhalla\n+                    opc_getfield, opc_invokevirtual, opc_invokespecial, opc_invokestatic ->\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/CodeData.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.jdis;\n+\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+\n+import static java.lang.String.format;\n+import static org.openjdk.asmtools.jasm.JasmTokens.Token.LOADABLE_DESCRIPTORS;\n+\n+\/**\n+ * The LodableDescriptors attribute (JEP 401)\n+ * <pre>\n+ * LoadableDescriptors_attribute {\n+ *   u2 attribute_name_index;\n+ *   u4 attribute_length;\n+ *   u2 number_of_descriptors;\n+ *   u2 descriptors[number_of_descriptors];\n+ * }\n+ * <\/pre>\n+ *\/\n+public class LoadableDescriptorsData extends MemberData {\n+    int[] descriptorIndexes;\n+\n+    protected LoadableDescriptorsData(ClassData classData) {\n+        super(classData);\n+    }\n+\n+    public LoadableDescriptorsData read(DataInputStream in, int attribute_length) throws IOException, ClassFormatError {\n+        int number_of_descriptors = in.readUnsignedShort();\n+        if (attribute_length != 2 + number_of_descriptors * 2) {\n+            throw new ClassFormatError(\"ATT_LoadableDescriptors: Invalid attribute length\");\n+        }\n+        descriptorIndexes = new int[number_of_descriptors];\n+        for (int i = 0; i < number_of_descriptors; i++) {\n+            descriptorIndexes[i] = in.readUnsignedShort();\n+        }\n+        return this;\n+    }\n+\n+    @Override\n+    public void print() {\n+        StringBuilder indexes = new StringBuilder();\n+        StringBuilder descriptors = new StringBuilder();\n+        for (int descriptorIndex : descriptorIndexes) {\n+            if (printCPIndex) {\n+                indexes.append((indexes.length() == 0) ? \"\" : \", \").append(\"#\").append(descriptorIndex);\n+            }\n+            descriptors.append((descriptors.length() == 0) ? \"\" : \", \").append(pool.StringValue(descriptorIndex));\n+        }\n+        if (printCPIndex) {\n+            if( skipComments ) {\n+                printIndentLn(\"%s %s;\", LOADABLE_DESCRIPTORS.parseKey(), indexes);\n+            }  else {\n+                printIndent(PadRight(format(\"%s %s;\", LOADABLE_DESCRIPTORS.parseKey(), indexes), getCommentOffset() - 1)).println(\" \/\/ \" + descriptors);\n+            }\n+        } else {\n+            printIndentLn(\"%s %s;\", LOADABLE_DESCRIPTORS.parseKey(), descriptors.toString());\n+        }\n+    }\n+}\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/LoadableDescriptorsData.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"},{"patch":"@@ -1,38 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.asmtools.jdis;\n-\n-import org.openjdk.asmtools.jasm.JasmTokens;\n-\n-import java.io.DataInputStream;\n-import java.io.IOException;\n-\n-public class PreloadData extends ClassArrayData {\n-    public PreloadData(ClassData cls) {\n-        super(cls, JasmTokens.Token.PRELOAD.parseKey());\n-    }\n-\n-    public PreloadData read(DataInputStream in, int attribute_length) throws IOException, ClassFormatError {\n-        return (PreloadData) super.read(in, attribute_length);\n-    }\n-}\n\\ No newline at end of file\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/PreloadData.java","additions":0,"deletions":38,"binary":false,"changes":38,"status":"deleted"}]}