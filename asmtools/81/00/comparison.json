{"files":[{"patch":"@@ -35,0 +35,1 @@\n+import static java.lang.Math.min;\n@@ -220,1 +221,3 @@\n-        String line = fileContent.get((int) (filePosition.first - 1));\n+        int ln = (int) (filePosition.first - 1);\n+        boolean eof = filePosition.first > fileContent.size();\n+        String line = fileContent.get(min(fileContent.size() - 1, ln));\n@@ -222,1 +225,0 @@\n-        long linePosition = (filePosition.second + countOfExtraSpaces * TAB_REPLACEMENT.length()) - countOfExtraSpaces;\n@@ -224,0 +226,2 @@\n+        long linePosition = (eof) ? line.length() :\n+                (filePosition.second + countOfExtraSpaces * TAB_REPLACEMENT.length()) - countOfExtraSpaces;\n","filename":"src\/org\/openjdk\/asmtools\/common\/CompilerLogger.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -63,2 +63,2 @@\n-err.element.expected=Primary dataWriter item expected.\n-err.struct.expected=Structured dataWriter item expected.\n+err.element.expected=The primary element of the ClassFile structure is expected.\n+err.struct.expected=A structured element of the ClassFile is expected.\n@@ -66,1 +66,1 @@\n-err.invalid.escape.char=Invalid escape char\n+err.invalid.escape.char=Invalid escape char.\n","filename":"src\/org\/openjdk\/asmtools\/jcoder\/i18n.properties","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -120,0 +120,1 @@\n+     * @param ignoreException Whether to propagate the exception or ignore it\n@@ -122,1 +123,1 @@\n-    private void printBytes(DataInputStream in, int len, boolean printSeparately) throws IOException {\n+    private void printBytes(DataInputStream in, int len, boolean printSeparately, boolean ignoreException) throws IOException {\n@@ -124,0 +125,1 @@\n+        boolean printed = false;\n@@ -127,0 +129,1 @@\n+                byte b = in.readByte();\n@@ -133,1 +136,2 @@\n-                printByteHex(in.readByte());\n+                printByteHex(b);\n+                printed = true;\n@@ -146,0 +150,4 @@\n+        } catch (EOFException ignored) {\n+            if(!ignoreException) {\n+                throw ignored;\n+            }\n@@ -147,5 +155,7 @@\n-            if (len % 8 != 0) {\n-                if (i > 0)\n-                    environment.println(\";\");\n-                else\n-                    out_println(\";\");\n+            if( printed ) {\n+                if (len % 8 != 0) {\n+                    if (i > 0)\n+                        environment.println(\";\");\n+                    else\n+                        out_println(\";\");\n+                }\n@@ -430,1 +440,1 @@\n-            printBytes(in, len, false);\n+            printBytes(in, len, false, false);\n@@ -784,1 +794,1 @@\n-                        printBytes(in, code_len, true);\n+                        printBytes(in, code_len, true, false);\n@@ -1153,1 +1163,1 @@\n-                    printBytes(in, len, true);\n+                    printBytes(in, len, true, false);\n@@ -1157,1 +1167,0 @@\n-\n@@ -1165,1 +1174,1 @@\n-                printBytes(in, rest, true);\n+                printBytes(in, rest, true, true);\n","filename":"src\/org\/openjdk\/asmtools\/jdec\/ClassData.java","additions":21,"deletions":12,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.jasm.case7902820;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+import org.openjdk.asmtools.lib.action.EToolArguments;\n+import org.openjdk.asmtools.lib.action.Jcoder;\n+import org.openjdk.asmtools.lib.action.Jdec;\n+import org.openjdk.asmtools.lib.action.Jdis;\n+import org.openjdk.asmtools.lib.log.LogAndBinResults;\n+import org.openjdk.asmtools.lib.log.LogAndTextResults;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static org.openjdk.asmtools.common.Environment.FAILED;\n+import static org.openjdk.asmtools.common.Environment.OK;\n+\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+public class JcodTests {\n+\n+    private final Jcoder jcoder = new Jcoder();\n+\n+    private File resourceDir;\n+    private String resName = \"InvalidSourceDebugExtension.jcod\";\n+\n+    @BeforeAll\n+    public void init() throws IOException {\n+        File file = new File(this.getClass().getResource(resName).getFile());\n+        resourceDir = file.getParentFile();\n+    }\n+\n+    \/**\n+     * This is the test for the issue: CODETOOLS-7902820 (https:\/\/bugs.openjdk.org\/browse\/CODETOOLS-7902820)\n+     * \"Asmtools incorrectly uses stdout for output error messages\"\n+     * <p>\n+     * If InvalidSourceDebugExtension.jcod can't be processed by jcoder due to an error in the jcod then the command\n+     * java -jar asmtools.jar jcoder -w . InvalidSourceDebugExtension.jcod\n+     * hides the error because the error message is outputted to stdout instead of stderr.\n+     *\/\n+    @Test\n+    public void testJCoderWarning() {\n+        final LogAndBinResults jcodResult = jcoder.compile(List.of(resourceDir + File.separator + resName));\n+        List<String> out = jcodResult.getLogStringsByPrefix(\"Warning:\");\n+        Assertions.assertEquals(OK, jcodResult.result);\n+        Assertions.assertEquals(1, out.size());\n+        String msg = out.get(0);\n+        \/\/ expected substring\n+        Assertions.assertTrue(\n+                msg.contains(\" Expected attribute length \\\"2,147,483,647\\\" does not match the actual length \\\"0\\\"; expected length written\"));\n+        \/\/\n+        \/\/ class to jcod\n+        LogAndTextResults textResult = new Jdec().setArgs(EToolArguments.JDEC_G).decode(jcodResult.getAsByteInput());\n+        Assertions.assertEquals(FAILED, textResult.result);\n+        out = textResult.getLogStringsByPrefix(\"ERROR:\");\n+        Assertions.assertEquals(1, out.size());\n+        msg = out.get(0);\n+        Assertions.assertTrue(msg.contains(\"Requested array size exceeds VM limit\"));\n+        \/\/ class to jasm twice\n+        textResult = new Jdis().setArgs(EToolArguments.JDIS_G_T_LNT_LVT).decode(jcodResult.getAsByteInput());\n+        Assertions.assertEquals(FAILED, textResult.result);\n+        out = textResult.getLogStringsByPrefix(\"ERROR:\");\n+        Assertions.assertEquals(1, out.size());\n+        msg = out.get(0);\n+        Assertions.assertTrue(msg.contains(\"Requested array size exceeds VM limit\"));\n+        textResult = new Jdis().setArgs(EToolArguments.JDIS_GG_NC_LNT_LVT).decode(jcodResult.getAsByteInput());\n+        Assertions.assertEquals(FAILED, textResult.result);\n+    }\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/jasm\/case7902820\/JcodTests.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"},{"patch":"@@ -46,0 +46,1 @@\n+        add(\"InvalidSourceDebugExtension.class\");\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/helper\/BruteForceHelper.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+class invalid\/InvalidSourceDebugExtension {\n+  0xCAFEBABE;\n+  0;                                       \/\/ minor version\n+  55;                                      \/\/ version\n+  [15] {                                   \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Utf8 \"invalid\/InvalidSourceDebugExtension\";  \/\/ #1     at 0x0A\n+    Class #1;                              \/\/ #2     at 0x30\n+    Utf8 \"java\/lang\/Object\";               \/\/ #3     at 0x33\n+    Class #3;                              \/\/ #4     at 0x46\n+    Utf8 \"InvalidSourceDebugExtension.java\";  \/\/ #5     at 0x49\n+    Utf8 \"<init>\";                         \/\/ #6     at 0x6C\n+    Utf8 \"()V\";                            \/\/ #7     at 0x75\n+    NameAndType #6 #7;                     \/\/ #8     at 0x7B\n+    Method #4 #8;                          \/\/ #9     at 0x80\n+    Utf8 \"file\";                           \/\/ #10     at 0x85\n+    Utf8 \"Code\";                           \/\/ #11     at 0x8C\n+    Utf8 \"LineNumberTable\";                \/\/ #12     at 0x93\n+    Utf8 \"SourceFile\";                     \/\/ #13     at 0xA5\n+    Utf8 \"SourceDebugExtension\";           \/\/ #14     at 0xB2\n+  }                                        \/\/ end of Constant Pool\n+\n+  0x0021;                                  \/\/ access [ ACC_PUBLIC, ACC_SUPER ]\n+  #2;                                      \/\/ this_cpx\n+  #4;                                      \/\/ super_cpx\n+\n+  [0] {                                    \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [0] {                                    \/\/ Fields\n+  }                                        \/\/ end of Fields\n+\n+  [1] {                                    \/\/ Methods\n+    {                                      \/\/ method at 0xD5\n+      0x0001;                              \/\/ access\n+      #6;                                  \/\/ name_index       : <init>\n+      #7;                                  \/\/ descriptor_index : ()V\n+      [1] {                                \/\/ Attributes\n+        Attr(#11, 29) {                    \/\/ Code at 0xDD\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[5]{\n+            0x2A 0xB7 0x00 0x09 0xB1;\n+          }\n+          [0] {                            \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [1] {                            \/\/ Attributes\n+            Attr(#12, 6) {                 \/\/ LineNumberTable at 0xF4\n+              [1] {                        \/\/ line_number_table\n+                   0   30;                 \/\/ at 0x0100\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [2] {                                    \/\/ Attributes\n+    Attr(#13, 2) {                         \/\/ SourceFile at 0x0102\n+      #10;\n+    }                                      \/\/ end of SourceFile\n+    ;\n+    Attr(#14, 2147483647) {                \/\/ SourceDebugExtension at 0x010A\n+      \/\/ == The attribute array started at at 0x010A has 2147483647 bytes more than expected. ==\n+    }                                      \/\/ end of SourceDebugExtension\n+  }                                        \/\/ end of Attributes\n+}                                          \/\/ end of class invalid\/InvalidSourceDebugExtension\n","filename":"test\/resources\/org\/openjdk\/asmtools\/jasm\/case7902820\/InvalidSourceDebugExtension.jcod","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"}]}