{"files":[{"patch":"@@ -36,4 +36,4 @@\n- * u2 attribute_name_index;\n- * u4 attribute_length;\n- * u2 number_of_classes;\n- * u2 classes[number_of_classes];\n+ *      u2 attribute_name_index;\n+ *      u4 attribute_length;\n+ *      u2 number_of_classes;\n+ *      u2 classes[number_of_classes];\n@@ -44,4 +44,4 @@\n- * u2 attribute_name_index;\n- * u4 attribute_length;\n- * u2 number_of_classes;\n- * u2 classes[number_of_classes];\n+ *      u2 attribute_name_index;\n+ *      u4 attribute_length;\n+ *      u2 number_of_classes;\n+ *      u2 classes[number_of_classes];\n@@ -65,1 +65,1 @@\n-            this.cells.add(cell);\n+            this.cells.add(classifyConstCell(pool, cell));\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/ArrayAttr.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,0 @@\n-import static org.openjdk.asmtools.jasm.ClassFileConst.ConstType.CONSTANT_UTF8;\n-\n@@ -35,4 +33,4 @@\n- * u2 attribute_name_index;\n- * u4 attribute_length;\n- * u2 number_of_descriptors;\n- * u2 descriptors[number_of_descriptors];\n+ *      u2 attribute_name_index;\n+ *      u4 attribute_length;\n+ *      u2 number_of_descriptors;\n+ *      u2 descriptors[number_of_descriptors];\n@@ -48,1 +46,1 @@\n-        return pool.findCell(CONSTANT_UTF8, cell);\n+        return cell;\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/LoadableDescriptorsAttr.java","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import org.openjdk.asmtools.common.structure.EAttribute;\n@@ -73,1 +72,1 @@\n-            case NEST_HOST, SOURCE_FILE -> {\n+            case SOURCE_FILE -> {\n@@ -78,0 +77,5 @@\n+            case NEST_HOST -> {\n+                attribute_length = 2;\n+                idxStringSupplier = () -> \"#%d;\".formatted(cpx);\n+                namePrinter = () -> println(\"%s;\".formatted(name != null ? name : \"\\\"???\\\"\"));\n+            }\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/AttributeData.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import java.util.function.Consumer;\n@@ -43,0 +44,4 @@\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.matchesPattern;\n+import static org.hamcrest.core.AllOf.allOf;\n+import static org.openjdk.asmtools.lib.utility.StringUtils.funcNormalizeText;\n@@ -54,0 +59,11 @@\n+                Arguments.of(\"Test01.jasm\", EToolArguments.JDIS_G_T, List.of(\n+                                (Consumer<String>) (text) -> assertThat(text, allOf(\n+                                                matchesPattern(\".*const #\\\\d = Utf8 \\\"LLoadableDescriptors01;\\\";.*\"),\n+                                                matchesPattern(\".*const #\\\\d = Utf8 \\\"LLoadableDescriptors02;\\\";.*\"),\n+                                                matchesPattern(\".*LoadableDescriptors #\\\\d, #\\\\d; \/\/ \\\"LLoadableDescriptors01;\\\", \\\"LLoadableDescriptors02;\\\".*\")\n+                                        )\n+                                ),\n+                                (Consumer<String>) (text) ->\n+                                        Assertions.assertEquals(10, funcSubStrCount.apply(text, \"LoadableDescriptors\"))\n+                        )\n+                ),\n@@ -55,3 +71,4 @@\n-                                (Function<String, Boolean>) (text) -> funcSubStrCount.apply(text, \"LoadableDescriptors \") == 1,\n-                                (Function<String, Boolean>) (text) -> funcSubStrCount.apply(text, \"strict\") == 3\n-\n+                                (Consumer<String>) (text) ->\n+                                        Assertions.assertEquals(1, funcSubStrCount.apply(text, \"LoadableDescriptors \")),\n+                                (Consumer<String>) (text) ->\n+                                        Assertions.assertEquals(3, funcSubStrCount.apply(text, \"strict \"))\n@@ -61,3 +78,4 @@\n-                                (Function<String, Boolean>) (text) -> funcSubStrCount.apply(text, \"LoadableDescriptors \") == 1,\n-                                (Function<String, Boolean>) (text) -> funcSubStrCount.apply(text, \"strict\") == 3\n-\n+                                (Consumer<String>) (text) ->\n+                                        Assertions.assertEquals(1, funcSubStrCount.apply(text, \"LoadableDescriptors \")),\n+                                (Consumer<String>) (text) ->\n+                                        Assertions.assertEquals(3, funcSubStrCount.apply(text, \"strict \"))\n@@ -67,2 +85,4 @@\n-                                (Function<String, Boolean>) (text) -> funcSubStrCount.apply(text, \"LoadableDescriptors \") == 1,\n-                                (Function<String, Boolean>) (text) -> funcSubStrCount.apply(text, \"strict\") == 3\n+                                (Consumer<String>) (text) ->\n+                                        Assertions.assertEquals(1, funcSubStrCount.apply(text, \"LoadableDescriptors \")),\n+                                (Consumer<String>) (text) ->\n+                                        Assertions.assertEquals(3, funcSubStrCount.apply(text, \"strict \"))\n@@ -77,2 +97,7 @@\n-                                (Function<String, Boolean>) (text) -> funcSubStrCount.apply(text, \"LoadableDescriptors \") == 1\n-                        )\n+                        (Consumer<String>) (text) -> assertThat(text, allOf(\n+                                        matchesPattern(\".*Attr\\\\(#\\\\d\\\\d, \\\\d\\\\) \\\\{ \/\/ LoadableDescriptors at.*\"),\n+                                        matchesPattern(\".*descriptor: LLoadableDescriptorsAttributeTest\\\\$V3.*\"),\n+                                        matchesPattern(\".*descriptor: LLoadableDescriptorsAttributeTest\\\\$V7.*\"),\n+                                        matchesPattern(\".*descriptor: LLoadableDescriptorsAttributeTest\\\\$V2.*\")\n+                                )\n+                        ))\n@@ -81,1 +106,4 @@\n-                                (Function<String, Boolean>) (text) -> funcSubStrCount.apply(text, \"LoadableDescriptors\") == 26\n+                                (Consumer<String>) (text) -> assertThat(text, allOf(\n+                                        matchesPattern(\".*Attr\\\\(#\\\\d\\\\d\\\\) \\\\{ \/\/ LoadableDescriptors.*\"))),\n+                                (Consumer<String>) (text) ->\n+                                        Assertions.assertEquals(26, funcSubStrCount.apply(text, \"LoadableDescriptors\"))\n@@ -90,1 +118,1 @@\n-                getResource(\"LoadableDescriptorsAttributeTest$X.jasm\")).getFile()).getParentFile();\n+                getResource(\"Test01.jasm\")).getFile()).getParentFile();\n@@ -95,1 +123,1 @@\n-    public void jasmTest(String resourceName, EToolArguments args, List<Function<String, Boolean>> tests) {\n+    public void jasmTest(String resourceName, EToolArguments args, List<Consumer<String>> tests) {\n@@ -97,0 +125,1 @@\n+        \/\/ jasm.setDebug(true);\n@@ -107,2 +136,3 @@\n-        for (Function<String, Boolean> testFunction : tests) {\n-            Assertions.assertTrue(testFunction.apply(jasmText));\n+        String normJasmText = funcNormalizeText.apply(jasmText);\n+        for (Consumer<String> testConsumer : tests) {\n+            testConsumer.accept(normJasmText);\n@@ -113,1 +143,0 @@\n-        Assertions.assertTrue(binResult.log.toString().isEmpty());\n@@ -115,0 +144,1 @@\n+        Assertions.assertTrue(binResult.log.toString().isEmpty());\n@@ -119,2 +149,3 @@\n-        for (Function<String, Boolean> testFunction : tests) {\n-            Assertions.assertTrue(testFunction.apply(jasmText));\n+        normJasmText = funcNormalizeText.apply(jasmText);\n+        for (Consumer<String> testConsumer : tests) {\n+            testConsumer.accept(normJasmText);\n@@ -132,1 +163,1 @@\n-    public void jcoderTest(String resourceName, EToolArguments args, List<Function<String, Boolean>> tests) {\n+    public void jcoderTest(String resourceName, EToolArguments args, List<Consumer<String>> tests) {\n@@ -140,0 +171,1 @@\n+        String jcoderText = textResult.getResultAsString(funcNormalizeText);\n@@ -141,2 +173,2 @@\n-        for (Function<String, Boolean> testFunction : tests) {\n-            Assertions.assertTrue(testFunction.apply(textResult.getResultAsString(Function.identity())));\n+        for (Consumer<String> testConsumer : tests) {\n+            testConsumer.accept(jcoderText);\n","filename":"test\/java\/org\/openjdk\/asmtools\/attribute\/LoadableDescriptors\/LoadableDescriptorsTests.java","additions":53,"deletions":21,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -0,0 +1,182 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.attribute.NestHost;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.openjdk.asmtools.common.inputs.StringInput;\n+import org.openjdk.asmtools.lib.action.*;\n+import org.openjdk.asmtools.lib.log.LogAndBinResults;\n+import org.openjdk.asmtools.lib.log.LogAndTextResults;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.stream.Stream;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.matchesPattern;\n+import static org.hamcrest.core.AllOf.allOf;\n+import static org.openjdk.asmtools.lib.utility.StringUtils.funcNormalizeText;\n+import static org.openjdk.asmtools.lib.utility.StringUtils.funcSubStrCount;\n+\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+public class NestHostTests {\n+\n+    private Jasm jasm = new Jasm();\n+    private Jcoder jcoder = new Jcoder();\n+    private File resourceDir;\n+\n+    private static Stream<Arguments> getJasmParameters() {\n+        return Stream.of(\n+                Arguments.of(\"Test01.jasm\", EToolArguments.JDIS_G, List.of(\n+                                (Consumer<String>) (text) -> assertThat(text, allOf(\n+                                        matchesPattern(\".*const #\\\\d = class #\\\\d; \/\/ NestHost01.*\"),\n+                                        matchesPattern(\".*NestHost #\\\\d; \/\/ org\/openjdk\/asmtools\/attribute\/NestHost\/NestHost01.*\")\n+                                )),\n+                                (Consumer<String>) (text) ->\n+                                        Assertions.assertEquals(11, funcSubStrCount.apply(text, \"NestHost\"))\n+                        )\n+                ),\n+                Arguments.of(\"Test01.jasm\", EToolArguments.JDIS, List.of(\n+                                (Consumer<String>) (text) -> assertThat(text, allOf(\n+                                        matchesPattern(\".*NestHost org\/openjdk\/asmtools\/attribute\/NestHost\/NestHost01;.*\")\n+                                ))\n+                        )\n+                ),\n+                Arguments.of(\"Test01.g.jasm\", EToolArguments.JDIS_G_T, List.of(\n+                                (Consumer<String>) (text) -> assertThat(text, allOf(\n+                                        matchesPattern(\".*const #\\\\d = Class #\\\\d; \/\/ NestHost01.*\"),\n+                                        matchesPattern(\".*NestHost #\\\\d; \/\/ org\/openjdk\/asmtools\/attribute\/NestHost\/NestHost01.*\")\n+                                )),\n+                                (Consumer<String>) (text) ->\n+                                        Assertions.assertEquals(11, funcSubStrCount.apply(text, \"NestHost\"))\n+                        )\n+                ),\n+                Arguments.of(\"Test02.jasm\", EToolArguments.JDIS_G, List.of(\n+                                (Consumer<String>) (text) -> assertThat(text, allOf(\n+                                        matchesPattern(\".*const #\\\\d = class #\\\\d; \/\/ NestHost02.*\"),\n+                                        matchesPattern(\".*NestHost #\\\\d; \/\/ org\/openjdk\/asmtools\/attribute\/NestHost\/NestHost02.*\")\n+                                )),\n+                                (Consumer<String>) (text) ->\n+                                        Assertions.assertEquals(11, funcSubStrCount.apply(text, \"NestHost\"))\n+                        )\n+                ),\n+                Arguments.of(\"Test02.jasm\", EToolArguments.JDIS, List.of(\n+                                (Consumer<String>) (text) -> assertThat(text, allOf(\n+                                        matchesPattern(\".*NestHost org\/openjdk\/asmtools\/attribute\/NestHost\/NestHost02;.*\")\n+                                ))\n+                        )\n+                )\n+        );\n+    }\n+\n+    private static Stream<Arguments> getJcodParameters() {\n+        return Stream.of(\n+                Arguments.of(\"Test01.jcod\", EToolArguments.JDEC_G, List.of(\n+                                (Consumer<String>) (text) -> assertThat(text, allOf(\n+                                        matchesPattern(\".*#\\\\d; \/\/ class: org\/openjdk\/asmtools\/attribute\/NestHost\/NestHost01.*\"),\n+                                        matchesPattern(\".*Attr.#\\\\d, 2. \\\\{ \/\/ NestHost.*\")\n+                                )),\n+                                (Consumer<String>) (text) ->\n+                                        Assertions.assertEquals(11, funcSubStrCount.apply(text, \"NestHost\"))\n+                        )\n+                )\n+        );\n+    }\n+\n+    @BeforeAll\n+    public void init() throws IOException {\n+        resourceDir = new File(Objects.requireNonNull(this.getClass().\n+                getResource(\"Test01.jasm\")).getFile()).getParentFile();\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"getJasmParameters\")\n+    public void jasmTest(String resourceName, EToolArguments args, List<Consumer<String>> tests) {\n+        \/\/ jasm to class in memory\n+        \/\/ jasm.setDebug(true);\n+        LogAndBinResults binResult = jasm.compile(List.of(resourceDir + File.separator + resourceName));\n+        \/\/ class produced correctly\n+        Assertions.assertTrue(binResult.log.toString().isEmpty());\n+        Assertions.assertEquals(0, binResult.result);\n+\n+        \/\/ class to jasm\n+        LogAndTextResults textResult = new Jdis().setArgs(args).decode(binResult.getAsByteInput());\n+\n+        Assertions.assertEquals(0, textResult.result);\n+        String jasmText = textResult.getResultAsString(Function.identity());\n+        String normJasmText = funcNormalizeText.apply(jasmText);\n+        for (Consumer<String> testConsumer : tests) {\n+            testConsumer.accept(normJasmText);\n+        }\n+        \/\/ jasm to class\n+        binResult = jasm.compile(new StringInput(jasmText));\n+        \/\/ class produced correctly\n+        Assertions.assertEquals(0, binResult.result);\n+        Assertions.assertTrue(binResult.log.toString().isEmpty());\n+        \/\/ class to jasm\n+        textResult = new Jdis().setArgs(args).decode(binResult.getAsByteInput());\n+        Assertions.assertEquals(0, textResult.result);\n+        jasmText = textResult.getResultAsString(Function.identity());\n+        normJasmText = funcNormalizeText.apply(jasmText);\n+        for (Consumer<String> testConsumer : tests) {\n+            testConsumer.accept(normJasmText);\n+        }\n+        \/\/ class to jcod\n+        textResult = new Jdec().setArgs(EToolArguments.JDEC_G).decode(binResult.getAsByteInput());\n+        Assertions.assertEquals(0, textResult.result);\n+        \/\/ jcod to class\n+        binResult = jcoder.compile(new StringInput(textResult.getResultAsString(Function.identity())));\n+        Assertions.assertEquals(0, binResult.result);\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"getJcodParameters\")\n+    public void jcoderTest(String resourceName, EToolArguments args, List<Consumer<String>> tests) {\n+        \/\/ jcod to class in memory\n+        LogAndBinResults binResult = jcoder.compile(List.of(resourceDir + File.separator + resourceName));\n+        \/\/ class produced correctly\n+        Assertions.assertEquals(0, binResult.result);\n+        Assertions.assertTrue(binResult.log.toString().isEmpty());\n+        \/\/ class to jcod\n+        LogAndTextResults textResult = new Jdec().setArgs(args).decode(binResult.getAsByteInput());\n+        String jcoderText = textResult.getResultAsString(funcNormalizeText);\n+        Assertions.assertEquals(0, textResult.result);\n+        for (Consumer<String> testConsumer : tests) {\n+            testConsumer.accept(jcoderText);\n+        }\n+        \/\/ class to jasm twice\n+        textResult = new Jdis().setArgs(EToolArguments.JDIS_G_T_LNT_LVT).decode(binResult.getAsByteInput());\n+        Assertions.assertEquals(0, textResult.result);\n+        textResult = new Jdis().setArgs(EToolArguments.JDIS_GG_NC_LNT_LVT).decode(binResult.getAsByteInput());\n+        Assertions.assertEquals(0, textResult.result);\n+    }\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/attribute\/NestHost\/NestHostTests.java","additions":182,"deletions":0,"binary":false,"changes":182,"status":"added"},{"patch":"@@ -0,0 +1,167 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.attribute.NestMembers;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.openjdk.asmtools.common.inputs.StringInput;\n+import org.openjdk.asmtools.lib.action.*;\n+import org.openjdk.asmtools.lib.log.LogAndBinResults;\n+import org.openjdk.asmtools.lib.log.LogAndTextResults;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.stream.Stream;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.matchesPattern;\n+import static org.hamcrest.core.AllOf.allOf;\n+import static org.openjdk.asmtools.lib.utility.StringUtils.funcNormalizeText;\n+import static org.openjdk.asmtools.lib.utility.StringUtils.funcSubStrCount;\n+\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+public class NestMembersTests {\n+\n+    private Jasm jasm = new Jasm();\n+    private Jcoder jcoder = new Jcoder();\n+    private File resourceDir;\n+\n+    private static Stream<Arguments> getJasmParameters() {\n+        return Stream.of(\n+                Arguments.of(\"Test01.jasm\", EToolArguments.JDIS_G_T, List.of(\n+                                (Consumer<String>) (text) -> assertThat(text, allOf(\n+                                        matchesPattern(\".*const #\\\\d = Class #\\\\d; \/\/ NestMember01.*\"),\n+                                        matchesPattern(\".*NestMembers #\\\\d; \/\/ NestMember01.*\")\n+                                )),\n+                                (Consumer<String>) (text) ->\n+                                        Assertions.assertEquals(6, funcSubStrCount.apply(text, \"NestMembers\"))\n+                        )\n+                ),\n+                Arguments.of(\"Test01.g.t.jasm\", EToolArguments.JDIS, List.of(\n+                                (Consumer<String>) (text) -> assertThat(text, allOf(\n+                                        matchesPattern(\".*NestMembers NestMember01.*\")\n+                                )),\n+                                (Consumer<String>) (text) ->\n+                                        Assertions.assertEquals(6, funcSubStrCount.apply(text, \"NestMember\"))\n+                        )\n+                ),\n+                Arguments.of(\"Test02.jasm\", EToolArguments.JDIS_G_T, List.of(\n+                                (Consumer<String>) (text) -> assertThat(text, allOf(\n+                                        matchesPattern(\".*NestMembers #\\\\d\\\\d, \/\/ Test02\\\\$ClassInsideRecord2.*\")\n+                                )),\n+                                (Consumer<String>) (text) ->\n+                                        Assertions.assertEquals(2, funcSubStrCount.apply(text, \"NestMembers\"))\n+                        )\n+                )\n+        );\n+    }\n+\n+    private static Stream<Arguments> getJcodParameters() {\n+        return Stream.of(\n+                Arguments.of(\"Test01.jcod\", EToolArguments.JDEC_G, List.of(\n+                                (Consumer<String>) (text) -> assertThat(text, allOf(\n+                                        matchesPattern(\".*#\\\\d; \/\/ class: org\/openjdk\/asmtools\/attribute\/NestMembers\/Test01\/NestMember01 at.*\"),\n+                                        matchesPattern(\".*Attr.#\\\\d, 4. \\\\{ \/\/ NestMembers.*\")\n+                                )),\n+                                (Consumer<String>) (text) ->\n+                                        Assertions.assertEquals(8, funcSubStrCount.apply(text, \"NestMembers\"))\n+                        )\n+                )\n+        );\n+    }\n+\n+    @BeforeAll\n+    public void init() throws IOException {\n+        resourceDir = new File(Objects.requireNonNull(this.getClass().getResource(\"Test01.jasm\")).getFile()).getParentFile();\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"getJasmParameters\")\n+    public void jasmTest(String resourceName, EToolArguments args, List<Consumer<String>> tests) {\n+        \/\/ jasm to class in memory\n+        \/\/ jasm.setDebug(true);\n+        LogAndBinResults binResult = jasm.compile(List.of(resourceDir + File.separator + resourceName));\n+        \/\/ class produced correctly\n+        Assertions.assertTrue(binResult.log.toString().isEmpty());\n+        Assertions.assertEquals(0, binResult.result);\n+\n+        \/\/ class to jasm\n+        LogAndTextResults textResult = new Jdis().setArgs(args).decode(binResult.getAsByteInput());\n+\n+        Assertions.assertEquals(0, textResult.result);\n+        String jasmText = textResult.getResultAsString(Function.identity());\n+        String normJasmText = funcNormalizeText.apply(jasmText);\n+        for (Consumer<String> testConsumer : tests) {\n+            testConsumer.accept(normJasmText);\n+        }\n+        \/\/ jasm to class\n+        binResult = jasm.compile(new StringInput(jasmText));\n+        \/\/ class produced correctly\n+        Assertions.assertEquals(0, binResult.result);\n+        Assertions.assertTrue(binResult.log.toString().isEmpty());\n+        \/\/ class to jasm\n+        textResult = new Jdis().setArgs(args).decode(binResult.getAsByteInput());\n+        Assertions.assertEquals(0, textResult.result);\n+        jasmText = textResult.getResultAsString(Function.identity());\n+        normJasmText = funcNormalizeText.apply(jasmText);\n+        for (Consumer<String> testConsumer : tests) {\n+            testConsumer.accept(normJasmText);\n+        }\n+        \/\/ class to jcod\n+        textResult = new Jdec().setArgs(EToolArguments.JDEC_G).decode(binResult.getAsByteInput());\n+        Assertions.assertEquals(0, textResult.result);\n+        \/\/ jcod to class\n+        binResult = jcoder.compile(new StringInput(textResult.getResultAsString(Function.identity())));\n+        Assertions.assertEquals(0, binResult.result);\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"getJcodParameters\")\n+    public void jcoderTest(String resourceName, EToolArguments args, List<Consumer<String>> tests) {\n+        \/\/ jcod to class in memory\n+        LogAndBinResults binResult = jcoder.compile(List.of(resourceDir + File.separator + resourceName));\n+        \/\/ class produced correctly\n+        Assertions.assertEquals(0, binResult.result);\n+        Assertions.assertTrue(binResult.log.toString().isEmpty());\n+        \/\/ class to jcod\n+        LogAndTextResults textResult = new Jdec().setArgs(args).decode(binResult.getAsByteInput());\n+        String jcoderText = textResult.getResultAsString(funcNormalizeText);\n+        Assertions.assertEquals(0, textResult.result);\n+        for (Consumer<String> testConsumer : tests) {\n+            testConsumer.accept(jcoderText);\n+        }\n+        \/\/ class to jasm twice\n+        textResult = new Jdis().setArgs(EToolArguments.JDIS_G_T_LNT_LVT).decode(binResult.getAsByteInput());\n+        Assertions.assertEquals(0, textResult.result);\n+        textResult = new Jdis().setArgs(EToolArguments.JDIS_GG_NC_LNT_LVT).decode(binResult.getAsByteInput());\n+        Assertions.assertEquals(0, textResult.result);\n+    }\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/attribute\/NestMembers\/NestMembersTests.java","additions":167,"deletions":0,"binary":false,"changes":167,"status":"added"},{"patch":"@@ -0,0 +1,179 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.attribute.PermittedSubclasses;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.openjdk.asmtools.common.inputs.StringInput;\n+import org.openjdk.asmtools.lib.action.*;\n+import org.openjdk.asmtools.lib.log.LogAndBinResults;\n+import org.openjdk.asmtools.lib.log.LogAndTextResults;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.stream.Stream;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.matchesPattern;\n+import static org.hamcrest.core.AllOf.allOf;\n+import static org.openjdk.asmtools.lib.utility.StringUtils.funcNormalizeText;\n+import static org.openjdk.asmtools.lib.utility.StringUtils.funcSubStrCount;\n+\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+public class PermittedSubclassesTests {\n+\n+    private Jasm jasm = new Jasm();\n+    private Jcoder jcoder = new Jcoder();\n+    private File resourceDir;\n+\n+    private static Stream<Arguments> getJasmParameters() {\n+        return Stream.of(\n+                Arguments.of(\"Test01.jasm\", EToolArguments.JDIS_G_T, List.of(\n+                                (Consumer<String>) (text) -> assertThat(text, allOf(\n+                                        matchesPattern(\".*const #\\\\d\\\\d = Class #\\\\d\\\\d; \/\/ SubClass01.*\"),\n+                                        matchesPattern(\".*const #\\\\d\\\\d = Class #\\\\d\\\\d; \/\/ SubClass02.*\"),\n+                                        matchesPattern(\".*const #\\\\d\\\\d = Class #\\\\d\\\\d; \/\/ SubClass03.*\"),\n+                                        matchesPattern(\".*const #\\\\d\\\\d = Class #\\\\d\\\\d; \/\/ SubClass04.*\"),\n+                                        matchesPattern(\".*const #\\\\d\\\\d = Class #\\\\d\\\\d; \/\/ NestMember01.*\"),\n+                                        matchesPattern(\".*const #\\\\d\\\\d = Class #\\\\d\\\\d; \/\/ NestMember02.*\"),\n+                                        matchesPattern(\".*const #\\\\d\\\\d = Class #\\\\d\\\\d; \/\/ NestMember03.*\"),\n+                                        matchesPattern(\".*const #\\\\d\\\\d = Class #\\\\d\\\\d; \/\/ NestMember04.*\"),\n+                                        matchesPattern(\".*NestMembers #\\\\d\\\\d, \/\/ NestMember0\\\\d.*\"),\n+                                        matchesPattern(\".*PermittedSubclasses #\\\\d\\\\d, \/\/ SubClass0\\\\d.*\")\n+                                )),\n+                                (Consumer<String>) (text) ->\n+                                        Assertions.assertEquals(2, funcSubStrCount.apply(text, \"NestMembers\")),\n+                                (Consumer<String>) (text) ->\n+                                        Assertions.assertEquals(5, funcSubStrCount.apply(text, \"PermittedSubclasses\"))\n+                        )\n+                ),\n+                Arguments.of(\"Test01.g.t.jasm\", EToolArguments.JDIS, List.of(\n+                                (Consumer<String>) (text) -> assertThat(text, allOf(\n+                                        matchesPattern(\".*NestMembers NestMember0\\\\d,.*\"),\n+                                        matchesPattern(\".*PermittedSubclasses SubClass0\\\\d,.*\")\n+                                )),\n+                                (Consumer<String>) (text) ->\n+                                        Assertions.assertEquals(12, funcSubStrCount.apply(text, \"NestMember0\")),\n+                                (Consumer<String>) (text) ->\n+                                        Assertions.assertEquals(4, funcSubStrCount.apply(text, \"SubClass0\"))\n+                        )\n+                ),\n+                Arguments.of(\"Test02.jasm\", EToolArguments.JDIS_G_T, List.of(\n+                                (Consumer<String>) (text) -> assertThat(text, allOf(\n+                                        matchesPattern(\".*PermittedSubclasses #\\\\d\\\\d, \/\/ Test02\\\\$ClassInsideRecord2.*\")\n+                                )),\n+                                (Consumer<String>) (text) ->\n+                                        Assertions.assertEquals(2, funcSubStrCount.apply(text, \"PermittedSubclasses\"))\n+                        )\n+                )\n+        );\n+    }\n+\n+    private static Stream<Arguments> getJcodParameters() {\n+        return Stream.of(\n+                Arguments.of(\"Test01.jcod\", EToolArguments.JDEC_G, List.of(\n+                                (Consumer<String>) (text) -> assertThat(text, allOf(\n+                                        matchesPattern(\".*#\\\\d\\\\d; \/\/ subclass: org\/openjdk\/asmtools\/attribute\/PermittedSubclasses\/atr\/SubClass01 at.*\"),\n+                                        matchesPattern(\".*Attr\\\\(#\\\\d\\\\d, \\\\d\\\\) \\\\{ \/\/ PermittedSubclasses at.*\")\n+                                )),\n+                                (Consumer<String>) (text) ->\n+                                        Assertions.assertEquals(8, funcSubStrCount.apply(text, \"PermittedSubclasses\"))\n+                        )\n+                )\n+        );\n+    }\n+    @BeforeAll\n+    public void init() throws IOException {\n+        resourceDir = new File(Objects.requireNonNull(this.getClass().getResource(\"Test01.jasm\")).getFile()).getParentFile();\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"getJasmParameters\")\n+    public void jasmTest(String resourceName, EToolArguments args, List<Consumer<String>> tests) {\n+        \/\/ jasm to class in memory\n+        \/\/ jasm.setDebug(true);\n+        LogAndBinResults binResult = jasm.compile(List.of(resourceDir + File.separator + resourceName));\n+        \/\/ class produced correctly\n+        Assertions.assertTrue(binResult.log.toString().isEmpty());\n+        Assertions.assertEquals(0, binResult.result);\n+\n+        \/\/ class to jasm\n+        LogAndTextResults textResult = new Jdis().setArgs(args).decode(binResult.getAsByteInput());\n+\n+        Assertions.assertEquals(0, textResult.result);\n+        String jasmText = textResult.getResultAsString(Function.identity());\n+        String normJasmText = funcNormalizeText.apply(jasmText);\n+        for (Consumer<String> testConsumer : tests) {\n+            testConsumer.accept(normJasmText);\n+        }\n+        \/\/ jasm to class\n+        binResult = jasm.compile(new StringInput(jasmText));\n+        \/\/ class produced correctly\n+        Assertions.assertEquals(0, binResult.result);\n+        Assertions.assertTrue(binResult.log.toString().isEmpty());\n+        \/\/ class to jasm\n+        textResult = new Jdis().setArgs(args).decode(binResult.getAsByteInput());\n+        Assertions.assertEquals(0, textResult.result);\n+        jasmText = textResult.getResultAsString(Function.identity());\n+        normJasmText = funcNormalizeText.apply(jasmText);\n+        for (Consumer<String> testConsumer : tests) {\n+            testConsumer.accept(normJasmText);\n+        }\n+        \/\/ class to jcod\n+        textResult = new Jdec().setArgs(EToolArguments.JDEC_G).decode(binResult.getAsByteInput());\n+        Assertions.assertEquals(0, textResult.result);\n+        \/\/ jcod to class\n+        binResult = jcoder.compile(new StringInput(textResult.getResultAsString(Function.identity())));\n+        Assertions.assertEquals(0, binResult.result);\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"getJcodParameters\")\n+    public void jcoderTest(String resourceName, EToolArguments args, List<Consumer<String>> tests) {\n+        \/\/ jcod to class in memory\n+        LogAndBinResults binResult = jcoder.compile(List.of(resourceDir + File.separator + resourceName));\n+        \/\/ class produced correctly\n+        Assertions.assertEquals(0, binResult.result);\n+        Assertions.assertTrue(binResult.log.toString().isEmpty());\n+        \/\/ class to jcod\n+        LogAndTextResults textResult = new Jdec().setArgs(args).decode(binResult.getAsByteInput());\n+        String jcoderText = textResult.getResultAsString(funcNormalizeText);\n+        Assertions.assertEquals(0, textResult.result);\n+        for (Consumer<String> testConsumer : tests) {\n+            testConsumer.accept(jcoderText);\n+        }\n+        \/\/ class to jasm twice\n+        textResult = new Jdis().setArgs(EToolArguments.JDIS_G_T_LNT_LVT).decode(binResult.getAsByteInput());\n+        Assertions.assertEquals(0, textResult.result);\n+        textResult = new Jdis().setArgs(EToolArguments.JDIS_GG_NC_LNT_LVT).decode(binResult.getAsByteInput());\n+        Assertions.assertEquals(0, textResult.result);\n+    }\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/attribute\/PermittedSubclasses\/PermittedSubclassesTests.java","additions":179,"deletions":0,"binary":false,"changes":179,"status":"added"},{"patch":"@@ -0,0 +1,12 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * ORACLE PROPRIETARY\/CONFIDENTIAL. Use is subject to license terms.\n+ *\/\n+package org\/openjdk\/asmtools\/attribute\/LoadableDescriptors;\n+\n+public class Test01 version 55:0\n+{\n+  LoadableDescriptors     \"LLoadableDescriptors01;\", \"LLoadableDescriptors02;\";\n+\n+  InnerClass               public Test01 = class Test01 of class OuterClass;\n+} \/\/ end Class org\/openjdk\/asmtools\/attribute\/NestHost\/Test01\n","filename":"test\/resources\/org\/openjdk\/asmtools\/attribute\/LoadableDescriptors\/Test01.jasm","additions":12,"deletions":0,"binary":false,"changes":12,"status":"added"},{"patch":"@@ -0,0 +1,30 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * ORACLE PROPRIETARY\/CONFIDENTIAL. Use is subject to license terms.\n+ *\/\n+package org\/openjdk\/asmtools\/attribute\/NestHost;\n+\n+public class #2 \/* Test01 *\/ version 55:0\n+{\n+  const #1   = Utf8  \"org\/openjdk\/asmtools\/attribute\/NestHost\/Test01\";\n+  const #2   = Class #1;                  \/\/ Test01\n+  const #3   = Utf8  \"org\/openjdk\/asmtools\/attribute\/NestHost\/NestHost01\";\n+  const #4   = Utf8  \"NestHost\";\n+  const #5   = Class #3;                  \/\/ NestHost01\n+  const #6   = Utf8  \"Test01\";\n+  const #7   = Utf8  \"org\/openjdk\/asmtools\/attribute\/NestHost\/OuterClass\";\n+  const #8   = Class #7;                  \/\/ OuterClass\n+  const #9   = Utf8  \"InnerClasses\";\n+  const #10  = Utf8  \"Test01.jasm\";\n+  const #11  = Utf8  \"SourceFile\";\n+  const #12  = Utf8  \"java\/lang\/Object\";\n+  const #13  = Class #12;                 \/\/ java\/lang\/Object\n+\n+  SourceFile                 #10;         \/\/ Test01.jasm\n+\n+  NestHost                   #5;          \/\/ org\/openjdk\/asmtools\/attribute\/NestHost\/NestHost01\n+\n+  InnerClasses {\n+    public #6 = #2 of #8;                 \/\/ Test01 = class Test01 of class OuterClass\n+  }\n+} \/\/ end Class org\/openjdk\/asmtools\/attribute\/NestHost\/Test01 compiled from \"Test01.jasm\"\n","filename":"test\/resources\/org\/openjdk\/asmtools\/attribute\/NestHost\/Test01.g.jasm","additions":30,"deletions":0,"binary":false,"changes":30,"status":"added"},{"patch":"@@ -0,0 +1,12 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * ORACLE PROPRIETARY\/CONFIDENTIAL. Use is subject to license terms.\n+ *\/\n+package org\/openjdk\/asmtools\/attribute\/NestHost;\n+\n+public class Test01 version 55:0\n+{\n+  NestHost                 \"NestHost01\";\n+\n+  InnerClass               public Test01 = class Test01 of class OuterClass;\n+} \/\/ end Class org\/openjdk\/asmtools\/attribute\/NestHost\/Test01\n","filename":"test\/resources\/org\/openjdk\/asmtools\/attribute\/NestHost\/Test01.jasm","additions":12,"deletions":0,"binary":false,"changes":12,"status":"added"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\/\n+class org\/openjdk\/asmtools\/attribute\/NestHost\/Test01 {\n+  0xCAFEBABE;\n+  0;                                       \/\/ minor version\n+  55;                                      \/\/ version\n+  [14] {                                   \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Utf8 \"org\/openjdk\/asmtools\/attribute\/NestHost\/Test01\";  \/\/ #1     at 0x0A\n+    Class #1;                              \/\/ #2     at 0x36\n+    Utf8 \"org\/openjdk\/asmtools\/attribute\/NestHost\/NestHost01\";  \/\/ #3     at 0x39\n+    Utf8 \"NestHost\";                       \/\/ #4     at 0x69\n+    Class #3;                              \/\/ #5     at 0x74\n+    Utf8 \"Test01\";                         \/\/ #6     at 0x77\n+    Utf8 \"org\/openjdk\/asmtools\/attribute\/NestHost\/OuterClass\";  \/\/ #7     at 0x80\n+    Class #7;                              \/\/ #8     at 0xB0\n+    Utf8 \"InnerClasses\";                   \/\/ #9     at 0xB3\n+    Utf8 \"Test01.jasm\";                    \/\/ #10     at 0xC2\n+    Utf8 \"SourceFile\";                     \/\/ #11     at 0xD0\n+    Utf8 \"java\/lang\/Object\";               \/\/ #12     at 0xDD\n+    Class #12;                             \/\/ #13     at 0xF0\n+  }                                        \/\/ end of Constant Pool\n+\n+  0x0001;                                  \/\/ access [ ACC_PUBLIC ]\n+  #2;                                      \/\/ this_cpx\n+  #13;                                     \/\/ super_cpx\n+\n+  [0] {                                    \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [0] {                                    \/\/ Fields\n+  }                                        \/\/ end of Fields\n+\n+  [0] {                                    \/\/ Methods\n+  }                                        \/\/ end of Methods\n+\n+  [3] {                                    \/\/ Attributes\n+    Attr(#11, 2) {                         \/\/ SourceFile at 0x0101\n+      #10;\n+    }                                      \/\/ end of SourceFile\n+    ;\n+    Attr(#9, 10) {                         \/\/ InnerClasses at 0x0109\n+      [1] {                                \/\/ classes\n+           #2    #8    #6   1;             \/\/ access [ ACC_PUBLIC ]\n+      }\n+    }                                      \/\/ end of InnerClasses\n+    ;\n+    Attr(#4, 2) {                          \/\/ NestHost at 0x0119\n+      #5;                                  \/\/ class: org\/openjdk\/asmtools\/attribute\/NestHost\/NestHost01 at 0x0121\n+    }                                      \/\/ end of NestHost\n+  }                                        \/\/ end of Attributes\n+}                                          \/\/ end of class org\/openjdk\/asmtools\/attribute\/NestHost\/Test01\n","filename":"test\/resources\/org\/openjdk\/asmtools\/attribute\/NestHost\/Test01.jcod","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"},{"patch":"@@ -0,0 +1,14 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * ORACLE PROPRIETARY\/CONFIDENTIAL. Use is subject to license terms.\n+ *\/\n+package org\/openjdk\/asmtools\/attribute\/NestHost;\n+\n+public class Test02 version 55:0\n+{\n+  SourceFile               \"Test02.jasm\";\n+\n+  NestHost                 org\/openjdk\/asmtools\/attribute\/NestHost\/NestHost02;\n+\n+  InnerClass               public Test02 = class Test02 of class OuterClass;\n+} \/\/ end Class org\/openjdk\/asmtools\/attribute\/NestHost\/Test02 compiled from \"Test02.jasm\"\n","filename":"test\/resources\/org\/openjdk\/asmtools\/attribute\/NestHost\/Test02.jasm","additions":14,"deletions":0,"binary":false,"changes":14,"status":"added"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * ORACLE PROPRIETARY\/CONFIDENTIAL. Use is subject to license terms.\n+ *\/\n+ package org\/openjdk\/asmtools\/attribute\/NestMembers\/Test01;\n+\n+public class #2 \/* Test01 *\/ version 55:0\n+{\n+  const #1   = Utf8  \"org\/openjdk\/asmtools\/attribute\/NestMembers\/Test01\/Test01\";\n+  const #2   = Class #1;                  \/\/ Test01\n+  const #3   = Utf8  \"NestMember01\";\n+  const #4   = Utf8  \"org\/openjdk\/asmtools\/attribute\/NestMembers\/Test01\/NestMember01\";\n+  const #5   = Class #4;                  \/\/ NestMember01\n+  const #6   = Utf8  \"InnerClasses\";\n+  const #7   = Utf8  \"NestMembers\";\n+  const #8   = Utf8  \"Test01.jasm\";\n+  const #9   = Utf8  \"SourceFile\";\n+  const #10  = Utf8  \"java\/lang\/Object\";\n+  const #11  = Class #10;                 \/\/ java\/lang\/Object\n+\n+  SourceFile                 #8;          \/\/ Test01.jasm\n+\n+  InnerClasses {\n+    public #3 = #5 of #2;                 \/\/ NestMember01 = class NestMember01 of class Test01\n+  }\n+\n+  NestMembers                #5;          \/\/ NestMember01\n+} \/\/ end Class org\/openjdk\/asmtools\/attribute\/NestMembers\/Test01\/Test01 compiled from \"Test01.jasm\"\n","filename":"test\/resources\/org\/openjdk\/asmtools\/attribute\/NestMembers\/Test01.g.t.jasm","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -0,0 +1,12 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * ORACLE PROPRIETARY\/CONFIDENTIAL. Use is subject to license terms.\n+ *\/\n+package org\/openjdk\/asmtools\/attribute\/NestMembers\/Test01;\n+\n+public class Test01 version 55:0\n+{\n+  InnerClass               public NestMember01 = class NestMember01 of class Test01;\n+\n+  NestMembers              NestMember01;\n+} \/\/ end Class org\/openjdk\/asmtools\/attribute\/NestMembers\/Test01\n","filename":"test\/resources\/org\/openjdk\/asmtools\/attribute\/NestMembers\/Test01.jasm","additions":12,"deletions":0,"binary":false,"changes":12,"status":"added"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * ORACLE PROPRIETARY\/CONFIDENTIAL. Use is subject to license terms.\n+ *\/\n+class org\/openjdk\/asmtools\/attribute\/NestMembers\/Test01 {\n+  0xCAFEBABE;\n+  0;                                       \/\/ minor version\n+  55;                                      \/\/ version\n+  [12] {                                   \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Utf8 \"org\/openjdk\/asmtools\/attribute\/NestMembers\/Test01\";  \/\/ #1     at 0x0A\n+    Class #1;                              \/\/ #2     at 0x3D\n+    Utf8 \"NestMember01\";                   \/\/ #3     at 0x40\n+    Utf8 \"org\/openjdk\/asmtools\/attribute\/NestMembers\/Test01\/NestMember01\";  \/\/ #4     at 0x4F\n+    Class #4;                              \/\/ #5     at 0x88\n+    Utf8 \"InnerClasses\";                   \/\/ #6     at 0x8B\n+    Utf8 \"NestMembers\";                    \/\/ #7     at 0x9A\n+    Utf8 \"Test01.jasm\";                    \/\/ #8     at 0xA8\n+    Utf8 \"SourceFile\";                     \/\/ #9     at 0xB6\n+    Utf8 \"java\/lang\/Object\";               \/\/ #10     at 0xC3\n+    Class #10;                             \/\/ #11     at 0xD6\n+  }                                        \/\/ end of Constant Pool\n+\n+  0x0001;                                  \/\/ access [ ACC_PUBLIC ]\n+  #2;                                      \/\/ this_cpx\n+  #11;                                     \/\/ super_cpx\n+\n+  [0] {                                    \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [0] {                                    \/\/ Fields\n+  }                                        \/\/ end of Fields\n+\n+  [0] {                                    \/\/ Methods\n+  }                                        \/\/ end of Methods\n+\n+  [3] {                                    \/\/ Attributes\n+    Attr(#9, 2) {                          \/\/ SourceFile at 0xE7\n+      #8;\n+    }                                      \/\/ end of SourceFile\n+    ;\n+    Attr(#6, 10) {                         \/\/ InnerClasses at 0xEF\n+      [1] {                                \/\/ classes\n+           #5    #2    #3   1;             \/\/ access [ ACC_PUBLIC ]\n+      }\n+    }                                      \/\/ end of InnerClasses\n+    ;\n+    Attr(#7, 4) {                          \/\/ NestMembers at 0xFF\n+      [1] {                                \/\/ classes\n+        #5;                                \/\/ class: org\/openjdk\/asmtools\/attribute\/NestMembers\/Test01\/NestMember01 at 0x0109\n+      }\n+    }                                      \/\/ end of NestMembers\n+  }                                        \/\/ end of Attributes\n+}                                          \/\/ end of class org\/openjdk\/asmtools\/attribute\/NestMembers\/Test01\n","filename":"test\/resources\/org\/openjdk\/asmtools\/attribute\/NestMembers\/Test01.jcod","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * ORACLE PROPRIETARY\/CONFIDENTIAL. Use is subject to license terms.\n+ *\/\n+package javasoft\/sqe\/tests\/api\/java\/lang\/reflect\/RecordComponent;\n+\n+public final super class Test02 extends java\/lang\/Record version 69:0\n+{\n+  private final Field cir:\"Ljavasoft\/sqe\/tests\/api\/java\/lang\/reflect\/RecordComponent\/Test02$ClassInsideRecord;\";\n+\n+  public Method \"<init>\":\"(Ljavasoft\/sqe\/tests\/api\/java\/lang\/reflect\/RecordComponent\/Test02$ClassInsideRecord;)V\"\n+    stack 2  locals 2\n+  {\n+         aload_0;\n+         invokespecial     Method java\/lang\/Record.\"<init>\":\"()V\";\n+         aload_0;\n+         aload_1;\n+         putfield          Field cir:\"Ljavasoft\/sqe\/tests\/api\/java\/lang\/reflect\/RecordComponent\/Test02$ClassInsideRecord;\";\n+         return;\n+  }\n+\n+  public final Method toString:\"()Ljava\/lang\/String;\"\n+    stack 1  locals 1\n+  {\n+         aload_0;\n+         invokedynamic     InvokeDynamic REF_invokeStatic:Method java\/lang\/runtime\/ObjectMethods.bootstrap:\n+                           \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/TypeDescriptor;Ljava\/lang\/Class;Ljava\/lang\/String;[Ljava\/lang\/invoke\/MethodHandle;)Ljava\/lang\/Object;\":\n+                           toString:\"(Ljavasoft\/sqe\/tests\/api\/java\/lang\/reflect\/RecordComponent\/Test02;)Ljava\/lang\/String;\" {\n+                             class Test02,\n+                             String \"cir\",\n+                             MethodHandle REF_getField:Test02.cir:\"Ljavasoft\/sqe\/tests\/api\/java\/lang\/reflect\/RecordComponent\/Test02$ClassInsideRecord;\"\n+                           };\n+         areturn;\n+  }\n+\n+  public final Method hashCode:\"()I\"\n+    stack 1  locals 1\n+  {\n+         aload_0;\n+         invokedynamic     InvokeDynamic REF_invokeStatic:Method java\/lang\/runtime\/ObjectMethods.bootstrap:\n+                           \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/TypeDescriptor;Ljava\/lang\/Class;Ljava\/lang\/String;[Ljava\/lang\/invoke\/MethodHandle;)Ljava\/lang\/Object;\":\n+                           hashCode:\"(Ljavasoft\/sqe\/tests\/api\/java\/lang\/reflect\/RecordComponent\/Test02;)I\" {\n+                             class Test02,\n+                             String \"cir\",\n+                             MethodHandle REF_getField:Test02.cir:\"Ljavasoft\/sqe\/tests\/api\/java\/lang\/reflect\/RecordComponent\/Test02$ClassInsideRecord;\"\n+                           };\n+         ireturn;\n+  }\n+\n+  public final Method equals:\"(Ljava\/lang\/Object;)Z\"\n+    stack 2  locals 2\n+  {\n+         aload_0;\n+         aload_1;\n+         invokedynamic     InvokeDynamic REF_invokeStatic:Method java\/lang\/runtime\/ObjectMethods.bootstrap:\n+                           \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/TypeDescriptor;Ljava\/lang\/Class;Ljava\/lang\/String;[Ljava\/lang\/invoke\/MethodHandle;)Ljava\/lang\/Object;\":\n+                           equals:\"(Ljavasoft\/sqe\/tests\/api\/java\/lang\/reflect\/RecordComponent\/Test02;Ljava\/lang\/Object;)Z\" {\n+                             class Test02,\n+                             String \"cir\",\n+                             MethodHandle REF_getField:Test02.cir:\"Ljavasoft\/sqe\/tests\/api\/java\/lang\/reflect\/RecordComponent\/Test02$ClassInsideRecord;\"\n+                           };\n+         ireturn;\n+  }\n+\n+  public Method cir:\"()Ljavasoft\/sqe\/tests\/api\/java\/lang\/reflect\/RecordComponent\/Test02$ClassInsideRecord;\"\n+    stack 1  locals 1\n+  {\n+         aload_0;\n+         getfield          Field cir:\"Ljavasoft\/sqe\/tests\/api\/java\/lang\/reflect\/RecordComponent\/Test02$ClassInsideRecord;\";\n+         areturn;\n+  }\n+\n+  SourceFile               \"Test02.java\";\n+\n+  Record {\n+    Component              cir:\"Ljavasoft\/sqe\/tests\/api\/java\/lang\/reflect\/RecordComponent\/Test02$ClassInsideRecord;\";\n+  }\n+\n+  InnerClass               ClassInsideRecord = class Test02$ClassInsideRecord of class Test02;\n+  InnerClass               static ClassInsideRecord2 = class Test02$ClassInsideRecord2 of class Test02;\n+  InnerClass               static final InnerRecord = class Test02$InnerRecord of class Test02;\n+  InnerClass               static abstract InnerInteface = class Test02$ClassInsideRecord2$InnerInteface of class Test02$ClassInsideRecord2;\n+  InnerClass               static final InnerInnerRecord = class Test02$InnerRecord$InnerInnerRecord of class Test02$InnerRecord;\n+  InnerClass               public static final Lookup = class java\/lang\/invoke\/MethodHandles$Lookup of class java\/lang\/invoke\/MethodHandles;\n+\n+  NestMembers              Test02$ClassInsideRecord2,\n+                           Test02$ClassInsideRecord2$InnerInteface,\n+                           Test02$ClassInsideRecord,\n+                           Test02$InnerRecord,\n+                           Test02$InnerRecord$InnerInnerRecord;\n+\n+  BootstrapMethod          REF_invokeStatic:java\/lang\/runtime\/ObjectMethods.bootstrap:\n+                           \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/TypeDescriptor;Ljava\/lang\/Class;Ljava\/lang\/String;[Ljava\/lang\/invoke\/MethodHandle;)Ljava\/lang\/Object;\";\n+                           {\n+                             class Test02,\n+                             String \"cir\",\n+                             MethodHandle REF_getField:Test02.cir:\"Ljavasoft\/sqe\/tests\/api\/java\/lang\/reflect\/RecordComponent\/Test02$ClassInsideRecord;\"\n+                           }\n+} \/\/ end Class javasoft\/sqe\/tests\/api\/java\/lang\/reflect\/RecordComponent\/Test02 compiled from \"Test02.java\"\n","filename":"test\/resources\/org\/openjdk\/asmtools\/attribute\/NestMembers\/Test02.jasm","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * ORACLE PROPRIETARY\/CONFIDENTIAL. Use is subject to license terms.\n+ *\/\n+package org\/openjdk\/asmtools\/attribute\/PermittedSubclasses;\n+\n+public super class #3 \/* Test01 *\/ version 62:0\n+{\n+  const #1   = Methodref   #9.#10;              \/\/ java\/lang\/Object.\"<init>\":\"()V\"\n+  const #2   = Utf8        \"org\/openjdk\/asmtools\/attribute\/PermittedSubclasses\/Test01\";\n+  const #3   = Class       #2;                  \/\/ Test01\n+  const #4   = Utf8        \"<init>\";\n+  const #5   = Utf8        \"()V\";\n+  const #6   = Utf8        \"Code\";\n+  const #7   = Utf8        \"LineNumberTable\";\n+  const #8   = Utf8        \"java\/lang\/Object\";\n+  const #9   = Class       #8;                  \/\/ java\/lang\/Object\n+  const #10  = NameAndType #4:#5;               \/\/ \"<init>\":\"()V\"\n+  const #11  = Utf8        \"NestMember01\";\n+  const #12  = Class       #11;                 \/\/ NestMember01\n+  const #13  = Utf8        \"Test01\";\n+  const #14  = Class       #13;                 \/\/ Test01\n+  const #15  = Utf8        \"InnerClasses\";\n+  const #16  = Utf8        \"NestMember02\";\n+  const #17  = Class       #16;                 \/\/ NestMember02\n+  const #18  = Utf8        \"NestMember03\";\n+  const #19  = Class       #18;                 \/\/ NestMember03\n+  const #20  = Utf8        \"NestMember04\";\n+  const #21  = Class       #20;                 \/\/ NestMember04\n+  const #22  = Utf8        \"SubClass01\";\n+  const #23  = Utf8        \"SubClass02\";\n+  const #24  = Utf8        \"SubClass03\";\n+  const #25  = Utf8        \"SubClass04\";\n+  const #26  = Utf8        \"PermittedSubclasses\";\n+  const #27  = Class       #22;                 \/\/ SubClass01\n+  const #28  = Class       #23;                 \/\/ SubClass02\n+  const #29  = Class       #24;                 \/\/ SubClass03\n+  const #30  = Class       #25;                 \/\/ SubClass04\n+  const #31  = Utf8        \"NestMembers\";\n+  const #32  = Utf8        \"Test01.jasm\";\n+  const #33  = Utf8        \"SourceFile\";\n+\n+  public Method #4:#5                           \/\/ \"<init>\":\"()V\"\n+    stack 1  locals 1\n+  {\n+     0:    aload_0;\n+     1:    invokespecial     #1;                \/\/ Method java\/lang\/Object.\"<init>\":\"()V\"\n+     4:    return;\n+  }\n+\n+  SourceFile                 #32;               \/\/ Test01.jasm\n+\n+  InnerClasses {\n+    public #11 = #12 of #14;                    \/\/ NestMember01 = class NestMember01 of class Test01\n+    public #16 = #17 of #14;                    \/\/ NestMember02 = class NestMember02 of class Test01\n+    public #18 = #19 of #14;                    \/\/ NestMember03 = class NestMember03 of class Test01\n+    public #20 = #21 of #14;                    \/\/ NestMember04 = class NestMember04 of class Test01\n+  }\n+\n+  NestMembers                #12,               \/\/ NestMember01\n+                             #17,               \/\/ NestMember02\n+                             #19,               \/\/ NestMember03\n+                             #21;               \/\/ NestMember04\n+\n+  PermittedSubclasses        #27,               \/\/ SubClass01\n+                             #28,               \/\/ SubClass02\n+                             #29,               \/\/ SubClass03\n+                             #30;               \/\/ SubClass04\n+} \/\/ end Class org\/openjdk\/asmtools\/attribute\/PermittedSubclasses\/Test01 compiled from \"Test01.jasm\"\n","filename":"test\/resources\/org\/openjdk\/asmtools\/attribute\/PermittedSubclasses\/Test01.g.t.jasm","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -0,0 +1,24 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * ORACLE PROPRIETARY\/CONFIDENTIAL. Use is subject to license terms.\n+ *\/\n+super public class org\/openjdk\/asmtools\/attribute\/PermittedSubclasses\/Test01\n+        version 62:0\n+{\n+  public Method \"<init>\":\"()V\"\n+        stack 1 locals 1\n+  {\n+                aload_0;\n+                invokespecial   Method java\/lang\/Object.\"<init>\":\"()V\";\n+                return;\n+  }\n+\n+  InnerClass               public NestMember01 = class NestMember01 of class Test01;\n+  InnerClass               public NestMember02 = class NestMember02 of class Test01;\n+  InnerClass               public NestMember03 = class NestMember03 of class Test01;\n+  InnerClass               public NestMember04 = class NestMember04 of class Test01;\n+\n+  PermittedSubclasses      SubClass01, SubClass02, SubClass03, SubClass04;\n+\n+  NestMembers              NestMember01, NestMember02, NestMember03, NestMember04;\n+} \/\/ end Class Test01\n","filename":"test\/resources\/org\/openjdk\/asmtools\/attribute\/PermittedSubclasses\/Test01.jasm","additions":24,"deletions":0,"binary":false,"changes":24,"status":"added"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * ORACLE PROPRIETARY\/CONFIDENTIAL. Use is subject to license terms.\n+ *\/\n+class org\/openjdk\/asmtools\/attribute\/PermittedSubclasses\/Test01 {\n+  0xCAFEBABE;\n+  0;                                       \/\/ minor version\n+  62;                                      \/\/ version\n+  [15] {                                   \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Method #8 #9;                          \/\/ #1     at 0x0A\n+    Utf8 \"org\/openjdk\/asmtools\/attribute\/PermittedSubclasses\/Test01\";  \/\/ #2     at 0x0F\n+    Class #2;                              \/\/ #3     at 0x37\n+    Utf8 \"<init>\";                         \/\/ #4     at 0x3A\n+    Utf8 \"()V\";                            \/\/ #5     at 0x43\n+    Utf8 \"Code\";                           \/\/ #6     at 0x49\n+    Utf8 \"java\/lang\/Object\";               \/\/ #7     at 0x50\n+    Class #7;                              \/\/ #8     at 0x63\n+    NameAndType #4 #5;                     \/\/ #9     at 0x66\n+    Utf8 \"org\/openjdk\/asmtools\/attribute\/PermittedSubclasses\/atr\/SubClass01\";  \/\/ #10     at 0x6B\n+    Utf8 \"PermittedSubclasses\";            \/\/ #11     at 0x9B\n+    Class #10;                             \/\/ #12     at 0xB1\n+    Utf8 \"Test01.jasm\";                    \/\/ #13     at 0xB4\n+    Utf8 \"SourceFile\";                     \/\/ #14     at 0xC2\n+  }                                        \/\/ end of Constant Pool\n+\n+  0x0021;                                  \/\/ access [ ACC_PUBLIC, ACC_SUPER ]\n+  #3;                                      \/\/ this_cpx\n+  #8;                                      \/\/ super_cpx\n+\n+  [0] {                                    \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [0] {                                    \/\/ Fields\n+  }                                        \/\/ end of Fields\n+\n+  [1] {                                    \/\/ Methods\n+    {                                      \/\/ method at 0xDB\n+      0x0001;                              \/\/ access\n+      #4;                                  \/\/ name_index       : <init>\n+      #5;                                  \/\/ descriptor_index : ()V\n+      [1] {                                \/\/ Attributes\n+        Attr(#6, 17) {                     \/\/ Code at 0xE3\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[5]{\n+            0x2A 0xB7 0x00 0x01 0xB1;\n+          }\n+          [0] {                            \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [0] {                            \/\/ Attributes\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [2] {                                    \/\/ Attributes\n+    Attr(#14, 2) {                         \/\/ SourceFile at 0xFC\n+      #13;\n+    }                                      \/\/ end of SourceFile\n+    ;\n+    Attr(#11, 4) {                         \/\/ PermittedSubclasses at 0x0104\n+      [1] {                                \/\/ subclasses\n+        #12;                               \/\/ subclass: org\/openjdk\/asmtools\/attribute\/PermittedSubclasses\/atr\/SubClass01 at 0x010E\n+      }\n+    }                                      \/\/ end of PermittedSubclasses\n+  }                                        \/\/ end of Attributes\n+}                                          \/\/ end of class org\/openjdk\/asmtools\/attribute\/PermittedSubclasses\/Test01\n","filename":"test\/resources\/org\/openjdk\/asmtools\/attribute\/PermittedSubclasses\/Test01.jcod","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * ORACLE PROPRIETARY\/CONFIDENTIAL. Use is subject to license terms.\n+ *\/\n+package javasoft\/sqe\/tests\/api\/java\/lang\/reflect\/RecordComponent02;\n+\n+public final super class Test02 extends java\/lang\/Record version 69:0\n+{\n+  private final Field cir:\"Ljavasoft\/sqe\/tests\/api\/java\/lang\/reflect\/RecordComponent02\/Test02$ClassInsideRecord;\";\n+\n+  public Method \"<init>\":\"(Ljavasoft\/sqe\/tests\/api\/java\/lang\/reflect\/RecordComponent02\/Test02$ClassInsideRecord;)V\"\n+    stack 2  locals 2\n+  {\n+         aload_0;\n+         invokespecial     Method java\/lang\/Record.\"<init>\":\"()V\";\n+         aload_0;\n+         aload_1;\n+         putfield          Field cir:\"Ljavasoft\/sqe\/tests\/api\/java\/lang\/reflect\/RecordComponent02\/Test02$ClassInsideRecord;\";\n+         return;\n+  }\n+\n+  public final Method toString:\"()Ljava\/lang\/String;\"\n+    stack 1  locals 1\n+  {\n+         aload_0;\n+         invokedynamic     InvokeDynamic REF_invokeStatic:Method java\/lang\/runtime\/ObjectMethods.bootstrap:\n+                           \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/TypeDescriptor;Ljava\/lang\/Class;Ljava\/lang\/String;[Ljava\/lang\/invoke\/MethodHandle;)Ljava\/lang\/Object;\":\n+                           toString:\"(Ljavasoft\/sqe\/tests\/api\/java\/lang\/reflect\/RecordComponent02\/Test02;)Ljava\/lang\/String;\" {\n+                             class Test02,\n+                             String \"cir\",\n+                             MethodHandle REF_getField:Test02.cir:\"Ljavasoft\/sqe\/tests\/api\/java\/lang\/reflect\/RecordComponent02\/Test02$ClassInsideRecord;\"\n+                           };\n+         areturn;\n+  }\n+\n+  public final Method hashCode:\"()I\"\n+    stack 1  locals 1\n+  {\n+         aload_0;\n+         invokedynamic     InvokeDynamic REF_invokeStatic:Method java\/lang\/runtime\/ObjectMethods.bootstrap:\n+                           \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/TypeDescriptor;Ljava\/lang\/Class;Ljava\/lang\/String;[Ljava\/lang\/invoke\/MethodHandle;)Ljava\/lang\/Object;\":\n+                           hashCode:\"(Ljavasoft\/sqe\/tests\/api\/java\/lang\/reflect\/RecordComponent02\/Test02;)I\" {\n+                             class Test02,\n+                             String \"cir\",\n+                             MethodHandle REF_getField:Test02.cir:\"Ljavasoft\/sqe\/tests\/api\/java\/lang\/reflect\/RecordComponent02\/Test02$ClassInsideRecord;\"\n+                           };\n+         ireturn;\n+  }\n+\n+  public final Method equals:\"(Ljava\/lang\/Object;)Z\"\n+    stack 2  locals 2\n+  {\n+         aload_0;\n+         aload_1;\n+         invokedynamic     InvokeDynamic REF_invokeStatic:Method java\/lang\/runtime\/ObjectMethods.bootstrap:\n+                           \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/TypeDescriptor;Ljava\/lang\/Class;Ljava\/lang\/String;[Ljava\/lang\/invoke\/MethodHandle;)Ljava\/lang\/Object;\":\n+                           equals:\"(Ljavasoft\/sqe\/tests\/api\/java\/lang\/reflect\/RecordComponent02\/Test02;Ljava\/lang\/Object;)Z\" {\n+                             class Test02,\n+                             String \"cir\",\n+                             MethodHandle REF_getField:Test02.cir:\"Ljavasoft\/sqe\/tests\/api\/java\/lang\/reflect\/RecordComponent02\/Test02$ClassInsideRecord;\"\n+                           };\n+         ireturn;\n+  }\n+\n+  public Method cir:\"()Ljavasoft\/sqe\/tests\/api\/java\/lang\/reflect\/RecordComponent02\/Test02$ClassInsideRecord;\"\n+    stack 1  locals 1\n+  {\n+         aload_0;\n+         getfield          Field cir:\"Ljavasoft\/sqe\/tests\/api\/java\/lang\/reflect\/RecordComponent02\/Test02$ClassInsideRecord;\";\n+         areturn;\n+  }\n+\n+  SourceFile               \"Test02.java\";\n+\n+  Record {\n+    Component              cir:\"Ljavasoft\/sqe\/tests\/api\/java\/lang\/reflect\/RecordComponent02\/Test02$ClassInsideRecord;\";\n+  }\n+\n+  InnerClass               ClassInsideRecord = class Test02$ClassInsideRecord of class Test02;\n+  InnerClass               static ClassInsideRecord2 = class Test02$ClassInsideRecord2 of class Test02;\n+  InnerClass               static final InnerRecord = class Test02$InnerRecord of class Test02;\n+  InnerClass               static abstract InnerInteface = class Test02$ClassInsideRecord2$InnerInteface of class Test02$ClassInsideRecord2;\n+  InnerClass               static final InnerInnerRecord = class Test02$InnerRecord$InnerInnerRecord of class Test02$InnerRecord;\n+  InnerClass               public static final Lookup = class java\/lang\/invoke\/MethodHandles$Lookup of class java\/lang\/invoke\/MethodHandles;\n+\n+  PermittedSubclasses      Test02$ClassInsideRecord2,\n+                           Test02$ClassInsideRecord2$InnerInteface,\n+                           Test02$ClassInsideRecord,\n+                           Test02$InnerRecord,\n+                           Test02$InnerRecord$InnerInnerRecord;\n+\n+  BootstrapMethod          REF_invokeStatic:java\/lang\/runtime\/ObjectMethods.bootstrap:\n+                           \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/TypeDescriptor;Ljava\/lang\/Class;Ljava\/lang\/String;[Ljava\/lang\/invoke\/MethodHandle;)Ljava\/lang\/Object;\";\n+                           {\n+                             class Test02,\n+                             String \"cir\",\n+                             MethodHandle REF_getField:Test02.cir:\"Ljavasoft\/sqe\/tests\/api\/java\/lang\/reflect\/RecordComponent02\/Test02$ClassInsideRecord;\"\n+                           }\n+} \/\/ end Class javasoft\/sqe\/tests\/api\/java\/lang\/reflect\/RecordComponent02\/Test02 compiled from \"Test02.java\"\n","filename":"test\/resources\/org\/openjdk\/asmtools\/attribute\/PermittedSubclasses\/Test02.jasm","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"}]}