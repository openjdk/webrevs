{"files":[{"patch":"@@ -100,1 +100,1 @@\n-                    setPrintDetails();\n+                    setPrintDetails(true);\n@@ -140,2 +140,2 @@\n-    public void setPrintDetails() {\n-        environment.setPrintDetailsFlag(true);\n+    public void setPrintDetails(boolean value) {\n+        environment.setPrintDetailsFlag(value);\n","filename":"src\/org\/openjdk\/asmtools\/jdec\/Main.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3,0 +3,2 @@\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n@@ -22,0 +24,5 @@\n+    @AfterAll\n+    public static void unsetDetailedOutputOptions() {\n+        Options.unsetDetailedOutputOptions();\n+    }\n+\n@@ -33,1 +40,3 @@\n-            jdec.setPrintDetails();\n+            jdec.setPrintDetails(true);\n+        } else {\n+            jdec.setPrintDetails(false);\n@@ -65,0 +74,2 @@\n+        } else {\n+            Options.unsetDetailedOutputOptions();\n","filename":"test\/java\/org\/openjdk\/asmtools\/InputOutputTests.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -101,2 +101,2 @@\n-                assertAll(() -> sequenceCompiler.reflectionJasm(jasmFiles),\n-                        () -> sequenceCompiler.reflectionJcoder(jcodFiles));\n+                assertAll(() -> sequenceCompiler.jasm(jasmFiles),\n+                        () -> sequenceCompiler.jcoder(jcodFiles));\n@@ -104,2 +104,2 @@\n-                assertAll(() -> sequenceCompiler.reflectionJcoder(jcodFiles),\n-                        () -> sequenceCompiler.reflectionJasm(jasmFiles));\n+                assertAll(() -> sequenceCompiler.jcoder(jcodFiles),\n+                        () -> sequenceCompiler.jasm(jasmFiles));\n","filename":"test\/java\/org\/openjdk\/asmtools\/SequenceCallsTests.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-        Assertions.assertTrue(str.contains(jasmSubString), format(\"%s not found in %s%n\", jasmSubString, str));\n+        Assertions.assertTrue(str.contains(jasmSubString), format(\"'%s' not found in '%s'%n\", jasmSubString, str));\n","filename":"test\/java\/org\/openjdk\/asmtools\/jasm\/case7903558\/Tests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n-import org.openjdk.asmtools.common.outputs.ToolOutput;\n-import org.openjdk.asmtools.common.outputs.log.DualStreamToolOutput;\n@@ -32,0 +30,1 @@\n+import org.openjdk.asmtools.jdis.Options;\n@@ -37,3 +36,0 @@\n-import java.io.PrintStream;\n-import java.lang.reflect.Constructor;\n-import java.lang.reflect.Method;\n@@ -52,0 +48,1 @@\n+    private final boolean detailedOutputOptions;\n@@ -54,0 +51,3 @@\n+        this(false);\n+    }\n+    public GenerateAction(boolean detailedOutputOptions) throws IOException {\n@@ -56,0 +56,1 @@\n+        this.detailedOutputOptions = detailedOutputOptions;\n@@ -66,8 +67,0 @@\n-    public void reflectionJdis(List<String> files) {\n-        reflectionAction(\"jdis\", files);\n-    }\n-\n-    public void reflectionJdec(List<String> files) {\n-        reflectionAction(\"jdec\", files);\n-    }\n-\n@@ -106,33 +99,0 @@\n-    \/**\n-     * Moderator method based on reflection API to call tools\n-     *\/\n-    private void reflectionAction(String toolName, List<String> files) {\n-        if (files.isEmpty())\n-            fail(toolName + \": no files\");\n-        List<String> args = toolArgs.stream().collect(Collectors.toList());\n-        args.add(\"-d\");\n-        args.add(destDir.getPath());\n-        args.addAll(files);\n-        try {\n-            String toolClassName = \"org.openjdk.asmtools.\" + toolName + \".Main\";\n-            Class<?> toolClass = Class.forName(toolClassName);\n-            Constructor<?> constr = toolClass.getConstructor(PrintStream.class, String.class);\n-            PrintStream ps = new PrintStream(System.out);\n-            Object tool = constr.newInstance(ps, toolName);\n-            Method m = toolClass.getMethod(\"compile\", String[].class);\n-            Object r = m.invoke(tool, new Object[]{args.toArray(new String[0])});\n-            if (r instanceof Boolean) {\n-                boolean ok = (Boolean) r;\n-                if (!ok) {\n-                    fail(toolName + \" failed\");\n-                }\n-                System.out.println(toolName + \" OK\");\n-            } else\n-                fail(\"unexpected result from \" + toolName + \": \" + r.toString());\n-        } catch (ClassNotFoundException e) {\n-            fail(\"can't find \" + toolName);\n-        } catch (ReflectiveOperationException t) {\n-            fail(\"error invoking \" + toolName + \": \" + t);\n-        }\n-    }\n-\n@@ -155,0 +115,1 @@\n+            setDetailedOutputOptions();\n@@ -159,0 +120,1 @@\n+            setDetailedOutputOptions();\n@@ -180,0 +142,1 @@\n+            setDetailedOutputOptions();\n@@ -183,0 +146,1 @@\n+            setDetailedOutputOptions();\n@@ -206,0 +170,1 @@\n+            setDetailedOutputOptions();\n@@ -210,0 +175,1 @@\n+            setDetailedOutputOptions();\n@@ -231,0 +197,1 @@\n+            setDetailedOutputOptions();\n@@ -235,0 +202,1 @@\n+            setDetailedOutputOptions();\n@@ -263,0 +231,9 @@\n+\n+    private void setDetailedOutputOptions() {\n+        if (detailedOutputOptions) {\n+            Options.setDetailedOutputOptions();\n+        } else {\n+            Options.unsetDetailedOutputOptions();\n+        }\n+    }\n+\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/action\/GenerateAction.java","additions":23,"deletions":46,"binary":false,"changes":69,"status":"modified"}]}