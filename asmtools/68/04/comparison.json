{"files":[{"patch":"@@ -28,0 +28,18 @@\n+        <resources>\n+            <resource>\n+                <directory>src\/main\/resources<\/directory>\n+                <!-- Enable filtering as workaround for symlink issue: https:\/\/issues.apache.org\/jira\/browse\/MRESOURCES-237 -->\n+                <filtering>true<\/filtering>\n+                <includes>\n+                    <include>**\/*<\/include>\n+                <\/includes>\n+            <\/resource>\n+            <resource>\n+                <directory>src\/test\/resources<\/directory>\n+                <!-- Enable filtering as workaround for symlink issue: https:\/\/issues.apache.org\/jira\/browse\/MRESOURCES-237 -->\n+                <filtering>true<\/filtering>\n+                <includes>\n+                    <include>**\/*<\/include>\n+                <\/includes>\n+            <\/resource>\n+        <\/resources>\n@@ -29,0 +47,11 @@\n+            <plugin>\n+                <artifactId>maven-resources-plugin<\/artifactId>\n+                <version>3.3.1<\/version>\n+                <configuration>\n+                    <nonFilteredFileExtensions>\n+                        <nonFilteredFileExtension>class<\/nonFilteredFileExtension>\n+                        <nonFilteredFileExtension>propertieses<\/nonFilteredFileExtension>\n+                    <\/nonFilteredFileExtensions>\n+                    <propertiesEncoding>UTF-8<\/propertiesEncoding>\n+                <\/configuration>\n+            <\/plugin>\n","filename":"maven\/pom.xml.in","additions":29,"deletions":0,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-                    setPrintDetails();\n+                    setPrintDetails(true);\n@@ -140,2 +140,2 @@\n-    public void setPrintDetails() {\n-        environment.setPrintDetailsFlag(true);\n+    public void setPrintDetails(boolean value) {\n+        environment.setPrintDetailsFlag(value);\n","filename":"src\/org\/openjdk\/asmtools\/jdec\/Main.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3,0 +3,2 @@\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n@@ -22,0 +24,5 @@\n+    @AfterAll\n+    public static void unsetDetailedOutputOptions() {\n+        Options.unsetDetailedOutputOptions();\n+    }\n+\n@@ -33,1 +40,3 @@\n-            jdec.setPrintDetails();\n+            jdec.setPrintDetails(true);\n+        } else {\n+            jdec.setPrintDetails(false);\n@@ -65,0 +74,2 @@\n+        } else {\n+            Options.unsetDetailedOutputOptions();\n","filename":"test\/java\/org\/openjdk\/asmtools\/InputOutputTests.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import org.junit.jupiter.api.Assertions;\n@@ -30,1 +31,0 @@\n-import org.openjdk.asmtools.ext.CaptureSystemOutput;\n@@ -45,2 +45,0 @@\n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.*;\n@@ -49,2 +47,0 @@\n-import static org.openjdk.asmtools.ext.CaptureSystemOutput.Kind.BOTH;\n-import static org.openjdk.asmtools.ext.CaptureSystemOutput.Kind.OUTPUT;\n@@ -56,1 +52,2 @@\n-    private List<Error> errors = Collections.synchronizedList(new ArrayList<>());\n+    private final List<Error> errors = Collections.synchronizedList(new ArrayList<>());\n+    private final List<Integer> results = Collections.synchronizedList(new ArrayList<>());\n@@ -101,2 +98,9 @@\n-                assertAll(() -> sequenceCompiler.reflectionJasm(jasmFiles),\n-                        () -> sequenceCompiler.reflectionJcoder(jcodFiles));\n+                assertAll(() -> {\n+                            var l = sequenceCompiler.jasm(jasmFiles);\n+                            results.add(l.result);\n+                        },\n+                        () -> {\n+                            var l = sequenceCompiler.jcoder(jcodFiles);\n+                            results.add(l.result);\n+                        }\n+                );\n@@ -104,2 +108,9 @@\n-                assertAll(() -> sequenceCompiler.reflectionJcoder(jcodFiles),\n-                        () -> sequenceCompiler.reflectionJasm(jasmFiles));\n+                assertAll(() -> {\n+                            var l = sequenceCompiler.jcoder(jcodFiles);\n+                            results.add(l.result);\n+                        },\n+                        () -> {\n+                            var l = sequenceCompiler.jasm(jasmFiles);\n+                            results.add(l.result);\n+                        }\n+                );\n@@ -142,2 +153,1 @@\n-    @CaptureSystemOutput(value = BOTH, mute = true)\n-    public void testCompilersWithConcurrency(CaptureSystemOutput.OutputCapture outputCapture) throws InterruptedException {\n+    public void testCompilersWithConcurrency() throws InterruptedException {\n@@ -161,10 +171,10 @@\n-        List<String> list = outputCapture.getLogAsList(OUTPUT);\n-        assertThat(list, allOf(\n-                hasItem(matchesPattern(\"jcoder OK\")),\n-                hasItem(matchesPattern(\"jasm OK\")))\n-        );\n-        assertThat(list, hasSize(6));\n-        \/\/ check ERROR's results\n-        assertEquals(6,\n-                errors.stream().mapToInt(e -> ((MultipleFailuresError) e).getFailures().size()).sum(),\n-                \"Expected 4 missing plus 2 wrong format files.\");\n+        \/\/\"Expected 4 missing plus 2 wrong format files.\");\n+        assertEquals(12, results.size());\n+        Collections.sort(results);\n+        assertEquals(results.get(0), 0);\n+        assertEquals(results.get(5), 0);\n+        assertEquals(results.get(6), 1);\n+        assertEquals(results.get(8), 1);\n+        assertEquals(results.get(9), 2);\n+        assertEquals(results.get(10), 2);\n+        assertEquals(results.get(11), 8);\n","filename":"test\/java\/org\/openjdk\/asmtools\/SequenceCallsTests.java","additions":32,"deletions":22,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-        Assertions.assertTrue(str.contains(jasmSubString), format(\"%s not found in %s%n\", jasmSubString, str));\n+        Assertions.assertTrue(str.contains(jasmSubString), format(\"'%s' not found in '%s'%n\", jasmSubString, str));\n","filename":"test\/java\/org\/openjdk\/asmtools\/jasm\/case7903558\/Tests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n-import org.openjdk.asmtools.common.outputs.ToolOutput;\n-import org.openjdk.asmtools.common.outputs.log.DualStreamToolOutput;\n@@ -32,0 +30,1 @@\n+import org.openjdk.asmtools.jdis.Options;\n@@ -37,3 +36,0 @@\n-import java.io.PrintStream;\n-import java.lang.reflect.Constructor;\n-import java.lang.reflect.Method;\n@@ -52,0 +48,1 @@\n+    private final boolean detailedOutputOptions;\n@@ -54,0 +51,3 @@\n+        this(false);\n+    }\n+    public GenerateAction(boolean detailedOutputOptions) throws IOException {\n@@ -56,0 +56,1 @@\n+        this.detailedOutputOptions = detailedOutputOptions;\n@@ -66,8 +67,0 @@\n-    public void reflectionJdis(List<String> files) {\n-        reflectionAction(\"jdis\", files);\n-    }\n-\n-    public void reflectionJdec(List<String> files) {\n-        reflectionAction(\"jdec\", files);\n-    }\n-\n@@ -106,33 +99,0 @@\n-    \/**\n-     * Moderator method based on reflection API to call tools\n-     *\/\n-    private void reflectionAction(String toolName, List<String> files) {\n-        if (files.isEmpty())\n-            fail(toolName + \": no files\");\n-        List<String> args = toolArgs.stream().collect(Collectors.toList());\n-        args.add(\"-d\");\n-        args.add(destDir.getPath());\n-        args.addAll(files);\n-        try {\n-            String toolClassName = \"org.openjdk.asmtools.\" + toolName + \".Main\";\n-            Class<?> toolClass = Class.forName(toolClassName);\n-            Constructor<?> constr = toolClass.getConstructor(PrintStream.class, String.class);\n-            PrintStream ps = new PrintStream(System.out);\n-            Object tool = constr.newInstance(ps, toolName);\n-            Method m = toolClass.getMethod(\"compile\", String[].class);\n-            Object r = m.invoke(tool, new Object[]{args.toArray(new String[0])});\n-            if (r instanceof Boolean) {\n-                boolean ok = (Boolean) r;\n-                if (!ok) {\n-                    fail(toolName + \" failed\");\n-                }\n-                System.out.println(toolName + \" OK\");\n-            } else\n-                fail(\"unexpected result from \" + toolName + \": \" + r.toString());\n-        } catch (ClassNotFoundException e) {\n-            fail(\"can't find \" + toolName);\n-        } catch (ReflectiveOperationException t) {\n-            fail(\"error invoking \" + toolName + \": \" + t);\n-        }\n-    }\n-\n@@ -155,0 +115,1 @@\n+            setDetailedOutputOptions();\n@@ -159,0 +120,1 @@\n+            setDetailedOutputOptions();\n@@ -180,0 +142,1 @@\n+            setDetailedOutputOptions();\n@@ -183,0 +146,1 @@\n+            setDetailedOutputOptions();\n@@ -206,0 +170,1 @@\n+            setDetailedOutputOptions();\n@@ -210,0 +175,1 @@\n+            setDetailedOutputOptions();\n@@ -231,0 +197,1 @@\n+            setDetailedOutputOptions();\n@@ -235,0 +202,1 @@\n+            setDetailedOutputOptions();\n@@ -263,0 +231,9 @@\n+\n+    private void setDetailedOutputOptions() {\n+        if (detailedOutputOptions) {\n+            Options.setDetailedOutputOptions();\n+        } else {\n+            Options.unsetDetailedOutputOptions();\n+        }\n+    }\n+\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/action\/GenerateAction.java","additions":23,"deletions":46,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -34,0 +34,2 @@\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n@@ -46,1 +48,4 @@\n-    List<String> files = List.of(\"jasm\", \"jcoder\", \"jdec\", \"jdis\");\n+    List<String> assemblers = List.of(\"jasm\", \"jcoder\");\n+    List<String> disassemblers = List.of(\"jdec\", \"jdis\");\n+    List<String> files = Stream.concat(assemblers.stream(), disassemblers.stream()).collect(Collectors.toList());\n+\n@@ -52,1 +57,1 @@\n-                \"case7903259\" + File.separator + files.get(0)).\n+                \"case7903259\" + File.separator + assemblers.get(0)).\n@@ -63,1 +68,1 @@\n-                LogAndReturn ret = tool.call(List.of(resourceDir + File.separator + fileName));\n+                LogAndReturn ret = tool.call(List.of(resourceDir + File.separator + appendBin(fileName)));\n@@ -71,0 +76,8 @@\n+\n+    private String appendBin(String fileName) {\n+        if (disassemblers.contains(fileName)) {\n+            return fileName+\".class\";\n+        } else {\n+            return fileName;\n+        }\n+    }\n","filename":"test\/java\/org\/openjdk\/asmtools\/transform\/case7903259Tests.java","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"},{"patch":"","filename":"test\/resources\/org\/openjdk\/asmtools\/transform\/case7903259\/jdec.class","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/resources\/org\/openjdk\/asmtools\/transform\/case7903259\/jdec","status":"renamed"},{"patch":"","filename":"test\/resources\/org\/openjdk\/asmtools\/transform\/case7903259\/jdis.class","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/resources\/org\/openjdk\/asmtools\/transform\/case7903259\/jdis","status":"renamed"}]}