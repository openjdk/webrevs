{"files":[{"patch":"@@ -30,1 +30,1 @@\n-PRODUCT_BUILDNUMBER =10\n+PRODUCT_BUILDNUMBER =11\n","filename":"build\/productinfo.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import org.openjdk.asmtools.common.structure.EAttribute;\n@@ -44,0 +45,1 @@\n+    protected Hashtable<Integer, EAttribute> attributes = new Hashtable<>();\n@@ -113,0 +115,3 @@\n+        \/\/ Index of the constant pool entry, used for identity of the Attribute\n+        private int cpIndex = 0;\n+\n@@ -122,0 +127,4 @@\n+        boolean isAttribute() {\n+            return !stack.empty() && (stack.peek().tag == ContextTag.ATTRIBUTE);\n+        }\n+\n@@ -128,0 +137,1 @@\n+            cpIndex = 0;\n@@ -197,0 +207,8 @@\n+\n+        public void setConstantPoolIndex(int cpx) {\n+            cpIndex = cpx;\n+        }\n+\n+        public int getConstantPoolIndex() {\n+            return cpIndex;\n+        }\n@@ -358,0 +376,1 @@\n+            context.setConstantPoolIndex(cpx);\n@@ -489,1 +508,7 @@\n-                        parseUTF();\n+                        String name = parseUTF();\n+                        if (context.isConstantPool()) {\n+                            EAttribute attr = EAttribute.get(name);\n+                            if (attr != EAttribute.ATT_Unrecognized) {\n+                                attributes.put(num, attr);\n+                            }\n+                        }\n@@ -550,1 +575,1 @@\n-    private void parseUTF() throws IOException {\n+    private String parseUTF() throws IOException {\n@@ -579,3 +604,2 @@\n-                    if( context.isConstantPool() )\n-                        outStream.writeUTF(sb.toString());\n-                    else\n+                    if (context.isAttribute() &&\n+                            attributes.get(context.getConstantPoolIndex()) == EAttribute.ATT_SourceDebugExtension) {\n@@ -583,1 +607,4 @@\n-                    return;\n+                    } else {\n+                        outStream.writeUTF(sb.toString());\n+                    }\n+                    return sb.toString();\n","filename":"src\/org\/openjdk\/asmtools\/jcoder\/Jcoder.java","additions":33,"deletions":6,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -110,1 +110,4 @@\n-                            var l = jasm.apply(jasmFiles);\n+                            LogAndBinResults l = jasm.apply(jasmFiles);\n+\/\/                            if( l.result != 0) {\n+\/\/                                System.out.println(\"%d] Jasm failed with result: %s\".formatted(index, l.log.toString() ));\n+\/\/                            }\n@@ -114,1 +117,4 @@\n-                            var l = jcoder.apply(jcodFiles);\n+                            LogAndBinResults l = jcoder.apply(jcodFiles);\n+\/\/                            if( l.result != 0) {\n+\/\/                                System.out.println(\"%d] Jcoder failed with result: %s\".formatted(index, l.log.toString() ));\n+\/\/                            }\n@@ -120,1 +126,4 @@\n-                            var l = jcoder.apply(jcodFiles);\n+                            LogAndBinResults l = jcoder.apply(jcodFiles);\n+\/\/                            if( l.result != 0) {\n+\/\/                                System.out.println(\"%d] Jcoder failed with result: %s\".formatted(index, l.log.toString() ));\n+\/\/                            }\n@@ -124,1 +133,4 @@\n-                            var l = jasm.apply(jasmFiles);\n+                            LogAndBinResults l = jasm.apply(jasmFiles);\n+\/\/                            if( l.result != 0) {\n+\/\/                                System.out.println(\"%d] Jasm failed with result: %s\".formatted(index, l.log.toString() ));\n+\/\/                            }\n@@ -219,0 +231,4 @@\n+        assertEquals(0, intResults.get(1));\n+        assertEquals(0, intResults.get(2));\n+        assertEquals(0, intResults.get(3));\n+        assertEquals(0, intResults.get(4));\n@@ -221,0 +237,1 @@\n+        assertEquals(1, intResults.get(7));\n","filename":"test\/java\/org\/openjdk\/asmtools\/common\/SequenceCallsTests.java","additions":21,"deletions":4,"binary":false,"changes":25,"status":"modified"}]}