{"files":[{"patch":"@@ -40,0 +40,16 @@\n+#if PLATFORM(JAVA)\n+\/* Ref: Webkit 619.1 javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/ImageSource.cpp refactoring in 620.1\n+ *\n+ * In the case of the canvas pattern using a transform property filled with an SVGMatrix()\n+ * created by an SVG element, `frame.m_nativeImage->size()` calls `NativeImage::size()`\n+ * from NativeImageJava.cpp.\n+ *\n+ * In this scenario, `*m_platformImage->getImage().get()` may be invalid,\n+ * as the image decoder has already populated `frame.m_size` during image metadata caching.\n+ *\n+ * To avoid potential invalid accesses and unintended size resets, only update `m_size`\n+ * if the frame does not already have a valid native image.\n+ *\/\n+    if (!hasNativeImage() && m_nativeImage)\n+        m_size = m_nativeImage->size();\n+#else\n@@ -41,0 +57,1 @@\n+#endif\n@@ -42,0 +59,1 @@\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/ImageFrame.cpp","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n-import org.junit.jupiter.api.Disabled;\n@@ -124,1 +123,0 @@\n-    @Disabled(\"JDK-8347937\")\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/javafx\/scene\/web\/CanvasTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}