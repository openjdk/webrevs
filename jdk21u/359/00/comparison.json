{"files":[{"patch":"@@ -189,0 +189,8 @@\n+  \/\/ In case a concurrent thread disarmed the nmethod, we need to ensure the new instructions\n+  \/\/ are made visible, by using a cross modify fence. Note that this is synchronous cross modifying\n+  \/\/ code, where the existence of new instructions is communicated via data (the guard value).\n+  \/\/ This cross modify fence is only needed when the nmethod entry barrier modifies the\n+  \/\/ instructions. Not all platforms currently do that, so if this check becomes expensive,\n+  \/\/ it can be made conditional on the nmethod_patching_type.\n+  OrderAccess::cross_modify_fence();\n+\n@@ -217,0 +225,1 @@\n+  bool result = nmethod_entry_barrier(nm);\n@@ -218,1 +227,1 @@\n-  return nmethod_entry_barrier(nm);\n+  return result;\n","filename":"src\/hotspot\/share\/gc\/shared\/barrierSetNMethod.cpp","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"}]}