{"files":[{"patch":"@@ -33,0 +33,4 @@\n+\/\/ This class allows us to parse system hugepage config from\n+\/\/ - a) the Operating System (the truth)\n+\/\/ - b) the JVM log (-Xlog:pagesize)\n+\/\/ This is used e.g. in TestHugePageDetection to determine if the JVM detects the correct settings from the OS.\n@@ -35,2 +39,4 @@\n-    Set<Long> _staticHugePageSizes;\n-    long _staticDefaultHugePageSize;\n+    public static class StaticHugePageConfig implements Comparable<StaticHugePageConfig> {\n+        public long pageSize = -1;\n+        public long nr_hugepages = -1;\n+        public long nr_overcommit_hugepages = -1;\n@@ -38,1 +44,24 @@\n-    enum THPMode {always, never, madvise, unknown}\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(pageSize);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"StaticHugePageConfig{\" +\n+                    \"pageSize=\" + pageSize +\n+                    \", nr_hugepages=\" + nr_hugepages +\n+                    \", nr_overcommit_hugepages=\" + nr_overcommit_hugepages +\n+                    '}';\n+        }\n+\n+        @Override\n+        public int compareTo(StaticHugePageConfig o) {\n+            return (int) (pageSize - o.pageSize);\n+        }\n+    }\n+\n+    Set<StaticHugePageConfig> _staticHugePageConfigurations;\n+    long _staticDefaultHugePageSize = -1;\n+\n+    enum THPMode {always, never, madvise}\n@@ -42,2 +71,2 @@\n-    public Set<Long> getStaticHugePageSizes() {\n-        return _staticHugePageSizes;\n+    public Set<StaticHugePageConfig> getStaticHugePageConfigurations() {\n+        return _staticHugePageConfigurations;\n@@ -58,2 +87,12 @@\n-    public HugePageConfiguration(Set<Long> _staticHugePageSizes, long _staticDefaultHugePageSize, THPMode _thpMode, long _thpPageSize) {\n-        this._staticHugePageSizes = _staticHugePageSizes;\n+    \/\/ Returns true if the THP support is enabled\n+    public boolean supportsTHP() {\n+        return _thpMode == THPMode.always || _thpMode == THPMode.madvise;\n+    }\n+\n+    \/\/ Returns true if static huge pages are supported (whether or not we have configured the pools)\n+    public boolean supportsStaticHugePages() {\n+        return _staticDefaultHugePageSize > 0 && _staticHugePageConfigurations.size() > 0;\n+    }\n+\n+    public HugePageConfiguration(Set<StaticHugePageConfig> _staticHugePageConfigurations, long _staticDefaultHugePageSize, THPMode _thpMode, long _thpPageSize) {\n+        this._staticHugePageConfigurations = _staticHugePageConfigurations;\n@@ -68,1 +107,1 @@\n-                \"_staticHugePageSizes=\" + _staticHugePageSizes +\n+                \"_staticHugePageConfigurations=\" + _staticHugePageConfigurations +\n@@ -80,6 +119,2 @@\n-        return _staticDefaultHugePageSize == that._staticDefaultHugePageSize && _thpPageSize == that._thpPageSize && Objects.equals(_staticHugePageSizes, that._staticHugePageSizes) && _thpMode == that._thpMode;\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return Objects.hash(_staticHugePageSizes, _staticDefaultHugePageSize, _thpMode, _thpPageSize);\n+        return _staticDefaultHugePageSize == that._staticDefaultHugePageSize && _thpPageSize == that._thpPageSize &&\n+                Objects.equals(_staticHugePageConfigurations, that._staticHugePageConfigurations) && _thpMode == that._thpMode;\n@@ -105,2 +140,2 @@\n-    private static Set<Long> readSupportedHugePagesFromOS() {\n-        TreeSet<Long> pagesizes = new TreeSet<>();\n+    private static Set<StaticHugePageConfig> readSupportedHugePagesFromOS() throws IOException {\n+        TreeSet<StaticHugePageConfig> hugePageConfigs = new TreeSet<>();\n@@ -110,2 +145,2 @@\n-            for (File f : subdirs) {\n-                String name = f.getName();\n+            for (File subdir : subdirs) {\n+                String name = subdir.getName();\n@@ -114,2 +149,13 @@\n-                    long pagesize = Long.parseLong(mat.group(1)) * 1024;\n-                    pagesizes.add(pagesize);\n+                    StaticHugePageConfig config = new StaticHugePageConfig();\n+                    config.pageSize = Long.parseLong(mat.group(1)) * 1024;\n+                    try (FileReader fr = new FileReader(subdir.getAbsolutePath() + \"\/nr_hugepages\");\n+                         BufferedReader reader = new BufferedReader(fr)) {\n+                        String s = reader.readLine();\n+                        config.nr_hugepages = Long.parseLong(s);\n+                    }\n+                    try (FileReader fr = new FileReader(subdir.getAbsolutePath() + \"\/nr_overcommit_hugepages\");\n+                         BufferedReader reader = new BufferedReader(fr)) {\n+                        String s = reader.readLine();\n+                        config.nr_overcommit_hugepages = Long.parseLong(s);\n+                    }\n+                    hugePageConfigs.add(config);\n@@ -119,1 +165,1 @@\n-        return pagesizes;\n+        return hugePageConfigs;\n@@ -123,1 +169,1 @@\n-        THPMode mode = THPMode.unknown;\n+        THPMode mode = THPMode.never;\n@@ -139,1 +185,2 @@\n-            mode = THPMode.unknown;\n+            \/\/ Happens when the kernel is not built to support THPs.\n+            mode = THPMode.never;\n@@ -151,1 +198,1 @@\n-        } catch (IOException | NumberFormatException e) { \/* ignored *\/ }\n+        } catch (IOException | NumberFormatException e) { } \/\/ ignored\n@@ -156,1 +203,1 @@\n-    public static HugePageConfiguration readFromOS() {\n+    public static HugePageConfiguration readFromOS() throws IOException {\n@@ -163,1 +210,1 @@\n-    private static long parseSIUnit(String num, String unit) {\n+    public static long parseSIUnit(String num, String unit) {\n@@ -183,1 +230,1 @@\n-        TreeSet<Long> hugepages = new TreeSet<>();\n+        TreeSet<StaticHugePageConfig> staticHugePageConfigs = new TreeSet<>();\n@@ -195,1 +242,3 @@\n-                hugepages.add(parseSIUnit(mat.group(1), mat.group(2)));\n+                StaticHugePageConfig config = new StaticHugePageConfig();\n+                config.pageSize = parseSIUnit(mat.group(1), mat.group(2));\n+                staticHugePageConfigs.add(config);\n@@ -218,1 +267,1 @@\n-        return new HugePageConfiguration(hugepages, defaultHugepageSize, thpMode, thpPageSize);\n+        return new HugePageConfiguration(staticHugePageConfigs, defaultHugepageSize, thpMode, thpPageSize);\n","filename":"test\/hotspot\/jtreg\/runtime\/os\/HugePageConfiguration.java","additions":78,"deletions":29,"binary":false,"changes":107,"status":"modified"},{"patch":"@@ -0,0 +1,157 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Red Hat Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test id=Default\n+ * @summary Test JVM large page setup (default options)\n+ * @library \/test\/lib\n+ * @requires os.family == \"linux\"\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @run driver TestHugePageDecisionsAtVMStartup\n+ *\/\n+\n+\/*\n+ * @test id=LP_enabled\n+ * @summary Test JVM large page setup (+LP)\n+ * @library \/test\/lib\n+ * @requires os.family == \"linux\"\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @run driver TestHugePageDecisionsAtVMStartup -XX:+UseLargePages\n+ *\/\n+\n+\/*\n+ * @test id=THP_enabled\n+ * @summary Test JVM large page setup (+THP)\n+ * @library \/test\/lib\n+ * @requires os.family == \"linux\"\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @run driver TestHugePageDecisionsAtVMStartup -XX:+UseTransparentHugePages\n+ *\/\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class TestHugePageDecisionsAtVMStartup {\n+\n+    \/\/ End user warnings, printing with Xlog:pagesize at warning level, should be unconditional\n+    static final String warningNoTHP = \"[warning][pagesize] UseTransparentHugePages disabled, transparent huge pages are not supported by the operating system.\";\n+    static final String warningNoLP = \"[warning][pagesize] UseLargePages disabled, no large pages configured and available on the system.\";\n+\n+    static final String buildSizeString(long l) {\n+        String units[] = { \"K\", \"M\", \"G\" };\n+        long factor = 1024 * 1024 * 1024;\n+        for (int i = 2; i >= 0; i--) {\n+            if (l >= factor) {\n+                return Long.toString(l \/ factor) + units[i];\n+            }\n+            factor \/= 1024;\n+        }\n+        return Long.toString(l) + \"B\";\n+    }\n+\n+    static void testOutput(boolean useLP, boolean useTHP, OutputAnalyzer out, HugePageConfiguration configuration) {\n+\n+        \/\/ Note: If something goes wrong, the JVM warns but continues, so we should never see an exit value != 0\n+        out.shouldHaveExitValue(0);\n+\n+        \/\/ Static hugepages:\n+        \/\/ Let X = the default hugepage size of the system (the one in \/proc\/meminfo).\n+        \/\/ The JVM will cycle through page sizes, starting at X, down to the smallest hugepage size.\n+        \/\/\n+        \/\/ Example 1: a system with 1GB and 2MB pages, the default hugepage size is 1GB (can only be done\n+        \/\/ via kernel parameter). the JVM should first attempt to use 1GB pages, failing that should try 2MB, failing\n+        \/\/ that give up and disable -UseLargePages.\n+        \/\/\n+        \/\/ Example 1: same system, but the default hugepage size is 2MB. The JVM should not attempt to use 1GB pages.\n+        \/\/\n+        \/\/ This picture gets more complex with -XX:LargePageSizeInBytes, which overrides the default\n+        \/\/ large page size; but we ignore this for now (feel free to extend the test to cover LBSiB too).\n+\n+        boolean haveUsableStaticHugePages = false;\n+        if (configuration.supportsStaticHugePages()) {\n+            long defaultLargePageSize = configuration.getStaticDefaultHugePageSize();\n+            Set<HugePageConfiguration.StaticHugePageConfig> configs = configuration.getStaticHugePageConfigurations();\n+            for (HugePageConfiguration.StaticHugePageConfig config: configs) {\n+                if (config.pageSize <= defaultLargePageSize) {\n+                    if (config.nr_hugepages > 0 || config.nr_overcommit_hugepages > 0) {\n+                        haveUsableStaticHugePages = true; break;\n+                    }\n+                }\n+            }\n+        }\n+\n+        if (useTHP && !useLP) {\n+            useLP = true; \/\/ its implicit\n+        }\n+\n+        if (!useLP) {\n+            out.shouldContain(\"[info][pagesize] Large page support disabled\");\n+        } else if (useLP && !useTHP &&\n+                 (!configuration.supportsStaticHugePages() || !haveUsableStaticHugePages)) {\n+            out.shouldContain(warningNoLP);\n+        } else if (useLP && useTHP && !configuration.supportsTHP()) {\n+            out.shouldContain(warningNoTHP);\n+        } else if (useLP && !useTHP &&\n+                 configuration.supportsStaticHugePages() && haveUsableStaticHugePages) {\n+            out.shouldContain(\"[info][pagesize] Using the default large page size: \" + buildSizeString(configuration.getStaticDefaultHugePageSize()));\n+            out.shouldContain(\"[info][pagesize] UseLargePages=1, UseTransparentHugePages=0\");\n+            out.shouldContain(\"[info][pagesize] Large page support enabled\");\n+        } else if (useLP && useTHP && configuration.supportsTHP()) {\n+            String thpPageSizeString = buildSizeString(configuration.getThpPageSize());\n+            \/\/ We expect to see exactly two \"Usable page sizes\" :  the system page size and the THP page size. The system\n+            \/\/ page size differs, but its always in KB).\n+            out.shouldContain(\"[info][pagesize] UseLargePages=1, UseTransparentHugePages=1\");\n+            out.shouldMatch(\".*\\\\[info]\\\\[pagesize] Large page support enabled. Usable page sizes: \\\\d+[kK], \" + thpPageSizeString + \". Default large page size: \" + thpPageSizeString + \".*\");\n+        }\n+    }\n+\n+    public static void main(String[] extraOptions) throws Exception {\n+        List<String> allOptions = new ArrayList<String>();\n+        if (extraOptions != null) {\n+            allOptions.addAll(Arrays.asList(extraOptions));\n+        }\n+        allOptions.add(\"-Xmx128m\");\n+        allOptions.add(\"-Xlog:pagesize\");\n+        allOptions.add(\"-version\");\n+\n+        boolean useLP = allOptions.contains(\"-XX:+UseLargePages\");\n+        boolean useTHP = allOptions.contains(\"-XX:+UseTransparentHugePages\");\n+        System.out.println(\"useLP: \" + useLP + \" useTHP: \" + useTHP);\n+\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(allOptions.toArray(new String[0]));\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        output.reportDiagnosticSummary();\n+        HugePageConfiguration configuration = HugePageConfiguration.readFromOS();\n+        System.out.println(\"configuration read from OS:\" + configuration);\n+\n+        testOutput(useLP, useTHP, output, configuration);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/os\/TestHugePageDecisionsAtVMStartup.java","additions":157,"deletions":0,"binary":false,"changes":157,"status":"added"}]}