{"files":[{"patch":"@@ -215,2 +215,2 @@\n-                                              size_t word_size,\n-                                              uint node_index) {\n+                                              uint node_index,\n+                                              size_t word_size) {\n@@ -218,1 +218,1 @@\n-  HeapWord* result = par_allocate_during_gc(dest, word_size, word_size, &temp, node_index);\n+  HeapWord* result = par_allocate_during_gc(dest, node_index, word_size, word_size, &temp);\n@@ -226,0 +226,1 @@\n+                                              uint node_index,\n@@ -228,2 +229,1 @@\n-                                              size_t* actual_word_size,\n-                                              uint node_index) {\n+                                              size_t* actual_word_size) {\n@@ -232,1 +232,1 @@\n-      return survivor_attempt_allocation(min_word_size, desired_word_size, actual_word_size, node_index);\n+      return survivor_attempt_allocation(node_index, min_word_size, desired_word_size, actual_word_size);\n@@ -241,1 +241,2 @@\n-HeapWord* G1Allocator::survivor_attempt_allocation(size_t min_word_size,\n+HeapWord* G1Allocator::survivor_attempt_allocation(uint node_index,\n+                                                   size_t min_word_size,\n@@ -243,2 +244,1 @@\n-                                                   size_t* actual_word_size,\n-                                                   uint node_index) {\n+                                                   size_t* actual_word_size) {\n@@ -399,0 +399,1 @@\n+                                                       node_index,\n@@ -401,2 +402,1 @@\n-                                                       &actual_plab_size,\n-                                                       node_index);\n+                                                       &actual_plab_size);\n@@ -421,1 +421,1 @@\n-  HeapWord* result = _allocator->par_allocate_during_gc(dest, word_sz, node_index);\n+  HeapWord* result = _allocator->par_allocate_during_gc(dest, node_index, word_sz);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Allocator.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -81,1 +81,2 @@\n-  HeapWord* survivor_attempt_allocation(size_t min_word_size,\n+  HeapWord* survivor_attempt_allocation(uint node_index,\n+                                        size_t min_word_size,\n@@ -83,2 +84,1 @@\n-                                        size_t* actual_word_size,\n-                                        uint node_index);\n+                                        size_t* actual_word_size);\n@@ -91,3 +91,0 @@\n-  \/\/ Node index of current thread.\n-  inline uint current_node_index() const;\n-\n@@ -113,0 +110,3 @@\n+  \/\/ Node index of current thread.\n+  inline uint current_node_index() const;\n+\n@@ -116,1 +116,2 @@\n-  inline HeapWord* attempt_allocation(size_t min_word_size,\n+  inline HeapWord* attempt_allocation(uint node_index,\n+                                      size_t min_word_size,\n@@ -122,1 +123,1 @@\n-  inline HeapWord* attempt_allocation_locked(size_t word_size);\n+  inline HeapWord* attempt_allocation_locked(uint node_index, size_t word_size);\n@@ -124,1 +125,1 @@\n-  inline HeapWord* attempt_allocation_force(size_t word_size);\n+  inline HeapWord* attempt_allocation_force(uint node_index, size_t word_size);\n@@ -134,2 +135,3 @@\n-                                   size_t word_size,\n-                                   uint node_index);\n+                                   uint node_index,\n+                                   size_t word_size\n+                                   );\n@@ -138,0 +140,1 @@\n+                                   uint node_index,\n@@ -140,2 +143,1 @@\n-                                   size_t* actual_word_size,\n-                                   uint node_index);\n+                                   size_t* actual_word_size);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Allocator.hpp","additions":15,"deletions":13,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -52,1 +52,2 @@\n-inline HeapWord* G1Allocator::attempt_allocation(size_t min_word_size,\n+inline HeapWord* G1Allocator::attempt_allocation(uint node_index,\n+                                                 size_t min_word_size,\n@@ -55,2 +56,0 @@\n-  uint node_index = current_node_index();\n-\n@@ -65,2 +64,1 @@\n-inline HeapWord* G1Allocator::attempt_allocation_locked(size_t word_size) {\n-  uint node_index = current_node_index();\n+inline HeapWord* G1Allocator::attempt_allocation_locked(uint node_index, size_t word_size) {\n@@ -74,2 +72,1 @@\n-inline HeapWord* G1Allocator::attempt_allocation_force(size_t word_size) {\n-  uint node_index = current_node_index();\n+inline HeapWord* G1Allocator::attempt_allocation_force(uint node_index, size_t word_size) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Allocator.inline.hpp","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -404,1 +404,1 @@\n-HeapWord* G1CollectedHeap::attempt_allocation_slow(size_t word_size) {\n+HeapWord* G1CollectedHeap::attempt_allocation_slow(uint node_index, size_t word_size) {\n@@ -430,1 +430,1 @@\n-      result = _allocator->attempt_allocation_locked(word_size);\n+      result = _allocator->attempt_allocation_locked(node_index, word_size);\n@@ -441,1 +441,1 @@\n-        result = _allocator->attempt_allocation_force(word_size);\n+        result = _allocator->attempt_allocation_force(node_index, word_size);\n@@ -498,1 +498,1 @@\n-    result = _allocator->attempt_allocation(word_size, word_size, &dummy);\n+    result = _allocator->attempt_allocation(node_index, word_size, word_size, &dummy);\n@@ -639,1 +639,4 @@\n-  HeapWord* result = _allocator->attempt_allocation(min_word_size, desired_word_size, actual_word_size);\n+  \/\/ Fix NUMA node association for the duration of this allocation\n+  const uint node_index = _allocator->current_node_index();\n+\n+  HeapWord* result = _allocator->attempt_allocation(node_index, min_word_size, desired_word_size, actual_word_size);\n@@ -643,1 +646,1 @@\n-    result = attempt_allocation_slow(desired_word_size);\n+    result = attempt_allocation_slow(node_index, desired_word_size);\n@@ -781,0 +784,3 @@\n+  \/\/ Fix NUMA node association for the duration of this allocation\n+  const uint node_index = _allocator->current_node_index();\n+\n@@ -782,1 +788,1 @@\n-    return _allocator->attempt_allocation_locked(word_size);\n+    return _allocator->attempt_allocation_locked(node_index, word_size);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":13,"deletions":7,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -456,1 +456,1 @@\n-  HeapWord* attempt_allocation_slow(size_t word_size);\n+  HeapWord* attempt_allocation_slow(uint node_index, size_t word_size);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}