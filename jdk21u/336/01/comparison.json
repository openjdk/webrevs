{"files":[{"patch":"@@ -472,0 +472,5 @@\n+   # list of disabled warnings and the compilers for which it was specifically added.\n+   # array-bounds         -> GCC 12 on Alpine Linux\n+   # parentheses          -> GCC 6\n+   # range-loop-analysis  -> clang on Xcode12\n+\n@@ -476,1 +481,3 @@\n-   HARFBUZZ_DISABLED_WARNINGS_CXX_gcc := class-memaccess noexcept-type expansion-to-defined dangling-reference\n+   # maybe-uninitialized required for GCC 8 builds. Not required for GCC 9+.\n+   HARFBUZZ_DISABLED_WARNINGS_CXX_gcc := class-memaccess noexcept-type \\\n+       expansion-to-defined dangling-reference maybe-uninitialized\n","filename":"make\/modules\/java.desktop\/lib\/Awt2dLibraries.gmk","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-## Harfbuzz v7.2.0\n+## Harfbuzz v8.2.2\n@@ -5,2 +5,0 @@\n-https:\/\/github.com\/harfbuzz\/harfbuzz\/blob\/7.2.0\/COPYING\n-\n@@ -17,0 +15,1 @@\n+Copyright (C) 2012 Zilong Tan (eric.zltan@gmail.com)\n@@ -75,0 +74,9 @@\n+---------------------------------\n+The below license applies to the following files:\n+libharfbuzz\/hb-unicode-emoji-table.hh\n+\n+© 2023 Unicode®, Inc.\n+Unicode and the Unicode Logo are registered trademarks of Unicode, Inc.\n+in the U.S. and other countries.\n+For terms of use, see https:\/\/www.unicode.org\/terms_of_use.html\n+\n","filename":"src\/java.desktop\/share\/legal\/harfbuzz.md","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -400,1 +400,0 @@\n-    if (unlikely (!subtable)) return_trace (false);\n@@ -548,1 +547,2 @@\n-    for (hb_codepoint_t new_gid = 0; new_gid < c->plan->num_output_glyphs (); new_gid++)\n+    unsigned num_glyphs = c->plan->num_output_glyphs ();\n+    for (hb_codepoint_t new_gid = 0; new_gid < num_glyphs; new_gid++)\n@@ -579,3 +579,0 @@\n-    auto *dst = c->serializer->start_embed<IndexSubtableArray> ();\n-    if (unlikely (!dst)) return_trace (false);\n-\n@@ -996,2 +993,0 @@\n-  auto *cblc_prime = c->serializer->start_embed<CBLC> ();\n-\n@@ -1001,1 +996,1 @@\n-  if (unlikely (!cblc_prime)) return_trace (false);\n+  auto *cblc_prime = c->serializer->start_embed<CBLC> ();\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Color\/CBDT\/CBDT.hh","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+  const char *get_name () { return \"PAINT\"; }\n@@ -71,0 +72,2 @@\n+  hb_map_t current_glyphs;\n+  hb_map_t current_layers;\n@@ -264,0 +267,1 @@\n+    TRACE_PAINT (this);\n@@ -284,1 +288,1 @@\n-  DEFINE_SIZE_STATIC (4 + T::static_size);\n+  DEFINE_SIZE_MIN (VarIdx::static_size + T::min_size);\n@@ -318,0 +322,1 @@\n+    TRACE_PAINT (this);\n@@ -335,1 +340,1 @@\n-  DEFINE_SIZE_STATIC (T::static_size);\n+  DEFINE_SIZE_MIN (T::min_size);\n@@ -412,1 +417,0 @@\n-    if (unlikely (!out)) return_trace (false);\n@@ -562,0 +566,1 @@\n+    TRACE_PAINT (this);\n@@ -643,0 +648,1 @@\n+    TRACE_PAINT (this);\n@@ -697,0 +703,1 @@\n+    TRACE_PAINT (this);\n@@ -763,0 +770,1 @@\n+    TRACE_PAINT (this);\n@@ -827,0 +835,1 @@\n+    TRACE_PAINT (this);\n@@ -878,0 +887,1 @@\n+    TRACE_PAINT (this);\n@@ -950,0 +960,1 @@\n+    TRACE_PAINT (this);\n@@ -994,0 +1005,1 @@\n+    TRACE_PAINT (this);\n@@ -1042,0 +1054,1 @@\n+    TRACE_PAINT (this);\n@@ -1092,0 +1105,1 @@\n+    TRACE_PAINT (this);\n@@ -1145,0 +1159,1 @@\n+    TRACE_PAINT (this);\n@@ -1192,0 +1207,1 @@\n+    TRACE_PAINT (this);\n@@ -1243,0 +1259,1 @@\n+    TRACE_PAINT (this);\n@@ -1290,0 +1307,1 @@\n+    TRACE_PAINT (this);\n@@ -1344,0 +1362,1 @@\n+    TRACE_PAINT (this);\n@@ -1394,0 +1413,1 @@\n+    TRACE_PAINT (this);\n@@ -1429,2 +1449,4 @@\n-    if (!out->src.serialize_subset (c, src, this, instancer)) return_trace (false);\n-    return_trace (out->backdrop.serialize_subset (c, backdrop, this, instancer));\n+    bool ret = false;\n+    ret |= out->src.serialize_subset (c, src, this, instancer);\n+    ret |= out->backdrop.serialize_subset (c, backdrop, this, instancer);\n+    return_trace (ret);\n@@ -1437,0 +1459,1 @@\n+                  c->check_ops (this->min_size) && \/\/ PainComposite can get exponential\n@@ -1443,0 +1466,1 @@\n+    TRACE_PAINT (this);\n@@ -1517,4 +1541,4 @@\n-      clip_box.xMin += _hb_roundf (instancer (varIdxBase, 0));\n-      clip_box.yMin += _hb_roundf (instancer (varIdxBase, 1));\n-      clip_box.xMax += _hb_roundf (instancer (varIdxBase, 2));\n-      clip_box.yMax += _hb_roundf (instancer (varIdxBase, 3));\n+      clip_box.xMin += roundf (instancer (varIdxBase, 0));\n+      clip_box.yMin += roundf (instancer (varIdxBase, 1));\n+      clip_box.xMax += roundf (instancer (varIdxBase, 2));\n+      clip_box.yMax += roundf (instancer (varIdxBase, 3));\n@@ -1901,0 +1925,1 @@\n+    bool ret = false;\n@@ -1906,2 +1931,2 @@\n-      if (unlikely (!o) || !o->serialize_subset (c, _.second, this, instancer))\n-        return_trace (false);\n+      if (unlikely (!o)) return_trace (false);\n+      ret |= o->serialize_subset (c, _.second, this, instancer);\n@@ -1909,1 +1934,1 @@\n-    return_trace (true);\n+    return_trace (ret);\n@@ -2170,1 +2195,1 @@\n-    COLR *colr_prime = c->serializer->start_embed<COLR> ();\n+    auto *colr_prime = c->serializer->start_embed<COLR> ();\n@@ -2287,0 +2312,1 @@\n+    c.current_glyphs.add (glyph);\n@@ -2402,0 +2428,1 @@\n+  TRACE_PAINT (this);\n@@ -2405,0 +2432,5 @@\n+    if (unlikely (c->current_layers.has (i)))\n+      continue;\n+\n+    c->current_layers.add (i);\n+\n@@ -2409,0 +2441,2 @@\n+\n+    c->current_layers.del (i);\n@@ -2414,0 +2448,16 @@\n+  TRACE_PAINT (this);\n+\n+  if (unlikely (c->current_glyphs.has (gid)))\n+    return;\n+\n+  c->current_glyphs.add (gid);\n+\n+  c->funcs->push_inverse_root_transform (c->data, c->font);\n+  if (c->funcs->color_glyph (c->data, gid, c->font))\n+  {\n+    c->funcs->pop_transform (c->data);\n+    c->current_glyphs.del (gid);\n+    return;\n+  }\n+  c->funcs->pop_transform (c->data);\n+\n@@ -2432,0 +2482,2 @@\n+\n+  c->current_glyphs.del (gid);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Color\/COLR\/COLR.hh","additions":65,"deletions":13,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -51,1 +51,0 @@\n-    if (unlikely (!new_glyph)) return_trace (nullptr);\n@@ -146,1 +145,0 @@\n-    if (unlikely (!out)) return_trace (false);\n@@ -391,1 +389,0 @@\n-    if (unlikely (!out)) return_trace (false);\n@@ -426,2 +423,0 @@\n-    sbix *sbix_prime = c->serializer->start_embed<sbix> ();\n-    if (unlikely (!sbix_prime)) return_trace (false);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Color\/sbix\/sbix.hh","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -60,0 +60,3 @@\n+#ifndef HB_OPTIMIZE_SIZE\n+  HB_ALWAYS_INLINE\n+#endif\n@@ -116,1 +119,1 @@\n-    unsigned count = 0;\n+    unsigned count = hb_len (glyphs);\n@@ -119,0 +122,2 @@\n+    hb_codepoint_t max = 0;\n+    bool unsorted = false;\n@@ -121,0 +126,2 @@\n+      if (last != (hb_codepoint_t) -2 && g < last)\n+        unsorted = true;\n@@ -124,1 +131,1 @@\n-      count++;\n+      if (g > max) max = g;\n@@ -126,1 +133,1 @@\n-    u.format = count <= num_ranges * 3 ? 1 : 2;\n+    u.format = !unsorted && count <= num_ranges * 3 ? 1 : 2;\n@@ -129,1 +136,1 @@\n-    if (count && last > 0xFFFFu)\n+    if (max > 0xFFFFu)\n@@ -131,0 +138,3 @@\n+    if (unlikely (max > 0xFFFFFFu))\n+#else\n+    if (unlikely (max > 0xFFFFu))\n@@ -132,0 +142,4 @@\n+    {\n+      c->check_success (false, HB_SERIALIZE_ERROR_INT_OVERFLOW);\n+      return_trace (false);\n+    }\n@@ -151,1 +165,0 @@\n-    | hb_filter (c->plan->glyph_map_gsub)\n@@ -153,0 +166,1 @@\n+    | hb_filter ([] (hb_codepoint_t glyph) { return glyph != HB_MAP_VALUE_INVALID; })\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/Common\/Coverage.hh","additions":19,"deletions":5,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-      for (hb_codepoint_t g = HB_SET_VALUE_INVALID; glyphs->next (&g);)\n+      for (auto g : *glyphs)\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/Common\/CoverageFormat1.hh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -98,0 +98,1 @@\n+    unsigned unsorted = false;\n@@ -102,0 +103,3 @@\n+        if (unlikely (last != (hb_codepoint_t) -2 && last + 1 > g))\n+          unsorted = true;\n+\n@@ -103,2 +107,2 @@\n-        rangeRecord[range].first = g;\n-        rangeRecord[range].value = count;\n+        rangeRecord.arrayZ[range].first = g;\n+        rangeRecord.arrayZ[range].value = count;\n@@ -106,1 +110,1 @@\n-      rangeRecord[range].last = g;\n+      rangeRecord.arrayZ[range].last = g;\n@@ -111,0 +115,3 @@\n+    if (unlikely (unsorted))\n+      rangeRecord.as_array ().qsort (RangeRecord<Types>::cmp_range);\n+\n@@ -118,1 +125,1 @@\n-      for (hb_codepoint_t g = HB_SET_VALUE_INVALID; glyphs->next (&g);)\n+      for (auto g : *glyphs)\n@@ -188,2 +195,2 @@\n-          j = c->rangeRecord[i].first;\n-          coverage = c->rangeRecord[i].value;\n+          j = c->rangeRecord.arrayZ[i].first;\n+          coverage = c->rangeRecord.arrayZ[i].value;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/Common\/CoverageFormat2.hh","additions":13,"deletions":6,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -54,0 +54,12 @@\n+  HB_INTERNAL static int cmp_range (const void *pa, const void *pb) {\n+    const RangeRecord *a = (const RangeRecord *) pa;\n+    const RangeRecord *b = (const RangeRecord *) pb;\n+    if (a->first < b->first) return -1;\n+    if (a->first > b->first) return +1;\n+    if (a->last < b->last) return -1;\n+    if (a->last > b->last) return +1;\n+    if (a->value < b->value) return -1;\n+    if (a->value > b->value) return +1;\n+    return 0;\n+  }\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/Common\/RangeRecord.hh","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-#include \"..\/..\/..\/hb-ot-layout-common.hh\"\n+#include \"..\/..\/..\/hb-ot-var-common.hh\"\n@@ -35,0 +35,1 @@\n+#include \"..\/..\/..\/hb-cache.hh\"\n@@ -51,2 +52,0 @@\n-    if (unlikely (!out)) return_trace (false);\n-\n@@ -204,1 +203,0 @@\n-    if (unlikely (!out)) return_trace (false);\n@@ -209,1 +207,7 @@\n-    if (c->plan->layout_variation_idx_delta_map.has (varidx))\n+    hb_pair_t<unsigned, int> *new_varidx_delta;\n+    if (!c->plan->layout_variation_idx_delta_map.has (varidx, &new_varidx_delta))\n+      return_trace (false);\n+\n+    uint32_t new_varidx = hb_first (*new_varidx_delta);\n+    int delta = hb_second (*new_varidx_delta);\n+    if (delta != 0)\n@@ -211,6 +215,2 @@\n-      int delta = hb_second (c->plan->layout_variation_idx_delta_map.get (varidx));\n-      if (delta != 0)\n-      {\n-        if (!c->serializer->check_assign (out->coordinate, coordinate + delta, HB_SERIALIZE_ERROR_INT_OVERFLOW))\n-          return_trace (false);\n-      }\n+      if (!c->serializer->check_assign (out->coordinate, coordinate + delta, HB_SERIALIZE_ERROR_INT_OVERFLOW))\n+        return_trace (false);\n@@ -219,1 +219,1 @@\n-    if (c->plan->all_axes_pinned)\n+    if (new_varidx == HB_OT_LAYOUT_NO_VARIATIONS_INDEX)\n@@ -444,0 +444,10 @@\n+  template <typename set_t>\n+  void collect_coverage (hb_vector_t<set_t> &sets) const\n+  {\n+     for (const auto &offset : coverage)\n+     {\n+       const auto &cov = this+offset;\n+       cov.collect_coverage (sets.push ());\n+     }\n+  }\n+\n@@ -497,0 +507,9 @@\n+  template <typename set_t>\n+  void collect_coverage (hb_vector_t<set_t> &sets) const\n+  {\n+    switch (u.format) {\n+    case 1: u.format1.collect_coverage (sets); return;\n+    default:return;\n+    }\n+  }\n+\n@@ -588,0 +607,20 @@\n+  static void remap_varidx_after_instantiation (const hb_map_t& varidx_map,\n+                                                hb_hashmap_t<unsigned, hb_pair_t<unsigned, int>>& layout_variation_idx_delta_map \/* IN\/OUT *\/)\n+  {\n+    \/* varidx_map is empty which means varstore is empty after instantiation,\n+     * no variations, map all varidx to HB_OT_LAYOUT_NO_VARIATIONS_INDEX.\n+     * varidx_map doesn't have original varidx, indicating delta row is all\n+     * zeros, map varidx to HB_OT_LAYOUT_NO_VARIATIONS_INDEX *\/\n+    for (auto _ : layout_variation_idx_delta_map.iter_ref ())\n+    {\n+      \/* old_varidx->(varidx, delta) mapping generated for subsetting, then this\n+       * varidx is used as key of varidx_map during instantiation *\/\n+      uint32_t varidx = _.second.first;\n+      uint32_t *new_varidx;\n+      if (varidx_map.has (varidx, &new_varidx))\n+        _.second.first = *new_varidx;\n+      else\n+        _.second.first = HB_OT_LAYOUT_NO_VARIATIONS_INDEX;\n+    }\n+  }\n+\n@@ -610,0 +649,16 @@\n+      else if (c->plan->normalized_coords)\n+      {\n+        if (varStore)\n+        {\n+          item_variations_t item_vars;\n+          if (item_vars.instantiate (this+varStore, c->plan, true, true,\n+                                     c->plan->gdef_varstore_inner_maps.as_array ()))\n+            subset_varstore = out->varStore.serialize_serialize (c->serializer,\n+                                                                 item_vars.has_long_word (),\n+                                                                 c->plan->axis_tags,\n+                                                                 item_vars.get_region_list (),\n+                                                                 item_vars.get_vardata_encodings ());\n+          remap_varidx_after_instantiation (item_vars.get_varidx_map (),\n+                                            c->plan->layout_variation_idx_delta_map);\n+        }\n+      }\n@@ -861,0 +916,4 @@\n+\n+#ifndef HB_NO_GDEF_CACHE\n+      table->get_mark_glyph_sets ().collect_coverage (mark_glyph_set_digests);\n+#endif\n@@ -864,0 +923,29 @@\n+    unsigned int get_glyph_props (hb_codepoint_t glyph) const\n+    {\n+      unsigned v;\n+\n+#ifndef HB_NO_GDEF_CACHE\n+      if (glyph_props_cache.get (glyph, &v))\n+        return v;\n+#endif\n+\n+      v = table->get_glyph_props (glyph);\n+\n+#ifndef HB_NO_GDEF_CACHE\n+      if (likely (table.get_blob ())) \/\/ Don't try setting if we are the null instance!\n+        glyph_props_cache.set (glyph, v);\n+#endif\n+\n+      return v;\n+\n+    }\n+\n+    bool mark_set_covers (unsigned int set_index, hb_codepoint_t glyph_id) const\n+    {\n+      return\n+#ifndef HB_NO_GDEF_CACHE\n+             mark_glyph_set_digests[set_index].may_have (glyph_id) &&\n+#endif\n+             table->mark_set_covers (set_index, glyph_id);\n+    }\n+\n@@ -865,0 +953,4 @@\n+#ifndef HB_NO_GDEF_CACHE\n+    hb_vector_t<hb_set_digest_t> mark_glyph_set_digests;\n+    mutable hb_cache_t<21, 3, 8> glyph_props_cache;\n+#endif\n@@ -871,0 +963,3 @@\n+                                       const hb_vector_t<int>& normalized_coords,\n+                                       bool calculate_delta, \/* not pinned at default *\/\n+                                       bool no_variations, \/* all axes pinned *\/\n@@ -874,1 +969,2 @@\n-    if (layout_variation_indices->is_empty ()) return;\n+    const VariationStore &var_store = get_var_store ();\n+    float *store_cache = var_store.create_cache ();\n@@ -880,0 +976,11 @@\n+      int delta = 0;\n+      if (calculate_delta)\n+        delta = roundf (var_store.get_delta (idx, normalized_coords.arrayZ,\n+                                             normalized_coords.length, store_cache));\n+\n+      if (no_variations)\n+      {\n+        layout_variation_idx_delta_map->set (idx, hb_pair_t<unsigned, int> (HB_OT_LAYOUT_NO_VARIATIONS_INDEX, delta));\n+        continue;\n+      }\n+\n@@ -881,1 +988,1 @@\n-      if (major >= get_var_store ().get_sub_table_count ()) break;\n+      if (major >= var_store.get_sub_table_count ()) break;\n@@ -889,4 +996,0 @@\n-      if (!layout_variation_idx_delta_map->has (idx))\n-        continue;\n-      int delta = hb_second (layout_variation_idx_delta_map->get (idx));\n-\n@@ -897,0 +1000,1 @@\n+    var_store.destroy_cache (store_cache);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/GDEF\/GDEF.hh","additions":122,"deletions":18,"binary":false,"changes":140,"status":"modified"},{"patch":"@@ -28,1 +28,3 @@\n-    return_trace (c->check_struct (this) && xDeviceTable.sanitize (c, this) && yDeviceTable.sanitize (c, this));\n+    if (unlikely (!c->check_struct (this))) return_trace (false);\n+\n+    return_trace (xDeviceTable.sanitize (c, this) && yDeviceTable.sanitize (c, this));\n@@ -38,1 +40,1 @@\n-    if (font->x_ppem || font->num_coords)\n+    if ((font->x_ppem || font->num_coords) && xDeviceTable.sanitize (&c->sanitizer, this))\n@@ -40,1 +42,1 @@\n-    if (font->y_ppem || font->num_coords)\n+    if ((font->y_ppem || font->num_coords) && yDeviceTable.sanitize (&c->sanitizer, this))\n@@ -48,1 +50,0 @@\n-    if (unlikely (!out)) return_trace (false);\n@@ -54,1 +55,1 @@\n-    if (c->plan->layout_variation_idx_delta_map.has (x_varidx))\n+    if (x_varidx != HB_OT_LAYOUT_NO_VARIATIONS_INDEX)\n@@ -56,1 +57,6 @@\n-      int delta = hb_second (c->plan->layout_variation_idx_delta_map.get (x_varidx));\n+      hb_pair_t<unsigned, int> *new_varidx_delta;\n+      if (!c->plan->layout_variation_idx_delta_map.has (x_varidx, &new_varidx_delta))\n+        return_trace (false);\n+\n+      x_varidx = hb_first (*new_varidx_delta);\n+      int delta = hb_second (*new_varidx_delta);\n@@ -66,1 +72,1 @@\n-    if (c->plan->layout_variation_idx_delta_map.has (y_varidx))\n+    if (y_varidx != HB_OT_LAYOUT_NO_VARIATIONS_INDEX)\n@@ -68,1 +74,6 @@\n-      int delta = hb_second (c->plan->layout_variation_idx_delta_map.get (y_varidx));\n+      hb_pair_t<unsigned, int> *new_varidx_delta;\n+      if (!c->plan->layout_variation_idx_delta_map.has (y_varidx, &new_varidx_delta))\n+        return_trace (false);\n+\n+      y_varidx = hb_first (*new_varidx_delta);\n+      int delta = hb_second (*new_varidx_delta);\n@@ -77,1 +88,4 @@\n-    if (c->plan->all_axes_pinned)\n+    \/* in case that all axes are pinned or no variations after instantiation,\n+     * both var_idxes will be mapped to HB_OT_LAYOUT_NO_VARIATIONS_INDEX *\/\n+    if (x_varidx == HB_OT_LAYOUT_NO_VARIATIONS_INDEX &&\n+        y_varidx == HB_OT_LAYOUT_NO_VARIATIONS_INDEX)\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/GPOS\/AnchorFormat3.hh","additions":23,"deletions":9,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -24,0 +24,4 @@\n+\n+    if (c->lazy_some_gpos)\n+      return_trace (true);\n+\n@@ -29,1 +33,2 @@\n-  const Anchor& get_anchor (unsigned int row, unsigned int col,\n+  const Anchor& get_anchor (hb_ot_apply_context_t *c,\n+                            unsigned int row, unsigned int col,\n@@ -34,2 +39,4 @@\n-    *found = !matrixZ[row * cols + col].is_null ();\n-    return this+matrixZ[row * cols + col];\n+    auto &offset = matrixZ[row * cols + col];\n+    if (unlikely (!offset.sanitize (&c->sanitizer, this))) return Null (Anchor);\n+    *found = !offset.is_null ();\n+    return this+offset;\n@@ -61,0 +68,1 @@\n+    bool ret = false;\n@@ -65,1 +73,1 @@\n-      offset->serialize_subset (c, matrixZ[i], this);\n+      ret |= offset->serialize_subset (c, matrixZ[i], this);\n@@ -68,1 +76,1 @@\n-    return_trace (true);\n+    return_trace (ret);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/GPOS\/AnchorMatrix.hh","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -27,2 +27,2 @@\n-  EntryExitRecord* subset (hb_subset_context_t *c,\n-                           const void *src_base) const\n+  bool subset (hb_subset_context_t *c,\n+               const void *src_base) const\n@@ -32,1 +32,1 @@\n-    if (unlikely (!out)) return_trace (nullptr);\n+    if (unlikely (!out)) return_trace (false);\n@@ -34,3 +34,4 @@\n-    out->entryAnchor.serialize_subset (c, entryAnchor, src_base);\n-    out->exitAnchor.serialize_subset (c, exitAnchor, src_base);\n-    return_trace (out);\n+    bool ret = false;\n+    ret |= out->entryAnchor.serialize_subset (c, entryAnchor, src_base);\n+    ret |= out->exitAnchor.serialize_subset (c, exitAnchor, src_base);\n+    return_trace (ret);\n@@ -94,1 +95,7 @@\n-    return_trace (coverage.sanitize (c, this) && entryExitRecord.sanitize (c, this));\n+    if (unlikely (!coverage.sanitize (c, this)))\n+      return_trace (false);\n+\n+    if (c->lazy_some_gpos)\n+      return_trace (entryExitRecord.sanitize_shallow (c));\n+    else\n+      return_trace (entryExitRecord.sanitize (c, this));\n@@ -122,1 +129,2 @@\n-    if (!this_record.entryAnchor) return_trace (false);\n+    if (!this_record.entryAnchor ||\n+        unlikely (!this_record.entryAnchor.sanitize (&c->sanitizer, this))) return_trace (false);\n@@ -125,1 +133,1 @@\n-    skippy_iter.reset (buffer->idx, 1);\n+    skippy_iter.reset_fast (buffer->idx);\n@@ -127,1 +135,1 @@\n-    if (!skippy_iter.prev (&unsafe_from))\n+    if (unlikely (!skippy_iter.prev (&unsafe_from)))\n@@ -134,1 +142,2 @@\n-    if (!prev_record.exitAnchor)\n+    if (!prev_record.exitAnchor ||\n+        unlikely (!prev_record.exitAnchor.sanitize (&c->sanitizer, this)))\n@@ -203,2 +212,2 @@\n-    hb_position_t x_offset = entry_x - exit_x;\n-    hb_position_t y_offset = entry_y - exit_y;\n+    hb_position_t x_offset = roundf (entry_x - exit_x);\n+    hb_position_t y_offset = roundf (entry_y - exit_y);\n@@ -281,1 +290,0 @@\n-    if (unlikely (!out)) return_trace (false);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/GPOS\/CursivePosFormat1.hh","additions":22,"deletions":14,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -159,1 +159,1 @@\n-        pos[i].x_offset += _hb_roundf (font->slant_xy * pos[i].y_offset);\n+        pos[i].x_offset += roundf (font->slant_xy * pos[i].y_offset);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/GPOS\/GPOS.hh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+    bool ret = false;\n@@ -41,5 +42,5 @@\n-      matrix->serialize_subset (c,\n-                                _.second,\n-                                this,\n-                                src.rows,\n-                                indexes);\n+      ret |= matrix->serialize_subset (c,\n+                                       _.second,\n+                                       this,\n+                                       src.rows,\n+                                       indexes);\n@@ -47,1 +48,1 @@\n-    return_trace (this->len);\n+    return_trace (ret);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/GPOS\/LigatureArray.hh","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-    const Anchor& glyph_anchor = anchors.get_anchor (glyph_index, mark_class, class_count, &found);\n+    const Anchor& glyph_anchor = anchors.get_anchor (c, glyph_index, mark_class, class_count, &found);\n@@ -85,0 +85,1 @@\n+    bool ret = false;\n@@ -87,2 +88,1 @@\n-      if (unlikely (!mark_record.subset (c, this, klass_mapping)))\n-        return_trace (false);\n+      ret |= mark_record.subset (c, this, klass_mapping);\n@@ -96,1 +96,1 @@\n-    return_trace (true);\n+    return_trace (ret);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/GPOS\/MarkArray.hh","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -200,3 +200,4 @@\n-    out->markArray.serialize_subset (c, markArray, this,\n-                                     (this+markCoverage).iter (),\n-                                     &klass_mapping);\n+    if (unlikely (!out->markArray.serialize_subset (c, markArray, this,\n+                                                    (this+markCoverage).iter (),\n+                                                    &klass_mapping)))\n+      return_trace (false);\n@@ -231,5 +232,3 @@\n-    out->baseArray.serialize_subset (c, baseArray, this,\n-                                     base_iter.len (),\n-                                     base_indexes.iter ());\n-\n-    return_trace (true);\n+    return_trace (out->baseArray.serialize_subset (c, baseArray, this,\n+                                                   base_iter.len (),\n+                                                   base_indexes.iter ()));\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/GPOS\/MarkBasePosFormat1.hh","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -172,1 +172,1 @@\n-    const hb_map_t &glyph_map = *c->plan->glyph_map;\n+    const hb_map_t &glyph_map = c->plan->glyph_map_gsub;\n@@ -198,3 +198,4 @@\n-    out->markArray.serialize_subset (c, markArray, this,\n-                                     (this+markCoverage).iter (),\n-                                     &klass_mapping);\n+    if (unlikely (!out->markArray.serialize_subset (c, markArray, this,\n+                                                    (this+markCoverage).iter (),\n+                                                    &klass_mapping)))\n+      return_trace (false);\n@@ -204,1 +205,1 @@\n-    | hb_filter (glyphset)\n+    | hb_take ((this + ligatureArray).len)\n@@ -206,0 +207,1 @@\n+    | hb_filter ([] (hb_codepoint_t glyph) { return glyph != HB_MAP_VALUE_INVALID; })\n@@ -211,4 +213,3 @@\n-    out->ligatureArray.serialize_subset (c, ligatureArray, this,\n-                                         hb_iter (this+ligatureCoverage), classCount, &klass_mapping);\n-\n-    return_trace (true);\n+    return_trace (out->ligatureArray.serialize_subset (c, ligatureArray, this,\n+                                                       hb_iter (this+ligatureCoverage),\n+                                                       classCount, &klass_mapping));\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/GPOS\/MarkLigPosFormat1.hh","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -103,1 +103,1 @@\n-    skippy_iter.reset (buffer->idx, 1);\n+    skippy_iter.reset_fast (buffer->idx);\n@@ -106,1 +106,1 @@\n-    if (!skippy_iter.prev (&unsafe_from))\n+    if (unlikely (!skippy_iter.prev (&unsafe_from)))\n@@ -112,1 +112,1 @@\n-    if (!_hb_glyph_info_is_mark (&buffer->info[skippy_iter.idx]))\n+    if (likely (!_hb_glyph_info_is_mark (&buffer->info[skippy_iter.idx])))\n@@ -186,3 +186,4 @@\n-    out->mark1Array.serialize_subset (c, mark1Array, this,\n-                                      (this+mark1Coverage).iter (),\n-                                      &klass_mapping);\n+    if (unlikely (!out->mark1Array.serialize_subset (c, mark1Array, this,\n+                                                     (this+mark1Coverage).iter (),\n+                                                     &klass_mapping)))\n+      return_trace (false);\n@@ -217,1 +218,3 @@\n-    out->mark2Array.serialize_subset (c, mark2Array, this, mark2_iter.len (), mark2_indexes.iter ());\n+    return_trace (out->mark2Array.serialize_subset (c, mark2Array, this,\n+                                                    mark2_iter.len (),\n+                                                    mark2_indexes.iter ()));\n@@ -219,1 +222,0 @@\n-    return_trace (true);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/GPOS\/MarkMarkPosFormat1.hh","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -27,3 +27,3 @@\n-  MarkRecord *subset (hb_subset_context_t    *c,\n-                      const void             *src_base,\n-                      const hb_map_t         *klass_mapping) const\n+  bool subset (hb_subset_context_t    *c,\n+               const void             *src_base,\n+               const hb_map_t         *klass_mapping) const\n@@ -33,1 +33,1 @@\n-    if (unlikely (!out)) return_trace (nullptr);\n+    if (unlikely (!out)) return_trace (false);\n@@ -36,2 +36,1 @@\n-    out->markAnchor.serialize_subset (c, markAnchor, src_base);\n-    return_trace (out);\n+    return_trace (out->markAnchor.serialize_subset (c, markAnchor, src_base));\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/GPOS\/MarkRecord.hh","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -113,1 +113,1 @@\n-    skippy_iter.reset (buffer->idx, 1);\n+    skippy_iter.reset_fast (buffer->idx);\n@@ -115,1 +115,1 @@\n-    if (!skippy_iter.next (&unsafe_to))\n+    if (unlikely (!skippy_iter.next (&unsafe_to)))\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/GPOS\/PairPosFormat1.hh","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -53,1 +53,0 @@\n-    unsigned int record_size = valueFormat1.get_size () + valueFormat2.get_size ();\n@@ -57,3 +56,4 @@\n-                                  record_size) &&\n-                  valueFormat1.sanitize_values_stride_unsafe (c, this, &values[0], count, stride) &&\n-                  valueFormat2.sanitize_values_stride_unsafe (c, this, &values[len1], count, stride));\n+                                  stride) &&\n+                  (c->lazy_some_gpos ||\n+                   (valueFormat1.sanitize_values_stride_unsafe (c, this, &values[0], count, stride) &&\n+                    valueFormat2.sanitize_values_stride_unsafe (c, this, &values[len1], count, stride))));\n@@ -134,1 +134,1 @@\n-    skippy_iter.reset (buffer->idx, 1);\n+    skippy_iter.reset_fast (buffer->idx);\n@@ -136,1 +136,1 @@\n-    if (!skippy_iter.next (&unsafe_to))\n+    if (unlikely (!skippy_iter.next (&unsafe_to)))\n@@ -142,3 +142,6 @@\n-    unsigned int len1 = valueFormat1.get_len ();\n-    unsigned int len2 = valueFormat2.get_len ();\n-    unsigned int record_len = len1 + len2;\n+    unsigned int klass2 = (this+classDef2).get_class (buffer->info[skippy_iter.idx].codepoint);\n+    if (!klass2)\n+    {\n+      buffer->unsafe_to_concat (buffer->idx, skippy_iter.idx + 1);\n+      return_trace (false);\n+    }\n@@ -147,1 +150,0 @@\n-    unsigned int klass2 = (this+classDef2).get_class (buffer->info[skippy_iter.idx].codepoint);\n@@ -154,0 +156,4 @@\n+    unsigned int len1 = valueFormat1.get_len ();\n+    unsigned int len2 = valueFormat2.get_len ();\n+    unsigned int record_len = len1 + len2;\n+\n@@ -160,1 +166,1 @@\n-     * Results in better cursor positinoing \/ underline drawing.\n+     * Results in better cursor positioning \/ underline drawing.\n@@ -167,1 +173,1 @@\n-    if (0)\n+    if (false)\n@@ -227,2 +233,2 @@\n-    applied_first = valueFormat1.apply_value (c, this, v, buffer->cur_pos());\n-    applied_second = valueFormat2.apply_value (c, this, v + len1, buffer->pos[skippy_iter.idx]);\n+    applied_first = len1 && valueFormat1.apply_value (c, this, v, buffer->cur_pos());\n+    applied_second = len2 && valueFormat2.apply_value (c, this, v + len1, buffer->pos[skippy_iter.idx]);\n@@ -296,0 +302,2 @@\n+    unsigned total_len = len1 + len2;\n+    hb_vector_t<unsigned> class2_idxs (+ hb_range ((unsigned) class2Count) | hb_filter (klass2_map));\n@@ -298,1 +306,1 @@\n-      for (unsigned class2_idx : + hb_range ((unsigned) class2Count) | hb_filter (klass2_map))\n+      for (unsigned class2_idx : class2_idxs)\n@@ -300,1 +308,1 @@\n-        unsigned idx = (class1_idx * (unsigned) class2Count + class2_idx) * (len1 + len2);\n+        unsigned idx = (class1_idx * (unsigned) class2Count + class2_idx) * total_len;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/GPOS\/PairPosFormat2.hh","additions":24,"deletions":16,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -55,2 +55,3 @@\n-    return_trace (closure->valueFormats[0].sanitize_values_stride_unsafe (c, this, &record->values[0], count, closure->stride) &&\n-                  closure->valueFormats[1].sanitize_values_stride_unsafe (c, this, &record->values[closure->len1], count, closure->stride));\n+    return_trace (c->lazy_some_gpos ||\n+                  (closure->valueFormats[0].sanitize_values_stride_unsafe (c, this, &record->values[0], count, closure->stride) &&\n+                   closure->valueFormats[1].sanitize_values_stride_unsafe (c, this, &record->values[closure->len1], count, closure->stride)));\n@@ -123,2 +124,2 @@\n-      bool applied_first = valueFormats[0].apply_value (c, this, &record->values[0], buffer->cur_pos());\n-      bool applied_second = valueFormats[1].apply_value (c, this, &record->values[len1], buffer->pos[pos]);\n+      bool applied_first = len1 && valueFormats[0].apply_value (c, this, &record->values[0], buffer->cur_pos());\n+      bool applied_second = len2 && valueFormats[1].apply_value (c, this, &record->values[len1], buffer->pos[pos]);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/GPOS\/PairSet.hh","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-  DEFINE_SIZE_ARRAY (Types::size, values);\n+  DEFINE_SIZE_ARRAY (Types::HBGlyphID::static_size, values);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/GPOS\/PairValueRecord.hh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -93,0 +93,1 @@\n+                   hb_blob_t           *table_blob,\n@@ -103,1 +104,1 @@\n-    OT::hb_ot_apply_context_t c (1, font, &buffer);\n+    OT::hb_ot_apply_context_t c (1, font, &buffer, table_blob);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/GPOS\/SinglePosFormat1.hh","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -97,0 +97,1 @@\n+                   hb_blob_t           *table_blob,\n@@ -108,1 +109,1 @@\n-    OT::hb_ot_apply_context_t c (1, font, &buffer);\n+    OT::hb_ot_apply_context_t c (1, font, &buffer, table_blob);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/GPOS\/SinglePosFormat2.hh","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -121,2 +121,3 @@\n-    if (format & xPlaDevice) {\n-      if (use_x_device) glyph_pos.x_offset  += (base + get_device (values, &ret)).get_x_delta (font, store, cache);\n+    if (format & xPlaDevice)\n+    {\n+      if (use_x_device) glyph_pos.x_offset  += get_device (values, &ret, base, c->sanitizer).get_x_delta (font, store, cache);\n@@ -125,2 +126,3 @@\n-    if (format & yPlaDevice) {\n-      if (use_y_device) glyph_pos.y_offset  += (base + get_device (values, &ret)).get_y_delta (font, store, cache);\n+    if (format & yPlaDevice)\n+    {\n+      if (use_y_device) glyph_pos.y_offset  += get_device (values, &ret, base, c->sanitizer).get_y_delta (font, store, cache);\n@@ -129,2 +131,3 @@\n-    if (format & xAdvDevice) {\n-      if (horizontal && use_x_device) glyph_pos.x_advance += (base + get_device (values, &ret)).get_x_delta (font, store, cache);\n+    if (format & xAdvDevice)\n+    {\n+      if (horizontal && use_x_device) glyph_pos.x_advance += get_device (values, &ret, base, c->sanitizer).get_x_delta (font, store, cache);\n@@ -133,1 +136,2 @@\n-    if (format & yAdvDevice) {\n+    if (format & yAdvDevice)\n+    {\n@@ -135,1 +139,1 @@\n-      if (!horizontal && use_y_device) glyph_pos.y_advance -= (base + get_device (values, &ret)).get_y_delta (font, store, cache);\n+      if (!horizontal && use_y_device) glyph_pos.y_advance -= get_device (values, &ret, base, c->sanitizer).get_y_delta (font, store, cache);\n@@ -177,0 +181,3 @@\n+    if (!has_device ())\n+      return;\n+\n@@ -236,1 +243,0 @@\n-\n@@ -243,1 +249,0 @@\n-\n@@ -280,1 +285,1 @@\n-  static inline const Offset16To<Device>& get_device (const Value* value, bool *worked=nullptr)\n+  static inline const Offset16To<Device>& get_device (const Value* value)\n@@ -282,1 +287,0 @@\n-    if (worked) *worked |= bool (*value);\n@@ -285,0 +289,13 @@\n+  static inline const Device& get_device (const Value* value,\n+                                          bool *worked,\n+                                          const void *base,\n+                                          hb_sanitize_context_t &c)\n+  {\n+    if (worked) *worked |= bool (*value);\n+    auto &offset = *static_cast<const Offset16To<Device> *> (value);\n+\n+    if (unlikely (!offset.sanitize (&c, base)))\n+      return Null(Device);\n+\n+    return base + offset;\n+  }\n@@ -343,1 +360,7 @@\n-    return_trace (c->check_range (values, get_size ()) && (!has_device () || sanitize_value_devices (c, base, values)));\n+\n+    if (unlikely (!c->check_range (values, get_size ()))) return_trace (false);\n+\n+    if (c->lazy_some_gpos)\n+      return_trace (true);\n+\n+    return_trace (!has_device () || sanitize_value_devices (c, base, values));\n@@ -349,1 +372,1 @@\n-    unsigned int len = get_len ();\n+    unsigned size = get_size ();\n@@ -351,1 +374,1 @@\n-    if (!c->check_range (values, count, get_size ())) return_trace (false);\n+    if (!c->check_range (values, count, size)) return_trace (false);\n@@ -353,1 +376,2 @@\n-    if (!has_device ()) return_trace (true);\n+    if (c->lazy_some_gpos)\n+      return_trace (true);\n@@ -355,7 +379,1 @@\n-    for (unsigned int i = 0; i < count; i++) {\n-      if (!sanitize_value_devices (c, base, values))\n-        return_trace (false);\n-      values += len;\n-    }\n-\n-    return_trace (true);\n+    return_trace (sanitize_values_stride_unsafe (c, base, values, count, size));\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/GPOS\/ValueFormat.hh","additions":41,"deletions":23,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -11,2 +11,0 @@\n-typedef hb_pair_t<hb_codepoint_t, hb_codepoint_t> hb_codepoint_pair_t;\n-\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/GSUB\/Common.hh","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -13,1 +13,1 @@\n-  protected:\n+  public:\n@@ -16,1 +16,1 @@\n-  HeadlessArrayOf<typename Types::HBGlyphID>\n+  HeadlessArray16Of<typename Types::HBGlyphID>\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/GSUB\/Ligature.hh","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -78,0 +78,1 @@\n+\n@@ -79,0 +80,43 @@\n+\n+#ifndef HB_NO_OT_RULESETS_FAST_PATH\n+    if (HB_OPTIMIZE_SIZE_VAL || num_ligs <= 4)\n+#endif\n+    {\n+    slow:\n+      for (unsigned int i = 0; i < num_ligs; i++)\n+      {\n+        const auto &lig = this+ligature.arrayZ[i];\n+        if (lig.apply (c)) return_trace (true);\n+      }\n+      return_trace (false);\n+    }\n+\n+    \/* This version is optimized for speed by matching the first component\n+     * of the ligature here, instead of calling into the ligation code.\n+     *\n+     * This is replicated in ChainRuleSet and RuleSet. *\/\n+\n+    hb_ot_apply_context_t::skipping_iterator_t &skippy_iter = c->iter_input;\n+    skippy_iter.reset (c->buffer->idx);\n+    skippy_iter.set_match_func (match_always, nullptr);\n+    skippy_iter.set_glyph_data ((HBUINT16 *) nullptr);\n+    unsigned unsafe_to;\n+    hb_codepoint_t first = (unsigned) -1;\n+    bool matched = skippy_iter.next (&unsafe_to);\n+    if (likely (matched))\n+    {\n+      first = c->buffer->info[skippy_iter.idx].codepoint;\n+      unsafe_to = skippy_iter.idx + 1;\n+\n+      if (skippy_iter.may_skip (c->buffer->info[skippy_iter.idx]))\n+      {\n+        \/* Can't use the fast path if eg. the next char is a default-ignorable\n+         * or other skippable. *\/\n+        goto slow;\n+      }\n+    }\n+    else\n+      goto slow;\n+\n+    bool unsafe_to_concat = false;\n+\n@@ -81,2 +125,13 @@\n-      const auto &lig = this+ligature[i];\n-      if (lig.apply (c)) return_trace (true);\n+      const auto &lig = this+ligature.arrayZ[i];\n+      if (unlikely (lig.component.lenP1 <= 1) ||\n+          lig.component.arrayZ[0] == first)\n+      {\n+        if (lig.apply (c))\n+        {\n+          if (unsafe_to_concat)\n+            c->buffer->unsafe_to_concat (c->buffer->idx, unsafe_to);\n+          return_trace (true);\n+        }\n+      }\n+      else if (likely (lig.component.lenP1 > 1))\n+        unsafe_to_concat = true;\n@@ -84,0 +139,2 @@\n+    if (likely (unsafe_to_concat))\n+      c->buffer->unsafe_to_concat (c->buffer->idx, unsafe_to);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/GSUB\/LigatureSet.hh","additions":59,"deletions":2,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -194,1 +194,0 @@\n-    if (unlikely (!c->serializer->check_success (out))) return_trace (false);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/GSUB\/ReverseChainSingleSubstFormat1.hh","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-                            \"replaced glyph at %u (multiple subtitution)\",\n+                            \"replaced glyph at %u (multiple substitution)\",\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/GSUB\/Sequence.hh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-           | hb_map_retains_sorting (hb_first)\n+           | hb_map_retains_sorting (hb_second)\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/GSUB\/SingleSubst.hh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -90,1 +90,36 @@\n-  void transform_points (contour_point_vector_t &points,\n+  static void transform (const float (&matrix)[4],\n+                         hb_array_t<contour_point_t> points)\n+  {\n+    if (matrix[0] != 1.f || matrix[1] != 0.f ||\n+        matrix[2] != 0.f || matrix[3] != 1.f)\n+      for (auto &point : points)\n+        point.transform (matrix);\n+  }\n+\n+  static void translate (const contour_point_t &trans,\n+                         hb_array_t<contour_point_t> points)\n+  {\n+    if (HB_OPTIMIZE_SIZE_VAL)\n+    {\n+      if (trans.x != 0.f || trans.y != 0.f)\n+        for (auto &point : points)\n+          point.translate (trans);\n+    }\n+    else\n+    {\n+      if (trans.x != 0.f && trans.y != 0.f)\n+        for (auto &point : points)\n+          point.translate (trans);\n+      else\n+      {\n+        if (trans.x != 0.f)\n+          for (auto &point : points)\n+            point.x += trans.x;\n+        else if (trans.y != 0.f)\n+          for (auto &point : points)\n+            point.y += trans.y;\n+      }\n+    }\n+  }\n+\n+  void transform_points (hb_array_t<contour_point_t> points,\n@@ -96,2 +131,2 @@\n-      points.translate (trans);\n-      points.transform (matrix);\n+      translate (trans, points);\n+      transform (matrix, points);\n@@ -101,2 +136,2 @@\n-      points.transform (matrix);\n-      points.translate (trans);\n+      transform (matrix, points);\n+      translate (trans, points);\n@@ -111,2 +146,2 @@\n-    if (unlikely (!points.resize (points.length + 1))) return false;\n-    points[points.length - 1] = trans;\n+    if (unlikely (!points.alloc (points.length + 4))) return false; \/\/ For phantom points\n+    points.push (trans);\n@@ -361,1 +396,1 @@\n-        free (o);\n+        hb_free (o);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/glyf\/CompositeGlyph.hh","additions":43,"deletions":8,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -106,0 +106,57 @@\n+  bool get_all_points_without_var (const hb_face_t *face,\n+                                   contour_point_vector_t &points \/* OUT *\/) const\n+  {\n+    switch (type) {\n+    case SIMPLE:\n+      if (unlikely (!SimpleGlyph (*header, bytes).get_contour_points (points)))\n+        return false;\n+      break;\n+    case COMPOSITE:\n+    {\n+      for (auto &item : get_composite_iterator ())\n+        if (unlikely (!item.get_points (points))) return false;\n+      break;\n+    }\n+#ifndef HB_NO_VAR_COMPOSITES\n+    case VAR_COMPOSITE:\n+    {\n+      for (auto &item : get_var_composite_iterator ())\n+        if (unlikely (!item.get_points (points))) return false;\n+      break;\n+    }\n+#endif\n+    case EMPTY:\n+      break;\n+    }\n+\n+    \/* Init phantom points *\/\n+    if (unlikely (!points.resize (points.length + PHANTOM_COUNT))) return false;\n+    hb_array_t<contour_point_t> phantoms = points.as_array ().sub_array (points.length - PHANTOM_COUNT, PHANTOM_COUNT);\n+    {\n+      int lsb = 0;\n+      int h_delta = face->table.hmtx->get_leading_bearing_without_var_unscaled (gid, &lsb) ?\n+                    (int) header->xMin - lsb : 0;\n+      HB_UNUSED int tsb = 0;\n+      int v_orig  = (int) header->yMax +\n+#ifndef HB_NO_VERTICAL\n+                    ((void) face->table.vmtx->get_leading_bearing_without_var_unscaled (gid, &tsb), tsb)\n+#else\n+                    0\n+#endif\n+                    ;\n+      unsigned h_adv = face->table.hmtx->get_advance_without_var_unscaled (gid);\n+      unsigned v_adv =\n+#ifndef HB_NO_VERTICAL\n+                       face->table.vmtx->get_advance_without_var_unscaled (gid)\n+#else\n+                       - face->get_upem ()\n+#endif\n+                       ;\n+      phantoms[PHANTOM_LEFT].x = h_delta;\n+      phantoms[PHANTOM_RIGHT].x = (int) h_adv + h_delta;\n+      phantoms[PHANTOM_TOP].y = v_orig;\n+      phantoms[PHANTOM_BOTTOM].y = v_orig - (int) v_adv;\n+    }\n+    return true;\n+  }\n+\n@@ -117,2 +174,2 @@\n-      plan->bounds_width_map.set (new_gid, xMax - xMin);\n-      plan->bounds_height_map.set (new_gid, yMax - yMin);\n+      plan->bounds_width_vec[new_gid] = xMax - xMin;\n+      plan->bounds_height_vec[new_gid] = yMax - yMin;\n@@ -127,0 +184,2 @@\n+    uint32_t hash = hb_hash (new_gid);\n+\n@@ -130,1 +189,1 @@\n-    plan->hmtx_map.set (new_gid, hb_pair ((unsigned) hori_aw, lsb));\n+    plan->hmtx_map.set_with_hash (new_gid, hash, hb_pair ((unsigned) hori_aw, lsb));\n@@ -138,1 +197,1 @@\n-    plan->vmtx_map.set (new_gid, hb_pair ((unsigned) vert_aw, tsb));\n+    plan->vmtx_map.set_with_hash (new_gid, hash, hb_pair ((unsigned) vert_aw, tsb));\n@@ -158,1 +217,0 @@\n-    }\n@@ -160,8 +218,10 @@\n-    for (unsigned i = 1; i < all_points.length - 4; i++)\n-    {\n-      float x = all_points[i].x;\n-      float y = all_points[i].y;\n-      xMin = hb_min (xMin, x);\n-      xMax = hb_max (xMax, x);\n-      yMin = hb_min (yMin, y);\n-      yMax = hb_max (yMax, y);\n+      unsigned count = all_points.length - 4;\n+      for (unsigned i = 1; i < count; i++)\n+      {\n+        float x = all_points[i].x;\n+        float y = all_points[i].y;\n+        xMin = hb_min (xMin, x);\n+        xMax = hb_max (xMax, x);\n+        yMin = hb_min (yMin, y);\n+        yMax = hb_max (yMax, y);\n+      }\n@@ -170,1 +230,0 @@\n-    update_mtx (plan, roundf (xMin), roundf (xMax), roundf (yMin), roundf (yMax), all_points);\n@@ -172,4 +231,8 @@\n-    int rounded_xMin = roundf (xMin);\n-    int rounded_xMax = roundf (xMax);\n-    int rounded_yMin = roundf (yMin);\n-    int rounded_yMax = roundf (yMax);\n+    \/\/ These are destined for storage in a 16 bit field to clamp the values to\n+    \/\/ fit into a 16 bit signed integer.\n+    int rounded_xMin = hb_clamp (roundf (xMin), -32768.0f, 32767.0f);\n+    int rounded_xMax = hb_clamp (roundf (xMax), -32768.0f, 32767.0f);\n+    int rounded_yMin = hb_clamp (roundf (yMin), -32768.0f, 32767.0f);\n+    int rounded_yMax = hb_clamp (roundf (yMax), -32768.0f, 32767.0f);\n+\n+    update_mtx (plan, rounded_xMin, rounded_xMax, rounded_yMin, rounded_yMax, all_points);\n@@ -290,0 +353,1 @@\n+                   hb_map_t *current_glyphs = nullptr,\n@@ -299,0 +363,4 @@\n+    hb_map_t current_glyphs_stack;\n+    if (current_glyphs == nullptr)\n+      current_glyphs = &current_glyphs_stack;\n+\n@@ -308,3 +376,2 @@\n-    bool inplace = type == SIMPLE && all_points.length == 0;\n-    \/* Load into all_points if it's empty, as an optimization. *\/\n-    contour_point_vector_t &points = inplace ? all_points : stack_points;\n+    contour_point_vector_t &points = type == SIMPLE ? all_points : stack_points;\n+    unsigned old_length = points.length;\n@@ -318,1 +385,1 @@\n-      if (unlikely (!SimpleGlyph (*header, bytes).get_contour_points (points, phantom_only)))\n+      if (unlikely (!SimpleGlyph (*header, bytes).get_contour_points (all_points, phantom_only)))\n@@ -332,0 +399,1 @@\n+      break;\n@@ -368,3 +436,5 @@\n-    glyf_accelerator.gvar->apply_deltas_to_points (gid,\n-                                                   coords,\n-                                                   points.as_array ());\n+    if (coords)\n+      glyf_accelerator.gvar->apply_deltas_to_points (gid,\n+                                                     coords,\n+                                                     points.as_array ().sub_array (old_length),\n+                                                     phantom_only && type == SIMPLE);\n@@ -378,1 +448,1 @@\n-      points_with_deltas->copy_vector (points);\n+      *points_with_deltas = points;\n@@ -384,3 +454,1 @@\n-        head_maxp_info->maxPoints = hb_max (head_maxp_info->maxPoints, points.length - 4);\n-      if (!inplace)\n-        all_points.extend (points.as_array ());\n+        head_maxp_info->maxPoints = hb_max (head_maxp_info->maxPoints, all_points.length - old_length - 4);\n@@ -390,1 +458,0 @@\n-      contour_point_vector_t comp_points;\n@@ -394,2 +461,11 @@\n-        comp_points.reset ();\n-        if (unlikely (!glyf_accelerator.glyph_for_gid (item.get_gid ())\n+        hb_codepoint_t item_gid = item.get_gid ();\n+\n+        if (unlikely (current_glyphs->has (item_gid)))\n+          continue;\n+\n+        current_glyphs->add (item_gid);\n+\n+        unsigned old_count = all_points.length;\n+\n+        if (unlikely ((!phantom_only || (use_my_metrics && item.is_use_my_metrics ())) &&\n+                      !glyf_accelerator.glyph_for_gid (item_gid)\n@@ -398,1 +474,1 @@\n-                                                    comp_points,\n+                                                    all_points,\n@@ -406,0 +482,1 @@\n+                                                    current_glyphs,\n@@ -408,0 +485,2 @@\n+        {\n+          current_glyphs->del (item_gid);\n@@ -409,0 +488,3 @@\n+        }\n+\n+        auto comp_points = all_points.as_array ().sub_array (old_count);\n@@ -415,3 +497,5 @@\n-        float matrix[4];\n-        contour_point_t default_trans;\n-        item.get_transformation (matrix, default_trans);\n+        if (comp_points) \/\/ Empty in case of phantom_only\n+        {\n+          float matrix[4];\n+          contour_point_t default_trans;\n+          item.get_transformation (matrix, default_trans);\n@@ -419,2 +503,3 @@\n-        \/* Apply component transformation & translation (with deltas applied) *\/\n-        item.transform_points (comp_points, matrix, points[comp_index]);\n+          \/* Apply component transformation & translation (with deltas applied) *\/\n+          item.transform_points (comp_points, matrix, points[comp_index]);\n+        }\n@@ -422,1 +507,1 @@\n-        if (item.is_anchored ())\n+        if (item.is_anchored () && !phantom_only)\n@@ -432,1 +517,1 @@\n-            comp_points.translate (delta);\n+            item.translate (delta, comp_points);\n@@ -436,1 +521,1 @@\n-        all_points.extend (comp_points.as_array ().sub_array (0, comp_points.length - PHANTOM_COUNT));\n+        all_points.resize (all_points.length - PHANTOM_COUNT);\n@@ -439,0 +524,2 @@\n+        {\n+          current_glyphs->del (item_gid);\n@@ -440,0 +527,1 @@\n+        }\n@@ -442,0 +530,1 @@\n+        current_glyphs->del (item_gid);\n@@ -456,1 +545,0 @@\n-      contour_point_vector_t comp_points;\n@@ -460,0 +548,7 @@\n+        hb_codepoint_t item_gid = item.get_gid ();\n+\n+        if (unlikely (current_glyphs->has (item_gid)))\n+          continue;\n+\n+        current_glyphs->add (item_gid);\n+\n@@ -462,2 +557,1 @@\n-\n-        comp_points.reset ();\n+        assert (record_points.length == item_num_points);\n@@ -466,1 +560,4 @@\n-        if (item.is_reset_unspecified_axes ())\n+        \/* Copying coords is expensive; so we have put an arbitrary\n+         * limit on the max number of coords for now. *\/\n+        if (item.is_reset_unspecified_axes () ||\n+            coords.length > HB_GLYF_VAR_COMPOSITE_MAX_AXES)\n@@ -472,1 +569,4 @@\n-        if (unlikely (!glyf_accelerator.glyph_for_gid (item.get_gid ())\n+        unsigned old_count = all_points.length;\n+\n+        if (unlikely ((!phantom_only || (use_my_metrics && item.is_use_my_metrics ())) &&\n+                      !glyf_accelerator.glyph_for_gid (item_gid)\n@@ -475,1 +575,1 @@\n-                                                    comp_points,\n+                                                    all_points,\n@@ -483,0 +583,1 @@\n+                                                    current_glyphs,\n@@ -485,0 +586,2 @@\n+        {\n+          current_glyphs->del (item_gid);\n@@ -486,0 +589,3 @@\n+        }\n+\n+        auto comp_points = all_points.as_array ().sub_array (old_count);\n@@ -488,1 +594,2 @@\n-        item.transform_points (record_points, comp_points);\n+        if (comp_points) \/\/ Empty in case of phantom_only\n+          item.transform_points (record_points, comp_points);\n@@ -495,1 +602,1 @@\n-        all_points.extend (comp_points.as_array ().sub_array (0, comp_points.length - PHANTOM_COUNT));\n+        all_points.resize (all_points.length - PHANTOM_COUNT);\n@@ -498,0 +605,2 @@\n+        {\n+          current_glyphs->del (item_gid);\n@@ -499,0 +608,1 @@\n+        }\n@@ -501,0 +611,2 @@\n+\n+        current_glyphs->del (item_gid);\n@@ -515,3 +627,4 @@\n-      contour_point_t delta;\n-      delta.init (-phantoms[PHANTOM_LEFT].x, 0.f);\n-      if (delta.x) all_points.translate (delta);\n+      int v = -phantoms[PHANTOM_LEFT].x;\n+      if (v)\n+        for (auto &point : all_points)\n+          point.x += v;\n@@ -548,0 +661,1 @@\n+    else if (num_contours == -1) type = COMPOSITE;\n@@ -551,1 +665,1 @@\n-    else type = COMPOSITE; \/* negative numbers *\/\n+    else type = EMPTY; \/\/ Spec deviation; Spec says COMPOSITE, but not seen in the wild.\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/glyf\/Glyph.hh","additions":167,"deletions":53,"binary":false,"changes":220,"status":"modified"},{"patch":"@@ -127,1 +127,1 @@\n-                          contour_point_vector_t &points_ \/* IN\/OUT *\/,\n+                          hb_array_t<contour_point_t> points_ \/* IN\/OUT *\/,\n@@ -149,1 +149,1 @@\n-                           contour_point_vector_t &points_ \/* IN\/OUT *\/,\n+                           hb_array_t<contour_point_t> points_ \/* IN\/OUT *\/,\n@@ -157,2 +157,1 @@\n-    unsigned count = points_.length;\n-    for (unsigned i = 0; i < count; i++)\n+    for (auto &point : points_)\n@@ -160,1 +159,1 @@\n-      unsigned flag = points_[i].flag;\n+      unsigned flag = point.flag;\n@@ -178,1 +177,1 @@\n-      points_.arrayZ[i].*m = v;\n+      point.*m = v;\n@@ -183,1 +182,1 @@\n-  bool get_contour_points (contour_point_vector_t &points_ \/* OUT *\/,\n+  bool get_contour_points (contour_point_vector_t &points \/* OUT *\/,\n@@ -188,1 +187,1 @@\n-    assert (num_contours);\n+    assert (num_contours > 0);\n@@ -193,2 +192,6 @@\n-    points_.alloc (num_points + 4, true); \/\/ Allocate for phantom points, to avoid a possible copy\n-    if (!points_.resize (num_points)) return false;\n+    unsigned old_length = points.length;\n+    points.alloc (points.length + num_points + 4, true); \/\/ Allocate for phantom points, to avoid a possible copy\n+    if (unlikely (!points.resize (points.length + num_points, false))) return false;\n+    auto points_ = points.as_array ().sub_array (old_length);\n+    if (!phantom_only)\n+      hb_memset (points_.arrayZ, 0, sizeof (contour_point_t) * num_points);\n@@ -217,1 +220,1 @@\n-                            uint8_t &flag,\n+                            unsigned &flag,\n@@ -242,3 +245,3 @@\n-  static void encode_flag (uint8_t &flag,\n-                           uint8_t &repeat,\n-                           uint8_t lastflag,\n+  static void encode_flag (unsigned flag,\n+                           unsigned &repeat,\n+                           unsigned lastflag,\n@@ -265,1 +268,1 @@\n-      flags.push (flag);\n+      flags.arrayZ[flags.length++] = flag;\n@@ -285,1 +288,1 @@\n-    uint8_t lastflag = 255, repeat = 0;\n+    unsigned lastflag = 255, repeat = 0;\n@@ -290,2 +293,2 @@\n-      uint8_t flag = all_points.arrayZ[i].flag;\n-      flag &= FLAG_ON_CURVE + FLAG_OVERLAP_SIMPLE;\n+      unsigned flag = all_points.arrayZ[i].flag;\n+      flag &= FLAG_ON_CURVE | FLAG_OVERLAP_SIMPLE | FLAG_CUBIC;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/glyf\/SimpleGlyph.hh","additions":21,"deletions":18,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-                  const hb_subset_plan_t *plan)\n+                  const hb_subset_plan_t *plan) const\n@@ -43,1 +43,1 @@\n-      c->embed (pad);\n+      (void) c->embed (pad);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/glyf\/SubsetGlyph.hh","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+    unsigned fl = flags;\n@@ -41,1 +42,1 @@\n-    unsigned axis_width = (flags & AXIS_INDICES_ARE_SHORT) ? 4 : 3;\n+    unsigned axis_width = (fl & AXIS_INDICES_ARE_SHORT) ? 4 : 3;\n@@ -44,3 +45,1 @@\n-    \/\/ gid\n-    size += 2;\n-    if (flags & GID_IS_24BIT)           size += 1;\n+    if (fl & GID_IS_24BIT)      size += 1;\n@@ -48,9 +47,7 @@\n-    if (flags & HAVE_TRANSLATE_X)       size += 2;\n-    if (flags & HAVE_TRANSLATE_Y)       size += 2;\n-    if (flags & HAVE_ROTATION)          size += 2;\n-    if (flags & HAVE_SCALE_X)           size += 2;\n-    if (flags & HAVE_SCALE_Y)           size += 2;\n-    if (flags & HAVE_SKEW_X)            size += 2;\n-    if (flags & HAVE_SKEW_Y)            size += 2;\n-    if (flags & HAVE_TCENTER_X)         size += 2;\n-    if (flags & HAVE_TCENTER_Y)         size += 2;\n+    \/\/ 2 bytes each for the following flags\n+    fl = fl & (HAVE_TRANSLATE_X | HAVE_TRANSLATE_Y |\n+               HAVE_ROTATION |\n+               HAVE_SCALE_X | HAVE_SCALE_Y |\n+               HAVE_SKEW_X | HAVE_SKEW_Y |\n+               HAVE_TCENTER_X | HAVE_TCENTER_Y);\n+    size += hb_popcount (fl) * 2;\n@@ -69,1 +66,1 @@\n-      return StructAfter<const HBGlyphID24> (numAxes);\n+      return * (const HBGlyphID24 *) &pad;\n@@ -71,1 +68,1 @@\n-      return StructAfter<const HBGlyphID16> (numAxes);\n+      return * (const HBGlyphID16 *) &pad;\n@@ -77,1 +74,1 @@\n-      StructAfter<HBGlyphID24> (numAxes) = gid;\n+      * (HBGlyphID24 *) &pad = gid;\n@@ -79,1 +76,1 @@\n-      StructAfter<HBGlyphID16> (numAxes) = gid;\n+      * (HBGlyphID16 *) &pad = gid;\n@@ -89,0 +86,1 @@\n+    unsigned fl = flags;\n@@ -90,6 +88,14 @@\n-    if (flags & AXES_HAVE_VARIATION)                    num += numAxes;\n-    if (flags & (HAVE_TRANSLATE_X | HAVE_TRANSLATE_Y))  num++;\n-    if (flags & HAVE_ROTATION)                          num++;\n-    if (flags & (HAVE_SCALE_X | HAVE_SCALE_Y))          num++;\n-    if (flags & (HAVE_SKEW_X | HAVE_SKEW_Y))            num++;\n-    if (flags & (HAVE_TCENTER_X | HAVE_TCENTER_Y))      num++;\n+    if (fl & AXES_HAVE_VARIATION)                       num += numAxes;\n+\n+    \/* Hopefully faster code, relying on the value of the flags. *\/\n+    fl = (((fl & (HAVE_TRANSLATE_Y | HAVE_SCALE_Y | HAVE_SKEW_Y | HAVE_TCENTER_Y)) >> 1) | fl) &\n+         (HAVE_TRANSLATE_X | HAVE_ROTATION | HAVE_SCALE_X | HAVE_SKEW_X | HAVE_TCENTER_X);\n+    num += hb_popcount (fl);\n+    return num;\n+\n+    \/* Slower but more readable code. *\/\n+    if (fl & (HAVE_TRANSLATE_X | HAVE_TRANSLATE_Y))     num++;\n+    if (fl & HAVE_ROTATION)                             num++;\n+    if (fl & (HAVE_SCALE_X | HAVE_SCALE_Y))             num++;\n+    if (fl & (HAVE_SKEW_X | HAVE_SKEW_Y))               num++;\n+    if (fl & (HAVE_TCENTER_X | HAVE_TCENTER_Y))         num++;\n@@ -99,2 +105,2 @@\n-  void transform_points (hb_array_t<contour_point_t> record_points,\n-                         contour_point_vector_t &points) const\n+  void transform_points (hb_array_t<const contour_point_t> record_points,\n+                         hb_array_t<contour_point_t> points) const\n@@ -105,1 +111,4 @@\n-    get_transformation_from_points (record_points, matrix, trans);\n+    get_transformation_from_points (record_points.arrayZ, matrix, trans);\n+\n+    auto arrayZ = points.arrayZ;\n+    unsigned count = points.length;\n@@ -107,2 +116,8 @@\n-    points.transform (matrix);\n-    points.translate (trans);\n+    if (matrix[0] != 1.f || matrix[1] != 0.f ||\n+        matrix[2] != 0.f || matrix[3] != 1.f)\n+      for (unsigned i = 0; i < count; i++)\n+        arrayZ[i].transform (matrix);\n+\n+    if (trans.x != 0.f || trans.y != 0.f)\n+      for (unsigned i = 0; i < count; i++)\n+        arrayZ[i].translate (trans);\n@@ -139,3 +154,5 @@\n-    \/\/ https:\/\/github.com\/fonttools\/fonttools\/blob\/f66ee05f71c8b57b5f519ee975e95edcd1466e14\/Lib\/fontTools\/misc\/transform.py#L213\n-    float other[6] = {1.f, 0.f, 0.f, 1.f, translateX, translateY};\n-    transform (matrix, trans, other);\n+    if (!translateX && !translateY)\n+      return;\n+\n+    trans.x += matrix[0] * translateX + matrix[2] * translateY;\n+    trans.y += matrix[1] * translateX + matrix[3] * translateY;\n@@ -147,3 +164,7 @@\n-    \/\/ https:\/\/github.com\/fonttools\/fonttools\/blob\/f66ee05f71c8b57b5f519ee975e95edcd1466e14\/Lib\/fontTools\/misc\/transform.py#L224\n-    float other[6] = {scaleX, 0.f, 0.f, scaleY, 0.f, 0.f};\n-    transform (matrix, trans, other);\n+    if (scaleX == 1.f && scaleY == 1.f)\n+      return;\n+\n+    matrix[0] *= scaleX;\n+    matrix[1] *= scaleX;\n+    matrix[2] *= scaleY;\n+    matrix[3] *= scaleY;\n@@ -155,0 +176,3 @@\n+    if (!rotation)\n+      return;\n+\n@@ -157,2 +181,8 @@\n-    float c = cosf (rotation);\n-    float s = sinf (rotation);\n+    float c;\n+    float s;\n+#ifdef HAVE_SINCOSF\n+    sincosf (rotation, &s, &c);\n+#else\n+    c = cosf (rotation);\n+    s = sinf (rotation);\n+#endif\n@@ -166,0 +196,3 @@\n+    if (!skewX && !skewY)\n+      return;\n+\n@@ -169,1 +202,5 @@\n-    float other[6] = {1.f, tanf (skewY), tanf (skewX), 1.f, 0.f, 0.f};\n+    float other[6] = {1.f,\n+                      skewY ? tanf (skewY) : 0.f,\n+                      skewX ? tanf (skewX) : 0.f,\n+                      1.f,\n+                      0.f, 0.f};\n@@ -175,10 +212,0 @@\n-    float translateX = 0.f;\n-    float translateY = 0.f;\n-    float rotation = 0.f;\n-    float scaleX = 1.f * (1 << 10);\n-    float scaleY = 1.f * (1 << 10);\n-    float skewX = 0.f;\n-    float skewY = 0.f;\n-    float tCenterX = 0.f;\n-    float tCenterY = 0.f;\n-\n@@ -187,1 +214,4 @@\n-    if (unlikely (!points.resize (points.length + num_points))) return false;\n+    points.alloc (points.length + num_points + 4); \/\/ For phantom points\n+    if (unlikely (!points.resize (points.length + num_points, false))) return false;\n+    contour_point_t *rec_points = points.arrayZ + (points.length - num_points);\n+    hb_memset (rec_points, 0, num_points * sizeof (rec_points[0]));\n@@ -189,2 +219,1 @@\n-    unsigned axis_width = (flags & AXIS_INDICES_ARE_SHORT) ? 2 : 1;\n-    unsigned axes_size = numAxes * axis_width;\n+    unsigned fl = flags;\n@@ -192,3 +221,3 @@\n-    const F2DOT14 *q = (const F2DOT14 *) (axes_size +\n-                                          (flags & GID_IS_24BIT ? 3 : 2) +\n-                                          &StructAfter<const HBUINT8> (numAxes));\n+    unsigned num_axes = numAxes;\n+    unsigned axis_width = (fl & AXIS_INDICES_ARE_SHORT) ? 2 : 1;\n+    unsigned axes_size = num_axes * axis_width;\n@@ -196,1 +225,3 @@\n-    hb_array_t<contour_point_t> rec_points = points.as_array ().sub_array (points.length - num_points);\n+    const F2DOT14 *q = (const F2DOT14 *) (axes_size +\n+                                          (fl & GID_IS_24BIT ? 3 : 2) +\n+                                          (const HBUINT8 *) &pad);\n@@ -198,2 +229,2 @@\n-    unsigned count = numAxes;\n-    if (flags & AXES_HAVE_VARIATION)\n+    unsigned count = num_axes;\n+    if (fl & AXES_HAVE_VARIATION)\n@@ -202,2 +233,1 @@\n-        rec_points[i].x = q++->to_int ();\n-      rec_points += count;\n+        rec_points++->x = q++->to_int ();\n@@ -210,14 +240,1 @@\n-    if (flags & HAVE_TRANSLATE_X)       translateX = * (const FWORD *) p++;\n-    if (flags & HAVE_TRANSLATE_Y)       translateY = * (const FWORD *) p++;\n-    if (flags & HAVE_ROTATION)          rotation = ((const F4DOT12 *) p++)->to_int ();\n-    if (flags & HAVE_SCALE_X)           scaleX = ((const F6DOT10 *) p++)->to_int ();\n-    if (flags & HAVE_SCALE_Y)           scaleY = ((const F6DOT10 *) p++)->to_int ();\n-    if (flags & HAVE_SKEW_X)            skewX = ((const F4DOT12 *) p++)->to_int ();\n-    if (flags & HAVE_SKEW_Y)            skewY = ((const F4DOT12 *) p++)->to_int ();\n-    if (flags & HAVE_TCENTER_X)         tCenterX = * (const FWORD *) p++;\n-    if (flags & HAVE_TCENTER_Y)         tCenterY = * (const FWORD *) p++;\n-\n-    if ((flags & UNIFORM_SCALE) && !(flags & HAVE_SCALE_Y))\n-      scaleY = scaleX;\n-\n-    if (flags & (HAVE_TRANSLATE_X | HAVE_TRANSLATE_Y))\n+    if (fl & (HAVE_TRANSLATE_X | HAVE_TRANSLATE_Y))\n@@ -225,2 +242,4 @@\n-      rec_points[0].x = translateX;\n-      rec_points[0].y = translateY;\n+      int translateX = (fl & HAVE_TRANSLATE_X) ? * (const FWORD *) p++ : 0;\n+      int translateY = (fl & HAVE_TRANSLATE_Y) ? * (const FWORD *) p++ : 0;\n+      rec_points->x = translateX;\n+      rec_points->y = translateY;\n@@ -229,1 +248,1 @@\n-    if (flags & HAVE_ROTATION)\n+    if (fl & HAVE_ROTATION)\n@@ -231,1 +250,2 @@\n-      rec_points[0].x = rotation;\n+      int rotation = (fl & HAVE_ROTATION) ? ((const F4DOT12 *) p++)->to_int () : 0;\n+      rec_points->x = rotation;\n@@ -234,1 +254,1 @@\n-    if (flags & (HAVE_SCALE_X | HAVE_SCALE_Y))\n+    if (fl & (HAVE_SCALE_X | HAVE_SCALE_Y))\n@@ -236,2 +256,6 @@\n-      rec_points[0].x = scaleX;\n-      rec_points[0].y = scaleY;\n+      int scaleX = (fl & HAVE_SCALE_X) ? ((const F6DOT10 *) p++)->to_int () : 1 << 10;\n+      int scaleY = (fl & HAVE_SCALE_Y) ? ((const F6DOT10 *) p++)->to_int () : 1 << 10;\n+      if ((fl & UNIFORM_SCALE) && !(fl & HAVE_SCALE_Y))\n+        scaleY = scaleX;\n+      rec_points->x = scaleX;\n+      rec_points->y = scaleY;\n@@ -240,1 +264,1 @@\n-    if (flags & (HAVE_SKEW_X | HAVE_SKEW_Y))\n+    if (fl & (HAVE_SKEW_X | HAVE_SKEW_Y))\n@@ -242,2 +266,4 @@\n-      rec_points[0].x = skewX;\n-      rec_points[0].y = skewY;\n+      int skewX = (fl & HAVE_SKEW_X) ? ((const F4DOT12 *) p++)->to_int () : 0;\n+      int skewY = (fl & HAVE_SKEW_Y) ? ((const F4DOT12 *) p++)->to_int () : 0;\n+      rec_points->x = skewX;\n+      rec_points->y = skewY;\n@@ -246,1 +272,1 @@\n-    if (flags & (HAVE_TCENTER_X | HAVE_TCENTER_Y))\n+    if (fl & (HAVE_TCENTER_X | HAVE_TCENTER_Y))\n@@ -248,2 +274,4 @@\n-      rec_points[0].x = tCenterX;\n-      rec_points[0].y = tCenterY;\n+      int tCenterX = (fl & HAVE_TCENTER_X) ? * (const FWORD *) p++ : 0;\n+      int tCenterY = (fl & HAVE_TCENTER_Y) ? * (const FWORD *) p++ : 0;\n+      rec_points->x = tCenterX;\n+      rec_points->y = tCenterY;\n@@ -252,1 +280,0 @@\n-    assert (!rec_points);\n@@ -257,1 +284,1 @@\n-  void get_transformation_from_points (hb_array_t<contour_point_t> rec_points,\n+  void get_transformation_from_points (const contour_point_t *rec_points,\n@@ -260,1 +287,3 @@\n-    if (flags & AXES_HAVE_VARIATION)\n+    unsigned fl = flags;\n+\n+    if (fl & AXES_HAVE_VARIATION)\n@@ -277,1 +306,1 @@\n-    if (flags & (HAVE_TRANSLATE_X | HAVE_TRANSLATE_Y))\n+    if (fl & (HAVE_TRANSLATE_X | HAVE_TRANSLATE_Y))\n@@ -279,2 +308,2 @@\n-      translateX = rec_points[0].x;\n-      translateY = rec_points[0].y;\n+      translateX = rec_points->x;\n+      translateY = rec_points->y;\n@@ -283,1 +312,1 @@\n-    if (flags & HAVE_ROTATION)\n+    if (fl & HAVE_ROTATION)\n@@ -285,1 +314,1 @@\n-      rotation = rec_points[0].x \/ (1 << 12);\n+      rotation = rec_points->x \/ (1 << 12);\n@@ -288,1 +317,1 @@\n-    if (flags & (HAVE_SCALE_X | HAVE_SCALE_Y))\n+    if (fl & (HAVE_SCALE_X | HAVE_SCALE_Y))\n@@ -290,2 +319,2 @@\n-      scaleX = rec_points[0].x \/ (1 << 10);\n-      scaleY = rec_points[0].y \/ (1 << 10);\n+      scaleX = rec_points->x \/ (1 << 10);\n+      scaleY = rec_points->y \/ (1 << 10);\n@@ -294,1 +323,1 @@\n-    if (flags & (HAVE_SKEW_X | HAVE_SKEW_Y))\n+    if (fl & (HAVE_SKEW_X | HAVE_SKEW_Y))\n@@ -296,2 +325,2 @@\n-      skewX = rec_points[0].x \/ (1 << 12);\n-      skewY = rec_points[0].y \/ (1 << 12);\n+      skewX = rec_points->x \/ (1 << 12);\n+      skewY = rec_points->y \/ (1 << 12);\n@@ -300,1 +329,1 @@\n-    if (flags & (HAVE_TCENTER_X | HAVE_TCENTER_Y))\n+    if (fl & (HAVE_TCENTER_X | HAVE_TCENTER_Y))\n@@ -302,2 +331,2 @@\n-      tCenterX = rec_points[0].x;\n-      tCenterY = rec_points[0].y;\n+      tCenterX = rec_points->x;\n+      tCenterY = rec_points->y;\n@@ -306,1 +335,0 @@\n-    assert (!rec_points);\n@@ -320,0 +348,1 @@\n+    unsigned num_axes = numAxes;\n@@ -324,1 +353,1 @@\n-    const F2DOT14 *a = (const F2DOT14 *) ((HBUINT8 *) (axis_width == 1 ? (p + numAxes) : (HBUINT8 *) (q + numAxes)));\n+    const F2DOT14 *a = (const F2DOT14 *) ((HBUINT8 *) (axis_width == 1 ? (p + num_axes) : (HBUINT8 *) (q + num_axes)));\n@@ -326,1 +355,1 @@\n-    unsigned count = numAxes;\n+    unsigned count = num_axes;\n@@ -331,1 +360,1 @@\n-      signed v = have_variations ? rec_points[i].x : a++->to_int ();\n+      signed v = have_variations ? rec_points.arrayZ[i].x : a++->to_int ();\n@@ -341,0 +370,1 @@\n+  HBUINT16      pad;\n@@ -342,1 +372,1 @@\n-  DEFINE_SIZE_MIN (3);\n+  DEFINE_SIZE_MIN (5);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/glyf\/VarCompositeGlyph.hh","additions":137,"deletions":107,"binary":false,"changes":244,"status":"modified"},{"patch":"@@ -19,0 +19,2 @@\n+    if (unlikely (idx >= HB_GLYF_VAR_COMPOSITE_MAX_AXES))\n+      return Crap(int);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/glyf\/coord-setter.hh","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -15,3 +15,2 @@\n-template<typename IteratorIn, typename IteratorOut,\n-         hb_requires (hb_is_source_of (IteratorIn, unsigned int)),\n-         hb_requires (hb_is_sink_of (IteratorOut, unsigned))>\n+template<typename IteratorIn, typename TypeOut,\n+         hb_requires (hb_is_source_of (IteratorIn, unsigned int))>\n@@ -19,1 +18,5 @@\n-_write_loca (IteratorIn&& it, bool short_offsets, IteratorOut&& dest)\n+_write_loca (IteratorIn&& it,\n+             const hb_sorted_vector_t<hb_codepoint_pair_t> new_to_old_gid_list,\n+             bool short_offsets,\n+             TypeOut *dest,\n+             unsigned num_offsets)\n@@ -22,11 +25,28 @@\n-  unsigned int offset = 0;\n-  dest << 0;\n-  + it\n-  | hb_map ([=, &offset] (unsigned int padded_size)\n-            {\n-              offset += padded_size;\n-              DEBUG_MSG (SUBSET, nullptr, \"loca entry offset %u\", offset);\n-              return offset >> right_shift;\n-            })\n-  | hb_sink (dest)\n-  ;\n+  unsigned offset = 0;\n+  TypeOut value;\n+  value = 0;\n+  *dest++ = value;\n+  hb_codepoint_t last = 0;\n+  for (auto _ : new_to_old_gid_list)\n+  {\n+    hb_codepoint_t gid = _.first;\n+    for (; last < gid; last++)\n+    {\n+      DEBUG_MSG (SUBSET, nullptr, \"loca entry empty offset %u\", offset);\n+      *dest++ = value;\n+    }\n+\n+    unsigned padded_size = *it++;\n+    offset += padded_size;\n+    DEBUG_MSG (SUBSET, nullptr, \"loca entry gid %u offset %u padded-size %u\", gid, offset, padded_size);\n+    value = offset >> right_shift;\n+    *dest++ = value;\n+\n+    last++; \/\/ Skip over gid\n+  }\n+  unsigned num_glyphs = num_offsets - 1;\n+  for (; last < num_glyphs; last++)\n+  {\n+    DEBUG_MSG (SUBSET, nullptr, \"loca entry empty offset %u\", offset);\n+    *dest++ = value;\n+  }\n@@ -70,1 +90,3 @@\n-_add_loca_and_head (hb_subset_plan_t * plan, Iterator padded_offsets, bool use_short_loca)\n+_add_loca_and_head (hb_subset_context_t *c,\n+                    Iterator padded_offsets,\n+                    bool use_short_loca)\n@@ -72,1 +94,1 @@\n-  unsigned num_offsets = padded_offsets.len () + 1;\n+  unsigned num_offsets = c->plan->num_output_glyphs () + 1;\n@@ -74,1 +96,2 @@\n-  char *loca_prime_data = (char *) hb_calloc (entry_size, num_offsets);\n+\n+  char *loca_prime_data = (char *) hb_malloc (entry_size * num_offsets);\n@@ -82,1 +105,1 @@\n-    _write_loca (padded_offsets, true, hb_array ((HBUINT16 *) loca_prime_data, num_offsets));\n+    _write_loca (padded_offsets, c->plan->new_to_old_gid_list, true, (HBUINT16 *) loca_prime_data, num_offsets);\n@@ -84,1 +107,1 @@\n-    _write_loca (padded_offsets, false, hb_array ((HBUINT32 *) loca_prime_data, num_offsets));\n+    _write_loca (padded_offsets, c->plan->new_to_old_gid_list, false, (HBUINT32 *) loca_prime_data, num_offsets);\n@@ -92,2 +115,2 @@\n-  bool result = plan->add_table (HB_OT_TAG_loca, loca_blob)\n-             && _add_head_and_set_loca_version (plan, use_short_loca);\n+  bool result = c->plan->add_table (HB_OT_TAG_loca, loca_blob)\n+             && _add_head_and_set_loca_version (c->plan, use_short_loca);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/glyf\/glyf-helpers.hh","additions":45,"deletions":22,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -88,3 +88,0 @@\n-    glyf *glyf_prime = c->serializer->start_embed <glyf> ();\n-    if (unlikely (!c->serializer->check_success (glyf_prime))) return_trace (false);\n-\n@@ -95,1 +92,2 @@\n-      if (unlikely (!font)) return false;\n+      if (unlikely (!font))\n+        return_trace (false);\n@@ -99,6 +97,2 @@\n-    unsigned num_glyphs = c->plan->num_output_glyphs ();\n-    if (unlikely (!padded_offsets.resize (num_glyphs)))\n-    {\n-      hb_font_destroy (font);\n-      return false;\n-    }\n+    if (unlikely (!padded_offsets.alloc (c->plan->new_to_old_gid_list.length, true)))\n+      return_trace (false);\n@@ -110,1 +104,1 @@\n-      return false;\n+      return_trace (false);\n@@ -117,1 +111,1 @@\n-    for (unsigned i = 0; i < num_glyphs; i++)\n+    for (auto &g : glyphs)\n@@ -119,2 +113,3 @@\n-      padded_offsets[i] = glyphs[i].padded_size ();\n-      max_offset += padded_offsets[i];\n+      unsigned size = g.padded_size ();\n+      padded_offsets.push (size);\n+      max_offset += size;\n@@ -127,3 +122,5 @@\n-    if (!use_short_loca) {\n-      for (unsigned i = 0; i < num_glyphs; i++)\n-        padded_offsets[i] = glyphs[i].length ();\n+    if (!use_short_loca)\n+    {\n+      padded_offsets.resize (0);\n+      for (auto &g : glyphs)\n+        padded_offsets.push (g.length ());\n@@ -132,1 +129,2 @@\n-    bool result = glyf_prime->serialize (c->serializer, glyphs.writer (), use_short_loca, c->plan);\n+    auto *glyf_prime = c->serializer->start_embed <glyf> ();\n+    bool result = glyf_prime->serialize (c->serializer, hb_iter (glyphs), use_short_loca, c->plan);\n@@ -136,3 +134,4 @@\n-    if (!result) return false;\n-\n-    if (unlikely (c->serializer->in_error ())) return_trace (false);\n+    if (unlikely (!c->serializer->check_success (glyf_impl::_add_loca_and_head (c,\n+                                                 padded_offsets.iter (),\n+                                                 use_short_loca))))\n+      return_trace (false);\n@@ -140,3 +139,1 @@\n-    return_trace (c->serializer->check_success (glyf_impl::_add_loca_and_head (c->plan,\n-                                                                               padded_offsets.iter (),\n-                                                                               use_short_loca)));\n+    return result;\n@@ -148,1 +145,1 @@\n-                           hb_vector_t<glyf_impl::SubsetGlyph> &glyphs \/* OUT *\/) const;\n+                           hb_vector_t<glyf_impl::SubsetGlyph>& glyphs \/* OUT *\/) const;\n@@ -155,2 +152,2 @@\n-    for (unsigned i = 0; i < glyphs.length; i++)\n-      glyphs[i].free_compiled_bytes ();\n+    for (auto &g : glyphs)\n+      g.free_compiled_bytes ();\n@@ -225,0 +222,4 @@\n+    unsigned count = all_points.length;\n+    assert (count >= glyf_impl::PHANTOM_COUNT);\n+    count -= glyf_impl::PHANTOM_COUNT;\n+\n@@ -227,5 +228,2 @@\n-      unsigned count = all_points.length;\n-      assert (count >= glyf_impl::PHANTOM_COUNT);\n-      count -= glyf_impl::PHANTOM_COUNT;\n-      for (unsigned point_index = 0; point_index < count; point_index++)\n-        consumer.consume_point (all_points[point_index]);\n+      for (auto &point : all_points.as_array ().sub_array (0, count))\n+        consumer.consume_point (point);\n@@ -239,1 +237,1 @@\n-        phantoms[i] = all_points[all_points.length - glyf_impl::PHANTOM_COUNT + i];\n+        phantoms[i] = all_points.arrayZ[count + i];\n@@ -302,0 +300,1 @@\n+    HB_ALWAYS_INLINE\n@@ -434,2 +433,1 @@\n-  unsigned num_glyphs = plan->num_output_glyphs ();\n-  if (!glyphs.resize (num_glyphs)) return false;\n+  if (!glyphs.alloc (plan->new_to_old_gid_list.length, true)) return false;\n@@ -437,1 +435,1 @@\n-  for (auto p : plan->glyph_map->iter ())\n+  for (const auto &pair : plan->new_to_old_gid_list)\n@@ -439,3 +437,5 @@\n-    unsigned new_gid = p.second;\n-    glyf_impl::SubsetGlyph& subset_glyph = glyphs.arrayZ[new_gid];\n-    subset_glyph.old_gid = p.first;\n+    hb_codepoint_t new_gid = pair.first;\n+    hb_codepoint_t old_gid = pair.second;\n+    glyf_impl::SubsetGlyph *p = glyphs.push ();\n+    glyf_impl::SubsetGlyph& subset_glyph = *p;\n+    subset_glyph.old_gid = old_gid;\n@@ -443,1 +443,1 @@\n-    if (unlikely (new_gid == 0 &&\n+    if (unlikely (old_gid == 0 && new_gid == 0 &&\n@@ -490,1 +490,1 @@\n-    var.value = _.second;\n+    var.value = _.second.middle;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/glyf\/glyf.hh","additions":41,"deletions":41,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -24,2 +24,2 @@\n-    float x = 0.;\n-    float y = 0.;\n+    float x;\n+    float y;\n@@ -27,2 +27,2 @@\n-    optional_point_t lerp (optional_point_t p, float t)\n-    { return optional_point_t (x + t * (p.x - x), y + t * (p.y - y)); }\n+    optional_point_t mid (optional_point_t p)\n+    { return optional_point_t ((x + p.x) * 0.5f, (y + p.y) * 0.5f); }\n@@ -31,6 +31,2 @@\n-  path_builder_t (hb_font_t *font_, hb_draw_session_t &draw_session_)\n-  {\n-    font = font_;\n-    draw_session = &draw_session_;\n-    first_oncurve = first_offcurve = first_offcurve2 = last_offcurve = last_offcurve2 = optional_point_t ();\n-  }\n+  path_builder_t (hb_font_t *font_, hb_draw_session_t &draw_session_) :\n+    font (font_), draw_session (&draw_session_) {}\n@@ -44,0 +40,1 @@\n+  HB_ALWAYS_INLINE\n@@ -53,1 +50,1 @@\n-    if (!first_oncurve)\n+    if (unlikely (!first_oncurve))\n@@ -69,1 +66,1 @@\n-          optional_point_t mid = first_offcurve.lerp (p, .5f);\n+          optional_point_t mid = first_offcurve.mid (p);\n@@ -105,1 +102,1 @@\n-            optional_point_t mid = last_offcurve.lerp (p, .5f);\n+            optional_point_t mid = last_offcurve.mid (p);\n@@ -130,1 +127,1 @@\n-    if (point.is_end_point)\n+    if (unlikely (point.is_end_point))\n@@ -134,3 +131,3 @@\n-        optional_point_t mid = last_offcurve.lerp (first_offcurve2 ?\n-                                                   first_offcurve2 :\n-                                                   first_offcurve, .5f);\n+        optional_point_t mid = last_offcurve.mid (first_offcurve2 ?\n+                                                  first_offcurve2 :\n+                                                  first_offcurve);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/glyf\/path-builder.hh","additions":14,"deletions":17,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -362,1 +362,1 @@\n-      memcpy (name_records, &record, NameRecord::static_size);\n+      hb_memcpy (name_records, &record, NameRecord::static_size);\n@@ -387,4 +387,1 @@\n-    TRACE_SUBSET (this);\n-\n-    name *name_prime = c->serializer->start_embed<name> ();\n-    if (unlikely (!name_prime)) return_trace (false);\n+    auto *name_prime = c->serializer->start_embed<name> ();\n@@ -439,1 +436,1 @@\n-        return_trace (false);\n+        return false;\n@@ -451,2 +448,2 @@\n-    return (name_prime->serialize (c->serializer, it,\n-                                   std::addressof (this + stringOffset)\n+    return name_prime->serialize (c->serializer, it,\n+                                  std::addressof (this + stringOffset)\n@@ -454,2 +451,2 @@\n-                                   , insert_name_records\n-                                   , name_table_overrides\n+                                  , insert_name_records\n+                                  , name_table_overrides\n@@ -457,1 +454,1 @@\n-                                   ));\n+                                  );\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/name\/name.hh","additions":8,"deletions":11,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -109,1 +109,1 @@\n-  not going to see layout problems a code point at a time but it needs to\n+  not going to see layout problems in code at this point of time but it needs to\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/UPDATING.txt","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-    class_def_prime_vertex.parents.push (parent_id);\n+    class_def_prime_vertex.add_parent (parent_id);\n@@ -97,1 +97,7 @@\n-    c.add_buffer ((char *) class_def_copy.arrayZ); \/\/ Give ownership to the context, it will cleanup the buffer.\n+    if (!class_def_copy.arrayZ) return false;\n+    \/\/ Give ownership to the context, it will cleanup the buffer.\n+    if (!c.add_buffer ((char *) class_def_copy.arrayZ))\n+    {\n+      hb_free ((char *) class_def_copy.arrayZ);\n+      return false;\n+    }\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/graph\/classdef-graph.hh","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -99,1 +99,1 @@\n-    coverage_prime_vertex.parents.push (parent_id);\n+    coverage_prime_vertex.add_parent (parent_id);\n@@ -121,1 +121,7 @@\n-    c.add_buffer ((char *) coverage_copy.arrayZ); \/\/ Give ownership to the context, it will cleanup the buffer.\n+    if (!coverage_copy.arrayZ) return false;\n+    \/\/ Give ownership to the context, it will cleanup the buffer.\n+    if (!c.add_buffer ((char *) coverage_copy.arrayZ))\n+    {\n+      hb_free ((char *) coverage_copy.arrayZ);\n+      return false;\n+    }\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/graph\/coverage-graph.hh","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -46,2 +46,1 @@\n-    int64_t space = 0 ;\n-    hb_vector_t<unsigned> parents;\n+    unsigned space = 0 ;\n@@ -51,1 +50,18 @@\n-\n+    private:\n+    unsigned incoming_edges_ = 0;\n+    unsigned single_parent = (unsigned) -1;\n+    hb_hashmap_t<unsigned, unsigned> parents;\n+    public:\n+\n+    auto parents_iter () const HB_AUTO_RETURN\n+    (\n+      hb_concat (\n+        hb_iter (&single_parent, single_parent != (unsigned) -1),\n+        parents.keys_ref ()\n+      )\n+    )\n+\n+    bool in_error () const\n+    {\n+      return parents.in_error ();\n+    }\n@@ -146,0 +162,1 @@\n+      hb_swap (a.single_parent, b.single_parent);\n@@ -147,0 +164,1 @@\n+      hb_swap (a.incoming_edges_, b.incoming_edges_);\n@@ -157,0 +175,1 @@\n+      result.alloc (obj.real_links.length);\n@@ -166,1 +185,1 @@\n-      return parents.length > 1;\n+      return parents.get_population () > 1;\n@@ -171,1 +190,40 @@\n-      return parents.length;\n+      if (HB_DEBUG_SUBSET_REPACK)\n+       {\n+        assert (incoming_edges_ == (single_parent != (unsigned) -1) +\n+                (parents.values_ref () | hb_reduce (hb_add, 0)));\n+       }\n+      return incoming_edges_;\n+    }\n+\n+    void reset_parents ()\n+    {\n+      incoming_edges_ = 0;\n+      single_parent = (unsigned) -1;\n+      parents.reset ();\n+    }\n+\n+    void add_parent (unsigned parent_index)\n+    {\n+      assert (parent_index != (unsigned) -1);\n+      if (incoming_edges_ == 0)\n+      {\n+        single_parent = parent_index;\n+        incoming_edges_ = 1;\n+        return;\n+      }\n+      else if (single_parent != (unsigned) -1)\n+      {\n+        assert (incoming_edges_ == 1);\n+        if (!parents.set (single_parent, 1))\n+          return;\n+        single_parent = (unsigned) -1;\n+      }\n+\n+      unsigned *v;\n+      if (parents.has (parent_index, &v))\n+      {\n+        (*v)++;\n+        incoming_edges_++;\n+      }\n+      else if (parents.set (parent_index, 1))\n+        incoming_edges_++;\n@@ -176,1 +234,1 @@\n-      for (unsigned i = 0; i < parents.length; i++)\n+      if (parent_index == single_parent)\n@@ -178,3 +236,19 @@\n-        if (parents[i] != parent_index) continue;\n-        parents.remove_unordered (i);\n-        break;\n+        single_parent = (unsigned) -1;\n+        incoming_edges_--;\n+        return;\n+      }\n+\n+      unsigned *v;\n+      if (parents.has (parent_index, &v))\n+      {\n+        incoming_edges_--;\n+        if (*v > 1)\n+          (*v)--;\n+        else\n+          parents.del (parent_index);\n+\n+        if (incoming_edges_ == 1)\n+        {\n+          single_parent = *parents.keys ();\n+          parents.reset ();\n+        }\n@@ -186,1 +260,2 @@\n-      for (unsigned i = 0; i < obj.real_links.length; i++)\n+      unsigned count = obj.real_links.length;\n+      for (unsigned i = 0; i < count; i++)\n@@ -200,1 +275,1 @@\n-    void remap_parents (const hb_vector_t<unsigned>& id_map)\n+    bool remap_parents (const hb_vector_t<unsigned>& id_map)\n@@ -202,2 +277,21 @@\n-      for (unsigned i = 0; i < parents.length; i++)\n-        parents[i] = id_map[parents[i]];\n+      if (single_parent != (unsigned) -1)\n+      {\n+        assert (single_parent < id_map.length);\n+        single_parent = id_map[single_parent];\n+        return true;\n+      }\n+\n+      hb_hashmap_t<unsigned, unsigned> new_parents;\n+      new_parents.alloc (parents.get_population ());\n+      for (auto _ : parents)\n+      {\n+        assert (_.first < id_map.length);\n+        assert (!new_parents.has (id_map[_.first]));\n+        new_parents.set (id_map[_.first], _.second);\n+      }\n+\n+      if (parents.in_error() || new_parents.in_error ())\n+        return false;\n+\n+      parents = std::move (new_parents);\n+      return true;\n@@ -208,1 +302,1 @@\n-      for (unsigned i = 0; i < parents.length; i++)\n+      if (single_parent != (unsigned) -1)\n@@ -210,2 +304,18 @@\n-        if (parents[i] == old_index)\n-          parents[i] = new_index;\n+        if (single_parent == old_index)\n+          single_parent = new_index;\n+        return;\n+      }\n+\n+      const unsigned *pv;\n+      if (parents.has (old_index, &pv))\n+      {\n+        unsigned v = *pv;\n+        if (!parents.set (new_index, v))\n+          incoming_edges_ -= v;\n+        parents.del (old_index);\n+\n+        if (incoming_edges_ == 1)\n+        {\n+          single_parent = *parents.keys ();\n+          parents.reset ();\n+        }\n@@ -331,1 +441,2 @@\n-    for (unsigned i = 0; i < objects.length; i++)\n+    unsigned count = objects.length;\n+    for (unsigned i = 0; i < count; i++)\n@@ -335,1 +446,1 @@\n-      if (i == 0 && !objects[i])\n+      if (i == 0 && !objects.arrayZ[i])\n@@ -343,1 +454,1 @@\n-        v->obj = *objects[i];\n+        v->obj = *objects.arrayZ[i];\n@@ -345,1 +456,1 @@\n-      check_success (v->link_positions_valid (objects.length, removed_nil));\n+      check_success (v->link_positions_valid (count, removed_nil));\n@@ -357,1 +468,0 @@\n-    vertices_.fini ();\n@@ -367,0 +477,12 @@\n+  void print () const {\n+    for (int i = vertices_.length - 1; i >= 0; i--)\n+    {\n+      const auto& v = vertices_[i];\n+      printf(\"%d: %u [\", i, (unsigned int)v.table_size());\n+      for (const auto &l : v.obj.real_links) {\n+        printf(\"%u, \", l.objidx);\n+      }\n+      printf(\"]\\n\");\n+    }\n+  }\n+\n@@ -399,1 +521,1 @@\n-  void add_buffer (char* buffer)\n+  bool add_buffer (char* buffer)\n@@ -402,0 +524,1 @@\n+    return !buffers.in_error ();\n@@ -417,1 +540,1 @@\n-    vertices_[child_id].parents.push (parent_id);\n+    vertices_[child_id].add_parent (parent_id);\n@@ -446,1 +569,1 @@\n-    hb_priority_queue_t queue;\n+    hb_priority_queue_t<int64_t> queue;\n@@ -463,1 +586,1 @@\n-      hb_swap (sorted_graph[new_id], vertices_[next_id]);\n+      sorted_graph[new_id] = std::move (vertices_[next_id]);\n@@ -491,2 +614,2 @@\n-    remap_all_obj_indices (id_map, &sorted_graph);\n-    hb_swap (vertices_, sorted_graph);\n+    check_success (remap_all_obj_indices (id_map, &sorted_graph));\n+    vertices_ = std::move (sorted_graph);\n@@ -582,2 +705,2 @@\n-    unsigned length = node.real_links.length;\n-    for (unsigned i = 0; i < length; i++)\n+    unsigned count = node.real_links.length;\n+    for (unsigned i = 0; i < count; i++)\n@@ -603,1 +726,1 @@\n-    for (unsigned p : child.parents)\n+    for (unsigned p : child.parents_iter ())\n@@ -686,0 +809,2 @@\n+    if (subgraph.in_error ())\n+      return false;\n@@ -692,0 +817,1 @@\n+      assert (entry.first < vertices_.length);\n@@ -730,2 +856,1 @@\n-    uint32_t next = HB_SET_VALUE_INVALID;\n-    while (roots.next (&next))\n+    for (auto next : roots)\n@@ -748,1 +873,1 @@\n-      const uint32_t *v;\n+      hb_codepoint_t *v;\n@@ -751,1 +876,1 @@\n-        subgraph.set (link.objidx, *v + 1);\n+        (*v)++;\n@@ -823,1 +948,1 @@\n-    child.parents.push (new_parent_idx);\n+    child.add_parent (new_parent_idx);\n@@ -867,1 +992,1 @@\n-    clone->parents.reset ();\n+    clone->reset_parents ();\n@@ -873,1 +998,1 @@\n-      vertices_[l.objidx].parents.push (clone_idx);\n+      vertices_[l.objidx].add_parent (clone_idx);\n@@ -878,1 +1003,1 @@\n-      vertices_[l.objidx].parents.push (clone_idx);\n+      vertices_[l.objidx].add_parent (clone_idx);\n@@ -1007,1 +1132,1 @@\n-    if (root().parents)\n+    if (root().incoming_edges ())\n@@ -1013,1 +1138,1 @@\n-      if (!vertices_[i].parents)\n+      if (!vertices_[i].incoming_edges ())\n@@ -1077,1 +1202,1 @@\n-    if (root().parents) {\n+    if (root().incoming_edges ()) {\n@@ -1084,1 +1209,1 @@\n-      if (!v.parents)\n+      if (!v.incoming_edges ())\n@@ -1116,0 +1241,2 @@\n+  loop:\n+    assert (index < vertices_.length);\n@@ -1124,1 +1251,1 @@\n-    if (!node.parents)\n+    if (!node.incoming_edges ())\n@@ -1131,1 +1258,2 @@\n-    return space_for (node.parents[0], root);\n+    index = *node.parents_iter ();\n+    goto loop;\n@@ -1138,2 +1266,3 @@\n-    for (unsigned i = 0; i < vertices_.length; i++) {\n-      size_t size = vertices_[i].obj.tail - vertices_[i].obj.head;\n+    unsigned count = vertices_.length;\n+    for (unsigned i = 0; i < count; i++) {\n+      size_t size = vertices_.arrayZ[i].obj.tail - vertices_.arrayZ[i].obj.head;\n@@ -1154,2 +1283,1 @@\n-    hb_set_t visited;\n-    for (unsigned p : vertices_[node_idx].parents)\n+    for (unsigned p : vertices_[node_idx].parents_iter ())\n@@ -1157,3 +1285,0 @@\n-      if (visited.has (p)) continue;\n-      visited.add (p);\n-\n@@ -1186,2 +1311,1 @@\n-    for (unsigned i = 0; i < vertices_.length; i++)\n-      vertices_[i].parents.reset ();\n+    unsigned count = vertices_.length;\n@@ -1189,1 +1313,4 @@\n-    for (unsigned p = 0; p < vertices_.length; p++)\n+    for (unsigned i = 0; i < count; i++)\n+      vertices_.arrayZ[i].reset_parents ();\n+\n+    for (unsigned p = 0; p < count; p++)\n@@ -1191,4 +1318,2 @@\n-      for (auto& l : vertices_[p].obj.all_links ())\n-      {\n-        vertices_[l.objidx].parents.push (p);\n-      }\n+      for (auto& l : vertices_.arrayZ[p].obj.all_links ())\n+        vertices_[l.objidx].add_parent (p);\n@@ -1197,1 +1322,1 @@\n-    for (unsigned i = 0; i < vertices_.length; i++)\n+    for (unsigned i = 0; i < count; i++)\n@@ -1200,1 +1325,1 @@\n-      check_success (!vertices_[i].parents.in_error ());\n+      check_success (!vertices_.arrayZ[i].in_error ());\n@@ -1242,7 +1367,4 @@\n-    for (unsigned i = 0; i < vertices_.length; i++)\n-    {\n-      if (i == vertices_.length - 1)\n-        vertices_[i].distance = 0;\n-      else\n-        vertices_[i].distance = hb_int_max (int64_t);\n-    }\n+    unsigned count = vertices_.length;\n+    for (unsigned i = 0; i < count; i++)\n+      vertices_.arrayZ[i].distance = hb_int_max (int64_t);\n+    vertices_.tail ().distance = 0;\n@@ -1250,1 +1372,1 @@\n-    hb_priority_queue_t queue;\n+    hb_priority_queue_t<int64_t> queue;\n@@ -1268,1 +1390,1 @@\n-        const auto& child = vertices_[link.objidx].obj;\n+        const auto& child = vertices_.arrayZ[link.objidx].obj;\n@@ -1271,1 +1393,1 @@\n-                               ((int64_t) 1 << (link_width * 8)) * (vertices_[link.objidx].space + 1);\n+                               ((int64_t) 1 << (link_width * 8)) * (vertices_.arrayZ[link.objidx].space + 1);\n@@ -1274,1 +1396,1 @@\n-        if (child_distance < vertices_[link.objidx].distance)\n+        if (child_distance < vertices_.arrayZ[link.objidx].distance)\n@@ -1276,1 +1398,1 @@\n-          vertices_[link.objidx].distance = child_distance;\n+          vertices_.arrayZ[link.objidx].distance = child_distance;\n@@ -1304,1 +1426,1 @@\n-    vertices_[new_idx].parents.push (parent_idx);\n+    vertices_[new_idx].add_parent (parent_idx);\n@@ -1332,1 +1454,1 @@\n-  void remap_all_obj_indices (const hb_vector_t<unsigned>& id_map,\n+  bool remap_all_obj_indices (const hb_vector_t<unsigned>& id_map,\n@@ -1335,1 +1457,2 @@\n-    for (unsigned i = 0; i < sorted_graph->length; i++)\n+    unsigned count = sorted_graph->length;\n+    for (unsigned i = 0; i < count; i++)\n@@ -1337,2 +1460,3 @@\n-      (*sorted_graph)[i].remap_parents (id_map);\n-      for (auto& link : (*sorted_graph)[i].obj.all_links_writer ())\n+      if (!(*sorted_graph)[i].remap_parents (id_map))\n+        return false;\n+      for (auto& link : sorted_graph->arrayZ[i].obj.all_links_writer ())\n@@ -1343,0 +1467,1 @@\n+    return true;\n@@ -1373,1 +1498,1 @@\n-    for (unsigned p : v.parents)\n+    for (unsigned p : v.parents_iter ())\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/graph\/graph.hh","additions":203,"deletions":78,"binary":false,"changes":281,"status":"modified"},{"patch":"@@ -55,1 +55,5 @@\n-  add_buffer (buffer);\n+  if (!add_buffer (buffer)) {\n+    \/\/ Allocation did not get stored for freeing later.\n+    hb_free (buffer);\n+    return -1;\n+  }\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/graph\/gsubgpos-context.cc","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-\n+  hb_hashmap_t<unsigned, unsigned> subtable_to_extension;\n@@ -50,1 +50,1 @@\n-  void add_buffer (char* buffer)\n+  bool add_buffer (char* buffer)\n@@ -52,1 +52,1 @@\n-    graph.add_buffer (buffer);\n+    return graph.add_buffer (buffer);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/graph\/gsubgpos-context.hh","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -169,1 +169,1 @@\n-      add_sub_tables (c, this_index, type, all_new_subtables);\n+      return add_sub_tables (c, this_index, type, all_new_subtables);\n@@ -187,1 +187,1 @@\n-  void add_sub_tables (gsubgpos_graph_context_t& c,\n+  bool add_sub_tables (gsubgpos_graph_context_t& c,\n@@ -203,1 +203,6 @@\n-    c.add_buffer (buffer);\n+    if (!buffer) return false;\n+    if (!c.add_buffer (buffer))\n+    {\n+      hb_free (buffer);\n+     return false;\n+    }\n@@ -223,1 +228,1 @@\n-          c.graph.vertices_[subtable_id].parents.push (ext_id);\n+          c.graph.vertices_[subtable_id].add_parent (ext_id);\n@@ -232,1 +237,1 @@\n-        c.graph.vertices_[subtable_id].parents.push (this_index);\n+        c.graph.vertices_[subtable_id].add_parent (this_index);\n@@ -242,0 +247,1 @@\n+    return true;\n@@ -296,0 +302,8 @@\n+    unsigned ext_index = -1;\n+    unsigned* existing_ext_index = nullptr;\n+    if (c.subtable_to_extension.has(subtable_index, &existing_ext_index)) {\n+      ext_index = *existing_ext_index;\n+    } else {\n+      ext_index = create_extension_subtable(c, subtable_index, type);\n+      c.subtable_to_extension.set(subtable_index, ext_index);\n+    }\n@@ -297,1 +311,0 @@\n-    unsigned ext_index = create_extension_subtable(c, subtable_index, type);\n@@ -301,0 +314,1 @@\n+    auto& subtable_vertex = c.graph.vertices_[subtable_index];\n@@ -304,1 +318,1 @@\n-      if (l.objidx == subtable_index)\n+      if (l.objidx == subtable_index) {\n@@ -307,0 +321,3 @@\n+        if (existing_ext_index)\n+          subtable_vertex.remove_parent(lookup_index);\n+      }\n@@ -311,3 +328,3 @@\n-    auto& subtable_vertex = c.graph.vertices_[subtable_index];\n-    ext_vertex.parents.push (lookup_index);\n-    subtable_vertex.remap_parent (lookup_index, ext_index);\n+    ext_vertex.add_parent (lookup_index);\n+    if (!existing_ext_index)\n+      subtable_vertex.remap_parent (lookup_index, ext_index);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/graph\/gsubgpos-graph.hh","additions":27,"deletions":10,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -220,1 +220,1 @@\n-        OT::Layout::GPOS_impl::PairPosFormat1_3<SmallTypes>::min_size +\n+        OT::Layout::GPOS_impl::MarkBasePosFormat1_2<SmallTypes>::min_size +\n@@ -321,2 +321,5 @@\n-    unsigned class_count= classCount;\n-    class_to_info.resize (class_count);\n+    unsigned class_count = classCount;\n+    if (!class_count) return class_to_info;\n+\n+    if (!class_to_info.resize (class_count))\n+      return hb_vector_t<class_info_t>();\n@@ -330,0 +333,1 @@\n+      if (klass >= class_count) continue;\n@@ -338,0 +342,1 @@\n+      if (klass >= class_count) continue;\n@@ -482,1 +487,1 @@\n-      \/\/ Don't split 24bit PairPos's.\n+      \/\/ Don't split 24bit MarkBasePos's.\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/graph\/markbasepos-graph.hh","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -218,1 +218,1 @@\n-          return hb_pair_t<hb_codepoint_t, hb_codepoint_t> (gid, class_def_1->get_class (gid));\n+          return hb_codepoint_pair_t (gid, class_def_1->get_class (gid));\n@@ -389,1 +389,1 @@\n-      return hb_pair_t<hb_codepoint_t, hb_codepoint_t> (gid, class_def_1_table->get_class (gid));\n+      return hb_codepoint_pair_t (gid, class_def_1_table->get_class (gid));\n@@ -394,1 +394,1 @@\n-    | hb_map_retains_sorting ([&] (hb_pair_t<hb_codepoint_t, hb_codepoint_t> gid_and_class) {\n+    | hb_map_retains_sorting ([&] (hb_codepoint_pair_t gid_and_class) {\n@@ -396,1 +396,1 @@\n-      return hb_pair_t<hb_codepoint_t, hb_codepoint_t> (gid_and_class.first, gid_and_class.second - start);\n+      return hb_codepoint_pair_t (gid_and_class.first, gid_and_class.second - start);\n@@ -422,1 +422,1 @@\n-    graph.vertices_[class_def_2_id].parents.push (pair_pos_prime_id);\n+    graph.vertices_[class_def_2_id].add_parent (pair_pos_prime_id);\n@@ -522,1 +522,1 @@\n-      return hb_pair_t<hb_codepoint_t, hb_codepoint_t> (gid, class_def_1.table->get_class (gid));\n+      return hb_codepoint_pair_t (gid, class_def_1.table->get_class (gid));\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/graph\/pairpos-graph.hh","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -119,1 +119,1 @@\n-    for (const auto& link : vertices[parent_idx].obj.real_links)\n+    for (const auto& link : vertices.arrayZ[parent_idx].obj.real_links)\n@@ -122,1 +122,1 @@\n-      if (is_valid_offset (offset, link))\n+      if (likely (is_valid_offset (offset, link)))\n@@ -229,0 +229,3 @@\n+\n+  if (!size) return hb_blob_get_empty ();\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/graph\/serialize.hh","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -854,16 +854,3 @@\n-      const EntryT *wouldbe_entry;\n-      bool safe_to_break =\n-        \/* 1. *\/\n-        !c->is_actionable (this, entry)\n-      &&\n-        \/* 2. *\/\n-        (\n-          \/* 2a. *\/\n-          state == StateTableT::STATE_START_OF_TEXT\n-        ||\n-          \/* 2b. *\/\n-          (\n-            (entry.flags & context_t::DontAdvance) &&\n-            next_state == StateTableT::STATE_START_OF_TEXT\n-          )\n-        ||\n+\n+      const auto is_safe_to_break_extra = [&]()\n+      {\n@@ -871,20 +858,31 @@\n-          (\n-            wouldbe_entry = &machine.get_entry (StateTableT::STATE_START_OF_TEXT, klass)\n-          ,\n-            \/* 2c'. *\/\n-            !c->is_actionable (this, *wouldbe_entry)\n-          &&\n-            \/* 2c\". *\/\n-            (\n-              next_state == machine.new_state (wouldbe_entry->newState)\n-            &&\n-              (entry.flags & context_t::DontAdvance) == (wouldbe_entry->flags & context_t::DontAdvance)\n-            )\n-          )\n-        )\n-      &&\n-        \/* 3. *\/\n-        !c->is_actionable (this, machine.get_entry (state, StateTableT::CLASS_END_OF_TEXT))\n-      ;\n-\n-      if (!safe_to_break && buffer->backtrack_len () && buffer->idx < buffer->len)\n+          const auto wouldbe_entry = machine.get_entry(StateTableT::STATE_START_OF_TEXT, klass);\n+\n+          \/* 2c'. *\/\n+          if (c->is_actionable (this, wouldbe_entry))\n+              return false;\n+\n+          \/* 2c\". *\/\n+          return next_state == machine.new_state(wouldbe_entry.newState)\n+              && (entry.flags & context_t::DontAdvance) == (wouldbe_entry.flags & context_t::DontAdvance);\n+      };\n+\n+      const auto is_safe_to_break = [&]()\n+      {\n+          \/* 1. *\/\n+          if (c->is_actionable (this, entry))\n+              return false;\n+\n+          \/* 2. *\/\n+          \/\/ This one is meh, I know...\n+          const auto ok =\n+                 state == StateTableT::STATE_START_OF_TEXT\n+              || ((entry.flags & context_t::DontAdvance) && next_state == StateTableT::STATE_START_OF_TEXT)\n+              || is_safe_to_break_extra();\n+          if (!ok)\n+              return false;\n+\n+          \/* 3. *\/\n+          return !c->is_actionable (this, machine.get_entry (state, StateTableT::CLASS_END_OF_TEXT));\n+      };\n+\n+      if (!is_safe_to_break () && buffer->backtrack_len () && buffer->idx < buffer->len)\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-aat-layout-common.hh","additions":34,"deletions":36,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -114,1 +114,1 @@\n-    if (!trackTableEntry) return 0.;\n+    if (!trackTableEntry) return 0;\n@@ -120,1 +120,1 @@\n-    if (!sizes) return 0.;\n+    if (!sizes) return 0;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-aat-layout-trak-table.hh","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -58,1 +58,7 @@\n-                                                       gdef_table (face->table.GDEF->table),\n+                                                       gdef_table (\n+#ifndef HB_NO_OT_LAYOUT\n+                                                         face->table.GDEF->table\n+#else\n+                                                         &Null (GDEF)\n+#endif\n+                                                       ),\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-aat-layout.cc","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -90,0 +90,13 @@\n+#ifndef HB_FAST_INT_ACCESS\n+#if defined(__OPTIMIZE__) && \\\n+    defined(__BYTE_ORDER) && \\\n+    (__BYTE_ORDER == __BIG_ENDIAN || \\\n+     (__BYTE_ORDER == __LITTLE_ENDIAN && \\\n+      hb_has_builtin(__builtin_bswap16) && \\\n+      hb_has_builtin(__builtin_bswap32)))\n+#define HB_FAST_INT_ACCESS 1\n+#else\n+#define HB_FAST_INT_ACCESS 0\n+#endif\n+#endif\n+\n@@ -104,0 +117,2 @@\n+  struct __attribute__((packed)) packed_uint16_t { uint16_t v; };\n+\n@@ -106,2 +121,0 @@\n-  constexpr BEInt (Type V) : v {uint8_t ((V >>  8) & 0xFF),\n-                                uint8_t ((V      ) & 0xFF)} {}\n@@ -109,10 +122,14 @@\n-  struct __attribute__((packed)) packed_uint16_t { uint16_t v; };\n-  constexpr operator Type () const\n-  {\n-#if defined(__OPTIMIZE__) && !defined(HB_NO_PACKED) && \\\n-    defined(__BYTE_ORDER) && \\\n-    (__BYTE_ORDER == __BIG_ENDIAN || \\\n-     (__BYTE_ORDER == __LITTLE_ENDIAN && \\\n-      hb_has_builtin(__builtin_bswap16)))\n-    \/* Spoon-feed the compiler a big-endian integer with alignment 1.\n-     * https:\/\/github.com\/harfbuzz\/harfbuzz\/pull\/1398 *\/\n+  BEInt (Type V)\n+#if HB_FAST_INT_ACCESS\n+#if __BYTE_ORDER == __LITTLE_ENDIAN\n+  { ((packed_uint16_t *) v)->v = __builtin_bswap16 (V); }\n+#else \/* __BYTE_ORDER == __BIG_ENDIAN *\/\n+  { ((packed_uint16_t *) v)->v = V; }\n+#endif\n+#else\n+    : v {uint8_t ((V >>  8) & 0xFF),\n+         uint8_t ((V      ) & 0xFF)} {}\n+#endif\n+\n+  constexpr operator Type () const {\n+#if HB_FAST_INT_ACCESS\n@@ -149,0 +166,2 @@\n+  struct __attribute__((packed)) packed_uint32_t { uint32_t v; };\n+\n@@ -151,4 +170,0 @@\n-  constexpr BEInt (Type V) : v {uint8_t ((V >> 24) & 0xFF),\n-                                uint8_t ((V >> 16) & 0xFF),\n-                                uint8_t ((V >>  8) & 0xFF),\n-                                uint8_t ((V      ) & 0xFF)} {}\n@@ -156,1 +171,14 @@\n-  struct __attribute__((packed)) packed_uint32_t { uint32_t v; };\n+  BEInt (Type V)\n+#if HB_FAST_INT_ACCESS\n+#if __BYTE_ORDER == __LITTLE_ENDIAN\n+  { ((packed_uint32_t *) v)->v = __builtin_bswap32 (V); }\n+#else \/* __BYTE_ORDER == __BIG_ENDIAN *\/\n+  { ((packed_uint32_t *) v)->v = V; }\n+#endif\n+#else\n+    : v {uint8_t ((V >> 24) & 0xFF),\n+         uint8_t ((V >> 16) & 0xFF),\n+         uint8_t ((V >>  8) & 0xFF),\n+         uint8_t ((V      ) & 0xFF)} {}\n+#endif\n+\n@@ -158,7 +186,1 @@\n-#if defined(__OPTIMIZE__) && !defined(HB_NO_PACKED) && \\\n-    defined(__BYTE_ORDER) && \\\n-    (__BYTE_ORDER == __BIG_ENDIAN || \\\n-     (__BYTE_ORDER == __LITTLE_ENDIAN && \\\n-      hb_has_builtin(__builtin_bswap32)))\n-    \/* Spoon-feed the compiler a big-endian integer with alignment 1.\n-     * https:\/\/github.com\/harfbuzz\/harfbuzz\/pull\/1398 *\/\n+#if HB_FAST_INT_ACCESS\n@@ -234,0 +256,95 @@\n+\n+\/* The MIT License\n+\n+   Copyright (C) 2012 Zilong Tan (eric.zltan@gmail.com)\n+\n+   Permission is hereby granted, free of charge, to any person\n+   obtaining a copy of this software and associated documentation\n+   files (the \"Software\"), to deal in the Software without\n+   restriction, including without limitation the rights to use, copy,\n+   modify, merge, publish, distribute, sublicense, and\/or sell copies\n+   of the Software, and to permit persons to whom the Software is\n+   furnished to do so, subject to the following conditions:\n+\n+   The above copyright notice and this permission notice shall be\n+   included in all copies or substantial portions of the Software.\n+\n+   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n+   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n+   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n+   NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n+   BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n+   ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n+   CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+   SOFTWARE.\n+*\/\n+\n+\n+\/\/ Compression function for Merkle-Damgard construction.\n+\/\/ This function is generated using the framework provided.\n+#define mix(h) (                                        \\\n+                        (void) ((h) ^= (h) >> 23),              \\\n+                        (void) ((h) *= 0x2127599bf4325c37ULL),  \\\n+                        (h) ^= (h) >> 47)\n+\n+static inline uint64_t fasthash64(const void *buf, size_t len, uint64_t seed)\n+{\n+        struct __attribute__((packed)) packed_uint64_t { uint64_t v; };\n+        const uint64_t    m = 0x880355f21e6d1965ULL;\n+        const packed_uint64_t *pos = (const packed_uint64_t *)buf;\n+        const packed_uint64_t *end = pos + (len \/ 8);\n+        const unsigned char *pos2;\n+        uint64_t h = seed ^ (len * m);\n+        uint64_t v;\n+\n+#ifndef HB_OPTIMIZE_SIZE\n+        if (((uintptr_t) pos & 7) == 0)\n+        {\n+          while (pos != end)\n+          {\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wcast-align\"\n+            v  = * (const uint64_t *) (pos++);\n+#pragma GCC diagnostic pop\n+            h ^= mix(v);\n+            h *= m;\n+          }\n+        }\n+        else\n+#endif\n+        {\n+          while (pos != end)\n+          {\n+            v  = pos++->v;\n+            h ^= mix(v);\n+            h *= m;\n+          }\n+        }\n+\n+        pos2 = (const unsigned char*)pos;\n+        v = 0;\n+\n+        switch (len & 7) {\n+        case 7: v ^= (uint64_t)pos2[6] << 48; HB_FALLTHROUGH;\n+        case 6: v ^= (uint64_t)pos2[5] << 40; HB_FALLTHROUGH;\n+        case 5: v ^= (uint64_t)pos2[4] << 32; HB_FALLTHROUGH;\n+        case 4: v ^= (uint64_t)pos2[3] << 24; HB_FALLTHROUGH;\n+        case 3: v ^= (uint64_t)pos2[2] << 16; HB_FALLTHROUGH;\n+        case 2: v ^= (uint64_t)pos2[1] <<  8; HB_FALLTHROUGH;\n+        case 1: v ^= (uint64_t)pos2[0];\n+                h ^= mix(v);\n+                h *= m;\n+        }\n+\n+        return mix(h);\n+}\n+\n+static inline uint32_t fasthash32(const void *buf, size_t len, uint32_t seed)\n+{\n+        \/\/ the following trick converts the 64-bit hashcode to Fermat\n+        \/\/ residue, which shall retain information from both the higher\n+        \/\/ and lower parts of hashcode.\n+        uint64_t h = fasthash64(buf, len, seed);\n+        return h - (h >> 32);\n+}\n+\n@@ -239,1 +356,17 @@\n-  impl (const T& v, hb_priority<1>) const HB_RETURN (uint32_t, hb_deref (v).hash ())\n+  impl (const T& v, hb_priority<2>) const HB_RETURN (uint32_t, hb_deref (v).hash ())\n+\n+  \/\/ Horrible: std:hash() of integers seems to be identity in gcc \/ clang?!\n+  \/\/ https:\/\/github.com\/harfbuzz\/harfbuzz\/pull\/4228\n+  \/\/\n+  \/\/ For performance characteristics see:\n+  \/\/ https:\/\/github.com\/harfbuzz\/harfbuzz\/pull\/4228#issuecomment-1565079537\n+  template <typename T,\n+            hb_enable_if (std::is_integral<T>::value && sizeof (T) <= sizeof (uint32_t))> constexpr auto\n+  impl (const T& v, hb_priority<1>) const HB_RETURN (uint32_t, (uint32_t) v * 2654435761u \/* Knuh's multiplicative hash *\/)\n+  template <typename T,\n+            hb_enable_if (std::is_integral<T>::value && sizeof (T) > sizeof (uint32_t))> constexpr auto\n+  impl (const T& v, hb_priority<1>) const HB_RETURN (uint32_t, (uint32_t) (v ^ (v >> 32)) * 2654435761u \/* Knuth's multiplicative hash *\/)\n+\n+  template <typename T,\n+            hb_enable_if (std::is_floating_point<T>::value)> constexpr auto\n+  impl (const T& v, hb_priority<1>) const HB_RETURN (uint32_t, fasthash32 (std::addressof (v), sizeof (T), 0xf437ffe6))\n@@ -554,0 +687,2 @@\n+typedef hb_pair_t<hb_codepoint_t, hb_codepoint_t> hb_codepoint_pair_t;\n+\n@@ -629,2 +764,4 @@\n-    unsigned int shift = 32;\n-    return hb_popcount<uint32_t> ((uint32_t) v) + hb_popcount ((uint32_t) (v >> shift));\n+    uint64_t y = (uint64_t) v;\n+    y -= ((y >> 1) & 0x5555555555555555ull);\n+    y = (y & 0x3333333333333333ull) + (y >> 2 & 0x3333333333333333ull);\n+    return ((y + (y >> 4)) & 0xf0f0f0f0f0f0f0full) * 0x101010101010101ull >> 56;\n@@ -854,1 +991,1 @@\n-  if (unlikely (!n)) return 0;\n+  if (unlikely (!n)) return s;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-algs.hh","additions":165,"deletions":28,"binary":false,"changes":193,"status":"modified"},{"patch":"@@ -78,0 +78,6 @@\n+  static constexpr bool has_fast_len = true;\n+  Type& __item__ () const\n+  {\n+    if (unlikely (!length)) return CrapOrNull (Type);\n+    return *arrayZ;\n+  }\n@@ -83,0 +89,8 @@\n+  void __next__ ()\n+  {\n+    if (unlikely (!length))\n+      return;\n+    length--;\n+    backwards_length++;\n+    arrayZ++;\n+  }\n@@ -91,0 +105,8 @@\n+  void __prev__ ()\n+  {\n+    if (unlikely (!backwards_length))\n+      return;\n+    length++;\n+    backwards_length--;\n+    arrayZ--;\n+  }\n@@ -125,1 +147,3 @@\n-    uint32_t current = 0;\n+    \/\/ FNV-1a hash function\n+    \/\/ https:\/\/github.com\/harfbuzz\/harfbuzz\/pull\/4228\n+    uint32_t current = \/*cbf29ce4*\/0x84222325;\n@@ -127,1 +151,4 @@\n-      current = current * 31 + hb_hash (v);\n+    {\n+      current = current ^ hb_hash (v);\n+      current = current * 16777619;\n+    }\n@@ -325,0 +352,1 @@\n+  static constexpr bool has_fast_len = true;\n@@ -452,0 +480,1 @@\n+#ifndef HB_OPTIMIZE_SIZE_MORE\n@@ -455,13 +484,2 @@\n-  uint32_t current = 0;\n-  unsigned i = 0;\n-\n-#if defined(__OPTIMIZE__) && !defined(HB_NO_PACKED) && \\\n-    ((defined(__GNUC__) && __GNUC__ >= 5) || defined(__clang__))\n-  struct __attribute__((packed)) packed_uint32_t { uint32_t v; };\n-  for (; i + 4 <= this->length; i += 4)\n-    current = current * 31 + hb_hash ((uint32_t) ((packed_uint32_t *) &this->arrayZ[i])->v);\n-#endif\n-\n-  for (; i < this->length; i++)\n-    current = current * 31 + hb_hash (this->arrayZ[i]);\n-  return current;\n+  \/\/ https:\/\/github.com\/harfbuzz\/harfbuzz\/pull\/4228\n+  return fasthash32(arrayZ, length, 0xf437ffe6 \/* magic? *\/);\n@@ -473,13 +491,2 @@\n-  uint32_t current = 0;\n-  unsigned i = 0;\n-\n-#if defined(__OPTIMIZE__) && !defined(HB_NO_PACKED) && \\\n-    ((defined(__GNUC__) && __GNUC__ >= 5) || defined(__clang__))\n-  struct __attribute__((packed)) packed_uint32_t { uint32_t v; };\n-  for (; i + 4 <= this->length; i += 4)\n-    current = current * 31 + hb_hash ((uint32_t) ((packed_uint32_t *) &this->arrayZ[i])->v);\n-#endif\n-\n-  for (; i < this->length; i++)\n-    current = current * 31 + hb_hash (this->arrayZ[i]);\n-  return current;\n+  \/\/ https:\/\/github.com\/harfbuzz\/harfbuzz\/pull\/4228\n+  return fasthash32(arrayZ, length, 0xf437ffe6 \/* magic? *\/);\n@@ -487,0 +494,1 @@\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-array.hh","additions":36,"deletions":28,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -207,0 +207,1 @@\n+  hb_atomic_ptr_t (const hb_atomic_ptr_t &other) = delete;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-atomic.hh","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-  void resize (unsigned pop)\n+  void alloc (unsigned pop)\n@@ -44,2 +44,2 @@\n-    forw_map.resize (pop);\n-    back_map.resize (pop);\n+    forw_map.alloc (pop);\n+    back_map.alloc (pop);\n@@ -86,1 +86,0 @@\n-\n@@ -97,2 +96,2 @@\n-\/* Inremental bimap: only lhs is given, rhs is incrementally assigned *\/\n-struct hb_inc_bimap_t : hb_bimap_t\n+\/* Incremental bimap: only lhs is given, rhs is incrementally assigned *\/\n+struct hb_inc_bimap_t\n@@ -100,0 +99,22 @@\n+  bool in_error () const { return forw_map.in_error () || back_map.in_error (); }\n+\n+  unsigned int get_population () const { return forw_map.get_population (); }\n+\n+  void reset ()\n+  {\n+    forw_map.reset ();\n+    back_map.reset ();\n+  }\n+\n+  void alloc (unsigned pop)\n+  {\n+    forw_map.alloc (pop);\n+    back_map.alloc (pop);\n+  }\n+\n+  void clear ()\n+  {\n+    forw_map.clear ();\n+    back_map.resize (0);\n+  }\n+\n@@ -108,2 +129,3 @@\n-      rhs = next_value++;\n-      set (lhs, rhs);\n+      rhs = back_map.length;\n+      forw_map.set (lhs, rhs);\n+      back_map.push (lhs);\n@@ -115,1 +137,5 @@\n-  { return next_value++; }\n+  {\n+    hb_codepoint_t start = back_map.length;\n+    back_map.push (HB_MAP_VALUE_INVALID);\n+    return start;\n+  }\n@@ -118,1 +144,7 @@\n-  { return next_value += count; }\n+  {\n+    hb_codepoint_t start = back_map.length;\n+    back_map.alloc (back_map.length + count);\n+    for (unsigned i = 0; i < count; i++)\n+      back_map.push (HB_MAP_VALUE_INVALID);\n+    return start;\n+  }\n@@ -121,1 +153,1 @@\n-  { return next_value; }\n+  { return back_map.length; }\n@@ -125,2 +157,1 @@\n-    hb_codepoint_t i = HB_SET_VALUE_INVALID;\n-    while (hb_set_next (set, &i)) add (i);\n+    for (auto i : *set) add (i);\n@@ -133,1 +164,1 @@\n-    for (hb_codepoint_t i = 0; i < size; i++) set (i, i);\n+    for (hb_codepoint_t i = 0; i < size; i++) add (i);\n@@ -148,1 +179,1 @@\n-    work.resize (count);\n+    if (unlikely (!work.resize (count, false))) return;\n@@ -151,1 +182,1 @@\n-      work[rhs] = back_map[rhs];\n+      work.arrayZ[rhs] = back_map[rhs];\n@@ -157,1 +188,1 @@\n-      set (work[rhs], rhs);\n+      add (work.arrayZ[rhs]);\n@@ -160,0 +191,6 @@\n+  hb_codepoint_t get (hb_codepoint_t lhs) const { return forw_map.get (lhs); }\n+  hb_codepoint_t backward (hb_codepoint_t rhs) const { return back_map[rhs]; }\n+\n+  hb_codepoint_t operator [] (hb_codepoint_t lhs) const { return get (lhs); }\n+  bool has (hb_codepoint_t lhs) const { return forw_map.has (lhs); }\n+\n@@ -161,1 +198,5 @@\n-  unsigned int next_value = 0;\n+  hb_map_t forw_map;\n+  hb_vector_t<hb_codepoint_t> back_map;\n+\n+  public:\n+  auto keys () const HB_AUTO_RETURN (+ back_map.iter())\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-bimap.hh","additions":59,"deletions":18,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -92,2 +92,4 @@\n-  void init0 () { v.init0 (); }\n-  void init1 () { v.init1 (); }\n+  void init0 () { v.init0 (); population = 0; }\n+  void init1 () { v.init1 (); population = PAGE_BITS; }\n+\n+  void dirty () { population = UINT_MAX; }\n@@ -98,0 +100,1 @@\n+  operator bool () const { return !is_empty (); }\n@@ -100,0 +103,1 @@\n+    if (has_population ()) return !population;\n@@ -107,4 +111,1 @@\n-    return\n-    + hb_iter (v)\n-    | hb_reduce ([] (uint32_t h, const elt_t &_) { return h * 31 + hb_hash (_); }, (uint32_t) 0u)\n-    ;\n+    return hb_bytes_t ((const char *) &v, sizeof (v)).hash ();\n@@ -113,2 +114,2 @@\n-  void add (hb_codepoint_t g) { elt (g) |= mask (g); }\n-  void del (hb_codepoint_t g) { elt (g) &= ~mask (g); }\n+  void add (hb_codepoint_t g) { elt (g) |= mask (g); dirty (); }\n+  void del (hb_codepoint_t g) { elt (g) &= ~mask (g); dirty (); }\n@@ -126,1 +127,1 @@\n-      *la |= ~(mask (a) - 1);\n+      *la |= ~(mask (a) - 1llu);\n@@ -131,1 +132,1 @@\n-      *lb |= ((mask (b) << 1) - 1);\n+      *lb |= ((mask (b) << 1) - 1llu);\n@@ -133,0 +134,1 @@\n+    dirty ();\n@@ -139,1 +141,1 @@\n-      *la &= ~((mask (b) << 1) - mask(a));\n+      *la &= ~((mask (b) << 1llu) - mask(a));\n@@ -147,1 +149,1 @@\n-      *lb &= ~((mask (b) << 1) - 1);\n+      *lb &= ~((mask (b) << 1) - 1llu);\n@@ -149,0 +151,1 @@\n+    dirty ();\n@@ -219,0 +222,1 @@\n+  bool operator == (const hb_bit_page_t &other) const { return is_equal (other); }\n@@ -226,0 +230,1 @@\n+  bool operator <= (const hb_bit_page_t &larger_page) const { return is_subset (larger_page); }\n@@ -228,0 +233,4 @@\n+    if (has_population () && larger_page.has_population () &&\n+        population > larger_page.population)\n+      return false;\n+\n@@ -234,0 +243,1 @@\n+  bool has_population () const { return population != UINT_MAX; }\n@@ -236,1 +246,2 @@\n-    return\n+    if (has_population ()) return population;\n+    population =\n@@ -240,0 +251,1 @@\n+    return population;\n@@ -335,0 +347,1 @@\n+  mutable unsigned population;\n@@ -337,1 +350,0 @@\n-static_assert (hb_bit_page_t::PAGE_BITS == sizeof (hb_bit_page_t) * 8, \"\");\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-bit-page.hh","additions":26,"deletions":14,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -139,1 +139,1 @@\n-  hb_bit_set_invertible_t& operator << (const hb_pair_t<hb_codepoint_t, hb_codepoint_t>& range)\n+  hb_bit_set_invertible_t& operator << (const hb_codepoint_pair_t& range)\n@@ -165,1 +165,1 @@\n-                     | hb_map ([](hb_pair_t<hb_codepoint_t, hb_codepoint_t> _) { return _.first == _.second; }));\n+                     | hb_map ([](hb_codepoint_pair_t _) { return _.first == _.second; }));\n@@ -348,0 +348,1 @@\n+    static constexpr bool has_fast_len = true;\n@@ -366,1 +367,1 @@\n-    { return s != o.s || v != o.v; }\n+    { return v != o.v || s != o.s; }\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-bit-set-invertible.hh","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-#include \"hb-machinery.hh\"\n@@ -137,1 +136,5 @@\n-      h = h * 31 + hb_hash (map.major) + hb_hash (pages[map.index]);\n+    {\n+      auto &page = pages.arrayZ[map.index];\n+      if (unlikely (page.is_empty ())) continue;\n+      h = h * 31 + hb_hash (map.major) + hb_hash (page);\n+    }\n@@ -182,0 +185,10 @@\n+  \/* Duplicated here from hb-machinery.hh to avoid including it. *\/\n+  template<typename Type>\n+  static inline const Type& StructAtOffsetUnaligned(const void *P, unsigned int offset)\n+  {\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wcast-align\"\n+    return * reinterpret_cast<const Type*> ((const char *) P + offset);\n+#pragma GCC diagnostic pop\n+  }\n+\n@@ -345,1 +358,1 @@\n-  hb_bit_set_t& operator << (const hb_pair_t<hb_codepoint_t, hb_codepoint_t>& range)\n+  hb_bit_set_t& operator << (const hb_codepoint_pair_t& range)\n@@ -405,1 +418,0 @@\n-      auto lp = larger_set.page_at (lpi);\n@@ -413,0 +425,1 @@\n+      auto lp = larger_set.page_at (lpi);\n@@ -552,0 +565,1 @@\n+        page_at (count).dirty ();\n@@ -570,1 +584,1 @@\n-          page_at (count).v = other.page_at (b).v;\n+          page_at (count) = other.page_at (b);\n@@ -588,1 +602,1 @@\n-        page_at (count).v = other.page_at (b).v;\n+        page_at (count) = other.page_at (b);\n@@ -626,0 +640,1 @@\n+      last_page_lookup = i;\n@@ -635,1 +650,0 @@\n-        last_page_lookup = i;\n@@ -652,1 +666,0 @@\n-    last_page_lookup = 0;\n@@ -866,0 +879,1 @@\n+    static constexpr bool has_fast_len = true;\n@@ -902,1 +916,1 @@\n-     * major==0, which we can't distinguish from an actualy major==0 page... *\/\n+     * major==0, which we can't distinguish from an actually major==0 page... *\/\n@@ -924,1 +938,1 @@\n-      page_map[i] = map;\n+      page_map.arrayZ[i] = map;\n@@ -936,1 +950,1 @@\n-     * major==0, which we can't distinguish from an actualy major==0 page... *\/\n+     * major==0, which we can't distinguish from an actually major==0 page... *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-bit-set.hh","additions":25,"deletions":11,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-#line 33 \"hb-buffer-deserialize-json.hh\"\n+#line 36 \"hb-buffer-deserialize-json.hh\"\n@@ -558,1 +558,1 @@\n-#line 552 \"hb-buffer-deserialize-json.hh\"\n+#line 559 \"hb-buffer-deserialize-json.hh\"\n@@ -563,1 +563,1 @@\n-#line 555 \"hb-buffer-deserialize-json.hh\"\n+#line 564 \"hb-buffer-deserialize-json.hh\"\n@@ -775,1 +775,1 @@\n-#line 733 \"hb-buffer-deserialize-json.hh\"\n+#line 776 \"hb-buffer-deserialize-json.hh\"\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-buffer-deserialize-json.hh","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-#line 33 \"hb-buffer-deserialize-text-glyphs.hh\"\n+#line 36 \"hb-buffer-deserialize-text-glyphs.hh\"\n@@ -352,1 +352,1 @@\n-#line 346 \"hb-buffer-deserialize-text-glyphs.hh\"\n+#line 353 \"hb-buffer-deserialize-text-glyphs.hh\"\n@@ -357,1 +357,1 @@\n-#line 349 \"hb-buffer-deserialize-text-glyphs.hh\"\n+#line 358 \"hb-buffer-deserialize-text-glyphs.hh\"\n@@ -553,1 +553,1 @@\n-#line 516 \"hb-buffer-deserialize-text-glyphs.hh\"\n+#line 554 \"hb-buffer-deserialize-text-glyphs.hh\"\n@@ -670,1 +670,1 @@\n-#line 616 \"hb-buffer-deserialize-text-glyphs.hh\"\n+#line 671 \"hb-buffer-deserialize-text-glyphs.hh\"\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-buffer-deserialize-text-glyphs.hh","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-#line 33 \"hb-buffer-deserialize-text-unicode.hh\"\n+#line 36 \"hb-buffer-deserialize-text-unicode.hh\"\n@@ -200,1 +200,1 @@\n-#line 194 \"hb-buffer-deserialize-text-unicode.hh\"\n+#line 201 \"hb-buffer-deserialize-text-unicode.hh\"\n@@ -205,1 +205,1 @@\n-#line 197 \"hb-buffer-deserialize-text-unicode.hh\"\n+#line 206 \"hb-buffer-deserialize-text-unicode.hh\"\n@@ -272,1 +272,1 @@\n-#line 256 \"hb-buffer-deserialize-text-unicode.hh\"\n+#line 273 \"hb-buffer-deserialize-text-unicode.hh\"\n@@ -310,1 +310,1 @@\n-#line 289 \"hb-buffer-deserialize-text-unicode.hh\"\n+#line 311 \"hb-buffer-deserialize-text-unicode.hh\"\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-buffer-deserialize-text-unicode.hh","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -165,8 +165,2 @@\n-    if (!hb_shape_full (font, fragment, features, num_features, shapers))\n-    {\n-      buffer_verify_error (buffer, font, BUFFER_VERIFY_ERROR \"shaping failed while shaping fragment.\");\n-      hb_buffer_destroy (reconstruction);\n-      hb_buffer_destroy (fragment);\n-      return false;\n-    }\n-    else if (!fragment->successful || fragment->shaping_failed)\n+    if (!hb_shape_full (font, fragment, features, num_features, shapers) ||\n+        fragment->successful || fragment->shaping_failed)\n@@ -188,2 +182,1 @@\n-  hb_buffer_diff_flags_t diff = hb_buffer_diff (reconstruction, buffer, (hb_codepoint_t) -1, 0);\n-  if (diff & ~HB_BUFFER_DIFF_FLAG_GLYPH_FLAGS_MISMATCH)\n+  if (likely (reconstruction->successful))\n@@ -191,2 +184,5 @@\n-    buffer_verify_error (buffer, font, BUFFER_VERIFY_ERROR \"unsafe-to-break test failed.\");\n-    ret = false;\n+    hb_buffer_diff_flags_t diff = hb_buffer_diff (reconstruction, buffer, (hb_codepoint_t) -1, 0);\n+    if (diff & ~HB_BUFFER_DIFF_FLAG_GLYPH_FLAGS_MISMATCH)\n+    {\n+      buffer_verify_error (buffer, font, BUFFER_VERIFY_ERROR \"unsafe-to-break test failed.\");\n+      ret = false;\n@@ -194,3 +190,4 @@\n-    \/* Return the reconstructed result instead so it can be inspected. *\/\n-    hb_buffer_set_length (buffer, 0);\n-    hb_buffer_append (buffer, reconstruction, 0, -1);\n+      \/* Return the reconstructed result instead so it can be inspected. *\/\n+      hb_buffer_set_length (buffer, 0);\n+      hb_buffer_append (buffer, reconstruction, 0, -1);\n+    }\n@@ -319,15 +316,2 @@\n-  if (!hb_shape_full (font, fragments[0], features, num_features, shapers))\n-  {\n-    buffer_verify_error (buffer, font, BUFFER_VERIFY_ERROR \"shaping failed while shaping fragment.\");\n-    ret = false;\n-    goto out;\n-  }\n-  else if (!fragments[0]->successful || fragments[0]->shaping_failed)\n-  {\n-    ret = true;\n-    goto out;\n-  }\n-  if (!hb_shape_full (font, fragments[1], features, num_features, shapers))\n-  {\n-    buffer_verify_error (buffer, font, BUFFER_VERIFY_ERROR \"shaping failed while shaping fragment.\");\n-    ret = false;\n+  if (!hb_shape_full (font, fragments[0], features, num_features, shapers) ||\n+      !fragments[0]->successful || fragments[0]->shaping_failed)\n@@ -335,4 +319,3 @@\n-  }\n-  else if (!fragments[1]->successful || fragments[1]->shaping_failed)\n-  {\n-    ret = true;\n+\n+  if (!hb_shape_full (font, fragments[1], features, num_features, shapers) ||\n+      !fragments[1]->successful || fragments[1]->shaping_failed)\n@@ -340,1 +323,0 @@\n-  }\n@@ -380,5 +362,1 @@\n-  \/*\n-   * Diff results.\n-   *\/\n-  diff = hb_buffer_diff (reconstruction, buffer, (hb_codepoint_t) -1, 0);\n-  if (diff & ~HB_BUFFER_DIFF_FLAG_GLYPH_FLAGS_MISMATCH)\n+  if (likely (reconstruction->successful))\n@@ -386,2 +364,8 @@\n-    buffer_verify_error (buffer, font, BUFFER_VERIFY_ERROR \"unsafe-to-concat test failed.\");\n-    ret = false;\n+    \/*\n+     * Diff results.\n+     *\/\n+    diff = hb_buffer_diff (reconstruction, buffer, (hb_codepoint_t) -1, 0);\n+    if (diff & ~HB_BUFFER_DIFF_FLAG_GLYPH_FLAGS_MISMATCH)\n+    {\n+      buffer_verify_error (buffer, font, BUFFER_VERIFY_ERROR \"unsafe-to-concat test failed.\");\n+      ret = false;\n@@ -389,3 +373,4 @@\n-    \/* Return the reconstructed result instead so it can be inspected. *\/\n-    hb_buffer_set_length (buffer, 0);\n-    hb_buffer_append (buffer, reconstruction, 0, -1);\n+      \/* Return the reconstructed result instead so it can be inspected. *\/\n+      hb_buffer_set_length (buffer, 0);\n+      hb_buffer_append (buffer, reconstruction, 0, -1);\n+    }\n@@ -394,1 +379,0 @@\n-\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-buffer-verify.cc","additions":30,"deletions":46,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -271,1 +271,1 @@\n-  replacement = src.invisible;\n+  replacement = src.replacement;\n@@ -502,3 +502,0 @@\n-  hb_mask_t not_mask = ~mask;\n-  value &= mask;\n-\n@@ -508,0 +505,3 @@\n+  hb_mask_t not_mask = ~mask;\n+  value &= mask;\n+\n@@ -1330,1 +1330,1 @@\n- * The not-found glyph defaults to zero, sometimes knows as the\n+ * The not-found glyph defaults to zero, sometimes known as the\n@@ -2079,1 +2079,1 @@\n- * @dottedcircle_glyph: glyph id of U+25CC DOTTED CIRCLE, or (hb_codepont_t) -1.\n+ * @dottedcircle_glyph: glyph id of U+25CC DOTTED CIRCLE, or (hb_codepoint_t) -1.\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-buffer.cc","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -102,1 +102,1 @@\n- *                                 breaking positin only, even if the breaking\n+ *                                 breaking position only, even if the breaking\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-buffer.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -467,0 +467,3 @@\n+#ifndef HB_OPTIMIZE_SIZE\n+  HB_ALWAYS_INLINE\n+#endif\n@@ -473,1 +476,1 @@\n-                      true);\n+                      false);\n@@ -481,0 +484,3 @@\n+#ifndef HB_OPTIMIZE_SIZE\n+  HB_ALWAYS_INLINE\n+#endif\n@@ -496,0 +502,7 @@\n+  HB_NODISCARD bool resize (unsigned length)\n+  {\n+    assert (!have_output);\n+    if (unlikely (!ensure (length))) return false;\n+    len = length;\n+    return true;\n+  }\n@@ -556,1 +569,1 @@\n-   return true;\n+    return true;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-buffer.hh","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -65,3 +65,1 @@\n-  hb_cache_t () { init (); }\n-\n-  void init () { clear (); }\n+  hb_cache_t () { clear (); }\n@@ -71,2 +69,2 @@\n-    for (unsigned i = 0; i < ARRAY_LENGTH (values); i++)\n-      values[i] = -1;\n+    for (auto &v : values)\n+      v = -1;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-cache.hh","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+extern HB_INTERNAL const unsigned char *endchar_str;\n+\n@@ -339,2 +341,0 @@\n-using byte_str_array_t = hb_vector_t<hb_ubytes_t>;\n-\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-cff-interp-common.hh","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -886,1 +886,2 @@\n-      if (unlikely (!--max_ops))\n+      OPSET::process_op (SUPER::env.fetch_op (), SUPER::env, param);\n+      if (unlikely (SUPER::env.in_error () || !--max_ops))\n@@ -889,4 +890,0 @@\n-        break;\n-      }\n-      OPSET::process_op (SUPER::env.fetch_op (), SUPER::env, param);\n-      if (unlikely (SUPER::env.in_error ()))\n@@ -894,0 +891,1 @@\n+      }\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-cff-interp-cs-common.hh","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -818,1 +818,1 @@\n-  while (*pp < end && (ISALNUM(**pp) || **pp == '_'))\n+  while (*pp < end && (**pp != ' ' && **pp != '=' && **pp != '[' && **pp != quote))\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-common.cc","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -107,0 +107,10 @@\n+\n+\/**\n+ * HB_CODEPOINT_INVALID:\n+ *\n+ * Unused #hb_codepoint_t value.\n+ *\n+ * Since: 8.0.0\n+ *\/\n+#define HB_CODEPOINT_INVALID ((hb_codepoint_t) -1)\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-common.h","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -47,0 +47,3 @@\n+#define HB_OPTIMIZE_SIZE\n+#define HB_OPTIMIZE_SIZE_MORE\n+#define HB_MINIMIZE_MEMORY_USAGE\n@@ -52,3 +55,0 @@\n-#ifndef __OPTIMIZE_SIZE__\n-#define __OPTIMIZE_SIZE__\n-#endif\n@@ -100,0 +100,6 @@\n+#ifdef __OPTIMIZE_SIZE__\n+#ifndef HB_OPTIMIZE_SIZE\n+#define HB_OPTIMIZE_SIZE\n+#endif\n+#endif\n+\n@@ -111,1 +117,2 @@\n-#define HB_NO_AVAR2\n+#define HB_NO_CUBIC_GLYF\n+#define HB_NO_VAR_COMPOSITES\n@@ -178,4 +185,2 @@\n-#ifdef NDEBUG\n-#ifndef HB_NDEBUG\n-#define HB_NDEBUG\n-#endif\n+#ifdef HB_OPTIMIZE_SIZE_MORE\n+#define HB_NO_OT_RULESETS_FAST_PATH\n@@ -184,4 +189,5 @@\n-#ifdef __OPTIMIZE_SIZE__\n-#ifndef HB_OPTIMIZE_SIZE\n-#define HB_OPTIMIZE_SIZE\n-#endif\n+#ifdef HB_MINIMIZE_MEMORY_USAGE\n+#define HB_NO_GDEF_CACHE\n+#define HB_NO_OT_LAYOUT_LOOKUP_CACHE\n+#define HB_NO_OT_FONT_ADVANCE_CACHE\n+#define HB_NO_OT_FONT_CMAP_CACHE\n@@ -191,1 +197,3 @@\n-#define HB_NO_OT_LAYOUT_LOOKUP_CACHE\n+#define HB_OPTIMIZE_SIZE_VAL 1\n+#else\n+#define HB_OPTIMIZE_SIZE_VAL 0\n@@ -194,0 +202,5 @@\n+#ifdef HB_MINIMIZE_MEMORY_USAGE\n+#define HB_MINIMIZE_MEMORY_USAGE_VAL 1\n+#else\n+#define HB_MINIMIZE_MEMORY_USAGE_VAL 0\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-config.hh","additions":26,"deletions":13,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -268,2 +268,3 @@\n-\/*static*\/ inline void _hb_warn_no_return<hb_empty_t> (bool returned HB_UNUSED)\n-{}\n+\/*static*\/ inline void _hb_warn_no_return<hb_empty_t> (bool returned HB_UNUSED) {}\n+template <>\n+\/*static*\/ inline void _hb_warn_no_return<void> (bool returned HB_UNUSED) {}\n@@ -392,0 +393,4 @@\n+#ifndef HB_DEBUG_WASM\n+#define HB_DEBUG_WASM (HB_DEBUG+0)\n+#endif\n+\n@@ -449,0 +454,13 @@\n+#ifndef HB_DEBUG_PAINT\n+#define HB_DEBUG_PAINT (HB_DEBUG+0)\n+#endif\n+#if HB_DEBUG_PAINT\n+#define TRACE_PAINT(this) \\\n+  HB_UNUSED hb_auto_trace_t<HB_DEBUG_PAINT, void> trace \\\n+  (&c->debug_depth, c->get_name (), this, HB_FUNC, \\\n+   \" \")\n+#else\n+#define TRACE_PAINT(this) HB_UNUSED hb_no_trace_t<void> trace\n+#endif\n+\n+\n@@ -455,0 +473,1 @@\n+        HB_DEBUG_PAINT + \\\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-debug.hh","additions":21,"deletions":2,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -258,0 +258,46 @@\n+\n+\/**\n+ * hb_font_get_glyph_shape_func_t:\n+ * @font: #hb_font_t to work upon\n+ * @font_data: @font user data pointer\n+ * @glyph: The glyph ID to query\n+ * @draw_funcs: The draw functions to send the shape data to\n+ * @draw_data: The data accompanying the draw functions\n+ * @user_data: User data pointer passed by the caller\n+ *\n+ * A virtual method for the #hb_font_funcs_t of an #hb_font_t object.\n+ *\n+ * Since: 4.0.0\n+ * Deprecated: 7.0.0: Use #hb_font_draw_glyph_func_t instead\n+ **\/\n+typedef void (*hb_font_get_glyph_shape_func_t) (hb_font_t *font, void *font_data,\n+                                                hb_codepoint_t glyph,\n+                                                hb_draw_funcs_t *draw_funcs, void *draw_data,\n+                                                void *user_data);\n+\n+\/**\n+ * hb_font_funcs_set_glyph_shape_func:\n+ * @ffuncs: A font-function structure\n+ * @func: (closure user_data) (destroy destroy) (scope notified): The callback function to assign\n+ * @user_data: Data to pass to @func\n+ * @destroy: (nullable): The function to call when @user_data is not needed anymore\n+ *\n+ * Sets the implementation function for #hb_font_get_glyph_shape_func_t,\n+ * which is the same as #hb_font_draw_glyph_func_t.\n+ *\n+ * Since: 4.0.0\n+ * Deprecated: 7.0.0: Use hb_font_funcs_set_draw_glyph_func() instead\n+ **\/\n+HB_DEPRECATED_FOR (hb_font_funcs_set_draw_glyph_func)\n+HB_EXTERN void\n+hb_font_funcs_set_glyph_shape_func (hb_font_funcs_t *ffuncs,\n+                                    hb_font_get_glyph_shape_func_t func,\n+                                    void *user_data, hb_destroy_func_t destroy);\n+\n+HB_DEPRECATED_FOR (hb_font_draw_glyph)\n+HB_EXTERN void\n+hb_font_get_glyph_shape (hb_font_t *font,\n+                         hb_codepoint_t glyph,\n+                         hb_draw_funcs_t *dfuncs, void *draw_data);\n+\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-deprecated.h","additions":46,"deletions":0,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -96,2 +96,4 @@\n-  void move_to (void *draw_data, hb_draw_state_t &st,\n-                float to_x, float to_y)\n+  void\n+  HB_ALWAYS_INLINE\n+  move_to (void *draw_data, hb_draw_state_t &st,\n+           float to_x, float to_y)\n@@ -99,1 +101,1 @@\n-    if (st.path_open) close_path (draw_data, st);\n+    if (unlikely (st.path_open)) close_path (draw_data, st);\n@@ -104,2 +106,4 @@\n-  void line_to (void *draw_data, hb_draw_state_t &st,\n-                float to_x, float to_y)\n+  void\n+  HB_ALWAYS_INLINE\n+  line_to (void *draw_data, hb_draw_state_t &st,\n+           float to_x, float to_y)\n@@ -107,1 +111,1 @@\n-    if (!st.path_open) start_path (draw_data, st);\n+    if (unlikely (!st.path_open)) start_path (draw_data, st);\n@@ -114,0 +118,1 @@\n+  HB_ALWAYS_INLINE\n@@ -118,1 +123,1 @@\n-    if (!st.path_open) start_path (draw_data, st);\n+    if (unlikely (!st.path_open)) start_path (draw_data, st);\n@@ -125,0 +130,1 @@\n+  HB_ALWAYS_INLINE\n@@ -130,1 +136,1 @@\n-    if (!st.path_open) start_path (draw_data, st);\n+    if (unlikely (!st.path_open)) start_path (draw_data, st);\n@@ -137,0 +143,1 @@\n+  HB_ALWAYS_INLINE\n@@ -139,1 +146,1 @@\n-    if (st.path_open)\n+    if (likely (st.path_open))\n@@ -171,0 +178,1 @@\n+  HB_ALWAYS_INLINE\n@@ -180,0 +188,1 @@\n+  HB_ALWAYS_INLINE\n@@ -190,0 +199,1 @@\n+  HB_ALWAYS_INLINE\n@@ -203,0 +213,1 @@\n+  HB_ALWAYS_INLINE\n@@ -218,0 +229,1 @@\n+  HB_ALWAYS_INLINE\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-draw.hh","additions":21,"deletions":9,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -1069,1 +1069,1 @@\n- * IDs must be returned in a #hb_codepoint_t output parameter. Stopes at the\n+ * IDs must be returned in a #hb_codepoint_t output parameter. Stops at the\n@@ -1392,0 +1392,1 @@\n+#ifndef HB_DISABLE_DEPRECATED\n@@ -1413,0 +1414,1 @@\n+#endif\n@@ -2651,1 +2653,0 @@\n-  font->face->table.avar->map_coords (normalized, coords_length);\n@@ -2723,2 +2724,0 @@\n-  font->face->table.avar->map_coords (normalized, coords_length);\n-\n@@ -3061,0 +3060,1 @@\n+#ifndef HB_DISABLE_DEPRECATED\n@@ -3069,0 +3069,1 @@\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-font.cc","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -488,19 +488,0 @@\n-\/**\n- * hb_font_get_glyph_shape_func_t:\n- * @font: #hb_font_t to work upon\n- * @font_data: @font user data pointer\n- * @glyph: The glyph ID to query\n- * @draw_funcs: The draw functions to send the shape data to\n- * @draw_data: The data accompanying the draw functions\n- * @user_data: User data pointer passed by the caller\n- *\n- * A virtual method for the #hb_font_funcs_t of an #hb_font_t object.\n- *\n- * Since: 4.0.0\n- * Deprecated: 7.0.0: Use #hb_font_draw_glyph_func_t instead\n- **\/\n-typedef void (*hb_font_get_glyph_shape_func_t) (hb_font_t *font, void *font_data,\n-                                                hb_codepoint_t glyph,\n-                                                hb_draw_funcs_t *draw_funcs, void *draw_data,\n-                                                void *user_data);\n-\n@@ -806,18 +787,0 @@\n-\/**\n- * hb_font_funcs_set_glyph_shape_func:\n- * @ffuncs: A font-function structure\n- * @func: (closure user_data) (destroy destroy) (scope notified): The callback function to assign\n- * @user_data: Data to pass to @func\n- * @destroy: (nullable): The function to call when @user_data is not needed anymore\n- *\n- * Sets the implementation function for #hb_font_get_glyph_shape_func_t,\n- * which is the same as #hb_font_draw_glyph_func_t.\n- *\n- * Since: 4.0.0\n- * Deprecated: 7.0.0: Use hb_font_funcs_set_draw_glyph_func() instead\n- **\/\n-HB_EXTERN void\n-hb_font_funcs_set_glyph_shape_func (hb_font_funcs_t *ffuncs,\n-                                    hb_font_get_glyph_shape_func_t func,\n-                                    void *user_data, hb_destroy_func_t destroy);\n-\n@@ -831,2 +794,1 @@\n- * Sets the implementation function for #hb_font_draw_glyph_func_t,\n- * which is the same as #hb_font_get_glyph_shape_func_t.\n+ * Sets the implementation function for #hb_font_draw_glyph_func_t.\n@@ -937,5 +899,0 @@\n-HB_EXTERN void\n-hb_font_get_glyph_shape (hb_font_t *font,\n-                         hb_codepoint_t glyph,\n-                         hb_draw_funcs_t *dfuncs, void *draw_data);\n-\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-font.h","additions":1,"deletions":44,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -117,1 +117,1 @@\n-  ft_font->advance_cache.init ();\n+  new (&ft_font->advance_cache) hb_ft_advance_cache_t;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ft.cc","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -66,0 +66,1 @@\n+  static constexpr bool has_fast_len = false; \/\/ Should be checked in combination with is_random_access_iterator.\n@@ -396,1 +397,1 @@\n-  hb_reference_wrapper<Proj> f;\n+  mutable hb_reference_wrapper<Proj> f;\n@@ -459,2 +460,2 @@\n-  hb_reference_wrapper<Pred> p;\n-  hb_reference_wrapper<Proj> f;\n+  mutable hb_reference_wrapper<Pred> p;\n+  mutable hb_reference_wrapper<Proj> f;\n@@ -844,1 +845,1 @@\n-  ( hb_zip (hb_range (count), it) | hb_map (hb_second) )\n+  ( hb_zip (hb_range (count), it) | hb_map_retains_sorting (hb_second) )\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-iter.hh","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-    OT::hb_ot_apply_context_t c (1, font, buffer);\n+    OT::hb_ot_apply_context_t c (1, font, buffer, hb_blob_get_empty ());\n@@ -73,1 +73,1 @@\n-      skippy_iter.reset (idx, 1);\n+      skippy_iter.reset (idx);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-kern.hh","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -92,0 +92,4 @@\n+#ifndef HB_GLYF_VAR_COMPOSITE_MAX_AXES\n+#define HB_GLYF_VAR_COMPOSITE_MAX_AXES 4096\n+#endif\n+\n@@ -105,1 +109,1 @@\n-#define HB_COLRV1_MAX_EDGE_COUNT 1024\n+#define HB_COLRV1_MAX_EDGE_COUNT 65536\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-limits.hh","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -183,0 +183,3 @@\n+  hb_lazy_loader_t () = default;\n+  hb_lazy_loader_t (const hb_lazy_loader_t &other) = delete;\n+\n@@ -281,1 +284,5 @@\n-                                                hb_face_t, WheresFace> {};\n+                                                hb_face_t, WheresFace>\n+{\n+  \/\/ Hack; have them here for API parity with hb_table_lazy_loader_t\n+  hb_blob_t *get_blob () { return this->get ()->get_blob (); }\n+};\n@@ -291,1 +298,1 @@\n-    auto c = hb_sanitize_context_t ();\n+    hb_sanitize_context_t c;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-machinery.hh","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -368,1 +368,1 @@\n- * Fetches the next key\/value paire in @map.\n+ * Fetches the next key\/value pair in @map.\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-map.cc","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-#define HB_MAP_VALUE_INVALID ((hb_codepoint_t) -1)\n+#define HB_MAP_VALUE_INVALID HB_CODEPOINT_INVALID\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-map.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-  hb_hashmap_t (const hb_hashmap_t& o) : hb_hashmap_t () { resize (o.population); hb_copy (o, *this); }\n+  hb_hashmap_t (const hb_hashmap_t& o) : hb_hashmap_t () { alloc (o.population); hb_copy (o, *this); }\n@@ -50,1 +50,1 @@\n-  hb_hashmap_t& operator= (const hb_hashmap_t& o)  { reset (); resize (o.population); hb_copy (o, *this); return *this; }\n+  hb_hashmap_t& operator= (const hb_hashmap_t& o)  { reset (); alloc (o.population); hb_copy (o, *this); return *this; }\n@@ -63,2 +63,2 @@\n-    if (iter.is_random_access_iterator)\n-      resize (hb_len (iter));\n+    if (iter.is_random_access_iterator || iter.has_fast_len)\n+      alloc (hb_len (iter));\n@@ -71,1 +71,1 @@\n-    uint32_t hash : 30;\n+    uint32_t is_real_ : 1;\n@@ -73,1 +73,1 @@\n-    uint32_t is_tombstone_ : 1;\n+    uint32_t hash : 30;\n@@ -77,0 +77,1 @@\n+                is_real_ (false), is_used_ (false),\n@@ -78,1 +79,0 @@\n-                is_used_ (false), is_tombstone_ (false),\n@@ -81,0 +81,4 @@\n+    \/\/ Needed for https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/4138\n+    K& get_key () { return key; }\n+    V& get_value () { return value; }\n+\n@@ -83,3 +87,2 @@\n-    bool is_tombstone () const { return is_tombstone_; }\n-    void set_tombstone (bool is_tombstone) { is_tombstone_ = is_tombstone; }\n-    bool is_real () const { return is_used_ && !is_tombstone_; }\n+    void set_real (bool is_real) { is_real_ = is_real; }\n+    bool is_real () const { return is_real_; }\n@@ -101,1 +104,1 @@\n-    hb_pair_t<const K &, const V &> get_pair_ref() const { return hb_pair_t<const K &, const V &> (key, value); }\n+    hb_pair_t<const K &, V &> get_pair_ref() { return hb_pair_t<const K &, V &> (key, value); }\n@@ -104,1 +107,6 @@\n-    { return (hash * 31) + hb_hash (value); }\n+    { return (hash * 31u) + hb_hash (value); }\n+\n+    static constexpr bool is_trivial = hb_is_trivially_constructible(K) &&\n+                                       hb_is_trivially_destructible(K) &&\n+                                       hb_is_trivially_constructible(V) &&\n+                                       hb_is_trivially_destructible(V);\n@@ -113,0 +121,1 @@\n+  unsigned int max_chain_length;\n@@ -126,0 +135,1 @@\n+    hb_swap (a.max_chain_length, b.max_chain_length);\n@@ -136,0 +146,1 @@\n+    max_chain_length = 0;\n@@ -142,1 +153,2 @@\n-    if (likely (items)) {\n+    if (likely (items))\n+    {\n@@ -144,2 +156,3 @@\n-      for (unsigned i = 0; i < size; i++)\n-        items[i].~item_t ();\n+      if (!item_t::is_trivial)\n+        for (unsigned i = 0; i < size; i++)\n+          items[i].~item_t ();\n@@ -160,1 +173,1 @@\n-  bool resize (unsigned new_population = 0)\n+  bool alloc (unsigned new_population = 0)\n@@ -174,2 +187,5 @@\n-    for (auto &_ : hb_iter (new_items, new_size))\n-      new (&_) item_t ();\n+    if (!item_t::is_trivial)\n+      for (auto &_ : hb_iter (new_items, new_size))\n+        new (&_) item_t ();\n+    else\n+      hb_memset (new_items, 0, (size_t) new_size * sizeof (item_t));\n@@ -184,0 +200,1 @@\n+    max_chain_length = power * 2;\n@@ -195,1 +212,2 @@\n-      old_items[i].~item_t ();\n+      if (!item_t::is_trivial)\n+        old_items[i].~item_t ();\n@@ -204,1 +222,1 @@\n-  bool set_with_hash (KK&& key, uint32_t hash, VV&& value, bool is_delete=false)\n+  bool set_with_hash (KK&& key, uint32_t hash, VV&& value, bool overwrite = true)\n@@ -207,2 +225,22 @@\n-    if (unlikely ((occupancy + occupancy \/ 2) >= mask && !resize ())) return false;\n-    item_t &item = item_for_hash (key, hash);\n+    if (unlikely ((occupancy + occupancy \/ 2) >= mask && !alloc ())) return false;\n+\n+    hash &= 0x3FFFFFFF; \/\/ We only store lower 30bit of hash\n+    unsigned int tombstone = (unsigned int) -1;\n+    unsigned int i = hash % prime;\n+    unsigned length = 0;\n+    unsigned step = 0;\n+    while (items[i].is_used ())\n+    {\n+      if ((std::is_integral<K>::value || items[i].hash == hash) &&\n+          items[i] == key)\n+      {\n+        if (!overwrite)\n+          return false;\n+        else\n+          break;\n+      }\n+      if (!items[i].is_real () && tombstone == (unsigned) -1)\n+        tombstone = i;\n+      i = (i + ++step) & mask;\n+      length++;\n+    }\n@@ -210,2 +248,1 @@\n-    if (is_delete && !(item == key))\n-      return true; \/* Trying to delete non-existent key. *\/\n+    item_t &item = items[tombstone == (unsigned) -1 ? i : tombstone];\n@@ -216,2 +253,1 @@\n-      if (!item.is_tombstone ())\n-        population--;\n+      population -= item.is_real ();\n@@ -224,1 +260,1 @@\n-    item.set_tombstone (is_delete);\n+    item.set_real (true);\n@@ -227,2 +263,4 @@\n-    if (!is_delete)\n-      population++;\n+    population++;\n+\n+    if (unlikely (length > max_chain_length) && occupancy * 8 > mask)\n+      alloc (mask - 8); \/\/ This ensures we jump to next larger size\n@@ -234,1 +272,1 @@\n-  bool set (const K &key, VV&& value) { return set_with_hash (key, hb_hash (key), std::forward<VV> (value)); }\n+  bool set (const K &key, VV&& value, bool overwrite = true) { return set_with_hash (key, hb_hash (key), std::forward<VV> (value), overwrite); }\n@@ -236,1 +274,10 @@\n-  bool set (K &&key, VV&& value) { return set_with_hash (std::move (key), hb_hash (key), std::forward<VV> (value)); }\n+  bool set (K &&key, VV&& value, bool overwrite = true)\n+  {\n+    uint32_t hash = hb_hash (key);\n+    return set_with_hash (std::move (key), hash, std::forward<VV> (value), overwrite);\n+  }\n+  bool add (const K &key)\n+  {\n+    uint32_t hash = hb_hash (key);\n+    return set_with_hash (key, hash, item_t::default_value ());\n+  }\n@@ -240,3 +287,5 @@\n-    if (unlikely (!items)) return item_t::default_value ();\n-    auto &item = item_for_hash (key, hash);\n-    return item.is_real () && item == key ? item.value : item_t::default_value ();\n+    if (!items) return item_t::default_value ();\n+    auto *item = fetch_item (key, hb_hash (key));\n+    if (item)\n+      return item->value;\n+    return item_t::default_value ();\n@@ -246,1 +295,1 @@\n-    if (unlikely (!items)) return item_t::default_value ();\n+    if (!items) return item_t::default_value ();\n@@ -250,1 +299,10 @@\n-  void del (const K &key) { set_with_hash (key, hb_hash (key), item_t::default_value (), true); }\n+  void del (const K &key)\n+  {\n+    if (!items) return;\n+    auto *item = fetch_item (key, hb_hash (key));\n+    if (item)\n+    {\n+      item->set_real (false);\n+      population--;\n+    }\n+  }\n@@ -255,1 +313,1 @@\n-  bool has (K key, VV **vp = nullptr) const\n+  bool has (const K &key, VV **vp = nullptr) const\n@@ -257,4 +315,3 @@\n-    if (unlikely (!items))\n-      return false;\n-    auto &item = item_for_hash (key, hb_hash (key));\n-    if (item.is_real () && item == key)\n+    if (!items) return false;\n+    auto *item = fetch_item (key, hb_hash (key));\n+    if (item)\n@@ -262,1 +319,1 @@\n-      if (vp) *vp = std::addressof (item.value);\n+      if (vp) *vp = std::addressof (item->value);\n@@ -265,2 +322,20 @@\n-    else\n-      return false;\n+    return false;\n+  }\n+  item_t *fetch_item (const K &key, uint32_t hash) const\n+  {\n+    hash &= 0x3FFFFFFF; \/\/ We only store lower 30bit of hash\n+    unsigned int i = hash % prime;\n+    unsigned step = 0;\n+    while (items[i].is_used ())\n+    {\n+      if ((std::is_integral<K>::value || items[i].hash == hash) &&\n+          items[i] == key)\n+      {\n+        if (items[i].is_real ())\n+          return &items[i];\n+        else\n+          return nullptr;\n+      }\n+      i = (i + ++step) & mask;\n+    }\n+    return nullptr;\n@@ -269,1 +344,1 @@\n-  V operator () (K k) const { return get (k); }\n+  const V& operator () (K k) const { return get (k); }\n@@ -326,1 +401,1 @@\n-    + hb_iter (items, size ())\n+    + hb_iter (items, this->size ())\n@@ -331,1 +406,1 @@\n-    + iter_items ()\n+    + this->iter_items ()\n@@ -336,1 +411,1 @@\n-    + iter_items ()\n+    + this->iter_items ()\n@@ -341,2 +416,2 @@\n-    + iter_items ()\n-    | hb_map (&item_t::key)\n+    + this->iter_items ()\n+    | hb_map (&item_t::get_key)\n@@ -346,2 +421,1 @@\n-    + iter_items ()\n-    | hb_map (&item_t::key)\n+    + this->keys_ref ()\n@@ -352,2 +426,2 @@\n-    + iter_items ()\n-    | hb_map (&item_t::value)\n+    + this->iter_items ()\n+    | hb_map (&item_t::get_value)\n@@ -357,2 +431,1 @@\n-    + iter_items ()\n-    | hb_map (&item_t::value)\n+    + this->values_ref ()\n@@ -396,17 +469,0 @@\n-  item_t& item_for_hash (const K &key, uint32_t hash) const\n-  {\n-    hash &= 0x3FFFFFFF; \/\/ We only store lower 30bit of hash\n-    unsigned int i = hash % prime;\n-    unsigned int step = 0;\n-    unsigned int tombstone = (unsigned) -1;\n-    while (items[i].is_used ())\n-    {\n-      if (items[i].hash == hash && items[i] == key)\n-        return items[i];\n-      if (tombstone == (unsigned) -1 && items[i].is_tombstone ())\n-        tombstone = i;\n-      i = (i + ++step) & mask;\n-    }\n-    return items[tombstone == (unsigned) -1 ? i : tombstone];\n-  }\n-\n@@ -483,1 +539,1 @@\n-  hb_map_t (std::initializer_list<hb_pair_t<hb_codepoint_t, hb_codepoint_t>> lst) : hashmap (lst) {}\n+  hb_map_t (std::initializer_list<hb_codepoint_pair_t> lst) : hashmap (lst) {}\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-map.hh","additions":130,"deletions":74,"binary":false,"changes":204,"status":"modified"},{"patch":"@@ -156,2 +156,2 @@\n-  operator T () const { return v; }\n-  T get () const { return v; }\n+  operator T& () { return v; }\n+  T& get () { return v; }\n@@ -166,2 +166,2 @@\n-  operator T& () const { return *v; }\n-  T& get () const { return *v; }\n+  operator T& () { return *v; }\n+  T& get () { return *v; }\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-meta.hh","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -41,2 +41,2 @@\n-    hb_codepoint_t *i;\n-    if (multiples_indices.has (k, &i))\n+    hb_vector_t<hb_codepoint_t> *m;\n+    if (multiples.has (k, &m))\n@@ -44,1 +44,1 @@\n-      multiples_values[*i].push (v);\n+      m->push (v);\n@@ -54,6 +54,1 @@\n-      multiples_indices.set (k, multiples_values.length);\n-      auto *vec = multiples_values.push ();\n-\n-      vec->push (old);\n-      vec->push (v);\n-\n+      multiples.set (k, hb_vector_t<hb_codepoint_t> {old, v});\n@@ -72,3 +67,3 @@\n-    hb_codepoint_t *i;\n-    if (multiples_indices.has (k, &i))\n-      return multiples_values[*i].as_array ();\n+    hb_vector_t<hb_codepoint_t> *m;\n+    if (multiples.has (k, &m))\n+      return m->as_array ();\n@@ -81,1 +76,11 @@\n-    return singulars.in_error () || multiples_indices.in_error () || multiples_values.in_error ();\n+    if (singulars.in_error () || multiples.in_error ())\n+      return true;\n+    for (const auto &m : multiples.values_ref ())\n+      if (m.in_error ())\n+        return true;\n+    return false;\n+  }\n+\n+  void alloc (unsigned size)\n+  {\n+    singulars.alloc (size);\n@@ -86,2 +91,1 @@\n-  hb_map_t multiples_indices;\n-  hb_vector_t<hb_vector_t<hb_codepoint_t>> multiples_values;\n+  hb_hashmap_t<hb_codepoint_t, hb_vector_t<hb_codepoint_t>> multiples;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-multimap.hh","additions":19,"deletions":15,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-#define HB_NULL_POOL_SIZE 448\n+#define HB_NULL_POOL_SIZE 640\n@@ -88,1 +88,1 @@\n-struct _hb_static_size<T, hb_void_t<decltype (T::min_size)>> : hb_integral_constant<unsigned, T::static_size> {};\n+struct _hb_static_size<T, hb_void_t<decltype (T::static_size)>> : hb_integral_constant<unsigned, T::static_size> {};\n@@ -179,1 +179,1 @@\n-  memcpy (obj, &Null (Type), sizeof (*obj));\n+  memcpy (obj, std::addressof (Null (Type)), sizeof (*obj));\n@@ -214,1 +214,1 @@\n-  T ** operator & () const { return &v; }\n+  T ** operator & () const { return std::addressof (v); }\n@@ -218,1 +218,1 @@\n-  T * get () const { return v ? v : const_cast<T *> (&Null (T)); }\n+  T * get () const { return v ? v : const_cast<T *> (std::addressof (Null (T))); }\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-null.hh","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-#line 32 \"hb-number-parser.hh\"\n+#line 35 \"hb-number-parser.hh\"\n@@ -138,1 +138,1 @@\n-#line 132 \"hb-number-parser.hh\"\n+#line 139 \"hb-number-parser.hh\"\n@@ -143,1 +143,1 @@\n-#line 135 \"hb-number-parser.hh\"\n+#line 144 \"hb-number-parser.hh\"\n@@ -201,1 +201,1 @@\n-#line 187 \"hb-number-parser.hh\"\n+#line 202 \"hb-number-parser.hh\"\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-number-parser.hh","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -134,1 +134,1 @@\n-    unsigned num_items = it.len ();\n+    unsigned num_items = hb_len (it);\n@@ -148,1 +148,1 @@\n-      char *start = (char *) c->allocate_size<void> (len);\n+      char *start = (char *) c->allocate_size<void> (len, false);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-open-file.hh","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -315,0 +315,2 @@\n+  using target_t = Type;\n+\n@@ -419,1 +421,1 @@\n-    if (unlikely (this->is_null ())) return_trace (true);\n+    \/\/if (unlikely (this->is_null ())) return_trace (true);\n@@ -425,0 +427,3 @@\n+#ifndef HB_OPTIMIZE_SIZE\n+  HB_ALWAYS_INLINE\n+#endif\n@@ -465,1 +470,1 @@\n-  const Type& operator [] (int i_) const\n+  const Type& operator [] (unsigned int i) const\n@@ -467,5 +472,1 @@\n-    unsigned int i = (unsigned int) i_;\n-    const Type *p = &arrayZ[i];\n-    if (unlikely ((const void *) p < (const void *) arrayZ)) return Null (Type); \/* Overflowed. *\/\n-    _hb_compiler_memory_r_barrier ();\n-    return *p;\n+    return arrayZ[i];\n@@ -473,1 +474,1 @@\n-  Type& operator [] (int i_)\n+  Type& operator [] (unsigned int i)\n@@ -475,5 +476,1 @@\n-    unsigned int i = (unsigned int) i_;\n-    Type *p = &arrayZ[i];\n-    if (unlikely ((const void *) p < (const void *) arrayZ)) return Crap (Type); \/* Overflowed. *\/\n-    _hb_compiler_memory_r_barrier ();\n-    return *p;\n+    return arrayZ[i];\n@@ -482,1 +479,1 @@\n-  unsigned int get_size (unsigned int len) const\n+  static unsigned int get_size (unsigned int len)\n@@ -536,0 +533,1 @@\n+  HB_ALWAYS_INLINE\n@@ -724,0 +722,1 @@\n+  HB_ALWAYS_INLINE\n@@ -739,1 +738,1 @@\n-    return_trace (len.sanitize (c) && c->check_array (arrayZ, len));\n+    return_trace (len.sanitize (c) && c->check_array_sized (arrayZ, len, sizeof (LenType)));\n@@ -800,1 +799,1 @@\n-template <typename Type, typename LenType=HBUINT16>\n+template <typename Type, typename LenType>\n@@ -864,0 +863,1 @@\n+  HB_ALWAYS_INLINE\n@@ -881,1 +881,1 @@\n-                  (!lenP1 || c->check_array (arrayZ, lenP1 - 1)));\n+                  (!lenP1 || c->check_array_sized (arrayZ, lenP1 - 1, sizeof (LenType))));\n@@ -890,0 +890,1 @@\n+template <typename Type> using HeadlessArray16Of = HeadlessArrayOf<Type, HBUINT16>;\n@@ -915,0 +916,1 @@\n+  HB_ALWAYS_INLINE\n@@ -932,1 +934,1 @@\n-                  (c->check_array (arrayZ, lenM1 + 1)));\n+                  (c->check_array_sized (arrayZ, lenM1 + 1, sizeof (LenType))));\n@@ -1099,0 +1101,1 @@\n+  HB_ALWAYS_INLINE\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-open-type.hh","additions":21,"deletions":18,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-  hb_codepoint_t code;\n+  unsigned code;\n@@ -55,0 +55,1 @@\n+\n@@ -57,0 +58,11 @@\n+using glyph_to_sid_map_t = hb_vector_t<code_pair_t>;\n+\n+struct length_f_t\n+{\n+  template <typename Iterable,\n+            hb_requires (hb_is_iterable (Iterable))>\n+  unsigned operator () (const Iterable &_) const { return hb_len (hb_iter (_)); }\n+\n+  unsigned operator () (unsigned _) const { return _; }\n+}\n+HB_FUNCOBJ (length_f);\n@@ -65,10 +77,0 @@\n-  CFFIndex *copy (hb_serialize_context_t *c) const\n-  {\n-    TRACE_SERIALIZE (this);\n-    unsigned int size = get_size ();\n-    CFFIndex *out = c->allocate_size<CFFIndex> (size, false);\n-    if (likely (out))\n-      hb_memcpy (out, this, size);\n-    return_trace (out);\n-  }\n-\n@@ -78,1 +80,2 @@\n-                  const Iterable &iterable)\n+                  const Iterable &iterable,\n+                  const unsigned *p_data_size = nullptr)\n@@ -81,0 +84,6 @@\n+    unsigned data_size;\n+    if (p_data_size)\n+      data_size = *p_data_size;\n+    else\n+      total_size (iterable, &data_size);\n+\n@@ -82,1 +91,3 @@\n-    serialize_header(c, + it | hb_map (hb_iter) | hb_map (hb_len));\n+    if (unlikely (!serialize_header (c, +it, data_size))) return_trace (false);\n+    unsigned char *ret = c->allocate_size<unsigned char> (data_size, false);\n+    if (unlikely (!ret)) return_trace (false);\n@@ -84,1 +95,12 @@\n-      hb_iter (_).copy (c);\n+    {\n+      unsigned len = _.length;\n+      if (!len)\n+        continue;\n+      if (len <= 1)\n+      {\n+        *ret++ = *_.arrayZ;\n+        continue;\n+      }\n+      hb_memcpy (ret, _.arrayZ, len);\n+      ret += len;\n+    }\n@@ -91,1 +113,2 @@\n-                        Iterator it)\n+                         Iterator it,\n+                         unsigned data_size)\n@@ -95,2 +118,1 @@\n-    unsigned total = + it | hb_reduce (hb_add, 0);\n-    unsigned off_size = (hb_bit_storage (total + 1) + 7) \/ 8;\n+    unsigned off_size = (hb_bit_storage (data_size + 1) + 7) \/ 8;\n@@ -100,1 +122,1 @@\n-    this->count = it.len ();\n+    this->count = hb_len (it);\n@@ -109,2 +131,1 @@\n-    unsigned int i = 0;\n-    for (unsigned _ : +it)\n+    if (HB_OPTIMIZE_SIZE_VAL)\n@@ -112,2 +133,7 @@\n-      set_offset_at (i++, offset);\n-      offset += _;\n+      unsigned int i = 0;\n+      for (const auto &_ : +it)\n+      {\n+        set_offset_at (i++, offset);\n+        offset += length_f (_);\n+      }\n+      set_offset_at (i, offset);\n@@ -115,2 +141,52 @@\n-    set_offset_at (i, offset);\n-\n+    else\n+      switch (off_size)\n+      {\n+        case 1:\n+        {\n+          HBUINT8 *p = (HBUINT8 *) offsets;\n+          for (const auto &_ : +it)\n+          {\n+            *p++ = offset;\n+            offset += length_f (_);\n+          }\n+          *p = offset;\n+        }\n+        break;\n+        case 2:\n+        {\n+          HBUINT16 *p = (HBUINT16 *) offsets;\n+          for (const auto &_ : +it)\n+          {\n+            *p++ = offset;\n+            offset += length_f (_);\n+          }\n+          *p = offset;\n+        }\n+        break;\n+        case 3:\n+        {\n+          HBUINT24 *p = (HBUINT24 *) offsets;\n+          for (const auto &_ : +it)\n+          {\n+            *p++ = offset;\n+            offset += length_f (_);\n+          }\n+          *p = offset;\n+        }\n+        break;\n+        case 4:\n+        {\n+          HBUINT32 *p = (HBUINT32 *) offsets;\n+          for (const auto &_ : +it)\n+          {\n+            *p++ = offset;\n+            offset += length_f (_);\n+          }\n+          *p = offset;\n+        }\n+        break;\n+        default:\n+        break;\n+      }\n+\n+    assert (offset == data_size + 1);\n@@ -122,1 +198,1 @@\n-  static unsigned total_size (const Iterable &iterable)\n+  static unsigned total_size (const Iterable &iterable, unsigned *data_size = nullptr)\n@@ -124,2 +200,12 @@\n-    auto it = + hb_iter (iterable) | hb_map (hb_iter) | hb_map (hb_len);\n-    if (!it) return 0;\n+    auto it = + hb_iter (iterable);\n+    if (!it)\n+    {\n+      if (data_size) *data_size = 0;\n+      return min_size;\n+    }\n+\n+    unsigned total = 0;\n+    for (const auto &_ : +it)\n+      total += length_f (_);\n+\n+    if (data_size) *data_size = total;\n@@ -127,1 +213,0 @@\n-    unsigned total = + it | hb_reduce (hb_add, 0);\n@@ -136,1 +221,1 @@\n-    HBUINT8 *p = offsets + offSize * index + offSize;\n+\n@@ -138,1 +223,2 @@\n-    for (; size; size--)\n+    const HBUINT8 *p = offsets;\n+    switch (size)\n@@ -140,3 +226,5 @@\n-      --p;\n-      *p = offset & 0xFF;\n-      offset >>= 8;\n+      case 1: ((HBUINT8  *) p)[index] = offset; break;\n+      case 2: ((HBUINT16 *) p)[index] = offset; break;\n+      case 3: ((HBUINT24 *) p)[index] = offset; break;\n+      case 4: ((HBUINT32 *) p)[index] = offset; break;\n+      default: return;\n@@ -152,1 +240,1 @@\n-    const HBUINT8 *p = offsets + size * index;\n+    const HBUINT8 *p = offsets;\n@@ -155,4 +243,4 @@\n-      case 1: return * (HBUINT8  *) p;\n-      case 2: return * (HBUINT16 *) p;\n-      case 3: return * (HBUINT24 *) p;\n-      case 4: return * (HBUINT32 *) p;\n+      case 1: return ((HBUINT8  *) p)[index];\n+      case 2: return ((HBUINT16 *) p)[index];\n+      case 3: return ((HBUINT24 *) p)[index];\n+      case 4: return ((HBUINT32 *) p)[index];\n@@ -163,9 +251,0 @@\n-  unsigned int length_at (unsigned int index) const\n-  {\n-    unsigned offset0 = offset_at (index);\n-    unsigned offset1 = offset_at (index + 1);\n-    if (unlikely (offset1 < offset0 || offset1 > offset_at (count)))\n-      return 0;\n-    return offset1 - offset0;\n-  }\n-\n@@ -173,1 +252,1 @@\n-  { return (const unsigned char *) this + min_size + offSize.static_size + offset_array_size (); }\n+  { return (const unsigned char *) this + min_size + offSize.static_size - 1 + offset_array_size (); }\n@@ -180,3 +259,5 @@\n-    unsigned length = length_at (index);\n-    if (unlikely (!length)) return hb_ubytes_t ();\n-    return hb_ubytes_t (data_base () + offset_at (index) - 1, length);\n+    unsigned offset0 = offset_at (index);\n+    unsigned offset1 = offset_at (index + 1);\n+    if (unlikely (offset1 < offset0 || offset1 > offset_at (count)))\n+      return hb_ubytes_t ();\n+    return hb_ubytes_t (data_base () + offset0, offset1 - offset0);\n@@ -200,1 +281,1 @@\n-                            c->check_array ((const HBUINT8*) data_base (), 1, offset_at (count) - 1)))));\n+                            c->check_array ((const HBUINT8*) data_base (), 1, offset_at (count))))));\n@@ -214,41 +295,0 @@\n-template <typename COUNT, typename TYPE>\n-struct CFFIndexOf : CFFIndex<COUNT>\n-{\n-  template <typename DATA, typename PARAM1, typename PARAM2>\n-  bool serialize (hb_serialize_context_t *c,\n-                  unsigned int offSize_,\n-                  const DATA *dataArray,\n-                  unsigned int dataArrayLen,\n-                  const hb_vector_t<unsigned int> &dataSizeArray,\n-                  const PARAM1 &param1,\n-                  const PARAM2 &param2)\n-  {\n-    TRACE_SERIALIZE (this);\n-    \/* serialize CFFIndex header *\/\n-    if (unlikely (!c->extend_min (this))) return_trace (false);\n-    this->count = dataArrayLen;\n-    this->offSize = offSize_;\n-    if (unlikely (!c->allocate_size<HBUINT8> (offSize_ * (dataArrayLen + 1), false)))\n-      return_trace (false);\n-\n-    \/* serialize indices *\/\n-    unsigned int  offset = 1;\n-    unsigned int  i = 0;\n-    for (; i < dataArrayLen; i++)\n-    {\n-      this->set_offset_at (i, offset);\n-      offset += dataSizeArray[i];\n-    }\n-    this->set_offset_at (i, offset);\n-\n-    \/* serialize data *\/\n-    for (unsigned int i = 0; i < dataArrayLen; i++)\n-    {\n-      TYPE *dest = c->start_embed<TYPE> ();\n-      if (unlikely (!dest || !dest->serialize (c, dataArray[i], param1, param2)))\n-        return_trace (false);\n-    }\n-    return_trace (true);\n-  }\n-};\n-\n@@ -330,1 +370,1 @@\n-struct FDArray : CFFIndexOf<COUNT, FontDict>\n+struct FDArray : CFFIndex<COUNT>\n@@ -341,0 +381,3 @@\n+    if (it.is_random_access_iterator)\n+      sizes.alloc (hb_len (it));\n+\n@@ -342,0 +385,1 @@\n+    char *data_base = c->head;\n@@ -351,0 +395,1 @@\n+    unsigned data_size = c->head - data_base;\n@@ -353,0 +398,5 @@\n+    if (unlikely (sizes.in_error ())) return_trace (false);\n+\n+    \/* It just happens that the above is packed right after the header below.\n+     * Such a hack. *\/\n+\n@@ -354,1 +404,1 @@\n-    return_trace (CFFIndex<COUNT>::serialize_header (c, hb_iter (sizes)));\n+    return_trace (CFFIndex<COUNT>::serialize_header (c, hb_iter (sizes), data_size));\n@@ -371,2 +421,5 @@\n-  hb_codepoint_t get_fd (hb_codepoint_t glyph) const\n-  { return (hb_codepoint_t) fds[glyph]; }\n+  unsigned get_fd (hb_codepoint_t glyph) const\n+  { return fds[glyph]; }\n+\n+  hb_pair_t<unsigned, hb_codepoint_t> get_fd_range (hb_codepoint_t glyph) const\n+  { return {fds[glyph], glyph + 1}; }\n@@ -430,1 +483,1 @@\n-  hb_codepoint_t get_fd (hb_codepoint_t glyph) const\n+  unsigned get_fd (hb_codepoint_t glyph) const\n@@ -436,0 +489,8 @@\n+  hb_pair_t<unsigned, hb_codepoint_t> get_fd_range (hb_codepoint_t glyph) const\n+  {\n+    auto *range = hb_bsearch (glyph, &ranges[0], nRanges () - 1, sizeof (ranges[0]), _cmp_range);\n+    unsigned fd = range ? range->fd : ranges[nRanges () - 1].fd;\n+    hb_codepoint_t end = range ? range[1].first : ranges[nRanges () - 1].first;\n+    return {fd, end};\n+  }\n+\n@@ -472,1 +533,1 @@\n-  hb_codepoint_t get_fd (hb_codepoint_t glyph) const\n+  unsigned get_fd (hb_codepoint_t glyph) const\n@@ -483,0 +544,12 @@\n+  \/* Returns pair of fd and one after last glyph in range. *\/\n+  hb_pair_t<unsigned, hb_codepoint_t> get_fd_range (hb_codepoint_t glyph) const\n+  {\n+    if (this == &Null (FDSelect)) return {0, 1};\n+\n+    switch (format)\n+    {\n+    case 0: return u.format0.get_fd_range (glyph);\n+    case 3: return u.format3.get_fd_range (glyph);\n+    default:return {0, 1};\n+    }\n+  }\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-cff-common.hh","additions":172,"deletions":99,"binary":false,"changes":271,"status":"modified"},{"patch":"@@ -577,1 +577,1 @@\n-  get_seac_param_t (const OT::cff1::accelerator_t *_cff) : cff (_cff) {}\n+  get_seac_param_t (const OT::cff1::accelerator_subset_t *_cff) : cff (_cff) {}\n@@ -581,1 +581,1 @@\n-  const OT::cff1::accelerator_t *cff;\n+  const OT::cff1::accelerator_subset_t *cff;\n@@ -599,1 +599,1 @@\n-bool OT::cff1::accelerator_t::get_seac_components (hb_codepoint_t glyph, hb_codepoint_t *base, hb_codepoint_t *accent) const\n+bool OT::cff1::accelerator_subset_t::get_seac_components (hb_codepoint_t glyph, hb_codepoint_t *base, hb_codepoint_t *accent) const\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-cff1-table.cc","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-#include \"hb-subset-cff1.hh\"\n+#include \"hb-subset-cff-common.hh\"\n@@ -47,1 +47,1 @@\n-#define HB_OT_TAG_cff1 HB_TAG('C','F','F',' ')\n+#define HB_OT_TAG_CFF1 HB_TAG('C','F','F',' ')\n@@ -55,1 +55,0 @@\n-template <typename Type> struct CFF1IndexOf : CFFIndexOf<HBUINT16, Type> {};\n@@ -113,0 +112,1 @@\n+    \/* TODO: Add cache like get_sid. *\/\n@@ -176,5 +176,1 @@\n-    unsigned int size = src.get_size ();\n-    Encoding *dest = c->allocate_size<Encoding> (size);\n-    if (unlikely (!dest)) return_trace (false);\n-    hb_memcpy (dest, &src, size);\n-    return_trace (true);\n+    return_trace (c->embed (src));\n@@ -315,2 +311,3 @@\n-struct Charset0 {\n-  bool sanitize (hb_sanitize_context_t *c, unsigned int num_glyphs) const\n+struct Charset0\n+{\n+  bool sanitize (hb_sanitize_context_t *c, unsigned int num_glyphs, unsigned *num_charset_entries) const\n@@ -319,1 +316,2 @@\n-    return_trace (c->check_struct (this) && sids[num_glyphs - 1].sanitize (c));\n+    if (num_charset_entries) *num_charset_entries = num_glyphs;\n+    return_trace (sids.sanitize (c, num_glyphs - 1));\n@@ -325,1 +323,1 @@\n-    if (glyph == 0)\n+    if (unlikely (glyph == 0))\n@@ -331,1 +329,1 @@\n-  void collect_glyph_to_sid_map (hb_map_t *mapping, unsigned int num_glyphs) const\n+  void collect_glyph_to_sid_map (glyph_to_sid_map_t *mapping, unsigned int num_glyphs) const\n@@ -333,0 +331,1 @@\n+    mapping->resize (num_glyphs, false);\n@@ -334,1 +333,1 @@\n-      mapping->set (gid, sids[gid - 1]);\n+      mapping->arrayZ[gid] = {sids[gid - 1], gid};\n@@ -350,1 +349,1 @@\n-  unsigned int get_size (unsigned int num_glyphs) const\n+  static unsigned int get_size (unsigned int num_glyphs)\n@@ -353,1 +352,1 @@\n-    return HBUINT16::static_size * (num_glyphs - 1);\n+    return UnsizedArrayOf<HBUINT16>::get_size (num_glyphs - 1);\n@@ -356,1 +355,1 @@\n-  HBUINT16  sids[HB_VAR_ARRAY];\n+  UnsizedArrayOf<HBUINT16> sids;\n@@ -377,1 +376,1 @@\n-  bool sanitize (hb_sanitize_context_t *c, unsigned int num_glyphs) const\n+  bool sanitize (hb_sanitize_context_t *c, unsigned int num_glyphs, unsigned *num_charset_entries) const\n@@ -383,1 +382,2 @@\n-    for (unsigned int i = 0; num_glyphs > 0; i++)\n+    unsigned i;\n+    for (i = 0; num_glyphs > 0; i++)\n@@ -389,0 +389,2 @@\n+    if (num_charset_entries)\n+      *num_charset_entries = i;\n@@ -392,1 +394,2 @@\n-  hb_codepoint_t get_sid (hb_codepoint_t glyph, unsigned num_glyphs) const\n+  hb_codepoint_t get_sid (hb_codepoint_t glyph, unsigned num_glyphs,\n+                          code_pair_t *cache = nullptr) const\n@@ -395,3 +398,3 @@\n-    if (glyph == 0) return 0;\n-    glyph--;\n-    for (unsigned int i = 0;; i++)\n+    unsigned i;\n+    hb_codepoint_t start_glyph;\n+    if (cache && likely (cache->glyph <= glyph))\n@@ -399,3 +402,22 @@\n-      if (glyph <= ranges[i].nLeft)\n-        return (hb_codepoint_t) ranges[i].first + glyph;\n-      glyph -= (ranges[i].nLeft + 1);\n+      i = cache->code;\n+      start_glyph = cache->glyph;\n+    }\n+    else\n+    {\n+      if (unlikely (glyph == 0)) return 0;\n+      i = 0;\n+      start_glyph = 1;\n+    }\n+    glyph -= start_glyph;\n+    for (;; i++)\n+    {\n+      unsigned count = ranges[i].nLeft;\n+      if (glyph <= count)\n+      {\n+        if (cache)\n+          *cache = {i, start_glyph};\n+        return ranges[i].first + glyph;\n+      }\n+      count++;\n+      start_glyph += count;\n+      glyph -= count;\n@@ -407,1 +429,1 @@\n-  void collect_glyph_to_sid_map (hb_map_t *mapping, unsigned int num_glyphs) const\n+  void collect_glyph_to_sid_map (glyph_to_sid_map_t *mapping, unsigned int num_glyphs) const\n@@ -409,0 +431,1 @@\n+    mapping->resize (num_glyphs, false);\n@@ -416,0 +439,1 @@\n+      unsigned last = gid + count;\n@@ -417,1 +441,1 @@\n-        mapping->set (gid++, sid++);\n+        mapping->arrayZ[gid++] = {sid++, last - 1};\n@@ -442,2 +466,2 @@\n-    unsigned int size = HBUINT8::static_size;\n-    int glyph = (int)num_glyphs;\n+    int glyph = (int) num_glyphs;\n+    unsigned num_ranges = 0;\n@@ -450,1 +474,1 @@\n-      size += Charset_Range<TYPE>::static_size;\n+      num_ranges++;\n@@ -453,1 +477,6 @@\n-    return size;\n+    return get_size_for_ranges (num_ranges);\n+  }\n+\n+  static unsigned int get_size_for_ranges (unsigned int num_ranges)\n+  {\n+    return UnsizedArrayOf<Charset_Range<TYPE> >::get_size (num_ranges);\n@@ -456,1 +485,1 @@\n-  Charset_Range<TYPE>   ranges[HB_VAR_ARRAY];\n+  UnsizedArrayOf<Charset_Range<TYPE>> ranges;\n@@ -472,5 +501,1 @@\n-    unsigned int size = src.get_size (num_glyphs);\n-    Charset *dest = c->allocate_size<Charset> (size);\n-    if (unlikely (!dest)) return_trace (false);\n-    hb_memcpy (dest, &src, size);\n-    return_trace (true);\n+    return_trace (c->embed ((const char *) &src, src.get_size (num_glyphs)));\n@@ -493,1 +518,1 @@\n-      Charset0 *fmt0 = c->allocate_size<Charset0> (Charset0::min_size + HBUINT16::static_size * (num_glyphs - 1));\n+      Charset0 *fmt0 = c->allocate_size<Charset0> (Charset0::get_size (num_glyphs), false);\n@@ -498,2 +523,2 @@\n-        hb_codepoint_t sid = sid_ranges[i].code;\n-        for (int left = (int)sid_ranges[i].glyph; left >= 0; left--)\n+        hb_codepoint_t sid = sid_ranges.arrayZ[i].code;\n+        for (int left = (int)sid_ranges.arrayZ[i].glyph; left >= 0; left--)\n@@ -507,1 +532,1 @@\n-      Charset1 *fmt1 = c->allocate_size<Charset1> (Charset1::min_size + Charset1_Range::static_size * sid_ranges.length);\n+      Charset1 *fmt1 = c->allocate_size<Charset1> (Charset1::get_size_for_ranges (sid_ranges.length), false);\n@@ -509,0 +534,1 @@\n+      hb_codepoint_t all_glyphs = 0;\n@@ -511,4 +537,4 @@\n-        if (unlikely (!(sid_ranges[i].glyph <= 0xFF)))\n-          return_trace (false);\n-        fmt1->ranges[i].first = sid_ranges[i].code;\n-        fmt1->ranges[i].nLeft = sid_ranges[i].glyph;\n+        auto &_ = sid_ranges.arrayZ[i];\n+        all_glyphs |= _.glyph;\n+        fmt1->ranges[i].first = _.code;\n+        fmt1->ranges[i].nLeft = _.glyph;\n@@ -516,0 +542,2 @@\n+      if (unlikely (!(all_glyphs <= 0xFF)))\n+        return_trace (false);\n@@ -521,1 +549,1 @@\n-      Charset2 *fmt2 = c->allocate_size<Charset2> (Charset2::min_size + Charset2_Range::static_size * sid_ranges.length);\n+      Charset2 *fmt2 = c->allocate_size<Charset2> (Charset2::get_size_for_ranges (sid_ranges.length), false);\n@@ -523,0 +551,1 @@\n+      hb_codepoint_t all_glyphs = 0;\n@@ -525,4 +554,4 @@\n-        if (unlikely (!(sid_ranges[i].glyph <= 0xFFFF)))\n-          return_trace (false);\n-        fmt2->ranges[i].first = sid_ranges[i].code;\n-        fmt2->ranges[i].nLeft = sid_ranges[i].glyph;\n+        auto &_ = sid_ranges.arrayZ[i];\n+        all_glyphs |= _.glyph;\n+        fmt2->ranges[i].first = _.code;\n+        fmt2->ranges[i].nLeft = _.glyph;\n@@ -530,0 +559,2 @@\n+      if (unlikely (!(all_glyphs <= 0xFFFF)))\n+        return_trace (false);\n@@ -548,1 +579,2 @@\n-  hb_codepoint_t get_sid (hb_codepoint_t glyph, unsigned int num_glyphs) const\n+  hb_codepoint_t get_sid (hb_codepoint_t glyph, unsigned int num_glyphs,\n+                          code_pair_t *cache = nullptr) const\n@@ -553,2 +585,2 @@\n-    case 1: return u.format1.get_sid (glyph, num_glyphs);\n-    case 2: return u.format2.get_sid (glyph, num_glyphs);\n+    case 1: return u.format1.get_sid (glyph, num_glyphs, cache);\n+    case 2: return u.format2.get_sid (glyph, num_glyphs, cache);\n@@ -559,1 +591,1 @@\n-  void collect_glyph_to_sid_map (hb_map_t *mapping, unsigned int num_glyphs) const\n+  void collect_glyph_to_sid_map (glyph_to_sid_map_t *mapping, unsigned int num_glyphs) const\n@@ -581,1 +613,1 @@\n-  bool sanitize (hb_sanitize_context_t *c) const\n+  bool sanitize (hb_sanitize_context_t *c, unsigned *num_charset_entries) const\n@@ -589,3 +621,3 @@\n-    case 0: return_trace (u.format0.sanitize (c, c->get_num_glyphs ()));\n-    case 1: return_trace (u.format1.sanitize (c, c->get_num_glyphs ()));\n-    case 2: return_trace (u.format2.sanitize (c, c->get_num_glyphs ()));\n+    case 0: return_trace (u.format0.sanitize (c, c->get_num_glyphs (), num_charset_entries));\n+    case 1: return_trace (u.format1.sanitize (c, c->get_num_glyphs (), num_charset_entries));\n+    case 2: return_trace (u.format2.sanitize (c, c->get_num_glyphs (), num_charset_entries));\n@@ -609,1 +641,1 @@\n-                  const hb_inc_bimap_t &sidmap)\n+                  const hb_vector_t<unsigned> &sidmap)\n@@ -612,1 +644,1 @@\n-    if (unlikely ((strings.count == 0) || (sidmap.get_population () == 0)))\n+    if (unlikely ((strings.count == 0) || (sidmap.length == 0)))\n@@ -620,9 +652,7 @@\n-    byte_str_array_t bytesArray;\n-    if (!bytesArray.resize (sidmap.get_population ()))\n-      return_trace (false);\n-    for (unsigned int i = 0; i < strings.count; i++)\n-    {\n-      hb_codepoint_t  j = sidmap[i];\n-      if (j != HB_MAP_VALUE_INVALID)\n-        bytesArray[j] = strings[i];\n-    }\n+    if (unlikely (sidmap.in_error ())) return_trace (false);\n+\n+    \/\/ Save this in a vector since serialize() iterates it twice.\n+    hb_vector_t<hb_ubytes_t> bytesArray (+ hb_iter (sidmap)\n+                                         | hb_map (strings));\n+\n+    if (unlikely (bytesArray.in_error ())) return_trace (false);\n@@ -935,1 +965,1 @@\n-struct cff1_private_dict_opset_subset : dict_opset_t\n+struct cff1_private_dict_opset_subset_t : dict_opset_t\n@@ -981,1 +1011,1 @@\n-typedef CFF1IndexOf<TopDict> CFF1TopDictIndex;\n+typedef CFF1Index CFF1TopDictIndex;\n@@ -1022,1 +1052,1 @@\n-  static constexpr hb_tag_t tableTag = HB_OT_TAG_cff1;\n+  static constexpr hb_tag_t tableTag = HB_OT_TAG_CFF1;\n@@ -1034,1 +1064,3 @@\n-    void init (hb_face_t *face)\n+    static constexpr hb_tag_t tableTag = cff1::tableTag;\n+\n+    accelerator_templ_t (hb_face_t *face)\n@@ -1036,0 +1068,2 @@\n+      if (!face) return;\n+\n@@ -1049,1 +1083,1 @@\n-      { fini (); return; }\n+        goto fail;\n@@ -1053,1 +1087,1 @@\n-      { fini (); return; }\n+        goto fail;\n@@ -1057,1 +1091,1 @@\n-      { fini (); return; }\n+        goto fail;\n@@ -1061,1 +1095,1 @@\n-        if (unlikely (!topDictStr.sanitize (&sc))) { fini (); return; }\n+        if (unlikely (!topDictStr.sanitize (&sc)))   goto fail;\n@@ -1064,1 +1098,1 @@\n-        if (unlikely (!top_interp.interpret (topDict))) { fini (); return; }\n+        if (unlikely (!top_interp.interpret (topDict)))   goto fail;\n@@ -1072,1 +1106,1 @@\n-        if (unlikely ((charset == &Null (Charset)) || !charset->sanitize (&sc))) { fini (); return; }\n+        if (unlikely ((charset == &Null (Charset)) || !charset->sanitize (&sc, &num_charset_entries)))   goto fail;\n@@ -1082,1 +1116,1 @@\n-        { fini (); return; }\n+          goto fail;\n@@ -1095,1 +1129,1 @@\n-        if (unlikely (charset == &Null (Charset))) { fini (); return; }\n+        if (unlikely (charset == &Null (Charset)))   goto fail;\n@@ -1102,1 +1136,1 @@\n-          if (unlikely ((encoding == &Null (Encoding)) || !encoding->sanitize (&sc))) { fini (); return; }\n+          if (unlikely ((encoding == &Null (Encoding)) || !encoding->sanitize (&sc)))   goto fail;\n@@ -1108,1 +1142,1 @@\n-      { fini (); return; }\n+        goto fail;\n@@ -1112,1 +1146,1 @@\n-      { fini (); return; }\n+        goto fail;\n@@ -1117,1 +1151,1 @@\n-      { fini (); return; }\n+        goto fail;\n@@ -1121,1 +1155,1 @@\n-      { fini (); return; }\n+        goto fail;\n@@ -1124,1 +1158,1 @@\n-      { fini (); return; }\n+        goto fail;\n@@ -1134,1 +1168,1 @@\n-          if (unlikely (!fontDictStr.sanitize (&sc))) { fini (); return; }\n+          if (unlikely (!fontDictStr.sanitize (&sc)))   goto fail;\n@@ -1139,1 +1173,1 @@\n-          if (unlikely (fontDicts.in_error ())) { fini (); return; }\n+          if (unlikely (fontDicts.in_error ()))   goto fail;\n@@ -1142,1 +1176,1 @@\n-          if (unlikely (!font_interp.interpret (*font))) { fini (); return; }\n+          if (unlikely (!font_interp.interpret (*font)))   goto fail;\n@@ -1145,1 +1179,1 @@\n-          if (unlikely (!privDictStr.sanitize (&sc))) { fini (); return; }\n+          if (unlikely (!privDictStr.sanitize (&sc)))   goto fail;\n@@ -1149,1 +1183,1 @@\n-          if (unlikely (!priv_interp.interpret (*priv))) { fini (); return; }\n+          if (unlikely (!priv_interp.interpret (*priv)))   goto fail;\n@@ -1154,1 +1188,1 @@\n-          { fini (); return; }\n+            goto fail;\n@@ -1163,1 +1197,1 @@\n-        if (unlikely (!privDictStr.sanitize (&sc))) { fini (); return; }\n+        if (unlikely (!privDictStr.sanitize (&sc)))   goto fail;\n@@ -1167,1 +1201,1 @@\n-        if (unlikely (!priv_interp.interpret (*priv))) { fini (); return; }\n+        if (unlikely (!priv_interp.interpret (*priv)))   goto fail;\n@@ -1172,1 +1206,1 @@\n-        { fini (); return; }\n+          goto fail;\n@@ -1174,1 +1208,0 @@\n-    }\n@@ -1176,1 +1209,7 @@\n-    void fini ()\n+      return;\n+\n+      fail:\n+        _fini ();\n+    }\n+    ~accelerator_templ_t () { _fini (); }\n+    void _fini ()\n@@ -1186,0 +1225,2 @@\n+    hb_blob_t *get_blob () const { return blob; }\n+\n@@ -1206,1 +1247,2 @@\n-    hb_codepoint_t glyph_to_code (hb_codepoint_t glyph) const\n+    hb_codepoint_t glyph_to_code (hb_codepoint_t glyph,\n+                                  code_pair_t *glyph_to_sid_cache = nullptr) const\n@@ -1212,1 +1254,1 @@\n-        hb_codepoint_t sid = glyph_to_sid (glyph);\n+        hb_codepoint_t sid = glyph_to_sid (glyph, glyph_to_sid_cache);\n@@ -1230,1 +1272,1 @@\n-    hb_map_t *create_glyph_to_sid_map () const\n+    glyph_to_sid_map_t *create_glyph_to_sid_map () const\n@@ -1234,2 +1276,4 @@\n-        hb_map_t *mapping = hb_map_create ();\n-        mapping->set (0, 0);\n+        auto *mapping = (glyph_to_sid_map_t *) hb_malloc (sizeof (glyph_to_sid_map_t));\n+        if (unlikely (!mapping)) return nullptr;\n+        mapping = new (mapping) glyph_to_sid_map_t ();\n+        mapping->push (code_pair_t {0, 1});\n@@ -1243,1 +1287,2 @@\n-    hb_codepoint_t glyph_to_sid (hb_codepoint_t glyph) const\n+    hb_codepoint_t glyph_to_sid (hb_codepoint_t glyph,\n+                                 code_pair_t *cache = nullptr) const\n@@ -1246,1 +1291,1 @@\n-        return charset->get_sid (glyph, num_glyphs);\n+        return charset->get_sid (glyph, num_glyphs, cache);\n@@ -1315,0 +1360,1 @@\n+    unsigned int             num_charset_entries = 0;\n@@ -1319,1 +1365,1 @@\n-    accelerator_t (hb_face_t *face)\n+    accelerator_t (hb_face_t *face) : SUPER (face)\n@@ -1321,2 +1367,0 @@\n-      SUPER::init (face);\n-\n@@ -1327,1 +1371,0 @@\n-\n@@ -1337,2 +1380,0 @@\n-\n-      SUPER::fini ();\n@@ -1389,0 +1430,1 @@\n+          code_pair_t glyph_to_sid_cache {0, HB_CODEPOINT_INVALID};\n@@ -1391,1 +1433,1 @@\n-            hb_codepoint_t      sid = glyph_to_sid (gid);\n+            hb_codepoint_t      sid = glyph_to_sid (gid, &glyph_to_sid_cache);\n@@ -1429,1 +1471,0 @@\n-    HB_INTERNAL bool get_seac_components (hb_codepoint_t glyph, hb_codepoint_t *base, hb_codepoint_t *accent) const;\n@@ -1456,1 +1497,8 @@\n-  struct accelerator_subset_t : accelerator_templ_t<cff1_private_dict_opset_subset, cff1_private_dict_values_subset_t> {};\n+  struct accelerator_subset_t : accelerator_templ_t<cff1_private_dict_opset_subset_t, cff1_private_dict_values_subset_t>\n+  {\n+    accelerator_subset_t (hb_face_t *face) : SUPER (face) {}\n+    ~accelerator_subset_t ()\n+    {\n+      if (cff_accelerator)\n+        cff_subset_accelerator_t::destroy (cff_accelerator);\n+    }\n@@ -1458,1 +1506,9 @@\n-  bool subset (hb_subset_context_t *c) const { return hb_subset_cff1 (c); }\n+    HB_INTERNAL bool subset (hb_subset_context_t *c) const;\n+    HB_INTERNAL bool serialize (hb_serialize_context_t *c,\n+                                struct cff1_subset_plan &plan) const;\n+    HB_INTERNAL bool get_seac_components (hb_codepoint_t glyph, hb_codepoint_t *base, hb_codepoint_t *accent) const;\n+\n+    mutable CFF::cff_subset_accelerator_t* cff_accelerator = nullptr;\n+\n+    typedef accelerator_templ_t<cff1_private_dict_opset_subset_t, cff1_private_dict_values_subset_t> SUPER;\n+  };\n@@ -1482,0 +1538,4 @@\n+struct cff1_subset_accelerator_t : cff1::accelerator_subset_t {\n+  cff1_subset_accelerator_t (hb_face_t *face) : cff1::accelerator_subset_t (face) {}\n+};\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-cff1-table.hh","additions":176,"deletions":116,"binary":false,"changes":292,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-#include \"hb-subset-cff2.hh\"\n+#include \"hb-subset-cff-common.hh\"\n@@ -41,1 +41,1 @@\n-#define HB_OT_TAG_cff2 HB_TAG('C','F','F','2')\n+#define HB_OT_TAG_CFF2 HB_TAG('C','F','F','2')\n@@ -44,1 +44,0 @@\n-template <typename Type> struct CFF2IndexOf : CFFIndexOf<HBUINT32, Type> {};\n@@ -382,1 +381,1 @@\n-  static constexpr hb_tag_t tableTag = HB_OT_TAG_cff2;\n+  static constexpr hb_tag_t tableTag = HB_OT_TAG_CFF2;\n@@ -394,0 +393,2 @@\n+    static constexpr hb_tag_t tableTag = cff2::tableTag;\n+\n@@ -396,0 +397,2 @@\n+      if (!face) return;\n+\n@@ -467,1 +470,0 @@\n-\n@@ -484,1 +486,1 @@\n-    hb_map_t *create_glyph_to_sid_map () const\n+    hb_vector_t<uint16_t> *create_glyph_to_sid_map () const\n@@ -489,0 +491,2 @@\n+    hb_blob_t *get_blob () const { return blob; }\n+\n@@ -521,1 +525,15 @@\n-  typedef accelerator_templ_t<cff2_private_dict_opset_subset_t, cff2_private_dict_values_subset_t> accelerator_subset_t;\n+  struct accelerator_subset_t : accelerator_templ_t<cff2_private_dict_opset_subset_t, cff2_private_dict_values_subset_t>\n+  {\n+    accelerator_subset_t (hb_face_t *face) : SUPER (face) {}\n+    ~accelerator_subset_t ()\n+    {\n+      if (cff_accelerator)\n+        cff_subset_accelerator_t::destroy (cff_accelerator);\n+    }\n+\n+    HB_INTERNAL bool subset (hb_subset_context_t *c) const;\n+    HB_INTERNAL bool serialize (hb_serialize_context_t *c,\n+                                struct cff2_subset_plan &plan,\n+                                hb_array_t<int> normalized_coords) const;\n+\n+    mutable CFF::cff_subset_accelerator_t* cff_accelerator = nullptr;\n@@ -523,1 +541,2 @@\n-  bool subset (hb_subset_context_t *c) const { return hb_subset_cff2 (c); }\n+    typedef accelerator_templ_t<cff2_private_dict_opset_subset_t, cff2_private_dict_values_subset_t> SUPER;\n+  };\n@@ -538,0 +557,4 @@\n+struct cff2_subset_accelerator_t : cff2::accelerator_subset_t {\n+  cff2_subset_accelerator_t (hb_face_t *face) : cff2::accelerator_subset_t (face) {}\n+};\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-cff2-table.hh","additions":31,"deletions":8,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -280,4 +280,4 @@\n-    writer.end_code_ = c->allocate_size<HBUINT16> (HBUINT16::static_size * segcount);\n-    c->allocate_size<HBUINT16> (2); \/\/ padding\n-    writer.start_code_ = c->allocate_size<HBUINT16> (HBUINT16::static_size * segcount);\n-    writer.id_delta_ = c->allocate_size<HBINT16> (HBINT16::static_size * segcount);\n+    writer.end_code_ = c->allocate_size<HBUINT16> (HBUINT16::static_size * segcount, false);\n+    (void) c->allocate_size<HBUINT16> (2); \/\/ padding\n+    writer.start_code_ = c->allocate_size<HBUINT16> (HBUINT16::static_size * segcount, false);\n+    writer.id_delta_ = c->allocate_size<HBINT16> (HBINT16::static_size * segcount, false);\n@@ -328,1 +328,1 @@\n-    | hb_filter ([&] (const hb_pair_t<hb_codepoint_t, hb_codepoint_t> _)\n+    | hb_filter ([&] (const hb_codepoint_pair_t _)\n@@ -338,1 +338,1 @@\n-    hb_vector_t<hb_pair_t<hb_codepoint_t, hb_codepoint_t>> cp_to_gid {\n+    hb_vector_t<hb_codepoint_pair_t> cp_to_gid {\n@@ -760,2 +760,1 @@\n-        \/* Intention is: if (hb_is_same (T, CmapSubtableFormat13)) continue; *\/\n-        if (! T::group_get_glyph (this->groups[i], end)) continue;\n+        if (T::formatNumber == 13) continue;\n@@ -769,0 +768,2 @@\n+      mapping->alloc (mapping->get_population () + end - start + 1);\n+\n@@ -773,1 +774,1 @@\n-        gid++;\n+        gid += T::increment;\n@@ -797,0 +798,3 @@\n+  static constexpr int increment = 1;\n+  static constexpr int formatNumber = 12;\n+\n@@ -869,0 +873,3 @@\n+  static constexpr int increment = 0;\n+  static constexpr int formatNumber = 13;\n+\n@@ -920,2 +927,1 @@\n-    DefaultUVS *out = c->start_embed<DefaultUVS> ();\n-    if (unlikely (!out)) return nullptr;\n+    auto *out = c->start_embed<DefaultUVS> ();\n@@ -934,2 +940,1 @@\n-      for (hb_codepoint_t u = HB_SET_VALUE_INVALID;\n-           unicodes->next (&u);)\n+      for (auto u : *unicodes)\n@@ -1070,3 +1075,1 @@\n-    NonDefaultUVS *out = c->start_embed<NonDefaultUVS> ();\n-    if (unlikely (!out)) return nullptr;\n-\n+    auto *out = c->start_embed<NonDefaultUVS> ();\n@@ -1770,1 +1773,0 @@\n-    if (unlikely (!c->serializer->check_success (cmap_prime))) return_trace (false);\n@@ -1801,1 +1803,1 @@\n-    | hb_filter ([&] (const hb_pair_t<hb_codepoint_t, hb_codepoint_t> _)\n+    | hb_filter ([&] (const hb_codepoint_pair_t _)\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-cmap-table.hh","additions":20,"deletions":18,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-#include \"hb-ot-cff1-table.hh\"\n@@ -43,0 +42,1 @@\n+#include \"hb-ot-cff1-table.hh\"\n@@ -67,0 +67,1 @@\n+#ifndef HB_NO_OT_FONT_CMAP_CACHE\n@@ -68,0 +69,1 @@\n+#endif\n@@ -73,0 +75,1 @@\n+#ifndef HB_NO_OT_FONT_CMAP_CACHE\n@@ -74,0 +77,1 @@\n+#endif\n@@ -89,0 +93,1 @@\n+#ifndef HB_NO_OT_FONT_CMAP_CACHE\n@@ -96,1 +101,1 @@\n-    cmap_cache->init ();\n+    new (cmap_cache) hb_ot_font_cmap_cache_t ();\n@@ -115,0 +120,1 @@\n+#endif\n@@ -139,1 +145,5 @@\n-  return ot_face->cmap->get_nominal_glyph (unicode, glyph, ot_font->cmap_cache);\n+  hb_ot_font_cmap_cache_t *cmap_cache = nullptr;\n+#ifndef HB_NO_OT_FONT_CMAP_CACHE\n+  cmap_cache = ot_font->cmap_cache;\n+#endif\n+  return ot_face->cmap->get_nominal_glyph (unicode, glyph, cmap_cache);\n@@ -154,0 +164,4 @@\n+  hb_ot_font_cmap_cache_t *cmap_cache = nullptr;\n+#ifndef HB_NO_OT_FONT_CMAP_CACHE\n+  cmap_cache = ot_font->cmap_cache;\n+#endif\n@@ -157,1 +171,1 @@\n-                                            ot_font->cmap_cache);\n+                                            cmap_cache);\n@@ -170,0 +184,4 @@\n+  hb_ot_font_cmap_cache_t *cmap_cache = nullptr;\n+#ifndef HB_NO_OT_FONT_CMAP_CACHE\n+  cmap_cache = ot_font->cmap_cache;\n+#endif\n@@ -172,1 +190,1 @@\n-                                             ot_font->cmap_cache);\n+                                             cmap_cache);\n@@ -191,1 +209,1 @@\n-#ifndef HB_NO_VAR\n+#if !defined(HB_NO_VAR) && !defined(HB_NO_OT_FONT_ADVANCE_CACHE)\n@@ -215,0 +233,1 @@\n+      new (cache) hb_ot_font_advance_cache_t;\n@@ -216,1 +235,0 @@\n-      cache->init ();\n@@ -240,1 +258,1 @@\n-      ot_font->advance_cache->init ();\n+      ot_font->advance_cache->clear ();\n@@ -261,1 +279,1 @@\n-#ifndef HB_NO_VAR\n+#if !defined(HB_NO_VAR) && !defined(HB_NO_OT_FONT_ADVANCE_CACHE)\n@@ -296,1 +314,1 @@\n-#ifndef HB_NO_VAR\n+#if !defined(HB_NO_VAR) && !defined(HB_NO_OT_FONT_ADVANCE_CACHE)\n@@ -311,1 +329,1 @@\n-#ifndef HB_NO_VAR\n+#if !defined(HB_NO_VAR) && !defined(HB_NO_OT_FONT_ADVANCE_CACHE)\n@@ -421,1 +439,0 @@\n-  if (ot_face->cff1->get_extents (font, glyph, extents)) return true;\n@@ -423,0 +440,1 @@\n+  if (ot_face->cff1->get_extents (font, glyph, extents)) return true;\n@@ -510,1 +528,0 @@\n-    if (!font->face->table.cff1->get_path (font, glyph, draw_session))\n@@ -512,0 +529,1 @@\n+    if (!font->face->table.cff1->get_path (font, glyph, draw_session))\n@@ -550,1 +568,0 @@\n-  if (font->face->table.cff1->paint_glyph (font, glyph, paint_funcs, paint_data, foreground)) return;\n@@ -552,0 +569,1 @@\n+  if (font->face->table.cff1->paint_glyph (font, glyph, paint_funcs, paint_data, foreground)) return;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-font.cc","additions":32,"deletions":14,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -49,1 +49,5 @@\n-  bool serialize (hb_serialize_context_t *c, unsigned pixelSize, Iterator it)\n+  bool serialize (hb_serialize_context_t *c,\n+                  unsigned pixelSize,\n+                  Iterator it,\n+                  const hb_vector_t<hb_codepoint_pair_t> new_to_old_gid_list,\n+                  unsigned num_glyphs)\n@@ -53,3 +57,1 @@\n-    unsigned length = it.len ();\n-\n-    if (unlikely (!c->extend (this, length)))  return_trace (false);\n+    if (unlikely (!c->extend (this, num_glyphs)))  return_trace (false);\n@@ -62,2 +64,2 @@\n-    + it\n-    | hb_sink (widthsZ.as_array (length));\n+    for (auto &_ : new_to_old_gid_list)\n+      widthsZ[_.first] = *it++;\n@@ -92,1 +94,5 @@\n-  bool serialize (hb_serialize_context_t *c, unsigned version, Iterator it)\n+  bool serialize (hb_serialize_context_t *c,\n+                  unsigned version,\n+                  Iterator it,\n+                  const hb_vector_t<hb_codepoint_pair_t> &new_to_old_gid_list,\n+                  unsigned num_glyphs)\n@@ -100,1 +106,1 @@\n-    this->sizeDeviceRecord = DeviceRecord::get_size (it ? (*it).second.len () : 0);\n+    this->sizeDeviceRecord = DeviceRecord::get_size (num_glyphs);\n@@ -103,1 +109,1 @@\n-      c->start_embed<DeviceRecord> ()->serialize (c, _.first, _.second);\n+      c->start_embed<DeviceRecord> ()->serialize (c, _.first, _.second, new_to_old_gid_list, num_glyphs);\n@@ -113,2 +119,1 @@\n-    hdmx *hdmx_prime = c->serializer->start_embed <hdmx> ();\n-    if (unlikely (!hdmx_prime)) return_trace (false);\n+    auto *hdmx_prime = c->serializer->start_embed <hdmx> ();\n@@ -116,0 +121,1 @@\n+    unsigned num_input_glyphs = get_num_glyphs ();\n@@ -118,1 +124,1 @@\n-    | hb_map ([c, this] (unsigned _)\n+    | hb_map ([c, num_input_glyphs, this] (unsigned _)\n@@ -124,3 +130,2 @@\n-            + hb_range (c->plan->num_output_glyphs ())\n-            | hb_map (c->plan->reverse_glyph_map)\n-            | hb_map ([this, c, device_record] (hb_codepoint_t _)\n+            + hb_iter (c->plan->new_to_old_gid_list)\n+            | hb_map ([num_input_glyphs, device_record] (hb_codepoint_pair_t _)\n@@ -128,3 +133,1 @@\n-                        if (c->plan->is_empty_glyph (_))\n-                          return Null (HBUINT8);\n-                        return device_record->widthsZ.as_array (get_num_glyphs ()) [_];\n+                        return device_record->widthsZ.as_array (num_input_glyphs) [_.second];\n@@ -137,1 +140,3 @@\n-    hdmx_prime->serialize (c->serializer, version, it);\n+    hdmx_prime->serialize (c->serializer, version, it,\n+                           c->plan->new_to_old_gid_list,\n+                           c->plan->num_output_glyphs ());\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-hdmx-table.hh","additions":24,"deletions":19,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-                             const hb_map_t *bounds_map) const\n+                             const hb_vector_t<unsigned> &bounds_vec) const\n@@ -117,0 +117,1 @@\n+      bool empty = true;\n@@ -128,1 +129,1 @@\n-        if (bounds_map->has (gid))\n+        if (bounds_vec[gid] != 0xFFFFFFFF)\n@@ -130,1 +131,2 @@\n-          unsigned bound_width = bounds_map->get (gid);\n+          empty = false;\n+          unsigned bound_width = bounds_vec[gid];\n@@ -140,1 +142,1 @@\n-      if (!bounds_map->is_empty ())\n+      if (!empty)\n@@ -159,1 +161,3 @@\n-                  unsigned num_long_metrics)\n+                  const hb_vector_t<hb_codepoint_pair_t> new_to_old_gid_list,\n+                  unsigned num_long_metrics,\n+                  unsigned total_num_metrics)\n@@ -161,2 +165,7 @@\n-    unsigned idx = 0;\n-    for (auto _ : it)\n+    LongMetric* long_metrics = c->allocate_size<LongMetric> (num_long_metrics * LongMetric::static_size);\n+    FWORD* short_metrics = c->allocate_size<FWORD> ((total_num_metrics - num_long_metrics) * FWORD::static_size);\n+    if (!long_metrics || !short_metrics) return;\n+\n+    short_metrics -= num_long_metrics;\n+\n+    for (auto _ : new_to_old_gid_list)\n@@ -164,8 +173,4 @@\n-      if (idx < num_long_metrics)\n-      {\n-        LongMetric lm;\n-        lm.advance = _.first;\n-        lm.sb = _.second;\n-        if (unlikely (!c->embed<LongMetric> (&lm))) return;\n-      }\n-      else if (idx < 0x10000u)\n+      hb_codepoint_t gid = _.first;\n+      auto mtx = *it++;\n+\n+      if (gid < num_long_metrics)\n@@ -173,3 +178,3 @@\n-        FWORD *sb = c->allocate_size<FWORD> (FWORD::static_size);\n-        if (unlikely (!sb)) return;\n-        *sb = _.second;\n+        LongMetric& lm = long_metrics[gid];\n+        lm.advance = mtx.first;\n+        lm.sb = mtx.second;\n@@ -177,0 +182,3 @@\n+      \/\/ TODO(beyond-64k): This assumes that maxp.numGlyphs is 0xFFFF.\n+      else if (gid < 0x10000u)\n+        short_metrics[gid] = mtx.second;\n@@ -178,7 +186,1 @@\n-      {\n-        \/\/ TODO: This does not do tail optimization.\n-        UFWORD *adv = c->allocate_size<UFWORD> (UFWORD::static_size);\n-        if (unlikely (!adv)) return;\n-        *adv = _.first;\n-      }\n-      idx++;\n+        ((UFWORD*) short_metrics)[gid] = mtx.first;\n@@ -192,2 +194,1 @@\n-    T *table_prime = c->serializer->start_embed <T> ();\n-    if (unlikely (!table_prime)) return_trace (false);\n+    auto *table_prime = c->serializer->start_embed <T> ();\n@@ -202,0 +203,2 @@\n+      \/\/ TODO Don't consider retaingid holes here.\n+\n@@ -212,2 +215,2 @@\n-    + hb_range (c->plan->num_output_glyphs ())\n-    | hb_map ([c, &_mtx, mtx_map] (unsigned _)\n+    + hb_iter (c->plan->new_to_old_gid_list)\n+    | hb_map ([c, &_mtx, mtx_map] (hb_codepoint_pair_t _)\n@@ -215,1 +218,5 @@\n-                if (!mtx_map->has (_))\n+                hb_codepoint_t new_gid = _.first;\n+                hb_codepoint_t old_gid = _.second;\n+\n+                hb_pair_t<unsigned, int> *v = nullptr;\n+                if (!mtx_map->has (new_gid, &v))\n@@ -217,3 +224,0 @@\n-                  hb_codepoint_t old_gid;\n-                  if (!c->plan->old_gid_for_new_gid (_, &old_gid))\n-                    return hb_pair (0u, 0);\n@@ -225,1 +229,1 @@\n-                return mtx_map->get (_);\n+                return *v;\n@@ -229,1 +233,5 @@\n-    table_prime->serialize (c->serializer, it, num_long_metrics);\n+    table_prime->serialize (c->serializer,\n+                            it,\n+                            c->plan->new_to_old_gid_list,\n+                            num_long_metrics,\n+                            c->plan->num_output_glyphs ());\n@@ -236,1 +244,1 @@\n-                                         T::is_horizontal ? &c->plan->bounds_width_map : &c->plan->bounds_height_map)))\n+                                         T::is_horizontal ? c->plan->bounds_width_vec : c->plan->bounds_height_vec)))\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-hmtx-table.hh","additions":44,"deletions":36,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -173,2 +173,2 @@\n-                          minCoord.sanitize (c, this) &&\n-                          maxCoord.sanitize (c, this)));\n+                          minCoord.sanitize (c, base) &&\n+                          maxCoord.sanitize (c, base)));\n@@ -190,1 +190,0 @@\n-\n@@ -277,1 +276,1 @@\n-                          minMax.sanitize (c, this)));\n+                          minMax.sanitize (c, base)));\n@@ -300,1 +299,2 @@\n-  bool has_data () const { return baseValues; }\n+  bool has_values () const { return baseValues; }\n+  bool has_min_max () const { return defaultMinMax; \/* TODO What if only per-language is present? *\/ }\n@@ -386,1 +386,1 @@\n-    if (!base_script.has_data ())\n+    if (!base_script.has_values ())\n@@ -413,1 +413,1 @@\n-    if (!base_script.has_data ())\n+    if (!base_script.has_min_max ())\n@@ -428,2 +428,2 @@\n-                          (this+baseTagList).sanitize (c) &&\n-                          (this+baseScriptList).sanitize (c)));\n+                          baseTagList.sanitize (c, this) &&\n+                          baseScriptList.sanitize (c, this)));\n@@ -476,1 +476,0 @@\n-  \/* TODO: Expose this separately sometime? *\/\n@@ -483,1 +482,1 @@\n-                    hb_position_t  *max)\n+                    hb_position_t  *max) const\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-layout-base-table.hh","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    hb_sorted_vector_t<hb_pair_t<hb_codepoint_t, hb_codepoint_t>> &glyph_and_klass, \/* IN\/OUT *\/\n+    hb_sorted_vector_t<hb_codepoint_pair_t> &glyph_and_klass, \/* IN\/OUT *\/\n@@ -64,1 +64,1 @@\n-  const hb_hashmap_t<hb_tag_t, int> *axes_location;\n+  const hb_hashmap_t<hb_tag_t, Triple> *axes_location;\n@@ -67,0 +67,1 @@\n+  bool& insert_catch_all_feature_variation_record;\n@@ -71,0 +72,2 @@\n+  bool variation_applied;\n+  bool universal;\n@@ -191,3 +194,0 @@\n-  hb_hashmap_t<unsigned, hb_pair_t<unsigned, int>> *varidx_delta_map;\n-  hb_font_t *font;\n-  const VariationStore *var_store;\n@@ -196,1 +196,0 @@\n-  float *store_cache;\n@@ -199,3 +198,0 @@\n-                                          hb_hashmap_t<unsigned, hb_pair_t<unsigned, int>> *varidx_delta_map_,\n-                                          hb_font_t *font_,\n-                                          const VariationStore *var_store_,\n@@ -203,2 +199,1 @@\n-                                          const hb_map_t *gpos_lookups_,\n-                                          float *store_cache_) :\n+                                          const hb_map_t *gpos_lookups_) :\n@@ -206,3 +201,0 @@\n-                                        varidx_delta_map (varidx_delta_map_),\n-                                        font (font_),\n-                                        var_store (var_store_),\n@@ -210,2 +202,1 @@\n-                                        gpos_lookups (gpos_lookups_),\n-                                        store_cache (store_cache_) {}\n+                                        gpos_lookups (gpos_lookups_) {}\n@@ -810,1 +801,1 @@\n-    if (unlikely (!out || !c->serializer->extend_min (out))) return_trace (false);\n+    if (unlikely (!c->serializer->extend_min (out))) return_trace (false);\n@@ -984,1 +975,1 @@\n-    if (unlikely (!out || !c->serializer->extend_min (out))) return_trace (false);\n+    if (unlikely (!c->serializer->extend_min (out))) return_trace (false);\n@@ -1081,1 +1072,1 @@\n-    if (unlikely (!out || !c->serializer->extend_min (out))) return_trace (false);\n+    if (unlikely (!c->serializer->extend_min (out))) return_trace (false);\n@@ -1191,1 +1182,1 @@\n-    if (unlikely (!out || !c->serializer->extend_min (out))) return_trace (false);\n+    if (unlikely (!c->serializer->extend_min (out))) return_trace (false);\n@@ -1250,1 +1241,1 @@\n-    if (unlikely (!out || !c->serializer->extend_min (out))) return_trace (false);\n+    if (unlikely (!c->serializer->extend_min (out))) return_trace (false);\n@@ -1370,1 +1361,1 @@\n-    if (unlikely (!out || !c->serializer->extend_min (out))) return_trace (false);\n+    if (unlikely (!c->serializer->extend_min (out))) return_trace (false);\n@@ -1459,1 +1450,1 @@\n-    if (unlikely (!out || !c->serializer->extend_min (out))) return_trace (false);\n+    if (unlikely (!c->serializer->extend_min (out))) return_trace (false);\n@@ -1485,1 +1476,1 @@\n-                                          hb_sorted_vector_t<hb_pair_t<hb_codepoint_t, hb_codepoint_t>> &glyph_and_klass, \/* IN\/OUT *\/\n+                                          hb_sorted_vector_t<hb_codepoint_pair_t> &glyph_and_klass, \/* IN\/OUT *\/\n@@ -1576,1 +1567,1 @@\n-    hb_sorted_vector_t<hb_pair_t<hb_codepoint_t, hb_codepoint_t>> glyph_and_klass;\n+    hb_sorted_vector_t<hb_codepoint_pair_t> glyph_and_klass;\n@@ -1595,4 +1586,7 @@\n-    unsigned glyph_count = glyph_filter\n-                           ? hb_len (hb_iter (glyph_map.keys()) | hb_filter (glyph_filter))\n-                           : glyph_map.get_population ();\n-    use_class_zero = use_class_zero && glyph_count <= glyph_and_klass.length;\n+    if (use_class_zero)\n+    {\n+      unsigned glyph_count = glyph_filter\n+                             ? hb_len (hb_iter (glyph_map.keys()) | hb_filter (glyph_filter))\n+                             : glyph_map.get_population ();\n+      use_class_zero = glyph_count <= glyph_and_klass.length;\n+    }\n@@ -1772,0 +1766,1 @@\n+    unsigned unsorted = false;\n@@ -1792,0 +1787,4 @@\n+\n+        if (unlikely (cur_gid < prev_gid))\n+          unsorted = true;\n+\n@@ -1807,0 +1806,2 @@\n+    if (unlikely (c->in_error ())) return_trace (false);\n+\n@@ -1809,0 +1810,4 @@\n+\n+    if (unlikely (unsorted))\n+      rangeRecord.as_array ().qsort (RangeRecord<Types>::cmp_range);\n+\n@@ -1822,1 +1827,1 @@\n-    hb_sorted_vector_t<hb_pair_t<hb_codepoint_t, hb_codepoint_t>> glyph_and_klass;\n+    hb_sorted_vector_t<hb_codepoint_pair_t> glyph_and_klass;\n@@ -1908,1 +1913,1 @@\n-      for (hb_codepoint_t g = HB_SET_VALUE_INVALID; glyphs->next (&g);)\n+      for (auto g : *glyphs)\n@@ -1923,1 +1928,3 @@\n-      for (auto &range : rangeRecord)\n+      hb_codepoint_t last = HB_SET_VALUE_INVALID;\n+      auto it = hb_iter (rangeRecord);\n+      for (auto &range : it)\n@@ -1925,0 +1932,6 @@\n+        if (it->first == last + 1)\n+        {\n+          it++;\n+          continue;\n+        }\n+\n@@ -1930,0 +1943,1 @@\n+        last = g;\n@@ -1968,2 +1982,1 @@\n-      for (hb_codepoint_t g = HB_SET_VALUE_INVALID;\n-           glyphs->next (&g);)\n+      for (auto g : *glyphs)\n@@ -2100,1 +2113,4 @@\n-      format += 2;\n+      u.format += 2;\n+    if (unlikely (glyph_max > 0xFFFFFFu))\n+#else\n+    if (unlikely (glyph_max > 0xFFFFu))\n@@ -2102,0 +2118,4 @@\n+    {\n+      c->check_success (false, HB_SERIALIZE_ERROR_INT_OVERFLOW);\n+      return_trace (false);\n+    }\n@@ -2271,0 +2291,152 @@\n+\/* ported from fonttools (class _Encoding) *\/\n+struct delta_row_encoding_t\n+{\n+  \/* each byte represents a region, value is one of 0\/1\/2\/4, which means bytes\n+   * needed for this region *\/\n+  hb_vector_t<uint8_t> chars;\n+  unsigned width = 0;\n+  hb_vector_t<uint8_t> columns;\n+  unsigned overhead = 0;\n+  hb_vector_t<const hb_vector_t<int>*> items;\n+\n+  delta_row_encoding_t () = default;\n+  delta_row_encoding_t (hb_vector_t<uint8_t>&& chars_,\n+                        const hb_vector_t<int>* row = nullptr) :\n+                        delta_row_encoding_t ()\n+\n+  {\n+    chars = std::move (chars_);\n+    width = get_width ();\n+    columns = get_columns ();\n+    overhead = get_chars_overhead (columns);\n+    if (row) items.push (row);\n+  }\n+\n+  bool is_empty () const\n+  { return !items; }\n+\n+  static hb_vector_t<uint8_t> get_row_chars (const hb_vector_t<int>& row)\n+  {\n+    hb_vector_t<uint8_t> ret;\n+    if (!ret.alloc (row.length)) return ret;\n+\n+    bool long_words = false;\n+\n+    \/* 0\/1\/2 byte encoding *\/\n+    for (int i = row.length - 1; i >= 0; i--)\n+    {\n+      int v =  row.arrayZ[i];\n+      if (v == 0)\n+        ret.push (0);\n+      else if (v > 32767 || v < -32768)\n+      {\n+        long_words = true;\n+        break;\n+      }\n+      else if (v > 127 || v < -128)\n+        ret.push (2);\n+      else\n+        ret.push (1);\n+    }\n+\n+    if (!long_words)\n+      return ret;\n+\n+    \/* redo, 0\/2\/4 bytes encoding *\/\n+    ret.reset ();\n+    for (int i = row.length - 1; i >= 0; i--)\n+    {\n+      int v =  row.arrayZ[i];\n+      if (v == 0)\n+        ret.push (0);\n+      else if (v > 32767 || v < -32768)\n+        ret.push (4);\n+      else\n+        ret.push (2);\n+    }\n+    return ret;\n+  }\n+\n+  inline unsigned get_width ()\n+  {\n+    unsigned ret = + hb_iter (chars)\n+                   | hb_reduce (hb_add, 0u)\n+                   ;\n+    return ret;\n+  }\n+\n+  hb_vector_t<uint8_t> get_columns ()\n+  {\n+    hb_vector_t<uint8_t> cols;\n+    cols.alloc (chars.length);\n+    for (auto v : chars)\n+    {\n+      uint8_t flag = v ? 1 : 0;\n+      cols.push (flag);\n+    }\n+    return cols;\n+  }\n+\n+  static inline unsigned get_chars_overhead (const hb_vector_t<uint8_t>& cols)\n+  {\n+    unsigned c = 4 + 6; \/\/ 4 bytes for LOffset, 6 bytes for VarData header\n+    unsigned cols_bit_count = 0;\n+    for (auto v : cols)\n+      if (v) cols_bit_count++;\n+    return c + cols_bit_count * 2;\n+  }\n+\n+  unsigned get_gain () const\n+  {\n+    int count = items.length;\n+    return hb_max (0, (int) overhead - count);\n+  }\n+\n+  int gain_from_merging (const delta_row_encoding_t& other_encoding) const\n+  {\n+    int combined_width = 0;\n+    for (unsigned i = 0; i < chars.length; i++)\n+      combined_width += hb_max (chars.arrayZ[i], other_encoding.chars.arrayZ[i]);\n+\n+    hb_vector_t<uint8_t> combined_columns;\n+    combined_columns.alloc (columns.length);\n+    for (unsigned i = 0; i < columns.length; i++)\n+      combined_columns.push (columns.arrayZ[i] | other_encoding.columns.arrayZ[i]);\n+\n+    int combined_overhead = get_chars_overhead (combined_columns);\n+    int combined_gain = (int) overhead + (int) other_encoding.overhead - combined_overhead\n+                        - (combined_width - (int) width) * items.length\n+                        - (combined_width - (int) other_encoding.width) * other_encoding.items.length;\n+\n+    return combined_gain;\n+  }\n+\n+  static int cmp (const void *pa, const void *pb)\n+  {\n+    const delta_row_encoding_t *a = (const delta_row_encoding_t *)pa;\n+    const delta_row_encoding_t *b = (const delta_row_encoding_t *)pb;\n+\n+    int gain_a = a->get_gain ();\n+    int gain_b = b->get_gain ();\n+\n+    if (gain_a != gain_b)\n+      return gain_a - gain_b;\n+\n+    return (b->chars).as_array ().cmp ((a->chars).as_array ());\n+  }\n+\n+  static int cmp_width (const void *pa, const void *pb)\n+  {\n+    const delta_row_encoding_t *a = (const delta_row_encoding_t *)pa;\n+    const delta_row_encoding_t *b = (const delta_row_encoding_t *)pb;\n+\n+    if (a->width != b->width)\n+      return (int) a->width - (int) b->width;\n+\n+    return (b->chars).as_array ().cmp ((a->chars).as_array ());\n+  }\n+\n+  bool add_row (const hb_vector_t<int>* row)\n+  { return items.push (row); }\n+};\n+\n@@ -2305,0 +2477,6 @@\n+  bool serialize (hb_serialize_context_t *c) const\n+  {\n+    TRACE_SERIALIZE (this);\n+    return_trace (c->embed (this));\n+  }\n+\n@@ -2362,1 +2540,42 @@\n-  bool serialize (hb_serialize_context_t *c, const VarRegionList *src, const hb_bimap_t &region_map)\n+  bool serialize (hb_serialize_context_t *c,\n+                  const hb_vector_t<hb_tag_t>& axis_tags,\n+                  const hb_vector_t<const hb_hashmap_t<hb_tag_t, Triple>*>& regions)\n+  {\n+    TRACE_SERIALIZE (this);\n+    unsigned axis_count = axis_tags.length;\n+    unsigned region_count = regions.length;\n+    if (!axis_count || !region_count) return_trace (false);\n+    if (unlikely (hb_unsigned_mul_overflows (axis_count * region_count,\n+                                             VarRegionAxis::static_size))) return_trace (false);\n+    if (unlikely (!c->extend_min (this))) return_trace (false);\n+    axisCount = axis_count;\n+    regionCount = region_count;\n+\n+    for (unsigned r = 0; r < region_count; r++)\n+    {\n+      const auto& region = regions[r];\n+      for (unsigned i = 0; i < axis_count; i++)\n+      {\n+        hb_tag_t tag = axis_tags.arrayZ[i];\n+        VarRegionAxis var_region_rec;\n+        Triple *coords;\n+        if (region->has (tag, &coords))\n+        {\n+          var_region_rec.startCoord.set_float (coords->minimum);\n+          var_region_rec.peakCoord.set_float (coords->middle);\n+          var_region_rec.endCoord.set_float (coords->maximum);\n+        }\n+        else\n+        {\n+          var_region_rec.startCoord.set_int (0);\n+          var_region_rec.peakCoord.set_int (0);\n+          var_region_rec.endCoord.set_int (0);\n+        }\n+        if (!var_region_rec.serialize (c))\n+          return_trace (false);\n+      }\n+    }\n+    return_trace (true);\n+  }\n+\n+  bool serialize (hb_serialize_context_t *c, const VarRegionList *src, const hb_inc_bimap_t &region_map)\n@@ -2382,0 +2601,39 @@\n+  bool get_var_region (unsigned region_index,\n+                       const hb_map_t& axes_old_index_tag_map,\n+                       hb_hashmap_t<hb_tag_t, Triple>& axis_tuples \/* OUT *\/) const\n+  {\n+    if (region_index >= regionCount) return false;\n+    const VarRegionAxis* axis_region = axesZ.arrayZ + (region_index * axisCount);\n+    for (unsigned i = 0; i < axisCount; i++)\n+    {\n+      hb_tag_t *axis_tag;\n+      if (!axes_old_index_tag_map.has (i, &axis_tag))\n+        return false;\n+\n+      float min_val = axis_region->startCoord.to_float ();\n+      float def_val = axis_region->peakCoord.to_float ();\n+      float max_val = axis_region->endCoord.to_float ();\n+\n+      if (def_val != 0.f)\n+        axis_tuples.set (*axis_tag, Triple (min_val, def_val, max_val));\n+      axis_region++;\n+    }\n+    return !axis_tuples.in_error ();\n+  }\n+\n+  bool get_var_regions (const hb_map_t& axes_old_index_tag_map,\n+                        hb_vector_t<hb_hashmap_t<hb_tag_t, Triple>>& regions \/* OUT *\/) const\n+  {\n+    if (!regions.alloc (regionCount))\n+      return false;\n+\n+    for (unsigned i = 0; i < regionCount; i++)\n+    {\n+      hb_hashmap_t<hb_tag_t, Triple> axis_tuples;\n+      if (!get_var_region (i, axes_old_index_tag_map, axis_tuples))\n+        return false;\n+      regions.push (std::move (axis_tuples));\n+    }\n+    return !regions.in_error ();\n+  }\n+\n@@ -2402,0 +2660,3 @@\n+  unsigned get_region_index (unsigned i) const\n+  { return i >= regionIndices.len ? -1 : regionIndices[i]; }\n+\n@@ -2476,0 +2737,75 @@\n+  bool serialize (hb_serialize_context_t *c,\n+                  bool has_long,\n+                  const hb_vector_t<const hb_vector_t<int>*>& rows)\n+  {\n+    TRACE_SERIALIZE (this);\n+    if (unlikely (!c->extend_min (this))) return_trace (false);\n+    unsigned row_count = rows.length;\n+    itemCount = row_count;\n+\n+    int min_threshold = has_long ? -65536 : -128;\n+    int max_threshold = has_long ? +65535 : +127;\n+    enum delta_size_t { kZero=0, kNonWord, kWord };\n+    hb_vector_t<delta_size_t> delta_sz;\n+    unsigned num_regions = rows[0]->length;\n+    if (!delta_sz.resize (num_regions))\n+      return_trace (false);\n+\n+    unsigned word_count = 0;\n+    for (unsigned r = 0; r < num_regions; r++)\n+    {\n+      for (unsigned i = 0; i < row_count; i++)\n+      {\n+        int delta = rows[i]->arrayZ[r];\n+        if (delta < min_threshold || delta > max_threshold)\n+        {\n+          delta_sz[r] = kWord;\n+          word_count++;\n+          break;\n+        }\n+        else if (delta != 0)\n+        {\n+          delta_sz[r] = kNonWord;\n+        }\n+      }\n+    }\n+\n+    \/* reorder regions: words and then non-words*\/\n+    unsigned word_index = 0;\n+    unsigned non_word_index = word_count;\n+    hb_map_t ri_map;\n+    for (unsigned r = 0; r < num_regions; r++)\n+    {\n+      if (!delta_sz[r]) continue;\n+      unsigned new_r = (delta_sz[r] == kWord)? word_index++ : non_word_index++;\n+      if (!ri_map.set (new_r, r))\n+        return_trace (false);\n+    }\n+\n+    wordSizeCount = word_count | (has_long ? 0x8000u \/* LONG_WORDS *\/ : 0);\n+\n+    unsigned ri_count = ri_map.get_population ();\n+    regionIndices.len = ri_count;\n+    if (unlikely (!c->extend (this))) return_trace (false);\n+\n+    for (unsigned r = 0; r < ri_count; r++)\n+    {\n+      hb_codepoint_t *idx;\n+      if (!ri_map.has (r, &idx))\n+        return_trace (false);\n+      regionIndices[r] = *idx;\n+    }\n+\n+    HBUINT8 *delta_bytes = get_delta_bytes ();\n+    unsigned row_size = get_row_size ();\n+    for (unsigned int i = 0; i < row_count; i++)\n+    {\n+      for (unsigned int r = 0; r < ri_count; r++)\n+      {\n+        int delta = rows[i]->arrayZ[ri_map[r]];\n+        set_item_delta_fast (i, r, delta, delta_bytes, row_size);\n+      }\n+    }\n+    return_trace (true);\n+  }\n+\n@@ -2479,1 +2815,1 @@\n-                  const hb_bimap_t &region_map)\n+                  const hb_inc_bimap_t &region_map)\n@@ -2596,1 +2932,1 @@\n-  protected:\n+  public:\n@@ -2600,0 +2936,1 @@\n+  protected:\n@@ -2603,0 +2940,1 @@\n+  public:\n@@ -2633,0 +2971,1 @@\n+  protected:\n@@ -2675,0 +3014,1 @@\n+  friend struct item_variations_t;\n@@ -2745,0 +3085,30 @@\n+  bool serialize (hb_serialize_context_t *c,\n+                  bool has_long,\n+                  const hb_vector_t<hb_tag_t>& axis_tags,\n+                  const hb_vector_t<const hb_hashmap_t<hb_tag_t, Triple>*>& region_list,\n+                  const hb_vector_t<delta_row_encoding_t>& vardata_encodings)\n+  {\n+    TRACE_SERIALIZE (this);\n+#ifdef HB_NO_VAR\n+    return_trace (false);\n+#endif\n+    if (unlikely (!c->extend_min (this))) return_trace (false);\n+\n+    format = 1;\n+    if (!regions.serialize_serialize (c, axis_tags, region_list))\n+      return_trace (false);\n+\n+    unsigned num_var_data = vardata_encodings.length;\n+    if (!num_var_data) return_trace (false);\n+    if (unlikely (!c->check_assign (dataSets.len, num_var_data,\n+                                    HB_SERIALIZE_ERROR_INT_OVERFLOW)))\n+      return_trace (false);\n+\n+    if (unlikely (!c->extend (dataSets))) return_trace (false);\n+    for (unsigned i = 0; i < num_var_data; i++)\n+      if (!dataSets[i].serialize_serialize (c, has_long, vardata_encodings[i].items))\n+        return_trace (false);\n+\n+    return_trace (true);\n+  }\n+\n@@ -2874,0 +3244,16 @@\n+  const VarData& get_sub_table (unsigned i) const\n+  {\n+#ifdef HB_NO_VAR\n+     return Null (VarData);\n+#endif\n+     return this+dataSets[i];\n+  }\n+\n+  const VarRegionList& get_region_list () const\n+  {\n+#ifdef HB_NO_VAR\n+     return Null (VarRegionList);\n+#endif\n+     return this+regions;\n+  }\n+\n@@ -2890,3 +3276,3 @@\n-  DROP_COND_WITH_VAR = 1,\n-  DROP_RECORD_WITH_VAR = 2,\n-  MEM_ERR_WITH_VAR = 3,\n+  KEEP_RECORD_WITH_VAR = 1,\n+  DROP_COND_WITH_VAR = 2,\n+  DROP_RECORD_WITH_VAR = 3,\n@@ -2908,1 +3294,4 @@\n-    if (!index_map->has (axisIndex))\n+    const hb_map_t& axes_old_index_tag_map = c->plan->axes_old_index_tag_map;\n+    hb_codepoint_t *axis_tag;\n+    if (!axes_old_index_tag_map.has (axisIndex, &axis_tag) ||\n+        !index_map->has (axisIndex))\n@@ -2911,0 +3300,17 @@\n+    const hb_hashmap_t<hb_tag_t, Triple>& normalized_axes_location = c->plan->axes_location;\n+    Triple axis_limit{-1.f, 0.f, 1.f};\n+    Triple *normalized_limit;\n+    if (normalized_axes_location.has (*axis_tag, &normalized_limit))\n+      axis_limit = *normalized_limit;\n+\n+    const hb_hashmap_t<hb_tag_t, TripleDistances>& axes_triple_distances = c->plan->axes_triple_distances;\n+    TripleDistances axis_triple_distances{1.f, 1.f};\n+    TripleDistances *triple_dists;\n+    if (axes_triple_distances.has (*axis_tag, &triple_dists))\n+      axis_triple_distances = *triple_dists;\n+\n+    float normalized_min = renormalizeValue (filterRangeMinValue.to_float (), axis_limit, axis_triple_distances, false);\n+    float normalized_max = renormalizeValue (filterRangeMaxValue.to_float (), axis_limit, axis_triple_distances, false);\n+    out->filterRangeMinValue.set_float (normalized_min);\n+    out->filterRangeMaxValue.set_float (normalized_max);\n+\n@@ -2925,2 +3331,27 @@\n-    \/\/axis not pinned, keep the condition\n-    if (!c->axes_location->has (axis_tag))\n+    Triple axis_range (-1.f, 0.f, 1.f);\n+    Triple *axis_limit;\n+    if (c->axes_location->has (axis_tag, &axis_limit))\n+      axis_range = *axis_limit;\n+\n+    float axis_min_val = axis_range.minimum;\n+    float axis_default_val = axis_range.middle;\n+    float axis_max_val = axis_range.maximum;\n+\n+    float filter_min_val = filterRangeMinValue.to_float ();\n+    float filter_max_val = filterRangeMaxValue.to_float ();\n+\n+    if (axis_default_val < filter_min_val ||\n+        axis_default_val > filter_max_val)\n+      c->apply = false;\n+\n+    \/\/condition not met, drop the entire record\n+    if (axis_min_val > filter_max_val || axis_max_val < filter_min_val ||\n+        filter_min_val > filter_max_val)\n+      return DROP_RECORD_WITH_VAR;\n+\n+    \/\/condition met and axis pinned, drop the condition\n+    if (c->axes_location->has (axis_tag) &&\n+        c->axes_location->get (axis_tag).is_point ())\n+      return DROP_COND_WITH_VAR;\n+\n+    if (filter_max_val != axis_max_val || filter_min_val != axis_min_val)\n@@ -2930,3 +3361,3 @@\n-      int16_t min_val = filterRangeMinValue.to_int ();\n-      int16_t max_val = filterRangeMaxValue.to_int ();\n-      hb_codepoint_t val = (max_val << 16) + min_val;\n+      int16_t int_filter_max_val = filterRangeMaxValue.to_int ();\n+      int16_t int_filter_min_val = filterRangeMinValue.to_int ();\n+      hb_codepoint_t val = (int_filter_max_val << 16) + int_filter_min_val;\n@@ -2938,10 +3369,1 @@\n-    \/\/axis pinned, check if condition is met\n-    \/\/TODO: add check for axis Ranges\n-    int v = c->axes_location->get (axis_tag);\n-\n-    \/\/condition not met, drop the entire record\n-    if (v < filterRangeMinValue.to_int () || v > filterRangeMaxValue.to_int ())\n-      return DROP_RECORD_WITH_VAR;\n-\n-    \/\/axis pinned and condition met, drop the condition\n-    return DROP_COND_WITH_VAR;\n+    return KEEP_RECORD_WITH_VAR;\n@@ -2986,1 +3408,1 @@\n-    default:return KEEP_COND_WITH_VAR;\n+    default: c->apply = false; return KEEP_COND_WITH_VAR;\n@@ -3031,1 +3453,1 @@\n-  Cond_with_Var_flag_t keep_with_variations (hb_collect_feature_substitutes_with_var_context_t *c) const\n+  void keep_with_variations (hb_collect_feature_substitutes_with_var_context_t *c) const\n@@ -3034,1 +3456,1 @@\n-    if (unlikely (!condition_map)) return MEM_ERR_WITH_VAR;\n+    if (unlikely (!condition_map)) return;\n@@ -3038,1 +3460,1 @@\n-    if (unlikely (!cond_set)) return MEM_ERR_WITH_VAR;\n+    if (unlikely (!cond_set)) return;\n@@ -3041,0 +3463,2 @@\n+    c->apply = true;\n+    bool should_keep = false;\n@@ -3045,1 +3469,1 @@\n-      \/\/ one condition is not met, drop the entire record\n+      \/\/ condition is not met or condition out of range, drop the entire record\n@@ -3047,1 +3471,1 @@\n-        return DROP_RECORD_WITH_VAR;\n+        return;\n@@ -3049,1 +3473,0 @@\n-      \/\/ axis not pinned, keep this condition\n@@ -3052,0 +3475,1 @@\n+        should_keep = true;\n@@ -3055,0 +3479,4 @@\n+\n+      if (ret == KEEP_RECORD_WITH_VAR)\n+        should_keep = true;\n+\n@@ -3058,2 +3486,1 @@\n-    \/\/ all conditions met\n-    if (num_kept_cond == 0) return DROP_COND_WITH_VAR;\n+    if (!should_keep) return;\n@@ -3064,1 +3491,1 @@\n-      return DROP_RECORD_WITH_VAR;\n+      return;\n@@ -3068,2 +3495,2 @@\n-\n-    return KEEP_COND_WITH_VAR;\n+    if (should_keep && num_kept_cond == 0)\n+      c->universal = true;\n@@ -3145,2 +3572,1 @@\n-    bool ret = out->feature.serialize_subset (c->subset_context, feature, base, c);\n-    return_trace (ret);\n+    return_trace (out->feature.serialize_subset (c->subset_context, feature, base, c));\n@@ -3274,3 +3700,2 @@\n-    \/\/ ret == 1, all conditions met\n-    if ((base+conditions).keep_with_variations (c) == DROP_COND_WITH_VAR &&\n-        c->apply)\n+    (base+conditions).keep_with_variations (c);\n+    if (c->apply && !c->variation_applied)\n@@ -3279,1 +3704,1 @@\n-      c->apply = false; \/\/ set variations only once\n+      c->variation_applied = true; \/\/ set variations only once\n@@ -3346,0 +3771,2 @@\n+      if (c->universal)\n+        break;\n@@ -3347,0 +3774,3 @@\n+    if (c->variation_applied && !c->universal &&\n+        !c->record_cond_idx_map->is_empty ())\n+      c->insert_catch_all_feature_variation_record = true;\n@@ -3541,2 +3971,2 @@\n-    unsigned new_idx = hb_first (*v);\n-    out->varIdx = new_idx;\n+    if (!c->check_assign (out->varIdx, hb_first (*v), HB_SERIALIZE_ERROR_INT_OVERFLOW))\n+      return_trace (nullptr);\n@@ -3547,10 +3977,1 @@\n-  {\n-    c->layout_variation_indices->add (varIdx);\n-    int delta = 0;\n-    if (c->font && c->var_store)\n-      delta = roundf (get_delta (c->font, *c->var_store, c->store_cache));\n-\n-    \/* set new varidx to HB_OT_LAYOUT_NO_VARIATIONS_INDEX here, will remap\n-     * varidx later*\/\n-    c->varidx_delta_map->set (varIdx, hb_pair_t<unsigned, int> (HB_OT_LAYOUT_NO_VARIATIONS_INDEX, delta));\n-  }\n+  { c->layout_variation_indices->add (varIdx); }\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-layout-common.hh","additions":508,"deletions":87,"binary":false,"changes":595,"status":"modified"},{"patch":"@@ -146,1 +146,1 @@\n-  hb_set_t& push_cur_active_glyphs ()\n+  hb_set_t* push_cur_active_glyphs ()\n@@ -148,1 +148,4 @@\n-    return *active_glyphs_stack.push ();\n+    hb_set_t *s = active_glyphs_stack.push ();\n+    if (unlikely (active_glyphs_stack.in_error ()))\n+      return nullptr;\n+    return s;\n@@ -402,10 +405,0 @@\n-    matcher_t () :\n-             lookup_props (0),\n-             mask (-1),\n-             ignore_zwnj (false),\n-             ignore_zwj (false),\n-             per_syllable (false),\n-             syllable {0},\n-             match_func (nullptr),\n-             match_data (nullptr) {}\n-\n@@ -430,0 +423,3 @@\n+#ifndef HB_OPTIMIZE_SIZE\n+    HB_ALWAYS_INLINE\n+#endif\n@@ -449,0 +445,3 @@\n+#ifndef HB_OPTIMIZE_SIZE\n+    HB_ALWAYS_INLINE\n+#endif\n@@ -464,8 +463,8 @@\n-    unsigned int lookup_props;\n-    hb_mask_t mask;\n-    bool ignore_zwnj;\n-    bool ignore_zwj;\n-    bool per_syllable;\n-    uint8_t syllable;\n-    match_func_t match_func;\n-    const void *match_data;\n+    unsigned int lookup_props = 0;\n+    hb_mask_t mask = -1;\n+    bool ignore_zwnj = false;\n+    bool ignore_zwj = false;\n+    bool per_syllable = false;\n+    uint8_t syllable = 0;\n+    match_func_t match_func = nullptr;\n+    const void *match_data = nullptr;\n@@ -479,0 +478,1 @@\n+      end = c->buffer->len;\n@@ -492,0 +492,1 @@\n+      matcher.set_syllable (0);\n@@ -517,2 +518,4 @@\n-    void reset (unsigned int start_index_,\n-                unsigned int num_items_)\n+#ifndef HB_OPTIMIZE_SIZE\n+    HB_ALWAYS_INLINE\n+#endif\n+    void reset (unsigned int start_index_)\n@@ -521,1 +524,0 @@\n-      num_items = num_items_;\n@@ -526,0 +528,9 @@\n+#ifndef HB_OPTIMIZE_SIZE\n+    HB_ALWAYS_INLINE\n+#endif\n+    void reset_fast (unsigned int start_index_)\n+    {\n+      \/\/ Doesn't set end or syllable. Used by GPOS which doesn't care \/ change.\n+      idx = start_index_;\n+    }\n+\n@@ -528,1 +539,0 @@\n-      num_items++;\n@@ -533,0 +543,3 @@\n+#ifndef HB_OPTIMIZE_SIZE\n+    HB_ALWAYS_INLINE\n+#endif\n@@ -542,0 +555,3 @@\n+#ifndef HB_OPTIMIZE_SIZE\n+    HB_ALWAYS_INLINE\n+#endif\n@@ -560,0 +576,3 @@\n+#ifndef HB_OPTIMIZE_SIZE\n+    HB_ALWAYS_INLINE\n+#endif\n@@ -562,6 +581,1 @@\n-      assert (num_items > 0);\n-      \/* The alternate condition below is faster at string boundaries,\n-       * but produces subpar \"unsafe-to-concat\" values. *\/\n-      signed stop = (signed) end - (signed) num_items;\n-      if (c->buffer->flags & HB_BUFFER_FLAG_PRODUCE_UNSAFE_TO_CONCAT)\n-        stop = (signed) end - 1;\n+      const signed stop = (signed) end - 1;\n@@ -575,1 +589,0 @@\n-            num_items--;\n@@ -593,0 +606,3 @@\n+#ifndef HB_OPTIMIZE_SIZE\n+    HB_ALWAYS_INLINE\n+#endif\n@@ -595,6 +611,1 @@\n-      assert (num_items > 0);\n-      \/* The alternate condition below is faster at string boundaries,\n-       * but produces subpar \"unsafe-to-concat\" values. *\/\n-      unsigned stop = num_items - 1;\n-      if (c->buffer->flags & HB_BUFFER_FLAG_PRODUCE_UNSAFE_TO_CONCAT)\n-        stop = 1 - 1;\n+      const unsigned stop = 0;\n@@ -608,1 +619,0 @@\n-            num_items--;\n@@ -627,0 +637,1 @@\n+    HB_ALWAYS_INLINE\n@@ -637,0 +648,1 @@\n+    HB_ALWAYS_INLINE\n@@ -665,1 +677,0 @@\n-    unsigned int num_items;\n@@ -696,0 +707,1 @@\n+  hb_sanitize_context_t sanitizer;\n@@ -698,0 +710,1 @@\n+  const GDEF::accelerator_t &gdef_accel;\n@@ -721,1 +734,2 @@\n-                         hb_buffer_t *buffer_) :\n+                         hb_buffer_t *buffer_,\n+                         hb_blob_t *table_blob_) :\n@@ -724,0 +738,1 @@\n+                        sanitizer (table_blob_),\n@@ -729,0 +744,7 @@\n+#endif\n+                             ),\n+                        gdef_accel (\n+#ifndef HB_NO_OT_LAYOUT\n+                              *face->table.GDEF\n+#else\n+                              Null (GDEF::accelerator_t)\n@@ -757,4 +779,4 @@\n-  void set_lookup_mask (hb_mask_t mask) { lookup_mask = mask; last_base = -1; last_base_until = 0; init_iters (); }\n-  void set_auto_zwj (bool auto_zwj_) { auto_zwj = auto_zwj_; init_iters (); }\n-  void set_auto_zwnj (bool auto_zwnj_) { auto_zwnj = auto_zwnj_; init_iters (); }\n-  void set_per_syllable (bool per_syllable_) { per_syllable = per_syllable_; init_iters (); }\n+  void set_lookup_mask (hb_mask_t mask, bool init = true) { lookup_mask = mask; last_base = -1; last_base_until = 0; if (init) init_iters (); }\n+  void set_auto_zwj (bool auto_zwj_, bool init = true) { auto_zwj = auto_zwj_; if (init) init_iters (); }\n+  void set_auto_zwnj (bool auto_zwnj_, bool init = true) { auto_zwnj = auto_zwnj_; if (init) init_iters (); }\n+  void set_per_syllable (bool per_syllable_, bool init = true) { per_syllable = per_syllable_; if (init) init_iters (); }\n@@ -781,1 +803,1 @@\n-      return gdef.mark_set_covers (match_props >> 16, glyph);\n+      return gdef_accel.mark_set_covers (match_props >> 16, glyph);\n@@ -793,0 +815,3 @@\n+#ifndef HB_OPTIMIZE_SIZE\n+  HB_ALWAYS_INLINE\n+#endif\n@@ -796,1 +821,0 @@\n-    hb_codepoint_t glyph = info->codepoint;\n@@ -806,1 +830,1 @@\n-      return match_properties_mark (glyph, glyph_props, match_props);\n+      return match_properties_mark (info->codepoint, glyph_props, match_props);\n@@ -839,1 +863,1 @@\n-      _hb_glyph_info_set_glyph_props (&buffer->cur(), props | gdef.get_glyph_props (glyph_index));\n+      _hb_glyph_info_set_glyph_props (&buffer->cur(), props | gdef_accel.get_glyph_props (glyph_index));\n@@ -887,1 +911,1 @@\n-  static inline auto apply_cached_ (const T *obj, hb_ot_apply_context_t *c, hb_priority<1>) HB_RETURN (bool, obj->apply (c, true) )\n+  static inline auto apply_cached_ (const T *obj, hb_ot_apply_context_t *c, hb_priority<1>) HB_RETURN (bool, obj->apply_cached (c) )\n@@ -1151,0 +1175,4 @@\n+static inline bool match_always (hb_glyph_info_t &info HB_UNUSED, unsigned value HB_UNUSED, const void *data HB_UNUSED)\n+{\n+  return true;\n+}\n@@ -1171,0 +1199,22 @@\n+static inline bool match_class_cached1 (hb_glyph_info_t &info, unsigned value, const void *data)\n+{\n+  unsigned klass = info.syllable() & 0x0F;\n+  if (klass < 15)\n+    return klass == value;\n+  const ClassDef &class_def = *reinterpret_cast<const ClassDef *>(data);\n+  klass = class_def.get_class (info.codepoint);\n+  if (likely (klass < 15))\n+    info.syllable() = (info.syllable() & 0xF0) | klass;\n+  return klass == value;\n+}\n+static inline bool match_class_cached2 (hb_glyph_info_t &info, unsigned value, const void *data)\n+{\n+  unsigned klass = (info.syllable() & 0xF0) >> 4;\n+  if (klass < 15)\n+    return klass == value;\n+  const ClassDef &class_def = *reinterpret_cast<const ClassDef *>(data);\n+  klass = class_def.get_class (info.codepoint);\n+  if (likely (klass < 15))\n+    info.syllable() = (info.syllable() & 0x0F) | (klass << 4);\n+  return klass == value;\n+}\n@@ -1199,8 +1249,11 @@\n-static inline bool match_input (hb_ot_apply_context_t *c,\n-                                unsigned int count, \/* Including the first glyph (not matched) *\/\n-                                const HBUINT input[], \/* Array of input values--start with second glyph *\/\n-                                match_func_t match_func,\n-                                const void *match_data,\n-                                unsigned int *end_position,\n-                                unsigned int match_positions[HB_MAX_CONTEXT_LENGTH],\n-                                unsigned int *p_total_component_count = nullptr)\n+#ifndef HB_OPTIMIZE_SIZE\n+HB_ALWAYS_INLINE\n+#endif\n+static bool match_input (hb_ot_apply_context_t *c,\n+                         unsigned int count, \/* Including the first glyph (not matched) *\/\n+                         const HBUINT input[], \/* Array of input values--start with second glyph *\/\n+                         match_func_t match_func,\n+                         const void *match_data,\n+                         unsigned int *end_position,\n+                         unsigned int match_positions[HB_MAX_CONTEXT_LENGTH],\n+                         unsigned int *p_total_component_count = nullptr)\n@@ -1215,1 +1268,1 @@\n-  skippy_iter.reset (buffer->idx, count - 1);\n+  skippy_iter.reset (buffer->idx);\n@@ -1244,1 +1297,0 @@\n-  total_component_count += _hb_glyph_info_get_lig_num_comps (&buffer->cur());\n@@ -1255,1 +1307,0 @@\n-  match_positions[0] = buffer->idx;\n@@ -1320,0 +1371,2 @@\n+  {\n+    total_component_count += _hb_glyph_info_get_lig_num_comps (&buffer->cur());\n@@ -1321,0 +1374,3 @@\n+  }\n+\n+  match_positions[0] = buffer->idx;\n@@ -1439,6 +1495,9 @@\n-static inline bool match_backtrack (hb_ot_apply_context_t *c,\n-                                    unsigned int count,\n-                                    const HBUINT backtrack[],\n-                                    match_func_t match_func,\n-                                    const void *match_data,\n-                                    unsigned int *match_start)\n+#ifndef HB_OPTIMIZE_SIZE\n+HB_ALWAYS_INLINE\n+#endif\n+static bool match_backtrack (hb_ot_apply_context_t *c,\n+                             unsigned int count,\n+                             const HBUINT backtrack[],\n+                             match_func_t match_func,\n+                             const void *match_data,\n+                             unsigned int *match_start)\n@@ -1449,1 +1508,1 @@\n-  skippy_iter.reset (c->buffer->backtrack_len (), count);\n+  skippy_iter.reset (c->buffer->backtrack_len ());\n@@ -1468,7 +1527,10 @@\n-static inline bool match_lookahead (hb_ot_apply_context_t *c,\n-                                    unsigned int count,\n-                                    const HBUINT lookahead[],\n-                                    match_func_t match_func,\n-                                    const void *match_data,\n-                                    unsigned int start_index,\n-                                    unsigned int *end_index)\n+#ifndef HB_OPTIMIZE_SIZE\n+HB_ALWAYS_INLINE\n+#endif\n+static bool match_lookahead (hb_ot_apply_context_t *c,\n+                             unsigned int count,\n+                             const HBUINT lookahead[],\n+                             match_func_t match_func,\n+                             const void *match_data,\n+                             unsigned int start_index,\n+                             unsigned int *end_index)\n@@ -1479,1 +1541,1 @@\n-  skippy_iter.reset (start_index - 1, count);\n+  skippy_iter.reset (start_index - 1);\n@@ -1598,0 +1660,3 @@\n+    hb_set_t *cur_active_glyphs = c->push_cur_active_glyphs ();\n+    if (unlikely (!cur_active_glyphs))\n+      return;\n@@ -1599,1 +1664,1 @@\n-      c->push_cur_active_glyphs () = std::move (pos_glyphs);\n+      *cur_active_glyphs = std::move (pos_glyphs);\n@@ -1601,1 +1666,1 @@\n-      c->push_cur_active_glyphs ().set (*c->glyphs);\n+      *cur_active_glyphs = *c->glyphs;\n@@ -1851,6 +1916,7 @@\n-static inline bool context_apply_lookup (hb_ot_apply_context_t *c,\n-                                         unsigned int inputCount, \/* Including the first glyph (not matched) *\/\n-                                         const HBUINT input[], \/* Array of input values--start with second glyph *\/\n-                                         unsigned int lookupCount,\n-                                         const LookupRecord lookupRecord[],\n-                                         const ContextApplyLookupContext &lookup_context)\n+HB_ALWAYS_INLINE\n+static bool context_apply_lookup (hb_ot_apply_context_t *c,\n+                                  unsigned int inputCount, \/* Including the first glyph (not matched) *\/\n+                                  const HBUINT input[], \/* Array of input values--start with second glyph *\/\n+                                  unsigned int lookupCount,\n+                                  const LookupRecord lookupRecord[],\n+                                  const ContextApplyLookupContext &lookup_context)\n@@ -1882,0 +1948,3 @@\n+  template <typename T>\n+  friend struct RuleSet;\n+\n@@ -1984,2 +2053,1 @@\n-    return_trace (inputCount.sanitize (c) &&\n-                  lookupCount.sanitize (c) &&\n+    return_trace (c->check_struct (this) &&\n@@ -2069,7 +2137,99 @@\n-    return_trace (\n-    + hb_iter (rule)\n-    | hb_map (hb_add (this))\n-    | hb_map ([&] (const Rule &_) { return _.apply (c, lookup_context); })\n-    | hb_any\n-    )\n-    ;\n+\n+    unsigned num_rules = rule.len;\n+\n+#ifndef HB_NO_OT_RULESETS_FAST_PATH\n+    if (HB_OPTIMIZE_SIZE_VAL || num_rules <= 4)\n+#endif\n+    {\n+    slow:\n+      return_trace (\n+      + hb_iter (rule)\n+      | hb_map (hb_add (this))\n+      | hb_map ([&] (const Rule &_) { return _.apply (c, lookup_context); })\n+      | hb_any\n+      )\n+      ;\n+    }\n+\n+    \/* This version is optimized for speed by matching the first & second\n+     * components of the rule here, instead of calling into the matching code.\n+     *\n+     * Replicated from LigatureSet::apply(). *\/\n+\n+    hb_ot_apply_context_t::skipping_iterator_t &skippy_iter = c->iter_input;\n+    skippy_iter.reset (c->buffer->idx);\n+    skippy_iter.set_match_func (match_always, nullptr);\n+    skippy_iter.set_glyph_data ((HBUINT16 *) nullptr);\n+    unsigned unsafe_to = (unsigned) -1, unsafe_to1 = 0, unsafe_to2 = 0;\n+    hb_glyph_info_t *first = nullptr, *second = nullptr;\n+    bool matched = skippy_iter.next ();\n+    if (likely (matched))\n+    {\n+      first = &c->buffer->info[skippy_iter.idx];\n+      unsafe_to = skippy_iter.idx + 1;\n+\n+      if (skippy_iter.may_skip (c->buffer->info[skippy_iter.idx]))\n+      {\n+        \/* Can't use the fast path if eg. the next char is a default-ignorable\n+         * or other skippable. *\/\n+        goto slow;\n+      }\n+    }\n+    else\n+    {\n+      \/* Failed to match a next glyph. Only try applying rules that have\n+       * no further input. *\/\n+      return_trace (\n+      + hb_iter (rule)\n+      | hb_map (hb_add (this))\n+      | hb_filter ([&] (const Rule &_) { return _.inputCount <= 1; })\n+      | hb_map ([&] (const Rule &_) { return _.apply (c, lookup_context); })\n+      | hb_any\n+      )\n+      ;\n+    }\n+    matched = skippy_iter.next ();\n+    if (likely (matched && !skippy_iter.may_skip (c->buffer->info[skippy_iter.idx])))\n+    {\n+      second = &c->buffer->info[skippy_iter.idx];\n+      unsafe_to2 = skippy_iter.idx + 1;\n+    }\n+\n+    auto match_input = lookup_context.funcs.match;\n+    auto *input_data = lookup_context.match_data;\n+    for (unsigned int i = 0; i < num_rules; i++)\n+    {\n+      const auto &r = this+rule.arrayZ[i];\n+\n+      const auto &input = r.inputZ;\n+\n+      if (r.inputCount <= 1 ||\n+          (!match_input ||\n+           match_input (*first, input.arrayZ[0], input_data)))\n+      {\n+        if (!second ||\n+            (r.inputCount <= 2 ||\n+             (!match_input ||\n+              match_input (*second, input.arrayZ[1], input_data)))\n+           )\n+        {\n+          if (r.apply (c, lookup_context))\n+          {\n+            if (unsafe_to != (unsigned) -1)\n+              c->buffer->unsafe_to_concat (c->buffer->idx, unsafe_to);\n+            return_trace (true);\n+          }\n+        }\n+        else\n+          unsafe_to = unsafe_to2;\n+      }\n+      else\n+      {\n+        if (unsafe_to == (unsigned) -1)\n+          unsafe_to = unsafe_to1;\n+      }\n+    }\n+    if (likely (unsafe_to != (unsigned) -1))\n+      c->buffer->unsafe_to_concat (c->buffer->idx, unsafe_to);\n+\n+    return_trace (false);\n@@ -2151,2 +2311,3 @@\n-    hb_set_t& cur_active_glyphs = c->push_cur_active_glyphs ();\n-    get_coverage ().intersect_set (c->previous_parent_active_glyphs (), cur_active_glyphs);\n+    hb_set_t* cur_active_glyphs = c->push_cur_active_glyphs ();\n+    if (unlikely (!cur_active_glyphs)) return;\n+    get_coverage ().intersect_set (c->previous_parent_active_glyphs (), *cur_active_glyphs);\n@@ -2321,1 +2482,2 @@\n-    hb_set_t& cur_active_glyphs = c->push_cur_active_glyphs ();\n+    hb_set_t* cur_active_glyphs = c->push_cur_active_glyphs ();\n+    if (unlikely (!cur_active_glyphs)) return;\n@@ -2323,1 +2485,1 @@\n-                                                 cur_active_glyphs);\n+                                   *cur_active_glyphs);\n@@ -2434,1 +2596,3 @@\n-  bool apply (hb_ot_apply_context_t *c, bool cached = false) const\n+  bool apply_cached (hb_ot_apply_context_t *c) const { return _apply (c, true); }\n+  bool apply (hb_ot_apply_context_t *c) const { return _apply (c, false); }\n+  bool _apply (hb_ot_apply_context_t *c, bool cached) const\n@@ -2450,1 +2614,0 @@\n-    {\n@@ -2452,3 +2615,0 @@\n-      if (cached && index < 255)\n-        c->buffer->cur().syllable() = index;\n-    }\n@@ -2564,1 +2724,2 @@\n-    hb_set_t& cur_active_glyphs = c->push_cur_active_glyphs ();\n+    hb_set_t* cur_active_glyphs = c->push_cur_active_glyphs ();\n+    if (unlikely (!cur_active_glyphs)) return;\n@@ -2566,2 +2727,1 @@\n-                                                 cur_active_glyphs);\n-\n+                                   *cur_active_glyphs);\n@@ -2668,1 +2828,1 @@\n-    if (!c->check_struct (this)) return_trace (false);\n+    if (unlikely (!c->check_struct (this))) return_trace (false);\n@@ -2670,2 +2830,2 @@\n-    if (!count) return_trace (false); \/* We want to access coverageZ[0] freely. *\/\n-    if (!c->check_array (coverageZ.arrayZ, count)) return_trace (false);\n+    if (unlikely (!count)) return_trace (false); \/* We want to access coverageZ[0] freely. *\/\n+    if (unlikely (!c->check_array (coverageZ.arrayZ, count))) return_trace (false);\n@@ -2673,1 +2833,1 @@\n-      if (!coverageZ[i].sanitize (c, this)) return_trace (false);\n+      if (unlikely (!coverageZ[i].sanitize (c, this))) return_trace (false);\n@@ -2675,1 +2835,1 @@\n-    return_trace (c->check_array (lookupRecord, lookupCount));\n+    return_trace (likely (c->check_array (lookupRecord, lookupCount)));\n@@ -2848,10 +3008,11 @@\n-static inline bool chain_context_apply_lookup (hb_ot_apply_context_t *c,\n-                                               unsigned int backtrackCount,\n-                                               const HBUINT backtrack[],\n-                                               unsigned int inputCount, \/* Including the first glyph (not matched) *\/\n-                                               const HBUINT input[], \/* Array of input values--start with second glyph *\/\n-                                               unsigned int lookaheadCount,\n-                                               const HBUINT lookahead[],\n-                                               unsigned int lookupCount,\n-                                               const LookupRecord lookupRecord[],\n-                                               const ChainContextApplyLookupContext &lookup_context)\n+HB_ALWAYS_INLINE\n+static bool chain_context_apply_lookup (hb_ot_apply_context_t *c,\n+                                        unsigned int backtrackCount,\n+                                        const HBUINT backtrack[],\n+                                        unsigned int inputCount, \/* Including the first glyph (not matched) *\/\n+                                        const HBUINT input[], \/* Array of input values--start with second glyph *\/\n+                                        unsigned int lookaheadCount,\n+                                        const HBUINT lookahead[],\n+                                        unsigned int lookupCount,\n+                                        const LookupRecord lookupRecord[],\n+                                        const ChainContextApplyLookupContext &lookup_context)\n@@ -2896,0 +3057,3 @@\n+  template <typename T>\n+  friend struct ChainRuleSet;\n+\n@@ -2995,2 +3159,0 @@\n-    auto *out = c->start_embed (this);\n-    if (unlikely (!out)) return_trace (false);\n@@ -3058,1 +3220,2 @@\n-    if (!backtrack.sanitize (c)) return_trace (false);\n+    \/* Hyper-optimized sanitized because this is really hot. *\/\n+    if (unlikely (!backtrack.len.sanitize (c))) return_trace (false);\n@@ -3060,1 +3223,1 @@\n-    if (!input.sanitize (c)) return_trace (false);\n+    if (unlikely (!input.lenP1.sanitize (c))) return_trace (false);\n@@ -3062,1 +3225,1 @@\n-    if (!lookahead.sanitize (c)) return_trace (false);\n+    if (unlikely (!lookahead.len.sanitize (c))) return_trace (false);\n@@ -3064,1 +3227,1 @@\n-    return_trace (lookup.sanitize (c));\n+    return_trace (likely (lookup.sanitize (c)));\n@@ -3072,1 +3235,1 @@\n-  HeadlessArrayOf<typename Types::HBUINT>\n+  HeadlessArray16Of<typename Types::HBUINT>\n@@ -3145,7 +3308,113 @@\n-    return_trace (\n-    + hb_iter (rule)\n-    | hb_map (hb_add (this))\n-    | hb_map ([&] (const ChainRule &_) { return _.apply (c, lookup_context); })\n-    | hb_any\n-    )\n-    ;\n+\n+    unsigned num_rules = rule.len;\n+\n+#ifndef HB_NO_OT_RULESETS_FAST_PATH\n+    if (HB_OPTIMIZE_SIZE_VAL || num_rules <= 4)\n+#endif\n+    {\n+    slow:\n+      return_trace (\n+      + hb_iter (rule)\n+      | hb_map (hb_add (this))\n+      | hb_map ([&] (const ChainRule &_) { return _.apply (c, lookup_context); })\n+      | hb_any\n+      )\n+      ;\n+    }\n+\n+    \/* This version is optimized for speed by matching the first & second\n+     * components of the rule here, instead of calling into the matching code.\n+     *\n+     * Replicated from LigatureSet::apply(). *\/\n+\n+    hb_ot_apply_context_t::skipping_iterator_t &skippy_iter = c->iter_input;\n+    skippy_iter.reset (c->buffer->idx);\n+    skippy_iter.set_match_func (match_always, nullptr);\n+    skippy_iter.set_glyph_data ((HBUINT16 *) nullptr);\n+    unsigned unsafe_to = (unsigned) -1, unsafe_to1 = 0, unsafe_to2 = 0;\n+    hb_glyph_info_t *first = nullptr, *second = nullptr;\n+    bool matched = skippy_iter.next ();\n+    if (likely (matched))\n+    {\n+      first = &c->buffer->info[skippy_iter.idx];\n+      unsafe_to1 = skippy_iter.idx + 1;\n+\n+      if (skippy_iter.may_skip (c->buffer->info[skippy_iter.idx]))\n+      {\n+        \/* Can't use the fast path if eg. the next char is a default-ignorable\n+         * or other skippable. *\/\n+        goto slow;\n+      }\n+    }\n+    else\n+    {\n+      \/* Failed to match a next glyph. Only try applying rules that have\n+       * no further input and lookahead. *\/\n+      return_trace (\n+      + hb_iter (rule)\n+      | hb_map (hb_add (this))\n+      | hb_filter ([&] (const ChainRule &_)\n+                   {\n+                     const auto &input = StructAfter<decltype (_.inputX)> (_.backtrack);\n+                     const auto &lookahead = StructAfter<decltype (_.lookaheadX)> (input);\n+                     return input.lenP1 <= 1 && lookahead.len == 0;\n+                   })\n+      | hb_map ([&] (const ChainRule &_) { return _.apply (c, lookup_context); })\n+      | hb_any\n+      )\n+      ;\n+    }\n+    matched = skippy_iter.next ();\n+    if (likely (matched && !skippy_iter.may_skip (c->buffer->info[skippy_iter.idx])))\n+     {\n+      second = &c->buffer->info[skippy_iter.idx];\n+      unsafe_to2 = skippy_iter.idx + 1;\n+     }\n+\n+    auto match_input = lookup_context.funcs.match[1];\n+    auto match_lookahead = lookup_context.funcs.match[2];\n+    auto *input_data = lookup_context.match_data[1];\n+    auto *lookahead_data = lookup_context.match_data[2];\n+    for (unsigned int i = 0; i < num_rules; i++)\n+    {\n+      const auto &r = this+rule.arrayZ[i];\n+\n+      const auto &input = StructAfter<decltype (r.inputX)> (r.backtrack);\n+      const auto &lookahead = StructAfter<decltype (r.lookaheadX)> (input);\n+\n+      unsigned lenP1 = hb_max ((unsigned) input.lenP1, 1u);\n+      if (lenP1 > 1 ?\n+           (!match_input ||\n+            match_input (*first, input.arrayZ[0], input_data))\n+          :\n+           (!lookahead.len || !match_lookahead ||\n+            match_lookahead (*first, lookahead.arrayZ[0], lookahead_data)))\n+      {\n+        if (!second ||\n+            (lenP1 > 2 ?\n+             (!match_input ||\n+              match_input (*second, input.arrayZ[1], input_data))\n+             :\n+             (lookahead.len <= 2 - lenP1 || !match_lookahead ||\n+              match_lookahead (*second, lookahead.arrayZ[2 - lenP1], lookahead_data))))\n+        {\n+          if (r.apply (c, lookup_context))\n+          {\n+            if (unsafe_to != (unsigned) -1)\n+              c->buffer->unsafe_to_concat (c->buffer->idx, unsafe_to);\n+            return_trace (true);\n+          }\n+        }\n+        else\n+          unsafe_to = unsafe_to2;\n+      }\n+      else\n+      {\n+        if (unsafe_to == (unsigned) -1)\n+          unsafe_to = unsafe_to1;\n+      }\n+    }\n+    if (likely (unsafe_to != (unsigned) -1))\n+      c->buffer->unsafe_to_concat (c->buffer->idx, unsafe_to);\n+\n+    return_trace (false);\n@@ -3232,1 +3501,2 @@\n-    hb_set_t& cur_active_glyphs = c->push_cur_active_glyphs ();\n+    hb_set_t* cur_active_glyphs = c->push_cur_active_glyphs ();\n+    if (unlikely (!cur_active_glyphs)) return;\n@@ -3234,1 +3504,1 @@\n-                                                 cur_active_glyphs);\n+                                   *cur_active_glyphs);\n@@ -3404,1 +3674,2 @@\n-    hb_set_t& cur_active_glyphs = c->push_cur_active_glyphs ();\n+    hb_set_t* cur_active_glyphs = c->push_cur_active_glyphs ();\n+    if (unlikely (!cur_active_glyphs)) return;\n@@ -3406,2 +3677,1 @@\n-                                                 cur_active_glyphs);\n-\n+                                   *cur_active_glyphs);\n@@ -3537,1 +3807,3 @@\n-  bool apply (hb_ot_apply_context_t *c, bool cached = false) const\n+  bool apply_cached (hb_ot_apply_context_t *c) const { return _apply (c, true); }\n+  bool apply (hb_ot_apply_context_t *c) const { return _apply (c, false); }\n+  bool _apply (hb_ot_apply_context_t *c, bool cached) const\n@@ -3547,10 +3819,2 @@\n-    \/* For ChainContextFormat2_5 we cache the LookaheadClassDef instead of InputClassDef.\n-     * The reason is that most heavy fonts want to identify a glyph in context and apply\n-     * a lookup to it. In this scenario, the length of the input sequence is one, whereas\n-     * the lookahead \/ backtrack are typically longer.  The one glyph in input sequence is\n-     * looked-up below and no input glyph is looked up in individual rules, whereas the\n-     * lookahead and backtrack glyphs are tried.  Since we match lookahead before backtrack,\n-     * we should cache lookahead.  This decisions showed a 20% improvement in shaping of\n-     * the Gulzar font.\n-     *\/\n-\n+    \/* match_class_caches1 is slightly faster. Use it for lookahead,\n+     * which is typically longer. *\/\n@@ -3558,3 +3822,3 @@\n-      {{cached && &backtrack_class_def == &lookahead_class_def ? match_class_cached : match_class,\n-        cached && &input_class_def == &lookahead_class_def ? match_class_cached : match_class,\n-        cached ? match_class_cached : match_class}},\n+      {{cached && &backtrack_class_def == &lookahead_class_def ? match_class_cached1 : match_class,\n+        cached ? match_class_cached2 : match_class,\n+        cached ? match_class_cached1 : match_class}},\n@@ -3566,1 +3830,5 @@\n-    index = input_class_def.get_class (c->buffer->cur().codepoint);\n+    \/\/ Note: Corresponds to match_class_cached2\n+    if (cached && ((c->buffer->cur().syllable() & 0xF0) >> 4) < 15)\n+      index = (c->buffer->cur().syllable () & 0xF0) >> 4;\n+    else\n+      index = input_class_def.get_class (c->buffer->cur().codepoint);\n@@ -3706,1 +3974,3 @@\n-    hb_set_t& cur_active_glyphs = c->push_cur_active_glyphs ();\n+    hb_set_t* cur_active_glyphs = c->push_cur_active_glyphs ();\n+    if (unlikely (!cur_active_glyphs))\n+      return;\n@@ -3708,2 +3978,1 @@\n-                                                 cur_active_glyphs);\n-\n+                                   *cur_active_glyphs);\n@@ -3828,2 +4097,0 @@\n-    auto *out = c->serializer->start_embed (this);\n-    if (unlikely (!out)) return_trace (false);\n@@ -3856,1 +4123,1 @@\n-    if (!backtrack.sanitize (c, this)) return_trace (false);\n+    if (unlikely (!backtrack.sanitize (c, this))) return_trace (false);\n@@ -3858,2 +4125,2 @@\n-    if (!input.sanitize (c, this)) return_trace (false);\n-    if (!input.len) return_trace (false); \/* To be consistent with Context. *\/\n+    if (unlikely (!input.sanitize (c, this))) return_trace (false);\n+    if (unlikely (!input.len)) return_trace (false); \/* To be consistent with Context. *\/\n@@ -3861,1 +4128,1 @@\n-    if (!lookahead.sanitize (c, this)) return_trace (false);\n+    if (unlikely (!lookahead.sanitize (c, this))) return_trace (false);\n@@ -3863,1 +4130,1 @@\n-    return_trace (lookup.sanitize (c));\n+    return_trace (likely (lookup.sanitize (c)));\n@@ -3953,1 +4220,1 @@\n-    if (unlikely (!out || !c->serializer->extend_min (out))) return_trace (false);\n+    if (unlikely (!c->serializer->extend_min (out))) return_trace (false);\n@@ -4071,0 +4338,3 @@\n+#ifndef HB_OPTIMIZE_SIZE\n+  HB_ALWAYS_INLINE\n+#endif\n@@ -4482,1 +4752,4 @@\n-      this->table = hb_sanitize_context_t ().reference_table<T> (face);\n+      hb_sanitize_context_t sc;\n+      sc.lazy_some_gpos = true;\n+      this->table = sc.reference_table<T> (face);\n+\n@@ -4507,0 +4780,2 @@\n+    hb_blob_t *get_blob () const { return table.get_blob (); }\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-layout-gsubgpos.hh","additions":440,"deletions":165,"binary":false,"changes":605,"status":"modified"},{"patch":"@@ -67,2 +67,2 @@\n- * See the <ulink url=\"http:\/\/www.microsoft.com\/typography\/otspec\/\">OpenType\n- * specification<\/ulink> for details.\n+ * See the [OpenType specification](http:\/\/www.microsoft.com\/typography\/otspec\/)\n+ * for details.\n@@ -260,1 +260,1 @@\n-  const OT::GDEF &gdef = *font->face->table.GDEF->table;\n+  const auto &gdef = *font->face->table.GDEF;\n@@ -262,0 +262,1 @@\n+  hb_glyph_info_t *info = buffer->info;\n@@ -264,2 +265,2 @@\n-    _hb_glyph_info_set_glyph_props (&buffer->info[i], gdef.get_glyph_props (buffer->info[i].codepoint));\n-    _hb_glyph_info_clear_lig_props (&buffer->info[i]);\n+    _hb_glyph_info_set_glyph_props (&info[i], gdef.get_glyph_props (info[i].codepoint));\n+    _hb_glyph_info_clear_lig_props (&info[i]);\n@@ -1243,1 +1244,1 @@\n- * @feature_indexes: (out): The array of feature indexes found for the query\n+ * @feature_indexes: (out): The set of feature indexes found for the query\n@@ -1284,0 +1285,43 @@\n+\/**\n+ * hb_ot_layout_collect_features_map:\n+ * @face: #hb_face_t to work upon\n+ * @table_tag: #HB_OT_TAG_GSUB or #HB_OT_TAG_GPOS\n+ * @script_index: The index of the requested script tag\n+ * @language_index: The index of the requested language tag\n+ * @feature_map: (out): The map of feature tag to feature index.\n+ *\n+ * Fetches the mapping from feature tags to feature indexes for\n+ * the specified script and language.\n+ *\n+ * Since: 8.1.0\n+ **\/\n+void\n+hb_ot_layout_collect_features_map (hb_face_t      *face,\n+                                   hb_tag_t        table_tag,\n+                                   unsigned        script_index,\n+                                   unsigned        language_index,\n+                                   hb_map_t       *feature_map \/* OUT *\/)\n+{\n+  const OT::GSUBGPOS &g = get_gsubgpos_table (face, table_tag);\n+  const OT::LangSys &l = g.get_script (script_index).get_lang_sys (language_index);\n+\n+  unsigned int count = l.get_feature_indexes (0, nullptr, nullptr);\n+  feature_map->alloc (count);\n+\n+  \/* Loop in reverse, such that earlier entries win. That emulates\n+   * a linear search, which seems to be what other implementations do.\n+   * We found that with arialuni_t.ttf, the \"ur\" language system has\n+   * duplicate features, and the earlier ones work but not later ones.\n+   *\/\n+  for (unsigned int i = count; i; i--)\n+  {\n+    unsigned feature_index = 0;\n+    unsigned feature_count = 1;\n+    l.get_feature_indexes (i - 1, &feature_count, &feature_index);\n+    if (!feature_count)\n+      break;\n+    hb_tag_t feature_tag = g.get_feature_tag (feature_index);\n+    feature_map->set (feature_tag, feature_index);\n+  }\n+}\n+\n@@ -1318,2 +1362,1 @@\n-  for (hb_codepoint_t feature_index = HB_SET_VALUE_INVALID;\n-       hb_set_next (&feature_indexes, &feature_index);)\n+  for (auto feature_index : feature_indexes)\n@@ -1572,1 +1615,1 @@\n-      for (hb_codepoint_t lookup_index = HB_SET_VALUE_INVALID; hb_set_next (lookups, &lookup_index);)\n+      for (auto lookup_index : *lookups)\n@@ -1898,1 +1941,1 @@\n-     ret |= accel.apply (c, subtable_count, false);\n+      ret |= accel.apply (c, subtable_count, false);\n@@ -1955,1 +1998,1 @@\n-  OT::hb_ot_apply_context_t c (table_index, font, buffer);\n+  OT::hb_ot_apply_context_t c (table_index, font, buffer, proxy.accel.get_blob ());\n@@ -1980,3 +2023,3 @@\n-        c.set_lookup_mask (lookup.mask);\n-        c.set_auto_zwj (lookup.auto_zwj);\n-        c.set_auto_zwnj (lookup.auto_zwnj);\n+        c.set_lookup_mask (lookup.mask, false);\n+        c.set_auto_zwj (lookup.auto_zwj, false);\n+        c.set_auto_zwnj (lookup.auto_zwnj, false);\n@@ -1984,1 +2027,2 @@\n-        c.set_per_syllable (lookup.per_syllable);\n+        c.set_per_syllable (lookup.per_syllable, false);\n+        \/* apply_string's set_lookup_props initializes the iterators. *\/\n@@ -2012,1 +2056,1 @@\n-      !buffer->message (font, \"start table GSUB\")) return;\n+      !buffer->message (font, \"start table GSUB script tag '%c%c%c%c'\", HB_UNTAG (chosen_script[0]))) return;\n@@ -2015,1 +2059,1 @@\n-    (void) buffer->message (font, \"end table GSUB\");\n+    (void) buffer->message (font, \"end table GSUB script tag '%c%c%c%c'\", HB_UNTAG (chosen_script[0]));\n@@ -2022,1 +2066,1 @@\n-      !buffer->message (font, \"start table GPOS\")) return;\n+      !buffer->message (font, \"start table GPOS script tag '%c%c%c%c'\", HB_UNTAG (chosen_script[1]))) return;\n@@ -2025,1 +2069,1 @@\n-    (void) buffer->message (font, \"end table GPOS\");\n+    (void) buffer->message (font, \"end table GPOS script tag '%c%c%c%c'\", HB_UNTAG (chosen_script[1]));\n@@ -2037,0 +2081,106 @@\n+\n+static void\n+choose_base_tags (hb_script_t    script,\n+                  hb_language_t  language,\n+                  hb_tag_t      *script_tag,\n+                  hb_tag_t      *language_tag)\n+{\n+  hb_tag_t script_tags[HB_OT_MAX_TAGS_PER_SCRIPT];\n+  unsigned script_count = ARRAY_LENGTH (script_tags);\n+\n+  hb_tag_t language_tags[HB_OT_MAX_TAGS_PER_LANGUAGE];\n+  unsigned language_count = ARRAY_LENGTH (language_tags);\n+\n+  hb_ot_tags_from_script_and_language (script, language,\n+                                       &script_count, script_tags,\n+                                       &language_count, language_tags);\n+\n+  *script_tag = script_count ? script_tags[script_count - 1] : HB_OT_TAG_DEFAULT_SCRIPT;\n+  *language_tag = language_count ? language_tags[language_count - 1] : HB_OT_TAG_DEFAULT_LANGUAGE;\n+}\n+\n+\/**\n+ * hb_ot_layout_get_font_extents:\n+ * @font: a font\n+ * @direction: text direction.\n+ * @script_tag:  script tag.\n+ * @language_tag: language tag.\n+ * @extents: (out) (nullable): font extents if found.\n+ *\n+ * Fetches script\/language-specific font extents.  These values are\n+ * looked up in the `BASE` table's `MinMax` records.\n+ *\n+ * If no such extents are found, the default extents for the font are\n+ * fetched. As such, the return value of this function can for the\n+ * most part be ignored.  Note that the per-script\/language extents\n+ * do not have a line-gap value, and the line-gap is set to zero in\n+ * that case.\n+ *\n+ * Return value: `true` if found script\/language-specific font extents.\n+ *\n+ * Since: 8.0.0\n+ **\/\n+hb_bool_t\n+hb_ot_layout_get_font_extents (hb_font_t         *font,\n+                               hb_direction_t     direction,\n+                               hb_tag_t           script_tag,\n+                               hb_tag_t           language_tag,\n+                               hb_font_extents_t *extents)\n+{\n+  hb_position_t min, max;\n+  if (font->face->table.BASE->get_min_max (font, direction, script_tag, language_tag, HB_TAG_NONE,\n+                                           &min, &max))\n+  {\n+    if (extents)\n+    {\n+      extents->ascender  = max;\n+      extents->descender = min;\n+      extents->line_gap  = 0;\n+    }\n+    return true;\n+  }\n+\n+  hb_font_get_extents_for_direction (font, direction, extents);\n+  return false;\n+}\n+\n+\/**\n+ * hb_ot_layout_get_font_extents2:\n+ * @font: a font\n+ * @direction: text direction.\n+ * @script:  script.\n+ * @language: (nullable): language.\n+ * @extents: (out) (nullable): font extents if found.\n+ *\n+ * Fetches script\/language-specific font extents.  These values are\n+ * looked up in the `BASE` table's `MinMax` records.\n+ *\n+ * If no such extents are found, the default extents for the font are\n+ * fetched. As such, the return value of this function can for the\n+ * most part be ignored.  Note that the per-script\/language extents\n+ * do not have a line-gap value, and the line-gap is set to zero in\n+ * that case.\n+ *\n+ * This function is like hb_ot_layout_get_font_extents() but takes\n+ * #hb_script_t and #hb_language_t instead of OpenType #hb_tag_t.\n+ *\n+ * Return value: `true` if found script\/language-specific font extents.\n+ *\n+ * Since: 8.0.0\n+ **\/\n+hb_bool_t\n+hb_ot_layout_get_font_extents2 (hb_font_t         *font,\n+                                hb_direction_t     direction,\n+                                hb_script_t        script,\n+                                hb_language_t      language,\n+                                hb_font_extents_t *extents)\n+{\n+  hb_tag_t script_tag, language_tag;\n+  choose_base_tags (script, language, &script_tag, &language_tag);\n+  return hb_ot_layout_get_font_extents (font,\n+                                        direction,\n+                                        script_tag,\n+                                        language_tag,\n+                                        extents);\n+}\n+\n@@ -2134,0 +2284,36 @@\n+\/**\n+ * hb_ot_layout_get_baseline2:\n+ * @font: a font\n+ * @baseline_tag: a baseline tag\n+ * @direction: text direction.\n+ * @script:  script.\n+ * @language: (nullable): language, currently unused.\n+ * @coord: (out) (nullable): baseline value if found.\n+ *\n+ * Fetches a baseline value from the face.\n+ *\n+ * This function is like hb_ot_layout_get_baseline() but takes\n+ * #hb_script_t and #hb_language_t instead of OpenType #hb_tag_t.\n+ *\n+ * Return value: `true` if found baseline value in the font.\n+ *\n+ * Since: 8.0.0\n+ **\/\n+hb_bool_t\n+hb_ot_layout_get_baseline2 (hb_font_t                   *font,\n+                            hb_ot_layout_baseline_tag_t  baseline_tag,\n+                            hb_direction_t               direction,\n+                            hb_script_t                  script,\n+                            hb_language_t                language,\n+                            hb_position_t               *coord        \/* OUT.  May be NULL. *\/)\n+{\n+  hb_tag_t script_tag, language_tag;\n+  choose_base_tags (script, language, &script_tag, &language_tag);\n+  return hb_ot_layout_get_baseline (font,\n+                                    baseline_tag,\n+                                    direction,\n+                                    script_tag,\n+                                    language_tag,\n+                                    coord);\n+}\n+\n@@ -2356,0 +2542,35 @@\n+\/**\n+ * hb_ot_layout_get_baseline_with_fallback2:\n+ * @font: a font\n+ * @baseline_tag: a baseline tag\n+ * @direction: text direction.\n+ * @script:  script.\n+ * @language: (nullable): language, currently unused.\n+ * @coord: (out): baseline value if found.\n+ *\n+ * Fetches a baseline value from the face, and synthesizes\n+ * it if the font does not have it.\n+ *\n+ * This function is like hb_ot_layout_get_baseline_with_fallback() but takes\n+ * #hb_script_t and #hb_language_t instead of OpenType #hb_tag_t.\n+ *\n+ * Since: 8.0.0\n+ **\/\n+void\n+hb_ot_layout_get_baseline_with_fallback2 (hb_font_t                   *font,\n+                                          hb_ot_layout_baseline_tag_t  baseline_tag,\n+                                          hb_direction_t               direction,\n+                                          hb_script_t                  script,\n+                                          hb_language_t                language,\n+                                          hb_position_t               *coord        \/* OUT *\/)\n+{\n+  hb_tag_t script_tag, language_tag;\n+  choose_base_tags (script, language, &script_tag, &language_tag);\n+  hb_ot_layout_get_baseline_with_fallback (font,\n+                                           baseline_tag,\n+                                           direction,\n+                                           script_tag,\n+                                           language_tag,\n+                                           coord);\n+}\n+\n@@ -2452,0 +2673,1 @@\n+  hb_blob_t *blob = font->face->table.GPOS->get_blob ();\n@@ -2454,1 +2676,1 @@\n-  lookup.dispatch (&c, font, direction, glyph, pos);\n+  lookup.dispatch (&c, font, blob, direction, glyph, pos);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-layout.cc","additions":242,"deletions":20,"binary":false,"changes":262,"status":"modified"},{"patch":"@@ -327,0 +327,7 @@\n+HB_EXTERN void\n+hb_ot_layout_collect_features_map (hb_face_t      *face,\n+                                   hb_tag_t        table_tag,\n+                                   unsigned        script_index,\n+                                   unsigned        language_index,\n+                                   hb_map_t       *feature_map \/* OUT *\/);\n+\n@@ -450,0 +457,14 @@\n+HB_EXTERN hb_bool_t\n+hb_ot_layout_get_font_extents (hb_font_t         *font,\n+                               hb_direction_t     direction,\n+                               hb_tag_t           script_tag,\n+                               hb_tag_t           language_tag,\n+                               hb_font_extents_t *extents);\n+\n+HB_EXTERN hb_bool_t\n+hb_ot_layout_get_font_extents2 (hb_font_t         *font,\n+                                hb_direction_t     direction,\n+                                hb_script_t        script,\n+                                hb_language_t      language,\n+                                hb_font_extents_t *extents);\n+\n@@ -502,0 +523,8 @@\n+HB_EXTERN hb_bool_t\n+hb_ot_layout_get_baseline2 (hb_font_t                   *font,\n+                            hb_ot_layout_baseline_tag_t  baseline_tag,\n+                            hb_direction_t               direction,\n+                            hb_script_t                  script,\n+                            hb_language_t                language,\n+                            hb_position_t               *coord        \/* OUT.  May be NULL. *\/);\n+\n@@ -510,0 +539,8 @@\n+HB_EXTERN void\n+hb_ot_layout_get_baseline_with_fallback2 (hb_font_t                   *font,\n+                                          hb_ot_layout_baseline_tag_t  baseline_tag,\n+                                          hb_direction_t               direction,\n+                                          hb_script_t                  script,\n+                                          hb_language_t                language,\n+                                          hb_position_t               *coord        \/* OUT *\/);\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-layout.h","additions":37,"deletions":0,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -451,1 +451,1 @@\n-  return !!(info->lig_props() & IS_LIG_BASE);\n+  return info->lig_props() & IS_LIG_BASE;\n@@ -499,1 +499,1 @@\n-  return !!(info->glyph_props() & HB_OT_LAYOUT_GLYPH_PROPS_BASE_GLYPH);\n+  return info->glyph_props() & HB_OT_LAYOUT_GLYPH_PROPS_BASE_GLYPH;\n@@ -505,1 +505,1 @@\n-  return !!(info->glyph_props() & HB_OT_LAYOUT_GLYPH_PROPS_LIGATURE);\n+  return info->glyph_props() & HB_OT_LAYOUT_GLYPH_PROPS_LIGATURE;\n@@ -511,1 +511,1 @@\n-  return !!(info->glyph_props() & HB_OT_LAYOUT_GLYPH_PROPS_MARK);\n+  return info->glyph_props() & HB_OT_LAYOUT_GLYPH_PROPS_MARK;\n@@ -517,1 +517,1 @@\n-  return !!(info->glyph_props() & HB_OT_LAYOUT_GLYPH_PROPS_SUBSTITUTED);\n+  return info->glyph_props() & HB_OT_LAYOUT_GLYPH_PROPS_SUBSTITUTED;\n@@ -523,1 +523,1 @@\n-  return !!(info->glyph_props() & HB_OT_LAYOUT_GLYPH_PROPS_LIGATED);\n+  return info->glyph_props() & HB_OT_LAYOUT_GLYPH_PROPS_LIGATED;\n@@ -529,1 +529,1 @@\n-  return !!(info->glyph_props() & HB_OT_LAYOUT_GLYPH_PROPS_MULTIPLIED);\n+  return info->glyph_props() & HB_OT_LAYOUT_GLYPH_PROPS_MULTIPLIED;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-layout.hh","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -216,1 +216,2 @@\n-    feature_infos.qsort ();\n+    if (!is_simple)\n+      feature_infos.qsort ();\n@@ -241,0 +242,7 @@\n+  hb_map_t feature_indices[2];\n+  for (unsigned int table_index = 0; table_index < 2; table_index++)\n+    hb_ot_layout_collect_features_map (face,\n+                                       table_tags[table_index],\n+                                       script_index[table_index],\n+                                       language_index[table_index],\n+                                       &feature_indices[table_index]);\n@@ -263,1 +271,0 @@\n-\n@@ -271,6 +278,8 @@\n-      found |= (bool) hb_ot_layout_language_find_feature (face,\n-                                                          table_tags[table_index],\n-                                                          script_index[table_index],\n-                                                          language_index[table_index],\n-                                                          info->tag,\n-                                                          &feature_index[table_index]);\n+      hb_codepoint_t *index;\n+      if (feature_indices[table_index].has (info->tag, &index))\n+      {\n+        feature_index[table_index] = *index;\n+        found = true;\n+      }\n+      else\n+        feature_index[table_index] = HB_OT_LAYOUT_NO_FEATURE_INDEX;\n@@ -317,1 +326,2 @@\n-\n+  if (is_simple)\n+    m.features.qsort ();\n@@ -353,1 +363,1 @@\n-      if (last_num_lookups < lookups.length)\n+      if (last_num_lookups + 1 < lookups.length)\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-map.cc","additions":20,"deletions":10,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -63,0 +63,7 @@\n+\n+    HB_INTERNAL static int cmp (const void *pa, const void *pb)\n+    {\n+      const feature_map_t *a = (const feature_map_t *) pa;\n+      const feature_map_t *b = (const feature_map_t *) pb;\n+      return a->tag < b->tag ? -1 : a->tag > b->tag ? 1 : 0;\n+    }\n@@ -276,0 +283,1 @@\n+  bool is_simple;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-map.hh","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -76,1 +76,0 @@\n-    if (unlikely (!out)) return_trace (nullptr);\n@@ -313,1 +312,0 @@\n-    if (unlikely (!out)) return_trace (nullptr);\n@@ -575,0 +573,1 @@\n+    | hb_take (c->plan->source->get_num_glyphs ())\n@@ -760,2 +759,0 @@\n-    auto *out = c->serializer->start_embed (*this);\n-    if (unlikely (!out)) return_trace (false);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-math-table.hh","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n- * #HB_OT_MATH_CONSTANT_SCRIPT_PERCENT_SCALE_DOWN, then the return value is\n+ * #HB_OT_MATH_CONSTANT_RADICAL_DEGREE_BOTTOM_RAISE_PERCENT, then the return value is\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-math.cc","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -199,1 +199,1 @@\n-          *position += _hb_roundf (mult * font->slant_xy * rise);\n+          *position += roundf (mult * font->slant_xy * rise);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-metrics.cc","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -249,2 +249,2 @@\n-    if (c->plan->user_axes_location.has (HB_TAG ('w','g','h','t')) &&\n-        !c->plan->pinned_at_default)\n+    Triple *axis_range;\n+    if (c->plan->user_axes_location.has (HB_TAG ('w','g','h','t'), &axis_range))\n@@ -252,5 +252,3 @@\n-      float weight_class = c->plan->user_axes_location.get (HB_TAG ('w','g','h','t'));\n-      if (!c->serializer->check_assign (os2_prime->usWeightClass,\n-                                        roundf (hb_clamp (weight_class, 1.0f, 1000.0f)),\n-                                        HB_SERIALIZE_ERROR_INT_OVERFLOW))\n-        return_trace (false);\n+      unsigned weight_class = static_cast<unsigned> (roundf (hb_clamp (axis_range->middle, 1.0f, 1000.0f)));\n+      if (os2_prime->usWeightClass != weight_class)\n+        os2_prime->usWeightClass = weight_class;\n@@ -259,2 +257,1 @@\n-    if (c->plan->user_axes_location.has (HB_TAG ('w','d','t','h')) &&\n-        !c->plan->pinned_at_default)\n+    if (c->plan->user_axes_location.has (HB_TAG ('w','d','t','h'), &axis_range))\n@@ -262,5 +259,3 @@\n-      float width = c->plan->user_axes_location.get (HB_TAG ('w','d','t','h'));\n-      if (!c->serializer->check_assign (os2_prime->usWidthClass,\n-                                        roundf (map_wdth_to_widthclass (width)),\n-                                        HB_SERIALIZE_ERROR_INT_OVERFLOW))\n-        return_trace (false);\n+      unsigned width_class = static_cast<unsigned> (roundf (map_wdth_to_widthclass (axis_range->middle)));\n+      if (os2_prime->usWidthClass != width_class)\n+        os2_prime->usWidthClass = width_class;\n@@ -290,2 +285,1 @@\n-    for (hb_codepoint_t cp = HB_SET_VALUE_INVALID;\n-         codepoints->next (&cp);)\n+    for (auto cp : *codepoints)\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-os2-table.hh","additions":10,"deletions":16,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -82,0 +82,5 @@\n+\n+  old_new_index_map.alloc (num_glyphs);\n+  old_gid_new_index_map.alloc (num_glyphs);\n+  glyph_name_to_new_index.alloc (num_glyphs);\n+\n@@ -89,1 +94,2 @@\n-    if (old_index <= 257) new_index = old_index;\n+    if (old_index <= 257)\n+      new_index = old_index;\n@@ -91,1 +97,0 @@\n-    {\n@@ -93,1 +98,2 @@\n-    } else {\n+    else\n+    {\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-post-table-v2subset.hh","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -99,2 +99,1 @@\n-    post *post_prime = c->serializer->start_embed<post> ();\n-    if (unlikely (!post_prime)) return_trace (false);\n+    auto *post_prime = c->serializer->start_embed<post> ();\n@@ -117,2 +116,2 @@\n-    if (c->plan->user_axes_location.has (HB_TAG ('s','l','n','t')) &&\n-        !c->plan->pinned_at_default)\n+    Triple *axis_range;\n+    if (c->plan->user_axes_location.has (HB_TAG ('s','l','n','t'), &axis_range))\n@@ -120,3 +119,3 @@\n-      float italic_angle = c->plan->user_axes_location.get (HB_TAG ('s','l','n','t'));\n-      italic_angle = hb_max (-90.f, hb_min (italic_angle, 90.f));\n-      post_prime->italicAngle.set_float (italic_angle);\n+      float italic_angle = hb_max (-90.f, hb_min (axis_range->middle, 90.f));\n+      if (post_prime->italicAngle.to_float () != italic_angle)\n+        post_prime->italicAngle.set_float (italic_angle);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-post-table.hh","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -386,0 +386,1 @@\n+    hb_glyph_info_t *info = buffer->info;\n@@ -388,1 +389,1 @@\n-      if (_hb_glyph_info_get_modified_combining_class (&buffer->info[i]) == 0)\n+      if (_hb_glyph_info_get_modified_combining_class (&info[i]) == 0)\n@@ -393,1 +394,1 @@\n-        if (_hb_glyph_info_get_modified_combining_class (&buffer->info[end]) == 0)\n+        if (_hb_glyph_info_get_modified_combining_class (&info[end]) == 0)\n@@ -417,3 +418,5 @@\n-    for (unsigned int i = 1; i + 1 < buffer->len; i++)\n-      if (buffer->info[i].codepoint == 0x034Fu\/*CGJ*\/ &&\n-          (info_cc(buffer->info[i+1]) == 0 || info_cc(buffer->info[i-1]) <= info_cc(buffer->info[i+1])))\n+    unsigned count = buffer->len;\n+    hb_glyph_info_t *info = buffer->info;\n+    for (unsigned int i = 1; i + 1 < count; i++)\n+      if (info[i].codepoint == 0x034Fu\/*CGJ*\/ &&\n+          (info_cc(info[i+1]) == 0 || info_cc(info[i-1]) <= info_cc(info[i+1])))\n@@ -421,1 +424,1 @@\n-        _hb_glyph_info_unhide (&buffer->info[i]);\n+        _hb_glyph_info_unhide (&info[i]);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shape-normalize.cc","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -316,0 +316,2 @@\n+  map->is_simple = true;\n+\n@@ -357,0 +359,2 @@\n+  {\n+    map->is_simple = false;\n@@ -358,0 +362,1 @@\n+  }\n@@ -381,0 +386,2 @@\n+  if (num_user_features)\n+    map->is_simple = false;\n@@ -472,0 +479,9 @@\n+    unsigned gen_cat = _hb_glyph_info_get_general_category (&info[i]);\n+    if (FLAG_UNSAFE (gen_cat) &\n+        (FLAG (HB_UNICODE_GENERAL_CATEGORY_LOWERCASE_LETTER) |\n+         FLAG (HB_UNICODE_GENERAL_CATEGORY_UPPERCASE_LETTER) |\n+         FLAG (HB_UNICODE_GENERAL_CATEGORY_TITLECASE_LETTER) |\n+         FLAG (HB_UNICODE_GENERAL_CATEGORY_OTHER_LETTER) |\n+         FLAG (HB_UNICODE_GENERAL_CATEGORY_SPACE_SEPARATOR)))\n+      continue;\n+\n@@ -474,1 +490,1 @@\n-    if (unlikely (_hb_glyph_info_get_general_category (&info[i]) == HB_UNICODE_GENERAL_CATEGORY_MODIFIER_SYMBOL &&\n+    if (unlikely (gen_cat == HB_UNICODE_GENERAL_CATEGORY_MODIFIER_SYMBOL &&\n@@ -752,0 +768,8 @@\n+      if (start == i || end == i + 1)\n+      {\n+        if (start == i)\n+          buffer->unsafe_to_concat (start, start + 1);\n+        if (end == i + 1)\n+          buffer->unsafe_to_concat (end - 1, end);\n+        continue;\n+      }\n@@ -1033,1 +1057,1 @@\n-   * Note: If fallback positinoing happens, we don't care about\n+   * Note: If fallback positioning happens, we don't care about\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shape.cc","additions":26,"deletions":2,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -371,1 +371,1 @@\n-  OT::hb_ot_apply_context_t c (0, font, buffer);\n+  OT::hb_ot_apply_context_t c (0, font, buffer, hb_blob_get_empty ());\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shaper-arabic-fallback.hh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -9,4 +9,4 @@\n- * # ArabicShaping-15.0.0.txt\n- * # Date: 2022-02-14, 18:50:00 GMT [KW, RP]\n- * # Scripts-15.0.0.txt\n- * # Date: 2022-04-26, 23:15:02 GMT\n+ * # ArabicShaping-15.1.0.txt\n+ * # Date: 2023-01-05\n+ * # Scripts-15.1.0.txt\n+ * # Date: 2023-07-28, 16:01:07 GMT\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shaper-arabic-joining-list.hh","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -9,4 +9,4 @@\n- * # ArabicShaping-15.0.0.txt\n- * # Date: 2022-02-14, 18:50:00 GMT [KW, RP]\n- * # Blocks-15.0.0.txt\n- * # Date: 2022-01-28, 20:58:00 GMT [KW]\n+ * # ArabicShaping-15.1.0.txt\n+ * # Date: 2023-01-05\n+ * # Blocks-15.1.0.txt\n+ * # Date: 2023-07-28, 15:47:20 GMT\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shaper-arabic-table.hh","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -489,2 +489,4 @@\n-  \/* The Arabic shaper currently always processes in RTL mode, so we should\n-   * stretch \/ position the stretched pieces to the left \/ preceding glyphs. *\/\n+  bool rtl = buffer->props.direction == HB_DIRECTION_RTL;\n+\n+  if (!rtl)\n+    buffer->reverse ();\n@@ -580,0 +582,1 @@\n+        {\n@@ -581,0 +584,2 @@\n+          w_remaining = 0;\n+        }\n@@ -591,1 +596,1 @@\n-        hb_position_t x_offset = 0;\n+        hb_position_t x_offset = w_remaining \/ 2;\n@@ -602,0 +607,1 @@\n+          pos[k - 1].x_advance = 0;\n@@ -604,3 +610,6 @@\n-            x_offset -= width;\n-            if (n > 0)\n-              x_offset += extra_repeat_overlap;\n+            if (rtl)\n+            {\n+              x_offset -= width;\n+              if (n > 0)\n+                x_offset += extra_repeat_overlap;\n+            }\n@@ -612,0 +621,7 @@\n+\n+            if (!rtl)\n+            {\n+              x_offset += width;\n+              if (n > 0)\n+                x_offset -= extra_repeat_overlap;\n+            }\n@@ -628,0 +644,3 @@\n+\n+  if (!rtl)\n+    buffer->reverse ();\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shaper-arabic.cc","additions":25,"deletions":6,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-#line 54 \"hb-ot-shaper-indic-machine.hh\"\n+#line 57 \"hb-ot-shaper-indic-machine.hh\"\n@@ -79,1 +79,1 @@\n-#line 75 \"hb-ot-shaper-indic-machine.hh\"\n+#line 80 \"hb-ot-shaper-indic-machine.hh\"\n@@ -463,1 +463,1 @@\n-#line 453 \"hb-ot-shaper-indic-machine.hh\"\n+#line 464 \"hb-ot-shaper-indic-machine.hh\"\n@@ -479,1 +479,1 @@\n-#line 465 \"hb-ot-shaper-indic-machine.hh\"\n+#line 480 \"hb-ot-shaper-indic-machine.hh\"\n@@ -493,1 +493,1 @@\n-#line 477 \"hb-ot-shaper-indic-machine.hh\"\n+#line 494 \"hb-ot-shaper-indic-machine.hh\"\n@@ -596,1 +596,1 @@\n-#line 559 \"hb-ot-shaper-indic-machine.hh\"\n+#line 597 \"hb-ot-shaper-indic-machine.hh\"\n@@ -605,1 +605,1 @@\n-#line 566 \"hb-ot-shaper-indic-machine.hh\"\n+#line 606 \"hb-ot-shaper-indic-machine.hh\"\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shaper-indic-machine.hh","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -9,6 +9,6 @@\n- * # IndicSyllabicCategory-15.0.0.txt\n- * # Date: 2022-05-26, 02:18:00 GMT [KW, RP]\n- * # IndicPositionalCategory-15.0.0.txt\n- * # Date: 2022-05-26, 02:18:00 GMT [KW, RP]\n- * # Blocks-15.0.0.txt\n- * # Date: 2022-01-28, 20:58:00 GMT [KW]\n+ * # IndicSyllabicCategory-15.1.0.txt\n+ * # Date: 2023-01-05\n+ * # IndicPositionalCategory-15.1.0.txt\n+ * # Date: 2023-01-05\n+ * # Blocks-15.1.0.txt\n+ * # Date: 2023-07-28, 15:47:20 GMT\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shaper-indic-table.cc","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-#line 49 \"hb-ot-shaper-khmer-machine.hh\"\n+#line 52 \"hb-ot-shaper-khmer-machine.hh\"\n@@ -69,1 +69,1 @@\n-#line 65 \"hb-ot-shaper-khmer-machine.hh\"\n+#line 70 \"hb-ot-shaper-khmer-machine.hh\"\n@@ -297,1 +297,1 @@\n-#line 287 \"hb-ot-shaper-khmer-machine.hh\"\n+#line 298 \"hb-ot-shaper-khmer-machine.hh\"\n@@ -313,1 +313,1 @@\n-#line 299 \"hb-ot-shaper-khmer-machine.hh\"\n+#line 314 \"hb-ot-shaper-khmer-machine.hh\"\n@@ -327,1 +327,1 @@\n-#line 311 \"hb-ot-shaper-khmer-machine.hh\"\n+#line 328 \"hb-ot-shaper-khmer-machine.hh\"\n@@ -397,1 +397,1 @@\n-#line 368 \"hb-ot-shaper-khmer-machine.hh\"\n+#line 398 \"hb-ot-shaper-khmer-machine.hh\"\n@@ -406,1 +406,1 @@\n-#line 375 \"hb-ot-shaper-khmer-machine.hh\"\n+#line 407 \"hb-ot-shaper-khmer-machine.hh\"\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shaper-khmer-machine.hh","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-#line 51 \"hb-ot-shaper-myanmar-machine.hh\"\n+#line 54 \"hb-ot-shaper-myanmar-machine.hh\"\n@@ -80,1 +80,1 @@\n-#line 76 \"hb-ot-shaper-myanmar-machine.hh\"\n+#line 81 \"hb-ot-shaper-myanmar-machine.hh\"\n@@ -446,1 +446,1 @@\n-#line 436 \"hb-ot-shaper-myanmar-machine.hh\"\n+#line 447 \"hb-ot-shaper-myanmar-machine.hh\"\n@@ -462,1 +462,1 @@\n-#line 448 \"hb-ot-shaper-myanmar-machine.hh\"\n+#line 463 \"hb-ot-shaper-myanmar-machine.hh\"\n@@ -476,1 +476,1 @@\n-#line 460 \"hb-ot-shaper-myanmar-machine.hh\"\n+#line 477 \"hb-ot-shaper-myanmar-machine.hh\"\n@@ -522,1 +522,1 @@\n-#line 498 \"hb-ot-shaper-myanmar-machine.hh\"\n+#line 523 \"hb-ot-shaper-myanmar-machine.hh\"\n@@ -531,1 +531,1 @@\n-#line 505 \"hb-ot-shaper-myanmar-machine.hh\"\n+#line 532 \"hb-ot-shaper-myanmar-machine.hh\"\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shaper-myanmar-machine.hh","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -43,0 +43,8 @@\n+  {\n+    if (buffer->messaging ())\n+      (void) buffer->message (font, \"skipped inserting dotted-circles because there is no broken syllables\");\n+    return false;\n+  }\n+\n+  if (buffer->messaging () &&\n+      !buffer->message (font, \"start inserting dotted-circles\"))\n@@ -87,0 +95,4 @@\n+\n+  if (buffer->messaging ())\n+    (void) buffer->message (font, \"end inserting dotted-circles\");\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shaper-syllabic.cc","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-#line 54 \"hb-ot-shaper-use-machine.hh\"\n+#line 57 \"hb-ot-shaper-use-machine.hh\"\n@@ -71,0 +71,1 @@\n+#define use_syllable_machine_ex_HM 54u\n@@ -72,0 +73,1 @@\n+#define use_syllable_machine_ex_HR 55u\n@@ -100,1 +102,1 @@\n-#line 96 \"hb-ot-shaper-use-machine.hh\"\n+#line 103 \"hb-ot-shaper-use-machine.hh\"\n@@ -102,4 +104,11 @@\n-        0u, 53u, 11u, 53u, 11u, 53u, 1u, 53u, 14u, 48u, 14u, 47u, 14u, 47u, 14u, 47u,\n-        14u, 46u, 14u, 46u, 14u, 14u, 14u, 48u, 14u, 48u, 14u, 48u, 1u, 14u, 14u, 48u,\n-        14u, 53u, 14u, 53u, 14u, 53u, 14u, 53u, 12u, 53u, 14u, 53u, 12u, 53u, 12u, 53u,\n-        12u, 53u, 11u, 53u, 1u, 14u, 1u, 48u, 11u, 53u, 14u, 42u, 14u, 42u, 11u, 53u,\n+        49u, 51u, 0u, 53u, 11u, 53u, 11u, 53u, 1u, 53u, 14u, 48u, 14u, 47u, 14u, 47u,\n+        14u, 47u, 14u, 46u, 14u, 46u, 14u, 14u, 14u, 48u, 14u, 48u, 14u, 48u, 1u, 14u,\n+        14u, 48u, 14u, 53u, 14u, 53u, 14u, 53u, 14u, 53u, 12u, 53u, 14u, 53u, 12u, 53u,\n+        12u, 53u, 12u, 53u, 11u, 53u, 1u, 14u, 1u, 48u, 14u, 42u, 14u, 42u, 11u, 53u,\n+        1u, 53u, 14u, 48u, 14u, 47u, 14u, 47u, 14u, 47u, 14u, 46u, 14u, 46u, 14u, 14u,\n+        14u, 48u, 14u, 48u, 14u, 48u, 1u, 14u, 14u, 48u, 14u, 53u, 14u, 53u, 14u, 53u,\n+        14u, 53u, 12u, 53u, 14u, 53u, 12u, 53u, 12u, 53u, 12u, 53u, 11u, 53u, 1u, 14u,\n+        1u, 14u, 1u, 48u, 13u, 14u, 4u, 14u, 11u, 53u, 11u, 53u, 1u, 53u, 14u, 48u,\n+        14u, 47u, 14u, 47u, 14u, 47u, 14u, 46u, 14u, 46u, 14u, 14u, 14u, 48u, 14u, 48u,\n+        14u, 48u, 1u, 14u, 14u, 48u, 14u, 53u, 14u, 53u, 14u, 53u, 14u, 53u, 12u, 53u,\n+        14u, 53u, 12u, 53u, 12u, 53u, 12u, 53u, 11u, 53u, 1u, 14u, 1u, 14u, 1u, 48u,\n@@ -109,9 +118,2 @@\n-        1u, 14u, 1u, 14u, 1u, 48u, 13u, 14u, 4u, 14u, 11u, 53u, 11u, 53u, 1u, 53u,\n-        14u, 48u, 14u, 47u, 14u, 47u, 14u, 47u, 14u, 46u, 14u, 46u, 14u, 14u, 14u, 48u,\n-        14u, 48u, 14u, 48u, 1u, 14u, 14u, 48u, 14u, 53u, 14u, 53u, 14u, 53u, 14u, 53u,\n-        12u, 53u, 14u, 53u, 12u, 53u, 12u, 53u, 12u, 53u, 11u, 53u, 1u, 14u, 1u, 14u,\n-        1u, 48u, 11u, 53u, 11u, 53u, 1u, 53u, 14u, 48u, 14u, 47u, 14u, 47u, 14u, 47u,\n-        14u, 46u, 14u, 46u, 14u, 14u, 14u, 48u, 14u, 48u, 14u, 48u, 1u, 14u, 14u, 48u,\n-        14u, 53u, 14u, 53u, 14u, 53u, 14u, 53u, 12u, 53u, 14u, 53u, 12u, 53u, 12u, 53u,\n-        12u, 53u, 11u, 53u, 1u, 14u, 1u, 48u, 4u, 14u, 13u, 14u, 1u, 53u, 11u, 53u,\n-        14u, 42u, 14u, 42u, 1u, 5u, 14u, 52u, 14u, 52u, 14u, 51u, 0\n+        1u, 14u, 1u, 48u, 4u, 14u, 13u, 14u, 1u, 53u, 14u, 42u, 14u, 42u, 1u, 5u,\n+        14u, 55u, 14u, 51u, 14u, 52u, 14u, 54u, 11u, 53u, 0\n@@ -121,4 +123,11 @@\n-        54, 43, 43, 53, 35, 34, 34, 34,\n-        33, 33, 1, 35, 35, 35, 14, 35,\n-        40, 40, 40, 40, 42, 40, 42, 42,\n-        42, 43, 14, 48, 43, 29, 29, 43,\n+        3, 54, 43, 43, 53, 35, 34, 34,\n+        34, 33, 33, 1, 35, 35, 35, 14,\n+        35, 40, 40, 40, 40, 42, 40, 42,\n+        42, 42, 43, 14, 48, 29, 29, 43,\n+        53, 35, 34, 34, 34, 33, 33, 1,\n+        35, 35, 35, 14, 35, 40, 40, 40,\n+        40, 42, 40, 42, 42, 42, 43, 14,\n+        14, 48, 2, 11, 43, 43, 53, 35,\n+        34, 34, 34, 33, 33, 1, 35, 35,\n+        35, 14, 35, 40, 40, 40, 40, 42,\n+        40, 42, 42, 42, 43, 14, 14, 48,\n@@ -128,9 +137,2 @@\n-        14, 14, 48, 2, 11, 43, 43, 53,\n-        35, 34, 34, 34, 33, 33, 1, 35,\n-        35, 35, 14, 35, 40, 40, 40, 40,\n-        42, 40, 42, 42, 42, 43, 14, 14,\n-        48, 43, 43, 53, 35, 34, 34, 34,\n-        33, 33, 1, 35, 35, 35, 14, 35,\n-        40, 40, 40, 40, 42, 40, 42, 42,\n-        42, 43, 14, 48, 11, 2, 53, 43,\n-        29, 29, 5, 39, 39, 38\n+        14, 48, 11, 2, 53, 29, 29, 5,\n+        42, 38, 39, 41, 43\n@@ -140,16 +142,16 @@\n-        0, 55, 99, 143, 197, 233, 268, 303,\n-        338, 372, 406, 408, 444, 480, 516, 531,\n-        567, 608, 649, 690, 731, 774, 815, 858,\n-        901, 944, 988, 1003, 1052, 1096, 1126, 1156,\n-        1200, 1244, 1298, 1334, 1369, 1404, 1439, 1473,\n-        1507, 1509, 1545, 1581, 1617, 1632, 1668, 1709,\n-        1750, 1791, 1832, 1875, 1916, 1959, 2002, 2045,\n-        2089, 2104, 2119, 2168, 2171, 2183, 2227, 2271,\n-        2325, 2361, 2396, 2431, 2466, 2500, 2534, 2536,\n-        2572, 2608, 2644, 2659, 2695, 2736, 2777, 2818,\n-        2859, 2902, 2943, 2986, 3029, 3072, 3116, 3131,\n-        3146, 3195, 3239, 3283, 3337, 3373, 3408, 3443,\n-        3478, 3512, 3546, 3548, 3584, 3620, 3656, 3671,\n-        3707, 3748, 3789, 3830, 3871, 3914, 3955, 3998,\n-        4041, 4084, 4128, 4143, 4192, 4204, 4207, 4261,\n-        4305, 4335, 4365, 4371, 4411, 4451\n+        0, 4, 59, 103, 147, 201, 237, 272,\n+        307, 342, 376, 410, 412, 448, 484, 520,\n+        535, 571, 612, 653, 694, 735, 778, 819,\n+        862, 905, 948, 992, 1007, 1056, 1086, 1116,\n+        1160, 1214, 1250, 1285, 1320, 1355, 1389, 1423,\n+        1425, 1461, 1497, 1533, 1548, 1584, 1625, 1666,\n+        1707, 1748, 1791, 1832, 1875, 1918, 1961, 2005,\n+        2020, 2035, 2084, 2087, 2099, 2143, 2187, 2241,\n+        2277, 2312, 2347, 2382, 2416, 2450, 2452, 2488,\n+        2524, 2560, 2575, 2611, 2652, 2693, 2734, 2775,\n+        2818, 2859, 2902, 2945, 2988, 3032, 3047, 3062,\n+        3111, 3155, 3209, 3245, 3280, 3315, 3350, 3384,\n+        3418, 3420, 3456, 3492, 3528, 3543, 3579, 3620,\n+        3661, 3702, 3743, 3786, 3827, 3870, 3913, 3956,\n+        4000, 4015, 4064, 4076, 4079, 4133, 4163, 4193,\n+        4199, 4242, 4281, 4321, 4363\n@@ -159,145 +161,152 @@\n-        0, 1, 2, 2, 3, 4, 2, 2,\n-        2, 2, 2, 5, 6, 7, 8, 2,\n-        2, 2, 9, 2, 2, 2, 10, 11,\n-        12, 13, 14, 15, 16, 17, 18, 19,\n-        20, 21, 22, 23, 2, 24, 25, 26,\n-        2, 27, 28, 29, 30, 31, 32, 33,\n-        30, 34, 2, 35, 2, 36, 2, 38,\n-        39, 37, 40, 37, 37, 37, 37, 37,\n-        37, 37, 41, 42, 43, 44, 45, 46,\n-        47, 48, 49, 50, 51, 52, 53, 54,\n-        37, 55, 56, 57, 37, 58, 59, 37,\n-        60, 61, 62, 63, 60, 37, 37, 37,\n-        37, 64, 37, 38, 39, 37, 40, 37,\n-        37, 37, 37, 37, 37, 37, 41, 42,\n-        43, 44, 45, 46, 47, 48, 49, 51,\n-        51, 52, 53, 54, 37, 55, 56, 57,\n-        37, 37, 37, 37, 60, 61, 62, 63,\n-        60, 37, 37, 37, 37, 64, 37, 38,\n-        37, 37, 37, 37, 37, 37, 37, 37,\n-        37, 37, 37, 37, 40, 37, 37, 37,\n-        37, 37, 37, 37, 37, 42, 43, 44,\n-        45, 37, 37, 37, 37, 37, 37, 37,\n-        37, 37, 37, 55, 56, 57, 37, 37,\n-        37, 37, 37, 61, 62, 63, 65, 37,\n-        37, 37, 37, 42, 37, 40, 37, 37,\n-        37, 37, 37, 37, 37, 37, 42, 43,\n-        44, 45, 37, 37, 37, 37, 37, 37,\n-        37, 37, 37, 37, 55, 56, 57, 37,\n-        37, 37, 37, 37, 61, 62, 63, 65,\n-        37, 40, 37, 37, 37, 37, 37, 37,\n-        37, 37, 37, 43, 44, 45, 37, 37,\n-        37, 37, 37, 37, 37, 37, 37, 37,\n-        37, 37, 37, 37, 37, 37, 37, 37,\n-        61, 62, 63, 37, 40, 37, 37, 37,\n-        37, 37, 37, 37, 37, 37, 37, 44,\n-        45, 37, 37, 37, 37, 37, 37, 37,\n-        37, 37, 37, 37, 37, 37, 37, 37,\n-        37, 37, 37, 61, 62, 63, 37, 40,\n-        37, 37, 37, 37, 37, 37, 37, 37,\n-        37, 37, 37, 45, 37, 37, 37, 37,\n-        37, 37, 37, 37, 37, 37, 37, 37,\n-        37, 37, 37, 37, 37, 37, 61, 62,\n-        63, 37, 40, 37, 37, 37, 37, 37,\n-        37, 37, 37, 37, 37, 37, 37, 37,\n-        37, 37, 37, 37, 37, 37, 37, 37,\n-        37, 37, 37, 37, 37, 37, 37, 37,\n-        37, 61, 62, 37, 40, 37, 37, 37,\n-        37, 37, 37, 37, 37, 37, 37, 37,\n-        37, 37, 37, 37, 37, 37, 37, 37,\n-        37, 37, 37, 37, 37, 37, 37, 37,\n-        37, 37, 37, 37, 62, 37, 40, 37,\n-        40, 37, 37, 37, 37, 37, 37, 37,\n-        37, 37, 43, 44, 45, 37, 37, 37,\n-        37, 37, 37, 37, 37, 37, 37, 55,\n-        56, 57, 37, 37, 37, 37, 37, 61,\n-        62, 63, 65, 37, 40, 37, 37, 37,\n-        37, 37, 37, 37, 37, 37, 43, 44,\n-        45, 37, 37, 37, 37, 37, 37, 37,\n-        37, 37, 37, 37, 56, 57, 37, 37,\n-        37, 37, 37, 61, 62, 63, 65, 37,\n-        40, 37, 37, 37, 37, 37, 37, 37,\n-        37, 37, 43, 44, 45, 37, 37, 37,\n-        37, 37, 37, 37, 37, 37, 37, 37,\n-        37, 57, 37, 37, 37, 37, 37, 61,\n-        62, 63, 65, 37, 66, 37, 37, 37,\n-        37, 37, 37, 37, 37, 37, 37, 37,\n-        37, 40, 37, 40, 37, 37, 37, 37,\n-        37, 37, 37, 37, 37, 43, 44, 45,\n-        37, 37, 37, 37, 37, 37, 37, 37,\n-        37, 37, 37, 37, 37, 37, 37, 37,\n-        37, 37, 61, 62, 63, 65, 37, 40,\n-        37, 37, 37, 37, 37, 37, 37, 41,\n-        42, 43, 44, 45, 37, 37, 37, 37,\n-        37, 37, 52, 53, 54, 37, 55, 56,\n-        57, 37, 37, 37, 37, 37, 61, 62,\n-        63, 65, 37, 37, 37, 37, 42, 37,\n-        40, 37, 37, 37, 37, 37, 37, 37,\n-        37, 42, 43, 44, 45, 37, 37, 37,\n-        37, 37, 37, 52, 53, 54, 37, 55,\n-        56, 57, 37, 37, 37, 37, 37, 61,\n-        62, 63, 65, 37, 37, 37, 37, 42,\n-        37, 40, 37, 37, 37, 37, 37, 37,\n-        37, 37, 42, 43, 44, 45, 37, 37,\n-        37, 37, 37, 37, 37, 53, 54, 37,\n-        55, 56, 57, 37, 37, 37, 37, 37,\n-        61, 62, 63, 65, 37, 37, 37, 37,\n-        42, 37, 40, 37, 37, 37, 37, 37,\n-        37, 37, 37, 42, 43, 44, 45, 37,\n-        37, 37, 37, 37, 37, 37, 37, 54,\n-        37, 55, 56, 57, 37, 37, 37, 37,\n-        37, 61, 62, 63, 65, 37, 37, 37,\n-        37, 42, 37, 67, 37, 40, 37, 37,\n-        37, 37, 37, 37, 37, 41, 42, 43,\n-        44, 45, 37, 47, 48, 37, 37, 37,\n-        52, 53, 54, 37, 55, 56, 57, 37,\n-        37, 37, 37, 37, 61, 62, 63, 65,\n-        37, 37, 37, 37, 42, 37, 40, 37,\n-        37, 37, 37, 37, 37, 37, 37, 42,\n-        43, 44, 45, 37, 37, 37, 37, 37,\n-        37, 37, 37, 37, 37, 55, 56, 57,\n-        37, 37, 37, 37, 37, 61, 62, 63,\n-        65, 37, 37, 37, 37, 42, 37, 67,\n-        37, 40, 37, 37, 37, 37, 37, 37,\n-        37, 41, 42, 43, 44, 45, 37, 37,\n-        48, 37, 37, 37, 52, 53, 54, 37,\n-        55, 56, 57, 37, 37, 37, 37, 37,\n-        61, 62, 63, 65, 37, 37, 37, 37,\n-        42, 37, 67, 37, 40, 37, 37, 37,\n-        37, 37, 37, 37, 41, 42, 43, 44,\n-        45, 37, 37, 37, 37, 37, 37, 52,\n-        53, 54, 37, 55, 56, 57, 37, 37,\n-        37, 37, 37, 61, 62, 63, 65, 37,\n-        37, 37, 37, 42, 37, 67, 37, 40,\n-        37, 37, 37, 37, 37, 37, 37, 41,\n-        42, 43, 44, 45, 46, 47, 48, 37,\n-        37, 37, 52, 53, 54, 37, 55, 56,\n-        57, 37, 37, 37, 37, 37, 61, 62,\n-        63, 65, 37, 37, 37, 37, 42, 37,\n-        38, 39, 37, 40, 37, 37, 37, 37,\n-        37, 37, 37, 41, 42, 43, 44, 45,\n-        46, 47, 48, 49, 37, 51, 52, 53,\n-        54, 37, 55, 56, 57, 37, 37, 37,\n-        37, 60, 61, 62, 63, 60, 37, 37,\n-        37, 37, 64, 37, 38, 37, 37, 37,\n-        37, 37, 37, 37, 37, 37, 37, 37,\n-        37, 40, 37, 38, 37, 37, 37, 37,\n-        37, 37, 37, 37, 37, 37, 37, 37,\n-        40, 37, 37, 37, 37, 37, 37, 37,\n-        37, 42, 43, 44, 45, 37, 37, 37,\n-        37, 37, 37, 37, 37, 37, 37, 55,\n-        56, 57, 37, 37, 37, 37, 37, 61,\n-        62, 63, 65, 37, 38, 39, 37, 40,\n-        37, 37, 37, 37, 37, 37, 37, 41,\n-        42, 43, 44, 45, 46, 47, 48, 49,\n-        50, 51, 52, 53, 54, 37, 55, 56,\n-        57, 37, 37, 37, 37, 60, 61, 62,\n-        63, 60, 37, 37, 37, 37, 64, 37,\n-        40, 37, 37, 37, 37, 37, 37, 37,\n-        37, 37, 37, 37, 37, 37, 37, 37,\n-        37, 37, 37, 37, 37, 37, 37, 37,\n-        37, 37, 37, 58, 59, 37, 40, 37,\n-        37, 37, 37, 37, 37, 37, 37, 37,\n-        37, 37, 37, 37, 37, 37, 37, 37,\n-        37, 37, 37, 37, 37, 37, 37, 37,\n-        37, 37, 59, 37, 69, 70, 68, 71,\n+        1, 0, 2, 0, 3, 4, 5, 5,\n+        6, 7, 5, 5, 5, 5, 5, 8,\n+        9, 10, 11, 5, 5, 5, 12, 5,\n+        5, 5, 13, 14, 15, 16, 17, 18,\n+        19, 20, 21, 8, 22, 23, 24, 25,\n+        5, 26, 27, 28, 5, 29, 30, 31,\n+        32, 33, 34, 35, 32, 1, 5, 36,\n+        5, 37, 5, 39, 40, 38, 41, 38,\n+        38, 38, 38, 38, 38, 38, 42, 43,\n+        44, 45, 46, 47, 48, 49, 50, 39,\n+        51, 52, 53, 54, 38, 55, 56, 57,\n+        38, 58, 59, 38, 60, 61, 62, 63,\n+        60, 38, 38, 38, 38, 64, 38, 39,\n+        40, 38, 41, 38, 38, 38, 38, 38,\n+        38, 38, 42, 43, 44, 45, 46, 47,\n+        48, 49, 50, 39, 51, 52, 53, 54,\n+        38, 55, 56, 57, 38, 38, 38, 38,\n+        60, 61, 62, 63, 60, 38, 38, 38,\n+        38, 64, 38, 39, 38, 38, 38, 38,\n+        38, 38, 38, 38, 38, 38, 38, 38,\n+        41, 38, 38, 38, 38, 38, 38, 38,\n+        38, 43, 44, 45, 46, 38, 38, 38,\n+        38, 38, 38, 38, 38, 38, 38, 55,\n+        56, 57, 38, 38, 38, 38, 38, 61,\n+        62, 63, 65, 38, 38, 38, 38, 43,\n+        38, 41, 38, 38, 38, 38, 38, 38,\n+        38, 38, 43, 44, 45, 46, 38, 38,\n+        38, 38, 38, 38, 38, 38, 38, 38,\n+        55, 56, 57, 38, 38, 38, 38, 38,\n+        61, 62, 63, 65, 38, 41, 38, 38,\n+        38, 38, 38, 38, 38, 38, 38, 44,\n+        45, 46, 38, 38, 38, 38, 38, 38,\n+        38, 38, 38, 38, 38, 38, 38, 38,\n+        38, 38, 38, 38, 61, 62, 63, 38,\n+        41, 38, 38, 38, 38, 38, 38, 38,\n+        38, 38, 38, 45, 46, 38, 38, 38,\n+        38, 38, 38, 38, 38, 38, 38, 38,\n+        38, 38, 38, 38, 38, 38, 38, 61,\n+        62, 63, 38, 41, 38, 38, 38, 38,\n+        38, 38, 38, 38, 38, 38, 38, 46,\n+        38, 38, 38, 38, 38, 38, 38, 38,\n+        38, 38, 38, 38, 38, 38, 38, 38,\n+        38, 38, 61, 62, 63, 38, 41, 38,\n+        38, 38, 38, 38, 38, 38, 38, 38,\n+        38, 38, 38, 38, 38, 38, 38, 38,\n+        38, 38, 38, 38, 38, 38, 38, 38,\n+        38, 38, 38, 38, 38, 61, 62, 38,\n+        41, 38, 38, 38, 38, 38, 38, 38,\n+        38, 38, 38, 38, 38, 38, 38, 38,\n+        38, 38, 38, 38, 38, 38, 38, 38,\n+        38, 38, 38, 38, 38, 38, 38, 38,\n+        62, 38, 41, 38, 41, 38, 38, 38,\n+        38, 38, 38, 38, 38, 38, 44, 45,\n+        46, 38, 38, 38, 38, 38, 38, 38,\n+        38, 38, 38, 55, 56, 57, 38, 38,\n+        38, 38, 38, 61, 62, 63, 65, 38,\n+        41, 38, 38, 38, 38, 38, 38, 38,\n+        38, 38, 44, 45, 46, 38, 38, 38,\n+        38, 38, 38, 38, 38, 38, 38, 38,\n+        56, 57, 38, 38, 38, 38, 38, 61,\n+        62, 63, 65, 38, 41, 38, 38, 38,\n+        38, 38, 38, 38, 38, 38, 44, 45,\n+        46, 38, 38, 38, 38, 38, 38, 38,\n+        38, 38, 38, 38, 38, 57, 38, 38,\n+        38, 38, 38, 61, 62, 63, 65, 38,\n+        66, 38, 38, 38, 38, 38, 38, 38,\n+        38, 38, 38, 38, 38, 41, 38, 41,\n+        38, 38, 38, 38, 38, 38, 38, 38,\n+        38, 44, 45, 46, 38, 38, 38, 38,\n+        38, 38, 38, 38, 38, 38, 38, 38,\n+        38, 38, 38, 38, 38, 38, 61, 62,\n+        63, 65, 38, 41, 38, 38, 38, 38,\n+        38, 38, 38, 42, 43, 44, 45, 46,\n+        38, 38, 38, 38, 38, 38, 52, 53,\n+        54, 38, 55, 56, 57, 38, 38, 38,\n+        38, 38, 61, 62, 63, 65, 38, 38,\n+        38, 38, 43, 38, 41, 38, 38, 38,\n+        38, 38, 38, 38, 38, 43, 44, 45,\n+        46, 38, 38, 38, 38, 38, 38, 52,\n+        53, 54, 38, 55, 56, 57, 38, 38,\n+        38, 38, 38, 61, 62, 63, 65, 38,\n+        38, 38, 38, 43, 38, 41, 38, 38,\n+        38, 38, 38, 38, 38, 38, 43, 44,\n+        45, 46, 38, 38, 38, 38, 38, 38,\n+        38, 53, 54, 38, 55, 56, 57, 38,\n+        38, 38, 38, 38, 61, 62, 63, 65,\n+        38, 38, 38, 38, 43, 38, 41, 38,\n+        38, 38, 38, 38, 38, 38, 38, 43,\n+        44, 45, 46, 38, 38, 38, 38, 38,\n+        38, 38, 38, 54, 38, 55, 56, 57,\n+        38, 38, 38, 38, 38, 61, 62, 63,\n+        65, 38, 38, 38, 38, 43, 38, 67,\n+        38, 41, 38, 38, 38, 38, 38, 38,\n+        38, 42, 43, 44, 45, 46, 38, 48,\n+        49, 38, 38, 38, 52, 53, 54, 38,\n+        55, 56, 57, 38, 38, 38, 38, 38,\n+        61, 62, 63, 65, 38, 38, 38, 38,\n+        43, 38, 41, 38, 38, 38, 38, 38,\n+        38, 38, 38, 43, 44, 45, 46, 38,\n+        38, 38, 38, 38, 38, 38, 38, 38,\n+        38, 55, 56, 57, 38, 38, 38, 38,\n+        38, 61, 62, 63, 65, 38, 38, 38,\n+        38, 43, 38, 67, 38, 41, 38, 38,\n+        38, 38, 38, 38, 38, 42, 43, 44,\n+        45, 46, 38, 38, 49, 38, 38, 38,\n+        52, 53, 54, 38, 55, 56, 57, 38,\n+        38, 38, 38, 38, 61, 62, 63, 65,\n+        38, 38, 38, 38, 43, 38, 67, 38,\n+        41, 38, 38, 38, 38, 38, 38, 38,\n+        42, 43, 44, 45, 46, 38, 38, 38,\n+        38, 38, 38, 52, 53, 54, 38, 55,\n+        56, 57, 38, 38, 38, 38, 38, 61,\n+        62, 63, 65, 38, 38, 38, 38, 43,\n+        38, 67, 38, 41, 38, 38, 38, 38,\n+        38, 38, 38, 42, 43, 44, 45, 46,\n+        47, 48, 49, 38, 38, 38, 52, 53,\n+        54, 38, 55, 56, 57, 38, 38, 38,\n+        38, 38, 61, 62, 63, 65, 38, 38,\n+        38, 38, 43, 38, 39, 40, 38, 41,\n+        38, 38, 38, 38, 38, 38, 38, 42,\n+        43, 44, 45, 46, 47, 48, 49, 50,\n+        38, 51, 52, 53, 54, 38, 55, 56,\n+        57, 38, 38, 38, 38, 60, 61, 62,\n+        63, 60, 38, 38, 38, 38, 64, 38,\n+        39, 38, 38, 38, 38, 38, 38, 38,\n+        38, 38, 38, 38, 38, 41, 38, 39,\n+        38, 38, 38, 38, 38, 38, 38, 38,\n+        38, 38, 38, 38, 41, 38, 38, 38,\n+        38, 38, 38, 38, 38, 43, 44, 45,\n+        46, 38, 38, 38, 38, 38, 38, 38,\n+        38, 38, 38, 55, 56, 57, 38, 38,\n+        38, 38, 38, 61, 62, 63, 65, 38,\n+        41, 38, 38, 38, 38, 38, 38, 38,\n+        38, 38, 38, 38, 38, 38, 38, 38,\n+        38, 38, 38, 38, 38, 38, 38, 38,\n+        38, 38, 38, 58, 59, 38, 41, 38,\n+        38, 38, 38, 38, 38, 38, 38, 38,\n+        38, 38, 38, 38, 38, 38, 38, 38,\n+        38, 38, 38, 38, 38, 38, 38, 38,\n+        38, 38, 59, 38, 4, 69, 68, 70,\n+        68, 68, 68, 68, 68, 68, 68, 71,\n+        72, 73, 74, 75, 76, 77, 78, 79,\n+        4, 80, 81, 82, 83, 68, 84, 85,\n+        86, 68, 68, 68, 68, 87, 88, 89,\n+        90, 91, 68, 68, 68, 68, 92, 68,\n+        4, 68, 68, 68, 68, 68, 68, 68,\n+        68, 68, 68, 68, 68, 70, 68, 68,\n+        68, 68, 68, 68, 68, 68, 72, 73,\n+        74, 75, 68, 68, 68, 68, 68, 68,\n+        68, 68, 68, 68, 84, 85, 86, 68,\n+        68, 68, 68, 68, 88, 89, 90, 93,\n+        68, 68, 68, 68, 72, 68, 70, 68,\n@@ -305,21 +314,5 @@\n-        73, 74, 75, 76, 77, 78, 79, 80,\n-        1, 81, 82, 83, 84, 68, 85, 86,\n-        87, 68, 68, 68, 68, 88, 89, 90,\n-        91, 92, 68, 68, 68, 68, 93, 68,\n-        69, 70, 68, 71, 68, 68, 68, 68,\n-        68, 68, 68, 72, 73, 74, 75, 76,\n-        77, 78, 79, 80, 81, 81, 82, 83,\n-        84, 68, 85, 86, 87, 68, 68, 68,\n-        68, 88, 89, 90, 91, 92, 68, 68,\n-        68, 68, 93, 68, 69, 68, 68, 68,\n-        68, 68, 68, 68, 68, 68, 68, 68,\n-        68, 71, 68, 68, 68, 68, 68, 68,\n-        68, 68, 73, 74, 75, 76, 68, 68,\n-        68, 68, 68, 68, 68, 68, 68, 68,\n-        85, 86, 87, 68, 68, 68, 68, 68,\n-        89, 90, 91, 94, 68, 68, 68, 68,\n-        73, 68, 71, 68, 68, 68, 68, 68,\n-        68, 68, 68, 73, 74, 75, 76, 68,\n-        68, 68, 68, 68, 68, 68, 68, 68,\n-        68, 85, 86, 87, 68, 68, 68, 68,\n-        68, 89, 90, 91, 94, 68, 71, 68,\n+        73, 74, 75, 68, 68, 68, 68, 68,\n+        68, 68, 68, 68, 68, 84, 85, 86,\n+        68, 68, 68, 68, 68, 88, 89, 90,\n+        93, 68, 70, 68, 68, 68, 68, 68,\n+        68, 68, 68, 68, 73, 74, 75, 68,\n@@ -327,1 +320,0 @@\n-        74, 75, 76, 68, 68, 68, 68, 68,\n@@ -329,3 +321,1 @@\n-        68, 68, 68, 68, 68, 89, 90, 91,\n-        68, 71, 68, 68, 68, 68, 68, 68,\n-        68, 68, 68, 68, 75, 76, 68, 68,\n+        68, 88, 89, 90, 68, 70, 68, 68,\n@@ -333,0 +323,1 @@\n+        74, 75, 68, 68, 68, 68, 68, 68,\n@@ -334,1 +325,3 @@\n-        89, 90, 91, 68, 71, 68, 68, 68,\n+        68, 68, 68, 68, 88, 89, 90, 68,\n+        70, 68, 68, 68, 68, 68, 68, 68,\n+        68, 68, 68, 68, 75, 68, 68, 68,\n@@ -336,1 +329,2 @@\n-        76, 68, 68, 68, 68, 68, 68, 68,\n+        68, 68, 68, 68, 68, 68, 68, 88,\n+        89, 90, 68, 70, 68, 68, 68, 68,\n@@ -338,1 +332,0 @@\n-        68, 68, 68, 89, 90, 91, 68, 71,\n@@ -341,0 +334,1 @@\n+        68, 68, 88, 89, 68, 70, 68, 68,\n@@ -342,2 +336,0 @@\n-        68, 68, 68, 68, 68, 68, 89, 90,\n-        68, 71, 68, 68, 68, 68, 68, 68,\n@@ -346,0 +338,3 @@\n+        68, 68, 68, 68, 68, 89, 68, 70,\n+        68, 70, 68, 68, 68, 68, 68, 68,\n+        68, 68, 68, 73, 74, 75, 68, 68,\n@@ -347,7 +342,8 @@\n-        68, 90, 68, 71, 68, 71, 68, 68,\n-        68, 68, 68, 68, 68, 68, 68, 74,\n-        75, 76, 68, 68, 68, 68, 68, 68,\n-        68, 68, 68, 68, 85, 86, 87, 68,\n-        68, 68, 68, 68, 89, 90, 91, 94,\n-        68, 71, 68, 68, 68, 68, 68, 68,\n-        68, 68, 68, 74, 75, 76, 68, 68,\n+        84, 85, 86, 68, 68, 68, 68, 68,\n+        88, 89, 90, 93, 68, 70, 68, 68,\n+        68, 68, 68, 68, 68, 68, 68, 73,\n+        74, 75, 68, 68, 68, 68, 68, 68,\n+        68, 68, 68, 68, 68, 85, 86, 68,\n+        68, 68, 68, 68, 88, 89, 90, 93,\n+        68, 70, 68, 68, 68, 68, 68, 68,\n+        68, 68, 68, 73, 74, 75, 68, 68,\n@@ -355,10 +351,6 @@\n-        68, 86, 87, 68, 68, 68, 68, 68,\n-        89, 90, 91, 94, 68, 71, 68, 68,\n-        68, 68, 68, 68, 68, 68, 68, 74,\n-        75, 76, 68, 68, 68, 68, 68, 68,\n-        68, 68, 68, 68, 68, 68, 87, 68,\n-        68, 68, 68, 68, 89, 90, 91, 94,\n-        68, 96, 95, 95, 95, 95, 95, 95,\n-        95, 95, 95, 95, 95, 95, 97, 95,\n-        71, 68, 68, 68, 68, 68, 68, 68,\n-        68, 68, 74, 75, 76, 68, 68, 68,\n+        68, 68, 86, 68, 68, 68, 68, 68,\n+        88, 89, 90, 93, 68, 95, 94, 94,\n+        94, 94, 94, 94, 94, 94, 94, 94,\n+        94, 94, 96, 94, 70, 68, 68, 68,\n+        68, 68, 68, 68, 68, 68, 73, 74,\n+        75, 68, 68, 68, 68, 68, 68, 68,\n@@ -366,2 +358,17 @@\n-        68, 68, 68, 68, 68, 68, 68, 89,\n-        90, 91, 94, 68, 71, 68, 68, 68,\n+        68, 68, 68, 88, 89, 90, 93, 68,\n+        70, 68, 68, 68, 68, 68, 68, 68,\n+        71, 72, 73, 74, 75, 68, 68, 68,\n+        68, 68, 68, 81, 82, 83, 68, 84,\n+        85, 86, 68, 68, 68, 68, 68, 88,\n+        89, 90, 93, 68, 68, 68, 68, 72,\n+        68, 70, 68, 68, 68, 68, 68, 68,\n+        68, 68, 72, 73, 74, 75, 68, 68,\n+        68, 68, 68, 68, 81, 82, 83, 68,\n+        84, 85, 86, 68, 68, 68, 68, 68,\n+        88, 89, 90, 93, 68, 68, 68, 68,\n+        72, 68, 70, 68, 68, 68, 68, 68,\n+        68, 68, 68, 72, 73, 74, 75, 68,\n+        68, 68, 68, 68, 68, 68, 82, 83,\n+        68, 84, 85, 86, 68, 68, 68, 68,\n+        68, 88, 89, 90, 93, 68, 68, 68,\n+        68, 72, 68, 70, 68, 68, 68, 68,\n@@ -369,14 +376,0 @@\n-        76, 68, 68, 68, 68, 68, 68, 82,\n-        83, 84, 68, 85, 86, 87, 68, 68,\n-        68, 68, 68, 89, 90, 91, 94, 68,\n-        68, 68, 68, 73, 68, 71, 68, 68,\n-        68, 68, 68, 68, 68, 68, 73, 74,\n-        75, 76, 68, 68, 68, 68, 68, 68,\n-        82, 83, 84, 68, 85, 86, 87, 68,\n-        68, 68, 68, 68, 89, 90, 91, 94,\n-        68, 68, 68, 68, 73, 68, 71, 68,\n-        68, 68, 68, 68, 68, 68, 68, 73,\n-        74, 75, 76, 68, 68, 68, 68, 68,\n-        68, 68, 83, 84, 68, 85, 86, 87,\n-        68, 68, 68, 68, 68, 89, 90, 91,\n-        94, 68, 68, 68, 68, 73, 68, 71,\n@@ -384,11 +377,8 @@\n-        73, 74, 75, 76, 68, 68, 68, 68,\n-        68, 68, 68, 68, 84, 68, 85, 86,\n-        87, 68, 68, 68, 68, 68, 89, 90,\n-        91, 94, 68, 68, 68, 68, 73, 68,\n-        98, 68, 71, 68, 68, 68, 68, 68,\n-        68, 68, 72, 73, 74, 75, 76, 68,\n-        78, 79, 68, 68, 68, 82, 83, 84,\n-        68, 85, 86, 87, 68, 68, 68, 68,\n-        68, 89, 90, 91, 94, 68, 68, 68,\n-        68, 73, 68, 71, 68, 68, 68, 68,\n-        68, 68, 68, 68, 73, 74, 75, 76,\n+        83, 68, 84, 85, 86, 68, 68, 68,\n+        68, 68, 88, 89, 90, 93, 68, 68,\n+        68, 68, 72, 68, 97, 68, 70, 68,\n+        68, 68, 68, 68, 68, 68, 71, 72,\n+        73, 74, 75, 68, 77, 78, 68, 68,\n+        68, 81, 82, 83, 68, 84, 85, 86,\n+        68, 68, 68, 68, 68, 88, 89, 90,\n+        93, 68, 68, 68, 68, 72, 68, 70,\n@@ -396,28 +386,30 @@\n-        68, 68, 85, 86, 87, 68, 68, 68,\n-        68, 68, 89, 90, 91, 94, 68, 68,\n-        68, 68, 73, 68, 98, 68, 71, 68,\n-        68, 68, 68, 68, 68, 68, 72, 73,\n-        74, 75, 76, 68, 68, 79, 68, 68,\n-        68, 82, 83, 84, 68, 85, 86, 87,\n-        68, 68, 68, 68, 68, 89, 90, 91,\n-        94, 68, 68, 68, 68, 73, 68, 98,\n-        68, 71, 68, 68, 68, 68, 68, 68,\n-        68, 72, 73, 74, 75, 76, 68, 68,\n-        68, 68, 68, 68, 82, 83, 84, 68,\n-        85, 86, 87, 68, 68, 68, 68, 68,\n-        89, 90, 91, 94, 68, 68, 68, 68,\n-        73, 68, 98, 68, 71, 68, 68, 68,\n-        68, 68, 68, 68, 72, 73, 74, 75,\n-        76, 77, 78, 79, 68, 68, 68, 82,\n-        83, 84, 68, 85, 86, 87, 68, 68,\n-        68, 68, 68, 89, 90, 91, 94, 68,\n-        68, 68, 68, 73, 68, 69, 70, 68,\n-        71, 68, 68, 68, 68, 68, 68, 68,\n-        72, 73, 74, 75, 76, 77, 78, 79,\n-        80, 68, 81, 82, 83, 84, 68, 85,\n-        86, 87, 68, 68, 68, 68, 88, 89,\n-        90, 91, 92, 68, 68, 68, 68, 93,\n-        68, 69, 99, 99, 99, 99, 99, 99,\n-        99, 99, 99, 99, 99, 99, 100, 99,\n-        69, 95, 95, 95, 95, 95, 95, 95,\n-        95, 95, 95, 95, 95, 97, 95, 69,\n+        72, 73, 74, 75, 68, 68, 68, 68,\n+        68, 68, 68, 68, 68, 68, 84, 85,\n+        86, 68, 68, 68, 68, 68, 88, 89,\n+        90, 93, 68, 68, 68, 68, 72, 68,\n+        97, 68, 70, 68, 68, 68, 68, 68,\n+        68, 68, 71, 72, 73, 74, 75, 68,\n+        68, 78, 68, 68, 68, 81, 82, 83,\n+        68, 84, 85, 86, 68, 68, 68, 68,\n+        68, 88, 89, 90, 93, 68, 68, 68,\n+        68, 72, 68, 97, 68, 70, 68, 68,\n+        68, 68, 68, 68, 68, 71, 72, 73,\n+        74, 75, 68, 68, 68, 68, 68, 68,\n+        81, 82, 83, 68, 84, 85, 86, 68,\n+        68, 68, 68, 68, 88, 89, 90, 93,\n+        68, 68, 68, 68, 72, 68, 97, 68,\n+        70, 68, 68, 68, 68, 68, 68, 68,\n+        71, 72, 73, 74, 75, 76, 77, 78,\n+        68, 68, 68, 81, 82, 83, 68, 84,\n+        85, 86, 68, 68, 68, 68, 68, 88,\n+        89, 90, 93, 68, 68, 68, 68, 72,\n+        68, 4, 69, 68, 70, 68, 68, 68,\n+        68, 68, 68, 68, 71, 72, 73, 74,\n+        75, 76, 77, 78, 79, 68, 80, 81,\n+        82, 83, 68, 84, 85, 86, 68, 68,\n+        68, 68, 87, 88, 89, 90, 91, 68,\n+        68, 68, 68, 92, 68, 4, 98, 98,\n+        98, 98, 98, 98, 98, 98, 98, 98,\n+        98, 98, 99, 98, 4, 94, 94, 94,\n+        94, 94, 94, 94, 94, 94, 94, 94,\n+        94, 96, 94, 4, 68, 68, 68, 68,\n@@ -425,18 +417,18 @@\n-        68, 68, 68, 68, 71, 68, 68, 68,\n-        68, 68, 68, 68, 68, 73, 74, 75,\n-        76, 68, 68, 68, 68, 68, 68, 68,\n-        68, 68, 68, 85, 86, 87, 68, 68,\n-        68, 68, 68, 89, 90, 91, 94, 68,\n-        102, 103, 101, 3, 104, 104, 104, 104,\n-        104, 104, 104, 104, 104, 105, 104, 106,\n-        107, 68, 71, 68, 68, 68, 68, 68,\n-        68, 68, 108, 109, 110, 111, 112, 113,\n-        114, 115, 116, 117, 118, 119, 120, 121,\n-        68, 122, 123, 124, 68, 58, 59, 68,\n-        125, 126, 127, 128, 129, 68, 68, 68,\n-        68, 130, 68, 106, 107, 68, 71, 68,\n-        68, 68, 68, 68, 68, 68, 108, 109,\n-        110, 111, 112, 113, 114, 115, 116, 118,\n-        118, 119, 120, 121, 68, 122, 123, 124,\n-        68, 68, 68, 68, 125, 126, 127, 128,\n-        129, 68, 68, 68, 68, 130, 68, 106,\n+        70, 68, 68, 68, 68, 68, 68, 68,\n+        68, 72, 73, 74, 75, 68, 68, 68,\n+        68, 68, 68, 68, 68, 68, 68, 84,\n+        85, 86, 68, 68, 68, 68, 68, 88,\n+        89, 90, 93, 68, 101, 102, 100, 6,\n+        103, 103, 103, 103, 103, 103, 103, 103,\n+        103, 104, 103, 105, 106, 68, 70, 68,\n+        68, 68, 68, 68, 68, 68, 107, 108,\n+        109, 110, 111, 112, 113, 114, 115, 105,\n+        116, 117, 118, 119, 68, 120, 121, 122,\n+        68, 58, 59, 68, 123, 124, 125, 126,\n+        127, 68, 68, 68, 68, 128, 68, 105,\n+        106, 68, 70, 68, 68, 68, 68, 68,\n+        68, 68, 107, 108, 109, 110, 111, 112,\n+        113, 114, 115, 105, 116, 117, 118, 119,\n+        68, 120, 121, 122, 68, 68, 68, 68,\n+        123, 124, 125, 126, 127, 68, 68, 68,\n+        68, 128, 68, 105, 68, 68, 68, 68,\n@@ -444,12 +436,12 @@\n-        68, 68, 68, 68, 71, 68, 68, 68,\n-        68, 68, 68, 68, 68, 109, 110, 111,\n-        112, 68, 68, 68, 68, 68, 68, 68,\n-        68, 68, 68, 122, 123, 124, 68, 68,\n-        68, 68, 68, 126, 127, 128, 131, 68,\n-        68, 68, 68, 109, 68, 71, 68, 68,\n-        68, 68, 68, 68, 68, 68, 109, 110,\n-        111, 112, 68, 68, 68, 68, 68, 68,\n-        68, 68, 68, 68, 122, 123, 124, 68,\n-        68, 68, 68, 68, 126, 127, 128, 131,\n-        68, 71, 68, 68, 68, 68, 68, 68,\n-        68, 68, 68, 110, 111, 112, 68, 68,\n+        70, 68, 68, 68, 68, 68, 68, 68,\n+        68, 108, 109, 110, 111, 68, 68, 68,\n+        68, 68, 68, 68, 68, 68, 68, 120,\n+        121, 122, 68, 68, 68, 68, 68, 124,\n+        125, 126, 129, 68, 68, 68, 68, 108,\n+        68, 70, 68, 68, 68, 68, 68, 68,\n+        68, 68, 108, 109, 110, 111, 68, 68,\n+        68, 68, 68, 68, 68, 68, 68, 68,\n+        120, 121, 122, 68, 68, 68, 68, 68,\n+        124, 125, 126, 129, 68, 70, 68, 68,\n+        68, 68, 68, 68, 68, 68, 68, 109,\n+        110, 111, 68, 68, 68, 68, 68, 68,\n@@ -457,0 +449,3 @@\n+        68, 68, 68, 68, 124, 125, 126, 68,\n+        70, 68, 68, 68, 68, 68, 68, 68,\n+        68, 68, 68, 110, 111, 68, 68, 68,\n@@ -458,1 +453,2 @@\n-        126, 127, 128, 68, 71, 68, 68, 68,\n+        68, 68, 68, 68, 68, 68, 68, 124,\n+        125, 126, 68, 70, 68, 68, 68, 68,\n@@ -460,3 +456,0 @@\n-        112, 68, 68, 68, 68, 68, 68, 68,\n-        68, 68, 68, 68, 68, 68, 68, 68,\n-        68, 68, 68, 126, 127, 128, 68, 71,\n@@ -464,1 +457,0 @@\n-        68, 68, 68, 112, 68, 68, 68, 68,\n@@ -466,2 +458,1 @@\n-        68, 68, 68, 68, 68, 68, 126, 127,\n-        128, 68, 71, 68, 68, 68, 68, 68,\n+        68, 68, 124, 125, 126, 68, 70, 68,\n@@ -471,1 +462,2 @@\n-        68, 126, 127, 68, 71, 68, 68, 68,\n+        68, 68, 68, 68, 68, 124, 125, 68,\n+        70, 68, 68, 68, 68, 68, 68, 68,\n@@ -475,12 +467,7 @@\n-        68, 68, 68, 68, 127, 68, 71, 68,\n-        71, 68, 68, 68, 68, 68, 68, 68,\n-        68, 68, 110, 111, 112, 68, 68, 68,\n-        68, 68, 68, 68, 68, 68, 68, 122,\n-        123, 124, 68, 68, 68, 68, 68, 126,\n-        127, 128, 131, 68, 71, 68, 68, 68,\n-        68, 68, 68, 68, 68, 68, 110, 111,\n-        112, 68, 68, 68, 68, 68, 68, 68,\n-        68, 68, 68, 68, 123, 124, 68, 68,\n-        68, 68, 68, 126, 127, 128, 131, 68,\n-        71, 68, 68, 68, 68, 68, 68, 68,\n-        68, 68, 110, 111, 112, 68, 68, 68,\n+        125, 68, 70, 68, 70, 68, 68, 68,\n+        68, 68, 68, 68, 68, 68, 109, 110,\n+        111, 68, 68, 68, 68, 68, 68, 68,\n+        68, 68, 68, 120, 121, 122, 68, 68,\n+        68, 68, 68, 124, 125, 126, 129, 68,\n+        70, 68, 68, 68, 68, 68, 68, 68,\n+        68, 68, 109, 110, 111, 68, 68, 68,\n@@ -488,5 +475,8 @@\n-        68, 124, 68, 68, 68, 68, 68, 126,\n-        127, 128, 131, 68, 132, 95, 95, 95,\n-        95, 95, 95, 95, 95, 95, 95, 95,\n-        95, 97, 95, 71, 68, 68, 68, 68,\n-        68, 68, 68, 68, 68, 110, 111, 112,\n+        121, 122, 68, 68, 68, 68, 68, 124,\n+        125, 126, 129, 68, 70, 68, 68, 68,\n+        68, 68, 68, 68, 68, 68, 109, 110,\n+        111, 68, 68, 68, 68, 68, 68, 68,\n+        68, 68, 68, 68, 68, 122, 68, 68,\n+        68, 68, 68, 124, 125, 126, 129, 68,\n+        130, 94, 94, 94, 94, 94, 94, 94,\n+        94, 94, 94, 94, 94, 96, 94, 70,\n@@ -494,0 +484,1 @@\n+        68, 109, 110, 111, 68, 68, 68, 68,\n@@ -495,22 +486,7 @@\n-        68, 68, 126, 127, 128, 131, 68, 71,\n-        68, 68, 68, 68, 68, 68, 68, 108,\n-        109, 110, 111, 112, 68, 68, 68, 68,\n-        68, 68, 119, 120, 121, 68, 122, 123,\n-        124, 68, 68, 68, 68, 68, 126, 127,\n-        128, 131, 68, 68, 68, 68, 109, 68,\n-        71, 68, 68, 68, 68, 68, 68, 68,\n-        68, 109, 110, 111, 112, 68, 68, 68,\n-        68, 68, 68, 119, 120, 121, 68, 122,\n-        123, 124, 68, 68, 68, 68, 68, 126,\n-        127, 128, 131, 68, 68, 68, 68, 109,\n-        68, 71, 68, 68, 68, 68, 68, 68,\n-        68, 68, 109, 110, 111, 112, 68, 68,\n-        68, 68, 68, 68, 68, 120, 121, 68,\n-        122, 123, 124, 68, 68, 68, 68, 68,\n-        126, 127, 128, 131, 68, 68, 68, 68,\n-        109, 68, 71, 68, 68, 68, 68, 68,\n-        68, 68, 68, 109, 110, 111, 112, 68,\n-        68, 68, 68, 68, 68, 68, 68, 121,\n-        68, 122, 123, 124, 68, 68, 68, 68,\n-        68, 126, 127, 128, 131, 68, 68, 68,\n-        68, 109, 68, 133, 68, 71, 68, 68,\n+        68, 68, 68, 68, 68, 68, 124, 125,\n+        126, 129, 68, 70, 68, 68, 68, 68,\n+        68, 68, 68, 107, 108, 109, 110, 111,\n+        68, 68, 68, 68, 68, 68, 117, 118,\n+        119, 68, 120, 121, 122, 68, 68, 68,\n+        68, 68, 124, 125, 126, 129, 68, 68,\n+        68, 68, 108, 68, 70, 68, 68, 68,\n@@ -518,20 +494,9 @@\n-        111, 112, 68, 114, 115, 68, 68, 68,\n-        119, 120, 121, 68, 122, 123, 124, 68,\n-        68, 68, 68, 68, 126, 127, 128, 131,\n-        68, 68, 68, 68, 109, 68, 71, 68,\n-        68, 68, 68, 68, 68, 68, 68, 109,\n-        110, 111, 112, 68, 68, 68, 68, 68,\n-        68, 68, 68, 68, 68, 122, 123, 124,\n-        68, 68, 68, 68, 68, 126, 127, 128,\n-        131, 68, 68, 68, 68, 109, 68, 133,\n-        68, 71, 68, 68, 68, 68, 68, 68,\n-        68, 108, 109, 110, 111, 112, 68, 68,\n-        115, 68, 68, 68, 119, 120, 121, 68,\n-        122, 123, 124, 68, 68, 68, 68, 68,\n-        126, 127, 128, 131, 68, 68, 68, 68,\n-        109, 68, 133, 68, 71, 68, 68, 68,\n-        68, 68, 68, 68, 108, 109, 110, 111,\n-        112, 68, 68, 68, 68, 68, 68, 119,\n-        120, 121, 68, 122, 123, 124, 68, 68,\n-        68, 68, 68, 126, 127, 128, 131, 68,\n-        68, 68, 68, 109, 68, 133, 68, 71,\n+        111, 68, 68, 68, 68, 68, 68, 117,\n+        118, 119, 68, 120, 121, 122, 68, 68,\n+        68, 68, 68, 124, 125, 126, 129, 68,\n+        68, 68, 68, 108, 68, 70, 68, 68,\n+        68, 68, 68, 68, 68, 68, 108, 109,\n+        110, 111, 68, 68, 68, 68, 68, 68,\n+        68, 118, 119, 68, 120, 121, 122, 68,\n+        68, 68, 68, 68, 124, 125, 126, 129,\n+        68, 68, 68, 68, 108, 68, 70, 68,\n@@ -539,15 +504,11 @@\n-        109, 110, 111, 112, 113, 114, 115, 68,\n-        68, 68, 119, 120, 121, 68, 122, 123,\n-        124, 68, 68, 68, 68, 68, 126, 127,\n-        128, 131, 68, 68, 68, 68, 109, 68,\n-        106, 107, 68, 71, 68, 68, 68, 68,\n-        68, 68, 68, 108, 109, 110, 111, 112,\n-        113, 114, 115, 116, 68, 118, 119, 120,\n-        121, 68, 122, 123, 124, 68, 68, 68,\n-        68, 125, 126, 127, 128, 129, 68, 68,\n-        68, 68, 130, 68, 106, 99, 99, 99,\n-        99, 99, 99, 99, 99, 99, 99, 99,\n-        99, 100, 99, 106, 95, 95, 95, 95,\n-        95, 95, 95, 95, 95, 95, 95, 95,\n-        97, 95, 106, 68, 68, 68, 68, 68,\n-        68, 68, 68, 68, 68, 68, 68, 71,\n+        109, 110, 111, 68, 68, 68, 68, 68,\n+        68, 68, 68, 119, 68, 120, 121, 122,\n+        68, 68, 68, 68, 68, 124, 125, 126,\n+        129, 68, 68, 68, 68, 108, 68, 131,\n+        68, 70, 68, 68, 68, 68, 68, 68,\n+        68, 107, 108, 109, 110, 111, 68, 113,\n+        114, 68, 68, 68, 117, 118, 119, 68,\n+        120, 121, 122, 68, 68, 68, 68, 68,\n+        124, 125, 126, 129, 68, 68, 68, 68,\n+        108, 68, 70, 68, 68, 68, 68, 68,\n+        68, 68, 68, 108, 109, 110, 111, 68,\n@@ -555,133 +516,141 @@\n-        109, 110, 111, 112, 68, 68, 68, 68,\n-        68, 68, 68, 68, 68, 68, 122, 123,\n-        124, 68, 68, 68, 68, 68, 126, 127,\n-        128, 131, 68, 106, 107, 68, 71, 68,\n-        68, 68, 68, 68, 68, 68, 108, 109,\n-        110, 111, 112, 113, 114, 115, 116, 117,\n-        118, 119, 120, 121, 68, 122, 123, 124,\n-        68, 68, 68, 68, 125, 126, 127, 128,\n-        129, 68, 68, 68, 68, 130, 68, 5,\n-        6, 134, 8, 134, 134, 134, 134, 134,\n-        134, 134, 10, 11, 12, 13, 14, 15,\n-        16, 17, 18, 20, 20, 21, 22, 23,\n-        134, 24, 25, 26, 134, 134, 134, 134,\n-        30, 31, 32, 33, 30, 134, 134, 134,\n-        134, 36, 134, 5, 134, 134, 134, 134,\n-        134, 134, 134, 134, 134, 134, 134, 134,\n-        8, 134, 134, 134, 134, 134, 134, 134,\n-        134, 11, 12, 13, 14, 134, 134, 134,\n-        134, 134, 134, 134, 134, 134, 134, 24,\n-        25, 26, 134, 134, 134, 134, 134, 31,\n-        32, 33, 135, 134, 134, 134, 134, 11,\n-        134, 8, 134, 134, 134, 134, 134, 134,\n-        134, 134, 11, 12, 13, 14, 134, 134,\n-        134, 134, 134, 134, 134, 134, 134, 134,\n-        24, 25, 26, 134, 134, 134, 134, 134,\n-        31, 32, 33, 135, 134, 8, 134, 134,\n-        134, 134, 134, 134, 134, 134, 134, 12,\n-        13, 14, 134, 134, 134, 134, 134, 134,\n-        134, 134, 134, 134, 134, 134, 134, 134,\n-        134, 134, 134, 134, 31, 32, 33, 134,\n-        8, 134, 134, 134, 134, 134, 134, 134,\n-        134, 134, 134, 13, 14, 134, 134, 134,\n-        134, 134, 134, 134, 134, 134, 134, 134,\n-        134, 134, 134, 134, 134, 134, 134, 31,\n-        32, 33, 134, 8, 134, 134, 134, 134,\n-        134, 134, 134, 134, 134, 134, 134, 14,\n-        134, 134, 134, 134, 134, 134, 134, 134,\n-        134, 134, 134, 134, 134, 134, 134, 134,\n-        134, 134, 31, 32, 33, 134, 8, 134,\n-        134, 134, 134, 134, 134, 134, 134, 134,\n-        134, 134, 134, 134, 134, 134, 134, 134,\n-        134, 134, 134, 134, 134, 134, 134, 134,\n-        134, 134, 134, 134, 134, 31, 32, 134,\n-        8, 134, 134, 134, 134, 134, 134, 134,\n-        134, 134, 134, 134, 134, 134, 134, 134,\n-        134, 134, 134, 134, 134, 134, 134, 134,\n-        134, 134, 134, 134, 134, 134, 134, 134,\n-        32, 134, 8, 134, 8, 134, 134, 134,\n-        134, 134, 134, 134, 134, 134, 12, 13,\n-        14, 134, 134, 134, 134, 134, 134, 134,\n-        134, 134, 134, 24, 25, 26, 134, 134,\n-        134, 134, 134, 31, 32, 33, 135, 134,\n-        8, 134, 134, 134, 134, 134, 134, 134,\n-        134, 134, 12, 13, 14, 134, 134, 134,\n-        134, 134, 134, 134, 134, 134, 134, 134,\n-        25, 26, 134, 134, 134, 134, 134, 31,\n-        32, 33, 135, 134, 8, 134, 134, 134,\n-        134, 134, 134, 134, 134, 134, 12, 13,\n-        14, 134, 134, 134, 134, 134, 134, 134,\n-        134, 134, 134, 134, 134, 26, 134, 134,\n-        134, 134, 134, 31, 32, 33, 135, 134,\n-        136, 134, 134, 134, 134, 134, 134, 134,\n-        134, 134, 134, 134, 134, 8, 134, 8,\n-        134, 134, 134, 134, 134, 134, 134, 134,\n-        134, 12, 13, 14, 134, 134, 134, 134,\n-        134, 134, 134, 134, 134, 134, 134, 134,\n-        134, 134, 134, 134, 134, 134, 31, 32,\n-        33, 135, 134, 8, 134, 134, 134, 134,\n-        134, 134, 134, 10, 11, 12, 13, 14,\n-        134, 134, 134, 134, 134, 134, 21, 22,\n-        23, 134, 24, 25, 26, 134, 134, 134,\n-        134, 134, 31, 32, 33, 135, 134, 134,\n-        134, 134, 11, 134, 8, 134, 134, 134,\n-        134, 134, 134, 134, 134, 11, 12, 13,\n-        14, 134, 134, 134, 134, 134, 134, 21,\n-        22, 23, 134, 24, 25, 26, 134, 134,\n-        134, 134, 134, 31, 32, 33, 135, 134,\n-        134, 134, 134, 11, 134, 8, 134, 134,\n-        134, 134, 134, 134, 134, 134, 11, 12,\n-        13, 14, 134, 134, 134, 134, 134, 134,\n-        134, 22, 23, 134, 24, 25, 26, 134,\n-        134, 134, 134, 134, 31, 32, 33, 135,\n-        134, 134, 134, 134, 11, 134, 8, 134,\n-        134, 134, 134, 134, 134, 134, 134, 11,\n-        12, 13, 14, 134, 134, 134, 134, 134,\n-        134, 134, 134, 23, 134, 24, 25, 26,\n-        134, 134, 134, 134, 134, 31, 32, 33,\n-        135, 134, 134, 134, 134, 11, 134, 137,\n-        134, 8, 134, 134, 134, 134, 134, 134,\n-        134, 10, 11, 12, 13, 14, 134, 16,\n-        17, 134, 134, 134, 21, 22, 23, 134,\n-        24, 25, 26, 134, 134, 134, 134, 134,\n-        31, 32, 33, 135, 134, 134, 134, 134,\n-        11, 134, 8, 134, 134, 134, 134, 134,\n-        134, 134, 134, 11, 12, 13, 14, 134,\n-        134, 134, 134, 134, 134, 134, 134, 134,\n-        134, 24, 25, 26, 134, 134, 134, 134,\n-        134, 31, 32, 33, 135, 134, 134, 134,\n-        134, 11, 134, 137, 134, 8, 134, 134,\n-        134, 134, 134, 134, 134, 10, 11, 12,\n-        13, 14, 134, 134, 17, 134, 134, 134,\n-        21, 22, 23, 134, 24, 25, 26, 134,\n-        134, 134, 134, 134, 31, 32, 33, 135,\n-        134, 134, 134, 134, 11, 134, 137, 134,\n-        8, 134, 134, 134, 134, 134, 134, 134,\n-        10, 11, 12, 13, 14, 134, 134, 134,\n-        134, 134, 134, 21, 22, 23, 134, 24,\n-        25, 26, 134, 134, 134, 134, 134, 31,\n-        32, 33, 135, 134, 134, 134, 134, 11,\n-        134, 137, 134, 8, 134, 134, 134, 134,\n-        134, 134, 134, 10, 11, 12, 13, 14,\n-        15, 16, 17, 134, 134, 134, 21, 22,\n-        23, 134, 24, 25, 26, 134, 134, 134,\n-        134, 134, 31, 32, 33, 135, 134, 134,\n-        134, 134, 11, 134, 5, 6, 134, 8,\n-        134, 134, 134, 134, 134, 134, 134, 10,\n-        11, 12, 13, 14, 15, 16, 17, 18,\n-        134, 20, 21, 22, 23, 134, 24, 25,\n-        26, 134, 134, 134, 134, 30, 31, 32,\n-        33, 30, 134, 134, 134, 134, 36, 134,\n-        5, 134, 134, 134, 134, 134, 134, 134,\n-        134, 134, 134, 134, 134, 8, 134, 5,\n-        134, 134, 134, 134, 134, 134, 134, 134,\n-        134, 134, 134, 134, 8, 134, 134, 134,\n-        134, 134, 134, 134, 134, 11, 12, 13,\n-        14, 134, 134, 134, 134, 134, 134, 134,\n-        134, 134, 134, 24, 25, 26, 134, 134,\n-        134, 134, 134, 31, 32, 33, 135, 134,\n-        138, 134, 134, 134, 134, 134, 134, 134,\n-        134, 134, 8, 134, 7, 8, 134, 1,\n-        134, 134, 134, 1, 134, 134, 134, 134,\n-        134, 5, 6, 7, 8, 134, 134, 134,\n-        134, 134, 134, 134, 10, 11, 12, 13,\n+        68, 120, 121, 122, 68, 68, 68, 68,\n+        68, 124, 125, 126, 129, 68, 68, 68,\n+        68, 108, 68, 131, 68, 70, 68, 68,\n+        68, 68, 68, 68, 68, 107, 108, 109,\n+        110, 111, 68, 68, 114, 68, 68, 68,\n+        117, 118, 119, 68, 120, 121, 122, 68,\n+        68, 68, 68, 68, 124, 125, 126, 129,\n+        68, 68, 68, 68, 108, 68, 131, 68,\n+        70, 68, 68, 68, 68, 68, 68, 68,\n+        107, 108, 109, 110, 111, 68, 68, 68,\n+        68, 68, 68, 117, 118, 119, 68, 120,\n+        121, 122, 68, 68, 68, 68, 68, 124,\n+        125, 126, 129, 68, 68, 68, 68, 108,\n+        68, 131, 68, 70, 68, 68, 68, 68,\n+        68, 68, 68, 107, 108, 109, 110, 111,\n+        112, 113, 114, 68, 68, 68, 117, 118,\n+        119, 68, 120, 121, 122, 68, 68, 68,\n+        68, 68, 124, 125, 126, 129, 68, 68,\n+        68, 68, 108, 68, 105, 106, 68, 70,\n+        68, 68, 68, 68, 68, 68, 68, 107,\n+        108, 109, 110, 111, 112, 113, 114, 115,\n+        68, 116, 117, 118, 119, 68, 120, 121,\n+        122, 68, 68, 68, 68, 123, 124, 125,\n+        126, 127, 68, 68, 68, 68, 128, 68,\n+        105, 98, 98, 98, 98, 98, 98, 98,\n+        98, 98, 98, 98, 98, 99, 98, 105,\n+        94, 94, 94, 94, 94, 94, 94, 94,\n+        94, 94, 94, 94, 96, 94, 105, 68,\n+        68, 68, 68, 68, 68, 68, 68, 68,\n+        68, 68, 68, 70, 68, 68, 68, 68,\n+        68, 68, 68, 68, 108, 109, 110, 111,\n+        68, 68, 68, 68, 68, 68, 68, 68,\n+        68, 68, 120, 121, 122, 68, 68, 68,\n+        68, 68, 124, 125, 126, 129, 68, 8,\n+        9, 132, 11, 132, 132, 132, 132, 132,\n+        132, 132, 13, 14, 15, 16, 17, 18,\n+        19, 20, 21, 8, 22, 23, 24, 25,\n+        132, 26, 27, 28, 132, 132, 132, 132,\n+        32, 33, 34, 35, 32, 132, 132, 132,\n+        132, 37, 132, 8, 132, 132, 132, 132,\n+        132, 132, 132, 132, 132, 132, 132, 132,\n+        11, 132, 132, 132, 132, 132, 132, 132,\n+        132, 14, 15, 16, 17, 132, 132, 132,\n+        132, 132, 132, 132, 132, 132, 132, 26,\n+        27, 28, 132, 132, 132, 132, 132, 33,\n+        34, 35, 133, 132, 132, 132, 132, 14,\n+        132, 11, 132, 132, 132, 132, 132, 132,\n+        132, 132, 14, 15, 16, 17, 132, 132,\n+        132, 132, 132, 132, 132, 132, 132, 132,\n+        26, 27, 28, 132, 132, 132, 132, 132,\n+        33, 34, 35, 133, 132, 11, 132, 132,\n+        132, 132, 132, 132, 132, 132, 132, 15,\n+        16, 17, 132, 132, 132, 132, 132, 132,\n+        132, 132, 132, 132, 132, 132, 132, 132,\n+        132, 132, 132, 132, 33, 34, 35, 132,\n+        11, 132, 132, 132, 132, 132, 132, 132,\n+        132, 132, 132, 16, 17, 132, 132, 132,\n+        132, 132, 132, 132, 132, 132, 132, 132,\n+        132, 132, 132, 132, 132, 132, 132, 33,\n+        34, 35, 132, 11, 132, 132, 132, 132,\n+        132, 132, 132, 132, 132, 132, 132, 17,\n+        132, 132, 132, 132, 132, 132, 132, 132,\n+        132, 132, 132, 132, 132, 132, 132, 132,\n+        132, 132, 33, 34, 35, 132, 11, 132,\n+        132, 132, 132, 132, 132, 132, 132, 132,\n+        132, 132, 132, 132, 132, 132, 132, 132,\n+        132, 132, 132, 132, 132, 132, 132, 132,\n+        132, 132, 132, 132, 132, 33, 34, 132,\n+        11, 132, 132, 132, 132, 132, 132, 132,\n+        132, 132, 132, 132, 132, 132, 132, 132,\n+        132, 132, 132, 132, 132, 132, 132, 132,\n+        132, 132, 132, 132, 132, 132, 132, 132,\n+        34, 132, 11, 132, 11, 132, 132, 132,\n+        132, 132, 132, 132, 132, 132, 15, 16,\n+        17, 132, 132, 132, 132, 132, 132, 132,\n+        132, 132, 132, 26, 27, 28, 132, 132,\n+        132, 132, 132, 33, 34, 35, 133, 132,\n+        11, 132, 132, 132, 132, 132, 132, 132,\n+        132, 132, 15, 16, 17, 132, 132, 132,\n+        132, 132, 132, 132, 132, 132, 132, 132,\n+        27, 28, 132, 132, 132, 132, 132, 33,\n+        34, 35, 133, 132, 11, 132, 132, 132,\n+        132, 132, 132, 132, 132, 132, 15, 16,\n+        17, 132, 132, 132, 132, 132, 132, 132,\n+        132, 132, 132, 132, 132, 28, 132, 132,\n+        132, 132, 132, 33, 34, 35, 133, 132,\n+        134, 132, 132, 132, 132, 132, 132, 132,\n+        132, 132, 132, 132, 132, 11, 132, 11,\n+        132, 132, 132, 132, 132, 132, 132, 132,\n+        132, 15, 16, 17, 132, 132, 132, 132,\n+        132, 132, 132, 132, 132, 132, 132, 132,\n+        132, 132, 132, 132, 132, 132, 33, 34,\n+        35, 133, 132, 11, 132, 132, 132, 132,\n+        132, 132, 132, 13, 14, 15, 16, 17,\n+        132, 132, 132, 132, 132, 132, 23, 24,\n+        25, 132, 26, 27, 28, 132, 132, 132,\n+        132, 132, 33, 34, 35, 133, 132, 132,\n+        132, 132, 14, 132, 11, 132, 132, 132,\n+        132, 132, 132, 132, 132, 14, 15, 16,\n+        17, 132, 132, 132, 132, 132, 132, 23,\n+        24, 25, 132, 26, 27, 28, 132, 132,\n+        132, 132, 132, 33, 34, 35, 133, 132,\n+        132, 132, 132, 14, 132, 11, 132, 132,\n+        132, 132, 132, 132, 132, 132, 14, 15,\n+        16, 17, 132, 132, 132, 132, 132, 132,\n+        132, 24, 25, 132, 26, 27, 28, 132,\n+        132, 132, 132, 132, 33, 34, 35, 133,\n+        132, 132, 132, 132, 14, 132, 11, 132,\n+        132, 132, 132, 132, 132, 132, 132, 14,\n+        15, 16, 17, 132, 132, 132, 132, 132,\n+        132, 132, 132, 25, 132, 26, 27, 28,\n+        132, 132, 132, 132, 132, 33, 34, 35,\n+        133, 132, 132, 132, 132, 14, 132, 135,\n+        132, 11, 132, 132, 132, 132, 132, 132,\n+        132, 13, 14, 15, 16, 17, 132, 19,\n+        20, 132, 132, 132, 23, 24, 25, 132,\n+        26, 27, 28, 132, 132, 132, 132, 132,\n+        33, 34, 35, 133, 132, 132, 132, 132,\n+        14, 132, 11, 132, 132, 132, 132, 132,\n+        132, 132, 132, 14, 15, 16, 17, 132,\n+        132, 132, 132, 132, 132, 132, 132, 132,\n+        132, 26, 27, 28, 132, 132, 132, 132,\n+        132, 33, 34, 35, 133, 132, 132, 132,\n+        132, 14, 132, 135, 132, 11, 132, 132,\n+        132, 132, 132, 132, 132, 13, 14, 15,\n+        16, 17, 132, 132, 20, 132, 132, 132,\n+        23, 24, 25, 132, 26, 27, 28, 132,\n+        132, 132, 132, 132, 33, 34, 35, 133,\n+        132, 132, 132, 132, 14, 132, 135, 132,\n+        11, 132, 132, 132, 132, 132, 132, 132,\n+        13, 14, 15, 16, 17, 132, 132, 132,\n+        132, 132, 132, 23, 24, 25, 132, 26,\n+        27, 28, 132, 132, 132, 132, 132, 33,\n+        34, 35, 133, 132, 132, 132, 132, 14,\n+        132, 135, 132, 11, 132, 132, 132, 132,\n+        132, 132, 132, 13, 14, 15, 16, 17,\n+        18, 19, 20, 132, 132, 132, 23, 24,\n+        25, 132, 26, 27, 28, 132, 132, 132,\n+        132, 132, 33, 34, 35, 133, 132, 132,\n+        132, 132, 14, 132, 8, 9, 132, 11,\n+        132, 132, 132, 132, 132, 132, 132, 13,\n@@ -689,32 +658,54 @@\n-        22, 23, 134, 24, 25, 26, 134, 27,\n-        28, 134, 30, 31, 32, 33, 30, 134,\n-        134, 134, 134, 36, 134, 5, 6, 134,\n-        8, 134, 134, 134, 134, 134, 134, 134,\n-        10, 11, 12, 13, 14, 15, 16, 17,\n-        18, 19, 20, 21, 22, 23, 134, 24,\n-        25, 26, 134, 134, 134, 134, 30, 31,\n-        32, 33, 30, 134, 134, 134, 134, 36,\n-        134, 8, 134, 134, 134, 134, 134, 134,\n-        134, 134, 134, 134, 134, 134, 134, 134,\n-        134, 134, 134, 134, 134, 134, 134, 134,\n-        134, 134, 134, 134, 27, 28, 134, 8,\n-        134, 134, 134, 134, 134, 134, 134, 134,\n-        134, 134, 134, 134, 134, 134, 134, 134,\n-        134, 134, 134, 134, 134, 134, 134, 134,\n-        134, 134, 134, 28, 134, 1, 139, 139,\n-        139, 1, 139, 141, 140, 140, 140, 140,\n-        140, 140, 140, 140, 140, 140, 140, 140,\n-        140, 140, 140, 140, 140, 140, 140, 140,\n-        140, 140, 140, 140, 140, 140, 140, 140,\n-        140, 140, 140, 140, 140, 140, 140, 142,\n-        140, 34, 140, 141, 140, 140, 140, 140,\n-        140, 140, 140, 140, 140, 140, 140, 140,\n-        140, 140, 140, 140, 140, 140, 140, 140,\n-        140, 140, 140, 140, 140, 140, 140, 140,\n-        140, 140, 140, 140, 140, 140, 34, 142,\n-        140, 142, 140, 141, 140, 140, 140, 140,\n-        140, 140, 140, 140, 140, 140, 140, 140,\n-        140, 140, 140, 140, 140, 140, 140, 140,\n-        140, 140, 140, 140, 140, 140, 140, 140,\n-        140, 140, 140, 140, 140, 140, 34, 140,\n-        35, 140, 0\n+        132, 22, 23, 24, 25, 132, 26, 27,\n+        28, 132, 132, 132, 132, 32, 33, 34,\n+        35, 32, 132, 132, 132, 132, 37, 132,\n+        8, 132, 132, 132, 132, 132, 132, 132,\n+        132, 132, 132, 132, 132, 11, 132, 8,\n+        132, 132, 132, 132, 132, 132, 132, 132,\n+        132, 132, 132, 132, 11, 132, 132, 132,\n+        132, 132, 132, 132, 132, 14, 15, 16,\n+        17, 132, 132, 132, 132, 132, 132, 132,\n+        132, 132, 132, 26, 27, 28, 132, 132,\n+        132, 132, 132, 33, 34, 35, 133, 132,\n+        136, 132, 132, 132, 132, 132, 132, 132,\n+        132, 132, 11, 132, 10, 11, 132, 4,\n+        132, 132, 132, 4, 132, 132, 132, 132,\n+        132, 8, 9, 10, 11, 132, 132, 132,\n+        132, 132, 132, 132, 13, 14, 15, 16,\n+        17, 18, 19, 20, 21, 8, 22, 23,\n+        24, 25, 132, 26, 27, 28, 132, 29,\n+        30, 132, 32, 33, 34, 35, 32, 132,\n+        132, 132, 132, 37, 132, 11, 132, 132,\n+        132, 132, 132, 132, 132, 132, 132, 132,\n+        132, 132, 132, 132, 132, 132, 132, 132,\n+        132, 132, 132, 132, 132, 132, 132, 132,\n+        29, 30, 132, 11, 132, 132, 132, 132,\n+        132, 132, 132, 132, 132, 132, 132, 132,\n+        132, 132, 132, 132, 132, 132, 132, 132,\n+        132, 132, 132, 132, 132, 132, 132, 30,\n+        132, 4, 137, 137, 137, 4, 137, 139,\n+        138, 138, 138, 138, 138, 138, 138, 138,\n+        138, 138, 138, 138, 138, 138, 138, 138,\n+        138, 138, 138, 138, 138, 138, 138, 138,\n+        138, 138, 138, 138, 138, 138, 138, 138,\n+        138, 138, 138, 140, 138, 141, 138, 141,\n+        142, 138, 139, 138, 138, 138, 138, 138,\n+        138, 138, 138, 138, 138, 138, 138, 138,\n+        138, 138, 138, 138, 138, 138, 138, 138,\n+        138, 138, 138, 138, 138, 138, 138, 138,\n+        138, 138, 138, 138, 138, 1, 140, 140,\n+        138, 139, 138, 138, 138, 138, 138, 138,\n+        138, 138, 138, 138, 138, 138, 138, 138,\n+        138, 138, 138, 138, 138, 138, 138, 138,\n+        138, 138, 138, 138, 138, 138, 138, 138,\n+        138, 138, 138, 138, 138, 140, 138, 141,\n+        138, 139, 138, 138, 138, 138, 138, 138,\n+        138, 138, 138, 138, 138, 138, 138, 138,\n+        138, 138, 138, 138, 138, 138, 138, 138,\n+        138, 138, 138, 138, 138, 138, 138, 138,\n+        138, 138, 138, 138, 138, 140, 138, 141,\n+        138, 141, 138, 39, 40, 38, 41, 38,\n+        38, 38, 38, 38, 38, 38, 42, 43,\n+        44, 45, 46, 47, 48, 49, 50, 39,\n+        51, 52, 53, 54, 38, 55, 56, 57,\n+        38, 58, 59, 38, 60, 61, 62, 63,\n+        60, 1, 38, 2, 38, 64, 38, 0\n@@ -724,18 +715,18 @@\n-        1, 31, 0, 59, 61, 90, 91, 116,\n-        0, 118, 104, 92, 93, 94, 95, 108,\n-        110, 111, 112, 119, 113, 105, 106, 107,\n-        99, 100, 101, 120, 121, 122, 114, 96,\n-        97, 98, 123, 125, 115, 0, 2, 3,\n-        0, 16, 4, 5, 6, 7, 20, 22,\n-        23, 24, 28, 25, 17, 18, 19, 11,\n-        12, 13, 29, 30, 26, 8, 9, 10,\n-        27, 14, 15, 21, 0, 32, 33, 0,\n-        46, 34, 35, 36, 37, 50, 52, 53,\n-        54, 55, 47, 48, 49, 41, 42, 43,\n-        56, 38, 39, 40, 57, 58, 44, 0,\n-        45, 0, 51, 0, 0, 0, 60, 0,\n-        0, 0, 62, 63, 76, 64, 65, 66,\n-        67, 80, 82, 83, 84, 89, 85, 77,\n-        78, 79, 71, 72, 73, 86, 68, 69,\n-        70, 87, 88, 74, 75, 81, 0, 102,\n-        103, 109, 117, 0, 0, 0, 124\n+        1, 120, 0, 2, 31, 1, 58, 60,\n+        88, 89, 114, 1, 116, 102, 90, 91,\n+        92, 93, 106, 108, 109, 110, 111, 103,\n+        104, 105, 97, 98, 99, 117, 118, 119,\n+        112, 94, 95, 96, 124, 113, 1, 3,\n+        4, 1, 17, 5, 6, 7, 8, 21,\n+        23, 24, 25, 26, 18, 19, 20, 12,\n+        13, 14, 29, 30, 27, 9, 10, 11,\n+        28, 15, 16, 22, 1, 32, 1, 45,\n+        33, 34, 35, 36, 49, 51, 52, 53,\n+        54, 46, 47, 48, 40, 41, 42, 55,\n+        37, 38, 39, 56, 57, 43, 1, 44,\n+        1, 50, 1, 1, 1, 59, 1, 1,\n+        1, 61, 62, 75, 63, 64, 65, 66,\n+        79, 81, 82, 83, 84, 76, 77, 78,\n+        70, 71, 72, 85, 67, 68, 69, 86,\n+        87, 73, 74, 80, 1, 100, 101, 107,\n+        115, 1, 1, 1, 121, 122, 123\n@@ -745,2 +736,2 @@\n-        0, 0, 3, 0, 0, 0, 0, 0,\n-        4, 0, 0, 0, 0, 0, 0, 0,\n+        1, 0, 0, 0, 0, 4, 0, 0,\n+        0, 0, 0, 5, 0, 0, 0, 0,\n@@ -749,2 +740,2 @@\n-        0, 0, 0, 0, 0, 5, 0, 0,\n-        6, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 6, 0, 7, 0,\n+        0, 8, 0, 0, 0, 0, 0, 0,\n@@ -753,1 +744,1 @@\n-        0, 0, 0, 0, 7, 0, 0, 8,\n+        0, 0, 0, 0, 9, 0, 10, 0,\n@@ -756,3 +747,3 @@\n-        0, 0, 0, 0, 0, 0, 0, 9,\n-        0, 10, 0, 11, 12, 13, 0, 14,\n-        15, 16, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 11, 0,\n+        12, 0, 13, 14, 15, 0, 16, 17,\n+        18, 0, 0, 0, 0, 0, 0, 0,\n@@ -761,2 +752,2 @@\n-        0, 0, 0, 0, 0, 0, 17, 0,\n-        0, 0, 0, 18, 19, 20, 0\n+        0, 0, 0, 0, 19, 0, 0, 0,\n+        0, 20, 21, 22, 0, 0, 0\n@@ -766,1 +757,1 @@\n-        1, 0, 0, 0, 0, 0, 0, 0,\n+        0, 2, 0, 0, 0, 0, 0, 0,\n@@ -781,1 +772,1 @@\n-        0, 0, 0, 0, 0, 0\n+        0, 0, 0, 0, 0\n@@ -785,1 +776,1 @@\n-        2, 0, 0, 0, 0, 0, 0, 0,\n+        0, 3, 0, 0, 0, 0, 0, 0,\n@@ -800,1 +791,1 @@\n-        0, 0, 0, 0, 0, 0\n+        0, 0, 0, 0, 0\n@@ -804,6 +795,4 @@\n-        0, 38, 38, 38, 38, 38, 38, 38,\n-        38, 38, 38, 38, 38, 38, 38, 38,\n-        38, 38, 38, 38, 38, 38, 38, 38,\n-        38, 38, 38, 38, 38, 38, 38, 69,\n-        69, 69, 69, 69, 69, 69, 69, 69,\n-        69, 69, 69, 69, 96, 69, 69, 69,\n+        1, 0, 39, 39, 39, 39, 39, 39,\n+        39, 39, 39, 39, 39, 39, 39, 39,\n+        39, 39, 39, 39, 39, 39, 39, 39,\n+        39, 39, 39, 39, 39, 39, 39, 69,\n@@ -811,1 +800,3 @@\n-        100, 96, 69, 102, 105, 69, 69, 69,\n+        69, 69, 69, 95, 69, 69, 69, 69,\n+        69, 69, 69, 69, 69, 69, 69, 99,\n+        95, 69, 101, 104, 69, 69, 69, 69,\n@@ -813,7 +804,7 @@\n-        69, 69, 96, 69, 69, 69, 69, 69,\n-        69, 69, 69, 69, 69, 69, 100, 96,\n-        69, 69, 135, 135, 135, 135, 135, 135,\n-        135, 135, 135, 135, 135, 135, 135, 135,\n-        135, 135, 135, 135, 135, 135, 135, 135,\n-        135, 135, 135, 135, 135, 135, 135, 135,\n-        135, 135, 140, 141, 141, 141\n+        69, 95, 69, 69, 69, 69, 69, 69,\n+        69, 69, 69, 69, 69, 99, 95, 69,\n+        133, 133, 133, 133, 133, 133, 133, 133,\n+        133, 133, 133, 133, 133, 133, 133, 133,\n+        133, 133, 133, 133, 133, 133, 133, 133,\n+        133, 133, 133, 133, 133, 133, 133, 138,\n+        139, 139, 139, 139, 39\n@@ -822,2 +813,2 @@\n-static const int use_syllable_machine_start = 0;\n-static const int use_syllable_machine_first_final = 0;\n+static const int use_syllable_machine_start = 1;\n+static const int use_syllable_machine_first_final = 1;\n@@ -826,1 +817,1 @@\n-static const int use_syllable_machine_en_main = 0;\n+static const int use_syllable_machine_en_main = 1;\n@@ -833,1 +824,1 @@\n-#line 182 \"hb-ot-shaper-use-machine.rl\"\n+#line 184 \"hb-ot-shaper-use-machine.rl\"\n@@ -932,1 +923,1 @@\n-#line 922 \"hb-ot-shaper-use-machine.hh\"\n+#line 924 \"hb-ot-shaper-use-machine.hh\"\n@@ -940,1 +931,1 @@\n-#line 282 \"hb-ot-shaper-use-machine.rl\"\n+#line 284 \"hb-ot-shaper-use-machine.rl\"\n@@ -945,1 +936,1 @@\n-#line 931 \"hb-ot-shaper-use-machine.hh\"\n+#line 937 \"hb-ot-shaper-use-machine.hh\"\n@@ -955,1 +946,1 @@\n-        case 2:\n+        case 3:\n@@ -959,1 +950,1 @@\n-#line 943 \"hb-ot-shaper-use-machine.hh\"\n+#line 951 \"hb-ot-shaper-use-machine.hh\"\n@@ -977,2 +968,6 @@\n-        case 12:\n-#line 170 \"hb-ot-shaper-use-machine.rl\"\n+        case 6:\n+#line 1 \"NONE\"\n+        {te = p+1;}\n+        break;\n+        case 14:\n+#line 172 \"hb-ot-shaper-use-machine.rl\"\n@@ -981,2 +976,2 @@\n-        case 10:\n-#line 171 \"hb-ot-shaper-use-machine.rl\"\n+        case 12:\n+#line 173 \"hb-ot-shaper-use-machine.rl\"\n@@ -985,2 +980,2 @@\n-        case 8:\n-#line 172 \"hb-ot-shaper-use-machine.rl\"\n+        case 10:\n+#line 174 \"hb-ot-shaper-use-machine.rl\"\n@@ -989,2 +984,2 @@\n-        case 16:\n-#line 173 \"hb-ot-shaper-use-machine.rl\"\n+        case 18:\n+#line 175 \"hb-ot-shaper-use-machine.rl\"\n@@ -993,2 +988,2 @@\n-        case 14:\n-#line 174 \"hb-ot-shaper-use-machine.rl\"\n+        case 16:\n+#line 176 \"hb-ot-shaper-use-machine.rl\"\n@@ -997,2 +992,2 @@\n-        case 6:\n-#line 175 \"hb-ot-shaper-use-machine.rl\"\n+        case 8:\n+#line 177 \"hb-ot-shaper-use-machine.rl\"\n@@ -1001,2 +996,2 @@\n-        case 20:\n-#line 176 \"hb-ot-shaper-use-machine.rl\"\n+        case 22:\n+#line 178 \"hb-ot-shaper-use-machine.rl\"\n@@ -1005,2 +1000,2 @@\n-        case 4:\n-#line 177 \"hb-ot-shaper-use-machine.rl\"\n+        case 5:\n+#line 179 \"hb-ot-shaper-use-machine.rl\"\n@@ -1009,2 +1004,2 @@\n-        case 3:\n-#line 178 \"hb-ot-shaper-use-machine.rl\"\n+        case 4:\n+#line 180 \"hb-ot-shaper-use-machine.rl\"\n@@ -1013,2 +1008,2 @@\n-        case 11:\n-#line 170 \"hb-ot-shaper-use-machine.rl\"\n+        case 13:\n+#line 172 \"hb-ot-shaper-use-machine.rl\"\n@@ -1017,2 +1012,2 @@\n-        case 9:\n-#line 171 \"hb-ot-shaper-use-machine.rl\"\n+        case 11:\n+#line 173 \"hb-ot-shaper-use-machine.rl\"\n@@ -1021,2 +1016,2 @@\n-        case 7:\n-#line 172 \"hb-ot-shaper-use-machine.rl\"\n+        case 9:\n+#line 174 \"hb-ot-shaper-use-machine.rl\"\n@@ -1025,2 +1020,2 @@\n-        case 15:\n-#line 173 \"hb-ot-shaper-use-machine.rl\"\n+        case 17:\n+#line 175 \"hb-ot-shaper-use-machine.rl\"\n@@ -1029,2 +1024,2 @@\n-        case 13:\n-#line 174 \"hb-ot-shaper-use-machine.rl\"\n+        case 15:\n+#line 176 \"hb-ot-shaper-use-machine.rl\"\n@@ -1033,2 +1028,2 @@\n-        case 5:\n-#line 175 \"hb-ot-shaper-use-machine.rl\"\n+        case 7:\n+#line 177 \"hb-ot-shaper-use-machine.rl\"\n@@ -1037,2 +1032,2 @@\n-        case 19:\n-#line 176 \"hb-ot-shaper-use-machine.rl\"\n+        case 21:\n+#line 178 \"hb-ot-shaper-use-machine.rl\"\n@@ -1041,2 +1036,2 @@\n-        case 17:\n-#line 177 \"hb-ot-shaper-use-machine.rl\"\n+        case 19:\n+#line 179 \"hb-ot-shaper-use-machine.rl\"\n@@ -1045,2 +1040,2 @@\n-        case 18:\n-#line 178 \"hb-ot-shaper-use-machine.rl\"\n+        case 20:\n+#line 180 \"hb-ot-shaper-use-machine.rl\"\n@@ -1049,1 +1044,5 @@\n-#line 1014 \"hb-ot-shaper-use-machine.hh\"\n+        case 1:\n+#line 177 \"hb-ot-shaper-use-machine.rl\"\n+        {{p = ((te))-1;}{ found_syllable (use_symbol_cluster); }}\n+        break;\n+#line 1049 \"hb-ot-shaper-use-machine.hh\"\n@@ -1054,1 +1053,1 @@\n-        case 1:\n+        case 2:\n@@ -1058,1 +1057,1 @@\n-#line 1021 \"hb-ot-shaper-use-machine.hh\"\n+#line 1058 \"hb-ot-shaper-use-machine.hh\"\n@@ -1074,1 +1073,1 @@\n-#line 287 \"hb-ot-shaper-use-machine.rl\"\n+#line 289 \"hb-ot-shaper-use-machine.rl\"\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shaper-use-machine.hh","additions":662,"deletions":663,"binary":false,"changes":1325,"status":"modified"},{"patch":"@@ -9,12 +9,12 @@\n- * # IndicSyllabicCategory-15.0.0.txt\n- * # Date: 2022-05-26, 02:18:00 GMT [KW, RP]\n- * # IndicPositionalCategory-15.0.0.txt\n- * # Date: 2022-05-26, 02:18:00 GMT [KW, RP]\n- * # ArabicShaping-15.0.0.txt\n- * # Date: 2022-02-14, 18:50:00 GMT [KW, RP]\n- * # DerivedCoreProperties-15.0.0.txt\n- * # Date: 2022-08-05, 22:17:05 GMT\n- * # Blocks-15.0.0.txt\n- * # Date: 2022-01-28, 20:58:00 GMT [KW]\n- * # Scripts-15.0.0.txt\n- * # Date: 2022-04-26, 23:15:02 GMT\n+ * # IndicSyllabicCategory-15.1.0.txt\n+ * # Date: 2023-01-05\n+ * # IndicPositionalCategory-15.1.0.txt\n+ * # Date: 2023-01-05\n+ * # ArabicShaping-15.1.0.txt\n+ * # Date: 2023-01-05\n+ * # DerivedCoreProperties-15.1.0.txt\n+ * # Date: 2023-08-07, 15:21:24 GMT\n+ * # Blocks-15.1.0.txt\n+ * # Date: 2023-07-28, 15:47:20 GMT\n+ * # Scripts-15.1.0.txt\n+ * # Date: 2023-07-28, 16:01:07 GMT\n@@ -29,0 +29,1 @@\n+ * # Updated for Unicode 15.1 by Andrew Glass 2023-09-14\n@@ -39,0 +40,1 @@\n+ * # Updated for Unicode 15.1 by Andrew Glass 2023-09-14\n@@ -57,0 +59,1 @@\n+#define HM      USE(HM) \/* HIEROGLYPH_MOD *\/\n@@ -58,0 +61,1 @@\n+#define HR      USE(HR) \/* HIEROGLYPH_MIRROR *\/\n@@ -98,1 +102,1 @@\n-hb_use_u8[3141] =\n+hb_use_u8[3187] =\n@@ -112,1 +116,1 @@\n-      2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,   37,    2,    2,    2,    2,\n+     37,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,   38,    2,   39,    2,    2,\n@@ -116,1 +120,1 @@\n-      2,   38,   39,   40,   41,   42,   43,    2,   44,    2,    2,    2,    2,    2,    2,    2,\n+      2,   40,   41,   42,   43,   44,   45,    2,   46,    2,    2,    2,    2,    2,    2,    2,\n@@ -118,6 +122,6 @@\n-      2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,   45,   46,    2,\n-     47,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,   48,   49,    2,    2,    2,\n-      2,    2,    2,    2,    2,   50,   51,    2,   52,    2,    2,   53,    2,    2,   54,   55,\n-     56,   57,   58,   59,   60,   61,   62,   63,    2,   64,   65,    2,   66,   67,   68,   69,\n-      2,   70,    2,   71,   72,   73,   74,    2,    2,   75,   76,   77,   78,    2,   79,   80,\n-      2,   81,   81,   81,   81,   81,   81,   81,   81,   82,    2,    2,    2,    2,    2,    2,\n+      2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,   47,   48,    2,\n+     49,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,   50,   51,    2,    2,    2,\n+      2,    2,    2,    2,    2,   52,   53,    2,   54,    2,    2,   55,    2,    2,   56,   57,\n+     58,   59,   60,   61,   62,   63,   64,   65,    2,   66,   67,    2,   68,   69,   70,   71,\n+      2,   72,    2,   73,   74,   75,   76,    2,    2,   77,   78,   79,   80,    2,   81,   82,\n+      2,   83,   83,   83,   83,   83,   83,   83,   83,   84,    2,    2,    2,    2,    2,    2,\n@@ -126,3 +130,3 @@\n-      2,    2,    2,    2,    2,    2,   83,   84,    2,    2,    2,    2,    2,    2,    2,   85,\n-     86,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,\n-      2,    2,    2,    2,    2,    2,    2,   81,   81,   81,   87,    2,    2,    2,    2,    2,\n+      2,    2,    2,    2,    2,    2,   85,   86,    2,    2,    2,    2,    2,    2,    2,   87,\n+     88,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,\n+      2,    2,    2,    2,    2,    2,    2,   89,   89,   89,   90,    2,    2,    2,    2,    2,\n@@ -130,2 +134,2 @@\n-      2,    2,    2,    2,    2,    2,    2,    2,    2,   88,   89,    2,    2,    2,    2,    2,\n-      2,    2,    2,   90,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,\n+      2,    2,    2,    2,    2,    2,    2,    2,    2,   91,   92,    2,    2,    2,    2,    2,\n+      2,    2,    2,   93,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,\n@@ -133,138 +137,140 @@\n-      2,    2,    2,   91,    2,    2,   92,    2,    2,    2,   93,    2,    2,    2,    2,    2,\n-      2,    2,    2,   94,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,\n-      2,   95,   95,   96,   97,   95,   95,   95,   95,   95,   95,   95,   95,   95,   95,   95,\n-     95,   95,   95,   95,   95,   95,   95,   95,   95,   95,   95,   95,   95,   95,   95,   95,\n-     95,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,\n-      0,    2,    2,    2,    2,    2,    0,    0,    0,    3,    0,    0,    0,    0,    0,    4,\n-      0,    0,    5,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,    0,\n-      0,    0,    0,    0,    0,    0,    0,    0,    6,    7,    0,    0,    0,    0,    0,    0,\n-      0,    0,    0,    0,    0,    0,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,\n-      2,    2,    2,    2,    2,    2,    8,    9,    9,    9,    9,    0,    0,    0,    7,   10,\n-      0,    2,    2,    2,    2,   11,   12,    0,    0,    9,   13,    2,    2,    2,    2,    2,\n-      2,    2,    2,    2,    2,    2,   14,   15,   16,   17,   18,   19,   20,   14,   21,   22,\n-     23,   10,   24,   25,   18,    2,    2,    2,    2,    2,   18,    0,    2,    2,    2,    2,\n-      2,    0,    2,    2,    2,    2,    2,    2,    2,   26,   27,   28,    2,    2,    2,    7,\n-     28,    7,   28,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    7,    2,    2,\n-      2,    7,    7,    0,    2,    2,    0,   15,   16,   17,   18,   29,   30,   31,   30,   32,\n-      0,    0,    0,    0,   33,    0,    0,    2,   28,    2,    0,    0,    0,    0,    0,    7,\n-     34,   10,   13,   28,    2,    2,    7,    0,   28,    7,    2,   28,    7,    2,    0,   35,\n-     16,   17,   29,    0,   25,   36,   25,   37,    0,   38,    0,    0,    0,   28,    2,    7,\n-      7,    0,    0,    0,    2,    2,    2,    2,    2,   39,   40,   41,    0,    0,    0,    0,\n-      0,   10,   13,   28,    2,    2,    2,    2,   28,    2,   28,    2,    2,    2,    2,    2,\n-      2,    7,    2,   28,    2,    2,    0,   15,   16,   17,   18,   19,   25,   20,   33,   22,\n-      0,    0,    0,    0,    0,   28,   39,   39,   42,   10,   27,   28,    2,    2,    2,    7,\n-     28,    7,    2,   28,    2,    2,    0,   15,   43,    0,    0,   25,   20,    0,    0,    2,\n-     28,   28,    0,    0,    0,    0,    0,    0,    0,    0,   44,   28,    2,    2,    7,    0,\n-      2,    7,    2,    2,    0,   28,    7,    7,    2,    0,   28,    7,    0,    2,    7,    0,\n-      2,    2,    2,    2,    2,    2,    0,    0,   21,   14,   45,    0,   46,   31,   46,   32,\n-      0,    0,    0,    0,   33,    0,    0,    0,    0,   13,   27,   47,    2,    2,    2,    7,\n-      2,    7,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    0,   15,\n-     20,   14,   21,   45,   20,   36,   20,   37,    0,    0,    0,   25,   29,    2,    7,    0,\n-      0,    8,   27,   28,    2,    2,    2,    7,    2,    2,    2,   28,    2,    2,    0,   15,\n-     43,    0,    0,   33,   45,    0,    0,    0,    7,   48,   49,    0,    0,    0,    0,    0,\n-      0,    9,   27,    2,    2,    2,    2,    7,    2,    2,    2,    2,    2,    2,   50,   51,\n-     21,   21,   17,   29,   46,   31,   46,   32,   52,    0,    0,    0,   33,    0,    0,    0,\n-     28,   10,   27,   28,    2,    2,    2,    2,    2,    2,    2,    2,    7,    0,    2,    2,\n-      2,    2,   28,    2,    2,    2,    2,   28,    0,    2,    2,    2,    7,    0,   53,    0,\n-     33,   21,   20,   29,   29,   16,   46,   46,   23,    0,   21,    0,    0,    0,    0,    0,\n-      0,    2,    0,    2,    7,    0,    0,    0,    0,    0,    0,    0,    0,   18,    0,    0,\n-      0,    2,    2,   54,   54,   55,    0,    0,   16,    2,    2,    2,    2,   28,    2,    2,\n-      2,    2,    2,    2,    2,    2,    2,    7,    0,   56,   19,   57,   20,   20,   18,   18,\n-     44,   19,    9,   29,    9,    2,    2,   58,   59,   59,   59,   59,   59,   60,   59,   59,\n-     59,   59,   59,   59,   59,   59,   59,   59,   59,   59,   59,   59,   59,   59,   59,   61,\n-      0,    0,    0,    0,   62,    0,    0,    0,    0,    2,    2,    2,    2,    2,   63,   43,\n-     57,   64,   20,   20,   65,   66,   67,   68,   69,    2,    2,    2,    2,    2,    1,    0,\n-      3,    2,    2,    2,   21,   18,    2,    2,   70,   69,   71,   72,   63,   71,   27,   27,\n-      2,   50,   20,   51,    2,    2,    2,    2,    2,    2,   73,   74,   75,   27,   27,   76,\n-     77,    2,    2,    2,    2,    2,   27,   43,    0,    2,   57,   78,    0,    0,    0,    0,\n-     28,    2,   57,   45,    0,    0,    0,    0,    0,    2,   57,    0,    0,    0,    0,    0,\n-      0,    2,    2,    2,    2,    2,    2,    7,    2,    7,   57,    0,    0,    0,    0,    0,\n-      0,    2,    2,   79,   43,   20,   57,   18,   46,   46,   46,   46,   13,   80,   81,   82,\n-     83,   84,   85,    0,    0,    0,    0,   86,    0,    7,    0,    0,   28,    0,   87,   79,\n-     88,    2,    2,    2,    2,    7,    0,    0,    0,   40,   40,   89,   90,    2,    2,    2,\n-      2,    2,    2,    2,    2,   11,    7,    0,    0,   91,    2,    2,    2,    2,    2,    2,\n-      2,    2,    2,    2,    2,    2,    2,    2,    7,   20,   78,   43,   20,   92,   59,    0,\n-      0,   93,   94,   93,   93,   95,   96,    0,    0,    2,    2,    2,    2,    2,    2,    2,\n-      0,    2,    2,    7,    0,    0,    0,    0,    0,    2,    2,    2,    2,    2,    2,    0,\n-      0,    2,    2,    2,    2,   27,    0,    0,    0,    2,    2,    2,    2,    2,    7,    0,\n-      0,    2,    2,    2,   50,   97,   43,    0,    0,    2,    2,   98,   99,  100,  101,   59,\n-     61,  102,   14,   43,   20,   57,   19,   78,   46,   46,   74,    9,    9,    9,  103,   44,\n-     38,    9,  104,   72,    2,    2,    2,    2,    2,    2,    2,  105,   20,   18,   18,   20,\n-     46,   46,   20,  106,    2,    2,    2,    7,    0,    0,    0,    0,    0,    0,  107,  108,\n-    109,  109,  109,    0,    0,    0,    0,    0,    0,  104,   72,    2,    2,    2,    2,    2,\n-      2,   58,   59,   57,   23,   20,  110,   59,    2,    2,    2,    2,  105,   20,   21,   43,\n-     43,  100,   12,    0,    0,    0,    0,    0,    0,    2,    2,   59,   16,   46,   21,  111,\n-    100,  100,  100,  112,  113,    0,    0,    0,    0,    2,    2,    2,    2,    2,    0,   28,\n-      2,    9,   44,  114,  114,  114,    9,  114,  114,   13,  114,  114,  114,   24,    0,   38,\n-      0,    0,    0,  115,   49,    9,    3,    0,    0,    0,    0,    0,    0,    0,  116,    0,\n-      0,    0,    0,    0,    0,    0,    4,  117,  118,   40,   40,    3,    0,    0,    0,    0,\n-      0,    0,    0,    0,    0,    0,  118,  118,  119,  118,  118,  118,  118,  118,  118,  118,\n-    118,    0,    0,  120,    0,    0,    0,    0,    0,    0,    5,  120,    0,    0,    0,    0,\n-      0,   44,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    7,\n-      0,    2,    2,    2,    2,    0,    0,    0,   28,    0,    0,    0,    0,    0,    0,    0,\n-    121,    2,   51,    2,  106,    2,    8,    2,    2,    2,   63,   17,   14,    0,    0,   29,\n-      0,    2,    2,    0,    0,    0,    0,    0,    0,   27,    2,    2,    2,    2,    2,    2,\n-      2,    2,    2,  122,   21,   21,   21,   21,   21,   21,   21,  123,    0,    0,    0,    0,\n-      0,    9,    9,    9,    9,    9,    9,    9,    9,    9,    2,    0,    0,    0,    0,    0,\n-     50,    2,    2,    2,   20,   20,  124,  114,    0,    2,    2,    2,  125,   18,   57,   18,\n-    111,  100,  126,    0,    0,    0,    0,    0,    0,    9,  127,    2,    2,    2,    2,    2,\n-      2,    2,  128,   21,   20,   18,   46,  129,  130,  131,    0,    0,    0,    0,    0,    0,\n-      0,    2,    2,   50,   28,    2,    2,    2,    2,    2,    2,    2,    2,    8,   20,   57,\n-     97,   74,  132,  133,  134,    0,    0,    0,    0,    2,  135,    2,    2,    2,    2,  136,\n-      0,   28,    2,   40,    3,    0,   77,   13,    2,   51,   20,  137,   50,   51,    2,    2,\n-    103,    8,    7,    0,    0,    0,    0,    0,    0,    2,    2,    2,    2,    2,  138,   19,\n-     23,    0,    0,  139,  140,    0,    0,    0,    0,    2,   63,   43,   21,   78,   45,  141,\n-      0,   79,   79,   79,   79,   79,   79,   79,   79,    0,    0,    0,    0,    0,    0,    0,\n-      4,  118,  118,  118,  118,  119,    0,    0,    0,    2,    2,    2,    2,    2,    7,    2,\n-      2,    2,    7,    2,   28,    2,    2,    2,    2,    2,   28,    2,    2,    2,   28,    7,\n-      0,  125,   18,   25,   29,    0,    0,  142,  143,    2,    2,   28,    2,   28,    2,    2,\n-      2,    2,    2,    2,    0,   12,   35,    0,  144,    2,    2,   11,   35,    0,   28,    2,\n-      2,    2,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   28,    2,    2,\n-      7,    2,    2,    9,   39,    0,    0,    0,    0,    2,    2,    2,    2,    2,   25,   36,\n-      0,    2,    2,    2,  114,  114,  114,  114,  114,  145,    2,    7,    0,    0,    0,    0,\n-      0,    2,   12,   12,    0,    0,    0,    0,    0,    7,    2,    2,    7,    2,    2,    2,\n-      2,   28,    2,    7,    0,   28,    2,    0,    0,  146,  147,  148,    2,    2,    2,    2,\n-      2,    2,    2,    2,    2,   20,   20,   18,   18,   18,   20,   20,  131,    0,    0,    0,\n-      0,    0,  149,  149,  149,  149,  149,  149,  149,  149,  149,  149,    2,    2,    2,    2,\n-      2,   51,   50,   51,    0,    0,    0,    0,  150,    9,   72,    2,    2,    2,    2,    2,\n-      2,   16,   17,   19,   14,   22,   35,    0,    0,    0,   29,    0,    0,    0,    0,    0,\n-      0,    9,   47,    2,    2,    2,    2,    2,    2,    2,    2,    2,  125,   18,   20,  151,\n-     20,   19,  152,  153,    2,    2,    2,    2,    2,    0,    0,   63,  154,    0,    0,    0,\n-      0,    2,   11,    0,    0,    0,    0,    0,    0,    2,   63,   23,   18,   18,   18,   20,\n-     20,  106,  155,    0,    0,   54,  156,   29,  157,   28,    2,    2,    2,    2,    2,    2,\n-      2,    2,    2,    2,    2,    2,    2,   21,   17,   20,   20,  158,   42,    0,    0,    0,\n-     47,  125,    0,    0,    0,    0,    0,    0,    0,    2,    2,    2,    7,    7,    2,    2,\n-     28,    2,    2,    2,    2,    2,    2,    2,   28,    2,    2,    2,    2,    2,    2,    2,\n-      8,   16,   17,   19,   20,  159,   29,    0,    0,    9,    9,   28,    2,    2,    2,    7,\n-     28,    7,    2,   28,    2,    2,   56,   15,   21,   14,   21,   45,   30,   31,   30,   32,\n-      0,    0,    0,    0,   33,    0,    0,    0,    2,    2,   21,    0,    9,    9,    9,   44,\n-      0,    9,    9,   44,    0,    0,    0,    0,    0,    2,    2,   63,   23,   18,   18,   18,\n-     20,   21,  123,   13,   15,    0,    0,    0,    0,    2,    2,    2,    2,    2,    0,    0,\n-    160,  161,    0,    0,    0,    0,    0,    0,    0,   16,   17,   18,   18,   64,   97,   23,\n-    157,    9,  162,    7,    0,    0,    0,    0,    0,    2,    2,    2,    2,    2,    2,    2,\n-     63,   23,   18,   18,    0,   46,   46,    9,  163,   35,    0,    0,    0,    0,    0,    0,\n-      0,    0,    0,    0,    0,    2,    2,   18,    0,   21,   17,   18,   18,   19,   14,   80,\n-    163,   36,    0,    0,    0,    0,    0,    0,    0,    2,    2,    2,    2,    2,    8,  164,\n-     23,   18,   20,   20,  162,    7,    0,    0,    0,    2,    2,    2,    2,    2,    7,   41,\n-    133,   21,   20,   18,   74,   19,   20,    0,    0,    2,    2,    2,    7,    0,    0,    0,\n-      0,    2,    2,    2,    2,    2,    2,   16,   17,   18,   19,   20,  103,  163,   35,    0,\n-      0,    2,    2,    2,    7,   28,    0,    2,    2,    2,    2,   28,    7,    2,    2,    2,\n-      2,   21,   21,   16,   30,   31,   10,  165,  166,  167,  168,    0,    0,    0,    0,    0,\n-      0,    2,    2,    2,    2,    0,    2,    2,    2,   63,   23,   18,   18,    0,   20,   21,\n-     27,  106,    0,   31,    0,    0,    0,    0,    0,   50,   18,   20,   20,   20,  137,    2,\n-      2,    2,  169,  170,    9,   13,  171,   70,  172,    0,    0,    1,  144,    0,    0,    0,\n-      0,   50,   18,   20,   14,   17,   18,    2,    2,    2,    2,  155,  155,  155,  173,  173,\n-    173,  173,  173,  173,   13,  174,    0,   28,    0,   20,   18,   18,   29,   20,   20,    9,\n-    163,    0,   59,   59,   59,   59,   59,   59,   59,   64,   19,   80,   44,    0,    0,    0,\n-      0,    2,    2,    2,    7,    2,   28,    2,    2,   50,   20,   20,   29,    0,   36,   20,\n-     25,    9,  156,  175,  171,    0,    0,    0,    0,    2,    2,    2,   28,    7,    2,    2,\n-      2,    2,    2,    2,    2,    2,   21,   21,   45,   20,   33,   80,   66,    0,    0,    0,\n-      0,    2,  176,   64,   45,    0,    0,    0,    0,    9,  177,    2,    2,    2,    2,    2,\n-      2,    2,    2,   21,   20,   18,   29,    0,   46,   14,  140,    0,    0,    0,    0,    0,\n-      0,  178,  178,  178,  106,  179,  178,    0,    0,  145,    2,    2,  180,  114,  114,  114,\n-    114,  114,  114,  114,    0,    0,    0,    0,    0,    9,    9,    9,   44,    0,    0,    0,\n-      0,    2,    2,    2,    2,    2,    7,    0,   56,  181,   18,   18,   18,   18,   18,   18,\n-     18,   18,   18,   18,   18,   18,   18,   18,   18,   18,   18,   18,   18,    0,    0,    0,\n-     38,  114,   24,    0,    0,    0,    0,    0,    0,    0,    0,    7,    0,    0,    0,    0,\n-      0,    2,    2,    2,    0,    0,    0,    0,    0,    2,    2,    2,    2,    2,    0,   56,\n-     35,    0,    4,  118,  118,  118,  119,    0,    0,    9,    9,    9,   47,    2,    2,    2,\n+      2,    2,    2,   94,    2,    2,   95,    2,    2,    2,   96,    2,    2,    2,    2,    2,\n+      2,    2,    2,   97,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,\n+      2,   98,   98,   99,  100,   98,   98,   98,   98,   98,   98,   98,   98,   98,   98,   98,\n+     98,   98,   98,   98,   98,   98,   98,   98,   98,   98,   98,   98,   98,   98,   98,   98,\n+     98,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,\n+      0,    2,    2,    2,    2,    2,    0,    0,    0,    0,    0,    0,    0,    0,    3,    4,\n+      0,    5,    0,    0,    0,    0,    0,    6,    0,    0,    7,    0,    0,    0,    0,    0,\n+      0,    0,    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,\n+      8,    9,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    2,    2,\n+      2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,   10,   11,\n+     11,   11,   11,    0,    0,    0,    9,   12,    0,    2,    2,    2,    2,   13,   14,    0,\n+      0,   11,   15,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,   16,   17,\n+     18,   19,   20,   21,   22,   16,   23,   24,   25,   12,   26,   27,   20,    2,    2,    2,\n+      2,    2,   20,    0,    2,    2,    2,    2,    2,    0,    2,    2,    2,    2,    2,    2,\n+      2,   28,   29,   30,    2,    2,    2,    9,   30,    9,   30,    2,    2,    2,    2,    2,\n+      2,    2,    2,    2,    2,    9,    2,    2,    2,    9,    9,    0,    2,    2,    0,   17,\n+     18,   19,   20,   31,   32,   33,   32,   34,    0,    0,    0,    0,   35,    0,    0,    2,\n+     30,    2,    0,    0,    0,    0,    0,    9,   36,   12,   15,   30,    2,    2,    9,    0,\n+     30,    9,    2,   30,    9,    2,    0,   37,   18,   19,   31,    0,   27,   38,   27,   39,\n+      0,   40,    0,    0,    0,   30,    2,    9,    9,    0,    0,    0,    2,    2,    2,    2,\n+      2,   41,   42,   43,    0,    0,    0,    0,    0,   12,   15,   30,    2,    2,    2,    2,\n+     30,    2,   30,    2,    2,    2,    2,    2,    2,    9,    2,   30,    2,    2,    0,   17,\n+     18,   19,   20,   21,   27,   22,   35,   24,    0,    0,    0,    0,    0,   30,   41,   41,\n+     44,   12,   29,   30,    2,    2,    2,    9,   30,    9,    2,   30,    2,    2,    0,   17,\n+     45,    0,    0,   27,   22,    0,    0,    2,   30,   30,    0,    0,    0,    0,    0,    0,\n+      0,    0,   46,   30,    2,    2,    9,    0,    2,    9,    2,    2,    0,   30,    9,    9,\n+      2,    0,   30,    9,    0,    2,    9,    0,    2,    2,    2,    2,    2,    2,    0,    0,\n+     23,   16,   47,    0,   48,   33,   48,   34,    0,    0,    0,    0,   35,    0,    0,    0,\n+      0,   15,   29,   49,    2,    2,    2,    9,    2,    9,    2,    2,    2,    2,    2,    2,\n+      2,    2,    2,    2,    2,    2,    0,   17,   22,   16,   23,   47,   22,   38,   22,   39,\n+      0,    0,    0,   27,   31,    2,    9,    0,    0,   10,   29,   30,    2,    2,    2,    9,\n+      2,    2,    2,   30,    2,    2,    0,   17,   45,    0,    0,   35,   47,    0,    0,    0,\n+      9,   50,   51,    0,    0,    0,    0,    0,    0,   11,   29,    2,    2,    2,    2,    9,\n+      2,    2,    2,    2,    2,    2,   52,   53,   23,   23,   19,   31,   48,   33,   48,   34,\n+     54,    0,    0,    0,   35,    0,    0,    0,   30,   12,   29,   30,    2,    2,    2,    2,\n+      2,    2,    2,    2,    9,    0,    2,    2,    2,    2,   30,    2,    2,    2,    2,   30,\n+      0,    2,    2,    2,    9,    0,   55,    0,   35,   23,   22,   31,   31,   18,   48,   48,\n+     25,    0,   23,    0,    0,    0,    0,    0,    0,    2,    0,    2,    9,    0,    0,    0,\n+      0,    0,    0,    0,    0,   20,    0,    0,    0,    2,    2,   56,   56,   57,    0,    0,\n+     18,    2,    2,    2,    2,   30,    2,    2,    2,    2,    2,    2,    2,    2,    2,    9,\n+      0,   58,   21,   59,   22,   22,   20,   20,   46,   21,   11,   31,   11,    2,    2,   60,\n+     61,   61,   61,   61,   61,   62,   61,   61,   61,   61,   61,   61,   61,   61,   61,   61,\n+     61,   61,   61,   61,   61,   61,   61,   63,    0,    0,    0,    0,   64,    0,    0,    0,\n+      0,    2,    2,    2,    2,    2,   65,   45,   59,   66,   22,   22,   67,   68,   69,   70,\n+     71,    2,    2,    2,    2,    2,    1,    0,    5,    2,    2,    2,   23,   20,    2,    2,\n+     72,   71,   73,   74,   65,   73,   29,   29,    2,   52,   22,   53,    2,    2,    2,    2,\n+      2,    2,   75,   76,   77,   29,   29,   78,   79,    2,    2,    2,    2,    2,   29,   45,\n+      0,    2,   59,   80,    0,    0,    0,    0,   30,    2,   59,   47,    0,    0,    0,    0,\n+      0,    2,   59,    0,    0,    0,    0,    0,    0,    2,    2,    2,    2,    2,    2,    9,\n+      2,    9,   59,    0,    0,    0,    0,    0,    0,    2,    2,   81,   45,   22,   59,   20,\n+     48,   48,   48,   48,   15,   82,   83,   84,   85,   86,   87,    0,    0,    0,    0,   88,\n+      0,    9,    0,    0,   30,    0,   89,   81,   90,    2,    2,    2,    2,    9,    0,    0,\n+      0,   42,   42,   91,   92,    2,    2,    2,    2,    2,    2,    2,    2,   13,    9,    0,\n+      0,   93,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,\n+      9,   22,   80,   45,   22,   94,   61,    0,    0,   95,   96,   95,   95,   97,   98,    0,\n+      0,    2,    2,    2,    2,    2,    2,    2,    0,    2,    2,    9,    0,    0,    0,    0,\n+      0,    2,    2,    2,    2,    2,    2,    0,    0,    2,    2,    2,    2,   29,    0,    0,\n+      0,    2,    2,    2,    2,    2,    9,    0,    0,    2,    2,    2,   52,   99,   45,    0,\n+      0,    2,    2,  100,  101,  102,  103,   61,   63,  104,   16,   45,   22,   59,   21,   80,\n+     48,   48,   76,   11,   11,   11,  105,   46,   40,   11,  106,   74,    2,    2,    2,    2,\n+      2,    2,    2,  107,   22,   20,   20,   22,   48,   48,   22,  108,    2,    2,    2,    9,\n+      0,    0,    0,    0,    0,    0,  109,  110,  111,  111,  111,    0,    0,    0,    0,    0,\n+      0,  106,   74,    2,    2,    2,    2,    2,    2,   60,   61,   59,   25,   22,  112,   61,\n+      2,    2,    2,    2,  107,   22,   23,   45,   45,  102,   14,    0,    0,    0,    0,    0,\n+      0,    2,    2,   61,   18,   48,   23,  113,  102,  102,  102,  114,  115,    0,    0,    0,\n+      0,    2,    2,    2,    2,    2,    0,   30,    2,   11,   46,  116,  116,  116,   11,  116,\n+    116,   15,  116,  116,  116,   26,    0,   40,    0,    0,    0,  117,   51,   11,    5,    0,\n+      0,    0,    0,    0,    0,    0,  118,    0,    0,    0,    0,    0,    0,    0,    6,  119,\n+    120,   42,   42,    5,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  120,  120,\n+    121,  120,  120,  120,  120,  120,  120,  120,  120,    0,    0,  122,    0,    0,    0,    0,\n+      0,    0,    7,  122,    0,    0,    0,    0,    0,   46,    0,    0,    0,    0,    0,    0,\n+      0,    0,    0,    0,    0,    0,    0,    9,    0,    0,    0,    0,  123,  123,    0,    0,\n+      0,    2,    2,    2,    2,    0,    0,    0,   30,    0,    0,    0,    0,    0,    0,    0,\n+    124,    0,  123,  123,    0,    0,    0,    0,    0,    2,   53,    2,  108,    2,   10,    2,\n+      2,    2,   65,   19,   16,    0,    0,   31,    0,    2,    2,    0,    0,    0,    0,    0,\n+      0,   29,    2,    2,    2,    2,    2,    2,    2,    2,    2,  125,   23,   23,   23,   23,\n+     23,   23,   23,  126,    0,    0,    0,    0,    0,   11,   11,   11,   11,   11,   11,   11,\n+     11,   11,    2,    0,    0,    0,    0,    0,   52,    2,    2,    2,   22,   22,  127,  116,\n+      0,    2,    2,    2,  128,   20,   59,   20,  113,  102,  129,    0,    0,    0,    0,    0,\n+      0,   11,  130,    2,    2,    2,    2,    2,    2,    2,  131,   23,   22,   20,   48,  132,\n+    133,  134,    0,    0,    0,    0,    0,    0,    0,    2,    2,   52,   30,    2,    2,    2,\n+      2,    2,    2,    2,    2,   10,   22,   59,   99,   76,  135,  136,  137,    0,    0,    0,\n+      0,    2,  138,    2,    2,    2,    2,  139,    0,   30,    2,   42,    5,    0,   79,   15,\n+      2,   53,   22,  140,   52,   53,    2,    2,  105,   10,    9,    0,    0,    0,    0,    0,\n+      0,    2,    2,    2,    2,    2,  141,   21,   25,    0,    0,  142,  143,    0,    0,    0,\n+      0,    2,   65,   45,   23,   80,   47,  144,    0,   81,   81,   81,   81,   81,   81,   81,\n+     81,    0,    0,    0,    0,    0,    0,    0,    6,  120,  120,  120,  120,  121,    0,    0,\n+      0,    2,    2,    2,    2,    2,    9,    2,    2,    2,    9,    2,   30,    2,    2,    2,\n+      2,    2,   30,    2,    2,    2,   30,    9,    0,  128,   20,   27,   31,    0,    0,  145,\n+    146,    2,    2,   30,    2,   30,    2,    2,    2,    2,    2,    2,    0,   14,   37,    0,\n+    147,    2,    2,   13,   37,    0,   30,    2,    2,    2,    0,    0,    0,    0,    0,    0,\n+      0,    0,    0,    0,    0,   30,    2,    2,    9,    2,    2,   11,   41,    0,    0,    0,\n+      0,    2,    2,    2,    2,    2,   27,   38,    0,    2,    2,    2,  116,  116,  116,  116,\n+    116,  148,    2,    9,    0,    0,    0,    0,    0,    2,   14,   14,    0,    0,    0,    0,\n+      0,    9,    2,    2,    9,    2,    2,    2,    2,   30,    2,    9,    0,   30,    2,    0,\n+      0,  149,  150,  151,    2,    2,    2,    2,    2,    2,    2,    2,    2,   22,   22,   20,\n+     20,   20,   22,   22,  134,    0,    0,    0,    0,    0,  152,  152,  152,  152,  152,  152,\n+    152,  152,  152,  152,    2,    2,    2,    2,    2,   53,   52,   53,    0,    0,    0,    0,\n+    153,   11,   74,    2,    2,    2,    2,    2,    2,   18,   19,   21,   16,   24,   37,    0,\n+      0,    0,   31,    0,    0,    0,    0,    0,    0,   11,   49,    2,    2,    2,    2,    2,\n+      2,    2,    2,    2,  128,   20,   22,  154,   22,   21,  155,  156,    2,    2,    2,    2,\n+      2,    0,    0,   65,  157,    0,    0,    0,    0,    2,   13,    0,    0,    0,    0,    0,\n+      0,    2,   65,   25,   20,   20,   20,   22,   22,  108,  158,    0,    0,   56,  159,   31,\n+    160,   30,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,   23,\n+     19,   22,   22,  161,   44,    0,    0,    0,   49,  128,    0,    0,    0,    0,    0,    0,\n+      0,    2,    2,    2,    9,    9,    2,    2,   30,    2,    2,    2,    2,    2,    2,    2,\n+     30,    2,    2,    2,    2,    2,    2,    2,   10,   18,   19,   21,   22,  162,   31,    0,\n+      0,   11,   11,   30,    2,    2,    2,    9,   30,    9,    2,   30,    2,    2,   58,   17,\n+     23,   16,   23,   47,   32,   33,   32,   34,    0,    0,    0,    0,   35,    0,    0,    0,\n+      2,    2,   23,    0,   11,   11,   11,   46,    0,   11,   11,   46,    0,    0,    0,    0,\n+      0,    2,    2,   65,   25,   20,   20,   20,   22,   23,  126,   15,   17,    0,    0,    0,\n+      0,    2,    2,    2,    2,    2,    0,    0,  163,  164,    0,    0,    0,    0,    0,    0,\n+      0,   18,   19,   20,   20,   66,   99,   25,  160,   11,  165,    9,    0,    0,    0,    0,\n+      0,    2,    2,    2,    2,    2,    2,    2,   65,   25,   20,   20,    0,   48,   48,   11,\n+    166,   37,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    2,    2,   20,\n+      0,   23,   19,   20,   20,   21,   16,   82,  166,   38,    0,    0,    0,    0,    0,    0,\n+      0,    2,    2,    2,    2,    2,   10,  167,   25,   20,   22,   22,  165,    9,    0,    0,\n+      0,    2,    2,    2,    2,    2,    9,   43,  136,   23,   22,   20,   76,   21,   22,    0,\n+      0,    2,    2,    2,    9,    0,    0,    0,    0,    2,    2,    2,    2,    2,    2,   18,\n+     19,   20,   21,   22,  105,  166,   37,    0,    0,    2,    2,    2,    9,   30,    0,    2,\n+      2,    2,    2,   30,    9,    2,    2,    2,    2,   23,   23,   18,   32,   33,   12,  168,\n+    169,  170,  171,    0,    0,    0,    0,    0,    0,    2,    2,    2,    2,    0,    2,    2,\n+      2,   65,   25,   20,   20,    0,   22,   23,   29,  108,    0,   33,    0,    0,    0,    0,\n+      0,   52,   20,   22,   22,   22,  140,    2,    2,    2,  172,  173,   11,   15,  174,   72,\n+    175,    0,    0,    1,  147,    0,    0,    0,    0,   52,   20,   22,   16,   19,   20,    2,\n+      2,    2,    2,  158,  158,  158,  176,  176,  176,  176,  176,  176,   15,  177,    0,   30,\n+      0,   22,   20,   20,   31,   22,   22,   11,  166,    0,   61,   61,   61,   61,   61,   61,\n+     61,   66,   21,   82,   46,    0,    0,    0,    0,    2,    2,    2,    9,    2,   30,    2,\n+      2,   52,   22,   22,   31,    0,   38,   22,   27,   11,  159,  178,  174,    0,    0,    0,\n+      0,    2,    2,    2,   30,    9,    2,    2,    2,    2,    2,    2,    2,    2,   23,   23,\n+     47,   22,   35,   82,   68,    0,    0,    0,    0,    2,  179,   66,   47,    0,    0,    0,\n+      0,   11,  180,    2,    2,    2,    2,    2,    2,    2,    2,   23,   22,   20,   31,    0,\n+     48,   16,  143,    0,    0,    0,    0,    0,    0,  181,  181,  181,  181,  181,  181,  181,\n+    181,  182,  182,  182,  183,  184,  182,  181,  181,  185,  181,  181,  186,  187,  187,  187,\n+    187,  187,  187,  187,    0,    0,    0,    0,    0,   11,   11,   11,   46,    0,    0,    0,\n+      0,    2,    2,    2,    2,    2,    9,    0,   58,  188,   20,   20,   20,   20,   20,   20,\n+     20,   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,    0,    0,    0,\n+     40,  116,   26,    0,    0,    0,    0,    0,    0,    0,    0,    9,    0,    0,    0,    0,\n+      0,    2,    2,    2,    0,    0,    0,    0,    0,    2,    2,    2,    2,    2,    0,   58,\n+     37,    0,    6,  120,  120,  120,  121,    0,    0,   11,   11,   11,   49,    2,    2,    2,\n@@ -272,25 +278,26 @@\n-     44,    2,    2,    2,    2,    2,    2,    9,    9,    2,    2,    2,    2,    2,    2,   20,\n-     20,    2,    2,   42,   42,   42,   90,    0,    0,    O,    O,    O,   GB,    B,    B,   GB,\n-      O,    O,   WJ,FMPst,FMPst,    O,  CGJ,    B,    O,    B,VMAbv,VMAbv,VMAbv,    O,VMAbv,    B,\n-  CMBlw,CMBlw,CMBlw,VMAbv,VMPst, VAbv, VPst,CMBlw,    B, VPst, VPre, VPst, VBlw, VBlw, VBlw, VBlw,\n-   VAbv, VAbv, VAbv, VPst, VPst, VPst,    H, VPre, VPst,VMBlw,    O,    O, VAbv,   GB,VMAbv,VMPst,\n-  VMPst,    O,    B, VBlw,    O,    O, VPre, VPre,    O, VPre,    H,    O, VPst,FMAbv,    O,CMBlw,\n-      O, VAbv,    O, VAbv,    H,    O,VMBlw,VMAbv,CMAbv,   GB,   GB,    O, MBlw,CMAbv,CMAbv, VPst,\n-   VAbv,VMAbv,    O, VPst,    O, VPre, VPre,VMAbv,    B,    O,   CS,   CS,VMPst,    B, VAbv, VAbv,\n-      B,    R,    O,  HVM,    O,    O,FMBlw,    O,CMAbv,    O,CMBlw, VAbv, VBlw,    B,  SUB,  SUB,\n-    SUB,    O,  SUB,  SUB,    O,FMBlw,    O,    B, VPst, VBlw, VPre,VMAbv,VMBlw,VMPst,   IS, VAbv,\n-   MPst, MPre, MBlw, MBlw,    B, MBlw, MBlw, VPst,VMPst,VMPst,    B, MBlw, VPst, VPre, VAbv, VAbv,\n-  VMPst,VMPst,VMBlw,    B,VMPst, VBlw, VPst,  CGJ,  CGJ, VPst,VMAbv,VMAbv,FMAbv, FAbv,CMAbv,FMAbv,\n-  VMAbv,FMAbv, VAbv,   IS,FMAbv,    B,FMAbv,    B,  CGJ,   WJ,  CGJ,   GB,CMAbv,CMAbv,    B,   GB,\n-      B, VAbv,  SUB, FPst, FPst,VMBlw, FPst, FPst, FBlw,VMAbv,FMBlw, VAbv, VPre,    B, MPre, MBlw,\n-    SUB, FAbv, FAbv, MAbv,  SUB,   Sk, VPst, VAbv,VMAbv,VMAbv, FAbv,CMAbv, VPst,    H,    B,    O,\n-  SMAbv,SMBlw,SMAbv,SMAbv,SMAbv, VPst,   IS, VBlw, FAbv,VMPre,VMPre,FMAbv,CMBlw,VMBlw,VMBlw,VMAbv,\n-     CS,    O,FMAbv, ZWNJ,  CGJ,   WJ,   WJ,   WJ,    O,FMPst,    O,    O,    H, MPst, VPst,    H,\n-  VMAbv, VAbv,VMBlw,    B, VBlw, FPst, VPst, FAbv,VMPst,    B,CMAbv, VAbv, MBlw, MPst, MBlw,    H,\n-      O, VBlw, MPst, MPre, MAbv, MBlw,    O,    B, FAbv, FAbv, FPst, VBlw,    B,    B, VPre,    O,\n-  VMPst,   IS,    O,VMPst, VBlw, VPst,VMBlw,VMBlw,VMAbv,    O,   IS,VMBlw,    B,VMPst,VMAbv,VMPst,\n-     CS,   CS,    B,    N,    N,    O,   HN, VPre, VBlw, VAbv,   IS,CMAbv,    O, VPst,    B,    R,\n-      R,CMBlw, VAbv, VPre,VMAbv,VMAbv,    H, VAbv,CMBlw,FMAbv,    B,   CS,   CS,    H,CMBlw,VMPst,\n-      H,VMPst, VAbv,VMAbv, VPst,   IS,    R, MPst,    R, MPst,CMBlw,    B,FMBlw, VBlw,VMAbv,    R,\n-   MBlw, MBlw,   GB, FBlw, FBlw,CMAbv,   IS, VBlw,   IS,   GB, VAbv,    R,VMPst,    H,    H,    B,\n-      H,    B,VMBlw,    O, VBlw,\n+     46,    2,    2,    2,    2,    2,    2,   11,   11,    2,    2,    2,    2,    2,    2,   22,\n+     22,    2,    2,   44,   44,   44,   92,    0,    0,    O,    O,    O,   GB,    B,    B,    O,\n+     SB,    O,   SE,   GB,    O,    O,   WJ,FMPst,FMPst,    O,  CGJ,    B,    O,    B,VMAbv,VMAbv,\n+  VMAbv,    O,VMAbv,    B,CMBlw,CMBlw,CMBlw,VMAbv,VMPst, VAbv, VPst,CMBlw,    B, VPst, VPre, VPst,\n+   VBlw, VBlw, VBlw, VBlw, VAbv, VAbv, VAbv, VPst, VPst, VPst,    H, VPre, VPst,VMBlw,    O,    O,\n+   VAbv,   GB,VMAbv,VMPst,VMPst,    O,    B, VBlw,    O,    O, VPre, VPre,    O, VPre,    H,    O,\n+   VPst,FMAbv,    O,CMBlw,    O, VAbv,    O, VAbv,    H,    O,VMBlw,VMAbv,CMAbv,   GB,   GB,    O,\n+   MBlw,CMAbv,CMAbv, VPst, VAbv,VMAbv,    O, VPst,    O, VPre, VPre,VMAbv,    B,    O,   CS,   CS,\n+  VMPst,    B, VAbv, VAbv,    B,    R,    O,  HVM,    O,    O,FMBlw,    O,CMAbv,    O,CMBlw, VAbv,\n+   VBlw,    B,  SUB,  SUB,  SUB,    O,  SUB,  SUB,    O,FMBlw,    O,    B, VPst, VBlw, VPre,VMAbv,\n+  VMBlw,VMPst,   IS, VAbv, MPst, MPre, MBlw, MBlw,    B, MBlw, MBlw, VPst,VMPst,VMPst,    B, MBlw,\n+   VPst, VPre, VAbv, VAbv,VMPst,VMPst,VMBlw,    B,VMPst, VBlw, VPst,  CGJ,  CGJ, VPst,VMAbv,VMAbv,\n+  FMAbv, FAbv,CMAbv,FMAbv,VMAbv,FMAbv, VAbv,   IS,FMAbv,    B,FMAbv,    B,  CGJ,   WJ,  CGJ,   GB,\n+  CMAbv,CMAbv,    B,   GB,    B, VAbv,  SUB, FPst, FPst,VMBlw, FPst, FPst, FBlw,VMAbv,FMBlw, VAbv,\n+   VPre,    B, MPre, MBlw,  SUB, FAbv, FAbv, MAbv,  SUB,   Sk, VPst, VAbv,VMAbv,VMAbv, FAbv,CMAbv,\n+   VPst,    H,    B,    O,SMAbv,SMBlw,SMAbv,SMAbv,SMAbv, VPst,   IS, VBlw, FAbv,VMPre,VMPre,FMAbv,\n+  CMBlw,VMBlw,VMBlw,VMAbv,   CS,    O,FMAbv, ZWNJ,  CGJ,   WJ,   WJ,   WJ,    O,FMPst,    O,   SB,\n+     SE,    O,    H, MPst, VPst,    H,VMAbv, VAbv,VMBlw,    B, VBlw, FPst, VPst, FAbv,VMPst,    B,\n+  CMAbv, VAbv, MBlw, MPst, MBlw,    H,    O, VBlw, MPst, MPre, MAbv, MBlw,    O,    B, FAbv, FAbv,\n+   FPst, VBlw,    B,    B, VPre,    O,VMPst,   IS,    O,VMPst, VBlw, VPst,VMBlw,VMBlw,VMAbv,    O,\n+     IS,VMBlw,    B,VMPst,VMAbv,VMPst,   CS,   CS,    B,    N,    N,    O,   HN, VPre, VBlw, VAbv,\n+     IS,CMAbv,    O, VPst,    B,    R,    R,CMBlw, VAbv, VPre,VMAbv,VMAbv,    H, VAbv,CMBlw,FMAbv,\n+      B,   CS,   CS,    H,CMBlw,VMPst,    H,VMPst, VAbv,VMAbv, VPst,   IS,    R, MPst,    R, MPst,\n+  CMBlw,    B,FMBlw, VBlw,VMAbv,    R, MBlw, MBlw,   GB, FBlw, FBlw,CMAbv,   IS, VBlw,   IS,   GB,\n+   VAbv,    R,VMPst,    G,    G,    J,    J,    J,   SB,   SE,    J,   HR,    G,    G,   HM,   HM,\n+     HM,    O, VBlw,\n@@ -299,1 +306,1 @@\n-hb_use_u16[784] =\n+hb_use_u16[808] =\n@@ -301,49 +308,51 @@\n-    0,  0,  1,  2,  0,  0,  0,  0,  0,  0,  3,  4,  0,  5,  0,  0,\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  0,  0,  0,\n-    0,  0,  0,  0,  7,  0,  0,  0,  0,  0,  0,  0,  8,  9, 10, 11,\n-    0,  0,  0,  0,  9, 12,  0,  0, 13,  9,  9, 14, 15, 16, 17, 18,\n-   19, 20, 21, 22, 23, 24, 17, 25, 26, 20, 21, 27, 28, 29, 30, 31,\n-   32, 33, 21, 34, 35,  0, 17, 36, 37, 20, 21, 38, 23, 39, 17, 40,\n-   41, 42, 43, 44, 45, 46, 30,  0, 47, 48, 21, 49, 50, 51, 17,  0,\n-   52, 48, 21, 53, 50, 54, 17, 55, 56, 48,  9, 57, 58, 59, 17,  0,\n-   60, 61,  9, 62, 63, 64, 30, 65, 66, 67,  9, 68, 69,  9, 70, 71,\n-   72, 73, 74, 75, 76,  0,  0,  0,  9,  9, 77, 78, 79, 80, 81, 82,\n-   83, 84,  0,  0,  0,  0,  0,  0,  9, 85,  9, 86,  9, 87, 88, 89,\n-    9,  9,  9, 90, 91, 92,  2,  0, 93,  0,  9,  9,  9,  9,  9, 94,\n-   95,  9, 96,  0,  0,  0,  0,  0, 97, 98, 99,100, 30,  9,101,102,\n-    9,  9,103,  9,104,105,  0,  0,  9,106,  9,  9,  9,107,108,109,\n-    2,  2,  0,  0,  0,  0,  0,  0,110,  9,  9,111,112,  2,113,114,\n-  115,  9,116,  9,  9,  9,117,118,  9,  9,119,120,121,  0,  0,  0,\n-    0,  0,  0,  0,  0,122,123,124,  0,  0,  0,  0,  0,  0,  0,125,\n-  126,127,128,  0,  0,  0,129,130,131,  0,  0,  0,  0,  0,  0,132,\n-    0,  0,  0,  0,133,  0,  0,  0,  0,  0,  0,  9,  9,  9,134,135,\n-  136,  9,137,  0,  9,  9,  9,138,139,  9,  9,140,141,  2,142,143,\n-    9,  9,144,  9,145,146,  0,  0,147,  9,  9,148,149,  2,150, 98,\n-    9,  9,151,152,153,  2,  9,154,  9,  9,  9,155,156,  0,157,158,\n-    0,  0,  0,  0,  9,  9,159,  2,160,  0,  0,  0,  0,  0,  0,  0,\n-    0,  0,  0,  0,  0,  0,  0,161,  0,  0,  0,  0,  0,  0,  0,162,\n-    0,  0,  0,  0,  0,  0,  0,163,163,164, 33,165,  0,  0,  0,  0,\n-  166,167,  9,168, 94,  0,  0,  0,  0,  0,  0,  0, 69,  9,169,  0,\n-    9,170,171,  0,  0,  0,  0,  0,  9,  9,172,  2,  0,  0,  0,  0,\n-    9,  9,173,170,  0,  0,  0,  0,  0,  0,  0,  9,174,175,  0,  9,\n-  176,  0,  0,177,178,  0,  0,  0,179,  9,  9,180,181,182,183,184,\n-  185,  9,  9,186,187,  0,  0,  0,188,  9,189,190,191,  9,  9,192,\n-  185,  9,  9,193,194,105,195,102,  9, 33,196,197,198,  0,  0,  0,\n-  199,200, 94,  9,  9,201,202,  2,203, 20, 21,204,205,206,207,208,\n-    9,  9,  9,209,210,211,212,  0,195,  9,  9,213,214,  2,  0,  0,\n-    9,  9,215,216,217,218,  0,  0,  9,  9,  9,219,220,  2,  0,  0,\n-    9,  9,221,222,  2,  0,  0,  0,  9,223,224,103,225,  0,  0,  0,\n-    9,  9,226,227,  0,  0,  0,  0,228,229,  9,230,231,  2,  0,  0,\n-    0,  0,232,  9,  9,233,234,  0,235,  9,  9,236,237,238,  9,  9,\n-  239,240,  0,  0,  0,  0,  0,  0, 21,  9,215,241,  7,  9, 70, 18,\n-    9,242, 73,243,  0,  0,  0,  0,244,  9,  9,245,246,  2,247,  9,\n-  248,249,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,250,\n-  251, 48,  9,252,253,  2,  0,  0,  9,  9,  9,  9,  9,  9,  9,  9,\n-    9,  9,  9,254,255,256,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,\n-    9,  9,  9,257,  0,  0,  0,  0,  9,  9,  9,  9,258,259,260,260,\n-  261,262,  0,  0,  0,  0,263,  0,  9,  9,  9,  9,  9,264,  0,  0,\n-    9,  9,  9,  9,  9,  9,105, 70, 94,265,  0,  0,  0,  0,  0,  0,\n-    0,  0,  0,  0,  0,  0,  0,266,  9,  9, 70,267,268,  0,  0,  0,\n-    0,  9,269,  0,  9,  9,270,  2,  0,  0,  0,  0,  0,  9,271,  2,\n-    9,  9,  9,  9,272,  2,  0,  0,129,129,129,129,129,129,129,129,\n-  160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,129,\n+    0,  0,  1,  2,  0,  3,  0,  3,  0,  0,  4,  5,  0,  6,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  7,  0,  0,  0,\n+    0,  0,  0,  0,  8,  0,  0,  0,  0,  0,  0,  0,  9, 10, 11, 12,\n+    0,  0,  0,  0, 10, 13,  0,  0, 14, 10, 10, 15, 16, 17, 18, 19,\n+   20, 21, 22, 23, 24, 25, 18, 26, 27, 21, 22, 28, 29, 30, 31, 32,\n+   33, 34, 22, 35, 36,  0, 18, 37, 38, 21, 22, 39, 24, 40, 18, 41,\n+   42, 43, 44, 45, 46, 47, 31,  0, 48, 49, 22, 50, 51, 52, 18,  0,\n+   53, 49, 22, 54, 51, 55, 18, 56, 57, 49, 10, 58, 59, 60, 18,  0,\n+   61, 62, 10, 63, 64, 65, 31, 66, 67, 68, 10, 69, 70, 10, 71, 72,\n+   73, 74, 75, 76, 77,  0,  0,  0, 10, 10, 78, 79, 80, 81, 82, 83,\n+   84, 85,  0,  0,  0,  0,  0,  0, 10, 86, 10, 87, 10, 88, 89, 90,\n+   10, 10, 10, 91, 92, 93,  2,  0, 94,  0, 10, 10, 10, 10, 10, 95,\n+   96, 10, 97,  0,  0,  0,  0,  0, 98, 99,100,101, 31, 10,102,103,\n+   10, 10,104, 10,105,106,  0,  0, 10,107, 10, 10, 10,108,109,110,\n+    2,  2,  0,  0,  0,  0,  0,  0,111, 10, 10,112,113,  2,114,115,\n+  116, 10,117, 10, 10, 10,118,119, 10, 10,120,121,122,  0,  0,  0,\n+    0,  0,  0,  0,  0,123,124,125,  0,  0,  0,  0,  0,  0,  0,126,\n+  127,128,129,  0,  0,  0,130,131,132,  0,  0,  0,  0,  0,  0,133,\n+    0,  0,  0,  0,134,  0,  0,  0,  0,  0,  0,  0,  0,  0,135,  0,\n+    0,  0,  0, 10, 10, 10,136,137,  0,  0,138,  0,  0,  0,  0,  0,\n+  139, 10,140,  0, 10, 10, 10,141,142, 10, 10,143,144,  2,145,146,\n+   10, 10,147, 10,148,149,  0,  0,150, 10, 10,151,152,  2,153, 99,\n+   10, 10,154,155,156,  2, 10,157, 10, 10, 10,158,159,  0,160,161,\n+    0,  0,  0,  0, 10, 10,162,  2,163,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,164,  0,  0,  0,  0,  0,  0,  0,165,\n+    0,  0,  0,  0,  0,  0,  0,166,166,167, 34,168,  0,  0,  0,  0,\n+  169,170, 10,171, 95,  0,  0,  0,  0,  0,  0,  0, 70, 10,172,  0,\n+   10,173,174,  0,  0,  0,  0,  0, 10, 10,175,  2,  0,  0,  0,  0,\n+   10, 10,176,173,  0,  0,  0,  0,  0,  0,  0, 10,177,178,  0, 10,\n+  179,  0,  0,180,181,  0,  0,  0,182, 10, 10,183,184,185,186,187,\n+  188, 10, 10,189,190,  0,  0,  0,191, 10,192,193,194, 10, 10,195,\n+  188, 10, 10,196,197,106,198,103, 10, 34,199,200,201,  0,  0,  0,\n+  202,203, 95, 10, 10,204,205,  2,206, 21, 22,207,208,209,210,211,\n+   10, 10, 10,212,213,214,215,  0,198, 10, 10,216,217,  2,  0,  0,\n+   10, 10,218,219,220,221,  0,  0, 10, 10, 10,222,223,  2,  0,  0,\n+   10, 10,224,225,  2,  0,  0,  0, 10,226,227,104,228,  0,  0,  0,\n+   10, 10,229,230,  0,  0,  0,  0,231,232, 10,233,234,  2,  0,  0,\n+    0,  0,235, 10, 10,236,237,  0,238, 10, 10,239,240,241, 10, 10,\n+  242,243,  0,  0,  0,  0,  0,  0, 22, 10,218,244,  8, 10, 71, 19,\n+   10,245, 74,246,  0,  0,  0,  0,247, 10, 10,248,249,  2,250, 10,\n+  251,252,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10,253,\n+  254, 49, 10,255,256,  2,  0,  0,257,257,257,257,257,257,257,257,\n+  257,257,257,258,259,260,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,\n+   10, 10, 10,261,  0,  0,  0,  0, 10, 10, 10, 10,262,263,264,264,\n+  265,266,  0,  0,  0,  0,267,  0, 10, 10, 10, 10, 10, 10, 10, 10,\n+   10, 10, 10, 10, 10,268,  0,  0, 10, 10, 10, 10, 10, 10,106, 71,\n+   95,269,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,270,\n+   10, 10, 71,271,272,  0,  0,  0,  0, 10,273,  0, 10, 10,274,  2,\n+    0,  0,  0,  0,  0, 10,275,  2, 10, 10, 10, 10,276,  2,  0,  0,\n+  130,130,130,130,130,130,130,130,163,163,163,163,163,163,163,163,\n+  163,163,163,163,163,163,163,130,\n@@ -360,1 +369,1 @@\n-  return u<921600u?hb_use_u8[2777+(((hb_use_u8[593+(((hb_use_u16[((hb_use_u8[113+(((hb_use_b4(hb_use_u8,u>>1>>3>>3>>5))<<5)+((u>>1>>3>>3)&31u))])<<3)+((u>>1>>3)&7u)])<<3)+((u>>1)&7u))])<<1)+((u)&1u))]:O;\n+  return u<921600u?hb_use_u8[2809+(((hb_use_u8[593+(((hb_use_u16[((hb_use_u8[113+(((hb_use_b4(hb_use_u8,u>>1>>3>>3>>5))<<5)+((u>>1>>3>>3)&31u))])<<3)+((u>>1>>3)&7u)])<<3)+((u>>1)&7u))])<<1)+((u)&1u))]:O;\n@@ -367,1 +376,1 @@\n-hb_use_u8[3413] =\n+hb_use_u8[3483] =\n@@ -378,1 +387,1 @@\n-      1,   20,    1,    1,    1,    1,   21,    1,    1,    1,    1,    1,    1,    1,   22,    1,\n+      1,   20,    1,    1,    1,    1,   21,    1,   22,    1,    1,    1,    1,    1,   23,   24,\n@@ -380,47 +389,49 @@\n-      1,    1,    1,    1,    1,    1,    1,    1,    1,   23,   24,   25,   26,    1,    1,    1,\n-      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,   27,\n-     28,    1,    1,    1,    1,    1,   29,    1,    1,    1,    1,   30,   31,    1,   32,   33,\n-     34,   35,   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,    1,   46,   47,   48,\n-     49,   50,   50,   50,   50,   51,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,\n-      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,   52,   53,    1,    1,    1,\n-     54,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,   50,   55,    1,    1,\n-      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,   56,    1,    1,\n-      1,    1,   57,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,\n-      1,    1,   58,   59,    1,   60,    1,    1,    1,    1,   61,    1,    1,    1,    1,    1,\n-      1,   62,   63,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,\n-     62,    0,    1,    0,    0,    0,    2,    3,    0,    0,    0,    0,    0,    0,    0,    0,\n-      0,    0,    0,    4,    0,    0,    0,    0,    0,    0,    0,    5,    0,    0,    0,    0,\n-      0,    0,    0,    0,    0,    0,    0,    6,    7,    0,    0,    8,    0,    0,    0,    0,\n-      0,    9,   10,   11,   12,   13,   14,   15,   16,   17,   18,   19,   20,   21,   22,   23,\n-     24,   25,   26,   27,   28,   29,   30,   31,   32,   33,   34,   35,   36,   37,   38,   39,\n-     40,   41,   42,   43,   36,   44,   45,   46,   47,   48,   49,   50,   51,   52,   53,   54,\n-      0,   55,   56,   57,   58,   59,    0,    0,    0,   60,   61,   62,   63,   55,   64,   65,\n-     66,   67,   55,   55,   68,   69,   70,    0,    0,   71,   72,   73,   74,   55,   75,   76,\n-      0,   77,   55,   78,   79,   80,    0,    0,    0,   81,   82,   83,   84,   85,   86,   55,\n-     87,   55,   88,   89,    0,    0,    0,   90,   91,    0,    0,    0,    0,    0,    0,    0,\n-     92,   93,   94,    0,   95,   96,    0,    0,   97,    0,    0,    0,    0,    0,    0,   98,\n-      0,    0,   99,   55,  100,    0,    0,    0,    0,  101,  102,   55,  103,  104,  105,  106,\n-    107,   55,  108,  109,    0,  110,  111,  112,  113,   55,  114,  115,  116,   55,  117,  118,\n-    119,    0,    0,    0,    0,    0,    0,   55,  120,  121,    0,    0,    0,    0,    0,    0,\n-    122,    0,    0,    0,    0,    0,    0,    0,  123,    0,    0,    0,  124,  125,  126,    0,\n-      0,  127,  128,  129,    0,    0,    0,   50,  130,    0,    0,    0,    0,  131,  132,    0,\n-      0,   55,  133,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   55,  134,    0,\n-      0,    0,   99,  135,   99,  136,  137,  138,    0,  139,  140,  141,  142,  143,  144,  145,\n-      0,  146,  147,  148,  149,  143,  150,  151,  152,  153,  154,  155,    0,  156,  157,  158,\n-    159,  160,  161,  162,  163,    0,    0,    0,    0,   55,  164,  165,  166,  167,  168,  169,\n-      0,    0,    0,    0,    0,   55,  170,  171,    0,   55,  172,  173,    0,   55,  174,   66,\n-      0,  175,  176,  177,    0,    0,    0,    0,    0,   55,  178,    0,    0,    0,    0,    0,\n-      0,  179,  180,  181,    0,    0,  182,  183,  184,  185,  186,  187,   55,  188,    0,    0,\n-      0,  189,  190,  191,  192,  193,  194,    0,    0,  195,  196,  197,  198,  199,   66,    0,\n-      0,    0,    0,    0,    0,    0,    0,    0,  200,  201,  202,  203,    0,    0,    0,    0,\n-      0,   55,   55,   55,   55,   55,   55,   55,   55,   55,  204,  205,    0,    0,    0,    0,\n-      0,    0,    0,    0,    0,    0,    0,   66,    0,   55,  206,    0,    0,    0,    0,    0,\n-      0,   55,   55,  207,  208,  209,    0,    0,  210,   55,   55,   55,   55,   55,   55,  211,\n-      0,   55,   55,   55,  212,  213,    0,    0,    0,    0,    0,    0,  214,    0,    0,    0,\n-      0,   55,  215,  216,    0,    0,    0,    0,    0,    0,    0,    0,    0,   99,  217,   55,\n-    218,    0,    0,    0,    0,    0,    0,   99,  219,   55,   55,  220,    0,    0,    0,    0,\n-      0,  221,  221,  221,  221,  221,  221,  221,  221,  222,  222,  222,  222,  222,  222,  222,\n-    223,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,\n-      0,    2,    2,    2,    2,    2,    0,    0,    0,    3,    0,    0,    0,    0,    0,    4,\n-      0,    0,    5,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,    0,\n-      0,    0,    0,    0,    0,    0,    0,    0,    6,    7,    0,    0,    0,    0,    0,    0,\n+      1,    1,    1,    1,    1,    1,    1,    1,    1,   25,   26,   27,   28,    1,    1,    1,\n+      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,   29,\n+     30,    1,    1,    1,    1,    1,   31,    1,    1,    1,    1,   32,   33,    1,   34,   35,\n+     36,   37,   38,   39,   40,   41,   42,   43,   44,   45,   46,   47,    1,   48,   49,   50,\n+     51,   52,   52,   52,   52,   53,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,\n+      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,   54,   55,    1,    1,    1,\n+     56,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,   57,   58,    1,    1,\n+      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,   59,    1,    1,\n+      1,    1,   60,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,\n+      1,    1,   61,   62,    1,   63,    1,    1,    1,    1,   64,    1,    1,    1,    1,    1,\n+      1,   65,   66,   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,\n+     65,    0,    1,    2,    2,    0,    3,    4,    0,    0,    0,    0,    0,    0,    0,    0,\n+      0,    0,    0,    5,    0,    0,    0,    0,    0,    0,    0,    6,    0,    0,    0,    0,\n+      0,    0,    0,    0,    0,    0,    0,    7,    8,    0,    0,    9,    0,    0,    0,    0,\n+      0,   10,   11,   12,   13,   14,   15,   16,   17,   18,   19,   20,   21,   22,   23,   24,\n+     25,   26,   27,   28,   29,   30,   31,   32,   33,   34,   35,   36,   37,   38,   39,   40,\n+     41,   42,   43,   44,   37,   45,   46,   47,   48,   49,   50,   51,   52,   53,   54,   55,\n+      0,   56,   57,   58,   59,   60,    0,    0,    0,   61,   62,   63,   64,   56,   65,   66,\n+     67,   68,   56,   56,   69,   70,   71,    0,    0,   72,   73,   74,   75,   56,   76,   77,\n+      0,   78,   56,   79,   80,   81,    0,    0,    0,   82,   83,   84,   85,   86,   87,   56,\n+     88,   56,   89,   90,    0,    0,    0,   91,   92,    0,    0,    0,    0,    0,    0,    0,\n+     93,   94,   95,    0,   96,   97,    0,    0,   98,    0,    0,    0,    0,    0,    0,   99,\n+      0,    0,    0,    0,    0,    0,    0,    0,  100,    0,  101,   56,  102,    0,    0,    0,\n+      0,    0,  103,    0,    0,    0,    0,    0,    0,  104,  105,   56,  106,  107,  108,  109,\n+    110,   56,  111,  112,    0,  113,  114,  115,  116,   56,  117,  118,  119,   56,  120,  121,\n+    122,    0,    0,    0,    0,    0,    0,   56,  123,  124,    0,    0,    0,    0,    0,    0,\n+    125,    0,    0,    0,    0,    0,    0,    0,  126,    0,    0,    0,  127,  128,  129,    0,\n+      0,  130,  131,  132,    0,    0,    0,   51,  133,    0,    0,    0,    0,  134,  135,    0,\n+      0,   56,  136,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   56,  137,    0,\n+      0,    0,  101,  138,  101,  139,  140,  141,    0,  142,  143,  144,  145,  146,  147,  148,\n+      0,  149,  150,  151,  152,  146,  153,  154,  155,  156,  157,  158,    0,  159,  160,  161,\n+    162,  163,  164,  165,  166,    0,    0,    0,    0,   56,  167,  168,  169,  170,  171,  172,\n+      0,    0,    0,    0,    0,   56,  173,  174,    0,   56,  175,  176,    0,   56,  177,   67,\n+      0,  178,  179,  180,    0,    0,    0,    0,    0,   56,  181,    0,    0,    0,    0,    0,\n+      0,  182,  183,  184,    0,    0,  185,  186,  187,  188,  189,  190,   56,  191,    0,    0,\n+      0,  192,  193,  194,  195,  196,  197,    0,    0,  198,  199,  200,  201,  202,   67,    0,\n+      0,    0,    0,    0,    0,    0,    0,    0,  203,  204,  205,  206,    0,    0,    0,    0,\n+      0,  207,  207,  207,  207,  207,  207,  207,  207,  207,  208,  209,    0,    0,    0,    0,\n+      0,    0,    0,    0,    0,    0,    0,   67,    0,   56,  210,    0,    0,    0,    0,    0,\n+      0,   56,   56,  211,  212,  213,    0,    0,  214,   56,   56,   56,   56,   56,   56,   56,\n+     56,   56,   56,   56,   56,   56,   56,  215,    0,   56,   56,   56,  216,  217,    0,    0,\n+      0,    0,    0,    0,  218,    0,    0,    0,    0,   56,  219,  220,    0,    0,    0,    0,\n+      0,    0,    0,    0,    0,  101,  221,   56,  222,    0,    0,    0,    0,    0,    0,  101,\n+    223,   56,   56,  224,    0,    0,    0,    0,    0,  225,  225,  225,  225,  225,  225,  225,\n+    225,  226,  226,  226,  226,  226,  226,  226,  227,    0,    0,    0,    0,    0,    0,    0,\n+      0,    0,    0,    0,    0,    0,    0,    1,    0,    2,    2,    2,    2,    2,    0,    0,\n+      0,    0,    0,    0,    0,    0,    3,    4,    0,    5,    0,    0,    0,    0,    0,    6,\n+      0,    0,    7,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,    0,\n+      0,    0,    0,    0,    0,    0,    0,    0,    8,    9,    0,    0,    0,    0,    0,    0,\n@@ -428,155 +439,157 @@\n-      2,    2,    2,    2,    2,    2,    8,    9,    9,    9,    9,    0,    0,    0,    7,   10,\n-      0,    2,    2,    2,    2,   11,   12,    0,    0,    9,   13,    2,    2,    2,    2,    2,\n-      2,    2,    2,    2,    2,    2,   14,   15,   16,   17,   18,   19,   20,   14,   21,   22,\n-     23,   10,   24,   25,   18,    2,    2,    2,    2,    2,   18,    0,    2,    2,    2,    2,\n-      2,    0,    2,    2,    2,    2,    2,    2,    2,   26,   27,   28,    2,    2,    2,    7,\n-     28,    7,   28,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    7,    2,    2,\n-      2,    7,    7,    0,    2,    2,    0,   15,   16,   17,   18,   29,   30,   31,   30,   32,\n-      0,    0,    0,    0,   33,    0,    0,    2,   28,    2,    0,    0,    0,    0,    0,    7,\n-     34,   10,   13,   28,    2,    2,    7,    0,   28,    7,    2,   28,    7,    2,    0,   35,\n-     16,   17,   29,    0,   25,   36,   25,   37,    0,   38,    0,    0,    0,   28,    2,    7,\n-      7,    0,    0,    0,    2,    2,    2,    2,    2,   39,   40,   41,    0,    0,    0,    0,\n-      0,   10,   13,   28,    2,    2,    2,    2,   28,    2,   28,    2,    2,    2,    2,    2,\n-      2,    7,    2,   28,    2,    2,    0,   15,   16,   17,   18,   19,   25,   20,   33,   22,\n-      0,    0,    0,    0,    0,   28,   39,   39,   42,   10,   27,   28,    2,    2,    2,    7,\n-     28,    7,    2,   28,    2,    2,    0,   15,   43,    0,    0,   25,   20,    0,    0,    2,\n-     28,   28,    0,    0,    0,    0,    0,    0,    0,    0,   44,   28,    2,    2,    7,    0,\n-      2,    7,    2,    2,    0,   28,    7,    7,    2,    0,   28,    7,    0,    2,    7,    0,\n-      2,    2,    2,    2,    2,    2,    0,    0,   21,   14,   45,    0,   46,   31,   46,   32,\n-      0,    0,    0,    0,   33,    0,    0,    0,    0,   13,   27,   47,    2,    2,    2,    7,\n-      2,    7,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    0,   15,\n-     20,   14,   21,   45,   20,   36,   20,   37,    0,    0,    0,   25,   29,    2,    7,    0,\n-      0,    8,   27,   28,    2,    2,    2,    7,    2,    2,    2,   28,    2,    2,    0,   15,\n-     43,    0,    0,   33,   45,    0,    0,    0,    7,   48,   49,    0,    0,    0,    0,    0,\n-      0,    9,   27,    2,    2,    2,    2,    7,    2,    2,    2,    2,    2,    2,   50,   51,\n-     21,   21,   17,   29,   46,   31,   46,   32,   52,    0,    0,    0,   33,    0,    0,    0,\n-     28,   10,   27,   28,    2,    2,    2,    2,    2,    2,    2,    2,    7,    0,    2,    2,\n-      2,    2,   28,    2,    2,    2,    2,   28,    0,    2,    2,    2,    7,    0,   53,    0,\n-     33,   21,   20,   29,   29,   16,   46,   46,   23,    0,   21,    0,    0,    0,    0,    0,\n-      0,    2,    0,    2,    7,    0,    0,    0,    0,    0,    0,    0,    0,   18,    0,    0,\n-      0,    2,    2,   54,   54,   55,    0,    0,   16,    2,    2,    2,    2,   28,    2,    2,\n-      2,    2,    2,    2,    2,    2,    2,    7,    0,   56,   19,   57,   20,   20,   18,   18,\n-     44,   19,    9,   29,    9,    2,    2,   58,   59,   59,   59,   59,   59,   60,   59,   59,\n-     59,   59,   59,   59,   59,   59,   59,   59,   59,   59,   59,   59,   59,   59,   59,   61,\n-      0,    0,    0,    0,   62,    0,    0,    0,    0,    2,    2,    2,    2,    2,   63,   43,\n-     57,   64,   20,   20,   65,   66,   67,   68,   69,    2,    2,    2,    2,    2,    1,    0,\n-      3,    2,    2,    2,   21,   18,    2,    2,   70,   69,   71,   72,   63,   71,   27,   27,\n-      2,   50,   20,   51,    2,    2,    2,    2,    2,    2,   73,   74,   75,   27,   27,   76,\n-     77,    2,    2,    2,    2,    2,   27,   43,    0,    2,   57,   78,    0,    0,    0,    0,\n-     28,    2,   57,   45,    0,    0,    0,    0,    0,    2,   57,    0,    0,    0,    0,    0,\n-      0,    2,    2,    2,    2,    2,    2,    7,    2,    7,   57,    0,    0,    0,    0,    0,\n-      0,    2,    2,   79,   43,   20,   57,   18,   46,   46,   46,   46,   13,   80,   81,   82,\n-     83,   84,   85,    0,    0,    0,    0,   86,    0,    7,    0,    0,   28,    0,   87,   79,\n-     88,    2,    2,    2,    2,    7,    0,    0,    0,   40,   40,   89,   90,    2,    2,    2,\n-      2,    2,    2,    2,    2,   11,    7,    0,    0,   91,    2,    2,    2,    2,    2,    2,\n-      2,    2,    2,    2,    2,    2,    2,    2,    7,   20,   78,   43,   20,   92,   59,    0,\n-      0,   93,   94,   93,   93,   95,   96,    0,    0,    2,    2,    2,    2,    2,    2,    2,\n-      0,    2,    2,    7,    0,    0,    0,    0,    0,    2,    2,    2,    2,    2,    2,    0,\n-      0,    2,    2,    2,    2,   27,    0,    0,    0,    2,    2,    2,    2,    2,    7,    0,\n-      0,    2,    2,    2,   50,   97,   43,    0,    0,    2,    2,   98,   99,  100,  101,   59,\n-     61,  102,   14,   43,   20,   57,   19,   78,   46,   46,   74,    9,    9,    9,  103,   44,\n-     38,    9,  104,   72,    2,    2,    2,    2,    2,    2,    2,  105,   20,   18,   18,   20,\n-     46,   46,   20,  106,    2,    2,    2,    7,    0,    0,    0,    0,    0,    0,  107,  108,\n-    109,  109,  109,    0,    0,    0,    0,    0,    0,  104,   72,    2,    2,    2,    2,    2,\n-      2,   58,   59,   57,   23,   20,  110,   59,    2,    2,    2,    2,  105,   20,   21,   43,\n-     43,  100,   12,    0,    0,    0,    0,    0,    0,    2,    2,   59,   16,   46,   21,  111,\n-    100,  100,  100,  112,  113,    0,    0,    0,    0,    2,    2,    2,    2,    2,    0,   28,\n-      2,    9,   44,  114,  114,  114,    9,  114,  114,   13,  114,  114,  114,   24,    0,   38,\n-      0,    0,    0,  115,   49,    9,    3,    0,    0,    0,    0,    0,    0,    0,  116,    0,\n-      0,    0,    0,    0,    0,    0,    4,  117,  118,   40,   40,    3,    0,    0,    0,    0,\n-      0,    0,    0,    0,    0,    0,  118,  118,  119,  118,  118,  118,  118,  118,  118,  118,\n-    118,    0,    0,  120,    0,    0,    0,    0,    0,    0,    5,  120,    0,    0,    0,    0,\n-      0,   44,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    7,\n-      0,    2,    2,    2,    2,    0,    0,    0,   28,    0,    0,    0,    0,    0,    0,    0,\n-    121,    2,   51,    2,  106,    2,    8,    2,    2,    2,   63,   17,   14,    0,    0,   29,\n-      0,    2,    2,    0,    0,    0,    0,    0,    0,   27,    2,    2,    2,    2,    2,    2,\n-      2,    2,    2,  122,   21,   21,   21,   21,   21,   21,   21,  123,    0,    0,    0,    0,\n-      0,    9,    9,    9,    9,    9,    9,    9,    9,    9,    2,    0,    0,    0,    0,    0,\n-     50,    2,    2,    2,   20,   20,  124,  114,    0,    2,    2,    2,  125,   18,   57,   18,\n-    111,  100,  126,    0,    0,    0,    0,    0,    0,    9,  127,    2,    2,    2,    2,    2,\n-      2,    2,  128,   21,   20,   18,   46,  129,  130,  131,    0,    0,    0,    0,    0,    0,\n-      0,    2,    2,   50,   28,    2,    2,    2,    2,    2,    2,    2,    2,    8,   20,   57,\n-     97,   74,  132,  133,  134,    0,    0,    0,    0,    2,  135,    2,    2,    2,    2,  136,\n-      0,   28,    2,   40,    3,    0,   77,   13,    2,   51,   20,  137,   50,   51,    2,    2,\n-    103,    8,    7,    0,    0,    0,    0,    0,    0,    2,    2,    2,    2,    2,  138,   19,\n-     23,    0,    0,  139,  140,    0,    0,    0,    0,    2,   63,   43,   21,   78,   45,  141,\n-      0,   79,   79,   79,   79,   79,   79,   79,   79,    0,    0,    0,    0,    0,    0,    0,\n-      4,  118,  118,  118,  118,  119,    0,    0,    0,    2,    2,    2,    2,    2,    7,    2,\n-      2,    2,    7,    2,   28,    2,    2,    2,    2,    2,   28,    2,    2,    2,   28,    7,\n-      0,  125,   18,   25,   29,    0,    0,  142,  143,    2,    2,   28,    2,   28,    2,    2,\n-      2,    2,    2,    2,    0,   12,   35,    0,  144,    2,    2,   11,   35,    0,   28,    2,\n-      2,    2,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   28,    2,    2,\n-      7,    2,    2,    9,   39,    0,    0,    0,    0,    2,    2,    2,    2,    2,   25,   36,\n-      0,    2,    2,    2,  114,  114,  114,  114,  114,  145,    2,    7,    0,    0,    0,    0,\n-      0,    2,   12,   12,    0,    0,    0,    0,    0,    7,    2,    2,    7,    2,    2,    2,\n-      2,   28,    2,    7,    0,   28,    2,    0,    0,  146,  147,  148,    2,    2,    2,    2,\n-      2,    2,    2,    2,    2,   20,   20,   18,   18,   18,   20,   20,  131,    0,    0,    0,\n-      0,    0,  149,  149,  149,  149,  149,  149,  149,  149,  149,  149,    2,    2,    2,    2,\n-      2,   51,   50,   51,    0,    0,    0,    0,  150,    9,   72,    2,    2,    2,    2,    2,\n-      2,   16,   17,   19,   14,   22,   35,    0,    0,    0,   29,    0,    0,    0,    0,    0,\n-      0,    9,   47,    2,    2,    2,    2,    2,    2,    2,    2,    2,  125,   18,   20,  151,\n-     20,   19,  152,  153,    2,    2,    2,    2,    2,    0,    0,   63,  154,    0,    0,    0,\n-      0,    2,   11,    0,    0,    0,    0,    0,    0,    2,   63,   23,   18,   18,   18,   20,\n-     20,  106,  155,    0,    0,   54,  156,   29,  157,   28,    2,    2,    2,    2,    2,    2,\n-      2,    2,    2,    2,    2,    2,    2,   21,   17,   20,   20,  158,   42,    0,    0,    0,\n-     47,  125,    0,    0,    0,    0,    0,    0,    0,    2,    2,    2,    7,    7,    2,    2,\n-     28,    2,    2,    2,    2,    2,    2,    2,   28,    2,    2,    2,    2,    2,    2,    2,\n-      8,   16,   17,   19,   20,  159,   29,    0,    0,    9,    9,   28,    2,    2,    2,    7,\n-     28,    7,    2,   28,    2,    2,   56,   15,   21,   14,   21,   45,   30,   31,   30,   32,\n-      0,    0,    0,    0,   33,    0,    0,    0,    2,    2,   21,    0,    9,    9,    9,   44,\n-      0,    9,    9,   44,    0,    0,    0,    0,    0,    2,    2,   63,   23,   18,   18,   18,\n-     20,   21,  123,   13,   15,    0,    0,    0,    0,    2,    2,    2,    2,    2,    0,    0,\n-    160,  161,    0,    0,    0,    0,    0,    0,    0,   16,   17,   18,   18,   64,   97,   23,\n-    157,    9,  162,    7,    0,    0,    0,    0,    0,    2,    2,    2,    2,    2,    2,    2,\n-     63,   23,   18,   18,    0,   46,   46,    9,  163,   35,    0,    0,    0,    0,    0,    0,\n-      0,    0,    0,    0,    0,    2,    2,   18,    0,   21,   17,   18,   18,   19,   14,   80,\n-    163,   36,    0,    0,    0,    0,    0,    0,    0,    2,    2,    2,    2,    2,    8,  164,\n-     23,   18,   20,   20,  162,    7,    0,    0,    0,    2,    2,    2,    2,    2,    7,   41,\n-    133,   21,   20,   18,   74,   19,   20,    0,    0,    2,    2,    2,    7,    0,    0,    0,\n-      0,    2,    2,    2,    2,    2,    2,   16,   17,   18,   19,   20,  103,  163,   35,    0,\n-      0,    2,    2,    2,    7,   28,    0,    2,    2,    2,    2,   28,    7,    2,    2,    2,\n-      2,   21,   21,   16,   30,   31,   10,  165,  166,  167,  168,    0,    0,    0,    0,    0,\n-      0,    2,    2,    2,    2,    0,    2,    2,    2,   63,   23,   18,   18,    0,   20,   21,\n-     27,  106,    0,   31,    0,    0,    0,    0,    0,   50,   18,   20,   20,   20,  137,    2,\n-      2,    2,  169,  170,    9,   13,  171,   70,  172,    0,    0,    1,  144,    0,    0,    0,\n-      0,   50,   18,   20,   14,   17,   18,    2,    2,    2,    2,  155,  155,  155,  173,  173,\n-    173,  173,  173,  173,   13,  174,    0,   28,    0,   20,   18,   18,   29,   20,   20,    9,\n-    163,    0,   59,   59,   59,   59,   59,   59,   59,   64,   19,   80,   44,    0,    0,    0,\n-      0,    2,    2,    2,    7,    2,   28,    2,    2,   50,   20,   20,   29,    0,   36,   20,\n-     25,    9,  156,  175,  171,    0,    0,    0,    0,    2,    2,    2,   28,    7,    2,    2,\n-      2,    2,    2,    2,    2,    2,   21,   21,   45,   20,   33,   80,   66,    0,    0,    0,\n-      0,    2,  176,   64,   45,    0,    0,    0,    0,    9,  177,    2,    2,    2,    2,    2,\n-      2,    2,    2,   21,   20,   18,   29,    0,   46,   14,  140,    0,    0,    0,    0,    0,\n-      0,  178,  178,  178,  106,  179,  178,    0,    0,  145,    2,    2,  180,  114,  114,  114,\n-    114,  114,  114,  114,    0,    0,    0,    0,    0,    9,    9,    9,   44,    0,    0,    0,\n-      0,    2,    2,    2,    2,    2,    7,    0,   56,  181,   18,   18,   18,   18,   18,   18,\n-     18,   18,   18,   18,   18,   18,   18,   18,   18,   18,   18,   18,   18,    0,    0,    0,\n-     38,  114,   24,    0,    0,    0,    0,    0,    0,    0,    0,    7,    0,    0,    0,    0,\n-      0,    2,    2,    2,    0,    0,    0,    0,    0,    2,    2,    2,    2,    2,    0,   56,\n-     35,    0,    4,  118,  118,  118,  119,    0,    0,    9,    9,    9,   47,    2,    2,    2,\n-      0,    2,    2,    2,    2,    2,    0,    0,    2,    2,    2,    2,    2,    2,    2,    2,\n-     44,    2,    2,    2,    2,    2,    2,    9,    9,    2,    2,    2,    2,    2,    2,   20,\n-     20,    2,    2,   42,   42,   42,   90,    0,    0,    O,    O,    O,   GB,    B,    B,   GB,\n-      O,    O,   WJ,FMPst,FMPst,    O,  CGJ,    B,    O,    B,VMAbv,VMAbv,VMAbv,    O,VMAbv,    B,\n-  CMBlw,CMBlw,CMBlw,VMAbv,VMPst, VAbv, VPst,CMBlw,    B, VPst, VPre, VPst, VBlw, VBlw, VBlw, VBlw,\n-   VAbv, VAbv, VAbv, VPst, VPst, VPst,    H, VPre, VPst,VMBlw,    O,    O, VAbv,   GB,VMAbv,VMPst,\n-  VMPst,    O,    B, VBlw,    O,    O, VPre, VPre,    O, VPre,    H,    O, VPst,FMAbv,    O,CMBlw,\n-      O, VAbv,    O, VAbv,    H,    O,VMBlw,VMAbv,CMAbv,   GB,   GB,    O, MBlw,CMAbv,CMAbv, VPst,\n-   VAbv,VMAbv,    O, VPst,    O, VPre, VPre,VMAbv,    B,    O,   CS,   CS,VMPst,    B, VAbv, VAbv,\n-      B,    R,    O,  HVM,    O,    O,FMBlw,    O,CMAbv,    O,CMBlw, VAbv, VBlw,    B,  SUB,  SUB,\n-    SUB,    O,  SUB,  SUB,    O,FMBlw,    O,    B, VPst, VBlw, VPre,VMAbv,VMBlw,VMPst,   IS, VAbv,\n-   MPst, MPre, MBlw, MBlw,    B, MBlw, MBlw, VPst,VMPst,VMPst,    B, MBlw, VPst, VPre, VAbv, VAbv,\n-  VMPst,VMPst,VMBlw,    B,VMPst, VBlw, VPst,  CGJ,  CGJ, VPst,VMAbv,VMAbv,FMAbv, FAbv,CMAbv,FMAbv,\n-  VMAbv,FMAbv, VAbv,   IS,FMAbv,    B,FMAbv,    B,  CGJ,   WJ,  CGJ,   GB,CMAbv,CMAbv,    B,   GB,\n-      B, VAbv,  SUB, FPst, FPst,VMBlw, FPst, FPst, FBlw,VMAbv,FMBlw, VAbv, VPre,    B, MPre, MBlw,\n-    SUB, FAbv, FAbv, MAbv,  SUB,   Sk, VPst, VAbv,VMAbv,VMAbv, FAbv,CMAbv, VPst,    H,    B,    O,\n-  SMAbv,SMBlw,SMAbv,SMAbv,SMAbv, VPst,   IS, VBlw, FAbv,VMPre,VMPre,FMAbv,CMBlw,VMBlw,VMBlw,VMAbv,\n-     CS,    O,FMAbv, ZWNJ,  CGJ,   WJ,   WJ,   WJ,    O,FMPst,    O,    O,    H, MPst, VPst,    H,\n-  VMAbv, VAbv,VMBlw,    B, VBlw, FPst, VPst, FAbv,VMPst,    B,CMAbv, VAbv, MBlw, MPst, MBlw,    H,\n-      O, VBlw, MPst, MPre, MAbv, MBlw,    O,    B, FAbv, FAbv, FPst, VBlw,    B,    B, VPre,    O,\n-  VMPst,   IS,    O,VMPst, VBlw, VPst,VMBlw,VMBlw,VMAbv,    O,   IS,VMBlw,    B,VMPst,VMAbv,VMPst,\n-     CS,   CS,    B,    N,    N,    O,   HN, VPre, VBlw, VAbv,   IS,CMAbv,    O, VPst,    B,    R,\n-      R,CMBlw, VAbv, VPre,VMAbv,VMAbv,    H, VAbv,CMBlw,FMAbv,    B,   CS,   CS,    H,CMBlw,VMPst,\n-      H,VMPst, VAbv,VMAbv, VPst,   IS,    R, MPst,    R, MPst,CMBlw,    B,FMBlw, VBlw,VMAbv,    R,\n-   MBlw, MBlw,   GB, FBlw, FBlw,CMAbv,   IS, VBlw,   IS,   GB, VAbv,    R,VMPst,    H,    H,    B,\n-      H,    B,VMBlw,    O, VBlw,\n+      2,    2,    2,    2,    2,    2,   10,   11,   11,   11,   11,    0,    0,    0,    9,   12,\n+      0,    2,    2,    2,    2,   13,   14,    0,    0,   11,   15,    2,    2,    2,    2,    2,\n+      2,    2,    2,    2,    2,    2,   16,   17,   18,   19,   20,   21,   22,   16,   23,   24,\n+     25,   12,   26,   27,   20,    2,    2,    2,    2,    2,   20,    0,    2,    2,    2,    2,\n+      2,    0,    2,    2,    2,    2,    2,    2,    2,   28,   29,   30,    2,    2,    2,    9,\n+     30,    9,   30,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    9,    2,    2,\n+      2,    9,    9,    0,    2,    2,    0,   17,   18,   19,   20,   31,   32,   33,   32,   34,\n+      0,    0,    0,    0,   35,    0,    0,    2,   30,    2,    0,    0,    0,    0,    0,    9,\n+     36,   12,   15,   30,    2,    2,    9,    0,   30,    9,    2,   30,    9,    2,    0,   37,\n+     18,   19,   31,    0,   27,   38,   27,   39,    0,   40,    0,    0,    0,   30,    2,    9,\n+      9,    0,    0,    0,    2,    2,    2,    2,    2,   41,   42,   43,    0,    0,    0,    0,\n+      0,   12,   15,   30,    2,    2,    2,    2,   30,    2,   30,    2,    2,    2,    2,    2,\n+      2,    9,    2,   30,    2,    2,    0,   17,   18,   19,   20,   21,   27,   22,   35,   24,\n+      0,    0,    0,    0,    0,   30,   41,   41,   44,   12,   29,   30,    2,    2,    2,    9,\n+     30,    9,    2,   30,    2,    2,    0,   17,   45,    0,    0,   27,   22,    0,    0,    2,\n+     30,   30,    0,    0,    0,    0,    0,    0,    0,    0,   46,   30,    2,    2,    9,    0,\n+      2,    9,    2,    2,    0,   30,    9,    9,    2,    0,   30,    9,    0,    2,    9,    0,\n+      2,    2,    2,    2,    2,    2,    0,    0,   23,   16,   47,    0,   48,   33,   48,   34,\n+      0,    0,    0,    0,   35,    0,    0,    0,    0,   15,   29,   49,    2,    2,    2,    9,\n+      2,    9,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    0,   17,\n+     22,   16,   23,   47,   22,   38,   22,   39,    0,    0,    0,   27,   31,    2,    9,    0,\n+      0,   10,   29,   30,    2,    2,    2,    9,    2,    2,    2,   30,    2,    2,    0,   17,\n+     45,    0,    0,   35,   47,    0,    0,    0,    9,   50,   51,    0,    0,    0,    0,    0,\n+      0,   11,   29,    2,    2,    2,    2,    9,    2,    2,    2,    2,    2,    2,   52,   53,\n+     23,   23,   19,   31,   48,   33,   48,   34,   54,    0,    0,    0,   35,    0,    0,    0,\n+     30,   12,   29,   30,    2,    2,    2,    2,    2,    2,    2,    2,    9,    0,    2,    2,\n+      2,    2,   30,    2,    2,    2,    2,   30,    0,    2,    2,    2,    9,    0,   55,    0,\n+     35,   23,   22,   31,   31,   18,   48,   48,   25,    0,   23,    0,    0,    0,    0,    0,\n+      0,    2,    0,    2,    9,    0,    0,    0,    0,    0,    0,    0,    0,   20,    0,    0,\n+      0,    2,    2,   56,   56,   57,    0,    0,   18,    2,    2,    2,    2,   30,    2,    2,\n+      2,    2,    2,    2,    2,    2,    2,    9,    0,   58,   21,   59,   22,   22,   20,   20,\n+     46,   21,   11,   31,   11,    2,    2,   60,   61,   61,   61,   61,   61,   62,   61,   61,\n+     61,   61,   61,   61,   61,   61,   61,   61,   61,   61,   61,   61,   61,   61,   61,   63,\n+      0,    0,    0,    0,   64,    0,    0,    0,    0,    2,    2,    2,    2,    2,   65,   45,\n+     59,   66,   22,   22,   67,   68,   69,   70,   71,    2,    2,    2,    2,    2,    1,    0,\n+      5,    2,    2,    2,   23,   20,    2,    2,   72,   71,   73,   74,   65,   73,   29,   29,\n+      2,   52,   22,   53,    2,    2,    2,    2,    2,    2,   75,   76,   77,   29,   29,   78,\n+     79,    2,    2,    2,    2,    2,   29,   45,    0,    2,   59,   80,    0,    0,    0,    0,\n+     30,    2,   59,   47,    0,    0,    0,    0,    0,    2,   59,    0,    0,    0,    0,    0,\n+      0,    2,    2,    2,    2,    2,    2,    9,    2,    9,   59,    0,    0,    0,    0,    0,\n+      0,    2,    2,   81,   45,   22,   59,   20,   48,   48,   48,   48,   15,   82,   83,   84,\n+     85,   86,   87,    0,    0,    0,    0,   88,    0,    9,    0,    0,   30,    0,   89,   81,\n+     90,    2,    2,    2,    2,    9,    0,    0,    0,   42,   42,   91,   92,    2,    2,    2,\n+      2,    2,    2,    2,    2,   13,    9,    0,    0,   93,    2,    2,    2,    2,    2,    2,\n+      2,    2,    2,    2,    2,    2,    2,    2,    9,   22,   80,   45,   22,   94,   61,    0,\n+      0,   95,   96,   95,   95,   97,   98,    0,    0,    2,    2,    2,    2,    2,    2,    2,\n+      0,    2,    2,    9,    0,    0,    0,    0,    0,    2,    2,    2,    2,    2,    2,    0,\n+      0,    2,    2,    2,    2,   29,    0,    0,    0,    2,    2,    2,    2,    2,    9,    0,\n+      0,    2,    2,    2,   52,   99,   45,    0,    0,    2,    2,  100,  101,  102,  103,   61,\n+     63,  104,   16,   45,   22,   59,   21,   80,   48,   48,   76,   11,   11,   11,  105,   46,\n+     40,   11,  106,   74,    2,    2,    2,    2,    2,    2,    2,  107,   22,   20,   20,   22,\n+     48,   48,   22,  108,    2,    2,    2,    9,    0,    0,    0,    0,    0,    0,  109,  110,\n+    111,  111,  111,    0,    0,    0,    0,    0,    0,  106,   74,    2,    2,    2,    2,    2,\n+      2,   60,   61,   59,   25,   22,  112,   61,    2,    2,    2,    2,  107,   22,   23,   45,\n+     45,  102,   14,    0,    0,    0,    0,    0,    0,    2,    2,   61,   18,   48,   23,  113,\n+    102,  102,  102,  114,  115,    0,    0,    0,    0,    2,    2,    2,    2,    2,    0,   30,\n+      2,   11,   46,  116,  116,  116,   11,  116,  116,   15,  116,  116,  116,   26,    0,   40,\n+      0,    0,    0,  117,   51,   11,    5,    0,    0,    0,    0,    0,    0,    0,  118,    0,\n+      0,    0,    0,    0,    0,    0,    6,  119,  120,   42,   42,    5,    0,    0,    0,    0,\n+      0,    0,    0,    0,    0,    0,  120,  120,  121,  120,  120,  120,  120,  120,  120,  120,\n+    120,    0,    0,  122,    0,    0,    0,    0,    0,    0,    7,  122,    0,    0,    0,    0,\n+      0,   46,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    9,\n+      0,    0,    0,    0,  123,  123,    0,    0,    0,    2,    2,    2,    2,    0,    0,    0,\n+     30,    0,    0,    0,    0,    0,    0,    0,  124,    0,  123,  123,    0,    0,    0,    0,\n+      0,    2,   53,    2,  108,    2,   10,    2,    2,    2,   65,   19,   16,    0,    0,   31,\n+      0,    2,    2,    0,    0,    0,    0,    0,    0,   29,    2,    2,    2,    2,    2,    2,\n+      2,    2,    2,  125,   23,   23,   23,   23,   23,   23,   23,  126,    0,    0,    0,    0,\n+      0,   11,   11,   11,   11,   11,   11,   11,   11,   11,    2,    0,    0,    0,    0,    0,\n+     52,    2,    2,    2,   22,   22,  127,  116,    0,    2,    2,    2,  128,   20,   59,   20,\n+    113,  102,  129,    0,    0,    0,    0,    0,    0,   11,  130,    2,    2,    2,    2,    2,\n+      2,    2,  131,   23,   22,   20,   48,  132,  133,  134,    0,    0,    0,    0,    0,    0,\n+      0,    2,    2,   52,   30,    2,    2,    2,    2,    2,    2,    2,    2,   10,   22,   59,\n+     99,   76,  135,  136,  137,    0,    0,    0,    0,    2,  138,    2,    2,    2,    2,  139,\n+      0,   30,    2,   42,    5,    0,   79,   15,    2,   53,   22,  140,   52,   53,    2,    2,\n+    105,   10,    9,    0,    0,    0,    0,    0,    0,    2,    2,    2,    2,    2,  141,   21,\n+     25,    0,    0,  142,  143,    0,    0,    0,    0,    2,   65,   45,   23,   80,   47,  144,\n+      0,   81,   81,   81,   81,   81,   81,   81,   81,    0,    0,    0,    0,    0,    0,    0,\n+      6,  120,  120,  120,  120,  121,    0,    0,    0,    2,    2,    2,    2,    2,    9,    2,\n+      2,    2,    9,    2,   30,    2,    2,    2,    2,    2,   30,    2,    2,    2,   30,    9,\n+      0,  128,   20,   27,   31,    0,    0,  145,  146,    2,    2,   30,    2,   30,    2,    2,\n+      2,    2,    2,    2,    0,   14,   37,    0,  147,    2,    2,   13,   37,    0,   30,    2,\n+      2,    2,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   30,    2,    2,\n+      9,    2,    2,   11,   41,    0,    0,    0,    0,    2,    2,    2,    2,    2,   27,   38,\n+      0,    2,    2,    2,  116,  116,  116,  116,  116,  148,    2,    9,    0,    0,    0,    0,\n+      0,    2,   14,   14,    0,    0,    0,    0,    0,    9,    2,    2,    9,    2,    2,    2,\n+      2,   30,    2,    9,    0,   30,    2,    0,    0,  149,  150,  151,    2,    2,    2,    2,\n+      2,    2,    2,    2,    2,   22,   22,   20,   20,   20,   22,   22,  134,    0,    0,    0,\n+      0,    0,  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,    2,    2,    2,    2,\n+      2,   53,   52,   53,    0,    0,    0,    0,  153,   11,   74,    2,    2,    2,    2,    2,\n+      2,   18,   19,   21,   16,   24,   37,    0,    0,    0,   31,    0,    0,    0,    0,    0,\n+      0,   11,   49,    2,    2,    2,    2,    2,    2,    2,    2,    2,  128,   20,   22,  154,\n+     22,   21,  155,  156,    2,    2,    2,    2,    2,    0,    0,   65,  157,    0,    0,    0,\n+      0,    2,   13,    0,    0,    0,    0,    0,    0,    2,   65,   25,   20,   20,   20,   22,\n+     22,  108,  158,    0,    0,   56,  159,   31,  160,   30,    2,    2,    2,    2,    2,    2,\n+      2,    2,    2,    2,    2,    2,    2,   23,   19,   22,   22,  161,   44,    0,    0,    0,\n+     49,  128,    0,    0,    0,    0,    0,    0,    0,    2,    2,    2,    9,    9,    2,    2,\n+     30,    2,    2,    2,    2,    2,    2,    2,   30,    2,    2,    2,    2,    2,    2,    2,\n+     10,   18,   19,   21,   22,  162,   31,    0,    0,   11,   11,   30,    2,    2,    2,    9,\n+     30,    9,    2,   30,    2,    2,   58,   17,   23,   16,   23,   47,   32,   33,   32,   34,\n+      0,    0,    0,    0,   35,    0,    0,    0,    2,    2,   23,    0,   11,   11,   11,   46,\n+      0,   11,   11,   46,    0,    0,    0,    0,    0,    2,    2,   65,   25,   20,   20,   20,\n+     22,   23,  126,   15,   17,    0,    0,    0,    0,    2,    2,    2,    2,    2,    0,    0,\n+    163,  164,    0,    0,    0,    0,    0,    0,    0,   18,   19,   20,   20,   66,   99,   25,\n+    160,   11,  165,    9,    0,    0,    0,    0,    0,    2,    2,    2,    2,    2,    2,    2,\n+     65,   25,   20,   20,    0,   48,   48,   11,  166,   37,    0,    0,    0,    0,    0,    0,\n+      0,    0,    0,    0,    0,    2,    2,   20,    0,   23,   19,   20,   20,   21,   16,   82,\n+    166,   38,    0,    0,    0,    0,    0,    0,    0,    2,    2,    2,    2,    2,   10,  167,\n+     25,   20,   22,   22,  165,    9,    0,    0,    0,    2,    2,    2,    2,    2,    9,   43,\n+    136,   23,   22,   20,   76,   21,   22,    0,    0,    2,    2,    2,    9,    0,    0,    0,\n+      0,    2,    2,    2,    2,    2,    2,   18,   19,   20,   21,   22,  105,  166,   37,    0,\n+      0,    2,    2,    2,    9,   30,    0,    2,    2,    2,    2,   30,    9,    2,    2,    2,\n+      2,   23,   23,   18,   32,   33,   12,  168,  169,  170,  171,    0,    0,    0,    0,    0,\n+      0,    2,    2,    2,    2,    0,    2,    2,    2,   65,   25,   20,   20,    0,   22,   23,\n+     29,  108,    0,   33,    0,    0,    0,    0,    0,   52,   20,   22,   22,   22,  140,    2,\n+      2,    2,  172,  173,   11,   15,  174,   72,  175,    0,    0,    1,  147,    0,    0,    0,\n+      0,   52,   20,   22,   16,   19,   20,    2,    2,    2,    2,  158,  158,  158,  176,  176,\n+    176,  176,  176,  176,   15,  177,    0,   30,    0,   22,   20,   20,   31,   22,   22,   11,\n+    166,    0,   61,   61,   61,   61,   61,   61,   61,   66,   21,   82,   46,    0,    0,    0,\n+      0,    2,    2,    2,    9,    2,   30,    2,    2,   52,   22,   22,   31,    0,   38,   22,\n+     27,   11,  159,  178,  174,    0,    0,    0,    0,    2,    2,    2,   30,    9,    2,    2,\n+      2,    2,    2,    2,    2,    2,   23,   23,   47,   22,   35,   82,   68,    0,    0,    0,\n+      0,    2,  179,   66,   47,    0,    0,    0,    0,   11,  180,    2,    2,    2,    2,    2,\n+      2,    2,    2,   23,   22,   20,   31,    0,   48,   16,  143,    0,    0,    0,    0,    0,\n+      0,  181,  181,  181,  181,  181,  181,  181,  181,  182,  182,  182,  183,  184,  182,  181,\n+    181,  185,  181,  181,  186,  187,  187,  187,  187,  187,  187,  187,    0,    0,    0,    0,\n+      0,   11,   11,   11,   46,    0,    0,    0,    0,    2,    2,    2,    2,    2,    9,    0,\n+     58,  188,   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,\n+     20,   20,   20,   20,   20,    0,    0,    0,   40,  116,   26,    0,    0,    0,    0,    0,\n+      0,    0,    0,    9,    0,    0,    0,    0,    0,    2,    2,    2,    0,    0,    0,    0,\n+      0,    2,    2,    2,    2,    2,    0,   58,   37,    0,    6,  120,  120,  120,  121,    0,\n+      0,   11,   11,   11,   49,    2,    2,    2,    0,    2,    2,    2,    2,    2,    0,    0,\n+      2,    2,    2,    2,    2,    2,    2,    2,   46,    2,    2,    2,    2,    2,    2,   11,\n+     11,    2,    2,    2,    2,    2,    2,   22,   22,    2,    2,   44,   44,   44,   92,    0,\n+      0,    O,    O,    O,   GB,    B,    B,    O,   SB,    O,   SE,   GB,    O,    O,   WJ,FMPst,\n+  FMPst,    O,  CGJ,    B,    O,    B,VMAbv,VMAbv,VMAbv,    O,VMAbv,    B,CMBlw,CMBlw,CMBlw,VMAbv,\n+  VMPst, VAbv, VPst,CMBlw,    B, VPst, VPre, VPst, VBlw, VBlw, VBlw, VBlw, VAbv, VAbv, VAbv, VPst,\n+   VPst, VPst,    H, VPre, VPst,VMBlw,    O,    O, VAbv,   GB,VMAbv,VMPst,VMPst,    O,    B, VBlw,\n+      O,    O, VPre, VPre,    O, VPre,    H,    O, VPst,FMAbv,    O,CMBlw,    O, VAbv,    O, VAbv,\n+      H,    O,VMBlw,VMAbv,CMAbv,   GB,   GB,    O, MBlw,CMAbv,CMAbv, VPst, VAbv,VMAbv,    O, VPst,\n+      O, VPre, VPre,VMAbv,    B,    O,   CS,   CS,VMPst,    B, VAbv, VAbv,    B,    R,    O,  HVM,\n+      O,    O,FMBlw,    O,CMAbv,    O,CMBlw, VAbv, VBlw,    B,  SUB,  SUB,  SUB,    O,  SUB,  SUB,\n+      O,FMBlw,    O,    B, VPst, VBlw, VPre,VMAbv,VMBlw,VMPst,   IS, VAbv, MPst, MPre, MBlw, MBlw,\n+      B, MBlw, MBlw, VPst,VMPst,VMPst,    B, MBlw, VPst, VPre, VAbv, VAbv,VMPst,VMPst,VMBlw,    B,\n+  VMPst, VBlw, VPst,  CGJ,  CGJ, VPst,VMAbv,VMAbv,FMAbv, FAbv,CMAbv,FMAbv,VMAbv,FMAbv, VAbv,   IS,\n+  FMAbv,    B,FMAbv,    B,  CGJ,   WJ,  CGJ,   GB,CMAbv,CMAbv,    B,   GB,    B, VAbv,  SUB, FPst,\n+   FPst,VMBlw, FPst, FPst, FBlw,VMAbv,FMBlw, VAbv, VPre,    B, MPre, MBlw,  SUB, FAbv, FAbv, MAbv,\n+    SUB,   Sk, VPst, VAbv,VMAbv,VMAbv, FAbv,CMAbv, VPst,    H,    B,    O,SMAbv,SMBlw,SMAbv,SMAbv,\n+  SMAbv, VPst,   IS, VBlw, FAbv,VMPre,VMPre,FMAbv,CMBlw,VMBlw,VMBlw,VMAbv,   CS,    O,FMAbv, ZWNJ,\n+    CGJ,   WJ,   WJ,   WJ,    O,FMPst,    O,   SB,   SE,    O,    H, MPst, VPst,    H,VMAbv, VAbv,\n+  VMBlw,    B, VBlw, FPst, VPst, FAbv,VMPst,    B,CMAbv, VAbv, MBlw, MPst, MBlw,    H,    O, VBlw,\n+   MPst, MPre, MAbv, MBlw,    O,    B, FAbv, FAbv, FPst, VBlw,    B,    B, VPre,    O,VMPst,   IS,\n+      O,VMPst, VBlw, VPst,VMBlw,VMBlw,VMAbv,    O,   IS,VMBlw,    B,VMPst,VMAbv,VMPst,   CS,   CS,\n+      B,    N,    N,    O,   HN, VPre, VBlw, VAbv,   IS,CMAbv,    O, VPst,    B,    R,    R,CMBlw,\n+   VAbv, VPre,VMAbv,VMAbv,    H, VAbv,CMBlw,FMAbv,    B,   CS,   CS,    H,CMBlw,VMPst,    H,VMPst,\n+   VAbv,VMAbv, VPst,   IS,    R, MPst,    R, MPst,CMBlw,    B,FMBlw, VBlw,VMAbv,    R, MBlw, MBlw,\n+     GB, FBlw, FBlw,CMAbv,   IS, VBlw,   IS,   GB, VAbv,    R,VMPst,    G,    G,    J,    J,    J,\n+     SB,   SE,    J,   HR,    G,    G,   HM,   HM,   HM,    O, VBlw,\n@@ -585,1 +598,1 @@\n-hb_use_u16[448] =\n+hb_use_u16[456] =\n@@ -587,28 +600,29 @@\n-    0,  0,  1,  2,  3,  4,  0,  5,  6,  0,  7,  0,  8,  9, 10, 11,\n-    9, 12, 13,  9,  9, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n-   17, 25, 26, 20, 21, 27, 28, 29, 30, 31, 32, 33, 21, 34, 35,  0,\n-   17, 36, 37, 20, 21, 38, 23, 39, 17, 40, 41, 42, 43, 44, 45, 46,\n-   30,  0, 47, 48, 21, 49, 50, 51, 17,  0, 52, 48, 21, 53, 50, 54,\n-   17, 55, 56, 48,  9, 57, 58, 59, 60, 61,  9, 62, 63, 64, 30, 65,\n-   66, 67,  9, 68, 69,  9, 70, 71, 72, 73, 74, 75, 76,  0,  9,  9,\n-   77, 78, 79, 80, 81, 82, 83, 84,  9, 85,  9, 86,  9, 87, 88, 89,\n-    9, 90, 91, 92,  2,  0, 93,  0,  9, 94, 95,  9, 96,  0, 97, 98,\n-   99,100, 30,  9,101,102,103,  9,104,105,  9,106,  9,107,108,109,\n-    2,  2,110,  9,  9,111,112,  2,113,114,115,  9,116,  9,117,118,\n-  119,120,121,  0,  0,122,123,124,  0,125,126,127,128,  0,129,130,\n-  131,  0,  0,132,133,  0,  0,  9,134,135,136,  9,137,  0,  9,138,\n-  139,  9,  9,140,141,  2,142,143,144,  9,145,146,147,  9,  9,148,\n-  149,  2,150, 98,151,152,153,  2,  9,154,  9,155,156,  0,157,158,\n-  159,  2,160,  0,  0,161,  0,162,  0,163,163,164, 33,165,166,167,\n-    9,168, 94,  0,169,  0,  9,170,171,  0,172,  2,173,170,174,175,\n-  176,  0,  0,177,178,  0,179,  9,  9,180,181,182,183,184,185,  9,\n-    9,186,187,  0,188,  9,189,190,191,  9,  9,192,  9,193,194,105,\n-  195,102,  9, 33,196,197,198,  0,199,200, 94,  9,  9,201,202,  2,\n-  203, 20, 21,204,205,206,207,208,  9,209,210,211,212,  0,195,  9,\n-    9,213,214,  2,215,216,217,218,  9,219,220,  2,221,222,  9,223,\n-  224,103,225,  0,226,227,228,229,  9,230,231,  2,232,  9,  9,233,\n-  234,  0,235,  9,  9,236,237,238,239,240, 21,  9,215,241,  7,  9,\n-   70, 18,  9,242, 73,243,244,  9,  9,245,246,  2,247,  9,248,249,\n-    9,250,251, 48,  9,252,253,  2,  9,254,255,256,  9,257,258,259,\n-  260,260,261,262,263,  0,  9,264,105, 70, 94,265,  0,266, 70,267,\n-  268,  0,269,  0,270,  2,271,  2,272,  2,129,129,160,160,160,129,\n+    0,  0,  1,  2,  0,  3,  4,  5,  0,  6,  7,  0,  8,  0,  9, 10,\n+   11, 12, 10, 13, 14, 10, 10, 15, 16, 17, 18, 19, 20, 21, 22, 23,\n+   24, 25, 18, 26, 27, 21, 22, 28, 29, 30, 31, 32, 33, 34, 22, 35,\n+   36,  0, 18, 37, 38, 21, 22, 39, 24, 40, 18, 41, 42, 43, 44, 45,\n+   46, 47, 31,  0, 48, 49, 22, 50, 51, 52, 18,  0, 53, 49, 22, 54,\n+   51, 55, 18, 56, 57, 49, 10, 58, 59, 60, 61, 62, 10, 63, 64, 65,\n+   31, 66, 67, 68, 10, 69, 70, 10, 71, 72, 73, 74, 75, 76, 77,  0,\n+   10, 10, 78, 79, 80, 81, 82, 83, 84, 85, 10, 86, 10, 87, 10, 88,\n+   89, 90, 10, 91, 92, 93,  2,  0, 94,  0, 10, 95, 96, 10, 97,  0,\n+   98, 99,100,101, 31, 10,102,103,104, 10,105,106, 10,107, 10,108,\n+  109,110,  2,  2,111, 10, 10,112,113,  2,114,115,116, 10,117, 10,\n+  118,119,120,121,122,  0,  0,123,124,125,  0,126,127,128,129,  0,\n+  130,131,132,  0,  0,133,134,  0,135,  0,  0, 10,136,137,138,  0,\n+  139, 10,140,  0, 10,141,142, 10, 10,143,144,  2,145,146,147, 10,\n+  148,149,150, 10, 10,151,152,  2,153, 99,154,155,156,  2, 10,157,\n+   10,158,159,  0,160,161,162,  2,163,  0,  0,164,  0,165,  0,166,\n+  166,167, 34,168,169,170, 10,171, 95,  0,172,  0, 10,173,174,  0,\n+  175,  2,176,173,177,178,179,  0,  0,180,181,  0,182, 10, 10,183,\n+  184,185,186,187,188, 10, 10,189,190,  0,191, 10,192,193,194, 10,\n+   10,195, 10,196,197,106,198,103, 10, 34,199,200,201,  0,202,203,\n+   95, 10, 10,204,205,  2,206, 21, 22,207,208,209,210,211, 10,212,\n+  213,214,215,  0,198, 10, 10,216,217,  2,218,219,220,221, 10,222,\n+  223,  2,224,225, 10,226,227,104,228,  0,229,230,231,232, 10,233,\n+  234,  2,235, 10, 10,236,237,  0,238, 10, 10,239,240,241,242,243,\n+   22, 10,218,244,  8, 10, 71, 19, 10,245, 74,246,247, 10, 10,248,\n+  249,  2,250, 10,251,252, 10,253,254, 49, 10,255,256,  2,257,257,\n+  257,258,259,260, 10,261,262,263,264,264,265,266,267,  0, 10,268,\n+  106, 71, 95,269,  0,270, 71,271,272,  0,273,  0,274,  2,275,  2,\n+  276,  2,130,130,163,163,163,130,\n@@ -625,1 +639,1 @@\n-  return u<921600u?hb_use_u8[3049+(((hb_use_u8[865+(((hb_use_u16[((hb_use_u8[353+(((hb_use_u8[113+(((hb_use_b4(hb_use_u8,u>>1>>3>>1>>3>>4))<<4)+((u>>1>>3>>1>>3)&15u))])<<3)+((u>>1>>3>>1)&7u))])<<1)+((u>>1>>3)&1u)])<<3)+((u>>1)&7u))])<<1)+((u)&1u))]:O;\n+  return u<921600u?hb_use_u8[3105+(((hb_use_u8[889+(((hb_use_u16[((hb_use_u8[353+(((hb_use_u8[113+(((hb_use_b4(hb_use_u8,u>>1>>3>>1>>3>>4))<<4)+((u>>1>>3>>1>>3)&15u))])<<3)+((u>>1>>3>>1)&7u))])<<1)+((u>>1>>3)&1u)])<<3)+((u>>1)&7u))])<<1)+((u)&1u))]:O;\n@@ -636,0 +650,1 @@\n+#undef HM\n@@ -637,0 +652,1 @@\n+#undef HR\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shaper-use-table.hh","additions":490,"deletions":474,"binary":false,"changes":964,"status":"modified"},{"patch":"@@ -380,0 +380,3 @@\n+                           FLAG64 (USE(FMAbv)) | \\\n+                           FLAG64 (USE(FMBlw)) | \\\n+                           FLAG64 (USE(FMPst)) | \\\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shaper-use.cc","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -13,2 +13,2 @@\n- * # Scripts-15.0.0.txt\n- * # Date: 2022-04-26, 23:15:02 GMT\n+ * # Scripts-15.1.0.txt\n+ * # Date: 2023-07-28, 16:01:07 GMT\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shaper-vowel-constraints.cc","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -60,0 +60,10 @@\n+static bool axis_value_is_outside_axis_range (hb_tag_t axis_tag, float axis_value,\n+                                              const hb_hashmap_t<hb_tag_t, Triple> *user_axes_location)\n+{\n+  if (!user_axes_location->has (axis_tag))\n+    return false;\n+\n+  Triple axis_range = user_axes_location->get (axis_tag);\n+  return (axis_value < axis_range.minimum || axis_value > axis_range.maximum);\n+}\n+\n@@ -99,1 +109,1 @@\n-                        const hb_hashmap_t<hb_tag_t, float> *user_axes_location) const\n+                        const hb_hashmap_t<hb_tag_t, Triple> *user_axes_location) const\n@@ -104,5 +114,1 @@\n-    if (!user_axes_location->has (axis_tag) ||\n-        fabsf(axis_value - user_axes_location->get (axis_tag)) < 0.001f)\n-      return true;\n-\n-    return false;\n+    return !axis_value_is_outside_axis_range (axis_tag, axis_value, user_axes_location);\n@@ -115,1 +121,1 @@\n-    const hb_hashmap_t<hb_tag_t, float>* user_axes_location = &c->plan->user_axes_location;\n+    const hb_hashmap_t<hb_tag_t, Triple>* user_axes_location = &c->plan->user_axes_location;\n@@ -158,1 +164,1 @@\n-                        const hb_hashmap_t<hb_tag_t, float> *user_axes_location) const\n+                        const hb_hashmap_t<hb_tag_t, Triple> *user_axes_location) const\n@@ -163,5 +169,1 @@\n-    if (!user_axes_location->has (axis_tag) ||\n-        fabsf(axis_value - user_axes_location->get (axis_tag)) < 0.001f)\n-      return true;\n-\n-    return false;\n+    return !axis_value_is_outside_axis_range (axis_tag, axis_value, user_axes_location);\n@@ -174,1 +176,1 @@\n-    const hb_hashmap_t<hb_tag_t, float>* user_axes_location = &c->plan->user_axes_location;\n+    const hb_hashmap_t<hb_tag_t, Triple>* user_axes_location = &c->plan->user_axes_location;\n@@ -221,1 +223,1 @@\n-                        const hb_hashmap_t<hb_tag_t, float> *user_axes_location) const\n+                        const hb_hashmap_t<hb_tag_t, Triple> *user_axes_location) const\n@@ -226,5 +228,1 @@\n-    if (!user_axes_location->has (axis_tag) ||\n-        fabsf(axis_value - user_axes_location->get (axis_tag)) < 0.001f)\n-      return true;\n-\n-    return false;\n+    return !axis_value_is_outside_axis_range (axis_tag, axis_value, user_axes_location);\n@@ -237,1 +235,1 @@\n-    const hb_hashmap_t<hb_tag_t, float>* user_axes_location = &c->plan->user_axes_location;\n+    const hb_hashmap_t<hb_tag_t, Triple>* user_axes_location = &c->plan->user_axes_location;\n@@ -294,1 +292,1 @@\n-                        const hb_hashmap_t<hb_tag_t, float> *user_axes_location) const\n+                        const hb_hashmap_t<hb_tag_t, Triple> *user_axes_location) const\n@@ -304,2 +302,1 @@\n-      if (user_axes_location->has (axis_tag) &&\n-          fabsf(axis_value - user_axes_location->get (axis_tag)) > 0.001f)\n+      if (axis_value_is_outside_axis_range (axis_tag, axis_value, user_axes_location))\n@@ -316,1 +313,1 @@\n-    const hb_hashmap_t<hb_tag_t, float> *user_axes_location = &c->plan->user_axes_location;\n+    const hb_hashmap_t<hb_tag_t, Triple> *user_axes_location = &c->plan->user_axes_location;\n@@ -405,1 +402,1 @@\n-                        hb_hashmap_t<hb_tag_t, float> *user_axes_location) const\n+                        hb_hashmap_t<hb_tag_t, Triple> *user_axes_location) const\n@@ -454,2 +451,0 @@\n-    auto *out = c->serializer->start_embed (this);\n-    if (unlikely (!out)) return_trace (false);\n@@ -520,1 +515,1 @@\n-  void collect_name_ids (hb_hashmap_t<hb_tag_t, float> *user_axes_location,\n+  void collect_name_ids (hb_hashmap_t<hb_tag_t, Triple> *user_axes_location,\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-stat-table.hh","additions":24,"deletions":29,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -9,2 +9,2 @@\n- * <meta name=\"updated_at\" content=\"2022-01-28 10:00 PM\" \/>\n- * File-Date: 2022-03-02\n+ * <meta name=\"updated_at\" content=\"2022-09-30 11:47 PM\" \/>\n+ * File-Date: 2023-08-02\n@@ -260,1 +260,1 @@\n-  {HB_TAG('a','j','p',' '),     HB_TAG('A','R','A',' ')},       \/* South Levantine Arabic -> Arabic *\/\n+  {HB_TAG('a','j','p',' '),     HB_TAG('A','R','A',' ')},       \/* South Levantine Arabic (retired code) -> Arabic *\/\n@@ -272,1 +272,1 @@\n-  {HB_TAG('a','p','c',' '),     HB_TAG('A','R','A',' ')},       \/* North Levantine Arabic -> Arabic *\/\n+  {HB_TAG('a','p','c',' '),     HB_TAG('A','R','A',' ')},       \/* Levantine Arabic -> Arabic *\/\n@@ -1214,0 +1214,1 @@\n+  {HB_TAG('p','r','p',' '),     HB_TAG('G','U','J',' ')},       \/* Parsi (retired code) -> Gujarati *\/\n@@ -1442,1 +1443,1 @@\n-  {HB_TAG('t','c','y',' '),     HB_TAG('T','U','L',' ')},       \/* Tulu -> Tumbuka *\/\n+  {HB_TAG('t','c','y',' '),     HB_TAG('T','U','L',' ')},       \/* Tulu *\/\n@@ -1498,2 +1499,2 @@\n-  {HB_TAG('t','u','l',' '),     HB_TAG_NONE            },       \/* Tula != Tumbuka *\/\n-\/*{HB_TAG('t','u','m',' '),     HB_TAG('T','U','M',' ')},*\/     \/* Tumbuka -> Tulu *\/\n+  {HB_TAG('t','u','l',' '),     HB_TAG_NONE            },       \/* Tula != Tulu *\/\n+\/*{HB_TAG('t','u','m',' '),     HB_TAG('T','U','M',' ')},*\/     \/* Tumbuka *\/\n@@ -1584,0 +1585,1 @@\n+  {HB_TAG('y','c','r',' '),     HB_TAG_NONE            },       \/* Yilan Creole != Y-Cree *\/\n@@ -1605,0 +1607,1 @@\n+  {HB_TAG('z','k','b',' '),     HB_TAG('K','H','A',' ')},       \/* Koibal (retired code) -> Khakass *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-tag-table.hh","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -415,1 +415,1 @@\n- * @language: an #hb_language_t to convert.\n+ * @language: (nullable): an #hb_language_t to convert.\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-tag.cc","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -75,0 +75,59 @@\n+  void set_mapping (float from_coord, float to_coord)\n+  {\n+    coords[0].set_float (from_coord);\n+    coords[1].set_float (to_coord);\n+  }\n+\n+  bool is_outside_axis_range (const Triple& axis_range) const\n+  {\n+    float from_coord = coords[0].to_float ();\n+    return !axis_range.contains (from_coord);\n+  }\n+\n+  bool must_include () const\n+  {\n+    float from_coord = coords[0].to_float ();\n+    float to_coord = coords[1].to_float ();\n+    return (from_coord == -1.f && to_coord == -1.f) ||\n+           (from_coord == 0.f && to_coord == 0.f) ||\n+           (from_coord == 1.f && to_coord == 1.f);\n+  }\n+\n+  void instantiate (const Triple& axis_range,\n+                    const Triple& unmapped_range,\n+                    const TripleDistances& triple_distances)\n+  {\n+    float from_coord = coords[0].to_float ();\n+    float to_coord = coords[1].to_float ();\n+\n+    from_coord = renormalizeValue (from_coord, unmapped_range, triple_distances);\n+    to_coord = renormalizeValue (to_coord, axis_range, triple_distances);\n+\n+    coords[0].set_float (from_coord);\n+    coords[1].set_float (to_coord);\n+  }\n+\n+  HB_INTERNAL static int cmp (const void *pa, const void *pb)\n+  {\n+    const AxisValueMap *a = (const AxisValueMap *) pa;\n+    const AxisValueMap *b = (const AxisValueMap *) pb;\n+\n+    int a_from = a->coords[0].to_int ();\n+    int b_from = b->coords[0].to_int ();\n+    if (a_from != b_from)\n+      return a_from - b_from;\n+\n+    \/* this should never be reached. according to the spec, all of the axis\n+     * value map records for a given axis must have different fromCoord values\n+     * *\/\n+    int a_to = a->coords[1].to_int ();\n+    int b_to = b->coords[1].to_int ();\n+    return a_to - b_to;\n+  }\n+\n+  bool serialize (hb_serialize_context_t *c) const\n+  {\n+    TRACE_SERIALIZE (this);\n+    return_trace (c->embed (this));\n+  }\n+\n@@ -125,0 +184,72 @@\n+  Triple unmap_axis_range (const Triple& axis_range) const\n+  {\n+    F2DOT14 val, unmapped_val;\n+\n+    val.set_float (axis_range.minimum);\n+    unmapped_val.set_int (unmap (val.to_int ()));\n+    float unmapped_min = unmapped_val.to_float ();\n+\n+    val.set_float (axis_range.middle);\n+    unmapped_val.set_int (unmap (val.to_int ()));\n+    float unmapped_middle = unmapped_val.to_float ();\n+\n+    val.set_float (axis_range.maximum);\n+    unmapped_val.set_int (unmap (val.to_int ()));\n+    float unmapped_max = unmapped_val.to_float ();\n+\n+    return Triple{unmapped_min, unmapped_middle, unmapped_max};\n+  }\n+\n+  bool subset (hb_subset_context_t *c, hb_tag_t axis_tag) const\n+  {\n+    TRACE_SUBSET (this);\n+    \/* avar mapped normalized axis range*\/\n+    Triple *axis_range;\n+    if (!c->plan->axes_location.has (axis_tag, &axis_range))\n+      return c->serializer->embed (*this);\n+\n+    TripleDistances *axis_triple_distances;\n+    if (!c->plan->axes_triple_distances.has (axis_tag, &axis_triple_distances))\n+      return_trace (false);\n+\n+    auto *out = c->serializer->start_embed (this);\n+    if (unlikely (!c->serializer->extend_min (out))) return_trace (false);\n+\n+    Triple unmapped_range = unmap_axis_range (*axis_range);\n+\n+    \/* create a vector of retained mappings and sort *\/\n+    hb_vector_t<AxisValueMap> value_mappings;\n+    for (const auto& _ : as_array ())\n+    {\n+      if (_.is_outside_axis_range (unmapped_range))\n+        continue;\n+      AxisValueMap mapping;\n+      mapping = _;\n+      mapping.instantiate (*axis_range, unmapped_range, *axis_triple_distances);\n+      \/* (-1, -1), (0, 0), (1, 1) mappings will be added later, so avoid\n+       * duplicates here *\/\n+      if (mapping.must_include ())\n+        continue;\n+      value_mappings.push (std::move (mapping));\n+    }\n+\n+    AxisValueMap m;\n+    m.set_mapping (-1.f, -1.f);\n+    value_mappings.push (m);\n+\n+    m.set_mapping (0.f, 0.f);\n+    value_mappings.push (m);\n+\n+    m.set_mapping (1.f, 1.f);\n+    value_mappings.push (m);\n+\n+    value_mappings.qsort ();\n+\n+    for (const auto& _ : value_mappings)\n+    {\n+      if (!_.serialize (c->serializer))\n+        return_trace (false);\n+    }\n+    return_trace (c->serializer->check_assign (out->len, value_mappings.length, HB_SERIALIZE_ERROR_INT_OVERFLOW));\n+  }\n+\n@@ -228,0 +359,33 @@\n+  bool subset (hb_subset_context_t *c) const\n+  {\n+    TRACE_SUBSET (this);\n+    unsigned retained_axis_count = c->plan->axes_index_map.get_population ();\n+    if (!retained_axis_count) \/\/all axes are pinned\/dropped\n+      return_trace (false);\n+\n+    avar *out = c->serializer->allocate_min<avar> ();\n+    if (unlikely (!out)) return_trace (false);\n+\n+    out->version.major = 1;\n+    out->version.minor = 0;\n+    if (!c->serializer->check_assign (out->axisCount, retained_axis_count, HB_SERIALIZE_ERROR_INT_OVERFLOW))\n+      return_trace (false);\n+\n+    const hb_map_t& axes_index_map = c->plan->axes_index_map;\n+    const SegmentMaps *map = &firstAxisSegmentMaps;\n+    unsigned count = axisCount;\n+    for (unsigned int i = 0; i < count; i++)\n+    {\n+      if (axes_index_map.has (i))\n+      {\n+        hb_tag_t *axis_tag;\n+        if (!c->plan->axes_old_index_tag_map.has (i, &axis_tag))\n+          return_trace (false);\n+        if (!map->subset (c, *axis_tag))\n+          return_trace (false);\n+      }\n+      map = &StructAfter<SegmentMaps> (*map);\n+    }\n+    return_trace (true);\n+  }\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-var-avar-table.hh","additions":164,"deletions":0,"binary":false,"changes":164,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"hb-priority-queue.hh\"\n@@ -39,0 +40,3 @@\n+  unsigned get_size () const\n+  { return min_size + mapCount * get_width (); }\n+\n@@ -43,9 +47,1 @@\n-    auto *out = c->start_embed (this);\n-    if (unlikely (!out)) return_trace (nullptr);\n-\n-    unsigned total_size = min_size + mapCount * get_width ();\n-    HBUINT8 *p = c->allocate_size<HBUINT8> (total_size);\n-    if (unlikely (!p)) return_trace (nullptr);\n-\n-    hb_memcpy (p, this, HBUINT8::static_size * total_size);\n-    return_trace (out);\n+    return_trace (c->embed (this));\n@@ -72,5 +68,2 @@\n-      unsigned int v = output_map[i];\n-      unsigned int outer = v >> 16;\n-      unsigned int inner = v & 0xFFFF;\n-      unsigned int u = (outer << inner_bit_count) | inner;\n-      for (unsigned int w = width; w > 0;)\n+      unsigned int v = output_map.arrayZ[i];\n+      if (v)\n@@ -78,2 +71,8 @@\n-        p[--w] = u;\n-        u >>= 8;\n+        unsigned int outer = v >> 16;\n+        unsigned int inner = v & 0xFFFF;\n+        unsigned int u = (outer << inner_bit_count) | inner;\n+        for (unsigned int w = width; w > 0;)\n+        {\n+          p[--w] = u;\n+          u >>= 8;\n+        }\n@@ -235,1 +234,1 @@\n-  { return varStore->get_delta (varIdxMap ? varIdxMap->map (VarIdx::add (varIdx, offset)) : varIdx + offset, coords); }\n+  { return coords ? varStore->get_delta (varIdxMap ? varIdxMap->map (VarIdx::add (varIdx, offset)) : varIdx + offset, coords) : 0; }\n@@ -245,0 +244,1 @@\n+  friend struct tuple_delta_t;\n@@ -253,0 +253,52 @@\n+  bool unpack_axis_tuples (unsigned axis_count,\n+                           const hb_array_t<const F2DOT14> shared_tuples,\n+                           const hb_map_t *axes_old_index_tag_map,\n+                           hb_hashmap_t<hb_tag_t, Triple>& axis_tuples \/* OUT *\/) const\n+  {\n+    const F2DOT14 *peak_tuple = nullptr;\n+    if (has_peak ())\n+      peak_tuple = get_peak_tuple (axis_count).arrayZ;\n+    else\n+    {\n+      unsigned int index = get_index ();\n+      if (unlikely ((index + 1) * axis_count > shared_tuples.length))\n+        return false;\n+      peak_tuple = shared_tuples.sub_array (axis_count * index, axis_count).arrayZ;\n+    }\n+\n+    const F2DOT14 *start_tuple = nullptr;\n+    const F2DOT14 *end_tuple = nullptr;\n+    bool has_interm = has_intermediate ();\n+\n+    if (has_interm)\n+    {\n+      start_tuple = get_start_tuple (axis_count).arrayZ;\n+      end_tuple = get_end_tuple (axis_count).arrayZ;\n+    }\n+\n+    for (unsigned i = 0; i < axis_count; i++)\n+    {\n+      float peak = peak_tuple[i].to_float ();\n+      if (peak == 0.f) continue;\n+\n+      hb_tag_t *axis_tag;\n+      if (!axes_old_index_tag_map->has (i, &axis_tag))\n+        return false;\n+\n+      float start, end;\n+      if (has_interm)\n+      {\n+        start = start_tuple[i].to_float ();\n+        end = end_tuple[i].to_float ();\n+      }\n+      else\n+      {\n+        start = hb_min (peak, 0.f);\n+        end = hb_max (peak, 0.f);\n+      }\n+      axis_tuples.set (*axis_tag, Triple (start, peak, end));\n+    }\n+\n+    return true;\n+  }\n+\n@@ -255,1 +307,1 @@\n-                          const hb_vector_t<int> *shared_tuple_active_idx = nullptr) const\n+                          const hb_vector_t<hb_pair_t<int,int>> *shared_tuple_active_idx = nullptr) const\n@@ -261,0 +313,1 @@\n+    unsigned step = 1;\n@@ -273,3 +326,10 @@\n-        assert (index < shared_tuple_active_idx->length);\n-        int v = (*shared_tuple_active_idx).arrayZ[index];\n-        if (v != -1)\n+        if (unlikely (index >= shared_tuple_active_idx->length))\n+          return 0.f;\n+        auto _ = (*shared_tuple_active_idx).arrayZ[index];\n+        if (_.second != -1)\n+        {\n+          start_idx = _.first;\n+          end_idx = _.second + 1;\n+          step = _.second - _.first;\n+        }\n+        else if (_.first != -1)\n@@ -277,1 +337,1 @@\n-          start_idx = v;\n+          start_idx = _.first;\n@@ -293,1 +353,1 @@\n-    for (unsigned int i = start_idx; i < end_idx; i++)\n+    for (unsigned int i = start_idx; i < end_idx; i += step)\n@@ -335,0 +395,1 @@\n+    TuppleIndex& operator = (uint16_t i) { HBUINT16::operator= (i); return *this; }\n@@ -367,1 +428,1 @@\n-struct TupleVariationData\n+enum packed_delta_flag_t\n@@ -369,1 +430,30 @@\n-  bool sanitize (hb_sanitize_context_t *c) const\n+  DELTAS_ARE_ZERO      = 0x80,\n+  DELTAS_ARE_WORDS     = 0x40,\n+  DELTA_RUN_COUNT_MASK = 0x3F\n+};\n+\n+struct tuple_delta_t\n+{\n+  public:\n+  hb_hashmap_t<hb_tag_t, Triple> axis_tuples;\n+\n+  \/* indices_length = point_count, indice[i] = 1 means point i is referenced *\/\n+  hb_vector_t<bool> indices;\n+\n+  hb_vector_t<float> deltas_x;\n+  \/* empty for cvar tuples *\/\n+  hb_vector_t<float> deltas_y;\n+\n+  \/* compiled data: header and deltas\n+   * compiled point data is saved in a hashmap within tuple_variations_t cause\n+   * some point sets might be reused by different tuple variations *\/\n+  hb_vector_t<char> compiled_tuple_header;\n+  hb_vector_t<char> compiled_deltas;\n+\n+  \/* compiled peak coords, empty for non-gvar tuples *\/\n+  hb_vector_t<char> compiled_peak_coords;\n+\n+  tuple_delta_t () = default;\n+  tuple_delta_t (const tuple_delta_t& o) = default;\n+\n+  friend void swap (tuple_delta_t& a, tuple_delta_t& b)\n@@ -371,4 +461,7 @@\n-    TRACE_SANITIZE (this);\n-    \/\/ here check on min_size only, TupleVariationHeader and var data will be\n-    \/\/ checked while accessing through iterator.\n-    return_trace (c->check_struct (this));\n+    hb_swap (a.axis_tuples, b.axis_tuples);\n+    hb_swap (a.indices, b.indices);\n+    hb_swap (a.deltas_x, b.deltas_x);\n+    hb_swap (a.deltas_y, b.deltas_y);\n+    hb_swap (a.compiled_tuple_header, b.compiled_tuple_header);\n+    hb_swap (a.compiled_deltas, b.compiled_deltas);\n+    hb_swap (a.compiled_peak_coords, b.compiled_peak_coords);\n@@ -377,10 +470,2 @@\n-  unsigned get_size (unsigned axis_count) const\n-  {\n-    unsigned total_size = min_size;\n-    unsigned count = tupleVarCount;\n-    const TupleVariationHeader *tuple_var_header = &(get_tuple_var_header());\n-    for (unsigned i = 0; i < count; i++)\n-    {\n-      total_size += tuple_var_header->get_size (axis_count) + tuple_var_header->get_data_size ();\n-      tuple_var_header = &tuple_var_header->get_next (axis_count);\n-    }\n+  tuple_delta_t (tuple_delta_t&& o) : tuple_delta_t ()\n+  { hb_swap (*this, o); }\n@@ -388,1 +473,4 @@\n-    return total_size;\n+  tuple_delta_t& operator = (tuple_delta_t&& o)\n+  {\n+    hb_swap (*this, o);\n+    return *this;\n@@ -391,2 +479,2 @@\n-  const TupleVariationHeader &get_tuple_var_header (void) const\n-  { return StructAfter<TupleVariationHeader> (data); }\n+  void remove_axis (hb_tag_t axis_tag)\n+  { axis_tuples.del (axis_tag); }\n@@ -394,1 +482,4 @@\n-  struct tuple_iterator_t\n+  bool set_tent (hb_tag_t axis_tag, Triple tent)\n+  { return axis_tuples.set (axis_tag, tent); }\n+\n+  tuple_delta_t& operator += (const tuple_delta_t& o)\n@@ -396,1 +487,2 @@\n-    void init (hb_bytes_t var_data_bytes_, unsigned int axis_count_, const void *table_base_)\n+    unsigned num = indices.length;\n+    for (unsigned i = 0; i < num; i++)\n@@ -398,7 +490,17 @@\n-      var_data_bytes = var_data_bytes_;\n-      var_data = var_data_bytes_.as<TupleVariationData> ();\n-      index = 0;\n-      axis_count = axis_count_;\n-      current_tuple = &var_data->get_tuple_var_header ();\n-      data_offset = 0;\n-      table_base = table_base_;\n+      if (indices.arrayZ[i])\n+      {\n+        if (o.indices.arrayZ[i])\n+        {\n+          deltas_x[i] += o.deltas_x[i];\n+          if (deltas_y && o.deltas_y)\n+            deltas_y[i] += o.deltas_y[i];\n+        }\n+      }\n+      else\n+      {\n+        if (!o.indices.arrayZ[i]) continue;\n+        indices.arrayZ[i] = true;\n+        deltas_x[i] = o.deltas_x[i];\n+        if (deltas_y && o.deltas_y)\n+          deltas_y[i] = o.deltas_y[i];\n+      }\n@@ -406,0 +508,2 @@\n+    return *this;\n+  }\n@@ -407,1 +511,7 @@\n-    bool get_shared_indices (hb_vector_t<unsigned int> &shared_indices \/* OUT *\/)\n+  tuple_delta_t& operator *= (float scalar)\n+  {\n+    if (scalar == 1.0f)\n+      return *this;\n+\n+    unsigned num = indices.length;\n+    for (unsigned i = 0; i < num; i++)\n@@ -409,8 +519,5 @@\n-      if (var_data->has_shared_point_numbers ())\n-      {\n-        const HBUINT8 *base = &(table_base+var_data->data);\n-        const HBUINT8 *p = base;\n-        if (!unpack_points (p, shared_indices, (const HBUINT8 *) (var_data_bytes.arrayZ + var_data_bytes.length))) return false;\n-        data_offset = p - base;\n-      }\n-      return true;\n+      if (!indices.arrayZ[i]) continue;\n+\n+      deltas_x[i] *= scalar;\n+      if (deltas_y)\n+        deltas_y[i] *= scalar;\n@@ -418,0 +525,2 @@\n+    return *this;\n+  }\n@@ -419,1 +528,6 @@\n-    bool is_valid () const\n+  hb_vector_t<tuple_delta_t> change_tuple_var_axis_limit (hb_tag_t axis_tag, Triple axis_limit,\n+                                                          TripleDistances axis_triple_distances) const\n+  {\n+    hb_vector_t<tuple_delta_t> out;\n+    Triple *tent;\n+    if (!axis_tuples.has (axis_tag, &tent))\n@@ -421,4 +535,2 @@\n-      return (index < var_data->tupleVarCount.get_count ()) &&\n-             var_data_bytes.check_range (current_tuple, TupleVariationHeader::min_size) &&\n-             var_data_bytes.check_range (current_tuple, hb_max (current_tuple->get_data_size (),\n-                                                                current_tuple->get_size (axis_count)));\n+      out.push (*this);\n+      return out;\n@@ -427,1 +539,5 @@\n-    bool move_to_next ()\n+    if ((tent->minimum < 0.f && tent->maximum > 0.f) ||\n+        !(tent->minimum <= tent->middle && tent->middle <= tent->maximum))\n+      return out;\n+\n+    if (tent->middle == 0.f)\n@@ -429,4 +545,2 @@\n-      data_offset += current_tuple->get_data_size ();\n-      current_tuple = &current_tuple->get_next (axis_count);\n-      index++;\n-      return is_valid ();\n+      out.push (*this);\n+      return out;\n@@ -435,2 +549,8 @@\n-    const HBUINT8 *get_serialized_data () const\n-    { return &(table_base+var_data->data) + data_offset; }\n+    result_t solutions = rebase_tent (*tent, axis_limit, axis_triple_distances);\n+    for (auto t : solutions)\n+    {\n+      tuple_delta_t new_var = *this;\n+      if (t.second == Triple ())\n+        new_var.remove_axis (axis_tag);\n+      else\n+        new_var.set_tent (axis_tag, t.second);\n@@ -438,6 +558,3 @@\n-    private:\n-    const TupleVariationData *var_data;\n-    unsigned int index;\n-    unsigned int axis_count;\n-    unsigned int data_offset;\n-    const void *table_base;\n+      new_var *= t.first;\n+      out.push (std::move (new_var));\n+    }\n@@ -445,4 +562,2 @@\n-    public:\n-    hb_bytes_t var_data_bytes;\n-    const TupleVariationHeader *current_tuple;\n-  };\n+    return out;\n+  }\n@@ -450,4 +565,2 @@\n-  static bool get_tuple_iterator (hb_bytes_t var_data_bytes, unsigned axis_count,\n-                                  const void *table_base,\n-                                  hb_vector_t<unsigned int> &shared_indices \/* OUT *\/,\n-                                  tuple_iterator_t *iterator \/* OUT *\/)\n+  bool compile_peak_coords (const hb_map_t& axes_index_map,\n+                            const hb_map_t& axes_old_index_tag_map)\n@@ -455,2 +568,2 @@\n-    iterator->init (var_data_bytes, axis_count, table_base);\n-    if (!iterator->get_shared_indices (shared_indices))\n+    unsigned axis_count = axes_index_map.get_population ();\n+    if (unlikely (!compiled_peak_coords.alloc (axis_count * F2DOT14::static_size)))\n@@ -458,2 +571,0 @@\n-    return iterator->is_valid ();\n-  }\n@@ -461,1 +572,13 @@\n-  bool has_shared_point_numbers () const { return tupleVarCount.has_shared_point_numbers (); }\n+    unsigned orig_axis_count = axes_old_index_tag_map.get_population ();\n+    for (unsigned i = 0; i < orig_axis_count; i++)\n+    {\n+      if (!axes_index_map.has (i))\n+        continue;\n+\n+      hb_tag_t axis_tag = axes_old_index_tag_map.get (i);\n+      Triple *coords;\n+      F2DOT14 peak_coord;\n+      if (axis_tuples.has (axis_tag, &coords))\n+        peak_coord.set_float (coords->middle);\n+      else\n+        peak_coord.set_int (0);\n@@ -463,3 +586,16 @@\n-  static bool unpack_points (const HBUINT8 *&p \/* IN\/OUT *\/,\n-                             hb_vector_t<unsigned int> &points \/* OUT *\/,\n-                             const HBUINT8 *end)\n+      \/* push F2DOT14 value into char vector *\/\n+      int16_t val = peak_coord.to_int ();\n+      compiled_peak_coords.push (static_cast<char> (val >> 8));\n+      compiled_peak_coords.push (static_cast<char> (val & 0xFF));\n+    }\n+\n+    return !compiled_peak_coords.in_error ();\n+  }\n+\n+  \/* deltas should be compiled already before we compile tuple\n+   * variation header cause we need to fill in the size of the\n+   * serialized data for this tuple variation *\/\n+  bool compile_tuple_var_header (const hb_map_t& axes_index_map,\n+                                 unsigned points_data_length,\n+                                 const hb_map_t& axes_old_index_tag_map,\n+                                 const hb_hashmap_t<const hb_vector_t<char>*, unsigned>* shared_tuples_idx_map)\n@@ -467,1 +603,18 @@\n-    enum packed_point_flag_t\n+    if (!compiled_deltas) return false;\n+\n+    unsigned cur_axis_count = axes_index_map.get_population ();\n+    \/* allocate enough memory: 1 peak + 2 intermediate coords + fixed header size *\/\n+    unsigned alloc_len = 3 * cur_axis_count * (F2DOT14::static_size) + 4;\n+    if (unlikely (!compiled_tuple_header.resize (alloc_len))) return false;\n+\n+    unsigned flag = 0;\n+    \/* skip the first 4 header bytes: variationDataSize+tupleIndex *\/\n+    F2DOT14* p = reinterpret_cast<F2DOT14 *> (compiled_tuple_header.begin () + 4);\n+    F2DOT14* end = reinterpret_cast<F2DOT14 *> (compiled_tuple_header.end ());\n+    hb_array_t<F2DOT14> coords (p, end - p);\n+\n+    \/* encode peak coords *\/\n+    unsigned peak_count = 0;\n+    unsigned *shared_tuple_idx;\n+    if (shared_tuples_idx_map &&\n+        shared_tuples_idx_map->has (&compiled_peak_coords, &shared_tuple_idx))\n@@ -469,3 +622,7 @@\n-      POINTS_ARE_WORDS     = 0x80,\n-      POINT_RUN_COUNT_MASK = 0x7F\n-    };\n+      flag = *shared_tuple_idx;\n+    }\n+    else\n+    {\n+      peak_count = encode_peak_coords(coords, flag, axes_index_map, axes_old_index_tag_map);\n+      if (!peak_count) return false;\n+    }\n@@ -473,1 +630,2 @@\n-    if (unlikely (p + 1 > end)) return false;\n+    \/* encode interim coords, it's optional so returned num could be 0 *\/\n+    unsigned interim_count = encode_interm_coords (coords.sub_array (peak_count), flag, axes_index_map, axes_old_index_tag_map);\n@@ -475,2 +633,22 @@\n-    unsigned count = *p++;\n-    if (count & POINTS_ARE_WORDS)\n+    \/* pointdata length = 0 implies \"use shared points\" *\/\n+    if (points_data_length)\n+      flag |= TupleVariationHeader::TuppleIndex::PrivatePointNumbers;\n+\n+    unsigned serialized_data_size = points_data_length + compiled_deltas.length;\n+    TupleVariationHeader *o = reinterpret_cast<TupleVariationHeader *> (compiled_tuple_header.begin ());\n+    o->varDataSize = serialized_data_size;\n+    o->tupleIndex = flag;\n+\n+    unsigned total_header_len = 4 + (peak_count + interim_count) * (F2DOT14::static_size);\n+    return compiled_tuple_header.resize (total_header_len);\n+  }\n+\n+  unsigned encode_peak_coords (hb_array_t<F2DOT14> peak_coords,\n+                               unsigned& flag,\n+                               const hb_map_t& axes_index_map,\n+                               const hb_map_t& axes_old_index_tag_map) const\n+  {\n+    unsigned orig_axis_count = axes_old_index_tag_map.get_population ();\n+    auto it = peak_coords.iter ();\n+    unsigned count = 0;\n+    for (unsigned i = 0; i < orig_axis_count; i++)\n@@ -478,2 +656,10 @@\n-      if (unlikely (p + 1 > end)) return false;\n-      count = ((count & POINT_RUN_COUNT_MASK) << 8) | *p++;\n+      if (!axes_index_map.has (i)) \/* axis pinned *\/\n+        continue;\n+      hb_tag_t axis_tag = axes_old_index_tag_map.get (i);\n+      Triple *coords;\n+      if (!axis_tuples.has (axis_tag, &coords))\n+        (*it).set_int (0);\n+      else\n+        (*it).set_float (coords->middle);\n+      it++;\n+      count++;\n@@ -481,1 +667,3 @@\n-    if (unlikely (!points.resize (count, false))) return false;\n+    flag |= TupleVariationHeader::TuppleIndex::EmbeddedPeakTuple;\n+    return count;\n+  }\n@@ -483,3 +671,14 @@\n-    unsigned n = 0;\n-    unsigned i = 0;\n-    while (i < count)\n+  \/* if no need to encode intermediate coords, then just return p *\/\n+  unsigned encode_interm_coords (hb_array_t<F2DOT14> coords,\n+                                 unsigned& flag,\n+                                 const hb_map_t& axes_index_map,\n+                                 const hb_map_t& axes_old_index_tag_map) const\n+  {\n+    unsigned orig_axis_count = axes_old_index_tag_map.get_population ();\n+    unsigned cur_axis_count = axes_index_map.get_population ();\n+\n+    auto start_coords_iter = coords.sub_array (0, cur_axis_count).iter ();\n+    auto end_coords_iter = coords.sub_array (cur_axis_count).iter ();\n+    bool encode_needed = false;\n+    unsigned count = 0;\n+    for (unsigned i = 0; i < orig_axis_count; i++)\n@@ -487,16 +686,6 @@\n-      if (unlikely (p + 1 > end)) return false;\n-      unsigned control = *p++;\n-      unsigned run_count = (control & POINT_RUN_COUNT_MASK) + 1;\n-      unsigned stop = i + run_count;\n-      if (unlikely (stop > count)) return false;\n-      if (control & POINTS_ARE_WORDS)\n-      {\n-        if (unlikely (p + run_count * HBUINT16::static_size > end)) return false;\n-        for (; i < stop; i++)\n-        {\n-          n += *(const HBUINT16 *)p;\n-          points.arrayZ[i] = n;\n-          p += HBUINT16::static_size;\n-        }\n-      }\n-      else\n+      if (!axes_index_map.has (i)) \/* axis pinned *\/\n+        continue;\n+      hb_tag_t axis_tag = axes_old_index_tag_map.get (i);\n+      Triple *coords;\n+      float min_val = 0.f, val = 0.f, max_val = 0.f;\n+      if (axis_tuples.has (axis_tag, &coords))\n@@ -504,6 +693,3 @@\n-        if (unlikely (p + run_count > end)) return false;\n-        for (; i < stop; i++)\n-        {\n-          n += *p++;\n-          points.arrayZ[i] = n;\n-        }\n+        min_val = coords->minimum;\n+        val = coords->middle;\n+        max_val = coords->maximum;\n@@ -511,0 +697,9 @@\n+\n+      (*start_coords_iter).set_float (min_val);\n+      (*end_coords_iter).set_float (max_val);\n+\n+      start_coords_iter++;\n+      end_coords_iter++;\n+      count += 2;\n+      if (min_val != hb_min (val, 0.f) || max_val != hb_max (val, 0.f))\n+        encode_needed = true;\n@@ -512,1 +707,7 @@\n-    return true;\n+\n+    if (encode_needed)\n+    {\n+      flag |= TupleVariationHeader::TuppleIndex::IntermediateRegion;\n+      return count;\n+    }\n+    return 0;\n@@ -515,3 +716,1 @@\n-  static bool unpack_deltas (const HBUINT8 *&p \/* IN\/OUT *\/,\n-                             hb_vector_t<int> &deltas \/* IN\/OUT *\/,\n-                             const HBUINT8 *end)\n+  bool compile_deltas ()\n@@ -519,1 +718,5 @@\n-    enum packed_delta_flag_t\n+    hb_vector_t<int> rounded_deltas;\n+    if (unlikely (!rounded_deltas.alloc (indices.length)))\n+      return false;\n+\n+    for (unsigned i = 0; i < indices.length; i++)\n@@ -521,4 +724,12 @@\n-      DELTAS_ARE_ZERO      = 0x80,\n-      DELTAS_ARE_WORDS     = 0x40,\n-      DELTA_RUN_COUNT_MASK = 0x3F\n-    };\n+      if (!indices[i]) continue;\n+      int rounded_delta = (int) roundf (deltas_x[i]);\n+      rounded_deltas.push (rounded_delta);\n+    }\n+\n+    if (!rounded_deltas) return false;\n+    \/* allocate enough memories 3 * num_deltas *\/\n+    unsigned alloc_len = 3 * rounded_deltas.length;\n+    if (deltas_y)\n+      alloc_len *= 2;\n+\n+    if (unlikely (!compiled_deltas.resize (alloc_len))) return false;\n@@ -527,2 +738,3 @@\n-    unsigned count = deltas.length;\n-    while (i < count)\n+    unsigned encoded_len = encode_delta_run (i, compiled_deltas.as_array (), rounded_deltas);\n+\n+    if (deltas_y)\n@@ -530,20 +742,3 @@\n-      if (unlikely (p + 1 > end)) return false;\n-      unsigned control = *p++;\n-      unsigned run_count = (control & DELTA_RUN_COUNT_MASK) + 1;\n-      unsigned stop = i + run_count;\n-      if (unlikely (stop > count)) return false;\n-      if (control & DELTAS_ARE_ZERO)\n-      {\n-        for (; i < stop; i++)\n-          deltas.arrayZ[i] = 0;\n-      }\n-      else if (control & DELTAS_ARE_WORDS)\n-      {\n-        if (unlikely (p + run_count * HBUINT16::static_size > end)) return false;\n-        for (; i < stop; i++)\n-        {\n-          deltas.arrayZ[i] = * (const HBINT16 *) p;\n-          p += HBUINT16::static_size;\n-        }\n-      }\n-      else\n+      \/* reuse the rounded_deltas vector, check that deltas_y have the same num of deltas as deltas_x *\/\n+      unsigned j = 0;\n+      for (unsigned idx = 0; idx < indices.length; idx++)\n@@ -551,5 +746,6 @@\n-        if (unlikely (p + run_count > end)) return false;\n-        for (; i < stop; i++)\n-        {\n-          deltas.arrayZ[i] = * (const HBINT8 *) p++;\n-        }\n+        if (!indices[idx]) continue;\n+        int rounded_delta = (int) roundf (deltas_y[idx]);\n+\n+        if (j >= rounded_deltas.length) return false;\n+\n+        rounded_deltas[j++] = rounded_delta;\n@@ -557,0 +753,5 @@\n+\n+      if (j != rounded_deltas.length) return false;\n+      \/* reset i because we reuse rounded_deltas for deltas_y *\/\n+      i = 0;\n+      encoded_len += encode_delta_run (i, compiled_deltas.as_array ().sub_array (encoded_len), rounded_deltas);\n@@ -558,1 +759,1 @@\n-    return true;\n+    return compiled_deltas.resize (encoded_len);\n@@ -561,1 +762,18 @@\n-  bool has_data () const { return tupleVarCount; }\n+  unsigned encode_delta_run (unsigned& i,\n+                             hb_array_t<char> encoded_bytes,\n+                             const hb_vector_t<int>& deltas) const\n+  {\n+    unsigned num_deltas = deltas.length;\n+    unsigned encoded_len = 0;\n+    while (i < num_deltas)\n+    {\n+      int val = deltas[i];\n+      if (val == 0)\n+        encoded_len += encode_delta_run_as_zeroes (i, encoded_bytes.sub_array (encoded_len), deltas);\n+      else if (val >= -128 && val <= 127)\n+        encoded_len += encode_delta_run_as_bytes (i, encoded_bytes.sub_array (encoded_len), deltas);\n+      else\n+        encoded_len += encode_delta_run_as_words (i, encoded_bytes.sub_array (encoded_len), deltas);\n+    }\n+    return encoded_len;\n+  }\n@@ -563,2 +781,3 @@\n-  protected:\n-  struct TupleVarCount : HBUINT16\n+  unsigned encode_delta_run_as_zeroes (unsigned& i,\n+                                       hb_array_t<char> encoded_bytes,\n+                                       const hb_vector_t<int>& deltas) const\n@@ -566,2 +785,9 @@\n-    bool has_shared_point_numbers () const { return ((*this) & SharedPointNumbers); }\n-    unsigned int get_count () const { return (*this) & CountMask; }\n+    unsigned num_deltas = deltas.length;\n+    unsigned run_length = 0;\n+    auto it = encoded_bytes.iter ();\n+    unsigned encoded_len = 0;\n+    while (i < num_deltas && deltas[i] == 0)\n+    {\n+      i++;\n+      run_length++;\n+    }\n@@ -569,2 +795,1 @@\n-    protected:\n-    enum Flags\n+    while (run_length >= 64)\n@@ -572,5 +797,958 @@\n-      SharedPointNumbers= 0x8000u,\n-      CountMask         = 0x0FFFu\n-    };\n-    public:\n-    DEFINE_SIZE_STATIC (2);\n+      *it++ = char (DELTAS_ARE_ZERO | 63);\n+      run_length -= 64;\n+      encoded_len++;\n+    }\n+\n+    if (run_length)\n+    {\n+      *it++ = char (DELTAS_ARE_ZERO | (run_length - 1));\n+      encoded_len++;\n+    }\n+    return encoded_len;\n+  }\n+\n+  unsigned encode_delta_run_as_bytes (unsigned &i,\n+                                      hb_array_t<char> encoded_bytes,\n+                                      const hb_vector_t<int>& deltas) const\n+  {\n+    unsigned start = i;\n+    unsigned num_deltas = deltas.length;\n+    while (i < num_deltas)\n+    {\n+      int val = deltas[i];\n+      if (val > 127 || val < -128)\n+        break;\n+\n+      \/* from fonttools: if there're 2 or more zeros in a sequence,\n+       * it is better to start a new run to save bytes. *\/\n+      if (val == 0 && i + 1 < num_deltas && deltas[i+1] == 0)\n+        break;\n+\n+      i++;\n+    }\n+    unsigned run_length = i - start;\n+\n+    unsigned encoded_len = 0;\n+    auto it = encoded_bytes.iter ();\n+\n+    while (run_length >= 64)\n+    {\n+      *it++ = 63;\n+      encoded_len++;\n+\n+      for (unsigned j = 0; j < 64; j++)\n+      {\n+        *it++ = static_cast<char> (deltas[start + j]);\n+        encoded_len++;\n+      }\n+\n+      start += 64;\n+      run_length -= 64;\n+    }\n+\n+    if (run_length)\n+    {\n+      *it++ = run_length - 1;\n+      encoded_len++;\n+\n+      while (start < i)\n+      {\n+        *it++ = static_cast<char> (deltas[start++]);\n+        encoded_len++;\n+      }\n+    }\n+\n+    return encoded_len;\n+  }\n+\n+  unsigned encode_delta_run_as_words (unsigned &i,\n+                                      hb_array_t<char> encoded_bytes,\n+                                      const hb_vector_t<int>& deltas) const\n+  {\n+    unsigned start = i;\n+    unsigned num_deltas = deltas.length;\n+    while (i < num_deltas)\n+    {\n+      int val = deltas[i];\n+\n+      \/* start a new run for a single zero value*\/\n+      if (val == 0) break;\n+\n+      \/* from fonttools: continue word-encoded run if there's only one\n+       * single value in the range [-128, 127] because it is more compact.\n+       * Only start a new run when there're 2 continuous such values. *\/\n+      if (val >= -128 && val <= 127 &&\n+          i + 1 < num_deltas &&\n+          deltas[i+1] >= -128 && deltas[i+1] <= 127)\n+        break;\n+\n+      i++;\n+    }\n+\n+    unsigned run_length = i - start;\n+    auto it = encoded_bytes.iter ();\n+    unsigned encoded_len = 0;\n+    while (run_length >= 64)\n+    {\n+      *it++ = (DELTAS_ARE_WORDS | 63);\n+      encoded_len++;\n+\n+      for (unsigned j = 0; j < 64; j++)\n+      {\n+        int16_t delta_val = deltas[start + j];\n+        *it++ = static_cast<char> (delta_val >> 8);\n+        *it++ = static_cast<char> (delta_val & 0xFF);\n+\n+        encoded_len += 2;\n+      }\n+\n+      start += 64;\n+      run_length -= 64;\n+    }\n+\n+    if (run_length)\n+    {\n+      *it++ = (DELTAS_ARE_WORDS | (run_length - 1));\n+      encoded_len++;\n+      while (start < i)\n+      {\n+        int16_t delta_val = deltas[start++];\n+        *it++ = static_cast<char> (delta_val >> 8);\n+        *it++ = static_cast<char> (delta_val & 0xFF);\n+\n+        encoded_len += 2;\n+      }\n+    }\n+    return encoded_len;\n+  }\n+\n+  bool calc_inferred_deltas (const contour_point_vector_t& orig_points)\n+  {\n+    unsigned point_count = orig_points.length;\n+    if (point_count != indices.length)\n+      return false;\n+\n+    unsigned ref_count = 0;\n+    hb_vector_t<unsigned> end_points;\n+\n+    for (unsigned i = 0; i < point_count; i++)\n+    {\n+      if (indices.arrayZ[i])\n+        ref_count++;\n+      if (orig_points.arrayZ[i].is_end_point)\n+        end_points.push (i);\n+    }\n+    \/* all points are referenced, nothing to do *\/\n+    if (ref_count == point_count)\n+      return true;\n+    if (unlikely (end_points.in_error ())) return false;\n+\n+    hb_set_t inferred_idxes;\n+    unsigned start_point = 0;\n+    for (unsigned end_point : end_points)\n+    {\n+      \/* Check the number of unreferenced points in a contour. If no unref points or no ref points, nothing to do. *\/\n+      unsigned unref_count = 0;\n+      for (unsigned i = start_point; i < end_point + 1; i++)\n+        unref_count += indices.arrayZ[i];\n+      unref_count = (end_point - start_point + 1) - unref_count;\n+\n+      unsigned j = start_point;\n+      if (unref_count == 0 || unref_count > end_point - start_point)\n+        goto no_more_gaps;\n+      for (;;)\n+      {\n+        \/* Locate the next gap of unreferenced points between two referenced points prev and next.\n+         * Note that a gap may wrap around at left (start_point) and\/or at right (end_point).\n+         *\/\n+        unsigned int prev, next, i;\n+        for (;;)\n+        {\n+          i = j;\n+          j = next_index (i, start_point, end_point);\n+          if (indices.arrayZ[i] && !indices.arrayZ[j]) break;\n+        }\n+        prev = j = i;\n+        for (;;)\n+        {\n+          i = j;\n+          j = next_index (i, start_point, end_point);\n+          if (!indices.arrayZ[i] && indices.arrayZ[j]) break;\n+        }\n+        next = j;\n+       \/* Infer deltas for all unref points in the gap between prev and next *\/\n+        i = prev;\n+        for (;;)\n+        {\n+          i = next_index (i, start_point, end_point);\n+          if (i == next) break;\n+          deltas_x.arrayZ[i] = infer_delta (orig_points.arrayZ[i].x, orig_points.arrayZ[prev].x, orig_points.arrayZ[next].x,\n+                                            deltas_x.arrayZ[prev], deltas_x.arrayZ[next]);\n+          deltas_y.arrayZ[i] = infer_delta (orig_points.arrayZ[i].y, orig_points.arrayZ[prev].y, orig_points.arrayZ[next].y,\n+                                            deltas_y.arrayZ[prev], deltas_y.arrayZ[next]);\n+          inferred_idxes.add (i);\n+          if (--unref_count == 0) goto no_more_gaps;\n+        }\n+      }\n+    no_more_gaps:\n+      start_point = end_point + 1;\n+    }\n+\n+    for (unsigned i = 0; i < point_count; i++)\n+    {\n+      \/* if points are not referenced and deltas are not inferred, set to 0.\n+       * reference all points for gvar *\/\n+      if ( !indices[i])\n+      {\n+        if (!inferred_idxes.has (i))\n+        {\n+          deltas_x.arrayZ[i] = 0.f;\n+          deltas_y.arrayZ[i] = 0.f;\n+        }\n+        indices[i] = true;\n+      }\n+    }\n+    return true;\n+  }\n+\n+  static float infer_delta (float target_val, float prev_val, float next_val, float prev_delta, float next_delta)\n+  {\n+    if (prev_val == next_val)\n+      return (prev_delta == next_delta) ? prev_delta : 0.f;\n+    else if (target_val <= hb_min (prev_val, next_val))\n+      return (prev_val < next_val) ? prev_delta : next_delta;\n+    else if (target_val >= hb_max (prev_val, next_val))\n+      return (prev_val > next_val) ? prev_delta : next_delta;\n+\n+    float r = (target_val - prev_val) \/ (next_val - prev_val);\n+    return prev_delta + r * (next_delta - prev_delta);\n+  }\n+\n+  static unsigned int next_index (unsigned int i, unsigned int start, unsigned int end)\n+  { return (i >= end) ? start : (i + 1); }\n+};\n+\n+struct TupleVariationData\n+{\n+  bool sanitize (hb_sanitize_context_t *c) const\n+  {\n+    TRACE_SANITIZE (this);\n+    \/\/ here check on min_size only, TupleVariationHeader and var data will be\n+    \/\/ checked while accessing through iterator.\n+    return_trace (c->check_struct (this));\n+  }\n+\n+  unsigned get_size (unsigned axis_count) const\n+  {\n+    unsigned total_size = min_size;\n+    unsigned count = tupleVarCount.get_count ();\n+    const TupleVariationHeader *tuple_var_header = &(get_tuple_var_header());\n+    for (unsigned i = 0; i < count; i++)\n+    {\n+      total_size += tuple_var_header->get_size (axis_count) + tuple_var_header->get_data_size ();\n+      tuple_var_header = &tuple_var_header->get_next (axis_count);\n+    }\n+\n+    return total_size;\n+  }\n+\n+  const TupleVariationHeader &get_tuple_var_header (void) const\n+  { return StructAfter<TupleVariationHeader> (data); }\n+\n+  struct tuple_iterator_t;\n+  struct tuple_variations_t\n+  {\n+    hb_vector_t<tuple_delta_t> tuple_vars;\n+\n+    private:\n+    \/* referenced point set->compiled point data map *\/\n+    hb_hashmap_t<const hb_vector_t<bool>*, hb_bytes_t> point_data_map;\n+    \/* referenced point set-> count map, used in finding shared points *\/\n+    hb_hashmap_t<const hb_vector_t<bool>*, unsigned> point_set_count_map;\n+\n+    \/* empty for non-gvar tuples.\n+     * shared_points_bytes is just a copy of some value in the point_data_map,\n+     * which will be freed during map destruction. Save it for serialization, so\n+     * no need to do find_shared_points () again *\/\n+    hb_bytes_t shared_points_bytes;\n+\n+    \/* total compiled byte size as TupleVariationData format, initialized to its\n+     * min_size: 4 *\/\n+    unsigned compiled_byte_size = 4;\n+\n+    public:\n+    tuple_variations_t () = default;\n+    tuple_variations_t (const tuple_variations_t&) = delete;\n+    tuple_variations_t& operator=(const tuple_variations_t&) = delete;\n+    tuple_variations_t (tuple_variations_t&&) = default;\n+    tuple_variations_t& operator=(tuple_variations_t&&) = default;\n+    ~tuple_variations_t () { fini (); }\n+    void fini ()\n+    {\n+      for (auto _ : point_data_map.values ())\n+        _.fini ();\n+\n+      point_set_count_map.fini ();\n+      tuple_vars.fini ();\n+    }\n+\n+    explicit operator bool () const { return bool (tuple_vars); }\n+    unsigned get_var_count () const\n+    {\n+      unsigned count = tuple_vars.length;\n+      if (shared_points_bytes.length)\n+        count |= TupleVarCount::SharedPointNumbers;\n+      return count;\n+    }\n+\n+    unsigned get_compiled_byte_size () const\n+    { return compiled_byte_size; }\n+\n+    bool create_from_tuple_var_data (tuple_iterator_t iterator,\n+                                     unsigned tuple_var_count,\n+                                     unsigned point_count,\n+                                     bool is_gvar,\n+                                     const hb_map_t *axes_old_index_tag_map,\n+                                     const hb_vector_t<unsigned> &shared_indices,\n+                                     const hb_array_t<const F2DOT14> shared_tuples)\n+    {\n+      do\n+      {\n+        const HBUINT8 *p = iterator.get_serialized_data ();\n+        unsigned int length = iterator.current_tuple->get_data_size ();\n+        if (unlikely (!iterator.var_data_bytes.check_range (p, length)))\n+        { fini (); return false; }\n+\n+        hb_hashmap_t<hb_tag_t, Triple> axis_tuples;\n+        if (!iterator.current_tuple->unpack_axis_tuples (iterator.get_axis_count (), shared_tuples, axes_old_index_tag_map, axis_tuples)\n+            || axis_tuples.is_empty ())\n+        { fini (); return false; }\n+\n+        hb_vector_t<unsigned> private_indices;\n+        bool has_private_points = iterator.current_tuple->has_private_points ();\n+        const HBUINT8 *end = p + length;\n+        if (has_private_points &&\n+            !TupleVariationData::unpack_points (p, private_indices, end))\n+        { fini (); return false; }\n+\n+        const hb_vector_t<unsigned> &indices = has_private_points ? private_indices : shared_indices;\n+        bool apply_to_all = (indices.length == 0);\n+        unsigned num_deltas = apply_to_all ? point_count : indices.length;\n+\n+        hb_vector_t<int> deltas_x;\n+\n+        if (unlikely (!deltas_x.resize (num_deltas, false) ||\n+                      !TupleVariationData::unpack_deltas (p, deltas_x, end)))\n+        { fini (); return false; }\n+\n+        hb_vector_t<int> deltas_y;\n+        if (is_gvar)\n+        {\n+          if (unlikely (!deltas_y.resize (num_deltas, false) ||\n+                        !TupleVariationData::unpack_deltas (p, deltas_y, end)))\n+          { fini (); return false; }\n+        }\n+\n+        tuple_delta_t var;\n+        var.axis_tuples = std::move (axis_tuples);\n+        if (unlikely (!var.indices.resize (point_count) ||\n+                      !var.deltas_x.resize (point_count, false)))\n+        { fini (); return false; }\n+\n+        if (is_gvar && unlikely (!var.deltas_y.resize (point_count, false)))\n+        { fini (); return false; }\n+\n+        for (unsigned i = 0; i < num_deltas; i++)\n+        {\n+          unsigned idx = apply_to_all ? i : indices[i];\n+          if (idx >= point_count) continue;\n+          var.indices[idx] = true;\n+          var.deltas_x[idx] = static_cast<float> (deltas_x[i]);\n+          if (is_gvar)\n+            var.deltas_y[idx] = static_cast<float> (deltas_y[i]);\n+        }\n+        tuple_vars.push (std::move (var));\n+      } while (iterator.move_to_next ());\n+      return true;\n+    }\n+\n+    bool create_from_item_var_data (const VarData &var_data,\n+                                    const hb_vector_t<hb_hashmap_t<hb_tag_t, Triple>>& regions,\n+                                    const hb_map_t& axes_old_index_tag_map,\n+                                    const hb_inc_bimap_t* inner_map = nullptr)\n+    {\n+      \/* NULL offset, to keep original varidx valid, just return *\/\n+      if (&var_data == &Null (VarData))\n+        return true;\n+\n+      unsigned num_regions = var_data.get_region_index_count ();\n+      if (!tuple_vars.alloc (num_regions)) return false;\n+\n+      unsigned item_count = inner_map ? inner_map->get_population () : var_data.get_item_count ();\n+      unsigned row_size = var_data.get_row_size ();\n+      const HBUINT8 *delta_bytes = var_data.get_delta_bytes ();\n+\n+      for (unsigned r = 0; r < num_regions; r++)\n+      {\n+        \/* In VarData, deltas are organized in rows, convert them into\n+         * column(region) based tuples, resize deltas_x first *\/\n+        tuple_delta_t tuple;\n+        if (!tuple.deltas_x.resize (item_count, false) ||\n+            !tuple.indices.resize (item_count, false))\n+          return false;\n+\n+        for (unsigned i = 0; i < item_count; i++)\n+        {\n+          tuple.indices.arrayZ[i] = true;\n+          tuple.deltas_x.arrayZ[i] = var_data.get_item_delta_fast (inner_map ? inner_map->backward (i) : i,\n+                                                                   r, delta_bytes, row_size);\n+        }\n+\n+        unsigned region_index = var_data.get_region_index (r);\n+        if (region_index >= regions.length) return false;\n+        tuple.axis_tuples = regions.arrayZ[region_index];\n+\n+        tuple_vars.push (std::move (tuple));\n+      }\n+      return !tuple_vars.in_error ();\n+    }\n+\n+    private:\n+    static int _cmp_axis_tag (const void *pa, const void *pb)\n+    {\n+      const hb_tag_t *a = (const hb_tag_t*) pa;\n+      const hb_tag_t *b = (const hb_tag_t*) pb;\n+      return (int)(*a) - (int)(*b);\n+    }\n+\n+    bool change_tuple_variations_axis_limits (const hb_hashmap_t<hb_tag_t, Triple>& normalized_axes_location,\n+                                              const hb_hashmap_t<hb_tag_t, TripleDistances>& axes_triple_distances)\n+    {\n+      \/* sort axis_tag\/axis_limits, make result deterministic *\/\n+      hb_vector_t<hb_tag_t> axis_tags;\n+      if (!axis_tags.alloc (normalized_axes_location.get_population ()))\n+        return false;\n+      for (auto t : normalized_axes_location.keys ())\n+        axis_tags.push (t);\n+\n+      axis_tags.qsort (_cmp_axis_tag);\n+      for (auto axis_tag : axis_tags)\n+      {\n+        Triple *axis_limit;\n+        if (!normalized_axes_location.has (axis_tag, &axis_limit))\n+          return false;\n+        TripleDistances axis_triple_distances{1.f, 1.f};\n+        if (axes_triple_distances.has (axis_tag))\n+          axis_triple_distances = axes_triple_distances.get (axis_tag);\n+\n+        hb_vector_t<tuple_delta_t> new_vars;\n+        for (const tuple_delta_t& var : tuple_vars)\n+        {\n+          hb_vector_t<tuple_delta_t> out = var.change_tuple_var_axis_limit (axis_tag, *axis_limit, axis_triple_distances);\n+          if (!out) continue;\n+\n+          unsigned new_len = new_vars.length + out.length;\n+\n+          if (unlikely (!new_vars.alloc (new_len, false)))\n+          { fini (); return false;}\n+\n+          for (unsigned i = 0; i < out.length; i++)\n+            new_vars.push (std::move (out[i]));\n+        }\n+        tuple_vars.fini ();\n+        tuple_vars = std::move (new_vars);\n+      }\n+      return true;\n+    }\n+\n+    \/* merge tuple variations with overlapping tents *\/\n+    void merge_tuple_variations ()\n+    {\n+      hb_vector_t<tuple_delta_t> new_vars;\n+      hb_hashmap_t<const hb_hashmap_t<hb_tag_t, Triple>*, unsigned> m;\n+      unsigned i = 0;\n+      for (const tuple_delta_t& var : tuple_vars)\n+      {\n+        \/* if all axes are pinned, drop the tuple variation *\/\n+        if (var.axis_tuples.is_empty ()) continue;\n+\n+        unsigned *idx;\n+        if (m.has (&(var.axis_tuples), &idx))\n+        {\n+          new_vars[*idx] += var;\n+        }\n+        else\n+        {\n+          new_vars.push (var);\n+          m.set (&(var.axis_tuples), i);\n+          i++;\n+        }\n+      }\n+      tuple_vars.fini ();\n+      tuple_vars = std::move (new_vars);\n+    }\n+\n+    hb_bytes_t compile_point_set (const hb_vector_t<bool> &point_indices)\n+    {\n+      unsigned num_points = 0;\n+      for (bool i : point_indices)\n+        if (i) num_points++;\n+\n+      unsigned indices_length = point_indices.length;\n+      \/* If the points set consists of all points in the glyph, it's encoded with a\n+       * single zero byte *\/\n+      if (num_points == indices_length)\n+      {\n+        char *p = (char *) hb_calloc (1, sizeof (char));\n+        if (unlikely (!p)) return hb_bytes_t ();\n+\n+        return hb_bytes_t (p, 1);\n+      }\n+\n+      \/* allocate enough memories: 2 bytes for count + 3 bytes for each point *\/\n+      unsigned num_bytes = 2 + 3 *num_points;\n+      char *p = (char *) hb_calloc (num_bytes, sizeof (char));\n+      if (unlikely (!p)) return hb_bytes_t ();\n+\n+      unsigned pos = 0;\n+      \/* binary data starts with the total number of reference points *\/\n+      if (num_points < 0x80)\n+        p[pos++] = num_points;\n+      else\n+      {\n+        p[pos++] = ((num_points >> 8) | 0x80);\n+        p[pos++] = num_points & 0xFF;\n+      }\n+\n+      const unsigned max_run_length = 0x7F;\n+      unsigned i = 0;\n+      unsigned last_value = 0;\n+      unsigned num_encoded = 0;\n+      while (i < indices_length && num_encoded < num_points)\n+      {\n+        unsigned run_length = 0;\n+        unsigned header_pos = pos;\n+        p[pos++] = 0;\n+\n+        bool use_byte_encoding = false;\n+        bool new_run = true;\n+        while (i < indices_length && num_encoded < num_points &&\n+               run_length <= max_run_length)\n+        {\n+          \/\/ find out next referenced point index\n+          while (i < indices_length && !point_indices[i])\n+            i++;\n+\n+          if (i >= indices_length) break;\n+\n+          unsigned cur_value = i;\n+          unsigned delta = cur_value - last_value;\n+\n+          if (new_run)\n+          {\n+            use_byte_encoding = (delta <= 0xFF);\n+            new_run = false;\n+          }\n+\n+          if (use_byte_encoding && delta > 0xFF)\n+            break;\n+\n+          if (use_byte_encoding)\n+            p[pos++] = delta;\n+          else\n+          {\n+            p[pos++] = delta >> 8;\n+            p[pos++] = delta & 0xFF;\n+          }\n+          i++;\n+          last_value = cur_value;\n+          run_length++;\n+          num_encoded++;\n+        }\n+\n+        if (use_byte_encoding)\n+          p[header_pos] = run_length - 1;\n+        else\n+          p[header_pos] = (run_length - 1) | 0x80;\n+      }\n+      return hb_bytes_t (p, pos);\n+    }\n+\n+    \/* compile all point set and store byte data in a point_set->hb_bytes_t hashmap,\n+     * also update point_set->count map, which will be used in finding shared\n+     * point set*\/\n+    bool compile_all_point_sets ()\n+    {\n+      for (const auto& tuple: tuple_vars)\n+      {\n+        const hb_vector_t<bool>* points_set = &(tuple.indices);\n+        if (point_data_map.has (points_set))\n+        {\n+          unsigned *count;\n+          if (unlikely (!point_set_count_map.has (points_set, &count) ||\n+                        !point_set_count_map.set (points_set, (*count) + 1)))\n+            return false;\n+          continue;\n+        }\n+\n+        hb_bytes_t compiled_data = compile_point_set (*points_set);\n+        if (unlikely (compiled_data == hb_bytes_t ()))\n+          return false;\n+\n+        if (!point_data_map.set (points_set, compiled_data) ||\n+            !point_set_count_map.set (points_set, 1))\n+          return false;\n+      }\n+      return true;\n+    }\n+\n+    \/* find shared points set which saves most bytes *\/\n+    hb_bytes_t find_shared_points ()\n+    {\n+      unsigned max_saved_bytes = 0;\n+      hb_bytes_t res{};\n+\n+      for (const auto& _ : point_data_map.iter ())\n+      {\n+        const hb_vector_t<bool>* points_set = _.first;\n+        unsigned data_length = _.second.length;\n+        unsigned *count;\n+        if (unlikely (!point_set_count_map.has (points_set, &count) ||\n+                      *count <= 1))\n+          return hb_bytes_t ();\n+\n+        unsigned saved_bytes = data_length * ((*count) -1);\n+        if (saved_bytes > max_saved_bytes)\n+        {\n+          max_saved_bytes = saved_bytes;\n+          res = _.second;\n+        }\n+      }\n+      return res;\n+    }\n+\n+    bool calc_inferred_deltas (contour_point_vector_t& contour_points)\n+    {\n+      for (tuple_delta_t& var : tuple_vars)\n+        if (!var.calc_inferred_deltas (contour_points))\n+          return false;\n+\n+      return true;\n+    }\n+\n+    public:\n+    bool instantiate (const hb_hashmap_t<hb_tag_t, Triple>& normalized_axes_location,\n+                      const hb_hashmap_t<hb_tag_t, TripleDistances>& axes_triple_distances,\n+                      contour_point_vector_t* contour_points = nullptr)\n+    {\n+      if (!tuple_vars) return true;\n+      if (!change_tuple_variations_axis_limits (normalized_axes_location, axes_triple_distances))\n+        return false;\n+      \/* compute inferred deltas only for gvar *\/\n+      if (contour_points)\n+        if (!calc_inferred_deltas (*contour_points))\n+          return false;\n+\n+      merge_tuple_variations ();\n+      return !tuple_vars.in_error ();\n+    }\n+\n+    bool compile_bytes (const hb_map_t& axes_index_map,\n+                        const hb_map_t& axes_old_index_tag_map,\n+                        bool use_shared_points,\n+                        const hb_hashmap_t<const hb_vector_t<char>*, unsigned>* shared_tuples_idx_map = nullptr)\n+    {\n+      \/\/ compile points set and store data in hashmap\n+      if (!compile_all_point_sets ())\n+        return false;\n+\n+      if (use_shared_points)\n+      {\n+        shared_points_bytes = find_shared_points ();\n+        compiled_byte_size += shared_points_bytes.length;\n+      }\n+      \/\/ compile delta and tuple var header for each tuple variation\n+      for (auto& tuple: tuple_vars)\n+      {\n+        const hb_vector_t<bool>* points_set = &(tuple.indices);\n+        hb_bytes_t *points_data;\n+        if (unlikely (!point_data_map.has (points_set, &points_data)))\n+          return false;\n+\n+        if (!tuple.compile_deltas ())\n+          return false;\n+\n+        unsigned points_data_length = (*points_data != shared_points_bytes) ? points_data->length : 0;\n+        if (!tuple.compile_tuple_var_header (axes_index_map, points_data_length, axes_old_index_tag_map,\n+                                             shared_tuples_idx_map))\n+          return false;\n+        compiled_byte_size += tuple.compiled_tuple_header.length + points_data_length + tuple.compiled_deltas.length;\n+      }\n+      return true;\n+    }\n+\n+    bool serialize_var_headers (hb_serialize_context_t *c, unsigned& total_header_len) const\n+    {\n+      TRACE_SERIALIZE (this);\n+      for (const auto& tuple: tuple_vars)\n+      {\n+        tuple.compiled_tuple_header.as_array ().copy (c);\n+        if (c->in_error ()) return_trace (false);\n+        total_header_len += tuple.compiled_tuple_header.length;\n+      }\n+      return_trace (true);\n+    }\n+\n+    bool serialize_var_data (hb_serialize_context_t *c, bool is_gvar) const\n+    {\n+      TRACE_SERIALIZE (this);\n+      if (is_gvar)\n+        shared_points_bytes.copy (c);\n+\n+      for (const auto& tuple: tuple_vars)\n+      {\n+        const hb_vector_t<bool>* points_set = &(tuple.indices);\n+        hb_bytes_t *point_data;\n+        if (!point_data_map.has (points_set, &point_data))\n+          return_trace (false);\n+\n+        if (!is_gvar || *point_data != shared_points_bytes)\n+          point_data->copy (c);\n+\n+        tuple.compiled_deltas.as_array ().copy (c);\n+        if (c->in_error ()) return_trace (false);\n+      }\n+\n+      \/* padding for gvar *\/\n+      if (is_gvar && (compiled_byte_size % 2))\n+      {\n+        HBUINT8 pad;\n+        pad = 0;\n+        if (!c->embed (pad)) return_trace (false);\n+      }\n+      return_trace (true);\n+    }\n+  };\n+\n+  struct tuple_iterator_t\n+  {\n+    unsigned get_axis_count () const { return axis_count; }\n+\n+    void init (hb_bytes_t var_data_bytes_, unsigned int axis_count_, const void *table_base_)\n+    {\n+      var_data_bytes = var_data_bytes_;\n+      var_data = var_data_bytes_.as<TupleVariationData> ();\n+      index = 0;\n+      axis_count = axis_count_;\n+      current_tuple = &var_data->get_tuple_var_header ();\n+      data_offset = 0;\n+      table_base = table_base_;\n+    }\n+\n+    bool get_shared_indices (hb_vector_t<unsigned int> &shared_indices \/* OUT *\/)\n+    {\n+      if (var_data->has_shared_point_numbers ())\n+      {\n+        const HBUINT8 *base = &(table_base+var_data->data);\n+        const HBUINT8 *p = base;\n+        if (!unpack_points (p, shared_indices, (const HBUINT8 *) (var_data_bytes.arrayZ + var_data_bytes.length))) return false;\n+        data_offset = p - base;\n+      }\n+      return true;\n+    }\n+\n+    bool is_valid () const\n+    {\n+      return (index < var_data->tupleVarCount.get_count ()) &&\n+             var_data_bytes.check_range (current_tuple, TupleVariationHeader::min_size) &&\n+             var_data_bytes.check_range (current_tuple, hb_max (current_tuple->get_data_size (),\n+                                                                current_tuple->get_size (axis_count)));\n+    }\n+\n+    bool move_to_next ()\n+    {\n+      data_offset += current_tuple->get_data_size ();\n+      current_tuple = &current_tuple->get_next (axis_count);\n+      index++;\n+      return is_valid ();\n+    }\n+\n+    const HBUINT8 *get_serialized_data () const\n+    { return &(table_base+var_data->data) + data_offset; }\n+\n+    private:\n+    const TupleVariationData *var_data;\n+    unsigned int index;\n+    unsigned int axis_count;\n+    unsigned int data_offset;\n+    const void *table_base;\n+\n+    public:\n+    hb_bytes_t var_data_bytes;\n+    const TupleVariationHeader *current_tuple;\n+  };\n+\n+  static bool get_tuple_iterator (hb_bytes_t var_data_bytes, unsigned axis_count,\n+                                  const void *table_base,\n+                                  hb_vector_t<unsigned int> &shared_indices \/* OUT *\/,\n+                                  tuple_iterator_t *iterator \/* OUT *\/)\n+  {\n+    iterator->init (var_data_bytes, axis_count, table_base);\n+    if (!iterator->get_shared_indices (shared_indices))\n+      return false;\n+    return iterator->is_valid ();\n+  }\n+\n+  bool has_shared_point_numbers () const { return tupleVarCount.has_shared_point_numbers (); }\n+\n+  static bool unpack_points (const HBUINT8 *&p \/* IN\/OUT *\/,\n+                             hb_vector_t<unsigned int> &points \/* OUT *\/,\n+                             const HBUINT8 *end)\n+  {\n+    enum packed_point_flag_t\n+    {\n+      POINTS_ARE_WORDS     = 0x80,\n+      POINT_RUN_COUNT_MASK = 0x7F\n+    };\n+\n+    if (unlikely (p + 1 > end)) return false;\n+\n+    unsigned count = *p++;\n+    if (count & POINTS_ARE_WORDS)\n+    {\n+      if (unlikely (p + 1 > end)) return false;\n+      count = ((count & POINT_RUN_COUNT_MASK) << 8) | *p++;\n+    }\n+    if (unlikely (!points.resize (count, false))) return false;\n+\n+    unsigned n = 0;\n+    unsigned i = 0;\n+    while (i < count)\n+    {\n+      if (unlikely (p + 1 > end)) return false;\n+      unsigned control = *p++;\n+      unsigned run_count = (control & POINT_RUN_COUNT_MASK) + 1;\n+      unsigned stop = i + run_count;\n+      if (unlikely (stop > count)) return false;\n+      if (control & POINTS_ARE_WORDS)\n+      {\n+        if (unlikely (p + run_count * HBUINT16::static_size > end)) return false;\n+        for (; i < stop; i++)\n+        {\n+          n += *(const HBUINT16 *)p;\n+          points.arrayZ[i] = n;\n+          p += HBUINT16::static_size;\n+        }\n+      }\n+      else\n+      {\n+        if (unlikely (p + run_count > end)) return false;\n+        for (; i < stop; i++)\n+        {\n+          n += *p++;\n+          points.arrayZ[i] = n;\n+        }\n+      }\n+    }\n+    return true;\n+  }\n+\n+  static bool unpack_deltas (const HBUINT8 *&p \/* IN\/OUT *\/,\n+                             hb_vector_t<int> &deltas \/* IN\/OUT *\/,\n+                             const HBUINT8 *end)\n+  {\n+    unsigned i = 0;\n+    unsigned count = deltas.length;\n+    while (i < count)\n+    {\n+      if (unlikely (p + 1 > end)) return false;\n+      unsigned control = *p++;\n+      unsigned run_count = (control & DELTA_RUN_COUNT_MASK) + 1;\n+      unsigned stop = i + run_count;\n+      if (unlikely (stop > count)) return false;\n+      if (control & DELTAS_ARE_ZERO)\n+      {\n+        for (; i < stop; i++)\n+          deltas.arrayZ[i] = 0;\n+      }\n+      else if (control & DELTAS_ARE_WORDS)\n+      {\n+        if (unlikely (p + run_count * HBUINT16::static_size > end)) return false;\n+        for (; i < stop; i++)\n+        {\n+          deltas.arrayZ[i] = * (const HBINT16 *) p;\n+          p += HBUINT16::static_size;\n+        }\n+      }\n+      else\n+      {\n+        if (unlikely (p + run_count > end)) return false;\n+        for (; i < stop; i++)\n+        {\n+          deltas.arrayZ[i] = * (const HBINT8 *) p++;\n+        }\n+      }\n+    }\n+    return true;\n+  }\n+\n+  bool has_data () const { return tupleVarCount; }\n+\n+  bool decompile_tuple_variations (unsigned point_count,\n+                                   bool is_gvar,\n+                                   tuple_iterator_t iterator,\n+                                   const hb_map_t *axes_old_index_tag_map,\n+                                   const hb_vector_t<unsigned> &shared_indices,\n+                                   const hb_array_t<const F2DOT14> shared_tuples,\n+                                   tuple_variations_t& tuple_variations \/* OUT *\/) const\n+  {\n+    return tuple_variations.create_from_tuple_var_data (iterator, tupleVarCount,\n+                                                        point_count, is_gvar,\n+                                                        axes_old_index_tag_map,\n+                                                        shared_indices,\n+                                                        shared_tuples);\n+  }\n+\n+  bool serialize (hb_serialize_context_t *c,\n+                  bool is_gvar,\n+                  const tuple_variations_t& tuple_variations) const\n+  {\n+    TRACE_SERIALIZE (this);\n+    \/* empty tuple variations, just return and skip serialization. *\/\n+    if (!tuple_variations) return_trace (true);\n+\n+    auto *out = c->start_embed (this);\n+    if (unlikely (!c->extend_min (out))) return_trace (false);\n+\n+    if (!c->check_assign (out->tupleVarCount, tuple_variations.get_var_count (),\n+                          HB_SERIALIZE_ERROR_INT_OVERFLOW)) return_trace (false);\n+\n+    unsigned total_header_len = 0;\n+\n+    if (!tuple_variations.serialize_var_headers (c, total_header_len))\n+      return_trace (false);\n+\n+    unsigned data_offset = min_size + total_header_len;\n+    if (!is_gvar) data_offset += 4;\n+    if (!c->check_assign (out->data, data_offset, HB_SERIALIZE_ERROR_INT_OVERFLOW)) return_trace (false);\n+\n+    return tuple_variations.serialize_var_data (c, is_gvar);\n+  }\n+\n+  protected:\n+  struct TupleVarCount : HBUINT16\n+  {\n+    friend struct tuple_variations_t;\n+    bool has_shared_point_numbers () const { return ((*this) & SharedPointNumbers); }\n+    unsigned int get_count () const { return (*this) & CountMask; }\n+    TupleVarCount& operator = (uint16_t i) { HBUINT16::operator= (i); return *this; }\n+    explicit operator bool () const { return get_count (); }\n+\n+    protected:\n+    enum Flags\n+    {\n+      SharedPointNumbers= 0x8000u,\n+      CountMask         = 0x0FFFu\n+    };\n+    public:\n+    DEFINE_SIZE_STATIC (2);\n@@ -591,0 +1769,457 @@\n+using tuple_variations_t = TupleVariationData::tuple_variations_t;\n+struct item_variations_t\n+{\n+  using region_t = const hb_hashmap_t<hb_tag_t, Triple>*;\n+  private:\n+  \/* each subtable is decompiled into a tuple_variations_t, in which all tuples\n+   * have the same num of deltas (rows) *\/\n+  hb_vector_t<tuple_variations_t> vars;\n+\n+  \/* original region list, decompiled from item varstore, used when rebuilding\n+   * region list after instantiation *\/\n+  hb_vector_t<hb_hashmap_t<hb_tag_t, Triple>> orig_region_list;\n+\n+  \/* region list: vector of Regions, maintain the original order for the regions\n+   * that existed before instantiate (), append the new regions at the end.\n+   * Regions are stored in each tuple already, save pointers only.\n+   * When converting back to item varstore, unused regions will be pruned *\/\n+  hb_vector_t<region_t> region_list;\n+\n+  \/* region -> idx map after instantiation and pruning unused regions *\/\n+  hb_hashmap_t<region_t, unsigned> region_map;\n+\n+  \/* all delta rows after instantiation *\/\n+  hb_vector_t<hb_vector_t<int>> delta_rows;\n+  \/* final optimized vector of encoding objects used to assemble the varstore *\/\n+  hb_vector_t<delta_row_encoding_t> encodings;\n+\n+  \/* old varidxes -> new var_idxes map *\/\n+  hb_map_t varidx_map;\n+\n+  \/* has long words *\/\n+  bool has_long = false;\n+\n+  public:\n+  bool has_long_word () const\n+  { return has_long; }\n+\n+  const hb_vector_t<region_t>& get_region_list () const\n+  { return region_list; }\n+\n+  const hb_vector_t<delta_row_encoding_t>& get_vardata_encodings () const\n+  { return encodings; }\n+\n+  const hb_map_t& get_varidx_map () const\n+  { return varidx_map; }\n+\n+  bool instantiate (const VariationStore& varStore,\n+                    const hb_subset_plan_t *plan,\n+                    bool optimize=true,\n+                    bool use_no_variation_idx=true,\n+                    const hb_array_t <const hb_inc_bimap_t> inner_maps = hb_array_t<const hb_inc_bimap_t> ())\n+  {\n+    if (!create_from_item_varstore (varStore, plan->axes_old_index_tag_map, inner_maps))\n+      return false;\n+    if (!instantiate_tuple_vars (plan->axes_location, plan->axes_triple_distances))\n+      return false;\n+    return as_item_varstore (optimize, use_no_variation_idx);\n+  }\n+\n+  \/* keep below APIs public only for unit test: test-item-varstore *\/\n+  bool create_from_item_varstore (const VariationStore& varStore,\n+                                  const hb_map_t& axes_old_index_tag_map,\n+                                  const hb_array_t <const hb_inc_bimap_t> inner_maps = hb_array_t<const hb_inc_bimap_t> ())\n+  {\n+    const VarRegionList& regionList = varStore.get_region_list ();\n+    if (!regionList.get_var_regions (axes_old_index_tag_map, orig_region_list))\n+      return false;\n+\n+    unsigned num_var_data = varStore.get_sub_table_count ();\n+    if (inner_maps && inner_maps.length != num_var_data) return false;\n+    if (!vars.alloc (num_var_data)) return false;\n+\n+    for (unsigned i = 0; i < num_var_data; i++)\n+    {\n+      if (inner_maps && !inner_maps.arrayZ[i].get_population ())\n+          continue;\n+      tuple_variations_t var_data_tuples;\n+      if (!var_data_tuples.create_from_item_var_data (varStore.get_sub_table (i),\n+                                                      orig_region_list,\n+                                                      axes_old_index_tag_map,\n+                                                      inner_maps ? &(inner_maps.arrayZ[i]) : nullptr))\n+        return false;\n+\n+      vars.push (std::move (var_data_tuples));\n+    }\n+    return !vars.in_error ();\n+  }\n+\n+  bool instantiate_tuple_vars (const hb_hashmap_t<hb_tag_t, Triple>& normalized_axes_location,\n+                               const hb_hashmap_t<hb_tag_t, TripleDistances>& axes_triple_distances)\n+  {\n+    for (tuple_variations_t& tuple_vars : vars)\n+      if (!tuple_vars.instantiate (normalized_axes_location, axes_triple_distances))\n+        return false;\n+\n+    if (!build_region_list ()) return false;\n+    return true;\n+  }\n+\n+  bool build_region_list ()\n+  {\n+    \/* scan all tuples and collect all unique regions, prune unused regions *\/\n+    hb_hashmap_t<region_t, unsigned> all_regions;\n+    hb_hashmap_t<region_t, unsigned> used_regions;\n+\n+    \/* use a vector when inserting new regions, make result deterministic *\/\n+    hb_vector_t<region_t> all_unique_regions;\n+    for (const tuple_variations_t& sub_table : vars)\n+    {\n+      for (const tuple_delta_t& tuple : sub_table.tuple_vars)\n+      {\n+        region_t r = &(tuple.axis_tuples);\n+        if (!used_regions.has (r))\n+        {\n+          bool all_zeros = true;\n+          for (float d : tuple.deltas_x)\n+          {\n+            int delta = (int) roundf (d);\n+            if (delta != 0)\n+            {\n+              all_zeros = false;\n+              break;\n+            }\n+          }\n+          if (!all_zeros)\n+          {\n+            if (!used_regions.set (r, 1))\n+              return false;\n+          }\n+        }\n+        if (all_regions.has (r))\n+          continue;\n+        if (!all_regions.set (r, 1))\n+          return false;\n+        all_unique_regions.push (r);\n+      }\n+    }\n+\n+    if (!all_regions || !all_unique_regions) return false;\n+    if (!region_list.alloc (all_regions.get_population ()))\n+      return false;\n+\n+    unsigned idx = 0;\n+    \/* append the original regions that pre-existed *\/\n+    for (const auto& r : orig_region_list)\n+    {\n+      if (!all_regions.has (&r) || !used_regions.has (&r))\n+        continue;\n+\n+      region_list.push (&r);\n+      if (!region_map.set (&r, idx))\n+        return false;\n+      all_regions.del (&r);\n+      idx++;\n+    }\n+\n+    \/* append the new regions at the end *\/\n+    for (const auto& r: all_unique_regions)\n+    {\n+      if (!all_regions.has (r) || !used_regions.has (r))\n+        continue;\n+      region_list.push (r);\n+      if (!region_map.set (r, idx))\n+        return false;\n+      all_regions.del (r);\n+      idx++;\n+    }\n+    return (!region_list.in_error ()) && (!region_map.in_error ());\n+  }\n+\n+  \/* main algorithm ported from fonttools VarStore_optimize() method, optimize\n+   * varstore by default *\/\n+\n+  struct combined_gain_idx_tuple_t\n+  {\n+    int gain;\n+    unsigned idx_1;\n+    unsigned idx_2;\n+\n+    combined_gain_idx_tuple_t () = default;\n+    combined_gain_idx_tuple_t (int gain_, unsigned i, unsigned j)\n+        :gain (gain_), idx_1 (i), idx_2 (j) {}\n+\n+    bool operator < (const combined_gain_idx_tuple_t& o)\n+    {\n+      if (gain != o.gain)\n+        return gain < o.gain;\n+\n+      if (idx_1 != o.idx_1)\n+        return idx_1 < o.idx_1;\n+\n+      return idx_2 < o.idx_2;\n+    }\n+\n+    bool operator <= (const combined_gain_idx_tuple_t& o)\n+    {\n+      if (*this < o) return true;\n+      return gain == o.gain && idx_1 == o.idx_1 && idx_2 == o.idx_2;\n+    }\n+  };\n+\n+  bool as_item_varstore (bool optimize=true, bool use_no_variation_idx=true)\n+  {\n+    if (!region_list) return false;\n+    unsigned num_cols = region_list.length;\n+    \/* pre-alloc a 2D vector for all sub_table's VarData rows *\/\n+    unsigned total_rows = 0;\n+    for (unsigned major = 0; major < vars.length; major++)\n+    {\n+      const tuple_variations_t& tuples = vars[major];\n+      \/* all tuples in each sub_table should have same num of deltas(num rows) *\/\n+      total_rows += tuples.tuple_vars[0].deltas_x.length;\n+    }\n+\n+    if (!delta_rows.resize (total_rows)) return false;\n+    \/* init all rows to [0]*num_cols *\/\n+    for (unsigned i = 0; i < total_rows; i++)\n+      if (!(delta_rows[i].resize (num_cols))) return false;\n+\n+    \/* old VarIdxes -> full encoding_row mapping *\/\n+    hb_hashmap_t<unsigned, const hb_vector_t<int>*> front_mapping;\n+    unsigned start_row = 0;\n+    hb_vector_t<delta_row_encoding_t> encoding_objs;\n+    hb_hashmap_t<hb_vector_t<uint8_t>, unsigned> chars_idx_map;\n+\n+    \/* delta_rows map, used for filtering out duplicate rows *\/\n+    hb_hashmap_t<const hb_vector_t<int>*, unsigned> delta_rows_map;\n+    for (unsigned major = 0; major < vars.length; major++)\n+    {\n+      \/* deltas are stored in tuples(column based), convert them back into items\n+       * (row based) delta *\/\n+      const tuple_variations_t& tuples = vars[major];\n+      unsigned num_rows = tuples.tuple_vars[0].deltas_x.length;\n+      for (const tuple_delta_t& tuple: tuples.tuple_vars)\n+      {\n+        if (tuple.deltas_x.length != num_rows)\n+          return false;\n+\n+        \/* skip unused regions *\/\n+        unsigned *col_idx;\n+        if (!region_map.has (&(tuple.axis_tuples), &col_idx))\n+          continue;\n+\n+        for (unsigned i = 0; i < num_rows; i++)\n+        {\n+          int rounded_delta = roundf (tuple.deltas_x[i]);\n+          delta_rows[start_row + i][*col_idx] += rounded_delta;\n+          if ((!has_long) && (rounded_delta < -65536 || rounded_delta > 65535))\n+            has_long = true;\n+        }\n+      }\n+\n+      if (!optimize)\n+      {\n+        \/* assemble a delta_row_encoding_t for this subtable, skip optimization so\n+         * chars is not initialized, we only need delta rows for serialization *\/\n+        delta_row_encoding_t obj;\n+        for (unsigned r = start_row; r < start_row + num_rows; r++)\n+          obj.add_row (&(delta_rows.arrayZ[r]));\n+\n+        encodings.push (std::move (obj));\n+        start_row += num_rows;\n+        continue;\n+      }\n+\n+      for (unsigned minor = 0; minor < num_rows; minor++)\n+      {\n+        const hb_vector_t<int>& row = delta_rows[start_row + minor];\n+        if (use_no_variation_idx)\n+        {\n+          bool all_zeros = true;\n+          for (int delta : row)\n+          {\n+            if (delta != 0)\n+            {\n+              all_zeros = false;\n+              break;\n+            }\n+          }\n+          if (all_zeros)\n+            continue;\n+        }\n+\n+        if (!front_mapping.set ((major<<16) + minor, &row))\n+          return false;\n+\n+        hb_vector_t<uint8_t> chars = delta_row_encoding_t::get_row_chars (row);\n+        if (!chars) return false;\n+\n+        if (delta_rows_map.has (&row))\n+          continue;\n+\n+        delta_rows_map.set (&row, 1);\n+        unsigned *obj_idx;\n+        if (chars_idx_map.has (chars, &obj_idx))\n+        {\n+          delta_row_encoding_t& obj = encoding_objs[*obj_idx];\n+          if (!obj.add_row (&row))\n+            return false;\n+        }\n+        else\n+        {\n+          if (!chars_idx_map.set (chars, encoding_objs.length))\n+            return false;\n+          delta_row_encoding_t obj (std::move (chars), &row);\n+          encoding_objs.push (std::move (obj));\n+        }\n+      }\n+\n+      start_row += num_rows;\n+    }\n+\n+    \/* return directly if no optimization, maintain original VariationIndex so\n+     * varidx_map would be empty *\/\n+    if (!optimize) return !encodings.in_error ();\n+\n+    \/* sort encoding_objs *\/\n+    encoding_objs.qsort ();\n+\n+    \/* main algorithm: repeatedly pick 2 best encodings to combine, and combine\n+     * them *\/\n+    hb_priority_queue_t<combined_gain_idx_tuple_t> queue;\n+    unsigned num_todos = encoding_objs.length;\n+    for (unsigned i = 0; i < num_todos; i++)\n+    {\n+      for (unsigned j = i + 1; j < num_todos; j++)\n+      {\n+        int combining_gain = encoding_objs.arrayZ[i].gain_from_merging (encoding_objs.arrayZ[j]);\n+        if (combining_gain > 0)\n+          queue.insert (combined_gain_idx_tuple_t (-combining_gain, i, j), 0);\n+      }\n+    }\n+\n+    hb_set_t removed_todo_idxes;\n+    while (queue)\n+    {\n+      auto t = queue.pop_minimum ().first;\n+      unsigned i = t.idx_1;\n+      unsigned j = t.idx_2;\n+\n+      if (removed_todo_idxes.has (i) || removed_todo_idxes.has (j))\n+        continue;\n+\n+      delta_row_encoding_t& encoding = encoding_objs.arrayZ[i];\n+      delta_row_encoding_t& other_encoding = encoding_objs.arrayZ[j];\n+\n+      removed_todo_idxes.add (i);\n+      removed_todo_idxes.add (j);\n+\n+      hb_vector_t<uint8_t> combined_chars;\n+      if (!combined_chars.alloc (encoding.chars.length))\n+        return false;\n+\n+      for (unsigned idx = 0; idx < encoding.chars.length; idx++)\n+      {\n+        uint8_t v = hb_max (encoding.chars.arrayZ[idx], other_encoding.chars.arrayZ[idx]);\n+        combined_chars.push (v);\n+      }\n+\n+      delta_row_encoding_t combined_encoding_obj (std::move (combined_chars));\n+      for (const auto& row : hb_concat (encoding.items, other_encoding.items))\n+        combined_encoding_obj.add_row (row);\n+\n+      for (unsigned idx = 0; idx < encoding_objs.length; idx++)\n+      {\n+        if (removed_todo_idxes.has (idx)) continue;\n+\n+        const delta_row_encoding_t& obj = encoding_objs.arrayZ[idx];\n+        if (obj.chars == combined_chars)\n+        {\n+          for (const auto& row : obj.items)\n+            combined_encoding_obj.add_row (row);\n+\n+          removed_todo_idxes.add (idx);\n+          continue;\n+        }\n+\n+        int combined_gain = combined_encoding_obj.gain_from_merging (obj);\n+        if (combined_gain > 0)\n+          queue.insert (combined_gain_idx_tuple_t (-combined_gain, idx, encoding_objs.length), 0);\n+      }\n+\n+      encoding_objs.push (std::move (combined_encoding_obj));\n+    }\n+\n+    int num_final_encodings = (int) encoding_objs.length - (int) removed_todo_idxes.get_population ();\n+    if (num_final_encodings <= 0) return false;\n+\n+    if (!encodings.alloc (num_final_encodings)) return false;\n+    for (unsigned i = 0; i < encoding_objs.length; i++)\n+    {\n+      if (removed_todo_idxes.has (i)) continue;\n+      encodings.push (std::move (encoding_objs.arrayZ[i]));\n+    }\n+\n+    \/* sort again based on width, make result deterministic *\/\n+    encodings.qsort (delta_row_encoding_t::cmp_width);\n+\n+    return compile_varidx_map (front_mapping);\n+  }\n+\n+  private:\n+  \/* compile varidx_map for one VarData subtable (index specified by major) *\/\n+  bool compile_varidx_map (const hb_hashmap_t<unsigned, const hb_vector_t<int>*>& front_mapping)\n+  {\n+    \/* full encoding_row -> new VarIdxes mapping *\/\n+    hb_hashmap_t<const hb_vector_t<int>*, unsigned> back_mapping;\n+\n+    for (unsigned major = 0; major < encodings.length; major++)\n+    {\n+      delta_row_encoding_t& encoding = encodings[major];\n+      \/* just sanity check, this shouldn't happen *\/\n+      if (encoding.is_empty ())\n+        return false;\n+\n+      unsigned num_rows = encoding.items.length;\n+\n+      \/* sort rows, make result deterministic *\/\n+      encoding.items.qsort (_cmp_row);\n+\n+      \/* compile old to new var_idxes mapping *\/\n+      for (unsigned minor = 0; minor < num_rows; minor++)\n+      {\n+        unsigned new_varidx = (major << 16) + minor;\n+        back_mapping.set (encoding.items.arrayZ[minor], new_varidx);\n+      }\n+    }\n+\n+    for (auto _ : front_mapping.iter ())\n+    {\n+      unsigned old_varidx = _.first;\n+      unsigned *new_varidx;\n+      if (back_mapping.has (_.second, &new_varidx))\n+        varidx_map.set (old_varidx, *new_varidx);\n+      else\n+        varidx_map.set (old_varidx, HB_OT_LAYOUT_NO_VARIATIONS_INDEX);\n+    }\n+    return !varidx_map.in_error ();\n+  }\n+\n+  static int _cmp_row (const void *pa, const void *pb)\n+  {\n+    \/* compare pointers of vectors(const hb_vector_t<int>*) that represent a row *\/\n+    const hb_vector_t<int>** a = (const hb_vector_t<int>**) pa;\n+    const hb_vector_t<int>** b = (const hb_vector_t<int>**) pb;\n+\n+    for (unsigned i = 0; i < (*b)->length; i++)\n+    {\n+      int va = (*a)->arrayZ[i];\n+      int vb = (*b)->arrayZ[i];\n+      if (va != vb)\n+        return va < vb ? -1 : 1;\n+    }\n+    return 0;\n+  }\n+};\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-var-common.hh","additions":1813,"deletions":178,"binary":false,"changes":1991,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"hb-ot-var-fvar-table.hh\"\n@@ -54,0 +55,21 @@\n+  bool decompile_tuple_variations (unsigned axis_count,\n+                                   unsigned point_count,\n+                                   hb_blob_t *blob,\n+                                   bool is_gvar,\n+                                   const hb_map_t *axes_old_index_tag_map,\n+                                   TupleVariationData::tuple_variations_t& tuple_variations \/* OUT *\/) const\n+  {\n+    hb_vector_t<unsigned> shared_indices;\n+    TupleVariationData::tuple_iterator_t iterator;\n+    hb_bytes_t var_data_bytes = blob->as_bytes ().sub_array (4);\n+    if (!TupleVariationData::get_tuple_iterator (var_data_bytes, axis_count, this,\n+                                                 shared_indices, &iterator))\n+      return false;\n+\n+    return tupleVariationData.decompile_tuple_variations (point_count, is_gvar, iterator,\n+                                                          axes_old_index_tag_map,\n+                                                          shared_indices,\n+                                                          hb_array<const F2DOT14> (),\n+                                                          tuple_variations);\n+  }\n+\n@@ -108,0 +130,40 @@\n+  bool serialize (hb_serialize_context_t *c,\n+                  TupleVariationData::tuple_variations_t& tuple_variations) const\n+  {\n+    TRACE_SERIALIZE (this);\n+    if (!tuple_variations) return_trace (false);\n+    if (unlikely (!c->embed (version))) return_trace (false);\n+\n+    return_trace (tupleVariationData.serialize (c, false, tuple_variations));\n+  }\n+\n+  bool subset (hb_subset_context_t *c) const\n+  {\n+    TRACE_SUBSET (this);\n+    if (c->plan->all_axes_pinned)\n+      return_trace (false);\n+\n+    OT::TupleVariationData::tuple_variations_t tuple_variations;\n+    unsigned axis_count = c->plan->axes_old_index_tag_map.get_population ();\n+\n+    const hb_tag_t cvt = HB_TAG('c','v','t',' ');\n+    hb_blob_t *cvt_blob = hb_face_reference_table (c->plan->source, cvt);\n+    unsigned point_count = hb_blob_get_length (cvt_blob) \/ FWORD::static_size;\n+    hb_blob_destroy (cvt_blob);\n+\n+    if (!decompile_tuple_variations (axis_count, point_count,\n+                                     c->source_blob, false,\n+                                     &(c->plan->axes_old_index_tag_map),\n+                                     tuple_variations))\n+      return_trace (false);\n+\n+    if (!tuple_variations.instantiate (c->plan->axes_location, c->plan->axes_triple_distances))\n+      return_trace (false);\n+\n+    if (!tuple_variations.compile_bytes (c->plan->axes_index_map, c->plan->axes_old_index_tag_map,\n+                                         false \/* do not use shared points *\/))\n+      return_trace (false);\n+\n+    return_trace (serialize (c->serializer, tuple_variations));\n+  }\n+\n@@ -129,1 +191,0 @@\n-    hb_memset (cvt_deltas.arrayZ, 0, cvt_deltas.get_size ());\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-var-cvar-table.hh","additions":62,"deletions":1,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -42,0 +42,18 @@\n+static bool axis_coord_pinned_or_within_axis_range (const hb_array_t<const F16DOT16> coords,\n+                                                    unsigned axis_index,\n+                                                    Triple axis_limit)\n+{\n+  float axis_coord = coords[axis_index].to_float ();\n+  if (axis_limit.is_point ())\n+  {\n+    if (axis_limit.minimum != axis_coord)\n+      return false;\n+  }\n+  else\n+  {\n+    if (axis_coord < axis_limit.minimum ||\n+        axis_coord > axis_limit.maximum)\n+      return false;\n+  }\n+  return true;\n+}\n@@ -50,0 +68,21 @@\n+  bool keep_instance (unsigned axis_count,\n+                      const hb_map_t *axes_index_tag_map,\n+                      const hb_hashmap_t<hb_tag_t, Triple> *axes_location) const\n+  {\n+    if (axes_location->is_empty ()) return true;\n+    const hb_array_t<const F16DOT16> coords = get_coordinates (axis_count);\n+    for (unsigned i = 0 ; i < axis_count; i++)\n+    {\n+      uint32_t *axis_tag;\n+      if (!axes_index_tag_map->has (i, &axis_tag))\n+        return false;\n+      if (!axes_location->has (*axis_tag))\n+        continue;\n+\n+      Triple axis_limit = axes_location->get (*axis_tag);\n+      if (!axis_coord_pinned_or_within_axis_range (coords, i, axis_limit))\n+        return false;\n+    }\n+    return true;\n+  }\n+\n@@ -59,1 +98,1 @@\n-    const hb_hashmap_t<hb_tag_t, float> *axes_location = &c->plan->user_axes_location;\n+    const hb_hashmap_t<hb_tag_t, Triple> *axes_location = &c->plan->user_axes_location;\n@@ -63,0 +102,1 @@\n+      Triple *axis_limit;\n@@ -64,5 +104,5 @@\n-      if (!c->plan->axes_old_index_tag_map.has (i, &axis_tag)) continue;\n-\n-      if (axes_location->has (*axis_tag) &&\n-          fabsf (axes_location->get (*axis_tag) - coords[i].to_float ()) > 0.001f)\n-        return_trace (false);\n+      if (!c->plan->axes_old_index_tag_map.has (i, &axis_tag)) return_trace (false);\n+      if (axes_location->has (*axis_tag, &axis_limit))\n+      {\n+        if (!axis_coord_pinned_or_within_axis_range (coords, i, *axis_limit))\n+          return_trace (false);\n@@ -70,2 +110,4 @@\n-      if (!c->plan->axes_index_map.has (i))\n-        continue;\n+        \/\/skip pinned axis\n+        if (axis_limit->is_point ())\n+          continue;\n+      }\n@@ -189,0 +231,24 @@\n+  TripleDistances get_triple_distances () const\n+  {\n+    float min, default_, max;\n+    get_coordinates (min, default_, max);\n+    return TripleDistances (min, default_, max);\n+  }\n+\n+  bool subset (hb_subset_context_t *c) const\n+  {\n+    TRACE_SUBSET (this);\n+    auto *out = c->serializer->embed (this);\n+    if (unlikely (!out)) return_trace (false);\n+\n+    const hb_hashmap_t<hb_tag_t, Triple>& user_axes_location = c->plan->user_axes_location;\n+    Triple *axis_limit;\n+    if (user_axes_location.has (axisTag, &axis_limit))\n+    {\n+      out->minValue.set_float (axis_limit->minimum);\n+      out->defaultValue.set_float (axis_limit->middle);\n+      out->maxValue.set_float (axis_limit->maximum);\n+    }\n+    return_trace (true);\n+  }\n+\n@@ -219,1 +285,2 @@\n-                  c->check_range (get_instance (0), instanceCount, instanceSize));\n+                  c->check_range (&StructAfter<InstanceRecord> (get_axes ()),\n+                                  instanceCount, instanceSize));\n@@ -317,1 +384,2 @@\n-  void collect_name_ids (hb_hashmap_t<hb_tag_t, float> *user_axes_location,\n+  void collect_name_ids (hb_hashmap_t<hb_tag_t, Triple> *user_axes_location,\n+                         hb_map_t *axes_old_index_tag_map,\n@@ -321,1 +389,0 @@\n-    hb_map_t pinned_axes;\n@@ -327,3 +394,2 @@\n-      if (user_axes_location->has (axis_tag))\n-      {\n-        pinned_axes.set (i, axis_tag);\n+      if (user_axes_location->has (axis_tag) &&\n+          user_axes_location->get (axis_tag).is_point ())\n@@ -331,1 +397,0 @@\n-      }\n@@ -340,10 +405,1 @@\n-      if (hb_any (+ hb_enumerate (instance->get_coordinates (axisCount))\n-                  | hb_filter (pinned_axes, hb_first)\n-                  | hb_map ([&] (const hb_pair_t<unsigned, const F16DOT16&>& _)\n-                            {\n-                              hb_tag_t axis_tag = pinned_axes.get (_.first);\n-                              float location = user_axes_location->get (axis_tag);\n-                              if (fabs ((double)location - (double)_.second.to_float ()) > 0.001) return true;\n-                              return false;\n-                            })\n-                  ))\n+      if (!instance->keep_instance (axisCount, axes_old_index_tag_map, user_axes_location))\n@@ -387,1 +443,1 @@\n-      if (unlikely (!c->serializer->embed (axes_records[i])))\n+      if (unlikely (!axes_records[i].subset (c)))\n@@ -394,0 +450,1 @@\n+    unsigned num_retained_instances = 0;\n@@ -400,0 +457,2 @@\n+      else\n+        num_retained_instances++;\n@@ -401,1 +460,2 @@\n-    return_trace (true);\n+\n+    return_trace (c->serializer->check_assign (out->instanceCount, num_retained_instances, HB_SERIALIZE_ERROR_INT_OVERFLOW));\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-var-fvar-table.hh","additions":87,"deletions":27,"binary":false,"changes":114,"status":"modified"},{"patch":"@@ -42,1 +42,4 @@\n-struct contour_point_t\n+struct GlyphVariationData : TupleVariationData\n+{};\n+\n+struct glyph_variations_t\n@@ -44,2 +47,2 @@\n-  void init (float x_ = 0.f, float y_ = 0.f, bool is_end_point_ = false)\n-  { flag = 0; x = x_; y = y_; is_end_point = is_end_point_; }\n+  using tuple_variations_t = TupleVariationData::tuple_variations_t;\n+  hb_vector_t<tuple_variations_t> glyph_variations;\n@@ -47,1 +50,3 @@\n-  void translate (const contour_point_t &p) { x += p.x; y += p.y; }\n+  hb_vector_t<char> compiled_shared_tuples;\n+  private:\n+  unsigned shared_tuples_count = 0;\n@@ -49,5 +54,2 @@\n-  float x = 0.f;\n-  float y = 0.f;\n-  uint8_t flag = 0;\n-  bool is_end_point = false;\n-};\n+  \/* shared coords-> index map after instantiation *\/\n+  hb_hashmap_t<const hb_vector_t<char>*, unsigned> shared_tuples_idx_map;\n@@ -55,3 +57,5 @@\n-struct contour_point_vector_t : hb_vector_t<contour_point_t>\n-{\n-  void extend (const hb_array_t<contour_point_t> &a)\n+  public:\n+  unsigned compiled_shared_tuples_count () const\n+  { return shared_tuples_count; }\n+\n+  unsigned compiled_byte_size () const\n@@ -59,6 +63,5 @@\n-    unsigned int old_len = length;\n-    if (unlikely (!resize (old_len + a.length, false)))\n-      return;\n-    auto arrayZ = this->arrayZ + old_len;\n-    unsigned count = a.length;\n-    hb_memcpy (arrayZ, a.arrayZ, count * sizeof (arrayZ[0]));\n+    unsigned byte_size = 0;\n+    for (const auto& _ : glyph_variations)\n+      byte_size += _.get_compiled_byte_size ();\n+\n+    return byte_size;\n@@ -67,1 +70,4 @@\n-  void transform (const float (&matrix)[4])\n+  bool create_from_glyphs_var_data (unsigned axis_count,\n+                                    const hb_array_t<const F2DOT14> shared_tuples,\n+                                    const hb_subset_plan_t *plan,\n+                                    const hb_hashmap_t<hb_codepoint_t, hb_bytes_t>& new_gid_var_data_map)\n@@ -69,6 +75,5 @@\n-    if (matrix[0] == 1.f && matrix[1] == 0.f &&\n-        matrix[2] == 0.f && matrix[3] == 1.f)\n-      return;\n-    auto arrayZ = this->arrayZ;\n-    unsigned count = length;\n-    for (unsigned i = 0; i < count; i++)\n+    if (unlikely (!glyph_variations.alloc (plan->new_to_old_gid_list.length, true)))\n+      return false;\n+\n+    auto it = hb_iter (plan->new_to_old_gid_list);\n+    for (auto &_ : it)\n@@ -76,4 +81,29 @@\n-      contour_point_t &p = arrayZ[i];\n-      float x_ = p.x * matrix[0] + p.y * matrix[2];\n-           p.y = p.x * matrix[1] + p.y * matrix[3];\n-      p.x = x_;\n+      hb_codepoint_t new_gid = _.first;\n+      contour_point_vector_t *all_contour_points;\n+      if (!new_gid_var_data_map.has (new_gid) ||\n+          !plan->new_gid_contour_points_map.has (new_gid, &all_contour_points))\n+        return false;\n+      hb_bytes_t var_data = new_gid_var_data_map.get (new_gid);\n+\n+      const GlyphVariationData* p = reinterpret_cast<const GlyphVariationData*> (var_data.arrayZ);\n+      hb_vector_t<unsigned> shared_indices;\n+      GlyphVariationData::tuple_iterator_t iterator;\n+      tuple_variations_t tuple_vars;\n+\n+      \/* in case variation data is empty, push an empty struct into the vector,\n+       * keep the vector in sync with the new_to_old_gid_list *\/\n+      if (!var_data || ! p->has_data () || !all_contour_points->length ||\n+          !GlyphVariationData::get_tuple_iterator (var_data, axis_count,\n+                                                   var_data.arrayZ,\n+                                                   shared_indices, &iterator))\n+      {\n+        glyph_variations.push (std::move (tuple_vars));\n+        continue;\n+      }\n+\n+      if (!p->decompile_tuple_variations (all_contour_points->length, true \/* is_gvar *\/,\n+                                          iterator, &(plan->axes_old_index_tag_map),\n+                                          shared_indices, shared_tuples,\n+                                          tuple_vars \/* OUT *\/))\n+        return false;\n+      glyph_variations.push (std::move (tuple_vars));\n@@ -81,0 +111,1 @@\n+    return !glyph_variations.in_error () && glyph_variations.length == plan->new_to_old_gid_list.length;\n@@ -83,1 +114,1 @@\n-  void translate (const contour_point_t& delta)\n+  bool instantiate (const hb_subset_plan_t *plan)\n@@ -85,4 +116,1 @@\n-    if (delta.x == 0.f && delta.y == 0.f)\n-      return;\n-    auto arrayZ = this->arrayZ;\n-    unsigned count = length;\n+    unsigned count = plan->new_to_old_gid_list.length;\n@@ -90,1 +118,9 @@\n-      arrayZ[i].translate (delta);\n+    {\n+      hb_codepoint_t new_gid = plan->new_to_old_gid_list[i].first;\n+      contour_point_vector_t *all_points;\n+      if (!plan->new_gid_contour_points_map.has (new_gid, &all_points))\n+        return false;\n+      if (!glyph_variations[i].instantiate (plan->axes_location, plan->axes_triple_distances, all_points))\n+        return false;\n+    }\n+    return true;\n@@ -92,1 +128,0 @@\n-};\n@@ -94,2 +129,162 @@\n-struct GlyphVariationData : TupleVariationData\n-{};\n+  bool compile_bytes (const hb_map_t& axes_index_map,\n+                      const hb_map_t& axes_old_index_tag_map)\n+  {\n+    if (!compile_shared_tuples (axes_index_map, axes_old_index_tag_map))\n+      return false;\n+    for (tuple_variations_t& vars: glyph_variations)\n+      if (!vars.compile_bytes (axes_index_map, axes_old_index_tag_map,\n+                               true, \/* use shared points*\/\n+                               &shared_tuples_idx_map))\n+        return false;\n+\n+    return true;\n+  }\n+\n+  bool compile_shared_tuples (const hb_map_t& axes_index_map,\n+                              const hb_map_t& axes_old_index_tag_map)\n+  {\n+    \/* key is pointer to compiled_peak_coords inside each tuple, hashing\n+     * function will always deref pointers first *\/\n+    hb_hashmap_t<const hb_vector_t<char>*, unsigned> coords_count_map;\n+\n+    \/* count the num of shared coords *\/\n+    for (tuple_variations_t& vars: glyph_variations)\n+    {\n+      for (tuple_delta_t& var : vars.tuple_vars)\n+      {\n+        if (!var.compile_peak_coords (axes_index_map, axes_old_index_tag_map))\n+          return false;\n+        unsigned* count;\n+        if (coords_count_map.has (&(var.compiled_peak_coords), &count))\n+          coords_count_map.set (&(var.compiled_peak_coords), *count + 1);\n+        else\n+          coords_count_map.set (&(var.compiled_peak_coords), 1);\n+      }\n+    }\n+\n+    if (!coords_count_map || coords_count_map.in_error ())\n+      return false;\n+\n+    \/* add only those coords that are used more than once into the vector and sort *\/\n+    hb_vector_t<const hb_vector_t<char>*> shared_coords;\n+    if (unlikely (!shared_coords.alloc (coords_count_map.get_population ())))\n+      return false;\n+\n+    for (const auto _ : coords_count_map.iter ())\n+    {\n+      if (_.second == 1) continue;\n+      shared_coords.push (_.first);\n+    }\n+\n+    \/* no shared tuples: no coords are used more than once *\/\n+    if (!shared_coords) return true;\n+    \/* sorting based on the coords frequency first (high to low), then compare\n+     * the coords bytes *\/\n+    hb_qsort (shared_coords.arrayZ, shared_coords.length, sizeof (hb_vector_t<char>*), _cmp_coords, (void *) (&coords_count_map));\n+\n+    \/* build shared_coords->idx map and shared tuples byte array *\/\n+\n+    shared_tuples_count = hb_min (0xFFFu + 1, shared_coords.length);\n+    unsigned len = shared_tuples_count * (shared_coords[0]->length);\n+    if (unlikely (!compiled_shared_tuples.alloc (len)))\n+      return false;\n+\n+    for (unsigned i = 0; i < shared_tuples_count; i++)\n+    {\n+      shared_tuples_idx_map.set (shared_coords[i], i);\n+      \/* add a concat() in hb_vector_t? *\/\n+      for (char c : shared_coords[i]->iter ())\n+        compiled_shared_tuples.push (c);\n+    }\n+\n+    return true;\n+  }\n+\n+  static int _cmp_coords (const void *pa, const void *pb, void *arg)\n+  {\n+    const hb_hashmap_t<const hb_vector_t<char>*, unsigned>* coords_count_map =\n+        reinterpret_cast<const hb_hashmap_t<const hb_vector_t<char>*, unsigned>*> (arg);\n+\n+    \/* shared_coords is hb_vector_t<const hb_vector_t<char>*> so casting pa\/pb\n+     * to be a pointer to a pointer *\/\n+    const hb_vector_t<char>** a = reinterpret_cast<const hb_vector_t<char>**> (const_cast<void*>(pa));\n+    const hb_vector_t<char>** b = reinterpret_cast<const hb_vector_t<char>**> (const_cast<void*>(pb));\n+\n+    bool has_a = coords_count_map->has (*a);\n+    bool has_b = coords_count_map->has (*b);\n+\n+    if (has_a && has_b)\n+    {\n+      unsigned a_num = coords_count_map->get (*a);\n+      unsigned b_num = coords_count_map->get (*b);\n+\n+      if (a_num != b_num)\n+        return b_num - a_num;\n+\n+      return (*b)->as_array().cmp ((*a)->as_array ());\n+    }\n+    else if (has_a) return -1;\n+    else if (has_b) return 1;\n+    else return 0;\n+  }\n+\n+  template<typename Iterator,\n+           hb_requires (hb_is_iterator (Iterator))>\n+  bool serialize_glyph_var_data (hb_serialize_context_t *c,\n+                                 Iterator it,\n+                                 bool long_offset,\n+                                 unsigned num_glyphs,\n+                                 char* glyph_var_data_offsets \/* OUT: glyph var data offsets array *\/) const\n+  {\n+    TRACE_SERIALIZE (this);\n+\n+    if (long_offset)\n+    {\n+      ((HBUINT32 *) glyph_var_data_offsets)[0] = 0;\n+      glyph_var_data_offsets += 4;\n+    }\n+    else\n+    {\n+      ((HBUINT16 *) glyph_var_data_offsets)[0] = 0;\n+      glyph_var_data_offsets += 2;\n+    }\n+    unsigned glyph_offset = 0;\n+    hb_codepoint_t last_gid = 0;\n+    unsigned idx = 0;\n+\n+    TupleVariationData* cur_glyph = c->start_embed<TupleVariationData> ();\n+    if (!cur_glyph) return_trace (false);\n+    for (auto &_ : it)\n+    {\n+      hb_codepoint_t gid = _.first;\n+      if (long_offset)\n+        for (; last_gid < gid; last_gid++)\n+          ((HBUINT32 *) glyph_var_data_offsets)[last_gid] = glyph_offset;\n+      else\n+        for (; last_gid < gid; last_gid++)\n+          ((HBUINT16 *) glyph_var_data_offsets)[last_gid] = glyph_offset \/ 2;\n+\n+      if (idx >= glyph_variations.length) return_trace (false);\n+      if (!cur_glyph->serialize (c, true, glyph_variations[idx])) return_trace (false);\n+      TupleVariationData* next_glyph = c->start_embed<TupleVariationData> ();\n+      glyph_offset += (char *) next_glyph - (char *) cur_glyph;\n+\n+      if (long_offset)\n+        ((HBUINT32 *) glyph_var_data_offsets)[gid] = glyph_offset;\n+      else\n+        ((HBUINT16 *) glyph_var_data_offsets)[gid] = glyph_offset \/ 2;\n+\n+      last_gid++;\n+      idx++;\n+      cur_glyph = next_glyph;\n+    }\n+\n+    if (long_offset)\n+      for (; last_gid < num_glyphs; last_gid++)\n+        ((HBUINT32 *) glyph_var_data_offsets)[last_gid] = glyph_offset;\n+    else\n+      for (; last_gid < num_glyphs; last_gid++)\n+        ((HBUINT16 *) glyph_var_data_offsets)[last_gid] = glyph_offset \/ 2;\n+    return_trace (true);\n+  }\n+};\n@@ -115,0 +310,87 @@\n+  bool decompile_glyph_variations (hb_subset_context_t *c,\n+                                   glyph_variations_t& glyph_vars \/* OUT *\/) const\n+  {\n+    hb_hashmap_t<hb_codepoint_t, hb_bytes_t> new_gid_var_data_map;\n+    auto it = hb_iter (c->plan->new_to_old_gid_list);\n+    if (it->first == 0 && !(c->plan->flags & HB_SUBSET_FLAGS_NOTDEF_OUTLINE))\n+    {\n+      new_gid_var_data_map.set (0, hb_bytes_t ());\n+      it++;\n+    }\n+\n+    for (auto &_ : it)\n+    {\n+      hb_codepoint_t new_gid = _.first;\n+      hb_codepoint_t old_gid = _.second;\n+      hb_bytes_t var_data_bytes = get_glyph_var_data_bytes (c->source_blob, glyphCountX, old_gid);\n+      new_gid_var_data_map.set (new_gid, var_data_bytes);\n+    }\n+\n+    if (new_gid_var_data_map.in_error ()) return false;\n+\n+    hb_array_t<const F2DOT14> shared_tuples = (this+sharedTuples).as_array ((unsigned) sharedTupleCount * (unsigned) axisCount);\n+    return glyph_vars.create_from_glyphs_var_data (axisCount, shared_tuples, c->plan, new_gid_var_data_map);\n+  }\n+\n+  template<typename Iterator,\n+           hb_requires (hb_is_iterator (Iterator))>\n+  bool serialize (hb_serialize_context_t *c,\n+                  const glyph_variations_t& glyph_vars,\n+                  Iterator it,\n+                  unsigned axis_count,\n+                  unsigned num_glyphs) const\n+  {\n+    TRACE_SERIALIZE (this);\n+    gvar *out = c->allocate_min<gvar> ();\n+    if (unlikely (!out)) return_trace (false);\n+\n+    out->version.major = 1;\n+    out->version.minor = 0;\n+    out->axisCount = axis_count;\n+    out->glyphCountX = hb_min (0xFFFFu, num_glyphs);\n+\n+    unsigned glyph_var_data_size = glyph_vars.compiled_byte_size ();\n+    bool long_offset = glyph_var_data_size & ~0xFFFFu;\n+    out->flags = long_offset ? 1 : 0;\n+\n+    HBUINT8 *glyph_var_data_offsets = c->allocate_size<HBUINT8> ((long_offset ? 4 : 2) * (num_glyphs + 1), false);\n+    if (!glyph_var_data_offsets) return_trace (false);\n+\n+    \/* shared tuples *\/\n+    unsigned shared_tuple_count = glyph_vars.compiled_shared_tuples_count ();\n+    out->sharedTupleCount = shared_tuple_count;\n+\n+    if (!shared_tuple_count)\n+      out->sharedTuples = 0;\n+    else\n+    {\n+      hb_array_t<const char> shared_tuples = glyph_vars.compiled_shared_tuples.as_array ().copy (c);\n+      if (!shared_tuples.arrayZ) return_trace (false);\n+      out->sharedTuples = shared_tuples.arrayZ - (char *) out;\n+    }\n+\n+    char *glyph_var_data = c->start_embed<char> ();\n+    if (!glyph_var_data) return_trace (false);\n+    out->dataZ = glyph_var_data - (char *) out;\n+\n+    return_trace (glyph_vars.serialize_glyph_var_data (c, it, long_offset, num_glyphs,\n+                                                       (char *) glyph_var_data_offsets));\n+  }\n+\n+  bool instantiate (hb_subset_context_t *c) const\n+  {\n+    TRACE_SUBSET (this);\n+    glyph_variations_t glyph_vars;\n+    if (!decompile_glyph_variations (c, glyph_vars))\n+      return_trace (false);\n+\n+    if (!glyph_vars.instantiate (c->plan)) return_trace (false);\n+    if (!glyph_vars.compile_bytes (c->plan->axes_index_map, c->plan->axes_old_index_tag_map))\n+      return_trace (false);\n+\n+    unsigned axis_count = c->plan->axes_index_map.get_population ();\n+    unsigned num_glyphs = c->plan->num_output_glyphs ();\n+    auto it = hb_iter (c->plan->new_to_old_gid_list);\n+    return_trace (serialize (c->serializer, glyph_vars, it, axis_count, num_glyphs));\n+  }\n+\n@@ -118,0 +400,5 @@\n+    if (c->plan->all_axes_pinned)\n+      return_trace (false);\n+\n+    if (c->plan->normalized_coords)\n+      return_trace (instantiate (c));\n@@ -132,0 +419,3 @@\n+    auto it = hb_iter (c->plan->new_to_old_gid_list);\n+    if (it->first == 0 && !(c->plan->flags & HB_SUBSET_FLAGS_NOTDEF_OUTLINE))\n+      it++;\n@@ -133,3 +423,1 @@\n-    for (hb_codepoint_t gid = (c->plan->flags & HB_SUBSET_FLAGS_NOTDEF_OUTLINE) ? 0 : 1;\n-         gid < num_glyphs;\n-         gid++)\n+    for (auto &_ : it)\n@@ -137,2 +425,1 @@\n-      hb_codepoint_t old_gid;\n-      if (!c->plan->old_gid_for_new_gid (gid, &old_gid)) continue;\n+      hb_codepoint_t old_gid = _.second;\n@@ -145,1 +432,1 @@\n-    HBUINT8 *subset_offsets = c->serializer->allocate_size<HBUINT8> ((long_offset ? 4 : 2) * (num_glyphs + 1));\n+    HBUINT8 *subset_offsets = c->serializer->allocate_size<HBUINT8> ((long_offset ? 4 : 2) * (num_glyphs + 1), false);\n@@ -160,1 +447,1 @@\n-    char *subset_data = c->serializer->allocate_size<char> (subset_data_size);\n+    char *subset_data = c->serializer->allocate_size<char> (subset_data_size, false);\n@@ -164,0 +451,11 @@\n+\n+    if (long_offset)\n+    {\n+      ((HBUINT32 *) subset_offsets)[0] = 0;\n+      subset_offsets += 4;\n+    }\n+    else\n+    {\n+      ((HBUINT16 *) subset_offsets)[0] = 0;\n+      subset_offsets += 2;\n+    }\n@@ -165,3 +463,6 @@\n-    for (hb_codepoint_t gid = (c->plan->flags & HB_SUBSET_FLAGS_NOTDEF_OUTLINE) ? 0 : 1;\n-         gid < num_glyphs;\n-         gid++)\n+\n+    hb_codepoint_t last = 0;\n+    it = hb_iter (c->plan->new_to_old_gid_list);\n+    if (it->first == 0 && !(c->plan->flags & HB_SUBSET_FLAGS_NOTDEF_OUTLINE))\n+      it++;\n+    for (auto &_ : it)\n@@ -169,3 +470,11 @@\n-      hb_codepoint_t old_gid;\n-      hb_bytes_t var_data_bytes = c->plan->old_gid_for_new_gid (gid, &old_gid)\n-                                ? get_glyph_var_data_bytes (c->source_blob,\n+      hb_codepoint_t gid = _.first;\n+      hb_codepoint_t old_gid = _.second;\n+\n+      if (long_offset)\n+        for (; last < gid; last++)\n+          ((HBUINT32 *) subset_offsets)[last] = glyph_offset;\n+      else\n+        for (; last < gid; last++)\n+          ((HBUINT16 *) subset_offsets)[last] = glyph_offset \/ 2;\n+\n+      hb_bytes_t var_data_bytes = get_glyph_var_data_bytes (c->source_blob,\n@@ -173,2 +482,5 @@\n-                                                            old_gid)\n-                                : hb_bytes_t ();\n+                                                            old_gid);\n+\n+      hb_memcpy (subset_data, var_data_bytes.arrayZ, var_data_bytes.length);\n+      subset_data += var_data_bytes.length;\n+      glyph_offset += var_data_bytes.length;\n@@ -181,4 +493,1 @@\n-      if (var_data_bytes.length > 0)\n-        hb_memcpy (subset_data, var_data_bytes.arrayZ, var_data_bytes.length);\n-      subset_data += var_data_bytes.length;\n-      glyph_offset += var_data_bytes.length;\n+      last++; \/\/ Skip over gid\n@@ -186,0 +495,1 @@\n+\n@@ -187,1 +497,2 @@\n-      ((HBUINT32 *) subset_offsets)[num_glyphs] = glyph_offset;\n+      for (; last < num_glyphs; last++)\n+        ((HBUINT32 *) subset_offsets)[last] = glyph_offset;\n@@ -189,1 +500,2 @@\n-      ((HBUINT16 *) subset_offsets)[num_glyphs] = glyph_offset \/ 2;\n+      for (; last < num_glyphs; last++)\n+        ((HBUINT16 *) subset_offsets)[last] = glyph_offset \/ 2;\n@@ -238,1 +550,1 @@\n-        int idx = -1;\n+        int idx1 = -1, idx2 = -1;\n@@ -241,1 +553,1 @@\n-          F2DOT14 peak = tuple.arrayZ[j];\n+          const F2DOT14 &peak = tuple.arrayZ[j];\n@@ -244,1 +556,5 @@\n-            if (idx != -1)\n+            if (idx1 == -1)\n+              idx1 = j;\n+            else if (idx2 == -1)\n+              idx2 = j;\n+            else\n@@ -246,1 +562,1 @@\n-              idx = -1;\n+              idx1 = idx2 = -1;\n@@ -249,1 +565,0 @@\n-            idx = j;\n@@ -252,1 +567,1 @@\n-        shared_tuple_active_idx[i] = idx;\n+        shared_tuple_active_idx.arrayZ[i] = {idx1, idx2};\n@@ -288,1 +603,2 @@\n-                                 const hb_array_t<contour_point_t> points) const\n+                                 const hb_array_t<contour_point_t> points,\n+                                 bool phantom_only = false) const\n@@ -290,2 +606,0 @@\n-      if (!coords) return true;\n-\n@@ -314,1 +628,1 @@\n-      hb_array_t<const F2DOT14> shared_tuples = (table+table->sharedTuples).as_array (table->sharedTupleCount * table->axisCount);\n+      hb_array_t<const F2DOT14> shared_tuples = (table+table->sharedTuples).as_array (table->sharedTupleCount * num_coords);\n@@ -319,0 +633,1 @@\n+      unsigned count = points.length;\n@@ -323,1 +638,1 @@\n-                                                                 shared_tuple_active_idx.in_error () ? nullptr : &shared_tuple_active_idx);\n+                                                                 &shared_tuple_active_idx);\n@@ -332,1 +647,1 @@\n-          if (unlikely (!deltas_vec.resize (points.length))) return false;\n+          if (unlikely (!deltas_vec.resize (count, false))) return false;\n@@ -334,0 +649,2 @@\n+          hb_memset (deltas.arrayZ + (phantom_only ? count - 4 : 0), 0,\n+                     (phantom_only ? 4 : count) * sizeof (deltas[0]));\n@@ -353,1 +670,1 @@\n-          if (!orig_points)\n+          if (!orig_points && !phantom_only)\n@@ -362,1 +679,1 @@\n-            for (unsigned int i = 0; i < points.length; i++)\n+            for (unsigned int i = phantom_only ? count - 4 : 0; i < count; i++)\n@@ -367,1 +684,2 @@\n-          hb_memset (deltas.arrayZ, 0, deltas.get_size ());\n+          hb_memset (deltas.arrayZ + (phantom_only ? count - 4 : 0), 0,\n+                     (phantom_only ? 4 : count) * sizeof (deltas[0]));\n@@ -370,1 +688,2 @@\n-        if (scalar != 1.0f)\n+        if (HB_OPTIMIZE_SIZE_VAL)\n+        {\n@@ -381,0 +700,1 @@\n+            if (phantom_only && pt_index < count - 4) continue;\n@@ -386,0 +706,1 @@\n+        }\n@@ -387,1 +708,3 @@\n-          for (unsigned int i = 0; i < num_deltas; i++)\n+        {\n+          \/* Ouch. Four cases... for optimization. *\/\n+          if (scalar != 1.0f)\n@@ -389,1 +712,0 @@\n-            unsigned int pt_index;\n@@ -391,1 +713,7 @@\n-              pt_index = i;\n+              for (unsigned int i = phantom_only ? count - 4 : 0; i < count; i++)\n+              {\n+                unsigned int pt_index = i;\n+                auto &delta = deltas.arrayZ[pt_index];\n+                delta.x += x_deltas.arrayZ[i] * scalar;\n+                delta.y += y_deltas.arrayZ[i] * scalar;\n+              }\n@@ -393,8 +721,32 @@\n-            {\n-              pt_index = indices[i];\n-              if (unlikely (pt_index >= deltas.length)) continue;\n-            }\n-            auto &delta = deltas.arrayZ[pt_index];\n-            delta.flag = 1;     \/* this point is referenced, i.e., explicit deltas specified *\/\n-            delta.x += x_deltas.arrayZ[i];\n-            delta.y += y_deltas.arrayZ[i];\n+              for (unsigned int i = 0; i < num_deltas; i++)\n+              {\n+                unsigned int pt_index = indices[i];\n+                if (unlikely (pt_index >= deltas.length)) continue;\n+                if (phantom_only && pt_index < count - 4) continue;\n+                auto &delta = deltas.arrayZ[pt_index];\n+                delta.flag = 1; \/* this point is referenced, i.e., explicit deltas specified *\/\n+                delta.x += x_deltas.arrayZ[i] * scalar;\n+                delta.y += y_deltas.arrayZ[i] * scalar;\n+              }\n+          }\n+          else\n+          {\n+            if (apply_to_all)\n+              for (unsigned int i = phantom_only ? count - 4 : 0; i < count; i++)\n+              {\n+                unsigned int pt_index = i;\n+                auto &delta = deltas.arrayZ[pt_index];\n+                delta.x += x_deltas.arrayZ[i];\n+                delta.y += y_deltas.arrayZ[i];\n+              }\n+            else\n+              for (unsigned int i = 0; i < num_deltas; i++)\n+              {\n+                unsigned int pt_index = indices[i];\n+                if (unlikely (pt_index >= deltas.length)) continue;\n+                if (phantom_only && pt_index < count - 4) continue;\n+                auto &delta = deltas.arrayZ[pt_index];\n+                delta.flag = 1; \/* this point is referenced, i.e., explicit deltas specified *\/\n+                delta.x += x_deltas.arrayZ[i];\n+                delta.y += y_deltas.arrayZ[i];\n+              }\n@@ -402,0 +754,1 @@\n+        }\n@@ -404,1 +757,1 @@\n-        if (!apply_to_all)\n+        if (!apply_to_all && !phantom_only)\n@@ -408,1 +761,1 @@\n-            for (unsigned i = 0; i < points.length; ++i)\n+            for (unsigned i = 0; i < count; ++i)\n@@ -468,1 +821,2 @@\n-        for (unsigned int i = 0; i < points.length; i++)\n+      {\n+        for (unsigned int i = phantom_only ? count - 4 : 0; i < count; i++)\n@@ -470,0 +824,1 @@\n+      }\n@@ -479,1 +834,1 @@\n-    hb_vector_t<signed> shared_tuple_active_idx;\n+    hb_vector_t<hb_pair_t<int, int>> shared_tuple_active_idx;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-var-gvar-table.hh","additions":445,"deletions":90,"binary":false,"changes":535,"status":"modified"},{"patch":"@@ -48,1 +48,2 @@\n-             const hb_subset_plan_t  *plan)\n+             const hb_subset_plan_t  *plan,\n+             bool bypass_empty = true)\n@@ -56,1 +57,1 @@\n-    if (&index_map == &Null (DeltaSetIndexMap)) return;\n+    if (bypass_empty && !index_map.get_map_count ()) return;\n@@ -59,2 +60,1 @@\n-    hb_codepoint_t      last_gid = (hb_codepoint_t)-1;\n-    hb_codepoint_t      gid = (hb_codepoint_t) hb_min (index_map.get_map_count (), plan->num_output_glyphs ());\n+    hb_codepoint_t      last_gid = HB_CODEPOINT_INVALID;\n@@ -67,1 +67,3 @@\n-    for (; gid > 0; gid--)\n+    auto &new_to_old_gid_list = plan->new_to_old_gid_list;\n+    unsigned count = new_to_old_gid_list.length;\n+    for (unsigned j = count; j; j--)\n@@ -69,8 +71,2 @@\n-      hb_codepoint_t    old_gid;\n-      if (!plan->old_gid_for_new_gid (gid - 1, &old_gid))\n-      {\n-        if (last_gid == (hb_codepoint_t) -1)\n-          continue;\n-        else\n-          break;\n-      }\n+      hb_codepoint_t gid = new_to_old_gid_list.arrayZ[j - 1].first;\n+      hb_codepoint_t old_gid = new_to_old_gid_list.arrayZ[j - 1].second;\n@@ -79,1 +75,1 @@\n-      if (last_gid == (hb_codepoint_t) -1)\n+      if (last_gid == HB_CODEPOINT_INVALID)\n@@ -85,1 +81,2 @@\n-      if (v != last_val) break;\n+      if (v != last_val)\n+        break;\n@@ -91,2 +88,2 @@\n-    map_count = last_gid;\n-    for (gid = 0; gid < map_count; gid++)\n+    map_count = last_gid + 1;\n+    for (auto _ : plan->new_to_old_gid_list)\n@@ -94,11 +91,11 @@\n-      hb_codepoint_t    old_gid;\n-      if (plan->old_gid_for_new_gid (gid, &old_gid))\n-      {\n-        unsigned int v = index_map.map (old_gid);\n-        unsigned int outer = v >> 16;\n-        unsigned int inner = v & 0xFFFF;\n-        outer_map.add (outer);\n-        if (inner > max_inners[outer]) max_inners[outer] = inner;\n-        if (outer >= inner_sets.length) return;\n-        inner_sets[outer]->add (inner);\n-      }\n+      hb_codepoint_t gid = _.first;\n+      if (gid >= map_count) break;\n+\n+      hb_codepoint_t old_gid = _.second;\n+      unsigned int v = index_map.map (old_gid);\n+      unsigned int outer = v >> 16;\n+      unsigned int inner = v & 0xFFFF;\n+      outer_map.add (outer);\n+      if (inner > max_inners[outer]) max_inners[outer] = inner;\n+      if (outer >= inner_sets.length) return;\n+      inner_sets[outer]->add (inner);\n@@ -119,2 +116,0 @@\n-    if (input_map == &Null (DeltaSetIndexMap)) return;\n-\n@@ -128,2 +123,2 @@\n-    output_map.resize (map_count);\n-    for (hb_codepoint_t gid = 0; gid < output_map.length; gid++)\n+    if (unlikely (!output_map.resize (map_count))) return;\n+    for (const auto &_ : plan->new_to_old_gid_list)\n@@ -131,9 +126,37 @@\n-      hb_codepoint_t    old_gid;\n-      if (plan->old_gid_for_new_gid (gid, &old_gid))\n-      {\n-        uint32_t v = input_map->map (old_gid);\n-        unsigned int outer = v >> 16;\n-        output_map[gid] = (outer_map[outer] << 16) | (inner_maps[outer][v & 0xFFFF]);\n-      }\n-      else\n-        output_map[gid] = 0;    \/* Map unused glyph to outer\/inner=0\/0 *\/\n+      hb_codepoint_t new_gid = _.first;\n+      hb_codepoint_t old_gid = _.second;\n+\n+      if (unlikely (new_gid >= map_count)) break;\n+\n+      uint32_t v = input_map->map (old_gid);\n+      unsigned int outer = v >> 16;\n+      output_map.arrayZ[new_gid] = (outer_map[outer] << 16) | (inner_maps[outer][v & 0xFFFF]);\n+    }\n+  }\n+\n+  bool remap_after_instantiation (const hb_subset_plan_t *plan,\n+                                  const hb_map_t& varidx_map)\n+  {\n+    \/* recalculate bit_count after remapping *\/\n+    outer_bit_count = 1;\n+    inner_bit_count = 1;\n+\n+    for (const auto &_ : plan->new_to_old_gid_list)\n+    {\n+      hb_codepoint_t new_gid = _.first;\n+      if (unlikely (new_gid >= map_count)) break;\n+\n+      uint32_t v = output_map.arrayZ[new_gid];\n+      uint32_t *new_varidx;\n+      if (!varidx_map.has (v, &new_varidx))\n+        return false;\n+\n+      output_map.arrayZ[new_gid] = *new_varidx;\n+\n+      unsigned outer = (*new_varidx) >> 16;\n+      unsigned bit_count = (outer == 0) ? 1 : hb_bit_storage (outer);\n+      outer_bit_count = hb_max (bit_count, outer_bit_count);\n+\n+      unsigned inner = (*new_varidx) & 0xFFFF;\n+      bit_count = (inner == 0) ? 1 : hb_bit_storage (inner);\n+      inner_bit_count = hb_max (bit_count, inner_bit_count);\n@@ -141,0 +164,1 @@\n+    return true;\n@@ -183,1 +207,1 @@\n-    index_map_plans[0].init (*index_maps[0], outer_map, inner_sets, plan);\n+    index_map_plans[0].init (*index_maps[0], outer_map, inner_sets, plan, false);\n@@ -200,1 +224,1 @@\n-      for (hb_codepoint_t gid = 0; gid < plan->num_output_glyphs (); gid++)\n+      for (const auto &_ : plan->new_to_old_gid_list)\n@@ -202,4 +226,2 @@\n-        if (inner_sets[0]->has (gid))\n-          inner_maps[0].add (gid);\n-        else\n-          inner_maps[0].skip ();\n+        hb_codepoint_t old_gid = _.second;\n+        inner_maps[0].add (old_gid);\n@@ -222,0 +244,10 @@\n+  \/* remap *\/\n+  bool remap_index_map_plans (const hb_subset_plan_t *plan,\n+                              const hb_map_t& varidx_map)\n+  {\n+    for (unsigned i = 0; i < index_map_plans.length; i++)\n+      if (!index_map_plans[i].remap_after_instantiation (plan, varidx_map))\n+        return false;\n+    return true;\n+  }\n+\n@@ -300,0 +332,3 @@\n+    if (c->plan->all_axes_pinned)\n+      return_trace (false);\n+\n@@ -313,4 +348,29 @@\n-    if (unlikely (!out->varStore\n-                      .serialize_serialize (c->serializer,\n-                                            hvar_plan.var_store,\n-                                            hvar_plan.inner_maps.as_array ())))\n+    if (c->plan->normalized_coords)\n+    {\n+      item_variations_t item_vars;\n+      if (!item_vars.instantiate (this+varStore, c->plan,\n+                                  advMap == 0 ? false : true,\n+                                  false, \/* use_no_variation_idx = false *\/\n+                                  hvar_plan.inner_maps.as_array ()))\n+        return_trace (false);\n+\n+      if (!out->varStore.serialize_serialize (c->serializer,\n+                                              item_vars.has_long_word (),\n+                                              c->plan->axis_tags,\n+                                              item_vars.get_region_list (),\n+                                              item_vars.get_vardata_encodings ()))\n+        return_trace (false);\n+\n+      \/* if varstore is optimized, remap output_map *\/\n+      if (advMap)\n+      {\n+        if (!hvar_plan.remap_index_map_plans (c->plan, item_vars.get_varidx_map ()))\n+          return_trace (false);\n+      }\n+    }\n+    else\n+    {\n+      if (unlikely (!out->varStore\n+                    .serialize_serialize (c->serializer,\n+                                          hvar_plan.var_store,\n+                                          hvar_plan.inner_maps.as_array ())))\n@@ -318,0 +378,1 @@\n+    }\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-var-hvar-table.hh","additions":112,"deletions":51,"binary":false,"changes":163,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-#include \"hb-ot-layout-common.hh\"\n+#include \"hb-ot-var-common.hh\"\n@@ -44,0 +44,13 @@\n+  bool subset (hb_subset_context_t *c,\n+               const hb_map_t& varidx_map) const\n+  {\n+    TRACE_SUBSET (this);\n+    auto *out = c->serializer->embed (*this);\n+    if (unlikely (!out)) return_trace (false);\n+\n+    hb_codepoint_t *new_idx;\n+    return_trace (c->serializer->check_assign (out->varIdx,\n+                                               (varidx_map.has (varIdx, &new_idx)) ? *new_idx : HB_OT_LAYOUT_NO_VARIATIONS_INDEX,\n+                                               HB_SERIALIZE_ERROR_INT_OVERFLOW));\n+  }\n+\n@@ -76,0 +89,41 @@\n+  bool subset (hb_subset_context_t *c) const\n+  {\n+    TRACE_SUBSET (this);\n+#ifdef HB_NO_VAR\n+    return_trace (false);\n+#endif\n+\n+    if (c->plan->all_axes_pinned)\n+      return_trace (false);\n+\n+    MVAR *out = c->serializer->start_embed (*this);\n+    if (unlikely (!c->serializer->extend_min (out))) return_trace (false);\n+    out->version = version;\n+    out->reserved = reserved;\n+    out->valueRecordSize = valueRecordSize;\n+    out->valueRecordCount = valueRecordCount;\n+\n+    item_variations_t item_vars;\n+    const VariationStore& src_var_store = this+varStore;\n+\n+    if (!item_vars.instantiate (src_var_store, c->plan))\n+      return_trace (false);\n+\n+    \/* serialize varstore *\/\n+    if (!out->varStore.serialize_serialize (c->serializer, item_vars.has_long_word (),\n+                                            c->plan->axis_tags,\n+                                            item_vars.get_region_list (),\n+                                            item_vars.get_vardata_encodings ()))\n+      return_trace (false);\n+\n+    \/* serialize value records array *\/\n+    unsigned value_rec_count = valueRecordCount;\n+    const VariationValueRecord *record = reinterpret_cast<const VariationValueRecord*> (valuesZ.arrayZ);\n+    for (unsigned i = 0; i < value_rec_count; i++)\n+    {\n+      if (!record->subset (c, item_vars.get_varidx_map ())) return_trace (false);\n+      record++;\n+    }\n+    return_trace (true);\n+  }\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-var-mvar-table.hh","additions":55,"deletions":1,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-    VORG *vorg_prime = c->serializer->start_embed<VORG> ();\n+    auto *vorg_prime = c->serializer->start_embed<VORG> ();\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-vorg-table.hh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -57,0 +57,6 @@\n+static hb_bool_t\n+hb_paint_color_glyph_nil (hb_paint_funcs_t *funcs, void *paint_data,\n+                          hb_codepoint_t glyph,\n+                          hb_font_t *font,\n+                          void *user_data) { return false; }\n+\n@@ -476,0 +482,19 @@\n+\/**\n+ * hb_paint_color_glyph:\n+ * @funcs: paint functions\n+ * @paint_data: associated data passed by the caller\n+ * @glyph: the glyph ID\n+ * @font: the font\n+ *\n+ * Perform a \"color-glyph\" paint operation.\n+ *\n+ * Since: 8.2.0\n+ *\/\n+hb_bool_t\n+hb_paint_color_glyph (hb_paint_funcs_t *funcs, void *paint_data,\n+                      hb_codepoint_t glyph,\n+                      hb_font_t *font)\n+{\n+  return funcs->color_glyph (paint_data, glyph, font);\n+}\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-paint.cc","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -139,0 +139,20 @@\n+\/**\n+ * hb_paint_color_glyph_func_t:\n+ * @funcs: paint functions object\n+ * @paint_data: The data accompanying the paint functions in hb_font_paint_glyph()\n+ * @glyph: the glyph ID\n+ * @font: the font\n+ * @user_data: User data pointer passed to hb_paint_funcs_set_color_glyph_func()\n+ *\n+ * A virtual method for the #hb_paint_funcs_t to render a color glyph by glyph index.\n+ *\n+ * Return value: %true if the glyph was painted, %false otherwise.\n+ *\n+ * Since: 8.2.0\n+ *\/\n+typedef hb_bool_t (*hb_paint_color_glyph_func_t) (hb_paint_funcs_t *funcs,\n+                                                  void *paint_data,\n+                                                  hb_codepoint_t glyph,\n+                                                  hb_font_t *font,\n+                                                  void *user_data);\n+\n@@ -726,0 +746,17 @@\n+\/**\n+ * hb_paint_funcs_set_color_glyph_func:\n+ * @funcs: A paint functions struct\n+ * @func: (closure user_data) (destroy destroy) (scope notified): The color-glyph callback\n+ * @user_data: Data to pass to @func\n+ * @destroy: (nullable): Function to call when @user_data is no longer needed\n+ *\n+ * Sets the color-glyph callback on the paint functions struct.\n+ *\n+ * Since: 8.2.0\n+ *\/\n+HB_EXTERN void\n+hb_paint_funcs_set_color_glyph_func (hb_paint_funcs_t                *funcs,\n+                                     hb_paint_color_glyph_func_t     func,\n+                                     void                            *user_data,\n+                                     hb_destroy_func_t                destroy);\n+\n@@ -925,0 +962,5 @@\n+HB_EXTERN hb_bool_t\n+hb_paint_color_glyph (hb_paint_funcs_t *funcs, void *paint_data,\n+                      hb_codepoint_t glyph,\n+                      hb_font_t *font);\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-paint.h","additions":42,"deletions":0,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+  HB_PAINT_FUNC_IMPLEMENT (color_glyph) \\\n@@ -80,0 +81,7 @@\n+  bool color_glyph (void *paint_data,\n+                    hb_codepoint_t glyph,\n+                    hb_font_t *font)\n+  { return func.color_glyph (this, paint_data,\n+                             glyph,\n+                             font,\n+                             !user_data ? nullptr : user_data->push_clip_glyph); }\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-paint.hh","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-      chunk_t *chunk = (chunk_t *) hb_calloc (1, sizeof (chunk_t));\n+      chunk_t *chunk = (chunk_t *) hb_malloc (sizeof (chunk_t));\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-pool.hh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+template <typename K>\n@@ -48,1 +49,1 @@\n-  typedef hb_pair_t<int64_t, unsigned> item_t;\n+  typedef hb_pair_t<K, unsigned> item_t;\n@@ -57,1 +58,4 @@\n-  void insert (int64_t priority, unsigned value)\n+#ifndef HB_OPTIMIZE_SIZE\n+  HB_ALWAYS_INLINE\n+#endif\n+  void insert (K priority, unsigned value)\n@@ -64,0 +68,3 @@\n+#ifndef HB_OPTIMIZE_SIZE\n+  HB_ALWAYS_INLINE\n+#endif\n@@ -109,0 +116,1 @@\n+  HB_ALWAYS_INLINE\n@@ -111,0 +119,1 @@\n+    repeat:\n@@ -126,0 +135,1 @@\n+    unsigned child;\n@@ -127,5 +137,3 @@\n-    {\n-      swap (index, left);\n-      bubble_down (left);\n-      return;\n-    }\n+      child = left;\n+    else\n+      child = right;\n@@ -133,2 +141,3 @@\n-    swap (index, right);\n-    bubble_down (right);\n+    swap (index, child);\n+    index = child;\n+    goto repeat;\n@@ -137,0 +146,1 @@\n+  HB_ALWAYS_INLINE\n@@ -139,0 +149,1 @@\n+    repeat:\n@@ -148,1 +159,2 @@\n-    bubble_up (parent_index);\n+    index = parent_index;\n+    goto repeat;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-priority-queue.hh","additions":22,"deletions":10,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -82,1 +82,6 @@\n-  for (unsigned lookup_index : ext_context.lookups.keys ())\n+\n+  \/\/ The loop below can modify the contents of ext_context.lookups if new subtables are added\n+  \/\/ to a lookup during a split. So save the initial set of lookup indices so the iteration doesn't\n+  \/\/ risk access free'd memory if ext_context.lookups gets resized.\n+  hb_set_t lookup_indices(ext_context.lookups.keys ());\n+  for (unsigned lookup_index : lookup_indices)\n@@ -117,0 +122,1 @@\n+  unsigned total_lookup_table_sizes = 0;\n@@ -122,0 +128,3 @@\n+    const auto& lookup_v = ext_context.graph.vertices_[lookup_index];\n+    total_lookup_table_sizes += lookup_v.table_size ();\n+\n@@ -134,2 +143,2 @@\n-  size_t l2_l3_size = lookup_list_size; \/\/ Lookup List + Lookups\n-  size_t l3_l4_size = 0; \/\/ Lookups + SubTables\n+  size_t l2_l3_size = lookup_list_size + total_lookup_table_sizes; \/\/ Lookup List + Lookups\n+  size_t l3_l4_size = total_lookup_table_sizes; \/\/ Lookups + SubTables\n@@ -142,0 +151,2 @@\n+    \/\/ TODO(garretrieger): this overestimates the extension subtables size because some extension subtables may be\n+    \/\/                     reused. However, we can't correct this until we have connected component analysis in place.\n@@ -162,2 +173,1 @@\n-      l2_l3_size   += lookup_size;\n-      l3_l4_size   += lookup_size + subtables_size;\n+      l3_l4_size   += subtables_size;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-repacker.hh","additions":15,"deletions":5,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -125,0 +125,1 @@\n+        length (0),\n@@ -130,1 +131,2 @@\n-        num_glyphs_set (false) {}\n+        num_glyphs_set (false),\n+        lazy_some_gpos (false) {}\n@@ -158,0 +160,13 @@\n+  hb_sanitize_context_t (hb_blob_t *b) : hb_sanitize_context_t ()\n+  {\n+    init (b);\n+\n+    if (blob)\n+      start_processing ();\n+  }\n+\n+  ~hb_sanitize_context_t ()\n+  {\n+    if (blob)\n+      end_processing ();\n+  }\n@@ -183,0 +198,1 @@\n+    {\n@@ -184,0 +200,2 @@\n+      this->length = 0;\n+    }\n@@ -188,0 +206,1 @@\n+      this->length = this->end - this->start;\n@@ -195,0 +214,1 @@\n+    this->length = this->end - this->start;\n@@ -227,0 +247,1 @@\n+    this->length = 0;\n@@ -240,1 +261,2 @@\n-    return (this->max_ops -= (int) count) > 0;\n+    this->max_ops -= (int) count;\n+    return true;\n@@ -243,0 +265,3 @@\n+#ifndef HB_OPTIMIZE_SIZE\n+  HB_ALWAYS_INLINE\n+#endif\n@@ -247,5 +272,3 @@\n-    bool ok = !len ||\n-              (this->start <= p &&\n-               p <= this->end &&\n-               (unsigned int) (this->end - p) >= len &&\n-               (this->max_ops -= len) > 0);\n+    bool ok = (uintptr_t) (p - this->start) <= this->length &&\n+              (unsigned int) (this->end - p) >= len &&\n+              ((this->max_ops -= len) > 0);\n@@ -262,0 +285,37 @@\n+#ifndef HB_OPTIMIZE_SIZE\n+  HB_ALWAYS_INLINE\n+#endif\n+  bool check_range_fast (const void *base,\n+                         unsigned int len) const\n+  {\n+    const char *p = (const char *) base;\n+    bool ok = ((uintptr_t) (p - this->start) <= this->length &&\n+               (unsigned int) (this->end - p) >= len);\n+\n+    DEBUG_MSG_LEVEL (SANITIZE, p, this->debug_depth+1, 0,\n+                     \"check_range_fast [%p..%p]\"\n+                     \" (%u bytes) in [%p..%p] -> %s\",\n+                     p, p + len, len,\n+                     this->start, this->end,\n+                     ok ? \"OK\" : \"OUT-OF-RANGE\");\n+\n+    return likely (ok);\n+  }\n+\n+#ifndef HB_OPTIMIZE_SIZE\n+  HB_ALWAYS_INLINE\n+#endif\n+  bool check_point (const void *base) const\n+  {\n+    const char *p = (const char *) base;\n+    bool ok = (uintptr_t) (p - this->start) <= this->length;\n+\n+    DEBUG_MSG_LEVEL (SANITIZE, p, this->debug_depth+1, 0,\n+                     \"check_point [%p]\"\n+                     \" in [%p..%p] -> %s\",\n+                     p,\n+                     this->start, this->end,\n+                     ok ? \"OK\" : \"OUT-OF-RANGE\");\n+\n+    return likely (ok);\n+  }\n@@ -284,0 +344,14 @@\n+  template <typename T>\n+  HB_ALWAYS_INLINE\n+  bool check_array_sized (const T *base, unsigned int len, unsigned len_size) const\n+  {\n+    if (len_size >= 4)\n+    {\n+      if (unlikely (hb_unsigned_mul_overflows (len, hb_static_size (T), &len)))\n+        return false;\n+    }\n+    else\n+      len = len * hb_static_size (T);\n+    return this->check_range (base, len);\n+  }\n+\n@@ -295,1 +369,1 @@\n-    return this->check_range (base, a, b, hb_static_size (T));\n+    return this->check_range (base, hb_static_size (T), a, b);\n@@ -311,0 +385,3 @@\n+#ifndef HB_OPTIMIZE_SIZE\n+  HB_ALWAYS_INLINE\n+#endif\n@@ -312,1 +389,6 @@\n-  { return likely (this->check_range (obj, obj->min_size)); }\n+  {\n+    if (sizeof (uintptr_t) == sizeof (uint32_t))\n+      return likely (this->check_range_fast (obj, obj->min_size));\n+    else\n+      return likely (this->check_point ((const char *) obj + obj->min_size));\n+  }\n@@ -374,1 +456,1 @@\n-          DEBUG_MSG_FUNC (SANITIZE, start, \"requested %u edits in second round; FAILLING\", edit_count);\n+          DEBUG_MSG_FUNC (SANITIZE, start, \"requested %u edits in second round; FAILING\", edit_count);\n@@ -419,0 +501,1 @@\n+  unsigned length;\n@@ -427,0 +510,2 @@\n+  public:\n+  bool lazy_some_gpos;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-sanitize.hh","additions":95,"deletions":10,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -116,1 +116,1 @@\n-      return hb_bytes_t (head, tail - head).hash () ^\n+      return hb_bytes_t (head, hb_min (128, tail - head)).hash () ^\n@@ -175,2 +175,8 @@\n-  { return snapshot_t {\n-      head, tail, current, current->real_links.length, current->virtual_links.length, errors }; }\n+  {\n+    return snapshot_t {\n+      head, tail, current,\n+      current ? current->real_links.length : 0,\n+      current ? current->virtual_links.length : 0,\n+      errors\n+     };\n+  }\n@@ -263,1 +269,2 @@\n-  template <typename Type>\n+  template <typename Type=char>\n+  __attribute__((returns_nonnull))\n@@ -306,0 +313,1 @@\n+  __attribute__((returns_nonnull))\n@@ -326,0 +334,2 @@\n+    \/\/ Allow cleanup when we've error'd out on int overflows which don't compromise\n+    \/\/ the serializer state.\n@@ -343,1 +353,3 @@\n-    if (unlikely (in_error())) return 0;\n+    \/\/ Allow cleanup when we've error'd out on int overflows which don't compromise\n+    \/\/ the serializer state.\n+    if (unlikely (in_error()  && !only_overflow ())) return 0;\n@@ -408,2 +420,5 @@\n-    current->real_links.shrink (snap.num_real_links);\n-    current->virtual_links.shrink (snap.num_virtual_links);\n+    if (current)\n+    {\n+      current->real_links.shrink (snap.num_real_links);\n+      current->virtual_links.shrink (snap.num_virtual_links);\n+    }\n@@ -566,1 +581,1 @@\n-      allocate_size<void> (alignment - l);\n+      (void) allocate_size<void> (alignment - l);\n@@ -570,0 +585,1 @@\n+  __attribute__((returns_nonnull))\n@@ -573,0 +589,1 @@\n+  __attribute__((returns_nonnull))\n@@ -600,0 +617,1 @@\n+  HB_NODISCARD\n@@ -621,0 +639,1 @@\n+  HB_NODISCARD\n@@ -630,0 +649,1 @@\n+  HB_NODISCARD\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-serialize.hh","additions":28,"deletions":8,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -48,1 +48,2 @@\n- * not, we return early.\n+ * not, we return early.  We can also match a digest against another\n+ * digest.\n@@ -50,2 +51,7 @@\n- * We use these filters both at the lookup-level, and then again,\n- * at the subtable-level. Both have performance win.\n+ * We use these filters at three levels:\n+ *   - If the digest for all the glyphs in the buffer as a whole\n+ *     does not match the digest for the lookup, skip the lookup.\n+ *   - For each glyph, if it doesn't match the lookup digest,\n+ *     skip it.\n+ *   - For each glyph, if it doesn't match the subtable digest,\n+ *     skip it.\n@@ -85,0 +91,1 @@\n+    if (mask == (mask_t) -1) return false;\n@@ -86,0 +93,1 @@\n+    {\n@@ -87,1 +95,4 @@\n-    else {\n+      return false;\n+    }\n+    else\n+    {\n@@ -91,0 +102,1 @@\n+      return true;\n@@ -92,1 +104,0 @@\n-    return true;\n@@ -151,2 +162,1 @@\n-    return head.add_range (a, b) &&\n-           tail.add_range (a, b);\n+    return (int) head.add_range (a, b) | (int) tail.add_range (a, b);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-set-digest.hh","additions":17,"deletions":7,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -203,1 +203,1 @@\n-  \/* Immutible-safe. *\/\n+  \/* Immutable-safe. *\/\n@@ -254,1 +254,1 @@\n-  \/* Immutible-safe. *\/\n+  \/* Immutable-safe. *\/\n@@ -275,1 +275,1 @@\n-  \/* Immutible-safe. *\/\n+  \/* Immutable-safe. *\/\n@@ -297,1 +297,1 @@\n-  \/* Immutible-safe. *\/\n+  \/* Immutable-safe. *\/\n@@ -314,1 +314,1 @@\n-  \/* Immutible-safe. *\/\n+  \/* Immutable-safe. *\/\n@@ -337,1 +337,1 @@\n-  \/* Immutible-safe. *\/\n+  \/* Immutable-safe. *\/\n@@ -408,1 +408,1 @@\n-  \/* Immutible-safe. *\/\n+  \/* Immutable-safe. *\/\n@@ -425,1 +425,1 @@\n-  \/* Immutible-safe. *\/\n+  \/* Immutable-safe. *\/\n@@ -442,1 +442,1 @@\n-  \/* Immutible-safe. *\/\n+  \/* Immutable-safe. *\/\n@@ -459,1 +459,1 @@\n-  \/* Immutible-safe. *\/\n+  \/* Immutable-safe. *\/\n@@ -477,1 +477,1 @@\n-  \/* Immutible-safe. *\/\n+  \/* Immutable-safe. *\/\n@@ -492,1 +492,1 @@\n-  \/* Immutible-safe. *\/\n+  \/* Immutable-safe. *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-set.cc","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-#define HB_SET_VALUE_INVALID ((hb_codepoint_t) -1)\n+#define HB_SET_VALUE_INVALID HB_CODEPOINT_INVALID\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-set.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -118,1 +118,1 @@\n-  hb_sparseset_t& operator << (const hb_pair_t<hb_codepoint_t, hb_codepoint_t>& range)\n+  hb_sparseset_t& operator << (const hb_codepoint_pair_t& range)\n@@ -177,1 +177,1 @@\n-  hb_set_t& operator << (const hb_pair_t<hb_codepoint_t, hb_codepoint_t>& range)\n+  hb_set_t& operator << (const hb_codepoint_pair_t& range)\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-set.hh","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -223,1 +223,1 @@\n-  memcpy (buffer->info, text.arrayZ, text.length * sizeof (buffer->info[0]));\n+  hb_memcpy (buffer->info, text.arrayZ, text.length * sizeof (buffer->info[0]));\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-shape.cc","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,0 +36,5 @@\n+#ifdef HAVE_WASM\n+\/* Only picks up fonts that have a \"Wasm\" table. *\/\n+HB_SHAPER_IMPLEMENT (wasm)\n+#endif\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-shaper-list.hh","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"hb-cff-interp-common.hh\"\n@@ -61,0 +62,2 @@\n+static const unsigned char static_endchar_str[] = {OpCode_endchar};\n+const unsigned char *endchar_str = static_endchar_str;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-static.cc","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -45,1 +45,3 @@\n-};\n+struct cff1_subset_accelerator_t;\n+struct cff2_subset_accelerator_t;\n+}\n@@ -54,2 +56,2 @@\n-  static hb_subset_accelerator_t* create(const hb_map_t& unicode_to_gid_,\n-                                         const hb_multimap_t gid_to_unicodes_,\n+  static hb_subset_accelerator_t* create(hb_face_t *source,\n+                                         const hb_map_t& unicode_to_gid_,\n@@ -61,2 +63,4 @@\n-    new (accel) hb_subset_accelerator_t (unicode_to_gid_,\n-                                         gid_to_unicodes_,\n+    if (unlikely (!accel)) return accel;\n+\n+    new (accel) hb_subset_accelerator_t (source,\n+                                         unicode_to_gid_,\n@@ -80,2 +84,2 @@\n-  hb_subset_accelerator_t (const hb_map_t& unicode_to_gid_,\n-                           const hb_multimap_t& gid_to_unicodes_,\n+  hb_subset_accelerator_t (hb_face_t *source,\n+                           const hb_map_t& unicode_to_gid_,\n@@ -85,1 +89,0 @@\n-    gid_to_unicodes (gid_to_unicodes_),\n@@ -90,4 +93,1 @@\n-    cff_accelerator(nullptr),\n-    destroy_cff_accelerator(nullptr) {}\n-\n-  ~hb_subset_accelerator_t ()\n+    source(hb_face_reference (source))\n@@ -95,5 +95,7 @@\n-    if (cff_accelerator && destroy_cff_accelerator)\n-      destroy_cff_accelerator ((void*) cff_accelerator);\n-\n-    if (cmap_cache && destroy_cmap_cache)\n-      destroy_cmap_cache ((void*) cmap_cache);\n+    gid_to_unicodes.alloc (unicode_to_gid.get_population ());\n+    for (const auto &_ : unicode_to_gid)\n+    {\n+      auto unicode = _.first;\n+      auto gid = _.second;\n+      gid_to_unicodes.add (gid, unicode);\n+    }\n@@ -102,0 +104,2 @@\n+  HB_INTERNAL ~hb_subset_accelerator_t ();\n+\n@@ -107,3 +111,3 @@\n-  const hb_map_t unicode_to_gid;\n-  const hb_multimap_t gid_to_unicodes;\n-  const hb_set_t unicodes;\n+  hb_map_t unicode_to_gid;\n+  hb_multimap_t gid_to_unicodes;\n+  hb_set_t unicodes;\n@@ -117,2 +121,0 @@\n-  const CFF::cff_subset_accelerator_t* cff_accelerator;\n-  hb_destroy_func_t destroy_cff_accelerator;\n@@ -129,0 +131,7 @@\n+\n+  hb_face_t *source;\n+#ifndef HB_NO_SUBSET_CFF\n+  \/\/ These have to be immediately after source:\n+  mutable hb_face_lazy_loader_t<OT::cff1_subset_accelerator_t, 1> cff1_accel;\n+  mutable hb_face_lazy_loader_t<OT::cff2_subset_accelerator_t, 2> cff2_accel;\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-subset-accelerator.hh","additions":31,"deletions":22,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -71,1 +71,4 @@\n-    for (hb_codepoint_t i = 0; i < subset_num_glyphs; i++)\n+    hb_pair_t<unsigned, hb_codepoint_t> last_range {0, 0};\n+    auto it = hb_iter (plan->new_to_old_gid_list);\n+    auto _ = *it;\n+    for (hb_codepoint_t gid = 0; gid < subset_num_glyphs; gid++)\n@@ -73,3 +76,7 @@\n-      hb_codepoint_t glyph;\n-      hb_codepoint_t fd;\n-      if (!plan->old_gid_for_new_gid (i, &glyph))\n+      hb_codepoint_t old_glyph;\n+      if (gid == _.first)\n+      {\n+        old_glyph = _.second;\n+        _ = *++it;\n+      }\n+      else\n@@ -78,1 +85,1 @@\n-        glyph = i;\n+        old_glyph = gid;\n@@ -80,2 +87,3 @@\n-      fd = src.get_fd (glyph);\n-      set.add (fd);\n+      if (old_glyph >= last_range.second)\n+        last_range = src.get_fd_range (old_glyph);\n+      unsigned fd = last_range.first;\n@@ -85,0 +93,1 @@\n+        set.add (fd);\n@@ -87,2 +96,4 @@\n-        code_pair_t pair = { fd, i };\n-        fdselect_ranges.push (pair);\n+        fdselect_ranges.push (code_pair_t { fd, gid });\n+\n+        if (gid == old_glyph)\n+          gid = hb_min (_.first - 1, last_range.second - 1);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-subset-cff-common.cc","additions":20,"deletions":9,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -483,0 +483,1 @@\n+    if (unlikely (!accel)) return nullptr;\n@@ -513,1 +514,2 @@\n-  ~cff_subset_accelerator_t() {\n+  ~cff_subset_accelerator_t()\n+  {\n@@ -515,1 +517,6 @@\n-    hb_map_destroy (glyph_to_sid_map.get_relaxed ());\n+    auto *mapping = glyph_to_sid_map.get_relaxed ();\n+    if (mapping)\n+    {\n+      mapping->~glyph_to_sid_map_t ();\n+      hb_free (mapping);\n+    }\n@@ -521,1 +528,1 @@\n-  mutable hb_atomic_ptr_t<hb_map_t> glyph_to_sid_map = nullptr;\n+  mutable hb_atomic_ptr_t<glyph_to_sid_map_t> glyph_to_sid_map;\n@@ -603,3 +610,2 @@\n-    resize (closure->get_population ());\n-    hb_codepoint_t old_num = HB_SET_VALUE_INVALID;\n-    while (hb_set_next (closure, &old_num))\n+    alloc (closure->get_population ());\n+    for (auto old_num : *closure)\n@@ -675,2 +681,2 @@\n-    if (plan->accelerator && plan->accelerator->cff_accelerator) {\n-      cff_accelerator = plan->accelerator->cff_accelerator;\n+    if (acc.cff_accelerator) {\n+      cff_accelerator = acc.cff_accelerator;\n@@ -712,1 +718,1 @@\n-    for (unsigned int i = 0; i < plan->num_output_glyphs (); i++)\n+    for (auto _ : plan->new_to_old_gid_list)\n@@ -714,3 +720,2 @@\n-      hb_codepoint_t  glyph;\n-      if (!plan->old_gid_for_new_gid (i, &glyph))\n-        continue;\n+      hb_codepoint_t new_glyph = _.first;\n+      hb_codepoint_t old_glyph = _.second;\n@@ -718,2 +723,2 @@\n-      const hb_ubytes_t str = (*acc.charStrings)[glyph];\n-      unsigned int fd = acc.fdSelect->get_fd (glyph);\n+      const hb_ubytes_t str = (*acc.charStrings)[old_glyph];\n+      unsigned int fd = acc.fdSelect->get_fd (old_glyph);\n@@ -728,1 +733,1 @@\n-          cached_charstrings[i] = &cff_accelerator->parsed_charstrings[glyph];\n+          cached_charstrings[new_glyph] = &cff_accelerator->parsed_charstrings[old_glyph];\n@@ -730,1 +735,1 @@\n-          parsed_charstrings[i] = cff_accelerator->parsed_charstrings[glyph];\n+          parsed_charstrings[new_glyph] = cff_accelerator->parsed_charstrings[old_glyph];\n@@ -738,2 +743,2 @@\n-      parsed_charstrings[i].alloc (str.length);\n-      subr_subset_param_t  param (&parsed_charstrings[i],\n+      parsed_charstrings[new_glyph].alloc (str.length);\n+      subr_subset_param_t  param (&parsed_charstrings[new_glyph],\n@@ -750,1 +755,1 @@\n-      SUBSETTER::complete_parsed_str (interp.env, param, parsed_charstrings[i]);\n+      SUBSETTER::complete_parsed_str (interp.env, param, parsed_charstrings[new_glyph]);\n@@ -755,1 +760,1 @@\n-        subr_subset_param_t  param (&parsed_charstrings[i],\n+        subr_subset_param_t  param (&parsed_charstrings[new_glyph],\n@@ -763,1 +768,1 @@\n-        if (drop_hints_in_str (parsed_charstrings[i], param, drop))\n+        if (drop_hints_in_str (parsed_charstrings[new_glyph], param, drop))\n@@ -765,1 +770,1 @@\n-          parsed_charstrings[i].set_hint_dropped ();\n+          parsed_charstrings[new_glyph].set_hint_dropped ();\n@@ -767,1 +772,1 @@\n-            parsed_charstrings[i].set_vsindex_dropped ();\n+            parsed_charstrings[new_glyph].set_vsindex_dropped ();\n@@ -771,1 +776,1 @@\n-      \/* Doing this here one by one instead of compacting all at the en\n+      \/* Doing this here one by one instead of compacting all at the end\n@@ -777,1 +782,1 @@\n-      parsed_charstrings[i].compact ();\n+      parsed_charstrings[new_glyph].compact ();\n@@ -800,1 +805,2 @@\n-    if (unlikely (!buffArray.resize_exact (plan->num_output_glyphs ())))\n+    unsigned num_glyphs = plan->num_output_glyphs ();\n+    if (unlikely (!buffArray.resize_exact (num_glyphs)))\n@@ -802,1 +808,2 @@\n-    for (unsigned int i = 0; i < plan->num_output_glyphs (); i++)\n+    hb_codepoint_t last = 0;\n+    for (auto _ : plan->new_to_old_gid_list)\n@@ -804,8 +811,14 @@\n-      hb_codepoint_t  glyph;\n-      if (!plan->old_gid_for_new_gid (i, &glyph))\n-      {\n-        \/* add an endchar only charstring for a missing glyph if CFF1 *\/\n-        if (endchar_op != OpCode_Invalid) buffArray.arrayZ[i].push (endchar_op);\n-        continue;\n-      }\n-      unsigned int  fd = acc.fdSelect->get_fd (glyph);\n+      hb_codepoint_t gid = _.first;\n+      hb_codepoint_t old_glyph = _.second;\n+\n+      if (endchar_op != OpCode_Invalid)\n+        for (; last < gid; last++)\n+        {\n+          \/\/ Hack to point vector to static string.\n+          auto &b = buffArray.arrayZ[last];\n+          b.length = 1;\n+          b.arrayZ = const_cast<unsigned char *>(endchar_str);\n+        }\n+\n+      last++; \/\/ Skip over gid\n+      unsigned int  fd = acc.fdSelect->get_fd (old_glyph);\n@@ -814,1 +827,1 @@\n-      if (unlikely (!encode_str (get_parsed_charstring (i), fd, buffArray.arrayZ[i], encode_prefix)))\n+      if (unlikely (!encode_str (get_parsed_charstring (gid), fd, buffArray.arrayZ[gid], encode_prefix)))\n@@ -817,0 +830,9 @@\n+    if (endchar_op != OpCode_Invalid)\n+      for (; last < num_glyphs; last++)\n+      {\n+        \/\/ Hack to point vector to static string.\n+        auto &b = buffArray.arrayZ[last];\n+        b.length = 1;\n+        b.arrayZ = const_cast<unsigned char *>(endchar_str);\n+      }\n+\n@@ -983,1 +1005,1 @@\n-    for (unsigned int i = 0; i < plan->num_output_glyphs (); i++)\n+    for (auto _ : plan->new_to_old_gid_list)\n@@ -985,4 +1007,3 @@\n-      hb_codepoint_t  glyph;\n-      if (!plan->old_gid_for_new_gid (i, &glyph))\n-        continue;\n-      unsigned int fd = acc.fdSelect->get_fd (glyph);\n+      hb_codepoint_t new_glyph = _.first;\n+      hb_codepoint_t old_glyph = _.second;\n+      unsigned int fd = acc.fdSelect->get_fd (old_glyph);\n@@ -994,1 +1015,1 @@\n-      subr_subset_param_t  param (const_cast<parsed_cs_str_t*> (&get_parsed_charstring (i)),\n+      subr_subset_param_t  param (const_cast<parsed_cs_str_t*> (&get_parsed_charstring (new_glyph)),\n@@ -1000,1 +1021,1 @@\n-      collect_subr_refs_in_str (get_parsed_charstring (i), param);\n+      collect_subr_refs_in_str (get_parsed_charstring (new_glyph), param);\n@@ -1108,1 +1129,1 @@\n-    plan->inprogress_accelerator->cff_accelerator =\n+    acc.cff_accelerator =\n@@ -1113,3 +1134,0 @@\n-    plan->inprogress_accelerator->destroy_cff_accelerator =\n-        cff_subset_accelerator_t::destroy;\n-\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-subset-cff-common.hh","additions":65,"deletions":47,"binary":false,"changes":112,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-#include \"hb-subset-cff1.hh\"\n@@ -42,1 +41,1 @@\n-struct remap_sid_t : hb_inc_bimap_t\n+struct remap_sid_t\n@@ -44,0 +43,11 @@\n+  unsigned get_population () const { return vector.length; }\n+\n+  void alloc (unsigned size)\n+  {\n+    map.alloc (size);\n+    vector.alloc (size, true);\n+  }\n+\n+  bool in_error () const\n+  { return map.in_error () || vector.in_error (); }\n+\n@@ -46,3 +56,1 @@\n-    if ((sid != CFF_UNDEF_SID) && !is_std_std (sid))\n-      return offset_sid (hb_inc_bimap_t::add (unoffset_sid (sid)));\n-    else\n+    if (is_std_str (sid) || (sid == CFF_UNDEF_SID))\n@@ -50,0 +58,11 @@\n+\n+    sid = unoffset_sid (sid);\n+    unsigned v = next;\n+    if (map.set (sid, v, false))\n+    {\n+      vector.push (sid);\n+      next++;\n+    }\n+    else\n+      v = map.get (sid); \/\/ already exists\n+    return offset_sid (v);\n@@ -54,1 +73,1 @@\n-    if (is_std_std (sid) || (sid == CFF_UNDEF_SID))\n+    if (is_std_str (sid) || (sid == CFF_UNDEF_SID))\n@@ -56,2 +75,2 @@\n-    else\n-      return offset_sid (get (unoffset_sid (sid)));\n+\n+    return offset_sid (map.get (unoffset_sid (sid)));\n@@ -62,1 +81,1 @@\n-  static bool is_std_std (unsigned int sid) { return sid < num_std_strings; }\n+  static bool is_std_str (unsigned int sid) { return sid < num_std_strings; }\n@@ -65,0 +84,4 @@\n+  unsigned next = 0;\n+\n+  hb_map_t map;\n+  hb_vector_t<unsigned> vector;\n@@ -274,1 +297,1 @@\n-    bool two_byte = false;\n+    hb_codepoint_t all_glyphs = 0;\n@@ -280,1 +303,1 @@\n-      two_byte |= nLeft >= 0x100;\n+      all_glyphs |= nLeft;\n@@ -284,0 +307,1 @@\n+    bool two_byte = all_glyphs >= 0x100;\n@@ -394,2 +418,4 @@\n-struct cff_subset_plan {\n-  cff_subset_plan ()\n+namespace OT {\n+struct cff1_subset_plan\n+{\n+  cff1_subset_plan ()\n@@ -405,1 +431,1 @@\n-    hb_codepoint_t  code, last_code = CFF_UNDEF_CODE;\n+    unsigned code, last_code = CFF_UNDEF_CODE - 1;\n@@ -416,0 +442,1 @@\n+    code_pair_t glyph_to_sid_cache {0, HB_CODEPOINT_INVALID};\n@@ -418,1 +445,4 @@\n-    for (glyph = 1; glyph < plan->num_output_glyphs (); glyph++)\n+    auto it = hb_iter (plan->new_to_old_gid_list);\n+    if (it->first == 0) it++;\n+    auto _ = *it;\n+    for (glyph = 1; glyph < num_glyphs; glyph++)\n@@ -420,2 +450,2 @@\n-      hb_codepoint_t  old_glyph;\n-      if (!plan->old_gid_for_new_gid (glyph, &old_glyph))\n+      hb_codepoint_t old_glyph;\n+      if (glyph == _.first)\n@@ -423,1 +453,6 @@\n-        \/* Retain the code for the old missing glyph ID *\/\n+        old_glyph = _.second;\n+        _ = *++it;\n+      }\n+      else\n+      {\n+        \/* Retain the SID for the old missing glyph ID *\/\n@@ -426,1 +461,1 @@\n-      code = acc.glyph_to_code (old_glyph);\n+      code = acc.glyph_to_code (old_glyph, &glyph_to_sid_cache);\n@@ -433,5 +468,2 @@\n-      if ((last_code == CFF_UNDEF_CODE) || (code != last_code + 1))\n-      {\n-        code_pair_t pair = { code, glyph };\n-        subset_enc_code_ranges.push (pair);\n-      }\n+      if (code != last_code + 1)\n+        subset_enc_code_ranges.push (code_pair_t {code, glyph});\n@@ -442,1 +474,1 @@\n-        hb_codepoint_t  sid = acc.glyph_to_sid (old_glyph);\n+        hb_codepoint_t  sid = acc.glyph_to_sid (old_glyph, &glyph_to_sid_cache);\n@@ -445,4 +477,1 @@\n-        {\n-          code_pair_t pair = { supp_codes[i], sid };\n-          subset_enc_supp_codes.push (pair);\n-        }\n+          subset_enc_supp_codes.push (code_pair_t {supp_codes[i], sid});\n@@ -465,1 +494,1 @@\n-  void plan_subset_charset (const OT::cff1::accelerator_subset_t &acc, hb_subset_plan_t *plan)\n+  bool plan_subset_charset (const OT::cff1::accelerator_subset_t &acc, hb_subset_plan_t *plan)\n@@ -468,1 +497,1 @@\n-    hb_codepoint_t  sid, last_sid = CFF_UNDEF_CODE;\n+    unsigned last_sid = CFF_UNDEF_CODE - 1;\n@@ -473,1 +502,12 @@\n-      return;\n+      return false;\n+    }\n+\n+    code_pair_t glyph_to_sid_cache {0, HB_CODEPOINT_INVALID};\n+\n+    unsigned num_glyphs = plan->num_output_glyphs ();\n+\n+    if (unlikely (!subset_charset_ranges.alloc (hb_min (num_glyphs,\n+                                                        acc.num_charset_entries))))\n+    {\n+      plan->check_success (false);\n+      return false;\n@@ -476,3 +516,3 @@\n-    hb_map_t *glyph_to_sid_map = (plan->accelerator && plan->accelerator->cff_accelerator) ?\n-                                  plan->accelerator->cff_accelerator->glyph_to_sid_map :\n-                                  nullptr;\n+    glyph_to_sid_map_t *glyph_to_sid_map = acc.cff_accelerator ?\n+                                           acc.cff_accelerator->glyph_to_sid_map.get_acquire () :\n+                                           nullptr;\n@@ -480,3 +520,1 @@\n-    if (!glyph_to_sid_map &&\n-        ((plan->accelerator && plan->accelerator->cff_accelerator) ||\n-         plan->num_output_glyphs () > plan->source->get_num_glyphs () \/ 8.))\n+    if (!glyph_to_sid_map && acc.cff_accelerator)\n@@ -488,2 +526,8 @@\n-    unsigned int glyph;\n-    for (glyph = 1; glyph < plan->num_output_glyphs (); glyph++)\n+    auto it = hb_iter (plan->new_to_old_gid_list);\n+    if (it->first == 0) it++;\n+    auto _ = *it;\n+    bool not_is_cid = !acc.is_CID ();\n+    bool skip = !not_is_cid && glyph_to_sid_map;\n+    if (not_is_cid)\n+      sidmap.alloc (num_glyphs);\n+    for (hb_codepoint_t glyph = 1; glyph < num_glyphs; glyph++)\n@@ -491,2 +535,7 @@\n-      hb_codepoint_t  old_glyph;\n-      if (!plan->old_gid_for_new_gid (glyph, &old_glyph))\n+      hb_codepoint_t old_glyph;\n+      if (glyph == _.first)\n+      {\n+        old_glyph = _.second;\n+        _ = *++it;\n+      }\n+      else\n@@ -497,1 +546,3 @@\n-      sid = glyph_to_sid_map ? glyph_to_sid_map->get (old_glyph) : acc.glyph_to_sid (old_glyph);\n+      unsigned sid = glyph_to_sid_map ?\n+                     glyph_to_sid_map->arrayZ[old_glyph].code :\n+                     acc.glyph_to_sid (old_glyph, &glyph_to_sid_cache);\n@@ -499,1 +550,1 @@\n-      if (!acc.is_CID ())\n+      if (not_is_cid)\n@@ -502,1 +553,4 @@\n-      if ((last_sid == CFF_UNDEF_CODE) || (sid != last_sid + 1))\n+      if (sid != last_sid + 1)\n+        subset_charset_ranges.push (code_pair_t {sid, glyph});\n+\n+      if (glyph == old_glyph && skip)\n@@ -504,2 +558,2 @@\n-        code_pair_t pair = { sid, glyph };\n-        subset_charset_ranges.push (pair);\n+        glyph = hb_min (_.first - 1, glyph_to_sid_map->arrayZ[old_glyph].glyph);\n+        sid += glyph - old_glyph;\n@@ -512,3 +566,6 @@\n-      if (!(plan->accelerator && plan->accelerator->cff_accelerator) ||\n-          !plan->accelerator->cff_accelerator->glyph_to_sid_map.cmpexch (nullptr, glyph_to_sid_map))\n-        hb_map_destroy (glyph_to_sid_map);\n+      if ((!plan->accelerator && acc.cff_accelerator) ||\n+          !acc.cff_accelerator->glyph_to_sid_map.cmpexch (nullptr, glyph_to_sid_map))\n+      {\n+        glyph_to_sid_map->~glyph_to_sid_map_t ();\n+        hb_free (glyph_to_sid_map);\n+      }\n@@ -517,1 +574,1 @@\n-    bool two_byte = subset_charset_ranges.complete (glyph);\n+    bool two_byte = subset_charset_ranges.complete (num_glyphs);\n@@ -519,1 +576,1 @@\n-    size0 = Charset0::min_size + HBUINT16::static_size * (plan->num_output_glyphs () - 1);\n+    size0 = Charset0::get_size (plan->num_output_glyphs ());\n@@ -521,1 +578,1 @@\n-      size_ranges = Charset1::min_size + Charset1_Range::static_size * subset_charset_ranges.length;\n+      size_ranges = Charset1::get_size_for_ranges (subset_charset_ranges.length);\n@@ -523,1 +580,1 @@\n-      size_ranges = Charset2::min_size + Charset2_Range::static_size * subset_charset_ranges.length;\n+      size_ranges = Charset2::get_size_for_ranges (subset_charset_ranges.length);\n@@ -531,0 +588,2 @@\n+\n+    return true;\n@@ -535,2 +594,0 @@\n-    sidmap.reset ();\n-\n@@ -542,2 +599,1 @@\n-        (void)sidmap.add (sid);\n-        topDictModSIDs[i] = sidmap[sid];\n+        topDictModSIDs[i] = sidmap.add (sid);\n@@ -567,9 +623,10 @@\n-    \/* check whether the subset renumbers any glyph IDs *\/\n-    gid_renum = false;\n-    for (hb_codepoint_t new_glyph = 0; new_glyph < plan->num_output_glyphs (); new_glyph++)\n-    {\n-      if (!plan->old_gid_for_new_gid(new_glyph, &old_glyph))\n-        continue;\n-      if (new_glyph != old_glyph) {\n-        gid_renum = true;\n-        break;\n+    subset_charset = !acc.is_predef_charset ();\n+    if (!subset_charset)\n+      \/* check whether the subset renumbers any glyph IDs *\/\n+      for (const auto &_ : plan->new_to_old_gid_list)\n+      {\n+        if (_.first != _.second)\n+        {\n+          subset_charset = true;\n+          break;\n+        }\n@@ -577,1 +634,0 @@\n-    }\n@@ -579,1 +635,0 @@\n-    subset_charset = gid_renum || !acc.is_predef_charset ();\n@@ -621,1 +676,2 @@\n-      if (subset_charset) plan_subset_charset (acc, plan);\n+      if (subset_charset && !plan_subset_charset (acc, plan))\n+        return false;\n@@ -685,2 +741,3 @@\n-    return ((subset_charstrings.length == plan->num_output_glyphs ())\n-           && (fontdicts_mod.length == subset_fdcount));\n+    return !plan->in_error () &&\n+           (subset_charstrings.length == plan->num_output_glyphs ()) &&\n+           (fontdicts_mod.length == subset_fdcount);\n@@ -725,0 +782,1 @@\n+} \/\/ namespace OT\n@@ -726,4 +784,3 @@\n-static bool _serialize_cff1 (hb_serialize_context_t *c,\n-                             cff_subset_plan &plan,\n-                             const OT::cff1::accelerator_subset_t  &acc,\n-                             unsigned int num_glyphs)\n+bool\n+OT::cff1::accelerator_subset_t::serialize (hb_serialize_context_t *c,\n+                                           struct OT::cff1_subset_plan &plan) const\n@@ -732,1 +789,1 @@\n-  for (int i = (int)acc.privateDicts.length; --i >= 0 ;)\n+  for (int i = (int) privateDicts.length; --i >= 0 ;)\n@@ -739,4 +796,2 @@\n-        CFF1Subrs *dest = c->start_embed <CFF1Subrs> ();\n-        if (unlikely (!dest)) return false;\n-        c->push ();\n-        if (likely (dest && dest->serialize (c, plan.subset_localsubrs[i])))\n+        auto *dest = c->push <CFF1Subrs> ();\n+        if (likely (dest->serialize (c, plan.subset_localsubrs[i])))\n@@ -751,3 +806,1 @@\n-      PrivateDict *pd = c->start_embed<PrivateDict> ();\n-      if (unlikely (!pd)) return false;\n-      c->push ();\n+      auto *pd = c->push<PrivateDict> ();\n@@ -756,1 +809,1 @@\n-      if (likely (pd->serialize (c, acc.privateDicts[i], privSzr, subrs_link)))\n+      if (likely (pd->serialize (c, privateDicts[i], privSzr, subrs_link)))\n@@ -770,1 +823,1 @@\n-  if (!acc.is_CID ())\n+  if (!is_CID ())\n@@ -777,1 +830,2 @@\n-    unsigned total_size = CFF1CharStrings::total_size (plan.subset_charstrings);\n+    unsigned data_size = 0;\n+    unsigned total_size = CFF1CharStrings::total_size (plan.subset_charstrings, &data_size);\n@@ -781,4 +835,2 @@\n-    CFF1CharStrings  *cs = c->start_embed<CFF1CharStrings> ();\n-    if (unlikely (!cs)) return false;\n-\n-    if (likely (cs->serialize (c, plan.subset_charstrings)))\n+    auto *cs = c->start_embed<CFF1CharStrings> ();\n+    if (likely (cs->serialize (c, plan.subset_charstrings, &data_size)))\n@@ -794,1 +846,1 @@\n-  if (acc.fdArray != &Null (CFF1FDArray))\n+  if (fdArray != &Null (CFF1FDArray))\n@@ -796,3 +848,1 @@\n-    CFF1FDArray *fda = c->start_embed<CFF1FDArray> ();\n-    if (unlikely (!fda)) return false;\n-    c->push ();\n+    auto *fda = c->push<CFF1FDArray> ();\n@@ -811,1 +861,1 @@\n-  if (acc.fdSelect != &Null (CFF1FDSelect))\n+  if (fdSelect != &Null (CFF1FDSelect))\n@@ -814,1 +864,1 @@\n-    if (likely (hb_serialize_cff_fdselect (c, num_glyphs, *acc.fdSelect, acc.fdCount,\n+    if (likely (hb_serialize_cff_fdselect (c, plan.num_glyphs, *fdSelect, fdCount,\n@@ -828,3 +878,1 @@\n-    Charset *dest = c->start_embed<Charset> ();\n-    if (unlikely (!dest)) return false;\n-    c->push ();\n+    auto *dest = c->push<Charset> ();\n@@ -846,3 +894,1 @@\n-    Encoding *dest = c->start_embed<Encoding> ();\n-    if (unlikely (!dest)) return false;\n-    c->push ();\n+    auto *dest = c->push<Encoding> ();\n@@ -864,3 +910,1 @@\n-    c->push ();\n-    CFF1Subrs *dest = c->start_embed <CFF1Subrs> ();\n-    if (unlikely (!dest)) return false;\n+    auto *dest = c->push <CFF1Subrs> ();\n@@ -878,4 +922,3 @@\n-    CFF1StringIndex *dest = c->start_embed<CFF1StringIndex> ();\n-    if (unlikely (!dest)) return false;\n-    c->push ();\n-    if (likely (dest->serialize (c, *acc.stringIndex, plan.sidmap)))\n+    auto *dest = c->push<CFF1StringIndex> ();\n+    if (likely (!plan.sidmap.in_error () &&\n+                dest->serialize (c, *stringIndex, plan.sidmap.vector)))\n@@ -901,1 +944,1 @@\n-  if (unlikely (!(*acc.nameIndex).copy (c))) return false;\n+  if (unlikely (!c->embed (*nameIndex))) return false;\n@@ -906,3 +949,1 @@\n-    TopDict *top = c->start_embed<TopDict> ();\n-    if (!top) return false;\n-    c->push ();\n+    auto *top = c->push<TopDict> ();\n@@ -923,3 +964,2 @@\n-    CFF1Index *dest = c->start_embed<CFF1Index> ();\n-    if (!dest) return false;\n-    return dest->serialize_header (c, hb_iter (hb_array_t<unsigned> (&top_size, 1)));\n+    auto *dest = c->start_embed<CFF1Index> ();\n+    return dest->serialize_header (c, hb_iter (&top_size, 1), top_size);\n@@ -929,3 +969,2 @@\n-static bool\n-_hb_subset_cff1 (const OT::cff1::accelerator_subset_t  &acc,\n-                hb_subset_context_t     *c)\n+bool\n+OT::cff1::accelerator_subset_t::subset (hb_subset_context_t *c) const\n@@ -933,1 +972,1 @@\n-  cff_subset_plan cff_plan;\n+  cff1_subset_plan cff_plan;\n@@ -935,1 +974,1 @@\n-  if (unlikely (!cff_plan.create (acc, c->plan)))\n+  if (unlikely (!cff_plan.create (*this, c->plan)))\n@@ -941,12 +980,1 @@\n-  return _serialize_cff1 (c->serializer, cff_plan, acc, c->plan->num_output_glyphs ());\n-}\n-\n-bool\n-hb_subset_cff1 (hb_subset_context_t *c)\n-{\n-  OT::cff1::accelerator_subset_t acc;\n-  acc.init (c->plan->source);\n-  bool result = likely (acc.is_valid ()) && _hb_subset_cff1 (acc, c);\n-  acc.fini ();\n-\n-  return result;\n+  return serialize (c->serializer, cff_plan);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-subset-cff1.cc","additions":162,"deletions":134,"binary":false,"changes":296,"status":"modified"},{"patch":"@@ -1,37 +0,0 @@\n-\/*\n- * Copyright © 2018 Adobe Inc.\n- *\n- *  This is part of HarfBuzz, a text shaping library.\n- *\n- * Permission is hereby granted, without written agreement and without\n- * license or royalty fees, to use, copy, modify, and distribute this\n- * software and its documentation for any purpose, provided that the\n- * above copyright notice and the following two paragraphs appear in\n- * all copies of this software.\n- *\n- * IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR\n- * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES\n- * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN\n- * IF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\n- * DAMAGE.\n- *\n- * THE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,\n- * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS\n- * ON AN \"AS IS\" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO\n- * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n- *\n- * Adobe Author(s): Michiharu Ariza\n- *\/\n-\n-#ifndef HB_SUBSET_CFF1_HH\n-#define HB_SUBSET_CFF1_HH\n-\n-#include \"hb.hh\"\n-\n-#include \"hb-subset-plan.hh\"\n-\n-HB_INTERNAL bool\n-hb_subset_cff1 (hb_subset_context_t *c);\n-\n-#endif \/* HB_SUBSET_CFF1_HH *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-subset-cff1.hh","additions":0,"deletions":37,"binary":false,"changes":37,"status":"deleted"},{"patch":"@@ -34,1 +34,0 @@\n-#include \"hb-subset-cff2.hh\"\n@@ -425,0 +424,1 @@\n+namespace OT {\n@@ -430,0 +430,5 @@\n+    \/* make sure notdef is first *\/\n+    hb_codepoint_t old_glyph;\n+    if (!plan->old_gid_for_new_gid (0, &old_glyph) || (old_glyph != 0)) return false;\n+\n+    num_glyphs = plan->num_output_glyphs ();\n@@ -492,0 +497,1 @@\n+  unsigned int    num_glyphs;\n@@ -508,0 +514,1 @@\n+} \/\/ namespace OT\n@@ -509,5 +516,4 @@\n-static bool _serialize_cff2 (hb_serialize_context_t *c,\n-                             cff2_subset_plan &plan,\n-                             const OT::cff2::accelerator_subset_t  &acc,\n-                             unsigned int num_glyphs,\n-                             hb_array_t<int> normalized_coords)\n+bool\n+OT::cff2::accelerator_subset_t::serialize (hb_serialize_context_t *c,\n+                                           struct cff2_subset_plan &plan,\n+                                           hb_array_t<int> normalized_coords) const\n@@ -519,1 +525,1 @@\n-  for (int i = (int)acc.privateDicts.length; --i >= 0 ;)\n+  for (int i = (int)privateDicts.length; --i >= 0 ;)\n@@ -527,3 +533,1 @@\n-        CFF2Subrs *dest = c->start_embed <CFF2Subrs> ();\n-        if (unlikely (!dest)) return false;\n-        c->push ();\n+        auto *dest = c->push <CFF2Subrs> ();\n@@ -538,3 +542,1 @@\n-      PrivateDict *pd = c->start_embed<PrivateDict> ();\n-      if (unlikely (!pd)) return false;\n-      c->push ();\n+      auto *pd = c->push<PrivateDict> ();\n@@ -542,2 +544,2 @@\n-                                                 acc.varStore, normalized_coords);\n-      if (likely (pd->serialize (c, acc.privateDicts[i], privSzr, subrs_link)))\n+                                                 varStore, normalized_coords);\n+      if (likely (pd->serialize (c, privateDicts[i], privSzr, subrs_link)))\n@@ -561,1 +563,2 @@\n-    unsigned total_size = CFF2CharStrings::total_size (plan.subset_charstrings);\n+    unsigned data_size = 0;\n+    unsigned total_size = CFF2CharStrings::total_size (plan.subset_charstrings, &data_size);\n@@ -565,4 +568,2 @@\n-    CFF2CharStrings  *cs = c->start_embed<CFF2CharStrings> ();\n-    if (unlikely (!cs)) return false;\n-\n-    if (likely (cs->serialize (c, plan.subset_charstrings)))\n+    auto *cs = c->start_embed<CFF2CharStrings> ();\n+    if (likely (cs->serialize (c, plan.subset_charstrings, &data_size)))\n@@ -578,1 +579,1 @@\n-  if (acc.fdSelect != &Null (CFF2FDSelect))\n+  if (fdSelect != &Null (CFF2FDSelect))\n@@ -581,1 +582,1 @@\n-    if (likely (hb_serialize_cff_fdselect (c, num_glyphs, *(const FDSelect *)acc.fdSelect,\n+    if (likely (hb_serialize_cff_fdselect (c, plan.num_glyphs, *(const FDSelect *)fdSelect,\n@@ -595,3 +596,1 @@\n-    c->push ();\n-    CFF2FDArray *fda = c->start_embed<CFF2FDArray> ();\n-    if (unlikely (!fda)) return false;\n+    auto *fda = c->push<CFF2FDArray> ();\n@@ -600,1 +599,1 @@\n-    + hb_zip (+ hb_iter (acc.fontDicts)\n+    + hb_zip (+ hb_iter (fontDicts)\n@@ -602,1 +601,1 @@\n-                { return plan.fdmap.has (&_ - &acc.fontDicts[0]); }),\n+                { return plan.fdmap.has (&_ - &fontDicts[0]); }),\n@@ -605,1 +604,5 @@\n-    if (unlikely (!fda->serialize (c, it, fontSzr))) return false;\n+    if (unlikely (!fda->serialize (c, it, fontSzr)))\n+    {\n+      c->pop_discard ();\n+      return false;\n+    }\n@@ -610,1 +613,1 @@\n-  if (acc.varStore != &Null (CFF2VariationStore) &&\n+  if (varStore != &Null (CFF2VariationStore) &&\n@@ -613,3 +616,6 @@\n-    c->push ();\n-    CFF2VariationStore *dest = c->start_embed<CFF2VariationStore> ();\n-    if (unlikely (!dest || !dest->serialize (c, acc.varStore))) return false;\n+    auto *dest = c->push<CFF2VariationStore> ();\n+    if (unlikely (!dest->serialize (c, varStore)))\n+    {\n+      c->pop_discard ();\n+      return false;\n+    }\n@@ -631,1 +637,1 @@\n-    if (unlikely (!dict.serialize (c, acc.topDict, topSzr, plan.info))) return false;\n+    if (unlikely (!dict.serialize (c, topDict, topSzr, plan.info))) return false;\n@@ -637,2 +643,1 @@\n-    CFF2Subrs *dest = c->start_embed <CFF2Subrs> ();\n-    if (unlikely (!dest)) return false;\n+    auto *dest = c->start_embed <CFF2Subrs> ();\n@@ -643,3 +648,2 @@\n-static bool\n-_hb_subset_cff2 (const OT::cff2::accelerator_subset_t  &acc,\n-                 hb_subset_context_t    *c)\n+bool\n+OT::cff2::accelerator_subset_t::subset (hb_subset_context_t *c) const\n@@ -649,10 +653,3 @@\n-  if (unlikely (!cff2_plan.create (acc, c->plan))) return false;\n-  return _serialize_cff2 (c->serializer, cff2_plan, acc, c->plan->num_output_glyphs (),\n-                          c->plan->normalized_coords.as_array ());\n-}\n-\n-bool\n-hb_subset_cff2 (hb_subset_context_t *c)\n-{\n-  OT::cff2::accelerator_subset_t acc (c->plan->source);\n-  return acc.is_valid () && _hb_subset_cff2 (acc, c);\n+  if (unlikely (!cff2_plan.create (*this, c->plan))) return false;\n+  return serialize (c->serializer, cff2_plan,\n+                    c->plan->normalized_coords.as_array ());\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-subset-cff2.cc","additions":45,"deletions":48,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -1,37 +0,0 @@\n-\/*\n- * Copyright © 2018 Adobe Inc.\n- *\n- *  This is part of HarfBuzz, a text shaping library.\n- *\n- * Permission is hereby granted, without written agreement and without\n- * license or royalty fees, to use, copy, modify, and distribute this\n- * software and its documentation for any purpose, provided that the\n- * above copyright notice and the following two paragraphs appear in\n- * all copies of this software.\n- *\n- * IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR\n- * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES\n- * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN\n- * IF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\n- * DAMAGE.\n- *\n- * THE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,\n- * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS\n- * ON AN \"AS IS\" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO\n- * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n- *\n- * Adobe Author(s): Michiharu Ariza\n- *\/\n-\n-#ifndef HB_SUBSET_CFF2_HH\n-#define HB_SUBSET_CFF2_HH\n-\n-#include \"hb.hh\"\n-\n-#include \"hb-subset-plan.hh\"\n-\n-HB_INTERNAL bool\n-hb_subset_cff2 (hb_subset_context_t *c);\n-\n-#endif \/* HB_SUBSET_CFF2_HH *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-subset-cff2.hh","additions":0,"deletions":37,"binary":false,"changes":37,"status":"deleted"},{"patch":"@@ -72,1 +72,0 @@\n-    HB_TAG ('a', 'v', 'a', 'r'),\n@@ -78,2 +77,0 @@\n-    HB_TAG ('M', 'V', 'A', 'R'),\n-    HB_TAG ('c', 'v', 'a', 'r'),\n@@ -441,1 +438,2 @@\n-  return input->axes_location.set (axis_tag, axis_info.default_value);\n+  float default_val = axis_info.default_value;\n+  return input->axes_location.set (axis_tag, Triple (default_val, default_val, default_val));\n@@ -471,1 +469,1 @@\n-  return input->axes_location.set (axis_tag, val);\n+  return input->axes_location.set (axis_tag, Triple (val, val, val));\n@@ -473,0 +471,51 @@\n+\n+#ifdef HB_EXPERIMENTAL_API\n+\/**\n+ * hb_subset_input_set_axis_range: (skip)\n+ * @input: a #hb_subset_input_t object.\n+ * @face: a #hb_face_t object.\n+ * @axis_tag: Tag of the axis\n+ * @axis_min_value: Minimum value of the axis variation range to set\n+ * @axis_max_value: Maximum value of the axis variation range to set\n+ * @axis_def_value: Default value of the axis variation range to set, in case of\n+ * null, it'll be determined automatically\n+ *\n+ * Restricting the range of variation on an axis in the given subset input object.\n+ * New min\/default\/max values will be clamped if they're not within the fvar axis range.\n+ * If the new default value is null:\n+ * If the fvar axis default value is within the new range, then new default\n+ * value is the same as original default value.\n+ * If the fvar axis default value is not within the new range, the new default\n+ * value will be changed to the new min or max value, whichever is closer to the fvar\n+ * axis default.\n+ *\n+ * Note: input min value can not be bigger than input max value. If the input\n+ * default value is not within the new min\/max range, it'll be clamped.\n+ * Note: currently it supports gvar and cvar tables only.\n+ *\n+ * Return value: `true` if success, `false` otherwise\n+ *\n+ * XSince: EXPERIMENTAL\n+ **\/\n+HB_EXTERN hb_bool_t\n+hb_subset_input_set_axis_range (hb_subset_input_t  *input,\n+                                hb_face_t          *face,\n+                                hb_tag_t            axis_tag,\n+                                float               axis_min_value,\n+                                float               axis_max_value,\n+                                float              *axis_def_value \/* IN, maybe NULL *\/)\n+{\n+  if (axis_min_value > axis_max_value)\n+    return false;\n+\n+  hb_ot_var_axis_info_t axis_info;\n+  if (!hb_ot_var_find_axis_info (face, axis_tag, &axis_info))\n+    return false;\n+\n+  float new_min_val = hb_clamp(axis_min_value, axis_info.min_value, axis_info.max_value);\n+  float new_max_val = hb_clamp(axis_max_value, axis_info.min_value, axis_info.max_value);\n+  float new_default_val = axis_def_value ? *axis_def_value : axis_info.default_value;\n+  new_default_val = hb_clamp(new_default_val, new_min_val, new_max_val);\n+  return input->axes_location.set (axis_tag, Triple (new_min_val, new_default_val, new_max_val));\n+}\n+#endif\n@@ -523,0 +572,31 @@\n+\/**\n+ * hb_subset_input_old_to_new_glyph_mapping:\n+ * @input: a #hb_subset_input_t object.\n+ *\n+ * Returns a map which can be used to provide an explicit mapping from old to new glyph\n+ * id's in the produced subset. The caller should populate the map as desired.\n+ * If this map is left empty then glyph ids will be automatically mapped to new\n+ * values by the subsetter. If populated, the mapping must be unique. That\n+ * is no two original glyph ids can be mapped to the same new id.\n+ * Additionally, if a mapping is provided then the retain gids option cannot\n+ * be enabled.\n+ *\n+ * Any glyphs that are retained in the subset which are not specified\n+ * in this mapping will be assigned glyph ids after the highest glyph\n+ * id in the mapping.\n+ *\n+ * Note: this will accept and apply non-monotonic mappings, however this\n+ * may result in unsorted Coverage tables. Such fonts may not work for all\n+ * use cases (for example ots will reject unsorted coverage tables). So it's\n+ * recommended, if possible, to supply a monotonic mapping.\n+ *\n+ * Return value: (transfer none): pointer to the #hb_map_t of the custom glyphs ID map.\n+ *\n+ * Since: 7.3.0\n+ **\/\n+HB_EXTERN hb_map_t*\n+hb_subset_input_old_to_new_glyph_mapping (hb_subset_input_t *input)\n+{\n+  return &input->glyph_map;\n+}\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-subset-input.cc","additions":85,"deletions":5,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#include \"hb-subset-instancer-solver.hh\"\n@@ -121,1 +122,2 @@\n-  hb_hashmap_t<hb_tag_t, float> axes_location;\n+  hb_hashmap_t<hb_tag_t, Triple> axes_location;\n+  hb_map_t glyph_map;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-subset-input.hh","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,429 @@\n+\/*\n+ * Copyright © 2023  Behdad Esfahbod\n+ *\n+ *  This is part of HarfBuzz, a text shaping library.\n+ *\n+ * Permission is hereby granted, without written agreement and without\n+ * license or royalty fees, to use, copy, modify, and distribute this\n+ * software and its documentation for any purpose, provided that the\n+ * above copyright notice and the following two paragraphs appear in\n+ * all copies of this software.\n+ *\n+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR\n+ * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES\n+ * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN\n+ * IF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\n+ * DAMAGE.\n+ *\n+ * THE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,\n+ * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS\n+ * ON AN \"AS IS\" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO\n+ * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n+ *\/\n+\n+#include \"hb-subset-instancer-solver.hh\"\n+\n+\/* This file is a straight port of the following:\n+ *\n+ * https:\/\/github.com\/fonttools\/fonttools\/blob\/f73220816264fc383b8a75f2146e8d69e455d398\/Lib\/fontTools\/varLib\/instancer\/solver.py\n+ *\n+ * Where that file returns None for a triple, we return Triple{}.\n+ * This should be safe.\n+ *\/\n+\n+constexpr static float EPSILON = 1.f \/ (1 << 14);\n+constexpr static float MAX_F2DOT14 = float (0x7FFF) \/ (1 << 14);\n+\n+static inline Triple _reverse_negate(const Triple &v)\n+{ return {-v.maximum, -v.middle, -v.minimum}; }\n+\n+\n+static inline float supportScalar (float coord, const Triple &tent)\n+{\n+  \/* Copied from VarRegionAxis::evaluate() *\/\n+  float start = tent.minimum, peak = tent.middle, end = tent.maximum;\n+\n+  if (unlikely (start > peak || peak > end))\n+    return 1.;\n+  if (unlikely (start < 0 && end > 0 && peak != 0))\n+    return 1.;\n+\n+  if (peak == 0 || coord == peak)\n+    return 1.;\n+\n+  if (coord <= start || end <= coord)\n+    return 0.;\n+\n+  \/* Interpolate *\/\n+  if (coord < peak)\n+    return (coord - start) \/ (peak - start);\n+  else\n+    return  (end - coord) \/ (end - peak);\n+}\n+\n+static inline result_t\n+_solve (Triple tent, Triple axisLimit, bool negative = false)\n+{\n+  float axisMin = axisLimit.minimum;\n+  float axisDef = axisLimit.middle;\n+  float axisMax = axisLimit.maximum;\n+  float lower = tent.minimum;\n+  float peak  = tent.middle;\n+  float upper = tent.maximum;\n+\n+  \/\/ Mirror the problem such that axisDef <= peak\n+  if (axisDef > peak)\n+  {\n+    result_t vec = _solve (_reverse_negate (tent),\n+                           _reverse_negate (axisLimit),\n+                           !negative);\n+\n+    for (auto &p : vec)\n+      p = hb_pair (p.first, _reverse_negate (p.second));\n+\n+    return vec;\n+  }\n+  \/\/ axisDef <= peak\n+\n+  \/* case 1: The whole deltaset falls outside the new limit; we can drop it\n+   *\n+   *                                          peak\n+   *  1.........................................o..........\n+   *                                           \/ \\\n+   *                                          \/   \\\n+   *                                         \/     \\\n+   *                                        \/       \\\n+   *  0---|-----------|----------|-------- o         o----1\n+   *    axisMin     axisDef    axisMax   lower     upper\n+   *\/\n+  if (axisMax <= lower && axisMax < peak)\n+      return result_t{};  \/\/ No overlap\n+\n+  \/* case 2: Only the peak and outermost bound fall outside the new limit;\n+   * we keep the deltaset, update peak and outermost bound and scale deltas\n+   * by the scalar value for the restricted axis at the new limit, and solve\n+   * recursively.\n+   *\n+   *                                  |peak\n+   *  1...............................|.o..........\n+   *                                  |\/ \\\n+   *                                  \/   \\\n+   *                                 \/|    \\\n+   *                                \/ |     \\\n+   *  0--------------------------- o  |      o----1\n+   *                           lower  |      upper\n+   *                                  |\n+   *                                axisMax\n+   *\n+   * Convert to:\n+   *\n+   *  1............................................\n+   *                                  |\n+   *                                  o peak\n+   *                                 \/|\n+   *                                \/x|\n+   *  0--------------------------- o  o upper ----1\n+   *                           lower  |\n+   *                                  |\n+   *                                axisMax\n+   *\/\n+  if (axisMax < peak)\n+  {\n+    float mult = supportScalar (axisMax, tent);\n+    tent = Triple{lower, axisMax, axisMax};\n+\n+    result_t vec = _solve (tent, axisLimit);\n+\n+    for (auto &p : vec)\n+      p = hb_pair (p.first * mult, p.second);\n+\n+    return vec;\n+  }\n+\n+  \/\/ lower <= axisDef <= peak <= axisMax\n+\n+  float gain = supportScalar (axisDef, tent);\n+  result_t out {hb_pair (gain, Triple{})};\n+\n+  \/\/ First, the positive side\n+\n+  \/\/ outGain is the scalar of axisMax at the tent.\n+  float outGain = supportScalar (axisMax, tent);\n+\n+  \/* Case 3a: Gain is more than outGain. The tent down-slope crosses\n+   * the axis into negative. We have to split it into multiples.\n+   *\n+   *                      | peak  |\n+   *  1...................|.o.....|..............\n+   *                      |\/x\\_   |\n+   *  gain................+....+_.|..............\n+   *                     \/|    |y\\|\n+   *  ..................\/.|....|..+_......outGain\n+   *                   \/  |    |  | \\\n+   *  0---|-----------o   |    |  |  o----------1\n+   *    axisMin    lower  |    |  |   upper\n+   *                      |    |  |\n+   *                axisDef    |  axisMax\n+   *                           |\n+   *                      crossing\n+   *\/\n+  if (gain > outGain)\n+  {\n+    \/\/ Crossing point on the axis.\n+    float crossing = peak + (1 - gain) * (upper - peak);\n+\n+    Triple loc{axisDef, peak, crossing};\n+    float scalar = 1.f;\n+\n+    \/\/ The part before the crossing point.\n+    out.push (hb_pair (scalar - gain, loc));\n+\n+    \/* The part after the crossing point may use one or two tents,\n+     * depending on whether upper is before axisMax or not, in one\n+     * case we need to keep it down to eternity.\n+     *\n+     * Case 3a1, similar to case 1neg; just one tent needed, as in\n+     * the drawing above.\n+     *\/\n+    if (upper >= axisMax)\n+    {\n+      Triple loc {crossing, axisMax, axisMax};\n+      float scalar = outGain;\n+\n+      out.push (hb_pair (scalar - gain, loc));\n+    }\n+\n+    \/* Case 3a2: Similar to case 2neg; two tents needed, to keep\n+     * down to eternity.\n+     *\n+     *                      | peak             |\n+     *  1...................|.o................|...\n+     *                      |\/ \\_              |\n+     *  gain................+....+_............|...\n+     *                     \/|    | \\xxxxxxxxxxy|\n+     *                    \/ |    |  \\_xxxxxyyyy|\n+     *                   \/  |    |    \\xxyyyyyy|\n+     *  0---|-----------o   |    |     o-------|--1\n+     *    axisMin    lower  |    |      upper  |\n+     *                      |    |             |\n+     *                axisDef    |             axisMax\n+     *                           |\n+     *                      crossing\n+     *\/\n+    else\n+    {\n+      \/\/ A tent's peak cannot fall on axis default. Nudge it.\n+      if (upper == axisDef)\n+        upper += EPSILON;\n+\n+      \/\/ Downslope.\n+      Triple loc1 {crossing, upper, axisMax};\n+      float scalar1 = 0.f;\n+\n+      \/\/ Eternity justify.\n+      Triple loc2 {upper, axisMax, axisMax};\n+      float scalar2 = 0.f;\n+\n+      out.push (hb_pair (scalar1 - gain, loc1));\n+      out.push (hb_pair (scalar2 - gain, loc2));\n+    }\n+  }\n+\n+  else\n+  {\n+    \/\/ Special-case if peak is at axisMax.\n+    if (axisMax == peak)\n+        upper = peak;\n+\n+    \/* Case 3:\n+     * we keep deltas as is and only scale the axis upper to achieve\n+     * the desired new tent if feasible.\n+     *\n+     *                        peak\n+     *  1.....................o....................\n+     *                       \/ \\_|\n+     *  ....................\/....+_.........outGain\n+     *                     \/     | \\\n+     *  gain..............+......|..+_.............\n+     *                   \/|      |  | \\\n+     *  0---|-----------o |      |  |  o----------1\n+     *    axisMin    lower|      |  |   upper\n+     *                    |      |  newUpper\n+     *              axisDef      axisMax\n+     *\/\n+    float newUpper = peak + (1 - gain) * (upper - peak);\n+    assert (axisMax <= newUpper);  \/\/ Because outGain >= gain\n+    if (newUpper <= axisDef + (axisMax - axisDef) * 2)\n+    {\n+      upper = newUpper;\n+      if (!negative && axisDef + (axisMax - axisDef) * MAX_F2DOT14 < upper)\n+      {\n+        \/\/ we clamp +2.0 to the max F2Dot14 (~1.99994) for convenience\n+        upper = axisDef + (axisMax - axisDef) * MAX_F2DOT14;\n+        assert (peak < upper);\n+      }\n+\n+      Triple loc {hb_max (axisDef, lower), peak, upper};\n+      float scalar = 1.f;\n+\n+      out.push (hb_pair (scalar - gain, loc));\n+    }\n+\n+    \/* Case 4: New limit doesn't fit; we need to chop into two tents,\n+     * because the shape of a triangle with part of one side cut off\n+     * cannot be represented as a triangle itself.\n+     *\n+     *            |   peak |\n+     *  1.........|......o.|....................\n+     *  ..........|.....\/x\\|.............outGain\n+     *            |    |xxy|\\_\n+     *            |   \/xxxy|  \\_\n+     *            |  |xxxxy|    \\_\n+     *            |  \/xxxxy|      \\_\n+     *  0---|-----|-oxxxxxx|        o----------1\n+     *    axisMin | lower  |        upper\n+     *            |        |\n+     *          axisDef  axisMax\n+     *\/\n+    else\n+    {\n+      Triple loc1 {hb_max (axisDef, lower), peak, axisMax};\n+      float scalar1 = 1.f;\n+\n+      Triple loc2 {peak, axisMax, axisMax};\n+      float scalar2 = outGain;\n+\n+      out.push (hb_pair (scalar1 - gain, loc1));\n+      \/\/ Don't add a dirac delta!\n+      if (peak < axisMax)\n+        out.push (hb_pair (scalar2 - gain, loc2));\n+    }\n+  }\n+\n+  \/* Now, the negative side\n+   *\n+   * Case 1neg: Lower extends beyond axisMin: we chop. Simple.\n+   *\n+   *                     |   |peak\n+   *  1..................|...|.o.................\n+   *                     |   |\/ \\\n+   *  gain...............|...+...\\...............\n+   *                     |x_\/|    \\\n+   *                     |\/  |     \\\n+   *                   _\/|   |      \\\n+   *  0---------------o  |   |       o----------1\n+   *              lower  |   |       upper\n+   *                     |   |\n+   *               axisMin   axisDef\n+   *\/\n+  if (lower <= axisMin)\n+  {\n+    Triple loc {axisMin, axisMin, axisDef};\n+    float scalar = supportScalar (axisMin, tent);\n+\n+    out.push (hb_pair (scalar - gain, loc));\n+  }\n+\n+  \/* Case 2neg: Lower is betwen axisMin and axisDef: we add two\n+   * tents to keep it down all the way to eternity.\n+   *\n+   *      |               |peak\n+   *  1...|...............|.o.................\n+   *      |               |\/ \\\n+   *  gain|...............+...\\...............\n+   *      |yxxxxxxxxxxxxx\/|    \\\n+   *      |yyyyyyxxxxxxx\/ |     \\\n+   *      |yyyyyyyyyyyx\/  |      \\\n+   *  0---|-----------o   |       o----------1\n+   *    axisMin    lower  |       upper\n+   *                      |\n+   *                    axisDef\n+   *\/\n+  else\n+  {\n+    \/\/ A tent's peak cannot fall on axis default. Nudge it.\n+    if (lower == axisDef)\n+      lower -= EPSILON;\n+\n+    \/\/ Downslope.\n+    Triple loc1 {axisMin, lower, axisDef};\n+    float scalar1 = 0.f;\n+\n+    \/\/ Eternity justify.\n+    Triple loc2 {axisMin, axisMin, lower};\n+    float scalar2 = 0.f;\n+\n+    out.push (hb_pair (scalar1 - gain, loc1));\n+    out.push (hb_pair (scalar2 - gain, loc2));\n+  }\n+\n+  return out;\n+}\n+\n+static inline TripleDistances _reverse_triple_distances (const TripleDistances &v)\n+{ return TripleDistances (v.positive, v.negative); }\n+\n+float renormalizeValue (float v, const Triple &triple,\n+                        const TripleDistances &triple_distances, bool extrapolate)\n+{\n+  float lower = triple.minimum, def = triple.middle, upper = triple.maximum;\n+  assert (lower <= def && def <= upper);\n+\n+  if (!extrapolate)\n+      v = hb_max (hb_min (v, upper), lower);\n+\n+  if (v == def)\n+    return 0.f;\n+\n+  if (def < 0.f)\n+    return -renormalizeValue (-v, _reverse_negate (triple),\n+                              _reverse_triple_distances (triple_distances), extrapolate);\n+\n+  \/* default >= 0 and v != default *\/\n+  if (v > def)\n+    return (v - def) \/ (upper - def);\n+\n+  \/* v < def *\/\n+  if (lower >= 0.f)\n+    return (v - def) \/ (def - lower);\n+\n+  \/* lower < 0 and v < default *\/\n+  float total_distance = triple_distances.negative * (-lower) + triple_distances.positive * def;\n+\n+  float v_distance;\n+  if (v >= 0.f)\n+    v_distance = (def - v) * triple_distances.positive;\n+  else\n+    v_distance = (-v) * triple_distances.negative + triple_distances.positive * def;\n+\n+  return (-v_distance) \/total_distance;\n+}\n+\n+result_t\n+rebase_tent (Triple tent, Triple axisLimit, TripleDistances axis_triple_distances)\n+{\n+  assert (-1.f <= axisLimit.minimum && axisLimit.minimum <= axisLimit.middle && axisLimit.middle <= axisLimit.maximum && axisLimit.maximum <= +1.f);\n+  assert (-2.f <= tent.minimum && tent.minimum <= tent.middle && tent.middle <= tent.maximum && tent.maximum <= +2.f);\n+  assert (tent.middle != 0.f);\n+\n+  result_t sols = _solve (tent, axisLimit);\n+\n+  auto n = [&axisLimit, &axis_triple_distances] (float v) { return renormalizeValue (v, axisLimit, axis_triple_distances); };\n+\n+  result_t out;\n+  for (auto &p : sols)\n+  {\n+    if (!p.first) continue;\n+    if (p.second == Triple{})\n+    {\n+      out.push (p);\n+      continue;\n+    }\n+    Triple t = p.second;\n+    out.push (hb_pair (p.first,\n+                       Triple{n (t.minimum), n (t.middle), n (t.maximum)}));\n+  }\n+\n+  return out;\n+}\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-subset-instancer-solver.cc","additions":429,"deletions":0,"binary":false,"changes":429,"status":"added"},{"patch":"@@ -0,0 +1,112 @@\n+\/*\n+ * Copyright © 2023  Behdad Esfahbod\n+ *\n+ *  This is part of HarfBuzz, a text shaping library.\n+ *\n+ * Permission is hereby granted, without written agreement and without\n+ * license or royalty fees, to use, copy, modify, and distribute this\n+ * software and its documentation for any purpose, provided that the\n+ * above copyright notice and the following two paragraphs appear in\n+ * all copies of this software.\n+ *\n+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR\n+ * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES\n+ * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN\n+ * IF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\n+ * DAMAGE.\n+ *\n+ * THE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,\n+ * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS\n+ * ON AN \"AS IS\" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO\n+ * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n+ *\/\n+\n+#ifndef HB_SUBSET_INSTANCER_SOLVER_HH\n+#define HB_SUBSET_INSTANCER_SOLVER_HH\n+\n+#include \"hb.hh\"\n+\n+\/* pre-normalized distances *\/\n+struct TripleDistances\n+{\n+  TripleDistances (): negative (1.f), positive (1.f) {}\n+  TripleDistances (float neg_, float pos_): negative (neg_), positive (pos_) {}\n+  TripleDistances (float min, float default_, float max)\n+  {\n+    negative = default_ - min;\n+    positive = max - default_;\n+  }\n+\n+  float negative;\n+  float positive;\n+};\n+\n+struct Triple {\n+\n+  Triple () :\n+    minimum (0.f), middle (0.f), maximum (0.f) {}\n+\n+  Triple (float minimum_, float middle_, float maximum_) :\n+    minimum (minimum_), middle (middle_), maximum (maximum_) {}\n+\n+  bool operator == (const Triple &o) const\n+  {\n+    return minimum == o.minimum &&\n+           middle  == o.middle  &&\n+           maximum == o.maximum;\n+  }\n+\n+  bool operator != (const Triple o) const\n+  { return !(*this == o); }\n+\n+  bool is_point () const\n+  { return minimum == middle && middle == maximum; }\n+\n+  bool contains (float point) const\n+  { return minimum <= point && point <= maximum; }\n+\n+  \/* from hb_array_t hash ()*\/\n+  uint32_t hash () const\n+  {\n+    uint32_t current = \/*cbf29ce4*\/0x84222325;\n+    current = current ^ hb_hash (minimum);\n+    current = current * 16777619;\n+\n+    current = current ^ hb_hash (middle);\n+    current = current * 16777619;\n+\n+    current = current ^ hb_hash (maximum);\n+    current = current * 16777619;\n+    return current;\n+  }\n+\n+\n+  float minimum;\n+  float middle;\n+  float maximum;\n+};\n+\n+using result_item_t = hb_pair_t<float, Triple>;\n+using result_t = hb_vector_t<result_item_t>;\n+\n+\/* renormalize a normalized value v to the range of an axis,\n+ * considering the prenormalized distances as well as the new axis limits.\n+ * Ported from fonttools *\/\n+HB_INTERNAL float renormalizeValue (float v, const Triple &triple,\n+                                    const TripleDistances &triple_distances,\n+                                    bool extrapolate = true);\n+\/* Given a tuple (lower,peak,upper) \"tent\" and new axis limits\n+ * (axisMin,axisDefault,axisMax), solves how to represent the tent\n+ * under the new axis configuration.  All values are in normalized\n+ * -1,0,+1 coordinate system. Tent values can be outside this range.\n+ *\n+ * Return value: a list of tuples. Each tuple is of the form\n+ * (scalar,tent), where scalar is a multipler to multiply any\n+ * delta-sets by, and tent is a new tent for that output delta-set.\n+ * If tent value is Triple{}, that is a special deltaset that should\n+ * be always-enabled (called \"gain\").\n+ *\/\n+HB_INTERNAL result_t rebase_tent (Triple tent, Triple axisLimit, TripleDistances axis_triple_distances);\n+\n+#endif \/* HB_SUBSET_INSTANCER_SOLVER_HH *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-subset-instancer-solver.hh","additions":112,"deletions":0,"binary":false,"changes":112,"status":"added"},{"patch":"@@ -0,0 +1,137 @@\n+\/*\n+ * Copyright © 2018  Google, Inc.\n+ * Copyright © 2023  Behdad Esfahbod\n+ *\n+ *  This is part of HarfBuzz, a text shaping library.\n+ *\n+ * Permission is hereby granted, without written agreement and without\n+ * license or royalty fees, to use, copy, modify, and distribute this\n+ * software and its documentation for any purpose, provided that the\n+ * above copyright notice and the following two paragraphs appear in\n+ * all copies of this software.\n+ *\n+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR\n+ * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES\n+ * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN\n+ * IF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\n+ * DAMAGE.\n+ *\n+ * THE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,\n+ * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS\n+ * ON AN \"AS IS\" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO\n+ * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n+ *\n+ * Google Author(s): Garret Rieger, Roderick Sheeter\n+ *\/\n+\n+#ifndef HB_SUBSET_PLAN_MEMBER_LIST_HH\n+#define HB_SUBSET_PLAN_MEMBER_LIST_HH\n+#endif \/* HB_SUBSET_PLAN_MEMBER_LIST_HH *\/ \/* Dummy header guards *\/\n+\n+#define E(x, y) x, y\n+\n+\/\/ For each cp that we'd like to retain maps to the corresponding gid.\n+HB_SUBSET_PLAN_MEMBER (hb_set_t, unicodes)\n+HB_SUBSET_PLAN_MEMBER (hb_sorted_vector_t<hb_codepoint_pair_t>, unicode_to_new_gid_list)\n+\n+HB_SUBSET_PLAN_MEMBER (hb_sorted_vector_t<hb_codepoint_pair_t>, new_to_old_gid_list)\n+\n+\/\/ name_ids we would like to retain\n+HB_SUBSET_PLAN_MEMBER (hb_set_t, name_ids)\n+\n+\/\/ name_languages we would like to retain\n+HB_SUBSET_PLAN_MEMBER (hb_set_t, name_languages)\n+\n+\/\/layout features which will be preserved\n+HB_SUBSET_PLAN_MEMBER (hb_set_t, layout_features)\n+\n+\/\/ layout scripts which will be preserved.\n+HB_SUBSET_PLAN_MEMBER (hb_set_t, layout_scripts)\n+\n+\/\/glyph ids requested to retain\n+HB_SUBSET_PLAN_MEMBER (hb_set_t, glyphs_requested)\n+\n+\/\/ Tables which should not be processed, just pass them through.\n+HB_SUBSET_PLAN_MEMBER (hb_set_t, no_subset_tables)\n+\n+\/\/ Tables which should be dropped.\n+HB_SUBSET_PLAN_MEMBER (hb_set_t, drop_tables)\n+\n+\/\/ Old -> New glyph id mapping\n+HB_SUBSET_PLAN_MEMBER (hb_map_t, glyph_map_gsub)\n+\n+HB_SUBSET_PLAN_MEMBER (hb_set_t, _glyphset)\n+HB_SUBSET_PLAN_MEMBER (hb_set_t, _glyphset_gsub)\n+HB_SUBSET_PLAN_MEMBER (hb_set_t, _glyphset_mathed)\n+HB_SUBSET_PLAN_MEMBER (hb_set_t, _glyphset_colred)\n+\n+\/\/active lookups we'd like to retain\n+HB_SUBSET_PLAN_MEMBER (hb_map_t, gsub_lookups)\n+HB_SUBSET_PLAN_MEMBER (hb_map_t, gpos_lookups)\n+\n+\/\/active langsys we'd like to retain\n+HB_SUBSET_PLAN_MEMBER (hb_hashmap_t E(<unsigned, hb::unique_ptr<hb_set_t>>), gsub_langsys)\n+HB_SUBSET_PLAN_MEMBER (hb_hashmap_t E(<unsigned, hb::unique_ptr<hb_set_t>>), gpos_langsys)\n+\n+\/\/active features after removing redundant langsys and prune_features\n+HB_SUBSET_PLAN_MEMBER (hb_map_t, gsub_features)\n+HB_SUBSET_PLAN_MEMBER (hb_map_t, gpos_features)\n+\n+\/\/active feature variation records\/condition index with variations\n+HB_SUBSET_PLAN_MEMBER (hb_hashmap_t E(<unsigned, hb::shared_ptr<hb_set_t>>), gsub_feature_record_cond_idx_map)\n+HB_SUBSET_PLAN_MEMBER (hb_hashmap_t E(<unsigned, hb::shared_ptr<hb_set_t>>), gpos_feature_record_cond_idx_map)\n+\n+\/\/feature index-> address of substituation feature table mapping with\n+\/\/variations\n+HB_SUBSET_PLAN_MEMBER (hb_hashmap_t E(<unsigned, const OT::Feature*>), gsub_feature_substitutes_map)\n+HB_SUBSET_PLAN_MEMBER (hb_hashmap_t E(<unsigned, const OT::Feature*>), gpos_feature_substitutes_map)\n+\n+\/\/active layers\/palettes we'd like to retain\n+HB_SUBSET_PLAN_MEMBER (hb_map_t, colrv1_layers)\n+HB_SUBSET_PLAN_MEMBER (hb_map_t, colr_palettes)\n+\n+\/\/Old layout item variation index -> (New varidx, delta) mapping\n+HB_SUBSET_PLAN_MEMBER (mutable hb_hashmap_t E(<unsigned, hb_pair_t E(<unsigned, int>)>), layout_variation_idx_delta_map)\n+\n+\/\/gdef varstore retained varidx mapping\n+HB_SUBSET_PLAN_MEMBER (hb_vector_t<hb_inc_bimap_t>, gdef_varstore_inner_maps)\n+\n+HB_SUBSET_PLAN_MEMBER (hb_hashmap_t E(<hb_tag_t, hb::unique_ptr<hb_blob_t>>), sanitized_table_cache)\n+\n+\/\/normalized axes range map\n+HB_SUBSET_PLAN_MEMBER (hb_hashmap_t E(<hb_tag_t, Triple>), axes_location)\n+HB_SUBSET_PLAN_MEMBER (hb_vector_t<int>, normalized_coords)\n+\n+\/\/user specified axes range map\n+HB_SUBSET_PLAN_MEMBER (hb_hashmap_t E(<hb_tag_t, Triple>), user_axes_location)\n+\/\/axis->TripleDistances map (distances in the pre-normalized space)\n+HB_SUBSET_PLAN_MEMBER (hb_hashmap_t E(<hb_tag_t, TripleDistances>), axes_triple_distances)\n+\n+\/\/retained old axis index -> new axis index mapping in fvar axis array\n+HB_SUBSET_PLAN_MEMBER (hb_map_t, axes_index_map)\n+\n+\/\/axis_index->axis_tag mapping in fvar axis array\n+HB_SUBSET_PLAN_MEMBER (hb_map_t, axes_old_index_tag_map)\n+\/\/vector of retained axis tags in the order of axes given in the 'fvar' table\n+HB_SUBSET_PLAN_MEMBER (hb_vector_t<hb_tag_t>, axis_tags)\n+\n+\/\/hmtx metrics map: new gid->(advance, lsb)\n+HB_SUBSET_PLAN_MEMBER (mutable hb_hashmap_t E(<hb_codepoint_t, hb_pair_t E(<unsigned, int>)>), hmtx_map)\n+\/\/vmtx metrics map: new gid->(advance, lsb)\n+HB_SUBSET_PLAN_MEMBER (mutable hb_hashmap_t E(<hb_codepoint_t, hb_pair_t E(<unsigned, int>)>), vmtx_map)\n+\/\/boundsWidth map: new gid->boundsWidth, boundWidth=xMax - xMin\n+HB_SUBSET_PLAN_MEMBER (mutable hb_vector_t<unsigned>, bounds_width_vec)\n+\/\/boundsHeight map: new gid->boundsHeight, boundsHeight=yMax - yMin\n+HB_SUBSET_PLAN_MEMBER (mutable hb_vector_t<unsigned>, bounds_height_vec)\n+\n+\/\/map: new_gid -> contour points vector\n+HB_SUBSET_PLAN_MEMBER (mutable hb_hashmap_t E(<hb_codepoint_t, contour_point_vector_t>), new_gid_contour_points_map)\n+\n+#ifdef HB_EXPERIMENTAL_API\n+\/\/ name table overrides map: hb_ot_name_record_ids_t-> name string new value or\n+\/\/ None to indicate should remove\n+HB_SUBSET_PLAN_MEMBER (hb_hashmap_t E(<hb_ot_name_record_ids_t, hb_bytes_t>), name_table_overrides)\n+#endif\n+\n+#undef E\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-subset-plan-member-list.hh","additions":137,"deletions":0,"binary":false,"changes":137,"status":"added"},{"patch":"@@ -51,0 +51,14 @@\n+\n+hb_subset_accelerator_t::~hb_subset_accelerator_t ()\n+{\n+  if (cmap_cache && destroy_cmap_cache)\n+    destroy_cmap_cache ((void*) cmap_cache);\n+\n+#ifndef HB_NO_SUBSET_CFF\n+  cff1_accel.fini ();\n+  cff2_accel.fini ();\n+#endif\n+  hb_face_destroy (source);\n+}\n+\n+\n@@ -54,1 +68,1 @@\n-_add_cff_seac_components (const OT::cff1::accelerator_t &cff,\n+_add_cff_seac_components (const OT::cff1::accelerator_subset_t &cff,\n@@ -138,1 +152,2 @@\n-                                     hb_hashmap_t<unsigned, const OT::Feature*> *feature_substitutes_map \/* OUT *\/)\n+                                     hb_hashmap_t<unsigned, const OT::Feature*> *feature_substitutes_map, \/* OUT *\/\n+                                     bool& insert_catch_all_feature_variation_record)\n@@ -174,0 +189,1 @@\n+      insert_catch_all_feature_variation_record,\n@@ -175,1 +191,3 @@\n-      true,\n+      false,\n+      false,\n+      false,\n@@ -286,1 +304,2 @@\n-                                  hb_hashmap_t<unsigned, const OT::Feature*> *feature_substitutes_map)\n+                                  hb_hashmap_t<unsigned, const OT::Feature*> *feature_substitutes_map,\n+                                  bool& insert_catch_all_feature_variation_record)\n@@ -296,1 +315,2 @@\n-                              feature_substitutes_map);\n+                              feature_substitutes_map,\n+                              insert_catch_all_feature_variation_record);\n@@ -332,1 +352,1 @@\n-  inner_maps.resize (subtable_count);\n+  if (unlikely (!inner_maps.resize (subtable_count))) return;\n@@ -359,1 +379,1 @@\n-    var.value = _.second;\n+    var.value = _.second.middle;\n@@ -382,1 +402,0 @@\n-  const OT::VariationStore *var_store = nullptr;\n@@ -384,19 +403,0 @@\n-  hb_font_t *font = nullptr;\n-  float *store_cache = nullptr;\n-  bool collect_delta = plan->pinned_at_default ? false : true;\n-  if (collect_delta)\n-  {\n-    if (unlikely (!plan->check_success (font = _get_hb_font_with_variations (plan)))) {\n-      hb_font_destroy (font);\n-      gdef.destroy ();\n-      gpos.destroy ();\n-      return;\n-    }\n-\n-    if (gdef->has_var_store ())\n-    {\n-      var_store = &(gdef->get_var_store ());\n-      store_cache = var_store->create_cache ();\n-    }\n-  }\n-\n@@ -404,2 +404,0 @@\n-                                                &plan->layout_variation_idx_delta_map,\n-                                                font, var_store,\n@@ -407,2 +405,1 @@\n-                                                &plan->gpos_lookups,\n-                                                store_cache);\n+                                                &plan->gpos_lookups);\n@@ -414,4 +411,5 @@\n-  hb_font_destroy (font);\n-  var_store->destroy_cache (store_cache);\n-\n-  gdef->remap_layout_variation_indices (&varidx_set, &plan->layout_variation_idx_delta_map);\n+  gdef->remap_layout_variation_indices (&varidx_set,\n+                                        plan->normalized_coords,\n+                                        !plan->pinned_at_default,\n+                                        plan->all_axes_pinned,\n+                                        &plan->layout_variation_idx_delta_map);\n@@ -552,0 +550,2 @@\n+      plan->codepoint_to_glyph->alloc (unicodes->get_population () + glyphs->get_population ());\n+\n@@ -580,0 +580,1 @@\n+      plan->codepoint_to_glyph->alloc (cmap_unicodes->get_population ());\n@@ -592,1 +593,3 @@\n-    for (hb_codepoint_t gid : *glyphs)\n+    unsigned num_glyphs = plan->source->get_num_glyphs ();\n+    hb_codepoint_t first = HB_SET_VALUE_INVALID, last = HB_SET_VALUE_INVALID;\n+    for (; glyphs->next_range (&first, &last); )\n@@ -594,1 +597,1 @@\n-      if (gid >= plan->source->get_num_glyphs ())\n+      if (first >= num_glyphs)\n@@ -596,1 +599,3 @@\n-      plan->_glyphset_gsub.add (gid);\n+      if (last >= num_glyphs)\n+        last = num_glyphs - 1;\n+      plan->_glyphset_gsub.add_range (first, last);\n@@ -619,2 +624,0 @@\n-  if (unlikely (depth++ > HB_MAX_NESTING_LEVEL)) return operation_count;\n-  if (unlikely (--operation_count < 0)) return operation_count;\n@@ -626,1 +629,6 @@\n-  for (auto &item : glyf.glyph_for_gid (gid).get_composite_iterator ())\n+  if (unlikely (depth++ > HB_MAX_NESTING_LEVEL)) return operation_count;\n+  if (unlikely (--operation_count < 0)) return operation_count;\n+\n+  auto glyph = glyf.glyph_for_gid (gid);\n+\n+  for (auto &item : glyph.get_composite_iterator ())\n@@ -635,1 +643,1 @@\n-  for (auto &item : glyf.glyph_for_gid (gid).get_var_composite_iterator ())\n+  for (auto &item : glyph.get_var_composite_iterator ())\n@@ -658,1 +666,1 @@\n-    plan->source->table.fvar->collect_name_ids (&plan->user_axes_location, &plan->name_ids);\n+    plan->source->table.fvar->collect_name_ids (&plan->user_axes_location, &plan->axes_old_index_tag_map, &plan->name_ids);\n@@ -687,1 +695,5 @@\n-  OT::cff1::accelerator_t cff (plan->source);\n+  \/\/ Note: we cannot use inprogress_accelerator here, since it has not been\n+  \/\/ created yet. So in case of preprocessed-face (and otherwise), we do an\n+  \/\/ extra sanitize pass here, which is not ideal.\n+  OT::cff1::accelerator_subset_t stack_cff (plan->accelerator ? nullptr : plan->source);\n+  const OT::cff1::accelerator_subset_t *cff (plan->accelerator ? plan->accelerator->cff1_accel.get () : &stack_cff);\n@@ -704,1 +716,2 @@\n-        &plan->gsub_feature_substitutes_map);\n+        &plan->gsub_feature_substitutes_map,\n+        plan->gsub_insert_catch_all_feature_variation_rec);\n@@ -714,1 +727,2 @@\n-        &plan->gpos_feature_substitutes_map);\n+        &plan->gpos_feature_substitutes_map,\n+        plan->gpos_insert_catch_all_feature_variation_rec);\n@@ -747,1 +761,1 @@\n-    if (cff.is_valid ())\n+    if (cff->is_valid ())\n@@ -749,1 +763,1 @@\n-        if (_add_cff_seac_components (cff, gid, &plan->_glyphset))\n+        if (_add_cff_seac_components (*cff, gid, &plan->_glyphset))\n@@ -757,1 +771,0 @@\n-\n@@ -769,0 +782,1 @@\n+  out->alloc (glyph_set_gsub->get_population ());\n@@ -771,2 +785,1 @@\n-    return hb_pair_t<hb_codepoint_t, hb_codepoint_t> (gid,\n-                                                      glyph_map->get (gid));\n+    return hb_codepoint_pair_t (gid, glyph_map->get (gid));\n@@ -778,1 +791,1 @@\n-static void\n+static bool\n@@ -782,0 +795,1 @@\n+                                const hb_map_t  *requested_glyph_map,\n@@ -784,0 +798,1 @@\n+                                hb_sorted_vector_t<hb_codepoint_pair_t> *new_to_old_gid_list \/* OUT *\/,\n@@ -787,2 +802,3 @@\n-  reverse_glyph_map->resize (pop);\n-  glyph_map->resize (pop);\n+  reverse_glyph_map->alloc (pop);\n+  glyph_map->alloc (pop);\n+  new_to_old_gid_list->alloc (pop);\n@@ -790,1 +806,47 @@\n-  if (!retain_gids)\n+  if (*requested_glyph_map)\n+  {\n+    hb_set_t new_gids(requested_glyph_map->values());\n+    if (new_gids.get_population() != requested_glyph_map->get_population())\n+    {\n+      DEBUG_MSG (SUBSET, nullptr, \"The provided custom glyph mapping is not unique.\");\n+      return false;\n+    }\n+\n+    if (retain_gids)\n+    {\n+      DEBUG_MSG (SUBSET, nullptr,\n+        \"HB_SUBSET_FLAGS_RETAIN_GIDS cannot be set if \"\n+        \"a custom glyph mapping has been provided.\");\n+      return false;\n+    }\n+\n+    hb_codepoint_t max_glyph = 0;\n+    hb_set_t remaining;\n+    for (auto old_gid : all_gids_to_retain->iter ())\n+    {\n+      if (old_gid == 0) {\n+        new_to_old_gid_list->push (hb_pair<hb_codepoint_t, hb_codepoint_t> (0u, 0u));\n+        continue;\n+      }\n+\n+      hb_codepoint_t* new_gid;\n+      if (!requested_glyph_map->has (old_gid, &new_gid))\n+      {\n+        remaining.add(old_gid);\n+        continue;\n+      }\n+\n+      if (*new_gid > max_glyph)\n+        max_glyph = *new_gid;\n+      new_to_old_gid_list->push (hb_pair (*new_gid, old_gid));\n+    }\n+    new_to_old_gid_list->qsort ();\n+\n+    \/\/ Anything that wasn't mapped by the requested mapping should\n+    \/\/ be placed after the requested mapping.\n+    for (auto old_gid : remaining)\n+      new_to_old_gid_list->push (hb_pair (++max_glyph, old_gid));\n+\n+    *num_glyphs = max_glyph + 1;\n+  }\n+  else if (!retain_gids)\n@@ -793,1 +855,1 @@\n-    | hb_sink (reverse_glyph_map)\n+    | hb_sink (new_to_old_gid_list)\n@@ -795,1 +857,1 @@\n-    *num_glyphs = reverse_glyph_map->get_population ();\n+    *num_glyphs = new_to_old_gid_list->length;\n@@ -801,1 +863,1 @@\n-                return hb_pair_t<hb_codepoint_t, hb_codepoint_t> (_, _);\n+                return hb_codepoint_pair_t (_, _);\n@@ -803,1 +865,1 @@\n-    | hb_sink (reverse_glyph_map)\n+    | hb_sink (new_to_old_gid_list)\n@@ -812,2 +874,5 @@\n-  + reverse_glyph_map->iter ()\n-  | hb_map (&hb_pair_t<hb_codepoint_t, hb_codepoint_t>::reverse)\n+  + hb_iter (new_to_old_gid_list)\n+  | hb_sink (reverse_glyph_map)\n+  ;\n+  + hb_iter (new_to_old_gid_list)\n+  | hb_map (&hb_codepoint_pair_t::reverse)\n@@ -816,0 +881,2 @@\n+\n+  return true;\n@@ -844,1 +911,2 @@\n-    if (!plan->user_axes_location.has (axis_tag))\n+    if (!plan->user_axes_location.has (axis_tag) ||\n+        !plan->user_axes_location.get (axis_tag).is_point ())\n@@ -848,0 +916,1 @@\n+      plan->axis_tags.push (axis_tag);\n@@ -850,1 +919,3 @@\n-    else\n+\n+    Triple *axis_range;\n+    if (plan->user_axes_location.has (axis_tag, &axis_range))\n@@ -852,1 +923,6 @@\n-      int normalized_v = axis.normalize_axis_value (plan->user_axes_location.get (axis_tag));\n+      plan->axes_triple_distances.set (axis_tag, axis.get_triple_distances ());\n+\n+      int normalized_min = axis.normalize_axis_value (axis_range->minimum);\n+      int normalized_default = axis.normalize_axis_value (axis_range->middle);\n+      int normalized_max = axis.normalize_axis_value (axis_range->maximum);\n+\n@@ -855,1 +931,3 @@\n-        normalized_v = seg_maps->map (normalized_v);\n+        normalized_min = seg_maps->map (normalized_min);\n+        normalized_default = seg_maps->map (normalized_default);\n+        normalized_max = seg_maps->map (normalized_max);\n@@ -857,2 +935,5 @@\n-      plan->axes_location.set (axis_tag, normalized_v);\n-      if (normalized_v != 0)\n+      plan->axes_location.set (axis_tag, Triple (static_cast<float> (normalized_min \/ 16384.f),\n+                                                 static_cast<float> (normalized_default \/ 16384.f),\n+                                                 static_cast<float> (normalized_max \/ 16384.f)));\n+\n+      if (normalized_default != 0)\n@@ -861,1 +942,1 @@\n-      plan->normalized_coords[old_axis_idx] = normalized_v;\n+      plan->normalized_coords[old_axis_idx] = normalized_default;\n@@ -928,1 +1009,1 @@\n-      plan->bounds_width_map.set (new_gid, extents.width);\n+      plan->bounds_width_vec[new_gid] = extents.width;\n@@ -945,1 +1026,1 @@\n-      plan->bounds_height_map.set (new_gid, extents.height);\n+      plan->bounds_height_vec[new_gid] = extents.height;\n@@ -954,0 +1035,30 @@\n+\n+static bool\n+_get_instance_glyphs_contour_points (hb_subset_plan_t *plan)\n+{\n+  \/* contour_points vector only needed for updating gvar table (infer delta)\n+   * during partial instancing *\/\n+  if (plan->user_axes_location.is_empty () || plan->all_axes_pinned)\n+    return true;\n+\n+  OT::glyf_accelerator_t glyf (plan->source);\n+\n+  for (auto &_ : plan->new_to_old_gid_list)\n+  {\n+    hb_codepoint_t new_gid = _.first;\n+    contour_point_vector_t all_points;\n+    if (new_gid == 0 && !(plan->flags & HB_SUBSET_FLAGS_NOTDEF_OUTLINE))\n+    {\n+      if (unlikely (!plan->new_gid_contour_points_map.set (new_gid, all_points)))\n+        return false;\n+      continue;\n+    }\n+\n+    hb_codepoint_t old_gid = _.second;\n+    if (unlikely (!glyf.glyph_for_gid (old_gid).get_all_points_without_var (plan->source, all_points)))\n+      return false;\n+    if (unlikely (!plan->new_gid_contour_points_map.set (new_gid, all_points)))\n+      return false;\n+  }\n+  return true;\n+}\n@@ -978,0 +1089,2 @@\n+  gsub_insert_catch_all_feature_variation_rec = false;\n+  gpos_insert_catch_all_feature_variation_rec = false;\n@@ -1005,1 +1118,0 @@\n-\n@@ -1019,6 +1131,11 @@\n-  _create_old_gid_to_new_gid_map (face,\n-                                  input->flags & HB_SUBSET_FLAGS_RETAIN_GIDS,\n-                                  &_glyphset,\n-                                  glyph_map,\n-                                  reverse_glyph_map,\n-                                  &_num_output_glyphs);\n+  if (!check_success(_create_old_gid_to_new_gid_map(\n+          face,\n+          input->flags & HB_SUBSET_FLAGS_RETAIN_GIDS,\n+          &_glyphset,\n+          &input->glyph_map,\n+          glyph_map,\n+          reverse_glyph_map,\n+          &new_to_old_gid_list,\n+          &_num_output_glyphs))) {\n+    return;\n+  }\n@@ -1039,0 +1156,7 @@\n+  bounds_width_vec.resize (_num_output_glyphs, false);\n+  for (auto &v : bounds_width_vec)\n+    v = 0xFFFFFFFF;\n+  bounds_height_vec.resize (_num_output_glyphs, false);\n+  for (auto &v : bounds_height_vec)\n+    v = 0xFFFFFFFF;\n+\n@@ -1044,0 +1168,2 @@\n+  if (!check_success (_get_instance_glyphs_contour_points (this)))\n+      return;\n@@ -1048,10 +1174,0 @@\n-    hb_multimap_t gid_to_unicodes;\n-\n-    hb_map_t &unicode_to_gid = *codepoint_to_glyph;\n-\n-    for (auto unicode : unicodes)\n-    {\n-      auto gid = unicode_to_gid[unicode];\n-      gid_to_unicodes.add (gid, unicode);\n-    }\n-\n@@ -1059,2 +1175,2 @@\n-      hb_subset_accelerator_t::create (*codepoint_to_glyph,\n-                                       gid_to_unicodes,\n+      hb_subset_accelerator_t::create (source,\n+                                       *codepoint_to_glyph,\n@@ -1063,0 +1179,2 @@\n+\n+    check_success (inprogress_accelerator);\n@@ -1064,0 +1182,4 @@\n+\n+#define HB_SUBSET_PLAN_MEMBER(Type, Name) check_success (!Name.in_error ());\n+#include \"hb-subset-plan-member-list.hh\"\n+#undef HB_SUBSET_PLAN_MEMBER\n@@ -1066,0 +1188,23 @@\n+hb_subset_plan_t::~hb_subset_plan_t()\n+{\n+  hb_face_destroy (dest);\n+\n+  hb_map_destroy (codepoint_to_glyph);\n+  hb_map_destroy (glyph_map);\n+  hb_map_destroy (reverse_glyph_map);\n+#ifndef HB_NO_SUBSET_CFF\n+  cff1_accel.fini ();\n+  cff2_accel.fini ();\n+#endif\n+  hb_face_destroy (source);\n+\n+#ifdef HB_EXPERIMENTAL_API\n+  for (auto _ : name_table_overrides.iter_ref ())\n+    _.second.fini ();\n+#endif\n+\n+  if (inprogress_accelerator)\n+    hb_subset_accelerator_t::destroy ((void*) inprogress_accelerator);\n+}\n+\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-subset-plan.cc","additions":234,"deletions":89,"binary":false,"changes":323,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-struct hb_subset_plan_t\n+struct contour_point_t\n@@ -72,2 +72,2 @@\n-  HB_INTERNAL hb_subset_plan_t (hb_face_t *,\n-                                const hb_subset_input_t *input);\n+  void init (float x_ = 0.f, float y_ = 0.f, bool is_end_point_ = false)\n+  { flag = 0; x = x_; y = y_; is_end_point = is_end_point_; }\n@@ -75,1 +75,1 @@\n-  ~hb_subset_plan_t()\n+  void transform (const float (&matrix)[4])\n@@ -77,2 +77,6 @@\n-    hb_face_destroy (source);\n-    hb_face_destroy (dest);\n+    float x_ = x * matrix[0] + y * matrix[2];\n+          y  = x * matrix[1] + y * matrix[3];\n+    x  = x_;\n+  }\n+  HB_ALWAYS_INLINE\n+  void translate (const contour_point_t &p) { x += p.x; y += p.y; }\n@@ -80,3 +84,0 @@\n-    hb_map_destroy (codepoint_to_glyph);\n-    hb_map_destroy (glyph_map);\n-    hb_map_destroy (reverse_glyph_map);\n@@ -84,4 +85,5 @@\n-#ifdef HB_EXPERIMENTAL_API\n-    for (auto _ : name_table_overrides)\n-      _.second.fini ();\n-#endif\n+  float x;\n+  float y;\n+  uint8_t flag;\n+  bool is_end_point;\n+};\n@@ -89,2 +91,10 @@\n-    if (inprogress_accelerator)\n-      hb_subset_accelerator_t::destroy ((void*) inprogress_accelerator);\n+struct contour_point_vector_t : hb_vector_t<contour_point_t>\n+{\n+  void extend (const hb_array_t<contour_point_t> &a)\n+  {\n+    unsigned int old_len = length;\n+    if (unlikely (!resize (old_len + a.length, false)))\n+      return;\n+    auto arrayZ = this->arrayZ + old_len;\n+    unsigned count = a.length;\n+    hb_memcpy (arrayZ, a.arrayZ, count * sizeof (arrayZ[0]));\n@@ -92,0 +102,13 @@\n+};\n+\n+namespace OT {\n+  struct cff1_subset_accelerator_t;\n+  struct cff2_subset_accelerator_t;\n+}\n+\n+struct hb_subset_plan_t\n+{\n+  HB_INTERNAL hb_subset_plan_t (hb_face_t *,\n+                                const hb_subset_input_t *input);\n+\n+  HB_INTERNAL ~hb_subset_plan_t();\n@@ -100,25 +123,0 @@\n-  \/\/ For each cp that we'd like to retain maps to the corresponding gid.\n-  hb_set_t unicodes;\n-  hb_sorted_vector_t<hb_pair_t<hb_codepoint_t, hb_codepoint_t>> unicode_to_new_gid_list;\n-\n-  \/\/ name_ids we would like to retain\n-  hb_set_t name_ids;\n-\n-  \/\/ name_languages we would like to retain\n-  hb_set_t name_languages;\n-\n-  \/\/layout features which will be preserved\n-  hb_set_t layout_features;\n-\n-  \/\/ layout scripts which will be preserved.\n-  hb_set_t layout_scripts;\n-\n-  \/\/glyph ids requested to retain\n-  hb_set_t glyphs_requested;\n-\n-  \/\/ Tables which should not be processed, just pass them through.\n-  hb_set_t no_subset_tables;\n-\n-  \/\/ Tables which should be dropped.\n-  hb_set_t drop_tables;\n-\n@@ -131,1 +129,0 @@\n-  hb_map_t glyph_map_gsub;\n@@ -135,0 +132,6 @@\n+#ifndef HB_NO_SUBSET_CFF\n+  \/\/ These have to be immediately after source:\n+  hb_face_lazy_loader_t<OT::cff1_subset_accelerator_t, 1> cff1_accel;\n+  hb_face_lazy_loader_t<OT::cff2_subset_accelerator_t, 2> cff2_accel;\n+#endif\n+\n@@ -138,46 +141,1 @@\n-  hb_set_t _glyphset;\n-  hb_set_t _glyphset_gsub;\n-  hb_set_t _glyphset_mathed;\n-  hb_set_t _glyphset_colred;\n-\n-  \/\/active lookups we'd like to retain\n-  hb_map_t gsub_lookups;\n-  hb_map_t gpos_lookups;\n-\n-  \/\/active langsys we'd like to retain\n-  hb_hashmap_t<unsigned, hb::unique_ptr<hb_set_t>> gsub_langsys;\n-  hb_hashmap_t<unsigned, hb::unique_ptr<hb_set_t>> gpos_langsys;\n-\n-  \/\/active features after removing redundant langsys and prune_features\n-  hb_map_t gsub_features;\n-  hb_map_t gpos_features;\n-\n-  \/\/active feature variation records\/condition index with variations\n-  hb_hashmap_t<unsigned, hb::shared_ptr<hb_set_t>> gsub_feature_record_cond_idx_map;\n-  hb_hashmap_t<unsigned, hb::shared_ptr<hb_set_t>> gpos_feature_record_cond_idx_map;\n-\n-  \/\/feature index-> address of substituation feature table mapping with\n-  \/\/variations\n-  hb_hashmap_t<unsigned, const OT::Feature*> gsub_feature_substitutes_map;\n-  hb_hashmap_t<unsigned, const OT::Feature*> gpos_feature_substitutes_map;\n-\n-  \/\/active layers\/palettes we'd like to retain\n-  hb_map_t colrv1_layers;\n-  hb_map_t colr_palettes;\n-\n-  \/\/Old layout item variation index -> (New varidx, delta) mapping\n-  hb_hashmap_t<unsigned, hb_pair_t<unsigned, int>> layout_variation_idx_delta_map;\n-\n-  \/\/gdef varstore retained varidx mapping\n-  hb_vector_t<hb_inc_bimap_t> gdef_varstore_inner_maps;\n-\n-  hb_hashmap_t<hb_tag_t, hb::unique_ptr<hb_blob_t>> sanitized_table_cache;\n-  \/\/normalized axes location map\n-  hb_hashmap_t<hb_tag_t, int> axes_location;\n-  hb_vector_t<int> normalized_coords;\n-  \/\/user specified axes location map\n-  hb_hashmap_t<hb_tag_t, float> user_axes_location;\n-  \/\/retained old axis index -> new axis index mapping in fvar axis array\n-  hb_map_t axes_index_map;\n-  \/\/axis_index->axis_tag mapping in fvar axis array\n-  hb_map_t axes_old_index_tag_map;\n+\n@@ -188,8 +146,7 @@\n-  \/\/hmtx metrics map: new gid->(advance, lsb)\n-  mutable hb_hashmap_t<hb_codepoint_t, hb_pair_t<unsigned, int>> hmtx_map;\n-  \/\/vmtx metrics map: new gid->(advance, lsb)\n-  mutable hb_hashmap_t<hb_codepoint_t, hb_pair_t<unsigned, int>> vmtx_map;\n-  \/\/boundsWidth map: new gid->boundsWidth, boundWidth=xMax - xMin\n-  mutable hb_map_t bounds_width_map;\n-  \/\/boundsHeight map: new gid->boundsHeight, boundsHeight=yMax - yMin\n-  mutable hb_map_t bounds_height_map;\n+  \/\/ whether to insert a catch-all FeatureVariationRecord\n+  bool gsub_insert_catch_all_feature_variation_rec;\n+  bool gpos_insert_catch_all_feature_variation_rec;\n+\n+#define HB_SUBSET_PLAN_MEMBER(Type, Name) Type Name;\n+#include \"hb-subset-plan-member-list.hh\"\n+#undef HB_SUBSET_PLAN_MEMBER\n@@ -200,6 +157,0 @@\n-#ifdef HB_EXPERIMENTAL_API\n-  \/\/ name table overrides map: hb_ot_name_record_ids_t-> name string new value or\n-  \/\/ None to indicate should remove\n-  hb_hashmap_t<hb_ot_name_record_ids_t, hb_bytes_t> name_table_overrides;\n-#endif\n-\n@@ -212,1 +163,1 @@\n-  hb_blob_ptr_t<T> source_table()\n+  struct source_table_loader\n@@ -214,1 +165,3 @@\n-    hb_lock_t lock (accelerator ? &accelerator->sanitized_table_cache_lock : nullptr);\n+    hb_blob_ptr_t<T> operator () (hb_subset_plan_t *plan)\n+    {\n+      hb_lock_t lock (plan->accelerator ? &plan->accelerator->sanitized_table_cache_lock : nullptr);\n@@ -216,6 +169,6 @@\n-    auto *cache = accelerator ? &accelerator->sanitized_table_cache : &sanitized_table_cache;\n-    if (cache\n-        && !cache->in_error ()\n-        && cache->has (+T::tableTag)) {\n-      return hb_blob_reference (cache->get (+T::tableTag).get ());\n-    }\n+      auto *cache = plan->accelerator ? &plan->accelerator->sanitized_table_cache : &plan->sanitized_table_cache;\n+      if (cache\n+          && !cache->in_error ()\n+          && cache->has (+T::tableTag)) {\n+        return hb_blob_reference (cache->get (+T::tableTag).get ());\n+      }\n@@ -223,2 +176,2 @@\n-    hb::unique_ptr<hb_blob_t> table_blob {hb_sanitize_context_t ().reference_table<T> (source)};\n-    hb_blob_t* ret = hb_blob_reference (table_blob.get ());\n+      hb::unique_ptr<hb_blob_t> table_blob {hb_sanitize_context_t ().reference_table<T> (plan->source)};\n+      hb_blob_t* ret = hb_blob_reference (table_blob.get ());\n@@ -226,2 +179,2 @@\n-    if (likely (cache))\n-      cache->set (+T::tableTag, std::move (table_blob));\n+      if (likely (cache))\n+        cache->set (+T::tableTag, std::move (table_blob));\n@@ -229,2 +182,6 @@\n-    return ret;\n-  }\n+      return ret;\n+    }\n+  };\n+\n+  template<typename T>\n+  auto source_table() HB_AUTO_RETURN (source_table_loader<T> {} (this))\n@@ -269,9 +226,0 @@\n-  \/*\n-   * Given an output gid , returns true if that glyph id is an empty\n-   * glyph (ie. it's a gid that we are dropping all data for).\n-   *\/\n-  inline bool is_empty_glyph (hb_codepoint_t gid) const\n-  {\n-    return !_glyphset.has (gid);\n-  }\n-\n@@ -327,0 +275,1 @@\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-subset-plan.hh","additions":73,"deletions":124,"binary":false,"changes":197,"status":"modified"},{"patch":"@@ -46,2 +46,0 @@\n-\n-#if !defined(AIX) || defined(AIX_XLC_GE_17)\n@@ -49,2 +47,0 @@\n-#endif\n-\n@@ -57,0 +53,1 @@\n+#include \"hb-ot-var-avar-table.hh\"\n@@ -61,0 +58,1 @@\n+#include \"hb-ot-var-mvar-table.hh\"\n@@ -69,0 +67,21 @@\n+\n+#ifndef HB_NO_SUBSET_CFF\n+template<>\n+struct hb_subset_plan_t::source_table_loader<const OT::cff1>\n+{\n+  auto operator () (hb_subset_plan_t *plan)\n+  HB_AUTO_RETURN (plan->accelerator ? plan->accelerator->cff1_accel :\n+                  plan->inprogress_accelerator ? plan->inprogress_accelerator->cff1_accel :\n+                  plan->cff1_accel)\n+};\n+template<>\n+struct hb_subset_plan_t::source_table_loader<const OT::cff2>\n+{\n+  auto operator () (hb_subset_plan_t *plan)\n+  HB_AUTO_RETURN (plan->accelerator ? plan->accelerator->cff2_accel :\n+                  plan->inprogress_accelerator ? plan->inprogress_accelerator->cff2_accel :\n+                  plan->cff2_accel)\n+};\n+#endif\n+\n+\n@@ -103,2 +122,2 @@\n-  HB_OT_TAG_cff1,\n-  HB_OT_TAG_cff2,\n+  HB_OT_TAG_CFF1,\n+  HB_OT_TAG_CFF2,\n@@ -199,1 +218,1 @@\n-                                  bool same_size)\n+                                  hb_tag_t table_tag)\n@@ -204,0 +223,21 @@\n+  unsigned bulk = 8192;\n+  \/* Tables that we want to allocate same space as the source table. For GSUB\/GPOS it's\n+   * because those are expensive to subset, so giving them more room is fine. *\/\n+  bool same_size = table_tag == HB_OT_TAG_GSUB ||\n+                   table_tag == HB_OT_TAG_GPOS ||\n+                   table_tag == HB_OT_TAG_name;\n+\n+  if (plan->flags & HB_SUBSET_FLAGS_RETAIN_GIDS)\n+  {\n+    if (table_tag == HB_OT_TAG_CFF1)\n+    {\n+      \/* Add some extra room for the CFF charset. *\/\n+      bulk += src_glyphs * 16;\n+    }\n+    else if (table_tag == HB_OT_TAG_CFF2)\n+    {\n+      \/* Just extra CharString offsets. *\/\n+      bulk += src_glyphs * 4;\n+    }\n+  }\n+\n@@ -205,1 +245,1 @@\n-    return 512 + table_len;\n+    return bulk + table_len;\n@@ -207,1 +247,1 @@\n-  return 512 + (unsigned) (table_len * sqrt ((double) dst_glyphs \/ src_glyphs));\n+  return bulk + (unsigned) (table_len * sqrt ((double) dst_glyphs \/ src_glyphs));\n@@ -238,1 +278,1 @@\n-  c->serializer->start_serialize<TableType> ();\n+  c->serializer->start_serialize ();\n@@ -269,0 +309,6 @@\n+template <typename T>\n+static auto _do_destroy (T &t, hb_priority<1>) HB_RETURN (void, t.destroy ())\n+\n+template <typename T>\n+static void _do_destroy (T &t, hb_priority<0>) {}\n+\n@@ -273,2 +319,2 @@\n-  hb_blob_ptr_t<TableType> source_blob = plan->source_table<TableType> ();\n-  const TableType *table = source_blob.get ();\n+  auto &&source_blob = plan->source_table<TableType> ();\n+  auto *table = source_blob.get ();\n@@ -277,1 +323,2 @@\n-  if (!source_blob.get_blob()->data)\n+  hb_blob_t *blob = source_blob.get_blob();\n+  if (unlikely (!blob || !blob->data))\n@@ -281,1 +328,1 @@\n-    source_blob.destroy ();\n+    _do_destroy (source_blob, hb_prioritize);\n@@ -285,7 +332,1 @@\n-  \/* Tables that we want to allocate same space as the source table. For GSUB\/GPOS it's\n-   * because those are expensive to subset, so giving them more room is fine. *\/\n-  bool same_size_table = TableType::tableTag == HB_OT_TAG_GSUB ||\n-                         TableType::tableTag == HB_OT_TAG_GPOS ||\n-                         TableType::tableTag == HB_OT_TAG_name;\n-\n-  unsigned buf_size = _plan_estimate_subset_table_size (plan, source_blob.get_length (), same_size_table);\n+  unsigned buf_size = _plan_estimate_subset_table_size (plan, blob->length, TableType::tableTag);\n@@ -297,1 +338,1 @@\n-    source_blob.destroy ();\n+    _do_destroy (source_blob, hb_prioritize);\n@@ -304,1 +345,1 @@\n-    hb_subset_context_t c (source_blob.get_blob (), plan, &serializer, tag);\n+    hb_subset_context_t c (blob, plan, &serializer, tag);\n@@ -307,1 +348,1 @@\n-  source_blob.destroy ();\n+  _do_destroy (source_blob, hb_prioritize);\n@@ -423,0 +464,2 @@\n+  case HB_OT_TAG_GPOS:\n+    return !plan->normalized_coords || plan->all_axes_pinned || !pending_subset_tags.has (HB_OT_TAG_GDEF);\n@@ -464,2 +507,2 @@\n-  case HB_OT_TAG_cff1: return _subset<const OT::cff1> (plan, buf);\n-  case HB_OT_TAG_cff2: return _subset<const OT::cff2> (plan, buf);\n+  case HB_OT_TAG_CFF1: return _subset<const OT::cff1> (plan, buf);\n+  case HB_OT_TAG_CFF2: return _subset<const OT::cff2> (plan, buf);\n@@ -477,0 +520,2 @@\n+\n+#ifndef HB_NO_VAR\n@@ -480,0 +525,11 @@\n+  case HB_OT_TAG_avar:\n+    if (plan->user_axes_location.is_empty ()) return _passthrough (plan, tag);\n+    return _subset<const OT::avar> (plan, buf);\n+  case HB_OT_TAG_cvar:\n+    if (plan->user_axes_location.is_empty ()) return _passthrough (plan, tag);\n+    return _subset<const OT::cvar> (plan, buf);\n+  case HB_OT_TAG_MVAR:\n+    if (plan->user_axes_location.is_empty ()) return _passthrough (plan, tag);\n+    return _subset<const OT::MVAR> (plan, buf);\n+#endif\n+\n@@ -481,3 +537,1 @@\n-    \/*TODO(qxliu): change the condition as we support more complex\n-     * instancing operation*\/\n-    if (plan->all_axes_pinned) return _subset<const OT::STAT> (plan, buf);\n+    if (!plan->user_axes_location.is_empty ()) return _subset<const OT::STAT> (plan, buf);\n@@ -594,4 +648,0 @@\n-  hb_vector_t<char> buf;\n-  buf.alloc (4096 - 16);\n-\n-\n@@ -600,1 +650,0 @@\n-  while (!pending_subset_tags.is_empty ())\n@@ -602,5 +651,4 @@\n-    if (subsetted_tags.in_error ()\n-        || pending_subset_tags.in_error ()) {\n-      success = false;\n-      goto end;\n-    }\n+    \/\/ Grouping to deallocate buf before calling hb_face_reference (plan->dest).\n+\n+    hb_vector_t<char> buf;\n+    buf.alloc (8192 - 16);\n@@ -608,2 +656,1 @@\n-    bool made_changes = false;\n-    for (hb_tag_t tag : pending_subset_tags)\n+    while (!pending_subset_tags.is_empty ())\n@@ -611,8 +658,4 @@\n-      if (!_dependencies_satisfied (plan, tag,\n-                                    subsetted_tags,\n-                                    pending_subset_tags))\n-      {\n-        \/\/ delayed subsetting for some tables since they might have dependency on other tables\n-        \/\/ in some cases: e.g: during instantiating glyf tables, hmetrics\/vmetrics are updated\n-        \/\/ and saved in subset plan, hmtx\/vmtx subsetting need to use these updated metrics values\n-        continue;\n+      if (subsetted_tags.in_error ()\n+          || pending_subset_tags.in_error ()) {\n+        success = false;\n+        goto end;\n@@ -621,7 +664,20 @@\n-      pending_subset_tags.del (tag);\n-      subsetted_tags.add (tag);\n-      made_changes = true;\n-\n-      success = _subset_table (plan, buf, tag);\n-      if (unlikely (!success)) goto end;\n-    }\n+      bool made_changes = false;\n+      for (hb_tag_t tag : pending_subset_tags)\n+      {\n+        if (!_dependencies_satisfied (plan, tag,\n+                                      subsetted_tags,\n+                                      pending_subset_tags))\n+        {\n+          \/\/ delayed subsetting for some tables since they might have dependency on other tables\n+          \/\/ in some cases: e.g: during instantiating glyf tables, hmetrics\/vmetrics are updated\n+          \/\/ and saved in subset plan, hmtx\/vmtx subsetting need to use these updated metrics values\n+          continue;\n+        }\n+\n+        pending_subset_tags.del (tag);\n+        subsetted_tags.add (tag);\n+        made_changes = true;\n+\n+        success = _subset_table (plan, buf, tag);\n+        if (unlikely (!success)) goto end;\n+      }\n@@ -629,5 +685,6 @@\n-    if (!made_changes)\n-    {\n-      DEBUG_MSG (SUBSET, nullptr, \"Table dependencies unable to be satisfied. Subset failed.\");\n-      success = false;\n-      goto end;\n+      if (!made_changes)\n+      {\n+        DEBUG_MSG (SUBSET, nullptr, \"Table dependencies unable to be satisfied. Subset failed.\");\n+        success = false;\n+        goto end;\n+      }\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-subset.cc","additions":118,"deletions":61,"binary":false,"changes":179,"status":"modified"},{"patch":"@@ -157,0 +157,3 @@\n+HB_EXTERN hb_map_t*\n+hb_subset_input_old_to_new_glyph_mapping (hb_subset_input_t *input);\n+\n@@ -176,0 +179,8 @@\n+HB_EXTERN hb_bool_t\n+hb_subset_input_set_axis_range (hb_subset_input_t  *input,\n+                                hb_face_t          *face,\n+                                hb_tag_t            axis_tag,\n+                                float               axis_min_value,\n+                                float               axis_max_value,\n+                                float              *axis_def_value);\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-subset.h","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * on file with this description: Unicode 15.0.0\n+ * on file with this description: Unicode 15.1.0\n@@ -1072,1 +1072,1 @@\n-_hb_ucd_u8[17868] =\n+_hb_ucd_u8[17884] =\n@@ -1149,6 +1149,5 @@\n-   34, 34, 34, 34, 34, 34, 34,246,122,122,122,122,122,122,122,122,\n-   34, 34, 34, 34,247,122,122,122,122,122,122,122,122,122,122,122,\n-   34, 34, 34, 34, 34, 34,248, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-   34, 34, 34, 34, 34, 34, 34,249,122,122,122,122,122,122,122,122,\n-  250,122,251,252,122,122,122,122,122,122,122,122,122,122,122,122,\n-  107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,253,\n+   34, 34, 34, 34, 34, 34, 34,246, 34, 34, 34, 34,247,122,122,122,\n+   34, 34, 34, 34,248,122,122,122,122,122,122,122,122,122,122,122,\n+   34, 34, 34, 34, 34, 34,249, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n+   34, 34, 34, 34, 34, 34, 34,250,122,122,122,122,122,122,122,122,\n+  251,122,252,253,122,122,122,122,122,122,122,122,122,122,122,122,\n@@ -1156,0 +1155,1 @@\n+  107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,255,\n@@ -1318,5 +1318,5 @@\n-   67, 67, 67, 44, 44, 44, 44, 44, 67, 67, 67, 67, 67, 67, 44, 44,\n-    1,  2,154,155,  4,  4,  4,  4,  4, 67,  4,  4,  4,  4,156,157,\n-  158,105,105,105,105, 43, 43, 86,159, 40, 40, 67,105,160, 63, 67,\n-   36, 36, 36, 61, 57,161,162, 69, 36, 36, 36, 36, 36, 63, 40, 69,\n-   44, 44, 62, 36, 36, 36, 36, 36, 67, 27, 27, 67, 67, 67, 67, 67,\n+   67, 67, 67, 44, 44, 44, 44, 44,  1,  2,154,155,  4,  4,  4,  4,\n+    4, 67,  4,  4,  4,  4,156,157,158,105,105,105,105, 43, 43, 86,\n+  159, 40, 40, 67,105,160, 63, 67, 36, 36, 36, 61, 57,161,162, 69,\n+   36, 36, 36, 36, 36, 63, 40, 69, 44, 44, 62, 36, 36, 36, 36, 36,\n+   67, 27, 27, 67, 67, 67, 67, 67, 67, 67, 44, 44, 44, 44, 44, 55,\n@@ -1490,35 +1490,35 @@\n-    8, 44, 44, 44, 44, 44, 44, 44, 55, 67, 67, 67, 67, 67, 67, 67,\n-   27, 27, 27, 27, 27, 27, 91, 67, 67, 67, 67, 67, 67, 67, 67, 44,\n-   44, 44, 44, 67, 67, 67, 67, 67, 67, 92, 44, 44, 44, 44, 44, 44,\n-   67, 67, 67, 67, 92, 44, 44, 44, 67, 44, 44, 44, 44, 44, 44, 44,\n-   67, 67, 67, 67, 67, 25, 41, 41, 67, 67, 67, 67, 44, 44, 67, 67,\n-   67, 67, 67, 92, 44, 55, 67, 67, 67, 67, 67, 67, 44, 44, 44, 44,\n-   67, 67, 67, 67, 67, 67, 67, 55, 67, 67, 67, 44, 44, 44, 44, 67,\n-   67, 92, 67, 67, 67, 67, 67, 67, 79, 44, 44, 44, 44, 44, 44, 44,\n-  171,171,171,171,171,171,171, 44,171,171,171,171,171,171,171,  0,\n-    0,  0, 29, 21, 21, 21, 23, 21, 22, 18, 21, 25, 21, 17, 13, 13,\n-   25, 25, 25, 21, 21,  9,  9,  9,  9, 22, 21, 18, 24, 16, 24,  5,\n-    5,  5,  5, 22, 25, 18, 25,  0, 23, 23, 26, 21, 24, 26,  7, 20,\n-   25,  1, 26, 24, 26, 25, 15, 15, 24, 15,  7, 19, 15, 21,  9, 25,\n-    9,  5,  5, 25,  5,  9,  5,  7,  7,  7,  9,  8,  8,  5,  7,  5,\n-    6,  6, 24, 24,  6, 24, 12, 12,  2,  2,  6,  5,  9, 21,  9,  2,\n-    2,  9, 25,  9, 26, 12, 11, 11,  2,  6,  5, 21, 17,  2,  2, 26,\n-   26, 23,  2, 12, 17, 12, 21, 12, 12, 21,  7,  2,  2,  7,  7, 21,\n-   21,  2,  1,  1, 21, 23, 26, 26,  1, 21,  6,  7,  7, 12, 12,  7,\n-   21,  7, 12,  1, 12,  6,  6, 12, 12, 26,  7, 26, 26,  7,  2,  1,\n-   12,  2,  6,  2, 24,  7,  7,  6,  1, 12, 12, 10, 10, 10, 10, 12,\n-   21,  6,  2, 10, 10,  2, 15, 26, 26,  2,  2, 21,  7, 10, 15,  7,\n-    2, 23, 21, 26, 10,  7, 21, 15, 15,  2, 17,  7, 29,  7,  7, 22,\n-   18,  2, 14, 14, 14,  7, 10, 21, 17, 21, 11, 12,  5,  2,  5,  6,\n-    8,  8,  8, 24,  5, 24,  2, 24,  9, 24, 24,  2, 29, 29, 29,  1,\n-   17, 17, 20, 19, 22, 20, 27, 28,  1, 29, 21, 20, 19, 21, 21, 16,\n-   16, 21, 25, 22, 18, 21, 21, 29,  1,  2, 15,  6, 18,  6, 23,  2,\n-   12, 11,  9, 26, 26,  9, 26,  5,  5, 26, 14,  9,  5, 14, 14, 15,\n-   25, 26, 26, 22, 18, 26, 18, 25, 18, 22,  5, 12,  2,  5, 22, 21,\n-   21, 22, 18, 17, 26,  6,  7, 14, 17, 22, 18, 18, 26, 14, 17,  6,\n-   14,  6, 12, 24, 24,  6, 26, 15,  6, 21, 11, 21, 24,  9,  6,  9,\n-   23, 26,  6, 10,  4,  4,  3,  3,  7, 25, 17, 16, 16, 22, 16, 16,\n-   25, 17, 25,  2, 25, 24,  2, 15, 12, 15, 14,  2, 21, 14,  7, 15,\n-   12, 17, 21,  1, 26, 10, 10,  1, 23, 15,  0,  1,  2,  3,  4,  5,\n-    6,  7,  8,  9,  0, 10, 11, 12, 13,  0, 14,  0,  0,  0,  0,  0,\n-   15,  0, 16,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    8, 44, 44, 44, 44, 44, 44, 44, 67, 67, 67, 67, 67, 67, 44, 44,\n+   55, 67, 67, 67, 67, 67, 67, 67, 27, 27, 27, 27, 27, 27, 91, 67,\n+   67, 67, 67, 67, 67, 67, 67, 44, 44, 44, 44, 67, 67, 67, 67, 67,\n+   67, 92, 44, 44, 44, 44, 44, 44, 67, 67, 67, 67, 92, 44, 44, 44,\n+   67, 44, 44, 44, 44, 44, 44, 44, 67, 67, 67, 67, 67, 25, 41, 41,\n+   67, 67, 67, 67, 44, 44, 67, 67, 67, 67, 67, 92, 44, 55, 67, 67,\n+   67, 67, 67, 67, 44, 44, 44, 44, 67, 67, 67, 67, 67, 67, 67, 55,\n+   67, 67, 67, 44, 44, 44, 44, 67, 67, 92, 67, 67, 67, 67, 67, 67,\n+   79, 44, 44, 44, 44, 44, 44, 44,171,171,171,171,171,171,171, 44,\n+  171,171,171,171,171,171,171,  0,  0,  0, 29, 21, 21, 21, 23, 21,\n+   22, 18, 21, 25, 21, 17, 13, 13, 25, 25, 25, 21, 21,  9,  9,  9,\n+    9, 22, 21, 18, 24, 16, 24,  5,  5,  5,  5, 22, 25, 18, 25,  0,\n+   23, 23, 26, 21, 24, 26,  7, 20, 25,  1, 26, 24, 26, 25, 15, 15,\n+   24, 15,  7, 19, 15, 21,  9, 25,  9,  5,  5, 25,  5,  9,  5,  7,\n+    7,  7,  9,  8,  8,  5,  7,  5,  6,  6, 24, 24,  6, 24, 12, 12,\n+    2,  2,  6,  5,  9, 21,  9,  2,  2,  9, 25,  9, 26, 12, 11, 11,\n+    2,  6,  5, 21, 17,  2,  2, 26, 26, 23,  2, 12, 17, 12, 21, 12,\n+   12, 21,  7,  2,  2,  7,  7, 21, 21,  2,  1,  1, 21, 23, 26, 26,\n+    1, 21,  6,  7,  7, 12, 12,  7, 21,  7, 12,  1, 12,  6,  6, 12,\n+   12, 26,  7, 26, 26,  7,  2,  1, 12,  2,  6,  2, 24,  7,  7,  6,\n+    1, 12, 12, 10, 10, 10, 10, 12, 21,  6,  2, 10, 10,  2, 15, 26,\n+   26,  2,  2, 21,  7, 10, 15,  7,  2, 23, 21, 26, 10,  7, 21, 15,\n+   15,  2, 17,  7, 29,  7,  7, 22, 18,  2, 14, 14, 14,  7, 10, 21,\n+   17, 21, 11, 12,  5,  2,  5,  6,  8,  8,  8, 24,  5, 24,  2, 24,\n+    9, 24, 24,  2, 29, 29, 29,  1, 17, 17, 20, 19, 22, 20, 27, 28,\n+    1, 29, 21, 20, 19, 21, 21, 16, 16, 21, 25, 22, 18, 21, 21, 29,\n+    1,  2, 15,  6, 18,  6, 23,  2, 12, 11,  9, 26, 26,  9, 26,  5,\n+    5, 26, 14,  9,  5, 14, 14, 15, 25, 26, 26, 22, 18, 26, 18, 25,\n+   18, 22,  5, 12,  2,  5, 22, 21, 21, 22, 18, 17, 26,  6,  7, 14,\n+   17, 22, 18, 18, 26, 14, 17,  6, 14,  6, 12, 24, 24,  6, 26, 15,\n+    6, 21, 11, 21, 24,  9,  6,  9, 23, 26,  6, 10,  4,  4,  3,  3,\n+    7, 25, 17, 16, 16, 22, 16, 16, 25, 17, 25,  2, 25, 24,  2, 15,\n+   12, 15, 14,  2, 21, 14,  7, 15, 12, 17, 21,  1, 26, 10, 10,  1,\n+   23, 15,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0, 10, 11, 12,\n+   13,  0, 14,  0,  0,  0,  0,  0, 15,  0, 16,  0,  0,  0,  0,  0,\n@@ -1527,1 +1527,0 @@\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 17, 18, 19,\n@@ -1529,0 +1528,1 @@\n+    0,  0,  0,  0,  0, 17, 18, 19,  0,  0,  0,  0,  0,  0,  0,  0,\n@@ -1530,2 +1530,3 @@\n-    0,  0,  0,  0,  0,  0,  0, 20,  0, 21, 22, 23,  0,  0,  0, 24,\n-   25, 26, 27, 28, 29, 30, 31, 32, 33, 34,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 20,\n+    0, 21, 22, 23,  0,  0,  0, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n+   33, 34,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n@@ -1533,2 +1534,1 @@\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 35,\n-    0, 36,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0, 35,  0, 36,  0,  0,  0,  0,  0,  0,\n@@ -1536,121 +1536,121 @@\n-    0,  0,  0,  0,  0,  0,  0,  0, 37,  0,  0,  0,  0,  0,  0,  0,\n-    0,  0, 38, 39,  0,  0,  0,  0,  0,  0, 40, 41, 42,  0, 43,  0,\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  0,  0,\n-    0,  0,  3,  0,  0,  0,  4,  5,  6,  7,  0,  8,  9, 10,  0, 11,\n-   12, 13, 14, 15, 16, 17, 16, 18, 16, 19, 16, 19, 16, 19,  0, 19,\n-   16, 20, 16, 19, 21, 19,  0, 22, 23, 24, 25, 26, 27, 28, 29, 30,\n-   31,  0, 32,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 33,  0,  0,\n-    0,  0,  0,  0, 34,  0,  0, 35,  0,  0, 36,  0, 37,  0,  0,  0,\n-   38, 39, 40, 41, 42, 43, 44, 45, 46,  0,  0, 47,  0,  0,  0, 48,\n-    0,  0,  0, 49,  0,  0,  0,  0,  0,  0,  0, 50,  0, 51,  0, 52,\n-   53,  0, 54,  0,  0,  0,  0,  0,  0, 55, 56, 57,  0,  0,  0,  0,\n-   58,  0,  0, 59, 60, 61, 62, 63,  0,  0, 64, 65,  0,  0,  0, 66,\n-    0,  0,  0,  0, 67,  0,  0,  0, 68,  0,  0,  0,  0,  0,  0,  0,\n-    0,  0,  0,  0,  0,  0,  0, 69,  0,  0,  0, 70,  0, 71,  0,  0,\n-   72,  0,  0, 73,  0,  0,  0,  0,  0,  0,  0,  0, 74,  0,  0,  0,\n-    0,  0, 75, 76,  0, 77, 78,  0,  0, 79, 80,  0, 81, 62,  0, 82,\n-   83,  0,  0, 84, 85, 86,  0,  0,  0, 87,  0, 88,  0,  0, 51, 89,\n-   51,  0, 90,  0, 91,  0,  0,  0, 80,  0,  0,  0, 92, 93,  0, 94,\n-   95, 96, 97,  0,  0,  0,  0,  0, 51,  0,  0,  0,  0, 98, 99,  0,\n-    0,  0,  0,  0,  0,100,  0,  0,  0,  0,  0,101,102,  0,  0,  0,\n-    0,  0,  0,  0,  0,  0,  0,103,  0,  0,104,  0,  0,  0,  0,  0,\n-    0,  0,  0,  0,  0,105,106,  0,  0,107,  0,  0,  0,  0,  0,  0,\n-  108,  0,109,  0,102,  0,  0,  0,  0,  0,110,111,  0,  0,  0,  0,\n-    0,  0,  0,112,  0,  0,  0,  0,  0,  0,  0,113,  0,114,  0,  0,\n-    0,  0,  0,  0,  1,  2,  3,  4,  5,  6,  7,  0,  8,  0,  0,  0,\n-    0,  9, 10, 11, 12,  0,  0,  0,  0, 13,  0,  0, 14, 15,  0, 16,\n-    0, 17, 18,  0,  0, 19,  0, 20, 21,  0,  0,  0,  0,  0, 22, 23,\n-    0, 24, 25,  0,  0, 26,  0,  0,  0, 27,  0,  0, 28, 29, 30, 31,\n-    0,  0,  0, 32, 33, 34,  0,  0, 33,  0,  0, 35, 33,  0,  0,  0,\n-   33, 36,  0,  0,  0,  0,  0, 37, 38,  0,  0,  0,  0,  0,  0, 39,\n-   40,  0,  0,  0,  0,  0,  0, 41, 42,  0,  0,  0,  0, 43,  0, 44,\n-    0,  0,  0, 45, 46,  0,  0,  0, 47,  0,  0,  0,  0,  0,  0, 48,\n-   49,  0,  0,  0,  0, 50,  0,  0,  0, 51,  0, 52,  0, 53,  0,  0,\n-    0,  0, 54,  0,  0,  0,  0, 55,  0, 56,  0,  0,  0,  0, 57, 58,\n-    0,  0,  0, 59, 60,  0,  0,  0,  0,  0,  0, 61, 52,  0, 62, 63,\n-    0,  0, 64,  0,  0,  0, 65, 66,  0,  0,  0, 67,  0, 68, 69, 70,\n-   71, 72,  1, 73,  0, 74, 75, 76,  0,  0, 77, 78,  0,  0,  0, 79,\n-    0,  0,  1,  1,  0,  0, 80,  0,  0, 81,  0,  0,  0,  0, 77, 82,\n-    0, 83,  0,  0,  0,  0,  0, 78, 84,  0, 85,  0, 52,  0,  1, 78,\n-    0,  0, 86,  0,  0, 87,  0,  0,  0,  0,  0, 88, 57,  0,  0,  0,\n-    0,  0,  0, 89, 90,  0,  0, 84,  0,  0, 33,  0,  0, 91,  0,  0,\n-    0,  0, 92,  0,  0,  0,  0, 49,  0,  0, 93,  0,  0,  0,  0, 94,\n-   95,  0,  0, 96,  0,  0, 97,  0,  0,  0, 98,  0,  0,  0, 99,  0,\n-    0,  0,  0,100,101, 93,  0,  0,102,  0,  0,  0, 84,  0,  0,103,\n-    0,  0,  0,104,105,  0,  0,106,107,  0,  0,  0,  0,  0,  0,108,\n-    0,  0,109,  0,  0,  0,  0,110, 33,  0,111,112,113, 35,  0,  0,\n-  114,  0,  0,  0,115,  0,  0,  0,  0,  0,  0,116,  0,  0,117,  0,\n-    0,  0,  0,118, 88,  0,  0,  0,  0,  0, 57,  0,  0,  0,  0, 52,\n-  119,  0,  0,  0,  0,120,  0,  0,121,  0,  0,  0,  0,119,  0,  0,\n-  122,  0,  0,  0,  0,  0,  0,123,  0,  0,  0,124,  0,  0,  0,125,\n-    0,126,  0,  0,  0,  0,127,128,129,  0,130,  0,131,  0,  0,  0,\n-  132,133,134,  0, 77,  0,  0,  0,  0,  0, 35,  0,  0,  0,135,  0,\n-    0,  0,136,  0,  0,137,  0,  0,138,  0,  0,  0,  0,  0,  0,  0,\n-    1,  1,  1,  1,  1,  2,  3,  4,  5,  6,  7,  4,  4,  8,  9, 10,\n-    1, 11, 12, 13, 14, 15, 16, 17, 18,  1,  1,  1, 19,  1,  0,  0,\n-   20, 21, 22,  1, 23,  4, 21, 24, 25, 26, 27, 28, 29, 30,  0,  0,\n-    1,  1, 31,  0,  0,  0, 32, 33, 34, 35,  1, 36, 37,  0,  0,  0,\n-    0, 38,  1, 39, 14, 39, 40, 41, 42,  0,  0,  0, 43, 36, 44, 45,\n-   21, 45, 46,  0,  0,  0, 19,  1, 21,  0,  0, 47,  0, 38, 48,  1,\n-    1, 49, 49, 50,  0,  0, 51,  0,  0,  0, 52,  1,  0,  0, 38, 14,\n-    4,  1,  1,  1, 53, 21, 43, 52, 54, 21, 35,  1,  0,  0,  0, 55,\n-    0,  0,  0, 56, 57, 58,  0,  0,  0,  0,  0, 59,  0, 60,  0,  0,\n-    0,  0, 61, 62,  0,  0, 63,  0,  0,  0, 64,  0,  0,  0, 65,  0,\n-    0,  0, 66,  0,  0,  0, 67,  0,  0,  0, 68,  0,  0, 69, 70,  0,\n-   71, 72, 73, 74, 75, 76,  0,  0,  0, 77,  0,  0,  0, 78, 79,  0,\n-    0,  0,  0, 47,  0,  0,  0, 49,  0, 80,  0,  0,  0, 62,  0,  0,\n-   63,  0,  0, 81,  0,  0, 82,  0,  0,  0, 83,  0,  0, 19, 84,  0,\n-   62,  0,  0,  0,  0, 49,  1, 85,  1, 52, 15, 86, 36, 10, 21, 87,\n-    0, 55,  0,  0,  0,  0, 19, 10,  1,  0,  0,  0,  0,  0, 88,  0,\n-    0, 89,  0,  0, 88,  0,  0,  0,  0, 78,  0,  0, 87,  9, 12,  4,\n-   90,  8, 91, 47,  0, 58, 50,  0, 21,  1, 21, 92, 93,  1,  1,  1,\n-    1, 94, 95, 96, 97,  1, 98, 58, 81, 99,100,  4, 58,  0,  0,  0,\n-    0,  0,  0, 19, 50,  0,  0,  0,  0,  0,  0, 61,  0,  0,101,102,\n-    0,  0,103,  0,  0,  1,  1, 50,  0,  0,  0, 38,  0, 63,  0,  0,\n-    0,  0,  0, 62,  0,  0,104, 68, 61,  0,  0,  0, 78,  0,  0,  0,\n-  105,106, 58, 38, 81,  0,  0,  0,  0,  0,  0,107,  1, 14,  4, 12,\n-   84,  0,  0,  0,  0, 38, 87,  0,  0,  0,  0,108,  0,  0,109, 61,\n-    0,110,  0,  0,  0,  1,  0,  0,  0,  0, 19, 58,  0,  0,  0, 51,\n-    0,111, 14, 52,112, 41,  0,  0, 62,  0,  0, 61,  0,  0,113,  0,\n-   87,  0,  0,  0, 61, 62,  0,  0, 62,  0, 89,  0,  0,113,  0,  0,\n-    0,  0,114,  0,  0,  0, 78, 55,  0, 38,  1, 58,  1, 58,  0,  0,\n-   63, 89,  0,  0,115,  0,  0,  0, 55,  0,  0,  0,  0,115,  0,  0,\n-    0,  0, 61,  0,  0,  0,  0, 79,  0, 61,  0,  0,  0,  0, 56,  0,\n-   89, 80,  0,  0, 79,  0,  0,  0,  8, 91,  0,  0,  1, 87,  0,  0,\n-  116,  0,  0,  0,  0,  0,  0,117,  0,118,119,120,121,  0,104,  4,\n-  122, 49, 23,  0,  0,  0, 38, 50, 38, 58,  0,  0,  1, 87,  1,  1,\n-    1,  1, 39,  1, 48,105, 87,  0,  0,  0,  0,  1,  0,  0,  0,123,\n-    4,122,  0,  0,  0,  1,124,  0,  0,  0,  0,  0,230,230,230,230,\n-  230,232,220,220,220,220,232,216,220,220,220,220,220,202,202,220,\n-  220,220,220,202,202,220,220,220,  1,  1,  1,  1,  1,220,220,220,\n-  220,230,230,230,230,240,230,220,220,220,230,230,230,220,220,  0,\n-  230,230,230,220,220,220,220,230,232,220,220,230,233,234,234,233,\n-  234,234,233,230,  0,  0,  0,230,  0,220,230,230,230,230,220,230,\n-  230,230,222,220,230,230,220,220,230,222,228,230, 10, 11, 12, 13,\n-   14, 15, 16, 17, 18, 19, 19, 20, 21, 22,  0, 23,  0, 24, 25,  0,\n-  230,220,  0, 18, 30, 31, 32,  0,  0,  0,  0, 27, 28, 29, 30, 31,\n-   32, 33, 34,230,230,220,220,230,220,230,230,220, 35,  0,  0,  0,\n-    0,  0,230,230,230,  0,  0,230,230,  0,220,230,230,220,  0,  0,\n-    0, 36,  0,  0,230,220,230,230,220,220,230,220,220,230,220,230,\n-  220,230,230,  0,  0,220,  0,  0,230,230,  0,230,  0,230,230,230,\n-  230,230,  0,  0,  0,220,220,220,230,220,220,220,230,230,  0,220,\n-   27, 28, 29,230,  7,  0,  0,  0,  0,  9,  0,  0,  0,230,220,230,\n-  230,  0,  0,  0,  0,  0,230,  0,  0, 84, 91,  0,  0,  0,  0,  9,\n-    9,  0,  0,  0,  0,  0,  9,  0,103,103,  9,  0,107,107,107,107,\n-  118,118,  9,  0,122,122,122,122,220,220,  0,  0,  0,220,  0,220,\n-    0,216,  0,  0,  0,129,130,  0,132,  0,  0,  0,  0,  0,130,130,\n-  130,130,  0,  0,130,  0,230,230,  9,  0,230,230,  0,  0,220,  0,\n-    0,  0,  0,  7,  0,  9,  9,  0,  9,  9,  0,  0,  0,230,  0,  0,\n-    0,228,  0,  0,  0,222,230,220,220,  0,  0,  0,230,  0,  0,220,\n-  230,220,  0,220,230,230,230,  0,  0,  0,  9,  9,  0,  0,  7,  0,\n-  230,  0,  1,  1,  1,  0,  0,  0,230,234,214,220,202,230,230,230,\n-  230,230,232,228,228,220,218,230,233,220,230,220,230,230,  1,  1,\n-    1,  1,  1,230,  0,  1,  1,230,220,230,  1,  1,  0,  0,218,228,\n-  232,222,224,224,  0,  8,  8,  0,  0,  0,  0,220,230,  0,230,230,\n-  220,  0,  0,230,  0,  0, 26,  0,  0,220,  0,230,230,  1,220,  0,\n-    0,230,220,  0,  0,  0,220,220,  0,  0,230,220,  0,  9,  7,  0,\n-    0,  7,  9,  0,  0,  0,  9,  7,  6,  6,  0,  0,  0,  0,  1,  0,\n-    0,216,216,  1,  1,  1,  0,  0,  0,226,216,216,216,216,216,  0,\n-  220,220,220,  0,232,232,220,230,230,230,  7,  0, 16, 17, 17, 17,\n-   17, 17, 17, 33, 17, 17, 17, 19, 17, 17, 17, 17, 20,101, 17,113,\n-  129,169, 17, 27, 28, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+   37,  0,  0,  0,  0,  0,  0,  0,  0,  0, 38, 39,  0,  0,  0,  0,\n+    0,  0, 40, 41, 42,  0, 43,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  1,  2,  0,  0,  0,  0,  3,  0,  0,  0,  4,  5,\n+    6,  7,  0,  8,  9, 10,  0, 11, 12, 13, 14, 15, 16, 17, 16, 18,\n+   16, 19, 16, 19, 16, 19,  0, 19, 16, 20, 16, 19, 21, 19,  0, 22,\n+   23, 24, 25, 26, 27, 28, 29, 30, 31,  0, 32,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0, 33,  0,  0,  0,  0,  0,  0, 34,  0,  0, 35,\n+    0,  0, 36,  0, 37,  0,  0,  0, 38, 39, 40, 41, 42, 43, 44, 45,\n+   46,  0,  0, 47,  0,  0,  0, 48,  0,  0,  0, 49,  0,  0,  0,  0,\n+    0,  0,  0, 50,  0, 51,  0, 52, 53,  0, 54,  0,  0,  0,  0,  0,\n+    0, 55, 56, 57,  0,  0,  0,  0, 58,  0,  0, 59, 60, 61, 62, 63,\n+    0,  0, 64, 65,  0,  0,  0, 66,  0,  0,  0,  0, 67,  0,  0,  0,\n+   68,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 69,\n+    0,  0,  0, 70,  0, 71,  0,  0, 72,  0,  0, 73,  0,  0,  0,  0,\n+    0,  0,  0,  0, 74,  0,  0,  0,  0,  0, 75, 76,  0, 77, 78,  0,\n+    0, 79, 80,  0, 81, 62,  0, 82, 83,  0,  0, 84, 85, 86,  0,  0,\n+    0, 87,  0, 88,  0,  0, 51, 89, 51,  0, 90,  0, 91,  0,  0,  0,\n+   80,  0,  0,  0, 92, 93,  0, 94, 95, 96, 97,  0,  0,  0,  0,  0,\n+   51,  0,  0,  0,  0, 98, 99,  0,  0,  0,  0,  0,  0,100,  0,  0,\n+    0,  0,  0,101,102,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,103,\n+    0,  0,104,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,105,106,  0,\n+    0,107,  0,  0,  0,  0,  0,  0,108,  0,109,  0,102,  0,  0,  0,\n+    0,  0,110,111,  0,  0,  0,  0,  0,  0,  0,112,  0,  0,  0,  0,\n+    0,  0,  0,113,  0,114,  0,  0,  0,  0,  0,  0,  1,  2,  3,  4,\n+    5,  6,  7,  0,  8,  0,  0,  0,  0,  9, 10, 11, 12,  0,  0,  0,\n+    0, 13,  0,  0, 14, 15,  0, 16,  0, 17, 18,  0,  0, 19,  0, 20,\n+   21,  0,  0,  0,  0,  0, 22, 23,  0, 24, 25,  0,  0, 26,  0,  0,\n+    0, 27,  0,  0, 28, 29, 30, 31,  0,  0,  0, 32, 33, 34,  0,  0,\n+   33,  0,  0, 35, 33,  0,  0,  0, 33, 36,  0,  0,  0,  0,  0, 37,\n+   38,  0,  0,  0,  0,  0,  0, 39, 40,  0,  0,  0,  0,  0,  0, 41,\n+   42,  0,  0,  0,  0, 43,  0, 44,  0,  0,  0, 45, 46,  0,  0,  0,\n+   47,  0,  0,  0,  0,  0,  0, 48, 49,  0,  0,  0,  0, 50,  0,  0,\n+    0, 51,  0, 52,  0, 53,  0,  0,  0,  0, 54,  0,  0,  0,  0, 55,\n+    0, 56,  0,  0,  0,  0, 57, 58,  0,  0,  0, 59, 60,  0,  0,  0,\n+    0,  0,  0, 61, 52,  0, 62, 63,  0,  0, 64,  0,  0,  0, 65, 66,\n+    0,  0,  0, 67,  0, 68, 69, 70, 71, 72,  1, 73,  0, 74, 75, 76,\n+    0,  0, 77, 78,  0,  0,  0, 79,  0,  0,  1,  1,  0,  0, 80,  0,\n+    0, 81,  0,  0,  0,  0, 77, 82,  0, 83,  0,  0,  0,  0,  0, 78,\n+   84,  0, 85,  0, 52,  0,  1, 78,  0,  0, 86,  0,  0, 87,  0,  0,\n+    0,  0,  0, 88, 57,  0,  0,  0,  0,  0,  0, 89, 90,  0,  0, 84,\n+    0,  0, 33,  0,  0, 91,  0,  0,  0,  0, 92,  0,  0,  0,  0, 49,\n+    0,  0, 93,  0,  0,  0,  0, 94, 95,  0,  0, 96,  0,  0, 97,  0,\n+    0,  0, 98,  0,  0,  0, 99,  0,  0,  0,  0,100,101, 93,  0,  0,\n+  102,  0,  0,  0, 84,  0,  0,103,  0,  0,  0,104,105,  0,  0,106,\n+  107,  0,  0,  0,  0,  0,  0,108,  0,  0,109,  0,  0,  0,  0,110,\n+   33,  0,111,112,113, 35,  0,  0,114,  0,  0,  0,115,  0,  0,  0,\n+    0,  0,  0,116,  0,  0,117,  0,  0,  0,  0,118, 88,  0,  0,  0,\n+    0,  0, 57,  0,  0,  0,  0, 52,119,  0,  0,  0,  0,120,  0,  0,\n+  121,  0,  0,  0,  0,119,  0,  0,122,  0,  0,  0,  0,  0,  0,123,\n+    0,  0,  0,124,  0,  0,  0,125,  0,126,  0,  0,  0,  0,127,128,\n+  129,  0,130,  0,131,  0,  0,  0,132,133,134,  0, 77,  0,  0,  0,\n+    0,  0, 35,  0,  0,  0,135,  0,  0,  0,136,  0,  0,137,  0,  0,\n+  138,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  2,  3,  4,\n+    5,  6,  7,  4,  4,  8,  9, 10,  1, 11, 12, 13, 14, 15, 16, 17,\n+   18,  1,  1,  1, 19,  1,  0,  0, 20, 21, 22,  1, 23,  4, 21, 24,\n+   25, 26, 27, 28, 29, 30,  0,  0,  1,  1, 31,  0,  0,  0, 32, 33,\n+   34, 35,  1, 36, 37,  0,  0,  0,  0, 38,  1, 39, 14, 39, 40, 41,\n+   42,  0,  0,  0, 43, 36, 44, 45, 21, 45, 46,  0,  0,  0, 19,  1,\n+   21,  0,  0, 47,  0, 38, 48,  1,  1, 49, 49, 50,  0,  0, 51,  0,\n+    0,  0, 52,  1,  0,  0, 38, 14,  4,  1,  1,  1, 53, 21, 43, 52,\n+   54, 21, 35,  1,  0,  0,  0, 55,  0,  0,  0, 56, 57, 58,  0,  0,\n+    0,  0,  0, 59,  0, 60,  0,  0,  0,  0, 61, 62,  0,  0, 63,  0,\n+    0,  0, 64,  0,  0,  0, 65,  0,  0,  0, 66,  0,  0,  0, 67,  0,\n+    0,  0, 68,  0,  0, 69, 70,  0, 71, 72, 73, 74, 75, 76,  0,  0,\n+    0, 77,  0,  0,  0, 78, 79,  0,  0,  0,  0, 47,  0,  0,  0, 49,\n+    0, 80,  0,  0,  0, 62,  0,  0, 63,  0,  0, 81,  0,  0, 82,  0,\n+    0,  0, 83,  0,  0, 19, 84,  0, 62,  0,  0,  0,  0, 49,  1, 85,\n+    1, 52, 15, 86, 36, 10, 21, 87,  0, 55,  0,  0,  0,  0, 19, 10,\n+    1,  0,  0,  0,  0,  0, 88,  0,  0, 89,  0,  0, 88,  0,  0,  0,\n+    0, 78,  0,  0, 87,  9, 12,  4, 90,  8, 91, 47,  0, 58, 50,  0,\n+   21,  1, 21, 92, 93,  1,  1,  1,  1, 94, 95, 96, 97,  1, 98, 58,\n+   81, 99,100,  4, 58,  0,  0,  0,  0,  0,  0, 19, 50,  0,  0,  0,\n+    0,  0,  0, 61,  0,  0,101,102,  0,  0,103,  0,  0,  1,  1, 50,\n+    0,  0,  0, 38,  0, 63,  0,  0,  0,  0,  0, 62,  0,  0,104, 68,\n+   61,  0,  0,  0, 78,  0,  0,  0,105,106, 58, 38, 81,  0,  0,  0,\n+    0,  0,  0,107,  1, 14,  4, 12, 84,  0,  0,  0,  0, 38, 87,  0,\n+    0,  0,  0,108,  0,  0,109, 61,  0,110,  0,  0,  0,  1,  0,  0,\n+    0,  0, 19, 58,  0,  0,  0, 51,  0,111, 14, 52,112, 41,  0,  0,\n+   62,  0,  0, 61,  0,  0,113,  0, 87,  0,  0,  0, 61, 62,  0,  0,\n+   62,  0, 89,  0,  0,113,  0,  0,  0,  0,114,  0,  0,  0, 78, 55,\n+    0, 38,  1, 58,  1, 58,  0,  0, 63, 89,  0,  0,115,  0,  0,  0,\n+   55,  0,  0,  0,  0,115,  0,  0,  0,  0, 61,  0,  0,  0,  0, 79,\n+    0, 61,  0,  0,  0,  0, 56,  0, 89, 80,  0,  0, 79,  0,  0,  0,\n+    8, 91,  0,  0,  1, 87,  0,  0,116,  0,  0,  0,  0,  0,  0,117,\n+    0,118,119,120,121,  0,104,  4,122, 49, 23,  0,  0,  0, 38, 50,\n+   38, 58,  0,  0,  1, 87,  1,  1,  1,  1, 39,  1, 48,105, 87,  0,\n+    0,  0,  0,  1,  0,  0,  0,123,  4,122,  0,  0,  0,  1,124,  0,\n+    0,  0,  0,  0,230,230,230,230,230,232,220,220,220,220,232,216,\n+  220,220,220,220,220,202,202,220,220,220,220,202,202,220,220,220,\n+    1,  1,  1,  1,  1,220,220,220,220,230,230,230,230,240,230,220,\n+  220,220,230,230,230,220,220,  0,230,230,230,220,220,220,220,230,\n+  232,220,220,230,233,234,234,233,234,234,233,230,  0,  0,  0,230,\n+    0,220,230,230,230,230,220,230,230,230,222,220,230,230,220,220,\n+  230,222,228,230, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20,\n+   21, 22,  0, 23,  0, 24, 25,  0,230,220,  0, 18, 30, 31, 32,  0,\n+    0,  0,  0, 27, 28, 29, 30, 31, 32, 33, 34,230,230,220,220,230,\n+  220,230,230,220, 35,  0,  0,  0,  0,  0,230,230,230,  0,  0,230,\n+  230,  0,220,230,230,220,  0,  0,  0, 36,  0,  0,230,220,230,230,\n+  220,220,230,220,220,230,220,230,220,230,230,  0,  0,220,  0,  0,\n+  230,230,  0,230,  0,230,230,230,230,230,  0,  0,  0,220,220,220,\n+  230,220,220,220,230,230,  0,220, 27, 28, 29,230,  7,  0,  0,  0,\n+    0,  9,  0,  0,  0,230,220,230,230,  0,  0,  0,  0,  0,230,  0,\n+    0, 84, 91,  0,  0,  0,  0,  9,  9,  0,  0,  0,  0,  0,  9,  0,\n+  103,103,  9,  0,107,107,107,107,118,118,  9,  0,122,122,122,122,\n+  220,220,  0,  0,  0,220,  0,220,  0,216,  0,  0,  0,129,130,  0,\n+  132,  0,  0,  0,  0,  0,130,130,130,130,  0,  0,130,  0,230,230,\n+    9,  0,230,230,  0,  0,220,  0,  0,  0,  0,  7,  0,  9,  9,  0,\n+    9,  9,  0,  0,  0,230,  0,  0,  0,228,  0,  0,  0,222,230,220,\n+  220,  0,  0,  0,230,  0,  0,220,230,220,  0,220,230,230,230,  0,\n+    0,  0,  9,  9,  0,  0,  7,  0,230,  0,  1,  1,  1,  0,  0,  0,\n+  230,234,214,220,202,230,230,230,230,230,232,228,228,220,218,230,\n+  233,220,230,220,230,230,  1,  1,  1,  1,  1,230,  0,  1,  1,230,\n+  220,230,  1,  1,  0,  0,218,228,232,222,224,224,  0,  8,  8,  0,\n+    0,  0,  0,220,230,  0,230,230,220,  0,  0,230,  0,  0, 26,  0,\n+    0,220,  0,230,230,  1,220,  0,  0,230,220,  0,  0,  0,220,220,\n+    0,  0,230,220,  0,  9,  7,  0,  0,  7,  9,  0,  0,  0,  9,  7,\n+    6,  6,  0,  0,  0,  0,  1,  0,  0,216,216,  1,  1,  1,  0,  0,\n+    0,226,216,216,216,216,216,  0,220,220,220,  0,232,232,220,230,\n+  230,230,  7,  0, 16, 17, 17, 17, 17, 17, 17, 33, 17, 17, 17, 19,\n+   17, 17, 17, 17, 20,101, 17,113,129,169, 17, 27, 28, 17, 17, 17,\n@@ -1662,37 +1662,37 @@\n-   17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,237,  0,  1,  2,  2,\n-    0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4,  0,  0,\n-    0,  0,  0,  0,  0,  0,  0,  0,  5,  0,  0,  0,  0,  6,  7,  8,\n-    9,  0,  0,  0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,  0,  0,\n-    0,  0,  0,  0,  0,  0,  0, 20,  0,  0, 21, 22,  0,  0,  0,  0,\n-   23, 24, 25, 26,  0, 27,  0, 28, 29, 30, 31, 32,  0,  0,  0,  0,\n-    0,  0,  0, 33, 34, 35, 36,  0,  0,  0,  0,  0, 37,  0,  0,  0,\n-    0,  0,  0,  0,  0,  0, 38, 39,  0,  0,  0,  0,  1,  2, 40, 41,\n-    0,  1,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,\n-    0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  3,  4,  0,  0,  5,  0,\n-    0,  0,  6,  0,  0,  0,  0,  0,  0,  0,  7,  1,  0,  0,  0,  0,\n-    0,  0,  8,  9,  0,  0,  0,  0,  0,  0, 10,  0,  0, 10,  0,  0,\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10,  0,  0,  0, 10,\n-    0,  0,  0,  0,  0,  0, 11, 12,  0, 13,  0, 14, 15, 16,  0,  0,\n-    0,  0,  0,  1, 17, 18,  0, 19,  7,  1,  0,  0,  0, 20, 20,  7,\n-   20, 20, 20, 20, 20, 20, 20,  8, 21,  0, 22,  0,  7, 23, 24,  0,\n-   20, 20, 25,  0,  0,  0, 26, 27,  1,  7, 20, 20, 20, 20, 20,  1,\n-   28, 29, 30, 31,  0,  0, 20,  0,  0,  0,  0,  0,  0,  0, 10,  0,\n-    0,  0,  0,  0,  0,  0, 20, 20, 20,  1,  0,  0,  8, 21, 32,  4,\n-    0, 10,  0, 33,  7, 20, 20, 20,  0,  0,  0,  0,  8, 34, 34, 35,\n-   36, 34, 37,  0, 38,  1, 20, 20,  0,  0, 39,  0,  1,  1,  0,  8,\n-   21,  1, 20,  0,  0,  0,  1,  0,  0, 40,  1,  1,  0,  0,  8, 21,\n-    0,  1,  0,  1,  0,  1,  0,  0,  0,  0, 26, 34, 34, 34, 34, 34,\n-   34, 34, 34, 34, 21,  7, 20, 41, 34, 34, 34, 34, 34, 34, 34, 34,\n-   34, 21,  0, 42, 43, 44,  0, 45,  0,  8, 21,  0,  0,  0,  0,  0,\n-    0,  0,  0, 46,  7,  1, 10,  1,  0,  0,  0,  1, 20, 20,  1,  0,\n-    0,  0,  0,  0,  0,  0,  0,  0,  0, 26, 34,  9,  0,  0, 20, 20,\n-    1, 20, 20,  0,  0,  0,  0,  0,  0,  0, 26, 21,  0,  1,  0,  0,\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3, 47, 48,  0,  0,  0,\n-    0,  0,  0,  0,  0,  1,  2,  3,  4,  5,  6,  7,  7,  8,  7,  7,\n-    7,  7,  7,  7,  7,  7,  7,  7,  9, 10, 11, 11, 11, 11, 12, 13,\n-   13, 13, 13, 14, 15, 16, 17, 18, 19, 20, 21, 13, 22, 13, 13, 13,\n-   13, 23, 24, 24, 25, 26, 13, 13, 13, 27, 28, 29, 13, 30, 31, 32,\n-   33, 34, 35, 36,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n-    7,  7,  7,  7,  7,  7,  7,  7, 37,  7, 38, 39,  7, 40,  7,  7,\n-    7, 41, 13, 42,  7,  7, 43,  7, 44, 13, 13, 13, 13, 13, 13, 13,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n+   17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n+   17, 17, 17,237,  0,  1,  2,  2,  0,  3,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    5,  0,  0,  0,  0,  6,  7,  8,  9,  0,  0,  0, 10, 11, 12, 13,\n+   14, 15, 16, 17, 18, 19,  0,  0,  0,  0,  0,  0,  0,  0,  0, 20,\n+    0,  0, 21, 22,  0,  0,  0,  0, 23, 24, 25, 26,  0, 27,  0, 28,\n+   29, 30, 31, 32,  0,  0,  0,  0,  0,  0,  0, 33, 34, 35, 36,  0,\n+    0,  0,  0,  0, 37,  0,  0,  0,  0,  0,  0,  0,  0,  0, 38, 39,\n+    0,  0,  0,  0,  1,  2, 40, 41,  0,  1,  2,  2,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  2,  0,  0,  0,  0,\n+    0,  0,  3,  4,  0,  0,  5,  0,  0,  0,  6,  0,  0,  0,  0,  0,\n+    0,  0,  7,  1,  0,  0,  0,  0,  0,  0,  8,  9,  0,  0,  0,  0,\n+    0,  0, 10,  0,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0, 10,  0,  0,  0, 10,  0,  0,  0,  0,  0,  0, 11, 12,\n+    0, 13,  0, 14, 15, 16,  0,  0,  0,  0,  0,  1, 17, 18,  0, 19,\n+    7,  1,  0,  0,  0, 20, 20,  7, 20, 20, 20, 20, 20, 20, 20,  8,\n+   21,  0, 22,  0,  7, 23, 24,  0, 20, 20, 25,  0,  0,  0, 26, 27,\n+    1,  7, 20, 20, 20, 20, 20,  1, 28, 29, 30, 31,  0,  0, 20,  0,\n+    0,  0,  0,  0,  0,  0, 10,  0,  0,  0,  0,  0,  0,  0, 20, 20,\n+   20,  1,  0,  0,  8, 21, 32,  4,  0, 10,  0, 33,  7, 20, 20, 20,\n+    0,  0,  0,  0,  8, 34, 34, 35, 36, 34, 37,  0, 38,  1, 20, 20,\n+    0,  0, 39,  0,  1,  1,  0,  8, 21,  1, 20,  0,  0,  0,  1,  0,\n+    0, 40,  1,  1,  0,  0,  8, 21,  0,  1,  0,  1,  0,  1,  0,  0,\n+    0,  0, 26, 34, 34, 34, 34, 34, 34, 34, 34, 34, 21,  7, 20, 41,\n+   34, 34, 34, 34, 34, 34, 34, 34, 34, 21,  0, 42, 43, 44,  0, 45,\n+    0,  8, 21,  0,  0,  0,  0,  0,  0,  0,  0, 46,  7,  1, 10,  1,\n+    0,  0,  0,  1, 20, 20,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0, 26, 34,  9,  0,  0, 20, 20,  1, 20, 20,  0,  0,  0,  0,  0,\n+    0,  0, 26, 21,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  3, 47, 48,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,\n+    4,  5,  6,  7,  7,  8,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n+    9, 10, 11, 11, 11, 11, 12, 13, 13, 13, 13, 14, 15, 16, 17, 18,\n+   19, 20, 21, 13, 22, 13, 13, 13, 13, 23, 24, 24, 25, 26, 13, 13,\n+   13, 27, 28, 29, 13, 30, 31, 32, 33, 34, 35, 36,  7,  7,  7,  7,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n+   37,  7, 38, 39,  7, 40,  7,  7,  7, 41, 13, 42,  7,  7, 43,  7,\n+   44, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n@@ -1719,8 +1719,8 @@\n-   13, 13, 13, 13, 45,  0,  0,  1,  2,  2,  2,  3,  4,  5,  6,  7,\n-    8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\n-   24, 25, 26, 27, 28, 29, 30, 31, 32, 32, 33, 34, 35, 36, 37, 37,\n-   37, 37, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,\n-   51, 52,  2,  2, 53, 54, 55, 56, 57, 58, 59, 59, 59, 59, 60, 59,\n-   59, 59, 59, 59, 59, 59, 61, 61, 59, 59, 59, 59, 62, 63, 64, 65,\n-   66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 59, 70, 70,\n-   70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,\n+   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 45,  0,  0,  1,\n+    2,  2,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n+   16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,\n+   32, 32, 33, 34, 35, 36, 37, 37, 37, 37, 37, 38, 39, 40, 41, 42,\n+   43, 44, 45, 46, 47, 48, 49, 50, 51, 52,  2,  2, 53, 54, 55, 56,\n+   57, 58, 59, 59, 59, 59, 60, 59, 59, 59, 59, 59, 59, 59, 61, 61,\n+   59, 59, 59, 59, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,\n+   74, 75, 76, 77, 78, 59, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,\n@@ -1728,3 +1728,3 @@\n-   70, 79, 70, 70, 70, 70, 80, 80, 80, 80, 80, 80, 80, 80, 80, 81,\n-   82, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 32, 32,\n-   32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+   70, 70, 70, 70, 70, 70, 70, 70, 70, 79, 70, 70, 70, 70, 80, 80,\n+   80, 80, 80, 80, 80, 80, 80, 81, 82, 82, 83, 84, 85, 86, 87, 88,\n+   89, 90, 91, 92, 93, 94, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n@@ -1732,17 +1732,1 @@\n-   32, 32, 32, 32, 32, 95, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n-   96, 96, 96, 96, 96, 96, 96, 96, 70, 70, 97, 98, 99,100,101,101,\n-  102,103,104,105,106,107,108,109,110,111, 96,112,113,114,115,116,\n-  117,118,119,119,120,121,122,123,124,125,126,127,128,129,130,131,\n-  132, 96,133,134,135,136,137,138,139,140,141,142,143, 96,144,145,\n-   96,146,147,148,149, 96,150,151,152,153,154,155,156, 96,157,158,\n-  159,160, 96,161,162,163,164,164,164,164,164,164,164,165,166,164,\n-  167, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n-   96, 96, 96, 96, 96,168,169,169,169,169,169,169,169,169,170, 96,\n-   96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96,171,171,\n-  171,171,172, 96, 96, 96,173,173,173,173,174,175,176,177, 96, 96,\n-   96, 96,178,179,180,181,182,182,182,182,182,182,182,182,182,182,\n-  182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,\n-  182,182,182,182,182,183,182,182,182,182,182,182,184,184,184,185,\n-  186, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n-   96, 96, 96, 96, 96,187,188,189,190,191,191,192, 96, 96, 96, 96,\n-   96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96,193,194,\n+   32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 95, 96, 96,\n@@ -1750,9 +1734,25 @@\n-   96, 96, 96, 96,195,196, 59,197,198,199,200,201,202, 96,203,204,\n-  205, 59, 59,206, 59,207,208,208,208,208,208,209, 96, 96, 96, 96,\n-   96, 96, 96, 96,210, 96,211,212,213, 96, 96,214, 96, 96, 96,215,\n-   96, 96, 96, 96, 96,216,217,218,219, 96, 96, 96, 96, 96,220,221,\n-  222, 96,223,224, 96, 96,225,226, 59,227,228, 96, 59, 59, 59, 59,\n-   59, 59, 59,229,230,231,232,233, 59, 59,234,235, 59,236, 96, 96,\n-   96, 96, 96, 96, 96, 96, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,\n-   70, 70, 70,237, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,\n-   70, 70, 70, 70,238, 70,239, 70, 70, 70, 70, 70, 70, 70, 70, 70,\n+   70, 70, 97, 98, 99,100,101,101,102,103,104,105,106,107,108,109,\n+  110,111, 96,112,113,114,115,116,117,118,119,119,120,121,122,123,\n+  124,125,126,127,128,129,130,131,132, 96,133,134,135,136,137,138,\n+  139,140,141,142,143, 96,144,145, 96,146,147,148,149, 96,150,151,\n+  152,153,154,155,156, 96,157,158,159,160, 96,161,162,163,164,164,\n+  164,164,164,164,164,165,166,164,167, 96, 96, 96, 96, 96, 96, 96,\n+   96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96,168,169,169,\n+  169,169,169,169,169,169,170, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n+   96, 96, 96, 96, 96, 96,171,171,171,171,172, 96, 96, 96,173,173,\n+  173,173,174,175,176,177, 96, 96, 96, 96,178,179,180,181,182,182,\n+  182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,\n+  182,182,182,182,182,182,182,182,182,182,182,182,182,183,182,182,\n+  182,182,182,182,184,184,184,185,186, 96, 96, 96, 96, 96, 96, 96,\n+   96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96,187,188,189,\n+  190,191,191,192, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n+   96, 96, 96, 96, 96, 96,193,194, 96, 96, 96, 96, 96, 96, 96, 96,\n+   96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96,195,196, 59,197,\n+  198,199,200,201,202, 96,203,204,205, 59, 59,206, 59,207,208,208,\n+  208,208,208,209, 96, 96, 96, 96, 96, 96, 96, 96,210, 96,211,212,\n+  213, 96, 96,214, 96, 96, 96,215, 96, 96, 96, 96, 96,216,217,218,\n+  219, 96, 96, 96, 96, 96,220,221,222, 96,223,224, 96, 96,225,226,\n+   59,227,228, 96, 59, 59, 59, 59, 59, 59, 59,229,230,231,232,233,\n+   59, 59,234,235, 59,236, 96, 96, 96, 96, 96, 96, 96, 96, 70, 70,\n+   70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,237, 70, 70, 70, 70,\n+   70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,238, 70,239, 70,\n@@ -1760,147 +1760,147 @@\n-   70, 70, 70,240, 70, 70, 70, 70, 70, 70, 70, 70, 70,241, 96, 96,\n-   96, 96, 96, 96, 96, 96, 70, 70, 70, 70,242, 96, 96, 96, 96, 96,\n-   96, 96, 96, 96, 96, 96, 70, 70, 70, 70, 70, 70,243, 70, 70, 70,\n-   70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,244, 96, 96,\n-   96, 96, 96, 96, 96, 96,245, 96,246,247,  0,  1,  2,  2,  0,  1,\n-    2,  2,  2,  3,  4,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0, 19,\n-   19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,\n-   19,  0,  0,  0,  0,  0,  0,  0, 19,  0,  0,  0,  0,  0, 19, 19,\n-   19, 19, 19, 19, 19,  0, 19,  0,  0,  0,  0,  0,  0,  0, 19, 19,\n-   19, 19, 19,  0,  0,  0,  0,  0, 26, 26,  0,  0,  0,  0,  1,  1,\n-    1,  1,  1,  1,  1,  1,  9,  9,  9,  9,  0,  9,  9,  9,  2,  2,\n-    9,  9,  9,  9,  0,  9,  2,  2,  2,  2,  9,  0,  9,  0,  9,  9,\n-    9,  2,  9,  2,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n-    2,  9,  9,  9,  9,  9,  9,  9, 55, 55, 55, 55, 55, 55, 55, 55,\n-   55, 55, 55, 55, 55, 55,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,\n-    6,  6,  6,  1,  1,  6,  2,  4,  4,  4,  4,  4,  4,  4,  4,  4,\n-    4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  2,  4,  4,\n-    4,  2,  2,  4,  4,  4,  2, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n-   14, 14, 14, 14, 14, 14,  2,  2,  2,  2,  2,  2,  2,  2, 14, 14,\n-   14,  2,  2,  2,  2, 14, 14, 14, 14, 14, 14,  2,  2,  2,  3,  3,\n-    3,  3,  3,  0,  3,  3,  3,  3,  3,  3,  0,  3,  3,  3,  3,  3,\n-    3,  3,  3,  3,  3,  3,  3,  3,  3,  0,  3,  3,  3,  0,  0,  3,\n-    3,  3,  3,  3,  3,  3,  3,  3,  3,  1,  1,  1,  1,  1,  1,  1,\n-    1,  1,  1,  1,  3,  3,  1,  3,  3,  3,  3,  3,  3,  3, 37, 37,\n-   37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37,  2, 37, 37, 37,\n-   37,  2,  2, 37, 37, 37, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38,\n-    2,  2,  2,  2,  2,  2, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n-   64,  2,  2, 64, 64, 64, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,\n-   90, 90, 90, 90,  2,  2, 90, 90, 90, 90, 90, 90, 90,  2, 95, 95,\n-   95, 95, 95, 95, 95, 95, 95, 95, 95, 95,  2,  2, 95,  2, 37, 37,\n-   37,  2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  3,  3,  2,  3,  3,\n-    2,  2,  2,  2,  2,  2,  3,  3,  0,  3,  3,  3,  3,  3,  7,  7,\n-    7,  7,  7,  7,  7,  7,  7,  1,  1,  1,  1,  7,  7,  7,  7,  7,\n-    7,  7,  0,  0,  7,  7,  5,  5,  5,  5,  2,  5,  5,  5,  5,  5,\n-    5,  5,  5,  2,  2,  5,  5,  2,  2,  5,  5,  5,  5,  5,  5,  5,\n-    5,  5,  5,  5,  5,  5,  5,  2,  5,  5,  5,  5,  5,  5,  5,  2,\n-    5,  2,  2,  2,  5,  5,  5,  5,  2,  2,  5,  5,  5,  5,  5,  2,\n-    2,  5,  5,  5,  5,  2,  2,  2,  2,  2,  2,  2,  2,  5,  2,  2,\n-    2,  2,  5,  5,  2,  5,  5,  5,  5,  5,  2,  2,  5,  5,  5,  5,\n-    5,  5,  5,  5,  5,  2,  2, 11, 11, 11,  2, 11, 11, 11, 11, 11,\n-   11,  2,  2,  2,  2, 11, 11,  2,  2, 11, 11, 11, 11, 11, 11, 11,\n-   11, 11, 11, 11, 11, 11, 11,  2, 11, 11, 11, 11, 11, 11, 11,  2,\n-   11, 11,  2, 11, 11,  2, 11, 11,  2,  2, 11,  2, 11, 11, 11,  2,\n-    2, 11, 11, 11,  2,  2,  2, 11,  2,  2,  2,  2,  2,  2,  2, 11,\n-   11, 11, 11,  2, 11,  2,  2,  2,  2,  2,  2,  2, 11, 11, 11, 11,\n-   11, 11, 11, 11, 11,  2,  2, 10, 10, 10,  2, 10, 10, 10, 10, 10,\n-   10, 10, 10, 10,  2, 10, 10, 10,  2, 10, 10, 10, 10, 10, 10, 10,\n-   10, 10, 10, 10, 10, 10, 10,  2, 10, 10, 10, 10, 10, 10, 10,  2,\n-   10, 10,  2, 10, 10, 10, 10, 10,  2,  2, 10, 10, 10, 10, 10, 10,\n-    2, 10, 10, 10,  2,  2, 10,  2,  2,  2,  2,  2,  2,  2, 10, 10,\n-   10, 10,  2,  2, 10, 10, 10, 10,  2,  2,  2,  2,  2,  2,  2, 10,\n-   10, 10, 10, 10, 10, 10,  2, 21, 21, 21,  2, 21, 21, 21, 21, 21,\n-   21, 21, 21,  2,  2, 21, 21,  2,  2, 21, 21, 21, 21, 21, 21, 21,\n-   21, 21, 21, 21, 21, 21, 21,  2, 21, 21, 21, 21, 21, 21, 21,  2,\n-   21, 21,  2, 21, 21, 21, 21, 21,  2,  2, 21, 21, 21, 21, 21,  2,\n-    2, 21, 21, 21,  2,  2,  2,  2,  2,  2,  2, 21, 21, 21,  2,  2,\n-    2,  2, 21, 21,  2, 21, 21, 21, 21, 21,  2,  2, 21, 21,  2,  2,\n-   22, 22,  2, 22, 22, 22, 22, 22, 22,  2,  2,  2, 22, 22, 22,  2,\n-   22, 22, 22, 22,  2,  2,  2, 22, 22,  2, 22,  2, 22, 22,  2,  2,\n-    2, 22, 22,  2,  2,  2, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-    2,  2,  2,  2, 22, 22, 22,  2,  2,  2,  2,  2,  2, 22,  2,  2,\n-    2,  2,  2,  2, 22, 22, 22, 22, 22,  2,  2,  2,  2,  2, 23, 23,\n-   23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  2, 23, 23, 23,  2,\n-   23, 23, 23, 23, 23, 23, 23, 23,  2,  2, 23, 23, 23, 23, 23,  2,\n-   23, 23, 23, 23,  2,  2,  2,  2,  2,  2,  2, 23, 23,  2, 23, 23,\n-   23,  2,  2, 23,  2,  2, 23, 23, 23, 23,  2,  2, 23, 23,  2,  2,\n-    2,  2,  2,  2,  2, 23, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,\n-   16, 16, 16,  2, 16, 16, 16,  2, 16, 16, 16, 16, 16, 16, 16, 16,\n-   16, 16,  2, 16, 16, 16, 16, 16,  2,  2, 16, 16, 16, 16, 16,  2,\n-   16, 16, 16, 16,  2,  2,  2,  2,  2,  2,  2, 16, 16,  2, 16, 16,\n-   16, 16,  2,  2, 16, 16,  2, 16, 16, 16,  2,  2,  2,  2, 20, 20,\n-   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,  2, 20, 20, 20,  2,\n-   20, 20, 20, 20, 20, 20,  2,  2,  2,  2, 20, 20, 20, 20, 20, 20,\n-   20, 20,  2,  2, 20, 20,  2, 36, 36, 36,  2, 36, 36, 36, 36, 36,\n-   36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,  2,  2,  2,\n-   36, 36, 36, 36, 36, 36, 36, 36,  2, 36, 36, 36, 36, 36, 36, 36,\n-   36, 36,  2, 36,  2,  2,  2,  2, 36,  2,  2,  2,  2, 36, 36, 36,\n-   36, 36, 36,  2, 36,  2,  2,  2,  2,  2,  2,  2, 36, 36,  2,  2,\n-   36, 36, 36,  2,  2,  2,  2, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n-   24, 24, 24, 24, 24, 24, 24, 24, 24,  2,  2,  2,  2,  0, 24, 24,\n-   24, 24,  2,  2,  2,  2,  2, 18, 18,  2, 18,  2, 18, 18, 18, 18,\n-   18,  2, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,\n-   18, 18,  2, 18,  2, 18, 18, 18, 18, 18, 18, 18,  2,  2, 18, 18,\n-   18, 18, 18,  2, 18,  2, 18, 18, 18, 18, 18, 18, 18,  2, 18, 18,\n-    2,  2, 18, 18, 18, 18, 25, 25, 25, 25, 25, 25, 25, 25,  2, 25,\n-   25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,  2,  2,  2, 25, 25,\n-   25, 25, 25,  2, 25, 25, 25, 25, 25, 25, 25,  0,  0,  0,  0, 25,\n-   25,  2,  2,  2,  2,  2, 33, 33, 33, 33, 33, 33, 33, 33,  8,  8,\n-    8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  2,  8,  2,  2,\n-    2,  2,  2,  8,  2,  2,  8,  8,  8,  0,  8,  8,  8,  8, 12, 12,\n-   12, 12, 12, 12, 12, 12, 30, 30, 30, 30, 30, 30, 30, 30, 30,  2,\n-   30, 30, 30, 30,  2,  2, 30, 30, 30, 30, 30, 30, 30,  2, 30, 30,\n-   30,  2,  2, 30, 30, 30, 30, 30, 30, 30, 30,  2,  2,  2, 30, 30,\n-    2,  2,  2,  2,  2,  2, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,\n-   29, 29, 29, 29,  2,  2, 28, 28, 28, 28, 28, 28, 28, 28, 34, 34,\n-   34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,  2,  2,  2, 35, 35,\n-   35, 35, 35, 35, 35, 35, 35, 35, 35,  0,  0,  0, 35, 35, 35,  2,\n-    2,  2,  2,  2,  2,  2, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,\n-   45, 45, 45, 45,  2,  2,  2,  2,  2,  2,  2,  2,  2, 45, 44, 44,\n-   44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44,  0,  0,  2, 43, 43,\n-   43, 43, 43, 43, 43, 43, 43, 43, 43, 43,  2,  2,  2,  2, 46, 46,\n-   46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46,  2, 46, 46, 46,  2,\n-   46, 46,  2,  2,  2,  2, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,\n-   31, 31, 31, 31,  2,  2, 31, 31,  2,  2,  2,  2,  2,  2, 32, 32,\n-    0,  0, 32,  0, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    2,  2,  2,  2,  2,  2, 32,  2,  2,  2,  2,  2,  2,  2, 32, 32,\n-   32,  2,  2,  2,  2,  2, 28, 28, 28, 28, 28, 28,  2,  2, 48, 48,\n-   48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,  2, 48, 48,\n-   48, 48,  2,  2,  2,  2, 48,  2,  2,  2, 48, 48, 48, 48, 52, 52,\n-   52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52,  2,  2, 52, 52,\n-   52, 52, 52,  2,  2,  2, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58,\n-   58, 58,  2,  2,  2,  2, 58, 58,  2,  2,  2,  2,  2,  2, 58, 58,\n-   58,  2,  2,  2, 58, 58, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54,\n-   54, 54,  2,  2, 54, 54, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91,\n-   91, 91, 91, 91, 91,  2, 91, 91, 91, 91, 91,  2,  2, 91, 91, 91,\n-    2,  2,  2,  2,  2,  2, 91, 91, 91, 91, 91, 91,  2,  2,  1,  1,\n-    1,  1,  1,  1,  1,  2, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,\n-   62, 62, 62,  2,  2,  2, 62, 62, 62, 62, 62, 62, 62,  2, 76, 76,\n-   76, 76, 76, 76, 76, 76, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93,\n-   93, 93,  2,  2,  2,  2,  2,  2,  2,  2, 93, 93, 93, 93, 70, 70,\n-   70, 70, 70, 70, 70, 70,  2,  2,  2, 70, 70, 70, 70, 70, 70, 70,\n-    2,  2,  2, 70, 70, 70, 73, 73, 73, 73, 73, 73, 73, 73,  6,  2,\n-    2,  2,  2,  2,  2,  2,  8,  8,  8,  2,  2,  8,  8,  8,  1,  1,\n-    1,  0,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  0,\n-    0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  1,  1,\n-    0,  2,  2,  2,  2,  2, 19, 19, 19, 19, 19, 19,  9,  9,  9,  9,\n-    9,  6, 19, 19, 19, 19, 19, 19, 19, 19, 19,  9,  9,  9,  9,  9,\n-   19, 19, 19, 19,  9,  9,  9,  9,  9, 19, 19, 19, 19, 19,  6, 19,\n-   19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,  9,  9,  9,\n-    9,  9,  9,  9,  2,  2,  2,  9,  2,  9,  2,  9,  2,  9,  9,  9,\n-    9,  9,  9,  2,  9,  9,  9,  9,  9,  9,  2,  2,  9,  9,  9,  9,\n-    9,  9,  2,  9,  9,  9,  2,  2,  9,  9,  9,  2,  9,  9,  9,  9,\n-    9,  9,  9,  9,  9,  2,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,\n-    0,  0,  0,  2,  0,  0,  0, 19,  2,  2,  0,  0,  0,  0,  0,  0,\n-    0,  0,  0,  0,  0, 19,  0,  0,  0,  0,  0,  0,  0,  2, 19, 19,\n-   19, 19, 19,  2,  2,  2,  0,  2,  2,  2,  2,  2,  2,  2,  1,  2,\n-    2,  2,  2,  2,  2,  2,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,\n-   19, 19,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 19,  0, 19,  0,\n-    0,  0,  2,  2,  2,  2,  0,  0,  0,  2,  2,  2,  2,  2, 27, 27,\n-   27, 27, 27, 27, 27, 27,  0,  0,  0,  0,  2,  2,  0,  0,  0,  0,\n-    0,  0,  0,  0,  2,  0, 56, 56, 56, 56, 56, 56, 56, 56, 55, 55,\n-   55, 55,  2,  2,  2,  2,  2, 55, 55, 55, 55, 55, 55, 55, 61, 61,\n-   61, 61, 61, 61, 61, 61,  2,  2,  2,  2,  2,  2,  2, 61, 61,  2,\n-    2,  2,  2,  2,  2,  2,  0,  0,  0,  0,  0,  0,  2,  2, 13, 13,\n-   13, 13, 13, 13, 13, 13, 13, 13,  2, 13, 13, 13, 13, 13, 13, 13,\n-   13, 13,  2,  2,  2,  2, 13, 13, 13, 13, 13, 13,  2,  2,  0,  0,\n-    0,  0,  2,  2,  2,  2,  0,  0,  0,  0,  0, 13,  0, 13,  0, 13,\n+   70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,240, 70, 70, 70, 70,\n+   70, 70, 70, 70, 70,241, 70, 70, 70, 70,242, 96, 96, 96, 70, 70,\n+   70, 70,243, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 70, 70,\n+   70, 70, 70, 70,244, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,\n+   70, 70, 70, 70, 70,245, 96, 96, 96, 96, 96, 96, 96, 96,246, 96,\n+  247,248,  0,  1,  2,  2,  0,  1,  2,  2,  2,  3,  4,  5,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0, 19, 19, 19, 19, 19, 19, 19, 19, 19,\n+   19, 19, 19, 19, 19, 19, 19, 19, 19,  0,  0,  0,  0,  0,  0,  0,\n+   19,  0,  0,  0,  0,  0, 19, 19, 19, 19, 19, 19, 19,  0, 19,  0,\n+    0,  0,  0,  0,  0,  0, 19, 19, 19, 19, 19,  0,  0,  0,  0,  0,\n+   26, 26,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9,\n+    9,  9,  0,  9,  9,  9,  2,  2,  9,  9,  9,  9,  0,  9,  2,  2,\n+    2,  2,  9,  0,  9,  0,  9,  9,  9,  2,  9,  2,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  2,  9,  9,  9,  9,  9,  9,  9,\n+   55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55,  6,  6,\n+    6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  1,  1,  6,  2,  4,\n+    4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,\n+    4,  4,  4,  4,  4,  2,  4,  4,  4,  2,  2,  4,  4,  4,  2, 14,\n+   14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  2,  2,\n+    2,  2,  2,  2,  2,  2, 14, 14, 14,  2,  2,  2,  2, 14, 14, 14,\n+   14, 14, 14,  2,  2,  2,  3,  3,  3,  3,  3,  0,  3,  3,  3,  3,\n+    3,  3,  0,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,\n+    3,  0,  3,  3,  3,  0,  0,  3,  3,  3,  3,  3,  3,  3,  3,  3,\n+    3,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  3,  3,  1,  3,\n+    3,  3,  3,  3,  3,  3, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37,\n+   37, 37, 37, 37,  2, 37, 37, 37, 37,  2,  2, 37, 37, 37, 38, 38,\n+   38, 38, 38, 38, 38, 38, 38, 38,  2,  2,  2,  2,  2,  2, 64, 64,\n+   64, 64, 64, 64, 64, 64, 64, 64, 64,  2,  2, 64, 64, 64, 90, 90,\n+   90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,  2,  2, 90, 90,\n+   90, 90, 90, 90, 90,  2, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95,\n+   95, 95,  2,  2, 95,  2, 37, 37, 37,  2,  2,  2,  2,  2,  3,  3,\n+    3,  3,  3,  3,  3,  2,  3,  3,  2,  2,  2,  2,  2,  2,  3,  3,\n+    0,  3,  3,  3,  3,  3,  7,  7,  7,  7,  7,  7,  7,  7,  7,  1,\n+    1,  1,  1,  7,  7,  7,  7,  7,  7,  7,  0,  0,  7,  7,  5,  5,\n+    5,  5,  2,  5,  5,  5,  5,  5,  5,  5,  5,  2,  2,  5,  5,  2,\n+    2,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  2,\n+    5,  5,  5,  5,  5,  5,  5,  2,  5,  2,  2,  2,  5,  5,  5,  5,\n+    2,  2,  5,  5,  5,  5,  5,  2,  2,  5,  5,  5,  5,  2,  2,  2,\n+    2,  2,  2,  2,  2,  5,  2,  2,  2,  2,  5,  5,  2,  5,  5,  5,\n+    5,  5,  2,  2,  5,  5,  5,  5,  5,  5,  5,  5,  5,  2,  2, 11,\n+   11, 11,  2, 11, 11, 11, 11, 11, 11,  2,  2,  2,  2, 11, 11,  2,\n+    2, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,  2,\n+   11, 11, 11, 11, 11, 11, 11,  2, 11, 11,  2, 11, 11,  2, 11, 11,\n+    2,  2, 11,  2, 11, 11, 11,  2,  2, 11, 11, 11,  2,  2,  2, 11,\n+    2,  2,  2,  2,  2,  2,  2, 11, 11, 11, 11,  2, 11,  2,  2,  2,\n+    2,  2,  2,  2, 11, 11, 11, 11, 11, 11, 11, 11, 11,  2,  2, 10,\n+   10, 10,  2, 10, 10, 10, 10, 10, 10, 10, 10, 10,  2, 10, 10, 10,\n+    2, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  2,\n+   10, 10, 10, 10, 10, 10, 10,  2, 10, 10,  2, 10, 10, 10, 10, 10,\n+    2,  2, 10, 10, 10, 10, 10, 10,  2, 10, 10, 10,  2,  2, 10,  2,\n+    2,  2,  2,  2,  2,  2, 10, 10, 10, 10,  2,  2, 10, 10, 10, 10,\n+    2,  2,  2,  2,  2,  2,  2, 10, 10, 10, 10, 10, 10, 10,  2, 21,\n+   21, 21,  2, 21, 21, 21, 21, 21, 21, 21, 21,  2,  2, 21, 21,  2,\n+    2, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,  2,\n+   21, 21, 21, 21, 21, 21, 21,  2, 21, 21,  2, 21, 21, 21, 21, 21,\n+    2,  2, 21, 21, 21, 21, 21,  2,  2, 21, 21, 21,  2,  2,  2,  2,\n+    2,  2,  2, 21, 21, 21,  2,  2,  2,  2, 21, 21,  2, 21, 21, 21,\n+   21, 21,  2,  2, 21, 21,  2,  2, 22, 22,  2, 22, 22, 22, 22, 22,\n+   22,  2,  2,  2, 22, 22, 22,  2, 22, 22, 22, 22,  2,  2,  2, 22,\n+   22,  2, 22,  2, 22, 22,  2,  2,  2, 22, 22,  2,  2,  2, 22, 22,\n+   22, 22, 22, 22, 22, 22, 22, 22,  2,  2,  2,  2, 22, 22, 22,  2,\n+    2,  2,  2,  2,  2, 22,  2,  2,  2,  2,  2,  2, 22, 22, 22, 22,\n+   22,  2,  2,  2,  2,  2, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n+   23, 23, 23,  2, 23, 23, 23,  2, 23, 23, 23, 23, 23, 23, 23, 23,\n+    2,  2, 23, 23, 23, 23, 23,  2, 23, 23, 23, 23,  2,  2,  2,  2,\n+    2,  2,  2, 23, 23,  2, 23, 23, 23,  2,  2, 23,  2,  2, 23, 23,\n+   23, 23,  2,  2, 23, 23,  2,  2,  2,  2,  2,  2,  2, 23, 16, 16,\n+   16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,  2, 16, 16, 16,  2,\n+   16, 16, 16, 16, 16, 16, 16, 16, 16, 16,  2, 16, 16, 16, 16, 16,\n+    2,  2, 16, 16, 16, 16, 16,  2, 16, 16, 16, 16,  2,  2,  2,  2,\n+    2,  2,  2, 16, 16,  2, 16, 16, 16, 16,  2,  2, 16, 16,  2, 16,\n+   16, 16,  2,  2,  2,  2, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20,  2, 20, 20, 20,  2, 20, 20, 20, 20, 20, 20,  2,  2,\n+    2,  2, 20, 20, 20, 20, 20, 20, 20, 20,  2,  2, 20, 20,  2, 36,\n+   36, 36,  2, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,\n+   36, 36, 36, 36, 36,  2,  2,  2, 36, 36, 36, 36, 36, 36, 36, 36,\n+    2, 36, 36, 36, 36, 36, 36, 36, 36, 36,  2, 36,  2,  2,  2,  2,\n+   36,  2,  2,  2,  2, 36, 36, 36, 36, 36, 36,  2, 36,  2,  2,  2,\n+    2,  2,  2,  2, 36, 36,  2,  2, 36, 36, 36,  2,  2,  2,  2, 24,\n+   24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n+   24,  2,  2,  2,  2,  0, 24, 24, 24, 24,  2,  2,  2,  2,  2, 18,\n+   18,  2, 18,  2, 18, 18, 18, 18, 18,  2, 18, 18, 18, 18, 18, 18,\n+   18, 18, 18, 18, 18, 18, 18, 18, 18, 18,  2, 18,  2, 18, 18, 18,\n+   18, 18, 18, 18,  2,  2, 18, 18, 18, 18, 18,  2, 18,  2, 18, 18,\n+   18, 18, 18, 18, 18,  2, 18, 18,  2,  2, 18, 18, 18, 18, 25, 25,\n+   25, 25, 25, 25, 25, 25,  2, 25, 25, 25, 25, 25, 25, 25, 25, 25,\n+   25, 25, 25,  2,  2,  2, 25, 25, 25, 25, 25,  2, 25, 25, 25, 25,\n+   25, 25, 25,  0,  0,  0,  0, 25, 25,  2,  2,  2,  2,  2, 33, 33,\n+   33, 33, 33, 33, 33, 33,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,\n+    8,  8,  8,  8,  2,  8,  2,  2,  2,  2,  2,  8,  2,  2,  8,  8,\n+    8,  0,  8,  8,  8,  8, 12, 12, 12, 12, 12, 12, 12, 12, 30, 30,\n+   30, 30, 30, 30, 30, 30, 30,  2, 30, 30, 30, 30,  2,  2, 30, 30,\n+   30, 30, 30, 30, 30,  2, 30, 30, 30,  2,  2, 30, 30, 30, 30, 30,\n+   30, 30, 30,  2,  2,  2, 30, 30,  2,  2,  2,  2,  2,  2, 29, 29,\n+   29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,  2,  2, 28, 28,\n+   28, 28, 28, 28, 28, 28, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n+   34, 34, 34,  2,  2,  2, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35,  0,  0,  0, 35, 35, 35,  2,  2,  2,  2,  2,  2,  2, 45, 45,\n+   45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2, 45, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44,\n+   44, 44, 44,  0,  0,  2, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43,\n+   43, 43,  2,  2,  2,  2, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46,\n+   46, 46, 46,  2, 46, 46, 46,  2, 46, 46,  2,  2,  2,  2, 31, 31,\n+   31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,  2,  2, 31, 31,\n+    2,  2,  2,  2,  2,  2, 32, 32,  0,  0, 32,  0, 32, 32, 32, 32,\n+   32, 32, 32, 32, 32, 32, 32, 32,  2,  2,  2,  2,  2,  2, 32,  2,\n+    2,  2,  2,  2,  2,  2, 32, 32, 32,  2,  2,  2,  2,  2, 28, 28,\n+   28, 28, 28, 28,  2,  2, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,\n+   48, 48, 48, 48, 48,  2, 48, 48, 48, 48,  2,  2,  2,  2, 48,  2,\n+    2,  2, 48, 48, 48, 48, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52,\n+   52, 52, 52, 52,  2,  2, 52, 52, 52, 52, 52,  2,  2,  2, 58, 58,\n+   58, 58, 58, 58, 58, 58, 58, 58, 58, 58,  2,  2,  2,  2, 58, 58,\n+    2,  2,  2,  2,  2,  2, 58, 58, 58,  2,  2,  2, 58, 58, 54, 54,\n+   54, 54, 54, 54, 54, 54, 54, 54, 54, 54,  2,  2, 54, 54, 91, 91,\n+   91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91,  2, 91, 91,\n+   91, 91, 91,  2,  2, 91, 91, 91,  2,  2,  2,  2,  2,  2, 91, 91,\n+   91, 91, 91, 91,  2,  2,  1,  1,  1,  1,  1,  1,  1,  2, 62, 62,\n+   62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,  2,  2,  2, 62, 62,\n+   62, 62, 62, 62, 62,  2, 76, 76, 76, 76, 76, 76, 76, 76, 93, 93,\n+   93, 93, 93, 93, 93, 93, 93, 93, 93, 93,  2,  2,  2,  2,  2,  2,\n+    2,  2, 93, 93, 93, 93, 70, 70, 70, 70, 70, 70, 70, 70,  2,  2,\n+    2, 70, 70, 70, 70, 70, 70, 70,  2,  2,  2, 70, 70, 70, 73, 73,\n+   73, 73, 73, 73, 73, 73,  6,  2,  2,  2,  2,  2,  2,  2,  8,  8,\n+    8,  2,  2,  8,  8,  8,  1,  1,  1,  0,  1,  1,  1,  1,  1,  0,\n+    1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  1,  0,  0,  0,  0,\n+    0,  0,  1,  0,  0,  0,  1,  1,  0,  2,  2,  2,  2,  2, 19, 19,\n+   19, 19, 19, 19,  9,  9,  9,  9,  9,  6, 19, 19, 19, 19, 19, 19,\n+   19, 19, 19,  9,  9,  9,  9,  9, 19, 19, 19, 19,  9,  9,  9,  9,\n+    9, 19, 19, 19, 19, 19,  6, 19, 19, 19, 19, 19, 19, 19, 19, 19,\n+   19, 19, 19, 19, 19,  9,  9,  9,  9,  9,  9,  9,  2,  2,  2,  9,\n+    2,  9,  2,  9,  2,  9,  9,  9,  9,  9,  9,  2,  9,  9,  9,  9,\n+    9,  9,  2,  2,  9,  9,  9,  9,  9,  9,  2,  9,  9,  9,  2,  2,\n+    9,  9,  9,  2,  9,  9,  9,  9,  9,  9,  9,  9,  9,  2,  0,  0,\n+    0,  0,  1,  1,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0, 19,\n+    2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 19,  0,  0,\n+    0,  0,  0,  0,  0,  2, 19, 19, 19, 19, 19,  2,  2,  2,  0,  2,\n+    2,  2,  2,  2,  2,  2,  1,  2,  2,  2,  2,  2,  2,  2,  0,  0,\n+    0,  0,  0,  0,  9,  0,  0,  0, 19, 19,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0, 19,  0, 19,  0,  0,  0,  2,  2,  2,  2,  0,  0,\n+    0,  2,  2,  2,  2,  2, 27, 27, 27, 27, 27, 27, 27, 27,  0,  0,\n+    0,  0,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0, 56, 56,\n+   56, 56, 56, 56, 56, 56, 55, 55, 55, 55,  2,  2,  2,  2,  2, 55,\n+   55, 55, 55, 55, 55, 55, 61, 61, 61, 61, 61, 61, 61, 61,  2,  2,\n+    2,  2,  2,  2,  2, 61, 61,  2,  2,  2,  2,  2,  2,  2,  0,  0,\n+    0,  0,  0,  0,  2,  2, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n+    2, 13, 13, 13, 13, 13, 13, 13, 13, 13,  2,  2,  2,  2, 13, 13,\n+   13, 13, 13, 13,  2,  2,  0,  0,  0,  0,  0, 13,  0, 13,  0, 13,\n@@ -1913,1 +1913,2 @@\n-   12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,  2, 12, 12,\n+   12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,  2,  0,  0,\n+    0,  0,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  0, 12, 12,\n@@ -2193,1 +2194,1 @@\n-_hb_ucd_u16[9320] =\n+_hb_ucd_u16[9344] =\n@@ -2236,3 +2237,3 @@\n-   209, 322, 209, 209, 209, 209, 209, 323, 209, 209, 209, 209, 209, 324, 140, 325,\n-   326, 327, 328, 329, 136,  48,  48,  48,  48, 330, 178,  48,  48,  48,  48, 331,\n-   332,  48,  48, 136,  48,  48,  48,  48, 200, 333,  48,  48, 209, 209, 323,  48,\n+   209, 322, 209, 209, 209, 209, 209, 323, 209, 209, 209, 209, 209, 324, 140, 209,\n+   325, 326, 327, 328, 136,  48,  48,  48,  48, 329, 178,  48,  48,  48,  48, 330,\n+   331,  48,  48, 136,  48,  48,  48,  48, 200, 332,  48,  48, 209, 209, 333,  48,\n@@ -2309,7 +2310,7 @@\n-   209, 209, 325, 209, 209, 209, 209, 209, 209, 323, 334, 669, 669, 669, 209, 324,\n-   670, 209, 209, 209, 209, 209, 209, 209, 209, 209, 671, 140, 140, 140, 672, 209,\n-   673, 209, 209, 325, 674, 675, 324, 140, 209, 209, 209, 209, 209, 209, 209, 676,\n-   209, 209, 209, 209, 209, 677, 426, 426, 209, 209, 209, 209, 209, 209, 209, 678,\n-   209, 209, 209, 209, 209, 176, 325, 427, 325, 209, 209, 209, 679, 176, 209, 209,\n-   679, 209, 671, 675, 140, 140, 140, 140, 209, 209, 209, 209, 209, 323, 671, 426,\n-   674, 209, 209, 680, 681, 325, 674, 674, 209, 682, 209, 209, 288, 140, 140, 192,\n+   209, 209, 669, 209, 209, 209, 209, 209, 209, 323, 334, 670, 670, 670, 209, 324,\n+   671, 209, 209, 209, 209, 209, 209, 209, 209, 209, 672, 140, 140, 140, 673, 209,\n+   674, 209, 209, 669, 675, 676, 324, 140, 209, 209, 209, 209, 209, 209, 209, 677,\n+   209, 209, 209, 209, 209, 678, 426, 426, 209, 209, 209, 209, 209, 209, 209, 679,\n+   209, 209, 209, 209, 209, 176, 669, 427, 669, 209, 209, 209, 680, 176, 209, 209,\n+   680, 209, 672, 676, 140, 140, 140, 140, 209, 209, 209, 209, 209, 323, 672, 426,\n+   675, 209, 209, 681, 682, 669, 675, 675, 209, 683, 209, 209, 288, 140, 140, 192,\n@@ -2318,63 +2319,64 @@\n-    48,  48,  48,  48,  48,  48, 100, 140,  48, 204, 140, 140, 140, 140, 140, 140,\n-    48,  48,  48,  48,  71,  48,  48,  48,  48,  48,  48, 140, 140, 140, 140, 140,\n-   683, 140, 570, 570, 570, 570, 570, 570,  32,  32,  32,  32,  32,  32,  32,  32,\n-    32,  32,  32,  32,  32,  32,  32, 140, 391, 391, 391, 391, 391, 391, 391, 684,\n-   391, 391, 391, 391, 391, 391, 391, 685,   0,   0,   0,   0,   0,   0,   0,   0,\n-     1,   2,   2,   3,   1,   2,   2,   3,   0,   0,   0,   0,   0,   4,   0,   4,\n-     2,   2,   5,   2,   2,   2,   5,   2,   2,   2,   2,   2,   2,   2,   2,   2,\n-     2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   6,\n-     0,   0,   0,   0,   7,   8,   0,   0,   9,   9,   9,   9,   9,   9,   9,   9,\n-     9,   9,   9,   9,   9,   9,  10,  11,  12,  13,  14,  14,  15,  14,  14,  14,\n-    14,  14,  14,  14,  16,  17,  14,  14,  18,  18,  18,  18,  18,  18,  18,  18,\n-    18,  18,  18,  18,  18,  18,  18,  18,  19,  18,  18,  18,  18,  18,  18,  18,\n-    18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  20,  21,\n-    21,  21,  22,  20,  21,  21,  21,  21,  21,  23,  24,  25,  25,  25,  25,  25,\n-    25,  26,  25,  25,  25,  27,  28,  26,  29,  30,  31,  32,  31,  31,  31,  31,\n-    33,  34,  35,  31,  31,  31,  36,  31,  31,  31,  31,  31,  31,  31,  31,  31,\n-    31,  31,  31,  29,  31,  31,  31,  31,  37,  38,  37,  37,  37,  37,  37,  37,\n-    37,  39,  31,  31,  31,  31,  31,  31,  40,  40,  40,  40,  40,  40,  41,  26,\n-    42,  42,  42,  42,  42,  42,  42,  43,  44,  44,  44,  44,  44,  45,  44,  46,\n-    47,  47,  47,  48,  37,  49,  31,  31,  31,  50,  51,  31,  31,  31,  31,  31,\n-    31,  31,  31,  31,  52,  31,  31,  31,  53,  53,  53,  53,  53,  53,  53,  53,\n-    53,  53,  54,  53,  55,  53,  53,  53,  56,  57,  58,  59,  59,  60,  61,  62,\n-    57,  63,  64,  65,  66,  59,  59,  67,  68,  69,  70,  71,  71,  72,  73,  74,\n-    69,  75,  76,  77,  78,  71,  79,  26,  80,  81,  82,  83,  83,  84,  85,  86,\n-    81,  87,  88,  26,  89,  83,  90,  91,  92,  93,  94,  95,  95,  96,  97,  98,\n-    93,  99, 100, 101, 102,  95,  95,  26, 103, 104, 105, 106, 107, 104, 108, 109,\n-   104, 105, 110,  26, 111, 108, 108, 112, 113, 114, 115, 113, 113, 115, 113, 116,\n-   114, 117, 118, 119, 120, 113, 121, 113, 122, 123, 124, 122, 122, 124, 125, 126,\n-   123, 127, 128, 128, 129, 122, 130,  26, 131, 132, 133, 131, 131, 131, 131, 131,\n-   132, 133, 134, 131, 135, 131, 131, 131, 136, 137, 138, 139, 137, 137, 140, 141,\n-   138, 142, 143, 137, 144, 137, 145,  26, 146, 147, 147, 147, 147, 147, 147, 148,\n-   147, 147, 147, 149,  26,  26,  26,  26, 150, 151, 152, 152, 153, 152, 152, 154,\n-   155, 156, 152, 157,  26,  26,  26,  26, 158, 158, 158, 158, 158, 158, 158, 158,\n-   158, 159, 158, 158, 158, 160, 159, 158, 158, 158, 158, 159, 158, 158, 158, 161,\n-   158, 161, 162, 163,  26,  26,  26,  26, 164, 164, 164, 164, 164, 164, 164, 164,\n-   164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 165, 165, 165, 165,\n-   166, 167, 165, 165, 165, 165, 165, 168, 169, 169, 169, 169, 169, 169, 169, 169,\n-   169, 169, 169, 169, 169, 169, 169, 169, 170, 170, 170, 170, 170, 170, 170, 170,\n-   170, 171, 172, 171, 170, 170, 170, 170, 170, 171, 170, 170, 170, 170, 171, 172,\n-   171, 170, 172, 170, 170, 170, 170, 170, 170, 170, 171, 170, 170, 170, 170, 170,\n-   170, 170, 170, 173, 170, 170, 170, 174, 170, 170, 170, 175, 176, 176, 176, 176,\n-   176, 176, 176, 176, 176, 176, 177, 177, 178, 178, 178, 178, 178, 178, 178, 178,\n-   178, 178, 178, 178, 178, 178, 178, 178, 179, 179, 179, 180, 181, 181, 181, 181,\n-   181, 181, 181, 181, 181, 182, 181, 183, 184, 184, 185, 186, 187, 187, 188,  26,\n-   189, 189, 190,  26, 191, 192, 193,  26, 194, 194, 194, 194, 194, 194, 194, 194,\n-   194, 194, 194, 195, 194, 196, 194, 196, 197, 198, 198, 199, 198, 198, 198, 198,\n-   198, 198, 198, 198, 198, 198, 198, 200, 198, 198, 198, 198, 198, 201, 178, 178,\n-   178, 178, 178, 178, 178, 178, 202,  26, 203, 203, 203, 204, 203, 205, 203, 205,\n-   206, 203, 207, 207, 207, 208, 209,  26, 210, 210, 210, 210, 210, 211, 210, 210,\n-   210, 212, 210, 213, 194, 194, 194, 194, 214, 214, 214, 215, 216, 216, 216, 216,\n-   216, 216, 216, 217, 216, 216, 216, 218, 216, 219, 216, 219, 216, 220,   9,   9,\n-     9, 221,  26,  26,  26,  26,  26,  26, 222, 222, 222, 222, 222, 222, 222, 222,\n-   222, 223, 222, 222, 222, 222, 222, 224, 225, 225, 225, 225, 225, 225, 225, 225,\n-   226, 226, 226, 226, 226, 226, 227, 228, 229, 229, 229, 229, 229, 229, 229, 230,\n-   229, 231, 232, 232, 232, 232, 232, 232,  18, 233, 165, 165, 165, 165, 165, 234,\n-   225,  26, 235,   9, 236, 237, 238, 239,   2,   2,   2,   2, 240, 241,   2,   2,\n-     2,   2,   2, 242, 243, 244,   2, 245,   2,   2,   2,   2,   2,   2,   2, 246,\n-     9,   9,   9,   9,   9,   9,   9,   9,  14,  14, 247, 247,  14,  14,  14,  14,\n-   247, 247,  14, 248,  14,  14,  14, 247,  14,  14,  14,  14,  14,  14, 249,  14,\n-   249,  14, 250, 251,  14,  14, 252, 253,   0, 254,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0, 255,   0, 256, 257,   0, 258,   2, 259,   0,   0,   0,   0,\n-   260,  26,   9,   9,   9,   9, 261,  26,   0,   0,   0,   0, 262, 263,   4,   0,\n-     0, 264,   0,   0,   2,   2,   2,   2,   2, 265,   0,   0,   0,   0,   0,   0,\n+    48,  48,  48,  48,  48,  48, 100,  48,  48,  48,  48,  48,  48, 204, 140, 140,\n+    48, 204, 140, 140, 140, 140, 140, 140,  48,  48,  48,  48,  71,  48,  48,  48,\n+    48,  48,  48, 140, 140, 140, 140, 140, 684, 140, 570, 570, 570, 570, 570, 570,\n+    32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32, 140,\n+   391, 391, 391, 391, 391, 391, 391, 685, 391, 391, 391, 391, 391, 391, 391, 686,\n+     0,   0,   0,   0,   0,   0,   0,   0,   1,   2,   2,   3,   1,   2,   2,   3,\n+     0,   0,   0,   0,   0,   4,   0,   4,   2,   2,   5,   2,   2,   2,   5,   2,\n+     2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,\n+     2,   2,   2,   2,   2,   2,   2,   6,   0,   0,   0,   0,   7,   8,   0,   0,\n+     9,   9,   9,   9,   9,   9,   9,   9,   9,   9,   9,   9,   9,   9,  10,  11,\n+    12,  13,  14,  14,  15,  14,  14,  14,  14,  14,  14,  14,  16,  17,  14,  14,\n+    18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,\n+    19,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,\n+    18,  18,  18,  18,  18,  18,  20,  21,  21,  21,  22,  20,  21,  21,  21,  21,\n+    21,  23,  24,  25,  25,  25,  25,  25,  25,  26,  25,  25,  25,  27,  28,  26,\n+    29,  30,  31,  32,  31,  31,  31,  31,  33,  34,  35,  31,  31,  31,  36,  31,\n+    31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  29,  31,  31,  31,  31,\n+    37,  38,  37,  37,  37,  37,  37,  37,  37,  39,  31,  31,  31,  31,  31,  31,\n+    40,  40,  40,  40,  40,  40,  41,  26,  42,  42,  42,  42,  42,  42,  42,  43,\n+    44,  44,  44,  44,  44,  45,  44,  46,  47,  47,  47,  48,  37,  49,  31,  31,\n+    31,  50,  51,  31,  31,  31,  31,  31,  31,  31,  31,  31,  52,  31,  31,  31,\n+    53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  54,  53,  55,  53,  53,  53,\n+    56,  57,  58,  59,  59,  60,  61,  62,  57,  63,  64,  65,  66,  59,  59,  67,\n+    68,  69,  70,  71,  71,  72,  73,  74,  69,  75,  76,  77,  78,  71,  79,  26,\n+    80,  81,  82,  83,  83,  84,  85,  86,  81,  87,  88,  26,  89,  83,  90,  91,\n+    92,  93,  94,  95,  95,  96,  97,  98,  93,  99, 100, 101, 102,  95,  95,  26,\n+   103, 104, 105, 106, 107, 104, 108, 109, 104, 105, 110,  26, 111, 108, 108, 112,\n+   113, 114, 115, 113, 113, 115, 113, 116, 114, 117, 118, 119, 120, 113, 121, 113,\n+   122, 123, 124, 122, 122, 124, 125, 126, 123, 127, 128, 128, 129, 122, 130,  26,\n+   131, 132, 133, 131, 131, 131, 131, 131, 132, 133, 134, 131, 135, 131, 131, 131,\n+   136, 137, 138, 139, 137, 137, 140, 141, 138, 142, 143, 137, 144, 137, 145,  26,\n+   146, 147, 147, 147, 147, 147, 147, 148, 147, 147, 147, 149,  26,  26,  26,  26,\n+   150, 151, 152, 152, 153, 152, 152, 154, 155, 156, 152, 157,  26,  26,  26,  26,\n+   158, 158, 158, 158, 158, 158, 158, 158, 158, 159, 158, 158, 158, 160, 159, 158,\n+   158, 158, 158, 159, 158, 158, 158, 161, 158, 161, 162, 163,  26,  26,  26,  26,\n+   164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164,\n+   164, 164, 164, 164, 165, 165, 165, 165, 166, 167, 165, 165, 165, 165, 165, 168,\n+   169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169,\n+   170, 170, 170, 170, 170, 170, 170, 170, 170, 171, 172, 171, 170, 170, 170, 170,\n+   170, 171, 170, 170, 170, 170, 171, 172, 171, 170, 172, 170, 170, 170, 170, 170,\n+   170, 170, 171, 170, 170, 170, 170, 170, 170, 170, 170, 173, 170, 170, 170, 174,\n+   170, 170, 170, 175, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 177, 177,\n+   178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178,\n+   179, 179, 179, 180, 181, 181, 181, 181, 181, 181, 181, 181, 181, 182, 181, 183,\n+   184, 184, 185, 186, 187, 187, 188,  26, 189, 189, 190,  26, 191, 192, 193,  26,\n+   194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 195, 194, 196, 194, 196,\n+   197, 198, 198, 199, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 200,\n+   198, 198, 198, 198, 198, 201, 178, 178, 178, 178, 178, 178, 178, 178, 202,  26,\n+   203, 203, 203, 204, 203, 205, 203, 205, 206, 203, 207, 207, 207, 208, 209,  26,\n+   210, 210, 210, 210, 210, 211, 210, 210, 210, 212, 210, 213, 194, 194, 194, 194,\n+   214, 214, 214, 215, 216, 216, 216, 216, 216, 216, 216, 217, 216, 216, 216, 218,\n+   216, 219, 216, 219, 216, 220,   9,   9,   9, 221,  26,  26,  26,  26,  26,  26,\n+   222, 222, 222, 222, 222, 222, 222, 222, 222, 223, 222, 222, 222, 222, 222, 224,\n+   225, 225, 225, 225, 225, 225, 225, 225, 226, 226, 226, 226, 226, 226, 227, 228,\n+   229, 229, 229, 229, 229, 229, 229, 230, 229, 231, 232, 232, 232, 232, 232, 232,\n+    18, 233, 165, 165, 165, 165, 165, 234, 225,  26, 235,   9, 236, 237, 238, 239,\n+     2,   2,   2,   2, 240, 241,   2,   2,   2,   2,   2, 242, 243, 244,   2, 245,\n+     2,   2,   2,   2,   2,   2,   2, 246,   9,   9,   9,   9,   9,   9,   9,   9,\n+    14,  14, 247, 247,  14,  14,  14,  14, 247, 247,  14, 248,  14,  14,  14, 247,\n+    14,  14,  14,  14,  14,  14, 249,  14, 249,  14, 250, 251,  14,  14, 252, 253,\n+     0, 254,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 255,   0, 256, 257,\n+     0, 258,   2, 259,   0,   0,   0,   0, 260,  26,   9,   9,   9,   9, 261,  26,\n+     0,   0,   0,   0, 262, 263,   4,   0,   0, 264,   0,   0,   2,   2,   2,   2,\n+     2, 265,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n@@ -2382,11 +2384,10 @@\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 258,  26,  26,  26,\n-     0, 266,  26,  26,   0,   0,   0,   0, 267, 267, 267, 267, 267, 267, 267, 267,\n-   267, 267, 267, 267, 267, 267, 267, 267,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0, 268,   0,   0,   0, 269,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0, 270, 270, 270, 270, 270, 270, 270, 270,\n-   270, 270, 270, 270,   2,   2,   2,   2,  17,  17,  17,  17,  17,  17,  17,  17,\n-    17,  17,  17,  17,  17,  17, 271, 272, 165, 165, 165, 165, 166, 167, 273, 273,\n-   273, 273, 273, 273, 273, 274, 275, 274, 170, 170, 172,  26, 172, 172, 172, 172,\n-   172, 172, 172, 172,  18,  18,  18,  18,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0, 276,  26,  26,  26,  26, 277, 277, 277, 278, 277, 277, 277, 277,\n-   277, 277, 277, 277, 277, 277, 279,  26, 277, 277, 277, 277, 277, 277, 277, 277,\n+     0,   0,   0,   0, 258,  26,  26,  26,   0, 266,  26,  26,   0,   0,   0,   0,\n+   267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 268,   0,\n+     0,   0, 269,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+   270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270,   2,   2,   2,   2,\n+    17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, 271, 272,\n+   165, 165, 165, 165, 166, 167, 273, 273, 273, 273, 273, 273, 273, 274, 275, 274,\n+   170, 170, 172,  26, 172, 172, 172, 172, 172, 172, 172, 172,  18,  18,  18,  18,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 276,  26,  26,  26,  26,\n+   277, 277, 277, 278, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 279,  26,\n@@ -2394,89 +2395,25 @@\n-   277, 277, 280,  26,  26,  26,   0, 281, 282,   0,   0,   0, 283, 284,   0, 285,\n-   286, 287, 287, 287, 287, 287, 287, 287, 287, 287, 288, 289, 290, 291, 291, 291,\n-   291, 291, 291, 291, 291, 291, 291, 292, 293, 294, 294, 294, 294, 294, 295, 169,\n-   169, 169, 169, 169, 169, 169, 169, 169, 169, 296,   0,   0, 294, 294, 294, 294,\n-     0,   0,   0,   0, 281,  26, 291, 291, 169, 169, 169, 296,   0,   0,   0,   0,\n-     0,   0,   0,   0, 169, 169, 169, 297,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0, 291, 291, 291, 291, 291, 298, 291, 291, 291, 291, 291, 291, 291, 291,\n-   291, 291, 291,   0,   0,   0,   0,   0, 277, 277, 277, 277, 277, 277, 277, 277,\n-     0,   0,   0,   0,   0,   0,   0,   0, 299, 299, 299, 299, 299, 299, 299, 299,\n-   299, 299, 299, 299, 299, 299, 299, 299, 299, 300, 299, 299, 299, 299, 299, 299,\n-   301,  26, 302, 302, 302, 302, 302, 302, 303, 303, 303, 303, 303, 303, 303, 303,\n-   303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 304,  26,  26,\n-    18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18, 305, 305, 305, 305,\n-   305, 305, 305, 305, 305, 305, 305,  26,   0,   0,   0,   0, 306,   2,   2,   2,\n-     2,   2,   2,   2,   2,   2,   2,   2,   2, 307,   2,   2,   2,   2,   2,   2,\n-     2, 308, 309, 310,  26,  26, 311,   2, 312, 312, 312, 312, 312, 313,   0, 314,\n-   315, 315, 315, 315, 315, 315, 315,  26, 316, 316, 316, 316, 316, 316, 316, 316,\n-   317, 318, 316, 319,  53,  53,  53,  53, 320, 320, 320, 320, 320, 321, 322, 322,\n-   322, 322, 323, 324, 169, 169, 169, 325, 326, 326, 326, 326, 326, 326, 326, 326,\n-   326, 327, 326, 328, 164, 164, 164, 329, 330, 330, 330, 330, 330, 330, 331,  26,\n-   330, 332, 330, 333, 164, 164, 164, 164, 334, 334, 334, 334, 334, 334, 334, 334,\n-   335,  26,  26, 336, 337, 337, 338,  26, 339, 339, 339,  26, 172, 172,   2,   2,\n-     2,   2,   2, 340, 341, 342, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176,\n-   337, 337, 337, 337, 337, 343, 337, 344, 169, 169, 169, 169, 345,  26, 169, 169,\n-   296, 346, 169, 169, 169, 169, 169, 345,  26,  26,  26,  26,  26,  26,  26,  26,\n-    26,  26,  26,  26,  26,  26,  26,  26, 277, 277, 277, 277, 277, 277, 277, 277,\n-   277, 277, 277, 277, 277, 280, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277,\n-   277, 277, 277, 347,  26,  26,  26,  26, 348,  26, 349, 350,  25,  25, 351, 352,\n-   353,  25,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,\n-   354,  26, 355,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,\n-    31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31, 356,\n-    31,  31,  31,  31,  31,  31,  31,  31,  31,  31, 357,  31,  31,  31,  31,  31,\n-    31, 358,  26,  26,  26,  26,  31,  31,   9,   9,   0, 314,   9, 359,   0,   0,\n-     0,   0, 360,   0, 258, 281, 361,  31,  31,  31,  31,  31,  31,  31,  31,  31,\n-    31,  31,  31,  31,  31,  31,  31, 362, 363,   0,   0,   0,   1,   2,   2,   3,\n-     1,   2,   2,   3, 364, 291, 290, 291, 291, 291, 291, 365, 169, 169, 169, 296,\n-   366, 366, 366, 367, 258, 258,  26, 368, 369, 370, 369, 369, 371, 369, 369, 372,\n-   369, 373, 369, 373,  26,  26,  26,  26, 369, 369, 369, 369, 369, 369, 369, 369,\n-   369, 369, 369, 369, 369, 369, 369, 374, 375,   0,   0,   0,   0,   0, 376,   0,\n-    14,  14,  14,  14,  14,  14,  14,  14,  14, 253,   0, 377, 378,  26,  26,  26,\n-    26,  26,   0,   0,   0,   0,   0, 379, 380, 380, 380, 381, 382, 382, 382, 382,\n-   382, 382, 383,  26, 384,   0,   0, 281, 385, 385, 385, 385, 386, 387, 388, 388,\n-   388, 389, 390, 390, 390, 390, 390, 391, 392, 392, 392, 393, 394, 394, 394, 394,\n-   395, 394, 396,  26,  26,  26,  26,  26, 397, 397, 397, 397, 397, 397, 397, 397,\n-   397, 397, 398, 398, 398, 398, 398, 398, 399, 399, 399, 400, 399, 401, 402, 402,\n-   402, 402, 403, 402, 402, 402, 402, 403, 404, 404, 404, 404, 404,  26, 405, 405,\n-   405, 405, 405, 405, 406, 407, 408, 409, 408, 409, 410, 408, 411, 408, 411, 412,\n-    26,  26,  26,  26,  26,  26,  26,  26, 413, 413, 413, 413, 413, 413, 413, 413,\n-   413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 414,  26,\n-   413, 413, 415,  26, 413,  26,  26,  26, 416,   2,   2,   2,   2,   2, 417, 308,\n-    26,  26,  26,  26,  26,  26,  26,  26, 418, 419, 420, 420, 420, 420, 421, 422,\n-   423, 423, 424, 423, 425, 425, 425, 425, 426, 426, 426, 427, 428, 426,  26,  26,\n-    26,  26,  26,  26, 429, 429, 430, 431, 432, 432, 432, 433, 434, 434, 434, 435,\n-    26,  26,  26,  26,  26,  26,  26,  26, 436, 436, 436, 436, 437, 437, 437, 438,\n-   437, 437, 439, 437, 437, 437, 437, 437, 440, 441, 442, 443, 444, 444, 445, 446,\n-   444, 447, 444, 447, 448, 448, 448, 448, 449, 449, 449, 449,  26,  26,  26,  26,\n-   450, 450, 450, 450, 451, 452, 451,  26, 453, 453, 453, 453, 453, 453, 454, 455,\n-   456, 456, 457, 456, 458, 458, 459, 458, 460, 460, 461, 462,  26, 463,  26,  26,\n-    26,  26,  26,  26,  26,  26,  26,  26, 464, 464, 464, 464, 464, 464, 464, 464,\n-   464, 465,  26,  26,  26,  26,  26,  26, 466, 466, 466, 466, 466, 466, 467,  26,\n-   466, 466, 466, 466, 466, 466, 467, 468, 469, 469, 469, 469, 469,  26, 469, 470,\n-    26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,\n-    26,  26,  26,  26,  31,  31,  31,  50, 471, 471, 471, 471, 471, 472, 473,  26,\n-    26,  26,  26,  26,  26,  26,  26, 474, 475, 475, 475, 475, 475,  26, 476, 476,\n-   476, 476, 476, 477,  26,  26, 478, 478, 478, 479,  26,  26,  26,  26, 480, 480,\n-   480, 481,  26,  26, 482, 482, 483,  26, 484, 484, 484, 484, 484, 484, 484, 484,\n-   484, 485, 486, 484, 484, 484, 485, 487, 488, 488, 488, 488, 488, 488, 488, 488,\n-   489, 490, 491, 491, 491, 492, 491, 493, 494, 494, 494, 494, 494, 494, 495, 494,\n-   494,  26, 496, 496, 496, 496, 497,  26, 498, 498, 498, 498, 498, 498, 498, 498,\n-   498, 498, 498, 498, 499, 137, 500,  26, 501, 501, 502, 501, 501, 501, 501, 501,\n-   503,  26,  26,  26,  26,  26,  26,  26, 504, 505, 506, 507, 506, 508, 509, 509,\n-   509, 509, 509, 509, 509, 510, 509, 511, 512, 513, 514, 515, 515, 516, 517, 518,\n-   513, 519, 520, 521, 522, 523, 523,  26, 524, 524, 524, 524, 524, 524, 524, 524,\n-   524, 524, 524, 525, 526,  26,  26,  26, 527, 527, 527, 527, 527, 527, 527, 527,\n-   527,  26, 527, 528,  26,  26,  26,  26, 529, 529, 529, 529, 529, 529, 530, 529,\n-   529, 529, 529, 530,  26,  26,  26,  26, 531, 531, 531, 531, 531, 531, 531, 531,\n-   532,  26, 531, 533, 198, 534,  26,  26, 535, 535, 535, 535, 535, 535, 535, 536,\n-   535, 536,  26,  26,  26,  26,  26,  26, 537, 537, 537, 538, 537, 539, 537, 537,\n-   540,  26,  26,  26,  26,  26,  26,  26, 541, 541, 541, 541, 541, 541, 541, 542,\n-    26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26, 543, 543, 543, 543,\n-   543, 543, 543, 543, 543, 543, 544, 545, 546, 547, 548, 549, 549, 549, 550, 551,\n-   546,  26, 549, 552,  26,  26,  26,  26,  26,  26,  26,  26, 553, 554, 553, 553,\n-   553, 553, 553, 554, 555,  26,  26,  26, 556, 556, 556, 556, 556, 556, 556, 556,\n-   556,  26, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 558,  26, 178, 178,\n-   559, 559, 559, 559, 559, 559, 559, 560,  53, 561,  26,  26,  26,  26,  26,  26,\n-    26,  26,  26,  26,  26,  26,  26,  26, 562, 563, 562, 562, 562, 562, 564, 562,\n-   565,  26, 562, 562, 562, 566, 567, 567, 567, 567, 568, 567, 567, 569, 570,  26,\n-    26,  26,  26,  26,  26,  26,  26,  26, 571, 572, 573, 573, 573, 573, 571, 574,\n-   573,  26, 573, 575, 576, 577, 578, 578, 578, 579, 580, 581, 578, 582,  26,  26,\n+   277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 280,  26,  26,  26,   0,   0,\n+   281,   0,   0,   0, 282, 283,   0, 284, 285, 286, 286, 286, 286, 286, 286, 286,\n+   286, 286, 287, 288, 289, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 291,\n+   292, 293, 293, 293, 293, 293, 294, 169, 169, 169, 169, 169, 169, 169, 169, 169,\n+   169, 295,   0,   0, 293, 293, 293, 293,   0,   0,   0,   0, 296, 297, 290, 290,\n+   169, 169, 169, 295,   0,   0,   0,   0,   0,   0,   0,   0, 169, 169, 169, 298,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 290, 290, 290, 290, 290, 299,\n+   290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290,   0,   0,   0,   0,   0,\n+   277, 277, 277, 277, 277, 277, 277, 277,   0,   0,   0,   0,   0,   0,   0,   0,\n+   300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300,\n+   300, 301, 300, 300, 300, 300, 300, 300, 302,  26, 303, 303, 303, 303, 303, 303,\n+   304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304,\n+   304, 304, 304, 304, 304, 305,  26,  26,  18,  18,  18,  18,  18,  18,  18,  18,\n+    18,  18,  18,  18, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306,  26,\n+     0,   0,   0,   0, 307,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,\n+     2, 308,   2,   2,   2,   2,   2,   2,   2, 309, 310, 311,  26,  26, 312,   2,\n+   313, 313, 313, 313, 313, 314,   0, 315, 316, 316, 316, 316, 316, 316, 316,  26,\n+   317, 317, 317, 317, 317, 317, 317, 317, 318, 319, 317, 320,  53,  53,  53,  53,\n+   321, 321, 321, 321, 321, 322, 323, 323, 323, 323, 324, 325, 169, 169, 169, 326,\n+   327, 327, 327, 327, 327, 327, 327, 327, 327, 328, 327, 329, 164, 164, 164, 330,\n+   331, 331, 331, 331, 331, 331, 332,  26, 331, 333, 331, 334, 164, 164, 164, 164,\n+   335, 335, 335, 335, 335, 335, 335, 335, 336,  26,  26, 337, 338, 338, 339,  26,\n+   340, 340, 340,  26, 172, 172,   2,   2,   2,   2,   2, 341, 342, 343, 176, 176,\n+   176, 176, 176, 176, 176, 176, 176, 176, 338, 338, 338, 338, 338, 344, 338, 345,\n+   169, 169, 169, 169, 346,  26, 169, 169, 295, 347, 169, 169, 169, 169, 169, 346,\n@@ -2484,23 +2421,85 @@\n-    26,  26,  26,  26, 583, 583, 583, 584, 585, 585, 586, 585, 585, 585, 585, 587,\n-   585, 585, 585, 588,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26, 589,  26,\n-   108, 108, 108, 108, 108, 108, 590, 591, 592, 592, 592, 592, 592, 592, 592, 592,\n-   592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 593,  26,  26,  26,  26,\n-    26,  26,  26,  26,  26,  26,  26,  26, 592, 592, 592, 592, 592, 592, 592, 592,\n-   592, 592, 592, 592, 592, 594, 595,  26, 592, 592, 592, 592, 592, 592, 592, 592,\n-   596,  26,  26,  26,  26,  26,  26,  26,  26,  26, 597, 597, 597, 597, 597, 597,\n-   597, 597, 597, 597, 597, 597, 598,  26, 599, 599, 599, 599, 599, 599, 599, 599,\n-   599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599,\n-   599, 599, 600,  26,  26,  26,  26,  26, 601, 601, 601, 601, 601, 601, 601, 601,\n-   601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601,\n-   602,  26,  26,  26,  26,  26,  26,  26, 305, 305, 305, 305, 305, 305, 305, 305,\n-   305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 603,\n-   604, 604, 604, 605, 604, 606, 607, 607, 607, 607, 607, 607, 607, 607, 607, 608,\n-   607, 609, 610, 610, 610, 611, 611,  26, 612, 612, 612, 612, 612, 612, 612, 612,\n-   613,  26, 612, 614, 614, 612, 612, 615, 612, 612,  26,  26,  26,  26,  26,  26,\n-    26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,\n-   616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 617,  26,  26,  26,  26,\n-    26,  26,  26,  26,  26,  26,  26,  26, 618, 618, 618, 618, 618, 618, 618, 618,\n-   618, 619, 618, 618, 618, 618, 618, 618, 618, 620, 618, 618,  26,  26,  26,  26,\n-    26,  26,  26,  26, 621,  26, 347,  26, 622, 622, 622, 622, 622, 622, 622, 622,\n-   622, 622, 622, 622, 622, 622, 622, 622, 622, 622, 622, 622, 622, 622, 622, 622,\n-   622, 622, 622, 622, 622, 622, 622,  26, 623, 623, 623, 623, 623, 623, 623, 623,\n+   277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 280, 277, 277,\n+   277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 348,  26,  26,  26,  26,\n+   349,  26, 350, 351,  25,  25, 352, 353, 354,  25,  31,  31,  31,  31,  31,  31,\n+    31,  31,  31,  31,  31,  31,  31,  31, 355,  26, 356,  31,  31,  31,  31,  31,\n+    31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,\n+    31,  31,  31,  31,  31,  31,  31, 357,  31,  31,  31,  31,  31,  31,  31,  31,\n+    31,  31, 358,  31,  31,  31,  31,  31,  31, 359,  26,  26,  26,  26,  31,  31,\n+     9,   9,   0, 315,   9, 360,   0,   0,   0,   0, 361,   0, 258, 296, 362,  31,\n+    31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31, 363,\n+   364,   0,   0,   0,   1,   2,   2,   3,   1,   2,   2,   3, 365, 290, 289, 290,\n+   290, 290, 290, 366, 169, 169, 169, 295, 367, 367, 367, 368, 258, 258,  26, 369,\n+   370, 371, 370, 370, 372, 370, 370, 373, 370, 374, 370, 374,  26,  26,  26,  26,\n+   370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 375,\n+   376,   0,   0,   0,   0,   0, 377,   0,  14,  14,  14,  14,  14,  14,  14,  14,\n+    14, 253,   0, 378, 379,  26,  26,  26,  26,  26,   0,   0,   0,   0,   0, 380,\n+   381, 381, 381, 382, 383, 383, 383, 383, 383, 383, 384,  26, 385,   0,   0, 296,\n+   386, 386, 386, 386, 387, 388, 389, 389, 389, 390, 391, 391, 391, 391, 391, 392,\n+   393, 393, 393, 394, 395, 395, 395, 395, 396, 395, 397,  26,  26,  26,  26,  26,\n+   398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 399, 399, 399, 399, 399, 399,\n+   400, 400, 400, 401, 400, 402, 403, 403, 403, 403, 404, 403, 403, 403, 403, 404,\n+   405, 405, 405, 405, 405,  26, 406, 406, 406, 406, 406, 406, 407, 408, 409, 410,\n+   409, 410, 411, 409, 412, 409, 412, 413,  26,  26,  26,  26,  26,  26,  26,  26,\n+   414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414,\n+   414, 414, 414, 414, 414, 414, 415,  26, 414, 414, 416,  26, 414,  26,  26,  26,\n+   417,   2,   2,   2,   2,   2, 418, 309,  26,  26,  26,  26,  26,  26,  26,  26,\n+   419, 420, 421, 421, 421, 421, 422, 423, 424, 424, 425, 424, 426, 426, 426, 426,\n+   427, 427, 427, 428, 429, 427,  26,  26,  26,  26,  26,  26, 430, 430, 431, 432,\n+   433, 433, 433, 434, 435, 435, 435, 436,  26,  26,  26,  26,  26,  26,  26,  26,\n+   437, 437, 437, 437, 438, 438, 438, 439, 438, 438, 440, 438, 438, 438, 438, 438,\n+   441, 442, 443, 444, 445, 445, 446, 447, 445, 448, 445, 448, 449, 449, 449, 449,\n+   450, 450, 450, 450,  26,  26,  26,  26, 451, 451, 451, 451, 452, 453, 452,  26,\n+   454, 454, 454, 454, 454, 454, 455, 456, 457, 457, 458, 457, 459, 459, 460, 459,\n+   461, 461, 462, 463,  26, 464,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,\n+   465, 465, 465, 465, 465, 465, 465, 465, 465, 466,  26,  26,  26,  26,  26,  26,\n+   467, 467, 467, 467, 467, 467, 468,  26, 467, 467, 467, 467, 467, 467, 468, 469,\n+   470, 470, 470, 470, 470,  26, 470, 471,  26,  26,  26,  26,  26,  26,  26,  26,\n+    26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  31,  31,  31,  50,\n+   472, 472, 472, 472, 472, 473, 474,  26,  26,  26,  26,  26,  26,  26,  26, 475,\n+   476, 476, 476, 476, 476,  26, 477, 477, 477, 477, 477, 478,  26,  26, 479, 479,\n+   479, 480,  26,  26,  26,  26, 481, 481, 481, 482,  26,  26, 483, 483, 484,  26,\n+   485, 485, 485, 485, 485, 485, 485, 485, 485, 486, 487, 485, 485, 485, 486, 488,\n+   489, 489, 489, 489, 489, 489, 489, 489, 490, 491, 492, 492, 492, 493, 492, 494,\n+   495, 495, 495, 495, 495, 495, 496, 495, 495,  26, 497, 497, 497, 497, 498,  26,\n+   499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 500, 137, 501,  26,\n+   502, 502, 503, 502, 502, 502, 502, 502, 504,  26,  26,  26,  26,  26,  26,  26,\n+   505, 506, 507, 508, 507, 509, 510, 510, 510, 510, 510, 510, 510, 511, 510, 512,\n+   513, 514, 515, 516, 516, 517, 518, 519, 514, 520, 521, 522, 523, 524, 524,  26,\n+   525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 526, 527,  26,  26,  26,\n+   528, 528, 528, 528, 528, 528, 528, 528, 528,  26, 528, 529,  26,  26,  26,  26,\n+   530, 530, 530, 530, 530, 530, 531, 530, 530, 530, 530, 531,  26,  26,  26,  26,\n+   532, 532, 532, 532, 532, 532, 532, 532, 533,  26, 532, 534, 198, 535,  26,  26,\n+   536, 536, 536, 536, 536, 536, 536, 537, 536, 537,  26,  26,  26,  26,  26,  26,\n+   538, 538, 538, 539, 538, 540, 538, 538, 541,  26,  26,  26,  26,  26,  26,  26,\n+   542, 542, 542, 542, 542, 542, 542, 543,  26,  26,  26,  26,  26,  26,  26,  26,\n+    26,  26,  26,  26, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 545, 546,\n+   547, 548, 549, 550, 550, 550, 551, 552, 547,  26, 550, 553,  26,  26,  26,  26,\n+    26,  26,  26,  26, 554, 555, 554, 554, 554, 554, 554, 555, 556,  26,  26,  26,\n+   557, 557, 557, 557, 557, 557, 557, 557, 557,  26, 558, 558, 558, 558, 558, 558,\n+   558, 558, 558, 558, 559,  26, 178, 178, 560, 560, 560, 560, 560, 560, 560, 561,\n+    53, 562,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,\n+   563, 564, 563, 563, 563, 563, 565, 563, 566,  26, 563, 563, 563, 567, 568, 568,\n+   568, 568, 569, 568, 568, 570, 571,  26,  26,  26,  26,  26,  26,  26,  26,  26,\n+   572, 573, 574, 574, 574, 574, 572, 575, 574,  26, 574, 576, 577, 578, 579, 579,\n+   579, 580, 581, 582, 579, 583,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,\n+    26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26, 584, 584, 584, 585,\n+   586, 586, 587, 586, 586, 586, 586, 588, 586, 586, 586, 589,  26,  26,  26,  26,\n+    26,  26,  26,  26,  26,  26, 590,  26, 108, 108, 108, 108, 108, 108, 591, 592,\n+   593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593,\n+   593, 593, 593, 594,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,\n+   593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 595, 596,  26,\n+   593, 593, 593, 593, 593, 593, 593, 593, 597,  26,  26,  26,  26,  26,  26,  26,\n+    26,  26, 598, 598, 598, 598, 598, 598, 598, 598, 598, 598, 598, 598, 599,  26,\n+   600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600,\n+   600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 601,  26,  26,  26,  26,  26,\n+   602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602,\n+   602, 602, 602, 602, 602, 602, 602, 602, 603,  26,  26,  26,  26,  26,  26,  26,\n+   306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306,\n+   306, 306, 306, 306, 306, 306, 306, 604, 605, 605, 605, 606, 605, 607, 608, 608,\n+   608, 608, 608, 608, 608, 608, 608, 609, 608, 610, 611, 611, 611, 612, 612,  26,\n+   613, 613, 613, 613, 613, 613, 613, 613, 614,  26, 613, 615, 615, 613, 613, 616,\n+   613, 613,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,\n+    26,  26,  26,  26,  26,  26,  26,  26, 617, 617, 617, 617, 617, 617, 617, 617,\n+   617, 617, 617, 618,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,\n+   619, 619, 619, 619, 619, 619, 619, 619, 619, 620, 619, 619, 619, 619, 619, 619,\n+   619, 621, 619, 619,  26,  26,  26,  26,  26,  26,  26,  26, 622,  26, 348,  26,\n@@ -2508,61 +2507,64 @@\n-   623, 623, 624,  26,  26,  26,  26,  26, 622, 625,  26,  26,  26,  26,  26,  26,\n-    26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,\n-    26,  26,  26,  26,  26,  26, 626, 627, 628, 287, 287, 287, 287, 287, 287, 287,\n-   287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287,\n-   287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 629,  26, 630,  26,\n-    26,  26, 631,  26, 632,  26, 633, 633, 633, 633, 633, 633, 633, 633, 633, 633,\n-   633, 633, 633, 633, 633, 633, 633, 633, 633, 633, 633, 633, 633, 633, 633, 633,\n-   633, 633, 633, 633, 633, 633, 633, 634, 635, 635, 635, 635, 635, 635, 635, 635,\n-   635, 635, 635, 635, 635, 636, 635, 637, 635, 638, 635, 639, 281,  26,  26,  26,\n-    26,  26,  26,  26,  26,  26,  26,  26,   9,   9,   9,   9,   9, 640,   9,   9,\n-   221,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-   281,  26,  26,  26,  26,  26,  26,  26,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0, 276,  26,   0,   0,   0,   0, 258, 363,   0,   0,\n-     0,   0,   0,   0, 641, 642,   0, 643, 644, 645,   0,   0,   0, 646,   0,   0,\n-     0,   0,   0,   0,   0, 266,  26,  26,  14,  14,  14,  14,  14,  14,  14,  14,\n-   247,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,\n-     0,   0, 281,  26,   0,   0, 281,  26,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0, 258,  26,   0,   0,   0, 260,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0, 255,   0,   0,   0,   0,   0,   0,   0,   0, 255, 647, 648,   0, 649,\n-   650,   0,   0,   0,   0,   0,   0,   0, 269, 651, 255, 255,   0,   0,   0, 652,\n-   653, 654, 655,   0,   0,   0,   0,   0,   0,   0,   0,   0, 276,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0, 268,   0,   0,   0,   0,   0,   0, 656, 656, 656, 656, 656, 656, 656, 656,\n-   656, 656, 656, 656, 656, 656, 656, 656, 656, 657,  26, 658, 659, 656,  26,  26,\n-    26,  26,  26,  26,  26,  26,  26,  26,   2,   2,   2, 348, 660, 308,  26,  26,\n-    26,  26,  26,  26,  26,  26,  26,  26, 661, 270, 270, 662, 663, 664,  18,  18,\n-    18,  18,  18,  18,  18, 665,  26,  26,  26, 666,  26,  26,  26,  26,  26,  26,\n-    26,  26,  26,  26,  26,  26,  26,  26, 667, 667, 667, 667, 667, 668, 667, 669,\n-   667, 670,  26,  26,  26,  26,  26,  26,  26,  26, 671, 671, 671, 672,  26,  26,\n-   673, 673, 673, 673, 673, 673, 673, 674,  26,  26,  26,  26,  26,  26,  26,  26,\n-    26,  26, 675, 675, 675, 675, 675, 676,  26,  26,  26,  26,  26,  26,  26,  26,\n-    26,  26,  26,  26, 172, 677, 170, 172, 678, 678, 678, 678, 678, 678, 678, 678,\n-   678, 678, 678, 678, 678, 678, 678, 678, 678, 678, 678, 678, 678, 678, 678, 678,\n-   679, 678, 680,  26,  26,  26,  26,  26, 681, 681, 681, 681, 681, 681, 681, 681,\n-   681, 682, 681, 683,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,\n-    26,  26,  26,  26,  26,  26, 363,   0,   0,   0,   0,   0,   0,   0, 377,  26,\n-    26,  26,  26,  26,  26,  26,  26,  26, 363,   0,   0,   0,   0,   0,   0, 276,\n-    26,  26,  26,  26,  26,  26,  26,  26, 684,  31,  31,  31, 685, 686, 687, 688,\n-   689, 690, 685, 691, 685, 687, 687, 692,  31, 693,  31, 694, 695, 693,  31, 694,\n-    26,  26,  26,  26,  26,  26,  51,  26,   0,   0,   0,   0,   0, 281,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 281,  26,   0, 258, 363,   0,\n-   363,   0, 363,   0,   0,   0, 276,  26,   0,   0,   0,   0,   0, 276,  26,  26,\n-    26,  26,  26,  26, 696,   0,   0,   0, 697,  26,   0,   0,   0,   0,   0, 281,\n-     0, 260, 314,  26, 276,  26,  26,  26,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0, 698,   0, 377,   0, 377,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0, 258, 699,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0, 314,   0, 281, 260,  26,   0, 281,   0,   0,   0,   0,   0,   0,\n-     0,  26,   0, 314,   0,   0,   0,   0,   0,  26,   0,   0,   0, 276, 314,  26,\n-    26,  26,  26,  26,  26,  26,  26,  26,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0, 281,  26,   0, 276,   0, 377,   0, 260,   0,   0,   0,   0,   0, 269,\n-   276, 696,   0, 281,   0, 260,   0, 260,   0,   0, 360,   0,   0,   0,   0,   0,\n-     0, 266,  26,  26,  26,  26,   0, 314, 277, 277, 277, 277, 277, 277, 277, 277,\n-   277, 277, 277, 277,  26,  26,  26,  26, 277, 277, 277, 277, 277, 277, 277, 347,\n-   277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 280, 277, 277, 277, 277,\n-   277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 347,  26, 277, 277,\n-   277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277,\n-   277, 277, 277, 277, 700,  26,  26,  26, 277, 277, 277, 280,  26,  26,  26,  26,\n-    26,  26,  26,  26,  26,  26,  26,  26, 277, 277, 277, 277, 277, 277, 277, 277,\n-   277, 701, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277,  26,  26,\n-    26,  26,  26,  26,  26,  26,  26,  26, 702,  26,  26,  26,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   9,   9,   9,   9,   9,   9,   9,   9,\n+   623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623,  26,\n+   624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624,\n+   624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 625,  26,  26,  26,  26,  26,\n+   623, 626,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,\n+    26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26, 627, 628,\n+   629, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286,\n+   286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286,\n+   286, 286, 286, 286, 630,  26, 631,  26,  26,  26, 632,  26, 633,  26, 634, 634,\n+   634, 634, 634, 634, 634, 634, 634, 634, 634, 634, 634, 634, 634, 634, 634, 634,\n+   634, 634, 634, 634, 634, 634, 634, 634, 634, 634, 634, 634, 634, 634, 634, 635,\n+   636, 636, 636, 636, 636, 636, 636, 636, 636, 636, 636, 636, 636, 637, 636, 638,\n+   636, 639, 636, 640, 296,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,\n+     9,   9,   9,   9,   9, 641,   9,   9, 221,  26,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0, 296,  26,  26,  26,  26,  26,  26,  26,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 276,  26,\n+     0,   0,   0,   0, 258, 364,   0,   0,   0,   0,   0,   0, 642, 643,   0, 644,\n+   645, 646,   0,   0,   0, 647,   0,   0,   0,   0,   0,   0,   0, 266,  26,  26,\n+    14,  14,  14,  14,  14,  14,  14,  14, 247,  26,  26,  26,  26,  26,  26,  26,\n+    26,  26,  26,  26,  26,  26,  26,  26,   0,   0, 296,  26,   0,   0, 296,  26,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 258,  26,   0,   0,   0, 260,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 255,   0,   0,   0,   0,   0,\n+     0,   0,   0, 255, 648, 649,   0, 650, 651,   0,   0,   0,   0,   0,   0,   0,\n+   269, 652, 255, 255,   0,   0,   0, 653, 654, 655, 656,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0, 276,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0, 268,   0,   0,   0,   0,   0,   0,\n+   657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657,\n+   657, 658,  26, 659, 660, 657,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,\n+     2,   2,   2, 349, 661, 309,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,\n+   662, 270, 270, 663, 664, 665,  18,  18,  18,  18,  18,  18,  18, 666,  26,  26,\n+    26, 667,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,\n+   668, 668, 668, 668, 668, 669, 668, 670, 668, 671,  26,  26,  26,  26,  26,  26,\n+    26,  26, 672, 672, 672, 673,  26,  26, 674, 674, 674, 674, 674, 674, 674, 675,\n+    26,  26,  26,  26,  26,  26,  26,  26,  26,  26, 676, 676, 676, 676, 676, 677,\n+    26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26, 172, 678, 170, 172,\n+   679, 679, 679, 679, 679, 679, 679, 679, 679, 679, 679, 679, 679, 679, 679, 679,\n+   679, 679, 679, 679, 679, 679, 679, 679, 680, 679, 681,  26,  26,  26,  26,  26,\n+   682, 682, 682, 682, 682, 682, 682, 682, 682, 683, 682, 684,  26,  26,  26,  26,\n+    26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26, 364,   0,\n+     0,   0,   0,   0,   0,   0, 378,  26,  26,  26,  26,  26,  26,  26,  26,  26,\n+   364,   0,   0,   0,   0,   0,   0, 276,  26,  26,  26,  26,  26,  26,  26,  26,\n+   685,  31,  31,  31, 686, 687, 688, 689, 690, 691, 686, 692, 686, 688, 688, 693,\n+    31, 694,  31, 695, 696, 694,  31, 695,  26,  26,  26,  26,  26,  26,  51,  26,\n+     0,   0,   0,   0,   0, 296,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0, 296,  26,   0, 258, 364,   0, 364,   0, 364,   0,   0,   0, 276,  26,\n+     0,   0,   0,   0,   0, 276,  26,  26,  26,  26,  26,  26, 697,   0,   0,   0,\n+   698,  26,   0,   0,   0,   0,   0, 296,   0, 260, 315,  26, 276,  26,  26,  26,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 699,   0, 378,   0, 378,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 258, 700,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 315,   0, 296, 260,  26,\n+     0, 296,   0,   0,   0,   0,   0,   0,   0,  26,   0, 315,   0,   0,   0,   0,\n+     0,  26,   0,   0,   0, 276, 315,  26,  26,  26,  26,  26,  26,  26,  26,  26,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 296,  26,   0, 276,   0, 378,\n+     0, 260,   0,   0,   0,   0,   0, 269, 276, 697,   0, 296,   0, 260,   0, 260,\n+     0,   0, 361,   0,   0,   0,   0,   0,   0, 266,  26,  26,  26,  26,   0, 315,\n+   277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277,  26,  26,  26,  26,\n+   277, 277, 277, 277, 277, 277, 277, 348, 277, 277, 277, 277, 277, 277, 277, 277,\n+   277, 277, 277, 280, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277,\n+   277, 277, 277, 277, 348,  26, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277,\n+   277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 701,  26, 277, 277,\n+   277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 280,  26,  26,  26,  26,\n+   277, 277, 277, 280,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,\n+   277, 277, 277, 277, 277, 277, 277, 277, 277, 702, 277, 277, 277, 277, 277, 277,\n+   277, 277, 277, 277, 277, 277,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,\n+   703,  26,  26,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n@@ -2570,69 +2572,1 @@\n-     9,   9,   9,   9,   9,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0, 939, 940, 941, 942, 946, 948,   0, 962,\n-   969, 970, 971, 976,1001,1002,1003,1008,   0,1033,1040,1041,1042,1043,1047,   0,\n-     0,1080,1081,1082,1086,1110,   0,   0,1124,1125,1126,1127,1131,1133,   0,1147,\n-  1154,1155,1156,1161,1187,1188,1189,1193,   0,1219,1226,1227,1228,1229,1233,   0,\n-     0,1267,1268,1269,1273,1298,   0,1303, 943,1128, 944,1129, 954,1139, 958,1143,\n-   959,1144, 960,1145, 961,1146, 964,1149,   0,   0, 973,1158, 974,1159, 975,1160,\n-   983,1168, 978,1163, 988,1173, 990,1175, 991,1176, 993,1178, 994,1179,   0,   0,\n-  1004,1190,1005,1191,1006,1192,1014,1199,1007,   0,   0,   0,1016,1201,1020,1206,\n-     0,1022,1208,1025,1211,1023,1209,   0,   0,   0,   0,1032,1218,1037,1223,1035,\n-  1221,   0,   0,   0,1044,1230,1045,1231,1049,1235,   0,   0,1058,1244,1064,1250,\n-  1060,1246,1066,1252,1067,1253,1072,1258,1069,1255,1077,1264,1074,1261,   0,   0,\n-  1083,1270,1084,1271,1085,1272,1088,1275,1089,1276,1096,1283,1103,1290,1111,1299,\n-  1115,1118,1307,1120,1309,1121,1310,   0,1053,1239,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,1093,1280,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0, 949,1134,1010,1195,1050,1236,1090,1277,1341,1368,1340,\n-  1367,1342,1369,1339,1366,   0,1320,1347,1418,1419,1323,1350,   0,   0, 992,1177,\n-  1018,1204,1055,1241,1416,1417,1415,1424,1202,   0,   0,   0, 987,1172,   0,   0,\n-  1031,1217,1321,1348,1322,1349,1338,1365, 950,1135, 951,1136, 979,1164, 980,1165,\n-  1011,1196,1012,1197,1051,1237,1052,1238,1061,1247,1062,1248,1091,1278,1092,1279,\n-  1071,1257,1076,1263,   0,   0, 997,1182,   0,   0,   0,   0,   0,   0, 945,1130,\n-   982,1167,1337,1364,1335,1362,1046,1232,1422,1423,1113,1301,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   8,   9,   0,  10,1425,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,1314,1427,   5,\n-  1434,1438,1443,   0,1450,   0,1455,1461,1514,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,1446,1458,1468,1476,1480,1486,1517,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,1489,1503,1494,1500,1508,   0,   0,   0,   0,1520,1521,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,1526,1528,   0,1525,   0,   0,   0,1522,\n-     0,   0,   0,   0,1536,1532,1539,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,1534,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,1556,   0,   0,   0,   0,   0,   0,1548,1550,   0,1547,   0,   0,   0,1567,\n-     0,   0,   0,   0,1558,1554,1561,   0,   0,   0,   0,   0,   0,   0,1568,1569,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,1529,1551,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,1523,1545,1524,1546,   0,   0,1527,1549,\n-     0,   0,1570,1571,1530,1552,1531,1553,   0,   0,1533,1555,1535,1557,1537,1559,\n-     0,   0,1572,1573,1544,1566,1538,1560,1540,1562,1541,1563,1542,1564,   0,   0,\n-  1543,1565,   0,   0,   0,   0,   0,   0,   0,   0,1606,1607,1609,1608,1610,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,1613,   0,1611,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1612,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,1620,   0,   0,   0,   0,   0,   0,   0,1623,   0,   0,1624,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-  1614,1615,1616,1617,1618,1619,1621,1622,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,1628,1629,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,1625,1626,   0,1627,   0,   0,   0,1634,   0,   0,1635,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,1630,1631,1632,   0,   0,1633,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-  1639,   0,   0,1638,1640,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,1636,1637,   0,   0,   0,   0,   0,   0,1641,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,1642,1644,1643,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-  1645,   0,   0,   0,   0,   0,   0,   0,1646,   0,   0,   0,   0,   0,   0,1648,\n-  1649,   0,1647,1650,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,1651,1653,1652,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,1654,   0,1655,1657,1656,   0,   0,   0,   0,1659,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,1660,   0,   0,   0,   0,1661,   0,   0,   0,   0,1662,\n-     0,   0,   0,   0,1663,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,1658,   0,   0,   0,   0,   0,   0,   0,   0,   0,1664,   0,1665,1673,   0,\n-  1674,   0,   0,   0,   0,   0,   0,   0,   0,1666,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1668,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,1669,   0,   0,   0,   0,1670,   0,   0,   0,   0,1671,\n-     0,   0,   0,   0,1672,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,1667,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1675,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1676,   0,\n-  1677,   0,1678,   0,1679,   0,1680,   0,   0,   0,1681,   0,   0,   0,   0,   0,\n+     9,   9,   9,   9,   9,   9,   9,   9,   9,   9,   9,   9,   9,   9,   0,   0,\n@@ -2640,138 +2574,206 @@\n-     0,   0,   0,1682,   0,1683,   0,   0,1684,1685,   0,1686,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0, 953,1138, 955,1140, 956,1141, 957,1142,\n-  1324,1351, 963,1148, 965,1150, 968,1153, 966,1151, 967,1152,1378,1380,1379,1381,\n-   984,1169, 985,1170,1420,1421, 986,1171, 989,1174, 995,1180, 998,1183, 996,1181,\n-   999,1184,1000,1185,1015,1200,1329,1356,1017,1203,1019,1205,1021,1207,1024,1210,\n-  1687,1688,1027,1213,1026,1212,1028,1214,1029,1215,1030,1216,1034,1220,1036,1222,\n-  1039,1225,1038,1224,1334,1361,1336,1363,1382,1384,1383,1385,1056,1242,1057,1243,\n-  1059,1245,1063,1249,1689,1690,1065,1251,1068,1254,1070,1256,1386,1387,1388,1389,\n-  1691,1692,1073,1259,1075,1262,1079,1266,1078,1265,1095,1282,1098,1285,1097,1284,\n-  1390,1391,1392,1393,1099,1286,1100,1287,1101,1288,1102,1289,1105,1292,1104,1291,\n-  1106,1294,1107,1295,1108,1296,1114,1302,1119,1308,1122,1311,1123,1312,1186,1260,\n-  1293,1305,   0,1394,   0,   0,   0,   0, 952,1137, 947,1132,1317,1344,1316,1343,\n-  1319,1346,1318,1345,1693,1695,1371,1375,1370,1374,1373,1377,1372,1376,1694,1696,\n-   981,1166, 977,1162, 972,1157,1326,1353,1325,1352,1328,1355,1327,1354,1697,1698,\n-  1009,1194,1013,1198,1054,1240,1048,1234,1331,1358,1330,1357,1333,1360,1332,1359,\n-  1699,1700,1396,1401,1395,1400,1398,1403,1397,1402,1399,1404,1094,1281,1087,1274,\n-  1406,1411,1405,1410,1408,1413,1407,1412,1409,1414,1109,1297,1117,1306,1116,1304,\n-  1112,1300,   0,   0,   0,   0,   0,   0,1471,1472,1701,1705,1702,1706,1703,1707,\n-  1430,1431,1715,1719,1716,1720,1717,1721,1477,1478,1729,1731,1730,1732,   0,   0,\n-  1435,1436,1733,1735,1734,1736,   0,   0,1481,1482,1737,1741,1738,1742,1739,1743,\n-  1439,1440,1751,1755,1752,1756,1753,1757,1490,1491,1765,1768,1766,1769,1767,1770,\n-  1447,1448,1771,1774,1772,1775,1773,1776,1495,1496,1777,1779,1778,1780,   0,   0,\n-  1451,1452,1781,1783,1782,1784,   0,   0,1504,1505,1785,1788,1786,1789,1787,1790,\n-     0,1459,   0,1791,   0,1792,   0,1793,1509,1510,1794,1798,1795,1799,1796,1800,\n-  1462,1463,1808,1812,1809,1813,1810,1814,1467,  21,1475,  22,1479,  23,1485,  24,\n-  1493,  27,1499,  28,1507,  29,   0,   0,1704,1708,1709,1710,1711,1712,1713,1714,\n-  1718,1722,1723,1724,1725,1726,1727,1728,1740,1744,1745,1746,1747,1748,1749,1750,\n-  1754,1758,1759,1760,1761,1762,1763,1764,1797,1801,1802,1803,1804,1805,1806,1807,\n-  1811,1815,1816,1817,1818,1819,1820,1821,1470,1469,1822,1474,1465,   0,1473,1825,\n-  1429,1428,1426,  12,1432,   0,  26,   0,   0,1315,1823,1484,1466,   0,1483,1829,\n-  1433,  13,1437,  14,1441,1826,1827,1828,1488,1487,1513,  19,   0,   0,1492,1515,\n-  1445,1444,1442,  15,   0,1831,1832,1833,1502,1501,1516,  25,1497,1498,1506,1518,\n-  1457,1456,1454,  17,1453,1313,  11,   3,   0,   0,1824,1512,1519,   0,1511,1830,\n-  1449,  16,1460,  18,1464,   4,   0,   0,  30,  31,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  20,   0,\n-     0,   0,   2,   6,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,1834,1835,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,1836,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,1837,1839,1838,   0,   0,   0,   0,1840,   0,   0,   0,\n-     0,1841,   0,   0,1842,   0,   0,   0,   0,   0,   0,   0,1843,   0,1844,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,1845,   0,   0,1846,   0,   0,1847,\n-     0,1848,   0,   0,   0,   0,   0,   0, 937,   0,1850,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,1849, 936, 938,1851,1852,   0,   0,1853,1854,   0,   0,\n-  1855,1856,   0,   0,   0,   0,   0,   0,1857,1858,   0,   0,1861,1862,   0,   0,\n-  1863,1864,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,1867,1868,1869,1870,1859,1860,1865,1866,   0,   0,   0,   0,\n-     0,   0,1871,1872,1873,1874,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,  32,  33,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,1875,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,1877,   0,1878,   0,1879,   0,1880,   0,1881,   0,1882,   0,\n-  1883,   0,1884,   0,1885,   0,1886,   0,1887,   0,1888,   0,   0,1889,   0,1890,\n-     0,1891,   0,   0,   0,   0,   0,   0,1892,1893,   0,1894,1895,   0,1896,1897,\n-     0,1898,1899,   0,1900,1901,   0,   0,   0,   0,   0,   0,1876,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,1902,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,1904,   0,1905,   0,1906,   0,1907,   0,1908,   0,1909,   0,\n-  1910,   0,1911,   0,1912,   0,1913,   0,1914,   0,1915,   0,   0,1916,   0,1917,\n-     0,1918,   0,   0,   0,   0,   0,   0,1919,1920,   0,1921,1922,   0,1923,1924,\n-     0,1925,1926,   0,1927,1928,   0,   0,   0,   0,   0,   0,1903,   0,   0,1929,\n-  1930,1931,1932,   0,   0,   0,1933,   0, 710, 385, 724, 715, 455, 103, 186, 825,\n-   825, 242, 751, 205, 241, 336, 524, 601, 663, 676, 688, 738, 411, 434, 474, 500,\n-   649, 746, 799, 108, 180, 416, 482, 662, 810, 275, 462, 658, 692, 344, 618, 679,\n-   293, 388, 440, 492, 740, 116, 146, 168, 368, 414, 481, 527, 606, 660, 665, 722,\n-   781, 803, 809, 538, 553, 588, 642, 758, 811, 701, 233, 299, 573, 612, 487, 540,\n-   714, 779, 232, 267, 412, 445, 457, 585, 594, 766, 167, 613, 149, 148, 560, 589,\n-   648, 768, 708, 345, 411, 704, 105, 259, 313, 496, 518, 174, 542, 120, 307, 101,\n-   430, 372, 584, 183, 228, 529, 650, 697, 424, 732, 428, 349, 632, 355, 517, 110,\n-   135, 147, 403, 580, 624, 700, 750, 170, 193, 245, 297, 374, 463, 543, 763, 801,\n-   812, 815, 162, 384, 420, 730, 287, 330, 337, 366, 459, 476, 509, 558, 591, 610,\n-   726, 652, 734, 759, 154, 163, 198, 473, 683, 697, 292, 311, 353, 423, 572, 494,\n-   113, 217, 259, 280, 314, 499, 506, 603, 608, 752, 778, 782, 788, 117, 557, 748,\n-   774, 320, 109, 126, 260, 265, 373, 411, 479, 523, 655, 737, 823, 380, 765, 161,\n-   395, 398, 438, 451, 502, 516, 537, 583, 791, 136, 340, 769, 122, 273, 446, 727,\n-   305, 322, 400, 496, 771, 155, 190, 269, 377, 391, 406, 432, 501, 519, 599, 684,\n-   687, 749, 776, 175, 452, 191, 480, 510, 659, 772, 805, 813, 397, 444, 619, 566,\n-   568, 575, 491, 471, 707, 111, 636, 156, 153, 288, 346, 578, 256, 435, 383, 729,\n-   680, 767, 694, 295, 128, 210,   0,   0, 227,   0, 379,   0,   0, 150, 493, 525,\n-   544, 551, 552, 556, 783, 576, 604,   0, 661,   0, 703,   0,   0, 735, 743,   0,\n-     0,   0, 793, 794, 795, 808, 741, 773, 118, 127, 130, 166, 169, 177, 207, 213,\n-   215, 226, 229, 268, 270, 317, 327, 329, 335, 369, 375, 381, 404, 441, 448, 458,\n-   477, 484, 503, 539, 545, 547, 546, 548, 549, 550, 554, 555, 561, 564, 569, 591,\n-   593, 595, 598, 607, 620, 625, 625, 651, 690, 695, 705, 706, 716, 717, 733, 735,\n-   777, 786, 790, 315, 869, 623,   0,   0, 102, 145, 134, 115, 129, 138, 165, 171,\n-   207, 202, 206, 212, 227, 231, 240, 243, 250, 254, 294, 296, 303, 308, 319, 325,\n-   321, 329, 326, 335, 341, 357, 360, 362, 370, 379, 388, 389, 393, 421, 424, 438,\n-   456, 454, 458, 465, 477, 535, 485, 490, 493, 507, 512, 514, 521, 522, 525, 526,\n-   528, 533, 532, 541, 565, 569, 574, 586, 591, 597, 607, 637, 647, 674, 691, 693,\n-   695, 698, 703, 699, 705, 704, 702, 706, 709, 717, 728, 736, 747, 754, 770, 777,\n-   783, 784, 786, 787, 790, 802, 825, 848, 847, 857,  55,  65,  66, 883, 892, 916,\n-   822, 824,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,1586,   0,1605,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,1602,1603,1934,1935,1574,1575,1576,1577,1579,1580,1581,1583,1584,   0,\n-  1585,1587,1588,1589,1591,   0,1592,   0,1593,1594,   0,1595,1596,   0,1598,1599,\n-  1600,1601,1604,1582,1578,1590,1597,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,1936,   0,1937,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,1938,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,1939,1940,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,1941,1942,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,1944,1943,   0,1945,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,1946,1947,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-  1948,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,1949,1950,1951,1952,1953,1954,1955,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,1956,1957,1958,1960,1959,1961,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0, 106, 104, 107, 826, 114, 118, 119, 121,\n-   123, 124, 127, 125,  34, 830, 130, 131, 132, 137, 827,  35, 133, 139, 829, 142,\n-   143, 112, 144, 145, 924, 151, 152,  37, 157, 158, 159, 160,  38, 165, 166, 169,\n-   171, 172, 173, 174, 176, 177, 178, 179, 181, 182, 182, 182, 833, 468, 184, 185,\n-   834, 187, 188, 189, 196, 192, 194, 195, 197, 199, 200, 201, 203, 204, 204, 206,\n-   208, 209, 211, 218, 213, 219, 214, 216, 153, 234, 221, 222, 223, 220, 225, 224,\n-   230, 835, 235, 236, 237, 238, 239, 244, 836, 837, 247, 248, 249, 246, 251,  39,\n-    40, 253, 255, 255, 838, 257, 258, 259, 261, 839, 262, 263, 301, 264,  41, 266,\n-   270, 272, 271, 841, 274, 842, 277, 276, 278, 281, 282,  42, 283, 284, 285, 286,\n-    43, 843,  44, 289, 290, 291, 293, 934, 298, 845, 845, 621, 300, 300,  45, 852,\n-   894, 302, 304,  46, 306, 309, 310, 312, 316,  48,  47, 317, 846, 318, 323, 324,\n-   325, 324, 328, 329, 333, 331, 332, 334, 335, 336, 338, 339, 342, 343, 347, 351,\n-   849, 350, 348, 352, 354, 359, 850, 361, 358, 356,  49, 363, 365, 367, 364,  50,\n-   369, 371, 851, 376, 386, 378,  53, 381,  52,  51, 140, 141, 387, 382, 614,  78,\n-   388, 389, 390, 394, 392, 856,  54, 399, 396, 402, 404, 858, 405, 401, 407,  55,\n-   408, 409, 410, 413, 859, 415,  56, 417, 860, 418,  57, 419, 422, 424, 425, 861,\n-   840, 862, 426, 863, 429, 431, 427, 433, 437, 441, 438, 439, 442, 443, 864, 436,\n-   449, 450,  58, 454, 453, 865, 447, 460, 866, 867, 461, 466, 465, 464,  59, 467,\n-   470, 469, 472, 828, 475, 868, 478, 870, 483, 485, 486, 871, 488, 489, 872, 873,\n-   495, 497,  60, 498,  61,  61, 504, 505, 507, 508, 511,  62, 513, 874, 515, 875,\n-   518, 844, 520, 876, 877, 878,  63,  64, 528, 880, 879, 881, 882, 530, 531, 531,\n-   533,  66, 534,  67,  68, 884, 536, 538, 541,  69, 885, 549, 886, 887, 556, 559,\n-    70, 561, 562, 563, 888, 889, 889, 567,  71, 890, 570, 571,  72, 891, 577,  73,\n-   581, 579, 582, 893, 587,  74, 590, 592, 596,  75, 895, 896,  76, 897, 600, 898,\n-   602, 605, 607, 899, 900, 609, 901, 611, 853,  77, 615, 616,  79, 617, 252, 902,\n-   903, 854, 855, 621, 622, 731,  80, 627, 626, 628, 164, 629, 630, 631, 633, 904,\n-   632, 634, 639, 640, 635, 641, 646, 651, 638, 643, 644, 645, 905, 907, 906,  81,\n-   653, 654, 656, 911, 657, 908,  82,  83, 909, 910,  84, 664, 665, 666, 667, 669,\n-   668, 671, 670, 674, 672, 673, 675,  85, 677, 678,  86, 681, 682, 912, 685, 686,\n-    87, 689,  36, 913, 914,  88,  89, 696, 702, 709, 711, 915, 712, 713, 718, 719,\n-   917, 831, 721, 720, 723, 832, 725, 728, 918, 919, 739, 742, 744, 920, 745, 753,\n-   756, 757, 755, 760, 761, 921, 762,  90, 764, 922,  91, 775, 279, 780, 923, 925,\n-    92,  93, 785, 926,  94, 927, 787, 787, 789, 928, 792,  95, 796, 797, 798, 800,\n-    96, 929, 802, 804, 806,  97,  98, 807, 930,  99, 931, 932, 933, 814, 100, 816,\n-   817, 818, 819, 820, 821, 935,   0,   0,\n+   939, 940, 941, 942, 946, 948,   0, 962, 969, 970, 971, 976,1001,1002,1003,1008,\n+     0,1033,1040,1041,1042,1043,1047,   0,   0,1080,1081,1082,1086,1110,   0,   0,\n+  1124,1125,1126,1127,1131,1133,   0,1147,1154,1155,1156,1161,1187,1188,1189,1193,\n+     0,1219,1226,1227,1228,1229,1233,   0,   0,1267,1268,1269,1273,1298,   0,1303,\n+   943,1128, 944,1129, 954,1139, 958,1143, 959,1144, 960,1145, 961,1146, 964,1149,\n+     0,   0, 973,1158, 974,1159, 975,1160, 983,1168, 978,1163, 988,1173, 990,1175,\n+   991,1176, 993,1178, 994,1179,   0,   0,1004,1190,1005,1191,1006,1192,1014,1199,\n+  1007,   0,   0,   0,1016,1201,1020,1206,   0,1022,1208,1025,1211,1023,1209,   0,\n+     0,   0,   0,1032,1218,1037,1223,1035,1221,   0,   0,   0,1044,1230,1045,1231,\n+  1049,1235,   0,   0,1058,1244,1064,1250,1060,1246,1066,1252,1067,1253,1072,1258,\n+  1069,1255,1077,1264,1074,1261,   0,   0,1083,1270,1084,1271,1085,1272,1088,1275,\n+  1089,1276,1096,1283,1103,1290,1111,1299,1115,1118,1307,1120,1309,1121,1310,   0,\n+  1053,1239,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1093,\n+  1280,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 949,1134,1010,\n+  1195,1050,1236,1090,1277,1341,1368,1340,1367,1342,1369,1339,1366,   0,1320,1347,\n+  1418,1419,1323,1350,   0,   0, 992,1177,1018,1204,1055,1241,1416,1417,1415,1424,\n+  1202,   0,   0,   0, 987,1172,   0,   0,1031,1217,1321,1348,1322,1349,1338,1365,\n+   950,1135, 951,1136, 979,1164, 980,1165,1011,1196,1012,1197,1051,1237,1052,1238,\n+  1061,1247,1062,1248,1091,1278,1092,1279,1071,1257,1076,1263,   0,   0, 997,1182,\n+     0,   0,   0,   0,   0,   0, 945,1130, 982,1167,1337,1364,1335,1362,1046,1232,\n+  1422,1423,1113,1301,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     8,   9,   0,  10,1425,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0,\n+     0,   0,   0,   0,   0,1314,1427,   5,1434,1438,1443,   0,1450,   0,1455,1461,\n+  1514,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1446,1458,1468,1476,1480,1486,\n+  1517,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1489,1503,1494,1500,1508,   0,\n+     0,   0,   0,1520,1521,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+  1526,1528,   0,1525,   0,   0,   0,1522,   0,   0,   0,   0,1536,1532,1539,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,1534,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,1556,   0,   0,   0,   0,   0,   0,\n+  1548,1550,   0,1547,   0,   0,   0,1567,   0,   0,   0,   0,1558,1554,1561,   0,\n+     0,   0,   0,   0,   0,   0,1568,1569,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,1529,1551,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+  1523,1545,1524,1546,   0,   0,1527,1549,   0,   0,1570,1571,1530,1552,1531,1553,\n+     0,   0,1533,1555,1535,1557,1537,1559,   0,   0,1572,1573,1544,1566,1538,1560,\n+  1540,1562,1541,1563,1542,1564,   0,   0,1543,1565,   0,   0,   0,   0,   0,   0,\n+     0,   0,1606,1607,1609,1608,1610,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+  1613,   0,1611,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,1612,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,1620,   0,   0,   0,   0,   0,   0,\n+     0,1623,   0,   0,1624,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,1614,1615,1616,1617,1618,1619,1621,1622,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1628,1629,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1625,1626,   0,1627,\n+     0,   0,   0,1634,   0,   0,1635,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,1630,1631,1632,   0,   0,1633,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,1639,   0,   0,1638,1640,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1636,1637,   0,   0,\n+     0,   0,   0,   0,1641,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1642,1644,1643,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,1645,   0,   0,   0,   0,   0,   0,   0,\n+  1646,   0,   0,   0,   0,   0,   0,1648,1649,   0,1647,1650,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1651,1653,1652,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1654,   0,1655,1657,1656,   0,\n+     0,   0,   0,1659,   0,   0,   0,   0,   0,   0,   0,   0,   0,1660,   0,   0,\n+     0,   0,1661,   0,   0,   0,   0,1662,   0,   0,   0,   0,1663,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,1658,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,1664,   0,1665,1673,   0,1674,   0,   0,   0,   0,   0,   0,   0,\n+     0,1666,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,1668,   0,   0,   0,   0,   0,   0,   0,   0,   0,1669,   0,   0,\n+     0,   0,1670,   0,   0,   0,   0,1671,   0,   0,   0,   0,1672,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,1667,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,1675,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,1676,   0,1677,   0,1678,   0,1679,   0,1680,   0,\n+     0,   0,1681,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1682,   0,1683,   0,   0,\n+  1684,1685,   0,1686,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+   953,1138, 955,1140, 956,1141, 957,1142,1324,1351, 963,1148, 965,1150, 968,1153,\n+   966,1151, 967,1152,1378,1380,1379,1381, 984,1169, 985,1170,1420,1421, 986,1171,\n+   989,1174, 995,1180, 998,1183, 996,1181, 999,1184,1000,1185,1015,1200,1329,1356,\n+  1017,1203,1019,1205,1021,1207,1024,1210,1687,1688,1027,1213,1026,1212,1028,1214,\n+  1029,1215,1030,1216,1034,1220,1036,1222,1039,1225,1038,1224,1334,1361,1336,1363,\n+  1382,1384,1383,1385,1056,1242,1057,1243,1059,1245,1063,1249,1689,1690,1065,1251,\n+  1068,1254,1070,1256,1386,1387,1388,1389,1691,1692,1073,1259,1075,1262,1079,1266,\n+  1078,1265,1095,1282,1098,1285,1097,1284,1390,1391,1392,1393,1099,1286,1100,1287,\n+  1101,1288,1102,1289,1105,1292,1104,1291,1106,1294,1107,1295,1108,1296,1114,1302,\n+  1119,1308,1122,1311,1123,1312,1186,1260,1293,1305,   0,1394,   0,   0,   0,   0,\n+   952,1137, 947,1132,1317,1344,1316,1343,1319,1346,1318,1345,1693,1695,1371,1375,\n+  1370,1374,1373,1377,1372,1376,1694,1696, 981,1166, 977,1162, 972,1157,1326,1353,\n+  1325,1352,1328,1355,1327,1354,1697,1698,1009,1194,1013,1198,1054,1240,1048,1234,\n+  1331,1358,1330,1357,1333,1360,1332,1359,1699,1700,1396,1401,1395,1400,1398,1403,\n+  1397,1402,1399,1404,1094,1281,1087,1274,1406,1411,1405,1410,1408,1413,1407,1412,\n+  1409,1414,1109,1297,1117,1306,1116,1304,1112,1300,   0,   0,   0,   0,   0,   0,\n+  1471,1472,1701,1705,1702,1706,1703,1707,1430,1431,1715,1719,1716,1720,1717,1721,\n+  1477,1478,1729,1731,1730,1732,   0,   0,1435,1436,1733,1735,1734,1736,   0,   0,\n+  1481,1482,1737,1741,1738,1742,1739,1743,1439,1440,1751,1755,1752,1756,1753,1757,\n+  1490,1491,1765,1768,1766,1769,1767,1770,1447,1448,1771,1774,1772,1775,1773,1776,\n+  1495,1496,1777,1779,1778,1780,   0,   0,1451,1452,1781,1783,1782,1784,   0,   0,\n+  1504,1505,1785,1788,1786,1789,1787,1790,   0,1459,   0,1791,   0,1792,   0,1793,\n+  1509,1510,1794,1798,1795,1799,1796,1800,1462,1463,1808,1812,1809,1813,1810,1814,\n+  1467,  21,1475,  22,1479,  23,1485,  24,1493,  27,1499,  28,1507,  29,   0,   0,\n+  1704,1708,1709,1710,1711,1712,1713,1714,1718,1722,1723,1724,1725,1726,1727,1728,\n+  1740,1744,1745,1746,1747,1748,1749,1750,1754,1758,1759,1760,1761,1762,1763,1764,\n+  1797,1801,1802,1803,1804,1805,1806,1807,1811,1815,1816,1817,1818,1819,1820,1821,\n+  1470,1469,1822,1474,1465,   0,1473,1825,1429,1428,1426,  12,1432,   0,  26,   0,\n+     0,1315,1823,1484,1466,   0,1483,1829,1433,  13,1437,  14,1441,1826,1827,1828,\n+  1488,1487,1513,  19,   0,   0,1492,1515,1445,1444,1442,  15,   0,1831,1832,1833,\n+  1502,1501,1516,  25,1497,1498,1506,1518,1457,1456,1454,  17,1453,1313,  11,   3,\n+     0,   0,1824,1512,1519,   0,1511,1830,1449,  16,1460,  18,1464,   4,   0,   0,\n+    30,  31,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,  20,   0,   0,   0,   2,   6,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1834,1835,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1836,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1837,1839,1838,\n+     0,   0,   0,   0,1840,   0,   0,   0,   0,1841,   0,   0,1842,   0,   0,   0,\n+     0,   0,   0,   0,1843,   0,1844,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,1845,   0,   0,1846,   0,   0,1847,   0,1848,   0,   0,   0,   0,   0,   0,\n+   937,   0,1850,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1849, 936, 938,\n+  1851,1852,   0,   0,1853,1854,   0,   0,1855,1856,   0,   0,   0,   0,   0,   0,\n+  1857,1858,   0,   0,1861,1862,   0,   0,1863,1864,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1867,1868,1869,1870,\n+  1859,1860,1865,1866,   0,   0,   0,   0,   0,   0,1871,1872,1873,1874,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,  32,  33,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1875,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1877,   0,1878,   0,\n+  1879,   0,1880,   0,1881,   0,1882,   0,1883,   0,1884,   0,1885,   0,1886,   0,\n+  1887,   0,1888,   0,   0,1889,   0,1890,   0,1891,   0,   0,   0,   0,   0,   0,\n+  1892,1893,   0,1894,1895,   0,1896,1897,   0,1898,1899,   0,1900,1901,   0,   0,\n+     0,   0,   0,   0,1876,   0,   0,   0,   0,   0,   0,   0,   0,   0,1902,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1904,   0,1905,   0,\n+  1906,   0,1907,   0,1908,   0,1909,   0,1910,   0,1911,   0,1912,   0,1913,   0,\n+  1914,   0,1915,   0,   0,1916,   0,1917,   0,1918,   0,   0,   0,   0,   0,   0,\n+  1919,1920,   0,1921,1922,   0,1923,1924,   0,1925,1926,   0,1927,1928,   0,   0,\n+     0,   0,   0,   0,1903,   0,   0,1929,1930,1931,1932,   0,   0,   0,1933,   0,\n+   710, 385, 724, 715, 455, 103, 186, 825, 825, 242, 751, 205, 241, 336, 524, 601,\n+   663, 676, 688, 738, 411, 434, 474, 500, 649, 746, 799, 108, 180, 416, 482, 662,\n+   810, 275, 462, 658, 692, 344, 618, 679, 293, 388, 440, 492, 740, 116, 146, 168,\n+   368, 414, 481, 527, 606, 660, 665, 722, 781, 803, 809, 538, 553, 588, 642, 758,\n+   811, 701, 233, 299, 573, 612, 487, 540, 714, 779, 232, 267, 412, 445, 457, 585,\n+   594, 766, 167, 613, 149, 148, 560, 589, 648, 768, 708, 345, 411, 704, 105, 259,\n+   313, 496, 518, 174, 542, 120, 307, 101, 430, 372, 584, 183, 228, 529, 650, 697,\n+   424, 732, 428, 349, 632, 355, 517, 110, 135, 147, 403, 580, 624, 700, 750, 170,\n+   193, 245, 297, 374, 463, 543, 763, 801, 812, 815, 162, 384, 420, 730, 287, 330,\n+   337, 366, 459, 476, 509, 558, 591, 610, 726, 652, 734, 759, 154, 163, 198, 473,\n+   683, 697, 292, 311, 353, 423, 572, 494, 113, 217, 259, 280, 314, 499, 506, 603,\n+   608, 752, 778, 782, 788, 117, 557, 748, 774, 320, 109, 126, 260, 265, 373, 411,\n+   479, 523, 655, 737, 823, 380, 765, 161, 395, 398, 438, 451, 502, 516, 537, 583,\n+   791, 136, 340, 769, 122, 273, 446, 727, 305, 322, 400, 496, 771, 155, 190, 269,\n+   377, 391, 406, 432, 501, 519, 599, 684, 687, 749, 776, 175, 452, 191, 480, 510,\n+   659, 772, 805, 813, 397, 444, 619, 566, 568, 575, 491, 471, 707, 111, 636, 156,\n+   153, 288, 346, 578, 256, 435, 383, 729, 680, 767, 694, 295, 128, 210,   0,   0,\n+   227,   0, 379,   0,   0, 150, 493, 525, 544, 551, 552, 556, 783, 576, 604,   0,\n+   661,   0, 703,   0,   0, 735, 743,   0,   0,   0, 793, 794, 795, 808, 741, 773,\n+   118, 127, 130, 166, 169, 177, 207, 213, 215, 226, 229, 268, 270, 317, 327, 329,\n+   335, 369, 375, 381, 404, 441, 448, 458, 477, 484, 503, 539, 545, 547, 546, 548,\n+   549, 550, 554, 555, 561, 564, 569, 591, 593, 595, 598, 607, 620, 625, 625, 651,\n+   690, 695, 705, 706, 716, 717, 733, 735, 777, 786, 790, 315, 869, 623,   0,   0,\n+   102, 145, 134, 115, 129, 138, 165, 171, 207, 202, 206, 212, 227, 231, 240, 243,\n+   250, 254, 294, 296, 303, 308, 319, 325, 321, 329, 326, 335, 341, 357, 360, 362,\n+   370, 379, 388, 389, 393, 421, 424, 438, 456, 454, 458, 465, 477, 535, 485, 490,\n+   493, 507, 512, 514, 521, 522, 525, 526, 528, 533, 532, 541, 565, 569, 574, 586,\n+   591, 597, 607, 637, 647, 674, 691, 693, 695, 698, 703, 699, 705, 704, 702, 706,\n+   709, 717, 728, 736, 747, 754, 770, 777, 783, 784, 786, 787, 790, 802, 825, 848,\n+   847, 857,  55,  65,  66, 883, 892, 916, 822, 824,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1586,   0,1605,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1602,1603,1934,1935,1574,1575,\n+  1576,1577,1579,1580,1581,1583,1584,   0,1585,1587,1588,1589,1591,   0,1592,   0,\n+  1593,1594,   0,1595,1596,   0,1598,1599,1600,1601,1604,1582,1578,1590,1597,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1936,   0,1937,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1938,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1939,1940,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1941,1942,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1944,1943,   0,1945,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1946,1947,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,1948,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1949,1950,\n+  1951,1952,1953,1954,1955,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1956,1957,1958,1960,1959,\n+  1961,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+   106, 104, 107, 826, 114, 118, 119, 121, 123, 124, 127, 125,  34, 830, 130, 131,\n+   132, 137, 827,  35, 133, 139, 829, 142, 143, 112, 144, 145, 924, 151, 152,  37,\n+   157, 158, 159, 160,  38, 165, 166, 169, 171, 172, 173, 174, 176, 177, 178, 179,\n+   181, 182, 182, 182, 833, 468, 184, 185, 834, 187, 188, 189, 196, 192, 194, 195,\n+   197, 199, 200, 201, 203, 204, 204, 206, 208, 209, 211, 218, 213, 219, 214, 216,\n+   153, 234, 221, 222, 223, 220, 225, 224, 230, 835, 235, 236, 237, 238, 239, 244,\n+   836, 837, 247, 248, 249, 246, 251,  39,  40, 253, 255, 255, 838, 257, 258, 259,\n+   261, 839, 262, 263, 301, 264,  41, 266, 270, 272, 271, 841, 274, 842, 277, 276,\n+   278, 281, 282,  42, 283, 284, 285, 286,  43, 843,  44, 289, 290, 291, 293, 934,\n+   298, 845, 845, 621, 300, 300,  45, 852, 894, 302, 304,  46, 306, 309, 310, 312,\n+   316,  48,  47, 317, 846, 318, 323, 324, 325, 324, 328, 329, 333, 331, 332, 334,\n+   335, 336, 338, 339, 342, 343, 347, 351, 849, 350, 348, 352, 354, 359, 850, 361,\n+   358, 356,  49, 363, 365, 367, 364,  50, 369, 371, 851, 376, 386, 378,  53, 381,\n+    52,  51, 140, 141, 387, 382, 614,  78, 388, 389, 390, 394, 392, 856,  54, 399,\n+   396, 402, 404, 858, 405, 401, 407,  55, 408, 409, 410, 413, 859, 415,  56, 417,\n+   860, 418,  57, 419, 422, 424, 425, 861, 840, 862, 426, 863, 429, 431, 427, 433,\n+   437, 441, 438, 439, 442, 443, 864, 436, 449, 450,  58, 454, 453, 865, 447, 460,\n+   866, 867, 461, 466, 465, 464,  59, 467, 470, 469, 472, 828, 475, 868, 478, 870,\n+   483, 485, 486, 871, 488, 489, 872, 873, 495, 497,  60, 498,  61,  61, 504, 505,\n+   507, 508, 511,  62, 513, 874, 515, 875, 518, 844, 520, 876, 877, 878,  63,  64,\n+   528, 880, 879, 881, 882, 530, 531, 531, 533,  66, 534,  67,  68, 884, 536, 538,\n+   541,  69, 885, 549, 886, 887, 556, 559,  70, 561, 562, 563, 888, 889, 889, 567,\n+    71, 890, 570, 571,  72, 891, 577,  73, 581, 579, 582, 893, 587,  74, 590, 592,\n+   596,  75, 895, 896,  76, 897, 600, 898, 602, 605, 607, 899, 900, 609, 901, 611,\n+   853,  77, 615, 616,  79, 617, 252, 902, 903, 854, 855, 621, 622, 731,  80, 627,\n+   626, 628, 164, 629, 630, 631, 633, 904, 632, 634, 639, 640, 635, 641, 646, 651,\n+   638, 643, 644, 645, 905, 907, 906,  81, 653, 654, 656, 911, 657, 908,  82,  83,\n+   909, 910,  84, 664, 665, 666, 667, 669, 668, 671, 670, 674, 672, 673, 675,  85,\n+   677, 678,  86, 681, 682, 912, 685, 686,  87, 689,  36, 913, 914,  88,  89, 696,\n+   702, 709, 711, 915, 712, 713, 718, 719, 917, 831, 721, 720, 723, 832, 725, 728,\n+   918, 919, 739, 742, 744, 920, 745, 753, 756, 757, 755, 760, 761, 921, 762,  90,\n+   764, 922,  91, 775, 279, 780, 923, 925,  92,  93, 785, 926,  94, 927, 787, 787,\n+   789, 928, 792,  95, 796, 797, 798, 800,  96, 929, 802, 804, 806,  97,  98, 807,\n+   930,  99, 931, 932, 933, 814, 100, 816, 817, 818, 819, 820, 821, 935,   0,   0,\n@@ -2800,1 +2802,1 @@\n-  return u<1114110u?_hb_ucd_u8[6800+(((_hb_ucd_u8[1312+(((_hb_ucd_u16[((_hb_ucd_u8[544+(((_hb_ucd_u8[u>>1>>3>>3>>4])<<4)+((u>>1>>3>>3)&15u))])<<3)+((u>>1>>3)&7u)])<<3)+((u>>1)&7u))])<<1)+((u)&1u))]:2;\n+  return u<1114110u?_hb_ucd_u8[6808+(((_hb_ucd_u8[1312+(((_hb_ucd_u16[((_hb_ucd_u8[544+(((_hb_ucd_u8[u>>1>>3>>3>>4])<<4)+((u>>1>>3>>3)&15u))])<<3)+((u>>1>>3)&7u)])<<3)+((u>>1)&7u))])<<1)+((u)&1u))]:2;\n@@ -2805,1 +2807,1 @@\n-  return u<125259u?_hb_ucd_u8[8792+(((_hb_ucd_u8[8236+(((_hb_ucd_u8[7776+(((_hb_ucd_u8[7424+(((_hb_ucd_u8[7178+(u>>2>>2>>2>>3)])<<3)+((u>>2>>2>>2)&7u))])<<2)+((u>>2>>2)&3u))])<<2)+((u>>2)&3u))])<<2)+((u)&3u))]:0;\n+  return u<125259u?_hb_ucd_u8[8800+(((_hb_ucd_u8[8244+(((_hb_ucd_u8[7784+(((_hb_ucd_u8[7432+(((_hb_ucd_u8[7186+(u>>2>>2>>2>>3)])<<3)+((u>>2>>2>>2)&7u))])<<2)+((u>>2>>2)&3u))])<<2)+((u>>2)&3u))])<<2)+((u)&3u))]:0;\n@@ -2815,1 +2817,1 @@\n-  return u<65380u?_hb_ucd_i16[((_hb_ucd_u8[9540+(((_hb_ucd_u8[9420+(((_hb_ucd_b4(9292+_hb_ucd_u8,u>>2>>3>>3))<<3)+((u>>2>>3)&7u))])<<3)+((u>>2)&7u))])<<2)+((u)&3u)]:0;\n+  return u<65380u?_hb_ucd_i16[((_hb_ucd_u8[9548+(((_hb_ucd_u8[9428+(((_hb_ucd_b4(9300+_hb_ucd_u8,u>>2>>3>>3))<<3)+((u>>2>>3)&7u))])<<3)+((u>>2)&7u))])<<2)+((u)&3u)]:0;\n@@ -2820,1 +2822,1 @@\n-  return u<918000u?_hb_ucd_u8[11062+(((_hb_ucd_u16[2040+(((_hb_ucd_u8[10326+(((_hb_ucd_u8[9876+(u>>3>>4>>4)])<<4)+((u>>3>>4)&15u))])<<4)+((u>>3)&15u))])<<3)+((u)&7u))]:2;\n+  return u<918000u?_hb_ucd_u8[11070+(((_hb_ucd_u16[2048+(((_hb_ucd_u8[10334+(((_hb_ucd_u8[9884+(u>>3>>4>>4)])<<4)+((u>>3>>4)&15u))])<<4)+((u>>3)&15u))])<<3)+((u)&7u))]:2;\n@@ -2825,1 +2827,1 @@\n-  return u<195102u?_hb_ucd_u16[6008+(((_hb_ucd_u8[17068+(((_hb_ucd_u8[16686+(u>>4>>5)])<<5)+((u>>4)&31u))])<<4)+((u)&15u))]:0;\n+  return u<195102u?_hb_ucd_u16[6032+(((_hb_ucd_u8[17084+(((_hb_ucd_u8[16702+(u>>4>>5)])<<5)+((u>>4)&31u))])<<4)+((u)&15u))]:0;\n@@ -2832,1 +2834,1 @@\n-_hb_ucd_u8[14744] =\n+_hb_ucd_u8[14752] =\n@@ -2909,6 +2911,5 @@\n-   34, 34, 34, 34, 34, 34, 34,246,122,122,122,122,122,122,122,122,\n-   34, 34, 34, 34,247,122,122,122,122,122,122,122,122,122,122,122,\n-   34, 34, 34, 34, 34, 34,248, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-   34, 34, 34, 34, 34, 34, 34,249,122,122,122,122,122,122,122,122,\n-  250,122,251,252,122,122,122,122,122,122,122,122,122,122,122,122,\n-  107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,253,\n+   34, 34, 34, 34, 34, 34, 34,246, 34, 34, 34, 34,247,122,122,122,\n+   34, 34, 34, 34,248,122,122,122,122,122,122,122,122,122,122,122,\n+   34, 34, 34, 34, 34, 34,249, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n+   34, 34, 34, 34, 34, 34, 34,250,122,122,122,122,122,122,122,122,\n+  251,122,252,253,122,122,122,122,122,122,122,122,122,122,122,122,\n@@ -2916,0 +2917,1 @@\n+  107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,255,\n@@ -3078,5 +3080,5 @@\n-   67, 67, 67, 44, 44, 44, 44, 44, 67, 67, 67, 67, 67, 67, 44, 44,\n-    1,  2,154,155,  4,  4,  4,  4,  4, 67,  4,  4,  4,  4,156,157,\n-  158,105,105,105,105, 43, 43, 86,159, 40, 40, 67,105,160, 63, 67,\n-   36, 36, 36, 61, 57,161,162, 69, 36, 36, 36, 36, 36, 63, 40, 69,\n-   44, 44, 62, 36, 36, 36, 36, 36, 67, 27, 27, 67, 67, 67, 67, 67,\n+   67, 67, 67, 44, 44, 44, 44, 44,  1,  2,154,155,  4,  4,  4,  4,\n+    4, 67,  4,  4,  4,  4,156,157,158,105,105,105,105, 43, 43, 86,\n+  159, 40, 40, 67,105,160, 63, 67, 36, 36, 36, 61, 57,161,162, 69,\n+   36, 36, 36, 36, 36, 63, 40, 69, 44, 44, 62, 36, 36, 36, 36, 36,\n+   67, 27, 27, 67, 67, 67, 67, 67, 67, 67, 44, 44, 44, 44, 44, 55,\n@@ -3250,35 +3252,36 @@\n-    8, 44, 44, 44, 44, 44, 44, 44, 55, 67, 67, 67, 67, 67, 67, 67,\n-   27, 27, 27, 27, 27, 27, 91, 67, 67, 67, 67, 67, 67, 67, 67, 44,\n-   44, 44, 44, 67, 67, 67, 67, 67, 67, 92, 44, 44, 44, 44, 44, 44,\n-   67, 67, 67, 67, 92, 44, 44, 44, 67, 44, 44, 44, 44, 44, 44, 44,\n-   67, 67, 67, 67, 67, 25, 41, 41, 67, 67, 67, 67, 44, 44, 67, 67,\n-   67, 67, 67, 92, 44, 55, 67, 67, 67, 67, 67, 67, 44, 44, 44, 44,\n-   67, 67, 67, 67, 67, 67, 67, 55, 67, 67, 67, 44, 44, 44, 44, 67,\n-   67, 92, 67, 67, 67, 67, 67, 67, 79, 44, 44, 44, 44, 44, 44, 44,\n-  171,171,171,171,171,171,171, 44,171,171,171,171,171,171,171,  0,\n-    0,  0, 29, 21, 21, 21, 23, 21, 22, 18, 21, 25, 21, 17, 13, 13,\n-   25, 25, 25, 21, 21,  9,  9,  9,  9, 22, 21, 18, 24, 16, 24,  5,\n-    5,  5,  5, 22, 25, 18, 25,  0, 23, 23, 26, 21, 24, 26,  7, 20,\n-   25,  1, 26, 24, 26, 25, 15, 15, 24, 15,  7, 19, 15, 21,  9, 25,\n-    9,  5,  5, 25,  5,  9,  5,  7,  7,  7,  9,  8,  8,  5,  7,  5,\n-    6,  6, 24, 24,  6, 24, 12, 12,  2,  2,  6,  5,  9, 21,  9,  2,\n-    2,  9, 25,  9, 26, 12, 11, 11,  2,  6,  5, 21, 17,  2,  2, 26,\n-   26, 23,  2, 12, 17, 12, 21, 12, 12, 21,  7,  2,  2,  7,  7, 21,\n-   21,  2,  1,  1, 21, 23, 26, 26,  1, 21,  6,  7,  7, 12, 12,  7,\n-   21,  7, 12,  1, 12,  6,  6, 12, 12, 26,  7, 26, 26,  7,  2,  1,\n-   12,  2,  6,  2, 24,  7,  7,  6,  1, 12, 12, 10, 10, 10, 10, 12,\n-   21,  6,  2, 10, 10,  2, 15, 26, 26,  2,  2, 21,  7, 10, 15,  7,\n-    2, 23, 21, 26, 10,  7, 21, 15, 15,  2, 17,  7, 29,  7,  7, 22,\n-   18,  2, 14, 14, 14,  7, 10, 21, 17, 21, 11, 12,  5,  2,  5,  6,\n-    8,  8,  8, 24,  5, 24,  2, 24,  9, 24, 24,  2, 29, 29, 29,  1,\n-   17, 17, 20, 19, 22, 20, 27, 28,  1, 29, 21, 20, 19, 21, 21, 16,\n-   16, 21, 25, 22, 18, 21, 21, 29,  1,  2, 15,  6, 18,  6, 23,  2,\n-   12, 11,  9, 26, 26,  9, 26,  5,  5, 26, 14,  9,  5, 14, 14, 15,\n-   25, 26, 26, 22, 18, 26, 18, 25, 18, 22,  5, 12,  2,  5, 22, 21,\n-   21, 22, 18, 17, 26,  6,  7, 14, 17, 22, 18, 18, 26, 14, 17,  6,\n-   14,  6, 12, 24, 24,  6, 26, 15,  6, 21, 11, 21, 24,  9,  6,  9,\n-   23, 26,  6, 10,  4,  4,  3,  3,  7, 25, 17, 16, 16, 22, 16, 16,\n-   25, 17, 25,  2, 25, 24,  2, 15, 12, 15, 14,  2, 21, 14,  7, 15,\n-   12, 17, 21,  1, 26, 10, 10,  1, 23, 15,  0,  1,  2,  3,  4,  5,\n-    6,  7,  8,  9,  0, 10, 11, 12, 13,  0, 14,  0,  0,  0,  0,  0,\n-   15,  0, 16,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    8, 44, 44, 44, 44, 44, 44, 44, 67, 67, 67, 67, 67, 67, 44, 44,\n+   55, 67, 67, 67, 67, 67, 67, 67, 27, 27, 27, 27, 27, 27, 91, 67,\n+   67, 67, 67, 67, 67, 67, 67, 44, 44, 44, 44, 67, 67, 67, 67, 67,\n+   67, 92, 44, 44, 44, 44, 44, 44, 67, 67, 67, 67, 92, 44, 44, 44,\n+   67, 44, 44, 44, 44, 44, 44, 44, 67, 67, 67, 67, 67, 25, 41, 41,\n+   67, 67, 67, 67, 44, 44, 67, 67, 67, 67, 67, 92, 44, 55, 67, 67,\n+   67, 67, 67, 67, 44, 44, 44, 44, 67, 67, 67, 67, 67, 67, 67, 55,\n+   67, 67, 67, 44, 44, 44, 44, 67, 67, 92, 67, 67, 67, 67, 67, 67,\n+   79, 44, 44, 44, 44, 44, 44, 44,171,171,171,171,171,171,171, 44,\n+  171,171,171,171,171,171,171,  0,  0,  0, 29, 21, 21, 21, 23, 21,\n+   22, 18, 21, 25, 21, 17, 13, 13, 25, 25, 25, 21, 21,  9,  9,  9,\n+    9, 22, 21, 18, 24, 16, 24,  5,  5,  5,  5, 22, 25, 18, 25,  0,\n+   23, 23, 26, 21, 24, 26,  7, 20, 25,  1, 26, 24, 26, 25, 15, 15,\n+   24, 15,  7, 19, 15, 21,  9, 25,  9,  5,  5, 25,  5,  9,  5,  7,\n+    7,  7,  9,  8,  8,  5,  7,  5,  6,  6, 24, 24,  6, 24, 12, 12,\n+    2,  2,  6,  5,  9, 21,  9,  2,  2,  9, 25,  9, 26, 12, 11, 11,\n+    2,  6,  5, 21, 17,  2,  2, 26, 26, 23,  2, 12, 17, 12, 21, 12,\n+   12, 21,  7,  2,  2,  7,  7, 21, 21,  2,  1,  1, 21, 23, 26, 26,\n+    1, 21,  6,  7,  7, 12, 12,  7, 21,  7, 12,  1, 12,  6,  6, 12,\n+   12, 26,  7, 26, 26,  7,  2,  1, 12,  2,  6,  2, 24,  7,  7,  6,\n+    1, 12, 12, 10, 10, 10, 10, 12, 21,  6,  2, 10, 10,  2, 15, 26,\n+   26,  2,  2, 21,  7, 10, 15,  7,  2, 23, 21, 26, 10,  7, 21, 15,\n+   15,  2, 17,  7, 29,  7,  7, 22, 18,  2, 14, 14, 14,  7, 10, 21,\n+   17, 21, 11, 12,  5,  2,  5,  6,  8,  8,  8, 24,  5, 24,  2, 24,\n+    9, 24, 24,  2, 29, 29, 29,  1, 17, 17, 20, 19, 22, 20, 27, 28,\n+    1, 29, 21, 20, 19, 21, 21, 16, 16, 21, 25, 22, 18, 21, 21, 29,\n+    1,  2, 15,  6, 18,  6, 23,  2, 12, 11,  9, 26, 26,  9, 26,  5,\n+    5, 26, 14,  9,  5, 14, 14, 15, 25, 26, 26, 22, 18, 26, 18, 25,\n+   18, 22,  5, 12,  2,  5, 22, 21, 21, 22, 18, 17, 26,  6,  7, 14,\n+   17, 22, 18, 18, 26, 14, 17,  6, 14,  6, 12, 24, 24,  6, 26, 15,\n+    6, 21, 11, 21, 24,  9,  6,  9, 23, 26,  6, 10,  4,  4,  3,  3,\n+    7, 25, 17, 16, 16, 22, 16, 16, 25, 17, 25,  2, 25, 24,  2, 15,\n+   12, 15, 14,  2, 21, 14,  7, 15, 12, 17, 21,  1, 26, 10, 10,  1,\n+   23, 15,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0, 10, 11, 12,\n+   13,  0, 14,  0,  0,  0,  0,  0, 15,  0, 16,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n@@ -3287,1 +3290,1 @@\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 17, 18, 19,\n+    0,  0,  0,  0,  0, 17, 18, 19,  0,  0,  0,  0,  0,  0,  0,  0,\n@@ -3289,0 +3292,3 @@\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 20,\n+    0, 21, 22, 23,  0,  0,  0, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n+   33, 34,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n@@ -3290,2 +3296,1 @@\n-    0,  0,  0,  0,  0,  0,  0, 20,  0, 21, 22, 23,  0,  0,  0, 24,\n-   25, 26, 27, 28, 29, 30, 31, 32, 33, 34,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0, 35,  0, 36,  0,  0,  0,  0,  0,  0,\n@@ -3293,2 +3298,0 @@\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 35,\n-    0, 36,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n@@ -3296,120 +3299,120 @@\n-    0,  0,  0,  0,  0,  0,  0,  0, 37,  0,  0,  0,  0,  0,  0,  0,\n-    0,  0, 38, 39,  0,  0,  0,  0,  0,  0, 40, 41, 42,  0, 43,  0,\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  0,  0,\n-    0,  0,  3,  0,  0,  0,  4,  5,  6,  7,  0,  8,  9, 10,  0, 11,\n-   12, 13, 14, 15, 16, 17, 16, 18, 16, 19, 16, 19, 16, 19,  0, 19,\n-   16, 20, 16, 19, 21, 19,  0, 22, 23, 24, 25, 26, 27, 28, 29, 30,\n-   31,  0, 32,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 33,  0,  0,\n-    0,  0,  0,  0, 34,  0,  0, 35,  0,  0, 36,  0, 37,  0,  0,  0,\n-   38, 39, 40, 41, 42, 43, 44, 45, 46,  0,  0, 47,  0,  0,  0, 48,\n-    0,  0,  0, 49,  0,  0,  0,  0,  0,  0,  0, 50,  0, 51,  0, 52,\n-   53,  0, 54,  0,  0,  0,  0,  0,  0, 55, 56, 57,  0,  0,  0,  0,\n-   58,  0,  0, 59, 60, 61, 62, 63,  0,  0, 64, 65,  0,  0,  0, 66,\n-    0,  0,  0,  0, 67,  0,  0,  0, 68,  0,  0,  0,  0,  0,  0,  0,\n-    0,  0,  0,  0,  0,  0,  0, 69,  0,  0,  0, 70,  0, 71,  0,  0,\n-   72,  0,  0, 73,  0,  0,  0,  0,  0,  0,  0,  0, 74,  0,  0,  0,\n-    0,  0, 75, 76,  0, 77, 78,  0,  0, 79, 80,  0, 81, 62,  0, 82,\n-   83,  0,  0, 84, 85, 86,  0,  0,  0, 87,  0, 88,  0,  0, 51, 89,\n-   51,  0, 90,  0, 91,  0,  0,  0, 80,  0,  0,  0, 92, 93,  0, 94,\n-   95, 96, 97,  0,  0,  0,  0,  0, 51,  0,  0,  0,  0, 98, 99,  0,\n-    0,  0,  0,  0,  0,100,  0,  0,  0,  0,  0,101,102,  0,  0,  0,\n-    0,  0,  0,  0,  0,  0,  0,103,  0,  0,104,  0,  0,  0,  0,  0,\n-    0,  0,  0,  0,  0,105,106,  0,  0,107,  0,  0,  0,  0,  0,  0,\n-  108,  0,109,  0,102,  0,  0,  0,  0,  0,110,111,  0,  0,  0,  0,\n-    0,  0,  0,112,  0,  0,  0,  0,  0,  0,  0,113,  0,114,  0,  0,\n-    0,  0,  0,  0,  1,  2,  3,  4,  5,  6,  7,  0,  8,  0,  0,  0,\n-    0,  9, 10, 11, 12,  0,  0,  0,  0, 13,  0,  0, 14, 15,  0, 16,\n-    0, 17, 18,  0,  0, 19,  0, 20, 21,  0,  0,  0,  0,  0, 22, 23,\n-    0, 24, 25,  0,  0, 26,  0,  0,  0, 27,  0,  0, 28, 29, 30, 31,\n-    0,  0,  0, 32, 33, 34,  0,  0, 33,  0,  0, 35, 33,  0,  0,  0,\n-   33, 36,  0,  0,  0,  0,  0, 37, 38,  0,  0,  0,  0,  0,  0, 39,\n-   40,  0,  0,  0,  0,  0,  0, 41, 42,  0,  0,  0,  0, 43,  0, 44,\n-    0,  0,  0, 45, 46,  0,  0,  0, 47,  0,  0,  0,  0,  0,  0, 48,\n-   49,  0,  0,  0,  0, 50,  0,  0,  0, 51,  0, 52,  0, 53,  0,  0,\n-    0,  0, 54,  0,  0,  0,  0, 55,  0, 56,  0,  0,  0,  0, 57, 58,\n-    0,  0,  0, 59, 60,  0,  0,  0,  0,  0,  0, 61, 52,  0, 62, 63,\n-    0,  0, 64,  0,  0,  0, 65, 66,  0,  0,  0, 67,  0, 68, 69, 70,\n-   71, 72,  1, 73,  0, 74, 75, 76,  0,  0, 77, 78,  0,  0,  0, 79,\n-    0,  0,  1,  1,  0,  0, 80,  0,  0, 81,  0,  0,  0,  0, 77, 82,\n-    0, 83,  0,  0,  0,  0,  0, 78, 84,  0, 85,  0, 52,  0,  1, 78,\n-    0,  0, 86,  0,  0, 87,  0,  0,  0,  0,  0, 88, 57,  0,  0,  0,\n-    0,  0,  0, 89, 90,  0,  0, 84,  0,  0, 33,  0,  0, 91,  0,  0,\n-    0,  0, 92,  0,  0,  0,  0, 49,  0,  0, 93,  0,  0,  0,  0, 94,\n-   95,  0,  0, 96,  0,  0, 97,  0,  0,  0, 98,  0,  0,  0, 99,  0,\n-    0,  0,  0,100,101, 93,  0,  0,102,  0,  0,  0, 84,  0,  0,103,\n-    0,  0,  0,104,105,  0,  0,106,107,  0,  0,  0,  0,  0,  0,108,\n-    0,  0,109,  0,  0,  0,  0,110, 33,  0,111,112,113, 35,  0,  0,\n-  114,  0,  0,  0,115,  0,  0,  0,  0,  0,  0,116,  0,  0,117,  0,\n-    0,  0,  0,118, 88,  0,  0,  0,  0,  0, 57,  0,  0,  0,  0, 52,\n-  119,  0,  0,  0,  0,120,  0,  0,121,  0,  0,  0,  0,119,  0,  0,\n-  122,  0,  0,  0,  0,  0,  0,123,  0,  0,  0,124,  0,  0,  0,125,\n-    0,126,  0,  0,  0,  0,127,128,129,  0,130,  0,131,  0,  0,  0,\n-  132,133,134,  0, 77,  0,  0,  0,  0,  0, 35,  0,  0,  0,135,  0,\n-    0,  0,136,  0,  0,137,  0,  0,138,  0,  0,  0,  0,  0,  0,  0,\n-    1,  1,  1,  1,  1,  2,  3,  4,  5,  6,  7,  4,  4,  8,  9, 10,\n-    1, 11, 12, 13, 14, 15, 16, 17, 18,  1,  1,  1, 19,  1,  0,  0,\n-   20, 21, 22,  1, 23,  4, 21, 24, 25, 26, 27, 28, 29, 30,  0,  0,\n-    1,  1, 31,  0,  0,  0, 32, 33, 34, 35,  1, 36, 37,  0,  0,  0,\n-    0, 38,  1, 39, 14, 39, 40, 41, 42,  0,  0,  0, 43, 36, 44, 45,\n-   21, 45, 46,  0,  0,  0, 19,  1, 21,  0,  0, 47,  0, 38, 48,  1,\n-    1, 49, 49, 50,  0,  0, 51,  0,  0,  0, 52,  1,  0,  0, 38, 14,\n-    4,  1,  1,  1, 53, 21, 43, 52, 54, 21, 35,  1,  0,  0,  0, 55,\n-    0,  0,  0, 56, 57, 58,  0,  0,  0,  0,  0, 59,  0, 60,  0,  0,\n-    0,  0, 61, 62,  0,  0, 63,  0,  0,  0, 64,  0,  0,  0, 65,  0,\n-    0,  0, 66,  0,  0,  0, 67,  0,  0,  0, 68,  0,  0, 69, 70,  0,\n-   71, 72, 73, 74, 75, 76,  0,  0,  0, 77,  0,  0,  0, 78, 79,  0,\n-    0,  0,  0, 47,  0,  0,  0, 49,  0, 80,  0,  0,  0, 62,  0,  0,\n-   63,  0,  0, 81,  0,  0, 82,  0,  0,  0, 83,  0,  0, 19, 84,  0,\n-   62,  0,  0,  0,  0, 49,  1, 85,  1, 52, 15, 86, 36, 10, 21, 87,\n-    0, 55,  0,  0,  0,  0, 19, 10,  1,  0,  0,  0,  0,  0, 88,  0,\n-    0, 89,  0,  0, 88,  0,  0,  0,  0, 78,  0,  0, 87,  9, 12,  4,\n-   90,  8, 91, 47,  0, 58, 50,  0, 21,  1, 21, 92, 93,  1,  1,  1,\n-    1, 94, 95, 96, 97,  1, 98, 58, 81, 99,100,  4, 58,  0,  0,  0,\n-    0,  0,  0, 19, 50,  0,  0,  0,  0,  0,  0, 61,  0,  0,101,102,\n-    0,  0,103,  0,  0,  1,  1, 50,  0,  0,  0, 38,  0, 63,  0,  0,\n-    0,  0,  0, 62,  0,  0,104, 68, 61,  0,  0,  0, 78,  0,  0,  0,\n-  105,106, 58, 38, 81,  0,  0,  0,  0,  0,  0,107,  1, 14,  4, 12,\n-   84,  0,  0,  0,  0, 38, 87,  0,  0,  0,  0,108,  0,  0,109, 61,\n-    0,110,  0,  0,  0,  1,  0,  0,  0,  0, 19, 58,  0,  0,  0, 51,\n-    0,111, 14, 52,112, 41,  0,  0, 62,  0,  0, 61,  0,  0,113,  0,\n-   87,  0,  0,  0, 61, 62,  0,  0, 62,  0, 89,  0,  0,113,  0,  0,\n-    0,  0,114,  0,  0,  0, 78, 55,  0, 38,  1, 58,  1, 58,  0,  0,\n-   63, 89,  0,  0,115,  0,  0,  0, 55,  0,  0,  0,  0,115,  0,  0,\n-    0,  0, 61,  0,  0,  0,  0, 79,  0, 61,  0,  0,  0,  0, 56,  0,\n-   89, 80,  0,  0, 79,  0,  0,  0,  8, 91,  0,  0,  1, 87,  0,  0,\n-  116,  0,  0,  0,  0,  0,  0,117,  0,118,119,120,121,  0,104,  4,\n-  122, 49, 23,  0,  0,  0, 38, 50, 38, 58,  0,  0,  1, 87,  1,  1,\n-    1,  1, 39,  1, 48,105, 87,  0,  0,  0,  0,  1,  0,  0,  0,123,\n-    4,122,  0,  0,  0,  1,124,  0,  0,  0,  0,  0,230,230,230,230,\n-  230,232,220,220,220,220,232,216,220,220,220,220,220,202,202,220,\n-  220,220,220,202,202,220,220,220,  1,  1,  1,  1,  1,220,220,220,\n-  220,230,230,230,230,240,230,220,220,220,230,230,230,220,220,  0,\n-  230,230,230,220,220,220,220,230,232,220,220,230,233,234,234,233,\n-  234,234,233,230,  0,  0,  0,230,  0,220,230,230,230,230,220,230,\n-  230,230,222,220,230,230,220,220,230,222,228,230, 10, 11, 12, 13,\n-   14, 15, 16, 17, 18, 19, 19, 20, 21, 22,  0, 23,  0, 24, 25,  0,\n-  230,220,  0, 18, 30, 31, 32,  0,  0,  0,  0, 27, 28, 29, 30, 31,\n-   32, 33, 34,230,230,220,220,230,220,230,230,220, 35,  0,  0,  0,\n-    0,  0,230,230,230,  0,  0,230,230,  0,220,230,230,220,  0,  0,\n-    0, 36,  0,  0,230,220,230,230,220,220,230,220,220,230,220,230,\n-  220,230,230,  0,  0,220,  0,  0,230,230,  0,230,  0,230,230,230,\n-  230,230,  0,  0,  0,220,220,220,230,220,220,220,230,230,  0,220,\n-   27, 28, 29,230,  7,  0,  0,  0,  0,  9,  0,  0,  0,230,220,230,\n-  230,  0,  0,  0,  0,  0,230,  0,  0, 84, 91,  0,  0,  0,  0,  9,\n-    9,  0,  0,  0,  0,  0,  9,  0,103,103,  9,  0,107,107,107,107,\n-  118,118,  9,  0,122,122,122,122,220,220,  0,  0,  0,220,  0,220,\n-    0,216,  0,  0,  0,129,130,  0,132,  0,  0,  0,  0,  0,130,130,\n-  130,130,  0,  0,130,  0,230,230,  9,  0,230,230,  0,  0,220,  0,\n-    0,  0,  0,  7,  0,  9,  9,  0,  9,  9,  0,  0,  0,230,  0,  0,\n-    0,228,  0,  0,  0,222,230,220,220,  0,  0,  0,230,  0,  0,220,\n-  230,220,  0,220,230,230,230,  0,  0,  0,  9,  9,  0,  0,  7,  0,\n-  230,  0,  1,  1,  1,  0,  0,  0,230,234,214,220,202,230,230,230,\n-  230,230,232,228,228,220,218,230,233,220,230,220,230,230,  1,  1,\n-    1,  1,  1,230,  0,  1,  1,230,220,230,  1,  1,  0,  0,218,228,\n-  232,222,224,224,  0,  8,  8,  0,  0,  0,  0,220,230,  0,230,230,\n-  220,  0,  0,230,  0,  0, 26,  0,  0,220,  0,230,230,  1,220,  0,\n-    0,230,220,  0,  0,  0,220,220,  0,  0,230,220,  0,  9,  7,  0,\n-    0,  7,  9,  0,  0,  0,  9,  7,  6,  6,  0,  0,  0,  0,  1,  0,\n-    0,216,216,  1,  1,  1,  0,  0,  0,226,216,216,216,216,216,  0,\n-  220,220,220,  0,232,232,220,230,230,230,  7,  0, 16, 17, 17, 33,\n-   17, 49, 17, 17, 84, 97,135,145, 26, 17, 17, 17, 17, 17, 17, 17,\n+   37,  0,  0,  0,  0,  0,  0,  0,  0,  0, 38, 39,  0,  0,  0,  0,\n+    0,  0, 40, 41, 42,  0, 43,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  1,  2,  0,  0,  0,  0,  3,  0,  0,  0,  4,  5,\n+    6,  7,  0,  8,  9, 10,  0, 11, 12, 13, 14, 15, 16, 17, 16, 18,\n+   16, 19, 16, 19, 16, 19,  0, 19, 16, 20, 16, 19, 21, 19,  0, 22,\n+   23, 24, 25, 26, 27, 28, 29, 30, 31,  0, 32,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0, 33,  0,  0,  0,  0,  0,  0, 34,  0,  0, 35,\n+    0,  0, 36,  0, 37,  0,  0,  0, 38, 39, 40, 41, 42, 43, 44, 45,\n+   46,  0,  0, 47,  0,  0,  0, 48,  0,  0,  0, 49,  0,  0,  0,  0,\n+    0,  0,  0, 50,  0, 51,  0, 52, 53,  0, 54,  0,  0,  0,  0,  0,\n+    0, 55, 56, 57,  0,  0,  0,  0, 58,  0,  0, 59, 60, 61, 62, 63,\n+    0,  0, 64, 65,  0,  0,  0, 66,  0,  0,  0,  0, 67,  0,  0,  0,\n+   68,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 69,\n+    0,  0,  0, 70,  0, 71,  0,  0, 72,  0,  0, 73,  0,  0,  0,  0,\n+    0,  0,  0,  0, 74,  0,  0,  0,  0,  0, 75, 76,  0, 77, 78,  0,\n+    0, 79, 80,  0, 81, 62,  0, 82, 83,  0,  0, 84, 85, 86,  0,  0,\n+    0, 87,  0, 88,  0,  0, 51, 89, 51,  0, 90,  0, 91,  0,  0,  0,\n+   80,  0,  0,  0, 92, 93,  0, 94, 95, 96, 97,  0,  0,  0,  0,  0,\n+   51,  0,  0,  0,  0, 98, 99,  0,  0,  0,  0,  0,  0,100,  0,  0,\n+    0,  0,  0,101,102,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,103,\n+    0,  0,104,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,105,106,  0,\n+    0,107,  0,  0,  0,  0,  0,  0,108,  0,109,  0,102,  0,  0,  0,\n+    0,  0,110,111,  0,  0,  0,  0,  0,  0,  0,112,  0,  0,  0,  0,\n+    0,  0,  0,113,  0,114,  0,  0,  0,  0,  0,  0,  1,  2,  3,  4,\n+    5,  6,  7,  0,  8,  0,  0,  0,  0,  9, 10, 11, 12,  0,  0,  0,\n+    0, 13,  0,  0, 14, 15,  0, 16,  0, 17, 18,  0,  0, 19,  0, 20,\n+   21,  0,  0,  0,  0,  0, 22, 23,  0, 24, 25,  0,  0, 26,  0,  0,\n+    0, 27,  0,  0, 28, 29, 30, 31,  0,  0,  0, 32, 33, 34,  0,  0,\n+   33,  0,  0, 35, 33,  0,  0,  0, 33, 36,  0,  0,  0,  0,  0, 37,\n+   38,  0,  0,  0,  0,  0,  0, 39, 40,  0,  0,  0,  0,  0,  0, 41,\n+   42,  0,  0,  0,  0, 43,  0, 44,  0,  0,  0, 45, 46,  0,  0,  0,\n+   47,  0,  0,  0,  0,  0,  0, 48, 49,  0,  0,  0,  0, 50,  0,  0,\n+    0, 51,  0, 52,  0, 53,  0,  0,  0,  0, 54,  0,  0,  0,  0, 55,\n+    0, 56,  0,  0,  0,  0, 57, 58,  0,  0,  0, 59, 60,  0,  0,  0,\n+    0,  0,  0, 61, 52,  0, 62, 63,  0,  0, 64,  0,  0,  0, 65, 66,\n+    0,  0,  0, 67,  0, 68, 69, 70, 71, 72,  1, 73,  0, 74, 75, 76,\n+    0,  0, 77, 78,  0,  0,  0, 79,  0,  0,  1,  1,  0,  0, 80,  0,\n+    0, 81,  0,  0,  0,  0, 77, 82,  0, 83,  0,  0,  0,  0,  0, 78,\n+   84,  0, 85,  0, 52,  0,  1, 78,  0,  0, 86,  0,  0, 87,  0,  0,\n+    0,  0,  0, 88, 57,  0,  0,  0,  0,  0,  0, 89, 90,  0,  0, 84,\n+    0,  0, 33,  0,  0, 91,  0,  0,  0,  0, 92,  0,  0,  0,  0, 49,\n+    0,  0, 93,  0,  0,  0,  0, 94, 95,  0,  0, 96,  0,  0, 97,  0,\n+    0,  0, 98,  0,  0,  0, 99,  0,  0,  0,  0,100,101, 93,  0,  0,\n+  102,  0,  0,  0, 84,  0,  0,103,  0,  0,  0,104,105,  0,  0,106,\n+  107,  0,  0,  0,  0,  0,  0,108,  0,  0,109,  0,  0,  0,  0,110,\n+   33,  0,111,112,113, 35,  0,  0,114,  0,  0,  0,115,  0,  0,  0,\n+    0,  0,  0,116,  0,  0,117,  0,  0,  0,  0,118, 88,  0,  0,  0,\n+    0,  0, 57,  0,  0,  0,  0, 52,119,  0,  0,  0,  0,120,  0,  0,\n+  121,  0,  0,  0,  0,119,  0,  0,122,  0,  0,  0,  0,  0,  0,123,\n+    0,  0,  0,124,  0,  0,  0,125,  0,126,  0,  0,  0,  0,127,128,\n+  129,  0,130,  0,131,  0,  0,  0,132,133,134,  0, 77,  0,  0,  0,\n+    0,  0, 35,  0,  0,  0,135,  0,  0,  0,136,  0,  0,137,  0,  0,\n+  138,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  2,  3,  4,\n+    5,  6,  7,  4,  4,  8,  9, 10,  1, 11, 12, 13, 14, 15, 16, 17,\n+   18,  1,  1,  1, 19,  1,  0,  0, 20, 21, 22,  1, 23,  4, 21, 24,\n+   25, 26, 27, 28, 29, 30,  0,  0,  1,  1, 31,  0,  0,  0, 32, 33,\n+   34, 35,  1, 36, 37,  0,  0,  0,  0, 38,  1, 39, 14, 39, 40, 41,\n+   42,  0,  0,  0, 43, 36, 44, 45, 21, 45, 46,  0,  0,  0, 19,  1,\n+   21,  0,  0, 47,  0, 38, 48,  1,  1, 49, 49, 50,  0,  0, 51,  0,\n+    0,  0, 52,  1,  0,  0, 38, 14,  4,  1,  1,  1, 53, 21, 43, 52,\n+   54, 21, 35,  1,  0,  0,  0, 55,  0,  0,  0, 56, 57, 58,  0,  0,\n+    0,  0,  0, 59,  0, 60,  0,  0,  0,  0, 61, 62,  0,  0, 63,  0,\n+    0,  0, 64,  0,  0,  0, 65,  0,  0,  0, 66,  0,  0,  0, 67,  0,\n+    0,  0, 68,  0,  0, 69, 70,  0, 71, 72, 73, 74, 75, 76,  0,  0,\n+    0, 77,  0,  0,  0, 78, 79,  0,  0,  0,  0, 47,  0,  0,  0, 49,\n+    0, 80,  0,  0,  0, 62,  0,  0, 63,  0,  0, 81,  0,  0, 82,  0,\n+    0,  0, 83,  0,  0, 19, 84,  0, 62,  0,  0,  0,  0, 49,  1, 85,\n+    1, 52, 15, 86, 36, 10, 21, 87,  0, 55,  0,  0,  0,  0, 19, 10,\n+    1,  0,  0,  0,  0,  0, 88,  0,  0, 89,  0,  0, 88,  0,  0,  0,\n+    0, 78,  0,  0, 87,  9, 12,  4, 90,  8, 91, 47,  0, 58, 50,  0,\n+   21,  1, 21, 92, 93,  1,  1,  1,  1, 94, 95, 96, 97,  1, 98, 58,\n+   81, 99,100,  4, 58,  0,  0,  0,  0,  0,  0, 19, 50,  0,  0,  0,\n+    0,  0,  0, 61,  0,  0,101,102,  0,  0,103,  0,  0,  1,  1, 50,\n+    0,  0,  0, 38,  0, 63,  0,  0,  0,  0,  0, 62,  0,  0,104, 68,\n+   61,  0,  0,  0, 78,  0,  0,  0,105,106, 58, 38, 81,  0,  0,  0,\n+    0,  0,  0,107,  1, 14,  4, 12, 84,  0,  0,  0,  0, 38, 87,  0,\n+    0,  0,  0,108,  0,  0,109, 61,  0,110,  0,  0,  0,  1,  0,  0,\n+    0,  0, 19, 58,  0,  0,  0, 51,  0,111, 14, 52,112, 41,  0,  0,\n+   62,  0,  0, 61,  0,  0,113,  0, 87,  0,  0,  0, 61, 62,  0,  0,\n+   62,  0, 89,  0,  0,113,  0,  0,  0,  0,114,  0,  0,  0, 78, 55,\n+    0, 38,  1, 58,  1, 58,  0,  0, 63, 89,  0,  0,115,  0,  0,  0,\n+   55,  0,  0,  0,  0,115,  0,  0,  0,  0, 61,  0,  0,  0,  0, 79,\n+    0, 61,  0,  0,  0,  0, 56,  0, 89, 80,  0,  0, 79,  0,  0,  0,\n+    8, 91,  0,  0,  1, 87,  0,  0,116,  0,  0,  0,  0,  0,  0,117,\n+    0,118,119,120,121,  0,104,  4,122, 49, 23,  0,  0,  0, 38, 50,\n+   38, 58,  0,  0,  1, 87,  1,  1,  1,  1, 39,  1, 48,105, 87,  0,\n+    0,  0,  0,  1,  0,  0,  0,123,  4,122,  0,  0,  0,  1,124,  0,\n+    0,  0,  0,  0,230,230,230,230,230,232,220,220,220,220,232,216,\n+  220,220,220,220,220,202,202,220,220,220,220,202,202,220,220,220,\n+    1,  1,  1,  1,  1,220,220,220,220,230,230,230,230,240,230,220,\n+  220,220,230,230,230,220,220,  0,230,230,230,220,220,220,220,230,\n+  232,220,220,230,233,234,234,233,234,234,233,230,  0,  0,  0,230,\n+    0,220,230,230,230,230,220,230,230,230,222,220,230,230,220,220,\n+  230,222,228,230, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20,\n+   21, 22,  0, 23,  0, 24, 25,  0,230,220,  0, 18, 30, 31, 32,  0,\n+    0,  0,  0, 27, 28, 29, 30, 31, 32, 33, 34,230,230,220,220,230,\n+  220,230,230,220, 35,  0,  0,  0,  0,  0,230,230,230,  0,  0,230,\n+  230,  0,220,230,230,220,  0,  0,  0, 36,  0,  0,230,220,230,230,\n+  220,220,230,220,220,230,220,230,220,230,230,  0,  0,220,  0,  0,\n+  230,230,  0,230,  0,230,230,230,230,230,  0,  0,  0,220,220,220,\n+  230,220,220,220,230,230,  0,220, 27, 28, 29,230,  7,  0,  0,  0,\n+    0,  9,  0,  0,  0,230,220,230,230,  0,  0,  0,  0,  0,230,  0,\n+    0, 84, 91,  0,  0,  0,  0,  9,  9,  0,  0,  0,  0,  0,  9,  0,\n+  103,103,  9,  0,107,107,107,107,118,118,  9,  0,122,122,122,122,\n+  220,220,  0,  0,  0,220,  0,220,  0,216,  0,  0,  0,129,130,  0,\n+  132,  0,  0,  0,  0,  0,130,130,130,130,  0,  0,130,  0,230,230,\n+    9,  0,230,230,  0,  0,220,  0,  0,  0,  0,  7,  0,  9,  9,  0,\n+    9,  9,  0,  0,  0,230,  0,  0,  0,228,  0,  0,  0,222,230,220,\n+  220,  0,  0,  0,230,  0,  0,220,230,220,  0,220,230,230,230,  0,\n+    0,  0,  9,  9,  0,  0,  7,  0,230,  0,  1,  1,  1,  0,  0,  0,\n+  230,234,214,220,202,230,230,230,230,230,232,228,228,220,218,230,\n+  233,220,230,220,230,230,  1,  1,  1,  1,  1,230,  0,  1,  1,230,\n+  220,230,  1,  1,  0,  0,218,228,232,222,224,224,  0,  8,  8,  0,\n+    0,  0,  0,220,230,  0,230,230,220,  0,  0,230,  0,  0, 26,  0,\n+    0,220,  0,230,230,  1,220,  0,  0,230,220,  0,  0,  0,220,220,\n+    0,  0,230,220,  0,  9,  7,  0,  0,  7,  9,  0,  0,  0,  9,  7,\n+    6,  6,  0,  0,  0,  0,  1,  0,  0,216,216,  1,  1,  1,  0,  0,\n+    0,226,216,216,216,216,216,  0,220,220,220,  0,232,232,220,230,\n+  230,230,  7,  0, 16, 17, 17, 33, 17, 49, 17, 17, 84, 97,135,145,\n+   26, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n@@ -3418,44 +3421,43 @@\n-   17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,177,  0,  1,  2,  3,\n-    3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,\n-    4,  3,  3,  3,  3,  3,  5,  3,  3,  3,  3,  3,  6,  7,  8,  3,\n-    3,  3,  3,  3,  9, 10, 11, 12, 13,  3,  3,  3,  3,  3,  3,  3,\n-    3, 14,  3, 15,  3,  3,  3,  3,  3,  3, 16, 17, 18, 19, 20, 21,\n-    3,  3,  3, 22, 23, 24,  3,  3,  3,  3,  3,  3, 25,  3,  3,  3,\n-    3,  3,  3,  3,  3, 26,  3,  3, 27, 28,  0,  1,  0,  0,  0,  0,\n-    0,  1,  0,  2,  0,  0,  0,  3,  0,  0,  0,  3,  0,  0,  0,  0,\n-    0,  4,  0,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n-    0,  0,  0,  6,  0,  0,  0,  7,  0,  0,  0,  0,  0,  0,  0,  0,\n-    0,  0,  0,  8,  9,  0,  0,  0,  0,  0,  0,  9,  0,  9,  0,  0,\n-    0,  0,  0,  0,  0, 10, 11, 12, 13,  0,  0, 14, 15, 16,  6,  0,\n-   17, 18, 19, 19, 19, 20, 21, 22, 23, 24, 19, 25,  0, 26, 27, 19,\n-   19, 28, 29, 30,  0, 31,  0,  0,  0,  8,  0,  0,  0,  0,  0,  0,\n-    0, 19, 28,  0, 32, 33,  9, 34, 35, 19,  0,  0, 36, 37, 38, 39,\n-   40, 19,  0, 41, 42, 43, 44, 31,  0,  1, 45, 42,  0,  0,  0,  0,\n-    0, 32, 14, 14,  0,  0,  0,  0, 14,  0,  0, 46, 47, 47, 47, 47,\n-   48, 49, 47, 47, 47, 47, 50, 51, 52, 53, 43, 21,  0,  0,  0,  0,\n-    0,  0,  0, 54,  6, 55,  0, 14, 19,  1,  0,  0,  0,  0, 56, 57,\n-    0,  0,  0,  0,  0, 19, 58, 31,  0,  0,  0,  0,  0,  0,  0, 59,\n-   14,  0,  0,  0,  0,  1,  0,  2,  0,  0,  0,  3,  0,  0,  0, 60,\n-   61,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  2,  3,\n-    0,  4,  5,  0,  0,  6,  0,  0,  0,  7,  0,  0,  0,  1,  1,  0,\n-    0,  8,  9,  0,  8,  9,  0,  0,  0,  0,  8,  9, 10, 11, 12,  0,\n-    0,  0, 13,  0,  0,  0,  0, 14, 15, 16, 17,  0,  0,  0,  1,  0,\n-    0, 18, 19,  0,  0,  0, 20,  0,  0,  0,  1,  1,  1,  1,  0,  1,\n-    1,  1,  1,  1,  1,  1,  0,  8, 21,  9,  0,  0, 22,  0,  0,  0,\n-    0,  1,  0, 23, 24, 25,  0,  0, 26,  0,  0,  0,  8, 21, 27,  0,\n-    1,  0,  0,  1,  1,  1,  1,  0,  1, 28, 29, 30,  0, 31, 32, 20,\n-    1,  1,  0,  0,  0,  8, 21,  9,  1,  4,  5,  0,  0,  0, 33,  9,\n-    0,  1,  1,  1,  0,  8, 21, 21, 21, 21, 34,  1, 35, 21, 21, 21,\n-    9, 36,  0,  0, 37, 38,  1,  0, 39,  0,  0,  0,  1,  0,  1,  0,\n-    0,  0,  0,  8, 21,  9,  1,  0,  0,  0, 40,  0,  8, 21, 21, 21,\n-   21, 21, 21, 21, 21,  9,  0,  1,  1,  1,  1,  8, 21, 21, 21,  9,\n-    0,  0,  0, 41,  0, 42, 43,  0,  0,  0,  1, 44,  0,  0,  0, 45,\n-    8,  9,  1,  0,  0,  0,  8, 21, 21, 21,  9,  0,  1,  0,  1,  1,\n-    8, 21, 21,  9,  0,  4,  5,  8,  9,  1,  0,  0,  0,  1,  2,  3,\n-    4,  5,  6,  7,  7,  8,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n-    9, 10, 11, 11, 11, 11, 12, 13, 13, 13, 13, 14, 15, 16, 17, 18,\n-   19, 20, 21, 13, 22, 13, 13, 13, 13, 23, 24, 24, 25, 26, 13, 13,\n-   13, 27, 28, 29, 13, 30, 31, 32, 33, 34, 35, 36,  7,  7,  7,  7,\n-    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n-   37,  7, 38, 39,  7, 40,  7,  7,  7, 41, 13, 42,  7,  7, 43,  7,\n-   44, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n+   17, 17, 17,177,  0,  1,  2,  3,  3,  3,  3,  3,  3,  3,  3,  3,\n+    3,  3,  3,  3,  3,  3,  3,  3,  4,  3,  3,  3,  3,  3,  5,  3,\n+    3,  3,  3,  3,  6,  7,  8,  3,  3,  3,  3,  3,  9, 10, 11, 12,\n+   13,  3,  3,  3,  3,  3,  3,  3,  3, 14,  3, 15,  3,  3,  3,  3,\n+    3,  3, 16, 17, 18, 19, 20, 21,  3,  3,  3, 22, 23, 24,  3,  3,\n+    3,  3,  3,  3, 25,  3,  3,  3,  3,  3,  3,  3,  3, 26,  3,  3,\n+   27, 28,  0,  1,  0,  0,  0,  0,  0,  1,  0,  2,  0,  0,  0,  3,\n+    0,  0,  0,  3,  0,  0,  0,  0,  0,  4,  0,  5,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  0,  0,  0,  7,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8,  9,  0,  0,  0,\n+    0,  0,  0,  9,  0,  9,  0,  0,  0,  0,  0,  0,  0, 10, 11, 12,\n+   13,  0,  0, 14, 15, 16,  6,  0, 17, 18, 19, 19, 19, 20, 21, 22,\n+   23, 24, 19, 25,  0, 26, 27, 19, 19, 28, 29, 30,  0, 31,  0,  0,\n+    0,  8,  0,  0,  0,  0,  0,  0,  0, 19, 28,  0, 32, 33,  9, 34,\n+   35, 19,  0,  0, 36, 37, 38, 39, 40, 19,  0, 41, 42, 43, 44, 31,\n+    0,  1, 45, 42,  0,  0,  0,  0,  0, 32, 14, 14,  0,  0,  0,  0,\n+   14,  0,  0, 46, 47, 47, 47, 47, 48, 49, 47, 47, 47, 47, 50, 51,\n+   52, 53, 43, 21,  0,  0,  0,  0,  0,  0,  0, 54,  6, 55,  0, 14,\n+   19,  1,  0,  0,  0,  0, 56, 57,  0,  0,  0,  0,  0, 19, 58, 31,\n+    0,  0,  0,  0,  0,  0,  0, 59, 14,  0,  0,  0,  0,  1,  0,  2,\n+    0,  0,  0,  3,  0,  0,  0, 60, 61,  0,  0,  0,  0,  0,  0,  0,\n+    1,  0,  0,  0,  0,  0,  2,  3,  0,  4,  5,  0,  0,  6,  0,  0,\n+    0,  7,  0,  0,  0,  1,  1,  0,  0,  8,  9,  0,  8,  9,  0,  0,\n+    0,  0,  8,  9, 10, 11, 12,  0,  0,  0, 13,  0,  0,  0,  0, 14,\n+   15, 16, 17,  0,  0,  0,  1,  0,  0, 18, 19,  0,  0,  0, 20,  0,\n+    0,  0,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  0,  8,\n+   21,  9,  0,  0, 22,  0,  0,  0,  0,  1,  0, 23, 24, 25,  0,  0,\n+   26,  0,  0,  0,  8, 21, 27,  0,  1,  0,  0,  1,  1,  1,  1,  0,\n+    1, 28, 29, 30,  0, 31, 32, 20,  1,  1,  0,  0,  0,  8, 21,  9,\n+    1,  4,  5,  0,  0,  0, 33,  9,  0,  1,  1,  1,  0,  8, 21, 21,\n+   21, 21, 34,  1, 35, 21, 21, 21,  9, 36,  0,  0, 37, 38,  1,  0,\n+   39,  0,  0,  0,  1,  0,  1,  0,  0,  0,  0,  8, 21,  9,  1,  0,\n+    0,  0, 40,  0,  8, 21, 21, 21, 21, 21, 21, 21, 21,  9,  0,  1,\n+    1,  1,  1,  8, 21, 21, 21,  9,  0,  0,  0, 41,  0, 42, 43,  0,\n+    0,  0,  1, 44,  0,  0,  0, 45,  8,  9,  1,  0,  0,  0,  8, 21,\n+   21, 21,  9,  0,  1,  0,  1,  1,  8, 21, 21,  9,  0,  4,  5,  8,\n+    9,  1,  0,  0,  0,  1,  2,  3,  4,  5,  6,  7,  7,  8,  7,  7,\n+    7,  7,  7,  7,  7,  7,  7,  7,  9, 10, 11, 11, 11, 11, 12, 13,\n+   13, 13, 13, 14, 15, 16, 17, 18, 19, 20, 21, 13, 22, 13, 13, 13,\n+   13, 23, 24, 24, 25, 26, 13, 13, 13, 27, 28, 29, 13, 30, 31, 32,\n+   33, 34, 35, 36,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n+    7,  7,  7,  7,  7,  7,  7,  7, 37,  7, 38, 39,  7, 40,  7,  7,\n+    7, 41, 13, 42,  7,  7, 43,  7, 44, 13, 13, 13, 13, 13, 13, 13,\n@@ -3482,8 +3484,8 @@\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 45,  0,  0,  1,\n-    2,  2,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n-   16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,\n-   32, 32, 33, 34, 35, 36, 37, 37, 37, 37, 37, 38, 39, 40, 41, 42,\n-   43, 44, 45, 46, 47, 48, 49, 50, 51, 52,  2,  2, 53, 54, 55, 56,\n-   57, 58, 59, 59, 59, 59, 60, 59, 59, 59, 59, 59, 59, 59, 61, 61,\n-   59, 59, 59, 59, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,\n-   74, 75, 76, 77, 78, 59, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,\n+   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n+   13, 13, 13, 13, 45,  0,  0,  1,  2,  2,  2,  3,  4,  5,  6,  7,\n+    8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\n+   24, 25, 26, 27, 28, 29, 30, 31, 32, 32, 33, 34, 35, 36, 37, 37,\n+   37, 37, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,\n+   51, 52,  2,  2, 53, 54, 55, 56, 57, 58, 59, 59, 59, 59, 60, 59,\n+   59, 59, 59, 59, 59, 59, 61, 61, 59, 59, 59, 59, 62, 63, 64, 65,\n+   66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 59, 70, 70,\n@@ -3491,3 +3493,3 @@\n-   70, 70, 70, 70, 70, 70, 70, 70, 70, 79, 70, 70, 70, 70, 80, 80,\n-   80, 80, 80, 80, 80, 80, 80, 81, 82, 82, 83, 84, 85, 86, 87, 88,\n-   89, 90, 91, 92, 93, 94, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+   70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,\n+   70, 79, 70, 70, 70, 70, 80, 80, 80, 80, 80, 80, 80, 80, 80, 81,\n+   82, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 32, 32,\n@@ -3495,12 +3497,13 @@\n-   32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 95, 96, 96,\n-   96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n-   70, 70, 97, 98, 99,100,101,101,102,103,104,105,106,107,108,109,\n-  110,111, 96,112,113,114,115,116,117,118,119,119,120,121,122,123,\n-  124,125,126,127,128,129,130,131,132, 96,133,134,135,136,137,138,\n-  139,140,141,142,143, 96,144,145, 96,146,147,148,149, 96,150,151,\n-  152,153,154,155,156, 96,157,158,159,160, 96,161,162,163,164,164,\n-  164,164,164,164,164,165,166,164,167, 96, 96, 96, 96, 96, 96, 96,\n-   96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96,168,169,169,\n-  169,169,169,169,169,169,170, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n-   96, 96, 96, 96, 96, 96,171,171,171,171,172, 96, 96, 96,173,173,\n-  173,173,174,175,176,177, 96, 96, 96, 96,178,179,180,181,182,182,\n+   32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+   32, 32, 32, 32, 32, 95, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n+   96, 96, 96, 96, 96, 96, 96, 96, 70, 70, 97, 98, 99,100,101,101,\n+  102,103,104,105,106,107,108,109,110,111, 96,112,113,114,115,116,\n+  117,118,119,119,120,121,122,123,124,125,126,127,128,129,130,131,\n+  132, 96,133,134,135,136,137,138,139,140,141,142,143, 96,144,145,\n+   96,146,147,148,149, 96,150,151,152,153,154,155,156, 96,157,158,\n+  159,160, 96,161,162,163,164,164,164,164,164,164,164,165,166,164,\n+  167, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n+   96, 96, 96, 96, 96,168,169,169,169,169,169,169,169,169,170, 96,\n+   96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96,171,171,\n+  171,171,172, 96, 96, 96,173,173,173,173,174,175,176,177, 96, 96,\n+   96, 96,178,179,180,181,182,182,182,182,182,182,182,182,182,182,\n@@ -3508,14 +3511,14 @@\n-  182,182,182,182,182,182,182,182,182,182,182,182,182,183,182,182,\n-  182,182,182,182,184,184,184,185,186, 96, 96, 96, 96, 96, 96, 96,\n-   96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96,187,188,189,\n-  190,191,191,192, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n-   96, 96, 96, 96, 96, 96,193,194, 96, 96, 96, 96, 96, 96, 96, 96,\n-   96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96,195,196, 59,197,\n-  198,199,200,201,202, 96,203,204,205, 59, 59,206, 59,207,208,208,\n-  208,208,208,209, 96, 96, 96, 96, 96, 96, 96, 96,210, 96,211,212,\n-  213, 96, 96,214, 96, 96, 96,215, 96, 96, 96, 96, 96,216,217,218,\n-  219, 96, 96, 96, 96, 96,220,221,222, 96,223,224, 96, 96,225,226,\n-   59,227,228, 96, 59, 59, 59, 59, 59, 59, 59,229,230,231,232,233,\n-   59, 59,234,235, 59,236, 96, 96, 96, 96, 96, 96, 96, 96, 70, 70,\n-   70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,237, 70, 70, 70, 70,\n-   70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,238, 70,239, 70,\n+  182,182,182,182,182,183,182,182,182,182,182,182,184,184,184,185,\n+  186, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n+   96, 96, 96, 96, 96,187,188,189,190,191,191,192, 96, 96, 96, 96,\n+   96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96,193,194,\n+   96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n+   96, 96, 96, 96,195,196, 59,197,198,199,200,201,202, 96,203,204,\n+  205, 59, 59,206, 59,207,208,208,208,208,208,209, 96, 96, 96, 96,\n+   96, 96, 96, 96,210, 96,211,212,213, 96, 96,214, 96, 96, 96,215,\n+   96, 96, 96, 96, 96,216,217,218,219, 96, 96, 96, 96, 96,220,221,\n+  222, 96,223,224, 96, 96,225,226, 59,227,228, 96, 59, 59, 59, 59,\n+   59, 59, 59,229,230,231,232,233, 59, 59,234,235, 59,236, 96, 96,\n+   96, 96, 96, 96, 96, 96, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,\n+   70, 70, 70,237, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,\n+   70, 70, 70, 70,238, 70,239, 70, 70, 70, 70, 70, 70, 70, 70, 70,\n@@ -3523,161 +3526,160 @@\n-   70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,240, 70, 70, 70, 70,\n-   70, 70, 70, 70, 70,241, 96, 96, 96, 96, 96, 96, 96, 96, 70, 70,\n-   70, 70,242, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 70, 70,\n-   70, 70, 70, 70,243, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,\n-   70, 70, 70, 70, 70,244, 96, 96, 96, 96, 96, 96, 96, 96,245, 96,\n-  246,247,  0,  1,  2,  2,  0,  1,  2,  2,  2,  3,  4,  5,  0,  0,\n-    0,  0,  0, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,  0,  0,  0,\n-   19,  0, 19,  0,  0,  0,  0,  0, 26, 26,  1,  1,  1,  1,  9,  9,\n-    9,  9,  0,  9,  9,  9,  2,  2,  9,  9,  9,  9,  0,  9,  2,  2,\n-    2,  2,  9,  0,  9,  0,  9,  9,  9,  2,  9,  2,  9,  9,  9,  9,\n-    2,  9,  9,  9, 55, 55, 55, 55, 55, 55,  6,  6,  6,  6,  6,  1,\n-    1,  6,  2,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  2,  2, 14,\n-   14, 14, 14, 14, 14, 14, 14, 14, 14,  2,  2,  2,  2, 14, 14,  2,\n-    2,  2,  3,  3,  3,  3,  3,  0,  3,  3,  0,  3,  3,  3,  3,  3,\n-    3,  0,  3,  3,  3,  1,  1,  1,  3,  3,  1,  3,  3,  3, 37, 37,\n-   37, 37, 37, 37,  2, 37, 37, 37, 37,  2,  2, 37, 37, 37, 38, 38,\n-   38, 38, 38, 38,  2,  2, 64, 64, 64, 64, 64, 64, 64,  2,  2, 64,\n-   64, 64, 90, 90, 90, 90, 90, 90,  2,  2, 90, 90, 90,  2, 95, 95,\n-   95, 95,  2,  2, 95,  2,  3,  3,  3,  2,  3,  3,  2,  2,  3,  3,\n-    0,  3,  7,  7,  7,  7,  7,  1,  1,  1,  1,  7,  7,  7,  0,  0,\n-    7,  7,  5,  5,  5,  5,  2,  5,  5,  5,  5,  2,  2,  5,  5,  2,\n-    5,  5,  5,  2,  5,  2,  2,  2,  5,  5,  5,  5,  2,  2,  5,  5,\n-    5,  2,  2,  2,  2,  5,  5,  5,  2,  5,  2, 11, 11, 11, 11, 11,\n-   11,  2,  2,  2,  2, 11, 11,  2,  2, 11, 11, 11, 11, 11, 11,  2,\n-   11, 11,  2, 11, 11,  2, 11, 11,  2,  2,  2, 11,  2,  2, 11,  2,\n-   11,  2,  2,  2, 11, 11,  2, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n-    2, 10, 10,  2, 10, 10, 10, 10,  2,  2, 10,  2,  2,  2,  2,  2,\n-   10, 10,  2, 21, 21, 21, 21, 21, 21, 21, 21,  2,  2, 21, 21,  2,\n-   21, 21, 21, 21,  2,  2, 21, 21,  2, 21,  2,  2, 21, 21,  2,  2,\n-   22, 22,  2, 22, 22, 22, 22, 22, 22,  2, 22,  2, 22, 22, 22, 22,\n-    2,  2,  2, 22, 22,  2,  2,  2,  2, 22, 22,  2,  2,  2, 22, 22,\n-   22, 22, 23, 23, 23, 23, 23,  2, 23, 23, 23, 23,  2,  2,  2, 23,\n-   23,  2, 23, 23, 23,  2,  2, 23,  2,  2,  2,  2, 23, 23,  2,  2,\n-    2, 23, 16, 16, 16, 16, 16,  2, 16, 16,  2, 16, 16, 16, 16, 16,\n-    2,  2,  2, 16, 16,  2,  2,  2, 16, 16, 20, 20, 20, 20, 20,  2,\n-   20, 20,  2,  2, 20, 20,  2, 36, 36, 36, 36, 36, 36, 36, 36, 36,\n-   36,  2,  2,  2, 36, 36, 36, 36,  2, 36,  2, 36,  2,  2,  2,  2,\n-   36,  2,  2,  2,  2, 36, 36,  2, 36,  2, 36,  2,  2,  2,  2, 24,\n-   24, 24, 24, 24, 24, 24, 24, 24, 24,  2,  2,  2,  2,  0,  2, 18,\n-   18,  2, 18,  2, 18, 18, 18, 18, 18,  2, 18, 18, 18, 18,  2, 18,\n-    2, 18, 18, 18,  2,  2, 18,  2, 18,  2, 25, 25, 25, 25,  2, 25,\n-   25, 25, 25,  2,  2,  2, 25,  2, 25, 25, 25,  0,  0,  0,  0, 25,\n-   25,  2, 33, 33, 33, 33,  8,  8,  8,  8,  8,  8,  2,  8,  2,  8,\n-    2,  2,  8,  8,  8,  0, 12, 12, 12, 12, 30, 30, 30, 30, 30,  2,\n-   30, 30, 30, 30,  2,  2, 30, 30, 30,  2,  2, 30, 30, 30, 30,  2,\n-    2,  2, 29, 29, 29, 29, 29, 29,  2,  2, 28, 28, 28, 28, 34, 34,\n-   34, 34, 34,  2,  2,  2, 35, 35, 35, 35, 35, 35, 35,  0,  0,  0,\n-   35, 35, 35,  2,  2,  2, 45, 45, 45, 45, 45, 45,  2,  2,  2,  2,\n-    2, 45, 44, 44, 44, 44, 44,  0,  0,  2, 43, 43, 43, 43, 46, 46,\n-   46, 46, 46,  2, 46, 46, 31, 31, 31, 31, 31, 31,  2,  2, 32, 32,\n-    0,  0, 32,  0, 32, 32, 32, 32, 32, 32, 32, 32,  2,  2, 32,  2,\n-    2,  2, 32, 32, 32,  2, 28, 28,  2,  2, 48, 48, 48, 48, 48, 48,\n-   48,  2, 48,  2,  2,  2, 52, 52, 52, 52, 52, 52,  2,  2, 52,  2,\n-    2,  2, 58, 58, 58, 58, 58, 58,  2,  2, 58, 58, 58,  2,  2,  2,\n-   58, 58, 54, 54, 54, 54,  2,  2, 54, 54, 91, 91, 91, 91, 91, 91,\n-   91,  2, 91,  2,  2, 91, 91, 91,  2,  2,  1,  1,  1,  2, 62, 62,\n-   62, 62, 62,  2,  2,  2, 62, 62, 62,  2, 76, 76, 76, 76, 93, 93,\n-   93, 93, 70, 70, 70, 70,  2,  2,  2, 70, 70, 70,  2,  2,  2, 70,\n-   70, 70, 73, 73, 73, 73,  6,  2,  2,  2,  8,  8,  8,  2,  2,  8,\n-    8,  8,  1,  1,  1,  0,  1,  0,  1,  1,  1,  0,  0,  0,  0,  1,\n-    0,  0,  1,  1,  0,  2, 19, 19,  9,  9,  9,  9,  9,  6, 19,  9,\n-    9,  9,  9,  9, 19, 19,  9,  9,  9, 19,  6, 19, 19, 19, 19, 19,\n-   19,  9,  9,  9,  2,  2,  2,  9,  2,  9,  2,  9,  9,  9,  1,  1,\n-    0,  0,  0,  2,  0,  0,  0, 19,  2,  2,  0,  0,  0, 19,  0,  0,\n-    0,  2, 19,  2,  2,  2,  0,  2,  2,  2,  1,  2,  2,  2,  0,  0,\n-    9,  0,  0,  0, 19, 19, 27, 27, 27, 27,  2,  2,  0,  0,  0,  0,\n-    2,  0, 56, 56, 56, 56,  2, 55, 55, 55, 61, 61, 61, 61,  2,  2,\n-    2, 61, 61,  2,  2,  2,  0,  0,  2,  2, 13, 13, 13, 13, 13, 13,\n-    2, 13, 13, 13,  2,  2,  0, 13,  0, 13,  0, 13, 13, 13, 13, 13,\n-    1,  1,  1,  1, 12, 12,  2, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n-   15,  2,  2,  1,  1,  0,  0, 15, 15, 15,  0, 17, 17, 17, 17, 17,\n-   17, 17, 17, 17, 17,  0,  2, 26, 26, 26, 26, 26, 26, 26,  2, 12,\n-   12, 12, 12, 12, 12,  2, 12, 12, 12,  0, 39, 39, 39, 39, 39,  2,\n-    2,  2, 39, 39, 39,  2, 86, 86, 86, 86, 77, 77, 77, 77, 79, 79,\n-   79, 79, 19, 19, 19,  2, 19, 19,  2, 19,  2, 19, 19, 19, 19, 19,\n-    2,  2,  2,  2, 19, 19, 60, 60, 60, 60, 60,  2,  2,  2, 65, 65,\n-   65, 65, 75, 75, 75, 75, 75, 75,  2,  2,  2,  2, 75, 75, 69, 69,\n-   69, 69, 69, 69,  0, 69, 74, 74, 74, 74,  2,  2,  2, 74, 12,  2,\n-    2,  2, 84, 84, 84, 84, 84, 84,  2,  0, 84, 84,  2,  2,  2,  2,\n-   84, 84, 33, 33, 33,  2, 68, 68, 68, 68, 68, 68, 68,  2, 68, 68,\n-    2,  2, 92, 92, 92, 92, 92, 92, 92,  2,  2,  2,  2, 92, 87, 87,\n-   87, 87, 87, 87, 87,  2, 19,  9, 19, 19, 19, 19,  0,  0, 87, 87,\n-    2,  2,  2,  2,  2, 12,  2,  2,  2,  4, 14,  2, 14,  2, 14, 14,\n-    2, 14, 14,  2, 14, 14,  2,  2,  2,  3,  3,  3,  0,  0,  2,  2,\n-    3,  3,  1,  1,  6,  6,  3,  2,  3,  3,  3,  2,  2,  0,  2,  0,\n-    0,  0,  0,  0, 17, 17, 17, 17,  0,  0,  2,  2, 12, 12, 49, 49,\n-   49, 49,  2, 49, 49, 49, 49, 49, 49,  2, 49, 49,  2, 49, 49, 49,\n-    2,  2,  9,  2,  2,  2,  0,  1,  2,  2, 71, 71, 71, 71, 71,  2,\n-    2,  2, 67, 67, 67, 67, 67,  2,  2,  2, 42, 42, 42, 42,  2, 42,\n-   42, 42, 41, 41, 41, 41, 41, 41, 41,  2,118,118,118,118,118,118,\n-  118,  2, 53, 53, 53, 53, 53, 53,  2, 53, 59, 59, 59, 59, 59, 59,\n-    2,  2, 40, 40, 40, 40, 51, 51, 51, 51, 50, 50, 50, 50, 50, 50,\n-    2,  2,135,135,135,135,106,106,106,106,104,104,104,104,  2,  2,\n-    2,104,161,161,161,161,161,161,161,  2,161,161,  2,161,161,  2,\n-    2,  2,110,110,110,110,110,110,110,  2,110,110,  2,  2, 19,  2,\n-   19, 19, 47, 47, 47, 47, 47, 47,  2,  2, 47,  2, 47, 47, 47, 47,\n-    2, 47, 47,  2,  2,  2, 47,  2,  2, 47, 81, 81, 81, 81, 81, 81,\n-    2, 81,120,120,120,120,116,116,116,116,116,116,116,  2,  2,  2,\n-    2,116,128,128,128,128,128,128,128,  2,128,128,  2,  2,  2,  2,\n-    2,128, 66, 66, 66, 66,  2,  2,  2, 66, 72, 72, 72, 72, 72, 72,\n-    2,  2,  2,  2,  2, 72, 98, 98, 98, 98, 97, 97, 97, 97,  2,  2,\n-   97, 97, 57, 57, 57, 57,  2, 57, 57,  2,  2, 57, 57, 57, 57, 57,\n-    2,  2, 57, 57, 57,  2,  2,  2,  2, 57, 57,  2,  2,  2, 88, 88,\n-   88, 88,117,117,117,117,112,112,112,112,112,112,112,  2,  2,  2,\n-    2,112, 78, 78, 78, 78, 78, 78,  2,  2,  2, 78, 78, 78, 83, 83,\n-   83, 83, 83, 83,  2,  2, 82, 82, 82, 82, 82, 82, 82,  2,122,122,\n-  122,122,122,122,  2,  2,  2,122,122,122,122,  2,  2,  2, 89, 89,\n-   89, 89, 89,  2,  2,  2,130,130,130,130,130,130,130,  2,  2,  2,\n-  130,130,144,144,144,144,144,144,  2,  2,156,156,156,156,156,156,\n-    2,156,156,156,  2,  2,  2,  3,  3,  3,147,147,147,147,148,148,\n-  148,148,148,148,  2,  2,158,158,158,158,158,158,  2,  2,153,153,\n-  153,153,149,149,149,149,149,149,149,  2, 94, 94, 94, 94, 94, 94,\n-    2,  2,  2,  2, 94, 94,  2,  2,  2, 94, 85, 85, 85, 85, 85, 85,\n-   85,  2,  2, 85,  2,  2,101,101,101,101,101,  2,  2,  2,101,101,\n-    2,  2, 96, 96, 96, 96, 96,  2, 96, 96,111,111,111,111,111,111,\n-  111,  2,100,100,100,100,108,108,108,108,108,108,  2,108,108,108,\n-    2,  2,129,129,129,129,129,129,129,  2,129,  2,129,129,129,129,\n-    2,129,129,129,  2,  2,109,109,109,109,109,109,109,  2,109,109,\n-    2,  2,107,107,107,107,  2,107,107,107,107,  2,  2,107,107,  2,\n-  107,107,107,107,  2,  1,107,107,  2,  2,107,  2,  2,  2,  2,  2,\n-    2,107,  2,  2,107,107,137,137,137,137,  2,137,137,137,137,137,\n-    2,  2,124,124,124,124,124,124,  2,  2,123,123,123,123,123,123,\n-    2,  2,114,114,114,114,114,  2,  2,  2,114,114,  2,  2,102,102,\n-  102,102,102,102,  2,  2,126,126,126,126,126,126,126,  2,  2,126,\n-  126,126,142,142,142,142,125,125,125,125,125,125,125,  2,  2,  2,\n-    2,125,154,154,154,154,154,154,154,  2,  2,154,  2,  2,  2,154,\n-  154,  2,154,154,  2,154,154,  2,  2,154,154,154,  2,  2,150,150,\n-  150,150,  2,  2,150,150,150,  2,  2,  2,141,141,141,141,140,140,\n-  140,140,140,140,140,  2,121,121,121,121,121,  2,  2,  2,  7,  7,\n-    2,  2,133,133,133,133,133,  2,133,133,133,133,133,  2,133,133,\n-    2,  2,133,  2,  2,  2,134,134,134,134,  2,  2,134,134,  2,134,\n-  134,134,134,134,134,  2,138,138,138,138,138,138,138,  2,138,138,\n-    2,138,  2,  2,138,  2,138,138,  2,  2,143,143,143,143,143,143,\n-    2,143,143,  2,143,143,143,143,143,  2,143,  2,  2,  2,143,143,\n-    2,  2,145,145,145,145,145,  2,  2,  2,163,163,163,163,163,  2,\n-  163,163,163,163,163,  2,  2,  2,163,163,163,163,  2,  2, 86,  2,\n-    2,  2, 63, 63, 63, 63, 63, 63,  2,  2, 63, 63, 63,  2, 63,  2,\n-    2,  2,157,157,157,157,157,157,157,  2, 80, 80, 80, 80, 80, 80,\n-    2,  2,127,127,127,127,127,127,127,  2, 79,  2,  2,  2,115,115,\n-  115,115,115,115,115,  2,115,115,  2,  2,  2,  2,115,115,159,159,\n-  159,159,159,159,159,  2,159,159,  2,  2,103,103,103,103,103,103,\n-    2,  2,119,119,119,119,119,119,  2,  2,119,119,  2,119,  2,119,\n-  119,119,146,146,146,146,146,146,146,  2, 99, 99, 99, 99, 99, 99,\n-   99,  2,  2,  2,  2, 99,136,139, 13, 13,155,  2,  2,  2,136,136,\n-  136,136,155,155,155,155,155,155,  2,  2,136,  2,  2,  2,  2, 17,\n-   17, 17,  2, 17, 17,  2, 17, 15, 15, 15, 17, 17, 17,  2,  2,  2,\n-   15,  2,  2, 17,  2,  2,139,139,139,139,105,105,105,105,105,105,\n-  105,  2,105,  2,  2,  2,105,105,  2,  2,  1,  1,  2,  2,  0,  0,\n-    0,  1,  0,  1,  1,  1,  0,  0,  1,  1,  2,  2,  0,  2,  2,  0,\n-    0,  2,  0,  2,  0,  2,131,131,131,131,  2,  2,  2,131,  2,131,\n-  131,131, 56, 56, 56,  2, 56,  2,  2, 56, 56, 56,  2, 56, 56,  2,\n-   56, 56,  6,  6,  2,  2,  2,  2,  2,  6,151,151,151,151,151,  2,\n-    2,  2,151,151,  2,  2,  2,  2,151,151,160,160,160,160,160,160,\n-  160,  2,152,152,152,152,152,152,  2,  2,  2,  2,  2,152,164,164,\n-  164,164,164,164,  2,  2,  2, 30, 30,  2,113,113,113,113,113,  2,\n-    2,113,113,113,113,  2,132,132,132,132,132,132,  2,  2,  2,  2,\n-  132,132,  2,  3,  3,  2,  3,  2,  2,  3,  2,  3,  2,  3,  2,  2,\n-    3,  2,  3,  2,  3,  2,  3,  3,  2,  3, 15,  0,  0,  2, 13,  2,\n-    2,  2, 13, 13, 13,  2,  2,  0,  2,  2,  0,  1,  2,  3,  4,  5,\n-    6,  7,  8,  9,  9,  9,  9, 10,  9, 11, 12, 13,  9,  9,  9, 14,\n-    9,  9, 15,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+   70, 70, 70,240, 70, 70, 70, 70, 70, 70, 70, 70, 70,241, 70, 70,\n+   70, 70,242, 96, 96, 96, 70, 70, 70, 70,243, 96, 96, 96, 96, 96,\n+   96, 96, 96, 96, 96, 96, 70, 70, 70, 70, 70, 70,244, 70, 70, 70,\n+   70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,245, 96, 96,\n+   96, 96, 96, 96, 96, 96,246, 96,247,248,  0,  1,  2,  2,  0,  1,\n+    2,  2,  2,  3,  4,  5,  0,  0,  0,  0,  0, 19, 19, 19, 19, 19,\n+   19, 19, 19, 19, 19,  0,  0,  0, 19,  0, 19,  0,  0,  0,  0,  0,\n+   26, 26,  1,  1,  1,  1,  9,  9,  9,  9,  0,  9,  9,  9,  2,  2,\n+    9,  9,  9,  9,  0,  9,  2,  2,  2,  2,  9,  0,  9,  0,  9,  9,\n+    9,  2,  9,  2,  9,  9,  9,  9,  2,  9,  9,  9, 55, 55, 55, 55,\n+   55, 55,  6,  6,  6,  6,  6,  1,  1,  6,  2,  4,  4,  4,  4,  4,\n+    4,  4,  4,  4,  4,  2,  2, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n+   14,  2,  2,  2,  2, 14, 14,  2,  2,  2,  3,  3,  3,  3,  3,  0,\n+    3,  3,  0,  3,  3,  3,  3,  3,  3,  0,  3,  3,  3,  1,  1,  1,\n+    3,  3,  1,  3,  3,  3, 37, 37, 37, 37, 37, 37,  2, 37, 37, 37,\n+   37,  2,  2, 37, 37, 37, 38, 38, 38, 38, 38, 38,  2,  2, 64, 64,\n+   64, 64, 64, 64, 64,  2,  2, 64, 64, 64, 90, 90, 90, 90, 90, 90,\n+    2,  2, 90, 90, 90,  2, 95, 95, 95, 95,  2,  2, 95,  2,  3,  3,\n+    3,  2,  3,  3,  2,  2,  3,  3,  0,  3,  7,  7,  7,  7,  7,  1,\n+    1,  1,  1,  7,  7,  7,  0,  0,  7,  7,  5,  5,  5,  5,  2,  5,\n+    5,  5,  5,  2,  2,  5,  5,  2,  5,  5,  5,  2,  5,  2,  2,  2,\n+    5,  5,  5,  5,  2,  2,  5,  5,  5,  2,  2,  2,  2,  5,  5,  5,\n+    2,  5,  2, 11, 11, 11, 11, 11, 11,  2,  2,  2,  2, 11, 11,  2,\n+    2, 11, 11, 11, 11, 11, 11,  2, 11, 11,  2, 11, 11,  2, 11, 11,\n+    2,  2,  2, 11,  2,  2, 11,  2, 11,  2,  2,  2, 11, 11,  2, 10,\n+   10, 10, 10, 10, 10, 10, 10, 10,  2, 10, 10,  2, 10, 10, 10, 10,\n+    2,  2, 10,  2,  2,  2,  2,  2, 10, 10,  2, 21, 21, 21, 21, 21,\n+   21, 21, 21,  2,  2, 21, 21,  2, 21, 21, 21, 21,  2,  2, 21, 21,\n+    2, 21,  2,  2, 21, 21,  2,  2, 22, 22,  2, 22, 22, 22, 22, 22,\n+   22,  2, 22,  2, 22, 22, 22, 22,  2,  2,  2, 22, 22,  2,  2,  2,\n+    2, 22, 22,  2,  2,  2, 22, 22, 22, 22, 23, 23, 23, 23, 23,  2,\n+   23, 23, 23, 23,  2,  2,  2, 23, 23,  2, 23, 23, 23,  2,  2, 23,\n+    2,  2,  2,  2, 23, 23,  2,  2,  2, 23, 16, 16, 16, 16, 16,  2,\n+   16, 16,  2, 16, 16, 16, 16, 16,  2,  2,  2, 16, 16,  2,  2,  2,\n+   16, 16, 20, 20, 20, 20, 20,  2, 20, 20,  2,  2, 20, 20,  2, 36,\n+   36, 36, 36, 36, 36, 36, 36, 36, 36,  2,  2,  2, 36, 36, 36, 36,\n+    2, 36,  2, 36,  2,  2,  2,  2, 36,  2,  2,  2,  2, 36, 36,  2,\n+   36,  2, 36,  2,  2,  2,  2, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n+   24,  2,  2,  2,  2,  0,  2, 18, 18,  2, 18,  2, 18, 18, 18, 18,\n+   18,  2, 18, 18, 18, 18,  2, 18,  2, 18, 18, 18,  2,  2, 18,  2,\n+   18,  2, 25, 25, 25, 25,  2, 25, 25, 25, 25,  2,  2,  2, 25,  2,\n+   25, 25, 25,  0,  0,  0,  0, 25, 25,  2, 33, 33, 33, 33,  8,  8,\n+    8,  8,  8,  8,  2,  8,  2,  8,  2,  2,  8,  8,  8,  0, 12, 12,\n+   12, 12, 30, 30, 30, 30, 30,  2, 30, 30, 30, 30,  2,  2, 30, 30,\n+   30,  2,  2, 30, 30, 30, 30,  2,  2,  2, 29, 29, 29, 29, 29, 29,\n+    2,  2, 28, 28, 28, 28, 34, 34, 34, 34, 34,  2,  2,  2, 35, 35,\n+   35, 35, 35, 35, 35,  0,  0,  0, 35, 35, 35,  2,  2,  2, 45, 45,\n+   45, 45, 45, 45,  2,  2,  2,  2,  2, 45, 44, 44, 44, 44, 44,  0,\n+    0,  2, 43, 43, 43, 43, 46, 46, 46, 46, 46,  2, 46, 46, 31, 31,\n+   31, 31, 31, 31,  2,  2, 32, 32,  0,  0, 32,  0, 32, 32, 32, 32,\n+   32, 32, 32, 32,  2,  2, 32,  2,  2,  2, 32, 32, 32,  2, 28, 28,\n+    2,  2, 48, 48, 48, 48, 48, 48, 48,  2, 48,  2,  2,  2, 52, 52,\n+   52, 52, 52, 52,  2,  2, 52,  2,  2,  2, 58, 58, 58, 58, 58, 58,\n+    2,  2, 58, 58, 58,  2,  2,  2, 58, 58, 54, 54, 54, 54,  2,  2,\n+   54, 54, 91, 91, 91, 91, 91, 91, 91,  2, 91,  2,  2, 91, 91, 91,\n+    2,  2,  1,  1,  1,  2, 62, 62, 62, 62, 62,  2,  2,  2, 62, 62,\n+   62,  2, 76, 76, 76, 76, 93, 93, 93, 93, 70, 70, 70, 70,  2,  2,\n+    2, 70, 70, 70,  2,  2,  2, 70, 70, 70, 73, 73, 73, 73,  6,  2,\n+    2,  2,  8,  8,  8,  2,  2,  8,  8,  8,  1,  1,  1,  0,  1,  0,\n+    1,  1,  1,  0,  0,  0,  0,  1,  0,  0,  1,  1,  0,  2, 19, 19,\n+    9,  9,  9,  9,  9,  6, 19,  9,  9,  9,  9,  9, 19, 19,  9,  9,\n+    9, 19,  6, 19, 19, 19, 19, 19, 19,  9,  9,  9,  2,  2,  2,  9,\n+    2,  9,  2,  9,  9,  9,  1,  1,  0,  0,  0,  2,  0,  0,  0, 19,\n+    2,  2,  0,  0,  0, 19,  0,  0,  0,  2, 19,  2,  2,  2,  0,  2,\n+    2,  2,  1,  2,  2,  2,  0,  0,  9,  0,  0,  0, 19, 19, 27, 27,\n+   27, 27,  2,  2,  0,  0,  0,  0,  2,  0, 56, 56, 56, 56,  2, 55,\n+   55, 55, 61, 61, 61, 61,  2,  2,  2, 61, 61,  2,  2,  2,  0,  0,\n+    2,  2, 13, 13, 13, 13, 13, 13,  2, 13, 13, 13,  2,  2,  0, 13,\n+    0, 13,  0, 13, 13, 13, 13, 13,  1,  1,  1,  1, 12, 12,  2, 15,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15,  2,  2,  1,  1,  0,  0, 15,\n+   15, 15,  0, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,  0,  2, 26,\n+   26, 26, 26, 26, 26, 26,  2, 12, 12, 12, 12, 12, 12,  2, 12, 12,\n+   12,  0, 39, 39, 39, 39, 39,  2,  2,  2, 39, 39, 39,  2, 86, 86,\n+   86, 86, 77, 77, 77, 77, 79, 79, 79, 79, 19, 19, 19,  2, 19, 19,\n+    2, 19,  2, 19, 19, 19, 19, 19,  2,  2,  2,  2, 19, 19, 60, 60,\n+   60, 60, 60,  2,  2,  2, 65, 65, 65, 65, 75, 75, 75, 75, 75, 75,\n+    2,  2,  2,  2, 75, 75, 69, 69, 69, 69, 69, 69,  0, 69, 74, 74,\n+   74, 74,  2,  2,  2, 74, 12,  2,  2,  2, 84, 84, 84, 84, 84, 84,\n+    2,  0, 84, 84,  2,  2,  2,  2, 84, 84, 33, 33, 33,  2, 68, 68,\n+   68, 68, 68, 68, 68,  2, 68, 68,  2,  2, 92, 92, 92, 92, 92, 92,\n+   92,  2,  2,  2,  2, 92, 87, 87, 87, 87, 87, 87, 87,  2, 19,  9,\n+   19, 19, 19, 19,  0,  0, 87, 87,  2,  2,  2,  2,  2, 12,  2,  2,\n+    2,  4, 14,  2, 14,  2, 14, 14,  2, 14, 14,  2, 14, 14,  2,  2,\n+    2,  3,  3,  3,  0,  0,  2,  2,  3,  3,  1,  1,  6,  6,  3,  2,\n+    3,  3,  3,  2,  2,  0,  2,  0,  0,  0,  0,  0, 17, 17, 17, 17,\n+    0,  0,  2,  2, 12, 12, 49, 49, 49, 49,  2, 49, 49, 49, 49, 49,\n+   49,  2, 49, 49,  2, 49, 49, 49,  2,  2,  9,  2,  2,  2,  0,  1,\n+    2,  2, 71, 71, 71, 71, 71,  2,  2,  2, 67, 67, 67, 67, 67,  2,\n+    2,  2, 42, 42, 42, 42,  2, 42, 42, 42, 41, 41, 41, 41, 41, 41,\n+   41,  2,118,118,118,118,118,118,118,  2, 53, 53, 53, 53, 53, 53,\n+    2, 53, 59, 59, 59, 59, 59, 59,  2,  2, 40, 40, 40, 40, 51, 51,\n+   51, 51, 50, 50, 50, 50, 50, 50,  2,  2,135,135,135,135,106,106,\n+  106,106,104,104,104,104,  2,  2,  2,104,161,161,161,161,161,161,\n+  161,  2,161,161,  2,161,161,  2,  2,  2,110,110,110,110,110,110,\n+  110,  2,110,110,  2,  2, 19,  2, 19, 19, 47, 47, 47, 47, 47, 47,\n+    2,  2, 47,  2, 47, 47, 47, 47,  2, 47, 47,  2,  2,  2, 47,  2,\n+    2, 47, 81, 81, 81, 81, 81, 81,  2, 81,120,120,120,120,116,116,\n+  116,116,116,116,116,  2,  2,  2,  2,116,128,128,128,128,128,128,\n+  128,  2,128,128,  2,  2,  2,  2,  2,128, 66, 66, 66, 66,  2,  2,\n+    2, 66, 72, 72, 72, 72, 72, 72,  2,  2,  2,  2,  2, 72, 98, 98,\n+   98, 98, 97, 97, 97, 97,  2,  2, 97, 97, 57, 57, 57, 57,  2, 57,\n+   57,  2,  2, 57, 57, 57, 57, 57,  2,  2, 57, 57, 57,  2,  2,  2,\n+    2, 57, 57,  2,  2,  2, 88, 88, 88, 88,117,117,117,117,112,112,\n+  112,112,112,112,112,  2,  2,  2,  2,112, 78, 78, 78, 78, 78, 78,\n+    2,  2,  2, 78, 78, 78, 83, 83, 83, 83, 83, 83,  2,  2, 82, 82,\n+   82, 82, 82, 82, 82,  2,122,122,122,122,122,122,  2,  2,  2,122,\n+  122,122,122,  2,  2,  2, 89, 89, 89, 89, 89,  2,  2,  2,130,130,\n+  130,130,130,130,130,  2,  2,  2,130,130,144,144,144,144,144,144,\n+    2,  2,156,156,156,156,156,156,  2,156,156,156,  2,  2,  2,  3,\n+    3,  3,147,147,147,147,148,148,148,148,148,148,  2,  2,158,158,\n+  158,158,158,158,  2,  2,153,153,153,153,149,149,149,149,149,149,\n+  149,  2, 94, 94, 94, 94, 94, 94,  2,  2,  2,  2, 94, 94,  2,  2,\n+    2, 94, 85, 85, 85, 85, 85, 85, 85,  2,  2, 85,  2,  2,101,101,\n+  101,101,101,  2,  2,  2,101,101,  2,  2, 96, 96, 96, 96, 96,  2,\n+   96, 96,111,111,111,111,111,111,111,  2,100,100,100,100,108,108,\n+  108,108,108,108,  2,108,108,108,  2,  2,129,129,129,129,129,129,\n+  129,  2,129,  2,129,129,129,129,  2,129,129,129,  2,  2,109,109,\n+  109,109,109,109,109,  2,109,109,  2,  2,107,107,107,107,  2,107,\n+  107,107,107,  2,  2,107,107,  2,107,107,107,107,  2,  1,107,107,\n+    2,  2,107,  2,  2,  2,  2,  2,  2,107,  2,  2,107,107,137,137,\n+  137,137,  2,137,137,137,137,137,  2,  2,124,124,124,124,124,124,\n+    2,  2,123,123,123,123,123,123,  2,  2,114,114,114,114,114,  2,\n+    2,  2,114,114,  2,  2,102,102,102,102,102,102,  2,  2,126,126,\n+  126,126,126,126,126,  2,  2,126,126,126,142,142,142,142,125,125,\n+  125,125,125,125,125,  2,  2,  2,  2,125,154,154,154,154,154,154,\n+  154,  2,  2,154,  2,  2,  2,154,154,  2,154,154,  2,154,154,  2,\n+    2,154,154,154,  2,  2,150,150,150,150,  2,  2,150,150,150,  2,\n+    2,  2,141,141,141,141,140,140,140,140,140,140,140,  2,121,121,\n+  121,121,121,  2,  2,  2,  7,  7,  2,  2,133,133,133,133,133,  2,\n+  133,133,133,133,133,  2,133,133,  2,  2,133,  2,  2,  2,134,134,\n+  134,134,  2,  2,134,134,  2,134,134,134,134,134,134,  2,138,138,\n+  138,138,138,138,138,  2,138,138,  2,138,  2,  2,138,  2,138,138,\n+    2,  2,143,143,143,143,143,143,  2,143,143,  2,143,143,143,143,\n+  143,  2,143,  2,  2,  2,143,143,  2,  2,145,145,145,145,145,  2,\n+    2,  2,163,163,163,163,163,  2,163,163,163,163,163,  2,  2,  2,\n+  163,163,163,163,  2,  2, 86,  2,  2,  2, 63, 63, 63, 63, 63, 63,\n+    2,  2, 63, 63, 63,  2, 63,  2,  2,  2,157,157,157,157,157,157,\n+  157,  2, 80, 80, 80, 80, 80, 80,  2,  2,127,127,127,127,127,127,\n+  127,  2, 79,  2,  2,  2,115,115,115,115,115,115,115,  2,115,115,\n+    2,  2,  2,  2,115,115,159,159,159,159,159,159,159,  2,159,159,\n+    2,  2,103,103,103,103,103,103,  2,  2,119,119,119,119,119,119,\n+    2,  2,119,119,  2,119,  2,119,119,119,146,146,146,146,146,146,\n+  146,  2, 99, 99, 99, 99, 99, 99, 99,  2,  2,  2,  2, 99,136,139,\n+   13, 13,155,  2,  2,  2,136,136,136,136,155,155,155,155,155,155,\n+    2,  2,136,  2,  2,  2,  2, 17, 17, 17,  2, 17, 17,  2, 17, 15,\n+   15, 15, 17, 17, 17,  2,  2,  2, 15,  2,  2, 17,  2,  2,139,139,\n+  139,139,105,105,105,105,105,105,105,  2,105,  2,  2,  2,105,105,\n+    2,  2,  1,  1,  2,  2,  0,  0,  0,  1,  0,  1,  1,  1,  0,  0,\n+    1,  1,  2,  2,  0,  2,  2,  0,  0,  2,  0,  2,  0,  2,131,131,\n+  131,131,  2,  2,  2,131,  2,131,131,131, 56, 56, 56,  2, 56,  2,\n+    2, 56, 56, 56,  2, 56, 56,  2, 56, 56,  6,  6,  2,  2,  2,  2,\n+    2,  6,151,151,151,151,151,  2,  2,  2,151,151,  2,  2,  2,  2,\n+  151,151,160,160,160,160,160,160,160,  2,152,152,152,152,152,152,\n+    2,  2,  2,  2,  2,152,164,164,164,164,164,164,  2,  2,  2, 30,\n+   30,  2,113,113,113,113,113,  2,  2,113,113,113,113,  2,132,132,\n+  132,132,132,132,  2,  2,  2,  2,132,132,  2,  3,  3,  2,  3,  2,\n+    2,  3,  2,  3,  2,  3,  2,  2,  3,  2,  3,  2,  3,  2,  3,  3,\n+    2,  3, 15,  0,  0,  2, 13,  2,  2,  2, 13, 13, 13,  2,  2,  0,\n+    2,  2,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  9,  9,  9, 10,\n+    9, 11, 12, 13,  9,  9,  9, 14,  9,  9, 15,  9,  9,  9,  9,  9,\n@@ -3689,2 +3691,2 @@\n-    9,  9,  9,  9,  9,  9, 16, 17,  9,  9,  9,  9,  9,  9,  9,  9,\n-    9,  9, 18, 19, 20,  9, 21,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9, 16, 17,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9, 18, 19, 20,  9, 21,  9,\n@@ -3696,1 +3698,1 @@\n-    9,  9, 22,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9, 22,  9,  9,  9,  9,  9,\n@@ -3705,8 +3707,9 @@\n-    9,  9,  9,  9,  9,  9, 23, 24,  0,  0,  0,  0,  0,  0,  0,  0,\n-    0,  0,  0,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,\n-    0,  0, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,  0,  0,  0,  0,\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 23,  0,  0, 24,\n-   25, 26, 27, 28, 29, 30,  0,  0, 31, 32,  0, 33,  0, 34,  0, 35,\n-    0,  0,  0,  0, 36, 37, 38, 39,  0,  0,  0,  0,  0,  0,  0,  0,\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 40,  0,  0,  0,  0,  0,\n-    0,  0,  0,  0, 41, 42,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9, 23, 24,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,  4,\n+    5,  6,  7,  8,  9, 10, 11, 12,  0,  0, 13, 14, 15, 16, 17, 18,\n+   19, 20, 21, 22,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0, 23,  0,  0, 24, 25, 26, 27, 28, 29, 30,  0,  0,\n+   31, 32,  0, 33,  0, 34,  0, 35,  0,  0,  0,  0, 36, 37, 38, 39,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0, 40,  0,  0,  0,  0,  0,  0,  0,  0,  0, 41, 42,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n@@ -3714,8 +3717,5 @@\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 43, 44,  0, 45,  0,  0,\n-    0,  0,  0,  0, 46, 47,  0,  0,  0,  0,  0, 48,  0, 49,  0,  0,\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 50, 51,  0,  0,\n-    0, 52,  0,  0, 53,  0,  0,  0,  0,  0,  0,  0, 54,  0,  0,  0,\n-    0,  0,  0,  0, 55,  0,  0,  0,  0,  0,  0,  0, 56,  0,  0,  0,\n-    0,  0,  0,  0,  0, 57,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 58, 59, 60, 61,\n-   62, 63, 64, 65,  0,  0,  0,  0,  0,  0, 66,  0,  0,  0,  0,  0,\n+    0,  0, 43, 44,  0, 45,  0,  0,  0,  0,  0,  0, 46, 47,  0,  0,\n+    0,  0,  0, 48,  0, 49,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0, 50, 51,  0,  0,  0, 52,  0,  0, 53,  0,  0,  0,\n+    0,  0,  0,  0, 54,  0,  0,  0,  0,  0,  0,  0, 55,  0,  0,  0,\n+    0,  0,  0,  0, 56,  0,  0,  0,  0,  0,  0,  0,  0, 57,  0,  0,\n@@ -3723,0 +3723,2 @@\n+    0,  0,  0,  0, 58, 59, 60, 61, 62, 63, 64, 65,  0,  0,  0,  0,\n+    0,  0, 66,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n@@ -3726,7 +3728,0 @@\n-    0,  0,  0,  0,  0,  0,  0,  0, 67, 68,  0, 69, 70,  0,  0,  0,\n-    0,  0,  0,  0,  0,  0,  0,  0, 71, 72, 73, 74, 75, 76, 77, 78,\n-   79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94,\n-   95, 96, 97, 98, 99,100,101,102,103,  0,  0,  0,  0,  0,  0,  0,\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,104,  0,  0,  0,  0,  0,\n-    0,105,106,  0,107,  0,  0,  0,108,  0,109,  0,110,  0,111,112,\n-  113,  0,114,  0,  0,  0,115,  0,  0,  0,116,  0,  0,  0,  0,  0,\n@@ -3734,3 +3729,8 @@\n-    0,  0,  0,  0,  0,117,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,118,119,120,121,\n-    0,122,123,124,125,126,  0,127,  0,  0,  0,  0,  0,  0,  0,  0,\n+   67, 68,  0, 69, 70,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+   71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86,\n+   87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,100,101,102,\n+  103,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,104,  0,  0,  0,  0,  0,  0,105,106,  0,107,  0,  0,  0,\n+  108,  0,109,  0,110,  0,111,112,113,  0,114,  0,  0,  0,115,  0,\n+    0,  0,116,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,117,  0,  0,\n@@ -3738,3 +3738,1 @@\n-    0,  0,  0,  0,  0,  0,  0,  0,128,129,130,131,132,133,134,135,\n-  136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,\n-  152,153,154,155,156,157,  0,  0,  0,158,159,160,161,  0,  0,  0,\n+    0,  0,  0,  0,118,119,120,121,  0,122,123,124,125,126,  0,127,\n@@ -3742,1 +3740,0 @@\n-    0,162,163,  0,  0,  0,  0,  0,  0,  0,164,  0,  0,  0,  0,  0,\n@@ -3744,1 +3741,5 @@\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,165,  0,  0,  0,\n+  128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,\n+  144,145,146,147,148,149,150,151,152,153,154,155,156,157,  0,  0,\n+    0,158,159,160,161,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,162,163,  0,  0,  0,  0,  0,\n+    0,  0,164,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n@@ -3746,3 +3747,3 @@\n-    0,  0,  0,166,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n-    0,  0,  0,167,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,168,  0,  0,  0,  0,\n+    0,  0,  0,  0,165,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,166,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,167,  0,  0,  0,  0,\n@@ -3750,4 +3751,1 @@\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,169,170,  0,\n-    0,  0,  0,171,172,  0,  0,  0,173,174,175,176,177,178,179,180,\n-  181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,\n-  197,198,199,200,201,202,203,204,205,206,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,168,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n@@ -3755,1 +3753,5 @@\n-    0,  0,  0,  0,  1,  2,  3,  4,\n+    0,  0,  0,  0,  0,169,170,  0,  0,  0,  0,171,172,  0,  0,  0,\n+  173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,\n+  189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,\n+  205,206,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,  4,\n@@ -3758,1 +3760,1 @@\n-_hb_ucd_u16[10040] =\n+_hb_ucd_u16[10060] =\n@@ -3801,3 +3803,3 @@\n-   209, 322, 209, 209, 209, 209, 209, 323, 209, 209, 209, 209, 209, 324, 140, 325,\n-   326, 327, 328, 329, 136,  48,  48,  48,  48, 330, 178,  48,  48,  48,  48, 331,\n-   332,  48,  48, 136,  48,  48,  48,  48, 200, 333,  48,  48, 209, 209, 323,  48,\n+   209, 322, 209, 209, 209, 209, 209, 323, 209, 209, 209, 209, 209, 324, 140, 209,\n+   325, 326, 327, 328, 136,  48,  48,  48,  48, 329, 178,  48,  48,  48,  48, 330,\n+   331,  48,  48, 136,  48,  48,  48,  48, 200, 332,  48,  48, 209, 209, 333,  48,\n@@ -3874,7 +3876,7 @@\n-   209, 209, 325, 209, 209, 209, 209, 209, 209, 323, 334, 669, 669, 669, 209, 324,\n-   670, 209, 209, 209, 209, 209, 209, 209, 209, 209, 671, 140, 140, 140, 672, 209,\n-   673, 209, 209, 325, 674, 675, 324, 140, 209, 209, 209, 209, 209, 209, 209, 676,\n-   209, 209, 209, 209, 209, 677, 426, 426, 209, 209, 209, 209, 209, 209, 209, 678,\n-   209, 209, 209, 209, 209, 176, 325, 427, 325, 209, 209, 209, 679, 176, 209, 209,\n-   679, 209, 671, 675, 140, 140, 140, 140, 209, 209, 209, 209, 209, 323, 671, 426,\n-   674, 209, 209, 680, 681, 325, 674, 674, 209, 682, 209, 209, 288, 140, 140, 192,\n+   209, 209, 669, 209, 209, 209, 209, 209, 209, 323, 334, 670, 670, 670, 209, 324,\n+   671, 209, 209, 209, 209, 209, 209, 209, 209, 209, 672, 140, 140, 140, 673, 209,\n+   674, 209, 209, 669, 675, 676, 324, 140, 209, 209, 209, 209, 209, 209, 209, 677,\n+   209, 209, 209, 209, 209, 678, 426, 426, 209, 209, 209, 209, 209, 209, 209, 679,\n+   209, 209, 209, 209, 209, 176, 669, 427, 669, 209, 209, 209, 680, 176, 209, 209,\n+   680, 209, 672, 676, 140, 140, 140, 140, 209, 209, 209, 209, 209, 323, 672, 426,\n+   675, 209, 209, 681, 682, 669, 675, 675, 209, 683, 209, 209, 288, 140, 140, 192,\n@@ -3883,128 +3885,129 @@\n-    48,  48,  48,  48,  48,  48, 100, 140,  48, 204, 140, 140, 140, 140, 140, 140,\n-    48,  48,  48,  48,  71,  48,  48,  48,  48,  48,  48, 140, 140, 140, 140, 140,\n-   683, 140, 570, 570, 570, 570, 570, 570,  32,  32,  32,  32,  32,  32,  32,  32,\n-    32,  32,  32,  32,  32,  32,  32, 140, 391, 391, 391, 391, 391, 391, 391, 684,\n-   391, 391, 391, 391, 391, 391, 391, 685,   0,   0,   0,   0,   1,   2,   1,   2,\n-     0,   0,   3,   3,   4,   5,   4,   5,   4,   4,   4,   4,   4,   4,   4,   4,\n-     4,   4,   4,   6,   0,   0,   7,   0,   8,   8,   8,   8,   8,   8,   8,   9,\n-    10,  11,  12,  11,  11,  11,  13,  11,  14,  14,  14,  14,  14,  14,  14,  14,\n-    15,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  16,  17,  18,  17,  17,\n-    19,  20,  21,  21,  22,  21,  23,  24,  25,  26,  27,  27,  28,  29,  27,  30,\n-    27,  27,  27,  27,  27,  31,  27,  27,  32,  33,  33,  33,  34,  27,  27,  27,\n-    35,  35,  35,  36,  37,  37,  37,  38,  39,  39,  40,  41,  42,  43,  44,  27,\n-    45,  46,  27,  27,  27,  27,  47,  27,  48,  48,  48,  48,  48,  49,  50,  48,\n-    51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,\n-    67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,  78,  79,  80,  81,  82,\n-    83,  84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,  98,\n-    99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 109, 110, 111, 112, 109,\n-   113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 122, 123, 122, 124, 125, 125,\n-   126, 127, 128, 129, 130, 131, 125, 125, 132, 132, 132, 132, 133, 132, 134, 135,\n-   132, 133, 132, 136, 136, 137, 125, 125, 138, 138, 138, 138, 138, 138, 138, 138,\n-   138, 138, 139, 139, 140, 139, 139, 141, 142, 142, 142, 142, 142, 142, 142, 142,\n-   143, 143, 143, 143, 144, 145, 143, 143, 144, 143, 143, 146, 147, 148, 143, 143,\n-   143, 147, 143, 143, 143, 149, 143, 150, 143, 151, 152, 152, 152, 152, 152, 153,\n-   154, 154, 154, 154, 154, 154, 154, 154, 155, 156, 157, 157, 157, 157, 158, 159,\n-   160, 161, 162, 163, 164, 165, 166, 167, 168, 168, 168, 168, 168, 169, 170, 170,\n-   171, 172, 173, 173, 173, 173, 173, 174, 173, 173, 175, 154, 154, 154, 154, 176,\n-   177, 178, 179, 179, 180, 181, 182, 183, 184, 184, 185, 184, 186, 187, 168, 168,\n-   188, 189, 190, 190, 190, 191, 190, 192, 193, 193, 194,   8, 195, 125, 125, 125,\n-   196, 196, 196, 196, 197, 196, 196, 198, 199, 199, 199, 199, 200, 200, 200, 201,\n-   202, 202, 202, 203, 204, 205, 205, 205, 206, 139, 139, 207, 208, 209, 210, 211,\n-     4,   4, 212,   4,   4, 213, 214, 215,   4,   4,   4, 216,   8,   8,   8,   8,\n-    11, 217,  11,  11, 217, 218,  11, 219,  11,  11,  11, 220, 220, 221,  11, 222,\n-   223,   0,   0,   0,   0,   0, 224, 225, 226, 227,   0,   0, 228,   8,   8, 229,\n-     0,   0, 230, 231, 232,   0,   4,   4, 233,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 234, 125, 235, 125,   0,   0,\n-   236, 236, 236, 236, 236, 236, 236, 236,   0,   0,   0,   0,   0,   0,   0, 237,\n-     0, 238,   0,   0,   0,   0,   0,   0, 239, 239, 239, 239, 239, 239,   4,   4,\n-   240, 240, 240, 240, 240, 240, 240, 241, 139, 139, 140, 242, 242, 242, 243, 244,\n-   143, 245, 246, 246, 246, 246,  14,  14,   0,   0,   0,   0,   0, 247, 125, 125,\n-   248, 249, 248, 248, 248, 248, 248, 250, 248, 248, 248, 248, 248, 248, 248, 248,\n-   248, 248, 248, 248, 248, 251, 125, 252, 253,   0, 254, 255, 256, 257, 257, 257,\n-   257, 258, 259, 260, 260, 260, 260, 261, 262, 263, 263, 264, 142, 142, 142, 142,\n-   265,   0, 263, 263,   0,   0, 266, 260, 142, 265,   0,   0,   0,   0, 142, 267,\n-     0,   0,   0,   0,   0, 260, 260, 268, 260, 260, 260, 260, 260, 269,   0,   0,\n-   248, 248, 248, 248,   0,   0,   0,   0, 270, 270, 270, 270, 270, 270, 270, 270,\n-   271, 270, 270, 270, 272, 273, 273, 273, 274, 274, 274, 274, 274, 274, 274, 274,\n-   274, 274, 275, 125,  14,  14,  14,  14,  14,  14, 276, 276, 276, 276, 276, 277,\n-     0,   0, 278,   4,   4,   4,   4,   4, 279,   4,   4,   4, 280, 281, 125, 282,\n-   283, 283, 284, 285, 286, 286, 286, 287, 288, 288, 288, 288, 289, 290,  48,  48,\n-   291, 291, 292, 293, 293, 294, 142, 295, 296, 296, 296, 296, 297, 298, 138, 299,\n-   300, 300, 300, 301, 302, 303, 138, 138, 304, 304, 304, 304, 305, 306, 307, 308,\n-   309, 310, 246,   4,   4, 311, 312, 152, 152, 152, 152, 152, 307, 307, 313, 314,\n-   142, 142, 315, 142, 316, 142, 142, 317, 125, 125, 125, 125, 125, 125, 125, 125,\n-   248, 248, 248, 248, 248, 248, 318, 248, 248, 248, 248, 248, 248, 319, 125, 125,\n-   320, 321,  21, 322, 323,  27,  27,  27,  27,  27,  27,  27, 324, 325,  27,  27,\n-    27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27, 326,  27,  27,  27,  27,\n-    27, 327,  27,  27, 328, 125, 125,  27,   8, 285, 329,   0,   0, 330, 331, 332,\n-    27,  27,  27,  27,  27,  27,  27, 333, 334,   0,   1,   2,   1,   2, 335, 259,\n-   260, 336, 142, 265, 337, 338, 339, 340, 341, 342, 343, 344, 345, 345, 125, 125,\n-   342, 342, 342, 342, 342, 342, 342, 346, 347,   0,   0, 348,  11,  11,  11,  11,\n-   349, 350, 351, 125, 125,   0,   0, 352, 353, 354, 355, 355, 355, 356, 357, 252,\n-   358, 358, 359, 360, 361, 362, 362, 363, 364, 365, 366, 366, 367, 368, 125, 125,\n-   369, 369, 369, 369, 369, 370, 370, 370, 371, 372, 373, 374, 374, 375, 374, 376,\n-   377, 377, 378, 379, 379, 379, 380, 381, 381, 382, 383, 384, 125, 125, 125, 125,\n-   385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 386, 385, 387, 388, 125,\n-   389,   4,   4, 390, 125, 125, 125, 125, 391, 392, 392, 393, 394, 395, 396, 396,\n-   397, 398, 399, 125, 125, 125, 400, 401, 402, 403, 404, 405, 125, 125, 125, 125,\n-   406, 406, 407, 408, 407, 409, 407, 407, 410, 411, 412, 413, 414, 414, 415, 415,\n-   416, 416, 125, 125, 417, 417, 418, 419, 420, 420, 420, 421, 422, 423, 424, 425,\n-   426, 427, 428, 125, 125, 125, 125, 125, 429, 429, 429, 429, 430, 125, 125, 125,\n-   431, 431, 431, 432, 431, 431, 431, 433, 434, 434, 435, 436, 125, 125, 125, 125,\n-   125, 125, 125, 125, 125, 125,  27,  45, 437, 437, 438, 439, 125, 125, 125, 440,\n-   441, 441, 442, 443, 443, 444, 125, 445, 446, 125, 125, 447, 448, 125, 449, 450,\n-   451, 451, 451, 451, 452, 453, 451, 454, 455, 455, 455, 455, 456, 457, 458, 459,\n-   460, 460, 460, 461, 462, 463, 463, 464, 465, 465, 465, 465, 465, 465, 466, 467,\n-   468, 469, 468, 468, 470, 125, 125, 125, 471, 472, 473, 474, 474, 474, 475, 476,\n-   477, 478, 479, 480, 481, 482, 483, 484, 485, 485, 485, 485, 485, 486, 487, 125,\n-   488, 488, 488, 488, 489, 490, 125, 125, 491, 491, 491, 492, 491, 493, 125, 125,\n-   494, 494, 494, 494, 495, 496, 497, 125, 498, 498, 498, 499, 499, 125, 125, 125,\n-   500, 501, 502, 500, 503, 125, 125, 125, 504, 504, 504, 505, 125, 125, 125, 125,\n-   125, 125, 506, 506, 506, 506, 506, 507, 508, 509, 510, 511, 512, 513, 125, 125,\n-   125, 125, 514, 515, 515, 514, 516, 125, 517, 517, 517, 517, 518, 519, 519, 519,\n-   519, 519, 520, 154, 521, 521, 521, 522, 523, 125, 125, 125, 125, 125, 125, 125,\n-   524, 525, 525, 526, 527, 525, 528, 529, 529, 530, 531, 532, 125, 125, 125, 125,\n-   533, 534, 534, 535, 536, 537, 538, 539, 540, 541, 542, 125, 125, 125, 125, 125,\n-   125, 125, 125, 125, 125, 125, 543, 544, 545, 546, 545, 547, 545, 548, 125, 125,\n-   125, 125, 125, 549, 550, 550, 550, 551, 552, 552, 552, 552, 552, 552, 552, 552,\n-   552, 553, 125, 125, 125, 125, 125, 125, 552, 552, 552, 552, 552, 552, 554, 555,\n-   552, 552, 552, 552, 556, 125, 125, 125, 125, 557, 557, 557, 557, 557, 557, 558,\n-   559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 560, 125, 125,\n-   561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 562, 125, 125, 125,\n-   276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 563, 564, 565, 566, 567,\n-   567, 567, 567, 568, 569, 570, 571, 572, 573, 573, 573, 573, 574, 575, 576, 577,\n-   573, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 578, 578, 578, 578,\n-   578, 579, 125, 125, 125, 125, 125, 125, 580, 580, 580, 580, 581, 580, 580, 580,\n-   582, 580, 125, 125, 125, 125, 583, 584, 585, 585, 585, 585, 585, 585, 585, 585,\n-   585, 585, 585, 585, 585, 585, 585, 586, 587, 587, 587, 587, 587, 587, 587, 587,\n-   587, 587, 587, 587, 587, 588, 125, 125, 589, 125, 125, 125, 125, 125, 125, 125,\n-   125, 125, 125, 125, 125, 125, 125, 590, 591, 257, 257, 257, 257, 257, 257, 257,\n-   257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 592, 593, 125, 594, 595, 596,\n-   596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 597,\n-   598, 598, 598, 598, 598, 598, 599, 600, 601, 602, 266, 125, 125, 125, 125, 125,\n-     8,   8, 603,   8, 604,   0,   0,   0,   0,   0,   0,   0, 266, 125, 125, 125,\n-     0,   0,   0,   0,   0,   0,   0, 605,   0,   0, 606,   0,   0,   0, 607, 608,\n-   609,   0, 610,   0,   0,   0, 235, 125,  11,  11,  11,  11, 611, 125, 125, 125,\n-   125, 125, 125, 125,   0, 266,   0, 266,   0,   0,   0,   0,   0, 234,   0, 612,\n-     0,   0,   0,   0,   0, 224,   0,   0,   0, 613, 614, 615, 616,   0,   0,   0,\n-   617, 618,   0, 619, 620, 621,   0,   0,   0,   0, 622,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0, 623,   0,   0,   0, 624, 624, 624, 624, 624, 624, 624, 624,\n-   625, 626, 627, 125, 125, 125, 125, 125,   4, 628, 629, 125, 125, 125, 125, 125,\n-   630, 631, 632,  14,  14,  14, 633, 125, 634, 125, 125, 125, 125, 125, 125, 125,\n-   635, 635, 636, 637, 638, 125, 125, 125, 125, 639, 640, 125, 641, 641, 641, 642,\n-   125, 125, 125, 125, 125, 643, 643, 644, 125, 125, 125, 125, 125, 125, 645, 646,\n-   647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 648, 649, 125, 125,\n-   650, 650, 650, 650, 651, 652, 125, 125, 125, 125, 125, 125, 125, 125, 125, 334,\n-     0,   0,   0, 653, 125, 125, 125, 125, 334,   0,   0, 247, 125, 125, 125, 125,\n-   654,  27, 655, 656, 657, 658, 659, 660, 661, 662, 663, 662, 125, 125, 125, 664,\n-     0,   0, 252,   0,   0,   0,   0,   0,   0, 266, 226, 334, 334, 334,   0, 605,\n-     0,   0, 247, 125, 125, 125, 665,   0, 666,   0,   0, 252, 612, 667, 605, 125,\n-     0,   0,   0,   0,   0, 668, 350, 350,   0,   0,   0,   0,   0,   0,   0, 669,\n-     0,   0,   0,   0,   0, 285, 252, 228, 252,   0,   0,   0, 670, 285,   0,   0,\n-   670,   0, 247, 667, 125, 125, 125, 125,   0,   0,   0,   0,   0, 266, 247, 350,\n-   612,   0,   0, 671, 672, 252, 612, 612,   0, 330,   0,   0, 235, 125, 125, 285,\n-   248, 248, 248, 248, 248, 248, 125, 125, 248, 248, 248, 319, 248, 248, 248, 248,\n-   248, 318, 248, 248, 248, 248, 248, 248, 248, 248, 584, 248, 248, 248, 248, 248,\n-   248, 248, 248, 248, 248, 248, 673, 125, 248, 318, 125, 125, 125, 125, 125, 125,\n-   248, 248, 248, 248, 674, 248, 248, 248, 248, 248, 248, 125, 125, 125, 125, 125,\n-   675, 125,   0,   0,   0,   0,   0,   0,   8,   8,   8,   8,   8,   8,   8,   8,\n+    48,  48,  48,  48,  48,  48, 100,  48,  48,  48,  48,  48,  48, 204, 140, 140,\n+    48, 204, 140, 140, 140, 140, 140, 140,  48,  48,  48,  48,  71,  48,  48,  48,\n+    48,  48,  48, 140, 140, 140, 140, 140, 684, 140, 570, 570, 570, 570, 570, 570,\n+    32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32, 140,\n+   391, 391, 391, 391, 391, 391, 391, 685, 391, 391, 391, 391, 391, 391, 391, 686,\n+     0,   0,   0,   0,   1,   2,   1,   2,   0,   0,   3,   3,   4,   5,   4,   5,\n+     4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   6,   0,   0,   7,   0,\n+     8,   8,   8,   8,   8,   8,   8,   9,  10,  11,  12,  11,  11,  11,  13,  11,\n+    14,  14,  14,  14,  14,  14,  14,  14,  15,  14,  14,  14,  14,  14,  14,  14,\n+    14,  14,  14,  16,  17,  18,  17,  17,  19,  20,  21,  21,  22,  21,  23,  24,\n+    25,  26,  27,  27,  28,  29,  27,  30,  27,  27,  27,  27,  27,  31,  27,  27,\n+    32,  33,  33,  33,  34,  27,  27,  27,  35,  35,  35,  36,  37,  37,  37,  38,\n+    39,  39,  40,  41,  42,  43,  44,  27,  45,  46,  27,  27,  27,  27,  47,  27,\n+    48,  48,  48,  48,  48,  49,  50,  48,  51,  52,  53,  54,  55,  56,  57,  58,\n+    59,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,  73,  74,\n+    75,  76,  77,  78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,\n+    91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103, 104, 105, 106,\n+   107, 108, 109, 109, 110, 111, 112, 109, 113, 114, 115, 116, 117, 118, 119, 120,\n+   121, 122, 122, 123, 122, 124, 125, 125, 126, 127, 128, 129, 130, 131, 125, 125,\n+   132, 132, 132, 132, 133, 132, 134, 135, 132, 133, 132, 136, 136, 137, 125, 125,\n+   138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 139, 139, 140, 139, 139, 141,\n+   142, 142, 142, 142, 142, 142, 142, 142, 143, 143, 143, 143, 144, 145, 143, 143,\n+   144, 143, 143, 146, 147, 148, 143, 143, 143, 147, 143, 143, 143, 149, 143, 150,\n+   143, 151, 152, 152, 152, 152, 152, 153, 154, 154, 154, 154, 154, 154, 154, 154,\n+   155, 156, 157, 157, 157, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167,\n+   168, 168, 168, 168, 168, 169, 170, 170, 171, 172, 173, 173, 173, 173, 173, 174,\n+   173, 173, 175, 154, 154, 154, 154, 176, 177, 178, 179, 179, 180, 181, 182, 183,\n+   184, 184, 185, 184, 186, 187, 168, 168, 188, 189, 190, 190, 190, 191, 190, 192,\n+   193, 193, 194,   8, 195, 125, 125, 125, 196, 196, 196, 196, 197, 196, 196, 198,\n+   199, 199, 199, 199, 200, 200, 200, 201, 202, 202, 202, 203, 204, 205, 205, 205,\n+   206, 139, 139, 207, 208, 209, 210, 211,   4,   4, 212,   4,   4, 213, 214, 215,\n+     4,   4,   4, 216,   8,   8,   8,   8,  11, 217,  11,  11, 217, 218,  11, 219,\n+    11,  11,  11, 220, 220, 221,  11, 222, 223,   0,   0,   0,   0,   0, 224, 225,\n+   226, 227,   0,   0, 228,   8,   8, 229,   0,   0, 230, 231, 232,   0,   4,   4,\n+   233,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0, 234, 125, 235, 125,   0,   0, 236, 236, 236, 236, 236, 236, 236, 236,\n+     0,   0,   0,   0,   0,   0,   0, 237,   0, 238,   0,   0,   0,   0,   0,   0,\n+   239, 239, 239, 239, 239, 239,   4,   4, 240, 240, 240, 240, 240, 240, 240, 241,\n+   139, 139, 140, 242, 242, 242, 243, 244, 143, 245, 246, 246, 246, 246,  14,  14,\n+     0,   0,   0,   0,   0, 247, 125, 125, 248, 249, 248, 248, 248, 248, 248, 250,\n+   248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 251, 125,   0,\n+   252,   0, 253, 254, 255, 256, 256, 256, 256, 257, 258, 259, 259, 259, 259, 260,\n+   261, 262, 262, 263, 142, 142, 142, 142, 264,   0, 262, 262,   0,   0, 265, 259,\n+   142, 264,   0,   0,   0,   0, 142, 266,   0,   0,   0,   0,   0, 259, 259, 267,\n+   259, 259, 259, 259, 259, 268,   0,   0, 248, 248, 248, 248,   0,   0,   0,   0,\n+   269, 269, 269, 269, 269, 269, 269, 269, 270, 269, 269, 269, 271, 272, 272, 272,\n+   273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 274, 125,  14,  14,  14,  14,\n+    14,  14, 275, 275, 275, 275, 275, 276,   0,   0, 277,   4,   4,   4,   4,   4,\n+   278,   4,   4,   4, 279, 280, 125, 281, 282, 282, 283, 284, 285, 285, 285, 286,\n+   287, 287, 287, 287, 288, 289,  48,  48, 290, 290, 291, 292, 292, 293, 142, 294,\n+   295, 295, 295, 295, 296, 297, 138, 298, 299, 299, 299, 300, 301, 302, 138, 138,\n+   303, 303, 303, 303, 304, 305, 306, 307, 308, 309, 246,   4,   4, 310, 311, 152,\n+   152, 152, 152, 152, 306, 306, 312, 313, 142, 142, 314, 142, 315, 142, 142, 316,\n+   125, 125, 125, 125, 125, 125, 125, 125, 248, 248, 248, 248, 248, 248, 317, 248,\n+   248, 248, 248, 248, 248, 318, 125, 125, 319, 320,  21, 321, 322,  27,  27,  27,\n+    27,  27,  27,  27, 323, 324,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,\n+    27,  27,  27, 325,  27,  27,  27,  27,  27, 326,  27,  27, 327, 125, 125,  27,\n+     8, 284, 328,   0,   0, 329, 330, 331,  27,  27,  27,  27,  27,  27,  27, 332,\n+   333,   0,   1,   2,   1,   2, 334, 258, 259, 335, 142, 264, 336, 337, 338, 339,\n+   340, 341, 342, 343, 344, 344, 125, 125, 341, 341, 341, 341, 341, 341, 341, 345,\n+   346,   0,   0, 347,  11,  11,  11,  11, 348, 349, 350, 125, 125,   0,   0, 351,\n+   352, 353, 354, 354, 354, 355, 356, 357, 358, 358, 359, 360, 361, 362, 362, 363,\n+   364, 365, 366, 366, 367, 368, 125, 125, 369, 369, 369, 369, 369, 370, 370, 370,\n+   371, 372, 373, 374, 374, 375, 374, 376, 377, 377, 378, 379, 379, 379, 380, 381,\n+   381, 382, 383, 384, 125, 125, 125, 125, 385, 385, 385, 385, 385, 385, 385, 385,\n+   385, 385, 385, 386, 385, 387, 388, 125, 389,   4,   4, 390, 125, 125, 125, 125,\n+   391, 392, 392, 393, 394, 395, 396, 396, 397, 398, 399, 125, 125, 125, 400, 401,\n+   402, 403, 404, 405, 125, 125, 125, 125, 406, 406, 407, 408, 407, 409, 407, 407,\n+   410, 411, 412, 413, 414, 414, 415, 415, 416, 416, 125, 125, 417, 417, 418, 419,\n+   420, 420, 420, 421, 422, 423, 424, 425, 426, 427, 428, 125, 125, 125, 125, 125,\n+   429, 429, 429, 429, 430, 125, 125, 125, 431, 431, 431, 432, 431, 431, 431, 433,\n+   434, 434, 435, 436, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125,  27,  45,\n+   437, 437, 438, 439, 125, 125, 125, 440, 441, 441, 442, 443, 443, 444, 125, 445,\n+   446, 125, 125, 447, 448, 125, 449, 450, 451, 451, 451, 451, 452, 453, 451, 454,\n+   455, 455, 455, 455, 456, 457, 458, 459, 460, 460, 460, 461, 462, 463, 463, 464,\n+   465, 465, 465, 465, 465, 465, 466, 467, 468, 469, 468, 468, 470, 125, 125, 125,\n+   471, 472, 473, 474, 474, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484,\n+   485, 485, 485, 485, 485, 486, 487, 125, 488, 488, 488, 488, 489, 490, 125, 125,\n+   491, 491, 491, 492, 491, 493, 125, 125, 494, 494, 494, 494, 495, 496, 497, 125,\n+   498, 498, 498, 499, 499, 125, 125, 125, 500, 501, 502, 500, 503, 125, 125, 125,\n+   504, 504, 504, 505, 125, 125, 125, 125, 125, 125, 506, 506, 506, 506, 506, 507,\n+   508, 509, 510, 511, 512, 513, 125, 125, 125, 125, 514, 515, 515, 514, 516, 125,\n+   517, 517, 517, 517, 518, 519, 519, 519, 519, 519, 520, 154, 521, 521, 521, 522,\n+   523, 125, 125, 125, 125, 125, 125, 125, 524, 525, 525, 526, 527, 525, 528, 529,\n+   529, 530, 531, 532, 125, 125, 125, 125, 533, 534, 534, 535, 536, 537, 538, 539,\n+   540, 541, 542, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 543, 544,\n+   545, 546, 545, 547, 545, 548, 125, 125, 125, 125, 125, 549, 550, 550, 550, 551,\n+   552, 552, 552, 552, 552, 552, 552, 552, 552, 553, 125, 125, 125, 125, 125, 125,\n+   552, 552, 552, 552, 552, 552, 554, 555, 552, 552, 552, 552, 556, 125, 125, 125,\n+   125, 557, 557, 557, 557, 557, 557, 558, 559, 559, 559, 559, 559, 559, 559, 559,\n+   559, 559, 559, 559, 559, 560, 125, 125, 561, 561, 561, 561, 561, 561, 561, 561,\n+   561, 561, 561, 561, 562, 125, 125, 125, 275, 275, 275, 275, 275, 275, 275, 275,\n+   275, 275, 275, 563, 564, 565, 566, 567, 567, 567, 567, 568, 569, 570, 571, 572,\n+   573, 573, 573, 573, 574, 575, 576, 577, 573, 125, 125, 125, 125, 125, 125, 125,\n+   125, 125, 125, 125, 578, 578, 578, 578, 578, 579, 125, 125, 125, 125, 125, 125,\n+   580, 580, 580, 580, 581, 580, 580, 580, 582, 580, 125, 125, 125, 125, 583, 584,\n+   585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 586,\n+   587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 588, 125, 125,\n+   589, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 590,\n+   591, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256,\n+   256, 256, 592, 593, 125, 594, 595, 596, 596, 596, 596, 596, 596, 596, 596, 596,\n+   596, 596, 596, 596, 596, 596, 596, 597, 598, 598, 598, 598, 598, 598, 599, 600,\n+   601, 602, 603, 125, 125, 125, 125, 125,   8,   8, 604,   8, 605,   0,   0,   0,\n+     0,   0,   0,   0, 603, 125, 125, 125,   0,   0,   0,   0,   0,   0,   0, 606,\n+     0,   0, 607,   0,   0,   0, 608, 609, 610,   0, 611,   0,   0,   0, 235, 125,\n+    11,  11,  11,  11, 612, 125, 125, 125, 125, 125, 125, 125,   0, 603,   0, 603,\n+     0,   0,   0,   0,   0, 234,   0, 613,   0,   0,   0,   0,   0, 224,   0,   0,\n+     0, 614, 615, 616, 617,   0,   0,   0, 618, 619,   0, 620, 621, 622,   0,   0,\n+     0,   0, 623,   0,   0,   0,   0,   0,   0,   0,   0,   0, 624,   0,   0,   0,\n+   625, 625, 625, 625, 625, 625, 625, 625, 626, 627, 628, 125, 125, 125, 125, 125,\n+     4, 629, 630, 125, 125, 125, 125, 125, 631, 632, 633,  14,  14,  14, 634, 125,\n+   635, 125, 125, 125, 125, 125, 125, 125, 636, 636, 637, 638, 639, 125, 125, 125,\n+   125, 640, 641, 125, 642, 642, 642, 643, 125, 125, 125, 125, 125, 644, 644, 645,\n+   125, 125, 125, 125, 125, 125, 646, 647, 648, 648, 648, 648, 648, 648, 648, 648,\n+   648, 648, 648, 648, 649, 650, 125, 125, 651, 651, 651, 651, 652, 653, 125, 125,\n+   125, 125, 125, 125, 125, 125, 125, 333,   0,   0,   0, 654, 125, 125, 125, 125,\n+   333,   0,   0, 247, 125, 125, 125, 125, 655,  27, 656, 657, 658, 659, 660, 661,\n+   662, 663, 664, 663, 125, 125, 125, 665,   0,   0, 357,   0,   0,   0,   0,   0,\n+     0, 603, 226, 333, 333, 333,   0, 606,   0,   0, 247, 125, 125, 125, 666,   0,\n+   667,   0,   0, 357, 613, 668, 606, 125,   0,   0,   0,   0,   0, 669, 349, 349,\n+     0,   0,   0,   0,   0,   0,   0, 670,   0,   0,   0,   0,   0, 284, 357, 228,\n+   357,   0,   0,   0, 671, 284,   0,   0, 671,   0, 247, 668, 125, 125, 125, 125,\n+     0,   0,   0,   0,   0, 603, 247, 349, 613,   0,   0, 672, 673, 357, 613, 613,\n+     0, 329,   0,   0, 235, 125, 125, 284, 248, 248, 248, 248, 248, 248, 125, 125,\n+   248, 248, 248, 318, 248, 248, 248, 248, 248, 317, 248, 248, 248, 248, 248, 248,\n+   248, 248, 584, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 674, 248,\n+   248, 248, 248, 248, 248, 317, 125, 125, 248, 317, 125, 125, 125, 125, 125, 125,\n+   248, 248, 248, 248, 675, 248, 248, 248, 248, 248, 248, 125, 125, 125, 125, 125,\n+   676, 125,   0,   0,   0,   0,   0,   0,   8,   8,   8,   8,   8,   8,   8,   8,\n@@ -4074,27 +4077,27 @@\n-   247,  12,  12,  12, 247, 249,  12,  12,   0,   0,   0,  12,   0, 250,   0,   0,\n-   251, 247, 252, 253,   0,   0, 247,   0, 254, 255, 255, 255, 255, 255, 255, 255,\n-   255, 256, 257, 258, 259, 260, 260, 260, 260, 260, 260, 260, 260, 260, 261, 259,\n-    12, 262, 263, 263, 263, 263, 263, 263, 264, 150, 150, 150, 150, 150, 150, 265,\n-     0,  12,  12,  12, 150, 150, 150, 266, 260, 260, 260, 261, 260, 260,   0,   0,\n-   267, 267, 267, 267, 267, 267, 267, 268, 267, 269,  12,  12, 270, 270, 270, 270,\n-   271, 271, 271, 271, 271, 271, 271,  12, 272, 272, 272, 272, 272, 272,  12,  12,\n-   237,   2,   2,   2,   2,   2, 231,   2,   2,   2, 273,  12, 274, 275, 276,  12,\n-   277,   2,   2,   2, 278, 278, 278, 278, 278, 278, 278, 279,   0,   0, 246,  12,\n-   280, 280, 280, 280, 280, 280,  12,  12, 281, 281, 281, 281, 281, 282,  12, 283,\n-   281, 281, 282,  12, 284, 284, 284, 284, 284, 284, 284, 285, 286, 286, 286, 286,\n-   286,  12,  12, 287, 150, 150, 150, 288, 289, 289, 289, 289, 289, 289, 289, 290,\n-   289, 289, 291, 292, 145, 145, 145, 293, 294, 294, 294, 294, 294, 295,  12,  12,\n-   294, 294, 294, 296, 294, 294, 296, 294, 297, 297, 297, 297, 298,  12,  12,  12,\n-    12,  12, 299, 297, 300, 300, 300, 300, 300, 301,  12,  12, 155, 154, 155, 154,\n-   155, 154,  12,  12,   2,   2,   3,   2,   2, 302, 303,  12, 300, 300, 300, 304,\n-   300, 300, 304,  12, 150,  12,  12,  12, 150, 265, 305, 150, 150, 150, 150,  12,\n-   247, 247, 247, 249, 247, 247, 249,  12,   2, 273,  12,  12, 306,  22,  12,  24,\n-    25,  26,  25, 307, 308, 309,  25,  25,  50,  12,  12,  12, 310,  29,  29,  29,\n-    29,  29,  29, 311, 312,  29,  29,  29,  29,  29,  12, 310,   7,   7,   7, 313,\n-   232,   0,   0,   0,   0, 232,   0,  12,  29, 314,  29,  29,  29,  29,  29, 315,\n-   316,   0,   0,   0,   0, 317, 260, 260, 260, 260, 260, 318, 319, 150, 319, 150,\n-   319, 150, 319, 288,   0, 232,   0, 232,  12,  12, 316, 246, 320, 320, 320, 321,\n-   320, 320, 320, 320, 320, 322, 320, 320, 320, 320, 322, 323, 320, 320, 320, 324,\n-   320, 320, 322,  12, 232, 131,   0,   0,   0, 131,   0,   0,   8,   8,   8,  14,\n-     0,   0,   0, 234, 325,  12,  12,  12,   0,   0,   0, 326, 327, 327, 327, 327,\n-   327, 327, 327, 328, 329, 329, 329, 329, 330,  12,  12,  12, 215,   0,   0,   0,\n+   247,  12,  12,  12, 247, 249,  12,  12,   0, 250,   0,   0, 251, 247, 252, 253,\n+     0,   0, 247,   0, 254, 255, 255, 255, 255, 255, 255, 255, 255, 256, 257, 258,\n+   259, 260, 260, 260, 260, 260, 260, 260, 260, 260, 261, 259,  12, 262, 263, 263,\n+   263, 263, 263, 263, 264, 150, 150, 150, 150, 150, 150, 265,   0,  12,  12, 131,\n+   150, 150, 150, 266, 260, 260, 260, 261, 260, 260,   0,   0, 267, 267, 267, 267,\n+   267, 267, 267, 268, 267, 269,  12,  12, 270, 270, 270, 270, 271, 271, 271, 271,\n+   271, 271, 271,  12, 272, 272, 272, 272, 272, 272,  12,  12, 237,   2,   2,   2,\n+     2,   2, 231,   2,   2,   2, 273,  12, 274, 275, 276,  12, 277,   2,   2,   2,\n+   278, 278, 278, 278, 278, 278, 278, 279,   0,   0, 246,  12, 280, 280, 280, 280,\n+   280, 280,  12,  12, 281, 281, 281, 281, 281, 282,  12, 283, 281, 281, 282,  12,\n+   284, 284, 284, 284, 284, 284, 284, 285, 286, 286, 286, 286, 286,  12,  12, 287,\n+   150, 150, 150, 288, 289, 289, 289, 289, 289, 289, 289, 290, 289, 289, 291, 292,\n+   145, 145, 145, 293, 294, 294, 294, 294, 294, 295,  12,  12, 294, 294, 294, 296,\n+   294, 294, 296, 294, 297, 297, 297, 297, 298,  12,  12,  12,  12,  12, 299, 297,\n+   300, 300, 300, 300, 300, 301,  12,  12, 155, 154, 155, 154, 155, 154,  12,  12,\n+     2,   2,   3,   2,   2, 302, 303,  12, 300, 300, 300, 304, 300, 300, 304,  12,\n+   150,  12,  12,  12, 150, 265, 305, 150, 150, 150, 150,  12, 247, 247, 247, 249,\n+   247, 247, 249,  12,   2, 273,  12,  12, 306,  22,  12,  24,  25,  26,  25, 307,\n+   308, 309,  25,  25,  50,  12,  12,  12, 310,  29,  29,  29,  29,  29,  29, 311,\n+   312,  29,  29,  29,  29,  29,  12, 310,   7,   7,   7, 313, 232,   0,   0,   0,\n+     0, 232,   0,  12,  29, 314,  29,  29,  29,  29,  29, 315, 316,   0,   0,   0,\n+     0, 317, 260, 260, 260, 260, 260, 318, 319, 150, 319, 150, 319, 150, 319, 288,\n+     0, 232,   0, 232,  12,  12, 316, 246, 320, 320, 320, 321, 320, 320, 320, 320,\n+   320, 322, 320, 320, 320, 320, 322, 323, 320, 320, 320, 324, 320, 320, 322,  12,\n+   232, 131,   0,   0,   0, 131,   0,   0,   8,   8,   8,  14,   0,   0,   0, 234,\n+   325,  12,  12,  12,   0,   0,   0, 326, 327, 327, 327, 327, 327, 327, 327, 328,\n+   329, 329, 329, 329, 330,  12,  12,  12, 215,   0,   0,   0,   0,   0,   0,  12,\n@@ -4162,45 +4165,33 @@\n-   563, 563, 566, 563,   7,   7,   7, 567,   7, 199,  12,  12,   0, 246,  12,  12,\n-     0, 232, 316,   0,   0, 568, 228,   0,   0,   0, 568,   7, 213, 569,   7,   0,\n-     0,   0, 570, 228,   8, 225,  12,  12,   0,   0, 234,  12,   0,   0,   0, 229,\n-   571, 572, 316, 229,   0,   0, 240, 316,   0, 316,   0,   0,   0, 240, 232, 316,\n-     0, 229,   0, 229,   0,   0, 240, 232,   0, 573, 239,   0, 229,   0,   0,   0,\n-     0, 246,   0,   0,   0,   0,   0, 239, 574, 574, 574, 574, 574, 574, 574,  12,\n-    12,  12, 575, 574, 576, 574, 574, 574,   2,   2,   2, 273,  12, 275, 273,  12,\n-   241, 577, 241, 241, 241, 241, 578, 241, 579, 580, 577,  12,  19,  19,  19, 581,\n-    12,  12,  12, 582, 583, 583, 583, 583, 583, 583, 583, 584, 583, 583, 583, 585,\n-   583, 583, 585, 586, 587, 587, 587, 587, 587, 587, 587, 588, 589, 589, 589, 589,\n-   589, 589, 590, 591, 592, 592, 592, 592, 592, 592, 593,  12, 151, 154, 151, 594,\n-   151, 151, 151, 154, 595, 595, 595, 595, 595, 596, 595, 595, 595, 597,  12,  12,\n-   598, 598, 598, 598, 598, 598, 598,  12, 598, 598, 599, 600,   0, 234,  12,  12,\n-    29, 414,  29,  29, 601, 602, 414,  29,  50,  29, 603,  12, 604, 310, 603, 414,\n-   601, 602, 603, 603, 601, 602,  50,  29,  50,  29, 414, 605,  29,  29, 606,  29,\n-    29,  29,  29,  12, 414, 414, 606,  29,  51,  12,  12,  12,  12, 239,   0,   0,\n-   607,  12,  12,  12, 246,  12,  12,  12,   0,   0,  12,   0,   0, 232, 131,   0,\n-     0,   0,  12,  12,   0,   0,   0, 240,   0, 246,  12, 239, 608,  12,  12,  12,\n-   247, 247, 609,  12, 610,  12,  12,  12,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0, 939, 940, 941, 942, 946, 948,   0, 962,\n-   969, 970, 971, 976,1001,1002,1003,1008,   0,1033,1040,1041,1042,1043,1047,   0,\n-     0,1080,1081,1082,1086,1110,   0,   0,1124,1125,1126,1127,1131,1133,   0,1147,\n-  1154,1155,1156,1161,1187,1188,1189,1193,   0,1219,1226,1227,1228,1229,1233,   0,\n-     0,1267,1268,1269,1273,1298,   0,1303, 943,1128, 944,1129, 954,1139, 958,1143,\n-   959,1144, 960,1145, 961,1146, 964,1149,   0,   0, 973,1158, 974,1159, 975,1160,\n-   983,1168, 978,1163, 988,1173, 990,1175, 991,1176, 993,1178, 994,1179,   0,   0,\n-  1004,1190,1005,1191,1006,1192,1014,1199,1007,   0,   0,   0,1016,1201,1020,1206,\n-     0,1022,1208,1025,1211,1023,1209,   0,   0,   0,   0,1032,1218,1037,1223,1035,\n-  1221,   0,   0,   0,1044,1230,1045,1231,1049,1235,   0,   0,1058,1244,1064,1250,\n-  1060,1246,1066,1252,1067,1253,1072,1258,1069,1255,1077,1264,1074,1261,   0,   0,\n-  1083,1270,1084,1271,1085,1272,1088,1275,1089,1276,1096,1283,1103,1290,1111,1299,\n-  1115,1118,1307,1120,1309,1121,1310,   0,1053,1239,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,1093,1280,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0, 949,1134,1010,1195,1050,1236,1090,1277,1341,1368,1340,\n-  1367,1342,1369,1339,1366,   0,1320,1347,1418,1419,1323,1350,   0,   0, 992,1177,\n-  1018,1204,1055,1241,1416,1417,1415,1424,1202,   0,   0,   0, 987,1172,   0,   0,\n-  1031,1217,1321,1348,1322,1349,1338,1365, 950,1135, 951,1136, 979,1164, 980,1165,\n-  1011,1196,1012,1197,1051,1237,1052,1238,1061,1247,1062,1248,1091,1278,1092,1279,\n-  1071,1257,1076,1263,   0,   0, 997,1182,   0,   0,   0,   0,   0,   0, 945,1130,\n-   982,1167,1337,1364,1335,1362,1046,1232,1422,1423,1113,1301,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   8,   9,   0,  10,1425,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,1314,1427,   5,\n-  1434,1438,1443,   0,1450,   0,1455,1461,1514,   0,   0,   0,   0,   0,   0,   0,\n+   563, 563, 566, 563,   0,  12,  12,  12,   7,   7,   7, 567,   7, 199,  12,  12,\n+     0, 246,  12,  12,   0, 232, 316,   0,   0, 568, 228,   0,   0,   0, 568,   7,\n+   213, 569,   7,   0,   0,   0, 570, 228,   8, 225,  12,  12,   0,   0, 234,  12,\n+     0,   0,   0, 229, 571, 572, 316, 229,   0,   0, 240, 316,   0, 316,   0,   0,\n+     0, 240, 232, 316,   0, 229,   0, 229,   0,   0, 240, 232,   0, 573, 239,   0,\n+   229,   0,   0,   0,   0, 246,   0,   0,   0,   0,   0, 239, 574, 574, 574, 574,\n+   574, 574, 574,  12,  12,  12, 575, 574, 576, 574, 574, 574,   2,   2,   2, 273,\n+    12, 275, 273,  12, 241, 577, 241, 241, 241, 241, 578, 241, 579, 580, 577,  12,\n+    19,  19,  19, 581,  12,  12,  12, 582, 583, 583, 583, 583, 583, 583, 583, 584,\n+   583, 583, 583, 585, 583, 583, 585, 586, 587, 587, 587, 587, 587, 587, 587, 588,\n+   589, 589, 589, 589, 589, 589, 590, 591, 592, 592, 592, 592, 592, 592, 593,  12,\n+   151, 154, 151, 594, 151, 151, 151, 154, 595, 595, 595, 595, 595, 596, 595, 595,\n+   595, 597,  12,  12, 598, 598, 598, 598, 598, 598, 598,  12, 598, 598, 599, 600,\n+     0, 234,  12,  12,  29, 414,  29,  29, 601, 602, 414,  29,  50,  29, 603,  12,\n+   604, 310, 603, 414, 601, 602, 603, 603, 601, 602,  50,  29,  50,  29, 414, 605,\n+    29,  29, 606,  29,  29,  29,  29,  12, 414, 414, 606,  29,  51,  12,  12,  12,\n+    12, 239,   0,   0, 607,  12,  12,  12, 246,  12,  12,  12,   0,   0,  12,   0,\n+     0, 232, 131,   0,   0,   0,  12,  12,   0,   0,   0, 240,   0, 246,  12, 239,\n+   608,  12,  12,  12, 247, 247, 609,  12, 610,  12,  12,  12,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 939, 940, 941, 942,\n+   946, 948,   0, 962, 969, 970, 971, 976,1001,1002,1003,1008,   0,1033,1040,1041,\n+  1042,1043,1047,   0,   0,1080,1081,1082,1086,1110,   0,   0,1124,1125,1126,1127,\n+  1131,1133,   0,1147,1154,1155,1156,1161,1187,1188,1189,1193,   0,1219,1226,1227,\n+  1228,1229,1233,   0,   0,1267,1268,1269,1273,1298,   0,1303, 943,1128, 944,1129,\n+   954,1139, 958,1143, 959,1144, 960,1145, 961,1146, 964,1149,   0,   0, 973,1158,\n+   974,1159, 975,1160, 983,1168, 978,1163, 988,1173, 990,1175, 991,1176, 993,1178,\n+   994,1179,   0,   0,1004,1190,1005,1191,1006,1192,1014,1199,1007,   0,   0,   0,\n+  1016,1201,1020,1206,   0,1022,1208,1025,1211,1023,1209,   0,   0,   0,   0,1032,\n+  1218,1037,1223,1035,1221,   0,   0,   0,1044,1230,1045,1231,1049,1235,   0,   0,\n+  1058,1244,1064,1250,1060,1246,1066,1252,1067,1253,1072,1258,1069,1255,1077,1264,\n+  1074,1261,   0,   0,1083,1270,1084,1271,1085,1272,1088,1275,1089,1276,1096,1283,\n+  1103,1290,1111,1299,1115,1118,1307,1120,1309,1121,1310,   0,1053,1239,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1093,1280,   0,   0,   0,\n@@ -4208,1 +4199,11 @@\n-     0,   0,1446,1458,1468,1476,1480,1486,1517,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0, 949,1134,1010,1195,1050,1236,1090,\n+  1277,1341,1368,1340,1367,1342,1369,1339,1366,   0,1320,1347,1418,1419,1323,1350,\n+     0,   0, 992,1177,1018,1204,1055,1241,1416,1417,1415,1424,1202,   0,   0,   0,\n+   987,1172,   0,   0,1031,1217,1321,1348,1322,1349,1338,1365, 950,1135, 951,1136,\n+   979,1164, 980,1165,1011,1196,1012,1197,1051,1237,1052,1238,1061,1247,1062,1248,\n+  1091,1278,1092,1279,1071,1257,1076,1263,   0,   0, 997,1182,   0,   0,   0,   0,\n+     0,   0, 945,1130, 982,1167,1337,1364,1335,1362,1046,1232,1422,1423,1113,1301,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   9,   0,  10,\n+  1425,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,\n+     0,1314,1427,   5,1434,1438,1443,   0,1450,   0,1455,1461,1514,   0,   0,   0,\n@@ -4210,13 +4211,1 @@\n-     0,   0,1489,1503,1494,1500,1508,   0,   0,   0,   0,1520,1521,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,1526,1528,   0,1525,   0,   0,   0,1522,\n-     0,   0,   0,   0,1536,1532,1539,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,1534,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,1556,   0,   0,   0,   0,   0,   0,1548,1550,   0,1547,   0,   0,   0,1567,\n-     0,   0,   0,   0,1558,1554,1561,   0,   0,   0,   0,   0,   0,   0,1568,1569,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,1529,1551,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,1523,1545,1524,1546,   0,   0,1527,1549,\n-     0,   0,1570,1571,1530,1552,1531,1553,   0,   0,1533,1555,1535,1557,1537,1559,\n-     0,   0,1572,1573,1544,1566,1538,1560,1540,1562,1541,1563,1542,1564,   0,   0,\n-  1543,1565,   0,   0,   0,   0,   0,   0,   0,   0,1606,1607,1609,1608,1610,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,1613,   0,1611,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1612,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,1446,1458,1468,1476,1480,1486,1517,   0,   0,   0,\n@@ -4224,5 +4213,13 @@\n-     0,1620,   0,   0,   0,   0,   0,   0,   0,1623,   0,   0,1624,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-  1614,1615,1616,1617,1618,1619,1621,1622,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,1628,1629,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,1625,1626,   0,1627,   0,   0,   0,1634,   0,   0,1635,   0,\n+     0,   0,   0,   0,   0,   0,1489,1503,1494,1500,1508,   0,   0,   0,   0,1520,\n+  1521,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1526,1528,   0,1525,\n+     0,   0,   0,1522,   0,   0,   0,   0,1536,1532,1539,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,1534,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,1556,   0,   0,   0,   0,   0,   0,1548,1550,   0,1547,\n+     0,   0,   0,1567,   0,   0,   0,   0,1558,1554,1561,   0,   0,   0,   0,   0,\n+     0,   0,1568,1569,   0,   0,   0,   0,   0,   0,   0,   0,   0,1529,1551,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1523,1545,1524,1546,\n+     0,   0,1527,1549,   0,   0,1570,1571,1530,1552,1531,1553,   0,   0,1533,1555,\n+  1535,1557,1537,1559,   0,   0,1572,1573,1544,1566,1538,1560,1540,1562,1541,1563,\n+  1542,1564,   0,   0,1543,1565,   0,   0,   0,   0,   0,   0,   0,   0,1606,1607,\n+  1609,1608,1610,   0,   0,   0,   0,   0,   0,   0,   0,   0,1613,   0,1611,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1612,\n@@ -4230,3 +4227,25 @@\n-     0,1630,1631,1632,   0,   0,1633,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-  1639,   0,   0,1638,1640,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,1636,1637,   0,   0,   0,   0,   0,   0,1641,   0,   0,   0,\n+     0,   0,   0,   0,   0,1620,   0,   0,   0,   0,   0,   0,   0,1623,   0,   0,\n+  1624,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,1614,1615,1616,1617,1618,1619,1621,1622,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,1628,1629,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,1625,1626,   0,1627,   0,   0,   0,1634,\n+     0,   0,1635,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,1630,1631,1632,   0,   0,1633,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,1639,   0,   0,1638,1640,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,1636,1637,   0,   0,   0,   0,   0,   0,\n+  1641,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,1642,1644,1643,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,1645,   0,   0,   0,   0,   0,   0,   0,1646,   0,   0,   0,\n+     0,   0,   0,1648,1649,   0,1647,1650,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,1651,1653,1652,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,1654,   0,1655,1657,1656,   0,   0,   0,   0,1659,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,1660,   0,   0,   0,   0,1661,   0,\n+     0,   0,   0,1662,   0,   0,   0,   0,1663,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,1658,   0,   0,   0,   0,   0,   0,   0,   0,   0,1664,\n+     0,1665,1673,   0,1674,   0,   0,   0,   0,   0,   0,   0,   0,1666,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1668,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,1669,   0,   0,   0,   0,1670,   0,\n+     0,   0,   0,1671,   0,   0,   0,   0,1672,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,1667,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,1675,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,1676,   0,1677,   0,1678,   0,1679,   0,1680,   0,   0,   0,1681,   0,\n@@ -4234,15 +4253,34 @@\n-     0,   0,1642,1644,1643,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-  1645,   0,   0,   0,   0,   0,   0,   0,1646,   0,   0,   0,   0,   0,   0,1648,\n-  1649,   0,1647,1650,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,1651,1653,1652,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,1654,   0,1655,1657,1656,   0,   0,   0,   0,1659,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,1660,   0,   0,   0,   0,1661,   0,   0,   0,   0,1662,\n-     0,   0,   0,   0,1663,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,1658,   0,   0,   0,   0,   0,   0,   0,   0,   0,1664,   0,1665,1673,   0,\n-  1674,   0,   0,   0,   0,   0,   0,   0,   0,1666,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1668,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,1669,   0,   0,   0,   0,1670,   0,   0,   0,   0,1671,\n-     0,   0,   0,   0,1672,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,1667,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1675,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1676,   0,\n-  1677,   0,1678,   0,1679,   0,1680,   0,   0,   0,1681,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,1682,   0,1683,   0,   0,1684,1685,   0,1686,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 953,1138, 955,1140,\n+   956,1141, 957,1142,1324,1351, 963,1148, 965,1150, 968,1153, 966,1151, 967,1152,\n+  1378,1380,1379,1381, 984,1169, 985,1170,1420,1421, 986,1171, 989,1174, 995,1180,\n+   998,1183, 996,1181, 999,1184,1000,1185,1015,1200,1329,1356,1017,1203,1019,1205,\n+  1021,1207,1024,1210,1687,1688,1027,1213,1026,1212,1028,1214,1029,1215,1030,1216,\n+  1034,1220,1036,1222,1039,1225,1038,1224,1334,1361,1336,1363,1382,1384,1383,1385,\n+  1056,1242,1057,1243,1059,1245,1063,1249,1689,1690,1065,1251,1068,1254,1070,1256,\n+  1386,1387,1388,1389,1691,1692,1073,1259,1075,1262,1079,1266,1078,1265,1095,1282,\n+  1098,1285,1097,1284,1390,1391,1392,1393,1099,1286,1100,1287,1101,1288,1102,1289,\n+  1105,1292,1104,1291,1106,1294,1107,1295,1108,1296,1114,1302,1119,1308,1122,1311,\n+  1123,1312,1186,1260,1293,1305,   0,1394,   0,   0,   0,   0, 952,1137, 947,1132,\n+  1317,1344,1316,1343,1319,1346,1318,1345,1693,1695,1371,1375,1370,1374,1373,1377,\n+  1372,1376,1694,1696, 981,1166, 977,1162, 972,1157,1326,1353,1325,1352,1328,1355,\n+  1327,1354,1697,1698,1009,1194,1013,1198,1054,1240,1048,1234,1331,1358,1330,1357,\n+  1333,1360,1332,1359,1699,1700,1396,1401,1395,1400,1398,1403,1397,1402,1399,1404,\n+  1094,1281,1087,1274,1406,1411,1405,1410,1408,1413,1407,1412,1409,1414,1109,1297,\n+  1117,1306,1116,1304,1112,1300,   0,   0,   0,   0,   0,   0,1471,1472,1701,1705,\n+  1702,1706,1703,1707,1430,1431,1715,1719,1716,1720,1717,1721,1477,1478,1729,1731,\n+  1730,1732,   0,   0,1435,1436,1733,1735,1734,1736,   0,   0,1481,1482,1737,1741,\n+  1738,1742,1739,1743,1439,1440,1751,1755,1752,1756,1753,1757,1490,1491,1765,1768,\n+  1766,1769,1767,1770,1447,1448,1771,1774,1772,1775,1773,1776,1495,1496,1777,1779,\n+  1778,1780,   0,   0,1451,1452,1781,1783,1782,1784,   0,   0,1504,1505,1785,1788,\n+  1786,1789,1787,1790,   0,1459,   0,1791,   0,1792,   0,1793,1509,1510,1794,1798,\n+  1795,1799,1796,1800,1462,1463,1808,1812,1809,1813,1810,1814,1467,  21,1475,  22,\n+  1479,  23,1485,  24,1493,  27,1499,  28,1507,  29,   0,   0,1704,1708,1709,1710,\n+  1711,1712,1713,1714,1718,1722,1723,1724,1725,1726,1727,1728,1740,1744,1745,1746,\n+  1747,1748,1749,1750,1754,1758,1759,1760,1761,1762,1763,1764,1797,1801,1802,1803,\n+  1804,1805,1806,1807,1811,1815,1816,1817,1818,1819,1820,1821,1470,1469,1822,1474,\n+  1465,   0,1473,1825,1429,1428,1426,  12,1432,   0,  26,   0,   0,1315,1823,1484,\n+  1466,   0,1483,1829,1433,  13,1437,  14,1441,1826,1827,1828,1488,1487,1513,  19,\n+     0,   0,1492,1515,1445,1444,1442,  15,   0,1831,1832,1833,1502,1501,1516,  25,\n+  1497,1498,1506,1518,1457,1456,1454,  17,1453,1313,  11,   3,   0,   0,1824,1512,\n+  1519,   0,1511,1830,1449,  16,1460,  18,1464,   4,   0,   0,  30,  31,   0,   0,\n@@ -4250,138 +4288,103 @@\n-     0,   0,   0,1682,   0,1683,   0,   0,1684,1685,   0,1686,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0, 953,1138, 955,1140, 956,1141, 957,1142,\n-  1324,1351, 963,1148, 965,1150, 968,1153, 966,1151, 967,1152,1378,1380,1379,1381,\n-   984,1169, 985,1170,1420,1421, 986,1171, 989,1174, 995,1180, 998,1183, 996,1181,\n-   999,1184,1000,1185,1015,1200,1329,1356,1017,1203,1019,1205,1021,1207,1024,1210,\n-  1687,1688,1027,1213,1026,1212,1028,1214,1029,1215,1030,1216,1034,1220,1036,1222,\n-  1039,1225,1038,1224,1334,1361,1336,1363,1382,1384,1383,1385,1056,1242,1057,1243,\n-  1059,1245,1063,1249,1689,1690,1065,1251,1068,1254,1070,1256,1386,1387,1388,1389,\n-  1691,1692,1073,1259,1075,1262,1079,1266,1078,1265,1095,1282,1098,1285,1097,1284,\n-  1390,1391,1392,1393,1099,1286,1100,1287,1101,1288,1102,1289,1105,1292,1104,1291,\n-  1106,1294,1107,1295,1108,1296,1114,1302,1119,1308,1122,1311,1123,1312,1186,1260,\n-  1293,1305,   0,1394,   0,   0,   0,   0, 952,1137, 947,1132,1317,1344,1316,1343,\n-  1319,1346,1318,1345,1693,1695,1371,1375,1370,1374,1373,1377,1372,1376,1694,1696,\n-   981,1166, 977,1162, 972,1157,1326,1353,1325,1352,1328,1355,1327,1354,1697,1698,\n-  1009,1194,1013,1198,1054,1240,1048,1234,1331,1358,1330,1357,1333,1360,1332,1359,\n-  1699,1700,1396,1401,1395,1400,1398,1403,1397,1402,1399,1404,1094,1281,1087,1274,\n-  1406,1411,1405,1410,1408,1413,1407,1412,1409,1414,1109,1297,1117,1306,1116,1304,\n-  1112,1300,   0,   0,   0,   0,   0,   0,1471,1472,1701,1705,1702,1706,1703,1707,\n-  1430,1431,1715,1719,1716,1720,1717,1721,1477,1478,1729,1731,1730,1732,   0,   0,\n-  1435,1436,1733,1735,1734,1736,   0,   0,1481,1482,1737,1741,1738,1742,1739,1743,\n-  1439,1440,1751,1755,1752,1756,1753,1757,1490,1491,1765,1768,1766,1769,1767,1770,\n-  1447,1448,1771,1774,1772,1775,1773,1776,1495,1496,1777,1779,1778,1780,   0,   0,\n-  1451,1452,1781,1783,1782,1784,   0,   0,1504,1505,1785,1788,1786,1789,1787,1790,\n-     0,1459,   0,1791,   0,1792,   0,1793,1509,1510,1794,1798,1795,1799,1796,1800,\n-  1462,1463,1808,1812,1809,1813,1810,1814,1467,  21,1475,  22,1479,  23,1485,  24,\n-  1493,  27,1499,  28,1507,  29,   0,   0,1704,1708,1709,1710,1711,1712,1713,1714,\n-  1718,1722,1723,1724,1725,1726,1727,1728,1740,1744,1745,1746,1747,1748,1749,1750,\n-  1754,1758,1759,1760,1761,1762,1763,1764,1797,1801,1802,1803,1804,1805,1806,1807,\n-  1811,1815,1816,1817,1818,1819,1820,1821,1470,1469,1822,1474,1465,   0,1473,1825,\n-  1429,1428,1426,  12,1432,   0,  26,   0,   0,1315,1823,1484,1466,   0,1483,1829,\n-  1433,  13,1437,  14,1441,1826,1827,1828,1488,1487,1513,  19,   0,   0,1492,1515,\n-  1445,1444,1442,  15,   0,1831,1832,1833,1502,1501,1516,  25,1497,1498,1506,1518,\n-  1457,1456,1454,  17,1453,1313,  11,   3,   0,   0,1824,1512,1519,   0,1511,1830,\n-  1449,  16,1460,  18,1464,   4,   0,   0,  30,  31,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  20,   0,\n-     0,   0,   2,   6,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,1834,1835,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,1836,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,1837,1839,1838,   0,   0,   0,   0,1840,   0,   0,   0,\n-     0,1841,   0,   0,1842,   0,   0,   0,   0,   0,   0,   0,1843,   0,1844,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,1845,   0,   0,1846,   0,   0,1847,\n-     0,1848,   0,   0,   0,   0,   0,   0, 937,   0,1850,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,1849, 936, 938,1851,1852,   0,   0,1853,1854,   0,   0,\n-  1855,1856,   0,   0,   0,   0,   0,   0,1857,1858,   0,   0,1861,1862,   0,   0,\n-  1863,1864,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,1867,1868,1869,1870,1859,1860,1865,1866,   0,   0,   0,   0,\n-     0,   0,1871,1872,1873,1874,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,  32,  33,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,1875,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,1877,   0,1878,   0,1879,   0,1880,   0,1881,   0,1882,   0,\n-  1883,   0,1884,   0,1885,   0,1886,   0,1887,   0,1888,   0,   0,1889,   0,1890,\n-     0,1891,   0,   0,   0,   0,   0,   0,1892,1893,   0,1894,1895,   0,1896,1897,\n-     0,1898,1899,   0,1900,1901,   0,   0,   0,   0,   0,   0,1876,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,1902,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,1904,   0,1905,   0,1906,   0,1907,   0,1908,   0,1909,   0,\n-  1910,   0,1911,   0,1912,   0,1913,   0,1914,   0,1915,   0,   0,1916,   0,1917,\n-     0,1918,   0,   0,   0,   0,   0,   0,1919,1920,   0,1921,1922,   0,1923,1924,\n-     0,1925,1926,   0,1927,1928,   0,   0,   0,   0,   0,   0,1903,   0,   0,1929,\n-  1930,1931,1932,   0,   0,   0,1933,   0, 710, 385, 724, 715, 455, 103, 186, 825,\n-   825, 242, 751, 205, 241, 336, 524, 601, 663, 676, 688, 738, 411, 434, 474, 500,\n-   649, 746, 799, 108, 180, 416, 482, 662, 810, 275, 462, 658, 692, 344, 618, 679,\n-   293, 388, 440, 492, 740, 116, 146, 168, 368, 414, 481, 527, 606, 660, 665, 722,\n-   781, 803, 809, 538, 553, 588, 642, 758, 811, 701, 233, 299, 573, 612, 487, 540,\n-   714, 779, 232, 267, 412, 445, 457, 585, 594, 766, 167, 613, 149, 148, 560, 589,\n-   648, 768, 708, 345, 411, 704, 105, 259, 313, 496, 518, 174, 542, 120, 307, 101,\n-   430, 372, 584, 183, 228, 529, 650, 697, 424, 732, 428, 349, 632, 355, 517, 110,\n-   135, 147, 403, 580, 624, 700, 750, 170, 193, 245, 297, 374, 463, 543, 763, 801,\n-   812, 815, 162, 384, 420, 730, 287, 330, 337, 366, 459, 476, 509, 558, 591, 610,\n-   726, 652, 734, 759, 154, 163, 198, 473, 683, 697, 292, 311, 353, 423, 572, 494,\n-   113, 217, 259, 280, 314, 499, 506, 603, 608, 752, 778, 782, 788, 117, 557, 748,\n-   774, 320, 109, 126, 260, 265, 373, 411, 479, 523, 655, 737, 823, 380, 765, 161,\n-   395, 398, 438, 451, 502, 516, 537, 583, 791, 136, 340, 769, 122, 273, 446, 727,\n-   305, 322, 400, 496, 771, 155, 190, 269, 377, 391, 406, 432, 501, 519, 599, 684,\n-   687, 749, 776, 175, 452, 191, 480, 510, 659, 772, 805, 813, 397, 444, 619, 566,\n-   568, 575, 491, 471, 707, 111, 636, 156, 153, 288, 346, 578, 256, 435, 383, 729,\n-   680, 767, 694, 295, 128, 210,   0,   0, 227,   0, 379,   0,   0, 150, 493, 525,\n-   544, 551, 552, 556, 783, 576, 604,   0, 661,   0, 703,   0,   0, 735, 743,   0,\n-     0,   0, 793, 794, 795, 808, 741, 773, 118, 127, 130, 166, 169, 177, 207, 213,\n-   215, 226, 229, 268, 270, 317, 327, 329, 335, 369, 375, 381, 404, 441, 448, 458,\n-   477, 484, 503, 539, 545, 547, 546, 548, 549, 550, 554, 555, 561, 564, 569, 591,\n-   593, 595, 598, 607, 620, 625, 625, 651, 690, 695, 705, 706, 716, 717, 733, 735,\n-   777, 786, 790, 315, 869, 623,   0,   0, 102, 145, 134, 115, 129, 138, 165, 171,\n-   207, 202, 206, 212, 227, 231, 240, 243, 250, 254, 294, 296, 303, 308, 319, 325,\n-   321, 329, 326, 335, 341, 357, 360, 362, 370, 379, 388, 389, 393, 421, 424, 438,\n-   456, 454, 458, 465, 477, 535, 485, 490, 493, 507, 512, 514, 521, 522, 525, 526,\n-   528, 533, 532, 541, 565, 569, 574, 586, 591, 597, 607, 637, 647, 674, 691, 693,\n-   695, 698, 703, 699, 705, 704, 702, 706, 709, 717, 728, 736, 747, 754, 770, 777,\n-   783, 784, 786, 787, 790, 802, 825, 848, 847, 857,  55,  65,  66, 883, 892, 916,\n-   822, 824,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,1586,   0,1605,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,1602,1603,1934,1935,1574,1575,1576,1577,1579,1580,1581,1583,1584,   0,\n-  1585,1587,1588,1589,1591,   0,1592,   0,1593,1594,   0,1595,1596,   0,1598,1599,\n-  1600,1601,1604,1582,1578,1590,1597,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,1936,   0,1937,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,1938,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,1939,1940,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,1941,1942,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,1944,1943,   0,1945,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,1946,1947,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-  1948,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,1949,1950,1951,1952,1953,1954,1955,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,1956,1957,1958,1960,1959,1961,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0, 106, 104, 107, 826, 114, 118, 119, 121,\n-   123, 124, 127, 125,  34, 830, 130, 131, 132, 137, 827,  35, 133, 139, 829, 142,\n-   143, 112, 144, 145, 924, 151, 152,  37, 157, 158, 159, 160,  38, 165, 166, 169,\n-   171, 172, 173, 174, 176, 177, 178, 179, 181, 182, 182, 182, 833, 468, 184, 185,\n-   834, 187, 188, 189, 196, 192, 194, 195, 197, 199, 200, 201, 203, 204, 204, 206,\n-   208, 209, 211, 218, 213, 219, 214, 216, 153, 234, 221, 222, 223, 220, 225, 224,\n-   230, 835, 235, 236, 237, 238, 239, 244, 836, 837, 247, 248, 249, 246, 251,  39,\n-    40, 253, 255, 255, 838, 257, 258, 259, 261, 839, 262, 263, 301, 264,  41, 266,\n-   270, 272, 271, 841, 274, 842, 277, 276, 278, 281, 282,  42, 283, 284, 285, 286,\n-    43, 843,  44, 289, 290, 291, 293, 934, 298, 845, 845, 621, 300, 300,  45, 852,\n-   894, 302, 304,  46, 306, 309, 310, 312, 316,  48,  47, 317, 846, 318, 323, 324,\n-   325, 324, 328, 329, 333, 331, 332, 334, 335, 336, 338, 339, 342, 343, 347, 351,\n-   849, 350, 348, 352, 354, 359, 850, 361, 358, 356,  49, 363, 365, 367, 364,  50,\n-   369, 371, 851, 376, 386, 378,  53, 381,  52,  51, 140, 141, 387, 382, 614,  78,\n-   388, 389, 390, 394, 392, 856,  54, 399, 396, 402, 404, 858, 405, 401, 407,  55,\n-   408, 409, 410, 413, 859, 415,  56, 417, 860, 418,  57, 419, 422, 424, 425, 861,\n-   840, 862, 426, 863, 429, 431, 427, 433, 437, 441, 438, 439, 442, 443, 864, 436,\n-   449, 450,  58, 454, 453, 865, 447, 460, 866, 867, 461, 466, 465, 464,  59, 467,\n-   470, 469, 472, 828, 475, 868, 478, 870, 483, 485, 486, 871, 488, 489, 872, 873,\n-   495, 497,  60, 498,  61,  61, 504, 505, 507, 508, 511,  62, 513, 874, 515, 875,\n-   518, 844, 520, 876, 877, 878,  63,  64, 528, 880, 879, 881, 882, 530, 531, 531,\n-   533,  66, 534,  67,  68, 884, 536, 538, 541,  69, 885, 549, 886, 887, 556, 559,\n-    70, 561, 562, 563, 888, 889, 889, 567,  71, 890, 570, 571,  72, 891, 577,  73,\n-   581, 579, 582, 893, 587,  74, 590, 592, 596,  75, 895, 896,  76, 897, 600, 898,\n-   602, 605, 607, 899, 900, 609, 901, 611, 853,  77, 615, 616,  79, 617, 252, 902,\n-   903, 854, 855, 621, 622, 731,  80, 627, 626, 628, 164, 629, 630, 631, 633, 904,\n-   632, 634, 639, 640, 635, 641, 646, 651, 638, 643, 644, 645, 905, 907, 906,  81,\n-   653, 654, 656, 911, 657, 908,  82,  83, 909, 910,  84, 664, 665, 666, 667, 669,\n-   668, 671, 670, 674, 672, 673, 675,  85, 677, 678,  86, 681, 682, 912, 685, 686,\n-    87, 689,  36, 913, 914,  88,  89, 696, 702, 709, 711, 915, 712, 713, 718, 719,\n-   917, 831, 721, 720, 723, 832, 725, 728, 918, 919, 739, 742, 744, 920, 745, 753,\n-   756, 757, 755, 760, 761, 921, 762,  90, 764, 922,  91, 775, 279, 780, 923, 925,\n-    92,  93, 785, 926,  94, 927, 787, 787, 789, 928, 792,  95, 796, 797, 798, 800,\n-    96, 929, 802, 804, 806,  97,  98, 807, 930,  99, 931, 932, 933, 814, 100, 816,\n-   817, 818, 819, 820, 821, 935,   0,   0,\n+     0,   0,  20,   0,   0,   0,   2,   6,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,1834,1835,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1836,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,1837,1839,1838,   0,   0,   0,   0,\n+  1840,   0,   0,   0,   0,1841,   0,   0,1842,   0,   0,   0,   0,   0,   0,   0,\n+  1843,   0,1844,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1845,   0,   0,\n+  1846,   0,   0,1847,   0,1848,   0,   0,   0,   0,   0,   0, 937,   0,1850,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,1849, 936, 938,1851,1852,   0,   0,\n+  1853,1854,   0,   0,1855,1856,   0,   0,   0,   0,   0,   0,1857,1858,   0,   0,\n+  1861,1862,   0,   0,1863,1864,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,1867,1868,1869,1870,1859,1860,1865,1866,\n+     0,   0,   0,   0,   0,   0,1871,1872,1873,1874,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,  32,  33,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,1875,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,1877,   0,1878,   0,1879,   0,1880,   0,\n+  1881,   0,1882,   0,1883,   0,1884,   0,1885,   0,1886,   0,1887,   0,1888,   0,\n+     0,1889,   0,1890,   0,1891,   0,   0,   0,   0,   0,   0,1892,1893,   0,1894,\n+  1895,   0,1896,1897,   0,1898,1899,   0,1900,1901,   0,   0,   0,   0,   0,   0,\n+  1876,   0,   0,   0,   0,   0,   0,   0,   0,   0,1902,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,1904,   0,1905,   0,1906,   0,1907,   0,\n+  1908,   0,1909,   0,1910,   0,1911,   0,1912,   0,1913,   0,1914,   0,1915,   0,\n+     0,1916,   0,1917,   0,1918,   0,   0,   0,   0,   0,   0,1919,1920,   0,1921,\n+  1922,   0,1923,1924,   0,1925,1926,   0,1927,1928,   0,   0,   0,   0,   0,   0,\n+  1903,   0,   0,1929,1930,1931,1932,   0,   0,   0,1933,   0, 710, 385, 724, 715,\n+   455, 103, 186, 825, 825, 242, 751, 205, 241, 336, 524, 601, 663, 676, 688, 738,\n+   411, 434, 474, 500, 649, 746, 799, 108, 180, 416, 482, 662, 810, 275, 462, 658,\n+   692, 344, 618, 679, 293, 388, 440, 492, 740, 116, 146, 168, 368, 414, 481, 527,\n+   606, 660, 665, 722, 781, 803, 809, 538, 553, 588, 642, 758, 811, 701, 233, 299,\n+   573, 612, 487, 540, 714, 779, 232, 267, 412, 445, 457, 585, 594, 766, 167, 613,\n+   149, 148, 560, 589, 648, 768, 708, 345, 411, 704, 105, 259, 313, 496, 518, 174,\n+   542, 120, 307, 101, 430, 372, 584, 183, 228, 529, 650, 697, 424, 732, 428, 349,\n+   632, 355, 517, 110, 135, 147, 403, 580, 624, 700, 750, 170, 193, 245, 297, 374,\n+   463, 543, 763, 801, 812, 815, 162, 384, 420, 730, 287, 330, 337, 366, 459, 476,\n+   509, 558, 591, 610, 726, 652, 734, 759, 154, 163, 198, 473, 683, 697, 292, 311,\n+   353, 423, 572, 494, 113, 217, 259, 280, 314, 499, 506, 603, 608, 752, 778, 782,\n+   788, 117, 557, 748, 774, 320, 109, 126, 260, 265, 373, 411, 479, 523, 655, 737,\n+   823, 380, 765, 161, 395, 398, 438, 451, 502, 516, 537, 583, 791, 136, 340, 769,\n+   122, 273, 446, 727, 305, 322, 400, 496, 771, 155, 190, 269, 377, 391, 406, 432,\n+   501, 519, 599, 684, 687, 749, 776, 175, 452, 191, 480, 510, 659, 772, 805, 813,\n+   397, 444, 619, 566, 568, 575, 491, 471, 707, 111, 636, 156, 153, 288, 346, 578,\n+   256, 435, 383, 729, 680, 767, 694, 295, 128, 210,   0,   0, 227,   0, 379,   0,\n+     0, 150, 493, 525, 544, 551, 552, 556, 783, 576, 604,   0, 661,   0, 703,   0,\n+     0, 735, 743,   0,   0,   0, 793, 794, 795, 808, 741, 773, 118, 127, 130, 166,\n+   169, 177, 207, 213, 215, 226, 229, 268, 270, 317, 327, 329, 335, 369, 375, 381,\n+   404, 441, 448, 458, 477, 484, 503, 539, 545, 547, 546, 548, 549, 550, 554, 555,\n+   561, 564, 569, 591, 593, 595, 598, 607, 620, 625, 625, 651, 690, 695, 705, 706,\n+   716, 717, 733, 735, 777, 786, 790, 315, 869, 623,   0,   0, 102, 145, 134, 115,\n+   129, 138, 165, 171, 207, 202, 206, 212, 227, 231, 240, 243, 250, 254, 294, 296,\n+   303, 308, 319, 325, 321, 329, 326, 335, 341, 357, 360, 362, 370, 379, 388, 389,\n+   393, 421, 424, 438, 456, 454, 458, 465, 477, 535, 485, 490, 493, 507, 512, 514,\n+   521, 522, 525, 526, 528, 533, 532, 541, 565, 569, 574, 586, 591, 597, 607, 637,\n+   647, 674, 691, 693, 695, 698, 703, 699, 705, 704, 702, 706, 709, 717, 728, 736,\n+   747, 754, 770, 777, 783, 784, 786, 787, 790, 802, 825, 848, 847, 857,  55,  65,\n+    66, 883, 892, 916, 822, 824,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,1586,   0,1605,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,1602,1603,1934,1935,1574,1575,1576,1577,1579,1580,\n+  1581,1583,1584,   0,1585,1587,1588,1589,1591,   0,1592,   0,1593,1594,   0,1595,\n+  1596,   0,1598,1599,1600,1601,1604,1582,1578,1590,1597,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,1936,   0,1937,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,1938,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1939,1940,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,1941,1942,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,1944,1943,   0,1945,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,1946,1947,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,1948,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1949,1950,1951,1952,1953,1954,\n+  1955,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,1956,1957,1958,1960,1959,1961,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 106, 104, 107, 826,\n+   114, 118, 119, 121, 123, 124, 127, 125,  34, 830, 130, 131, 132, 137, 827,  35,\n+   133, 139, 829, 142, 143, 112, 144, 145, 924, 151, 152,  37, 157, 158, 159, 160,\n+    38, 165, 166, 169, 171, 172, 173, 174, 176, 177, 178, 179, 181, 182, 182, 182,\n+   833, 468, 184, 185, 834, 187, 188, 189, 196, 192, 194, 195, 197, 199, 200, 201,\n+   203, 204, 204, 206, 208, 209, 211, 218, 213, 219, 214, 216, 153, 234, 221, 222,\n+   223, 220, 225, 224, 230, 835, 235, 236, 237, 238, 239, 244, 836, 837, 247, 248,\n+   249, 246, 251,  39,  40, 253, 255, 255, 838, 257, 258, 259, 261, 839, 262, 263,\n+   301, 264,  41, 266, 270, 272, 271, 841, 274, 842, 277, 276, 278, 281, 282,  42,\n+   283, 284, 285, 286,  43, 843,  44, 289, 290, 291, 293, 934, 298, 845, 845, 621,\n+   300, 300,  45, 852, 894, 302, 304,  46, 306, 309, 310, 312, 316,  48,  47, 317,\n+   846, 318, 323, 324, 325, 324, 328, 329, 333, 331, 332, 334, 335, 336, 338, 339,\n+   342, 343, 347, 351, 849, 350, 348, 352, 354, 359, 850, 361, 358, 356,  49, 363,\n+   365, 367, 364,  50, 369, 371, 851, 376, 386, 378,  53, 381,  52,  51, 140, 141,\n+   387, 382, 614,  78, 388, 389, 390, 394, 392, 856,  54, 399, 396, 402, 404, 858,\n+   405, 401, 407,  55, 408, 409, 410, 413, 859, 415,  56, 417, 860, 418,  57, 419,\n+   422, 424, 425, 861, 840, 862, 426, 863, 429, 431, 427, 433, 437, 441, 438, 439,\n+   442, 443, 864, 436, 449, 450,  58, 454, 453, 865, 447, 460, 866, 867, 461, 466,\n+   465, 464,  59, 467, 470, 469, 472, 828, 475, 868, 478, 870, 483, 485, 486, 871,\n+   488, 489, 872, 873, 495, 497,  60, 498,  61,  61, 504, 505, 507, 508, 511,  62,\n+   513, 874, 515, 875, 518, 844, 520, 876, 877, 878,  63,  64, 528, 880, 879, 881,\n+   882, 530, 531, 531, 533,  66, 534,  67,  68, 884, 536, 538, 541,  69, 885, 549,\n+   886, 887, 556, 559,  70, 561, 562, 563, 888, 889, 889, 567,  71, 890, 570, 571,\n+    72, 891, 577,  73, 581, 579, 582, 893, 587,  74, 590, 592, 596,  75, 895, 896,\n+    76, 897, 600, 898, 602, 605, 607, 899, 900, 609, 901, 611, 853,  77, 615, 616,\n+    79, 617, 252, 902, 903, 854, 855, 621, 622, 731,  80, 627, 626, 628, 164, 629,\n+   630, 631, 633, 904, 632, 634, 639, 640, 635, 641, 646, 651, 638, 643, 644, 645,\n+   905, 907, 906,  81, 653, 654, 656, 911, 657, 908,  82,  83, 909, 910,  84, 664,\n+   665, 666, 667, 669, 668, 671, 670, 674, 672, 673, 675,  85, 677, 678,  86, 681,\n+   682, 912, 685, 686,  87, 689,  36, 913, 914,  88,  89, 696, 702, 709, 711, 915,\n+   712, 713, 718, 719, 917, 831, 721, 720, 723, 832, 725, 728, 918, 919, 739, 742,\n+   744, 920, 745, 753, 756, 757, 755, 760, 761, 921, 762,  90, 764, 922,  91, 775,\n+   279, 780, 923, 925,  92,  93, 785, 926,  94, 927, 787, 787, 789, 928, 792,  95,\n+   796, 797, 798, 800,  96, 929, 802, 804, 806,  97,  98, 807, 930,  99, 931, 932,\n+   933, 814, 100, 816, 817, 818, 819, 820, 821, 935,   0,   0,\n@@ -4403,1 +4406,1 @@\n-  return u<1114110u?_hb_ucd_u8[6800+(((_hb_ucd_u8[1312+(((_hb_ucd_u16[((_hb_ucd_u8[544+(((_hb_ucd_u8[u>>1>>3>>3>>4])<<4)+((u>>1>>3>>3)&15u))])<<3)+((u>>1>>3)&7u)])<<3)+((u>>1)&7u))])<<1)+((u)&1u))]:2;\n+  return u<1114110u?_hb_ucd_u8[6808+(((_hb_ucd_u8[1312+(((_hb_ucd_u16[((_hb_ucd_u8[544+(((_hb_ucd_u8[u>>1>>3>>3>>4])<<4)+((u>>1>>3>>3)&15u))])<<3)+((u>>1>>3)&7u)])<<3)+((u>>1)&7u))])<<1)+((u)&1u))]:2;\n@@ -4408,1 +4411,1 @@\n-  return u<125259u?_hb_ucd_u8[8792+(((_hb_ucd_u8[8236+(((_hb_ucd_u8[7776+(((_hb_ucd_u8[7424+(((_hb_ucd_u8[7178+(u>>2>>2>>2>>3)])<<3)+((u>>2>>2>>2)&7u))])<<2)+((u>>2>>2)&3u))])<<2)+((u>>2)&3u))])<<2)+((u)&3u))]:0;\n+  return u<125259u?_hb_ucd_u8[8800+(((_hb_ucd_u8[8244+(((_hb_ucd_u8[7784+(((_hb_ucd_u8[7432+(((_hb_ucd_u8[7186+(u>>2>>2>>2>>3)])<<3)+((u>>2>>2>>2)&7u))])<<2)+((u>>2>>2)&3u))])<<2)+((u>>2)&3u))])<<2)+((u)&3u))]:0;\n@@ -4418,1 +4421,1 @@\n-  return u<65380u?_hb_ucd_i16[((_hb_ucd_u8[9684+(((_hb_ucd_u8[9452+(((_hb_ucd_u8[9356+(((_hb_ucd_b4(9292+_hb_ucd_u8,u>>1>>2>>3>>3))<<3)+((u>>1>>2>>3)&7u))])<<3)+((u>>1>>2)&7u))])<<2)+((u>>1)&3u))])<<1)+((u)&1u)]:0;\n+  return u<65380u?_hb_ucd_i16[((_hb_ucd_u8[9692+(((_hb_ucd_u8[9460+(((_hb_ucd_u8[9364+(((_hb_ucd_b4(9300+_hb_ucd_u8,u>>1>>2>>3>>3))<<3)+((u>>1>>2>>3)&7u))])<<3)+((u>>1>>2)&7u))])<<2)+((u>>1)&3u))])<<1)+((u)&1u)]:0;\n@@ -4423,1 +4426,1 @@\n-  return u<918000u?_hb_ucd_u8[11118+(((_hb_ucd_u16[4024+(((_hb_ucd_u16[2040+(((_hb_ucd_u8[10382+(((_hb_ucd_u8[9932+(u>>2>>2>>3>>4)])<<4)+((u>>2>>2>>3)&15u))])<<3)+((u>>2>>2)&7u))])<<2)+((u>>2)&3u))])<<2)+((u)&3u))]:2;\n+  return u<918000u?_hb_ucd_u8[11126+(((_hb_ucd_u16[4040+(((_hb_ucd_u16[2048+(((_hb_ucd_u8[10390+(((_hb_ucd_u8[9940+(u>>2>>2>>3>>4)])<<4)+((u>>2>>2>>3)&15u))])<<3)+((u>>2>>2)&7u))])<<2)+((u>>2)&3u))])<<2)+((u)&3u))]:2;\n@@ -4428,1 +4431,1 @@\n-  return u<195102u?_hb_ucd_u16[6728+(((_hb_ucd_u8[13944+(((_hb_ucd_u8[13562+(u>>4>>5)])<<5)+((u>>4)&31u))])<<4)+((u)&15u))]:0;\n+  return u<195102u?_hb_ucd_u16[6748+(((_hb_ucd_u8[13952+(((_hb_ucd_u8[13570+(u>>4>>5)])<<5)+((u>>4)&31u))])<<4)+((u)&15u))]:0;\n@@ -4435,1 +4438,1 @@\n-_hb_ucd_u8[13370] =\n+_hb_ucd_u8[13386] =\n@@ -4443,1 +4446,1 @@\n-    7,  7,  7,  7, 35, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n+    7,  7,  7,  7, 37, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n@@ -4465,1 +4468,1 @@\n-   37, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n+   38, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n@@ -4506,1 +4509,1 @@\n-   34, 34, 34, 34, 34, 34, 34, 34,111,111,111,111,111,111,111,111,\n+   34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,111,111,111,\n@@ -4508,0 +4511,1 @@\n+   34, 34, 34, 34, 34, 34, 34, 34,111,111,111,111,111,111,111,111,\n@@ -4970,1 +4974,1 @@\n-   17, 17, 31, 31, 23, 23, 23, 23, 23, 23, 31, 31, 31, 31, 31, 31,\n+   17, 17, 31, 31, 23, 23, 23, 23, 23, 23, 23, 83, 31, 31, 31, 31,\n@@ -5600,1 +5604,1 @@\n-  return u<1114112u?_hb_ucd_u8[5080+(((_hb_ucd_u8[1152+(((_hb_ucd_u16[((_hb_ucd_u8[544+(((_hb_ucd_u8[u>>1>>3>>3>>4])<<4)+((u>>1>>3>>3)&15u))])<<3)+((u>>1>>3)&7u)])<<3)+((u>>1)&7u))])<<1)+((u)&1u))]:2;\n+  return u<1114112u?_hb_ucd_u8[5096+(((_hb_ucd_u8[1168+(((_hb_ucd_u16[((_hb_ucd_u8[544+(((_hb_ucd_u8[u>>1>>3>>3>>4])<<4)+((u>>1>>3>>3)&15u))])<<3)+((u>>1>>3)&7u)])<<3)+((u>>1)&7u))])<<1)+((u)&1u))]:2;\n@@ -5605,1 +5609,1 @@\n-  return u<125259u?_hb_ucd_u8[7038+(((_hb_ucd_u8[6482+(((_hb_ucd_u8[6022+(((_hb_ucd_u8[5670+(((_hb_ucd_u8[5424+(u>>2>>2>>2>>3)])<<3)+((u>>2>>2>>2)&7u))])<<2)+((u>>2>>2)&3u))])<<2)+((u>>2)&3u))])<<2)+((u)&3u))]:0;\n+  return u<125259u?_hb_ucd_u8[7054+(((_hb_ucd_u8[6498+(((_hb_ucd_u8[6038+(((_hb_ucd_u8[5686+(((_hb_ucd_u8[5440+(u>>2>>2>>2>>3)])<<3)+((u>>2>>2>>2)&7u))])<<2)+((u>>2>>2)&3u))])<<2)+((u>>2)&3u))])<<2)+((u)&3u))]:0;\n@@ -5615,1 +5619,1 @@\n-  return u<65380u?_hb_ucd_i16[((_hb_ucd_u8[7930+(((_hb_ucd_u8[7698+(((_hb_ucd_u8[7602+(((_hb_ucd_b4(7538+_hb_ucd_u8,u>>1>>2>>3>>3))<<3)+((u>>1>>2>>3)&7u))])<<3)+((u>>1>>2)&7u))])<<2)+((u>>1)&3u))])<<1)+((u)&1u)]:0;\n+  return u<65380u?_hb_ucd_i16[((_hb_ucd_u8[7946+(((_hb_ucd_u8[7714+(((_hb_ucd_u8[7618+(((_hb_ucd_b4(7554+_hb_ucd_u8,u>>1>>2>>3>>3))<<3)+((u>>1>>2>>3)&7u))])<<3)+((u>>1>>2)&7u))])<<2)+((u>>1)&3u))])<<1)+((u)&1u)]:0;\n@@ -5620,1 +5624,1 @@\n-  return u<918016u?_hb_ucd_u8[11228+(((_hb_ucd_u8[10264+(((_hb_ucd_u8[9276+(((_hb_ucd_u8[8596+(((_hb_ucd_u8[8292+(((_hb_ucd_u8[8178+(u>>2>>2>>2>>3>>4)])<<4)+((u>>2>>2>>2>>3)&15u))])<<3)+((u>>2>>2>>2)&7u))])<<2)+((u>>2>>2)&3u))])<<2)+((u>>2)&3u))])<<2)+((u)&3u))]:2;\n+  return u<918016u?_hb_ucd_u8[11244+(((_hb_ucd_u8[10280+(((_hb_ucd_u8[9292+(((_hb_ucd_u8[8612+(((_hb_ucd_u8[8308+(((_hb_ucd_u8[8194+(u>>2>>2>>2>>3>>4)])<<4)+((u>>2>>2>>2>>3)&15u))])<<3)+((u>>2>>2>>2)&7u))])<<2)+((u>>2>>2)&3u))])<<2)+((u>>2)&3u))])<<2)+((u)&3u))]:2;\n@@ -5625,1 +5629,1 @@\n-  return u<195102u?_hb_ucd_u16[1608+(((_hb_ucd_u8[12570+(((_hb_ucd_u8[12188+(u>>4>>5)])<<5)+((u>>4)&31u))])<<4)+((u)&15u))]:0;\n+  return u<195102u?_hb_ucd_u16[1608+(((_hb_ucd_u8[12586+(((_hb_ucd_u8[12204+(u>>4>>5)])<<5)+((u>>4)&31u))])<<4)+((u)&15u))]:0;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ucd-table.hh","additions":1727,"deletions":1723,"binary":false,"changes":3450,"status":"modified"},{"patch":"@@ -10,2 +10,2 @@\n- * # Date: 2022-08-02, 00:26:10 GMT\n- * # © 2022 Unicode®, Inc.\n+ * # Date: 2023-02-01, 02:22:54 GMT\n+ * # © 2023 Unicode®, Inc.\n@@ -16,1 +16,1 @@\n- * # Used with Emoji Version 15.0 and subsequent minor revisions (if any)\n+ * # Used with Emoji Version 15.1 and subsequent minor revisions (if any)\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-unicode-emoji-table.hh","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-    if (iter.is_random_access_iterator)\n+    if (iter.is_random_access_iterator || iter.has_fast_len)\n@@ -65,1 +65,13 @@\n-    copy_vector (o);\n+    copy_array (o.as_array ());\n+  }\n+  hb_vector_t (array_t o) : hb_vector_t ()\n+  {\n+    alloc (o.length, true);\n+    if (unlikely (in_error ())) return;\n+    copy_array (o);\n+  }\n+  hb_vector_t (c_array_t o) : hb_vector_t ()\n+  {\n+    alloc (o.length, true);\n+    if (unlikely (in_error ())) return;\n+    copy_array (o);\n@@ -77,1 +89,1 @@\n-  int allocated = 0; \/* == -1 means allocation failed. *\/\n+  int allocated = 0; \/* < 0 means allocation failed. *\/\n@@ -93,2 +105,8 @@\n-    shrink_vector (0);\n-    hb_free (arrayZ);\n+    \/* We allow a hack to make the vector point to a foreign array\n+     * by the user. In that case length\/arrayZ are non-zero but\n+     * allocated is zero. Don't free anything. *\/\n+    if (allocated)\n+    {\n+      shrink_vector (0);\n+      hb_free (arrayZ);\n+    }\n@@ -101,5 +119,1 @@\n-      \/* Big Hack! We don't know the true allocated size before\n-       * an allocation failure happened. But we know it was at\n-       * least as big as length. Restore it to that and continue\n-       * as if error did not happen. *\/\n-      allocated = length;\n+      reset_error ();\n@@ -122,1 +136,1 @@\n-    copy_vector (o);\n+    copy_array (o.as_array ());\n@@ -194,1 +208,1 @@\n-      return &Crap (Type);\n+      return std::addressof (Crap (Type));\n@@ -197,19 +211,1 @@\n-  template <typename T,\n-            typename T2 = Type,\n-            hb_enable_if (!std::is_copy_constructible<T2>::value &&\n-                          std::is_copy_assignable<T>::value)>\n-  Type *push (T&& v)\n-  {\n-    Type *p = push ();\n-    if (p == &Crap (Type))\n-      \/\/ If push failed to allocate then don't copy v, since this may cause\n-      \/\/ the created copy to leak memory since we won't have stored a\n-      \/\/ reference to it.\n-      return p;\n-    *p = std::forward<T> (v);\n-    return p;\n-  }\n-  template <typename T,\n-            typename T2 = Type,\n-            hb_enable_if (std::is_copy_constructible<T2>::value)>\n-  Type *push (T&& v)\n+  template <typename... Args> Type *push (Args&&... args)\n@@ -217,1 +213,1 @@\n-    if (unlikely (!alloc (length + 1)))\n+    if (unlikely ((int) length >= allocated && !alloc (length + 1)))\n@@ -221,1 +217,1 @@\n-      return &Crap (Type);\n+      return std::addressof (Crap (Type));\n@@ -224,3 +220,2 @@\n-    length++;\n-    Type *p = std::addressof (arrayZ[length - 1]);\n-    return new (p) Type (std::forward<T> (v));\n+    Type *p = std::addressof (arrayZ[length++]);\n+    return new (p) Type (std::forward<Args> (args)...);\n@@ -230,0 +225,10 @@\n+  void set_error ()\n+  {\n+    assert (allocated >= 0);\n+    allocated = -allocated - 1;\n+  }\n+  void reset_error ()\n+  {\n+    assert (allocated < 0);\n+    allocated = -(allocated + 1);\n+  }\n@@ -234,1 +239,1 @@\n-  realloc_vector (unsigned new_allocated)\n+  realloc_vector (unsigned new_allocated, hb_priority<0>)\n@@ -246,1 +251,1 @@\n-  realloc_vector (unsigned new_allocated)\n+  realloc_vector (unsigned new_allocated, hb_priority<0>)\n@@ -266,0 +271,14 @@\n+  \/* Specialization for hb_vector_t<hb_{vector,array}_t<U>> to speed up. *\/\n+  template <typename T = Type,\n+            hb_enable_if (hb_is_same (T, hb_vector_t<typename T::item_t>) ||\n+                          hb_is_same (T, hb_array_t <typename T::item_t>))>\n+  Type *\n+  realloc_vector (unsigned new_allocated, hb_priority<1>)\n+  {\n+    if (!new_allocated)\n+    {\n+      hb_free (arrayZ);\n+      return nullptr;\n+    }\n+    return (Type *) hb_realloc (arrayZ, new_allocated * sizeof (Type));\n+  }\n@@ -270,1 +289,1 @@\n-  grow_vector (unsigned size)\n+  grow_vector (unsigned size, hb_priority<0>)\n@@ -272,1 +291,1 @@\n-    memset (arrayZ + length, 0, (size - length) * sizeof (*arrayZ));\n+    hb_memset (arrayZ + length, 0, (size - length) * sizeof (*arrayZ));\n@@ -278,1 +297,1 @@\n-  grow_vector (unsigned size)\n+  grow_vector (unsigned size, hb_priority<0>)\n@@ -280,5 +299,12 @@\n-    while (length < size)\n-    {\n-      length++;\n-      new (std::addressof (arrayZ[length - 1])) Type ();\n-    }\n+    for (; length < size; length++)\n+      new (std::addressof (arrayZ[length])) Type ();\n+  }\n+  \/* Specialization for hb_vector_t<hb_{vector,array}_t<U>> to speed up. *\/\n+  template <typename T = Type,\n+            hb_enable_if (hb_is_same (T, hb_vector_t<typename T::item_t>) ||\n+                          hb_is_same (T, hb_array_t <typename T::item_t>))>\n+  void\n+  grow_vector (unsigned size, hb_priority<1>)\n+  {\n+    hb_memset (arrayZ + length, 0, (size - length) * sizeof (*arrayZ));\n+    length = size;\n@@ -290,1 +316,1 @@\n-  copy_vector (const hb_vector_t &other)\n+  copy_array (hb_array_t<const Type> other)\n@@ -293,2 +319,1 @@\n-#ifndef HB_OPTIMIZE_SIZE\n-    if (sizeof (T) >= sizeof (long long))\n+    if (!HB_OPTIMIZE_SIZE_VAL && sizeof (T) >= sizeof (long long))\n@@ -299,1 +324,0 @@\n-#endif\n@@ -306,1 +330,1 @@\n-  copy_vector (const hb_vector_t &other)\n+  copy_array (hb_array_t<const Type> other)\n@@ -321,1 +345,1 @@\n-  copy_vector (const hb_vector_t &other)\n+  copy_array (hb_array_t<const Type> other)\n@@ -335,1 +359,2 @@\n-    while ((unsigned) length > size)\n+    assert (size <= length);\n+    if (!std::is_trivially_destructible<Type>::value)\n@@ -337,2 +362,4 @@\n-      arrayZ[(unsigned) length - 1].~Type ();\n-      length--;\n+      unsigned count = length - size;\n+      Type *p = arrayZ + length - 1;\n+      while (count--)\n+        p--->~Type ();\n@@ -340,0 +367,1 @@\n+    length = size;\n@@ -386,1 +414,1 @@\n-      allocated = -1;\n+      set_error ();\n@@ -390,1 +418,1 @@\n-    Type *new_array = realloc_vector (new_allocated);\n+    Type *new_array = realloc_vector (new_allocated, hb_prioritize);\n@@ -397,1 +425,1 @@\n-      allocated = -1;\n+      set_error ();\n@@ -416,1 +444,1 @@\n-        grow_vector (size);\n+        grow_vector (size, hb_prioritize);\n@@ -435,1 +463,1 @@\n-    Type v {std::move (arrayZ[length - 1])};\n+    Type v (std::move (arrayZ[length - 1]));\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-vector.hh","additions":88,"deletions":60,"binary":false,"changes":148,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-#define HB_VERSION_MAJOR 7\n+#define HB_VERSION_MAJOR 8\n@@ -56,1 +56,1 @@\n-#define HB_VERSION_MICRO 0\n+#define HB_VERSION_MICRO 2\n@@ -63,1 +63,1 @@\n-#define HB_VERSION_STRING \"7.2.0\"\n+#define HB_VERSION_STRING \"8.2.2\"\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-version.h","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -67,0 +67,1 @@\n+#pragma GCC diagnostic error   \"-Wconstant-conversion\"\n@@ -258,2 +259,2 @@\n-#define likely(expr) (__builtin_expect (!!(expr), 1))\n-#define unlikely(expr) (__builtin_expect (!!(expr), 0))\n+#define likely(expr) __builtin_expect (bool(expr), 1)\n+#define unlikely(expr) __builtin_expect (bool(expr), 0)\n@@ -318,0 +319,8 @@\n+#ifndef HB_ALWAYS_INLINE\n+#if defined(_MSC_VER)\n+#define HB_ALWAYS_INLINE __forceinline\n+#else\n+#define HB_ALWAYS_INLINE __attribute__((always_inline)) inline\n+#endif\n+#endif\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb.hh","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"}]}