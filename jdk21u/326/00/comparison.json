{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -187,0 +187,6 @@\n+    HRESULT hr = ::CoInitializeEx(NULL, COINIT_MULTITHREADED | COINIT_DISABLE_OLE1DDE);\n+    if (FAILED(hr) && hr != RPC_E_CHANGED_MODE) {\n+        DS_unlockCache();\n+        return 0;\n+    }\n+\n@@ -227,0 +233,5 @@\n+\n+    if (hr != RPC_E_CHANGED_MODE) {\n+        ::CoUninitialize();\n+    }\n+\n@@ -261,0 +272,7 @@\n+\n+    HRESULT hr = ::CoInitializeEx(NULL, COINIT_MULTITHREADED | COINIT_DISABLE_OLE1DDE);\n+    if (FAILED(hr) && hr != RPC_E_CHANGED_MODE) {\n+        DS_unlockCache();\n+        return 0;\n+    }\n+\n@@ -270,0 +288,4 @@\n+    if (hr != RPC_E_CHANGED_MODE) {\n+        ::CoUninitialize();\n+    }\n+\n","filename":"src\/java.desktop\/windows\/native\/libjsound\/PLATFORM_API_WinOS_DirectSound.cpp","additions":23,"deletions":1,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -0,0 +1,144 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.util.Arrays;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.sound.sampled.AudioSystem;\n+import javax.sound.sampled.Line;\n+import javax.sound.sampled.LineUnavailableException;\n+import javax.sound.sampled.Mixer;\n+import javax.sound.sampled.TargetDataLine;\n+import javax.swing.JButton;\n+import javax.swing.JFileChooser;\n+import javax.swing.JFrame;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTextArea;\n+\n+import static javax.swing.SwingUtilities.invokeAndWait;\n+\n+\/*\n+ * @test\n+ * @bug 8301846\n+ * @requires (os.family == \"windows\")\n+ * @summary Sound recording fails after screen lock and unlock.\n+ * @run main\/manual OpenLineAfterScreenLock\n+ *\/\n+public class OpenLineAfterScreenLock {\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+            This test verifies it can record sound from the first sound capture device after\n+            locking and unlocking the screen. The first part of the test has already completed.\n+\n+            Lock the screen and unlock it. Then click Continue to complete the test.\n+\n+            The test will finish automatically.\n+            \"\"\";\n+\n+    private static final CountDownLatch latch = new CountDownLatch(1);\n+\n+    private static JFrame frame;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            runTest();\n+\n+            \/\/ Creating JFileChooser initializes COM\n+            \/\/ which affects ability to open audio lines\n+            new JFileChooser();\n+\n+            invokeAndWait(OpenLineAfterScreenLock::createInstructionsUI);\n+            if (!latch.await(2, TimeUnit.MINUTES)) {\n+                throw new RuntimeException(\"Test failed: Test timed out!!\");\n+            }\n+\n+            runTest();\n+        } finally {\n+            invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+        System.out.println(\"Test Passed\");\n+    }\n+\n+    private static void runTest() {\n+        try {\n+            Mixer mixer = getMixer();\n+            TargetDataLine line =\n+                    (TargetDataLine) mixer.getLine(mixer.getTargetLineInfo()[0]);\n+            line.open();\n+            line.close();\n+        } catch (LineUnavailableException e) {\n+            throw new RuntimeException(\"Test failed: Line unavailable\", e);\n+        }\n+    }\n+\n+    private static Mixer getMixer() {\n+        return Arrays.stream(AudioSystem.getMixerInfo())\n+                     .map(AudioSystem::getMixer)\n+                     .filter(OpenLineAfterScreenLock::isRecordingDevice)\n+                     .skip(1) \/\/ Skip the primary driver and choose one directly\n+                     .findAny()\n+                     .orElseThrow();\n+    }\n+\n+    private static boolean isRecordingDevice(Mixer mixer) {\n+        Line.Info[] lineInfos = mixer.getTargetLineInfo();\n+        return lineInfos.length > 0\n+               && lineInfos[0].getLineClass() == TargetDataLine.class;\n+    }\n+\n+    private static void createInstructionsUI() {\n+        frame = new JFrame(\"Instructions for OpenLineAfterScreenLock\");\n+\n+        JTextArea textArea = new JTextArea(INSTRUCTIONS);\n+        textArea.setEditable(false);\n+\n+        JScrollPane pane = new JScrollPane(textArea);\n+        frame.getContentPane().add(pane, BorderLayout.NORTH);\n+\n+        JButton button = new JButton(\"Continue\");\n+        button.addActionListener(e -> latch.countDown());\n+        frame.getContentPane().add(button, BorderLayout.PAGE_END);\n+\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+\n+        frame.addWindowListener(new CloseWindowHandler());\n+        frame.setVisible(true);\n+    }\n+\n+    private static class CloseWindowHandler extends WindowAdapter {\n+        @Override\n+        public void windowClosing(WindowEvent e) {\n+            latch.countDown();\n+            throw new RuntimeException(\"Test window closed abruptly\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/sound\/sampled\/Lines\/OpenLineAfterScreenLock.java","additions":144,"deletions":0,"binary":false,"changes":144,"status":"added"}]}