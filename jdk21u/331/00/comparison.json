{"files":[{"patch":"@@ -60,3 +60,2 @@\n-        int port = findFreePort();\n-        try (Debuggee debuggee = Debuggee.launcher(\"ThrowCaughtException\").setAddress(\"localhost:\" + port)\n-                                         .enableOnThrow(\"Ex\", \"Start\").setSuspended(true).launch()) {\n+        try (Debuggee debuggee = Debuggee.launcher(\"ThrowCaughtException\")\n+                                         .enableOnThrow(\"Ex\").setSuspended(true).launch()) {\n@@ -65,1 +64,1 @@\n-                vm = attach(\"localhost\", \"\" + port);\n+                vm = attach(\"localhost\", debuggee.getAddress());\n@@ -113,8 +112,0 @@\n-    private static int findFreePort() {\n-        try (ServerSocket socket = new ServerSocket(0)) {\n-            return socket.getLocalPort();\n-        } catch (IOException e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n","filename":"test\/jdk\/com\/sun\/jdi\/JdwpOnThrowTest.java","additions":3,"deletions":12,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -36,0 +36,3 @@\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n@@ -72,2 +75,1 @@\n-        private boolean waitForPortPrint = true;\n-        private String expectedOutputBeforeThrow = \"\";\n+        private static final String LAUNCH_ECHO_STRING = \"Listen Args:\";\n@@ -106,5 +108,2 @@\n-        \/\/ required to pass non null port with address and emit string before the throw\n-        public Launcher enableOnThrow(String value, String expectedOutputBeforeThrow) {\n-            this.onthrow = value;\n-            this.waitForPortPrint = false;\n-            this.expectedOutputBeforeThrow = expectedOutputBeforeThrow;\n+        public Launcher enableOnThrow(String exceptionClassName) {\n+            this.onthrow = exceptionClassName;\n@@ -119,1 +118,1 @@\n-            String onthrowArgs = onthrow.isEmpty() ? \"\" : \",onthrow=\" + onthrow + \",launch=exit\";\n+            String onthrowArgs = onthrow.isEmpty() ? \"\" : \",onthrow=\" + onthrow + \",launch=echo \" + LAUNCH_ECHO_STRING;\n@@ -130,1 +129,5 @@\n-            return new Debuggee(prepare(), name, waitForPortPrint, expectedOutputBeforeThrow);\n+            return new Debuggee(prepare(), name,\n+                onthrow.isEmpty() ?\n+                    JDWP::parseListenAddress :\n+                    Launcher::parseLaunchEchoListenAddress\n+            );\n@@ -135,1 +138,0 @@\n-    }\n@@ -137,10 +139,9 @@\n-    \/\/ starts the process, waits for \"Listening for transport\" output and detects transport\/address\n-    private Debuggee(ProcessBuilder pb, String name, boolean waitForPortPrint, String expectedOutputBeforeThrow) {\n-        JDWP.ListenAddress[] listenAddress = new JDWP.ListenAddress[1];\n-        if (!waitForPortPrint) {\n-            try {\n-                p = ProcessTools.startProcess(name, pb, s -> {output.add(s);}, s -> {\n-                    return s.equals(expectedOutputBeforeThrow);\n-                }, 30, TimeUnit.SECONDS);\n-            } catch (IOException | InterruptedException | TimeoutException ex) {\n-                throw new RuntimeException(\"failed to launch debuggee\", ex);\n+        \/**\n+         * Parses debuggee output to get listening transport and address, printed by `launch=echo`.\n+         * Returns null if the string specified does not contain required info.\n+         *\/\n+        private static JDWP.ListenAddress parseLaunchEchoListenAddress(String debuggeeOutput) {\n+            Pattern listenRegexp = Pattern.compile(LAUNCH_ECHO_STRING + \" \\\\b(.+)\\\\b \\\\b(.+)\\\\b\");\n+            Matcher m = listenRegexp.matcher(debuggeeOutput);\n+            if (m.find()) {\n+                return new JDWP.ListenAddress(m.group(1), m.group(2));\n@@ -148,3 +149,1 @@\n-            transport = null;\n-            address = null;\n-            return;\n+            return null;\n@@ -152,0 +151,5 @@\n+    }\n+\n+    \/\/ starts the process, waits until the provided addressDetector detects transport\/address from the process output\n+    private Debuggee(ProcessBuilder pb, String name, Function<String, JDWP.ListenAddress> addressDetector) {\n+        JDWP.ListenAddress[] listenAddress = new JDWP.ListenAddress[1];\n@@ -155,2 +159,2 @@\n-                    s -> {  \/\/ warm-up predicate\n-                        listenAddress[0] = JDWP.parseListenAddress(s);\n+                    s -> {\n+                        listenAddress[0] = addressDetector.apply(s);\n@@ -214,1 +218,0 @@\n-\n","filename":"test\/jdk\/com\/sun\/jdi\/lib\/jdb\/Debuggee.java","additions":29,"deletions":26,"binary":false,"changes":55,"status":"modified"}]}