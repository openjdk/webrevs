{"files":[{"patch":"@@ -107,10 +107,4 @@\n-  if (!SafepointSynchronize::is_at_safepoint() && !is_owning_thread()) {\n-    \/\/ When a foreign thread inspects this thread's lock-stack, it may see\n-    \/\/ bad references here when a concurrent collector has not gotten\n-    \/\/ to processing the lock-stack, yet. Call StackWaterMark::start_processing()\n-    \/\/ to ensure that all references are valid.\n-    StackWatermark* watermark = StackWatermarkSet::get(get_thread(), StackWatermarkKind::gc);\n-    if (watermark != nullptr) {\n-      watermark->start_processing();\n-    }\n-  }\n+\n+  \/\/ Can't poke around in thread oops without having started stack watermark processing.\n+  assert(StackWatermarkSet::processing_started(get_thread()), \"Processing must have started!\");\n+\n","filename":"src\/hotspot\/share\/runtime\/lockStack.inline.hpp","additions":4,"deletions":10,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -83,0 +83,1 @@\n+#include \"runtime\/stackWatermarkSet.inline.hpp\"\n@@ -1232,0 +1233,6 @@\n+    \/\/ Need to start processing before accessing oops in the thread.\n+    StackWatermark* watermark = StackWatermarkSet::get(q, StackWatermarkKind::gc);\n+    if (watermark != nullptr) {\n+      watermark->start_processing();\n+    }\n+\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}