{"files":[{"patch":"@@ -371,1 +371,1 @@\n-  if (ent->is_jar() && !ent->is_signed() && ent->manifest() != nullptr) {\n+  if (ent->is_jar() && ent->manifest() != nullptr) {\n@@ -625,23 +625,0 @@\n-\n-  \/\/ The return value indicates if the JAR is signed or not\n-  bool check_is_signed() {\n-    u1* attr = _current;\n-    bool isSigned = false;\n-    while (_current < _buffer_end) {\n-      if (*_current == '\\n') {\n-        *_current = '\\0';\n-        u1* value = (u1*)strchr((char*)attr, ':');\n-        if (value != nullptr) {\n-          assert(*(value+1) == ' ', \"Unrecognized format\" );\n-          if (strstr((char*)attr, \"-Digest\") != nullptr) {\n-            isSigned = true;\n-            break;\n-          }\n-        }\n-        *_current = '\\n'; \/\/ restore\n-        attr = _current + 1;\n-      }\n-      _current ++;\n-    }\n-    return isSigned;\n-  }\n@@ -660,12 +637,8 @@\n-    if (stream->check_is_signed()) {\n-      ent->set_is_signed();\n-    } else {\n-      \/\/ Copy the manifest into the shared archive\n-      manifest = ClassLoaderExt::read_raw_manifest(THREAD, cpe, &manifest_size);\n-      Array<u1>* buf = MetadataFactory::new_array<u1>(loader_data,\n-                                                      manifest_size,\n-                                                      CHECK);\n-      char* p = (char*)(buf->data());\n-      memcpy(p, manifest, manifest_size);\n-      ent->set_manifest(buf);\n-    }\n+    \/\/ Copy the manifest into the shared archive\n+    manifest = ClassLoaderExt::read_raw_manifest(THREAD, cpe, &manifest_size);\n+    Array<u1>* buf = MetadataFactory::new_array<u1>(loader_data,\n+                                                    manifest_size,\n+                                                    CHECK);\n+    char* p = (char*)(buf->data());\n+    memcpy(p, manifest, manifest_size);\n+    ent->set_manifest(buf);\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":9,"deletions":36,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -56,1 +56,0 @@\n-    signed_jar_entry,\n@@ -93,4 +92,0 @@\n-  bool is_signed()        const { return _type == signed_jar_entry; }\n-  void set_is_signed() {\n-    _type = signed_jar_entry;\n-  }\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -262,0 +262,2 @@\n+    static final String keyTool = JDKToolFinder.getJDKTool(\"keytool\");\n+    static final String jarSigner = JDKToolFinder.getJDKTool(\"jarsigner\");\n@@ -263,3 +265,7 @@\n-    public static void signJar() throws Exception {\n-        String keyTool = JDKToolFinder.getJDKTool(\"keytool\");\n-        String jarSigner = JDKToolFinder.getJDKTool(\"jarsigner\");\n+    public static void signJarWithDisabledAlgorithm(String jarName) throws Exception {\n+        String keyName = \"key_with_disabled_alg\";\n+        executeProcess(keyTool,\n+            \"-genkey\", \"-keystore\", \".\/keystore\", \"-alias\", keyName,\n+            \"-storepass\", \"abc123\", \"-keypass\", \"abc123\", \"-keyalg\", \"dsa\",\n+            \"-sigalg\", \"SHA1withDSA\", \"-keysize\", \"512\", \"-dname\", \"CN=jvmtest2\")\n+            .shouldHaveExitValue(0);\n@@ -267,0 +273,5 @@\n+        doSigning(jarName, keyName);\n+    }\n+\n+    public static void signJar(String jarName) throws Exception {\n+        String keyName = \"mykey\";\n@@ -268,1 +279,1 @@\n-            \"-genkey\", \"-keystore\", \".\/keystore\", \"-alias\", \"mykey\",\n+            \"-genkey\", \"-keystore\", \".\/keystore\", \"-alias\", keyName,\n@@ -273,0 +284,4 @@\n+        doSigning(jarName, keyName);\n+    }\n+\n+    private static void doSigning(String jarName, String keyName) throws Exception {\n@@ -275,2 +290,2 @@\n-           \"abc123\", \"-signedjar\", getJarFilePath(\"signed_hello\"),\n-           getJarFilePath(\"hello\"), \"mykey\")\n+           \"abc123\", \"-signedjar\", getJarFilePath(\"signed_\" + jarName),\n+           getJarFilePath(jarName), keyName)\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/JarBuilder.java","additions":22,"deletions":7,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8312434\n+ * @summary A jar file containing classes in the same package. Sign the jar file with\n+ *          a disabled algorithm. The jar will be treated as unsigned.\n+ *          Dump only one class into the CDS archive. During runtime, load the class\n+ *          stored in the archive and then load another class not from the archive\n+ *          but from the same pacakge. Loading of the second class should not result\n+ *          in sealing violation.\n+ *\n+ * @requires vm.cds\n+ * @library \/test\/lib\n+ * @compile test-classes\/GenericTestApp.java test-classes\/pkg\/ClassInPackage.java test-classes\/C2.java\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar WhiteBox.jar jdk.test.whitebox.WhiteBox\n+ * @run driver SealingViolation\n+ *\/\n+\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class SealingViolation {\n+    public static void main(String[] args) throws Exception {\n+        String[] classList = {\"pkg\/ClassInPackage\"};\n+        String appJar = ClassFileInstaller.writeJar(\"pkg-classes-sealed.jar\",\n+            ClassFileInstaller.Manifest.fromSourceFile(\"test-classes\/pkg\/package_seal.mf\"),\n+            \"GenericTestApp\", \"pkg\/ClassInPackage\", \"pkg\/C2\");\n+\n+        JarBuilder.signJarWithDisabledAlgorithm(\"pkg-classes-sealed\");\n+        String signedJar = TestCommon.getTestJar(\"pkg-classes-sealed.jar\");\n+\n+        \/\/ GenericTestApp requires WhiteBox\n+        String wbJar = ClassFileInstaller.getJarPath(\"WhiteBox.jar\");\n+        String bootclasspath = \"-Xbootclasspath\/a:\" + wbJar;\n+\n+        OutputAnalyzer output = TestCommon.dump(signedJar, classList, bootclasspath,\n+                                     \"-Xlog:cds+class=debug\");\n+        output.shouldMatch(\"cds.class.*klasses.*app   pkg.ClassInPackage\")\n+              .shouldHaveExitValue(0);\n+\n+        output = TestCommon.exec(signedJar, \"-Xlog:cds=debug,class+load\",\n+                                 bootclasspath,\n+                                 \"-XX:+UnlockDiagnosticVMOptions\",\n+                                 \"-XX:+WhiteBoxAPI\",\n+                                 \"GenericTestApp\",\n+                                 \"assertShared:pkg.ClassInPackage\",\n+                                 \"assertNotShared:pkg.C2\");\n+        output.shouldHaveExitValue(0);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/SealingViolation.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -41,1 +41,1 @@\n-        JarBuilder.signJar();\n+        JarBuilder.signJar(\"hello\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/SignedJar.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,6 @@\n+Manifest-Version: 1.0\n+Created-By: 1.9.0-internal (Oracle Corporation)\n+\n+Name: pkg\/\n+Sealed: true\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/pkg\/package_seal.mf","additions":6,"deletions":0,"binary":false,"changes":6,"status":"added"}]}