{"files":[{"patch":"@@ -282,1 +282,0 @@\n-\/\/ Pointer beyond the \"oldest\/deepest\" BasicObjectLock on stack.\n","filename":"src\/hotspot\/cpu\/arm\/frame_arm.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -457,1 +457,0 @@\n-\/\/ Pointer beyond the \"oldest\/deepest\" BasicObjectLock on stack.\n","filename":"src\/hotspot\/cpu\/ppc\/frame_ppc.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1985,1 +1985,1 @@\n-\/\/ Add a InterpMonitorElem to stack (see frame_sparc.hpp).\n+\/\/ Add a monitor (see frame_ppc.hpp).\n","filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4109,1 +4109,0 @@\n-\n@@ -4112,2 +4111,2 @@\n-  Register Rcurrent_monitor  = R11_scratch1,\n-           Rcurrent_obj      = R12_scratch2,\n+  Register Rcurrent_monitor  = R3_ARG1,\n+           Rcurrent_obj      = R4_ARG2,\n@@ -4115,4 +4114,13 @@\n-           Rscratch1         = R3_ARG1,\n-           Rscratch2         = R4_ARG2,\n-           Rscratch3         = R5_ARG3,\n-           Rcurrent_obj_addr = R6_ARG4;\n+           Rscratch1         = R11_scratch1,\n+           Rscratch2         = R12_scratch2,\n+           Rbot              = R5_ARG3,\n+           Rfree_slot        = R6_ARG4;\n+\n+  Label Lfound, Lallocate_new;\n+\n+  __ ld(Rscratch1, _abi0(callers_sp), R1_SP); \/\/ load FP\n+  __ li(Rfree_slot, 0); \/\/ Points to free slot or null.\n+\n+  \/\/ Set up search loop - start with topmost monitor.\n+  __ mr(Rcurrent_monitor, R26_monitor);\n+  __ addi(Rbot, Rscratch1, -frame::ijava_state_size);\n@@ -4122,1 +4130,1 @@\n-  __ null_check_throw(Robj_to_lock, -1, R11_scratch1);\n+  __ null_check_throw(Robj_to_lock, -1, Rscratch1);\n@@ -4124,2 +4132,3 @@\n-  \/\/ Try to acquire a lock on the object.\n-  \/\/ Repeat until succeeded (i.e., until monitorenter returns true).\n+  \/\/ Check if any slot is present => short cut to allocation if not.\n+  __ cmpld(CCR0, Rcurrent_monitor, Rbot);\n+  __ beq(CCR0, Lallocate_new);\n@@ -4129,4 +4138,2 @@\n-  Label Lfound, Lexit, Lallocate_new;\n-  ConditionRegister found_free_slot = CCR0,\n-                    found_same_obj  = CCR1,\n-                    reached_limit   = CCR6;\n+  \/\/ Note: The order of the monitors is important for C2 OSR which derives the\n+  \/\/       unlock order from it (see comments for interpreter_frame_monitor_*).\n@@ -4134,5 +4141,1 @@\n-    Label Lloop;\n-    Register Rlimit = Rcurrent_monitor;\n-\n-    \/\/ Set up search loop - start with topmost monitor.\n-    __ addi(Rcurrent_obj_addr, R26_monitor, in_bytes(BasicObjectLock::obj_offset()));\n+    Label Lloop, LnotFree, Lexit;\n@@ -4140,2 +4143,6 @@\n-    __ ld(Rlimit, 0, R1_SP);\n-    __ addi(Rlimit, Rlimit, - (frame::ijava_state_size + frame::interpreter_frame_monitor_size_in_bytes() - in_bytes(BasicObjectLock::obj_offset()))); \/\/ Monitor base\n+    __ bind(Lloop);\n+    __ ld(Rcurrent_obj, in_bytes(BasicObjectLock::obj_offset()), Rcurrent_monitor);\n+    \/\/ Exit if current entry is for same object; this guarantees, that new monitor\n+    \/\/ used for recursive lock is above the older one.\n+    __ cmpd(CCR0, Rcurrent_obj, Robj_to_lock);\n+    __ beq(CCR0, Lexit); \/\/ recursive locking\n@@ -4143,3 +4150,4 @@\n-    \/\/ Check if any slot is present => short cut to allocation if not.\n-    __ cmpld(reached_limit, Rcurrent_obj_addr, Rlimit);\n-    __ bgt(reached_limit, Lallocate_new);\n+    __ cmpdi(CCR0, Rcurrent_obj, 0);\n+    __ bne(CCR0, LnotFree);\n+    __ mr(Rfree_slot, Rcurrent_monitor); \/\/ remember free slot closest to the bottom\n+    __ bind(LnotFree);\n@@ -4147,19 +4155,4 @@\n-    \/\/ Pre-load topmost slot.\n-    __ ld(Rcurrent_obj, 0, Rcurrent_obj_addr);\n-    __ addi(Rcurrent_obj_addr, Rcurrent_obj_addr, frame::interpreter_frame_monitor_size_in_bytes());\n-    \/\/ The search loop.\n-    __ bind(Lloop);\n-    \/\/ Found free slot?\n-    __ cmpdi(found_free_slot, Rcurrent_obj, 0);\n-    \/\/ Is this entry for same obj? If so, stop the search and take the found\n-    \/\/ free slot or allocate a new one to enable recursive locking.\n-    __ cmpd(found_same_obj, Rcurrent_obj, Robj_to_lock);\n-    __ cmpld(reached_limit, Rcurrent_obj_addr, Rlimit);\n-    __ beq(found_free_slot, Lexit);\n-    __ beq(found_same_obj, Lallocate_new);\n-    __ bgt(reached_limit, Lallocate_new);\n-    \/\/ Check if last allocated BasicLockObj reached.\n-    __ ld(Rcurrent_obj, 0, Rcurrent_obj_addr);\n-    __ addi(Rcurrent_obj_addr, Rcurrent_obj_addr, frame::interpreter_frame_monitor_size_in_bytes());\n-    \/\/ Next iteration if unchecked BasicObjectLocks exist on the stack.\n-    __ b(Lloop);\n+    __ addi(Rcurrent_monitor, Rcurrent_monitor, frame::interpreter_frame_monitor_size_in_bytes());\n+    __ cmpld(CCR0, Rcurrent_monitor, Rbot);\n+    __ bne(CCR0, Lloop);\n+    __ bind(Lexit);\n@@ -4170,5 +4163,2 @@\n-  __ bind(Lexit);\n-\n-  __ addi(Rcurrent_monitor, Rcurrent_obj_addr, -(frame::interpreter_frame_monitor_size_in_bytes()) - in_bytes(BasicObjectLock::obj_offset()));\n-  __ addi(Rcurrent_obj_addr, Rcurrent_obj_addr, - frame::interpreter_frame_monitor_size_in_bytes());\n-  __ b(Lfound);\n+  __ cmpdi(CCR0, Rfree_slot, 0);\n+  __ bne(CCR0, Lfound);\n@@ -4177,1 +4167,0 @@\n-  __ align(32, 12);\n@@ -4180,2 +4169,1 @@\n-  __ mr(Rcurrent_monitor, R26_monitor);\n-  __ addi(Rcurrent_obj_addr, R26_monitor, in_bytes(BasicObjectLock::obj_offset()));\n+  __ mr(Rfree_slot, R26_monitor);\n@@ -4191,2 +4179,2 @@\n-  __ std(Robj_to_lock, 0, Rcurrent_obj_addr);\n-  __ lock_object(Rcurrent_monitor, Robj_to_lock);\n+  __ std(Robj_to_lock, in_bytes(BasicObjectLock::obj_offset()), Rfree_slot);\n+  __ lock_object(Rfree_slot, Robj_to_lock);\n@@ -4206,2 +4194,2 @@\n-  Register Rcurrent_monitor  = R11_scratch1,\n-           Rcurrent_obj      = R12_scratch2,\n+  Register Rcurrent_monitor  = R3_ARG1,\n+           Rcurrent_obj      = R4_ARG2,\n@@ -4209,2 +4197,3 @@\n-           Rcurrent_obj_addr = R3_ARG1,\n-           Rlimit            = R4_ARG2;\n+           Rscratch          = R11_scratch1,\n+           Rbot              = R12_scratch2;\n+\n@@ -4213,3 +4202,5 @@\n-  \/\/ Check corner case: unbalanced monitorEnter \/ Exit.\n-  __ ld(Rlimit, 0, R1_SP);\n-  __ addi(Rlimit, Rlimit, - (frame::ijava_state_size + frame::interpreter_frame_monitor_size_in_bytes())); \/\/ Monitor base\n+  __ ld(Rscratch, _abi0(callers_sp), R1_SP); \/\/ load FP\n+\n+  \/\/ Set up search loop - start with topmost monitor.\n+  __ mr(Rcurrent_monitor, R26_monitor);\n+  __ addi(Rbot, Rscratch, -frame::ijava_state_size);\n@@ -4218,1 +4209,1 @@\n-  __ null_check_throw(Robj_to_lock, -1, R11_scratch1);\n+  __ null_check_throw(Robj_to_lock, -1, Rscratch);\n@@ -4220,2 +4211,3 @@\n-  __ cmpld(CCR0, R26_monitor, Rlimit);\n-  __ bgt(CCR0, Lillegal_monitor_state);\n+  \/\/ Check corner case: unbalanced monitorEnter \/ Exit.\n+  __ cmpld(CCR0, Rcurrent_monitor, Rbot);\n+  __ beq(CCR0, Lillegal_monitor_state);\n@@ -4227,6 +4219,0 @@\n-    \/\/ Start with topmost monitor.\n-    __ addi(Rcurrent_obj_addr, R26_monitor, in_bytes(BasicObjectLock::obj_offset()));\n-    __ addi(Rlimit, Rlimit, in_bytes(BasicObjectLock::obj_offset()));\n-    __ ld(Rcurrent_obj, 0, Rcurrent_obj_addr);\n-    __ addi(Rcurrent_obj_addr, Rcurrent_obj_addr, frame::interpreter_frame_monitor_size_in_bytes());\n-\n@@ -4234,0 +4220,1 @@\n+    __ ld(Rcurrent_obj, in_bytes(BasicObjectLock::obj_offset()), Rcurrent_monitor);\n@@ -4238,8 +4225,3 @@\n-    \/\/ Check if last allocated BasicLockObj reached.\n-\n-    __ ld(Rcurrent_obj, 0, Rcurrent_obj_addr);\n-    __ cmpld(CCR0, Rcurrent_obj_addr, Rlimit);\n-    __ addi(Rcurrent_obj_addr, Rcurrent_obj_addr, frame::interpreter_frame_monitor_size_in_bytes());\n-\n-    \/\/ Next iteration if unchecked BasicObjectLocks exist on the stack.\n-    __ ble(CCR0, Lloop);\n+    __ addi(Rcurrent_monitor, Rcurrent_monitor, frame::interpreter_frame_monitor_size_in_bytes());\n+    __ cmpld(CCR0, Rcurrent_monitor, Rbot);\n+    __ bne(CCR0, Lloop);\n@@ -4255,2 +4237,0 @@\n-  __ addi(Rcurrent_monitor, Rcurrent_obj_addr,\n-          -(frame::interpreter_frame_monitor_size_in_bytes()) - in_bytes(BasicObjectLock::obj_offset()));\n","filename":"src\/hotspot\/cpu\/ppc\/templateTable_ppc_64.cpp","additions":59,"deletions":79,"binary":false,"changes":138,"status":"modified"},{"patch":"@@ -675,1 +675,0 @@\n-\/\/ Pointer beyond the \"oldest\/deepest\" BasicObjectLock on stack.\n","filename":"src\/hotspot\/cpu\/s390\/frame_s390.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -85,1 +85,0 @@\n-\/\/ Pointer beyond the \"oldest\/deepest\" BasicObjectLock on stack.\n","filename":"src\/hotspot\/cpu\/zero\/frame_zero.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2023 SAP SE. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8316746\n+ * @summary During OSR, locks get transferred from interpreter frame.\n+ *          Check that unlocking 2 such locks works in the OSR compiled nmethod.\n+ *          Some platforms verify that the unlocking happens in the corrent order.\n+ *\n+ * @run main\/othervm -Xbatch TestUnlockOSR\n+ *\/\n+\n+public class TestUnlockOSR {\n+    static void test_method(Object a, Object b, int limit) {\n+        synchronized(a) { \/\/ allocate space for monitors\n+            synchronized(b) {\n+            }\n+        } \/\/ free space to test allocation in reused space\n+        synchronized(a) { \/\/ reuse the space\n+            synchronized(b) {\n+                for (int i = 0; i < limit; i++) {}\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        Object a = new TestUnlockOSR(),\n+               b = new TestUnlockOSR();\n+        \/\/ avoid uncommon trap before last unlocks\n+        for (int i = 0; i < 100; i++) { test_method(a, b, 0); }\n+        \/\/ trigger OSR\n+        test_method(a, b, 100000);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/locks\/TestUnlockOSR.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"}]}