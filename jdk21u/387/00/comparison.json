{"files":[{"patch":"@@ -37,0 +37,2 @@\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n@@ -158,0 +160,4 @@\n+    \/**\n+     * The failure reason message when the user didn't provide one.\n+     *\/\n+    private static final String EMPTY_REASON = \"(no reason provided)\";\n@@ -160,1 +166,1 @@\n-    private static final Timer timer = new Timer(0, null);\n+\n@@ -163,3 +169,11 @@\n-    private static volatile boolean failed;\n-    private static volatile boolean timeout;\n-    private static volatile String testFailedReason;\n+    private static TimeoutHandler timeoutHandler;\n+\n+    \/**\n+     * The description of why the test fails.\n+     * <p>\n+     * Note: <strong>do not use<\/strong> this field directly,\n+     * use the {@link #setFailureReason(String) setFailureReason} and\n+     * {@link #getFailureReason() getFailureReason} methods to modify and\n+     * to read its value.\n+     *\/\n+    private static String failureReason;\n@@ -322,0 +336,4 @@\n+        JLabel testTimeoutLabel = new JLabel(\"\", JLabel.CENTER);\n+        timeoutHandler = new TimeoutHandler(testTimeoutLabel, testTimeOut);\n+        frame.add(testTimeoutLabel, BorderLayout.NORTH);\n+\n@@ -327,19 +345,0 @@\n-        long tTimeout = TimeUnit.MINUTES.toMillis(testTimeOut);\n-\n-        final JLabel testTimeoutLabel = new JLabel(String.format(\"Test \" +\n-                \"timeout: %s\", convertMillisToTimeStr(tTimeout)), JLabel.CENTER);\n-        final long startTime = System.currentTimeMillis();\n-        timer.setDelay(1000);\n-        timer.addActionListener((e) -> {\n-            long leftTime = tTimeout - (System.currentTimeMillis() - startTime);\n-            if ((leftTime < 0) || failed) {\n-                timer.stop();\n-                testFailedReason = FAILURE_REASON\n-                                   + \"Timeout User did not perform testing.\";\n-                timeout = true;\n-                latch.countDown();\n-            }\n-            testTimeoutLabel.setText(String.format(\"Test timeout: %s\", convertMillisToTimeStr(leftTime)));\n-        });\n-        timer.start();\n-        frame.add(testTimeoutLabel, BorderLayout.NORTH);\n@@ -351,1 +350,1 @@\n-            timer.stop();\n+            timeoutHandler.stop();\n@@ -356,2 +355,2 @@\n-            getFailureReason();\n-            timer.stop();\n+            requestFailureReason();\n+            timeoutHandler.stop();\n@@ -483,0 +482,47 @@\n+    private static final class TimeoutHandler implements ActionListener {\n+        private final long endTime;\n+\n+        private final Timer timer;\n+\n+        private final JLabel label;\n+\n+        public TimeoutHandler(final JLabel label, final long testTimeOut) {\n+            endTime = System.currentTimeMillis() + TimeUnit.MINUTES.toMillis(testTimeOut);\n+\n+            this.label = label;\n+\n+            timer = new Timer(1000, this);\n+            timer.start();\n+            updateTime(testTimeOut);\n+        }\n+\n+        @Override\n+        public void actionPerformed(ActionEvent e) {\n+            long leftTime = endTime - System.currentTimeMillis();\n+            if (leftTime < 0) {\n+                timer.stop();\n+                setFailureReason(FAILURE_REASON\n+                                 + \"Timeout - User did not perform testing.\");\n+                latch.countDown();\n+            }\n+            updateTime(leftTime);\n+        }\n+\n+        private void updateTime(final long leftTime) {\n+            if (leftTime < 0) {\n+                label.setText(\"Test timeout: 00:00:00\");\n+                return;\n+            }\n+            long hours = leftTime \/ 3_600_000;\n+            long minutes = (leftTime - hours * 3_600_000) \/ 60_000;\n+            long seconds = (leftTime - hours * 3_600_000 - minutes * 60_000) \/ 1_000;\n+            label.setText(String.format(\"Test timeout: %02d:%02d:%02d\",\n+                                        hours, minutes, seconds));\n+        }\n+\n+        public void stop() {\n+            timer.stop();\n+        }\n+    }\n+\n+\n@@ -486,3 +532,2 @@\n-            testFailedReason = FAILURE_REASON\n-                               + \"User closed a window\";\n-            failed = true;\n+            setFailureReason(FAILURE_REASON\n+                             + \"User closed a window\");\n@@ -582,3 +627,11 @@\n-    private static String convertMillisToTimeStr(long millis) {\n-        if (millis < 0) {\n-            return \"00:00:00\";\n+    \/**\n+     * Sets the failure reason which describes why the test fails.\n+     * This method ensures the {@code failureReason} field does not change\n+     * after it's set to a non-{@code null} value.\n+     * @param reason the description of why the test fails\n+     * @throws IllegalArgumentException if the {@code reason} parameter\n+     *         is {@code null}\n+     *\/\n+    private static synchronized void setFailureReason(final String reason) {\n+        if (reason == null) {\n+            throw new IllegalArgumentException(\"The failure reason must not be null\");\n@@ -586,4 +639,10 @@\n-        long hours = millis \/ 3_600_000;\n-        long minutes = (millis - hours * 3_600_000) \/ 60_000;\n-        long seconds = (millis - hours * 3_600_000 - minutes * 60_000) \/ 1_000;\n-        return String.format(\"%02d:%02d:%02d\", hours, minutes, seconds);\n+        if (failureReason == null) {\n+            failureReason = reason;\n+        }\n+    }\n+\n+    \/**\n+     * {@return the description of why the test fails}\n+     *\/\n+    private static synchronized String getFailureReason() {\n+        return failureReason;\n@@ -610,6 +669,3 @@\n-        if (timeout) {\n-            throw new RuntimeException(testFailedReason);\n-        }\n-\n-        if (failed) {\n-            throw new RuntimeException(\"Test failed! : \" + testFailedReason);\n+        String failure = getFailureReason();\n+        if (failure != null) {\n+            throw new RuntimeException(failure);\n@@ -622,10 +678,1 @@\n-     * Disposes of all the windows. It disposes of the test instruction frame\n-     * and all other windows added via {@link #addTestWindow(Window)}.\n-     *\/\n-    private static synchronized void disposeWindows() {\n-        windowList.forEach(Window::dispose);\n-    }\n-\n-    \/**\n-     * Read the test failure reason and add the reason to the test result\n-     * example in the jtreg .jtr file.\n+     * Requests the description of the test failure reason from the tester.\n@@ -633,1 +680,1 @@\n-    private static void getFailureReason() {\n+    private static void requestFailureReason() {\n@@ -641,1 +688,3 @@\n-            testFailedReason = FAILURE_REASON + jTextArea.getText();\n+            String text = jTextArea.getText();\n+            setFailureReason(FAILURE_REASON\n+                             + (!text.isEmpty() ? text : EMPTY_REASON));\n@@ -656,1 +705,4 @@\n-        failed = true;\n+        \/\/ Ensure the test fails even if the dialog is closed\n+        \/\/ without clicking the OK button\n+        setFailureReason(FAILURE_REASON + EMPTY_REASON);\n+\n@@ -661,0 +713,8 @@\n+    \/**\n+     * Disposes of all the windows. It disposes of the test instruction frame\n+     * and all other windows added via {@link #addTestWindow(Window)}.\n+     *\/\n+    private static synchronized void disposeWindows() {\n+        windowList.forEach(Window::dispose);\n+    }\n+\n@@ -830,2 +890,1 @@\n-        failed = true;\n-        testFailedReason = FAILURE_REASON + reason;\n+        setFailureReason(FAILURE_REASON + reason);\n","filename":"test\/jdk\/java\/awt\/regtesthelpers\/PassFailJFrame.java","additions":116,"deletions":57,"binary":false,"changes":173,"status":"modified"}]}