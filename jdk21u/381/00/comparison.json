{"files":[{"patch":"@@ -1881,0 +1881,86 @@\n+void MacroAssembler::cvtss2sd(XMMRegister dst, XMMRegister src) {\n+  if ((UseAVX > 0) && (dst != src)) {\n+    xorpd(dst, dst);\n+  }\n+  Assembler::cvtss2sd(dst, src);\n+}\n+\n+void MacroAssembler::cvtss2sd(XMMRegister dst, Address src) {\n+  if (UseAVX > 0) {\n+    xorpd(dst, dst);\n+  }\n+  Assembler::cvtss2sd(dst, src);\n+}\n+\n+void MacroAssembler::cvtsd2ss(XMMRegister dst, XMMRegister src) {\n+  if ((UseAVX > 0) && (dst != src)) {\n+    xorps(dst, dst);\n+  }\n+  Assembler::cvtsd2ss(dst, src);\n+}\n+\n+void MacroAssembler::cvtsd2ss(XMMRegister dst, Address src) {\n+  if (UseAVX > 0) {\n+    xorps(dst, dst);\n+  }\n+  Assembler::cvtsd2ss(dst, src);\n+}\n+\n+void MacroAssembler::cvtsi2sdl(XMMRegister dst, Register src) {\n+  if (UseAVX > 0) {\n+    xorpd(dst, dst);\n+  }\n+  Assembler::cvtsi2sdl(dst, src);\n+}\n+\n+void MacroAssembler::cvtsi2sdl(XMMRegister dst, Address src) {\n+  if (UseAVX > 0) {\n+    xorpd(dst, dst);\n+  }\n+  Assembler::cvtsi2sdl(dst, src);\n+}\n+\n+void MacroAssembler::cvtsi2ssl(XMMRegister dst, Register src) {\n+  if (UseAVX > 0) {\n+    xorps(dst, dst);\n+  }\n+  Assembler::cvtsi2ssl(dst, src);\n+}\n+\n+void MacroAssembler::cvtsi2ssl(XMMRegister dst, Address src) {\n+  if (UseAVX > 0) {\n+    xorps(dst, dst);\n+  }\n+  Assembler::cvtsi2ssl(dst, src);\n+}\n+\n+#ifdef _LP64\n+void MacroAssembler::cvtsi2sdq(XMMRegister dst, Register src) {\n+  if (UseAVX > 0) {\n+    xorpd(dst, dst);\n+  }\n+  Assembler::cvtsi2sdq(dst, src);\n+}\n+\n+void MacroAssembler::cvtsi2sdq(XMMRegister dst, Address src) {\n+  if (UseAVX > 0) {\n+    xorpd(dst, dst);\n+  }\n+  Assembler::cvtsi2sdq(dst, src);\n+}\n+\n+void MacroAssembler::cvtsi2ssq(XMMRegister dst, Register src) {\n+  if (UseAVX > 0) {\n+    xorps(dst, dst);\n+  }\n+  Assembler::cvtsi2ssq(dst, src);\n+}\n+\n+void MacroAssembler::cvtsi2ssq(XMMRegister dst, Address src) {\n+  if (UseAVX > 0) {\n+    xorps(dst, dst);\n+  }\n+  Assembler::cvtsi2ssq(dst, src);\n+}\n+#endif  \/\/ _LP64\n+\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":86,"deletions":0,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -802,0 +802,17 @@\n+\n+  \/\/ cvt instructions\n+  void cvtss2sd(XMMRegister dst, XMMRegister src);\n+  void cvtss2sd(XMMRegister dst, Address src);\n+  void cvtsd2ss(XMMRegister dst, XMMRegister src);\n+  void cvtsd2ss(XMMRegister dst, Address src);\n+  void cvtsi2sdl(XMMRegister dst, Register src);\n+  void cvtsi2sdl(XMMRegister dst, Address src);\n+  void cvtsi2ssl(XMMRegister dst, Register src);\n+  void cvtsi2ssl(XMMRegister dst, Address src);\n+#ifdef _LP64\n+  void cvtsi2sdq(XMMRegister dst, Register src);\n+  void cvtsi2sdq(XMMRegister dst, Address src);\n+  void cvtsi2ssq(XMMRegister dst, Register src);\n+  void cvtsi2ssq(XMMRegister dst, Address src);\n+#endif\n+\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -10943,1 +10943,1 @@\n-\n+  effect(TEMP dst);\n@@ -10965,1 +10965,1 @@\n-\n+  effect(TEMP dst);\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,142 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.vm.compiler;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+@State(Scope.Thread)\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Warmup(iterations = 5, time = 5, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 5, timeUnit = TimeUnit.SECONDS)\n+@Fork(value = 3)\n+public class ComputePI {\n+\n+  @Benchmark\n+  public double compute_pi_int_dbl() {\n+    double pi = 4.0;\n+    boolean sign = false;\n+\n+    for (int i = 3; i < 1000; i += 2) {\n+      if (sign) {\n+        pi += 4.0 \/ i;\n+      } else {\n+        pi -= 4.0 \/ i;\n+      }\n+      sign = !sign;\n+    }\n+    return pi;\n+  }\n+\n+  @Benchmark\n+  public double compute_pi_int_flt() {\n+    float pi = 4.0f;\n+    boolean sign = false;\n+\n+    for (int i = 3; i < 1000; i += 2) {\n+      if (sign) {\n+        pi += 4.0f \/ i;\n+      } else {\n+        pi -= 4.0f \/ i;\n+      }\n+      sign = !sign;\n+    }\n+    return pi;\n+  }\n+\n+  @Benchmark\n+  public double compute_pi_long_dbl() {\n+    double pi = 4.0;\n+    boolean sign = false;\n+\n+    for (long i = 3; i < 1000; i += 2) {\n+      if (sign) {\n+        pi += 4.0 \/ i;\n+      } else {\n+        pi -= 4.0 \/ i;\n+      }\n+      sign = !sign;\n+    }\n+    return pi;\n+  }\n+\n+  @Benchmark\n+  public double compute_pi_long_flt() {\n+    float pi = 4.0f;\n+    boolean sign = false;\n+\n+    for (long i = 3; i < 1000; i += 2) {\n+      if (sign) {\n+        pi += 4.0f \/ i;\n+      } else {\n+        pi -= 4.0f \/ i;\n+      }\n+      sign = !sign;\n+    }\n+    return pi;\n+  }\n+\n+  @Benchmark\n+  public double compute_pi_flt_dbl() {\n+    double pi = 4.0;\n+    boolean sign = false;\n+\n+    for (float i = 3.0f; i < 1000.0f; i += 2.0f) {\n+      if (sign) {\n+        pi += 4.0 \/ i;\n+      } else {\n+        pi -= 4.0 \/ i;\n+      }\n+      sign = !sign;\n+    }\n+    return pi;\n+  }\n+\n+  @Benchmark\n+  public double compute_pi_dbl_flt() {\n+    float pi = 4.0f;\n+    boolean sign = false;\n+\n+    for (float i = 3.0f; i < 1000.0f; i += 2.0f) {\n+      if (sign) {\n+        pi += 4.0f \/ i;\n+      } else {\n+        pi -= 4.0f \/ i;\n+      }\n+      sign = !sign;\n+    }\n+    return pi;\n+  }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/x86\/ComputePI.java","additions":142,"deletions":0,"binary":false,"changes":142,"status":"added"}]}