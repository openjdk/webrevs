{"files":[{"patch":"@@ -67,2 +67,5 @@\n-  \/\/ unextended sp must be within the stack and above or equal sp\n-  if (!thread->is_in_stack_range_incl(unextended_sp, sp)) {\n+  \/\/ unextended sp must be within the stack\n+  \/\/ Note: sp can be greater than unextended_sp in the case of\n+  \/\/ interpreted -> interpreted calls that go through a method handle linker,\n+  \/\/ since those pop the last argument (the appendix) from the stack.\n+  if (!thread->is_in_stack_range_incl(unextended_sp, sp - Interpreter::stackElementSize)) {\n","filename":"src\/hotspot\/cpu\/x86\/frame_x86.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -233,1 +233,34 @@\n-  return strcmp(name.get(), \"checkAsyncGetCallTraceCall\") == 0;\n+  if (strcmp(name.get(), \"checkAsyncGetCallTraceCall\") != 0) {\n+    fprintf(stderr, \"Name is not checkAsyncGetCallTraceCall: %s\\n\", name.get());\n+    return false;\n+  }\n+\n+  \/\/ AsyncGetCallTrace and GetStackTrace should return comparable frames\n+  \/\/ so we obtain the frames using GetStackTrace and compare them.\n+\n+  jthread thread;\n+  jvmti->GetCurrentThread(&thread);\n+  jvmtiFrameInfo gstFrames[MAX_DEPTH];\n+  jint gstCount = 0;\n+\n+  jvmti->GetStackTrace(thread, 0, MAX_DEPTH, gstFrames, &gstCount);\n+\n+  if (gstCount != trace.num_frames) {\n+    fprintf(stderr, \"GetStackTrace and AsyncGetCallTrace return different number of frames: %d vs %d)\", gstCount, trace.num_frames);\n+    return false;\n+  }\n+\n+  for (int i = 0; i < trace.num_frames; ++i) {\n+    if (trace.frames[i].lineno == -3) {\n+      if (gstFrames[i].location != -1) {\n+        fprintf(stderr, \"%d: ASGCT found native frame but GST did not\\n\", i);\n+        return false;\n+      }\n+    } else {\n+      if (gstFrames[i].method != trace.frames[i].method_id) {\n+        fprintf(stderr, \"%d: method_id mismatch: %p vs %p\\n\", i, gstFrames[i].method, trace.frames[i].method_id);\n+        return false;\n+      }\n+    }\n+  }\n+  return true;\n","filename":"test\/hotspot\/jtreg\/serviceability\/AsyncGetCallTrace\/libAsyncGetCallTraceTest.cpp","additions":34,"deletions":1,"binary":false,"changes":35,"status":"modified"}]}